import * as crypto from 'crypto'; 
import * as oauth from 'oauth';
import * as EasyXml from 'easyxml';
import * as xml2js from 'xml2js';
import * as inflect from 'inflect';

var XERO_BASE_URL = 'https://api.xero.com';
var XERO_API_URL = XERO_BASE_URL + '/api.xro/2.0';
export class Xero2 {
  XERO_BASE_URL = XERO_BASE_URL;
  XERO_API_URL = XERO_API_URL;
  public parser;
  public oa;
  constructor (public key, public secret, rsa_key, showXmlAttributes?, public customHeaders = {}) {
    this.parser = new xml2js.Parser({explicitArray: false, ignoreAttrs: showXmlAttributes !== undefined ? (showXmlAttributes ? false : true) : true, async: true});
    this.oa = new oauth.OAuth(null, null, key, secret, '1.0', null, "PLAINTEXT", null, customHeaders);
    this.oa._signatureMethod = "RSA-SHA1"
    this.oa._createSignature = function(signatureBase, tokenSecret) {
        let output_format = 'base64';
        return crypto.createSign("RSA-SHA1").update(signatureBase).sign(rsa_key, output_format);
    }
  }
  processXML (callback, err, xml, res) {
      if (err) {
          return callback(err);
      }
      this.parser.parseString(xml, function(err, json) {
          if (err) return callback(err);
          if (json && json.Response && json.Response.Status !== 'OK') {
              return callback(json, res);
          } else {
              return callback(null, json, res);
          }
      });
    }
    processJSON (callback, err, json, res) {
      if (err) {
        return callback(err);
      }
      return callback(null, JSON.parse(json), res);
    }
    process (callback, err, xml, res) {
      if (this.customHeaders.Accept === 'application/json') return this.processJSON(callback, err, xml, res)
      return this.processXML(callback, err, xml, res)
    }
    call (method, path, body, callback) {
      var post_body = null;
      var content_type = null;
      if (method && method !== 'GET' && body) {
        if (Buffer.isBuffer(body)) {
            post_body = body;
        } else {
            var root = path.match(/([^\/\?]+)/)[1];
            post_body = new EasyXml({rootElement: inflect.singularize(root), rootArray: root, manifest: true}).render(body);
            content_type = 'application/xml';
        }
      }
    return this.oa._performSecureRequest(this.key, this.secret, method, XERO_API_URL + path, null, post_body, content_type, callback ? this.process.bind(this, callback) : null);
   }
}
