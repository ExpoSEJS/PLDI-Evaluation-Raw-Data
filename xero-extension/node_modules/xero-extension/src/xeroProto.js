"use strict";
var path = require('path');
var Paths = require('./paths');
var queryString = require('query-string');
var Promise = require('bluebird');

var XeroProto = function (endpoint, config) {
	this.endpoint = endpoint;
	Paths.call(this);
	Object.defineProperties(this, {
		'findById': {
			value: function (id) {
				var self = this;
				return new Promise(function(resolve, reject){
					try {
						self.get.call(self, path.join('/', self.endpoint, id), null, function(err, json){
              if (err) {
								if (err.statusCode === 404) resolve(undefined);
                else {
                  throw new Error(err)
                }
							}
							else {
								resolve(json.Response[self.endpoint][endpoint.slice(0, -1)]);
							}
						});
					}
					catch (err) {
						reject(err);
					}
				});
			}
		},
		'findAll': {
			value: function (opts) {
				var self = this;
				return new Promise(function(resolve, reject){


					try {
						var where = opts.where || {};
						var modified = opts.modified || null;
							self.get.call(self, path.join('/', self.endpoint) + queryString.stringify(where), modified, function(err, json){
							if (err) {
								throw err;
							}
							else {
								if (endpoint.charAt(endpoint.length - 1) === 's') {
									return resolve(json.Response[self.endpoint][endpoint.slice(0, -1)]);
								}
								else {
									resolve(json.Response);
								}


							}
						});
					}
					catch (err) {
						reject(err);
					}
				});
			}
		},
		'create': {
			value: function (body) {
				var self = this;
				return new Promise(function(resolve, reject){
					try {
						self.put.call(self, path.join('/', endpoint), body, function (err, json) {
              if (err) {

								reject(err);
							}
							else{
								resolve(json.Response[self.endpoint]);
							}
						});
					}
					catch (err) {
						reject(err);
					}
				});

			}
		},
		'bulkCreate': {
			value: function (body) {
				var self = this;

				return new Promise(function(resolve, reject){
					try {
						self.put.call(self, path.join('/', self.endpoint + '?summarizeErrors=false'), body, function (err, json) {
							if (err) {
								throw err;
							}
							else{
								resolve(json.Response[self.endpoint]);
							}
						});
					}
					catch (err) {
						reject(err);
					}
				});

			}
		},
		'createOrUpdate': {
			value: function (body) {

				var self = this;
				return new Promise(function(resolve, reject){
					try {
    					self.post.call(self,path.join('/', self.endpoint), body, function (err, json) {
              if (err) {
                if (err.statusCode === 400) resolve(undefined);
                else {
                  throw new Error(err)
                }
              }
							else{
								resolve(json.Response[self.endpoint][self.endpoint.slice(0,-1)]);
							}
						});
					}
					catch (err) {
						reject(err);
					}
				});

			}
		},
		'bulkCreateOrUpdate': {
			value: function (body) {
				var self = this;
				return new Promise(function(resolve, reject){
					try {
						self.post(path.join('/', self.endpoint), body, function (err, json) {
							if (err) {
								throw err;
							}
							else{
								resolve(json.Response[self.endpoint]);
							}
						});
					}
					catch (err) {
						reject(err);
					}
				});

			}
		}
	});
};
XeroProto.prototype = Object.create(Paths.prototype);
XeroProto.prototype.constructor = XeroProto;
module.exports = XeroProto;
