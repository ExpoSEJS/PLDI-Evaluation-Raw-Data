"use strict";
var crypto = require('crypto');
var oauth = require('oauth');
var EasyXml = require('easyxml');
var xml2js = require('xml2js');
var inflect = require('inflect');
var XERO_BASE_URL = 'https://api.xero.com';
var XERO_API_URL = XERO_BASE_URL + '/api.xro/2.0';
var Xero2 = (function () {
    function Xero2(key, secret, rsa_key, showXmlAttributes, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        this.key = key;
        this.secret = secret;
        this.customHeaders = customHeaders;
        this.XERO_BASE_URL = XERO_BASE_URL;
        this.XERO_API_URL = XERO_API_URL;
        this.parser = new xml2js.Parser({ explicitArray: false, ignoreAttrs: showXmlAttributes !== undefined ? (showXmlAttributes ? false : true) : true, async: true });
        this.oa = new oauth.OAuth(null, null, key, secret, '1.0', null, "PLAINTEXT", null, customHeaders);
        this.oa._signatureMethod = "RSA-SHA1";
        this.oa._createSignature = function (signatureBase, tokenSecret) {
            var output_format = 'base64';
            return crypto.createSign("RSA-SHA1").update(signatureBase).sign(rsa_key, output_format);
        };
    }
    Xero2.prototype.processXML = function (callback, err, xml, res) {
        if (err) {
            return callback(err);
        }
        this.parser.parseString(xml, function (err, json) {
            if (err)
                return callback(err);
            if (json && json.Response && json.Response.Status !== 'OK') {
                return callback(json, res);
            }
            else {
                return callback(null, json, res);
            }
        });
    };
    Xero2.prototype.processJSON = function (callback, err, json, res) {
        if (err) {
            return callback(err);
        }
        return callback(null, JSON.parse(json), res);
    };
    Xero2.prototype.process = function (callback, err, xml, res) {
        if (this.customHeaders.Accept === 'application/json')
            return this.processJSON(callback, err, xml, res);
        return this.processXML(callback, err, xml, res);
    };
    Xero2.prototype.call = function (method, path, body, callback) {
        var post_body = null;
        var content_type = null;
        if (method && method !== 'GET' && body) {
            if (Buffer.isBuffer(body)) {
                post_body = body;
            }
            else {
                var root = path.match(/([^\/\?]+)/)[1];
                post_body = new EasyXml({ rootElement: inflect.singularize(root), rootArray: root, manifest: true }).render(body);
                content_type = 'application/xml';
            }
        }
        return this.oa._performSecureRequest(this.key, this.secret, method, XERO_API_URL + path, null, post_body, content_type, callback ? this.process.bind(this, callback) : null);
    };
    return Xero2;
}());
exports.Xero2 = Xero2;
