var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Xero = require('xero');
var query_string_1 = require('query-string');
var Methods = (function (_super) {
    __extends(Methods, _super);
    function Methods(config, endpoint) {
        _super.call(this, config.key, config.secret, config.rsa_key);
        this.endpoint = endpoint;
    }
    Methods.prototype.get = function (path, options) {
        if (options === void 0) { options = {}; }
        var opts = {
            method: 'GET',
            path: path,
            singular: options.singular || false
        };
        return this.call(opts);
    };
    Methods.prototype.post = function (path, body, options) {
        if (options === void 0) { options = {}; }
        var opts = {
            method: 'POST',
            path: path,
            body: body,
            singular: options.singular || false
        };
        return this.call(opts);
    };
    Methods.prototype.put = function (path, body, options) {
        if (options === void 0) { options = {}; }
        var opts = {
            method: 'PUT',
            path: path,
            body: body,
            singular: options.singular || false
        };
        return this.call(opts);
    };
    Methods.prototype.patch = function (path, body, options) {
        if (options === void 0) { options = {}; }
        var opts = {
            method: 'PATCH',
            path: path,
            body: body,
            singular: options.singular || false
        };
        return this.call(opts);
    };
    Methods.prototype.delete = function (path, body, options) {
        if (options === void 0) { options = {}; }
        var opts = {
            method: 'DELETE',
            path: path,
            body: body,
            singular: options.singular || false
        };
        return this.call(opts);
    };
    Methods.prototype.call = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (options.headers)
                _this._setHeaders(options.headers);
            if (options.query)
                options.path = _this._setQuery(options.path, options.query);
            _super.prototype.call.call(_this, options.method, options.path, options.body, function (err, json) {
                if (err)
                    return reject(err);
                if (options.singular) {
                    resolve(json.Response[_this.endpoint][_this.endpoint.slice(0, -1)]);
                }
                else {
                    resolve(json.Response[_this.endpoint]);
                }
            });
        });
    };
    Methods.prototype._setHeaders = function (headers) {
        var _this = this;
        Object.keys(headers).forEach(function (key) {
            _super.prototype.oa._headers[key] = headers[key];
        });
    };
    Methods.prototype._setQuery = function (path, query) {
        return path + query_string_1.stringify(query);
    };
    return Methods;
})(Xero);
exports.Methods = Methods;
