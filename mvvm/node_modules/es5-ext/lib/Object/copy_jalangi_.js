J$.iids = {"8":[9,17,9,58],"9":[1,20,1,27],"10":[9,56,9,58],"16":[8,13,8,33],"17":[1,28,1,32],"18":[9,17,9,58],"24":[23,13,23,25],"25":[1,20,1,33],"26":[21,9,21,44],"32":[21,9,21,44],"33":[1,20,1,33],"41":[1,20,1,33],"49":[2,26,2,38],"57":[2,26,2,45],"65":[2,26,2,45],"73":[2,26,2,45],"81":[3,1,3,13],"89":[3,1,3,14],"97":[4,21,4,28],"105":[4,29,4,48],"113":[4,21,4,49],"121":[4,61,4,68],"129":[4,69,4,81],"137":[4,61,4,82],"145":[4,93,4,100],"153":[4,101,4,111],"161":[4,93,4,112],"169":[4,122,4,129],"177":[4,130,4,145],"185":[4,122,4,146],"193":[4,21,4,49],"201":[4,21,4,49],"209":[4,61,4,82],"217":[4,61,4,82],"225":[4,93,4,112],"233":[4,93,4,112],"241":[4,122,4,146],"249":[4,122,4,146],"257":[6,5,6,12],"265":[6,13,6,17],"273":[8,13,8,26],"281":[8,27,8,32],"289":[8,13,8,33],"297":[9,26,9,32],"305":[9,33,9,34],"313":[9,26,9,35],"321":[9,44,9,49],"329":[9,26,9,50],"331":[9,26,9,43],"337":[9,26,9,50],"345":[9,57,9,58],"353":[10,17,10,23],"361":[10,24,10,25],"369":[10,17,10,26],"377":[10,32,10,37],"385":[10,17,10,38],"387":[10,17,10,31],"393":[10,17,10,39],"401":[11,17,11,23],"409":[11,24,11,25],"417":[11,17,11,26],"425":[11,32,11,34],"433":[11,35,11,38],"441":[11,42,11,48],"449":[11,49,11,51],"457":[11,53,11,58],"465":[11,42,11,59],"473":[11,32,11,59],"481":[11,17,11,60],"483":[11,17,11,31],"489":[11,17,11,61],"497":[12,17,12,26],"505":[12,27,12,29],"513":[12,30,12,33],"521":[12,27,12,34],"529":[12,36,12,41],"537":[12,43,12,49],"545":[12,17,12,50],"553":[12,17,12,51],"561":[14,17,14,19],"569":[14,20,14,23],"577":[14,27,14,33],"585":[14,34,14,35],"593":[14,27,14,36],"601":[14,37,14,42],"609":[14,27,14,43],"617":[14,17,14,43],"625":[14,17,14,44],"633":[6,19,17,6],"641":[6,19,17,6],"649":[6,19,17,6],"657":[6,19,17,6],"665":[6,19,17,6],"673":[6,19,17,6],"681":[17,8,17,12],"689":[6,5,17,13],"697":[6,5,17,14],"705":[5,13,18,2],"713":[5,13,18,2],"721":[5,13,18,2],"729":[5,13,18,2],"737":[5,13,18,2],"745":[5,13,18,2],"753":[5,13,18,2],"761":[5,1,18,3],"769":[19,1,19,7],"777":[21,17,21,23],"785":[21,24,21,29],"793":[21,30,21,33],"801":[21,24,21,34],"809":[21,17,21,35],"817":[21,17,21,35],"825":[21,41,21,44],"833":[22,16,22,22],"841":[22,23,22,25],"849":[22,27,22,30],"857":[22,16,22,31],"865":[22,16,22,31],"873":[22,9,22,32],"881":[23,13,23,22],"889":[23,23,23,24],"897":[23,13,23,25],"905":[24,13,24,22],"913":[24,23,24,27],"921":[24,29,24,32],"929":[25,18,25,21],"937":[25,17,25,22],"945":[26,18,26,22],"953":[26,17,26,23],"961":[24,34,27,14],"969":[24,13,27,15],"977":[24,13,27,16],"985":[30,12,30,16],"993":[30,12,30,16],"1001":[30,5,30,17],"1009":[19,18,31,2],"1017":[19,18,31,2],"1025":[19,18,31,2],"1033":[19,18,31,2],"1041":[19,18,31,2],"1049":[19,1,31,2],"1057":[19,1,31,3],"1065":[1,1,31,3],"1073":[1,1,31,3],"1081":[1,1,31,3],"1089":[1,1,31,3],"1097":[1,1,31,3],"1105":[1,1,31,3],"1113":[1,1,31,3],"1121":[1,1,31,3],"1129":[9,13,15,14],"1137":[8,9,16,10],"1145":[6,19,17,6],"1153":[6,19,17,6],"1161":[5,13,18,2],"1169":[5,13,18,2],"1177":[23,9,28,10],"1185":[21,5,29,6],"1193":[19,18,31,2],"1201":[19,18,31,2],"1209":[1,1,31,3],"1217":[1,1,31,3],"nBranches":8,"originalCodeFileName":"/home/blake/ExpoSE/Targets/mvvm/node_modules/es5-ext/lib/Object/copy.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/mvvm/node_modules/es5-ext/lib/Object/copy_jalangi_.js","code":"'use strict';\n\nvar isPlainObject = require('./is-plain-object')\n  , forEach       = require('./for-each')\n  , extend        = require('./extend')\n  , value         = require('./valid-value')\n\n  , recursive;\n\nrecursive = function (to, from, cloned) {\n\tforEach(from, function (value, key) {\n\t\tvar index;\n\t\tif (isPlainObject(value)) {\n\t\t\tif ((index = cloned[0].indexOf(value)) === -1) {\n\t\t\t\tcloned[0].push(value);\n\t\t\t\tcloned[1].push(to[key] = extend({}, value));\n\t\t\t\trecursive(to[key], value, cloned);\n\t\t\t} else {\n\t\t\t\tto[key] = cloned[1][index];\n\t\t\t}\n\t\t}\n\t}, from);\n};\n\nmodule.exports = function (obj/*, deep*/) {\n\tvar copy;\n\tif ((copy = Object(value(obj))) === obj) {\n\t\tcopy = extend({}, obj);\n\t\tif (arguments[1]) {\n\t\t\trecursive(copy, obj, [[obj], [copy]]);\n\t\t}\n\t}\n\treturn copy;\n};\n"};
jalangiLabel638:
    while (true) {
        try {
            J$.Se(1065, '/home/blake/ExpoSE/Targets/mvvm/node_modules/es5-ext/lib/Object/copy_jalangi_.js', '/home/blake/ExpoSE/Targets/mvvm/node_modules/es5-ext/lib/Object/copy.js');
            J$.N(1073, '__secret__S$', __secret__S$, 0);
            J$.N(1081, '__secret__traits__', __secret__traits__, 0);
            J$.N(1089, 'isPlainObject', isPlainObject, 0);
            J$.N(1097, 'forEach', forEach, 0);
            J$.N(1105, 'extend', extend, 0);
            J$.N(1113, 'value', value, 0);
            J$.N(1121, 'recursive', recursive, 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            J$.X1(89, J$.T(81, 'use strict', 21, false));
            var isPlainObject = J$.X1(201, J$.W(193, 'isPlainObject', J$.F(113, J$.R(97, 'require', require, 2), 0)(J$.T(105, './is-plain-object', 21, false)), isPlainObject, 3)), forEach = J$.X1(217, J$.W(209, 'forEach', J$.F(137, J$.R(121, 'require', require, 2), 0)(J$.T(129, './for-each', 21, false)), forEach, 3)), extend = J$.X1(233, J$.W(225, 'extend', J$.F(161, J$.R(145, 'require', require, 2), 0)(J$.T(153, './extend', 21, false)), extend, 3)), value = J$.X1(249, J$.W(241, 'value', J$.F(185, J$.R(169, 'require', require, 2), 0)(J$.T(177, './valid-value', 21, false)), value, 3)), recursive;
            J$.X1(761, recursive = J$.W(753, 'recursive', J$.T(745, function (to, from, cloned) {
                jalangiLabel636:
                    while (true) {
                        try {
                            J$.Fe(705, arguments.callee, this, arguments);
                            arguments = J$.N(713, 'arguments', arguments, 4);
                            to = J$.N(721, 'to', to, 4);
                            from = J$.N(729, 'from', from, 4);
                            cloned = J$.N(737, 'cloned', cloned, 4);
                            J$.X1(697, J$.F(689, J$.R(257, 'forEach', forEach, 1), 0)(J$.R(265, 'from', from, 0), J$.T(673, function (value, key) {
                                jalangiLabel635:
                                    while (true) {
                                        try {
                                            J$.Fe(633, arguments.callee, this, arguments);
                                            arguments = J$.N(641, 'arguments', arguments, 4);
                                            value = J$.N(649, 'value', value, 4);
                                            key = J$.N(657, 'key', key, 4);
                                            J$.N(665, 'index', index, 0);
                                            var index;
                                            if (J$.X1(1137, J$.C(16, J$.F(289, J$.R(273, 'isPlainObject', isPlainObject, 1), 0)(J$.R(281, 'value', value, 0))))) {
                                                if (J$.X1(1129, J$.C(8, J$.B(18, '===', index = J$.W(337, 'index', J$.M(329, J$.G(313, J$.R(297, 'cloned', cloned, 0), J$.T(305, 0, 22, false), 4), 'indexOf', 0)(J$.R(321, 'value', value, 0)), index, 0), J$.U(10, '-', J$.T(345, 1, 22, false)), 0)))) {
                                                    J$.X1(393, J$.M(385, J$.G(369, J$.R(353, 'cloned', cloned, 0), J$.T(361, 0, 22, false), 4), 'push', 0)(J$.R(377, 'value', value, 0)));
                                                    J$.X1(489, J$.M(481, J$.G(417, J$.R(401, 'cloned', cloned, 0), J$.T(409, 1, 22, false), 4), 'push', 0)(J$.P(473, J$.R(425, 'to', to, 0), J$.R(433, 'key', key, 0), J$.F(465, J$.R(441, 'extend', extend, 1), 0)(J$.T(449, {}, 11, false), J$.R(457, 'value', value, 0)), 2)));
                                                    J$.X1(553, J$.F(545, J$.R(497, 'recursive', recursive, 1), 0)(J$.G(521, J$.R(505, 'to', to, 0), J$.R(513, 'key', key, 0), 4), J$.R(529, 'value', value, 0), J$.R(537, 'cloned', cloned, 0)));
                                                } else {
                                                    J$.X1(625, J$.P(617, J$.R(561, 'to', to, 0), J$.R(569, 'key', key, 0), J$.G(609, J$.G(593, J$.R(577, 'cloned', cloned, 0), J$.T(585, 1, 22, false), 4), J$.R(601, 'index', index, 0), 4), 2));
                                                }
                                            }
                                        } catch (J$e) {
                                            J$.Ex(1145, J$e);
                                        } finally {
                                            if (J$.Fr(1153))
                                                continue jalangiLabel635;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 633), J$.R(681, 'from', from, 0)));
                        } catch (J$e) {
                            J$.Ex(1161, J$e);
                        } finally {
                            if (J$.Fr(1169))
                                continue jalangiLabel636;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 705), recursive, 2));
            J$.X1(1057, J$.P(1049, J$.R(769, 'module', module, 2), 'exports', J$.T(1041, function (obj) {
                jalangiLabel637:
                    while (true) {
                        try {
                            J$.Fe(1009, arguments.callee, this, arguments);
                            arguments = J$.N(1017, 'arguments', arguments, 4);
                            obj = J$.N(1025, 'obj', obj, 4);
                            J$.N(1033, 'copy', copy, 0);
                            var copy;
                            if (J$.X1(1185, J$.C(32, J$.B(26, '===', copy = J$.W(817, 'copy', J$.F(809, J$.R(777, 'Object', Object, 2), 0)(J$.F(801, J$.R(785, 'value', value, 1), 0)(J$.R(793, 'obj', obj, 0))), copy, 0), J$.R(825, 'obj', obj, 0), 0)))) {
                                J$.X1(873, copy = J$.W(865, 'copy', J$.F(857, J$.R(833, 'extend', extend, 1), 0)(J$.T(841, {}, 11, false), J$.R(849, 'obj', obj, 0)), copy, 0));
                                if (J$.X1(1177, J$.C(24, J$.G(897, J$.R(881, 'arguments', arguments, 2), J$.T(889, 1, 22, false), 4)))) {
                                    J$.X1(977, J$.F(969, J$.R(905, 'recursive', recursive, 1), 0)(J$.R(913, 'copy', copy, 0), J$.R(921, 'obj', obj, 0), J$.T(961, [
                                        J$.T(937, [J$.R(929, 'obj', obj, 0)], 10, false),
                                        J$.T(953, [J$.R(945, 'copy', copy, 0)], 10, false)
                                    ], 10, false)));
                                }
                            }
                            return J$.X1(1001, J$.Rt(993, J$.R(985, 'copy', copy, 0)));
                        } catch (J$e) {
                            J$.Ex(1193, J$e);
                        } finally {
                            if (J$.Fr(1201))
                                continue jalangiLabel637;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1009), 0));
        } catch (J$e) {
            J$.Ex(1209, J$e);
        } finally {
            if (J$.Sr(1217)) {
                J$.L();
                continue jalangiLabel638;
            } else {
                J$.L();
                break jalangiLabel638;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
