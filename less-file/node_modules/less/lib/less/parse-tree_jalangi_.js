J$.iids = {"8":[18,17,18,25],"9":[1,20,1,27],"10":[38,29,38,54],"16":[27,17,27,34],"17":[1,28,1,32],"18":[38,56,38,59],"24":[38,29,38,54],"25":[1,20,1,33],"32":[36,13,36,34],"33":[1,20,1,33],"34":[38,56,38,59],"40":[46,13,46,30],"41":[1,20,1,33],"42":[51,60,51,94],"48":[51,17,51,94],"49":[2,26,2,38],"56":[51,17,51,94],"57":[2,26,2,45],"65":[2,26,2,45],"73":[2,26,2,45],"81":[3,17,3,24],"89":[3,25,3,39],"97":[3,17,3,40],"105":[3,58,3,65],"113":[3,66,3,84],"121":[3,58,3,85],"129":[3,96,3,103],"137":[3,104,3,114],"145":[3,96,3,115],"153":[3,17,3,40],"161":[3,17,3,40],"169":[3,58,3,85],"177":[3,58,3,85],"185":[3,96,3,115],"193":[3,96,3,115],"201":[4,1,4,7],"209":[6,9,6,13],"217":[6,21,6,25],"225":[6,9,6,25],"233":[6,9,6,26],"241":[7,9,7,13],"249":[7,24,7,31],"257":[7,9,7,31],"265":[7,9,7,32],"273":[5,21,8,6],"281":[5,21,8,6],"289":[5,21,8,6],"297":[5,21,8,6],"305":[5,21,8,6],"313":[5,21,8,6],"321":[5,21,8,6],"329":[9,5,9,14],"337":[9,5,9,24],"345":[10,33,10,35],"353":[10,33,10,35],"361":[10,33,10,35],"369":[12,25,12,38],"377":[12,39,12,43],"385":[12,39,12,48],"393":[12,50,12,57],"401":[12,25,12,58],"409":[12,25,12,58],"417":[12,13,12,59],"425":[14,23,14,32],"433":[14,33,14,34],"441":[14,36,14,40],"449":[14,36,14,48],"457":[14,19,14,49],"465":[14,19,14,49],"473":[14,13,14,50],"481":[13,11,15,10],"489":[17,28,17,35],"497":[17,36,17,43],"505":[17,36,17,52],"513":[17,28,17,53],"521":[17,28,17,53],"529":[17,28,17,53],"537":[18,17,18,25],"545":[19,17,19,23],"553":[19,29,19,158],"561":[19,17,19,159],"563":[19,17,19,28],"569":[19,17,19,160],"577":[22,27,22,35],"585":[23,34,23,41],"593":[23,34,23,57],"601":[24,30,24,37],"609":[24,38,24,45],"617":[24,38,24,57],"625":[24,30,24,58],"633":[25,31,25,32],"641":[21,32,26,14],"649":[21,32,26,14],"657":[21,32,26,14],"665":[27,17,27,24],"673":[27,17,27,34],"681":[28,40,28,56],"689":[28,57,28,64],"697":[28,57,28,74],"705":[28,36,28,75],"713":[28,36,28,75],"721":[28,17,28,76],"729":[29,17,29,23],"737":[29,30,29,46],"745":[29,53,29,62],"753":[29,64,29,76],"761":[29,78,29,82],"769":[29,78,29,90],"777":[29,30,29,91],"779":[29,30,29,52],"785":[29,17,29,91],"793":[29,17,29,92],"801":[31,17,31,23],"809":[31,30,31,39],"817":[31,46,31,58],"825":[31,30,31,59],"827":[31,30,31,45],"833":[31,17,31,59],"841":[31,17,31,60],"849":[34,23,34,32],"857":[34,33,34,34],"865":[34,36,34,40],"873":[34,36,34,48],"881":[34,19,34,49],"889":[34,19,34,49],"897":[34,13,34,50],"905":[33,11,35,10],"913":[36,13,36,20],"921":[36,13,36,34],"929":[37,34,37,41],"937":[37,34,37,55],"945":[37,34,37,75],"947":[37,34,37,73],"953":[37,34,37,75],"961":[37,34,37,75],"969":[38,26,38,27],"977":[38,26,38,27],"985":[38,26,38,27],"993":[38,29,38,30],"1001":[38,33,38,47],"1009":[38,33,38,54],"1025":[38,56,38,57],"1033":[38,56,38,59],"1049":[39,17,39,23],"1057":[39,30,39,44],"1065":[39,45,39,46],"1073":[39,30,39,47],"1081":[39,56,39,62],"1089":[39,56,39,66],"1097":[40,32,40,48],"1105":[41,30,41,37],"1113":[42,30,42,34],"1121":[42,30,42,42],"1129":[39,68,43,18],"1137":[39,30,43,19],"1139":[39,30,39,55],"1145":[39,17,43,19],"1153":[39,17,43,20],"1161":[46,13,46,20],"1169":[46,13,46,30],"1177":[47,13,47,19],"1185":[47,26,47,42],"1193":[47,26,47,65],"1195":[47,26,47,63],"1201":[47,13,47,65],"1209":[47,13,47,66],"1217":[49,9,49,15],"1225":[49,26,49,28],"1233":[49,9,49,28],"1241":[49,9,49,29],"1249":[50,26,50,30],"1257":[50,26,50,38],"1265":[50,26,50,44],"1273":[51,17,51,21],"1281":[51,17,51,29],"1289":[51,17,51,35],"1297":[51,51,51,55],"1305":[51,17,51,56],"1307":[51,17,51,50],"1313":[51,60,51,64],"1321":[51,69,51,73],"1329":[51,69,51,81],"1337":[51,69,51,94],"1345":[52,17,52,23],"1353":[52,17,52,31],"1361":[52,37,52,41],"1369":[52,17,52,42],"1371":[52,17,52,36],"1377":[52,17,52,43],"1385":[50,26,50,44],"1393":[50,9,54,10],"1401":[50,9,54,10],"1409":[55,16,55,22],"1417":[55,16,55,22],"1425":[55,9,55,23],"1433":[9,33,56,6],"1441":[9,33,56,6],"1449":[9,33,56,6],"1457":[9,33,56,6],"1465":[9,33,56,6],"1473":[9,33,56,6],"1481":[9,33,56,6],"1489":[9,33,56,6],"1497":[9,33,56,6],"1505":[9,33,56,6],"1513":[9,33,56,6],"1521":[9,33,56,6],"1529":[9,5,56,6],"1537":[9,5,56,7],"1545":[57,12,57,21],"1553":[57,12,57,21],"1561":[57,5,57,22],"1569":[4,18,58,2],"1577":[4,18,58,2],"1585":[4,18,58,2],"1593":[4,18,58,2],"1601":[4,18,58,2],"1609":[4,1,58,2],"1617":[4,1,58,3],"1625":[1,1,58,3],"1633":[1,1,58,3],"1641":[1,1,58,3],"1649":[1,1,58,3],"1657":[1,1,58,3],"1665":[1,1,58,3],"1673":[5,21,8,6],"1681":[5,21,8,6],"1689":[18,13,20,14],"1697":[27,13,32,14],"1705":[38,13,44,14],"1713":[38,13,44,14],"1721":[36,9,45,10],"1729":[46,9,48,10],"1737":[51,13,53,14],"1745":[9,33,56,6],"1753":[9,33,56,6],"1761":[4,18,58,2],"1769":[4,18,58,2],"1777":[1,1,58,3],"1785":[1,1,58,3],"nBranches":14,"originalCodeFileName":"/home/blake/ExpoSE/Targets/less-file/node_modules/less/lib/less/parse-tree.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/less-file/node_modules/less/lib/less/parse-tree_jalangi_.js","code":"var LessError = require('./less-error'),\n    transformTree = require(\"./transform-tree\"),\n    logger = require(\"./logger\");\n\nmodule.exports = function(SourceMapBuilder) {\n    var ParseTree = function(root, imports) {\n        this.root = root;\n        this.imports = imports;\n    };\n\n    ParseTree.prototype.toCSS = function(options) {\n        var evaldRoot, result = {}, sourceMapBuilder;\n        try {\n            evaldRoot = transformTree(this.root, options);\n        } catch (e) {\n            throw new LessError(e, this.imports);\n        }\n\n        try {\n            var compress = Boolean(options.compress);\n            if (compress) {\n                logger.warn(\"The compress option has been deprecated. We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.\");\n            }\n\n            var toCSSOptions = {\n                compress: compress,\n                dumpLineNumbers: options.dumpLineNumbers,\n                strictUnits: Boolean(options.strictUnits),\n                numPrecision: 8};\n\n            if (options.sourceMap) {\n                sourceMapBuilder = new SourceMapBuilder(options.sourceMap);\n                result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);\n            } else {\n                result.css = evaldRoot.toCSS(toCSSOptions);\n            }\n        } catch (e) {\n            throw new LessError(e, this.imports);\n        }\n\n        if (options.pluginManager) {\n            var postProcessors = options.pluginManager.getPostProcessors();\n            for (var i = 0; i < postProcessors.length; i++) {\n                result.css = postProcessors[i].process(result.css, { sourceMap: sourceMapBuilder, options: options, imports: this.imports });\n            }\n        }\n        if (options.sourceMap) {\n            result.map = sourceMapBuilder.getExternalSourceMap();\n        }\n\n        result.imports = [];\n        for (var file in this.imports.files) {\n            if (this.imports.files.hasOwnProperty(file) && file !== this.imports.rootFilename) {\n                result.imports.push(file);\n            }\n        }\n        return result;\n    };\n    return ParseTree;\n};\n"};
jalangiLabel855:
    while (true) {
        try {
            J$.Se(1625, '/home/blake/ExpoSE/Targets/less-file/node_modules/less/lib/less/parse-tree_jalangi_.js', '/home/blake/ExpoSE/Targets/less-file/node_modules/less/lib/less/parse-tree.js');
            J$.N(1633, '__secret__S$', __secret__S$, 0);
            J$.N(1641, '__secret__traits__', __secret__traits__, 0);
            J$.N(1649, 'LessError', LessError, 0);
            J$.N(1657, 'transformTree', transformTree, 0);
            J$.N(1665, 'logger', logger, 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            var LessError = J$.X1(161, J$.W(153, 'LessError', J$.F(97, J$.R(81, 'require', require, 2), 0)(J$.T(89, './less-error', 21, false)), LessError, 3)), transformTree = J$.X1(177, J$.W(169, 'transformTree', J$.F(121, J$.R(105, 'require', require, 2), 0)(J$.T(113, './transform-tree', 21, false)), transformTree, 3)), logger = J$.X1(193, J$.W(185, 'logger', J$.F(145, J$.R(129, 'require', require, 2), 0)(J$.T(137, './logger', 21, false)), logger, 3));
            J$.X1(1617, J$.P(1609, J$.R(201, 'module', module, 2), 'exports', J$.T(1601, function (SourceMapBuilder) {
                jalangiLabel854:
                    while (true) {
                        try {
                            J$.Fe(1569, arguments.callee, this, arguments);
                            arguments = J$.N(1577, 'arguments', arguments, 4);
                            SourceMapBuilder = J$.N(1585, 'SourceMapBuilder', SourceMapBuilder, 4);
                            J$.N(1593, 'ParseTree', ParseTree, 0);
                            var ParseTree = J$.X1(321, J$.W(313, 'ParseTree', J$.T(305, function (root, imports) {
                                jalangiLabel852:
                                    while (true) {
                                        try {
                                            J$.Fe(273, arguments.callee, this, arguments);
                                            arguments = J$.N(281, 'arguments', arguments, 4);
                                            root = J$.N(289, 'root', root, 4);
                                            imports = J$.N(297, 'imports', imports, 4);
                                            J$.X1(233, J$.P(225, J$.R(209, 'this', this, 0), 'root', J$.R(217, 'root', root, 0), 0));
                                            J$.X1(265, J$.P(257, J$.R(241, 'this', this, 0), 'imports', J$.R(249, 'imports', imports, 0), 0));
                                        } catch (J$e) {
                                            J$.Ex(1673, J$e);
                                        } finally {
                                            if (J$.Fr(1681))
                                                continue jalangiLabel852;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 273), ParseTree, 1));
                            J$.X1(1537, J$.P(1529, J$.G(337, J$.R(329, 'ParseTree', ParseTree, 0), 'prototype', 0), 'toCSS', J$.T(1521, function (options) {
                                jalangiLabel853:
                                    while (true) {
                                        try {
                                            J$.Fe(1433, arguments.callee, this, arguments);
                                            arguments = J$.N(1441, 'arguments', arguments, 4);
                                            options = J$.N(1449, 'options', options, 4);
                                            J$.N(1457, 'evaldRoot', evaldRoot, 0);
                                            J$.N(1465, 'result', result, 0);
                                            J$.N(1473, 'sourceMapBuilder', sourceMapBuilder, 0);
                                            J$.N(1481, 'compress', compress, 0);
                                            J$.N(1489, 'toCSSOptions', toCSSOptions, 0);
                                            J$.N(1497, 'postProcessors', postProcessors, 0);
                                            J$.N(1505, 'i', i, 0);
                                            J$.N(1513, 'file', file, 0);
                                            var evaldRoot, result = J$.X1(361, J$.W(353, 'result', J$.T(345, {}, 11, false), result, 1)), sourceMapBuilder;
                                            try {
                                                J$.X1(417, evaldRoot = J$.W(409, 'evaldRoot', J$.F(401, J$.R(369, 'transformTree', transformTree, 1), 0)(J$.G(385, J$.R(377, 'this', this, 0), 'root', 0), J$.R(393, 'options', options, 0)), evaldRoot, 0));
                                            } catch (e) {
                                                e = J$.N(481, 'e', e, 1);
                                                throw J$.X1(473, J$.Th(465, J$.F(457, J$.R(425, 'LessError', LessError, 1), 1)(J$.R(433, 'e', e, 0), J$.G(449, J$.R(441, 'this', this, 0), 'imports', 0))));
                                            }
                                            try {
                                                var compress = J$.X1(529, J$.W(521, 'compress', J$.F(513, J$.R(489, 'Boolean', Boolean, 2), 0)(J$.G(505, J$.R(497, 'options', options, 0), 'compress', 0)), compress, 1));
                                                if (J$.X1(1689, J$.C(8, J$.R(537, 'compress', compress, 0)))) {
                                                    J$.X1(569, J$.M(561, J$.R(545, 'logger', logger, 1), 'warn', 0)(J$.T(553, 'The compress option has been deprecated. We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.', 21, false)));
                                                }
                                                var toCSSOptions = J$.X1(657, J$.W(649, 'toCSSOptions', J$.T(641, {
                                                    compress: J$.R(577, 'compress', compress, 0),
                                                    dumpLineNumbers: J$.G(593, J$.R(585, 'options', options, 0), 'dumpLineNumbers', 0),
                                                    strictUnits: J$.F(625, J$.R(601, 'Boolean', Boolean, 2), 0)(J$.G(617, J$.R(609, 'options', options, 0), 'strictUnits', 0)),
                                                    numPrecision: J$.T(633, 8, 22, false)
                                                }, 11, false), toCSSOptions, 1));
                                                if (J$.X1(1697, J$.C(16, J$.G(673, J$.R(665, 'options', options, 0), 'sourceMap', 0)))) {
                                                    J$.X1(721, sourceMapBuilder = J$.W(713, 'sourceMapBuilder', J$.F(705, J$.R(681, 'SourceMapBuilder', SourceMapBuilder, 0), 1)(J$.G(697, J$.R(689, 'options', options, 0), 'sourceMap', 0)), sourceMapBuilder, 0));
                                                    J$.X1(793, J$.P(785, J$.R(729, 'result', result, 0), 'css', J$.M(777, J$.R(737, 'sourceMapBuilder', sourceMapBuilder, 0), 'toCSS', 0)(J$.R(745, 'evaldRoot', evaldRoot, 0), J$.R(753, 'toCSSOptions', toCSSOptions, 0), J$.G(769, J$.R(761, 'this', this, 0), 'imports', 0)), 0));
                                                } else {
                                                    J$.X1(841, J$.P(833, J$.R(801, 'result', result, 0), 'css', J$.M(825, J$.R(809, 'evaldRoot', evaldRoot, 0), 'toCSS', 0)(J$.R(817, 'toCSSOptions', toCSSOptions, 0)), 0));
                                                }
                                            } catch (e) {
                                                e = J$.N(905, 'e', e, 1);
                                                throw J$.X1(897, J$.Th(889, J$.F(881, J$.R(849, 'LessError', LessError, 1), 1)(J$.R(857, 'e', e, 0), J$.G(873, J$.R(865, 'this', this, 0), 'imports', 0))));
                                            }
                                            if (J$.X1(1721, J$.C(32, J$.G(921, J$.R(913, 'options', options, 0), 'pluginManager', 0)))) {
                                                var postProcessors = J$.X1(961, J$.W(953, 'postProcessors', J$.M(945, J$.G(937, J$.R(929, 'options', options, 0), 'pluginManager', 0), 'getPostProcessors', 0)(), postProcessors, 1));
                                                for (var i = J$.X1(985, J$.W(977, 'i', J$.T(969, 0, 22, false), i, 1)); J$.X1(1705, J$.C(24, J$.B(10, '<', J$.R(993, 'i', i, 0), J$.G(1009, J$.R(1001, 'postProcessors', postProcessors, 0), 'length', 0), 0))); J$.X1(1713, J$.B(34, '-', i = J$.W(1033, 'i', J$.B(26, '+', J$.U(18, '+', J$.R(1025, 'i', i, 0)), J$.T(1017, 1, 22, false), 0), i, 0), J$.T(1041, 1, 22, false), 0))) {
                                                    J$.X1(1153, J$.P(1145, J$.R(1049, 'result', result, 0), 'css', J$.M(1137, J$.G(1073, J$.R(1057, 'postProcessors', postProcessors, 0), J$.R(1065, 'i', i, 0), 4), 'process', 0)(J$.G(1089, J$.R(1081, 'result', result, 0), 'css', 0), J$.T(1129, {
                                                        sourceMap: J$.R(1097, 'sourceMapBuilder', sourceMapBuilder, 0),
                                                        options: J$.R(1105, 'options', options, 0),
                                                        imports: J$.G(1121, J$.R(1113, 'this', this, 0), 'imports', 0)
                                                    }, 11, false)), 0));
                                                }
                                            }
                                            if (J$.X1(1729, J$.C(40, J$.G(1169, J$.R(1161, 'options', options, 0), 'sourceMap', 0)))) {
                                                J$.X1(1209, J$.P(1201, J$.R(1177, 'result', result, 0), 'map', J$.M(1193, J$.R(1185, 'sourceMapBuilder', sourceMapBuilder, 0), 'getExternalSourceMap', 0)(), 0));
                                            }
                                            J$.X1(1241, J$.P(1233, J$.R(1217, 'result', result, 0), 'imports', J$.T(1225, [], 10, false), 0));
                                            for (J$._tm_p in J$.H(1385, J$.G(1265, J$.G(1257, J$.R(1249, 'this', this, 0), 'imports', 0), 'files', 0))) {
                                                var file = J$.X1(1401, J$.W(1393, 'file', J$._tm_p, file, 1));
                                                {
                                                    {
                                                        if (J$.X1(1737, J$.C(56, J$.C(48, J$.M(1305, J$.G(1289, J$.G(1281, J$.R(1273, 'this', this, 0), 'imports', 0), 'files', 0), 'hasOwnProperty', 0)(J$.R(1297, 'file', file, 0))) ? J$.B(42, '!==', J$.R(1313, 'file', file, 0), J$.G(1337, J$.G(1329, J$.R(1321, 'this', this, 0), 'imports', 0), 'rootFilename', 0), 0) : J$._()))) {
                                                            J$.X1(1377, J$.M(1369, J$.G(1353, J$.R(1345, 'result', result, 0), 'imports', 0), 'push', 0)(J$.R(1361, 'file', file, 0)));
                                                        }
                                                    }
                                                }
                                            }
                                            return J$.X1(1425, J$.Rt(1417, J$.R(1409, 'result', result, 0)));
                                        } catch (J$e) {
                                            J$.Ex(1745, J$e);
                                        } finally {
                                            if (J$.Fr(1753))
                                                continue jalangiLabel853;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 1433), 0));
                            return J$.X1(1561, J$.Rt(1553, J$.R(1545, 'ParseTree', ParseTree, 0)));
                        } catch (J$e) {
                            J$.Ex(1761, J$e);
                        } finally {
                            if (J$.Fr(1769))
                                continue jalangiLabel854;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1569), 0));
        } catch (J$e) {
            J$.Ex(1777, J$e);
        } finally {
            if (J$.Sr(1785)) {
                J$.L();
                continue jalangiLabel855;
            } else {
                J$.L();
                break jalangiLabel855;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
