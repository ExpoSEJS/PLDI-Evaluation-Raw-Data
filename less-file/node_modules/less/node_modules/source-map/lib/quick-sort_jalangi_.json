{"8":[18,17,18,47],"9":[1,20,1,27],"10":[9,46,9,56],"16":[17,25,17,30],"17":[1,28,1,32],"18":[9,29,9,57],"24":[12,9,12,14],"25":[1,20,1,33],"26":[9,23,9,57],"33":[1,20,1,33],"34":[12,9,12,14],"41":[1,20,1,33],"42":[14,17,14,22],"49":[2,26,2,38],"50":[17,25,17,30],"57":[2,26,2,45],"58":[17,32,17,35],"65":[2,26,2,45],"73":[2,26,2,45],"74":[17,32,17,35],"81":[4,16,4,19],"82":[18,17,18,47],"89":[4,20,4,21],"90":[19,22,19,23],"97":[4,16,4,22],"98":[23,19,23,24],"105":[4,16,4,22],"106":[24,17,24,22],"113":[4,16,4,22],"114":[25,41,25,46],"121":[5,5,5,8],"122":[26,38,26,43],"129":[5,9,5,10],"130":[30,37,30,51],"137":[5,14,5,17],"145":[5,18,5,19],"153":[5,14,5,20],"161":[5,5,5,20],"169":[5,5,5,21],"177":[6,5,6,8],"185":[6,9,6,10],"193":[6,14,6,18],"201":[6,5,6,18],"209":[6,5,6,19],"217":[3,1,7,2],"225":[3,1,7,2],"233":[3,1,7,2],"241":[3,1,7,2],"249":[3,1,7,2],"257":[3,1,7,2],"265":[9,12,9,16],"273":[9,23,9,26],"281":[9,29,9,33],"289":[9,29,9,42],"291":[9,29,9,40],"297":[9,46,9,50],"305":[9,53,9,56],"313":[9,12,9,58],"315":[9,12,9,22],"321":[9,12,9,58],"329":[9,5,9,59],"337":[8,1,10,2],"345":[8,1,10,2],"353":[8,1,10,2],"361":[8,1,10,2],"369":[12,9,12,10],"377":[12,13,12,14],"385":[13,26,13,42],"393":[13,43,13,44],"401":[13,46,13,47],"409":[13,26,13,48],"417":[13,26,13,48],"425":[13,26,13,48],"433":[14,17,14,18],"441":[14,21,14,22],"449":[14,17,14,22],"457":[14,17,14,22],"465":[15,9,15,13],"473":[15,14,15,17],"481":[15,19,15,29],"489":[15,31,15,32],"497":[15,9,15,33],"505":[15,9,15,34],"513":[16,21,16,24],"521":[16,25,16,26],"529":[16,21,16,27],"537":[16,21,16,27],"545":[16,21,16,27],"553":[17,22,17,23],"561":[17,22,17,23],"569":[17,22,17,23],"577":[17,25,17,26],"585":[17,29,17,30],"601":[17,32,17,33],"609":[17,32,17,35],"625":[18,17,18,27],"633":[18,28,18,31],"641":[18,32,18,33],"649":[18,28,18,34],"657":[18,36,18,41],"665":[18,17,18,42],"673":[18,46,18,47],"681":[19,22,19,23],"689":[19,17,19,18],"697":[19,17,19,23],"705":[19,17,19,24],"713":[20,17,20,21],"721":[20,22,20,25],"729":[20,27,20,28],"737":[20,30,20,31],"745":[20,17,20,32],"753":[20,17,20,33],"761":[23,9,23,13],"769":[23,14,23,17],"777":[23,19,23,20],"785":[23,23,23,24],"793":[23,26,23,27],"801":[23,9,23,28],"809":[23,9,23,29],"817":[24,17,24,18],"825":[24,21,24,22],"833":[24,17,24,22],"841":[24,17,24,22],"849":[25,9,25,20],"857":[25,21,25,24],"865":[25,26,25,36],"873":[25,38,25,39],"881":[25,41,25,42],"889":[25,45,25,46],"897":[25,9,25,47],"905":[25,9,25,48],"913":[26,9,26,20],"921":[26,21,26,24],"929":[26,26,26,36],"937":[26,38,26,39],"945":[26,42,26,43],"953":[26,45,26,46],"961":[26,9,26,47],"969":[26,9,26,48],"977":[11,1,28,2],"985":[11,1,28,2],"993":[11,1,28,2],"1001":[11,1,28,2],"1009":[11,1,28,2],"1017":[11,1,28,2],"1025":[11,1,28,2],"1033":[11,1,28,2],"1041":[11,1,28,2],"1049":[11,1,28,2],"1057":[11,1,28,2],"1065":[29,1,29,8],"1073":[30,5,30,16],"1081":[30,17,30,20],"1089":[30,22,30,32],"1097":[30,34,30,35],"1105":[30,37,30,40],"1113":[30,37,30,47],"1121":[30,50,30,51],"1129":[30,5,30,52],"1137":[30,5,30,53],"1145":[29,21,31,2],"1153":[29,21,31,2],"1161":[29,21,31,2],"1169":[29,21,31,2],"1177":[29,21,31,2],"1185":[29,1,31,2],"1193":[29,1,31,3],"1201":[1,1,31,3],"1209":[1,1,31,3],"1217":[1,1,31,3],"1225":[3,1,7,2],"1233":[1,1,31,3],"1241":[8,1,10,2],"1249":[1,1,31,3],"1257":[11,1,28,2],"1265":[1,1,31,3],"1273":[3,1,7,2],"1281":[3,1,7,2],"1289":[8,1,10,2],"1297":[8,1,10,2],"1305":[18,13,21,14],"1313":[17,9,22,10],"1321":[17,9,22,10],"1329":[12,5,27,6],"1337":[11,1,28,2],"1345":[11,1,28,2],"1353":[29,21,31,2],"1361":[29,21,31,2],"1369":[1,1,31,3],"1377":[1,1,31,3],"nBranches":6,"originalCodeFileName":"/home/blake/ExpoSE/Targets/less-file/node_modules/less/node_modules/source-map/lib/quick-sort.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/less-file/node_modules/less/node_modules/source-map/lib/quick-sort_jalangi_.js","code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\nexports.quickSort = function (ary, comparator) {\n  doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n"}