J$.iids = {"8":[11,13,11,28],"9":[1,20,1,27],"10":[6,27,6,39],"16":[15,20,15,44],"17":[1,28,1,32],"18":[6,26,6,44],"24":[14,13,14,47],"25":[1,20,1,33],"26":[6,15,6,52],"32":[20,13,20,27],"33":[1,20,1,33],"34":[8,9,8,18],"40":[26,20,26,28],"41":[1,20,1,33],"42":[10,16,10,23],"48":[23,13,23,47],"49":[2,26,2,38],"50":[11,13,11,24],"56":[10,16,10,23],"57":[2,26,2,45],"58":[11,13,11,28],"64":[8,9,8,18],"65":[2,26,2,45],"66":[14,13,14,47],"72":[31,9,31,31],"73":[2,26,2,45],"74":[15,20,15,44],"80":[34,85,34,122],"81":[3,1,3,8],"82":[15,55,15,57],"88":[35,9,35,18],"89":[3,32,3,33],"90":[20,13,20,23],"96":[39,13,39,73],"97":[3,1,3,33],"98":[20,13,20,27],"104":[38,12,38,26],"105":[3,1,3,34],"106":[23,13,23,47],"113":[4,1,4,8],"114":[26,20,26,28],"121":[4,29,4,30],"122":[26,31,26,33],"129":[4,1,4,30],"130":[31,9,31,31],"137":[4,1,4,31],"138":[32,16,32,18],"145":[6,15,6,19],"146":[34,33,34,35],"153":[6,27,6,32],"154":[35,9,35,18],"161":[6,35,6,39],"162":[36,16,36,18],"169":[6,43,6,44],"170":[38,12,38,21],"177":[6,15,6,45],"178":[38,12,38,26],"179":[6,15,6,25],"185":[6,48,6,52],"186":[39,50,39,59],"193":[6,15,6,52],"194":[39,13,39,73],"201":[6,15,6,52],"202":[42,9,42,16],"209":[7,15,7,23],"217":[7,24,7,31],"225":[7,33,7,42],"233":[7,43,7,46],"241":[7,33,7,47],"249":[7,49,7,53],"257":[7,15,7,54],"265":[7,15,7,54],"273":[7,15,7,54],"281":[8,9,8,12],"289":[8,17,8,18],"297":[9,16,9,19],"305":[9,16,9,19],"313":[9,9,9,20],"321":[10,16,10,19],"329":[10,22,10,23],"337":[11,13,11,18],"345":[11,21,11,24],"353":[11,27,11,28],"361":[12,20,12,35],"369":[12,36,12,39],"377":[12,41,12,46],"385":[12,48,12,55],"393":[12,57,12,66],"401":[12,68,12,76],"409":[12,78,12,83],"417":[12,20,12,84],"425":[12,20,12,84],"433":[12,13,12,85],"441":[14,13,14,18],"449":[14,22,14,29],"457":[14,22,14,47],"465":[15,20,15,25],"473":[15,28,15,37],"481":[15,28,15,44],"489":[15,47,15,52],"497":[15,56,15,57],"505":[15,20,15,57],"513":[15,13,15,58],"521":[17,20,17,23],"529":[17,20,17,23],"537":[17,13,17,24],"545":[20,13,20,16],"553":[20,19,20,23],"561":[20,26,20,27],"569":[21,20,21,35],"577":[21,36,21,40],"585":[21,42,21,45],"593":[21,47,21,54],"601":[21,56,21,65],"609":[21,67,21,75],"617":[21,77,21,82],"625":[21,20,21,83],"633":[21,20,21,83],"641":[21,13,21,84],"649":[23,13,23,18],"657":[23,22,23,29],"665":[23,22,23,47],"673":[24,20,24,23],"681":[24,20,24,23],"689":[24,13,24,24],"697":[26,20,26,24],"705":[26,27,26,28],"713":[26,32,26,33],"721":[26,36,26,40],"729":[26,20,26,40],"737":[26,13,26,41],"745":[5,1,29,2],"753":[5,1,29,2],"761":[5,1,29,2],"769":[5,1,29,2],"777":[5,1,29,2],"785":[5,1,29,2],"793":[5,1,29,2],"801":[5,1,29,2],"809":[5,1,29,2],"817":[5,1,29,2],"825":[30,1,30,8],"833":[31,9,31,18],"841":[31,9,31,25],"849":[31,30,31,31],"857":[32,17,32,18],"865":[32,16,32,18],"873":[32,9,32,19],"881":[34,17,34,32],"889":[34,34,34,35],"897":[34,37,34,46],"905":[34,37,34,53],"913":[34,55,34,62],"921":[34,64,34,73],"929":[34,75,34,83],"937":[34,85,34,90],"945":[34,94,34,101],"953":[34,94,34,122],"961":[34,17,34,123],"969":[34,17,34,123],"977":[34,17,34,123],"985":[35,9,35,14],"993":[35,17,35,18],"1001":[36,17,36,18],"1009":[36,16,36,18],"1017":[36,9,36,19],"1025":[38,12,38,17],"1033":[38,20,38,21],"1041":[38,25,38,26],"1049":[39,13,39,21],"1057":[39,22,39,31],"1065":[39,32,39,37],"1073":[39,22,39,38],"1081":[39,40,39,49],"1089":[39,50,39,55],"1097":[39,58,39,59],"1105":[39,40,39,60],"1113":[39,62,39,66],"1121":[39,13,39,67],"1129":[39,72,39,73],"1145":[42,11,42,16],"1153":[42,9,42,16],"1161":[42,9,42,17],"1169":[44,12,44,17],"1177":[44,12,44,17],"1185":[44,5,44,18],"1193":[30,18,45,2],"1201":[30,18,45,2],"1209":[30,18,45,2],"1217":[30,18,45,2],"1225":[30,18,45,2],"1233":[30,18,45,2],"1241":[30,18,45,2],"1249":[30,18,45,2],"1257":[30,18,45,2],"1265":[30,1,45,2],"1273":[30,1,45,3],"1281":[1,1,45,3],"1289":[1,1,45,3],"1297":[1,1,45,3],"1305":[5,1,29,2],"1313":[1,1,45,3],"1321":[11,9,13,10],"1329":[15,20,15,57],"1337":[14,9,18,10],"1345":[20,9,22,10],"1353":[26,20,26,40],"1361":[23,9,27,10],"1369":[10,12,28,6],"1377":[8,5,28,6],"1385":[5,1,29,2],"1393":[5,1,29,2],"1401":[31,5,33,6],"1409":[35,5,37,6],"1417":[39,9,41,10],"1425":[38,5,43,6],"1433":[30,18,45,2],"1441":[30,18,45,2],"1449":[1,1,45,3],"1457":[1,1,45,3],"nBranches":26,"originalCodeFileName":"/home/blake/ExpoSE/Targets/less-file/node_modules/less/node_modules/source-map/lib/binary-search.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/less-file/node_modules/less/node_modules/source-map/lib/binary-search_jalangi_.js","code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n"};
jalangiLabel1007:
    while (true) {
        try {
            J$.Se(1281, '/home/blake/ExpoSE/Targets/less-file/node_modules/less/node_modules/source-map/lib/binary-search_jalangi_.js', '/home/blake/ExpoSE/Targets/less-file/node_modules/less/node_modules/source-map/lib/binary-search.js');
            function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
                jalangiLabel1005:
                    while (true) {
                        try {
                            J$.Fe(745, arguments.callee, this, arguments);
                            arguments = J$.N(753, 'arguments', arguments, 4);
                            aLow = J$.N(761, 'aLow', aLow, 4);
                            aHigh = J$.N(769, 'aHigh', aHigh, 4);
                            aNeedle = J$.N(777, 'aNeedle', aNeedle, 4);
                            aHaystack = J$.N(785, 'aHaystack', aHaystack, 4);
                            aCompare = J$.N(793, 'aCompare', aCompare, 4);
                            aBias = J$.N(801, 'aBias', aBias, 4);
                            J$.N(809, 'mid', mid, 0);
                            J$.N(817, 'cmp', cmp, 0);
                            var mid = J$.X1(201, J$.W(193, 'mid', J$.B(26, '+', J$.M(177, J$.R(145, 'Math', Math, 2), 'floor', 0)(J$.B(18, '/', J$.B(10, '-', J$.R(153, 'aHigh', aHigh, 0), J$.R(161, 'aLow', aLow, 0), 0), J$.T(169, 2, 22, false), 0)), J$.R(185, 'aLow', aLow, 0), 0), mid, 1));
                            var cmp = J$.X1(273, J$.W(265, 'cmp', J$.F(257, J$.R(209, 'aCompare', aCompare, 0), 0)(J$.R(217, 'aNeedle', aNeedle, 0), J$.G(241, J$.R(225, 'aHaystack', aHaystack, 0), J$.R(233, 'mid', mid, 0), 4), J$.T(249, true, 23, false)), cmp, 1));
                            if (J$.X1(1377, J$.C(64, J$.B(34, '===', J$.R(281, 'cmp', cmp, 0), J$.T(289, 0, 22, false), 0)))) {
                                return J$.X1(313, J$.Rt(305, J$.R(297, 'mid', mid, 0)));
                            } else if (J$.X1(1369, J$.C(56, J$.B(42, '>', J$.R(321, 'cmp', cmp, 0), J$.T(329, 0, 22, false), 0)))) {
                                if (J$.X1(1321, J$.C(8, J$.B(58, '>', J$.B(50, '-', J$.R(337, 'aHigh', aHigh, 0), J$.R(345, 'mid', mid, 0), 0), J$.T(353, 1, 22, false), 0)))) {
                                    return J$.X1(433, J$.Rt(425, J$.F(417, J$.R(361, 'recursiveSearch', recursiveSearch, 1), 0)(J$.R(369, 'mid', mid, 0), J$.R(377, 'aHigh', aHigh, 0), J$.R(385, 'aNeedle', aNeedle, 0), J$.R(393, 'aHaystack', aHaystack, 0), J$.R(401, 'aCompare', aCompare, 0), J$.R(409, 'aBias', aBias, 0))));
                                }
                                if (J$.X1(1337, J$.C(24, J$.B(66, '==', J$.R(441, 'aBias', aBias, 0), J$.G(457, J$.R(449, 'exports', exports, 2), 'LEAST_UPPER_BOUND', 0), 0)))) {
                                    return J$.X1(513, J$.Rt(505, J$.X1(1329, J$.C(16, J$.B(74, '<', J$.R(465, 'aHigh', aHigh, 0), J$.G(481, J$.R(473, 'aHaystack', aHaystack, 0), 'length', 0), 0))) ? J$.R(489, 'aHigh', aHigh, 0) : J$.U(82, '-', J$.T(497, 1, 22, false))));
                                } else {
                                    return J$.X1(537, J$.Rt(529, J$.R(521, 'mid', mid, 0)));
                                }
                            } else {
                                if (J$.X1(1345, J$.C(32, J$.B(98, '>', J$.B(90, '-', J$.R(545, 'mid', mid, 0), J$.R(553, 'aLow', aLow, 0), 0), J$.T(561, 1, 22, false), 0)))) {
                                    return J$.X1(641, J$.Rt(633, J$.F(625, J$.R(569, 'recursiveSearch', recursiveSearch, 1), 0)(J$.R(577, 'aLow', aLow, 0), J$.R(585, 'mid', mid, 0), J$.R(593, 'aNeedle', aNeedle, 0), J$.R(601, 'aHaystack', aHaystack, 0), J$.R(609, 'aCompare', aCompare, 0), J$.R(617, 'aBias', aBias, 0))));
                                }
                                if (J$.X1(1361, J$.C(48, J$.B(106, '==', J$.R(649, 'aBias', aBias, 0), J$.G(665, J$.R(657, 'exports', exports, 2), 'LEAST_UPPER_BOUND', 0), 0)))) {
                                    return J$.X1(689, J$.Rt(681, J$.R(673, 'mid', mid, 0)));
                                } else {
                                    return J$.X1(737, J$.Rt(729, J$.X1(1353, J$.C(40, J$.B(114, '<', J$.R(697, 'aLow', aLow, 0), J$.T(705, 0, 22, false), 0))) ? J$.U(122, '-', J$.T(713, 1, 22, false)) : J$.R(721, 'aLow', aLow, 0)));
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(1385, J$e);
                        } finally {
                            if (J$.Fr(1393))
                                continue jalangiLabel1005;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1289, '__secret__S$', __secret__S$, 0);
            J$.N(1297, '__secret__traits__', __secret__traits__, 0);
            recursiveSearch = J$.N(1313, 'recursiveSearch', J$.T(1305, recursiveSearch, 12, false, 745), 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            J$.X1(105, J$.P(97, J$.R(81, 'exports', exports, 2), 'GREATEST_LOWER_BOUND', J$.T(89, 1, 22, false), 0));
            J$.X1(137, J$.P(129, J$.R(113, 'exports', exports, 2), 'LEAST_UPPER_BOUND', J$.T(121, 2, 22, false), 0));
            J$.X1(1273, J$.P(1265, J$.R(825, 'exports', exports, 2), 'search', J$.T(1257, function search(aNeedle, aHaystack, aCompare, aBias) {
                jalangiLabel1006:
                    while (true) {
                        try {
                            J$.Fe(1193, arguments.callee, this, arguments);
                            arguments = J$.N(1201, 'arguments', arguments, 4);
                            search = J$.N(1209, 'search', search, 0);
                            aNeedle = J$.N(1217, 'aNeedle', aNeedle, 4);
                            aHaystack = J$.N(1225, 'aHaystack', aHaystack, 4);
                            aCompare = J$.N(1233, 'aCompare', aCompare, 4);
                            aBias = J$.N(1241, 'aBias', aBias, 4);
                            J$.N(1249, 'index', index, 0);
                            if (J$.X1(1401, J$.C(72, J$.B(130, '===', J$.G(841, J$.R(833, 'aHaystack', aHaystack, 0), 'length', 0), J$.T(849, 0, 22, false), 0)))) {
                                return J$.X1(873, J$.Rt(865, J$.U(138, '-', J$.T(857, 1, 22, false))));
                            }
                            var index = J$.X1(977, J$.W(969, 'index', J$.F(961, J$.R(881, 'recursiveSearch', recursiveSearch, 1), 0)(J$.U(146, '-', J$.T(889, 1, 22, false)), J$.G(905, J$.R(897, 'aHaystack', aHaystack, 0), 'length', 0), J$.R(913, 'aNeedle', aNeedle, 0), J$.R(921, 'aHaystack', aHaystack, 0), J$.R(929, 'aCompare', aCompare, 0), J$.C(80, J$.R(937, 'aBias', aBias, 0)) ? J$._() : J$.G(953, J$.R(945, 'exports', exports, 2), 'GREATEST_LOWER_BOUND', 0)), index, 1));
                            if (J$.X1(1409, J$.C(88, J$.B(154, '<', J$.R(985, 'index', index, 0), J$.T(993, 0, 22, false), 0)))) {
                                return J$.X1(1017, J$.Rt(1009, J$.U(162, '-', J$.T(1001, 1, 22, false))));
                            }
                            while (J$.X1(1425, J$.C(104, J$.B(178, '>=', J$.B(170, '-', J$.R(1025, 'index', index, 0), J$.T(1033, 1, 22, false), 0), J$.T(1041, 0, 22, false), 0)))) {
                                if (J$.X1(1417, J$.C(96, J$.B(194, '!==', J$.F(1121, J$.R(1049, 'aCompare', aCompare, 0), 0)(J$.G(1073, J$.R(1057, 'aHaystack', aHaystack, 0), J$.R(1065, 'index', index, 0), 4), J$.G(1105, J$.R(1081, 'aHaystack', aHaystack, 0), J$.B(186, '-', J$.R(1089, 'index', index, 0), J$.T(1097, 1, 22, false), 0), 4), J$.T(1113, true, 23, false)), J$.T(1129, 0, 22, false), 0)))) {
                                    break;
                                }
                                J$.X1(1161, index = J$.W(1153, 'index', J$.B(210, '-', J$.U(202, '+', J$.R(1145, 'index', index, 0)), J$.T(1137, 1, 22, false), 0), index, 0));
                            }
                            return J$.X1(1185, J$.Rt(1177, J$.R(1169, 'index', index, 0)));
                        } catch (J$e) {
                            J$.Ex(1433, J$e);
                        } finally {
                            if (J$.Fr(1441))
                                continue jalangiLabel1006;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1193), 0));
        } catch (J$e) {
            J$.Ex(1449, J$e);
        } finally {
            if (J$.Sr(1457)) {
                J$.L();
                continue jalangiLabel1007;
            } else {
                J$.L();
                break jalangiLabel1007;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
