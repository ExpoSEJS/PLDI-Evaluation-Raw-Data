J$.iids = {"8":[9,12,9,22],"9":[1,20,1,27],"10":[5,16,5,35],"16":[14,12,14,22],"17":[1,28,1,32],"18":[6,21,6,33],"24":[23,13,23,20],"25":[1,20,1,33],"26":[9,12,9,22],"32":[27,14,27,21],"33":[1,20,1,33],"34":[9,26,9,33],"40":[36,13,36,29],"41":[1,20,1,33],"42":[9,26,9,38],"48":[40,13,40,25],"49":[2,26,2,38],"50":[9,25,9,43],"56":[47,14,47,26],"57":[2,26,2,45],"58":[9,47,9,58],"65":[2,26,2,45],"66":[9,46,9,63],"73":[2,26,2,45],"74":[12,23,12,33],"81":[3,14,3,21],"82":[12,22,12,40],"89":[3,22,3,32],"90":[13,19,13,30],"97":[3,14,3,33],"98":[14,25,14,33],"105":[3,14,3,33],"106":[21,17,21,36],"113":[3,14,3,33],"114":[22,18,22,32],"121":[4,22,4,23],"122":[23,13,23,20],"129":[4,22,4,23],"130":[24,22,24,42],"137":[4,22,4,23],"138":[26,20,26,40],"145":[5,16,5,17],"146":[27,14,27,21],"153":[5,21,5,35],"154":[36,13,36,29],"161":[5,16,5,35],"162":[39,47,39,55],"169":[5,16,5,35],"177":[6,21,6,29],"178":[39,47,39,55],"185":[6,32,6,33],"186":[40,23,40,25],"193":[6,21,6,33],"194":[40,13,40,25],"201":[6,21,6,33],"202":[41,68,41,78],"209":[7,28,7,36],"210":[41,29,41,79],"217":[7,28,7,36],"218":[43,27,43,55],"225":[7,28,7,36],"226":[43,25,43,56],"233":[9,12,9,18],"234":[43,24,43,56],"241":[9,21,9,22],"242":[44,18,44,31],"249":[9,27,9,33],"250":[45,28,45,42],"257":[9,37,9,38],"258":[45,18,45,43],"265":[9,42,9,43],"266":[46,18,46,32],"273":[9,47,9,53],"281":[9,57,9,58],"289":[9,62,9,63],"297":[9,12,9,63],"305":[9,5,9,64],"313":[8,1,10,2],"321":[8,1,10,2],"329":[8,1,10,2],"337":[12,23,12,29],"345":[12,32,12,33],"353":[12,39,12,40],"361":[12,22,12,40],"369":[12,22,12,40],"377":[13,19,13,25],"385":[13,29,13,30],"393":[13,19,13,30],"401":[13,19,13,30],"409":[14,12,14,22],"417":[14,26,14,33],"425":[14,36,14,43],"433":[14,12,14,43],"441":[14,5,14,44],"449":[11,1,15,2],"457":[11,1,15,2],"465":[11,1,15,2],"473":[11,1,15,2],"481":[11,1,15,2],"489":[16,1,16,8],"497":[17,19,17,21],"505":[17,19,17,21],"513":[17,19,17,21],"521":[19,15,19,26],"529":[19,27,19,33],"537":[19,15,19,34],"545":[19,15,19,34],"553":[19,15,19,34],"561":[21,17,21,20],"569":[21,23,21,36],"577":[21,17,21,36],"585":[21,9,21,37],"593":[22,18,22,32],"601":[22,9,22,12],"609":[22,9,22,32],"617":[22,9,22,33],"625":[23,13,23,16],"633":[23,19,23,20],"641":[24,22,24,42],"649":[24,13,24,18],"657":[24,13,24,42],"665":[24,13,24,43],"673":[26,20,26,26],"681":[26,34,26,39],"689":[26,20,26,40],"691":[26,20,26,33],"697":[26,9,26,16],"705":[26,9,26,40],"713":[26,9,26,41],"721":[27,14,27,17],"729":[27,20,27,21],"737":[28,12,28,19],"745":[28,12,28,19],"753":[28,5,28,20],"761":[16,18,29,2],"769":[16,18,29,2],"777":[16,18,29,2],"785":[16,18,29,2],"793":[16,18,29,2],"801":[16,18,29,2],"809":[16,18,29,2],"817":[16,18,29,2],"825":[16,1,29,2],"833":[16,1,29,3],"841":[30,1,30,8],"849":[31,18,31,22],"857":[31,18,31,29],"865":[31,18,31,29],"873":[31,18,31,29],"881":[32,18,32,19],"889":[32,18,32,19],"897":[32,18,32,19],"905":[33,17,33,18],"913":[33,17,33,18],"921":[33,17,33,18],"929":[36,13,36,19],"937":[36,23,36,29],"945":[37,23,37,28],"953":[37,29,37,73],"961":[37,19,37,74],"969":[37,19,37,74],"977":[37,13,37,75],"985":[39,17,39,23],"993":[39,31,39,35],"1009":[39,47,39,53],"1017":[39,47,39,55],"1033":[39,31,39,56],"1035":[39,31,39,46],"1041":[39,17,39,57],"1043":[39,17,39,30],"1049":[39,17,39,57],"1057":[39,9,39,58],"1065":[40,13,40,18],"1073":[40,24,40,25],"1081":[41,23,41,28],"1089":[41,29,41,53],"1097":[41,56,41,60],"1105":[41,68,41,74],"1113":[41,77,41,78],"1121":[41,56,41,79],"1123":[41,56,41,67],"1129":[41,19,41,80],"1137":[41,19,41,80],"1145":[41,13,41,81],"1153":[43,27,43,32],"1161":[43,35,43,55],"1169":[43,24,43,56],"1177":[43,9,43,57],"1185":[44,18,44,31],"1193":[44,9,44,14],"1201":[44,9,44,31],"1209":[44,9,44,32],"1217":[45,18,45,24],"1225":[45,28,45,33],"1233":[45,37,45,42],"1241":[45,18,45,43],"1249":[45,9,45,44],"1257":[46,18,46,32],"1265":[46,9,46,14],"1273":[46,9,46,32],"1281":[46,9,46,33],"1289":[47,14,47,26],"1297":[48,5,48,14],"1305":[48,23,48,36],"1313":[48,37,48,43],"1321":[48,23,48,44],"1329":[48,5,48,44],"1337":[48,5,48,45],"1345":[49,5,49,14],"1353":[49,22,49,28],"1361":[49,5,49,28],"1369":[49,5,49,29],"1377":[30,18,50,2],"1385":[30,18,50,2],"1393":[30,18,50,2],"1401":[30,18,50,2],"1409":[30,18,50,2],"1417":[30,18,50,2],"1425":[30,18,50,2],"1433":[30,18,50,2],"1441":[30,18,50,2],"1449":[30,18,50,2],"1457":[30,18,50,2],"1465":[30,18,50,2],"1473":[30,1,50,2],"1481":[30,1,50,3],"1489":[1,1,50,3],"1497":[1,1,50,3],"1505":[1,1,50,3],"1513":[1,1,50,3],"1521":[1,1,50,3],"1529":[1,1,50,3],"1537":[1,1,50,3],"1545":[1,1,50,3],"1553":[8,1,10,2],"1561":[1,1,50,3],"1569":[11,1,15,2],"1577":[1,1,50,3],"1585":[9,12,9,63],"1593":[8,1,10,2],"1601":[8,1,10,2],"1609":[14,12,14,43],"1617":[11,1,15,2],"1625":[11,1,15,2],"1633":[23,9,25,10],"1641":[20,5,27,23],"1649":[16,18,29,2],"1657":[16,18,29,2],"1665":[36,9,38,10],"1673":[40,9,42,10],"1681":[35,5,47,28],"1689":[30,18,50,2],"1697":[30,18,50,2],"1705":[1,1,50,3],"1713":[1,1,50,3],"nBranches":14,"originalCodeFileName":"/home/blake/ExpoSE/Targets/less-file/node_modules/less/node_modules/source-map/lib/base64-vlq.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/less-file/node_modules/less/node_modules/source-map/lib/base64-vlq_jalangi_.js","code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = require('./base64');\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n"};
jalangiLabel935:
    while (true) {
        try {
            J$.Se(1489, '/home/blake/ExpoSE/Targets/less-file/node_modules/less/node_modules/source-map/lib/base64-vlq_jalangi_.js', '/home/blake/ExpoSE/Targets/less-file/node_modules/less/node_modules/source-map/lib/base64-vlq.js');
            function toVLQSigned(aValue) {
                jalangiLabel931:
                    while (true) {
                        try {
                            J$.Fe(313, arguments.callee, this, arguments);
                            arguments = J$.N(321, 'arguments', arguments, 4);
                            aValue = J$.N(329, 'aValue', aValue, 4);
                            return J$.X1(305, J$.Rt(297, J$.X1(1585, J$.C(8, J$.B(26, '<', J$.R(233, 'aValue', aValue, 0), J$.T(241, 0, 22, false), 0))) ? J$.B(50, '+', J$.B(42, '<<', J$.U(34, '-', J$.R(249, 'aValue', aValue, 0)), J$.T(257, 1, 22, false), 0), J$.T(265, 1, 22, false), 0) : J$.B(66, '+', J$.B(58, '<<', J$.R(273, 'aValue', aValue, 0), J$.T(281, 1, 22, false), 0), J$.T(289, 0, 22, false), 0)));
                        } catch (J$e) {
                            J$.Ex(1593, J$e);
                        } finally {
                            if (J$.Fr(1601))
                                continue jalangiLabel931;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function fromVLQSigned(aValue) {
                jalangiLabel932:
                    while (true) {
                        try {
                            J$.Fe(449, arguments.callee, this, arguments);
                            arguments = J$.N(457, 'arguments', arguments, 4);
                            aValue = J$.N(465, 'aValue', aValue, 4);
                            J$.N(473, 'isNegative', isNegative, 0);
                            J$.N(481, 'shifted', shifted, 0);
                            var isNegative = J$.X1(369, J$.W(361, 'isNegative', J$.B(82, '===', J$.B(74, '&', J$.R(337, 'aValue', aValue, 0), J$.T(345, 1, 22, false), 0), J$.T(353, 1, 22, false), 0), isNegative, 1));
                            var shifted = J$.X1(401, J$.W(393, 'shifted', J$.B(90, '>>', J$.R(377, 'aValue', aValue, 0), J$.T(385, 1, 22, false), 0), shifted, 1));
                            return J$.X1(441, J$.Rt(433, J$.X1(1609, J$.C(16, J$.R(409, 'isNegative', isNegative, 0))) ? J$.U(98, '-', J$.R(417, 'shifted', shifted, 0)) : J$.R(425, 'shifted', shifted, 0)));
                        } catch (J$e) {
                            J$.Ex(1617, J$e);
                        } finally {
                            if (J$.Fr(1625))
                                continue jalangiLabel932;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1497, '__secret__S$', __secret__S$, 0);
            J$.N(1505, '__secret__traits__', __secret__traits__, 0);
            J$.N(1513, 'base64', base64, 0);
            J$.N(1521, 'VLQ_BASE_SHIFT', VLQ_BASE_SHIFT, 0);
            J$.N(1529, 'VLQ_BASE', VLQ_BASE, 0);
            J$.N(1537, 'VLQ_BASE_MASK', VLQ_BASE_MASK, 0);
            J$.N(1545, 'VLQ_CONTINUATION_BIT', VLQ_CONTINUATION_BIT, 0);
            toVLQSigned = J$.N(1561, 'toVLQSigned', J$.T(1553, toVLQSigned, 12, false, 313), 0);
            fromVLQSigned = J$.N(1577, 'fromVLQSigned', J$.T(1569, fromVLQSigned, 12, false, 449), 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            var base64 = J$.X1(113, J$.W(105, 'base64', J$.F(97, J$.R(81, 'require', require, 2), 0)(J$.T(89, './base64', 21, false)), base64, 3));
            var VLQ_BASE_SHIFT = J$.X1(137, J$.W(129, 'VLQ_BASE_SHIFT', J$.T(121, 5, 22, false), VLQ_BASE_SHIFT, 3));
            var VLQ_BASE = J$.X1(169, J$.W(161, 'VLQ_BASE', J$.B(10, '<<', J$.T(145, 1, 22, false), J$.R(153, 'VLQ_BASE_SHIFT', VLQ_BASE_SHIFT, 1), 0), VLQ_BASE, 3));
            var VLQ_BASE_MASK = J$.X1(201, J$.W(193, 'VLQ_BASE_MASK', J$.B(18, '-', J$.R(177, 'VLQ_BASE', VLQ_BASE, 1), J$.T(185, 1, 22, false), 0), VLQ_BASE_MASK, 3));
            var VLQ_CONTINUATION_BIT = J$.X1(225, J$.W(217, 'VLQ_CONTINUATION_BIT', J$.R(209, 'VLQ_BASE', VLQ_BASE, 1), VLQ_CONTINUATION_BIT, 3));
            J$.X1(833, J$.P(825, J$.R(489, 'exports', exports, 2), 'encode', J$.T(817, function base64VLQ_encode(aValue) {
                jalangiLabel933:
                    while (true) {
                        try {
                            J$.Fe(761, arguments.callee, this, arguments);
                            arguments = J$.N(769, 'arguments', arguments, 4);
                            base64VLQ_encode = J$.N(777, 'base64VLQ_encode', base64VLQ_encode, 0);
                            aValue = J$.N(785, 'aValue', aValue, 4);
                            J$.N(793, 'encoded', encoded, 0);
                            J$.N(801, 'digit', digit, 0);
                            J$.N(809, 'vlq', vlq, 0);
                            var encoded = J$.X1(513, J$.W(505, 'encoded', J$.T(497, '', 21, false), encoded, 1));
                            var digit;
                            var vlq = J$.X1(553, J$.W(545, 'vlq', J$.F(537, J$.R(521, 'toVLQSigned', toVLQSigned, 1), 0)(J$.R(529, 'aValue', aValue, 0)), vlq, 1));
                            do {
                                J$.X1(585, digit = J$.W(577, 'digit', J$.B(106, '&', J$.R(561, 'vlq', vlq, 0), J$.R(569, 'VLQ_BASE_MASK', VLQ_BASE_MASK, 1), 0), digit, 0));
                                J$.X1(617, vlq = J$.W(609, 'vlq', J$.B(114, '>>>', J$.R(601, 'vlq', vlq, 0), J$.R(593, 'VLQ_BASE_SHIFT', VLQ_BASE_SHIFT, 1), 0), vlq, 0));
                                if (J$.X1(1633, J$.C(24, J$.B(122, '>', J$.R(625, 'vlq', vlq, 0), J$.T(633, 0, 22, false), 0)))) {
                                    J$.X1(665, digit = J$.W(657, 'digit', J$.B(130, '|', J$.R(649, 'digit', digit, 0), J$.R(641, 'VLQ_CONTINUATION_BIT', VLQ_CONTINUATION_BIT, 1), 0), digit, 0));
                                }
                                J$.X1(713, encoded = J$.W(705, 'encoded', J$.B(138, '+', J$.R(697, 'encoded', encoded, 0), J$.M(689, J$.R(673, 'base64', base64, 1), 'encode', 0)(J$.R(681, 'digit', digit, 0)), 0), encoded, 0));
                            } while (J$.X1(1641, J$.C(32, J$.B(146, '>', J$.R(721, 'vlq', vlq, 0), J$.T(729, 0, 22, false), 0))));
                            return J$.X1(753, J$.Rt(745, J$.R(737, 'encoded', encoded, 0)));
                        } catch (J$e) {
                            J$.Ex(1649, J$e);
                        } finally {
                            if (J$.Fr(1657))
                                continue jalangiLabel933;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 761), 0));
            J$.X1(1481, J$.P(1473, J$.R(841, 'exports', exports, 2), 'decode', J$.T(1465, function base64VLQ_decode(aStr, aIndex, aOutParam) {
                jalangiLabel934:
                    while (true) {
                        try {
                            J$.Fe(1377, arguments.callee, this, arguments);
                            arguments = J$.N(1385, 'arguments', arguments, 4);
                            base64VLQ_decode = J$.N(1393, 'base64VLQ_decode', base64VLQ_decode, 0);
                            aStr = J$.N(1401, 'aStr', aStr, 4);
                            aIndex = J$.N(1409, 'aIndex', aIndex, 4);
                            aOutParam = J$.N(1417, 'aOutParam', aOutParam, 4);
                            J$.N(1425, 'strLen', strLen, 0);
                            J$.N(1433, 'result', result, 0);
                            J$.N(1441, 'shift', shift, 0);
                            J$.N(1449, 'continuation', continuation, 0);
                            J$.N(1457, 'digit', digit, 0);
                            var strLen = J$.X1(873, J$.W(865, 'strLen', J$.G(857, J$.R(849, 'aStr', aStr, 0), 'length', 0), strLen, 1));
                            var result = J$.X1(897, J$.W(889, 'result', J$.T(881, 0, 22, false), result, 1));
                            var shift = J$.X1(921, J$.W(913, 'shift', J$.T(905, 0, 22, false), shift, 1));
                            var continuation, digit;
                            do {
                                if (J$.X1(1665, J$.C(40, J$.B(154, '>=', J$.R(929, 'aIndex', aIndex, 0), J$.R(937, 'strLen', strLen, 0), 0)))) {
                                    throw J$.X1(977, J$.Th(969, J$.F(961, J$.R(945, 'Error', Error, 2), 1)(J$.T(953, 'Expected more digits in base 64 VLQ value.', 21, false))));
                                }
                                J$.X1(1057, digit = J$.W(1049, 'digit', J$.M(1041, J$.R(985, 'base64', base64, 1), 'decode', 0)(J$.M(1033, J$.R(993, 'aStr', aStr, 0), 'charCodeAt', 0)(J$.B(178, '-', aIndex = J$.W(1017, 'aIndex', J$.B(170, '+', J$.U(162, '+', J$.R(1009, 'aIndex', aIndex, 0)), J$.T(1001, 1, 22, false), 0), aIndex, 0), J$.T(1025, 1, 22, false), 0))), digit, 0));
                                if (J$.X1(1673, J$.C(48, J$.B(194, '===', J$.R(1065, 'digit', digit, 0), J$.U(186, '-', J$.T(1073, 1, 22, false)), 0)))) {
                                    throw J$.X1(1145, J$.Th(1137, J$.F(1129, J$.R(1081, 'Error', Error, 2), 1)(J$.B(210, '+', J$.T(1089, 'Invalid base64 digit: ', 21, false), J$.M(1121, J$.R(1097, 'aStr', aStr, 0), 'charAt', 0)(J$.B(202, '-', J$.R(1105, 'aIndex', aIndex, 0), J$.T(1113, 1, 22, false), 0)), 0))));
                                }
                                J$.X1(1177, continuation = J$.W(1169, 'continuation', J$.U(234, '!', J$.U(226, '!', J$.B(218, '&', J$.R(1153, 'digit', digit, 0), J$.R(1161, 'VLQ_CONTINUATION_BIT', VLQ_CONTINUATION_BIT, 1), 0))), continuation, 0));
                                J$.X1(1209, digit = J$.W(1201, 'digit', J$.B(242, '&', J$.R(1193, 'digit', digit, 0), J$.R(1185, 'VLQ_BASE_MASK', VLQ_BASE_MASK, 1), 0), digit, 0));
                                J$.X1(1249, result = J$.W(1241, 'result', J$.B(258, '+', J$.R(1217, 'result', result, 0), J$.B(250, '<<', J$.R(1225, 'digit', digit, 0), J$.R(1233, 'shift', shift, 0), 0), 0), result, 0));
                                J$.X1(1281, shift = J$.W(1273, 'shift', J$.B(266, '+', J$.R(1265, 'shift', shift, 0), J$.R(1257, 'VLQ_BASE_SHIFT', VLQ_BASE_SHIFT, 1), 0), shift, 0));
                            } while (J$.X1(1681, J$.C(56, J$.R(1289, 'continuation', continuation, 0))));
                            J$.X1(1337, J$.P(1329, J$.R(1297, 'aOutParam', aOutParam, 0), 'value', J$.F(1321, J$.R(1305, 'fromVLQSigned', fromVLQSigned, 1), 0)(J$.R(1313, 'result', result, 0)), 0));
                            J$.X1(1369, J$.P(1361, J$.R(1345, 'aOutParam', aOutParam, 0), 'rest', J$.R(1353, 'aIndex', aIndex, 0), 0));
                        } catch (J$e) {
                            J$.Ex(1689, J$e);
                        } finally {
                            if (J$.Fr(1697))
                                continue jalangiLabel934;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1377), 0));
        } catch (J$e) {
            J$.Ex(1705, J$e);
        } finally {
            if (J$.Sr(1713)) {
                J$.L();
                continue jalangiLabel935;
            } else {
                J$.L();
                break jalangiLabel935;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
