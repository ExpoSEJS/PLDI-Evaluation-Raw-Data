J$.iids = {"8":[8,17,8,29],"9":[1,20,1,27],"10":[5,20,5,30],"16":[12,42,12,49],"17":[1,28,1,32],"18":[5,20,5,46],"24":[18,12,18,24],"25":[1,20,1,33],"26":[12,42,12,49],"32":[21,16,21,28],"33":[1,20,1,33],"34":[12,51,12,54],"40":[22,23,22,35],"41":[1,20,1,33],"48":[24,9,24,41],"49":[2,26,2,38],"50":[12,51,12,54],"56":[24,9,24,41],"57":[2,26,2,45],"58":[24,9,24,21],"64":[28,13,28,25],"65":[2,26,2,45],"66":[27,9,27,21],"72":[27,9,27,21],"73":[2,26,2,45],"74":[46,13,46,21],"80":[36,9,36,21],"81":[3,12,3,19],"82":[55,21,55,31],"88":[46,13,46,21],"89":[3,20,3,28],"90":[55,21,55,56],"96":[51,13,51,38],"97":[3,12,3,29],"98":[58,9,58,18],"104":[44,9,44,21],"105":[3,12,3,29],"106":[58,22,58,47],"112":[58,9,58,47],"113":[3,12,3,29],"114":[61,21,61,52],"120":[58,9,58,47],"121":[4,11,4,17],"129":[4,11,4,27],"137":[4,11,4,42],"145":[4,11,4,42],"153":[4,11,4,42],"161":[5,27,5,30],"169":[5,35,5,46],"177":[5,20,5,46],"185":[5,20,5,46],"193":[7,5,7,9],"201":[7,19,7,21],"209":[7,5,7,21],"217":[7,5,7,22],"225":[8,5,8,9],"233":[8,17,8,29],"241":[8,36,8,39],"249":[8,32,8,41],"257":[8,44,8,50],"265":[8,58,8,62],"273":[8,44,8,63],"275":[8,44,8,57],"281":[8,5,8,63],"289":[8,5,8,64],"297":[6,1,9,2],"305":[6,1,9,2],"313":[10,1,10,9],"321":[11,19,11,27],"329":[11,15,11,29],"337":[11,15,11,29],"345":[11,15,11,29],"353":[12,18,12,19],"361":[12,27,12,33],"369":[12,27,12,40],"377":[12,18,12,19],"385":[12,18,12,19],"393":[12,27,12,40],"401":[12,27,12,40],"409":[12,42,12,43],"417":[12,46,12,49],"433":[12,51,12,52],"441":[12,51,12,54],"457":[13,9,13,12],"465":[13,17,13,23],"473":[13,24,13,25],"481":[13,17,13,26],"489":[13,28,13,44],"497":[13,9,13,45],"499":[13,9,13,16],"505":[13,9,13,46],"513":[15,12,15,15],"521":[15,12,15,15],"529":[15,5,15,16],"537":[10,22,16,2],"545":[10,22,16,2],"553":[10,22,16,2],"561":[10,22,16,2],"569":[10,22,16,2],"577":[10,22,16,2],"585":[10,22,16,2],"593":[10,22,16,2],"601":[10,22,16,2],"609":[10,1,16,2],"617":[10,1,16,3],"625":[17,1,17,9],"633":[17,1,17,19],"641":[18,12,18,24],"649":[18,27,18,31],"657":[18,27,18,36],"665":[18,27,18,41],"673":[18,44,18,50],"681":[18,71,18,75],"689":[18,71,18,80],"697":[18,44,18,81],"699":[18,44,18,70],"705":[18,44,18,88],"713":[18,12,18,88],"721":[18,5,18,89],"729":[17,27,19,2],"737":[17,27,19,2],"745":[17,27,19,2],"753":[17,27,19,2],"761":[17,1,19,2],"769":[17,1,19,3],"777":[20,1,20,9],"785":[20,1,20,19],"793":[21,16,21,28],"801":[21,31,21,35],"809":[21,38,21,42],"817":[21,55,21,59],"825":[21,38,21,60],"827":[21,38,21,54],"833":[21,16,21,60],"841":[21,16,21,60],"849":[22,23,22,35],"857":[22,38,22,42],"865":[22,47,22,51],"873":[22,38,22,52],"875":[22,38,22,46],"881":[22,55,22,58],"889":[22,64,22,68],"897":[22,64,22,73],"905":[22,75,22,79],"913":[22,55,22,80],"915":[22,55,22,63],"921":[22,23,22,80],"929":[22,23,22,80],"937":[23,15,23,19],"945":[23,15,23,26],"953":[23,15,23,33],"961":[23,15,23,33],"969":[23,15,23,33],"977":[24,10,24,21],"985":[24,25,24,41],"993":[25,9,25,13],"1001":[25,9,25,20],"1009":[25,26,25,30],"1017":[25,9,25,31],"1019":[25,9,25,25],"1025":[25,9,25,32],"1033":[27,10,27,21],"1041":[28,13,28,25],"1049":[29,13,29,17],"1057":[29,13,29,22],"1065":[29,27,29,31],"1073":[29,33,29,36],"1081":[29,13,29,37],"1083":[29,13,29,26],"1089":[29,13,29,38],"1097":[31,13,31,17],"1105":[31,13,31,22],"1113":[31,23,31,27],"1121":[31,31,31,34],"1129":[31,13,31,34],"1137":[31,13,31,35],"1145":[20,26,34,2],"1153":[20,26,34,2],"1161":[20,26,34,2],"1169":[20,26,34,2],"1177":[20,26,34,2],"1185":[20,26,34,2],"1193":[20,26,34,2],"1201":[20,26,34,2],"1209":[20,26,34,2],"1217":[20,1,34,2],"1225":[20,1,34,3],"1233":[35,1,35,9],"1241":[35,1,35,19],"1249":[36,9,36,21],"1257":[37,16,37,20],"1265":[37,16,37,25],"1273":[37,30,37,34],"1281":[37,16,37,35],"1283":[37,16,37,29],"1289":[37,16,37,35],"1297":[37,9,37,36],"1305":[39,20,39,24],"1313":[39,37,39,41],"1321":[39,20,39,42],"1323":[39,20,39,36],"1329":[39,20,39,42],"1337":[39,20,39,42],"1345":[40,16,40,19],"1353":[40,25,40,29],"1361":[40,25,40,34],"1369":[40,36,40,40],"1377":[40,16,40,41],"1379":[40,16,40,24],"1385":[40,16,40,41],"1393":[40,9,40,42],"1401":[35,26,42,2],"1409":[35,26,42,2],"1417":[35,26,42,2],"1425":[35,26,42,2],"1433":[35,26,42,2],"1441":[35,26,42,2],"1449":[35,1,42,2],"1457":[35,1,42,3],"1465":[43,1,43,9],"1473":[43,1,43,19],"1481":[44,9,44,21],"1489":[45,19,45,23],"1497":[45,19,45,28],"1505":[45,33,45,37],"1513":[45,19,45,38],"1515":[45,19,45,32],"1521":[45,19,45,38],"1529":[45,19,45,38],"1537":[46,13,46,16],"1545":[46,20,46,21],"1553":[47,20,47,23],"1561":[47,20,47,23],"1569":[47,13,47,24],"1577":[50,20,50,24],"1585":[50,37,50,41],"1593":[50,20,50,42],"1595":[50,20,50,36],"1601":[50,20,50,42],"1609":[50,20,50,42],"1617":[51,13,51,16],"1625":[51,22,51,26],"1633":[51,22,51,31],"1641":[51,33,51,37],"1649":[51,13,51,38],"1651":[51,13,51,21],"1657":[52,20,52,24],"1665":[52,20,52,29],"1673":[52,30,52,34],"1681":[52,20,52,35],"1689":[52,20,52,35],"1697":[52,13,52,36],"1705":[55,15,55,20],"1713":[55,21,55,24],"1721":[55,27,55,31],"1729":[55,34,55,56],"1737":[55,11,55,57],"1745":[55,11,55,57],"1753":[55,5,55,58],"1761":[43,30,56,2],"1769":[43,30,56,2],"1777":[43,30,56,2],"1785":[43,30,56,2],"1793":[43,30,56,2],"1801":[43,30,56,2],"1809":[43,30,56,2],"1817":[43,1,56,2],"1825":[43,1,56,3],"1833":[57,1,57,9],"1841":[57,1,57,19],"1849":[58,9,58,13],"1857":[58,17,58,18],"1865":[58,22,58,26],"1873":[58,29,58,33],"1881":[58,29,58,40],"1889":[58,29,58,47],"1897":[59,16,59,20],"1905":[59,16,59,27],"1913":[59,28,59,32],"1921":[59,16,59,33],"1929":[59,16,59,33],"1937":[59,9,59,34],"1945":[61,15,61,20],"1953":[61,21,61,45],"1961":[61,48,61,52],"1969":[61,11,61,53],"1977":[61,11,61,53],"1985":[61,5,61,54],"1993":[57,25,62,2],"2001":[57,25,62,2],"2009":[57,25,62,2],"2017":[57,25,62,2],"2025":[57,25,62,2],"2033":[57,1,62,2],"2041":[57,1,62,3],"2049":[63,1,63,9],"2057":[63,1,63,19],"2065":[64,12,64,16],"2073":[64,12,64,23],"2081":[64,12,64,31],"2083":[64,12,64,29],"2089":[64,12,64,31],"2097":[64,5,64,32],"2105":[63,30,65,2],"2113":[63,30,65,2],"2121":[63,30,65,2],"2129":[63,30,65,2],"2137":[63,1,65,2],"2145":[63,1,65,3],"2153":[66,1,66,8],"2161":[66,20,66,28],"2169":[66,1,66,28],"2177":[66,1,66,29],"2185":[1,1,66,29],"2193":[1,1,66,29],"2201":[1,1,66,29],"2209":[1,1,66,29],"2217":[1,1,66,29],"2225":[1,1,66,29],"2233":[6,1,9,2],"2241":[1,1,66,29],"2249":[8,17,8,63],"2257":[6,1,9,2],"2265":[6,1,9,2],"2273":[12,5,14,6],"2281":[12,5,14,6],"2289":[10,22,16,2],"2297":[10,22,16,2],"2305":[18,12,18,88],"2313":[17,27,19,2],"2321":[17,27,19,2],"2329":[21,16,21,60],"2337":[22,23,22,80],"2345":[24,5,26,6],"2353":[28,9,32,10],"2361":[27,5,33,6],"2369":[20,26,34,2],"2377":[20,26,34,2],"2385":[36,5,41,6],"2393":[35,26,42,2],"2401":[35,26,42,2],"2409":[46,9,48,10],"2417":[51,9,53,10],"2425":[44,5,54,6],"2433":[43,30,56,2],"2441":[43,30,56,2],"2449":[58,5,60,6],"2457":[57,25,62,2],"2465":[57,25,62,2],"2473":[63,30,65,2],"2481":[63,30,65,2],"2489":[1,1,66,29],"2497":[1,1,66,29],"nBranches":30,"originalCodeFileName":"/home/blake/ExpoSE/Targets/less-file/node_modules/less/node_modules/source-map/lib/array-set.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/less-file/node_modules/less/node_modules/source-map/lib/array-set_jalangi_.js","code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n"};
jalangiLabel964:
    while (true) {
        try {
            J$.Se(2185, '/home/blake/ExpoSE/Targets/less-file/node_modules/less/node_modules/source-map/lib/array-set_jalangi_.js', '/home/blake/ExpoSE/Targets/less-file/node_modules/less/node_modules/source-map/lib/array-set.js');
            function ArraySet() {
                jalangiLabel956:
                    while (true) {
                        try {
                            J$.Fe(297, arguments.callee, this, arguments);
                            arguments = J$.N(305, 'arguments', arguments, 4);
                            J$.X1(217, J$.P(209, J$.R(193, 'this', this, 0), '_array', J$.T(201, [], 10, false), 0));
                            J$.X1(289, J$.P(281, J$.R(225, 'this', this, 0), '_set', J$.X1(2249, J$.C(8, J$.R(233, 'hasNativeMap', hasNativeMap, 1))) ? J$.F(249, J$.R(241, 'Map', Map, 2), 1)() : J$.M(273, J$.R(257, 'Object', Object, 2), 'create', 0)(J$.T(265, null, 25, false)), 0));
                        } catch (J$e) {
                            J$.Ex(2257, J$e);
                        } finally {
                            if (J$.Fr(2265))
                                continue jalangiLabel956;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2193, '__secret__S$', __secret__S$, 0);
            J$.N(2201, '__secret__traits__', __secret__traits__, 0);
            J$.N(2209, 'util', util, 0);
            J$.N(2217, 'has', has, 0);
            J$.N(2225, 'hasNativeMap', hasNativeMap, 0);
            ArraySet = J$.N(2241, 'ArraySet', J$.T(2233, ArraySet, 12, false, 297), 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            var util = J$.X1(113, J$.W(105, 'util', J$.F(97, J$.R(81, 'require', require, 2), 0)(J$.T(89, './util', 21, false)), util, 3));
            var has = J$.X1(153, J$.W(145, 'has', J$.G(137, J$.G(129, J$.R(121, 'Object', Object, 2), 'prototype', 0), 'hasOwnProperty', 0), has, 3));
            var hasNativeMap = J$.X1(185, J$.W(177, 'hasNativeMap', J$.B(18, '!==', J$.U(10, 'typeof', J$.I(typeof Map === 'undefined' ? J$.R(161, 'Map', undefined, 2) : J$.R(161, 'Map', Map, 2))), J$.T(169, 'undefined', 21, false), 0), hasNativeMap, 3));
            J$.X1(617, J$.P(609, J$.R(313, 'ArraySet', ArraySet, 1), 'fromArray', J$.T(601, function ArraySet_fromArray(aArray, aAllowDuplicates) {
                jalangiLabel957:
                    while (true) {
                        try {
                            J$.Fe(537, arguments.callee, this, arguments);
                            arguments = J$.N(545, 'arguments', arguments, 4);
                            ArraySet_fromArray = J$.N(553, 'ArraySet_fromArray', ArraySet_fromArray, 0);
                            aArray = J$.N(561, 'aArray', aArray, 4);
                            aAllowDuplicates = J$.N(569, 'aAllowDuplicates', aAllowDuplicates, 4);
                            J$.N(577, 'set', set, 0);
                            J$.N(585, 'i', i, 0);
                            J$.N(593, 'len', len, 0);
                            var set = J$.X1(345, J$.W(337, 'set', J$.F(329, J$.R(321, 'ArraySet', ArraySet, 1), 1)(), set, 1));
                            for (var i = J$.X1(385, J$.W(377, 'i', J$.T(353, 0, 22, false), i, 1)), len = J$.X1(401, J$.W(393, 'len', J$.G(369, J$.R(361, 'aArray', aArray, 0), 'length', 0), len, 1)); J$.X1(2273, J$.C(16, J$.B(26, '<', J$.R(409, 'i', i, 0), J$.R(417, 'len', len, 0), 0))); J$.X1(2281, J$.B(50, '-', i = J$.W(441, 'i', J$.B(42, '+', J$.U(34, '+', J$.R(433, 'i', i, 0)), J$.T(425, 1, 22, false), 0), i, 0), J$.T(449, 1, 22, false), 0))) {
                                J$.X1(505, J$.M(497, J$.R(457, 'set', set, 0), 'add', 0)(J$.G(481, J$.R(465, 'aArray', aArray, 0), J$.R(473, 'i', i, 0), 4), J$.R(489, 'aAllowDuplicates', aAllowDuplicates, 0)));
                            }
                            return J$.X1(529, J$.Rt(521, J$.R(513, 'set', set, 0)));
                        } catch (J$e) {
                            J$.Ex(2289, J$e);
                        } finally {
                            if (J$.Fr(2297))
                                continue jalangiLabel957;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 537), 0));
            J$.X1(769, J$.P(761, J$.G(633, J$.R(625, 'ArraySet', ArraySet, 1), 'prototype', 0), 'size', J$.T(753, function ArraySet_size() {
                jalangiLabel958:
                    while (true) {
                        try {
                            J$.Fe(729, arguments.callee, this, arguments);
                            arguments = J$.N(737, 'arguments', arguments, 4);
                            ArraySet_size = J$.N(745, 'ArraySet_size', ArraySet_size, 0);
                            return J$.X1(721, J$.Rt(713, J$.X1(2305, J$.C(24, J$.R(641, 'hasNativeMap', hasNativeMap, 1))) ? J$.G(665, J$.G(657, J$.R(649, 'this', this, 0), '_set', 0), 'size', 0) : J$.G(705, J$.M(697, J$.R(673, 'Object', Object, 2), 'getOwnPropertyNames', 0)(J$.G(689, J$.R(681, 'this', this, 0), '_set', 0)), 'length', 0)));
                        } catch (J$e) {
                            J$.Ex(2313, J$e);
                        } finally {
                            if (J$.Fr(2321))
                                continue jalangiLabel958;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 729), 0));
            J$.X1(1225, J$.P(1217, J$.G(785, J$.R(777, 'ArraySet', ArraySet, 1), 'prototype', 0), 'add', J$.T(1209, function ArraySet_add(aStr, aAllowDuplicates) {
                jalangiLabel959:
                    while (true) {
                        try {
                            J$.Fe(1145, arguments.callee, this, arguments);
                            arguments = J$.N(1153, 'arguments', arguments, 4);
                            ArraySet_add = J$.N(1161, 'ArraySet_add', ArraySet_add, 0);
                            aStr = J$.N(1169, 'aStr', aStr, 4);
                            aAllowDuplicates = J$.N(1177, 'aAllowDuplicates', aAllowDuplicates, 4);
                            J$.N(1185, 'sStr', sStr, 0);
                            J$.N(1193, 'isDuplicate', isDuplicate, 0);
                            J$.N(1201, 'idx', idx, 0);
                            var sStr = J$.X1(841, J$.W(833, 'sStr', J$.X1(2329, J$.C(32, J$.R(793, 'hasNativeMap', hasNativeMap, 1))) ? J$.R(801, 'aStr', aStr, 0) : J$.M(825, J$.R(809, 'util', util, 1), 'toSetString', 0)(J$.R(817, 'aStr', aStr, 0)), sStr, 1));
                            var isDuplicate = J$.X1(929, J$.W(921, 'isDuplicate', J$.X1(2337, J$.C(40, J$.R(849, 'hasNativeMap', hasNativeMap, 1))) ? J$.M(873, J$.R(857, 'this', this, 0), 'has', 0)(J$.R(865, 'aStr', aStr, 0)) : J$.M(913, J$.R(881, 'has', has, 1), 'call', 0)(J$.G(897, J$.R(889, 'this', this, 0), '_set', 0), J$.R(905, 'sStr', sStr, 0)), isDuplicate, 1));
                            var idx = J$.X1(969, J$.W(961, 'idx', J$.G(953, J$.G(945, J$.R(937, 'this', this, 0), '_array', 0), 'length', 0), idx, 1));
                            if (J$.X1(2345, J$.C(56, J$.C(48, J$.U(58, '!', J$.R(977, 'isDuplicate', isDuplicate, 0))) ? J$._() : J$.R(985, 'aAllowDuplicates', aAllowDuplicates, 0)))) {
                                J$.X1(1025, J$.M(1017, J$.G(1001, J$.R(993, 'this', this, 0), '_array', 0), 'push', 0)(J$.R(1009, 'aStr', aStr, 0)));
                            }
                            if (J$.X1(2361, J$.C(72, J$.U(66, '!', J$.R(1033, 'isDuplicate', isDuplicate, 0))))) {
                                if (J$.X1(2353, J$.C(64, J$.R(1041, 'hasNativeMap', hasNativeMap, 1)))) {
                                    J$.X1(1089, J$.M(1081, J$.G(1057, J$.R(1049, 'this', this, 0), '_set', 0), 'set', 0)(J$.R(1065, 'aStr', aStr, 0), J$.R(1073, 'idx', idx, 0)));
                                } else {
                                    J$.X1(1137, J$.P(1129, J$.G(1105, J$.R(1097, 'this', this, 0), '_set', 0), J$.R(1113, 'sStr', sStr, 0), J$.R(1121, 'idx', idx, 0), 2));
                                }
                            }
                        } catch (J$e) {
                            J$.Ex(2369, J$e);
                        } finally {
                            if (J$.Fr(2377))
                                continue jalangiLabel959;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1145), 0));
            J$.X1(1457, J$.P(1449, J$.G(1241, J$.R(1233, 'ArraySet', ArraySet, 1), 'prototype', 0), 'has', J$.T(1441, function ArraySet_has(aStr) {
                jalangiLabel960:
                    while (true) {
                        try {
                            J$.Fe(1401, arguments.callee, this, arguments);
                            arguments = J$.N(1409, 'arguments', arguments, 4);
                            ArraySet_has = J$.N(1417, 'ArraySet_has', ArraySet_has, 0);
                            aStr = J$.N(1425, 'aStr', aStr, 4);
                            J$.N(1433, 'sStr', sStr, 0);
                            if (J$.X1(2385, J$.C(80, J$.R(1249, 'hasNativeMap', hasNativeMap, 1)))) {
                                return J$.X1(1297, J$.Rt(1289, J$.M(1281, J$.G(1265, J$.R(1257, 'this', this, 0), '_set', 0), 'has', 0)(J$.R(1273, 'aStr', aStr, 0))));
                            } else {
                                var sStr = J$.X1(1337, J$.W(1329, 'sStr', J$.M(1321, J$.R(1305, 'util', util, 1), 'toSetString', 0)(J$.R(1313, 'aStr', aStr, 0)), sStr, 1));
                                return J$.X1(1393, J$.Rt(1385, J$.M(1377, J$.R(1345, 'has', has, 1), 'call', 0)(J$.G(1361, J$.R(1353, 'this', this, 0), '_set', 0), J$.R(1369, 'sStr', sStr, 0))));
                            }
                        } catch (J$e) {
                            J$.Ex(2393, J$e);
                        } finally {
                            if (J$.Fr(2401))
                                continue jalangiLabel960;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1401), 0));
            J$.X1(1825, J$.P(1817, J$.G(1473, J$.R(1465, 'ArraySet', ArraySet, 1), 'prototype', 0), 'indexOf', J$.T(1809, function ArraySet_indexOf(aStr) {
                jalangiLabel961:
                    while (true) {
                        try {
                            J$.Fe(1761, arguments.callee, this, arguments);
                            arguments = J$.N(1769, 'arguments', arguments, 4);
                            ArraySet_indexOf = J$.N(1777, 'ArraySet_indexOf', ArraySet_indexOf, 0);
                            aStr = J$.N(1785, 'aStr', aStr, 4);
                            J$.N(1793, 'idx', idx, 0);
                            J$.N(1801, 'sStr', sStr, 0);
                            if (J$.X1(2425, J$.C(104, J$.R(1481, 'hasNativeMap', hasNativeMap, 1)))) {
                                var idx = J$.X1(1529, J$.W(1521, 'idx', J$.M(1513, J$.G(1497, J$.R(1489, 'this', this, 0), '_set', 0), 'get', 0)(J$.R(1505, 'aStr', aStr, 0)), idx, 1));
                                if (J$.X1(2409, J$.C(88, J$.B(74, '>=', J$.R(1537, 'idx', idx, 0), J$.T(1545, 0, 22, false), 0)))) {
                                    return J$.X1(1569, J$.Rt(1561, J$.R(1553, 'idx', idx, 0)));
                                }
                            } else {
                                var sStr = J$.X1(1609, J$.W(1601, 'sStr', J$.M(1593, J$.R(1577, 'util', util, 1), 'toSetString', 0)(J$.R(1585, 'aStr', aStr, 0)), sStr, 1));
                                if (J$.X1(2417, J$.C(96, J$.M(1649, J$.R(1617, 'has', has, 1), 'call', 0)(J$.G(1633, J$.R(1625, 'this', this, 0), '_set', 0), J$.R(1641, 'sStr', sStr, 0))))) {
                                    return J$.X1(1697, J$.Rt(1689, J$.G(1681, J$.G(1665, J$.R(1657, 'this', this, 0), '_set', 0), J$.R(1673, 'sStr', sStr, 0), 4)));
                                }
                            }
                            throw J$.X1(1753, J$.Th(1745, J$.F(1737, J$.R(1705, 'Error', Error, 2), 1)(J$.B(90, '+', J$.B(82, '+', J$.T(1713, '"', 21, false), J$.R(1721, 'aStr', aStr, 0), 0), J$.T(1729, '" is not in the set.', 21, false), 0))));
                        } catch (J$e) {
                            J$.Ex(2433, J$e);
                        } finally {
                            if (J$.Fr(2441))
                                continue jalangiLabel961;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1761), 0));
            J$.X1(2041, J$.P(2033, J$.G(1841, J$.R(1833, 'ArraySet', ArraySet, 1), 'prototype', 0), 'at', J$.T(2025, function ArraySet_at(aIdx) {
                jalangiLabel962:
                    while (true) {
                        try {
                            J$.Fe(1993, arguments.callee, this, arguments);
                            arguments = J$.N(2001, 'arguments', arguments, 4);
                            ArraySet_at = J$.N(2009, 'ArraySet_at', ArraySet_at, 0);
                            aIdx = J$.N(2017, 'aIdx', aIdx, 4);
                            if (J$.X1(2449, J$.C(120, J$.C(112, J$.B(98, '>=', J$.R(1849, 'aIdx', aIdx, 0), J$.T(1857, 0, 22, false), 0)) ? J$.B(106, '<', J$.R(1865, 'aIdx', aIdx, 0), J$.G(1889, J$.G(1881, J$.R(1873, 'this', this, 0), '_array', 0), 'length', 0), 0) : J$._()))) {
                                return J$.X1(1937, J$.Rt(1929, J$.G(1921, J$.G(1905, J$.R(1897, 'this', this, 0), '_array', 0), J$.R(1913, 'aIdx', aIdx, 0), 4)));
                            }
                            throw J$.X1(1985, J$.Th(1977, J$.F(1969, J$.R(1945, 'Error', Error, 2), 1)(J$.B(114, '+', J$.T(1953, 'No element indexed by ', 21, false), J$.R(1961, 'aIdx', aIdx, 0), 0))));
                        } catch (J$e) {
                            J$.Ex(2457, J$e);
                        } finally {
                            if (J$.Fr(2465))
                                continue jalangiLabel962;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1993), 0));
            J$.X1(2145, J$.P(2137, J$.G(2057, J$.R(2049, 'ArraySet', ArraySet, 1), 'prototype', 0), 'toArray', J$.T(2129, function ArraySet_toArray() {
                jalangiLabel963:
                    while (true) {
                        try {
                            J$.Fe(2105, arguments.callee, this, arguments);
                            arguments = J$.N(2113, 'arguments', arguments, 4);
                            ArraySet_toArray = J$.N(2121, 'ArraySet_toArray', ArraySet_toArray, 0);
                            return J$.X1(2097, J$.Rt(2089, J$.M(2081, J$.G(2073, J$.R(2065, 'this', this, 0), '_array', 0), 'slice', 0)()));
                        } catch (J$e) {
                            J$.Ex(2473, J$e);
                        } finally {
                            if (J$.Fr(2481))
                                continue jalangiLabel963;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 2105), 0));
            J$.X1(2177, J$.P(2169, J$.R(2153, 'exports', exports, 2), 'ArraySet', J$.R(2161, 'ArraySet', ArraySet, 1), 0));
        } catch (J$e) {
            J$.Ex(2489, J$e);
        } finally {
            if (J$.Sr(2497)) {
                J$.L();
                continue jalangiLabel964;
            } else {
                J$.L();
                break jalangiLabel964;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
