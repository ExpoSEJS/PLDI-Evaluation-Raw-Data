J$.iids = {"8":[9,18,9,61],"9":[1,20,1,27],"10":[9,18,9,48],"16":[20,18,20,61],"17":[1,28,1,32],"18":[9,18,9,61],"24":[55,9,55,46],"25":[1,20,1,33],"26":[20,18,20,48],"32":[62,16,62,40],"33":[1,20,1,33],"34":[20,18,20,61],"40":[60,16,60,40],"41":[1,20,1,33],"42":[55,9,55,46],"48":[58,9,58,33],"49":[2,26,2,38],"50":[56,23,56,94],"56":[65,9,65,37],"57":[2,26,2,45],"58":[58,9,58,33],"64":[67,9,67,141],"65":[2,26,2,45],"66":[60,16,60,40],"72":[67,9,67,186],"73":[2,26,2,45],"74":[62,16,62,40],"80":[67,9,67,186],"81":[3,1,3,13],"82":[65,9,65,37],"88":[71,9,71,32],"89":[3,1,3,14],"90":[67,9,67,38],"96":[86,16,86,40],"97":[4,14,4,21],"98":[67,9,67,67],"104":[84,16,84,40],"105":[4,22,4,32],"106":[67,71,67,112],"112":[78,9,78,33],"113":[4,14,4,33],"114":[67,71,67,141],"120":[94,15,94,30],"121":[4,43,4,50],"122":[67,145,67,186],"128":[105,29,105,91],"129":[4,51,4,61],"130":[76,32,76,56],"136":[105,29,105,91],"137":[4,43,4,62],"138":[78,9,78,33],"144":[106,29,106,91],"145":[4,74,4,81],"146":[84,16,84,40],"152":[106,29,106,91],"153":[4,82,4,92],"154":[86,16,86,40],"160":[110,26,110,61],"161":[4,74,4,93],"162":[89,33,89,62],"168":[109,9,109,24],"169":[4,74,4,101],"170":[90,38,90,79],"176":[143,35,143,87],"177":[4,107,4,114],"178":[94,15,94,30],"184":[148,9,148,92],"185":[4,115,4,121],"186":[105,135,105,146],"192":[148,9,148,92],"193":[4,107,4,122],"194":[105,135,105,151],"200":[153,9,153,18],"201":[4,107,4,129],"202":[109,9,109,24],"208":[167,31,167,85],"209":[4,148,4,155],"210":[110,26,110,47],"216":[168,9,168,39],"217":[4,156,4,166],"218":[110,26,110,61],"224":[168,43,168,75],"225":[4,148,4,167],"226":[143,35,143,74],"232":[168,9,168,75],"233":[4,148,4,182],"234":[143,35,143,87],"240":[168,79,168,111],"241":[4,199,4,204],"242":[148,9,148,68],"248":[168,9,168,111],"249":[4,199,4,217],"250":[148,72,148,92],"256":[169,25,169,54],"257":[4,232,4,238],"258":[153,9,153,18],"264":[169,25,169,54],"265":[4,232,4,249],"266":[167,31,167,72],"272":[168,9,168,111],"273":[4,269,4,275],"274":[167,31,167,85],"280":[172,9,172,38],"281":[4,269,4,291],"282":[195,25,195,54],"288":[172,9,172,55],"289":[4,304,4,310],"290":[196,13,196,41],"296":[173,21,173,50],"297":[4,304,4,319],"298":[196,45,196,69],"304":[173,21,173,50],"305":[4,332,4,339],"306":[200,13,200,41],"312":[176,16,176,53],"313":[4,340,4,354],"314":[200,45,200,78],"320":[179,13,179,27],"321":[4,332,4,355],"322":[205,25,205,49],"328":[172,9,172,55],"329":[4,332,4,360],"330":[205,51,205,54],"336":[183,9,183,38],"337":[4,332,4,369],"344":[183,42,183,72],"345":[4,380,4,387],"346":[205,51,205,54],"352":[183,9,183,72],"353":[4,388,4,401],"354":[206,17,206,45],"360":[183,76,183,108],"361":[4,380,4,402],"362":[206,49,206,77],"368":[183,9,183,108],"369":[4,412,4,418],"370":[216,9,216,36],"376":[184,25,184,37],"377":[4,412,4,424],"378":[233,9,233,48],"384":[183,9,183,108],"385":[4,446,4,452],"386":[237,13,237,45],"392":[187,9,187,38],"393":[4,446,4,470],"394":[239,20,239,52],"400":[188,21,188,33],"401":[4,14,4,33],"402":[241,20,241,52],"408":[187,9,187,38],"409":[4,14,4,33],"410":[252,21,252,46],"416":[195,9,195,54],"417":[4,43,4,62],"418":[252,48,252,51],"424":[196,13,196,69],"425":[4,43,4,62],"432":[196,13,196,69],"433":[4,74,4,101],"434":[252,48,252,51],"440":[199,16,199,53],"441":[4,74,4,101],"442":[256,41,256,70],"448":[200,13,200,78],"449":[4,107,4,129],"450":[257,17,257,47],"456":[200,13,200,78],"457":[4,107,4,129],"458":[260,29,260,69],"464":[199,16,199,53],"465":[4,148,4,182],"466":[270,9,270,29],"472":[195,9,195,54],"473":[4,148,4,182],"474":[270,9,270,43],"480":[206,17,206,77],"481":[4,199,4,217],"482":[281,9,281,35],"488":[206,17,206,77],"489":[4,199,4,217],"490":[284,9,284,24],"496":[205,25,205,49],"497":[4,232,4,249],"498":[284,9,284,38],"504":[204,9,204,22],"505":[4,232,4,249],"512":[216,9,216,36],"513":[4,269,4,291],"520":[220,13,220,30],"521":[4,269,4,291],"528":[220,34,220,52],"529":[4,304,4,319],"536":[220,13,220,52],"537":[4,304,4,319],"544":[220,13,220,52],"545":[4,332,4,369],"552":[223,13,223,16],"553":[4,332,4,369],"560":[227,9,227,25],"561":[4,380,4,402],"568":[230,9,230,42],"569":[4,380,4,402],"576":[233,9,233,48],"577":[4,412,4,424],"584":[241,20,241,52],"585":[4,412,4,424],"592":[239,20,239,52],"593":[4,446,4,470],"600":[237,13,237,45],"601":[4,446,4,470],"608":[254,17,254,20],"609":[6,5,6,9],"616":[258,21,258,26],"617":[6,14,6,18],"624":[260,29,260,69],"625":[6,14,6,20],"632":[257,17,257,47],"633":[6,5,6,20],"640":[252,21,252,46],"641":[6,5,6,21],"648":[268,9,268,24],"649":[5,30,7,2],"656":[270,9,270,43],"657":[5,30,7,2],"664":[275,9,275,34],"665":[5,30,7,2],"672":[277,9,277,34],"673":[5,30,7,2],"680":[279,9,279,34],"681":[5,30,7,2],"688":[281,9,281,35],"689":[5,30,7,2],"696":[284,9,284,38],"697":[8,1,8,23],"704":[288,17,288,20],"705":[8,1,8,33],"713":[9,25,9,29],"721":[9,25,9,31],"729":[9,25,9,41],"737":[9,25,9,48],"745":[9,52,9,61],"753":[9,64,9,68],"761":[9,64,9,70],"769":[9,64,9,80],"777":[9,64,9,87],"785":[9,90,9,95],"793":[9,18,9,95],"801":[9,18,9,95],"809":[11,12,11,16],"817":[11,12,11,18],"825":[11,12,11,28],"833":[11,12,11,37],"841":[12,12,12,26],"849":[13,16,13,20],"857":[14,17,14,23],"865":[10,20,15,6],"873":[10,20,15,6],"881":[10,20,15,6],"889":[16,5,16,9],"897":[16,5,16,11],"905":[16,24,16,28],"913":[16,5,16,28],"921":[16,5,16,29],"929":[17,12,17,31],"937":[17,32,17,36],"945":[17,38,17,44],"953":[17,38,17,51],"961":[17,53,17,61],"969":[17,12,17,62],"977":[17,12,17,62],"985":[17,5,17,63],"993":[8,43,18,2],"1001":[8,43,18,2],"1009":[8,43,18,2],"1017":[8,43,18,2],"1025":[8,43,18,2],"1033":[8,43,18,2],"1041":[8,1,18,2],"1049":[8,1,18,3],"1057":[19,1,19,23],"1065":[19,1,19,33],"1073":[20,25,20,29],"1081":[20,25,20,31],"1089":[20,25,20,41],"1097":[20,25,20,48],"1105":[20,52,20,61],"1113":[20,64,20,68],"1121":[20,64,20,70],"1129":[20,64,20,80],"1137":[20,64,20,87],"1145":[20,90,20,95],"1153":[20,18,20,95],"1161":[20,18,20,95],"1169":[22,12,22,16],"1177":[22,12,22,18],"1185":[22,12,22,28],"1193":[22,12,22,37],"1201":[23,12,23,26],"1209":[24,16,24,21],"1217":[25,17,25,23],"1225":[21,20,26,6],"1233":[21,20,26,6],"1241":[21,20,26,6],"1249":[27,5,27,9],"1257":[27,5,27,11],"1265":[27,24,27,28],"1273":[27,5,27,28],"1281":[27,5,27,29],"1289":[28,12,28,31],"1297":[28,32,28,36],"1305":[28,38,28,44],"1313":[28,38,28,51],"1321":[28,53,28,61],"1329":[28,12,28,62],"1337":[28,12,28,62],"1345":[28,5,28,63],"1353":[19,46,29,2],"1361":[19,46,29,2],"1369":[19,46,29,2],"1377":[19,46,29,2],"1385":[19,46,29,2],"1393":[19,46,29,2],"1401":[19,1,29,2],"1409":[19,1,29,3],"1417":[30,1,30,23],"1425":[30,1,30,33],"1433":[31,5,31,9],"1441":[31,20,31,34],"1449":[31,5,31,35],"1451":[31,5,31,19],"1457":[31,5,31,36],"1465":[30,47,32,2],"1473":[30,47,32,2],"1481":[30,47,32,2],"1489":[30,47,32,2],"1497":[30,1,32,2],"1505":[30,1,32,3],"1513":[33,1,33,23],"1521":[33,1,33,33],"1529":[34,5,34,9],"1537":[34,5,34,11],"1545":[34,5,34,21],"1553":[34,31,34,35],"1561":[34,5,34,35],"1569":[34,5,34,36],"1577":[35,12,35,16],"1585":[35,12,35,16],"1593":[35,5,35,17],"1601":[33,43,36,2],"1609":[33,43,36,2],"1617":[33,43,36,2],"1625":[33,1,36,2],"1633":[33,1,36,3],"1641":[37,1,37,23],"1649":[37,1,37,33],"1657":[39,12,39,16],"1665":[39,12,39,18],"1673":[39,12,39,28],"1681":[39,12,39,37],"1689":[40,16,40,17],"1697":[38,20,41,6],"1705":[38,20,41,6],"1713":[38,20,41,6],"1721":[42,5,42,9],"1729":[42,5,42,11],"1737":[42,24,42,28],"1745":[42,5,42,28],"1753":[42,5,42,29],"1761":[43,12,43,31],"1769":[43,32,43,36],"1777":[43,38,43,44],"1785":[43,38,43,51],"1793":[43,53,43,61],"1801":[43,12,43,62],"1809":[43,12,43,62],"1817":[43,5,43,63],"1825":[37,46,44,2],"1833":[37,46,44,2],"1841":[37,46,44,2],"1849":[37,46,44,2],"1857":[37,1,44,2],"1865":[37,1,44,3],"1873":[45,1,45,23],"1881":[45,1,45,33],"1889":[47,12,47,16],"1897":[47,12,47,18],"1905":[47,12,47,28],"1913":[47,12,47,37],"1921":[48,16,48,17],"1929":[46,20,49,6],"1937":[46,20,49,6],"1945":[46,20,49,6],"1953":[50,5,50,9],"1961":[50,5,50,11],"1969":[50,24,50,28],"1977":[50,5,50,28],"1985":[50,5,50,29],"1993":[51,12,51,31],"2001":[51,32,51,36],"2009":[51,38,51,44],"2017":[51,38,51,51],"2025":[51,53,51,61],"2033":[51,12,51,62],"2041":[51,12,51,62],"2049":[51,5,51,63],"2057":[45,43,52,2],"2065":[45,43,52,2],"2073":[45,43,52,2],"2081":[45,43,52,2],"2089":[45,1,52,2],"2097":[45,1,52,3],"2105":[54,20,54,25],"2113":[54,20,54,27],"2121":[54,20,54,32],"2129":[54,53,54,61],"2137":[54,63,54,68],"2145":[54,20,54,69],"2147":[54,20,54,52],"2153":[54,20,54,69],"2161":[54,20,54,69],"2169":[55,9,55,17],"2177":[55,21,55,26],"2185":[55,21,55,28],"2193":[55,21,55,46],"2201":[56,15,56,22],"2209":[56,23,56,66],"2217":[56,69,56,74],"2225":[56,69,56,76],"2233":[56,69,56,94],"2241":[56,15,56,95],"2249":[56,15,56,95],"2257":[56,9,56,96],"2265":[57,5,57,10],"2273":[57,5,57,12],"2281":[57,28,57,32],"2289":[57,5,57,32],"2297":[57,5,57,33],"2305":[58,9,58,16],"2313":[58,20,58,26],"2321":[58,20,58,33],"2329":[59,9,59,14],"2337":[59,9,59,16],"2345":[59,32,59,37],"2353":[59,32,59,39],"2361":[59,32,59,58],"2369":[59,9,59,58],"2377":[59,9,59,59],"2385":[60,16,60,23],"2393":[60,27,60,33],"2401":[60,27,60,40],"2409":[61,9,61,14],"2417":[61,9,61,16],"2425":[61,32,61,37],"2433":[61,32,61,39],"2441":[61,32,61,58],"2449":[61,9,61,58],"2457":[61,9,61,59],"2465":[62,16,62,23],"2473":[62,27,62,33],"2481":[62,27,62,40],"2489":[63,9,63,14],"2497":[63,9,63,16],"2505":[63,32,63,37],"2513":[63,32,63,39],"2521":[63,32,63,58],"2529":[63,9,63,58],"2537":[63,9,63,59],"2545":[65,9,65,14],"2553":[65,9,65,16],"2561":[65,9,65,29],"2569":[65,33,65,37],"2577":[66,9,66,14],"2585":[66,9,66,16],"2593":[66,36,66,41],"2601":[66,42,66,49],"2609":[66,51,66,56],"2617":[66,51,66,58],"2625":[66,51,66,71],"2633":[66,32,66,72],"2641":[66,9,66,72],"2649":[66,9,66,73],"2657":[67,9,67,14],"2665":[67,9,67,16],"2673":[67,9,67,29],"2681":[67,9,67,34],"2689":[67,37,67,38],"2697":[67,42,67,47],"2705":[67,42,67,49],"2713":[67,42,67,67],"2721":[67,71,67,76],"2729":[67,71,67,78],"2737":[67,71,67,91],"2745":[67,71,67,101],"2753":[67,104,67,112],"2761":[67,116,67,121],"2769":[67,116,67,123],"2777":[67,116,67,141],"2785":[67,145,67,150],"2793":[67,145,67,152],"2801":[67,145,67,165],"2809":[67,145,67,175],"2817":[67,179,67,186],"2825":[68,9,68,14],"2833":[68,9,68,16],"2841":[68,9,68,24],"2849":[68,30,68,35],"2857":[68,30,68,37],"2865":[68,30,68,50],"2873":[68,9,68,51],"2875":[68,9,68,29],"2881":[68,9,68,52],"2889":[69,9,69,14],"2897":[69,9,69,16],"2905":[69,36,69,41],"2913":[69,42,69,49],"2921":[69,51,69,56],"2929":[69,51,69,58],"2937":[69,51,69,71],"2945":[69,32,69,72],"2953":[69,9,69,72],"2961":[69,9,69,73],"2969":[71,9,71,14],"2977":[71,23,71,31],"2985":[71,9,71,32],"2987":[71,9,71,22],"2993":[72,15,72,22],"3001":[72,23,72,63],"3009":[72,15,72,64],"3017":[72,15,72,64],"3025":[72,9,72,65],"3033":[74,9,74,14],"3041":[74,9,74,16],"3049":[74,9,74,29],"3057":[74,9,74,40],"3065":[74,46,74,54],"3073":[74,9,74,55],"3075":[74,9,74,45],"3081":[74,9,74,56],"3089":[75,9,75,14],"3097":[75,9,75,16],"3105":[75,9,75,29],"3113":[75,9,75,45],"3121":[75,51,75,56],"3129":[75,51,75,58],"3137":[75,51,75,71],"3145":[75,9,75,72],"3147":[75,9,75,50],"3153":[75,9,75,73],"3161":[76,9,76,14],"3169":[76,9,76,16],"3177":[76,32,76,37],"3185":[76,32,76,39],"3193":[76,32,76,52],"3201":[76,55,76,56],"3209":[76,9,76,56],"3217":[76,9,76,57],"3225":[78,9,78,16],"3233":[78,20,78,26],"3241":[78,20,78,33],"3249":[79,9,79,14],"3257":[79,9,79,16],"3265":[79,38,79,43],"3273":[79,38,79,45],"3281":[79,38,79,58],"3289":[79,9,79,58],"3297":[79,9,79,59],"3305":[80,9,80,14],"3313":[80,9,80,16],"3321":[80,9,80,27],"3329":[80,9,80,39],"3337":[81,20,81,25],"3345":[81,20,81,27],"3353":[81,20,81,40],"3361":[82,18,82,26],"3369":[82,18,82,30],"3377":[80,45,83,10],"3385":[80,9,83,11],"3387":[80,9,80,44],"3393":[80,9,83,12],"3401":[84,16,84,23],"3409":[84,27,84,33],"3417":[84,27,84,40],"3425":[85,9,85,14],"3433":[85,9,85,16],"3441":[85,38,85,43],"3449":[85,38,85,45],"3457":[85,38,85,58],"3465":[85,9,85,58],"3473":[85,9,85,59],"3481":[86,16,86,23],"3489":[86,27,86,33],"3497":[86,27,86,40],"3505":[87,9,87,14],"3513":[87,9,87,16],"3521":[87,38,87,43],"3529":[87,38,87,45],"3537":[87,38,87,58],"3545":[87,9,87,58],"3553":[87,9,87,59],"3561":[89,5,89,10],"3569":[89,5,89,12],"3577":[89,5,89,25],"3585":[89,33,89,38],"3593":[89,33,89,40],"3601":[89,33,89,53],"3609":[89,33,89,58],"3617":[89,61,89,62],"3625":[89,5,89,62],"3633":[89,5,89,63],"3641":[90,5,90,10],"3649":[90,5,90,12],"3657":[90,5,90,25],"3665":[90,38,90,43],"3673":[90,38,90,45],"3681":[90,38,90,58],"3689":[90,38,90,68],"3697":[90,71,90,79],"3705":[90,5,90,79],"3713":[90,5,90,80],"3721":[91,12,91,17],"3729":[91,12,91,17],"3737":[91,5,91,18],"3745":[53,27,92,2],"3753":[53,27,92,2],"3761":[53,27,92,2],"3769":[53,27,92,2],"3777":[53,27,92,2],"3785":[53,27,92,2],"3793":[53,27,92,2],"3801":[53,27,92,2],"3809":[53,27,92,2],"3817":[94,15,94,22],"3825":[94,26,94,30],"3833":[94,33,94,35],"3841":[94,38,94,45],"3849":[94,15,94,45],"3857":[94,5,94,46],"3865":[95,16,95,20],"3873":[95,16,95,20],"3881":[95,16,95,20],"3889":[96,21,96,31],"3897":[96,21,96,46],"3905":[96,21,96,46],"3913":[96,21,96,46],"3921":[97,20,97,25],"3929":[97,20,97,25],"3937":[97,20,97,25],"3945":[98,21,98,25],"3953":[98,21,98,25],"3961":[98,21,98,25],"3969":[99,24,99,25],"3977":[99,24,99,25],"3985":[99,24,99,25],"3993":[100,19,100,21],"4001":[100,19,100,21],"4009":[100,19,100,21],"4017":[101,30,101,34],"4025":[101,30,101,34],"4033":[101,30,101,34],"4041":[102,30,102,34],"4049":[102,30,102,34],"4057":[102,30,102,34],"4065":[103,30,103,34],"4073":[103,30,103,34],"4081":[103,30,103,34],"4089":[104,16,104,24],"4097":[104,16,104,29],"4105":[104,16,104,29],"4113":[104,16,104,29],"4121":[105,29,105,37],"4129":[105,29,105,49],"4137":[105,53,105,61],"4145":[105,53,105,73],"4153":[105,53,105,91],"4161":[105,94,105,102],"4169":[105,94,105,114],"4177":[105,94,105,132],"4185":[105,135,105,139],"4193":[105,142,105,146],"4201":[105,149,105,151],"4209":[105,29,105,151],"4217":[105,29,105,151],"4225":[106,29,106,37],"4233":[106,29,106,49],"4241":[106,53,106,61],"4249":[106,53,106,73],"4257":[106,53,106,91],"4265":[106,94,106,102],"4273":[106,94,106,114],"4281":[106,94,106,132],"4289":[106,135,106,139],"4297":[106,29,106,139],"4305":[106,29,106,139],"4313":[107,24,107,30],"4321":[107,44,107,56],"4329":[107,57,107,64],"4337":[107,44,107,65],"4345":[107,67,107,77],"4353":[107,79,107,86],"4361":[107,24,107,87],"4363":[107,24,107,43],"4369":[107,24,107,87],"4377":[107,24,107,87],"4385":[108,26,108,33],"4393":[108,26,108,48],"4401":[108,26,108,48],"4409":[108,26,108,48],"4417":[109,10,109,24],"4425":[110,33,110,39],"4433":[110,33,110,47],"4441":[110,51,110,61],"4449":[110,64,110,70],"4457":[110,64,110,78],"4465":[110,81,110,88],"4473":[110,89,110,102],"4481":[110,81,110,103],"4489":[110,81,110,111],"4497":[110,26,110,111],"4505":[110,9,110,112],"4513":[113,13,113,14],"4521":[114,22,114,24],"4529":[115,29,115,31],"4537":[116,22,116,24],"4545":[117,20,117,21],"4553":[118,20,118,21],"4561":[119,19,119,20],"4569":[120,20,120,21],"4577":[121,19,121,20],"4585":[122,19,122,21],"4593":[112,22,123,6],"4601":[112,22,123,6],"4609":[112,22,123,6],"4617":[124,5,124,9],"4625":[125,21,125,31],"4633":[126,29,126,33],"4641":[127,29,127,33],"4649":[128,29,128,33],"4657":[129,23,129,27],"4665":[130,23,130,24],"4673":[131,18,131,20],"4681":[132,23,132,35],"4689":[133,28,133,45],"4697":[134,28,134,45],"4705":[135,20,135,29],"4713":[136,15,136,19],"4721":[137,19,137,27],"4729":[138,18,138,25],"4737":[139,20,139,29],"4745":[140,19,140,27],"4753":[141,21,141,31],"4761":[142,25,142,39],"4769":[143,42,143,49],"4777":[143,42,143,74],"4785":[143,78,143,87],"4793":[143,90,143,97],"4801":[143,90,143,122],"4809":[143,125,143,130],"4817":[124,14,144,6],"4825":[124,5,144,6],"4833":[124,5,144,7],"4841":[93,30,145,2],"4849":[93,30,145,2],"4857":[93,30,145,2],"4865":[93,30,145,2],"4873":[93,30,145,2],"4881":[93,30,145,2],"4889":[93,30,145,2],"4897":[93,30,145,2],"4905":[93,30,145,2],"4913":[93,30,145,2],"4921":[93,30,145,2],"4929":[93,30,145,2],"4937":[93,30,145,2],"4945":[93,30,145,2],"4953":[93,30,145,2],"4961":[93,30,145,2],"4969":[93,30,145,2],"4977":[93,30,145,2],"4985":[93,30,145,2],"4993":[93,30,145,2],"5001":[93,30,145,2],"5009":[93,30,145,2],"5017":[93,30,145,2],"5025":[146,14,146,36],"5033":[146,50,146,56],"5041":[146,57,146,81],"5049":[146,83,146,105],"5057":[146,107,146,112],"5065":[146,46,146,113],"5073":[146,14,146,113],"5081":[146,14,146,113],"5089":[146,14,146,113],"5097":[147,1,147,23],"5105":[147,1,147,33],"5113":[148,9,148,13],"5121":[148,9,148,15],"5129":[148,9,148,26],"5137":[148,9,148,28],"5145":[148,9,148,31],"5153":[148,9,148,39],"5161":[148,9,148,59],"5169":[148,64,148,68],"5177":[148,72,148,80],"5185":[148,72,148,84],"5193":[148,88,148,92],"5201":[149,9,149,17],"5209":[149,28,149,36],"5217":[149,24,149,38],"5225":[149,9,149,38],"5233":[149,9,149,39],"5241":[150,12,150,31],"5249":[150,32,150,36],"5257":[150,38,150,44],"5265":[150,38,150,51],"5273":[150,53,150,61],"5281":[150,12,150,62],"5289":[150,12,150,62],"5297":[150,5,150,63],"5305":[147,43,151,2],"5313":[147,43,151,2],"5321":[147,43,151,2],"5329":[147,43,151,2],"5337":[147,1,151,2],"5345":[147,1,151,3],"5353":[152,1,152,23],"5361":[152,1,152,33],"5369":[153,10,153,18],"5377":[154,15,154,22],"5385":[154,23,154,68],"5393":[154,15,154,69],"5401":[154,15,154,69],"5409":[154,9,154,70],"5417":[156,5,156,9],"5425":[156,5,156,11],"5433":[156,36,156,44],"5441":[156,24,156,46],"5449":[156,5,156,46],"5457":[156,5,156,47],"5465":[157,16,157,38],"5473":[157,39,157,43],"5481":[157,12,157,44],"5489":[157,12,157,44],"5497":[157,5,157,45],"5505":[152,41,158,2],"5513":[152,41,158,2],"5521":[152,41,158,2],"5529":[152,41,158,2],"5537":[152,1,158,2],"5545":[152,1,158,3],"5553":[159,1,159,7],"5561":[159,23,159,45],"5569":[159,23,159,55],"5577":[159,57,159,65],"5585":[160,17,160,21],"5593":[162,16,162,20],"5601":[162,16,162,22],"5609":[162,16,162,35],"5617":[162,16,162,35],"5625":[162,9,162,36],"5633":[161,10,163,6],"5641":[161,10,163,6],"5649":[161,10,163,6],"5657":[159,67,164,2],"5665":[159,1,164,3],"5667":[159,1,159,22],"5673":[159,1,164,4],"5681":[165,1,165,23],"5689":[165,1,165,33],"5697":[166,15,166,21],"5705":[166,27,166,29],"5713":[166,15,166,30],"5715":[166,15,166,26],"5721":[166,31,166,32],"5729":[166,15,166,33],"5737":[166,15,166,33],"5745":[166,15,166,33],"5753":[167,38,167,42],"5761":[167,38,167,44],"5769":[167,38,167,52],"5777":[167,38,167,72],"5785":[167,76,167,85],"5793":[167,88,167,92],"5801":[167,88,167,94],"5809":[167,88,167,102],"5817":[167,88,167,122],"5825":[167,125,167,129],"5833":[167,125,167,131],"5841":[167,125,167,142],"5849":[167,125,167,144],"5857":[167,125,167,147],"5865":[167,125,167,155],"5873":[167,125,167,175],"5881":[167,31,167,175],"5889":[167,31,167,175],"5897":[168,9,168,11],"5905":[168,9,168,21],"5913":[168,25,168,27],"5921":[168,25,168,37],"5929":[168,25,168,39],"5937":[168,43,168,45],"5945":[168,43,168,56],"5953":[168,60,168,62],"5961":[168,60,168,73],"5969":[168,60,168,75],"5977":[168,79,168,81],"5985":[168,79,168,92],"5993":[168,96,168,98],"6001":[168,96,168,109],"6009":[168,96,168,111],"6017":[169,9,169,11],"6025":[169,12,169,15],"6033":[169,9,169,16],"6041":[169,25,169,27],"6049":[169,25,169,37],"6057":[169,41,169,43],"6065":[169,41,169,54],"6073":[169,57,169,62],"6081":[169,65,169,69],"6089":[169,9,169,69],"6097":[169,9,169,70],"6105":[170,16,170,35],"6113":[170,36,170,40],"6121":[170,42,170,48],"6129":[170,42,170,55],"6137":[170,57,170,59],"6145":[170,60,170,63],"6153":[170,57,170,64],"6161":[170,16,170,65],"6169":[170,16,170,65],"6177":[170,9,170,66],"6185":[172,9,172,11],"6193":[172,9,172,21],"6201":[172,25,172,27],"6209":[172,25,172,38],"6217":[172,42,172,44],"6225":[172,42,172,55],"6233":[173,21,173,23],"6241":[173,21,173,33],"6249":[173,37,173,39],"6257":[173,37,173,50],"6265":[173,53,173,58],"6273":[173,61,173,65],"6281":[173,21,173,65],"6289":[173,21,173,65],"6297":[175,16,175,18],"6305":[175,19,175,22],"6313":[175,16,175,23],"6321":[175,16,175,30],"6329":[176,16,176,18],"6337":[176,19,176,22],"6345":[176,16,176,23],"6353":[176,16,176,30],"6361":[176,34,176,36],"6369":[176,37,176,40],"6377":[176,34,176,41],"6385":[176,34,176,53],"6393":[177,20,177,25],"6401":[174,25,178,10],"6409":[174,25,178,10],"6417":[174,25,178,10],"6425":[179,13,179,15],"6433":[179,16,179,19],"6441":[179,13,179,20],"6449":[179,13,179,27],"6457":[180,13,180,22],"6465":[180,32,180,36],"6473":[180,13,180,36],"6481":[180,13,180,37],"6489":[181,16,181,35],"6497":[181,36,181,40],"6505":[181,42,181,48],"6513":[181,42,181,55],"6521":[181,57,181,66],"6529":[181,16,181,67],"6537":[181,16,181,67],"6545":[181,9,181,68],"6553":[183,9,183,11],"6561":[183,9,183,21],"6569":[183,25,183,27],"6577":[183,25,183,38],"6585":[183,42,183,44],"6593":[183,42,183,54],"6601":[183,58,183,60],"6609":[183,58,183,70],"6617":[183,58,183,72],"6625":[183,76,183,78],"6633":[183,76,183,89],"6641":[183,93,183,95],"6649":[183,93,183,106],"6657":[183,93,183,108],"6665":[184,9,184,11],"6673":[184,12,184,15],"6681":[184,9,184,16],"6689":[184,25,184,27],"6697":[184,25,184,37],"6705":[184,40,184,41],"6713":[184,44,184,45],"6721":[184,9,184,45],"6729":[184,9,184,46],"6737":[185,16,185,35],"6745":[185,36,185,40],"6753":[185,42,185,48],"6761":[185,42,185,55],"6769":[185,57,185,59],"6777":[185,60,185,63],"6785":[185,57,185,64],"6793":[185,16,185,65],"6801":[185,16,185,65],"6809":[185,9,185,66],"6817":[187,9,187,11],"6825":[187,9,187,21],"6833":[187,25,187,27],"6841":[187,25,187,38],"6849":[188,21,188,23],"6857":[188,21,188,33],"6865":[188,36,188,37],"6873":[188,40,188,41],"6881":[188,21,188,41],"6889":[188,21,188,41],"6897":[190,16,190,18],"6905":[190,19,190,22],"6913":[190,16,190,23],"6921":[190,16,190,30],"6929":[191,20,191,25],"6937":[189,25,192,10],"6945":[189,25,192,10],"6953":[189,25,192,10],"6961":[193,16,193,35],"6969":[193,36,193,40],"6977":[193,42,193,48],"6985":[193,42,193,55],"6993":[193,57,193,66],"7001":[193,16,193,67],"7009":[193,16,193,67],"7017":[193,9,193,68],"7025":[195,9,195,11],"7033":[195,9,195,21],"7041":[195,25,195,27],"7049":[195,25,195,37],"7057":[195,25,195,46],"7065":[195,50,195,54],"7073":[196,13,196,32],"7081":[196,37,196,41],"7089":[196,45,196,47],"7097":[196,45,196,57],"7105":[196,45,196,61],"7113":[196,65,196,69],"7121":[197,13,197,15],"7129":[197,13,197,25],"7137":[197,36,197,44],"7145":[197,32,197,46],"7153":[197,13,197,46],"7161":[197,13,197,47],"7169":[198,16,198,35],"7177":[198,36,198,40],"7185":[198,42,198,48],"7193":[198,42,198,55],"7201":[198,57,198,59],"7209":[198,57,198,69],"7217":[198,16,198,70],"7225":[198,16,198,70],"7233":[198,9,198,71],"7241":[199,16,199,18],"7249":[199,16,199,28],"7257":[199,32,199,34],"7265":[199,32,199,44],"7273":[199,32,199,53],"7281":[200,13,200,32],"7289":[200,37,200,41],"7297":[200,45,200,47],"7305":[200,45,200,57],"7313":[200,45,200,66],"7321":[200,45,200,70],"7329":[200,74,200,78],"7337":[201,13,201,15],"7345":[201,13,201,25],"7353":[201,13,201,34],"7361":[201,45,201,53],"7369":[201,41,201,55],"7377":[201,13,201,55],"7385":[201,13,201,56],"7393":[202,16,202,35],"7401":[202,36,202,40],"7409":[202,42,202,48],"7417":[202,42,202,55],"7425":[202,57,202,59],"7433":[202,57,202,69],"7441":[202,57,202,78],"7449":[202,16,202,79],"7457":[202,16,202,79],"7465":[202,9,202,80],"7473":[204,9,204,11],"7481":[204,9,204,22],"7489":[205,22,205,23],"7497":[205,22,205,23],"7505":[205,22,205,23],"7513":[205,25,205,26],"7521":[205,29,205,31],"7529":[205,29,205,42],"7537":[205,29,205,49],"7553":[205,51,205,52],"7561":[205,51,205,54],"7577":[206,17,206,36],"7585":[206,41,206,45],"7593":[206,49,206,51],"7601":[206,49,206,62],"7609":[206,63,206,64],"7617":[206,49,206,65],"7625":[206,49,206,69],"7633":[206,73,206,77],"7641":[207,17,207,19],"7649":[207,17,207,30],"7657":[207,31,207,32],"7665":[207,17,207,33],"7673":[207,44,207,52],"7681":[207,40,207,54],"7689":[207,17,207,54],"7697":[207,17,207,55],"7705":[208,13,208,32],"7713":[208,33,208,37],"7721":[208,39,208,45],"7729":[208,39,208,52],"7737":[208,54,208,56],"7745":[208,54,208,67],"7753":[208,68,208,69],"7761":[208,54,208,70],"7769":[208,13,208,71],"7777":[208,13,208,72],"7785":[210,9,210,16],"7793":[210,9,210,16],"7801":[212,11,212,18],"7809":[212,19,212,135],"7817":[212,11,212,136],"7825":[212,11,212,136],"7833":[212,5,212,137],"7841":[165,40,213,2],"7849":[165,40,213,2],"7857":[165,40,213,2],"7865":[165,40,213,2],"7873":[165,40,213,2],"7881":[165,40,213,2],"7889":[165,40,213,2],"7897":[165,40,213,2],"7905":[165,40,213,2],"7913":[165,40,213,2],"7921":[165,1,213,2],"7929":[165,1,213,3],"7937":[215,35,215,40],"7945":[215,24,215,42],"7953":[215,24,215,42],"7961":[215,24,215,42],"7969":[216,9,216,13],"7977":[216,9,216,15],"7985":[216,9,216,28],"7993":[216,32,216,36],"8001":[217,9,217,21],"8009":[217,37,217,41],"8017":[217,37,217,43],"8025":[217,37,217,56],"8033":[217,9,217,56],"8041":[217,9,217,57],"8049":[220,13,220,16],"8057":[220,20,220,23],"8065":[220,20,220,30],"8073":[220,34,220,37],"8081":[220,41,220,44],"8089":[220,41,220,52],"8097":[221,20,221,34],"8105":[221,35,221,43],"8113":[221,45,221,48],"8121":[221,20,221,49],"8129":[221,20,221,49],"8137":[221,13,221,50],"8145":[223,13,223,16],"8153":[224,13,224,16],"8161":[224,22,224,23],"8169":[224,13,224,23],"8177":[224,13,224,24],"8185":[225,9,225,23],"8193":[225,24,225,32],"8201":[225,34,225,38],"8209":[225,40,225,57],"8217":[225,58,225,63],"8225":[225,65,225,70],"8233":[225,72,225,76],"8241":[225,72,225,78],"8249":[225,72,225,89],"8257":[225,91,225,94],"8265":[225,96,225,102],"8273":[225,40,225,103],"8281":[225,9,225,104],"8289":[225,9,225,105],"8297":[219,25,226,6],"8305":[219,25,226,6],"8313":[219,25,226,6],"8321":[219,25,226,6],"8329":[219,25,226,6],"8337":[219,25,226,6],"8345":[219,25,226,6],"8353":[227,9,227,13],"8361":[227,9,227,25],"8369":[228,9,228,22],"8377":[228,37,228,41],"8385":[228,37,228,53],"8393":[228,9,228,53],"8401":[228,9,228,54],"8409":[230,9,230,13],"8417":[230,9,230,15],"8425":[230,9,230,23],"8433":[230,9,230,42],"8441":[231,9,231,21],"8449":[231,43,231,47],"8457":[231,9,231,47],"8465":[231,9,231,48],"8473":[233,9,233,13],"8481":[233,9,233,15],"8489":[233,9,233,40],"8497":[233,44,233,48],"8505":[234,9,234,21],"8513":[234,49,234,53],"8521":[234,9,234,53],"8529":[234,9,234,54],"8537":[237,13,237,18],"8545":[237,13,237,28],"8553":[237,32,237,38],"8561":[237,32,237,45],"8569":[238,13,238,17],"8577":[238,13,238,19],"8585":[238,13,238,28],"8593":[238,36,238,40],"8601":[238,36,238,42],"8609":[238,36,238,53],"8617":[238,36,238,63],"8625":[238,65,238,70],"8633":[238,65,238,81],"8641":[238,83,238,95],"8649":[238,97,238,110],"8657":[238,13,238,111],"8659":[238,13,238,35],"8665":[238,13,238,112],"8673":[239,20,239,25],"8681":[239,20,239,35],"8689":[239,39,239,45],"8697":[239,39,239,52],"8705":[240,13,240,17],"8713":[240,13,240,19],"8721":[240,13,240,28],"8729":[240,36,240,40],"8737":[240,36,240,42],"8745":[240,36,240,53],"8753":[240,36,240,63],"8761":[240,65,240,70],"8769":[240,65,240,81],"8777":[240,83,240,95],"8785":[240,97,240,110],"8793":[240,13,240,111],"8795":[240,13,240,35],"8801":[240,13,240,112],"8809":[241,20,241,25],"8817":[241,20,241,35],"8825":[241,39,241,45],"8833":[241,39,241,52],"8841":[242,13,242,17],"8849":[242,13,242,19],"8857":[242,13,242,28],"8865":[242,36,242,40],"8873":[242,36,242,42],"8881":[242,36,242,53],"8889":[242,36,242,63],"8897":[242,65,242,70],"8905":[242,65,242,81],"8913":[242,83,242,95],"8921":[242,97,242,110],"8929":[242,13,242,111],"8931":[242,13,242,35],"8937":[242,13,242,112],"8945":[245,9,245,12],"8953":[245,18,245,19],"8961":[245,9,245,19],"8969":[245,9,245,20],"8977":[246,9,246,23],"8985":[246,24,246,32],"8993":[246,34,246,38],"9001":[246,40,246,57],"9009":[246,58,246,63],"9017":[246,65,246,70],"9025":[246,72,246,76],"9033":[246,72,246,78],"9041":[246,72,246,89],"9049":[246,91,246,94],"9057":[246,96,246,100],"9065":[246,40,246,101],"9073":[246,9,246,102],"9081":[246,9,246,103],"9089":[244,7,247,6],"9097":[214,20,248,2],"9105":[214,20,248,2],"9113":[214,20,248,2],"9121":[214,20,248,2],"9129":[214,20,248,2],"9137":[214,20,248,2],"9145":[214,20,248,2],"9153":[214,20,248,2],"9161":[214,20,248,2],"9169":[214,20,248,2],"9177":[250,37,250,41],"9185":[250,37,250,43],"9193":[250,37,250,51],"9201":[250,37,250,58],"9209":[250,37,250,58],"9217":[250,37,250,58],"9225":[251,17,251,21],"9233":[251,17,251,21],"9241":[251,17,251,21],"9249":[252,18,252,19],"9257":[252,18,252,19],"9265":[252,18,252,19],"9273":[252,21,252,22],"9281":[252,25,252,29],"9289":[252,25,252,31],"9297":[252,25,252,39],"9305":[252,25,252,46],"9321":[252,48,252,49],"9329":[252,48,252,51],"9345":[253,9,253,21],"9353":[253,22,253,26],"9361":[253,28,253,32],"9369":[253,28,253,34],"9377":[253,28,253,42],"9385":[253,43,253,44],"9393":[253,28,253,45],"9401":[254,17,254,20],"9409":[255,25,255,28],"9417":[255,25,255,28],"9425":[255,17,255,29],"9433":[256,41,256,66],"9441":[256,69,256,70],"9449":[256,41,256,70],"9457":[256,13,256,71],"9465":[257,17,257,42],"9473":[257,46,257,47],"9481":[258,21,258,26],"9489":[259,28,259,42],"9497":[259,43,259,51],"9505":[259,53,259,58],"9513":[259,28,259,59],"9521":[259,28,259,59],"9529":[259,21,259,60],"9537":[260,29,260,33],"9545":[260,29,260,35],"9553":[260,29,260,46],"9561":[260,29,260,58],"9569":[260,29,260,65],"9577":[260,68,260,69],"9585":[260,72,260,79],"9593":[260,80,260,84],"9601":[260,80,260,86],"9609":[260,80,260,97],"9617":[260,80,260,109],"9625":[260,110,260,111],"9633":[260,80,260,112],"9641":[260,72,260,113],"9649":[260,116,260,120],"9657":[260,29,260,120],"9665":[260,29,260,120],"9673":[261,17,261,31],"9681":[261,32,261,40],"9689":[261,42,261,47],"9697":[261,53,261,68],"9705":[261,69,261,73],"9713":[261,69,261,75],"9721":[261,69,261,86],"9729":[261,49,261,87],"9737":[261,17,261,88],"9745":[261,17,261,89],"9753":[253,47,263,10],"9761":[253,47,263,10],"9769":[253,47,263,10],"9777":[253,47,263,10],"9785":[253,47,263,10],"9793":[253,47,263,10],"9801":[253,9,263,11],"9809":[253,9,263,12],"9817":[249,22,265,2],"9825":[249,22,265,2],"9833":[249,22,265,2],"9841":[249,22,265,2],"9849":[249,22,265,2],"9857":[249,22,265,2],"9865":[249,22,265,2],"9873":[249,22,265,2],"9881":[249,22,265,2],"9889":[249,22,265,2],"9897":[266,1,266,23],"9905":[266,1,266,33],"9913":[267,16,267,20],"9921":[267,16,267,20],"9929":[267,16,267,20],"9937":[268,9,268,13],"9945":[268,9,268,15],"9953":[268,9,268,24],"9961":[269,15,269,22],"9969":[269,23,269,52],"9977":[269,15,269,53],"9985":[269,15,269,53],"9993":[269,9,269,54],"10001":[270,16,270,29],"10009":[270,33,270,43],"10017":[271,20,271,33],"10025":[271,20,271,33],"10033":[271,9,271,34],"10041":[273,9,273,13],"10049":[273,9,273,15],"10057":[273,31,273,44],"10065":[273,9,273,44],"10073":[273,9,273,45],"10081":[275,9,275,13],"10089":[275,9,275,15],"10097":[275,9,275,34],"10105":[276,9,276,13],"10113":[276,9,276,15],"10121":[276,9,276,23],"10129":[276,29,276,33],"10137":[276,29,276,35],"10145":[276,29,276,54],"10153":[276,9,276,55],"10155":[276,9,276,28],"10161":[276,9,276,56],"10169":[277,9,277,13],"10177":[277,9,277,15],"10185":[277,9,277,34],"10193":[278,9,278,13],"10201":[278,9,278,15],"10209":[278,9,278,23],"10217":[278,29,278,33],"10225":[278,29,278,35],"10233":[278,29,278,54],"10241":[278,9,278,55],"10243":[278,9,278,28],"10249":[278,9,278,56],"10257":[279,9,279,13],"10265":[279,9,279,15],"10273":[279,9,279,34],"10281":[280,9,280,13],"10289":[280,9,280,15],"10297":[280,9,280,23],"10305":[280,29,280,33],"10313":[280,29,280,35],"10321":[280,29,280,54],"10329":[280,9,280,55],"10331":[280,9,280,28],"10337":[280,9,280,56],"10345":[281,9,281,13],"10353":[281,9,281,15],"10361":[281,9,281,23],"10369":[281,9,281,30],"10377":[281,34,281,35],"10385":[282,15,282,22],"10393":[282,23,282,65],"10401":[282,15,282,66],"10409":[282,15,282,66],"10417":[282,9,282,67],"10425":[284,16,284,24],"10433":[284,28,284,38],"10441":[285,16,285,30],"10449":[285,31,285,35],"10457":[285,37,285,45],"10465":[285,16,285,46],"10473":[285,16,285,46],"10481":[285,9,285,47],"10489":[286,16,286,20],"10497":[286,16,286,22],"10505":[287,9,287,23],"10513":[287,24,287,28],"10521":[288,17,288,20],"10529":[289,24,289,30],"10537":[289,31,289,34],"10545":[289,24,289,35],"10553":[289,24,289,35],"10561":[289,17,289,36],"10569":[290,13,290,20],"10577":[290,21,290,22],"10585":[290,13,290,23],"10593":[290,13,290,24],"10601":[287,30,291,10],"10609":[287,30,291,10],"10617":[287,30,291,10],"10625":[287,30,291,10],"10633":[287,30,291,10],"10641":[287,9,291,11],"10649":[287,9,291,12],"10657":[286,38,292,6],"10665":[286,38,292,6],"10673":[286,38,292,6],"10681":[286,38,292,6],"10689":[286,38,292,6],"10697":[286,12,292,7],"10699":[286,16,286,37],"10705":[286,12,292,7],"10713":[286,5,292,8],"10721":[266,44,293,2],"10729":[266,44,293,2],"10737":[266,44,293,2],"10745":[266,44,293,2],"10753":[266,44,293,2],"10761":[266,44,293,2],"10769":[266,1,293,2],"10777":[266,1,293,3],"10785":[294,1,294,7],"10793":[294,20,294,29],"10801":[295,15,295,19],"10809":[296,14,296,19],"10817":[294,31,297,2],"10825":[294,1,297,3],"10827":[294,1,294,19],"10833":[294,1,297,4],"10841":[299,16,299,38],"10849":[299,39,299,47],"10857":[299,49,299,59],"10865":[299,61,299,68],"10873":[299,12,299,69],"10881":[299,12,299,69],"10889":[299,5,299,70],"10897":[298,33,300,2],"10905":[298,33,300,2],"10913":[298,33,300,2],"10921":[298,33,300,2],"10929":[298,33,300,2],"10937":[298,33,300,2],"10945":[298,33,300,2],"10953":[298,33,300,2],"10961":[301,1,301,26],"10969":[301,52,301,74],"10977":[301,1,301,74],"10985":[301,1,301,75],"10993":[302,1,302,7],"11001":[302,18,302,43],"11009":[302,1,302,43],"11017":[302,1,302,44],"11025":[303,1,303,7],"11033":[303,1,303,15],"11041":[303,23,303,45],"11049":[303,1,303,45],"11057":[303,1,303,46],"11065":[1,1,303,46],"11073":[1,1,303,46],"11081":[1,1,303,46],"11089":[1,1,303,46],"11097":[1,1,303,46],"11105":[1,1,303,46],"11113":[1,1,303,46],"11121":[1,1,303,46],"11129":[1,1,303,46],"11137":[1,1,303,46],"11145":[1,1,303,46],"11153":[1,1,303,46],"11161":[1,1,303,46],"11169":[1,1,303,46],"11177":[1,1,303,46],"11185":[1,1,303,46],"11193":[1,1,303,46],"11201":[1,1,303,46],"11209":[1,1,303,46],"11217":[1,1,303,46],"11225":[1,1,303,46],"11233":[1,1,303,46],"11241":[1,1,303,46],"11249":[5,30,7,2],"11257":[5,30,7,2],"11265":[9,18,9,95],"11273":[8,43,18,2],"11281":[8,43,18,2],"11289":[20,18,20,95],"11297":[19,46,29,2],"11305":[19,46,29,2],"11313":[30,47,32,2],"11321":[30,47,32,2],"11329":[33,43,36,2],"11337":[33,43,36,2],"11345":[37,46,44,2],"11353":[37,46,44,2],"11361":[45,43,52,2],"11369":[45,43,52,2],"11377":[55,5,56,96],"11385":[62,12,64,6],"11393":[60,12,64,6],"11401":[58,5,64,6],"11409":[65,5,66,73],"11417":[67,5,70,6],"11425":[71,5,77,6],"11433":[86,12,88,6],"11441":[84,12,88,6],"11449":[78,5,88,6],"11457":[53,27,92,2],"11465":[53,27,92,2],"11473":[94,15,94,45],"11481":[105,29,105,151],"11489":[106,29,106,139],"11497":[110,26,110,111],"11505":[109,5,111,6],"11513":[143,35,143,130],"11521":[93,30,145,2],"11529":[93,30,145,2],"11537":[148,5,149,39],"11545":[147,43,151,2],"11553":[147,43,151,2],"11561":[153,5,155,6],"11569":[152,41,158,2],"11577":[152,41,158,2],"11585":[161,10,163,6],"11593":[161,10,163,6],"11601":[167,31,167,175],"11609":[169,25,169,69],"11617":[168,5,171,6],"11625":[173,21,173,65],"11633":[179,9,180,37],"11641":[172,5,182,6],"11649":[184,25,184,45],"11657":[183,5,186,6],"11665":[188,21,188,41],"11673":[187,5,194,6],"11681":[196,9,197,47],"11689":[200,9,201,56],"11697":[199,12,203,6],"11705":[195,5,203,6],"11713":[206,13,207,55],"11721":[205,9,209,10],"11729":[205,9,209,10],"11737":[204,5,211,6],"11745":[165,40,213,2],"11753":[165,40,213,2],"11761":[216,5,218,6],"11769":[220,9,222,10],"11777":[223,9,224,24],"11785":[219,25,226,6],"11793":[219,25,226,6],"11801":[227,5,229,6],"11809":[230,5,232,6],"11817":[233,5,235,6],"11825":[241,16,243,10],"11833":[239,16,243,10],"11841":[237,9,243,10],"11849":[214,20,248,2],"11857":[214,20,248,2],"11865":[254,13,255,29],"11873":[258,17,259,60],"11881":[260,29,260,120],"11889":[257,13,262,14],"11897":[253,47,263,10],"11905":[253,47,263,10],"11913":[252,5,264,6],"11921":[252,5,264,6],"11929":[249,22,265,2],"11937":[249,22,265,2],"11945":[268,5,269,54],"11953":[270,5,274,6],"11961":[275,5,276,56],"11969":[277,5,278,56],"11977":[279,5,280,56],"11985":[281,5,283,6],"11993":[284,5,285,47],"12001":[288,13,289,36],"12009":[287,30,291,10],"12017":[287,30,291,10],"12025":[286,38,292,6],"12033":[286,38,292,6],"12041":[266,44,293,2],"12049":[266,44,293,2],"12057":[298,33,300,2],"12065":[298,33,300,2],"12073":[1,1,303,46],"12081":[1,1,303,46],"nBranches":176,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongodb/lib/bulk/unordered.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongodb/lib/bulk/unordered_jalangi_.js","code":"\"use strict\";\n\nvar common = require('./common')\n\t, utils = require('../utils')\n  , toError = require('../utils').toError\n  , f = require('util').format\n\t, handleCallback = require('../utils').handleCallback\n  , shallowClone = utils.shallowClone\n  , WriteError = common.WriteError\n  , BulkWriteResult = common.BulkWriteResult\n  , LegacyOp = common.LegacyOp\n  , ObjectID = require('mongodb-core').BSON.ObjectID\n  , Define = require('../metadata')\n  , Batch = common.Batch\n  , mergeBatchResults = common.mergeBatchResults;\n\n/**\n * Create a FindOperatorsUnordered instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @property {number} length Get the number of operations in the bulk.\n * @return {FindOperatorsUnordered} a FindOperatorsUnordered instance.\n */\nvar FindOperatorsUnordered = function(self) {\n  this.s = self.s;\n}\n\n/**\n * Add a single update document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.update = function(updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , u: updateDocument\n    , multi: true\n    , upsert: upsert\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n}\n\n/**\n * Add a single update one document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.updateOne = function(updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , u: updateDocument\n    , multi: false\n    , upsert: upsert\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n}\n\n/**\n * Add a replace one operation to the bulk operation\n *\n * @method\n * @param {object} doc the new document to replace the existing one with\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.replaceOne = function(updateDocument) {\n  this.updateOne(updateDocument);\n}\n\n/**\n * Upsert modifier for update bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.upsert = function() {\n  this.s.currentOp.upsert = true;\n  return this;\n}\n\n/**\n * Add a remove one operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.removeOne = function() {\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , limit: 1\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n}\n\n/**\n * Add a remove operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.remove = function() {\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , limit: 0\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n}\n\n//\n// Add to the operations list\n//\nvar addToOperationsList = function(_self, docType, document) {\n  // Get the bsonSize\n  var bsonSize = _self.s.bson.calculateObjectSize(document, false);\n  // Throw error if the doc is bigger than the max BSON size\n  if(bsonSize >= _self.s.maxBatchSizeBytes) throw toError(\"document is larger than the maximum size \" + _self.s.maxBatchSizeBytes);\n  // Holds the current batch\n  _self.s.currentBatch = null;\n  // Get the right type of batch\n  if(docType == common.INSERT) {\n    _self.s.currentBatch = _self.s.currentInsertBatch;\n  } else if(docType == common.UPDATE) {\n    _self.s.currentBatch = _self.s.currentUpdateBatch;\n  } else if(docType == common.REMOVE) {\n    _self.s.currentBatch = _self.s.currentRemoveBatch;\n  }\n\n  // Create a new batch object if we don't have a current one\n  if(_self.s.currentBatch == null) _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n\n  // Check if we need to create a new batch\n  if(((_self.s.currentBatch.size + 1) >= _self.s.maxWriteBatchSize)\n    || ((_self.s.currentBatch.sizeBytes + bsonSize) >= _self.s.maxBatchSizeBytes)\n    || (_self.s.currentBatch.batchType != docType)) {\n    // Save the batch to the execution stack\n    _self.s.batches.push(_self.s.currentBatch);\n\n    // Create a new batch\n    _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n  }\n\n  // We have an array of documents\n  if(Array.isArray(document)) {\n    throw toError(\"operation passed in cannot be an Array\");\n  } else {\n    _self.s.currentBatch.operations.push(document);\n    _self.s.currentBatch.originalIndexes.push(_self.s.currentIndex);\n    _self.s.currentIndex = _self.s.currentIndex + 1;\n  }\n\n  // Save back the current Batch to the right type\n  if(docType == common.INSERT) {\n    _self.s.currentInsertBatch = _self.s.currentBatch;\n    _self.s.bulkResult.insertedIds.push({index: _self.s.currentIndex, _id: document._id});\n  } else if(docType == common.UPDATE) {\n    _self.s.currentUpdateBatch = _self.s.currentBatch;\n  } else if(docType == common.REMOVE) {\n    _self.s.currentRemoveBatch = _self.s.currentBatch;\n  }\n\n  // Update current batch size\n  _self.s.currentBatch.size = _self.s.currentBatch.size + 1;\n  _self.s.currentBatch.sizeBytes = _self.s.currentBatch.sizeBytes + bsonSize;\n\n  // Return self\n  return _self;\n}\n\n/**\n * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @return {UnorderedBulkOperation} a UnorderedBulkOperation instance.\n */\nvar UnorderedBulkOperation = function(topology, collection, options) {\n\toptions = options == null ? {} : options;\n\n\t// Contains reference to self\n\tvar self = this;\n\t// Get the namesspace for the write operations\n  var namespace = collection.collectionName;\n  // Used to mark operation as executed\n  var executed = false;\n\n\t// Current item\n  // var currentBatch = null;\n\tvar currentOp = null;\n\tvar currentIndex = 0;\n  var batches = [];\n\n  // The current Batches for the different operations\n  var currentInsertBatch = null;\n  var currentUpdateBatch = null;\n  var currentRemoveBatch = null;\n\n\t// Handle to the bson serializer, used to calculate running sizes\n\tvar bson = topology.bson;\n\n  // Set max byte size\n  var maxBatchSizeBytes = topology.isMasterDoc && topology.isMasterDoc.maxBsonObjectSize\n    ? topology.isMasterDoc.maxBsonObjectSize : (1024*1025*16);\n  var maxWriteBatchSize = topology.isMasterDoc && topology.isMasterDoc.maxWriteBatchSize\n    ? topology.isMasterDoc.maxWriteBatchSize : 1000;\n\n  // Get the write concern\n  var writeConcern = common.writeConcern(shallowClone(options), collection, options);\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary;\n\n  // No promise library selected fall back\n  if(!promiseLibrary) {\n    promiseLibrary = typeof global.Promise == 'function' ?\n      global.Promise : require('es6-promise').Promise;\n  }\n\n  // Final results\n  var bulkResult = {\n  \t  ok: 1\n    , writeErrors: []\n    , writeConcernErrors: []\n    , insertedIds: []\n    , nInserted: 0\n    , nUpserted: 0\n    , nMatched: 0\n    , nModified: 0\n    , nRemoved: 0\n    , upserted: []\n  };\n\n  // Internal state\n  this.s = {\n    // Final result\n      bulkResult: bulkResult\n    // Current batch state\n    , currentInsertBatch: null\n    , currentUpdateBatch: null\n    , currentRemoveBatch: null\n    , currentBatch: null\n    , currentIndex: 0\n    , batches: []\n    // Write concern\n    , writeConcern: writeConcern\n    // Max batch size options\n    , maxBatchSizeBytes: maxBatchSizeBytes\n    , maxWriteBatchSize: maxWriteBatchSize\n    // Namespace\n    , namespace: namespace\n    // BSON\n    , bson: bson\n    // Topology\n    , topology: topology\n    // Options\n    , options: options\n    // Current operation\n    , currentOp: currentOp\n    // Executed\n    , executed: executed\n    // Collection\n    , collection: collection\n    // Promise Library\n    , promiseLibrary: promiseLibrary\n    // Bypass validation\n    , bypassDocumentValidation: typeof options.bypassDocumentValidation == 'boolean' ? options.bypassDocumentValidation : false\n  }\n}\n\nvar define = UnorderedBulkOperation.define = new Define('UnorderedBulkOperation', UnorderedBulkOperation, false);\n\n/**\n * Add a single insert document to the bulk operation\n *\n * @param {object} doc the document to insert\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nUnorderedBulkOperation.prototype.insert = function(document) {\n  if(this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null) document._id = new ObjectID();\n  return addToOperationsList(this, common.INSERT, document);\n}\n\n/**\n * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne\n *\n * @method\n * @param {object} selector The selector for the bulk operation.\n * @throws {MongoError}\n * @return {FindOperatorsUnordered}\n */\nUnorderedBulkOperation.prototype.find = function(selector) {\n  if (!selector) {\n    throw toError(\"Bulk find operation must specify a selector\");\n  }\n\n  // Save a current selector\n  this.s.currentOp = {\n    selector: selector\n  }\n\n  return new FindOperatorsUnordered(this);\n}\n\nObject.defineProperty(UnorderedBulkOperation.prototype, 'length', {\n  enumerable: true,\n  get: function() {\n    return this.s.currentIndex;\n  }\n});\n\nUnorderedBulkOperation.prototype.raw = function(op) {\n  var key = Object.keys(op)[0];\n\n  // Set up the force server object id\n  var forceServerObjectId = typeof this.s.options.forceServerObjectId == 'boolean'\n    ? this.s.options.forceServerObjectId : this.s.collection.s.db.options.forceServerObjectId;\n\n  // Update operations\n  if((op.updateOne && op.updateOne.q)\n    || (op.updateMany && op.updateMany.q)\n    || (op.replaceOne && op.replaceOne.q)) {\n    op[key].multi = op.updateOne || op.replaceOne ? false : true;\n    return addToOperationsList(this, common.UPDATE, op[key]);\n  }\n\n  // Crud spec update format\n  if(op.updateOne || op.updateMany || op.replaceOne) {\n    var multi = op.updateOne || op.replaceOne ? false : true;\n    var operation = {q: op[key].filter, u: op[key].update || op[key].replacement, multi: multi}\n    if(op[key].upsert) operation.upsert = true;\n    return addToOperationsList(this, common.UPDATE, operation);\n  }\n\n  // Remove operations\n  if(op.removeOne || op.removeMany || (op.deleteOne && op.deleteOne.q) || op.deleteMany && op.deleteMany.q) {\n    op[key].limit = op.removeOne ? 1 : 0;\n    return addToOperationsList(this, common.REMOVE, op[key]);\n  }\n\n  // Crud spec delete operations, less efficient\n  if(op.deleteOne || op.deleteMany) {\n    var limit = op.deleteOne ? 1 : 0;\n    var operation = {q: op[key].filter, limit: limit}\n    return addToOperationsList(this, common.REMOVE, operation);\n  }\n\n  // Insert operations\n  if(op.insertOne && op.insertOne.document == null) {\n    if(forceServerObjectId !== true && op.insertOne._id == null) op.insertOne._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne);\n  } else if(op.insertOne && op.insertOne.document) {\n    if(forceServerObjectId !== true && op.insertOne.document._id == null) op.insertOne.document._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne.document);\n  }\n\n  if(op.insertMany) {\n    for(var i = 0; i < op.insertMany.length; i++) {\n      if(forceServerObjectId !== true && op.insertMany[i]._id == null) op.insertMany[i]._id = new ObjectID();\n      addToOperationsList(this, common.INSERT, op.insertMany[i]);\n    }\n\n    return;\n  }\n\n  // No valid type of operation\n  throw toError(\"bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany\");\n}\n\n//\n// Execute the command\nvar executeBatch = function(self, batch, callback) {\n  var finalOptions = {ordered: false}\n  if(self.s.writeConcern != null) {\n    finalOptions.writeConcern = self.s.writeConcern;\n  }\n\n  var resultHandler = function(err, result) {\n\t\t// Error is a driver related error not a bulk op error, terminate\n\t\tif(err && err.driver || err && err.message) {\n\t\t\treturn handleCallback(callback, err);\n\t\t}\n\n    // If we have and error\n    if(err) err.ok = 0;\n    handleCallback(callback, null, mergeBatchResults(false, batch, self.s.bulkResult, err, result));\n  }\n\n\t// Set an operationIf if provided\n\tif(self.operationId) {\n\t\tresultHandler.operationId = self.operationId;\n\t}\n\n\t// Serialize functions\n\tif(self.s.options.serializeFunctions) {\n\t\tfinalOptions.serializeFunctions = true\n\t}\n\n  // Is the bypassDocumentValidation options specific\n  if(self.s.bypassDocumentValidation == true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n\n  try {\n    if(batch.batchType == common.INSERT) {\n      self.s.topology.insert(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if(batch.batchType == common.UPDATE) {\n      self.s.topology.update(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if(batch.batchType == common.REMOVE) {\n      self.s.topology.remove(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    }\n  } catch(err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    handleCallback(callback, null, mergeBatchResults(false, batch, self.s.bulkResult, err, null));\n  }\n}\n\n//\n// Execute all the commands\nvar executeBatches = function(self, callback) {\n  var numberOfCommandsToExecute = self.s.batches.length;\n\tvar error = null;\n  // Execute over all the batches\n  for(var i = 0; i < self.s.batches.length; i++) {\n    executeBatch(self, self.s.batches[i], function(err, result) {\n\t\t\t// Driver layer error capture it\n\t\t\tif(err) error = err;\n\t\t\t// Count down the number of commands left to execute\n      numberOfCommandsToExecute = numberOfCommandsToExecute - 1;\n\n      // Execute\n      if(numberOfCommandsToExecute == 0) {\n\t\t\t\t// Driver level error\n\t\t\t\tif(error) return handleCallback(callback, error);\n\t\t\t\t// Treat write errors\n        var error = self.s.bulkResult.writeErrors.length > 0 ? toError(self.s.bulkResult.writeErrors[0]) : null;\n        handleCallback(callback, error, new BulkWriteResult(self.s.bulkResult));\n      }\n    });\n  }\n}\n\n/**\n * The callback format for results\n * @callback UnorderedBulkOperation~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {BulkWriteResult} result The bulk write result.\n */\n\n/**\n * Execute the ordered bulk operation\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {UnorderedBulkOperation~resultCallback} [callback] The result callback\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\nUnorderedBulkOperation.prototype.execute = function(_writeConcern, callback) {\n  var self = this;\n  if(this.s.executed) throw toError(\"batch cannot be re-executed\");\n  if(typeof _writeConcern == 'function') {\n    callback = _writeConcern;\n  } else {\n    this.s.writeConcern = _writeConcern;\n  }\n\n  // If we have current batch\n  if(this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n  if(this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n  if(this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n\n  // If we have no operations in the bulk raise an error\n  if(this.s.batches.length == 0) {\n    throw toError(\"Invalid Operation, No operations in bulk\");\n  }\n\n  // Execute using callback\n  if(typeof callback == 'function') return executeBatches(this, callback);\n\n  // Return a Promise\n  return new this.s.promiseLibrary(function(resolve, reject) {\n    executeBatches(self, function(err, r) {\n      if(err) return reject(err);\n      resolve(r);\n    });\n  });\n}\n\ndefine.classMethod('execute', {callback: true, promise:false});\n\n/**\n * Returns an unordered batch object\n * @ignore\n */\nvar initializeUnorderedBulkOp = function(topology, collection, options) {\n\treturn new UnorderedBulkOperation(topology, collection, options);\n}\n\ninitializeUnorderedBulkOp.UnorderedBulkOperation = UnorderedBulkOperation;\nmodule.exports = initializeUnorderedBulkOp;\nmodule.exports.Bulk = UnorderedBulkOperation;\n"};
jalangiLabel2334:
    while (true) {
        try {
            J$.Se(11065, '/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongodb/lib/bulk/unordered_jalangi_.js', '/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongodb/lib/bulk/unordered.js');
            J$.N(11073, '__secret__S$', __secret__S$, 0);
            J$.N(11081, '__secret__traits__', __secret__traits__, 0);
            J$.N(11089, 'common', common, 0);
            J$.N(11097, 'utils', utils, 0);
            J$.N(11105, 'toError', toError, 0);
            J$.N(11113, 'f', f, 0);
            J$.N(11121, 'handleCallback', handleCallback, 0);
            J$.N(11129, 'shallowClone', shallowClone, 0);
            J$.N(11137, 'WriteError', WriteError, 0);
            J$.N(11145, 'BulkWriteResult', BulkWriteResult, 0);
            J$.N(11153, 'LegacyOp', LegacyOp, 0);
            J$.N(11161, 'ObjectID', ObjectID, 0);
            J$.N(11169, 'Define', Define, 0);
            J$.N(11177, 'Batch', Batch, 0);
            J$.N(11185, 'mergeBatchResults', mergeBatchResults, 0);
            J$.N(11193, 'FindOperatorsUnordered', FindOperatorsUnordered, 0);
            J$.N(11201, 'addToOperationsList', addToOperationsList, 0);
            J$.N(11209, 'UnorderedBulkOperation', UnorderedBulkOperation, 0);
            J$.N(11217, 'define', define, 0);
            J$.N(11225, 'executeBatch', executeBatch, 0);
            J$.N(11233, 'executeBatches', executeBatches, 0);
            J$.N(11241, 'initializeUnorderedBulkOp', initializeUnorderedBulkOp, 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            J$.X1(89, J$.T(81, 'use strict', 21, false));
            var common = J$.X1(409, J$.W(401, 'common', J$.F(113, J$.R(97, 'require', require, 2), 0)(J$.T(105, './common', 21, false)), common, 3)), utils = J$.X1(425, J$.W(417, 'utils', J$.F(137, J$.R(121, 'require', require, 2), 0)(J$.T(129, '../utils', 21, false)), utils, 3)), toError = J$.X1(441, J$.W(433, 'toError', J$.G(169, J$.F(161, J$.R(145, 'require', require, 2), 0)(J$.T(153, '../utils', 21, false)), 'toError', 0), toError, 3)), f = J$.X1(457, J$.W(449, 'f', J$.G(201, J$.F(193, J$.R(177, 'require', require, 2), 0)(J$.T(185, 'util', 21, false)), 'format', 0), f, 3)), handleCallback = J$.X1(473, J$.W(465, 'handleCallback', J$.G(233, J$.F(225, J$.R(209, 'require', require, 2), 0)(J$.T(217, '../utils', 21, false)), 'handleCallback', 0), handleCallback, 3)), shallowClone = J$.X1(489, J$.W(481, 'shallowClone', J$.G(249, J$.R(241, 'utils', utils, 1), 'shallowClone', 0), shallowClone, 3)), WriteError = J$.X1(505, J$.W(497, 'WriteError', J$.G(265, J$.R(257, 'common', common, 1), 'WriteError', 0), WriteError, 3)), BulkWriteResult = J$.X1(521, J$.W(513, 'BulkWriteResult', J$.G(281, J$.R(273, 'common', common, 1), 'BulkWriteResult', 0), BulkWriteResult, 3)), LegacyOp = J$.X1(537, J$.W(529, 'LegacyOp', J$.G(297, J$.R(289, 'common', common, 1), 'LegacyOp', 0), LegacyOp, 3)), ObjectID = J$.X1(553, J$.W(545, 'ObjectID', J$.G(337, J$.G(329, J$.F(321, J$.R(305, 'require', require, 2), 0)(J$.T(313, 'mongodb-core', 21, false)), 'BSON', 0), 'ObjectID', 0), ObjectID, 3)), Define = J$.X1(569, J$.W(561, 'Define', J$.F(361, J$.R(345, 'require', require, 2), 0)(J$.T(353, '../metadata', 21, false)), Define, 3)), Batch = J$.X1(585, J$.W(577, 'Batch', J$.G(377, J$.R(369, 'common', common, 1), 'Batch', 0), Batch, 3)), mergeBatchResults = J$.X1(601, J$.W(593, 'mergeBatchResults', J$.G(393, J$.R(385, 'common', common, 1), 'mergeBatchResults', 0), mergeBatchResults, 3));
            var FindOperatorsUnordered = J$.X1(689, J$.W(681, 'FindOperatorsUnordered', J$.T(673, function (self) {
                jalangiLabel2313:
                    while (true) {
                        try {
                            J$.Fe(649, arguments.callee, this, arguments);
                            arguments = J$.N(657, 'arguments', arguments, 4);
                            self = J$.N(665, 'self', self, 4);
                            J$.X1(641, J$.P(633, J$.R(609, 'this', this, 0), 's', J$.G(625, J$.R(617, 'self', self, 0), 's', 0), 0));
                        } catch (J$e) {
                            J$.Ex(11249, J$e);
                        } finally {
                            if (J$.Fr(11257))
                                continue jalangiLabel2313;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 649), FindOperatorsUnordered, 3));
            J$.X1(1049, J$.P(1041, J$.G(705, J$.R(697, 'FindOperatorsUnordered', FindOperatorsUnordered, 1), 'prototype', 0), 'update', J$.T(1033, function (updateDocument) {
                jalangiLabel2314:
                    while (true) {
                        try {
                            J$.Fe(993, arguments.callee, this, arguments);
                            arguments = J$.N(1001, 'arguments', arguments, 4);
                            updateDocument = J$.N(1009, 'updateDocument', updateDocument, 4);
                            J$.N(1017, 'upsert', upsert, 0);
                            J$.N(1025, 'document', document, 0);
                            var upsert = J$.X1(801, J$.W(793, 'upsert', J$.X1(11265, J$.C(8, J$.B(18, '==', J$.U(10, 'typeof', J$.G(737, J$.G(729, J$.G(721, J$.R(713, 'this', this, 0), 's', 0), 'currentOp', 0), 'upsert', 0)), J$.T(745, 'boolean', 21, false), 0))) ? J$.G(777, J$.G(769, J$.G(761, J$.R(753, 'this', this, 0), 's', 0), 'currentOp', 0), 'upsert', 0) : J$.T(785, false, 23, false), upsert, 1));
                            var document = J$.X1(881, J$.W(873, 'document', J$.T(865, {
                                q: J$.G(833, J$.G(825, J$.G(817, J$.R(809, 'this', this, 0), 's', 0), 'currentOp', 0), 'selector', 0),
                                u: J$.R(841, 'updateDocument', updateDocument, 0),
                                multi: J$.T(849, true, 23, false),
                                upsert: J$.R(857, 'upsert', upsert, 0)
                            }, 11, false), document, 1));
                            J$.X1(921, J$.P(913, J$.G(897, J$.R(889, 'this', this, 0), 's', 0), 'currentOp', J$.T(905, null, 25, false), 0));
                            return J$.X1(985, J$.Rt(977, J$.F(969, J$.R(929, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(937, 'this', this, 0), J$.G(953, J$.R(945, 'common', common, 1), 'UPDATE', 0), J$.R(961, 'document', document, 0))));
                        } catch (J$e) {
                            J$.Ex(11273, J$e);
                        } finally {
                            if (J$.Fr(11281))
                                continue jalangiLabel2314;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 993), 0));
            J$.X1(1409, J$.P(1401, J$.G(1065, J$.R(1057, 'FindOperatorsUnordered', FindOperatorsUnordered, 1), 'prototype', 0), 'updateOne', J$.T(1393, function (updateDocument) {
                jalangiLabel2315:
                    while (true) {
                        try {
                            J$.Fe(1353, arguments.callee, this, arguments);
                            arguments = J$.N(1361, 'arguments', arguments, 4);
                            updateDocument = J$.N(1369, 'updateDocument', updateDocument, 4);
                            J$.N(1377, 'upsert', upsert, 0);
                            J$.N(1385, 'document', document, 0);
                            var upsert = J$.X1(1161, J$.W(1153, 'upsert', J$.X1(11289, J$.C(16, J$.B(34, '==', J$.U(26, 'typeof', J$.G(1097, J$.G(1089, J$.G(1081, J$.R(1073, 'this', this, 0), 's', 0), 'currentOp', 0), 'upsert', 0)), J$.T(1105, 'boolean', 21, false), 0))) ? J$.G(1137, J$.G(1129, J$.G(1121, J$.R(1113, 'this', this, 0), 's', 0), 'currentOp', 0), 'upsert', 0) : J$.T(1145, false, 23, false), upsert, 1));
                            var document = J$.X1(1241, J$.W(1233, 'document', J$.T(1225, {
                                q: J$.G(1193, J$.G(1185, J$.G(1177, J$.R(1169, 'this', this, 0), 's', 0), 'currentOp', 0), 'selector', 0),
                                u: J$.R(1201, 'updateDocument', updateDocument, 0),
                                multi: J$.T(1209, false, 23, false),
                                upsert: J$.R(1217, 'upsert', upsert, 0)
                            }, 11, false), document, 1));
                            J$.X1(1281, J$.P(1273, J$.G(1257, J$.R(1249, 'this', this, 0), 's', 0), 'currentOp', J$.T(1265, null, 25, false), 0));
                            return J$.X1(1345, J$.Rt(1337, J$.F(1329, J$.R(1289, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(1297, 'this', this, 0), J$.G(1313, J$.R(1305, 'common', common, 1), 'UPDATE', 0), J$.R(1321, 'document', document, 0))));
                        } catch (J$e) {
                            J$.Ex(11297, J$e);
                        } finally {
                            if (J$.Fr(11305))
                                continue jalangiLabel2315;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1353), 0));
            J$.X1(1505, J$.P(1497, J$.G(1425, J$.R(1417, 'FindOperatorsUnordered', FindOperatorsUnordered, 1), 'prototype', 0), 'replaceOne', J$.T(1489, function (updateDocument) {
                jalangiLabel2316:
                    while (true) {
                        try {
                            J$.Fe(1465, arguments.callee, this, arguments);
                            arguments = J$.N(1473, 'arguments', arguments, 4);
                            updateDocument = J$.N(1481, 'updateDocument', updateDocument, 4);
                            J$.X1(1457, J$.M(1449, J$.R(1433, 'this', this, 0), 'updateOne', 0)(J$.R(1441, 'updateDocument', updateDocument, 0)));
                        } catch (J$e) {
                            J$.Ex(11313, J$e);
                        } finally {
                            if (J$.Fr(11321))
                                continue jalangiLabel2316;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1465), 0));
            J$.X1(1633, J$.P(1625, J$.G(1521, J$.R(1513, 'FindOperatorsUnordered', FindOperatorsUnordered, 1), 'prototype', 0), 'upsert', J$.T(1617, function () {
                jalangiLabel2317:
                    while (true) {
                        try {
                            J$.Fe(1601, arguments.callee, this, arguments);
                            arguments = J$.N(1609, 'arguments', arguments, 4);
                            J$.X1(1569, J$.P(1561, J$.G(1545, J$.G(1537, J$.R(1529, 'this', this, 0), 's', 0), 'currentOp', 0), 'upsert', J$.T(1553, true, 23, false), 0));
                            return J$.X1(1593, J$.Rt(1585, J$.R(1577, 'this', this, 0)));
                        } catch (J$e) {
                            J$.Ex(11329, J$e);
                        } finally {
                            if (J$.Fr(11337))
                                continue jalangiLabel2317;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1601), 0));
            J$.X1(1865, J$.P(1857, J$.G(1649, J$.R(1641, 'FindOperatorsUnordered', FindOperatorsUnordered, 1), 'prototype', 0), 'removeOne', J$.T(1849, function () {
                jalangiLabel2318:
                    while (true) {
                        try {
                            J$.Fe(1825, arguments.callee, this, arguments);
                            arguments = J$.N(1833, 'arguments', arguments, 4);
                            J$.N(1841, 'document', document, 0);
                            var document = J$.X1(1713, J$.W(1705, 'document', J$.T(1697, {
                                q: J$.G(1681, J$.G(1673, J$.G(1665, J$.R(1657, 'this', this, 0), 's', 0), 'currentOp', 0), 'selector', 0),
                                limit: J$.T(1689, 1, 22, false)
                            }, 11, false), document, 1));
                            J$.X1(1753, J$.P(1745, J$.G(1729, J$.R(1721, 'this', this, 0), 's', 0), 'currentOp', J$.T(1737, null, 25, false), 0));
                            return J$.X1(1817, J$.Rt(1809, J$.F(1801, J$.R(1761, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(1769, 'this', this, 0), J$.G(1785, J$.R(1777, 'common', common, 1), 'REMOVE', 0), J$.R(1793, 'document', document, 0))));
                        } catch (J$e) {
                            J$.Ex(11345, J$e);
                        } finally {
                            if (J$.Fr(11353))
                                continue jalangiLabel2318;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1825), 0));
            J$.X1(2097, J$.P(2089, J$.G(1881, J$.R(1873, 'FindOperatorsUnordered', FindOperatorsUnordered, 1), 'prototype', 0), 'remove', J$.T(2081, function () {
                jalangiLabel2319:
                    while (true) {
                        try {
                            J$.Fe(2057, arguments.callee, this, arguments);
                            arguments = J$.N(2065, 'arguments', arguments, 4);
                            J$.N(2073, 'document', document, 0);
                            var document = J$.X1(1945, J$.W(1937, 'document', J$.T(1929, {
                                q: J$.G(1913, J$.G(1905, J$.G(1897, J$.R(1889, 'this', this, 0), 's', 0), 'currentOp', 0), 'selector', 0),
                                limit: J$.T(1921, 0, 22, false)
                            }, 11, false), document, 1));
                            J$.X1(1985, J$.P(1977, J$.G(1961, J$.R(1953, 'this', this, 0), 's', 0), 'currentOp', J$.T(1969, null, 25, false), 0));
                            return J$.X1(2049, J$.Rt(2041, J$.F(2033, J$.R(1993, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(2001, 'this', this, 0), J$.G(2017, J$.R(2009, 'common', common, 1), 'REMOVE', 0), J$.R(2025, 'document', document, 0))));
                        } catch (J$e) {
                            J$.Ex(11361, J$e);
                        } finally {
                            if (J$.Fr(11369))
                                continue jalangiLabel2319;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 2057), 0));
            var addToOperationsList = J$.X1(3809, J$.W(3801, 'addToOperationsList', J$.T(3793, function (_self, docType, document) {
                jalangiLabel2320:
                    while (true) {
                        try {
                            J$.Fe(3745, arguments.callee, this, arguments);
                            arguments = J$.N(3753, 'arguments', arguments, 4);
                            _self = J$.N(3761, '_self', _self, 4);
                            docType = J$.N(3769, 'docType', docType, 4);
                            document = J$.N(3777, 'document', document, 4);
                            J$.N(3785, 'bsonSize', bsonSize, 0);
                            var bsonSize = J$.X1(2161, J$.W(2153, 'bsonSize', J$.M(2145, J$.G(2121, J$.G(2113, J$.R(2105, '_self', _self, 0), 's', 0), 'bson', 0), 'calculateObjectSize', 0)(J$.R(2129, 'document', document, 0), J$.T(2137, false, 23, false)), bsonSize, 1));
                            if (J$.X1(11377, J$.C(24, J$.B(42, '>=', J$.R(2169, 'bsonSize', bsonSize, 0), J$.G(2193, J$.G(2185, J$.R(2177, '_self', _self, 0), 's', 0), 'maxBatchSizeBytes', 0), 0))))
                                throw J$.X1(2257, J$.Th(2249, J$.F(2241, J$.R(2201, 'toError', toError, 1), 0)(J$.B(50, '+', J$.T(2209, 'document is larger than the maximum size ', 21, false), J$.G(2233, J$.G(2225, J$.R(2217, '_self', _self, 0), 's', 0), 'maxBatchSizeBytes', 0), 0))));
                            J$.X1(2297, J$.P(2289, J$.G(2273, J$.R(2265, '_self', _self, 0), 's', 0), 'currentBatch', J$.T(2281, null, 25, false), 0));
                            if (J$.X1(11401, J$.C(48, J$.B(58, '==', J$.R(2305, 'docType', docType, 0), J$.G(2321, J$.R(2313, 'common', common, 1), 'INSERT', 0), 0)))) {
                                J$.X1(2377, J$.P(2369, J$.G(2337, J$.R(2329, '_self', _self, 0), 's', 0), 'currentBatch', J$.G(2361, J$.G(2353, J$.R(2345, '_self', _self, 0), 's', 0), 'currentInsertBatch', 0), 0));
                            } else if (J$.X1(11393, J$.C(40, J$.B(66, '==', J$.R(2385, 'docType', docType, 0), J$.G(2401, J$.R(2393, 'common', common, 1), 'UPDATE', 0), 0)))) {
                                J$.X1(2457, J$.P(2449, J$.G(2417, J$.R(2409, '_self', _self, 0), 's', 0), 'currentBatch', J$.G(2441, J$.G(2433, J$.R(2425, '_self', _self, 0), 's', 0), 'currentUpdateBatch', 0), 0));
                            } else if (J$.X1(11385, J$.C(32, J$.B(74, '==', J$.R(2465, 'docType', docType, 0), J$.G(2481, J$.R(2473, 'common', common, 1), 'REMOVE', 0), 0)))) {
                                J$.X1(2537, J$.P(2529, J$.G(2497, J$.R(2489, '_self', _self, 0), 's', 0), 'currentBatch', J$.G(2521, J$.G(2513, J$.R(2505, '_self', _self, 0), 's', 0), 'currentRemoveBatch', 0), 0));
                            }
                            if (J$.X1(11409, J$.C(56, J$.B(82, '==', J$.G(2561, J$.G(2553, J$.R(2545, '_self', _self, 0), 's', 0), 'currentBatch', 0), J$.T(2569, null, 25, false), 0))))
                                J$.X1(2649, J$.P(2641, J$.G(2585, J$.R(2577, '_self', _self, 0), 's', 0), 'currentBatch', J$.F(2633, J$.R(2593, 'Batch', Batch, 1), 1)(J$.R(2601, 'docType', docType, 0), J$.G(2625, J$.G(2617, J$.R(2609, '_self', _self, 0), 's', 0), 'currentIndex', 0)), 0));
                            if (J$.X1(11417, J$.C(80, J$.C(72, J$.C(64, J$.B(98, '>=', J$.B(90, '+', J$.G(2681, J$.G(2673, J$.G(2665, J$.R(2657, '_self', _self, 0), 's', 0), 'currentBatch', 0), 'size', 0), J$.T(2689, 1, 22, false), 0), J$.G(2713, J$.G(2705, J$.R(2697, '_self', _self, 0), 's', 0), 'maxWriteBatchSize', 0), 0)) ? J$._() : J$.B(114, '>=', J$.B(106, '+', J$.G(2745, J$.G(2737, J$.G(2729, J$.R(2721, '_self', _self, 0), 's', 0), 'currentBatch', 0), 'sizeBytes', 0), J$.R(2753, 'bsonSize', bsonSize, 0), 0), J$.G(2777, J$.G(2769, J$.R(2761, '_self', _self, 0), 's', 0), 'maxBatchSizeBytes', 0), 0)) ? J$._() : J$.B(122, '!=', J$.G(2809, J$.G(2801, J$.G(2793, J$.R(2785, '_self', _self, 0), 's', 0), 'currentBatch', 0), 'batchType', 0), J$.R(2817, 'docType', docType, 0), 0)))) {
                                J$.X1(2881, J$.M(2873, J$.G(2841, J$.G(2833, J$.R(2825, '_self', _self, 0), 's', 0), 'batches', 0), 'push', 0)(J$.G(2865, J$.G(2857, J$.R(2849, '_self', _self, 0), 's', 0), 'currentBatch', 0)));
                                J$.X1(2961, J$.P(2953, J$.G(2897, J$.R(2889, '_self', _self, 0), 's', 0), 'currentBatch', J$.F(2945, J$.R(2905, 'Batch', Batch, 1), 1)(J$.R(2913, 'docType', docType, 0), J$.G(2937, J$.G(2929, J$.R(2921, '_self', _self, 0), 's', 0), 'currentIndex', 0)), 0));
                            }
                            if (J$.X1(11425, J$.C(88, J$.M(2985, J$.R(2969, 'Array', Array, 2), 'isArray', 0)(J$.R(2977, 'document', document, 0))))) {
                                throw J$.X1(3025, J$.Th(3017, J$.F(3009, J$.R(2993, 'toError', toError, 1), 0)(J$.T(3001, 'operation passed in cannot be an Array', 21, false))));
                            } else {
                                J$.X1(3081, J$.M(3073, J$.G(3057, J$.G(3049, J$.G(3041, J$.R(3033, '_self', _self, 0), 's', 0), 'currentBatch', 0), 'operations', 0), 'push', 0)(J$.R(3065, 'document', document, 0)));
                                J$.X1(3153, J$.M(3145, J$.G(3113, J$.G(3105, J$.G(3097, J$.R(3089, '_self', _self, 0), 's', 0), 'currentBatch', 0), 'originalIndexes', 0), 'push', 0)(J$.G(3137, J$.G(3129, J$.R(3121, '_self', _self, 0), 's', 0), 'currentIndex', 0)));
                                J$.X1(3217, J$.P(3209, J$.G(3169, J$.R(3161, '_self', _self, 0), 's', 0), 'currentIndex', J$.B(130, '+', J$.G(3193, J$.G(3185, J$.R(3177, '_self', _self, 0), 's', 0), 'currentIndex', 0), J$.T(3201, 1, 22, false), 0), 0));
                            }
                            if (J$.X1(11449, J$.C(112, J$.B(138, '==', J$.R(3225, 'docType', docType, 0), J$.G(3241, J$.R(3233, 'common', common, 1), 'INSERT', 0), 0)))) {
                                J$.X1(3297, J$.P(3289, J$.G(3257, J$.R(3249, '_self', _self, 0), 's', 0), 'currentInsertBatch', J$.G(3281, J$.G(3273, J$.R(3265, '_self', _self, 0), 's', 0), 'currentBatch', 0), 0));
                                J$.X1(3393, J$.M(3385, J$.G(3329, J$.G(3321, J$.G(3313, J$.R(3305, '_self', _self, 0), 's', 0), 'bulkResult', 0), 'insertedIds', 0), 'push', 0)(J$.T(3377, {
                                    index: J$.G(3353, J$.G(3345, J$.R(3337, '_self', _self, 0), 's', 0), 'currentIndex', 0),
                                    _id: J$.G(3369, J$.R(3361, 'document', document, 0), '_id', 0)
                                }, 11, false)));
                            } else if (J$.X1(11441, J$.C(104, J$.B(146, '==', J$.R(3401, 'docType', docType, 0), J$.G(3417, J$.R(3409, 'common', common, 1), 'UPDATE', 0), 0)))) {
                                J$.X1(3473, J$.P(3465, J$.G(3433, J$.R(3425, '_self', _self, 0), 's', 0), 'currentUpdateBatch', J$.G(3457, J$.G(3449, J$.R(3441, '_self', _self, 0), 's', 0), 'currentBatch', 0), 0));
                            } else if (J$.X1(11433, J$.C(96, J$.B(154, '==', J$.R(3481, 'docType', docType, 0), J$.G(3497, J$.R(3489, 'common', common, 1), 'REMOVE', 0), 0)))) {
                                J$.X1(3553, J$.P(3545, J$.G(3513, J$.R(3505, '_self', _self, 0), 's', 0), 'currentRemoveBatch', J$.G(3537, J$.G(3529, J$.R(3521, '_self', _self, 0), 's', 0), 'currentBatch', 0), 0));
                            }
                            J$.X1(3633, J$.P(3625, J$.G(3577, J$.G(3569, J$.R(3561, '_self', _self, 0), 's', 0), 'currentBatch', 0), 'size', J$.B(162, '+', J$.G(3609, J$.G(3601, J$.G(3593, J$.R(3585, '_self', _self, 0), 's', 0), 'currentBatch', 0), 'size', 0), J$.T(3617, 1, 22, false), 0), 0));
                            J$.X1(3713, J$.P(3705, J$.G(3657, J$.G(3649, J$.R(3641, '_self', _self, 0), 's', 0), 'currentBatch', 0), 'sizeBytes', J$.B(170, '+', J$.G(3689, J$.G(3681, J$.G(3673, J$.R(3665, '_self', _self, 0), 's', 0), 'currentBatch', 0), 'sizeBytes', 0), J$.R(3697, 'bsonSize', bsonSize, 0), 0), 0));
                            return J$.X1(3737, J$.Rt(3729, J$.R(3721, '_self', _self, 0)));
                        } catch (J$e) {
                            J$.Ex(11457, J$e);
                        } finally {
                            if (J$.Fr(11465))
                                continue jalangiLabel2320;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 3745), addToOperationsList, 3));
            var UnorderedBulkOperation = J$.X1(5017, J$.W(5009, 'UnorderedBulkOperation', J$.T(5001, function (topology, collection, options) {
                jalangiLabel2321:
                    while (true) {
                        try {
                            J$.Fe(4841, arguments.callee, this, arguments);
                            arguments = J$.N(4849, 'arguments', arguments, 4);
                            topology = J$.N(4857, 'topology', topology, 4);
                            collection = J$.N(4865, 'collection', collection, 4);
                            options = J$.N(4873, 'options', options, 4);
                            J$.N(4881, 'self', self, 0);
                            J$.N(4889, 'namespace', namespace, 0);
                            J$.N(4897, 'executed', executed, 0);
                            J$.N(4905, 'currentOp', currentOp, 0);
                            J$.N(4913, 'currentIndex', currentIndex, 0);
                            J$.N(4921, 'batches', batches, 0);
                            J$.N(4929, 'currentInsertBatch', currentInsertBatch, 0);
                            J$.N(4937, 'currentUpdateBatch', currentUpdateBatch, 0);
                            J$.N(4945, 'currentRemoveBatch', currentRemoveBatch, 0);
                            J$.N(4953, 'bson', bson, 0);
                            J$.N(4961, 'maxBatchSizeBytes', maxBatchSizeBytes, 0);
                            J$.N(4969, 'maxWriteBatchSize', maxWriteBatchSize, 0);
                            J$.N(4977, 'writeConcern', writeConcern, 0);
                            J$.N(4985, 'promiseLibrary', promiseLibrary, 0);
                            J$.N(4993, 'bulkResult', bulkResult, 0);
                            J$.X1(3857, options = J$.W(3849, 'options', J$.X1(11473, J$.C(120, J$.B(178, '==', J$.R(3817, 'options', options, 0), J$.T(3825, null, 25, false), 0))) ? J$.T(3833, {}, 11, false) : J$.R(3841, 'options', options, 0), options, 0));
                            var self = J$.X1(3881, J$.W(3873, 'self', J$.R(3865, 'this', this, 0), self, 1));
                            var namespace = J$.X1(3913, J$.W(3905, 'namespace', J$.G(3897, J$.R(3889, 'collection', collection, 0), 'collectionName', 0), namespace, 1));
                            var executed = J$.X1(3937, J$.W(3929, 'executed', J$.T(3921, false, 23, false), executed, 1));
                            var currentOp = J$.X1(3961, J$.W(3953, 'currentOp', J$.T(3945, null, 25, false), currentOp, 1));
                            var currentIndex = J$.X1(3985, J$.W(3977, 'currentIndex', J$.T(3969, 0, 22, false), currentIndex, 1));
                            var batches = J$.X1(4009, J$.W(4001, 'batches', J$.T(3993, [], 10, false), batches, 1));
                            var currentInsertBatch = J$.X1(4033, J$.W(4025, 'currentInsertBatch', J$.T(4017, null, 25, false), currentInsertBatch, 1));
                            var currentUpdateBatch = J$.X1(4057, J$.W(4049, 'currentUpdateBatch', J$.T(4041, null, 25, false), currentUpdateBatch, 1));
                            var currentRemoveBatch = J$.X1(4081, J$.W(4073, 'currentRemoveBatch', J$.T(4065, null, 25, false), currentRemoveBatch, 1));
                            var bson = J$.X1(4113, J$.W(4105, 'bson', J$.G(4097, J$.R(4089, 'topology', topology, 0), 'bson', 0), bson, 1));
                            var maxBatchSizeBytes = J$.X1(4217, J$.W(4209, 'maxBatchSizeBytes', J$.X1(11481, J$.C(136, J$.C(128, J$.G(4129, J$.R(4121, 'topology', topology, 0), 'isMasterDoc', 0)) ? J$.G(4153, J$.G(4145, J$.R(4137, 'topology', topology, 0), 'isMasterDoc', 0), 'maxBsonObjectSize', 0) : J$._())) ? J$.G(4177, J$.G(4169, J$.R(4161, 'topology', topology, 0), 'isMasterDoc', 0), 'maxBsonObjectSize', 0) : J$.B(194, '*', J$.B(186, '*', J$.T(4185, 1024, 22, false), J$.T(4193, 1025, 22, false), 0), J$.T(4201, 16, 22, false), 0), maxBatchSizeBytes, 1));
                            var maxWriteBatchSize = J$.X1(4305, J$.W(4297, 'maxWriteBatchSize', J$.X1(11489, J$.C(152, J$.C(144, J$.G(4233, J$.R(4225, 'topology', topology, 0), 'isMasterDoc', 0)) ? J$.G(4257, J$.G(4249, J$.R(4241, 'topology', topology, 0), 'isMasterDoc', 0), 'maxWriteBatchSize', 0) : J$._())) ? J$.G(4281, J$.G(4273, J$.R(4265, 'topology', topology, 0), 'isMasterDoc', 0), 'maxWriteBatchSize', 0) : J$.T(4289, 1000, 22, false), maxWriteBatchSize, 1));
                            var writeConcern = J$.X1(4377, J$.W(4369, 'writeConcern', J$.M(4361, J$.R(4313, 'common', common, 1), 'writeConcern', 0)(J$.F(4337, J$.R(4321, 'shallowClone', shallowClone, 1), 0)(J$.R(4329, 'options', options, 0)), J$.R(4345, 'collection', collection, 0), J$.R(4353, 'options', options, 0)), writeConcern, 1));
                            var promiseLibrary = J$.X1(4409, J$.W(4401, 'promiseLibrary', J$.G(4393, J$.R(4385, 'options', options, 0), 'promiseLibrary', 0), promiseLibrary, 1));
                            if (J$.X1(11505, J$.C(168, J$.U(202, '!', J$.R(4417, 'promiseLibrary', promiseLibrary, 0))))) {
                                J$.X1(4505, promiseLibrary = J$.W(4497, 'promiseLibrary', J$.X1(11497, J$.C(160, J$.B(218, '==', J$.U(210, 'typeof', J$.G(4433, J$.R(4425, 'global', global, 2), 'Promise', 0)), J$.T(4441, 'function', 21, false), 0))) ? J$.G(4457, J$.R(4449, 'global', global, 2), 'Promise', 0) : J$.G(4489, J$.F(4481, J$.R(4465, 'require', require, 2), 0)(J$.T(4473, 'es6-promise', 21, false)), 'Promise', 0), promiseLibrary, 0));
                            }
                            var bulkResult = J$.X1(4609, J$.W(4601, 'bulkResult', J$.T(4593, {
                                ok: J$.T(4513, 1, 22, false),
                                writeErrors: J$.T(4521, [], 10, false),
                                writeConcernErrors: J$.T(4529, [], 10, false),
                                insertedIds: J$.T(4537, [], 10, false),
                                nInserted: J$.T(4545, 0, 22, false),
                                nUpserted: J$.T(4553, 0, 22, false),
                                nMatched: J$.T(4561, 0, 22, false),
                                nModified: J$.T(4569, 0, 22, false),
                                nRemoved: J$.T(4577, 0, 22, false),
                                upserted: J$.T(4585, [], 10, false)
                            }, 11, false), bulkResult, 1));
                            J$.X1(4833, J$.P(4825, J$.R(4617, 'this', this, 0), 's', J$.T(4817, {
                                bulkResult: J$.R(4625, 'bulkResult', bulkResult, 0),
                                currentInsertBatch: J$.T(4633, null, 25, false),
                                currentUpdateBatch: J$.T(4641, null, 25, false),
                                currentRemoveBatch: J$.T(4649, null, 25, false),
                                currentBatch: J$.T(4657, null, 25, false),
                                currentIndex: J$.T(4665, 0, 22, false),
                                batches: J$.T(4673, [], 10, false),
                                writeConcern: J$.R(4681, 'writeConcern', writeConcern, 0),
                                maxBatchSizeBytes: J$.R(4689, 'maxBatchSizeBytes', maxBatchSizeBytes, 0),
                                maxWriteBatchSize: J$.R(4697, 'maxWriteBatchSize', maxWriteBatchSize, 0),
                                namespace: J$.R(4705, 'namespace', namespace, 0),
                                bson: J$.R(4713, 'bson', bson, 0),
                                topology: J$.R(4721, 'topology', topology, 0),
                                options: J$.R(4729, 'options', options, 0),
                                currentOp: J$.R(4737, 'currentOp', currentOp, 0),
                                executed: J$.R(4745, 'executed', executed, 0),
                                collection: J$.R(4753, 'collection', collection, 0),
                                promiseLibrary: J$.R(4761, 'promiseLibrary', promiseLibrary, 0),
                                bypassDocumentValidation: J$.X1(11513, J$.C(176, J$.B(234, '==', J$.U(226, 'typeof', J$.G(4777, J$.R(4769, 'options', options, 0), 'bypassDocumentValidation', 0)), J$.T(4785, 'boolean', 21, false), 0))) ? J$.G(4801, J$.R(4793, 'options', options, 0), 'bypassDocumentValidation', 0) : J$.T(4809, false, 23, false)
                            }, 11, false), 0));
                        } catch (J$e) {
                            J$.Ex(11521, J$e);
                        } finally {
                            if (J$.Fr(11529))
                                continue jalangiLabel2321;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 4841), UnorderedBulkOperation, 3));
            var define = J$.X1(5089, J$.W(5081, 'define', J$.P(5073, J$.R(5025, 'UnorderedBulkOperation', UnorderedBulkOperation, 1), 'define', J$.F(5065, J$.R(5033, 'Define', Define, 1), 1)(J$.T(5041, 'UnorderedBulkOperation', 21, false), J$.R(5049, 'UnorderedBulkOperation', UnorderedBulkOperation, 1), J$.T(5057, false, 23, false)), 0), define, 3));
            J$.X1(5345, J$.P(5337, J$.G(5105, J$.R(5097, 'UnorderedBulkOperation', UnorderedBulkOperation, 1), 'prototype', 0), 'insert', J$.T(5329, function (document) {
                jalangiLabel2322:
                    while (true) {
                        try {
                            J$.Fe(5305, arguments.callee, this, arguments);
                            arguments = J$.N(5313, 'arguments', arguments, 4);
                            document = J$.N(5321, 'document', document, 4);
                            if (J$.X1(11537, J$.C(192, J$.C(184, J$.B(242, '!==', J$.G(5161, J$.G(5153, J$.G(5145, J$.G(5137, J$.G(5129, J$.G(5121, J$.R(5113, 'this', this, 0), 's', 0), 'collection', 0), 's', 0), 'db', 0), 'options', 0), 'forceServerObjectId', 0), J$.T(5169, true, 23, false), 0)) ? J$.B(250, '==', J$.G(5185, J$.R(5177, 'document', document, 0), '_id', 0), J$.T(5193, null, 25, false), 0) : J$._())))
                                J$.X1(5233, J$.P(5225, J$.R(5201, 'document', document, 0), '_id', J$.F(5217, J$.R(5209, 'ObjectID', ObjectID, 1), 1)(), 0));
                            return J$.X1(5297, J$.Rt(5289, J$.F(5281, J$.R(5241, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(5249, 'this', this, 0), J$.G(5265, J$.R(5257, 'common', common, 1), 'INSERT', 0), J$.R(5273, 'document', document, 0))));
                        } catch (J$e) {
                            J$.Ex(11545, J$e);
                        } finally {
                            if (J$.Fr(11553))
                                continue jalangiLabel2322;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 5305), 0));
            J$.X1(5545, J$.P(5537, J$.G(5361, J$.R(5353, 'UnorderedBulkOperation', UnorderedBulkOperation, 1), 'prototype', 0), 'find', J$.T(5529, function (selector) {
                jalangiLabel2323:
                    while (true) {
                        try {
                            J$.Fe(5505, arguments.callee, this, arguments);
                            arguments = J$.N(5513, 'arguments', arguments, 4);
                            selector = J$.N(5521, 'selector', selector, 4);
                            if (J$.X1(11561, J$.C(200, J$.U(258, '!', J$.R(5369, 'selector', selector, 0))))) {
                                throw J$.X1(5409, J$.Th(5401, J$.F(5393, J$.R(5377, 'toError', toError, 1), 0)(J$.T(5385, 'Bulk find operation must specify a selector', 21, false))));
                            }
                            J$.X1(5457, J$.P(5449, J$.G(5425, J$.R(5417, 'this', this, 0), 's', 0), 'currentOp', J$.T(5441, {
                                selector: J$.R(5433, 'selector', selector, 0)
                            }, 11, false), 0));
                            return J$.X1(5497, J$.Rt(5489, J$.F(5481, J$.R(5465, 'FindOperatorsUnordered', FindOperatorsUnordered, 1), 1)(J$.R(5473, 'this', this, 0))));
                        } catch (J$e) {
                            J$.Ex(11569, J$e);
                        } finally {
                            if (J$.Fr(11577))
                                continue jalangiLabel2323;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 5505), 0));
            J$.X1(5673, J$.M(5665, J$.R(5553, 'Object', Object, 2), 'defineProperty', 0)(J$.G(5569, J$.R(5561, 'UnorderedBulkOperation', UnorderedBulkOperation, 1), 'prototype', 0), J$.T(5577, 'length', 21, false), J$.T(5657, {
                enumerable: J$.T(5585, true, 23, false),
                get: J$.T(5649, function () {
                    jalangiLabel2324:
                        while (true) {
                            try {
                                J$.Fe(5633, arguments.callee, this, arguments);
                                arguments = J$.N(5641, 'arguments', arguments, 4);
                                return J$.X1(5625, J$.Rt(5617, J$.G(5609, J$.G(5601, J$.R(5593, 'this', this, 0), 's', 0), 'currentIndex', 0)));
                            } catch (J$e) {
                                J$.Ex(11585, J$e);
                            } finally {
                                if (J$.Fr(11593))
                                    continue jalangiLabel2324;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false, 5633)
            }, 11, false)));
            J$.X1(7929, J$.P(7921, J$.G(5689, J$.R(5681, 'UnorderedBulkOperation', UnorderedBulkOperation, 1), 'prototype', 0), 'raw', J$.T(7913, function (op) {
                jalangiLabel2325:
                    while (true) {
                        try {
                            J$.Fe(7841, arguments.callee, this, arguments);
                            arguments = J$.N(7849, 'arguments', arguments, 4);
                            op = J$.N(7857, 'op', op, 4);
                            J$.N(7865, 'key', key, 0);
                            J$.N(7873, 'forceServerObjectId', forceServerObjectId, 0);
                            J$.N(7881, 'multi', multi, 0);
                            J$.N(7889, 'operation', operation, 0);
                            J$.N(7897, 'limit', limit, 0);
                            J$.N(7905, 'i', i, 0);
                            var key = J$.X1(5745, J$.W(5737, 'key', J$.G(5729, J$.M(5713, J$.R(5697, 'Object', Object, 2), 'keys', 0)(J$.R(5705, 'op', op, 0)), J$.T(5721, 0, 22, false), 4), key, 1));
                            var forceServerObjectId = J$.X1(5889, J$.W(5881, 'forceServerObjectId', J$.X1(11601, J$.C(208, J$.B(274, '==', J$.U(266, 'typeof', J$.G(5777, J$.G(5769, J$.G(5761, J$.R(5753, 'this', this, 0), 's', 0), 'options', 0), 'forceServerObjectId', 0)), J$.T(5785, 'boolean', 21, false), 0))) ? J$.G(5817, J$.G(5809, J$.G(5801, J$.R(5793, 'this', this, 0), 's', 0), 'options', 0), 'forceServerObjectId', 0) : J$.G(5873, J$.G(5865, J$.G(5857, J$.G(5849, J$.G(5841, J$.G(5833, J$.R(5825, 'this', this, 0), 's', 0), 'collection', 0), 's', 0), 'db', 0), 'options', 0), 'forceServerObjectId', 0), forceServerObjectId, 1));
                            if (J$.X1(11617, J$.C(272, J$.C(248, J$.C(232, J$.C(216, J$.G(5905, J$.R(5897, 'op', op, 0), 'updateOne', 0)) ? J$.G(5929, J$.G(5921, J$.R(5913, 'op', op, 0), 'updateOne', 0), 'q', 0) : J$._()) ? J$._() : J$.C(224, J$.G(5945, J$.R(5937, 'op', op, 0), 'updateMany', 0)) ? J$.G(5969, J$.G(5961, J$.R(5953, 'op', op, 0), 'updateMany', 0), 'q', 0) : J$._()) ? J$._() : J$.C(240, J$.G(5985, J$.R(5977, 'op', op, 0), 'replaceOne', 0)) ? J$.G(6009, J$.G(6001, J$.R(5993, 'op', op, 0), 'replaceOne', 0), 'q', 0) : J$._()))) {
                                J$.X1(6097, J$.P(6089, J$.G(6033, J$.R(6017, 'op', op, 0), J$.R(6025, 'key', key, 0), 4), 'multi', J$.X1(11609, J$.C(264, J$.C(256, J$.G(6049, J$.R(6041, 'op', op, 0), 'updateOne', 0)) ? J$._() : J$.G(6065, J$.R(6057, 'op', op, 0), 'replaceOne', 0))) ? J$.T(6073, false, 23, false) : J$.T(6081, true, 23, false), 0));
                                return J$.X1(6177, J$.Rt(6169, J$.F(6161, J$.R(6105, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(6113, 'this', this, 0), J$.G(6129, J$.R(6121, 'common', common, 1), 'UPDATE', 0), J$.G(6153, J$.R(6137, 'op', op, 0), J$.R(6145, 'key', key, 0), 4))));
                            }
                            if (J$.X1(11641, J$.C(328, J$.C(288, J$.C(280, J$.G(6193, J$.R(6185, 'op', op, 0), 'updateOne', 0)) ? J$._() : J$.G(6209, J$.R(6201, 'op', op, 0), 'updateMany', 0)) ? J$._() : J$.G(6225, J$.R(6217, 'op', op, 0), 'replaceOne', 0)))) {
                                var multi = J$.X1(6289, J$.W(6281, 'multi', J$.X1(11625, J$.C(304, J$.C(296, J$.G(6241, J$.R(6233, 'op', op, 0), 'updateOne', 0)) ? J$._() : J$.G(6257, J$.R(6249, 'op', op, 0), 'replaceOne', 0))) ? J$.T(6265, false, 23, false) : J$.T(6273, true, 23, false), multi, 1));
                                var operation = J$.X1(6417, J$.W(6409, 'operation', J$.T(6401, {
                                    q: J$.G(6321, J$.G(6313, J$.R(6297, 'op', op, 0), J$.R(6305, 'key', key, 0), 4), 'filter', 0),
                                    u: J$.C(312, J$.G(6353, J$.G(6345, J$.R(6329, 'op', op, 0), J$.R(6337, 'key', key, 0), 4), 'update', 0)) ? J$._() : J$.G(6385, J$.G(6377, J$.R(6361, 'op', op, 0), J$.R(6369, 'key', key, 0), 4), 'replacement', 0),
                                    multi: J$.R(6393, 'multi', multi, 0)
                                }, 11, false), operation, 1));
                                if (J$.X1(11633, J$.C(320, J$.G(6449, J$.G(6441, J$.R(6425, 'op', op, 0), J$.R(6433, 'key', key, 0), 4), 'upsert', 0))))
                                    J$.X1(6481, J$.P(6473, J$.R(6457, 'operation', operation, 0), 'upsert', J$.T(6465, true, 23, false), 0));
                                return J$.X1(6545, J$.Rt(6537, J$.F(6529, J$.R(6489, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(6497, 'this', this, 0), J$.G(6513, J$.R(6505, 'common', common, 1), 'UPDATE', 0), J$.R(6521, 'operation', operation, 0))));
                            }
                            if (J$.X1(11657, J$.C(384, J$.C(368, J$.C(352, J$.C(336, J$.G(6561, J$.R(6553, 'op', op, 0), 'removeOne', 0)) ? J$._() : J$.G(6577, J$.R(6569, 'op', op, 0), 'removeMany', 0)) ? J$._() : J$.C(344, J$.G(6593, J$.R(6585, 'op', op, 0), 'deleteOne', 0)) ? J$.G(6617, J$.G(6609, J$.R(6601, 'op', op, 0), 'deleteOne', 0), 'q', 0) : J$._()) ? J$._() : J$.C(360, J$.G(6633, J$.R(6625, 'op', op, 0), 'deleteMany', 0)) ? J$.G(6657, J$.G(6649, J$.R(6641, 'op', op, 0), 'deleteMany', 0), 'q', 0) : J$._()))) {
                                J$.X1(6729, J$.P(6721, J$.G(6681, J$.R(6665, 'op', op, 0), J$.R(6673, 'key', key, 0), 4), 'limit', J$.X1(11649, J$.C(376, J$.G(6697, J$.R(6689, 'op', op, 0), 'removeOne', 0))) ? J$.T(6705, 1, 22, false) : J$.T(6713, 0, 22, false), 0));
                                return J$.X1(6809, J$.Rt(6801, J$.F(6793, J$.R(6737, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(6745, 'this', this, 0), J$.G(6761, J$.R(6753, 'common', common, 1), 'REMOVE', 0), J$.G(6785, J$.R(6769, 'op', op, 0), J$.R(6777, 'key', key, 0), 4))));
                            }
                            if (J$.X1(11673, J$.C(408, J$.C(392, J$.G(6825, J$.R(6817, 'op', op, 0), 'deleteOne', 0)) ? J$._() : J$.G(6841, J$.R(6833, 'op', op, 0), 'deleteMany', 0)))) {
                                var limit = J$.X1(6889, J$.W(6881, 'limit', J$.X1(11665, J$.C(400, J$.G(6857, J$.R(6849, 'op', op, 0), 'deleteOne', 0))) ? J$.T(6865, 1, 22, false) : J$.T(6873, 0, 22, false), limit, 1));
                                var operation = J$.X1(6953, J$.W(6945, 'operation', J$.T(6937, {
                                    q: J$.G(6921, J$.G(6913, J$.R(6897, 'op', op, 0), J$.R(6905, 'key', key, 0), 4), 'filter', 0),
                                    limit: J$.R(6929, 'limit', limit, 0)
                                }, 11, false), operation, 1));
                                return J$.X1(7017, J$.Rt(7009, J$.F(7001, J$.R(6961, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(6969, 'this', this, 0), J$.G(6985, J$.R(6977, 'common', common, 1), 'REMOVE', 0), J$.R(6993, 'operation', operation, 0))));
                            }
                            if (J$.X1(11705, J$.C(472, J$.C(416, J$.G(7033, J$.R(7025, 'op', op, 0), 'insertOne', 0)) ? J$.B(282, '==', J$.G(7057, J$.G(7049, J$.R(7041, 'op', op, 0), 'insertOne', 0), 'document', 0), J$.T(7065, null, 25, false), 0) : J$._()))) {
                                if (J$.X1(11681, J$.C(432, J$.C(424, J$.B(290, '!==', J$.R(7073, 'forceServerObjectId', forceServerObjectId, 0), J$.T(7081, true, 23, false), 0)) ? J$.B(298, '==', J$.G(7105, J$.G(7097, J$.R(7089, 'op', op, 0), 'insertOne', 0), '_id', 0), J$.T(7113, null, 25, false), 0) : J$._())))
                                    J$.X1(7161, J$.P(7153, J$.G(7129, J$.R(7121, 'op', op, 0), 'insertOne', 0), '_id', J$.F(7145, J$.R(7137, 'ObjectID', ObjectID, 1), 1)(), 0));
                                return J$.X1(7233, J$.Rt(7225, J$.F(7217, J$.R(7169, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(7177, 'this', this, 0), J$.G(7193, J$.R(7185, 'common', common, 1), 'INSERT', 0), J$.G(7209, J$.R(7201, 'op', op, 0), 'insertOne', 0))));
                            } else if (J$.X1(11697, J$.C(464, J$.C(440, J$.G(7249, J$.R(7241, 'op', op, 0), 'insertOne', 0)) ? J$.G(7273, J$.G(7265, J$.R(7257, 'op', op, 0), 'insertOne', 0), 'document', 0) : J$._()))) {
                                if (J$.X1(11689, J$.C(456, J$.C(448, J$.B(306, '!==', J$.R(7281, 'forceServerObjectId', forceServerObjectId, 0), J$.T(7289, true, 23, false), 0)) ? J$.B(314, '==', J$.G(7321, J$.G(7313, J$.G(7305, J$.R(7297, 'op', op, 0), 'insertOne', 0), 'document', 0), '_id', 0), J$.T(7329, null, 25, false), 0) : J$._())))
                                    J$.X1(7385, J$.P(7377, J$.G(7353, J$.G(7345, J$.R(7337, 'op', op, 0), 'insertOne', 0), 'document', 0), '_id', J$.F(7369, J$.R(7361, 'ObjectID', ObjectID, 1), 1)(), 0));
                                return J$.X1(7465, J$.Rt(7457, J$.F(7449, J$.R(7393, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(7401, 'this', this, 0), J$.G(7417, J$.R(7409, 'common', common, 1), 'INSERT', 0), J$.G(7441, J$.G(7433, J$.R(7425, 'op', op, 0), 'insertOne', 0), 'document', 0))));
                            }
                            if (J$.X1(11737, J$.C(504, J$.G(7481, J$.R(7473, 'op', op, 0), 'insertMany', 0)))) {
                                for (var i = J$.X1(7505, J$.W(7497, 'i', J$.T(7489, 0, 22, false), i, 1)); J$.X1(11721, J$.C(496, J$.B(322, '<', J$.R(7513, 'i', i, 0), J$.G(7537, J$.G(7529, J$.R(7521, 'op', op, 0), 'insertMany', 0), 'length', 0), 0))); J$.X1(11729, J$.B(346, '-', i = J$.W(7561, 'i', J$.B(338, '+', J$.U(330, '+', J$.R(7553, 'i', i, 0)), J$.T(7545, 1, 22, false), 0), i, 0), J$.T(7569, 1, 22, false), 0))) {
                                    if (J$.X1(11713, J$.C(488, J$.C(480, J$.B(354, '!==', J$.R(7577, 'forceServerObjectId', forceServerObjectId, 0), J$.T(7585, true, 23, false), 0)) ? J$.B(362, '==', J$.G(7625, J$.G(7617, J$.G(7601, J$.R(7593, 'op', op, 0), 'insertMany', 0), J$.R(7609, 'i', i, 0), 4), '_id', 0), J$.T(7633, null, 25, false), 0) : J$._())))
                                        J$.X1(7697, J$.P(7689, J$.G(7665, J$.G(7649, J$.R(7641, 'op', op, 0), 'insertMany', 0), J$.R(7657, 'i', i, 0), 4), '_id', J$.F(7681, J$.R(7673, 'ObjectID', ObjectID, 1), 1)(), 0));
                                    J$.X1(7777, J$.F(7769, J$.R(7705, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(7713, 'this', this, 0), J$.G(7729, J$.R(7721, 'common', common, 1), 'INSERT', 0), J$.G(7761, J$.G(7745, J$.R(7737, 'op', op, 0), 'insertMany', 0), J$.R(7753, 'i', i, 0), 4)));
                                }
                                return J$.X1(7793, J$.Rt(7785, undefined));
                            }
                            throw J$.X1(7833, J$.Th(7825, J$.F(7817, J$.R(7801, 'toError', toError, 1), 0)(J$.T(7809, 'bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany', 21, false))));
                        } catch (J$e) {
                            J$.Ex(11745, J$e);
                        } finally {
                            if (J$.Fr(11753))
                                continue jalangiLabel2325;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 7841), 0));
            var executeBatch = J$.X1(9169, J$.W(9161, 'executeBatch', J$.T(9153, function (self, batch, callback) {
                jalangiLabel2327:
                    while (true) {
                        try {
                            J$.Fe(9097, arguments.callee, this, arguments);
                            arguments = J$.N(9105, 'arguments', arguments, 4);
                            self = J$.N(9113, 'self', self, 4);
                            batch = J$.N(9121, 'batch', batch, 4);
                            callback = J$.N(9129, 'callback', callback, 4);
                            J$.N(9137, 'finalOptions', finalOptions, 0);
                            J$.N(9145, 'resultHandler', resultHandler, 0);
                            var finalOptions = J$.X1(7961, J$.W(7953, 'finalOptions', J$.T(7945, {
                                ordered: J$.T(7937, false, 23, false)
                            }, 11, false), finalOptions, 1));
                            if (J$.X1(11761, J$.C(512, J$.B(370, '!=', J$.G(7985, J$.G(7977, J$.R(7969, 'self', self, 0), 's', 0), 'writeConcern', 0), J$.T(7993, null, 25, false), 0)))) {
                                J$.X1(8041, J$.P(8033, J$.R(8001, 'finalOptions', finalOptions, 0), 'writeConcern', J$.G(8025, J$.G(8017, J$.R(8009, 'self', self, 0), 's', 0), 'writeConcern', 0), 0));
                            }
                            var resultHandler = J$.X1(8345, J$.W(8337, 'resultHandler', J$.T(8329, function (err, result) {
                                jalangiLabel2326:
                                    while (true) {
                                        try {
                                            J$.Fe(8297, arguments.callee, this, arguments);
                                            arguments = J$.N(8305, 'arguments', arguments, 4);
                                            err = J$.N(8313, 'err', err, 4);
                                            result = J$.N(8321, 'result', result, 4);
                                            if (J$.X1(11769, J$.C(544, J$.C(536, J$.C(520, J$.R(8049, 'err', err, 0)) ? J$.G(8065, J$.R(8057, 'err', err, 0), 'driver', 0) : J$._()) ? J$._() : J$.C(528, J$.R(8073, 'err', err, 0)) ? J$.G(8089, J$.R(8081, 'err', err, 0), 'message', 0) : J$._()))) {
                                                return J$.X1(8137, J$.Rt(8129, J$.F(8121, J$.R(8097, 'handleCallback', handleCallback, 1), 0)(J$.R(8105, 'callback', callback, 0), J$.R(8113, 'err', err, 0))));
                                            }
                                            if (J$.X1(11777, J$.C(552, J$.R(8145, 'err', err, 0))))
                                                J$.X1(8177, J$.P(8169, J$.R(8153, 'err', err, 0), 'ok', J$.T(8161, 0, 22, false), 0));
                                            J$.X1(8289, J$.F(8281, J$.R(8185, 'handleCallback', handleCallback, 1), 0)(J$.R(8193, 'callback', callback, 0), J$.T(8201, null, 25, false), J$.F(8273, J$.R(8209, 'mergeBatchResults', mergeBatchResults, 1), 0)(J$.T(8217, false, 23, false), J$.R(8225, 'batch', batch, 0), J$.G(8249, J$.G(8241, J$.R(8233, 'self', self, 0), 's', 0), 'bulkResult', 0), J$.R(8257, 'err', err, 0), J$.R(8265, 'result', result, 0))));
                                        } catch (J$e) {
                                            J$.Ex(11785, J$e);
                                        } finally {
                                            if (J$.Fr(11793))
                                                continue jalangiLabel2326;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 8297), resultHandler, 1));
                            if (J$.X1(11801, J$.C(560, J$.G(8361, J$.R(8353, 'self', self, 0), 'operationId', 0)))) {
                                J$.X1(8401, J$.P(8393, J$.R(8369, 'resultHandler', resultHandler, 0), 'operationId', J$.G(8385, J$.R(8377, 'self', self, 0), 'operationId', 0), 0));
                            }
                            if (J$.X1(11809, J$.C(568, J$.G(8433, J$.G(8425, J$.G(8417, J$.R(8409, 'self', self, 0), 's', 0), 'options', 0), 'serializeFunctions', 0)))) {
                                J$.X1(8465, J$.P(8457, J$.R(8441, 'finalOptions', finalOptions, 0), 'serializeFunctions', J$.T(8449, true, 23, false), 0));
                            }
                            if (J$.X1(11817, J$.C(576, J$.B(378, '==', J$.G(8489, J$.G(8481, J$.R(8473, 'self', self, 0), 's', 0), 'bypassDocumentValidation', 0), J$.T(8497, true, 23, false), 0)))) {
                                J$.X1(8529, J$.P(8521, J$.R(8505, 'finalOptions', finalOptions, 0), 'bypassDocumentValidation', J$.T(8513, true, 23, false), 0));
                            }
                            try {
                                if (J$.X1(11841, J$.C(600, J$.B(386, '==', J$.G(8545, J$.R(8537, 'batch', batch, 0), 'batchType', 0), J$.G(8561, J$.R(8553, 'common', common, 1), 'INSERT', 0), 0)))) {
                                    J$.X1(8665, J$.M(8657, J$.G(8585, J$.G(8577, J$.R(8569, 'self', self, 0), 's', 0), 'topology', 0), 'insert', 0)(J$.G(8617, J$.G(8609, J$.G(8601, J$.R(8593, 'self', self, 0), 's', 0), 'collection', 0), 'namespace', 0), J$.G(8633, J$.R(8625, 'batch', batch, 0), 'operations', 0), J$.R(8641, 'finalOptions', finalOptions, 0), J$.R(8649, 'resultHandler', resultHandler, 0)));
                                } else if (J$.X1(11833, J$.C(592, J$.B(394, '==', J$.G(8681, J$.R(8673, 'batch', batch, 0), 'batchType', 0), J$.G(8697, J$.R(8689, 'common', common, 1), 'UPDATE', 0), 0)))) {
                                    J$.X1(8801, J$.M(8793, J$.G(8721, J$.G(8713, J$.R(8705, 'self', self, 0), 's', 0), 'topology', 0), 'update', 0)(J$.G(8753, J$.G(8745, J$.G(8737, J$.R(8729, 'self', self, 0), 's', 0), 'collection', 0), 'namespace', 0), J$.G(8769, J$.R(8761, 'batch', batch, 0), 'operations', 0), J$.R(8777, 'finalOptions', finalOptions, 0), J$.R(8785, 'resultHandler', resultHandler, 0)));
                                } else if (J$.X1(11825, J$.C(584, J$.B(402, '==', J$.G(8817, J$.R(8809, 'batch', batch, 0), 'batchType', 0), J$.G(8833, J$.R(8825, 'common', common, 1), 'REMOVE', 0), 0)))) {
                                    J$.X1(8937, J$.M(8929, J$.G(8857, J$.G(8849, J$.R(8841, 'self', self, 0), 's', 0), 'topology', 0), 'remove', 0)(J$.G(8889, J$.G(8881, J$.G(8873, J$.R(8865, 'self', self, 0), 's', 0), 'collection', 0), 'namespace', 0), J$.G(8905, J$.R(8897, 'batch', batch, 0), 'operations', 0), J$.R(8913, 'finalOptions', finalOptions, 0), J$.R(8921, 'resultHandler', resultHandler, 0)));
                                }
                            } catch (err) {
                                err = J$.N(9089, 'err', err, 1);
                                J$.X1(8969, J$.P(8961, J$.R(8945, 'err', err, 0), 'ok', J$.T(8953, 0, 22, false), 0));
                                J$.X1(9081, J$.F(9073, J$.R(8977, 'handleCallback', handleCallback, 1), 0)(J$.R(8985, 'callback', callback, 0), J$.T(8993, null, 25, false), J$.F(9065, J$.R(9001, 'mergeBatchResults', mergeBatchResults, 1), 0)(J$.T(9009, false, 23, false), J$.R(9017, 'batch', batch, 0), J$.G(9041, J$.G(9033, J$.R(9025, 'self', self, 0), 's', 0), 'bulkResult', 0), J$.R(9049, 'err', err, 0), J$.T(9057, null, 25, false))));
                            }
                        } catch (J$e) {
                            J$.Ex(11849, J$e);
                        } finally {
                            if (J$.Fr(11857))
                                continue jalangiLabel2327;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 9097), executeBatch, 3));
            var executeBatches = J$.X1(9889, J$.W(9881, 'executeBatches', J$.T(9873, function (self, callback) {
                jalangiLabel2329:
                    while (true) {
                        try {
                            J$.Fe(9817, arguments.callee, this, arguments);
                            arguments = J$.N(9825, 'arguments', arguments, 4);
                            self = J$.N(9833, 'self', self, 4);
                            callback = J$.N(9841, 'callback', callback, 4);
                            J$.N(9849, 'numberOfCommandsToExecute', numberOfCommandsToExecute, 0);
                            J$.N(9857, 'error', error, 0);
                            J$.N(9865, 'i', i, 0);
                            var numberOfCommandsToExecute = J$.X1(9217, J$.W(9209, 'numberOfCommandsToExecute', J$.G(9201, J$.G(9193, J$.G(9185, J$.R(9177, 'self', self, 0), 's', 0), 'batches', 0), 'length', 0), numberOfCommandsToExecute, 1));
                            var error = J$.X1(9241, J$.W(9233, 'error', J$.T(9225, null, 25, false), error, 1));
                            for (var i = J$.X1(9265, J$.W(9257, 'i', J$.T(9249, 0, 22, false), i, 1)); J$.X1(11913, J$.C(640, J$.B(410, '<', J$.R(9273, 'i', i, 0), J$.G(9305, J$.G(9297, J$.G(9289, J$.R(9281, 'self', self, 0), 's', 0), 'batches', 0), 'length', 0), 0))); J$.X1(11921, J$.B(434, '-', i = J$.W(9329, 'i', J$.B(426, '+', J$.U(418, '+', J$.R(9321, 'i', i, 0)), J$.T(9313, 1, 22, false), 0), i, 0), J$.T(9337, 1, 22, false), 0))) {
                                J$.X1(9809, J$.F(9801, J$.R(9345, 'executeBatch', executeBatch, 1), 0)(J$.R(9353, 'self', self, 0), J$.G(9393, J$.G(9377, J$.G(9369, J$.R(9361, 'self', self, 0), 's', 0), 'batches', 0), J$.R(9385, 'i', i, 0), 4), J$.T(9793, function (err, result) {
                                    jalangiLabel2328:
                                        while (true) {
                                            try {
                                                J$.Fe(9753, arguments.callee, this, arguments);
                                                arguments = J$.N(9761, 'arguments', arguments, 4);
                                                err = J$.N(9769, 'err', err, 4);
                                                result = J$.N(9777, 'result', result, 4);
                                                J$.N(9785, 'error', error, 0);
                                                if (J$.X1(11865, J$.C(608, J$.R(9401, 'err', err, 0))))
                                                    J$.X1(9425, error = J$.W(9417, 'error', J$.R(9409, 'err', err, 0), error, 0));
                                                J$.X1(9457, numberOfCommandsToExecute = J$.W(9449, 'numberOfCommandsToExecute', J$.B(442, '-', J$.R(9433, 'numberOfCommandsToExecute', numberOfCommandsToExecute, 0), J$.T(9441, 1, 22, false), 0), numberOfCommandsToExecute, 0));
                                                if (J$.X1(11889, J$.C(632, J$.B(450, '==', J$.R(9465, 'numberOfCommandsToExecute', numberOfCommandsToExecute, 0), J$.T(9473, 0, 22, false), 0)))) {
                                                    if (J$.X1(11873, J$.C(616, J$.R(9481, 'error', error, 0))))
                                                        return J$.X1(9529, J$.Rt(9521, J$.F(9513, J$.R(9489, 'handleCallback', handleCallback, 1), 0)(J$.R(9497, 'callback', callback, 0), J$.R(9505, 'error', error, 0))));
                                                    var error = J$.X1(9665, J$.W(9657, 'error', J$.X1(11881, J$.C(624, J$.B(458, '>', J$.G(9569, J$.G(9561, J$.G(9553, J$.G(9545, J$.R(9537, 'self', self, 0), 's', 0), 'bulkResult', 0), 'writeErrors', 0), 'length', 0), J$.T(9577, 0, 22, false), 0))) ? J$.F(9641, J$.R(9585, 'toError', toError, 1), 0)(J$.G(9633, J$.G(9617, J$.G(9609, J$.G(9601, J$.R(9593, 'self', self, 0), 's', 0), 'bulkResult', 0), 'writeErrors', 0), J$.T(9625, 0, 22, false), 4)) : J$.T(9649, null, 25, false), error, 1));
                                                    J$.X1(9745, J$.F(9737, J$.R(9673, 'handleCallback', handleCallback, 1), 0)(J$.R(9681, 'callback', callback, 0), J$.R(9689, 'error', error, 0), J$.F(9729, J$.R(9697, 'BulkWriteResult', BulkWriteResult, 1), 1)(J$.G(9721, J$.G(9713, J$.R(9705, 'self', self, 0), 's', 0), 'bulkResult', 0))));
                                                }
                                            } catch (J$e) {
                                                J$.Ex(11897, J$e);
                                            } finally {
                                                if (J$.Fr(11905))
                                                    continue jalangiLabel2328;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false, 9753)));
                            }
                        } catch (J$e) {
                            J$.Ex(11929, J$e);
                        } finally {
                            if (J$.Fr(11937))
                                continue jalangiLabel2329;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 9817), executeBatches, 3));
            J$.X1(10777, J$.P(10769, J$.G(9905, J$.R(9897, 'UnorderedBulkOperation', UnorderedBulkOperation, 1), 'prototype', 0), 'execute', J$.T(10761, function (_writeConcern, callback) {
                jalangiLabel2332:
                    while (true) {
                        try {
                            J$.Fe(10721, arguments.callee, this, arguments);
                            arguments = J$.N(10729, 'arguments', arguments, 4);
                            _writeConcern = J$.N(10737, '_writeConcern', _writeConcern, 4);
                            callback = J$.N(10745, 'callback', callback, 4);
                            J$.N(10753, 'self', self, 0);
                            var self = J$.X1(9929, J$.W(9921, 'self', J$.R(9913, 'this', this, 0), self, 1));
                            if (J$.X1(11945, J$.C(648, J$.G(9953, J$.G(9945, J$.R(9937, 'this', this, 0), 's', 0), 'executed', 0))))
                                throw J$.X1(9993, J$.Th(9985, J$.F(9977, J$.R(9961, 'toError', toError, 1), 0)(J$.T(9969, 'batch cannot be re-executed', 21, false))));
                            if (J$.X1(11953, J$.C(656, J$.B(474, '==', J$.U(466, 'typeof', J$.R(10001, '_writeConcern', _writeConcern, 0)), J$.T(10009, 'function', 21, false), 0)))) {
                                J$.X1(10033, callback = J$.W(10025, 'callback', J$.R(10017, '_writeConcern', _writeConcern, 0), callback, 0));
                            } else {
                                J$.X1(10073, J$.P(10065, J$.G(10049, J$.R(10041, 'this', this, 0), 's', 0), 'writeConcern', J$.R(10057, '_writeConcern', _writeConcern, 0), 0));
                            }
                            if (J$.X1(11961, J$.C(664, J$.G(10097, J$.G(10089, J$.R(10081, 'this', this, 0), 's', 0), 'currentInsertBatch', 0))))
                                J$.X1(10161, J$.M(10153, J$.G(10121, J$.G(10113, J$.R(10105, 'this', this, 0), 's', 0), 'batches', 0), 'push', 0)(J$.G(10145, J$.G(10137, J$.R(10129, 'this', this, 0), 's', 0), 'currentInsertBatch', 0)));
                            if (J$.X1(11969, J$.C(672, J$.G(10185, J$.G(10177, J$.R(10169, 'this', this, 0), 's', 0), 'currentUpdateBatch', 0))))
                                J$.X1(10249, J$.M(10241, J$.G(10209, J$.G(10201, J$.R(10193, 'this', this, 0), 's', 0), 'batches', 0), 'push', 0)(J$.G(10233, J$.G(10225, J$.R(10217, 'this', this, 0), 's', 0), 'currentUpdateBatch', 0)));
                            if (J$.X1(11977, J$.C(680, J$.G(10273, J$.G(10265, J$.R(10257, 'this', this, 0), 's', 0), 'currentRemoveBatch', 0))))
                                J$.X1(10337, J$.M(10329, J$.G(10297, J$.G(10289, J$.R(10281, 'this', this, 0), 's', 0), 'batches', 0), 'push', 0)(J$.G(10321, J$.G(10313, J$.R(10305, 'this', this, 0), 's', 0), 'currentRemoveBatch', 0)));
                            if (J$.X1(11985, J$.C(688, J$.B(482, '==', J$.G(10369, J$.G(10361, J$.G(10353, J$.R(10345, 'this', this, 0), 's', 0), 'batches', 0), 'length', 0), J$.T(10377, 0, 22, false), 0)))) {
                                throw J$.X1(10417, J$.Th(10409, J$.F(10401, J$.R(10385, 'toError', toError, 1), 0)(J$.T(10393, 'Invalid Operation, No operations in bulk', 21, false))));
                            }
                            if (J$.X1(11993, J$.C(696, J$.B(498, '==', J$.U(490, 'typeof', J$.R(10425, 'callback', callback, 0)), J$.T(10433, 'function', 21, false), 0))))
                                return J$.X1(10481, J$.Rt(10473, J$.F(10465, J$.R(10441, 'executeBatches', executeBatches, 1), 0)(J$.R(10449, 'this', this, 0), J$.R(10457, 'callback', callback, 0))));
                            return J$.X1(10713, J$.Rt(10705, J$.M(10697, J$.G(10497, J$.R(10489, 'this', this, 0), 's', 0), 'promiseLibrary', 2)(J$.T(10689, function (resolve, reject) {
                                jalangiLabel2331:
                                    while (true) {
                                        try {
                                            J$.Fe(10657, arguments.callee, this, arguments);
                                            arguments = J$.N(10665, 'arguments', arguments, 4);
                                            resolve = J$.N(10673, 'resolve', resolve, 4);
                                            reject = J$.N(10681, 'reject', reject, 4);
                                            J$.X1(10649, J$.F(10641, J$.R(10505, 'executeBatches', executeBatches, 1), 0)(J$.R(10513, 'self', self, 0), J$.T(10633, function (err, r) {
                                                jalangiLabel2330:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(10601, arguments.callee, this, arguments);
                                                            arguments = J$.N(10609, 'arguments', arguments, 4);
                                                            err = J$.N(10617, 'err', err, 4);
                                                            r = J$.N(10625, 'r', r, 4);
                                                            if (J$.X1(12001, J$.C(704, J$.R(10521, 'err', err, 0))))
                                                                return J$.X1(10561, J$.Rt(10553, J$.F(10545, J$.R(10529, 'reject', reject, 0), 0)(J$.R(10537, 'err', err, 0))));
                                                            J$.X1(10593, J$.F(10585, J$.R(10569, 'resolve', resolve, 0), 0)(J$.R(10577, 'r', r, 0)));
                                                        } catch (J$e) {
                                                            J$.Ex(12009, J$e);
                                                        } finally {
                                                            if (J$.Fr(12017))
                                                                continue jalangiLabel2330;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false, 10601)));
                                        } catch (J$e) {
                                            J$.Ex(12025, J$e);
                                        } finally {
                                            if (J$.Fr(12033))
                                                continue jalangiLabel2331;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 10657))));
                        } catch (J$e) {
                            J$.Ex(12041, J$e);
                        } finally {
                            if (J$.Fr(12049))
                                continue jalangiLabel2332;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 10721), 0));
            J$.X1(10833, J$.M(10825, J$.R(10785, 'define', define, 1), 'classMethod', 0)(J$.T(10793, 'execute', 21, false), J$.T(10817, {
                callback: J$.T(10801, true, 23, false),
                promise: J$.T(10809, false, 23, false)
            }, 11, false)));
            var initializeUnorderedBulkOp = J$.X1(10953, J$.W(10945, 'initializeUnorderedBulkOp', J$.T(10937, function (topology, collection, options) {
                jalangiLabel2333:
                    while (true) {
                        try {
                            J$.Fe(10897, arguments.callee, this, arguments);
                            arguments = J$.N(10905, 'arguments', arguments, 4);
                            topology = J$.N(10913, 'topology', topology, 4);
                            collection = J$.N(10921, 'collection', collection, 4);
                            options = J$.N(10929, 'options', options, 4);
                            return J$.X1(10889, J$.Rt(10881, J$.F(10873, J$.R(10841, 'UnorderedBulkOperation', UnorderedBulkOperation, 1), 1)(J$.R(10849, 'topology', topology, 0), J$.R(10857, 'collection', collection, 0), J$.R(10865, 'options', options, 0))));
                        } catch (J$e) {
                            J$.Ex(12057, J$e);
                        } finally {
                            if (J$.Fr(12065))
                                continue jalangiLabel2333;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 10897), initializeUnorderedBulkOp, 3));
            J$.X1(10985, J$.P(10977, J$.R(10961, 'initializeUnorderedBulkOp', initializeUnorderedBulkOp, 1), 'UnorderedBulkOperation', J$.R(10969, 'UnorderedBulkOperation', UnorderedBulkOperation, 1), 0));
            J$.X1(11017, J$.P(11009, J$.R(10993, 'module', module, 2), 'exports', J$.R(11001, 'initializeUnorderedBulkOp', initializeUnorderedBulkOp, 1), 0));
            J$.X1(11057, J$.P(11049, J$.G(11033, J$.R(11025, 'module', module, 2), 'exports', 0), 'Bulk', J$.R(11041, 'UnorderedBulkOperation', UnorderedBulkOperation, 1), 0));
        } catch (J$e) {
            J$.Ex(12073, J$e);
        } finally {
            if (J$.Sr(12081)) {
                J$.L();
                continue jalangiLabel2334;
            } else {
                J$.L();
                break jalangiLabel2334;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
