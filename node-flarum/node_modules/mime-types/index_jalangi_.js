J$.iids = {"8":[17,9,17,42],"9":[1,20,1,27],"10":[17,9,17,14],"16":[17,9,17,42],"17":[1,28,1,32],"18":[17,18,17,29],"24":[21,16,21,51],"25":[1,20,1,33],"26":[17,18,17,42],"32":[22,9,22,29],"33":[1,20,1,33],"34":[31,9,31,13],"40":[22,9,22,29],"41":[1,20,1,33],"42":[31,17,31,27],"48":[25,9,25,49],"49":[2,26,2,38],"50":[31,17,31,40],"56":[25,9,25,49],"57":[2,26,2,45],"58":[34,37,34,39],"64":[31,9,31,40],"65":[2,26,2,45],"66":[34,16,34,39],"72":[31,9,31,40],"73":[2,26,2,45],"74":[35,9,35,14],"80":[34,16,34,39],"81":[3,1,3,13],"82":[38,37,38,39],"88":[35,9,35,14],"89":[3,1,3,14],"90":[38,9,38,39],"96":[40,13,40,20],"97":[4,10,4,17],"98":[41,21,41,57],"104":[38,9,38,39],"105":[4,18,4,27],"106":[41,21,41,57],"112":[46,9,46,42],"113":[4,10,4,28],"114":[46,9,46,14],"120":[46,9,46,42],"121":[4,10,4,28],"122":[46,18,46,29],"128":[50,16,50,67],"129":[4,10,4,28],"130":[46,18,46,42],"136":[51,9,51,30],"137":[5,15,5,22],"138":[51,9,51,14],"144":[51,9,51,30],"145":[5,23,5,29],"146":[51,18,51,30],"152":[57,9,57,42],"153":[5,15,5,30],"154":[57,9,57,14],"160":[57,9,57,42],"161":[5,15,5,38],"162":[57,18,57,29],"168":[61,9,61,19],"169":[5,15,5,38],"170":[57,18,57,42],"176":[64,12,64,45],"177":[5,15,5,38],"178":[60,29,60,40],"184":[76,13,76,34],"185":[6,27,6,52],"186":[61,9,61,19],"192":[76,13,76,34],"193":[6,27,6,52],"194":[76,13,76,18],"200":[85,86,85,150],"201":[6,27,6,52],"202":[76,22,76,34],"208":[85,73,85,150],"209":[7,24,7,34],"210":[80,25,80,40],"216":[85,21,85,151],"217":[7,24,7,34],"218":[80,42,80,45],"224":[85,21,85,151],"225":[7,24,7,34],"232":[82,17,82,33],"233":[8,1,8,8],"234":[80,42,80,45],"240":[80,25,80,40],"241":[8,19,8,26],"242":[85,21,85,68],"249":[8,1,8,26],"250":[85,73,85,82],"257":[8,1,8,27],"258":[85,86,85,97],"265":[9,1,9,8],"266":[85,101,85,150],"273":[9,30,9,37],"281":[9,20,9,39],"289":[9,1,9,39],"297":[9,1,9,40],"305":[10,1,10,8],"313":[10,23,10,34],"321":[10,1,10,34],"329":[10,1,10,35],"337":[11,1,11,8],"345":[11,21,11,30],"353":[11,1,11,30],"361":[11,1,11,31],"369":[12,1,12,8],"377":[12,22,12,28],"385":[12,36,12,40],"393":[12,22,12,41],"395":[12,22,12,35],"401":[12,1,12,41],"409":[12,1,12,42],"417":[13,1,13,8],"425":[13,18,13,24],"433":[13,1,13,24],"441":[13,1,13,25],"449":[14,1,14,8],"457":[14,17,14,23],"465":[14,31,14,35],"473":[14,17,14,36],"475":[14,17,14,30],"481":[14,1,14,36],"489":[14,1,14,37],"497":[15,1,15,13],"505":[15,14,15,21],"513":[15,14,15,32],"521":[15,34,15,41],"529":[15,34,15,47],"537":[15,1,15,48],"545":[15,1,15,49],"553":[17,10,17,14],"561":[17,25,17,29],"569":[17,34,17,42],"577":[18,16,18,21],"585":[18,16,18,21],"593":[18,9,18,22],"601":[20,17,20,36],"609":[20,42,20,46],"617":[20,17,20,47],"619":[20,17,20,41],"625":[20,17,20,47],"633":[20,17,20,47],"641":[21,16,21,21],"649":[21,25,21,27],"657":[21,28,21,33],"665":[21,34,21,35],"673":[21,28,21,36],"681":[21,28,21,50],"683":[21,28,21,48],"689":[21,25,21,51],"697":[21,16,21,51],"705":[21,16,21,51],"713":[22,9,22,13],"721":[22,17,22,21],"729":[22,17,22,29],"737":[23,16,23,20],"745":[23,16,23,28],"753":[23,16,23,28],"761":[23,9,23,29],"769":[25,9,25,14],"777":[25,18,25,34],"785":[25,40,25,45],"793":[25,46,25,47],"801":[25,40,25,48],"809":[25,18,25,49],"811":[25,18,25,39],"817":[26,16,26,23],"825":[26,16,26,23],"833":[26,9,26,24],"841":[28,12,28,17],"849":[28,12,28,17],"857":[28,5,28,18],"865":[16,1,29,2],"873":[16,1,29,2],"881":[16,1,29,2],"889":[16,1,29,2],"897":[16,1,29,2],"905":[31,10,31,13],"913":[31,24,31,27],"921":[31,32,31,40],"929":[32,16,32,21],"937":[32,16,32,21],"945":[32,9,32,22],"953":[34,16,34,19],"961":[34,28,34,31],"969":[34,16,34,32],"971":[34,16,34,27],"977":[34,38,34,39],"985":[34,42,34,49],"993":[34,57,34,60],"1001":[34,42,34,61],"1003":[34,42,34,56],"1009":[34,64,34,67],"1017":[34,16,34,67],"1025":[34,16,34,67],"1033":[35,10,35,14],"1041":[36,16,36,21],"1049":[36,16,36,21],"1057":[36,9,36,22],"1065":[38,9,38,13],"1073":[38,22,38,31],"1081":[38,9,38,32],"1083":[38,9,38,21],"1089":[38,38,38,39],"1097":[39,23,39,30],"1105":[39,39,39,43],"1113":[39,23,39,44],"1115":[39,23,39,38],"1121":[39,23,39,44],"1129":[39,23,39,44],"1137":[40,13,40,20],"1145":[41,21,41,33],"1153":[41,36,41,43],"1161":[41,36,41,57],"1163":[41,36,41,55],"1169":[41,13,41,17],"1177":[41,13,41,57],"1185":[41,13,41,58],"1193":[43,12,43,16],"1201":[43,12,43,16],"1209":[43,5,43,17],"1217":[30,1,44,2],"1225":[30,1,44,2],"1233":[30,1,44,2],"1241":[30,1,44,2],"1249":[30,1,44,2],"1257":[46,10,46,14],"1265":[46,25,46,29],"1273":[46,34,46,42],"1281":[47,16,47,21],"1289":[47,16,47,21],"1297":[47,9,47,22],"1305":[49,17,49,36],"1313":[49,42,49,46],"1321":[49,17,49,47],"1323":[49,17,49,41],"1329":[49,17,49,47],"1337":[49,17,49,47],"1345":[50,16,50,21],"1353":[50,25,50,32],"1361":[50,25,50,43],"1369":[50,44,50,49],"1377":[50,50,50,51],"1385":[50,44,50,52],"1393":[50,44,50,66],"1395":[50,44,50,64],"1401":[50,25,50,67],"1409":[50,16,50,67],"1417":[50,16,50,67],"1425":[51,10,51,14],"1433":[51,19,51,23],"1441":[51,19,51,30],"1449":[52,16,52,21],"1457":[52,16,52,21],"1465":[52,9,52,22],"1473":[54,12,54,16],"1481":[54,17,54,18],"1489":[54,12,54,19],"1497":[54,12,54,19],"1505":[54,5,54,20],"1513":[45,1,55,2],"1521":[45,1,55,2],"1529":[45,1,55,2],"1537":[45,1,55,2],"1545":[45,1,55,2],"1553":[57,10,57,14],"1561":[57,25,57,29],"1569":[57,34,57,42],"1577":[58,16,58,21],"1585":[58,16,58,21],"1593":[58,9,58,22],"1601":[60,21,60,28],"1609":[60,29,60,33],"1617":[60,36,60,40],"1625":[60,21,60,41],"1633":[60,21,60,55],"1635":[60,21,60,53],"1641":[60,63,60,64],"1649":[60,21,60,65],"1651":[60,21,60,62],"1657":[60,21,60,65],"1665":[60,21,60,65],"1673":[61,10,61,19],"1681":[62,16,62,21],"1689":[62,16,62,21],"1697":[62,9,62,22],"1705":[64,12,64,19],"1713":[64,12,64,25],"1721":[64,26,64,35],"1729":[64,12,64,36],"1737":[64,40,64,45],"1745":[64,12,64,45],"1753":[64,5,64,46],"1761":[56,1,65,2],"1769":[56,1,65,2],"1777":[56,1,65,2],"1785":[56,1,65,2],"1793":[68,9,68,16],"1801":[69,9,69,17],"1809":[70,9,70,18],"1817":[71,9,71,15],"1825":[67,22,72,6],"1833":[67,22,72,6],"1841":[67,22,72,6],"1849":[73,5,73,11],"1857":[73,17,73,19],"1865":[73,5,73,20],"1867":[73,5,73,16],"1873":[74,20,74,22],"1881":[74,23,74,27],"1889":[74,20,74,28],"1897":[74,20,74,28],"1905":[74,20,74,28],"1913":[75,20,75,24],"1921":[75,20,75,35],"1929":[75,20,75,35],"1937":[75,20,75,35],"1945":[76,14,76,18],"1953":[76,23,76,27],"1961":[76,23,76,34],"1969":[77,13,77,20],"1977":[77,13,77,20],"1985":[79,9,79,19],"1993":[79,20,79,24],"2001":[79,28,79,32],"2009":[79,9,79,32],"2017":[79,9,79,33],"2025":[80,22,80,23],"2033":[80,22,80,23],"2041":[80,22,80,23],"2049":[80,25,80,26],"2057":[80,29,80,33],"2065":[80,29,80,40],"2081":[80,42,80,43],"2089":[80,42,80,45],"2105":[81,29,81,33],"2113":[81,34,81,35],"2121":[81,29,81,36],"2129":[81,29,81,36],"2137":[81,29,81,36],"2145":[82,17,82,22],"2153":[82,23,82,32],"2161":[82,17,82,33],"2169":[83,28,83,38],"2177":[83,47,83,49],"2185":[83,50,83,55],"2193":[83,56,83,65],"2201":[83,50,83,66],"2209":[83,47,83,67],"2217":[83,47,83,74],"2225":[83,28,83,75],"2227":[83,28,83,46],"2233":[83,28,83,75],"2241":[83,28,83,75],"2249":[84,26,84,36],"2257":[84,45,84,49],"2265":[84,45,84,56],"2273":[84,26,84,57],"2275":[84,26,84,44],"2281":[84,26,84,57],"2289":[84,26,84,57],"2297":[85,21,85,26],"2305":[85,27,85,36],"2313":[85,21,85,37],"2321":[85,42,85,68],"2329":[85,73,85,77],"2337":[85,80,85,82],"2345":[85,86,85,90],"2353":[85,95,85,97],"2361":[85,101,85,106],"2369":[85,107,85,116],"2377":[85,101,85,117],"2385":[85,125,85,126],"2393":[85,128,85,130],"2401":[85,101,85,131],"2403":[85,101,85,124],"2409":[85,136,85,150],"2417":[89,13,89,18],"2425":[89,19,89,28],"2433":[89,32,89,36],"2441":[89,13,89,36],"2449":[89,13,89,37],"2457":[73,29,91,6],"2465":[73,29,91,6],"2473":[73,29,91,6],"2481":[73,29,91,6],"2489":[73,29,91,6],"2497":[73,29,91,6],"2505":[73,29,91,6],"2513":[73,29,91,6],"2521":[73,29,91,6],"2529":[73,29,91,6],"2537":[73,29,91,6],"2545":[73,5,91,7],"2547":[73,5,73,28],"2553":[73,5,91,8],"2561":[66,1,92,2],"2569":[66,1,92,2],"2577":[66,1,92,2],"2585":[66,1,92,2],"2593":[66,1,92,2],"2601":[1,1,92,2],"2609":[1,1,92,2],"2617":[1,1,92,2],"2625":[1,1,92,2],"2633":[1,1,92,2],"2641":[1,1,92,2],"2649":[1,1,92,2],"2657":[16,1,29,2],"2665":[1,1,92,2],"2673":[30,1,44,2],"2681":[1,1,92,2],"2689":[45,1,55,2],"2697":[1,1,92,2],"2705":[56,1,65,2],"2713":[1,1,92,2],"2721":[66,1,92,2],"2729":[1,1,92,2],"2737":[17,5,19,6],"2745":[22,5,24,6],"2753":[25,5,27,6],"2761":[16,1,29,2],"2769":[16,1,29,2],"2777":[31,5,33,6],"2785":[34,16,34,67],"2793":[35,5,37,6],"2801":[40,9,41,58],"2809":[38,5,42,6],"2817":[30,1,44,2],"2825":[30,1,44,2],"2833":[46,5,48,6],"2841":[51,5,53,6],"2849":[45,1,55,2],"2857":[45,1,55,2],"2865":[57,5,59,6],"2873":[61,5,63,6],"2881":[56,1,65,2],"2889":[56,1,65,2],"2897":[76,9,78,10],"2905":[85,17,87,18],"2913":[82,13,88,14],"2921":[80,9,90,10],"2929":[80,9,90,10],"2937":[73,29,91,6],"2945":[73,29,91,6],"2953":[66,1,92,2],"2961":[66,1,92,2],"2969":[1,1,92,2],"2977":[1,1,92,2],"nBranches":60,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/mime-types/index.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/mime-types/index_jalangi_.js","code":"/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n"};
jalangiLabel548:
    while (true) {
        try {
            J$.Se(2601, '/home/blake/ExpoSE/Targets/node-flarum/node_modules/mime-types/index_jalangi_.js', '/home/blake/ExpoSE/Targets/node-flarum/node_modules/mime-types/index.js');
            function charset(type) {
                jalangiLabel542:
                    while (true) {
                        try {
                            J$.Fe(865, arguments.callee, this, arguments);
                            arguments = J$.N(873, 'arguments', arguments, 4);
                            type = J$.N(881, 'type', type, 4);
                            J$.N(889, 'match', match, 0);
                            J$.N(897, 'mime', mime, 0);
                            if (J$.X1(2737, J$.C(16, J$.C(8, J$.U(10, '!', J$.R(553, 'type', type, 0))) ? J$._() : J$.B(26, '!==', J$.U(18, 'typeof', J$.R(561, 'type', type, 0)), J$.T(569, 'string', 21, false), 0)))) {
                                return J$.X1(593, J$.Rt(585, J$.T(577, false, 23, false)));
                            }
                            var match = J$.X1(633, J$.W(625, 'match', J$.M(617, J$.R(601, 'EXTRACT_TYPE_REGEXP', EXTRACT_TYPE_REGEXP, 1), 'exec', 0)(J$.R(609, 'type', type, 0)), match, 1));
                            var mime = J$.X1(705, J$.W(697, 'mime', J$.C(24, J$.R(641, 'match', match, 0)) ? J$.G(689, J$.R(649, 'db', db, 1), J$.M(681, J$.G(673, J$.R(657, 'match', match, 0), J$.T(665, 1, 22, false), 4), 'toLowerCase', 0)(), 4) : J$._(), mime, 1));
                            if (J$.X1(2745, J$.C(40, J$.C(32, J$.R(713, 'mime', mime, 0)) ? J$.G(729, J$.R(721, 'mime', mime, 0), 'charset', 0) : J$._()))) {
                                return J$.X1(761, J$.Rt(753, J$.G(745, J$.R(737, 'mime', mime, 0), 'charset', 0)));
                            }
                            if (J$.X1(2753, J$.C(56, J$.C(48, J$.R(769, 'match', match, 0)) ? J$.M(809, J$.R(777, 'TEXT_TYPE_REGEXP', TEXT_TYPE_REGEXP, 1), 'test', 0)(J$.G(801, J$.R(785, 'match', match, 0), J$.T(793, 1, 22, false), 4)) : J$._()))) {
                                return J$.X1(833, J$.Rt(825, J$.T(817, 'UTF-8', 21, false)));
                            }
                            return J$.X1(857, J$.Rt(849, J$.T(841, false, 23, false)));
                        } catch (J$e) {
                            J$.Ex(2761, J$e);
                        } finally {
                            if (J$.Fr(2769))
                                continue jalangiLabel542;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function contentType(str) {
                jalangiLabel543:
                    while (true) {
                        try {
                            J$.Fe(1217, arguments.callee, this, arguments);
                            arguments = J$.N(1225, 'arguments', arguments, 4);
                            str = J$.N(1233, 'str', str, 4);
                            J$.N(1241, 'mime', mime, 0);
                            J$.N(1249, 'charset', charset, 0);
                            if (J$.X1(2777, J$.C(72, J$.C(64, J$.U(34, '!', J$.R(905, 'str', str, 0))) ? J$._() : J$.B(50, '!==', J$.U(42, 'typeof', J$.R(913, 'str', str, 0)), J$.T(921, 'string', 21, false), 0)))) {
                                return J$.X1(945, J$.Rt(937, J$.T(929, false, 23, false)));
                            }
                            var mime = J$.X1(1025, J$.W(1017, 'mime', J$.X1(2785, J$.C(80, J$.B(66, '===', J$.M(969, J$.R(953, 'str', str, 0), 'indexOf', 0)(J$.T(961, '/', 21, false)), J$.U(58, '-', J$.T(977, 1, 22, false)), 0))) ? J$.M(1001, J$.R(985, 'exports', exports, 2), 'lookup', 0)(J$.R(993, 'str', str, 0)) : J$.R(1009, 'str', str, 0), mime, 1));
                            if (J$.X1(2793, J$.C(88, J$.U(74, '!', J$.R(1033, 'mime', mime, 0))))) {
                                return J$.X1(1057, J$.Rt(1049, J$.T(1041, false, 23, false)));
                            }
                            if (J$.X1(2809, J$.C(104, J$.B(90, '===', J$.M(1081, J$.R(1065, 'mime', mime, 0), 'indexOf', 0)(J$.T(1073, 'charset', 21, false)), J$.U(82, '-', J$.T(1089, 1, 22, false)), 0)))) {
                                var charset = J$.X1(1129, J$.W(1121, 'charset', J$.M(1113, J$.R(1097, 'exports', exports, 2), 'charset', 0)(J$.R(1105, 'mime', mime, 0)), charset, 1));
                                if (J$.X1(2801, J$.C(96, J$.R(1137, 'charset', charset, 0))))
                                    J$.X1(1185, mime = J$.W(1177, 'mime', J$.B(106, '+', J$.R(1169, 'mime', mime, 0), J$.B(98, '+', J$.T(1145, '; charset=', 21, false), J$.M(1161, J$.R(1153, 'charset', charset, 0), 'toLowerCase', 0)(), 0), 0), mime, 0));
                            }
                            return J$.X1(1209, J$.Rt(1201, J$.R(1193, 'mime', mime, 0)));
                        } catch (J$e) {
                            J$.Ex(2817, J$e);
                        } finally {
                            if (J$.Fr(2825))
                                continue jalangiLabel543;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function extension(type) {
                jalangiLabel544:
                    while (true) {
                        try {
                            J$.Fe(1513, arguments.callee, this, arguments);
                            arguments = J$.N(1521, 'arguments', arguments, 4);
                            type = J$.N(1529, 'type', type, 4);
                            J$.N(1537, 'match', match, 0);
                            J$.N(1545, 'exts', exts, 0);
                            if (J$.X1(2833, J$.C(120, J$.C(112, J$.U(114, '!', J$.R(1257, 'type', type, 0))) ? J$._() : J$.B(130, '!==', J$.U(122, 'typeof', J$.R(1265, 'type', type, 0)), J$.T(1273, 'string', 21, false), 0)))) {
                                return J$.X1(1297, J$.Rt(1289, J$.T(1281, false, 23, false)));
                            }
                            var match = J$.X1(1337, J$.W(1329, 'match', J$.M(1321, J$.R(1305, 'EXTRACT_TYPE_REGEXP', EXTRACT_TYPE_REGEXP, 1), 'exec', 0)(J$.R(1313, 'type', type, 0)), match, 1));
                            var exts = J$.X1(1417, J$.W(1409, 'exts', J$.C(128, J$.R(1345, 'match', match, 0)) ? J$.G(1401, J$.G(1361, J$.R(1353, 'exports', exports, 2), 'extensions', 0), J$.M(1393, J$.G(1385, J$.R(1369, 'match', match, 0), J$.T(1377, 1, 22, false), 4), 'toLowerCase', 0)(), 4) : J$._(), exts, 1));
                            if (J$.X1(2841, J$.C(144, J$.C(136, J$.U(138, '!', J$.R(1425, 'exts', exts, 0))) ? J$._() : J$.U(146, '!', J$.G(1441, J$.R(1433, 'exts', exts, 0), 'length', 0))))) {
                                return J$.X1(1465, J$.Rt(1457, J$.T(1449, false, 23, false)));
                            }
                            return J$.X1(1505, J$.Rt(1497, J$.G(1489, J$.R(1473, 'exts', exts, 0), J$.T(1481, 0, 22, false), 4)));
                        } catch (J$e) {
                            J$.Ex(2849, J$e);
                        } finally {
                            if (J$.Fr(2857))
                                continue jalangiLabel544;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function lookup(path) {
                jalangiLabel545:
                    while (true) {
                        try {
                            J$.Fe(1761, arguments.callee, this, arguments);
                            arguments = J$.N(1769, 'arguments', arguments, 4);
                            path = J$.N(1777, 'path', path, 4);
                            J$.N(1785, 'extension', extension, 0);
                            if (J$.X1(2865, J$.C(160, J$.C(152, J$.U(154, '!', J$.R(1553, 'path', path, 0))) ? J$._() : J$.B(170, '!==', J$.U(162, 'typeof', J$.R(1561, 'path', path, 0)), J$.T(1569, 'string', 21, false), 0)))) {
                                return J$.X1(1593, J$.Rt(1585, J$.T(1577, false, 23, false)));
                            }
                            var extension = J$.X1(1665, J$.W(1657, 'extension', J$.M(1649, J$.M(1633, J$.F(1625, J$.R(1601, 'extname', extname, 1), 0)(J$.B(178, '+', J$.T(1609, 'x.', 21, false), J$.R(1617, 'path', path, 0), 0)), 'toLowerCase', 0)(), 'substr', 0)(J$.T(1641, 1, 22, false)), extension, 1));
                            if (J$.X1(2873, J$.C(168, J$.U(186, '!', J$.R(1673, 'extension', extension, 0))))) {
                                return J$.X1(1697, J$.Rt(1689, J$.T(1681, false, 23, false)));
                            }
                            return J$.X1(1753, J$.Rt(1745, J$.C(176, J$.G(1729, J$.G(1713, J$.R(1705, 'exports', exports, 2), 'types', 0), J$.R(1721, 'extension', extension, 0), 4)) ? J$._() : J$.T(1737, false, 23, false)));
                        } catch (J$e) {
                            J$.Ex(2881, J$e);
                        } finally {
                            if (J$.Fr(2889))
                                continue jalangiLabel545;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function populateMaps(extensions, types) {
                jalangiLabel547:
                    while (true) {
                        try {
                            J$.Fe(2561, arguments.callee, this, arguments);
                            arguments = J$.N(2569, 'arguments', arguments, 4);
                            extensions = J$.N(2577, 'extensions', extensions, 4);
                            types = J$.N(2585, 'types', types, 4);
                            J$.N(2593, 'preference', preference, 0);
                            var preference = J$.X1(1841, J$.W(1833, 'preference', J$.T(1825, [
                                J$.T(1793, 'nginx', 21, false),
                                J$.T(1801, 'apache', 21, false),
                                J$.T(1809, undefined, 24, false),
                                J$.T(1817, 'iana', 21, false)
                            ], 10, false), preference, 1));
                            J$.X1(2553, J$.M(2545, J$.M(1865, J$.R(1849, 'Object', Object, 2), 'keys', 0)(J$.R(1857, 'db', db, 1)), 'forEach', 0)(J$.T(2537, function forEachMimeType(type) {
                                jalangiLabel546:
                                    while (true) {
                                        try {
                                            J$.Fe(2457, arguments.callee, this, arguments);
                                            arguments = J$.N(2465, 'arguments', arguments, 4);
                                            forEachMimeType = J$.N(2473, 'forEachMimeType', forEachMimeType, 0);
                                            type = J$.N(2481, 'type', type, 4);
                                            J$.N(2489, 'mime', mime, 0);
                                            J$.N(2497, 'exts', exts, 0);
                                            J$.N(2505, 'i', i, 0);
                                            J$.N(2513, 'extension', extension, 0);
                                            J$.N(2521, 'from', from, 0);
                                            J$.N(2529, 'to', to, 0);
                                            var mime = J$.X1(1905, J$.W(1897, 'mime', J$.G(1889, J$.R(1873, 'db', db, 1), J$.R(1881, 'type', type, 0), 4), mime, 1));
                                            var exts = J$.X1(1937, J$.W(1929, 'exts', J$.G(1921, J$.R(1913, 'mime', mime, 0), 'extensions', 0), exts, 1));
                                            if (J$.X1(2897, J$.C(192, J$.C(184, J$.U(194, '!', J$.R(1945, 'exts', exts, 0))) ? J$._() : J$.U(202, '!', J$.G(1961, J$.R(1953, 'exts', exts, 0), 'length', 0))))) {
                                                return J$.X1(1977, J$.Rt(1969, undefined));
                                            }
                                            J$.X1(2017, J$.P(2009, J$.R(1985, 'extensions', extensions, 0), J$.R(1993, 'type', type, 0), J$.R(2001, 'exts', exts, 0), 2));
                                            for (var i = J$.X1(2041, J$.W(2033, 'i', J$.T(2025, 0, 22, false), i, 1)); J$.X1(2921, J$.C(240, J$.B(210, '<', J$.R(2049, 'i', i, 0), J$.G(2065, J$.R(2057, 'exts', exts, 0), 'length', 0), 0))); J$.X1(2929, J$.B(234, '-', i = J$.W(2089, 'i', J$.B(226, '+', J$.U(218, '+', J$.R(2081, 'i', i, 0)), J$.T(2073, 1, 22, false), 0), i, 0), J$.T(2097, 1, 22, false), 0))) {
                                                var extension = J$.X1(2137, J$.W(2129, 'extension', J$.G(2121, J$.R(2105, 'exts', exts, 0), J$.R(2113, 'i', i, 0), 4), extension, 1));
                                                if (J$.X1(2913, J$.C(232, J$.G(2161, J$.R(2145, 'types', types, 0), J$.R(2153, 'extension', extension, 0), 4)))) {
                                                    var from = J$.X1(2241, J$.W(2233, 'from', J$.M(2225, J$.R(2169, 'preference', preference, 0), 'indexOf', 0)(J$.G(2217, J$.G(2209, J$.R(2177, 'db', db, 1), J$.G(2201, J$.R(2185, 'types', types, 0), J$.R(2193, 'extension', extension, 0), 4), 4), 'source', 0)), from, 1));
                                                    var to = J$.X1(2289, J$.W(2281, 'to', J$.M(2273, J$.R(2249, 'preference', preference, 0), 'indexOf', 0)(J$.G(2265, J$.R(2257, 'mime', mime, 0), 'source', 0)), to, 1));
                                                    if (J$.X1(2905, J$.C(224, J$.C(216, J$.B(242, '!==', J$.G(2313, J$.R(2297, 'types', types, 0), J$.R(2305, 'extension', extension, 0), 4), J$.T(2321, 'application/octet-stream', 21, false), 0)) ? J$.C(208, J$.B(250, '>', J$.R(2329, 'from', from, 0), J$.R(2337, 'to', to, 0), 0)) ? J$._() : J$.C(200, J$.B(258, '===', J$.R(2345, 'from', from, 0), J$.R(2353, 'to', to, 0), 0)) ? J$.B(266, '===', J$.M(2401, J$.G(2377, J$.R(2361, 'types', types, 0), J$.R(2369, 'extension', extension, 0), 4), 'substr', 0)(J$.T(2385, 0, 22, false), J$.T(2393, 12, 22, false)), J$.T(2409, 'application/', 21, false), 0) : J$._() : J$._()))) {
                                                        continue;
                                                    }
                                                }
                                                J$.X1(2449, J$.P(2441, J$.R(2417, 'types', types, 0), J$.R(2425, 'extension', extension, 0), J$.R(2433, 'type', type, 0), 2));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(2937, J$e);
                                        } finally {
                                            if (J$.Fr(2945))
                                                continue jalangiLabel546;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 2457)));
                        } catch (J$e) {
                            J$.Ex(2953, J$e);
                        } finally {
                            if (J$.Fr(2961))
                                continue jalangiLabel547;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2609, '__secret__S$', __secret__S$, 0);
            J$.N(2617, '__secret__traits__', __secret__traits__, 0);
            J$.N(2625, 'db', db, 0);
            J$.N(2633, 'extname', extname, 0);
            J$.N(2641, 'EXTRACT_TYPE_REGEXP', EXTRACT_TYPE_REGEXP, 0);
            J$.N(2649, 'TEXT_TYPE_REGEXP', TEXT_TYPE_REGEXP, 0);
            charset = J$.N(2665, 'charset', J$.T(2657, charset, 12, false, 865), 0);
            contentType = J$.N(2681, 'contentType', J$.T(2673, contentType, 12, false, 1217), 0);
            extension = J$.N(2697, 'extension', J$.T(2689, extension, 12, false, 1513), 0);
            lookup = J$.N(2713, 'lookup', J$.T(2705, lookup, 12, false, 1761), 0);
            populateMaps = J$.N(2729, 'populateMaps', J$.T(2721, populateMaps, 12, false, 2561), 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            J$.X1(89, J$.T(81, 'use strict', 21, false));
            var db = J$.X1(129, J$.W(121, 'db', J$.F(113, J$.R(97, 'require', require, 2), 0)(J$.T(105, 'mime-db', 21, false)), db, 3));
            var extname = J$.X1(177, J$.W(169, 'extname', J$.G(161, J$.F(153, J$.R(137, 'require', require, 2), 0)(J$.T(145, 'path', 21, false)), 'extname', 0), extname, 3));
            var EXTRACT_TYPE_REGEXP = J$.X1(201, J$.W(193, 'EXTRACT_TYPE_REGEXP', J$.T(185, /^\s*([^;\s]*)(?:;|\s|$)/, 14, false), EXTRACT_TYPE_REGEXP, 3));
            var TEXT_TYPE_REGEXP = J$.X1(225, J$.W(217, 'TEXT_TYPE_REGEXP', J$.T(209, /^text\//i, 14, false), TEXT_TYPE_REGEXP, 3));
            J$.X1(257, J$.P(249, J$.R(233, 'exports', exports, 2), 'charset', J$.R(241, 'charset', charset, 1), 0));
            J$.X1(297, J$.P(289, J$.R(265, 'exports', exports, 2), 'charsets', J$.T(281, {
                lookup: J$.R(273, 'charset', charset, 1)
            }, 11, false), 0));
            J$.X1(329, J$.P(321, J$.R(305, 'exports', exports, 2), 'contentType', J$.R(313, 'contentType', contentType, 1), 0));
            J$.X1(361, J$.P(353, J$.R(337, 'exports', exports, 2), 'extension', J$.R(345, 'extension', extension, 1), 0));
            J$.X1(409, J$.P(401, J$.R(369, 'exports', exports, 2), 'extensions', J$.M(393, J$.R(377, 'Object', Object, 2), 'create', 0)(J$.T(385, null, 25, false)), 0));
            J$.X1(441, J$.P(433, J$.R(417, 'exports', exports, 2), 'lookup', J$.R(425, 'lookup', lookup, 1), 0));
            J$.X1(489, J$.P(481, J$.R(449, 'exports', exports, 2), 'types', J$.M(473, J$.R(457, 'Object', Object, 2), 'create', 0)(J$.T(465, null, 25, false)), 0));
            J$.X1(545, J$.F(537, J$.R(497, 'populateMaps', populateMaps, 1), 0)(J$.G(513, J$.R(505, 'exports', exports, 2), 'extensions', 0), J$.G(529, J$.R(521, 'exports', exports, 2), 'types', 0)));
        } catch (J$e) {
            J$.Ex(2969, J$e);
        } finally {
            if (J$.Sr(2977)) {
                J$.L();
                continue jalangiLabel548;
            } else {
                J$.L();
                break jalangiLabel548;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
