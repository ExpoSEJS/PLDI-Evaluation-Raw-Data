{"8":[15,9,15,13],"9":[1,20,1,27],"10":[15,9,15,13],"16":[18,9,18,39],"17":[1,28,1,32],"18":[18,18,18,39],"24":[20,21,20,37],"25":[1,20,1,33],"26":[19,27,19,47],"32":[18,9,18,39],"33":[1,20,1,33],"34":[20,21,20,37],"40":[24,9,24,32],"41":[1,20,1,33],"42":[20,39,20,42],"48":[24,9,24,32],"49":[2,26,2,38],"56":[30,20,30,63],"57":[2,26,2,45],"58":[20,39,20,42],"64":[30,20,30,63],"65":[2,26,2,45],"66":[21,34,21,39],"72":[29,13,29,55],"73":[2,26,2,45],"74":[24,9,24,15],"80":[28,17,28,33],"81":[3,1,3,13],"82":[24,19,24,32],"88":[36,12,36,99],"89":[3,1,3,14],"90":[28,17,28,33],"96":[40,9,40,22],"97":[4,13,4,20],"98":[28,35,28,38],"104":[45,25,45,41],"105":[4,21,4,34],"112":[43,9,43,29],"113":[4,13,4,35],"114":[28,35,28,38],"120":[53,9,53,33],"121":[4,13,4,35],"122":[30,20,30,35],"128":[56,13,56,17],"129":[4,13,4,35],"130":[30,61,30,63],"136":[57,10,57,22],"137":[5,12,5,19],"138":[30,39,30,63],"144":[59,10,59,21],"145":[5,20,5,32],"146":[36,12,36,58],"152":[62,9,62,24],"153":[5,12,5,33],"154":[36,62,36,99],"160":[65,12,65,36],"161":[5,12,5,33],"162":[40,9,40,22],"168":[68,9,68,27],"169":[5,12,5,33],"170":[43,9,43,29],"176":[73,9,73,63],"177":[6,1,6,7],"178":[44,27,44,47],"184":[73,9,73,63],"185":[6,18,6,31],"186":[45,25,45,41],"192":[76,9,76,72],"193":[6,1,6,31],"194":[45,43,45,46],"200":[76,9,76,72],"201":[6,1,6,32],"208":[80,16,80,153],"209":[7,1,7,7],"210":[45,43,45,46],"216":[79,9,79,47],"217":[7,1,7,15],"218":[46,34,46,39],"224":[82,9,82,72],"225":[7,21,7,27],"226":[53,9,53,20],"232":[82,9,82,72],"233":[7,1,7,27],"234":[53,9,53,33],"241":[7,1,7,28],"242":[62,9,62,24],"249":[8,1,8,7],"250":[63,16,63,28],"257":[8,1,8,15],"258":[65,34,65,36],"265":[8,26,8,33],"266":[65,12,65,36],"273":[8,1,8,33],"274":[68,9,68,27],"281":[8,1,8,34],"282":[73,9,73,33],"289":[9,1,9,7],"290":[73,37,73,63],"297":[9,1,9,15],"298":[76,9,76,33],"305":[9,28,9,37],"306":[76,37,76,72],"313":[9,1,9,37],"314":[79,9,79,47],"321":[9,1,9,38],"322":[80,43,80,68],"329":[10,1,10,7],"330":[80,16,80,68],"337":[10,1,10,15],"338":[80,125,80,152],"345":[10,24,10,33],"346":[80,72,80,153],"353":[10,1,10,33],"354":[82,9,82,33],"361":[10,1,10,34],"362":[82,37,82,72],"369":[13,17,13,23],"377":[13,17,13,23],"385":[13,17,13,23],"393":[14,15,14,31],"401":[14,32,14,37],"409":[14,15,14,38],"417":[14,15,14,38],"425":[14,15,14,38],"433":[15,10,15,13],"441":[16,16,16,21],"449":[16,16,16,21],"457":[16,9,16,22],"465":[18,9,18,14],"473":[18,19,18,24],"481":[18,33,18,38],"489":[18,19,18,39],"491":[18,19,18,32],"497":[19,21,19,26],"505":[19,27,19,36],"513":[19,27,19,43],"521":[19,46,19,47],"529":[19,17,19,48],"537":[19,17,19,48],"545":[19,9,19,49],"553":[20,18,20,19],"561":[20,18,20,19],"569":[20,21,20,22],"577":[20,25,20,30],"585":[20,25,20,37],"601":[20,39,20,40],"609":[20,39,20,42],"625":[21,13,21,18],"633":[21,19,21,20],"641":[21,24,21,33],"649":[21,34,21,35],"657":[21,38,21,39],"665":[21,24,21,40],"673":[21,13,21,40],"681":[21,13,21,41],"689":[24,10,24,15],"697":[24,20,24,25],"705":[24,20,24,32],"713":[25,16,25,19],"721":[25,16,25,19],"729":[25,9,25,20],"737":[28,14,28,15],"745":[28,14,28,15],"753":[28,17,28,18],"761":[28,21,28,26],"769":[28,21,28,33],"785":[28,35,28,36],"793":[28,35,28,38],"809":[29,13,29,22],"817":[29,23,29,32],"825":[29,40,29,45],"833":[29,46,29,47],"841":[29,40,29,48],"849":[29,40,29,48],"857":[29,23,29,49],"865":[29,51,29,54],"873":[29,13,29,55],"881":[30,20,30,24],"889":[30,25,30,26],"897":[30,20,30,27],"905":[30,32,30,35],"913":[30,39,30,43],"921":[30,52,30,55],"929":[30,39,30,56],"931":[30,39,30,51],"937":[30,62,30,63],"945":[30,66,30,69],"953":[30,72,30,76],"961":[30,20,30,76],"969":[30,13,30,77],"977":[33,12,33,17],"985":[33,12,33,17],"993":[33,5,33,18],"1001":[11,1,34,2],"1009":[11,1,34,2],"1017":[11,1,34,2],"1025":[11,1,34,2],"1033":[11,1,34,2],"1041":[11,1,34,2],"1049":[11,1,34,2],"1057":[11,1,34,2],"1065":[36,12,36,15],"1073":[36,12,36,23],"1081":[36,24,36,43],"1089":[36,12,36,44],"1097":[36,49,36,58],"1105":[36,63,36,68],"1113":[36,69,36,72],"1121":[36,69,36,80],"1129":[36,81,36,97],"1137":[36,69,36,98],"1145":[36,63,36,99],"1153":[36,12,36,99],"1161":[36,5,36,100],"1169":[35,1,37,2],"1177":[35,1,37,2],"1185":[35,1,37,2],"1193":[39,17,39,23],"1201":[39,17,39,23],"1209":[39,17,39,23],"1217":[40,10,40,17],"1225":[40,18,40,21],"1233":[40,10,40,22],"1241":[41,16,41,20],"1249":[41,16,41,20],"1257":[41,9,41,21],"1265":[43,9,43,18],"1273":[43,9,43,25],"1281":[43,28,43,29],"1289":[44,21,44,26],"1297":[44,27,44,36],"1305":[44,27,44,43],"1313":[44,46,44,47],"1321":[44,17,44,48],"1329":[44,17,44,48],"1337":[44,9,44,49],"1345":[45,22,45,23],"1353":[45,22,45,23],"1361":[45,22,45,23],"1369":[45,25,45,26],"1377":[45,29,45,34],"1385":[45,29,45,41],"1401":[45,43,45,44],"1409":[45,43,45,46],"1425":[46,13,46,18],"1433":[46,19,46,20],"1441":[46,24,46,33],"1449":[46,34,46,35],"1457":[46,38,46,39],"1465":[46,24,46,40],"1473":[46,13,46,40],"1481":[46,13,46,41],"1489":[49,17,49,20],"1497":[49,17,49,28],"1505":[49,29,49,43],"1513":[49,17,49,44],"1521":[49,17,49,44],"1529":[49,17,49,44],"1537":[50,12,50,18],"1545":[50,19,50,24],"1553":[50,26,50,31],"1561":[50,12,50,32],"1569":[50,12,50,32],"1577":[50,5,50,33],"1585":[38,1,51,2],"1593":[38,1,51,2],"1601":[38,1,51,2],"1609":[38,1,51,2],"1617":[38,1,51,2],"1625":[38,1,51,2],"1633":[38,1,51,2],"1641":[53,16,53,20],"1649":[53,25,53,33],"1657":[54,16,54,21],"1665":[54,16,54,21],"1673":[54,9,54,22],"1681":[56,13,56,17],"1689":[58,16,58,51],"1697":[58,16,58,51],"1705":[58,9,58,52],"1713":[57,10,57,22],"1721":[60,16,60,29],"1729":[60,16,60,29],"1737":[60,9,60,30],"1745":[59,10,59,21],"1753":[62,9,62,13],"1761":[62,14,62,15],"1769":[62,9,62,16],"1777":[62,21,62,24],"1785":[63,16,63,21],"1793":[63,24,63,28],"1801":[63,16,63,28],"1809":[63,9,63,29],"1817":[65,12,65,16],"1825":[65,25,65,28],"1833":[65,12,65,29],"1835":[65,12,65,24],"1841":[65,35,65,36],"1849":[65,39,65,43],"1857":[65,51,65,55],"1865":[65,39,65,56],"1867":[65,39,65,50],"1873":[65,59,65,63],"1881":[65,12,65,63],"1889":[65,5,65,64],"1897":[52,1,66,2],"1905":[52,1,66,2],"1913":[52,1,66,2],"1921":[68,9,68,17],"1929":[68,22,68,27],"1937":[69,16,69,21],"1945":[69,16,69,21],"1953":[69,9,69,22],"1961":[71,23,71,29],"1969":[71,36,71,39],"1977":[71,23,71,40],"1979":[71,23,71,35],"1985":[71,23,71,40],"1993":[71,23,71,40],"2001":[72,25,72,33],"2009":[72,40,72,43],"2017":[72,25,72,44],"2019":[72,25,72,39],"2025":[72,25,72,44],"2033":[72,25,72,44],"2041":[73,9,73,20],"2049":[73,9,73,27],"2057":[73,32,73,33],"2065":[73,37,73,50],"2073":[73,37,73,57],"2081":[73,62,73,63],"2089":[74,16,74,21],"2097":[74,16,74,21],"2105":[74,9,74,22],"2113":[76,9,76,22],"2121":[76,23,76,24],"2129":[76,9,76,25],"2137":[76,30,76,33],"2145":[76,37,76,50],"2153":[76,51,76,52],"2161":[76,37,76,53],"2169":[76,58,76,69],"2177":[76,70,76,71],"2185":[76,58,76,72],"2193":[77,16,77,21],"2201":[77,16,77,21],"2209":[77,9,77,22],"2217":[79,9,79,22],"2225":[79,23,79,24],"2233":[79,9,79,25],"2241":[79,33,79,34],"2249":[79,36,79,37],"2257":[79,9,79,38],"2259":[79,9,79,32],"2265":[79,43,79,47],"2273":[80,16,80,29],"2281":[80,30,80,31],"2289":[80,16,80,32],"2297":[80,16,80,39],"2305":[80,43,80,54],"2313":[80,55,80,56],"2321":[80,43,80,57],"2329":[80,43,80,64],"2337":[80,67,80,68],"2345":[80,72,80,85],"2353":[80,86,80,87],"2361":[80,72,80,88],"2369":[80,96,80,97],"2377":[80,72,80,98],"2379":[80,72,80,95],"2385":[80,103,80,114],"2393":[80,115,80,116],"2401":[80,103,80,117],"2409":[80,125,80,126],"2417":[80,129,80,142],"2425":[80,143,80,144],"2433":[80,129,80,145],"2441":[80,129,80,152],"2449":[80,103,80,153],"2451":[80,103,80,124],"2457":[80,16,80,153],"2465":[80,9,80,154],"2473":[82,9,82,22],"2481":[82,23,82,24],"2489":[82,9,82,25],"2497":[82,30,82,33],"2505":[82,37,82,50],"2513":[82,51,82,52],"2521":[82,37,82,53],"2529":[82,58,82,69],"2537":[82,70,82,71],"2545":[82,58,82,72],"2553":[83,16,83,21],"2561":[83,16,83,21],"2569":[83,9,83,22],"2577":[85,12,85,16],"2585":[85,12,85,16],"2593":[85,5,85,17],"2601":[67,1,86,2],"2609":[67,1,86,2],"2617":[67,1,86,2],"2625":[67,1,86,2],"2633":[67,1,86,2],"2641":[67,1,86,2],"2649":[88,16,88,21],"2657":[88,28,88,33],"2665":[88,16,88,34],"2667":[88,16,88,27],"2673":[88,16,88,34],"2681":[88,16,88,34],"2689":[89,5,89,9],"2697":[89,23,89,32],"2705":[89,5,89,32],"2713":[89,5,89,33],"2721":[90,12,90,17],"2729":[90,25,90,29],"2737":[90,12,90,30],"2739":[90,12,90,24],"2745":[90,12,90,30],"2753":[90,5,90,31],"2761":[87,1,91,2],"2769":[87,1,91,2],"2777":[87,1,91,2],"2785":[87,1,91,2],"2793":[94,16,94,29],"2801":[94,30,94,35],"2809":[94,16,94,36],"2817":[94,16,94,36],"2825":[94,9,94,37],"2833":[96,16,96,20],"2841":[96,16,96,20],"2849":[96,9,96,21],"2857":[95,7,97,6],"2865":[92,1,98,2],"2873":[92,1,98,2],"2881":[92,1,98,2],"2889":[1,1,98,2],"2897":[1,1,98,2],"2905":[1,1,98,2],"2913":[1,1,98,2],"2921":[1,1,98,2],"2929":[11,1,34,2],"2937":[1,1,98,2],"2945":[35,1,37,2],"2953":[1,1,98,2],"2961":[38,1,51,2],"2969":[1,1,98,2],"2977":[52,1,66,2],"2985":[1,1,98,2],"2993":[67,1,86,2],"3001":[1,1,98,2],"3009":[87,1,91,2],"3017":[1,1,98,2],"3025":[92,1,98,2],"3033":[1,1,98,2],"3041":[15,5,17,6],"3049":[20,9,22,10],"3057":[20,9,22,10],"3065":[20,9,22,10],"3073":[18,5,23,6],"3081":[24,5,26,6],"3089":[30,20,30,76],"3097":[29,9,31,10],"3105":[28,5,32,6],"3113":[28,5,32,6],"3121":[28,5,32,6],"3129":[11,1,34,2],"3137":[11,1,34,2],"3145":[35,1,37,2],"3153":[35,1,37,2],"3161":[40,5,42,6],"3169":[45,9,47,10],"3177":[45,9,47,10],"3185":[43,5,48,6],"3193":[38,1,51,2],"3201":[38,1,51,2],"3209":[53,5,55,6],"3217":[56,13,56,17],"3225":[57,10,57,22],"3233":[59,10,59,21],"3241":[62,5,64,6],"3249":[65,12,65,63],"3257":[52,1,66,2],"3265":[52,1,66,2],"3273":[68,5,70,6],"3281":[73,5,75,6],"3289":[76,5,78,6],"3297":[79,5,81,6],"3305":[82,5,84,6],"3313":[67,1,86,2],"3321":[67,1,86,2],"3329":[87,1,91,2],"3337":[87,1,91,2],"3345":[92,1,98,2],"3353":[92,1,98,2],"3361":[1,1,98,2],"3369":[1,1,98,2],"nBranches":58,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/type-is/index.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/type-is/index_jalangi_.js","code":"/*!\n * type-is\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar typer = require('media-typer')\nvar mime = require('mime-types')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = typeofrequest\nmodule.exports.is = typeis\nmodule.exports.hasBody = hasbody\nmodule.exports.normalize = normalize\nmodule.exports.match = mimeMatch\n\n/**\n * Compare a `value` content-type with `types`.\n * Each `type` can be an extension like `html`,\n * a special shortcut like `multipart` or `urlencoded`,\n * or a mime type.\n *\n * If no types match, `false` is returned.\n * Otherwise, the first `type` that matches is returned.\n *\n * @param {String} value\n * @param {Array} types\n * @public\n */\n\nfunction typeis (value, types_) {\n  var i\n  var types = types_\n\n  // remove parameters and normalize\n  var val = tryNormalizeType(value)\n\n  // no type or invalid\n  if (!val) {\n    return false\n  }\n\n  // support flattened arguments\n  if (types && !Array.isArray(types)) {\n    types = new Array(arguments.length - 1)\n    for (i = 0; i < types.length; i++) {\n      types[i] = arguments[i + 1]\n    }\n  }\n\n  // no types, return the content type\n  if (!types || !types.length) {\n    return val\n  }\n\n  var type\n  for (i = 0; i < types.length; i++) {\n    if (mimeMatch(normalize(type = types[i]), val)) {\n      return type[0] === '+' || type.indexOf('*') !== -1\n        ? val\n        : type\n    }\n  }\n\n  // no matches\n  return false\n}\n\n/**\n * Check if a request has a request body.\n * A request with a body __must__ either have `transfer-encoding`\n * or `content-length` headers set.\n * http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3\n *\n * @param {Object} request\n * @return {Boolean}\n * @public\n */\n\nfunction hasbody (req) {\n  return req.headers['transfer-encoding'] !== undefined ||\n    !isNaN(req.headers['content-length'])\n}\n\n/**\n * Check if the incoming request contains the \"Content-Type\"\n * header field, and it contains any of the give mime `type`s.\n * If there is no request body, `null` is returned.\n * If there is no content type, `false` is returned.\n * Otherwise, it returns the first `type` that matches.\n *\n * Examples:\n *\n *     // With Content-Type: text/html; charset=utf-8\n *     this.is('html'); // => 'html'\n *     this.is('text/html'); // => 'text/html'\n *     this.is('text/*', 'application/json'); // => 'text/html'\n *\n *     // When Content-Type is application/json\n *     this.is('json', 'urlencoded'); // => 'json'\n *     this.is('application/json'); // => 'application/json'\n *     this.is('html', 'application/*'); // => 'application/json'\n *\n *     this.is('html'); // => false\n *\n * @param {String|Array} types...\n * @return {String|false|null}\n * @public\n */\n\nfunction typeofrequest (req, types_) {\n  var types = types_\n\n  // no body\n  if (!hasbody(req)) {\n    return null\n  }\n\n  // support flattened arguments\n  if (arguments.length > 2) {\n    types = new Array(arguments.length - 1)\n    for (var i = 0; i < types.length; i++) {\n      types[i] = arguments[i + 1]\n    }\n  }\n\n  // request content type\n  var value = req.headers['content-type']\n\n  return typeis(value, types)\n}\n\n/**\n * Normalize a mime type.\n * If it's a shorthand, expand it to a valid mime type.\n *\n * In general, you probably want:\n *\n *   var type = is(req, ['urlencoded', 'json', 'multipart']);\n *\n * Then use the appropriate body parsers.\n * These three are the most common request body types\n * and are thus ensured to work.\n *\n * @param {String} type\n * @private\n */\n\nfunction normalize (type) {\n  if (typeof type !== 'string') {\n    // invalid type\n    return false\n  }\n\n  switch (type) {\n    case 'urlencoded':\n      return 'application/x-www-form-urlencoded'\n    case 'multipart':\n      return 'multipart/*'\n  }\n\n  if (type[0] === '+') {\n    // \"+json\" -> \"*/*+json\" expando\n    return '*/*' + type\n  }\n\n  return type.indexOf('/') === -1\n    ? mime.lookup(type)\n    : type\n}\n\n/**\n * Check if `expected` mime type\n * matches `actual` mime type with\n * wildcard and +suffix support.\n *\n * @param {String} expected\n * @param {String} actual\n * @return {Boolean}\n * @private\n */\n\nfunction mimeMatch (expected, actual) {\n  // invalid type\n  if (expected === false) {\n    return false\n  }\n\n  // split types\n  var actualParts = actual.split('/')\n  var expectedParts = expected.split('/')\n\n  // invalid format\n  if (actualParts.length !== 2 || expectedParts.length !== 2) {\n    return false\n  }\n\n  // validate type\n  if (expectedParts[0] !== '*' && expectedParts[0] !== actualParts[0]) {\n    return false\n  }\n\n  // validate suffix wildcard\n  if (expectedParts[1].substr(0, 2) === '*+') {\n    return expectedParts[1].length <= actualParts[1].length + 1 &&\n      expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length)\n  }\n\n  // validate subtype\n  if (expectedParts[1] !== '*' && expectedParts[1] !== actualParts[1]) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Normalize a type and remove parameters.\n *\n * @param {string} value\n * @return {string}\n * @private\n */\n\nfunction normalizeType (value) {\n  // parse the type\n  var type = typer.parse(value)\n\n  // remove the parameters\n  type.parameters = undefined\n\n  // reformat it\n  return typer.format(type)\n}\n\n/**\n * Try to normalize a type and remove parameters.\n *\n * @param {string} value\n * @return {string}\n * @private\n */\n\nfunction tryNormalizeType (value) {\n  try {\n    return normalizeType(value)\n  } catch (err) {\n    return null\n  }\n}\n"}