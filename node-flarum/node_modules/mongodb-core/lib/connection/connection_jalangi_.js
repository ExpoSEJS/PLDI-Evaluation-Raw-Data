J$.iids = {"8":[25,20,25,33],"9":[1,20,1,27],"10":[26,15,26,20],"16":[28,9,28,22],"17":[1,28,1,32],"24":[33,31,33,81],"25":[1,20,1,33],"26":[26,15,26,20],"32":[34,9,34,30],"33":[1,20,1,33],"34":[28,9,28,22],"40":[36,17,36,38],"41":[1,20,1,33],"42":[33,61,33,72],"48":[37,17,37,44],"49":[2,26,2,38],"50":[33,61,33,77],"56":[38,22,38,59],"57":[2,26,2,45],"58":[33,61,33,81],"64":[39,34,39,68],"65":[2,26,2,45],"66":[38,22,38,46],"72":[40,20,40,55],"73":[2,26,2,45],"74":[38,22,38,59],"80":[41,30,41,60],"81":[3,1,3,13],"82":[40,20,40,42],"88":[42,26,42,52],"89":[3,1,3,14],"90":[40,20,40,55],"96":[45,37,45,89],"97":[4,16,4,23],"98":[44,51,44,53],"104":[46,34,46,63],"105":[4,24,4,30],"106":[44,25,44,53],"112":[47,15,47,33],"113":[4,16,4,31],"114":[45,37,45,76],"120":[48,17,48,37],"121":[4,16,4,40],"122":[45,37,45,89],"128":[49,16,49,35],"129":[4,57,4,64],"130":[51,16,51,34],"136":[50,23,50,49],"137":[4,65,4,73],"138":[51,16,51,47],"144":[51,16,51,47],"145":[4,57,4,74],"146":[52,31,52,64],"152":[52,31,52,77],"153":[4,57,4,87],"154":[52,31,52,77],"160":[53,32,53,131],"161":[4,95,4,102],"162":[53,32,53,66],"168":[53,32,53,131],"169":[4,103,4,108],"170":[53,32,53,79],"176":[54,9,54,18],"177":[4,95,4,109],"178":[53,83,53,117],"184":[56,44,56,84],"185":[4,117,4,124],"186":[53,83,53,131],"192":[65,13,65,34],"193":[4,125,4,130],"194":[54,9,54,18],"200":[67,13,67,47],"201":[4,117,4,131],"202":[56,44,56,71],"208":[73,13,73,34],"209":[4,137,4,144],"210":[56,44,56,84],"216":[80,13,80,34],"217":[4,145,4,151],"218":[67,13,67,47],"224":[82,13,82,22],"225":[4,137,4,152],"226":[82,13,82,22],"232":[90,17,90,61],"233":[4,137,4,159],"234":[89,16,89,31],"240":[92,21,92,55],"241":[4,181,4,188],"242":[90,17,90,35],"248":[121,21,121,74],"249":[4,189,4,198],"250":[90,39,90,61],"256":[122,25,122,65],"257":[4,181,4,199],"258":[91,44,91,79],"264":[140,29,140,89],"265":[4,181,4,217],"266":[92,21,92,55],"272":[140,29,140,89],"273":[4,234,4,241],"274":[94,38,94,66],"280":[154,29,154,89],"281":[4,242,4,251],"282":[121,21,121,44],"288":[154,29,154,120],"289":[4,234,4,252],"290":[121,48,121,74],"296":[161,36,161,96],"297":[4,234,4,265],"298":[122,25,122,61],"304":[161,36,161,128],"305":[4,278,4,285],"306":[122,25,122,65],"312":[183,36,183,97],"313":[4,286,4,298],"314":[123,50,123,86],"320":[183,36,183,97],"321":[4,278,4,299],"322":[132,56,132,92],"328":[161,36,161,128],"329":[4,278,4,308],"330":[138,25,138,40],"336":[154,29,154,120],"337":[4,323,4,330],"338":[139,55,139,67],"344":[138,25,138,40],"345":[4,331,4,341],"346":[139,45,139,67],"352":[121,21,121,74],"353":[4,323,4,342],"354":[139,70,139,83],"360":[90,17,90,61],"361":[4,353,4,360],"362":[139,45,139,83],"368":[89,16,89,31],"369":[4,361,4,371],"370":[139,86,139,99],"376":[222,16,222,30],"377":[4,353,4,372],"378":[139,45,139,99],"384":[223,9,223,50],"385":[4,16,4,40],"386":[140,29,140,46],"392":[226,23,226,40],"393":[4,16,4,40],"394":[140,50,140,89],"400":[235,13,235,20],"401":[4,57,4,87],"402":[154,29,154,46],"408":[237,13,237,22],"409":[4,57,4,87],"410":[154,50,154,89],"416":[239,13,239,21],"417":[4,95,4,109],"418":[154,93,154,120],"424":[241,13,241,28],"425":[4,95,4,109],"426":[161,36,161,53],"432":[247,20,247,65],"433":[4,117,4,131],"434":[161,57,161,96],"440":[243,13,243,46],"441":[4,117,4,131],"442":[161,100,161,128],"448":[251,17,251,78],"449":[4,137,4,159],"450":[183,36,183,54],"456":[251,17,251,78],"457":[4,137,4,159],"458":[183,58,183,97],"464":[230,9,230,17],"465":[4,181,4,217],"466":[223,9,223,37],"472":[270,9,270,24],"473":[4,181,4,217],"474":[223,9,223,50],"480":[281,29,281,46],"481":[4,234,4,265],"482":[243,13,243,46],"488":[278,13,278,35],"489":[4,234,4,265],"490":[247,20,247,51],"496":[277,9,277,30],"497":[4,278,4,308],"498":[247,20,247,65],"504":[285,9,285,31],"505":[4,278,4,308],"506":[278,13,278,35],"512":[287,21,287,38],"513":[4,323,4,342],"514":[281,29,281,46],"520":[301,9,301,23],"521":[4,323,4,342],"522":[281,48,281,51],"528":[303,12,303,66],"529":[4,353,4,372],"537":[4,353,4,372],"538":[281,48,281,51],"545":[5,11,5,12],"546":[285,9,285,31],"553":[5,11,5,12],"554":[287,21,287,38],"561":[5,11,5,12],"562":[287,40,287,43],"569":[7,5,7,11],"577":[8,5,8,11],"578":[287,40,287,43],"585":[9,5,9,11],"586":[291,12,291,24],"593":[10,5,10,16],"594":[303,12,303,38],"601":[11,5,11,28],"609":[12,5,12,14],"617":[13,5,13,24],"625":[14,5,14,20],"633":[15,5,15,31],"641":[16,5,16,10],"649":[17,5,17,9],"657":[18,5,18,11],"665":[19,5,19,25],"673":[20,5,20,19],"681":[21,5,21,26],"689":[6,19,22,2],"697":[6,19,22,2],"705":[6,19,22,2],"713":[24,5,24,17],"721":[24,23,24,27],"729":[24,5,24,28],"731":[24,5,24,22],"737":[24,5,24,29],"745":[25,5,25,9],"753":[25,20,25,27],"761":[25,31,25,33],"769":[25,5,25,33],"777":[25,5,25,34],"785":[26,5,26,9],"801":[26,15,26,18],"809":[26,15,26,20],"825":[26,5,26,20],"833":[26,5,26,21],"841":[27,5,27,9],"849":[27,19,27,25],"857":[27,26,27,38],"865":[27,40,27,47],"873":[27,19,27,48],"881":[27,5,27,48],"889":[27,5,27,49],"897":[28,10,28,17],"905":[28,10,28,22],"913":[29,19,29,24],"921":[29,25,29,57],"929":[29,15,29,58],"937":[29,15,29,58],"945":[29,9,29,59],"953":[30,5,30,9],"961":[30,17,30,24],"969":[30,17,30,29],"977":[30,5,30,29],"985":[30,5,30,30],"993":[31,5,31,9],"1001":[31,16,31,23],"1009":[31,16,31,27],"1017":[31,5,31,27],"1025":[31,5,31,28],"1033":[32,5,32,9],"1041":[32,27,32,34],"1049":[32,27,32,49],"1057":[32,5,32,49],"1065":[32,5,32,50],"1073":[33,5,33,9],"1081":[33,31,33,38],"1089":[33,31,33,57],"1097":[33,61,33,65],"1105":[33,68,33,72],"1113":[33,75,33,77],"1121":[33,80,33,81],"1129":[33,5,33,81],"1137":[33,5,33,82],"1145":[34,9,34,13],"1153":[34,9,34,20],"1161":[34,9,34,30],"1163":[34,9,34,28],"1169":[35,9,35,13],"1177":[35,9,35,20],"1185":[35,27,35,28],"1193":[35,29,35,71],"1201":[35,73,35,77],"1209":[35,73,35,80],"1217":[35,82,35,86],"1225":[35,97,35,109],"1233":[35,110,35,121],"1241":[35,123,35,130],"1249":[35,97,35,131],"1257":[35,82,35,132],"1259":[35,82,35,96],"1265":[35,27,35,133],"1273":[35,9,35,134],"1275":[35,9,35,26],"1281":[35,9,35,135],"1289":[36,5,36,9],"1297":[36,17,36,24],"1305":[36,17,36,29],"1313":[36,33,36,38],"1321":[36,5,36,38],"1329":[36,5,36,39],"1337":[37,5,37,9],"1345":[37,17,37,24],"1353":[37,17,37,29],"1361":[37,33,37,44],"1369":[37,5,37,44],"1377":[37,5,37,45],"1385":[38,5,38,9],"1393":[38,29,38,36],"1401":[38,29,38,46],"1409":[38,50,38,59],"1417":[38,62,38,69],"1425":[38,62,38,79],"1433":[38,82,38,86],"1441":[38,5,38,86],"1449":[38,5,38,87],"1457":[39,5,39,9],"1465":[39,34,39,41],"1473":[39,34,39,63],"1481":[39,67,39,68],"1489":[39,5,39,68],"1497":[39,5,39,69],"1505":[40,5,40,9],"1513":[40,27,40,34],"1521":[40,27,40,42],"1529":[40,46,40,55],"1537":[40,58,40,65],"1545":[40,58,40,73],"1553":[40,76,40,80],"1561":[40,5,40,80],"1569":[40,5,40,81],"1577":[41,5,41,9],"1585":[41,30,41,37],"1593":[41,30,41,55],"1601":[41,59,41,60],"1609":[41,5,41,60],"1617":[41,5,41,61],"1625":[42,5,42,9],"1633":[42,26,42,33],"1641":[42,26,42,47],"1649":[42,51,42,52],"1657":[42,5,42,52],"1665":[42,5,42,53],"1673":[43,5,43,9],"1681":[43,22,43,27],"1689":[43,5,43,27],"1697":[43,5,43,28],"1705":[44,5,44,9],"1713":[44,25,44,29],"1721":[44,25,44,34],"1729":[44,43,44,46],"1737":[44,25,44,47],"1739":[44,25,44,42],"1745":[44,52,44,53],"1753":[44,5,44,53],"1761":[44,5,44,54],"1769":[45,5,45,9],"1777":[45,44,45,51],"1785":[45,44,45,76],"1793":[45,80,45,89],"1801":[45,92,45,99],"1809":[45,92,45,124],"1817":[45,127,45,131],"1825":[45,5,45,131],"1833":[45,5,45,132],"1841":[46,5,46,9],"1849":[46,34,46,38],"1857":[46,34,46,63],"1865":[46,66,46,80],"1873":[46,83,46,90],"1881":[46,5,46,90],"1889":[46,5,46,91],"1897":[47,5,47,9],"1905":[47,15,47,22],"1913":[47,15,47,25],"1921":[47,29,47,33],"1929":[47,5,47,33],"1937":[47,5,47,34],"1945":[48,5,48,9],"1953":[48,17,48,24],"1961":[48,17,48,29],"1969":[48,33,48,37],"1977":[48,5,48,37],"1985":[48,5,48,38],"1993":[49,5,49,9],"2001":[49,16,49,23],"2009":[49,16,49,27],"2017":[49,31,49,35],"2025":[49,5,49,35],"2033":[49,5,49,36],"2041":[50,5,50,9],"2049":[50,23,50,30],"2057":[50,23,50,41],"2065":[50,45,50,49],"2073":[50,5,50,49],"2081":[50,5,50,50],"2089":[51,5,51,9],"2097":[51,23,51,30],"2105":[51,23,51,34],"2113":[51,38,51,47],"2121":[51,50,51,57],"2129":[51,50,51,61],"2137":[51,64,51,69],"2145":[51,5,51,69],"2153":[51,5,51,70],"2161":[52,5,52,9],"2169":[52,38,52,45],"2177":[52,38,52,64],"2185":[52,68,52,77],"2193":[52,80,52,87],"2201":[52,80,52,106],"2209":[52,109,52,113],"2217":[52,5,52,113],"2225":[52,5,52,114],"2233":[53,5,53,9],"2241":[53,39,53,46],"2249":[53,39,53,66],"2257":[53,70,53,79],"2265":[53,90,53,97],"2273":[53,90,53,117],"2281":[53,121,53,131],"2289":[53,134,53,141],"2297":[53,134,53,161],"2305":[53,164,53,168],"2313":[53,5,53,168],"2321":[53,5,53,169],"2329":[54,10,54,14],"2337":[54,10,54,18],"2345":[55,9,55,13],"2353":[55,35,55,40],"2361":[55,9,55,40],"2369":[55,9,55,41],"2377":[56,5,56,9],"2385":[56,51,56,58],"2393":[56,51,56,71],"2401":[56,75,56,84],"2409":[56,87,56,94],"2417":[56,87,56,107],"2425":[56,110,56,114],"2433":[56,28,56,116],"2441":[56,5,56,116],"2449":[56,5,56,117],"2457":[57,5,57,9],"2465":[57,21,57,26],"2473":[57,5,57,26],"2481":[57,5,57,27],"2489":[58,5,58,9],"2497":[58,18,58,20],"2505":[58,5,58,20],"2513":[58,5,58,21],"2521":[59,5,59,9],"2529":[59,23,59,27],"2537":[59,5,59,27],"2545":[59,5,59,28],"2553":[60,5,60,9],"2561":[60,24,60,28],"2569":[60,5,60,28],"2577":[60,5,60,29],"2585":[23,18,61,2],"2593":[23,18,61,2],"2601":[23,18,61,2],"2609":[23,18,61,2],"2617":[23,18,61,2],"2625":[23,18,61,2],"2633":[62,1,62,9],"2641":[62,10,62,20],"2649":[62,22,62,34],"2657":[62,1,62,35],"2665":[62,1,62,36],"2673":[65,13,65,17],"2681":[65,13,65,24],"2689":[65,13,65,34],"2691":[65,13,65,32],"2697":[66,13,66,17],"2705":[66,13,66,24],"2713":[66,31,66,32],"2721":[66,33,66,82],"2729":[66,84,66,88],"2737":[66,84,66,91],"2745":[66,93,66,97],"2753":[66,93,66,102],"2761":[66,104,66,108],"2769":[66,104,66,113],"2777":[66,115,66,119],"2785":[66,130,66,133],"2793":[66,115,66,134],"2795":[66,115,66,129],"2801":[66,31,66,135],"2809":[66,13,66,136],"2811":[66,13,66,30],"2817":[66,13,66,137],"2825":[67,13,67,17],"2833":[67,28,67,35],"2841":[67,13,67,36],"2843":[67,13,67,27],"2849":[67,13,67,43],"2857":[67,46,67,47],"2865":[68,13,68,17],"2873":[68,23,68,30],"2881":[68,32,68,42],"2889":[68,50,68,53],"2897":[68,32,68,54],"2899":[68,32,68,49],"2905":[68,56,68,60],"2913":[68,13,68,61],"2915":[68,13,68,22],"2921":[68,13,68,62],"2929":[64,12,69,6],"2937":[64,12,69,6],"2945":[64,12,69,6],"2953":[64,12,69,6],"2961":[64,12,69,6],"2969":[64,5,69,7],"2977":[63,20,70,2],"2985":[63,20,70,2],"2993":[63,20,70,2],"3001":[63,20,70,2],"3009":[63,20,70,2],"3017":[63,20,70,2],"3025":[73,13,73,17],"3033":[73,13,73,24],"3041":[73,13,73,34],"3043":[73,13,73,32],"3049":[74,13,74,17],"3057":[74,13,74,24],"3065":[74,31,74,32],"3073":[74,33,74,70],"3081":[74,72,74,76],"3089":[74,72,74,79],"3097":[74,81,74,85],"3105":[74,81,74,90],"3113":[74,92,74,96],"3121":[74,92,74,101],"3129":[74,31,74,102],"3137":[74,13,74,103],"3139":[74,13,74,30],"3145":[74,13,74,104],"3153":[75,9,75,13],"3161":[75,19,75,28],"3169":[75,30,75,40],"3177":[75,48,75,49],"3185":[75,50,75,84],"3193":[75,86,75,90],"3201":[75,86,75,93],"3209":[75,95,75,99],"3217":[75,95,75,104],"3225":[75,106,75,110],"3233":[75,106,75,115],"3241":[75,48,75,116],"3249":[75,30,75,117],"3251":[75,30,75,47],"3257":[75,119,75,123],"3265":[75,9,75,124],"3267":[75,9,75,18],"3273":[75,9,75,125],"3281":[72,12,76,6],"3289":[72,12,76,6],"3297":[72,12,76,6],"3305":[72,12,76,6],"3313":[72,5,76,7],"3321":[71,22,77,2],"3329":[71,22,77,2],"3337":[71,22,77,2],"3345":[71,22,77,2],"3353":[71,22,77,2],"3361":[71,22,77,2],"3369":[80,13,80,17],"3377":[80,13,80,24],"3385":[80,13,80,34],"3387":[80,13,80,32],"3393":[81,13,81,17],"3401":[81,13,81,24],"3409":[81,31,81,32],"3417":[81,33,81,72],"3425":[81,74,81,78],"3433":[81,74,81,81],"3441":[81,83,81,87],"3449":[81,83,81,92],"3457":[81,94,81,98],"3465":[81,94,81,103],"3473":[81,31,81,104],"3481":[81,13,81,105],"3483":[81,13,81,30],"3489":[81,13,81,106],"3497":[82,14,82,22],"3505":[83,13,83,17],"3513":[83,23,83,30],"3521":[83,32,83,42],"3529":[83,50,83,51],"3537":[83,52,83,83],"3545":[83,85,83,89],"3553":[83,85,83,92],"3561":[83,94,83,98],"3569":[83,94,83,103],"3577":[83,105,83,109],"3585":[83,105,83,114],"3593":[83,50,83,115],"3601":[83,32,83,116],"3603":[83,32,83,49],"3609":[83,118,83,122],"3617":[83,13,83,123],"3619":[83,13,83,22],"3625":[83,13,83,124],"3633":[79,12,85,6],"3641":[79,12,85,6],"3649":[79,12,85,6],"3657":[79,12,85,6],"3665":[79,12,85,6],"3673":[79,5,85,7],"3681":[78,20,86,2],"3689":[78,20,86,2],"3697":[78,20,86,2],"3705":[78,20,86,2],"3713":[78,20,86,2],"3721":[78,20,86,2],"3729":[89,16,89,20],"3737":[89,16,89,27],"3745":[89,30,89,31],"3753":[90,17,90,21],"3761":[90,17,90,31],"3769":[90,34,90,35],"3777":[90,39,90,43],"3785":[90,39,90,57],"3793":[90,60,90,61],"3801":[91,44,91,48],"3809":[91,44,91,62],"3817":[91,65,91,69],"3825":[91,65,91,79],"3833":[91,44,91,79],"3841":[91,44,91,79],"3849":[92,21,92,41],"3857":[92,44,92,48],"3865":[92,44,92,55],"3873":[93,21,93,25],"3881":[93,31,93,35],"3889":[93,31,93,42],"3897":[93,44,93,48],"3905":[93,44,93,58],"3913":[93,21,93,59],"3915":[93,21,93,30],"3921":[93,21,93,60],"3929":[94,21,94,25],"3937":[94,38,94,42],"3945":[94,38,94,52],"3953":[94,55,94,59],"3961":[94,55,94,66],"3969":[94,21,94,66],"3977":[94,21,94,67],"3985":[95,32,95,38],"3993":[95,39,95,40],"4001":[95,28,95,41],"4009":[95,28,95,41],"4017":[95,21,95,42],"4025":[97,21,97,25],"4033":[97,31,97,35],"4041":[97,31,97,42],"4049":[97,44,97,48],"4057":[97,44,97,58],"4065":[97,60,97,61],"4073":[97,63,97,83],"4081":[97,21,97,84],"4083":[97,21,97,30],"4089":[97,21,97,85],"4097":[98,28,98,32],"4105":[98,39,98,59],"4113":[98,28,98,60],"4115":[98,28,98,38],"4121":[98,28,98,60],"4129":[98,21,98,61],"4137":[100,42,100,46],"4145":[100,42,100,53],"4153":[100,42,100,53],"4161":[100,42,100,53],"4169":[101,25,101,29],"4177":[101,39,101,43],"4185":[101,25,101,43],"4193":[101,25,101,44],"4201":[102,25,102,29],"4209":[102,46,102,47],"4217":[102,25,102,47],"4225":[102,25,102,48],"4233":[103,25,103,29],"4241":[103,42,103,43],"4249":[103,25,103,43],"4257":[103,25,103,44],"4265":[104,25,104,29],"4273":[104,43,104,47],"4281":[104,25,104,47],"4289":[104,25,104,48],"4297":[105,25,105,29],"4305":[105,49,105,57],"4313":[105,58,105,62],"4321":[105,58,105,67],"4329":[105,69,105,79],"4337":[105,81,105,85],"4345":[105,81,105,101],"4353":[105,45,105,102],"4361":[105,104,105,108],"4369":[105,25,105,109],"4371":[105,25,105,44],"4377":[105,25,105,110],"4385":[108,34,108,49],"4393":[109,36,109,39],"4401":[110,34,110,38],"4409":[110,34,110,45],"4417":[112,48,112,52],"4425":[112,48,112,66],"4433":[113,44,113,48],"4441":[113,44,113,58],"4449":[114,45,114,49],"4457":[114,45,114,60],"4465":[111,41,115,30],"4473":[107,43,116,26],"4481":[107,43,116,26],"4489":[107,43,116,26],"4497":[117,25,117,29],"4505":[117,35,117,47],"4513":[117,49,117,60],"4521":[117,62,117,66],"4529":[117,25,117,67],"4531":[117,25,117,34],"4537":[117,25,117,68],"4545":[106,23,118,22],"4553":[121,21,121,25],"4561":[121,21,121,36],"4569":[121,40,121,44],"4577":[121,48,121,52],"4585":[121,48,121,63],"4593":[121,48,121,70],"4601":[121,73,121,74],"4609":[122,25,122,29],"4617":[122,25,122,40],"4625":[122,25,122,47],"4633":[122,50,122,54],"4641":[122,50,122,61],"4649":[122,64,122,65],"4657":[123,43,123,49],"4665":[123,50,123,54],"4673":[123,50,123,65],"4681":[123,50,123,72],"4689":[123,75,123,79],"4697":[123,75,123,86],"4705":[123,39,123,87],"4713":[123,39,123,87],"4721":[123,39,123,87],"4729":[124,25,124,29],"4737":[124,25,124,40],"4745":[124,46,124,53],"4753":[124,55,124,56],"4761":[124,25,124,57],"4763":[124,25,124,45],"4769":[124,25,124,58],"4777":[125,25,125,29],"4785":[125,35,125,42],"4793":[125,44,125,48],"4801":[125,44,125,59],"4809":[125,44,125,66],"4817":[125,25,125,67],"4819":[125,25,125,34],"4825":[125,25,125,68],"4833":[126,32,126,39],"4841":[126,32,126,39],"4849":[126,25,126,40],"4857":[127,25,127,29],"4865":[127,39,127,43],"4873":[127,25,127,43],"4881":[127,25,127,44],"4889":[128,25,128,29],"4897":[128,46,128,47],"4905":[128,25,128,47],"4913":[128,25,128,48],"4921":[129,25,129,29],"4929":[129,42,129,43],"4937":[129,25,129,43],"4945":[129,25,129,44],"4953":[130,25,130,29],"4961":[130,43,130,47],"4969":[130,25,130,47],"4977":[130,25,130,48],"4985":[132,49,132,55],"4993":[132,56,132,60],"5001":[132,56,132,71],"5009":[132,56,132,78],"5017":[132,81,132,85],"5025":[132,81,132,92],"5033":[132,45,132,93],"5041":[132,45,132,93],"5049":[132,45,132,93],"5057":[133,25,133,29],"5065":[133,25,133,40],"5073":[133,46,133,59],"5081":[133,61,133,62],"5089":[133,25,133,63],"5091":[133,25,133,45],"5097":[133,25,133,64],"5105":[134,25,134,29],"5113":[134,35,134,48],"5121":[134,50,134,54],"5129":[134,50,134,65],"5137":[134,50,134,72],"5145":[134,25,134,73],"5147":[134,25,134,34],"5153":[134,25,134,74],"5161":[135,36,135,42],"5169":[135,43,135,44],"5177":[135,32,135,45],"5185":[135,32,135,45],"5193":[135,25,135,46],"5201":[138,25,138,29],"5209":[138,25,138,36],"5217":[138,39,138,40],"5225":[139,45,139,49],"5233":[139,50,139,51],"5241":[139,45,139,52],"5249":[139,55,139,59],"5257":[139,60,139,61],"5265":[139,55,139,62],"5273":[139,66,139,67],"5281":[139,70,139,74],"5289":[139,75,139,76],"5297":[139,70,139,77],"5305":[139,81,139,83],"5313":[139,86,139,90],"5321":[139,91,139,92],"5329":[139,86,139,93],"5337":[139,97,139,99],"5345":[139,45,139,99],"5353":[139,45,139,99],"5361":[140,29,140,42],"5369":[140,45,140,46],"5377":[140,50,140,63],"5385":[140,66,140,70],"5393":[140,66,140,89],"5401":[142,38,142,53],"5409":[143,40,143,42],"5417":[144,38,144,42],"5425":[144,38,144,49],"5433":[146,52,146,65],"5441":[147,48,147,52],"5449":[147,48,147,62],"5457":[148,49,148,53],"5465":[148,49,148,64],"5473":[145,45,149,34],"5481":[141,47,150,30],"5489":[141,47,150,30],"5497":[141,47,150,30],"5505":[151,29,151,33],"5513":[151,39,151,51],"5521":[151,53,151,64],"5529":[151,66,151,70],"5537":[151,29,151,71],"5539":[151,29,151,38],"5545":[151,29,151,72],"5553":[152,29,152,36],"5561":[152,29,152,36],"5569":[154,29,154,42],"5577":[154,45,154,46],"5585":[154,50,154,63],"5593":[154,66,154,70],"5601":[154,66,154,89],"5609":[154,93,154,106],"5617":[154,109,154,113],"5625":[154,109,154,120],"5633":[155,29,155,33],"5641":[155,47,155,53],"5649":[155,54,155,67],"5657":[155,43,155,68],"5665":[155,29,155,68],"5673":[155,29,155,69],"5681":[156,29,156,33],"5689":[156,39,156,43],"5697":[156,39,156,50],"5705":[156,52,156,53],"5713":[156,29,156,54],"5715":[156,29,156,38],"5721":[156,29,156,55],"5729":[157,29,157,33],"5737":[157,46,157,50],"5745":[157,46,157,57],"5753":[157,29,157,57],"5761":[157,29,157,58],"5769":[158,29,158,33],"5777":[158,50,158,63],"5785":[158,29,158,63],"5793":[158,29,158,64],"5801":[159,29,159,33],"5809":[159,47,159,51],"5817":[159,29,159,51],"5825":[159,29,159,52],"5833":[160,40,160,46],"5841":[160,47,160,48],"5849":[160,36,160,49],"5857":[160,36,160,49],"5865":[160,29,160,50],"5873":[161,36,161,49],"5881":[161,52,161,53],"5889":[161,57,161,70],"5897":[161,73,161,77],"5905":[161,73,161,96],"5913":[161,100,161,113],"5921":[161,117,161,121],"5929":[161,117,161,128],"5937":[163,50,163,54],"5945":[163,50,163,54],"5953":[163,50,163,54],"5961":[164,33,164,37],"5969":[164,47,164,51],"5977":[164,33,164,51],"5985":[164,33,164,52],"5993":[165,33,165,37],"6001":[165,54,165,55],"6009":[165,33,165,55],"6017":[165,33,165,56],"6025":[166,33,166,37],"6033":[166,50,166,51],"6041":[166,33,166,51],"6049":[166,33,166,52],"6057":[167,33,167,37],"6065":[167,51,167,55],"6073":[167,33,167,55],"6081":[167,33,167,56],"6089":[168,44,168,50],"6097":[168,51,168,52],"6105":[168,40,168,53],"6113":[168,40,168,53],"6121":[168,33,168,54],"6129":[169,33,169,37],"6137":[169,57,169,65],"6145":[169,66,169,70],"6153":[169,66,169,75],"6161":[169,77,169,87],"6169":[169,89,169,93],"6177":[169,89,169,109],"6185":[169,53,169,110],"6193":[169,112,169,116],"6201":[169,33,169,117],"6203":[169,33,169,52],"6209":[169,33,169,118],"6217":[172,42,172,57],"6225":[173,44,173,47],"6233":[174,42,174,46],"6241":[174,42,174,53],"6249":[176,56,176,60],"6257":[176,56,176,74],"6265":[177,52,177,56],"6273":[177,52,177,66],"6281":[178,53,178,57],"6289":[178,53,178,68],"6297":[175,49,179,38],"6305":[171,51,180,34],"6313":[171,51,180,34],"6321":[171,51,180,34],"6329":[181,33,181,37],"6337":[181,43,181,55],"6345":[181,57,181,68],"6353":[181,70,181,74],"6361":[181,33,181,75],"6363":[181,33,181,42],"6369":[181,33,181,76],"6377":[170,31,182,30],"6385":[183,36,183,49],"6393":[183,53,183,54],"6401":[183,58,183,71],"6409":[183,74,183,78],"6417":[183,74,183,97],"6425":[185,38,185,53],"6433":[186,40,186,44],"6441":[187,38,187,42],"6449":[189,52,189,65],"6457":[190,48,190,49],"6465":[191,45,191,49],"6473":[192,49,192,53],"6481":[188,45,193,34],"6489":[184,47,194,30],"6497":[184,47,194,30],"6505":[184,47,194,30],"6513":[195,29,195,33],"6521":[195,39,195,51],"6529":[195,53,195,64],"6537":[195,66,195,70],"6545":[195,29,195,71],"6547":[195,29,195,38],"6553":[195,29,195,72],"6561":[196,29,196,33],"6569":[196,43,196,47],"6577":[196,29,196,47],"6585":[196,29,196,48],"6593":[197,29,197,33],"6601":[197,50,197,51],"6609":[197,29,197,51],"6617":[197,29,197,52],"6625":[198,29,198,33],"6633":[198,46,198,47],"6641":[198,29,198,47],"6649":[198,29,198,48],"6657":[199,29,199,33],"6665":[199,47,199,51],"6673":[199,29,199,51],"6681":[199,29,199,52],"6689":[200,40,200,46],"6697":[200,47,200,48],"6705":[200,36,200,49],"6713":[200,36,200,49],"6721":[200,29,200,50],"6729":[202,46,202,50],"6737":[202,57,202,58],"6745":[202,60,202,73],"6753":[202,46,202,74],"6755":[202,46,202,56],"6761":[202,46,202,74],"6769":[202,46,202,74],"6777":[203,29,203,33],"6785":[203,43,203,47],"6793":[203,29,203,47],"6801":[203,29,203,48],"6809":[204,29,204,33],"6817":[204,50,204,51],"6825":[204,29,204,51],"6833":[204,29,204,52],"6841":[205,29,205,33],"6849":[205,46,205,47],"6857":[205,29,205,47],"6865":[205,29,205,48],"6873":[206,29,206,33],"6881":[206,47,206,51],"6889":[206,29,206,51],"6897":[206,29,206,52],"6905":[207,36,207,40],"6913":[207,47,207,60],"6921":[207,36,207,61],"6923":[207,36,207,46],"6929":[207,36,207,61],"6937":[207,29,207,62],"6945":[208,29,208,33],"6953":[208,53,208,61],"6961":[208,62,208,66],"6969":[208,62,208,71],"6977":[208,73,208,83],"6985":[208,85,208,89],"6993":[208,85,208,105],"7001":[208,49,208,106],"7009":[208,108,208,112],"7017":[208,29,208,113],"7019":[208,29,208,48],"7025":[208,29,208,114],"7033":[211,25,211,29],"7041":[211,47,211,53],"7049":[211,54,211,58],"7057":[211,54,211,65],"7065":[211,43,211,66],"7073":[211,25,211,66],"7081":[211,25,211,67],"7089":[212,25,212,29],"7097":[212,35,212,39],"7105":[212,35,212,50],"7113":[212,52,212,53],"7121":[212,25,212,54],"7123":[212,25,212,34],"7129":[212,25,212,55],"7137":[213,36,213,42],"7145":[213,43,213,44],"7153":[213,32,213,45],"7161":[213,32,213,45],"7169":[213,25,213,46],"7177":[88,12,218,6],"7185":[88,12,218,6],"7193":[88,12,218,6],"7201":[88,12,218,6],"7209":[88,12,218,6],"7217":[88,12,218,6],"7225":[88,12,218,6],"7233":[88,12,218,6],"7241":[88,12,218,6],"7249":[88,12,218,6],"7257":[88,12,218,6],"7265":[88,5,218,7],"7273":[87,19,219,2],"7281":[87,19,219,2],"7289":[87,19,219,2],"7297":[87,19,219,2],"7305":[87,19,219,2],"7313":[87,19,219,2],"7321":[220,1,220,11],"7329":[220,1,220,21],"7337":[221,16,221,20],"7345":[221,16,221,20],"7353":[221,16,221,20],"7361":[222,16,222,24],"7369":[222,28,222,30],"7377":[222,16,222,30],"7385":[222,5,222,31],"7393":[223,16,223,24],"7401":[223,16,223,37],"7409":[223,41,223,50],"7417":[224,9,224,13],"7425":[224,9,224,29],"7433":[224,45,224,53],"7441":[224,45,224,66],"7449":[224,9,224,66],"7457":[224,9,224,67],"7465":[226,5,226,9],"7473":[226,23,226,27],"7481":[226,23,226,40],"7489":[226,43,226,46],"7497":[226,64,226,68],"7505":[226,64,226,73],"7513":[226,43,226,74],"7515":[226,43,226,63],"7521":[226,77,226,80],"7529":[226,98,226,102],"7537":[226,98,226,107],"7545":[226,109,226,113],"7553":[226,109,226,118],"7561":[226,77,226,119],"7563":[226,77,226,97],"7569":[226,5,226,119],"7577":[226,5,226,120],"7585":[227,5,227,9],"7593":[227,5,227,20],"7601":[227,34,227,38],"7609":[227,34,227,48],"7617":[227,50,227,54],"7625":[227,50,227,76],"7633":[227,5,227,77],"7635":[227,5,227,33],"7641":[227,5,227,78],"7649":[228,5,228,9],"7657":[228,5,228,20],"7665":[228,32,228,36],"7673":[228,32,228,54],"7681":[228,5,228,55],"7683":[228,5,228,31],"7689":[228,5,228,56],"7697":[229,5,229,9],"7705":[229,5,229,20],"7713":[229,32,229,36],"7721":[229,32,229,44],"7729":[229,5,229,45],"7731":[229,5,229,31],"7737":[229,5,229,46],"7745":[230,9,230,13],"7753":[230,9,230,17],"7761":[232,21,232,25],"7769":[232,21,232,36],"7777":[233,33,233,37],"7785":[233,33,233,56],"7793":[231,26,234,10],"7801":[231,26,234,10],"7809":[231,26,234,10],"7817":[235,13,235,17],"7825":[235,13,235,20],"7833":[236,13,236,23],"7841":[236,29,236,33],"7849":[236,29,236,36],"7857":[236,13,236,36],"7865":[236,13,236,37],"7873":[237,13,237,17],"7881":[237,13,237,22],"7889":[238,13,238,23],"7897":[238,31,238,35],"7905":[238,31,238,40],"7913":[238,13,238,40],"7921":[238,13,238,41],"7929":[239,13,239,17],"7937":[239,13,239,21],"7945":[240,13,240,23],"7953":[240,30,240,34],"7961":[240,30,240,38],"7969":[240,13,240,38],"7977":[240,13,240,39],"7985":[241,13,241,17],"7993":[241,13,241,28],"8001":[242,13,242,23],"8009":[242,37,242,41],"8017":[242,37,242,52],"8025":[242,13,242,52],"8033":[242,13,242,53],"8041":[243,13,243,17],"8049":[243,13,243,37],"8057":[243,41,243,46],"8065":[244,13,244,23],"8073":[245,24,245,33],"8081":[245,24,245,33],"8089":[245,17,245,34],"8097":[244,46,246,14],"8105":[244,46,246,14],"8113":[244,46,246,14],"8121":[244,46,246,14],"8129":[244,46,246,14],"8137":[244,13,246,14],"8145":[244,13,246,15],"8153":[247,27,247,31],"8161":[247,27,247,51],"8169":[247,55,247,65],"8177":[248,13,248,23],"8185":[248,46,248,50],"8193":[248,46,248,70],"8201":[248,13,248,70],"8209":[248,13,248,71],"8217":[250,9,250,13],"8225":[250,27,250,30],"8233":[250,39,250,43],"8241":[250,39,250,48],"8249":[250,50,250,54],"8257":[250,50,250,59],"8265":[250,61,250,71],"8273":[251,17,251,21],"8281":[251,17,251,32],"8289":[251,17,251,51],"8297":[251,55,251,59],"8305":[251,55,251,78],"8313":[252,24,252,28],"8321":[252,34,252,41],"8329":[252,43,252,47],"8337":[252,43,252,58],"8345":[252,43,252,77],"8353":[252,79,252,83],"8361":[252,92,252,96],"8369":[252,85,252,98],"8377":[252,24,252,99],"8379":[252,24,252,33],"8385":[252,24,252,99],"8393":[252,17,252,100],"8401":[254,13,254,17],"8409":[254,13,254,28],"8417":[254,40,254,44],"8425":[254,40,254,58],"8433":[254,13,254,59],"8435":[254,13,254,39],"8441":[254,13,254,60],"8449":[255,13,255,17],"8457":[255,23,255,32],"8465":[255,34,255,38],"8473":[255,13,255,39],"8475":[255,13,255,22],"8481":[255,13,255,40],"8489":[250,73,256,10],"8497":[250,73,256,10],"8505":[250,73,256,10],"8513":[250,27,256,11],"8515":[250,27,250,38],"8521":[250,9,256,11],"8529":[250,9,256,12],"8537":[257,9,257,13],"8545":[257,9,257,24],"8553":[257,36,257,40],"8561":[257,36,257,58],"8569":[257,9,257,59],"8571":[257,9,257,35],"8577":[257,9,257,60],"8585":[259,9,259,13],"8593":[259,9,259,24],"8601":[259,28,259,37],"8609":[260,13,260,17],"8617":[260,13,260,28],"8625":[260,40,260,44],"8633":[260,40,260,58],"8641":[260,13,260,59],"8643":[260,13,260,39],"8649":[260,13,260,60],"8657":[261,13,261,17],"8665":[261,23,261,32],"8673":[261,34,261,38],"8681":[261,13,261,39],"8683":[261,13,261,22],"8689":[261,13,261,40],"8697":[259,39,262,10],"8705":[259,39,262,10],"8713":[259,39,262,10],"8721":[259,9,262,11],"8723":[259,9,259,27],"8729":[259,9,262,12],"8737":[264,5,264,9],"8745":[264,5,264,20],"8753":[264,26,264,33],"8761":[264,35,264,47],"8769":[264,48,264,52],"8777":[264,35,264,53],"8785":[264,5,264,54],"8787":[264,5,264,25],"8793":[264,5,264,55],"8801":[265,5,265,9],"8809":[265,5,265,20],"8817":[265,26,265,35],"8825":[265,37,265,51],"8833":[265,52,265,56],"8841":[265,37,265,57],"8849":[265,5,265,58],"8851":[265,5,265,25],"8857":[265,5,265,59],"8865":[266,5,266,9],"8873":[266,5,266,20],"8881":[266,26,266,33],"8889":[266,35,266,47],"8897":[266,48,266,52],"8905":[266,35,266,53],"8913":[266,5,266,54],"8915":[266,5,266,25],"8921":[266,5,266,55],"8929":[267,5,267,9],"8937":[267,5,267,20],"8945":[267,24,267,30],"8953":[267,32,267,43],"8961":[267,44,267,48],"8969":[267,32,267,49],"8977":[267,5,267,50],"8979":[267,5,267,23],"8985":[267,5,267,51],"8993":[220,32,268,2],"9001":[220,32,268,2],"9009":[220,32,268,2],"9017":[220,32,268,2],"9025":[220,32,268,2],"9033":[220,32,268,2],"9041":[220,1,268,2],"9049":[220,1,268,3],"9057":[269,1,269,11],"9065":[269,1,269,21],"9073":[270,9,270,13],"9081":[270,9,270,24],"9089":[271,9,271,13],"9097":[271,9,271,24],"9105":[271,9,271,30],"9107":[271,9,271,28],"9113":[271,9,271,31],"9121":[272,9,272,13],"9129":[272,9,272,24],"9137":[272,9,272,34],"9139":[272,9,272,32],"9145":[272,9,272,35],"9153":[274,5,274,9],"9161":[274,22,274,26],"9169":[274,5,274,26],"9177":[274,5,274,27],"9185":[269,32,275,2],"9193":[269,32,275,2],"9201":[269,32,275,2],"9209":[269,1,275,2],"9217":[269,1,275,3],"9225":[276,1,276,11],"9233":[276,1,276,21],"9241":[277,9,277,13],"9249":[277,9,277,20],"9257":[277,9,277,30],"9259":[277,9,277,28],"9265":[278,14,278,19],"9273":[278,28,278,34],"9281":[278,14,278,35],"9283":[278,14,278,27],"9289":[279,13,279,17],"9297":[279,13,279,24],"9305":[279,31,279,32],"9313":[279,33,279,63],"9321":[279,65,279,71],"9329":[279,81,279,86],"9337":[279,65,279,87],"9339":[279,65,279,80],"9345":[279,89,279,93],"9353":[279,89,279,98],"9361":[279,100,279,104],"9369":[279,100,279,109],"9377":[279,31,279,110],"9385":[279,13,279,111],"9387":[279,13,279,30],"9393":[279,13,279,112],"9401":[281,26,281,27],"9409":[281,26,281,27],"9417":[281,26,281,27],"9425":[281,29,281,30],"9433":[281,33,281,39],"9441":[281,33,281,46],"9457":[281,48,281,49],"9465":[281,48,281,51],"9481":[282,17,282,21],"9489":[282,17,282,28],"9497":[282,35,282,36],"9505":[282,37,282,67],"9513":[282,69,282,75],"9521":[282,76,282,77],"9529":[282,69,282,78],"9537":[282,88,282,93],"9545":[282,69,282,94],"9547":[282,69,282,87],"9553":[282,96,282,100],"9561":[282,96,282,105],"9569":[282,107,282,111],"9577":[282,107,282,116],"9585":[282,35,282,117],"9593":[282,17,282,118],"9595":[282,17,282,34],"9601":[282,17,282,119],"9609":[285,10,285,15],"9617":[285,24,285,30],"9625":[285,10,285,31],"9627":[285,10,285,23],"9633":[286,16,286,20],"9641":[286,16,286,31],"9649":[286,38,286,44],"9657":[286,46,286,54],"9665":[286,16,286,55],"9667":[286,16,286,37],"9673":[286,16,286,55],"9681":[286,9,286,56],"9689":[287,18,287,19],"9697":[287,18,287,19],"9705":[287,18,287,19],"9713":[287,21,287,22],"9721":[287,25,287,31],"9729":[287,25,287,38],"9745":[287,40,287,41],"9753":[287,40,287,43],"9769":[288,9,288,13],"9777":[288,9,288,24],"9785":[288,31,288,37],"9793":[288,38,288,39],"9801":[288,31,288,40],"9809":[288,42,288,50],"9817":[288,9,288,51],"9819":[288,9,288,30],"9825":[288,9,288,52],"9833":[276,30,289,2],"9841":[276,30,289,2],"9849":[276,30,289,2],"9857":[276,30,289,2],"9865":[276,30,289,2],"9873":[276,1,289,2],"9881":[276,1,289,3],"9889":[290,1,290,11],"9897":[290,1,290,21],"9905":[291,12,291,14],"9913":[291,17,291,21],"9921":[291,17,291,24],"9929":[291,12,291,24],"9937":[291,5,291,25],"9945":[290,33,292,2],"9953":[290,33,292,2],"9961":[290,33,292,2],"9969":[290,1,292,2],"9977":[290,1,292,3],"9985":[293,1,293,11],"9993":[293,1,293,21],"10001":[295,13,295,17],"10009":[295,13,295,20],"10017":[296,15,296,19],"10025":[296,15,296,24],"10033":[297,15,297,19],"10041":[297,15,297,24],"10049":[294,12,298,6],"10057":[294,12,298,6],"10065":[294,5,298,7],"10073":[293,31,299,2],"10081":[293,31,299,2],"10089":[293,31,299,2],"10097":[293,1,299,2],"10105":[293,1,299,3],"10113":[300,1,300,11],"10121":[300,1,300,21],"10129":[301,9,301,13],"10137":[301,9,301,23],"10145":[302,16,302,21],"10153":[302,16,302,21],"10161":[302,9,302,22],"10169":[303,13,303,17],"10177":[303,13,303,28],"10185":[303,13,303,38],"10193":[303,42,303,46],"10201":[303,42,303,57],"10209":[303,42,303,66],"10217":[303,12,303,66],"10225":[303,5,303,67],"10233":[300,36,304,2],"10241":[300,36,304,2],"10249":[300,36,304,2],"10257":[300,1,304,2],"10265":[300,1,304,3],"10273":[305,1,305,7],"10281":[305,18,305,28],"10289":[305,1,305,28],"10297":[305,1,305,29],"10305":[1,1,305,29],"10313":[1,1,305,29],"10321":[1,1,305,29],"10329":[1,1,305,29],"10337":[1,1,305,29],"10345":[1,1,305,29],"10353":[1,1,305,29],"10361":[1,1,305,29],"10369":[1,1,305,29],"10377":[1,1,305,29],"10385":[1,1,305,29],"10393":[1,1,305,29],"10401":[1,1,305,29],"10409":[1,1,305,29],"10417":[1,1,305,29],"10425":[1,1,305,29],"10433":[1,1,305,29],"10441":[1,1,305,29],"10449":[1,1,305,29],"10457":[1,1,305,29],"10465":[28,5,29,59],"10473":[34,5,35,135],"10481":[38,22,38,86],"10489":[40,20,40,80],"10497":[45,37,45,131],"10505":[46,34,46,90],"10513":[51,16,51,69],"10521":[52,31,52,113],"10529":[53,32,53,168],"10537":[54,5,55,41],"10545":[56,44,56,114],"10553":[23,18,61,2],"10561":[23,18,61,2],"10569":[65,9,66,137],"10577":[67,9,68,62],"10585":[64,12,69,6],"10593":[64,12,69,6],"10601":[63,20,70,2],"10609":[63,20,70,2],"10617":[73,9,74,104],"10625":[72,12,76,6],"10633":[72,12,76,6],"10641":[71,22,77,2],"10649":[71,22,77,2],"10657":[80,9,81,106],"10665":[82,9,84,10],"10673":[79,12,85,6],"10681":[79,12,85,6],"10689":[78,20,86,2],"10697":[78,20,86,2],"10705":[92,17,119,18],"10713":[122,21,136,22],"10721":[140,25,153,26],"10729":[183,32,209,26],"10737":[161,32,209,26],"10745":[154,25,209,26],"10753":[138,21,214,22],"10761":[121,17,215,18],"10769":[90,13,216,14],"10777":[89,9,217,10],"10785":[88,12,218,6],"10793":[88,12,218,6],"10801":[87,19,219,2],"10809":[87,19,219,2],"10817":[223,5,225,6],"10825":[226,23,226,119],"10833":[235,9,236,37],"10841":[237,9,238,41],"10849":[239,9,240,39],"10857":[241,9,242,53],"10865":[244,46,246,14],"10873":[244,46,246,14],"10881":[247,16,249,10],"10889":[243,9,249,10],"10897":[251,13,253,14],"10905":[250,73,256,10],"10913":[250,73,256,10],"10921":[259,39,262,10],"10929":[259,39,262,10],"10937":[230,5,263,6],"10945":[220,32,268,2],"10953":[220,32,268,2],"10961":[270,5,273,6],"10969":[269,32,275,2],"10977":[269,32,275,2],"10985":[281,13,282,119],"10993":[281,13,282,119],"11001":[278,9,283,10],"11009":[277,5,284,6],"11017":[285,5,286,56],"11025":[287,5,288,52],"11033":[287,5,288,52],"11041":[276,30,289,2],"11049":[276,30,289,2],"11057":[290,33,292,2],"11065":[290,33,292,2],"11073":[293,31,299,2],"11081":[293,31,299,2],"11089":[301,5,302,22],"11097":[300,36,304,2],"11105":[300,36,304,2],"11113":[1,1,305,29],"11121":[1,1,305,29],"nBranches":132,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongodb-core/lib/connection/connection.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongodb-core/lib/connection/connection_jalangi_.js","code":"\"use strict\";\n\nvar inherits = require('util').inherits\n  , EventEmitter = require('events').EventEmitter\n  , net = require('net')\n  , tls = require('tls')\n  , f = require('util').format\n  , getSingleProperty = require('./utils').getSingleProperty\n  , debugOptions = require('./utils').debugOptions\n  , Response = require('./commands').Response\n  , MongoError = require('../error')\n  , Logger = require('./logger');\n\nvar _id = 0;\nvar debugFields = ['host', 'port', 'size', 'keepAlive', 'keepAliveInitialDelay', 'noDelay'\n  , 'connectionTimeout', 'socketTimeout', 'singleBufferSerializtion', 'ssl', 'ca', 'cert'\n  , 'rejectUnauthorized', 'promoteLongs', 'checkServerIdentity'];\n\n/**\n * Creates a new Connection instance\n * @class\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=0] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @fires Connection#connect\n * @fires Connection#close\n * @fires Connection#error\n * @fires Connection#timeout\n * @fires Connection#parseError\n * @return {Connection} A cursor instance\n */\nvar Connection = function(options) {\n  // Add event listener\n  EventEmitter.call(this);\n  // Set empty if no options passed\n  this.options = options || {};\n  // Identification information\n  this.id = _id++;\n  // Logger instance\n  this.logger = Logger('Connection', options);\n  // No bson parser passed in\n  if(!options.bson) throw new Error(\"must pass in valid bson parser\");\n  // Get bson parser\n  this.bson = options.bson;\n  // Grouping tag used for debugging purposes\n  this.tag = options.tag;\n  // Message handler\n  this.messageHandler = options.messageHandler;\n\n  // Max BSON message size\n  this.maxBsonMessageSize = options.maxBsonMessageSize || (1024 * 1024 * 16 * 4);\n  // Debug information\n  if(this.logger.isDebug()) this.logger.debug(f('creating connection %s with options [%s]', this.id, JSON.stringify(debugOptions(debugFields, options))));\n\n  // Default options\n  this.port = options.port || 27017;\n  this.host = options.host || 'localhost';\n  this.keepAlive = typeof options.keepAlive == 'boolean' ? options.keepAlive : true;\n  this.keepAliveInitialDelay = options.keepAliveInitialDelay || 0;\n  this.noDelay = typeof options.noDelay == 'boolean' ? options.noDelay : true;\n  this.connectionTimeout = options.connectionTimeout || 0;\n  this.socketTimeout = options.socketTimeout || 0;\n\n  // If connection was destroyed\n  this.destroyed = false;\n\n  // Check if we have a domain socket\n  this.domainSocket = this.host.indexOf('\\/') != -1;\n\n  // Serialize commands using function\n  this.singleBufferSerializtion = typeof options.singleBufferSerializtion == 'boolean' ? options.singleBufferSerializtion : true;\n  this.serializationFunction = this.singleBufferSerializtion ? 'toBinUnified' : 'toBin';\n\n  // SSL options\n  this.ca = options.ca || null;\n  this.cert = options.cert || null;\n  this.key = options.key || null;\n  this.passphrase = options.passphrase || null;\n  this.ssl = typeof options.ssl == 'boolean' ? options.ssl : false;\n  this.rejectUnauthorized = typeof options.rejectUnauthorized == 'boolean' ? options.rejectUnauthorized : true;\n  this.checkServerIdentity = typeof options.checkServerIdentity == 'boolean'\n    || typeof options.checkServerIdentity == 'function' ? options.checkServerIdentity : true;\n\n  // If ssl not enabled\n  if(!this.ssl) this.rejectUnauthorized = false;\n\n  // Response options\n  this.responseOptions = {\n    promoteLongs: typeof options.promoteLongs == 'boolean' ?  options.promoteLongs : true\n  }\n\n  // Flushing\n  this.flushing = false;\n  this.queue = [];\n\n  // Internal state\n  this.connection = null;\n  this.writeStream = null;\n}\n\ninherits(Connection, EventEmitter);\n\n//\n// Connection handlers\nvar errorHandler = function(self) {\n  return function(err) {\n    // Debug information\n    if(self.logger.isDebug()) self.logger.debug(f('connection %s for [%s:%s] errored out with [%s]', self.id, self.host, self.port, JSON.stringify(err)));\n    // Emit the error\n    if(self.listeners('error').length > 0) self.emit(\"error\", MongoError.create(err), self);\n  }\n}\n\nvar timeoutHandler = function(self) {\n  return function() {\n    // Debug information\n    if(self.logger.isDebug()) self.logger.debug(f('connection %s for [%s:%s] timed out', self.id, self.host, self.port));\n    // Emit timeout error\n    self.emit(\"timeout\"\n      , MongoError.create(f(\"connection %s to %s:%s timed out\", self.id, self.host, self.port))\n      , self);\n  }\n}\n\nvar closeHandler = function(self) {\n  return function(hadError) {\n    // Debug information\n    if(self.logger.isDebug()) self.logger.debug(f('connection %s with for [%s:%s] closed', self.id, self.host, self.port));\n    // Emit close event\n    if(!hadError) {\n      self.emit(\"close\"\n        , MongoError.create(f(\"connection %s to %s:%s closed\", self.id, self.host, self.port))\n        , self);\n    }\n  }\n}\n\nvar dataHandler = function(self) {\n  return function(data) {\n    // Parse until we are done with the data\n    while(data.length > 0) {\n      // If we still have bytes to read on the current message\n      if(self.bytesRead > 0 && self.sizeOfMessage > 0) {\n        // Calculate the amount of remaining bytes\n        var remainingBytesToRead = self.sizeOfMessage - self.bytesRead;\n        // Check if the current chunk contains the rest of the message\n        if(remainingBytesToRead > data.length) {\n          // Copy the new data into the exiting buffer (should have been allocated when we know the message size)\n          data.copy(self.buffer, self.bytesRead);\n          // Adjust the number of bytes read so it point to the correct index in the buffer\n          self.bytesRead = self.bytesRead + data.length;\n\n          // Reset state of buffer\n          data = new Buffer(0);\n        } else {\n          // Copy the missing part of the data into our current buffer\n          data.copy(self.buffer, self.bytesRead, 0, remainingBytesToRead);\n          // Slice the overflow into a new buffer that we will then re-parse\n          data = data.slice(remainingBytesToRead);\n\n          // Emit current complete message\n          try {\n            var emitBuffer = self.buffer;\n            // Reset state of buffer\n            self.buffer = null;\n            self.sizeOfMessage = 0;\n            self.bytesRead = 0;\n            self.stubBuffer = null;\n            // Emit the buffer\n            self.messageHandler(new Response(self.bson, emitBuffer, self.responseOptions), self);\n          } catch(err) {\n            var errorObject = {err:\"socketHandler\", trace:err, bin:self.buffer, parseState:{\n              sizeOfMessage:self.sizeOfMessage,\n              bytesRead:self.bytesRead,\n              stubBuffer:self.stubBuffer}};\n            // We got a parse Error fire it off then keep going\n            self.emit(\"parseError\", errorObject, self);\n          }\n        }\n      } else {\n        // Stub buffer is kept in case we don't get enough bytes to determine the\n        // size of the message (< 4 bytes)\n        if(self.stubBuffer != null && self.stubBuffer.length > 0) {\n          // If we have enough bytes to determine the message size let's do it\n          if(self.stubBuffer.length + data.length > 4) {\n            // Prepad the data\n            var newData = new Buffer(self.stubBuffer.length + data.length);\n            self.stubBuffer.copy(newData, 0);\n            data.copy(newData, self.stubBuffer.length);\n            // Reassign for parsing\n            data = newData;\n\n            // Reset state of buffer\n            self.buffer = null;\n            self.sizeOfMessage = 0;\n            self.bytesRead = 0;\n            self.stubBuffer = null;\n\n          } else {\n\n            // Add the the bytes to the stub buffer\n            var newStubBuffer = new Buffer(self.stubBuffer.length + data.length);\n            // Copy existing stub buffer\n            self.stubBuffer.copy(newStubBuffer, 0);\n            // Copy missing part of the data\n            data.copy(newStubBuffer, self.stubBuffer.length);\n            // Exit parsing loop\n            data = new Buffer(0);\n          }\n        } else {\n          if(data.length > 4) {\n            // Retrieve the message size\n            // var sizeOfMessage = data.readUInt32LE(0);\n            var sizeOfMessage = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;\n            // If we have a negative sizeOfMessage emit error and return\n            if(sizeOfMessage < 0 || sizeOfMessage > self.maxBsonMessageSize) {\n              var errorObject = {err:\"socketHandler\", trace:'', bin:self.buffer, parseState:{\n                sizeOfMessage: sizeOfMessage,\n                bytesRead: self.bytesRead,\n                stubBuffer: self.stubBuffer}};\n              // We got a parse Error fire it off then keep going\n              self.emit(\"parseError\", errorObject, self);\n              return;\n            }\n\n            // Ensure that the size of message is larger than 0 and less than the max allowed\n            if(sizeOfMessage > 4 && sizeOfMessage < self.maxBsonMessageSize && sizeOfMessage > data.length) {\n              self.buffer = new Buffer(sizeOfMessage);\n              // Copy all the data into the buffer\n              data.copy(self.buffer, 0);\n              // Update bytes read\n              self.bytesRead = data.length;\n              // Update sizeOfMessage\n              self.sizeOfMessage = sizeOfMessage;\n              // Ensure stub buffer is null\n              self.stubBuffer = null;\n              // Exit parsing loop\n              data = new Buffer(0);\n\n            } else if(sizeOfMessage > 4 && sizeOfMessage < self.maxBsonMessageSize && sizeOfMessage == data.length) {\n              try {\n                var emitBuffer = data;\n                // Reset state of buffer\n                self.buffer = null;\n                self.sizeOfMessage = 0;\n                self.bytesRead = 0;\n                self.stubBuffer = null;\n                // Exit parsing loop\n                data = new Buffer(0);\n                // Emit the message\n                self.messageHandler(new Response(self.bson, emitBuffer, self.responseOptions), self);\n              } catch (err) {\n                var errorObject = {err:\"socketHandler\", trace:err, bin:self.buffer, parseState:{\n                  sizeOfMessage:self.sizeOfMessage,\n                  bytesRead:self.bytesRead,\n                  stubBuffer:self.stubBuffer}};\n                // We got a parse Error fire it off then keep going\n                self.emit(\"parseError\", errorObject, self);\n              }\n            } else if(sizeOfMessage <= 4 || sizeOfMessage > self.maxBsonMessageSize) {\n              var errorObject = {err:\"socketHandler\", trace:null, bin:data, parseState:{\n                sizeOfMessage:sizeOfMessage,\n                bytesRead:0,\n                buffer:null,\n                stubBuffer:null}};\n              // We got a parse Error fire it off then keep going\n              self.emit(\"parseError\", errorObject, self);\n\n              // Clear out the state of the parser\n              self.buffer = null;\n              self.sizeOfMessage = 0;\n              self.bytesRead = 0;\n              self.stubBuffer = null;\n              // Exit parsing loop\n              data = new Buffer(0);\n            } else {\n              var emitBuffer = data.slice(0, sizeOfMessage);\n              // Reset state of buffer\n              self.buffer = null;\n              self.sizeOfMessage = 0;\n              self.bytesRead = 0;\n              self.stubBuffer = null;\n              // Copy rest of message\n              data = data.slice(sizeOfMessage);\n              // Emit the message\n              self.messageHandler(new Response(self.bson, emitBuffer, self.responseOptions), self);\n            }\n          } else {\n            // Create a buffer that contains the space for the non-complete message\n            self.stubBuffer = new Buffer(data.length)\n            // Copy the data to the stub buffer\n            data.copy(self.stubBuffer, 0);\n            // Exit parsing loop\n            data = new Buffer(0);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Connect\n * @method\n */\nConnection.prototype.connect = function(_options) {\n  var self = this;\n  _options = _options || {};\n  // Check if we are overriding the promoteLongs\n  if(typeof _options.promoteLongs == 'boolean') {\n    self.responseOptions.promoteLongs = _options.promoteLongs;\n  }\n\n  // Create new connection instance\n  self.connection = self.domainSocket\n    ? net.createConnection(self.host)\n    : net.createConnection(self.port, self.host);\n\n  // Set the options for the connection\n  self.connection.setKeepAlive(self.keepAlive, self.keepAliveInitialDelay);\n  self.connection.setTimeout(self.connectionTimeout);\n  self.connection.setNoDelay(self.noDelay);\n\n  // If we have ssl enabled\n  if(self.ssl) {\n    var sslOptions = {\n        socket: self.connection\n      , rejectUnauthorized: self.rejectUnauthorized\n    }\n\n    if(self.ca) sslOptions.ca = self.ca;\n    if(self.cert) sslOptions.cert = self.cert;\n    if(self.key) sslOptions.key = self.key;\n    if(self.passphrase) sslOptions.passphrase = self.passphrase;\n\n    // Override checkServerIdentity behavior\n    if(self.checkServerIdentity == false) {\n      // Skip the identiy check by retuning undefined as per node documents\n      // https://nodejs.org/api/tls.html#tls_tls_connect_options_callback\n      sslOptions.checkServerIdentity = function(servername, cert) {\n        return undefined;\n      }\n    } else if(typeof self.checkServerIdentity == 'function') {\n      sslOptions.checkServerIdentity = self.checkServerIdentity;\n    }\n\n    // Attempt SSL connection\n    self.connection = tls.connect(self.port, self.host, sslOptions, function() {\n      // Error on auth or skip\n      if(self.connection.authorizationError && self.rejectUnauthorized) {\n        return self.emit(\"error\", self.connection.authorizationError, self, {ssl:true});\n      }\n\n      // Set socket timeout instead of connection timeout\n      self.connection.setTimeout(self.socketTimeout);\n      // We are done emit connect\n      self.emit('connect', self);\n    });\n    self.connection.setTimeout(self.connectionTimeout);\n  } else {\n    self.connection.on('connect', function() {\n      // Set socket timeout instead of connection timeout\n      self.connection.setTimeout(self.socketTimeout);\n      // Emit connect event\n      self.emit('connect', self);\n    });\n  }\n\n  // Add handlers for events\n  self.connection.once('error', errorHandler(self));\n  self.connection.once('timeout', timeoutHandler(self));\n  self.connection.once('close', closeHandler(self));\n  self.connection.on('data', dataHandler(self));\n}\n\n/**\n * Destroy connection\n * @method\n */\nConnection.prototype.destroy = function() {\n  if(this.connection) {\n    this.connection.end();\n    this.connection.destroy();\n  }\n\n  this.destroyed = true;\n}\n\n/**\n * Write to connection\n * @method\n * @param {Command} command Command to write out need to implement toBin and toBinUnified\n */\nConnection.prototype.write = function(buffer) {\n  // Debug Log\n  if(this.logger.isDebug()) {\n    if(!Array.isArray(buffer)) {\n      this.logger.debug(f('writing buffer [%s] to %s:%s', buffer.toString('hex'), this.host, this.port));\n    } else {\n      for(var i = 0; i < buffer.length; i++)\n        this.logger.debug(f('writing buffer [%s] to %s:%s', buffer[i].toString('hex'), this.host, this.port));\n    }\n  }\n\n  // Write out the command\n  if(!Array.isArray(buffer)) return this.connection.write(buffer, 'binary');\n  // Iterate over all buffers and write them in order to the socket\n  for(var i = 0; i < buffer.length; i++) this.connection.write(buffer[i], 'binary');\n}\n\n/**\n * Return id of connection as a string\n * @method\n * @return {string}\n */\nConnection.prototype.toString = function() {\n  return \"\" + this.id;\n}\n\n/**\n * Return json object of connection\n * @method\n * @return {object}\n */\nConnection.prototype.toJSON = function() {\n  return {id: this.id, host: this.host, port: this.port};\n}\n\n/**\n * Is the connection connected\n * @method\n * @return {boolean}\n */\nConnection.prototype.isConnected = function() {\n  if(this.destroyed) return false;\n  return !this.connection.destroyed && this.connection.writable;\n}\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Connection#connect\n * @type {Connection}\n */\n\n/**\n * The server connection closed, all pool connections closed\n *\n * @event Connection#close\n * @type {Connection}\n */\n\n/**\n * The server connection caused an error, all pool connections closed\n *\n * @event Connection#error\n * @type {Connection}\n */\n\n/**\n * The server connection timed out, all pool connections closed\n *\n * @event Connection#timeout\n * @type {Connection}\n */\n\n/**\n * The driver experienced an invalid message, all pool connections closed\n *\n * @event Connection#parseError\n * @type {Connection}\n */\n\nmodule.exports = Connection;\n"};
jalangiLabel1461:
    while (true) {
        try {
            J$.Se(10305, '/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongodb-core/lib/connection/connection_jalangi_.js', '/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongodb-core/lib/connection/connection.js');
            J$.N(10313, '__secret__S$', __secret__S$, 0);
            J$.N(10321, '__secret__traits__', __secret__traits__, 0);
            J$.N(10329, 'inherits', inherits, 0);
            J$.N(10337, 'EventEmitter', EventEmitter, 0);
            J$.N(10345, 'net', net, 0);
            J$.N(10353, 'tls', tls, 0);
            J$.N(10361, 'f', f, 0);
            J$.N(10369, 'getSingleProperty', getSingleProperty, 0);
            J$.N(10377, 'debugOptions', debugOptions, 0);
            J$.N(10385, 'Response', Response, 0);
            J$.N(10393, 'MongoError', MongoError, 0);
            J$.N(10401, 'Logger', Logger, 0);
            J$.N(10409, '_id', _id, 0);
            J$.N(10417, 'debugFields', debugFields, 0);
            J$.N(10425, 'Connection', Connection, 0);
            J$.N(10433, 'errorHandler', errorHandler, 0);
            J$.N(10441, 'timeoutHandler', timeoutHandler, 0);
            J$.N(10449, 'closeHandler', closeHandler, 0);
            J$.N(10457, 'dataHandler', dataHandler, 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            J$.X1(89, J$.T(81, 'use strict', 21, false));
            var inherits = J$.X1(393, J$.W(385, 'inherits', J$.G(121, J$.F(113, J$.R(97, 'require', require, 2), 0)(J$.T(105, 'util', 21, false)), 'inherits', 0), inherits, 3)), EventEmitter = J$.X1(409, J$.W(401, 'EventEmitter', J$.G(153, J$.F(145, J$.R(129, 'require', require, 2), 0)(J$.T(137, 'events', 21, false)), 'EventEmitter', 0), EventEmitter, 3)), net = J$.X1(425, J$.W(417, 'net', J$.F(177, J$.R(161, 'require', require, 2), 0)(J$.T(169, 'net', 21, false)), net, 3)), tls = J$.X1(441, J$.W(433, 'tls', J$.F(201, J$.R(185, 'require', require, 2), 0)(J$.T(193, 'tls', 21, false)), tls, 3)), f = J$.X1(457, J$.W(449, 'f', J$.G(233, J$.F(225, J$.R(209, 'require', require, 2), 0)(J$.T(217, 'util', 21, false)), 'format', 0), f, 3)), getSingleProperty = J$.X1(473, J$.W(465, 'getSingleProperty', J$.G(265, J$.F(257, J$.R(241, 'require', require, 2), 0)(J$.T(249, './utils', 21, false)), 'getSingleProperty', 0), getSingleProperty, 3)), debugOptions = J$.X1(489, J$.W(481, 'debugOptions', J$.G(297, J$.F(289, J$.R(273, 'require', require, 2), 0)(J$.T(281, './utils', 21, false)), 'debugOptions', 0), debugOptions, 3)), Response = J$.X1(505, J$.W(497, 'Response', J$.G(329, J$.F(321, J$.R(305, 'require', require, 2), 0)(J$.T(313, './commands', 21, false)), 'Response', 0), Response, 3)), MongoError = J$.X1(521, J$.W(513, 'MongoError', J$.F(353, J$.R(337, 'require', require, 2), 0)(J$.T(345, '../error', 21, false)), MongoError, 3)), Logger = J$.X1(537, J$.W(529, 'Logger', J$.F(377, J$.R(361, 'require', require, 2), 0)(J$.T(369, './logger', 21, false)), Logger, 3));
            var _id = J$.X1(561, J$.W(553, '_id', J$.T(545, 0, 22, false), _id, 3));
            var debugFields = J$.X1(705, J$.W(697, 'debugFields', J$.T(689, [
                J$.T(569, 'host', 21, false),
                J$.T(577, 'port', 21, false),
                J$.T(585, 'size', 21, false),
                J$.T(593, 'keepAlive', 21, false),
                J$.T(601, 'keepAliveInitialDelay', 21, false),
                J$.T(609, 'noDelay', 21, false),
                J$.T(617, 'connectionTimeout', 21, false),
                J$.T(625, 'socketTimeout', 21, false),
                J$.T(633, 'singleBufferSerializtion', 21, false),
                J$.T(641, 'ssl', 21, false),
                J$.T(649, 'ca', 21, false),
                J$.T(657, 'cert', 21, false),
                J$.T(665, 'rejectUnauthorized', 21, false),
                J$.T(673, 'promoteLongs', 21, false),
                J$.T(681, 'checkServerIdentity', 21, false)
            ], 10, false), debugFields, 3));
            var Connection = J$.X1(2625, J$.W(2617, 'Connection', J$.T(2609, function (options) {
                jalangiLabel1443:
                    while (true) {
                        try {
                            J$.Fe(2585, arguments.callee, this, arguments);
                            arguments = J$.N(2593, 'arguments', arguments, 4);
                            options = J$.N(2601, 'options', options, 4);
                            J$.X1(737, J$.M(729, J$.R(713, 'EventEmitter', EventEmitter, 1), 'call', 0)(J$.R(721, 'this', this, 0)));
                            J$.X1(777, J$.P(769, J$.R(745, 'this', this, 0), 'options', J$.C(8, J$.R(753, 'options', options, 0)) ? J$._() : J$.T(761, {}, 11, false), 0));
                            J$.X1(833, J$.P(825, J$.R(785, 'this', this, 0), 'id', J$.B(26, '-', _id = J$.W(809, '_id', J$.B(18, '+', J$.U(10, '+', J$.R(801, '_id', _id, 1)), J$.T(793, 1, 22, false), 0), _id, 2), J$.T(817, 1, 22, false), 0), 0));
                            J$.X1(889, J$.P(881, J$.R(841, 'this', this, 0), 'logger', J$.F(873, J$.R(849, 'Logger', Logger, 1), 0)(J$.T(857, 'Connection', 21, false), J$.R(865, 'options', options, 0)), 0));
                            if (J$.X1(10465, J$.C(16, J$.U(34, '!', J$.G(905, J$.R(897, 'options', options, 0), 'bson', 0)))))
                                throw J$.X1(945, J$.Th(937, J$.F(929, J$.R(913, 'Error', Error, 2), 1)(J$.T(921, 'must pass in valid bson parser', 21, false))));
                            J$.X1(985, J$.P(977, J$.R(953, 'this', this, 0), 'bson', J$.G(969, J$.R(961, 'options', options, 0), 'bson', 0), 0));
                            J$.X1(1025, J$.P(1017, J$.R(993, 'this', this, 0), 'tag', J$.G(1009, J$.R(1001, 'options', options, 0), 'tag', 0), 0));
                            J$.X1(1065, J$.P(1057, J$.R(1033, 'this', this, 0), 'messageHandler', J$.G(1049, J$.R(1041, 'options', options, 0), 'messageHandler', 0), 0));
                            J$.X1(1137, J$.P(1129, J$.R(1073, 'this', this, 0), 'maxBsonMessageSize', J$.C(24, J$.G(1089, J$.R(1081, 'options', options, 0), 'maxBsonMessageSize', 0)) ? J$._() : J$.B(58, '*', J$.B(50, '*', J$.B(42, '*', J$.T(1097, 1024, 22, false), J$.T(1105, 1024, 22, false), 0), J$.T(1113, 16, 22, false), 0), J$.T(1121, 4, 22, false), 0), 0));
                            if (J$.X1(10473, J$.C(32, J$.M(1161, J$.G(1153, J$.R(1145, 'this', this, 0), 'logger', 0), 'isDebug', 0)())))
                                J$.X1(1281, J$.M(1273, J$.G(1177, J$.R(1169, 'this', this, 0), 'logger', 0), 'debug', 0)(J$.F(1265, J$.R(1185, 'f', f, 1), 0)(J$.T(1193, 'creating connection %s with options [%s]', 21, false), J$.G(1209, J$.R(1201, 'this', this, 0), 'id', 0), J$.M(1257, J$.R(1217, 'JSON', JSON, 2), 'stringify', 0)(J$.F(1249, J$.R(1225, 'debugOptions', debugOptions, 1), 0)(J$.R(1233, 'debugFields', debugFields, 1), J$.R(1241, 'options', options, 0))))));
                            J$.X1(1329, J$.P(1321, J$.R(1289, 'this', this, 0), 'port', J$.C(40, J$.G(1305, J$.R(1297, 'options', options, 0), 'port', 0)) ? J$._() : J$.T(1313, 27017, 22, false), 0));
                            J$.X1(1377, J$.P(1369, J$.R(1337, 'this', this, 0), 'host', J$.C(48, J$.G(1353, J$.R(1345, 'options', options, 0), 'host', 0)) ? J$._() : J$.T(1361, 'localhost', 21, false), 0));
                            J$.X1(1449, J$.P(1441, J$.R(1385, 'this', this, 0), 'keepAlive', J$.X1(10481, J$.C(56, J$.B(74, '==', J$.U(66, 'typeof', J$.G(1401, J$.R(1393, 'options', options, 0), 'keepAlive', 0)), J$.T(1409, 'boolean', 21, false), 0))) ? J$.G(1425, J$.R(1417, 'options', options, 0), 'keepAlive', 0) : J$.T(1433, true, 23, false), 0));
                            J$.X1(1497, J$.P(1489, J$.R(1457, 'this', this, 0), 'keepAliveInitialDelay', J$.C(64, J$.G(1473, J$.R(1465, 'options', options, 0), 'keepAliveInitialDelay', 0)) ? J$._() : J$.T(1481, 0, 22, false), 0));
                            J$.X1(1569, J$.P(1561, J$.R(1505, 'this', this, 0), 'noDelay', J$.X1(10489, J$.C(72, J$.B(90, '==', J$.U(82, 'typeof', J$.G(1521, J$.R(1513, 'options', options, 0), 'noDelay', 0)), J$.T(1529, 'boolean', 21, false), 0))) ? J$.G(1545, J$.R(1537, 'options', options, 0), 'noDelay', 0) : J$.T(1553, true, 23, false), 0));
                            J$.X1(1617, J$.P(1609, J$.R(1577, 'this', this, 0), 'connectionTimeout', J$.C(80, J$.G(1593, J$.R(1585, 'options', options, 0), 'connectionTimeout', 0)) ? J$._() : J$.T(1601, 0, 22, false), 0));
                            J$.X1(1665, J$.P(1657, J$.R(1625, 'this', this, 0), 'socketTimeout', J$.C(88, J$.G(1641, J$.R(1633, 'options', options, 0), 'socketTimeout', 0)) ? J$._() : J$.T(1649, 0, 22, false), 0));
                            J$.X1(1697, J$.P(1689, J$.R(1673, 'this', this, 0), 'destroyed', J$.T(1681, false, 23, false), 0));
                            J$.X1(1761, J$.P(1753, J$.R(1705, 'this', this, 0), 'domainSocket', J$.B(106, '!=', J$.M(1737, J$.G(1721, J$.R(1713, 'this', this, 0), 'host', 0), 'indexOf', 0)(J$.T(1729, '/', 21, false)), J$.U(98, '-', J$.T(1745, 1, 22, false)), 0), 0));
                            J$.X1(1833, J$.P(1825, J$.R(1769, 'this', this, 0), 'singleBufferSerializtion', J$.X1(10497, J$.C(96, J$.B(122, '==', J$.U(114, 'typeof', J$.G(1785, J$.R(1777, 'options', options, 0), 'singleBufferSerializtion', 0)), J$.T(1793, 'boolean', 21, false), 0))) ? J$.G(1809, J$.R(1801, 'options', options, 0), 'singleBufferSerializtion', 0) : J$.T(1817, true, 23, false), 0));
                            J$.X1(1889, J$.P(1881, J$.R(1841, 'this', this, 0), 'serializationFunction', J$.X1(10505, J$.C(104, J$.G(1857, J$.R(1849, 'this', this, 0), 'singleBufferSerializtion', 0))) ? J$.T(1865, 'toBinUnified', 21, false) : J$.T(1873, 'toBin', 21, false), 0));
                            J$.X1(1937, J$.P(1929, J$.R(1897, 'this', this, 0), 'ca', J$.C(112, J$.G(1913, J$.R(1905, 'options', options, 0), 'ca', 0)) ? J$._() : J$.T(1921, null, 25, false), 0));
                            J$.X1(1985, J$.P(1977, J$.R(1945, 'this', this, 0), 'cert', J$.C(120, J$.G(1961, J$.R(1953, 'options', options, 0), 'cert', 0)) ? J$._() : J$.T(1969, null, 25, false), 0));
                            J$.X1(2033, J$.P(2025, J$.R(1993, 'this', this, 0), 'key', J$.C(128, J$.G(2009, J$.R(2001, 'options', options, 0), 'key', 0)) ? J$._() : J$.T(2017, null, 25, false), 0));
                            J$.X1(2081, J$.P(2073, J$.R(2041, 'this', this, 0), 'passphrase', J$.C(136, J$.G(2057, J$.R(2049, 'options', options, 0), 'passphrase', 0)) ? J$._() : J$.T(2065, null, 25, false), 0));
                            J$.X1(2153, J$.P(2145, J$.R(2089, 'this', this, 0), 'ssl', J$.X1(10513, J$.C(144, J$.B(138, '==', J$.U(130, 'typeof', J$.G(2105, J$.R(2097, 'options', options, 0), 'ssl', 0)), J$.T(2113, 'boolean', 21, false), 0))) ? J$.G(2129, J$.R(2121, 'options', options, 0), 'ssl', 0) : J$.T(2137, false, 23, false), 0));
                            J$.X1(2225, J$.P(2217, J$.R(2161, 'this', this, 0), 'rejectUnauthorized', J$.X1(10521, J$.C(152, J$.B(154, '==', J$.U(146, 'typeof', J$.G(2177, J$.R(2169, 'options', options, 0), 'rejectUnauthorized', 0)), J$.T(2185, 'boolean', 21, false), 0))) ? J$.G(2201, J$.R(2193, 'options', options, 0), 'rejectUnauthorized', 0) : J$.T(2209, true, 23, false), 0));
                            J$.X1(2321, J$.P(2313, J$.R(2233, 'this', this, 0), 'checkServerIdentity', J$.X1(10529, J$.C(168, J$.C(160, J$.B(170, '==', J$.U(162, 'typeof', J$.G(2249, J$.R(2241, 'options', options, 0), 'checkServerIdentity', 0)), J$.T(2257, 'boolean', 21, false), 0)) ? J$._() : J$.B(186, '==', J$.U(178, 'typeof', J$.G(2273, J$.R(2265, 'options', options, 0), 'checkServerIdentity', 0)), J$.T(2281, 'function', 21, false), 0))) ? J$.G(2297, J$.R(2289, 'options', options, 0), 'checkServerIdentity', 0) : J$.T(2305, true, 23, false), 0));
                            if (J$.X1(10537, J$.C(176, J$.U(194, '!', J$.G(2337, J$.R(2329, 'this', this, 0), 'ssl', 0)))))
                                J$.X1(2369, J$.P(2361, J$.R(2345, 'this', this, 0), 'rejectUnauthorized', J$.T(2353, false, 23, false), 0));
                            J$.X1(2449, J$.P(2441, J$.R(2377, 'this', this, 0), 'responseOptions', J$.T(2433, {
                                promoteLongs: J$.X1(10545, J$.C(184, J$.B(210, '==', J$.U(202, 'typeof', J$.G(2393, J$.R(2385, 'options', options, 0), 'promoteLongs', 0)), J$.T(2401, 'boolean', 21, false), 0))) ? J$.G(2417, J$.R(2409, 'options', options, 0), 'promoteLongs', 0) : J$.T(2425, true, 23, false)
                            }, 11, false), 0));
                            J$.X1(2481, J$.P(2473, J$.R(2457, 'this', this, 0), 'flushing', J$.T(2465, false, 23, false), 0));
                            J$.X1(2513, J$.P(2505, J$.R(2489, 'this', this, 0), 'queue', J$.T(2497, [], 10, false), 0));
                            J$.X1(2545, J$.P(2537, J$.R(2521, 'this', this, 0), 'connection', J$.T(2529, null, 25, false), 0));
                            J$.X1(2577, J$.P(2569, J$.R(2553, 'this', this, 0), 'writeStream', J$.T(2561, null, 25, false), 0));
                        } catch (J$e) {
                            J$.Ex(10553, J$e);
                        } finally {
                            if (J$.Fr(10561))
                                continue jalangiLabel1443;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 2585), Connection, 3));
            J$.X1(2665, J$.F(2657, J$.R(2633, 'inherits', inherits, 1), 0)(J$.R(2641, 'Connection', Connection, 1), J$.R(2649, 'EventEmitter', EventEmitter, 1)));
            var errorHandler = J$.X1(3017, J$.W(3009, 'errorHandler', J$.T(3001, function (self) {
                jalangiLabel1445:
                    while (true) {
                        try {
                            J$.Fe(2977, arguments.callee, this, arguments);
                            arguments = J$.N(2985, 'arguments', arguments, 4);
                            self = J$.N(2993, 'self', self, 4);
                            return J$.X1(2969, J$.Rt(2961, J$.T(2953, function (err) {
                                jalangiLabel1444:
                                    while (true) {
                                        try {
                                            J$.Fe(2929, arguments.callee, this, arguments);
                                            arguments = J$.N(2937, 'arguments', arguments, 4);
                                            err = J$.N(2945, 'err', err, 4);
                                            if (J$.X1(10569, J$.C(192, J$.M(2689, J$.G(2681, J$.R(2673, 'self', self, 0), 'logger', 0), 'isDebug', 0)())))
                                                J$.X1(2817, J$.M(2809, J$.G(2705, J$.R(2697, 'self', self, 0), 'logger', 0), 'debug', 0)(J$.F(2801, J$.R(2713, 'f', f, 1), 0)(J$.T(2721, 'connection %s for [%s:%s] errored out with [%s]', 21, false), J$.G(2737, J$.R(2729, 'self', self, 0), 'id', 0), J$.G(2753, J$.R(2745, 'self', self, 0), 'host', 0), J$.G(2769, J$.R(2761, 'self', self, 0), 'port', 0), J$.M(2793, J$.R(2777, 'JSON', JSON, 2), 'stringify', 0)(J$.R(2785, 'err', err, 0)))));
                                            if (J$.X1(10577, J$.C(200, J$.B(218, '>', J$.G(2849, J$.M(2841, J$.R(2825, 'self', self, 0), 'listeners', 0)(J$.T(2833, 'error', 21, false)), 'length', 0), J$.T(2857, 0, 22, false), 0))))
                                                J$.X1(2921, J$.M(2913, J$.R(2865, 'self', self, 0), 'emit', 0)(J$.T(2873, 'error', 21, false), J$.M(2897, J$.R(2881, 'MongoError', MongoError, 1), 'create', 0)(J$.R(2889, 'err', err, 0)), J$.R(2905, 'self', self, 0)));
                                        } catch (J$e) {
                                            J$.Ex(10585, J$e);
                                        } finally {
                                            if (J$.Fr(10593))
                                                continue jalangiLabel1444;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 2929)));
                        } catch (J$e) {
                            J$.Ex(10601, J$e);
                        } finally {
                            if (J$.Fr(10609))
                                continue jalangiLabel1445;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 2977), errorHandler, 3));
            var timeoutHandler = J$.X1(3361, J$.W(3353, 'timeoutHandler', J$.T(3345, function (self) {
                jalangiLabel1447:
                    while (true) {
                        try {
                            J$.Fe(3321, arguments.callee, this, arguments);
                            arguments = J$.N(3329, 'arguments', arguments, 4);
                            self = J$.N(3337, 'self', self, 4);
                            return J$.X1(3313, J$.Rt(3305, J$.T(3297, function () {
                                jalangiLabel1446:
                                    while (true) {
                                        try {
                                            J$.Fe(3281, arguments.callee, this, arguments);
                                            arguments = J$.N(3289, 'arguments', arguments, 4);
                                            if (J$.X1(10617, J$.C(208, J$.M(3041, J$.G(3033, J$.R(3025, 'self', self, 0), 'logger', 0), 'isDebug', 0)())))
                                                J$.X1(3145, J$.M(3137, J$.G(3057, J$.R(3049, 'self', self, 0), 'logger', 0), 'debug', 0)(J$.F(3129, J$.R(3065, 'f', f, 1), 0)(J$.T(3073, 'connection %s for [%s:%s] timed out', 21, false), J$.G(3089, J$.R(3081, 'self', self, 0), 'id', 0), J$.G(3105, J$.R(3097, 'self', self, 0), 'host', 0), J$.G(3121, J$.R(3113, 'self', self, 0), 'port', 0))));
                                            J$.X1(3273, J$.M(3265, J$.R(3153, 'self', self, 0), 'emit', 0)(J$.T(3161, 'timeout', 21, false), J$.M(3249, J$.R(3169, 'MongoError', MongoError, 1), 'create', 0)(J$.F(3241, J$.R(3177, 'f', f, 1), 0)(J$.T(3185, 'connection %s to %s:%s timed out', 21, false), J$.G(3201, J$.R(3193, 'self', self, 0), 'id', 0), J$.G(3217, J$.R(3209, 'self', self, 0), 'host', 0), J$.G(3233, J$.R(3225, 'self', self, 0), 'port', 0))), J$.R(3257, 'self', self, 0)));
                                        } catch (J$e) {
                                            J$.Ex(10625, J$e);
                                        } finally {
                                            if (J$.Fr(10633))
                                                continue jalangiLabel1446;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 3281)));
                        } catch (J$e) {
                            J$.Ex(10641, J$e);
                        } finally {
                            if (J$.Fr(10649))
                                continue jalangiLabel1447;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 3321), timeoutHandler, 3));
            var closeHandler = J$.X1(3721, J$.W(3713, 'closeHandler', J$.T(3705, function (self) {
                jalangiLabel1449:
                    while (true) {
                        try {
                            J$.Fe(3681, arguments.callee, this, arguments);
                            arguments = J$.N(3689, 'arguments', arguments, 4);
                            self = J$.N(3697, 'self', self, 4);
                            return J$.X1(3673, J$.Rt(3665, J$.T(3657, function (hadError) {
                                jalangiLabel1448:
                                    while (true) {
                                        try {
                                            J$.Fe(3633, arguments.callee, this, arguments);
                                            arguments = J$.N(3641, 'arguments', arguments, 4);
                                            hadError = J$.N(3649, 'hadError', hadError, 4);
                                            if (J$.X1(10657, J$.C(216, J$.M(3385, J$.G(3377, J$.R(3369, 'self', self, 0), 'logger', 0), 'isDebug', 0)())))
                                                J$.X1(3489, J$.M(3481, J$.G(3401, J$.R(3393, 'self', self, 0), 'logger', 0), 'debug', 0)(J$.F(3473, J$.R(3409, 'f', f, 1), 0)(J$.T(3417, 'connection %s with for [%s:%s] closed', 21, false), J$.G(3433, J$.R(3425, 'self', self, 0), 'id', 0), J$.G(3449, J$.R(3441, 'self', self, 0), 'host', 0), J$.G(3465, J$.R(3457, 'self', self, 0), 'port', 0))));
                                            if (J$.X1(10665, J$.C(224, J$.U(226, '!', J$.R(3497, 'hadError', hadError, 0))))) {
                                                J$.X1(3625, J$.M(3617, J$.R(3505, 'self', self, 0), 'emit', 0)(J$.T(3513, 'close', 21, false), J$.M(3601, J$.R(3521, 'MongoError', MongoError, 1), 'create', 0)(J$.F(3593, J$.R(3529, 'f', f, 1), 0)(J$.T(3537, 'connection %s to %s:%s closed', 21, false), J$.G(3553, J$.R(3545, 'self', self, 0), 'id', 0), J$.G(3569, J$.R(3561, 'self', self, 0), 'host', 0), J$.G(3585, J$.R(3577, 'self', self, 0), 'port', 0))), J$.R(3609, 'self', self, 0)));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(10673, J$e);
                                        } finally {
                                            if (J$.Fr(10681))
                                                continue jalangiLabel1448;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 3633)));
                        } catch (J$e) {
                            J$.Ex(10689, J$e);
                        } finally {
                            if (J$.Fr(10697))
                                continue jalangiLabel1449;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 3681), closeHandler, 3));
            var dataHandler = J$.X1(7313, J$.W(7305, 'dataHandler', J$.T(7297, function (self) {
                jalangiLabel1451:
                    while (true) {
                        try {
                            J$.Fe(7273, arguments.callee, this, arguments);
                            arguments = J$.N(7281, 'arguments', arguments, 4);
                            self = J$.N(7289, 'self', self, 4);
                            return J$.X1(7265, J$.Rt(7257, J$.T(7249, function (data) {
                                jalangiLabel1450:
                                    while (true) {
                                        try {
                                            J$.Fe(7177, arguments.callee, this, arguments);
                                            arguments = J$.N(7185, 'arguments', arguments, 4);
                                            data = J$.N(7193, 'data', data, 4);
                                            J$.N(7201, 'remainingBytesToRead', remainingBytesToRead, 0);
                                            J$.N(7209, 'emitBuffer', emitBuffer, 0);
                                            J$.N(7217, 'errorObject', errorObject, 0);
                                            J$.N(7225, 'newData', newData, 0);
                                            J$.N(7233, 'newStubBuffer', newStubBuffer, 0);
                                            J$.N(7241, 'sizeOfMessage', sizeOfMessage, 0);
                                            while (J$.X1(10777, J$.C(368, J$.B(234, '>', J$.G(3737, J$.R(3729, 'data', data, 0), 'length', 0), J$.T(3745, 0, 22, false), 0)))) {
                                                if (J$.X1(10769, J$.C(360, J$.C(232, J$.B(242, '>', J$.G(3761, J$.R(3753, 'self', self, 0), 'bytesRead', 0), J$.T(3769, 0, 22, false), 0)) ? J$.B(250, '>', J$.G(3785, J$.R(3777, 'self', self, 0), 'sizeOfMessage', 0), J$.T(3793, 0, 22, false), 0) : J$._()))) {
                                                    var remainingBytesToRead = J$.X1(3841, J$.W(3833, 'remainingBytesToRead', J$.B(258, '-', J$.G(3809, J$.R(3801, 'self', self, 0), 'sizeOfMessage', 0), J$.G(3825, J$.R(3817, 'self', self, 0), 'bytesRead', 0), 0), remainingBytesToRead, 1));
                                                    if (J$.X1(10705, J$.C(240, J$.B(266, '>', J$.R(3849, 'remainingBytesToRead', remainingBytesToRead, 0), J$.G(3865, J$.R(3857, 'data', data, 0), 'length', 0), 0)))) {
                                                        J$.X1(3921, J$.M(3913, J$.R(3873, 'data', data, 0), 'copy', 0)(J$.G(3889, J$.R(3881, 'self', self, 0), 'buffer', 0), J$.G(3905, J$.R(3897, 'self', self, 0), 'bytesRead', 0)));
                                                        J$.X1(3977, J$.P(3969, J$.R(3929, 'self', self, 0), 'bytesRead', J$.B(274, '+', J$.G(3945, J$.R(3937, 'self', self, 0), 'bytesRead', 0), J$.G(3961, J$.R(3953, 'data', data, 0), 'length', 0), 0), 0));
                                                        J$.X1(4017, data = J$.W(4009, 'data', J$.F(4001, J$.R(3985, 'Buffer', Buffer, 2), 1)(J$.T(3993, 0, 22, false)), data, 0));
                                                    } else {
                                                        J$.X1(4089, J$.M(4081, J$.R(4025, 'data', data, 0), 'copy', 0)(J$.G(4041, J$.R(4033, 'self', self, 0), 'buffer', 0), J$.G(4057, J$.R(4049, 'self', self, 0), 'bytesRead', 0), J$.T(4065, 0, 22, false), J$.R(4073, 'remainingBytesToRead', remainingBytesToRead, 0)));
                                                        J$.X1(4129, data = J$.W(4121, 'data', J$.M(4113, J$.R(4097, 'data', data, 0), 'slice', 0)(J$.R(4105, 'remainingBytesToRead', remainingBytesToRead, 0)), data, 0));
                                                        try {
                                                            var emitBuffer = J$.X1(4161, J$.W(4153, 'emitBuffer', J$.G(4145, J$.R(4137, 'self', self, 0), 'buffer', 0), emitBuffer, 1));
                                                            J$.X1(4193, J$.P(4185, J$.R(4169, 'self', self, 0), 'buffer', J$.T(4177, null, 25, false), 0));
                                                            J$.X1(4225, J$.P(4217, J$.R(4201, 'self', self, 0), 'sizeOfMessage', J$.T(4209, 0, 22, false), 0));
                                                            J$.X1(4257, J$.P(4249, J$.R(4233, 'self', self, 0), 'bytesRead', J$.T(4241, 0, 22, false), 0));
                                                            J$.X1(4289, J$.P(4281, J$.R(4265, 'self', self, 0), 'stubBuffer', J$.T(4273, null, 25, false), 0));
                                                            J$.X1(4377, J$.M(4369, J$.R(4297, 'self', self, 0), 'messageHandler', 0)(J$.F(4353, J$.R(4305, 'Response', Response, 1), 1)(J$.G(4321, J$.R(4313, 'self', self, 0), 'bson', 0), J$.R(4329, 'emitBuffer', emitBuffer, 0), J$.G(4345, J$.R(4337, 'self', self, 0), 'responseOptions', 0)), J$.R(4361, 'self', self, 0)));
                                                        } catch (err) {
                                                            err = J$.N(4545, 'err', err, 1);
                                                            var errorObject = J$.X1(4489, J$.W(4481, 'errorObject', J$.T(4473, {
                                                                err: J$.T(4385, 'socketHandler', 21, false),
                                                                trace: J$.R(4393, 'err', err, 0),
                                                                bin: J$.G(4409, J$.R(4401, 'self', self, 0), 'buffer', 0),
                                                                parseState: J$.T(4465, {
                                                                    sizeOfMessage: J$.G(4425, J$.R(4417, 'self', self, 0), 'sizeOfMessage', 0),
                                                                    bytesRead: J$.G(4441, J$.R(4433, 'self', self, 0), 'bytesRead', 0),
                                                                    stubBuffer: J$.G(4457, J$.R(4449, 'self', self, 0), 'stubBuffer', 0)
                                                                }, 11, false)
                                                            }, 11, false), errorObject, 1));
                                                            J$.X1(4537, J$.M(4529, J$.R(4497, 'self', self, 0), 'emit', 0)(J$.T(4505, 'parseError', 21, false), J$.R(4513, 'errorObject', errorObject, 0), J$.R(4521, 'self', self, 0)));
                                                        }
                                                    }
                                                } else {
                                                    if (J$.X1(10761, J$.C(352, J$.C(248, J$.B(282, '!=', J$.G(4561, J$.R(4553, 'self', self, 0), 'stubBuffer', 0), J$.T(4569, null, 25, false), 0)) ? J$.B(290, '>', J$.G(4593, J$.G(4585, J$.R(4577, 'self', self, 0), 'stubBuffer', 0), 'length', 0), J$.T(4601, 0, 22, false), 0) : J$._()))) {
                                                        if (J$.X1(10713, J$.C(256, J$.B(306, '>', J$.B(298, '+', J$.G(4625, J$.G(4617, J$.R(4609, 'self', self, 0), 'stubBuffer', 0), 'length', 0), J$.G(4641, J$.R(4633, 'data', data, 0), 'length', 0), 0), J$.T(4649, 4, 22, false), 0)))) {
                                                            var newData = J$.X1(4721, J$.W(4713, 'newData', J$.F(4705, J$.R(4657, 'Buffer', Buffer, 2), 1)(J$.B(314, '+', J$.G(4681, J$.G(4673, J$.R(4665, 'self', self, 0), 'stubBuffer', 0), 'length', 0), J$.G(4697, J$.R(4689, 'data', data, 0), 'length', 0), 0)), newData, 1));
                                                            J$.X1(4769, J$.M(4761, J$.G(4737, J$.R(4729, 'self', self, 0), 'stubBuffer', 0), 'copy', 0)(J$.R(4745, 'newData', newData, 0), J$.T(4753, 0, 22, false)));
                                                            J$.X1(4825, J$.M(4817, J$.R(4777, 'data', data, 0), 'copy', 0)(J$.R(4785, 'newData', newData, 0), J$.G(4809, J$.G(4801, J$.R(4793, 'self', self, 0), 'stubBuffer', 0), 'length', 0)));
                                                            J$.X1(4849, data = J$.W(4841, 'data', J$.R(4833, 'newData', newData, 0), data, 0));
                                                            J$.X1(4881, J$.P(4873, J$.R(4857, 'self', self, 0), 'buffer', J$.T(4865, null, 25, false), 0));
                                                            J$.X1(4913, J$.P(4905, J$.R(4889, 'self', self, 0), 'sizeOfMessage', J$.T(4897, 0, 22, false), 0));
                                                            J$.X1(4945, J$.P(4937, J$.R(4921, 'self', self, 0), 'bytesRead', J$.T(4929, 0, 22, false), 0));
                                                            J$.X1(4977, J$.P(4969, J$.R(4953, 'self', self, 0), 'stubBuffer', J$.T(4961, null, 25, false), 0));
                                                        } else {
                                                            var newStubBuffer = J$.X1(5049, J$.W(5041, 'newStubBuffer', J$.F(5033, J$.R(4985, 'Buffer', Buffer, 2), 1)(J$.B(322, '+', J$.G(5009, J$.G(5001, J$.R(4993, 'self', self, 0), 'stubBuffer', 0), 'length', 0), J$.G(5025, J$.R(5017, 'data', data, 0), 'length', 0), 0)), newStubBuffer, 1));
                                                            J$.X1(5097, J$.M(5089, J$.G(5065, J$.R(5057, 'self', self, 0), 'stubBuffer', 0), 'copy', 0)(J$.R(5073, 'newStubBuffer', newStubBuffer, 0), J$.T(5081, 0, 22, false)));
                                                            J$.X1(5153, J$.M(5145, J$.R(5105, 'data', data, 0), 'copy', 0)(J$.R(5113, 'newStubBuffer', newStubBuffer, 0), J$.G(5137, J$.G(5129, J$.R(5121, 'self', self, 0), 'stubBuffer', 0), 'length', 0)));
                                                            J$.X1(5193, data = J$.W(5185, 'data', J$.F(5177, J$.R(5161, 'Buffer', Buffer, 2), 1)(J$.T(5169, 0, 22, false)), data, 0));
                                                        }
                                                    } else {
                                                        if (J$.X1(10753, J$.C(344, J$.B(330, '>', J$.G(5209, J$.R(5201, 'data', data, 0), 'length', 0), J$.T(5217, 4, 22, false), 0)))) {
                                                            var sizeOfMessage = J$.X1(5353, J$.W(5345, 'sizeOfMessage', J$.B(378, '|', J$.B(362, '|', J$.B(346, '|', J$.G(5241, J$.R(5225, 'data', data, 0), J$.T(5233, 0, 22, false), 4), J$.B(338, '<<', J$.G(5265, J$.R(5249, 'data', data, 0), J$.T(5257, 1, 22, false), 4), J$.T(5273, 8, 22, false), 0), 0), J$.B(354, '<<', J$.G(5297, J$.R(5281, 'data', data, 0), J$.T(5289, 2, 22, false), 4), J$.T(5305, 16, 22, false), 0), 0), J$.B(370, '<<', J$.G(5329, J$.R(5313, 'data', data, 0), J$.T(5321, 3, 22, false), 4), J$.T(5337, 24, 22, false), 0), 0), sizeOfMessage, 1));
                                                            if (J$.X1(10721, J$.C(272, J$.C(264, J$.B(386, '<', J$.R(5361, 'sizeOfMessage', sizeOfMessage, 0), J$.T(5369, 0, 22, false), 0)) ? J$._() : J$.B(394, '>', J$.R(5377, 'sizeOfMessage', sizeOfMessage, 0), J$.G(5393, J$.R(5385, 'self', self, 0), 'maxBsonMessageSize', 0), 0)))) {
                                                                var errorObject = J$.X1(5497, J$.W(5489, 'errorObject', J$.T(5481, {
                                                                    err: J$.T(5401, 'socketHandler', 21, false),
                                                                    trace: J$.T(5409, '', 21, false),
                                                                    bin: J$.G(5425, J$.R(5417, 'self', self, 0), 'buffer', 0),
                                                                    parseState: J$.T(5473, {
                                                                        sizeOfMessage: J$.R(5433, 'sizeOfMessage', sizeOfMessage, 0),
                                                                        bytesRead: J$.G(5449, J$.R(5441, 'self', self, 0), 'bytesRead', 0),
                                                                        stubBuffer: J$.G(5465, J$.R(5457, 'self', self, 0), 'stubBuffer', 0)
                                                                    }, 11, false)
                                                                }, 11, false), errorObject, 1));
                                                                J$.X1(5545, J$.M(5537, J$.R(5505, 'self', self, 0), 'emit', 0)(J$.T(5513, 'parseError', 21, false), J$.R(5521, 'errorObject', errorObject, 0), J$.R(5529, 'self', self, 0)));
                                                                return J$.X1(5561, J$.Rt(5553, undefined));
                                                            }
                                                            if (J$.X1(10745, J$.C(336, J$.C(288, J$.C(280, J$.B(402, '>', J$.R(5569, 'sizeOfMessage', sizeOfMessage, 0), J$.T(5577, 4, 22, false), 0)) ? J$.B(410, '<', J$.R(5585, 'sizeOfMessage', sizeOfMessage, 0), J$.G(5601, J$.R(5593, 'self', self, 0), 'maxBsonMessageSize', 0), 0) : J$._()) ? J$.B(418, '>', J$.R(5609, 'sizeOfMessage', sizeOfMessage, 0), J$.G(5625, J$.R(5617, 'data', data, 0), 'length', 0), 0) : J$._()))) {
                                                                J$.X1(5673, J$.P(5665, J$.R(5633, 'self', self, 0), 'buffer', J$.F(5657, J$.R(5641, 'Buffer', Buffer, 2), 1)(J$.R(5649, 'sizeOfMessage', sizeOfMessage, 0)), 0));
                                                                J$.X1(5721, J$.M(5713, J$.R(5681, 'data', data, 0), 'copy', 0)(J$.G(5697, J$.R(5689, 'self', self, 0), 'buffer', 0), J$.T(5705, 0, 22, false)));
                                                                J$.X1(5761, J$.P(5753, J$.R(5729, 'self', self, 0), 'bytesRead', J$.G(5745, J$.R(5737, 'data', data, 0), 'length', 0), 0));
                                                                J$.X1(5793, J$.P(5785, J$.R(5769, 'self', self, 0), 'sizeOfMessage', J$.R(5777, 'sizeOfMessage', sizeOfMessage, 0), 0));
                                                                J$.X1(5825, J$.P(5817, J$.R(5801, 'self', self, 0), 'stubBuffer', J$.T(5809, null, 25, false), 0));
                                                                J$.X1(5865, data = J$.W(5857, 'data', J$.F(5849, J$.R(5833, 'Buffer', Buffer, 2), 1)(J$.T(5841, 0, 22, false)), data, 0));
                                                            } else if (J$.X1(10737, J$.C(328, J$.C(304, J$.C(296, J$.B(426, '>', J$.R(5873, 'sizeOfMessage', sizeOfMessage, 0), J$.T(5881, 4, 22, false), 0)) ? J$.B(434, '<', J$.R(5889, 'sizeOfMessage', sizeOfMessage, 0), J$.G(5905, J$.R(5897, 'self', self, 0), 'maxBsonMessageSize', 0), 0) : J$._()) ? J$.B(442, '==', J$.R(5913, 'sizeOfMessage', sizeOfMessage, 0), J$.G(5929, J$.R(5921, 'data', data, 0), 'length', 0), 0) : J$._()))) {
                                                                try {
                                                                    var emitBuffer = J$.X1(5953, J$.W(5945, 'emitBuffer', J$.R(5937, 'data', data, 0), emitBuffer, 1));
                                                                    J$.X1(5985, J$.P(5977, J$.R(5961, 'self', self, 0), 'buffer', J$.T(5969, null, 25, false), 0));
                                                                    J$.X1(6017, J$.P(6009, J$.R(5993, 'self', self, 0), 'sizeOfMessage', J$.T(6001, 0, 22, false), 0));
                                                                    J$.X1(6049, J$.P(6041, J$.R(6025, 'self', self, 0), 'bytesRead', J$.T(6033, 0, 22, false), 0));
                                                                    J$.X1(6081, J$.P(6073, J$.R(6057, 'self', self, 0), 'stubBuffer', J$.T(6065, null, 25, false), 0));
                                                                    J$.X1(6121, data = J$.W(6113, 'data', J$.F(6105, J$.R(6089, 'Buffer', Buffer, 2), 1)(J$.T(6097, 0, 22, false)), data, 0));
                                                                    J$.X1(6209, J$.M(6201, J$.R(6129, 'self', self, 0), 'messageHandler', 0)(J$.F(6185, J$.R(6137, 'Response', Response, 1), 1)(J$.G(6153, J$.R(6145, 'self', self, 0), 'bson', 0), J$.R(6161, 'emitBuffer', emitBuffer, 0), J$.G(6177, J$.R(6169, 'self', self, 0), 'responseOptions', 0)), J$.R(6193, 'self', self, 0)));
                                                                } catch (err) {
                                                                    err = J$.N(6377, 'err', err, 1);
                                                                    var errorObject = J$.X1(6321, J$.W(6313, 'errorObject', J$.T(6305, {
                                                                        err: J$.T(6217, 'socketHandler', 21, false),
                                                                        trace: J$.R(6225, 'err', err, 0),
                                                                        bin: J$.G(6241, J$.R(6233, 'self', self, 0), 'buffer', 0),
                                                                        parseState: J$.T(6297, {
                                                                            sizeOfMessage: J$.G(6257, J$.R(6249, 'self', self, 0), 'sizeOfMessage', 0),
                                                                            bytesRead: J$.G(6273, J$.R(6265, 'self', self, 0), 'bytesRead', 0),
                                                                            stubBuffer: J$.G(6289, J$.R(6281, 'self', self, 0), 'stubBuffer', 0)
                                                                        }, 11, false)
                                                                    }, 11, false), errorObject, 1));
                                                                    J$.X1(6369, J$.M(6361, J$.R(6329, 'self', self, 0), 'emit', 0)(J$.T(6337, 'parseError', 21, false), J$.R(6345, 'errorObject', errorObject, 0), J$.R(6353, 'self', self, 0)));
                                                                }
                                                            } else if (J$.X1(10729, J$.C(320, J$.C(312, J$.B(450, '<=', J$.R(6385, 'sizeOfMessage', sizeOfMessage, 0), J$.T(6393, 4, 22, false), 0)) ? J$._() : J$.B(458, '>', J$.R(6401, 'sizeOfMessage', sizeOfMessage, 0), J$.G(6417, J$.R(6409, 'self', self, 0), 'maxBsonMessageSize', 0), 0)))) {
                                                                var errorObject = J$.X1(6505, J$.W(6497, 'errorObject', J$.T(6489, {
                                                                    err: J$.T(6425, 'socketHandler', 21, false),
                                                                    trace: J$.T(6433, null, 25, false),
                                                                    bin: J$.R(6441, 'data', data, 0),
                                                                    parseState: J$.T(6481, {
                                                                        sizeOfMessage: J$.R(6449, 'sizeOfMessage', sizeOfMessage, 0),
                                                                        bytesRead: J$.T(6457, 0, 22, false),
                                                                        buffer: J$.T(6465, null, 25, false),
                                                                        stubBuffer: J$.T(6473, null, 25, false)
                                                                    }, 11, false)
                                                                }, 11, false), errorObject, 1));
                                                                J$.X1(6553, J$.M(6545, J$.R(6513, 'self', self, 0), 'emit', 0)(J$.T(6521, 'parseError', 21, false), J$.R(6529, 'errorObject', errorObject, 0), J$.R(6537, 'self', self, 0)));
                                                                J$.X1(6585, J$.P(6577, J$.R(6561, 'self', self, 0), 'buffer', J$.T(6569, null, 25, false), 0));
                                                                J$.X1(6617, J$.P(6609, J$.R(6593, 'self', self, 0), 'sizeOfMessage', J$.T(6601, 0, 22, false), 0));
                                                                J$.X1(6649, J$.P(6641, J$.R(6625, 'self', self, 0), 'bytesRead', J$.T(6633, 0, 22, false), 0));
                                                                J$.X1(6681, J$.P(6673, J$.R(6657, 'self', self, 0), 'stubBuffer', J$.T(6665, null, 25, false), 0));
                                                                J$.X1(6721, data = J$.W(6713, 'data', J$.F(6705, J$.R(6689, 'Buffer', Buffer, 2), 1)(J$.T(6697, 0, 22, false)), data, 0));
                                                            } else {
                                                                var emitBuffer = J$.X1(6769, J$.W(6761, 'emitBuffer', J$.M(6753, J$.R(6729, 'data', data, 0), 'slice', 0)(J$.T(6737, 0, 22, false), J$.R(6745, 'sizeOfMessage', sizeOfMessage, 0)), emitBuffer, 1));
                                                                J$.X1(6801, J$.P(6793, J$.R(6777, 'self', self, 0), 'buffer', J$.T(6785, null, 25, false), 0));
                                                                J$.X1(6833, J$.P(6825, J$.R(6809, 'self', self, 0), 'sizeOfMessage', J$.T(6817, 0, 22, false), 0));
                                                                J$.X1(6865, J$.P(6857, J$.R(6841, 'self', self, 0), 'bytesRead', J$.T(6849, 0, 22, false), 0));
                                                                J$.X1(6897, J$.P(6889, J$.R(6873, 'self', self, 0), 'stubBuffer', J$.T(6881, null, 25, false), 0));
                                                                J$.X1(6937, data = J$.W(6929, 'data', J$.M(6921, J$.R(6905, 'data', data, 0), 'slice', 0)(J$.R(6913, 'sizeOfMessage', sizeOfMessage, 0)), data, 0));
                                                                J$.X1(7025, J$.M(7017, J$.R(6945, 'self', self, 0), 'messageHandler', 0)(J$.F(7001, J$.R(6953, 'Response', Response, 1), 1)(J$.G(6969, J$.R(6961, 'self', self, 0), 'bson', 0), J$.R(6977, 'emitBuffer', emitBuffer, 0), J$.G(6993, J$.R(6985, 'self', self, 0), 'responseOptions', 0)), J$.R(7009, 'self', self, 0)));
                                                            }
                                                        } else {
                                                            J$.X1(7081, J$.P(7073, J$.R(7033, 'self', self, 0), 'stubBuffer', J$.F(7065, J$.R(7041, 'Buffer', Buffer, 2), 1)(J$.G(7057, J$.R(7049, 'data', data, 0), 'length', 0)), 0));
                                                            J$.X1(7129, J$.M(7121, J$.R(7089, 'data', data, 0), 'copy', 0)(J$.G(7105, J$.R(7097, 'self', self, 0), 'stubBuffer', 0), J$.T(7113, 0, 22, false)));
                                                            J$.X1(7169, data = J$.W(7161, 'data', J$.F(7153, J$.R(7137, 'Buffer', Buffer, 2), 1)(J$.T(7145, 0, 22, false)), data, 0));
                                                        }
                                                    }
                                                }
                                            }
                                        } catch (J$e) {
                                            J$.Ex(10785, J$e);
                                        } finally {
                                            if (J$.Fr(10793))
                                                continue jalangiLabel1450;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 7177)));
                        } catch (J$e) {
                            J$.Ex(10801, J$e);
                        } finally {
                            if (J$.Fr(10809))
                                continue jalangiLabel1451;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 7273), dataHandler, 3));
            J$.X1(9049, J$.P(9041, J$.G(7329, J$.R(7321, 'Connection', Connection, 1), 'prototype', 0), 'connect', J$.T(9033, function (_options) {
                jalangiLabel1455:
                    while (true) {
                        try {
                            J$.Fe(8993, arguments.callee, this, arguments);
                            arguments = J$.N(9001, 'arguments', arguments, 4);
                            _options = J$.N(9009, '_options', _options, 4);
                            J$.N(9017, 'self', self, 0);
                            J$.N(9025, 'sslOptions', sslOptions, 0);
                            var self = J$.X1(7353, J$.W(7345, 'self', J$.R(7337, 'this', this, 0), self, 1));
                            J$.X1(7385, _options = J$.W(7377, '_options', J$.C(376, J$.R(7361, '_options', _options, 0)) ? J$._() : J$.T(7369, {}, 11, false), _options, 0));
                            if (J$.X1(10817, J$.C(384, J$.B(474, '==', J$.U(466, 'typeof', J$.G(7401, J$.R(7393, '_options', _options, 0), 'promoteLongs', 0)), J$.T(7409, 'boolean', 21, false), 0)))) {
                                J$.X1(7457, J$.P(7449, J$.G(7425, J$.R(7417, 'self', self, 0), 'responseOptions', 0), 'promoteLongs', J$.G(7441, J$.R(7433, '_options', _options, 0), 'promoteLongs', 0), 0));
                            }
                            J$.X1(7577, J$.P(7569, J$.R(7465, 'self', self, 0), 'connection', J$.X1(10825, J$.C(392, J$.G(7481, J$.R(7473, 'self', self, 0), 'domainSocket', 0))) ? J$.M(7513, J$.R(7489, 'net', net, 1), 'createConnection', 0)(J$.G(7505, J$.R(7497, 'self', self, 0), 'host', 0)) : J$.M(7561, J$.R(7521, 'net', net, 1), 'createConnection', 0)(J$.G(7537, J$.R(7529, 'self', self, 0), 'port', 0), J$.G(7553, J$.R(7545, 'self', self, 0), 'host', 0)), 0));
                            J$.X1(7641, J$.M(7633, J$.G(7593, J$.R(7585, 'self', self, 0), 'connection', 0), 'setKeepAlive', 0)(J$.G(7609, J$.R(7601, 'self', self, 0), 'keepAlive', 0), J$.G(7625, J$.R(7617, 'self', self, 0), 'keepAliveInitialDelay', 0)));
                            J$.X1(7689, J$.M(7681, J$.G(7657, J$.R(7649, 'self', self, 0), 'connection', 0), 'setTimeout', 0)(J$.G(7673, J$.R(7665, 'self', self, 0), 'connectionTimeout', 0)));
                            J$.X1(7737, J$.M(7729, J$.G(7705, J$.R(7697, 'self', self, 0), 'connection', 0), 'setNoDelay', 0)(J$.G(7721, J$.R(7713, 'self', self, 0), 'noDelay', 0)));
                            if (J$.X1(10937, J$.C(464, J$.G(7753, J$.R(7745, 'self', self, 0), 'ssl', 0)))) {
                                var sslOptions = J$.X1(7809, J$.W(7801, 'sslOptions', J$.T(7793, {
                                    socket: J$.G(7769, J$.R(7761, 'self', self, 0), 'connection', 0),
                                    rejectUnauthorized: J$.G(7785, J$.R(7777, 'self', self, 0), 'rejectUnauthorized', 0)
                                }, 11, false), sslOptions, 1));
                                if (J$.X1(10833, J$.C(400, J$.G(7825, J$.R(7817, 'self', self, 0), 'ca', 0))))
                                    J$.X1(7865, J$.P(7857, J$.R(7833, 'sslOptions', sslOptions, 0), 'ca', J$.G(7849, J$.R(7841, 'self', self, 0), 'ca', 0), 0));
                                if (J$.X1(10841, J$.C(408, J$.G(7881, J$.R(7873, 'self', self, 0), 'cert', 0))))
                                    J$.X1(7921, J$.P(7913, J$.R(7889, 'sslOptions', sslOptions, 0), 'cert', J$.G(7905, J$.R(7897, 'self', self, 0), 'cert', 0), 0));
                                if (J$.X1(10849, J$.C(416, J$.G(7937, J$.R(7929, 'self', self, 0), 'key', 0))))
                                    J$.X1(7977, J$.P(7969, J$.R(7945, 'sslOptions', sslOptions, 0), 'key', J$.G(7961, J$.R(7953, 'self', self, 0), 'key', 0), 0));
                                if (J$.X1(10857, J$.C(424, J$.G(7993, J$.R(7985, 'self', self, 0), 'passphrase', 0))))
                                    J$.X1(8033, J$.P(8025, J$.R(8001, 'sslOptions', sslOptions, 0), 'passphrase', J$.G(8017, J$.R(8009, 'self', self, 0), 'passphrase', 0), 0));
                                if (J$.X1(10889, J$.C(440, J$.B(482, '==', J$.G(8049, J$.R(8041, 'self', self, 0), 'checkServerIdentity', 0), J$.T(8057, false, 23, false), 0)))) {
                                    J$.X1(8145, J$.P(8137, J$.R(8065, 'sslOptions', sslOptions, 0), 'checkServerIdentity', J$.T(8129, function (servername, cert) {
                                        jalangiLabel1452:
                                            while (true) {
                                                try {
                                                    J$.Fe(8097, arguments.callee, this, arguments);
                                                    arguments = J$.N(8105, 'arguments', arguments, 4);
                                                    servername = J$.N(8113, 'servername', servername, 4);
                                                    cert = J$.N(8121, 'cert', cert, 4);
                                                    return J$.X1(8089, J$.Rt(8081, J$.T(8073, undefined, 24, false)));
                                                } catch (J$e) {
                                                    J$.Ex(10865, J$e);
                                                } finally {
                                                    if (J$.Fr(10873))
                                                        continue jalangiLabel1452;
                                                    else
                                                        return J$.Ra();
                                                }
                                            }
                                    }, 12, false, 8097), 0));
                                } else if (J$.X1(10881, J$.C(432, J$.B(498, '==', J$.U(490, 'typeof', J$.G(8161, J$.R(8153, 'self', self, 0), 'checkServerIdentity', 0)), J$.T(8169, 'function', 21, false), 0)))) {
                                    J$.X1(8209, J$.P(8201, J$.R(8177, 'sslOptions', sslOptions, 0), 'checkServerIdentity', J$.G(8193, J$.R(8185, 'self', self, 0), 'checkServerIdentity', 0), 0));
                                }
                                J$.X1(8529, J$.P(8521, J$.R(8217, 'self', self, 0), 'connection', J$.M(8513, J$.R(8225, 'tls', tls, 1), 'connect', 0)(J$.G(8241, J$.R(8233, 'self', self, 0), 'port', 0), J$.G(8257, J$.R(8249, 'self', self, 0), 'host', 0), J$.R(8265, 'sslOptions', sslOptions, 0), J$.T(8505, function () {
                                    jalangiLabel1453:
                                        while (true) {
                                            try {
                                                J$.Fe(8489, arguments.callee, this, arguments);
                                                arguments = J$.N(8497, 'arguments', arguments, 4);
                                                if (J$.X1(10897, J$.C(456, J$.C(448, J$.G(8289, J$.G(8281, J$.R(8273, 'self', self, 0), 'connection', 0), 'authorizationError', 0)) ? J$.G(8305, J$.R(8297, 'self', self, 0), 'rejectUnauthorized', 0) : J$._()))) {
                                                    return J$.X1(8393, J$.Rt(8385, J$.M(8377, J$.R(8313, 'self', self, 0), 'emit', 0)(J$.T(8321, 'error', 21, false), J$.G(8345, J$.G(8337, J$.R(8329, 'self', self, 0), 'connection', 0), 'authorizationError', 0), J$.R(8353, 'self', self, 0), J$.T(8369, {
                                                        ssl: J$.T(8361, true, 23, false)
                                                    }, 11, false))));
                                                }
                                                J$.X1(8441, J$.M(8433, J$.G(8409, J$.R(8401, 'self', self, 0), 'connection', 0), 'setTimeout', 0)(J$.G(8425, J$.R(8417, 'self', self, 0), 'socketTimeout', 0)));
                                                J$.X1(8481, J$.M(8473, J$.R(8449, 'self', self, 0), 'emit', 0)(J$.T(8457, 'connect', 21, false), J$.R(8465, 'self', self, 0)));
                                            } catch (J$e) {
                                                J$.Ex(10905, J$e);
                                            } finally {
                                                if (J$.Fr(10913))
                                                    continue jalangiLabel1453;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false, 8489)), 0));
                                J$.X1(8577, J$.M(8569, J$.G(8545, J$.R(8537, 'self', self, 0), 'connection', 0), 'setTimeout', 0)(J$.G(8561, J$.R(8553, 'self', self, 0), 'connectionTimeout', 0)));
                            } else {
                                J$.X1(8729, J$.M(8721, J$.G(8593, J$.R(8585, 'self', self, 0), 'connection', 0), 'on', 0)(J$.T(8601, 'connect', 21, false), J$.T(8713, function () {
                                    jalangiLabel1454:
                                        while (true) {
                                            try {
                                                J$.Fe(8697, arguments.callee, this, arguments);
                                                arguments = J$.N(8705, 'arguments', arguments, 4);
                                                J$.X1(8649, J$.M(8641, J$.G(8617, J$.R(8609, 'self', self, 0), 'connection', 0), 'setTimeout', 0)(J$.G(8633, J$.R(8625, 'self', self, 0), 'socketTimeout', 0)));
                                                J$.X1(8689, J$.M(8681, J$.R(8657, 'self', self, 0), 'emit', 0)(J$.T(8665, 'connect', 21, false), J$.R(8673, 'self', self, 0)));
                                            } catch (J$e) {
                                                J$.Ex(10921, J$e);
                                            } finally {
                                                if (J$.Fr(10929))
                                                    continue jalangiLabel1454;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false, 8697)));
                            }
                            J$.X1(8793, J$.M(8785, J$.G(8745, J$.R(8737, 'self', self, 0), 'connection', 0), 'once', 0)(J$.T(8753, 'error', 21, false), J$.F(8777, J$.R(8761, 'errorHandler', errorHandler, 1), 0)(J$.R(8769, 'self', self, 0))));
                            J$.X1(8857, J$.M(8849, J$.G(8809, J$.R(8801, 'self', self, 0), 'connection', 0), 'once', 0)(J$.T(8817, 'timeout', 21, false), J$.F(8841, J$.R(8825, 'timeoutHandler', timeoutHandler, 1), 0)(J$.R(8833, 'self', self, 0))));
                            J$.X1(8921, J$.M(8913, J$.G(8873, J$.R(8865, 'self', self, 0), 'connection', 0), 'once', 0)(J$.T(8881, 'close', 21, false), J$.F(8905, J$.R(8889, 'closeHandler', closeHandler, 1), 0)(J$.R(8897, 'self', self, 0))));
                            J$.X1(8985, J$.M(8977, J$.G(8937, J$.R(8929, 'self', self, 0), 'connection', 0), 'on', 0)(J$.T(8945, 'data', 21, false), J$.F(8969, J$.R(8953, 'dataHandler', dataHandler, 1), 0)(J$.R(8961, 'self', self, 0))));
                        } catch (J$e) {
                            J$.Ex(10945, J$e);
                        } finally {
                            if (J$.Fr(10953))
                                continue jalangiLabel1455;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 8993), 0));
            J$.X1(9217, J$.P(9209, J$.G(9065, J$.R(9057, 'Connection', Connection, 1), 'prototype', 0), 'destroy', J$.T(9201, function () {
                jalangiLabel1456:
                    while (true) {
                        try {
                            J$.Fe(9185, arguments.callee, this, arguments);
                            arguments = J$.N(9193, 'arguments', arguments, 4);
                            if (J$.X1(10961, J$.C(472, J$.G(9081, J$.R(9073, 'this', this, 0), 'connection', 0)))) {
                                J$.X1(9113, J$.M(9105, J$.G(9097, J$.R(9089, 'this', this, 0), 'connection', 0), 'end', 0)());
                                J$.X1(9145, J$.M(9137, J$.G(9129, J$.R(9121, 'this', this, 0), 'connection', 0), 'destroy', 0)());
                            }
                            J$.X1(9177, J$.P(9169, J$.R(9153, 'this', this, 0), 'destroyed', J$.T(9161, true, 23, false), 0));
                        } catch (J$e) {
                            J$.Ex(10969, J$e);
                        } finally {
                            if (J$.Fr(10977))
                                continue jalangiLabel1456;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 9185), 0));
            J$.X1(9881, J$.P(9873, J$.G(9233, J$.R(9225, 'Connection', Connection, 1), 'prototype', 0), 'write', J$.T(9865, function (buffer) {
                jalangiLabel1457:
                    while (true) {
                        try {
                            J$.Fe(9833, arguments.callee, this, arguments);
                            arguments = J$.N(9841, 'arguments', arguments, 4);
                            buffer = J$.N(9849, 'buffer', buffer, 4);
                            J$.N(9857, 'i', i, 0);
                            if (J$.X1(11009, J$.C(496, J$.M(9257, J$.G(9249, J$.R(9241, 'this', this, 0), 'logger', 0), 'isDebug', 0)()))) {
                                if (J$.X1(11001, J$.C(488, J$.U(506, '!', J$.M(9281, J$.R(9265, 'Array', Array, 2), 'isArray', 0)(J$.R(9273, 'buffer', buffer, 0)))))) {
                                    J$.X1(9393, J$.M(9385, J$.G(9297, J$.R(9289, 'this', this, 0), 'logger', 0), 'debug', 0)(J$.F(9377, J$.R(9305, 'f', f, 1), 0)(J$.T(9313, 'writing buffer [%s] to %s:%s', 21, false), J$.M(9337, J$.R(9321, 'buffer', buffer, 0), 'toString', 0)(J$.T(9329, 'hex', 21, false)), J$.G(9353, J$.R(9345, 'this', this, 0), 'host', 0), J$.G(9369, J$.R(9361, 'this', this, 0), 'port', 0))));
                                } else {
                                    for (var i = J$.X1(9417, J$.W(9409, 'i', J$.T(9401, 0, 22, false), i, 1)); J$.X1(10985, J$.C(480, J$.B(514, '<', J$.R(9425, 'i', i, 0), J$.G(9441, J$.R(9433, 'buffer', buffer, 0), 'length', 0), 0))); J$.X1(10993, J$.B(538, '-', i = J$.W(9465, 'i', J$.B(530, '+', J$.U(522, '+', J$.R(9457, 'i', i, 0)), J$.T(9449, 1, 22, false), 0), i, 0), J$.T(9473, 1, 22, false), 0)))
                                        J$.X1(9601, J$.M(9593, J$.G(9489, J$.R(9481, 'this', this, 0), 'logger', 0), 'debug', 0)(J$.F(9585, J$.R(9497, 'f', f, 1), 0)(J$.T(9505, 'writing buffer [%s] to %s:%s', 21, false), J$.M(9545, J$.G(9529, J$.R(9513, 'buffer', buffer, 0), J$.R(9521, 'i', i, 0), 4), 'toString', 0)(J$.T(9537, 'hex', 21, false)), J$.G(9561, J$.R(9553, 'this', this, 0), 'host', 0), J$.G(9577, J$.R(9569, 'this', this, 0), 'port', 0))));
                                }
                            }
                            if (J$.X1(11017, J$.C(504, J$.U(546, '!', J$.M(9625, J$.R(9609, 'Array', Array, 2), 'isArray', 0)(J$.R(9617, 'buffer', buffer, 0))))))
                                return J$.X1(9681, J$.Rt(9673, J$.M(9665, J$.G(9641, J$.R(9633, 'this', this, 0), 'connection', 0), 'write', 0)(J$.R(9649, 'buffer', buffer, 0), J$.T(9657, 'binary', 21, false))));
                            for (var i = J$.X1(9705, J$.W(9697, 'i', J$.T(9689, 0, 22, false), i, 1)); J$.X1(11025, J$.C(512, J$.B(554, '<', J$.R(9713, 'i', i, 0), J$.G(9729, J$.R(9721, 'buffer', buffer, 0), 'length', 0), 0))); J$.X1(11033, J$.B(578, '-', i = J$.W(9753, 'i', J$.B(570, '+', J$.U(562, '+', J$.R(9745, 'i', i, 0)), J$.T(9737, 1, 22, false), 0), i, 0), J$.T(9761, 1, 22, false), 0)))
                                J$.X1(9825, J$.M(9817, J$.G(9777, J$.R(9769, 'this', this, 0), 'connection', 0), 'write', 0)(J$.G(9801, J$.R(9785, 'buffer', buffer, 0), J$.R(9793, 'i', i, 0), 4), J$.T(9809, 'binary', 21, false)));
                        } catch (J$e) {
                            J$.Ex(11041, J$e);
                        } finally {
                            if (J$.Fr(11049))
                                continue jalangiLabel1457;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 9833), 0));
            J$.X1(9977, J$.P(9969, J$.G(9897, J$.R(9889, 'Connection', Connection, 1), 'prototype', 0), 'toString', J$.T(9961, function () {
                jalangiLabel1458:
                    while (true) {
                        try {
                            J$.Fe(9945, arguments.callee, this, arguments);
                            arguments = J$.N(9953, 'arguments', arguments, 4);
                            return J$.X1(9937, J$.Rt(9929, J$.B(586, '+', J$.T(9905, '', 21, false), J$.G(9921, J$.R(9913, 'this', this, 0), 'id', 0), 0)));
                        } catch (J$e) {
                            J$.Ex(11057, J$e);
                        } finally {
                            if (J$.Fr(11065))
                                continue jalangiLabel1458;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 9945), 0));
            J$.X1(10105, J$.P(10097, J$.G(9993, J$.R(9985, 'Connection', Connection, 1), 'prototype', 0), 'toJSON', J$.T(10089, function () {
                jalangiLabel1459:
                    while (true) {
                        try {
                            J$.Fe(10073, arguments.callee, this, arguments);
                            arguments = J$.N(10081, 'arguments', arguments, 4);
                            return J$.X1(10065, J$.Rt(10057, J$.T(10049, {
                                id: J$.G(10009, J$.R(10001, 'this', this, 0), 'id', 0),
                                host: J$.G(10025, J$.R(10017, 'this', this, 0), 'host', 0),
                                port: J$.G(10041, J$.R(10033, 'this', this, 0), 'port', 0)
                            }, 11, false)));
                        } catch (J$e) {
                            J$.Ex(11073, J$e);
                        } finally {
                            if (J$.Fr(11081))
                                continue jalangiLabel1459;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 10073), 0));
            J$.X1(10265, J$.P(10257, J$.G(10121, J$.R(10113, 'Connection', Connection, 1), 'prototype', 0), 'isConnected', J$.T(10249, function () {
                jalangiLabel1460:
                    while (true) {
                        try {
                            J$.Fe(10233, arguments.callee, this, arguments);
                            arguments = J$.N(10241, 'arguments', arguments, 4);
                            if (J$.X1(11089, J$.C(520, J$.G(10137, J$.R(10129, 'this', this, 0), 'destroyed', 0))))
                                return J$.X1(10161, J$.Rt(10153, J$.T(10145, false, 23, false)));
                            return J$.X1(10225, J$.Rt(10217, J$.C(528, J$.U(594, '!', J$.G(10185, J$.G(10177, J$.R(10169, 'this', this, 0), 'connection', 0), 'destroyed', 0))) ? J$.G(10209, J$.G(10201, J$.R(10193, 'this', this, 0), 'connection', 0), 'writable', 0) : J$._()));
                        } catch (J$e) {
                            J$.Ex(11097, J$e);
                        } finally {
                            if (J$.Fr(11105))
                                continue jalangiLabel1460;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 10233), 0));
            J$.X1(10297, J$.P(10289, J$.R(10273, 'module', module, 2), 'exports', J$.R(10281, 'Connection', Connection, 1), 0));
        } catch (J$e) {
            J$.Ex(11113, J$e);
        } finally {
            if (J$.Sr(11121)) {
                J$.L();
                continue jalangiLabel1461;
            } else {
                J$.L();
                break jalangiLabel1461;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
