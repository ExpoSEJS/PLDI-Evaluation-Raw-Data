J$.iids = {"8":[10,16,10,36],"9":[1,20,1,27],"16":[6,9,6,27],"17":[1,28,1,32],"24":[18,9,18,17],"25":[1,20,1,33],"33":[1,20,1,33],"41":[1,20,1,33],"49":[2,26,2,38],"57":[2,26,2,45],"65":[2,26,2,45],"73":[2,26,2,45],"81":[3,17,3,24],"89":[3,25,3,43],"97":[3,17,3,44],"105":[3,17,3,44],"113":[3,17,3,44],"121":[5,17,5,21],"129":[5,17,5,21],"137":[5,17,5,21],"145":[6,9,6,14],"153":[6,23,6,26],"161":[6,9,6,27],"163":[6,9,6,22],"169":[7,16,7,19],"177":[8,20,8,31],"185":[8,32,8,37],"193":[8,39,8,40],"201":[8,20,8,41],"209":[8,20,8,41],"217":[8,13,8,42],"225":[7,24,9,10],"233":[7,24,9,10],"241":[7,24,9,10],"249":[7,24,9,10],"257":[7,16,9,11],"259":[7,16,7,23],"265":[7,16,9,11],"273":[7,9,9,12],"281":[10,16,10,22],"289":[10,32,10,35],"297":[10,16,10,36],"299":[10,16,10,31],"305":[11,16,11,19],"313":[11,16,11,19],"321":[11,9,11,20],"329":[13,16,13,27],"337":[13,28,13,33],"345":[13,35,13,38],"353":[13,16,13,39],"361":[13,16,13,39],"369":[13,9,13,40],"377":[4,1,15,2],"385":[4,1,15,2],"393":[4,1,15,2],"401":[4,1,15,2],"409":[17,13,17,19],"417":[17,20,17,23],"425":[17,13,17,24],"433":[17,13,17,24],"441":[17,13,17,24],"449":[18,9,18,14],"457":[18,15,18,16],"465":[18,9,18,17],"473":[19,19,19,28],"481":[19,29,19,37],"489":[19,39,19,42],"497":[19,44,19,49],"505":[19,44,19,54],"513":[19,15,19,55],"521":[19,15,19,55],"529":[19,9,19,56],"537":[21,12,21,13],"545":[21,12,21,13],"553":[21,5,21,14],"561":[16,1,22,2],"569":[16,1,22,2],"577":[16,1,22,2],"585":[16,1,22,2],"593":[16,1,22,2],"601":[23,1,23,7],"609":[23,18,23,39],"617":[23,1,23,39],"625":[23,1,23,40],"633":[1,1,23,40],"641":[1,1,23,40],"649":[1,1,23,40],"657":[1,1,23,40],"665":[4,1,15,2],"673":[1,1,23,40],"681":[16,1,22,2],"689":[1,1,23,40],"697":[7,24,9,10],"705":[7,24,9,10],"713":[10,12,14,6],"721":[6,5,14,6],"729":[4,1,15,2],"737":[4,1,15,2],"745":[18,5,20,6],"753":[16,1,22,2],"761":[16,1,22,2],"769":[1,1,23,40],"777":[1,1,23,40],"nBranches":6,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongoose/lib/schema/operators/bitwise.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongoose/lib/schema/operators/bitwise_jalangi_.js","code":"/*!\n * Module requirements.\n */\n\nvar CastError = require('../../error/cast');\n\n/*!\n * ignore\n */\n\nfunction handleBitwiseOperator(val) {\n  var _this = this;\n  if (Array.isArray(val)) {\n    return val.map(function(v) {\n      return _castNumber(_this, v);\n    });\n  } else if (Buffer.isBuffer(val)) {\n    return val;\n  } else {\n    // Assume trying to cast to number\n    return _castNumber(_this, val);\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _castNumber(_this, num) {\n  var v = Number(num);\n  if (isNaN(v)) {\n    throw new CastError('number', num, _this.path);\n  }\n  return v;\n}\n\nmodule.exports = handleBitwiseOperator;\n"};
jalangiLabel3487:
    while (true) {
        try {
            J$.Se(633, '/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongoose/lib/schema/operators/bitwise_jalangi_.js', '/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongoose/lib/schema/operators/bitwise.js');
            function handleBitwiseOperator(val) {
                jalangiLabel3485:
                    while (true) {
                        try {
                            J$.Fe(377, arguments.callee, this, arguments);
                            arguments = J$.N(385, 'arguments', arguments, 4);
                            val = J$.N(393, 'val', val, 4);
                            J$.N(401, '_this', _this, 0);
                            var _this = J$.X1(137, J$.W(129, '_this', J$.R(121, 'this', this, 0), _this, 1));
                            if (J$.X1(721, J$.C(16, J$.M(161, J$.R(145, 'Array', Array, 2), 'isArray', 0)(J$.R(153, 'val', val, 0))))) {
                                return J$.X1(273, J$.Rt(265, J$.M(257, J$.R(169, 'val', val, 0), 'map', 0)(J$.T(249, function (v) {
                                    jalangiLabel3484:
                                        while (true) {
                                            try {
                                                J$.Fe(225, arguments.callee, this, arguments);
                                                arguments = J$.N(233, 'arguments', arguments, 4);
                                                v = J$.N(241, 'v', v, 4);
                                                return J$.X1(217, J$.Rt(209, J$.F(201, J$.R(177, '_castNumber', _castNumber, 1), 0)(J$.R(185, '_this', _this, 0), J$.R(193, 'v', v, 0))));
                                            } catch (J$e) {
                                                J$.Ex(697, J$e);
                                            } finally {
                                                if (J$.Fr(705))
                                                    continue jalangiLabel3484;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false, 225))));
                            } else if (J$.X1(713, J$.C(8, J$.M(297, J$.R(281, 'Buffer', Buffer, 2), 'isBuffer', 0)(J$.R(289, 'val', val, 0))))) {
                                return J$.X1(321, J$.Rt(313, J$.R(305, 'val', val, 0)));
                            } else {
                                return J$.X1(369, J$.Rt(361, J$.F(353, J$.R(329, '_castNumber', _castNumber, 1), 0)(J$.R(337, '_this', _this, 0), J$.R(345, 'val', val, 0))));
                            }
                        } catch (J$e) {
                            J$.Ex(729, J$e);
                        } finally {
                            if (J$.Fr(737))
                                continue jalangiLabel3485;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function _castNumber(_this, num) {
                jalangiLabel3486:
                    while (true) {
                        try {
                            J$.Fe(561, arguments.callee, this, arguments);
                            arguments = J$.N(569, 'arguments', arguments, 4);
                            _this = J$.N(577, '_this', _this, 4);
                            num = J$.N(585, 'num', num, 4);
                            J$.N(593, 'v', v, 0);
                            var v = J$.X1(441, J$.W(433, 'v', J$.F(425, J$.R(409, 'Number', Number, 2), 0)(J$.R(417, 'num', num, 0)), v, 1));
                            if (J$.X1(745, J$.C(24, J$.F(465, J$.R(449, 'isNaN', isNaN, 2), 0)(J$.R(457, 'v', v, 0))))) {
                                throw J$.X1(529, J$.Th(521, J$.F(513, J$.R(473, 'CastError', CastError, 1), 1)(J$.T(481, 'number', 21, false), J$.R(489, 'num', num, 0), J$.G(505, J$.R(497, '_this', _this, 0), 'path', 0))));
                            }
                            return J$.X1(553, J$.Rt(545, J$.R(537, 'v', v, 0)));
                        } catch (J$e) {
                            J$.Ex(753, J$e);
                        } finally {
                            if (J$.Fr(761))
                                continue jalangiLabel3486;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(641, '__secret__S$', __secret__S$, 0);
            J$.N(649, '__secret__traits__', __secret__traits__, 0);
            J$.N(657, 'CastError', CastError, 0);
            handleBitwiseOperator = J$.N(673, 'handleBitwiseOperator', J$.T(665, handleBitwiseOperator, 12, false, 377), 0);
            _castNumber = J$.N(689, '_castNumber', J$.T(681, _castNumber, 12, false, 561), 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            var CastError = J$.X1(113, J$.W(105, 'CastError', J$.F(97, J$.R(81, 'require', require, 2), 0)(J$.T(89, '../../error/cast', 21, false)), CastError, 3));
            J$.X1(625, J$.P(617, J$.R(601, 'module', module, 2), 'exports', J$.R(609, 'handleBitwiseOperator', handleBitwiseOperator, 1), 0));
        } catch (J$e) {
            J$.Ex(769, J$e);
        } finally {
            if (J$.Sr(777)) {
                J$.L();
                continue jalangiLabel3487;
            } else {
                J$.L();
                break jalangiLabel3487;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
