J$.iids = {"8":[20,19,20,40],"9":[1,20,1,27],"10":[18,16,18,29],"16":[17,9,17,50],"17":[1,28,1,32],"18":[20,17,20,41],"24":[26,13,26,26],"25":[1,20,1,33],"26":[20,16,20,41],"32":[29,9,29,58],"33":[1,20,1,33],"34":[26,13,26,26],"40":[30,13,30,38],"41":[1,20,1,33],"42":[30,13,30,38],"48":[36,20,36,42],"49":[2,26,2,38],"50":[36,20,36,42],"56":[34,13,34,35],"57":[2,26,2,45],"58":[53,13,53,19],"64":[40,21,40,38],"65":[2,26,2,45],"66":[53,23,53,46],"72":[25,9,25,50],"73":[2,26,2,45],"74":[60,16,60,39],"80":[46,9,46,27],"81":[3,29,3,36],"82":[65,13,65,34],"88":[46,9,46,27],"89":[3,37,3,58],"90":[65,13,65,47],"96":[49,9,49,40],"97":[3,29,3,59],"98":[71,9,71,23],"104":[49,9,49,40],"105":[3,29,3,59],"106":[73,16,73,28],"112":[53,13,53,46],"113":[3,29,3,59],"114":[74,9,74,25],"120":[53,13,53,46],"121":[4,13,4,20],"122":[74,29,74,45],"128":[65,13,65,47],"129":[4,21,4,31],"130":[75,13,75,30],"136":[60,16,60,39],"137":[4,13,4,32],"138":[101,9,101,31],"144":[52,9,52,31],"145":[4,13,4,32],"146":[103,13,103,21],"152":[71,9,71,23],"153":[4,13,4,32],"154":[104,29,104,57],"160":[74,9,74,45],"161":[5,22,5,29],"162":[104,29,104,75],"168":[74,9,74,69],"169":[5,30,5,40],"176":[75,13,75,30],"177":[5,22,5,41],"184":[74,9,74,69],"185":[5,22,5,48],"192":[103,13,103,21],"193":[5,22,5,48],"200":[101,9,101,31],"201":[5,22,5,48],"209":[6,18,6,25],"217":[6,26,6,41],"225":[6,18,6,42],"233":[6,18,6,42],"241":[6,18,6,42],"249":[7,14,7,28],"257":[7,14,7,35],"265":[7,14,7,35],"273":[7,14,7,35],"281":[8,17,8,27],"289":[8,17,8,37],"297":[8,17,8,37],"305":[8,17,8,37],"313":[11,5,11,15],"321":[11,21,11,25],"329":[11,27,11,30],"337":[11,32,11,39],"345":[11,41,11,49],"353":[11,5,11,50],"355":[11,5,11,20],"361":[11,5,11,51],"369":[10,1,12,2],"377":[10,1,12,2],"385":[10,1,12,2],"393":[10,1,12,2],"401":[13,1,13,13],"409":[13,27,13,35],"417":[13,1,13,35],"425":[13,1,13,36],"433":[14,1,14,13],"441":[14,26,14,32],"449":[14,40,14,50],"457":[14,40,14,60],"465":[14,26,14,61],"467":[14,26,14,39],"473":[14,1,14,61],"481":[14,1,14,62],"489":[15,1,15,13],"497":[15,1,15,23],"505":[15,38,15,50],"513":[15,1,15,50],"521":[15,1,15,51],"529":[16,1,16,13],"537":[16,1,16,23],"545":[17,9,17,19],"553":[17,27,17,31],"561":[17,33,17,38],"569":[17,40,17,43],"577":[17,45,17,49],"585":[17,9,17,50],"587":[17,9,17,26],"593":[18,16,18,20],"601":[18,24,18,29],"609":[18,16,18,29],"617":[18,9,18,30],"625":[20,19,20,24],"633":[20,28,20,33],"641":[20,28,20,40],"649":[20,16,20,41],"657":[20,9,20,42],"665":[16,40,22,2],"673":[16,40,22,2],"681":[16,40,22,2],"689":[16,40,22,2],"697":[16,40,22,2],"705":[16,1,22,2],"713":[16,1,22,3],"721":[23,1,23,13],"729":[23,1,23,23],"737":[25,9,25,19],"745":[25,27,25,31],"753":[25,33,25,38],"761":[25,40,25,43],"769":[25,45,25,49],"777":[25,9,25,50],"779":[25,9,25,26],"785":[26,13,26,17],"793":[26,21,26,26],"801":[27,20,27,25],"809":[27,20,27,25],"817":[27,13,27,26],"825":[29,9,29,17],"833":[29,33,29,40],"841":[29,41,29,56],"849":[29,33,29,57],"857":[29,33,29,57],"865":[29,9,29,59],"873":[30,13,30,18],"881":[30,30,30,38],"889":[31,13,31,18],"897":[31,13,31,22],"905":[31,38,31,42],"913":[31,13,31,42],"921":[31,13,31,43],"929":[32,20,32,25],"937":[32,20,32,25],"945":[32,13,32,26],"953":[34,13,34,19],"961":[34,29,34,34],"969":[34,13,34,35],"971":[34,13,34,28],"977":[35,20,35,25],"985":[35,20,35,25],"993":[35,13,35,26],"1001":[36,21,36,26],"1009":[36,36,36,41],"1017":[36,21,36,42],"1019":[36,21,36,35],"1025":[37,23,37,32],"1033":[37,33,37,41],"1041":[37,43,37,48],"1049":[37,50,37,54],"1057":[37,50,37,59],"1065":[37,19,37,60],"1073":[37,19,37,60],"1081":[37,13,37,61],"1089":[39,20,39,23],"1097":[39,36,39,40],"1105":[39,36,39,45],"1113":[39,20,39,46],"1115":[39,20,39,35],"1121":[39,20,39,46],"1129":[39,20,39,46],"1137":[40,21,40,24],"1145":[40,21,40,38],"1153":[40,41,40,44],"1161":[40,41,40,60],"1163":[40,41,40,58],"1169":[40,63,40,66],"1177":[40,21,40,66],"1185":[40,21,40,66],"1193":[41,19,41,24],"1201":[41,35,41,39],"1209":[41,41,41,45],"1217":[41,19,41,46],"1219":[41,19,41,34],"1225":[41,19,41,46],"1233":[41,19,41,46],"1241":[42,19,42,22],"1249":[42,19,42,30],"1257":[42,37,42,42],"1265":[42,15,42,43],"1267":[42,19,42,36],"1273":[42,15,42,43],"1281":[42,9,42,44],"1289":[43,9,43,12],"1297":[43,9,43,16],"1305":[43,32,43,36],"1313":[43,9,43,36],"1321":[43,9,43,37],"1329":[44,16,44,19],"1337":[44,16,44,19],"1345":[44,9,44,20],"1353":[46,9,46,14],"1361":[46,18,46,23],"1369":[46,18,46,27],"1377":[47,17,47,22],"1385":[47,17,47,26],"1393":[47,17,47,26],"1401":[47,9,47,27],"1409":[49,9,49,14],"1417":[49,18,49,23],"1425":[49,18,49,40],"1433":[50,16,50,21],"1441":[50,16,50,21],"1449":[50,9,50,22],"1457":[52,9,52,15],"1465":[52,25,52,30],"1473":[52,9,52,31],"1475":[52,9,52,24],"1481":[53,14,53,19],"1489":[53,24,53,29],"1497":[53,24,53,46],"1505":[54,25,54,39],"1513":[54,40,54,45],"1521":[55,17,55,21],"1529":[55,17,55,26],"1537":[56,17,56,20],"1545":[54,47,57,14],"1553":[54,21,57,15],"1561":[54,21,57,15],"1569":[54,13,57,16],"1577":[59,16,59,21],"1585":[59,16,59,21],"1593":[59,9,59,22],"1601":[60,16,60,21],"1609":[60,33,60,39],"1617":[61,19,61,33],"1625":[61,34,61,39],"1633":[61,46,61,50],"1641":[61,34,61,51],"1643":[61,34,61,45],"1649":[62,13,62,17],"1657":[62,13,62,22],"1665":[63,13,63,16],"1673":[61,53,64,10],"1681":[61,15,64,11],"1689":[61,15,64,11],"1697":[61,9,64,12],"1705":[65,20,65,25],"1713":[65,20,65,34],"1721":[65,39,65,47],"1729":[66,23,66,32],"1737":[66,33,66,41],"1745":[66,43,66,48],"1753":[66,50,66,54],"1761":[66,50,66,59],"1769":[66,19,66,60],"1777":[66,19,66,60],"1785":[66,13,66,61],"1793":[68,9,68,12],"1801":[68,24,68,29],"1809":[68,24,68,38],"1817":[68,9,68,38],"1825":[68,9,68,39],"1833":[69,16,69,19],"1841":[69,16,69,19],"1849":[69,9,69,20],"1857":[71,9,71,13],"1865":[71,18,71,23],"1873":[72,16,72,21],"1881":[72,16,72,21],"1889":[72,9,72,22],"1897":[73,23,73,28],"1905":[73,16,73,28],"1913":[73,16,73,28],"1921":[74,9,74,17],"1929":[74,21,74,25],"1937":[74,29,74,37],"1945":[74,41,74,45],"1953":[74,49,74,54],"1961":[74,63,74,68],"1969":[74,49,74,69],"1971":[74,49,74,62],"1977":[75,13,75,17],"1985":[75,22,75,30],"1993":[76,22,76,27],"2001":[76,21,76,28],"2009":[76,21,76,28],"2017":[76,13,76,29],"2025":[78,19,78,33],"2033":[78,34,78,39],"2041":[79,13,79,17],"2049":[79,13,79,22],"2057":[80,13,80,16],"2065":[78,41,81,10],"2073":[78,15,81,11],"2081":[78,15,81,11],"2089":[78,9,81,12],"2097":[82,16,82,19],"2105":[82,16,82,19],"2113":[82,9,82,20],"2121":[84,15,84,24],"2129":[84,25,84,33],"2137":[84,35,84,40],"2145":[84,42,84,46],"2153":[84,42,84,51],"2161":[84,11,84,52],"2169":[84,11,84,52],"2177":[84,5,84,53],"2185":[23,31,85,2],"2193":[23,31,85,2],"2201":[23,31,85,2],"2209":[23,31,85,2],"2217":[23,31,85,2],"2225":[23,31,85,2],"2233":[23,31,85,2],"2241":[23,31,85,2],"2249":[23,31,85,2],"2257":[23,31,85,2],"2265":[23,31,85,2],"2273":[23,1,85,2],"2281":[23,1,85,3],"2289":[87,12,87,16],"2297":[87,30,87,33],"2305":[87,12,87,34],"2307":[87,12,87,29],"2313":[87,12,87,34],"2321":[87,5,87,35],"2329":[86,1,88,2],"2337":[86,1,88,2],"2345":[86,1,88,2],"2353":[89,1,89,13],"2361":[89,1,89,23],"2369":[89,47,89,52],"2377":[89,61,89,71],"2385":[89,61,89,81],"2393":[89,61,89,102],"2401":[90,22,90,43],"2409":[91,22,91,43],"2417":[92,20,92,41],"2425":[93,20,93,41],"2433":[94,12,94,24],"2441":[95,13,95,25],"2449":[96,12,96,24],"2457":[97,13,97,25],"2465":[89,104,98,2],"2473":[89,47,98,3],"2475":[89,47,89,60],"2481":[89,1,98,3],"2489":[89,1,98,4],"2497":[99,1,99,13],"2505":[99,1,99,23],"2513":[101,9,101,18],"2521":[101,9,101,25],"2529":[101,30,101,31],"2537":[102,19,102,23],"2545":[102,19,102,44],"2553":[102,45,102,57],"2561":[102,19,102,58],"2569":[102,19,102,58],"2577":[102,9,102,59],"2585":[103,14,103,21],"2593":[104,23,104,28],"2601":[104,29,104,42],"2609":[104,45,104,57],"2617":[104,60,104,75],"2625":[104,19,104,76],"2633":[104,19,104,76],"2641":[104,13,104,77],"2649":[105,16,105,23],"2657":[105,29,105,33],"2665":[105,35,105,38],"2673":[105,16,105,39],"2675":[105,16,105,28],"2681":[105,16,105,39],"2689":[105,9,105,40],"2697":[107,15,107,27],"2705":[107,15,107,27],"2713":[107,9,107,28],"2721":[108,16,108,20],"2729":[108,26,108,29],"2737":[108,16,108,30],"2739":[108,16,108,25],"2745":[108,16,108,41],"2747":[108,16,108,39],"2753":[108,16,108,41],"2761":[108,9,108,42],"2769":[99,39,110,2],"2777":[99,39,110,2],"2785":[99,39,110,2],"2793":[99,39,110,2],"2801":[99,39,110,2],"2809":[99,39,110,2],"2817":[99,1,110,2],"2825":[99,1,110,3],"2833":[111,1,111,7],"2841":[111,18,111,30],"2849":[111,1,111,30],"2857":[111,1,111,31],"2865":[1,1,111,31],"2873":[1,1,111,31],"2881":[1,1,111,31],"2889":[1,1,111,31],"2897":[1,1,111,31],"2905":[1,1,111,31],"2913":[1,1,111,31],"2921":[1,1,111,31],"2929":[1,1,111,31],"2937":[1,1,111,31],"2945":[10,1,12,2],"2953":[1,1,111,31],"2961":[86,1,88,2],"2969":[1,1,111,31],"2977":[10,1,12,2],"2985":[10,1,12,2],"2993":[17,5,21,6],"3001":[16,40,22,2],"3009":[16,40,22,2],"3017":[26,9,28,10],"3025":[30,9,33,10],"3033":[36,16,38,10],"3041":[34,9,38,10],"3049":[40,21,40,66],"3057":[25,5,45,6],"3065":[46,5,48,6],"3073":[49,5,51,6],"3081":[53,9,58,10],"3089":[65,9,67,10],"3097":[60,12,70,6],"3105":[52,5,70,6],"3113":[71,5,72,22],"3121":[75,9,77,10],"3129":[74,5,83,6],"3137":[23,31,85,2],"3145":[23,31,85,2],"3153":[86,1,88,2],"3161":[86,1,88,2],"3169":[103,9,104,77],"3177":[101,5,109,6],"3185":[99,39,110,2],"3193":[99,39,110,2],"3201":[1,1,111,31],"3209":[1,1,111,31],"nBranches":50,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongoose/lib/schema/buffer.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongoose/lib/schema/buffer_jalangi_.js","code":"/*!\n * Module dependencies.\n */\n\nvar handleBitwiseOperator = require('./operators/bitwise');\nvar utils = require('../utils');\n\nvar MongooseBuffer = require('../types').Buffer;\nvar SchemaType = require('../schematype');\n\nvar Binary = MongooseBuffer.Binary;\nvar CastError = SchemaType.CastError;\nvar Document;\n\n/**\n * Buffer SchemaType constructor\n *\n * @param {String} key\n * @param {SchemaType} cast\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBuffer(key, options) {\n  SchemaType.call(this, key, options, 'Buffer');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBuffer.schemaName = 'Buffer';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBuffer.prototype = Object.create( SchemaType.prototype );\nSchemaBuffer.prototype.constructor = SchemaBuffer;\n\n/**\n * Check required\n *\n * @api private\n */\n\nSchemaBuffer.prototype.checkRequired = function(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return null != value;\n  } else {\n    return !!(value && value.length);\n  }\n};\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\nSchemaBuffer.prototype.cast = function(value, doc, init) {\n  var ret;\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (null == value) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if (Buffer.isBuffer(value)) {\n      return value;\n    } else if (!utils.isObject(value)) {\n      throw new CastError('buffer', value, this.path);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    var path = doc.$__fullPath(this.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    var pop = owner.populated(path, true);\n    ret = new pop.options.model(value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  // documents\n  if (value && value._id) {\n    value = value._id;\n  }\n\n  if (value && value.isMongooseBuffer) {\n    return value;\n  }\n\n  if (Buffer.isBuffer(value)) {\n    if (!value || !value.isMongooseBuffer) {\n      value = new MongooseBuffer(value, [this.path, doc]);\n    }\n\n    return value;\n  } else if (value instanceof Binary) {\n    ret = new MongooseBuffer(value.value(true), [this.path, doc]);\n    if (typeof value.sub_type !== 'number') {\n      throw new CastError('buffer', value, this.path);\n    }\n    ret._subtype = value.sub_type;\n    return ret;\n  }\n\n  if (null === value) return value;\n\n  var type = typeof value;\n  if ('string' == type || 'number' == type || Array.isArray(value)) {\n    if (type === 'number') {\n      value = [value];\n    }\n    ret = new MongooseBuffer(value, [this.path, doc]);\n    return ret;\n  }\n\n  throw new CastError('buffer', value, this.path);\n};\n\n/*!\n * ignore\n */\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nSchemaBuffer.prototype.$conditionalHandlers =\n  utils.options(SchemaType.prototype.$conditionalHandlers, {\n    '$bitsAllClear': handleBitwiseOperator,\n    '$bitsAnyClear': handleBitwiseOperator,\n    '$bitsAllSet': handleBitwiseOperator,\n    '$bitsAnySet': handleBitwiseOperator,\n    '$gt' : handleSingle,\n    '$gte': handleSingle,\n    '$lt' : handleSingle,\n    '$lte': handleSingle\n  });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaBuffer.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler)\n      throw new Error(\"Can't use \" + $conditional + \" with Buffer.\");\n    return handler.call(this, val);\n  } else {\n    val = $conditional;\n    return this.cast(val).toObject();\n  }\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBuffer;\n"};
jalangiLabel3553:
    while (true) {
        try {
            J$.Se(2865, '/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongoose/lib/schema/buffer_jalangi_.js', '/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongoose/lib/schema/buffer.js');
            function SchemaBuffer(key, options) {
                jalangiLabel3548:
                    while (true) {
                        try {
                            J$.Fe(369, arguments.callee, this, arguments);
                            arguments = J$.N(377, 'arguments', arguments, 4);
                            key = J$.N(385, 'key', key, 4);
                            options = J$.N(393, 'options', options, 4);
                            J$.X1(361, J$.M(353, J$.R(313, 'SchemaType', SchemaType, 1), 'call', 0)(J$.R(321, 'this', this, 0), J$.R(329, 'key', key, 0), J$.R(337, 'options', options, 0), J$.T(345, 'Buffer', 21, false)));
                        } catch (J$e) {
                            J$.Ex(2977, J$e);
                        } finally {
                            if (J$.Fr(2985))
                                continue jalangiLabel3548;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function handleSingle(val) {
                jalangiLabel3551:
                    while (true) {
                        try {
                            J$.Fe(2329, arguments.callee, this, arguments);
                            arguments = J$.N(2337, 'arguments', arguments, 4);
                            val = J$.N(2345, 'val', val, 4);
                            return J$.X1(2321, J$.Rt(2313, J$.M(2305, J$.R(2289, 'this', this, 0), 'castForQuery', 0)(J$.R(2297, 'val', val, 0))));
                        } catch (J$e) {
                            J$.Ex(3153, J$e);
                        } finally {
                            if (J$.Fr(3161))
                                continue jalangiLabel3551;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2873, '__secret__S$', __secret__S$, 0);
            J$.N(2881, '__secret__traits__', __secret__traits__, 0);
            J$.N(2889, 'handleBitwiseOperator', handleBitwiseOperator, 0);
            J$.N(2897, 'utils', utils, 0);
            J$.N(2905, 'MongooseBuffer', MongooseBuffer, 0);
            J$.N(2913, 'SchemaType', SchemaType, 0);
            J$.N(2921, 'Binary', Binary, 0);
            J$.N(2929, 'CastError', CastError, 0);
            J$.N(2937, 'Document', Document, 0);
            SchemaBuffer = J$.N(2953, 'SchemaBuffer', J$.T(2945, SchemaBuffer, 12, false, 369), 0);
            handleSingle = J$.N(2969, 'handleSingle', J$.T(2961, handleSingle, 12, false, 2329), 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            var handleBitwiseOperator = J$.X1(113, J$.W(105, 'handleBitwiseOperator', J$.F(97, J$.R(81, 'require', require, 2), 0)(J$.T(89, './operators/bitwise', 21, false)), handleBitwiseOperator, 3));
            var utils = J$.X1(153, J$.W(145, 'utils', J$.F(137, J$.R(121, 'require', require, 2), 0)(J$.T(129, '../utils', 21, false)), utils, 3));
            var MongooseBuffer = J$.X1(201, J$.W(193, 'MongooseBuffer', J$.G(185, J$.F(177, J$.R(161, 'require', require, 2), 0)(J$.T(169, '../types', 21, false)), 'Buffer', 0), MongooseBuffer, 3));
            var SchemaType = J$.X1(241, J$.W(233, 'SchemaType', J$.F(225, J$.R(209, 'require', require, 2), 0)(J$.T(217, '../schematype', 21, false)), SchemaType, 3));
            var Binary = J$.X1(273, J$.W(265, 'Binary', J$.G(257, J$.R(249, 'MongooseBuffer', MongooseBuffer, 1), 'Binary', 0), Binary, 3));
            var CastError = J$.X1(305, J$.W(297, 'CastError', J$.G(289, J$.R(281, 'SchemaType', SchemaType, 1), 'CastError', 0), CastError, 3));
            var Document;
            J$.X1(425, J$.P(417, J$.R(401, 'SchemaBuffer', SchemaBuffer, 1), 'schemaName', J$.T(409, 'Buffer', 21, false), 0));
            J$.X1(481, J$.P(473, J$.R(433, 'SchemaBuffer', SchemaBuffer, 1), 'prototype', J$.M(465, J$.R(441, 'Object', Object, 2), 'create', 0)(J$.G(457, J$.R(449, 'SchemaType', SchemaType, 1), 'prototype', 0)), 0));
            J$.X1(521, J$.P(513, J$.G(497, J$.R(489, 'SchemaBuffer', SchemaBuffer, 1), 'prototype', 0), 'constructor', J$.R(505, 'SchemaBuffer', SchemaBuffer, 1), 0));
            J$.X1(713, J$.P(705, J$.G(537, J$.R(529, 'SchemaBuffer', SchemaBuffer, 1), 'prototype', 0), 'checkRequired', J$.T(697, function (value, doc) {
                jalangiLabel3549:
                    while (true) {
                        try {
                            J$.Fe(665, arguments.callee, this, arguments);
                            arguments = J$.N(673, 'arguments', arguments, 4);
                            value = J$.N(681, 'value', value, 4);
                            doc = J$.N(689, 'doc', doc, 4);
                            if (J$.X1(2993, J$.C(16, J$.M(585, J$.R(545, 'SchemaType', SchemaType, 1), '_isRef', 0)(J$.R(553, 'this', this, 0), J$.R(561, 'value', value, 0), J$.R(569, 'doc', doc, 0), J$.T(577, true, 23, false))))) {
                                return J$.X1(617, J$.Rt(609, J$.B(10, '!=', J$.T(593, null, 25, false), J$.R(601, 'value', value, 0), 0)));
                            } else {
                                return J$.X1(657, J$.Rt(649, J$.U(26, '!', J$.U(18, '!', J$.C(8, J$.R(625, 'value', value, 0)) ? J$.G(641, J$.R(633, 'value', value, 0), 'length', 0) : J$._()))));
                            }
                        } catch (J$e) {
                            J$.Ex(3001, J$e);
                        } finally {
                            if (J$.Fr(3009))
                                continue jalangiLabel3549;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 665), 0));
            J$.X1(2281, J$.P(2273, J$.G(729, J$.R(721, 'SchemaBuffer', SchemaBuffer, 1), 'prototype', 0), 'cast', J$.T(2265, function (value, doc, init) {
                jalangiLabel3550:
                    while (true) {
                        try {
                            J$.Fe(2185, arguments.callee, this, arguments);
                            arguments = J$.N(2193, 'arguments', arguments, 4);
                            value = J$.N(2201, 'value', value, 4);
                            doc = J$.N(2209, 'doc', doc, 4);
                            init = J$.N(2217, 'init', init, 4);
                            J$.N(2225, 'ret', ret, 0);
                            J$.N(2233, 'path', path, 0);
                            J$.N(2241, 'owner', owner, 0);
                            J$.N(2249, 'pop', pop, 0);
                            J$.N(2257, 'type', type, 0);
                            var ret;
                            if (J$.X1(3057, J$.C(72, J$.M(777, J$.R(737, 'SchemaType', SchemaType, 1), '_isRef', 0)(J$.R(745, 'this', this, 0), J$.R(753, 'value', value, 0), J$.R(761, 'doc', doc, 0), J$.R(769, 'init', init, 0))))) {
                                if (J$.X1(3017, J$.C(24, J$.B(34, '==', J$.T(785, null, 25, false), J$.R(793, 'value', value, 0), 0)))) {
                                    return J$.X1(817, J$.Rt(809, J$.R(801, 'value', value, 0)));
                                }
                                J$.X1(865, J$.C(32, J$.R(825, 'Document', Document, 1)) ? J$._() : Document = J$.W(857, 'Document', J$.F(849, J$.R(833, 'require', require, 2), 0)(J$.T(841, './../document', 21, false)), Document, 2));
                                if (J$.X1(3025, J$.C(40, J$.B(42, 'instanceof', J$.R(873, 'value', value, 0), J$.R(881, 'Document', Document, 1), 0)))) {
                                    J$.X1(921, J$.P(913, J$.G(897, J$.R(889, 'value', value, 0), '$__', 0), 'wasPopulated', J$.T(905, true, 23, false), 0));
                                    return J$.X1(945, J$.Rt(937, J$.R(929, 'value', value, 0)));
                                }
                                if (J$.X1(3041, J$.C(56, J$.M(969, J$.R(953, 'Buffer', Buffer, 2), 'isBuffer', 0)(J$.R(961, 'value', value, 0))))) {
                                    return J$.X1(993, J$.Rt(985, J$.R(977, 'value', value, 0)));
                                } else if (J$.X1(3033, J$.C(48, J$.U(50, '!', J$.M(1017, J$.R(1001, 'utils', utils, 1), 'isObject', 0)(J$.R(1009, 'value', value, 0)))))) {
                                    throw J$.X1(1081, J$.Th(1073, J$.F(1065, J$.R(1025, 'CastError', CastError, 1), 1)(J$.T(1033, 'buffer', 21, false), J$.R(1041, 'value', value, 0), J$.G(1057, J$.R(1049, 'this', this, 0), 'path', 0))));
                                }
                                var path = J$.X1(1129, J$.W(1121, 'path', J$.M(1113, J$.R(1089, 'doc', doc, 0), '$__fullPath', 0)(J$.G(1105, J$.R(1097, 'this', this, 0), 'path', 0)), path, 1));
                                var owner = J$.X1(1185, J$.W(1177, 'owner', J$.X1(3049, J$.C(64, J$.G(1145, J$.R(1137, 'doc', doc, 0), 'ownerDocument', 0))) ? J$.M(1161, J$.R(1153, 'doc', doc, 0), 'ownerDocument', 0)() : J$.R(1169, 'doc', doc, 0), owner, 1));
                                var pop = J$.X1(1233, J$.W(1225, 'pop', J$.M(1217, J$.R(1193, 'owner', owner, 0), 'populated', 0)(J$.R(1201, 'path', path, 0), J$.T(1209, true, 23, false)), pop, 1));
                                J$.X1(1281, ret = J$.W(1273, 'ret', J$.M(1265, J$.G(1249, J$.R(1241, 'pop', pop, 0), 'options', 0), 'model', 2)(J$.R(1257, 'value', value, 0)), ret, 0));
                                J$.X1(1321, J$.P(1313, J$.G(1297, J$.R(1289, 'ret', ret, 0), '$__', 0), 'wasPopulated', J$.T(1305, true, 23, false), 0));
                                return J$.X1(1345, J$.Rt(1337, J$.R(1329, 'ret', ret, 0)));
                            }
                            if (J$.X1(3065, J$.C(88, J$.C(80, J$.R(1353, 'value', value, 0)) ? J$.G(1369, J$.R(1361, 'value', value, 0), '_id', 0) : J$._()))) {
                                J$.X1(1401, value = J$.W(1393, 'value', J$.G(1385, J$.R(1377, 'value', value, 0), '_id', 0), value, 0));
                            }
                            if (J$.X1(3073, J$.C(104, J$.C(96, J$.R(1409, 'value', value, 0)) ? J$.G(1425, J$.R(1417, 'value', value, 0), 'isMongooseBuffer', 0) : J$._()))) {
                                return J$.X1(1449, J$.Rt(1441, J$.R(1433, 'value', value, 0)));
                            }
                            if (J$.X1(3105, J$.C(144, J$.M(1473, J$.R(1457, 'Buffer', Buffer, 2), 'isBuffer', 0)(J$.R(1465, 'value', value, 0))))) {
                                if (J$.X1(3081, J$.C(120, J$.C(112, J$.U(58, '!', J$.R(1481, 'value', value, 0))) ? J$._() : J$.U(66, '!', J$.G(1497, J$.R(1489, 'value', value, 0), 'isMongooseBuffer', 0))))) {
                                    J$.X1(1569, value = J$.W(1561, 'value', J$.F(1553, J$.R(1505, 'MongooseBuffer', MongooseBuffer, 1), 1)(J$.R(1513, 'value', value, 0), J$.T(1545, [
                                        J$.G(1529, J$.R(1521, 'this', this, 0), 'path', 0),
                                        J$.R(1537, 'doc', doc, 0)
                                    ], 10, false)), value, 0));
                                }
                                return J$.X1(1593, J$.Rt(1585, J$.R(1577, 'value', value, 0)));
                            } else if (J$.X1(3097, J$.C(136, J$.B(74, 'instanceof', J$.R(1601, 'value', value, 0), J$.R(1609, 'Binary', Binary, 1), 0)))) {
                                J$.X1(1697, ret = J$.W(1689, 'ret', J$.F(1681, J$.R(1617, 'MongooseBuffer', MongooseBuffer, 1), 1)(J$.M(1641, J$.R(1625, 'value', value, 0), 'value', 0)(J$.T(1633, true, 23, false)), J$.T(1673, [
                                    J$.G(1657, J$.R(1649, 'this', this, 0), 'path', 0),
                                    J$.R(1665, 'doc', doc, 0)
                                ], 10, false)), ret, 0));
                                if (J$.X1(3089, J$.C(128, J$.B(90, '!==', J$.U(82, 'typeof', J$.G(1713, J$.R(1705, 'value', value, 0), 'sub_type', 0)), J$.T(1721, 'number', 21, false), 0)))) {
                                    throw J$.X1(1785, J$.Th(1777, J$.F(1769, J$.R(1729, 'CastError', CastError, 1), 1)(J$.T(1737, 'buffer', 21, false), J$.R(1745, 'value', value, 0), J$.G(1761, J$.R(1753, 'this', this, 0), 'path', 0))));
                                }
                                J$.X1(1825, J$.P(1817, J$.R(1793, 'ret', ret, 0), '_subtype', J$.G(1809, J$.R(1801, 'value', value, 0), 'sub_type', 0), 0));
                                return J$.X1(1849, J$.Rt(1841, J$.R(1833, 'ret', ret, 0)));
                            }
                            if (J$.X1(3113, J$.C(152, J$.B(98, '===', J$.T(1857, null, 25, false), J$.R(1865, 'value', value, 0), 0))))
                                return J$.X1(1889, J$.Rt(1881, J$.R(1873, 'value', value, 0)));
                            var type = J$.X1(1913, J$.W(1905, 'type', J$.U(106, 'typeof', J$.R(1897, 'value', value, 0)), type, 1));
                            if (J$.X1(3129, J$.C(184, J$.C(168, J$.C(160, J$.B(114, '==', J$.T(1921, 'string', 21, false), J$.R(1929, 'type', type, 0), 0)) ? J$._() : J$.B(122, '==', J$.T(1937, 'number', 21, false), J$.R(1945, 'type', type, 0), 0)) ? J$._() : J$.M(1969, J$.R(1953, 'Array', Array, 2), 'isArray', 0)(J$.R(1961, 'value', value, 0))))) {
                                if (J$.X1(3121, J$.C(176, J$.B(130, '===', J$.R(1977, 'type', type, 0), J$.T(1985, 'number', 21, false), 0)))) {
                                    J$.X1(2017, value = J$.W(2009, 'value', J$.T(2001, [J$.R(1993, 'value', value, 0)], 10, false), value, 0));
                                }
                                J$.X1(2089, ret = J$.W(2081, 'ret', J$.F(2073, J$.R(2025, 'MongooseBuffer', MongooseBuffer, 1), 1)(J$.R(2033, 'value', value, 0), J$.T(2065, [
                                    J$.G(2049, J$.R(2041, 'this', this, 0), 'path', 0),
                                    J$.R(2057, 'doc', doc, 0)
                                ], 10, false)), ret, 0));
                                return J$.X1(2113, J$.Rt(2105, J$.R(2097, 'ret', ret, 0)));
                            }
                            throw J$.X1(2177, J$.Th(2169, J$.F(2161, J$.R(2121, 'CastError', CastError, 1), 1)(J$.T(2129, 'buffer', 21, false), J$.R(2137, 'value', value, 0), J$.G(2153, J$.R(2145, 'this', this, 0), 'path', 0))));
                        } catch (J$e) {
                            J$.Ex(3137, J$e);
                        } finally {
                            if (J$.Fr(3145))
                                continue jalangiLabel3550;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 2185), 0));
            J$.X1(2489, J$.P(2481, J$.G(2361, J$.R(2353, 'SchemaBuffer', SchemaBuffer, 1), 'prototype', 0), '$conditionalHandlers', J$.M(2473, J$.R(2369, 'utils', utils, 1), 'options', 0)(J$.G(2393, J$.G(2385, J$.R(2377, 'SchemaType', SchemaType, 1), 'prototype', 0), '$conditionalHandlers', 0), J$.T(2465, {
                '$bitsAllClear': J$.R(2401, 'handleBitwiseOperator', handleBitwiseOperator, 1),
                '$bitsAnyClear': J$.R(2409, 'handleBitwiseOperator', handleBitwiseOperator, 1),
                '$bitsAllSet': J$.R(2417, 'handleBitwiseOperator', handleBitwiseOperator, 1),
                '$bitsAnySet': J$.R(2425, 'handleBitwiseOperator', handleBitwiseOperator, 1),
                '$gt': J$.R(2433, 'handleSingle', handleSingle, 1),
                '$gte': J$.R(2441, 'handleSingle', handleSingle, 1),
                '$lt': J$.R(2449, 'handleSingle', handleSingle, 1),
                '$lte': J$.R(2457, 'handleSingle', handleSingle, 1)
            }, 11, false)), 0));
            J$.X1(2825, J$.P(2817, J$.G(2505, J$.R(2497, 'SchemaBuffer', SchemaBuffer, 1), 'prototype', 0), 'castForQuery', J$.T(2809, function ($conditional, val) {
                jalangiLabel3552:
                    while (true) {
                        try {
                            J$.Fe(2769, arguments.callee, this, arguments);
                            arguments = J$.N(2777, 'arguments', arguments, 4);
                            $conditional = J$.N(2785, '$conditional', $conditional, 4);
                            val = J$.N(2793, 'val', val, 4);
                            J$.N(2801, 'handler', handler, 0);
                            var handler;
                            if (J$.X1(3177, J$.C(200, J$.B(138, '===', J$.G(2521, J$.R(2513, 'arguments', arguments, 2), 'length', 0), J$.T(2529, 2, 22, false), 0)))) {
                                J$.X1(2577, handler = J$.W(2569, 'handler', J$.G(2561, J$.G(2545, J$.R(2537, 'this', this, 0), '$conditionalHandlers', 0), J$.R(2553, '$conditional', $conditional, 0), 4), handler, 0));
                                if (J$.X1(3169, J$.C(192, J$.U(146, '!', J$.R(2585, 'handler', handler, 0)))))
                                    throw J$.X1(2641, J$.Th(2633, J$.F(2625, J$.R(2593, 'Error', Error, 2), 1)(J$.B(162, '+', J$.B(154, '+', J$.T(2601, 'Can\'t use ', 21, false), J$.R(2609, '$conditional', $conditional, 0), 0), J$.T(2617, ' with Buffer.', 21, false), 0))));
                                return J$.X1(2689, J$.Rt(2681, J$.M(2673, J$.R(2649, 'handler', handler, 0), 'call', 0)(J$.R(2657, 'this', this, 0), J$.R(2665, 'val', val, 0))));
                            } else {
                                J$.X1(2713, val = J$.W(2705, 'val', J$.R(2697, '$conditional', $conditional, 0), val, 0));
                                return J$.X1(2761, J$.Rt(2753, J$.M(2745, J$.M(2737, J$.R(2721, 'this', this, 0), 'cast', 0)(J$.R(2729, 'val', val, 0)), 'toObject', 0)()));
                            }
                        } catch (J$e) {
                            J$.Ex(3185, J$e);
                        } finally {
                            if (J$.Fr(3193))
                                continue jalangiLabel3552;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 2769), 0));
            J$.X1(2857, J$.P(2849, J$.R(2833, 'module', module, 2), 'exports', J$.R(2841, 'SchemaBuffer', SchemaBuffer, 1), 0));
        } catch (J$e) {
            J$.Ex(3201, J$e);
        } finally {
            if (J$.Sr(3209)) {
                J$.L();
                continue jalangiLabel3553;
            } else {
                J$.L();
                break jalangiLabel3553;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
