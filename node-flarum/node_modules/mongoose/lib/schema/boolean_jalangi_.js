J$.iids = {"8":[12,12,12,45],"9":[1,20,1,27],"10":[12,12,12,26],"16":[15,9,15,23],"17":[1,28,1,32],"18":[12,30,12,45],"24":[17,9,17,22],"25":[1,20,1,33],"26":[15,9,15,23],"32":[19,9,19,25],"33":[1,20,1,33],"34":[17,9,17,22],"40":[21,9,21,26],"41":[1,20,1,33],"42":[19,9,19,25],"48":[30,13,30,20],"49":[2,26,2,38],"50":[21,9,21,26],"56":[28,9,28,31],"57":[2,26,2,45],"58":[23,13,23,19],"65":[2,26,2,45],"66":[23,12,23,19],"73":[2,26,2,45],"74":[28,9,28,31],"81":[3,13,3,20],"89":[3,21,3,31],"97":[3,13,3,32],"105":[3,13,3,32],"113":[3,13,3,32],"121":[4,18,4,25],"129":[4,26,4,41],"137":[4,18,4,42],"145":[4,18,4,42],"153":[4,18,4,42],"161":[6,5,6,15],"169":[6,21,6,25],"177":[6,27,6,31],"185":[6,33,6,40],"193":[6,42,6,51],"201":[6,5,6,52],"203":[6,5,6,20],"209":[6,5,6,53],"217":[5,1,7,2],"225":[5,1,7,2],"233":[5,1,7,2],"241":[5,1,7,2],"249":[8,1,8,14],"257":[8,28,8,37],"265":[8,1,8,37],"273":[8,1,8,38],"281":[9,1,9,14],"289":[9,27,9,33],"297":[9,41,9,51],"305":[9,41,9,61],"313":[9,27,9,62],"315":[9,27,9,40],"321":[9,1,9,62],"329":[9,1,9,63],"337":[10,1,10,14],"345":[10,1,10,24],"353":[10,39,10,52],"361":[10,1,10,52],"369":[10,1,10,53],"377":[11,1,11,14],"385":[11,1,11,24],"393":[12,12,12,17],"401":[12,22,12,26],"409":[12,30,12,35],"417":[12,40,12,45],"425":[12,12,12,45],"433":[12,5,12,46],"441":[11,41,13,2],"449":[11,41,13,2],"457":[11,41,13,2],"465":[11,41,13,2],"473":[11,1,13,2],"481":[11,1,13,3],"489":[14,1,14,14],"497":[14,1,14,24],"505":[15,9,15,13],"513":[15,18,15,23],"521":[16,16,16,21],"529":[16,16,16,21],"537":[16,9,16,22],"545":[17,9,17,12],"553":[17,17,17,22],"561":[18,16,18,21],"569":[18,16,18,21],"577":[18,9,18,22],"585":[19,9,19,15],"593":[19,20,19,25],"601":[20,16,20,20],"609":[20,16,20,20],"617":[20,9,20,21],"625":[21,9,21,16],"633":[21,21,21,26],"641":[22,16,22,21],"649":[22,16,22,21],"657":[22,9,22,22],"665":[23,14,23,19],"673":[23,12,23,19],"681":[23,5,23,20],"689":[14,32,24,2],"697":[14,32,24,2],"705":[14,32,24,2],"713":[14,32,24,2],"721":[14,1,24,2],"729":[14,1,24,3],"737":[25,1,25,14],"745":[25,38,25,43],"753":[25,52,25,62],"761":[25,52,25,72],"769":[25,52,25,93],"777":[25,95,25,97],"785":[25,38,25,98],"787":[25,38,25,51],"793":[25,1,25,98],"801":[25,1,25,99],"809":[26,1,26,14],"817":[26,1,26,24],"825":[28,9,28,10],"833":[28,15,28,24],"841":[28,15,28,31],"849":[29,19,29,32],"857":[29,19,29,53],"865":[29,54,29,66],"873":[29,19,29,67],"881":[29,19,29,67],"889":[29,9,29,68],"897":[30,13,30,20],"905":[31,20,31,27],"913":[31,33,31,37],"921":[31,39,31,42],"929":[31,20,31,43],"931":[31,20,31,32],"937":[31,20,31,43],"945":[31,13,31,44],"953":[33,16,33,20],"961":[33,26,33,29],"969":[33,16,33,30],"971":[33,16,33,25],"977":[33,16,33,30],"985":[33,9,33,31],"993":[35,12,35,16],"1001":[35,22,35,34],"1009":[35,12,35,35],"1011":[35,12,35,21],"1017":[35,12,35,35],"1025":[35,5,35,36],"1033":[26,40,36,2],"1041":[26,40,36,2],"1049":[26,40,36,2],"1057":[26,40,36,2],"1065":[26,40,36,2],"1073":[26,40,36,2],"1081":[26,1,36,2],"1089":[26,1,36,3],"1097":[37,1,37,7],"1105":[37,18,37,31],"1113":[37,1,37,31],"1121":[37,1,37,32],"1129":[1,1,37,32],"1137":[1,1,37,32],"1145":[1,1,37,32],"1153":[1,1,37,32],"1161":[1,1,37,32],"1169":[5,1,7,2],"1177":[1,1,37,32],"1185":[5,1,7,2],"1193":[5,1,7,2],"1201":[11,41,13,2],"1209":[11,41,13,2],"1217":[15,5,16,22],"1225":[17,5,18,22],"1233":[19,5,20,21],"1241":[21,5,22,22],"1249":[14,32,24,2],"1257":[14,32,24,2],"1265":[30,9,32,10],"1273":[28,5,34,6],"1281":[26,40,36,2],"1289":[26,40,36,2],"1297":[1,1,37,32],"1305":[1,1,37,32],"nBranches":14,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongoose/lib/schema/boolean.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongoose/lib/schema/boolean_jalangi_.js","code":"/*!\n * Module dependencies.\n */\n\nvar utils = require('../utils');\n\nvar SchemaType = require('../schematype');\n\n/**\n * Boolean SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBoolean(path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBoolean.schemaName = 'Boolean';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBoolean.prototype = Object.create( SchemaType.prototype );\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n\n/**\n * Required validator\n *\n * @api private\n */\n\nSchemaBoolean.prototype.checkRequired = function(value) {\n  return value === true || value === false;\n};\n\n/**\n * Casts to boolean\n *\n * @param {Object} value\n * @api private\n */\n\nSchemaBoolean.prototype.cast = function(value) {\n  if (null === value) return value;\n  if ('0' === value) return false;\n  if ('true' === value) return true;\n  if ('false' === value) return false;\n  return !!value;\n};\n\nSchemaBoolean.$conditionalHandlers =\n  utils.options(SchemaType.prototype.$conditionalHandlers, {});\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBoolean.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (2 === arguments.length) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this.cast(val);\n  }\n\n  return this.cast($conditional);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBoolean;\n"};
jalangiLabel3492:
    while (true) {
        try {
            J$.Se(1129, '/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongoose/lib/schema/boolean_jalangi_.js', '/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongoose/lib/schema/boolean.js');
            function SchemaBoolean(path, options) {
                jalangiLabel3488:
                    while (true) {
                        try {
                            J$.Fe(217, arguments.callee, this, arguments);
                            arguments = J$.N(225, 'arguments', arguments, 4);
                            path = J$.N(233, 'path', path, 4);
                            options = J$.N(241, 'options', options, 4);
                            J$.X1(209, J$.M(201, J$.R(161, 'SchemaType', SchemaType, 1), 'call', 0)(J$.R(169, 'this', this, 0), J$.R(177, 'path', path, 0), J$.R(185, 'options', options, 0), J$.T(193, 'Boolean', 21, false)));
                        } catch (J$e) {
                            J$.Ex(1185, J$e);
                        } finally {
                            if (J$.Fr(1193))
                                continue jalangiLabel3488;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1137, '__secret__S$', __secret__S$, 0);
            J$.N(1145, '__secret__traits__', __secret__traits__, 0);
            J$.N(1153, 'utils', utils, 0);
            J$.N(1161, 'SchemaType', SchemaType, 0);
            SchemaBoolean = J$.N(1177, 'SchemaBoolean', J$.T(1169, SchemaBoolean, 12, false, 217), 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            var utils = J$.X1(113, J$.W(105, 'utils', J$.F(97, J$.R(81, 'require', require, 2), 0)(J$.T(89, '../utils', 21, false)), utils, 3));
            var SchemaType = J$.X1(153, J$.W(145, 'SchemaType', J$.F(137, J$.R(121, 'require', require, 2), 0)(J$.T(129, '../schematype', 21, false)), SchemaType, 3));
            J$.X1(273, J$.P(265, J$.R(249, 'SchemaBoolean', SchemaBoolean, 1), 'schemaName', J$.T(257, 'Boolean', 21, false), 0));
            J$.X1(329, J$.P(321, J$.R(281, 'SchemaBoolean', SchemaBoolean, 1), 'prototype', J$.M(313, J$.R(289, 'Object', Object, 2), 'create', 0)(J$.G(305, J$.R(297, 'SchemaType', SchemaType, 1), 'prototype', 0)), 0));
            J$.X1(369, J$.P(361, J$.G(345, J$.R(337, 'SchemaBoolean', SchemaBoolean, 1), 'prototype', 0), 'constructor', J$.R(353, 'SchemaBoolean', SchemaBoolean, 1), 0));
            J$.X1(481, J$.P(473, J$.G(385, J$.R(377, 'SchemaBoolean', SchemaBoolean, 1), 'prototype', 0), 'checkRequired', J$.T(465, function (value) {
                jalangiLabel3489:
                    while (true) {
                        try {
                            J$.Fe(441, arguments.callee, this, arguments);
                            arguments = J$.N(449, 'arguments', arguments, 4);
                            value = J$.N(457, 'value', value, 4);
                            return J$.X1(433, J$.Rt(425, J$.C(8, J$.B(10, '===', J$.R(393, 'value', value, 0), J$.T(401, true, 23, false), 0)) ? J$._() : J$.B(18, '===', J$.R(409, 'value', value, 0), J$.T(417, false, 23, false), 0)));
                        } catch (J$e) {
                            J$.Ex(1201, J$e);
                        } finally {
                            if (J$.Fr(1209))
                                continue jalangiLabel3489;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 441), 0));
            J$.X1(729, J$.P(721, J$.G(497, J$.R(489, 'SchemaBoolean', SchemaBoolean, 1), 'prototype', 0), 'cast', J$.T(713, function (value) {
                jalangiLabel3490:
                    while (true) {
                        try {
                            J$.Fe(689, arguments.callee, this, arguments);
                            arguments = J$.N(697, 'arguments', arguments, 4);
                            value = J$.N(705, 'value', value, 4);
                            if (J$.X1(1217, J$.C(16, J$.B(26, '===', J$.T(505, null, 25, false), J$.R(513, 'value', value, 0), 0))))
                                return J$.X1(537, J$.Rt(529, J$.R(521, 'value', value, 0)));
                            if (J$.X1(1225, J$.C(24, J$.B(34, '===', J$.T(545, '0', 21, false), J$.R(553, 'value', value, 0), 0))))
                                return J$.X1(577, J$.Rt(569, J$.T(561, false, 23, false)));
                            if (J$.X1(1233, J$.C(32, J$.B(42, '===', J$.T(585, 'true', 21, false), J$.R(593, 'value', value, 0), 0))))
                                return J$.X1(617, J$.Rt(609, J$.T(601, true, 23, false)));
                            if (J$.X1(1241, J$.C(40, J$.B(50, '===', J$.T(625, 'false', 21, false), J$.R(633, 'value', value, 0), 0))))
                                return J$.X1(657, J$.Rt(649, J$.T(641, false, 23, false)));
                            return J$.X1(681, J$.Rt(673, J$.U(66, '!', J$.U(58, '!', J$.R(665, 'value', value, 0)))));
                        } catch (J$e) {
                            J$.Ex(1249, J$e);
                        } finally {
                            if (J$.Fr(1257))
                                continue jalangiLabel3490;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 689), 0));
            J$.X1(801, J$.P(793, J$.R(737, 'SchemaBoolean', SchemaBoolean, 1), '$conditionalHandlers', J$.M(785, J$.R(745, 'utils', utils, 1), 'options', 0)(J$.G(769, J$.G(761, J$.R(753, 'SchemaType', SchemaType, 1), 'prototype', 0), '$conditionalHandlers', 0), J$.T(777, {}, 11, false)), 0));
            J$.X1(1089, J$.P(1081, J$.G(817, J$.R(809, 'SchemaBoolean', SchemaBoolean, 1), 'prototype', 0), 'castForQuery', J$.T(1073, function ($conditional, val) {
                jalangiLabel3491:
                    while (true) {
                        try {
                            J$.Fe(1033, arguments.callee, this, arguments);
                            arguments = J$.N(1041, 'arguments', arguments, 4);
                            $conditional = J$.N(1049, '$conditional', $conditional, 4);
                            val = J$.N(1057, 'val', val, 4);
                            J$.N(1065, 'handler', handler, 0);
                            var handler;
                            if (J$.X1(1273, J$.C(56, J$.B(74, '===', J$.T(825, 2, 22, false), J$.G(841, J$.R(833, 'arguments', arguments, 2), 'length', 0), 0)))) {
                                J$.X1(889, handler = J$.W(881, 'handler', J$.G(873, J$.G(857, J$.R(849, 'SchemaBoolean', SchemaBoolean, 1), '$conditionalHandlers', 0), J$.R(865, '$conditional', $conditional, 0), 4), handler, 0));
                                if (J$.X1(1265, J$.C(48, J$.R(897, 'handler', handler, 0)))) {
                                    return J$.X1(945, J$.Rt(937, J$.M(929, J$.R(905, 'handler', handler, 0), 'call', 0)(J$.R(913, 'this', this, 0), J$.R(921, 'val', val, 0))));
                                }
                                return J$.X1(985, J$.Rt(977, J$.M(969, J$.R(953, 'this', this, 0), 'cast', 0)(J$.R(961, 'val', val, 0))));
                            }
                            return J$.X1(1025, J$.Rt(1017, J$.M(1009, J$.R(993, 'this', this, 0), 'cast', 0)(J$.R(1001, '$conditional', $conditional, 0))));
                        } catch (J$e) {
                            J$.Ex(1281, J$e);
                        } finally {
                            if (J$.Fr(1289))
                                continue jalangiLabel3491;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1033), 0));
            J$.X1(1121, J$.P(1113, J$.R(1097, 'module', module, 2), 'exports', J$.R(1105, 'SchemaBoolean', SchemaBoolean, 1), 0));
        } catch (J$e) {
            J$.Ex(1297, J$e);
        } finally {
            if (J$.Sr(1305)) {
                J$.L();
                continue jalangiLabel3492;
            } else {
                J$.L();
                break jalangiLabel3492;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
