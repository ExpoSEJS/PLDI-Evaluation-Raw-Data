J$.iids = {"8":[7,20,7,33],"9":[1,20,1,27],"10":[19,18,19,41],"16":[19,43,19,49],"17":[1,28,1,32],"18":[19,43,19,49],"24":[26,43,26,49],"25":[1,20,1,33],"26":[19,51,19,54],"33":[1,20,1,33],"41":[1,20,1,33],"42":[19,51,19,54],"49":[2,26,2,38],"50":[26,18,26,41],"57":[2,26,2,45],"58":[26,43,26,49],"65":[2,26,2,45],"66":[26,51,26,54],"73":[2,26,2,45],"81":[4,5,4,9],"82":[26,51,26,54],"89":[4,17,4,21],"97":[4,5,4,21],"105":[4,5,4,22],"113":[5,5,5,9],"121":[5,20,5,22],"129":[5,5,5,22],"137":[5,5,5,23],"145":[6,5,6,9],"153":[6,20,6,22],"161":[6,5,6,22],"169":[6,5,6,23],"177":[7,5,7,9],"185":[7,20,7,27],"193":[7,31,7,33],"201":[7,5,7,33],"209":[7,5,7,34],"217":[3,1,8,2],"225":[3,1,8,2],"233":[3,1,8,2],"241":[3,1,8,2],"249":[9,1,9,12],"257":[9,1,9,22],"265":[10,5,10,9],"273":[10,5,10,17],"281":[10,23,10,25],"289":[10,5,10,26],"291":[10,5,10,22],"297":[10,5,10,27],"305":[11,12,11,16],"313":[11,12,11,16],"321":[11,5,11,17],"329":[9,29,12,2],"337":[9,29,12,2],"345":[9,29,12,2],"353":[9,29,12,2],"361":[9,1,12,2],"369":[9,1,12,3],"377":[13,1,13,12],"385":[13,1,13,22],"393":[14,5,14,9],"401":[14,5,14,17],"409":[14,23,14,25],"417":[14,5,14,26],"419":[14,5,14,22],"425":[14,5,14,27],"433":[15,12,15,16],"441":[15,12,15,16],"449":[15,5,15,17],"457":[13,29,16,2],"465":[13,29,16,2],"473":[13,29,16,2],"481":[13,29,16,2],"489":[13,1,16,2],"497":[13,1,16,3],"505":[17,1,17,12],"513":[17,1,17,22],"521":[18,13,18,18],"529":[18,13,18,18],"537":[18,13,18,18],"545":[19,18,19,22],"553":[19,18,19,30],"561":[19,18,19,37],"569":[19,40,19,41],"577":[19,18,19,41],"585":[19,18,19,41],"593":[19,43,19,44],"601":[19,48,19,49],"617":[19,51,19,52],"625":[19,51,19,54],"641":[20,13,20,17],"649":[20,13,20,25],"657":[20,26,20,27],"665":[20,13,20,28],"673":[20,34,20,39],"681":[20,41,20,42],"689":[20,44,20,48],"697":[20,13,20,49],"699":[20,13,20,33],"705":[20,13,20,49],"713":[20,9,20,50],"721":[22,12,22,13],"729":[22,12,22,13],"737":[22,5,22,14],"745":[17,38,23,2],"753":[17,38,23,2],"761":[17,38,23,2],"769":[17,38,23,2],"777":[17,38,23,2],"785":[17,38,23,2],"793":[17,38,23,2],"801":[17,1,23,2],"809":[17,1,23,3],"817":[24,1,24,12],"825":[24,1,24,22],"833":[25,13,25,18],"841":[25,13,25,18],"849":[25,13,25,18],"857":[26,18,26,22],"865":[26,18,26,30],"873":[26,18,26,37],"881":[26,40,26,41],"889":[26,18,26,41],"897":[26,18,26,41],"905":[26,43,26,44],"913":[26,48,26,49],"929":[26,51,26,52],"937":[26,51,26,54],"953":[27,13,27,17],"961":[27,13,27,25],"969":[27,26,27,27],"977":[27,13,27,28],"985":[27,34,27,39],"993":[27,41,27,42],"1001":[27,44,27,48],"1009":[27,13,27,49],"1011":[27,13,27,33],"1017":[27,13,27,49],"1025":[27,9,27,50],"1033":[29,12,29,13],"1041":[29,12,29,13],"1049":[29,5,29,14],"1057":[24,38,30,2],"1065":[24,38,30,2],"1073":[24,38,30,2],"1081":[24,38,30,2],"1089":[24,38,30,2],"1097":[24,38,30,2],"1105":[24,38,30,2],"1113":[24,1,30,2],"1121":[24,1,30,3],"1129":[31,1,31,7],"1137":[31,18,31,29],"1145":[31,1,31,29],"1153":[31,1,31,30],"1161":[1,1,31,30],"1169":[1,1,31,30],"1177":[1,1,31,30],"1185":[3,1,8,2],"1193":[1,1,31,30],"1201":[3,1,8,2],"1209":[3,1,8,2],"1217":[9,29,12,2],"1225":[9,29,12,2],"1233":[13,29,16,2],"1241":[13,29,16,2],"1249":[19,5,21,6],"1257":[19,5,21,6],"1265":[17,38,23,2],"1273":[17,38,23,2],"1281":[26,5,28,6],"1289":[26,5,28,6],"1297":[24,38,30,2],"1305":[24,38,30,2],"1313":[1,1,31,30],"1321":[1,1,31,30],"nBranches":6,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongoose/lib/virtualtype.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongoose/lib/virtualtype_jalangi_.js","code":"\n/**\n * VirtualType constructor\n *\n * This is what mongoose uses to define virtual attributes via `Schema.prototype.virtual`.\n *\n * ####Example:\n *\n *     var fullname = schema.virtual('fullname');\n *     fullname instanceof mongoose.VirtualType // true\n *\n * @parma {Object} options\n * @api public\n */\n\nfunction VirtualType(options, name) {\n  this.path = name;\n  this.getters = [];\n  this.setters = [];\n  this.options = options || {};\n}\n\n/**\n * Defines a getter.\n *\n * ####Example:\n *\n *     var virtual = schema.virtual('fullname');\n *     virtual.get(function () {\n *       return this.name.first + ' ' + this.name.last;\n *     });\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api public\n */\n\nVirtualType.prototype.get = function(fn) {\n  this.getters.push(fn);\n  return this;\n};\n\n/**\n * Defines a setter.\n *\n * ####Example:\n *\n *     var virtual = schema.virtual('fullname');\n *     virtual.set(function (v) {\n *       var parts = v.split(' ');\n *       this.name.first = parts[0];\n *       this.name.last = parts[1];\n *     });\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api public\n */\n\nVirtualType.prototype.set = function(fn) {\n  this.setters.push(fn);\n  return this;\n};\n\n/**\n * Applies getters to `value` using optional `scope`.\n *\n * @param {Object} value\n * @param {Object} scope\n * @return {any} the value after applying all getters\n * @api public\n */\n\nVirtualType.prototype.applyGetters = function(value, scope) {\n  var v = value;\n  for (var l = this.getters.length - 1; l >= 0; l--) {\n    v = this.getters[l].call(scope, v, this);\n  }\n  return v;\n};\n\n/**\n * Applies setters to `value` using optional `scope`.\n *\n * @param {Object} value\n * @param {Object} scope\n * @return {any} the value after applying all setters\n * @api public\n */\n\nVirtualType.prototype.applySetters = function(value, scope) {\n  var v = value;\n  for (var l = this.setters.length - 1; l >= 0; l--) {\n    v = this.setters[l].call(scope, v, this);\n  }\n  return v;\n};\n\n/*!\n * exports\n */\n\nmodule.exports = VirtualType;\n"};
jalangiLabel3120:
    while (true) {
        try {
            J$.Se(1161, '/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongoose/lib/virtualtype_jalangi_.js', '/home/blake/ExpoSE/Targets/node-flarum/node_modules/mongoose/lib/virtualtype.js');
            function VirtualType(options, name) {
                jalangiLabel3115:
                    while (true) {
                        try {
                            J$.Fe(217, arguments.callee, this, arguments);
                            arguments = J$.N(225, 'arguments', arguments, 4);
                            options = J$.N(233, 'options', options, 4);
                            name = J$.N(241, 'name', name, 4);
                            J$.X1(105, J$.P(97, J$.R(81, 'this', this, 0), 'path', J$.R(89, 'name', name, 0), 0));
                            J$.X1(137, J$.P(129, J$.R(113, 'this', this, 0), 'getters', J$.T(121, [], 10, false), 0));
                            J$.X1(169, J$.P(161, J$.R(145, 'this', this, 0), 'setters', J$.T(153, [], 10, false), 0));
                            J$.X1(209, J$.P(201, J$.R(177, 'this', this, 0), 'options', J$.C(8, J$.R(185, 'options', options, 0)) ? J$._() : J$.T(193, {}, 11, false), 0));
                        } catch (J$e) {
                            J$.Ex(1201, J$e);
                        } finally {
                            if (J$.Fr(1209))
                                continue jalangiLabel3115;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1169, '__secret__S$', __secret__S$, 0);
            J$.N(1177, '__secret__traits__', __secret__traits__, 0);
            VirtualType = J$.N(1193, 'VirtualType', J$.T(1185, VirtualType, 12, false, 217), 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            J$.X1(369, J$.P(361, J$.G(257, J$.R(249, 'VirtualType', VirtualType, 1), 'prototype', 0), 'get', J$.T(353, function (fn) {
                jalangiLabel3116:
                    while (true) {
                        try {
                            J$.Fe(329, arguments.callee, this, arguments);
                            arguments = J$.N(337, 'arguments', arguments, 4);
                            fn = J$.N(345, 'fn', fn, 4);
                            J$.X1(297, J$.M(289, J$.G(273, J$.R(265, 'this', this, 0), 'getters', 0), 'push', 0)(J$.R(281, 'fn', fn, 0)));
                            return J$.X1(321, J$.Rt(313, J$.R(305, 'this', this, 0)));
                        } catch (J$e) {
                            J$.Ex(1217, J$e);
                        } finally {
                            if (J$.Fr(1225))
                                continue jalangiLabel3116;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 329), 0));
            J$.X1(497, J$.P(489, J$.G(385, J$.R(377, 'VirtualType', VirtualType, 1), 'prototype', 0), 'set', J$.T(481, function (fn) {
                jalangiLabel3117:
                    while (true) {
                        try {
                            J$.Fe(457, arguments.callee, this, arguments);
                            arguments = J$.N(465, 'arguments', arguments, 4);
                            fn = J$.N(473, 'fn', fn, 4);
                            J$.X1(425, J$.M(417, J$.G(401, J$.R(393, 'this', this, 0), 'setters', 0), 'push', 0)(J$.R(409, 'fn', fn, 0)));
                            return J$.X1(449, J$.Rt(441, J$.R(433, 'this', this, 0)));
                        } catch (J$e) {
                            J$.Ex(1233, J$e);
                        } finally {
                            if (J$.Fr(1241))
                                continue jalangiLabel3117;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 457), 0));
            J$.X1(809, J$.P(801, J$.G(513, J$.R(505, 'VirtualType', VirtualType, 1), 'prototype', 0), 'applyGetters', J$.T(793, function (value, scope) {
                jalangiLabel3118:
                    while (true) {
                        try {
                            J$.Fe(745, arguments.callee, this, arguments);
                            arguments = J$.N(753, 'arguments', arguments, 4);
                            value = J$.N(761, 'value', value, 4);
                            scope = J$.N(769, 'scope', scope, 4);
                            J$.N(777, 'v', v, 0);
                            J$.N(785, 'l', l, 0);
                            var v = J$.X1(537, J$.W(529, 'v', J$.R(521, 'value', value, 0), v, 1));
                            for (var l = J$.X1(585, J$.W(577, 'l', J$.B(10, '-', J$.G(561, J$.G(553, J$.R(545, 'this', this, 0), 'getters', 0), 'length', 0), J$.T(569, 1, 22, false), 0), l, 1)); J$.X1(1249, J$.C(16, J$.B(18, '>=', J$.R(593, 'l', l, 0), J$.T(601, 0, 22, false), 0))); J$.X1(1257, J$.B(42, '+', l = J$.W(625, 'l', J$.B(34, '-', J$.U(26, '+', J$.R(617, 'l', l, 0)), J$.T(609, 1, 22, false), 0), l, 0), J$.T(633, 1, 22, false), 0))) {
                                J$.X1(713, v = J$.W(705, 'v', J$.M(697, J$.G(665, J$.G(649, J$.R(641, 'this', this, 0), 'getters', 0), J$.R(657, 'l', l, 0), 4), 'call', 0)(J$.R(673, 'scope', scope, 0), J$.R(681, 'v', v, 0), J$.R(689, 'this', this, 0)), v, 0));
                            }
                            return J$.X1(737, J$.Rt(729, J$.R(721, 'v', v, 0)));
                        } catch (J$e) {
                            J$.Ex(1265, J$e);
                        } finally {
                            if (J$.Fr(1273))
                                continue jalangiLabel3118;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 745), 0));
            J$.X1(1121, J$.P(1113, J$.G(825, J$.R(817, 'VirtualType', VirtualType, 1), 'prototype', 0), 'applySetters', J$.T(1105, function (value, scope) {
                jalangiLabel3119:
                    while (true) {
                        try {
                            J$.Fe(1057, arguments.callee, this, arguments);
                            arguments = J$.N(1065, 'arguments', arguments, 4);
                            value = J$.N(1073, 'value', value, 4);
                            scope = J$.N(1081, 'scope', scope, 4);
                            J$.N(1089, 'v', v, 0);
                            J$.N(1097, 'l', l, 0);
                            var v = J$.X1(849, J$.W(841, 'v', J$.R(833, 'value', value, 0), v, 1));
                            for (var l = J$.X1(897, J$.W(889, 'l', J$.B(50, '-', J$.G(873, J$.G(865, J$.R(857, 'this', this, 0), 'setters', 0), 'length', 0), J$.T(881, 1, 22, false), 0), l, 1)); J$.X1(1281, J$.C(24, J$.B(58, '>=', J$.R(905, 'l', l, 0), J$.T(913, 0, 22, false), 0))); J$.X1(1289, J$.B(82, '+', l = J$.W(937, 'l', J$.B(74, '-', J$.U(66, '+', J$.R(929, 'l', l, 0)), J$.T(921, 1, 22, false), 0), l, 0), J$.T(945, 1, 22, false), 0))) {
                                J$.X1(1025, v = J$.W(1017, 'v', J$.M(1009, J$.G(977, J$.G(961, J$.R(953, 'this', this, 0), 'setters', 0), J$.R(969, 'l', l, 0), 4), 'call', 0)(J$.R(985, 'scope', scope, 0), J$.R(993, 'v', v, 0), J$.R(1001, 'this', this, 0)), v, 0));
                            }
                            return J$.X1(1049, J$.Rt(1041, J$.R(1033, 'v', v, 0)));
                        } catch (J$e) {
                            J$.Ex(1297, J$e);
                        } finally {
                            if (J$.Fr(1305))
                                continue jalangiLabel3119;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1057), 0));
            J$.X1(1153, J$.P(1145, J$.R(1129, 'module', module, 2), 'exports', J$.R(1137, 'VirtualType', VirtualType, 1), 0));
        } catch (J$e) {
            J$.Ex(1313, J$e);
        } finally {
            if (J$.Sr(1321)) {
                J$.L();
                continue jalangiLabel3120;
            } else {
                J$.L();
                break jalangiLabel3120;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
