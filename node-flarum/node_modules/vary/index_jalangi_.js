J$.iids = {"8":[8,9,8,35],"9":[1,20,1,27],"10":[8,9,8,22],"16":[11,9,11,15],"17":[1,28,1,32],"18":[8,9,8,35],"24":[14,18,14,39],"25":[1,20,1,33],"26":[11,9,11,15],"32":[16,13,16,39],"33":[1,20,1,33],"34":[14,18,14,39],"40":[15,21,15,38],"41":[1,20,1,33],"42":[15,21,15,38],"48":[20,9,20,23],"49":[2,26,2,38],"50":[15,40,15,43],"56":[25,9,25,63],"57":[2,26,2,45],"64":[25,9,25,63],"65":[2,26,2,45],"66":[15,40,15,43],"72":[32,19,32,22],"73":[2,26,2,45],"74":[20,9,20,23],"80":[30,13,30,37],"81":[3,1,3,13],"82":[25,33,25,35],"88":[28,21,28,38],"89":[3,1,3,14],"90":[25,9,25,35],"96":[41,9,41,31],"97":[4,1,4,7],"98":[25,61,25,63],"104":[41,9,41,49],"105":[4,18,4,22],"106":[25,39,25,63],"112":[41,9,41,49],"113":[4,1,4,22],"114":[28,21,28,38],"120":[44,15,44,42],"121":[4,1,4,23],"122":[28,40,28,43],"128":[45,18,45,36],"129":[5,1,5,7],"136":[46,9,46,36],"137":[5,1,5,15],"138":[28,40,28,43],"145":[5,25,5,31],"146":[30,35,30,37],"153":[5,1,5,31],"154":[30,13,30,37],"161":[5,1,5,32],"162":[32,25,32,35],"169":[6,18,6,60],"170":[32,25,32,47],"177":[6,18,6,60],"178":[41,9,41,13],"185":[6,18,6,60],"186":[41,17,41,31],"193":[8,16,8,22],"194":[41,35,41,49],"201":[8,27,8,35],"209":[9,19,9,28],"217":[9,29,9,58],"225":[9,15,9,59],"233":[9,15,9,59],"241":[9,9,9,60],"249":[11,10,11,15],"257":[12,19,12,28],"265":[12,29,12,57],"273":[12,15,12,58],"281":[12,15,12,58],"289":[12,9,12,59],"297":[14,19,14,24],"305":[14,33,14,38],"313":[14,19,14,39],"315":[14,19,14,32],"321":[14,42,14,47],"329":[14,48,14,54],"337":[14,55,14,60],"345":[14,48,14,61],"353":[14,42,14,62],"361":[14,65,14,70],"369":[14,18,14,70],"377":[14,18,14,70],"385":[15,18,15,19],"393":[15,18,15,19],"401":[15,18,15,19],"409":[15,21,15,22],"417":[15,25,15,31],"425":[15,25,15,38],"441":[15,40,15,41],"449":[15,40,15,43],"465":[16,13,16,23],"473":[16,29,16,35],"481":[16,36,16,37],"489":[16,29,16,38],"497":[16,13,16,39],"499":[16,13,16,28],"505":[17,23,17,32],"513":[17,33,17,76],"521":[17,19,17,77],"529":[17,19,17,77],"537":[17,13,17,78],"545":[20,9,20,15],"553":[20,20,20,23],"561":[21,16,21,22],"569":[21,16,21,22],"577":[21,9,21,23],"585":[23,15,23,21],"593":[23,15,23,21],"601":[23,15,23,21],"609":[24,16,24,21],"617":[24,22,24,28],"625":[24,22,24,42],"627":[24,22,24,40],"633":[24,16,24,43],"641":[24,16,24,43],"649":[24,16,24,43],"657":[25,9,25,15],"665":[25,24,25,27],"673":[25,9,25,28],"675":[25,9,25,23],"681":[25,34,25,35],"689":[25,39,25,43],"697":[25,52,25,55],"705":[25,39,25,56],"707":[25,39,25,51],"713":[25,62,25,63],"721":[26,16,26,19],"729":[26,16,26,19],"737":[26,9,26,20],"745":[28,18,28,19],"753":[28,18,28,19],"761":[28,18,28,19],"769":[28,21,28,22],"777":[28,25,28,31],"785":[28,25,28,38],"801":[28,40,28,41],"809":[28,40,28,43],"825":[29,19,29,25],"833":[29,26,29,27],"841":[29,19,29,28],"849":[29,19,29,42],"851":[29,19,29,40],"857":[29,19,29,42],"865":[29,19,29,42],"873":[30,13,30,17],"881":[30,26,30,29],"889":[30,13,30,30],"891":[30,13,30,25],"897":[30,36,30,37],"905":[31,13,31,17],"913":[31,23,31,26],"921":[31,13,31,27],"923":[31,13,31,22],"929":[31,13,31,28],"937":[32,19,32,22],"945":[32,25,32,28],"953":[32,31,32,35],"961":[32,38,32,44],"969":[32,45,32,46],"977":[32,38,32,47],"985":[32,50,32,56],"993":[32,57,32,58],"1001":[32,50,32,59],"1009":[32,19,32,59],"1017":[32,13,32,60],"1025":[35,12,35,15],"1033":[35,12,35,15],"1041":[35,5,35,16],"1049":[7,1,36,2],"1057":[7,1,36,2],"1065":[7,1,36,2],"1073":[7,1,36,2],"1081":[7,1,36,2],"1089":[7,1,36,2],"1097":[7,1,36,2],"1105":[7,1,36,2],"1113":[7,1,36,2],"1121":[38,12,38,18],"1129":[38,12,38,25],"1131":[38,12,38,23],"1137":[38,32,38,39],"1145":[38,12,38,40],"1147":[38,12,38,31],"1153":[38,12,38,40],"1161":[38,5,38,41],"1169":[37,1,39,2],"1177":[37,1,39,2],"1185":[37,1,39,2],"1193":[41,10,41,13],"1201":[41,18,41,21],"1209":[41,18,41,31],"1217":[41,36,41,39],"1225":[41,36,41,49],"1233":[42,19,42,28],"1241":[42,29,42,55],"1249":[42,15,42,56],"1257":[42,15,42,56],"1265":[42,9,42,57],"1273":[44,15,44,18],"1281":[44,29,44,35],"1289":[44,15,44,36],"1291":[44,15,44,28],"1297":[44,40,44,42],"1305":[44,15,44,42],"1313":[44,15,44,42],"1321":[45,18,45,23],"1329":[45,32,45,35],"1337":[45,18,45,36],"1339":[45,18,45,31],"1345":[45,39,45,42],"1353":[45,48,45,52],"1361":[45,39,45,53],"1363":[45,39,45,47],"1369":[45,56,45,62],"1377":[45,63,45,66],"1385":[45,56,45,67],"1393":[45,18,45,67],"1401":[45,18,45,67],"1409":[46,15,46,21],"1417":[46,22,46,28],"1425":[46,30,46,35],"1433":[46,15,46,36],"1441":[46,15,46,36],"1449":[47,9,47,12],"1457":[47,23,47,29],"1465":[47,31,47,34],"1473":[47,9,47,35],"1475":[47,9,47,22],"1481":[47,9,47,36],"1489":[40,1,49,2],"1497":[40,1,49,2],"1505":[40,1,49,2],"1513":[40,1,49,2],"1521":[40,1,49,2],"1529":[40,1,49,2],"1537":[1,1,49,2],"1545":[1,1,49,2],"1553":[1,1,49,2],"1561":[1,1,49,2],"1569":[7,1,36,2],"1577":[1,1,49,2],"1585":[37,1,39,2],"1593":[1,1,49,2],"1601":[40,1,49,2],"1609":[1,1,49,2],"1617":[8,5,10,6],"1625":[11,5,13,6],"1633":[14,18,14,70],"1641":[16,9,18,10],"1649":[15,5,19,6],"1657":[15,5,19,6],"1665":[20,5,22,6],"1673":[25,5,27,6],"1681":[32,19,32,59],"1689":[30,9,33,10],"1697":[28,5,34,6],"1705":[28,5,34,6],"1713":[7,1,36,2],"1721":[7,1,36,2],"1729":[37,1,39,2],"1737":[37,1,39,2],"1745":[41,5,43,6],"1753":[45,18,45,67],"1761":[46,5,48,6],"1769":[40,1,49,2],"1777":[40,1,49,2],"1785":[1,1,49,2],"1793":[1,1,49,2],"nBranches":34,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/vary/index.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/vary/index_jalangi_.js","code":"/*!\n * vary\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n */\n\nmodule.exports = vary;\nmodule.exports.append = append;\n\n/**\n * Variables.\n */\n\nvar separators = /[\\(\\)<>@,;:\\\\\"\\/\\[\\]\\?=\\{\\}\\u0020\\u0009]/;\n\n/**\n * Append a field to a vary header.\n *\n * @param {String} header\n * @param {String|Array} field\n * @return {String}\n * @api public\n */\n\nfunction append(header, field) {\n  if (typeof header !== 'string') {\n    throw new TypeError('header argument is required');\n  }\n\n  if (!field) {\n    throw new TypeError('field argument is required');\n  }\n\n  // get fields array\n  var fields = !Array.isArray(field)\n    ? parse(String(field))\n    : field;\n\n  // assert on invalid fields\n  for (var i = 0; i < fields.length; i++) {\n    if (separators.test(fields[i])) {\n      throw new TypeError('field argument contains an invalid header');\n    }\n  }\n\n  // existing, unspecified vary\n  if (header === '*') {\n    return header;\n  }\n\n  // enumerate current values\n  var val = header;\n  var vals = parse(header.toLowerCase());\n\n  // unspecified vary\n  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {\n    return '*';\n  }\n\n  for (var i = 0; i < fields.length; i++) {\n    var fld = fields[i].toLowerCase();\n\n    // append value (case-preserving)\n    if (vals.indexOf(fld) === -1) {\n      vals.push(fld);\n      val = val\n        ? val + ', ' + fields[i]\n        : fields[i];\n    }\n  }\n\n  return val;\n}\n\n/**\n * Parse a vary header into an array.\n *\n * @param {String} header\n * @return {Array}\n * @api private\n */\n\nfunction parse(header) {\n  return header.trim().split(/ *, */);\n}\n\n/**\n * Mark that a request is varied on a header field.\n *\n * @param {Object} res\n * @param {String|Array} field\n * @api public\n */\n\nfunction vary(res, field) {\n  if (!res || !res.getHeader || !res.setHeader) {\n    // quack quack\n    throw new TypeError('res argument is required');\n  }\n\n  // get existing header\n  var val = res.getHeader('Vary') || ''\n  var header = Array.isArray(val)\n    ? val.join(', ')\n    : String(val);\n\n  // set new header\n  if ((val = append(header, field))) {\n    res.setHeader('Vary', val);\n  }\n}\n"};
jalangiLabel624:
    while (true) {
        try {
            J$.Se(1537, '/home/blake/ExpoSE/Targets/node-flarum/node_modules/vary/index_jalangi_.js', '/home/blake/ExpoSE/Targets/node-flarum/node_modules/vary/index.js');
            function append(header, field) {
                jalangiLabel621:
                    while (true) {
                        try {
                            J$.Fe(1049, arguments.callee, this, arguments);
                            arguments = J$.N(1057, 'arguments', arguments, 4);
                            header = J$.N(1065, 'header', header, 4);
                            field = J$.N(1073, 'field', field, 4);
                            J$.N(1081, 'fields', fields, 0);
                            J$.N(1089, 'i', i, 0);
                            J$.N(1097, 'val', val, 0);
                            J$.N(1105, 'vals', vals, 0);
                            J$.N(1113, 'fld', fld, 0);
                            if (J$.X1(1617, J$.C(8, J$.B(18, '!==', J$.U(10, 'typeof', J$.R(193, 'header', header, 0)), J$.T(201, 'string', 21, false), 0)))) {
                                throw J$.X1(241, J$.Th(233, J$.F(225, J$.R(209, 'TypeError', TypeError, 2), 1)(J$.T(217, 'header argument is required', 21, false))));
                            }
                            if (J$.X1(1625, J$.C(16, J$.U(26, '!', J$.R(249, 'field', field, 0))))) {
                                throw J$.X1(289, J$.Th(281, J$.F(273, J$.R(257, 'TypeError', TypeError, 2), 1)(J$.T(265, 'field argument is required', 21, false))));
                            }
                            var fields = J$.X1(377, J$.W(369, 'fields', J$.X1(1633, J$.C(24, J$.U(34, '!', J$.M(313, J$.R(297, 'Array', Array, 2), 'isArray', 0)(J$.R(305, 'field', field, 0))))) ? J$.F(353, J$.R(321, 'parse', parse, 1), 0)(J$.F(345, J$.R(329, 'String', String, 2), 0)(J$.R(337, 'field', field, 0))) : J$.R(361, 'field', field, 0), fields, 1));
                            for (var i = J$.X1(401, J$.W(393, 'i', J$.T(385, 0, 22, false), i, 1)); J$.X1(1649, J$.C(40, J$.B(42, '<', J$.R(409, 'i', i, 0), J$.G(425, J$.R(417, 'fields', fields, 0), 'length', 0), 0))); J$.X1(1657, J$.B(66, '-', i = J$.W(449, 'i', J$.B(58, '+', J$.U(50, '+', J$.R(441, 'i', i, 0)), J$.T(433, 1, 22, false), 0), i, 0), J$.T(457, 1, 22, false), 0))) {
                                if (J$.X1(1641, J$.C(32, J$.M(497, J$.R(465, 'separators', separators, 1), 'test', 0)(J$.G(489, J$.R(473, 'fields', fields, 0), J$.R(481, 'i', i, 0), 4))))) {
                                    throw J$.X1(537, J$.Th(529, J$.F(521, J$.R(505, 'TypeError', TypeError, 2), 1)(J$.T(513, 'field argument contains an invalid header', 21, false))));
                                }
                            }
                            if (J$.X1(1665, J$.C(48, J$.B(74, '===', J$.R(545, 'header', header, 0), J$.T(553, '*', 21, false), 0)))) {
                                return J$.X1(577, J$.Rt(569, J$.R(561, 'header', header, 0)));
                            }
                            var val = J$.X1(601, J$.W(593, 'val', J$.R(585, 'header', header, 0), val, 1));
                            var vals = J$.X1(649, J$.W(641, 'vals', J$.F(633, J$.R(609, 'parse', parse, 1), 0)(J$.M(625, J$.R(617, 'header', header, 0), 'toLowerCase', 0)()), vals, 1));
                            if (J$.X1(1673, J$.C(64, J$.C(56, J$.B(90, '!==', J$.M(673, J$.R(657, 'fields', fields, 0), 'indexOf', 0)(J$.T(665, '*', 21, false)), J$.U(82, '-', J$.T(681, 1, 22, false)), 0)) ? J$._() : J$.B(106, '!==', J$.M(705, J$.R(689, 'vals', vals, 0), 'indexOf', 0)(J$.T(697, '*', 21, false)), J$.U(98, '-', J$.T(713, 1, 22, false)), 0)))) {
                                return J$.X1(737, J$.Rt(729, J$.T(721, '*', 21, false)));
                            }
                            for (var i = J$.X1(761, J$.W(753, 'i', J$.T(745, 0, 22, false), i, 1)); J$.X1(1697, J$.C(88, J$.B(114, '<', J$.R(769, 'i', i, 0), J$.G(785, J$.R(777, 'fields', fields, 0), 'length', 0), 0))); J$.X1(1705, J$.B(138, '-', i = J$.W(809, 'i', J$.B(130, '+', J$.U(122, '+', J$.R(801, 'i', i, 0)), J$.T(793, 1, 22, false), 0), i, 0), J$.T(817, 1, 22, false), 0))) {
                                var fld = J$.X1(865, J$.W(857, 'fld', J$.M(849, J$.G(841, J$.R(825, 'fields', fields, 0), J$.R(833, 'i', i, 0), 4), 'toLowerCase', 0)(), fld, 1));
                                if (J$.X1(1689, J$.C(80, J$.B(154, '===', J$.M(889, J$.R(873, 'vals', vals, 0), 'indexOf', 0)(J$.R(881, 'fld', fld, 0)), J$.U(146, '-', J$.T(897, 1, 22, false)), 0)))) {
                                    J$.X1(929, J$.M(921, J$.R(905, 'vals', vals, 0), 'push', 0)(J$.R(913, 'fld', fld, 0)));
                                    J$.X1(1017, val = J$.W(1009, 'val', J$.X1(1681, J$.C(72, J$.R(937, 'val', val, 0))) ? J$.B(170, '+', J$.B(162, '+', J$.R(945, 'val', val, 0), J$.T(953, ', ', 21, false), 0), J$.G(977, J$.R(961, 'fields', fields, 0), J$.R(969, 'i', i, 0), 4), 0) : J$.G(1001, J$.R(985, 'fields', fields, 0), J$.R(993, 'i', i, 0), 4), val, 0));
                                }
                            }
                            return J$.X1(1041, J$.Rt(1033, J$.R(1025, 'val', val, 0)));
                        } catch (J$e) {
                            J$.Ex(1713, J$e);
                        } finally {
                            if (J$.Fr(1721))
                                continue jalangiLabel621;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function parse(header) {
                jalangiLabel622:
                    while (true) {
                        try {
                            J$.Fe(1169, arguments.callee, this, arguments);
                            arguments = J$.N(1177, 'arguments', arguments, 4);
                            header = J$.N(1185, 'header', header, 4);
                            return J$.X1(1161, J$.Rt(1153, J$.M(1145, J$.M(1129, J$.R(1121, 'header', header, 0), 'trim', 0)(), 'split', 0)(J$.T(1137, / *, */, 14, false))));
                        } catch (J$e) {
                            J$.Ex(1729, J$e);
                        } finally {
                            if (J$.Fr(1737))
                                continue jalangiLabel622;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function vary(res, field) {
                jalangiLabel623:
                    while (true) {
                        try {
                            J$.Fe(1489, arguments.callee, this, arguments);
                            arguments = J$.N(1497, 'arguments', arguments, 4);
                            res = J$.N(1505, 'res', res, 4);
                            field = J$.N(1513, 'field', field, 4);
                            J$.N(1521, 'val', val, 0);
                            J$.N(1529, 'header', header, 0);
                            if (J$.X1(1745, J$.C(112, J$.C(104, J$.C(96, J$.U(178, '!', J$.R(1193, 'res', res, 0))) ? J$._() : J$.U(186, '!', J$.G(1209, J$.R(1201, 'res', res, 0), 'getHeader', 0))) ? J$._() : J$.U(194, '!', J$.G(1225, J$.R(1217, 'res', res, 0), 'setHeader', 0))))) {
                                throw J$.X1(1265, J$.Th(1257, J$.F(1249, J$.R(1233, 'TypeError', TypeError, 2), 1)(J$.T(1241, 'res argument is required', 21, false))));
                            }
                            var val = J$.X1(1313, J$.W(1305, 'val', J$.C(120, J$.M(1289, J$.R(1273, 'res', res, 0), 'getHeader', 0)(J$.T(1281, 'Vary', 21, false))) ? J$._() : J$.T(1297, '', 21, false), val, 1));
                            var header = J$.X1(1401, J$.W(1393, 'header', J$.X1(1753, J$.C(128, J$.M(1337, J$.R(1321, 'Array', Array, 2), 'isArray', 0)(J$.R(1329, 'val', val, 0)))) ? J$.M(1361, J$.R(1345, 'val', val, 0), 'join', 0)(J$.T(1353, ', ', 21, false)) : J$.F(1385, J$.R(1369, 'String', String, 2), 0)(J$.R(1377, 'val', val, 0)), header, 1));
                            if (J$.X1(1761, J$.C(136, val = J$.W(1441, 'val', J$.F(1433, J$.R(1409, 'append', append, 1), 0)(J$.R(1417, 'header', header, 0), J$.R(1425, 'field', field, 0)), val, 0)))) {
                                J$.X1(1481, J$.M(1473, J$.R(1449, 'res', res, 0), 'setHeader', 0)(J$.T(1457, 'Vary', 21, false), J$.R(1465, 'val', val, 0)));
                            }
                        } catch (J$e) {
                            J$.Ex(1769, J$e);
                        } finally {
                            if (J$.Fr(1777))
                                continue jalangiLabel623;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1545, '__secret__S$', __secret__S$, 0);
            J$.N(1553, '__secret__traits__', __secret__traits__, 0);
            J$.N(1561, 'separators', separators, 0);
            append = J$.N(1577, 'append', J$.T(1569, append, 12, false, 1049), 0);
            parse = J$.N(1593, 'parse', J$.T(1585, parse, 12, false, 1169), 0);
            vary = J$.N(1609, 'vary', J$.T(1601, vary, 12, false, 1489), 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            J$.X1(89, J$.T(81, 'use strict', 21, false));
            J$.X1(121, J$.P(113, J$.R(97, 'module', module, 2), 'exports', J$.R(105, 'vary', vary, 1), 0));
            J$.X1(161, J$.P(153, J$.G(137, J$.R(129, 'module', module, 2), 'exports', 0), 'append', J$.R(145, 'append', append, 1), 0));
            var separators = J$.X1(185, J$.W(177, 'separators', J$.T(169, /[\(\)<>@,;:\\"\/\[\]\?=\{\}\u0020\u0009]/, 14, false), separators, 3));
        } catch (J$e) {
            J$.Ex(1785, J$e);
        } finally {
            if (J$.Sr(1793)) {
                J$.L();
                continue jalangiLabel624;
            } else {
                J$.L();
                break jalangiLabel624;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
