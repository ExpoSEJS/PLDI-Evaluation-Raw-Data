J$.iids = {"8":[7,9,7,14],"9":[1,20,1,27],"10":[7,9,7,14],"16":[10,9,10,13],"17":[1,28,1,32],"18":[10,9,10,13],"24":[13,9,13,31],"25":[1,20,1,33],"26":[13,9,13,31],"32":[17,13,17,57],"33":[1,20,1,33],"34":[17,13,17,22],"40":[17,13,17,57],"41":[1,20,1,33],"49":[2,26,2,38],"57":[2,26,2,45],"65":[2,26,2,45],"73":[2,26,2,45],"81":[3,1,3,13],"89":[3,1,3,14],"97":[4,1,4,7],"105":[4,18,4,23],"113":[4,1,4,23],"121":[4,1,4,24],"129":[5,22,5,28],"137":[5,22,5,38],"145":[5,22,5,53],"153":[5,22,5,53],"161":[5,22,5,53],"169":[7,10,7,14],"177":[8,19,8,28],"185":[8,29,8,56],"193":[8,15,8,57],"201":[8,15,8,57],"209":[8,9,8,58],"217":[10,10,10,13],"225":[11,19,11,28],"233":[11,29,11,55],"241":[11,15,11,56],"249":[11,15,11,56],"257":[11,9,11,57],"265":[13,9,13,17],"273":[13,22,13,31],"281":[14,20,14,24],"289":[14,20,14,24],"297":[14,9,14,25],"305":[16,5,16,11],"313":[16,32,16,35],"321":[16,5,16,36],"323":[16,5,16,31],"329":[17,14,17,22],"337":[17,26,17,40],"345":[17,46,17,50],"353":[17,52,17,56],"361":[17,26,17,57],"363":[17,26,17,45],"369":[18,13,18,20],"377":[18,13,18,20],"385":[20,26,20,32],"393":[20,58,20,61],"401":[20,63,20,67],"409":[20,26,20,68],"411":[20,26,20,57],"417":[20,26,20,68],"425":[20,26,20,68],"433":[21,9,21,15],"441":[21,31,21,35],"449":[21,37,21,41],"457":[21,43,21,53],"465":[21,9,21,54],"467":[21,9,21,30],"473":[21,9,21,55],"481":[16,45,22,6],"489":[16,45,22,6],"497":[16,45,22,6],"505":[16,45,22,6],"513":[16,45,22,6],"521":[16,45,22,6],"529":[16,5,22,7],"531":[16,5,16,44],"537":[16,5,22,8],"545":[23,12,23,16],"553":[23,12,23,16],"561":[23,5,23,17],"569":[6,1,24,2],"577":[6,1,24,2],"585":[6,1,24,2],"593":[6,1,24,2],"601":[6,1,24,2],"609":[1,1,24,2],"617":[1,1,24,2],"625":[1,1,24,2],"633":[1,1,24,2],"641":[6,1,24,2],"649":[1,1,24,2],"657":[7,5,9,6],"665":[10,5,12,6],"673":[13,5,15,6],"681":[17,9,19,10],"689":[16,45,22,6],"697":[16,45,22,6],"705":[6,1,24,2],"713":[6,1,24,2],"721":[1,1,24,2],"729":[1,1,24,2],"nBranches":10,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/merge-descriptors/index.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/merge-descriptors/index_jalangi_.js","code":"/*!\n * merge-descriptors\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = merge\n\n/**\n * Module variables.\n * @private\n */\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty\n\n/**\n * Merge the property descriptors of `src` into `dest`\n *\n * @param {object} dest Object to add descriptors to\n * @param {object} src Object to clone descriptors from\n * @param {boolean} [redefine=true] Redefine `dest` properties with `src` properties\n * @returns {object} Reference to dest\n * @public\n */\n\nfunction merge(dest, src, redefine) {\n  if (!dest) {\n    throw new TypeError('argument dest is required')\n  }\n\n  if (!src) {\n    throw new TypeError('argument src is required')\n  }\n\n  if (redefine === undefined) {\n    // Default to true\n    redefine = true\n  }\n\n  Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {\n    if (!redefine && hasOwnProperty.call(dest, name)) {\n      // Skip desriptor\n      return\n    }\n\n    // Copy descriptor\n    var descriptor = Object.getOwnPropertyDescriptor(src, name)\n    Object.defineProperty(dest, name, descriptor)\n  })\n\n  return dest\n}\n"};
jalangiLabel59:
    while (true) {
        try {
            J$.Se(609, '/home/blake/ExpoSE/Targets/node-flarum/node_modules/merge-descriptors/index_jalangi_.js', '/home/blake/ExpoSE/Targets/node-flarum/node_modules/merge-descriptors/index.js');
            function merge(dest, src, redefine) {
                jalangiLabel58:
                    while (true) {
                        try {
                            J$.Fe(569, arguments.callee, this, arguments);
                            arguments = J$.N(577, 'arguments', arguments, 4);
                            dest = J$.N(585, 'dest', dest, 4);
                            src = J$.N(593, 'src', src, 4);
                            redefine = J$.N(601, 'redefine', redefine, 4);
                            if (J$.X1(657, J$.C(8, J$.U(10, '!', J$.R(169, 'dest', dest, 0))))) {
                                throw J$.X1(209, J$.Th(201, J$.F(193, J$.R(177, 'TypeError', TypeError, 2), 1)(J$.T(185, 'argument dest is required', 21, false))));
                            }
                            if (J$.X1(665, J$.C(16, J$.U(18, '!', J$.R(217, 'src', src, 0))))) {
                                throw J$.X1(257, J$.Th(249, J$.F(241, J$.R(225, 'TypeError', TypeError, 2), 1)(J$.T(233, 'argument src is required', 21, false))));
                            }
                            if (J$.X1(673, J$.C(24, J$.B(26, '===', J$.R(265, 'redefine', redefine, 0), J$.T(273, undefined, 24, false), 0)))) {
                                J$.X1(297, redefine = J$.W(289, 'redefine', J$.T(281, true, 23, false), redefine, 0));
                            }
                            J$.X1(537, J$.M(529, J$.M(321, J$.R(305, 'Object', Object, 2), 'getOwnPropertyNames', 0)(J$.R(313, 'src', src, 0)), 'forEach', 0)(J$.T(521, function forEachOwnPropertyName(name) {
                                jalangiLabel57:
                                    while (true) {
                                        try {
                                            J$.Fe(481, arguments.callee, this, arguments);
                                            arguments = J$.N(489, 'arguments', arguments, 4);
                                            forEachOwnPropertyName = J$.N(497, 'forEachOwnPropertyName', forEachOwnPropertyName, 0);
                                            name = J$.N(505, 'name', name, 4);
                                            J$.N(513, 'descriptor', descriptor, 0);
                                            if (J$.X1(681, J$.C(40, J$.C(32, J$.U(34, '!', J$.R(329, 'redefine', redefine, 0))) ? J$.M(361, J$.R(337, 'hasOwnProperty', hasOwnProperty, 1), 'call', 0)(J$.R(345, 'dest', dest, 0), J$.R(353, 'name', name, 0)) : J$._()))) {
                                                return J$.X1(377, J$.Rt(369, undefined));
                                            }
                                            var descriptor = J$.X1(425, J$.W(417, 'descriptor', J$.M(409, J$.R(385, 'Object', Object, 2), 'getOwnPropertyDescriptor', 0)(J$.R(393, 'src', src, 0), J$.R(401, 'name', name, 0)), descriptor, 1));
                                            J$.X1(473, J$.M(465, J$.R(433, 'Object', Object, 2), 'defineProperty', 0)(J$.R(441, 'dest', dest, 0), J$.R(449, 'name', name, 0), J$.R(457, 'descriptor', descriptor, 0)));
                                        } catch (J$e) {
                                            J$.Ex(689, J$e);
                                        } finally {
                                            if (J$.Fr(697))
                                                continue jalangiLabel57;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 481)));
                            return J$.X1(561, J$.Rt(553, J$.R(545, 'dest', dest, 0)));
                        } catch (J$e) {
                            J$.Ex(705, J$e);
                        } finally {
                            if (J$.Fr(713))
                                continue jalangiLabel58;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(617, '__secret__S$', __secret__S$, 0);
            J$.N(625, '__secret__traits__', __secret__traits__, 0);
            J$.N(633, 'hasOwnProperty', hasOwnProperty, 0);
            merge = J$.N(649, 'merge', J$.T(641, merge, 12, false, 569), 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            J$.X1(89, J$.T(81, 'use strict', 21, false));
            J$.X1(121, J$.P(113, J$.R(97, 'module', module, 2), 'exports', J$.R(105, 'merge', merge, 1), 0));
            var hasOwnProperty = J$.X1(161, J$.W(153, 'hasOwnProperty', J$.G(145, J$.G(137, J$.R(129, 'Object', Object, 2), 'prototype', 0), 'hasOwnProperty', 0), hasOwnProperty, 3));
        } catch (J$e) {
            J$.Ex(721, J$e);
        } finally {
            if (J$.Sr(729)) {
                J$.L();
                continue jalangiLabel59;
            } else {
                J$.L();
                break jalangiLabel59;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
