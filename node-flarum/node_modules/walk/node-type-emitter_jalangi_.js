J$.iids = {"8":[41,17,41,31],"9":[1,20,1,27],"10":[39,21,39,44],"16":[39,21,39,44],"17":[1,28,1,32],"18":[39,51,39,52],"24":[52,17,52,26],"25":[1,20,1,33],"26":[49,19,49,59],"32":[64,17,64,26],"33":[1,20,1,33],"34":[49,19,49,94],"40":[72,17,72,46],"41":[1,20,1,33],"42":[51,20,51,21],"49":[2,26,2,38],"50":[52,17,52,26],"57":[2,26,2,45],"58":[63,20,63,21],"65":[2,26,2,45],"66":[64,17,64,26],"73":[2,26,2,45],"74":[72,17,72,46],"81":[4,5,4,17],"82":[75,20,75,55],"89":[4,5,4,18],"97":[6,13,6,21],"105":[7,13,7,26],"113":[8,13,8,29],"121":[9,13,9,28],"129":[10,13,10,32],"137":[11,13,11,21],"145":[12,13,12,23],"153":[5,24,13,10],"161":[14,13,14,19],"169":[15,13,15,24],"177":[16,13,16,27],"185":[17,13,17,26],"193":[18,13,18,30],"201":[19,13,19,19],"209":[20,13,20,21],"217":[13,25,21,10],"225":[22,13,22,20],"233":[23,13,23,26],"241":[24,13,24,28],"249":[25,13,25,27],"257":[26,13,26,31],"265":[27,13,27,20],"273":[28,13,28,22],"281":[21,31,29,10],"289":[5,24,13,10],"297":[5,24,13,10],"305":[13,25,21,10],"313":[13,25,21,10],"321":[21,31,29,10],"329":[21,31,29,10],"337":[31,26,31,28],"345":[31,26,31,28],"353":[31,26,31,28],"361":[32,9,32,25],"369":[32,33,32,40],"377":[32,42,32,50],"385":[32,9,32,51],"387":[32,9,32,32],"393":[33,13,33,23],"401":[33,24,33,39],"409":[33,43,33,45],"417":[33,13,33,45],"425":[33,13,33,46],"433":[32,60,34,10],"441":[32,60,34,10],"449":[32,60,34,10],"457":[32,60,34,10],"465":[32,9,34,11],"467":[32,9,32,59],"473":[32,9,34,12],"481":[35,16,35,26],"489":[35,16,35,26],"497":[35,9,35,27],"505":[30,5,36,6],"513":[30,5,36,6],"521":[30,5,36,6],"529":[39,18,39,19],"537":[39,18,39,19],"545":[39,21,39,22],"553":[39,25,39,37],"561":[39,25,39,44],"569":[39,51,39,52],"577":[39,46,39,47],"585":[39,46,39,52],"593":[40,22,40,34],"601":[40,35,40,36],"609":[40,22,40,37],"617":[40,22,40,37],"625":[40,13,40,38],"633":[41,17,41,21],"641":[41,22,41,28],"649":[41,17,41,31],"651":[41,17,41,29],"657":[42,17,42,21],"665":[42,29,42,39],"673":[42,40,42,41],"681":[42,29,42,42],"689":[42,17,42,42],"697":[42,17,42,43],"705":[43,17,43,23],"713":[43,24,43,40],"721":[43,41,43,42],"729":[43,24,43,43],"737":[43,17,43,44],"745":[43,50,43,54],"753":[43,17,43,55],"755":[43,17,43,49],"761":[43,17,43,56],"769":[44,17,44,24],"777":[44,17,44,24],"785":[37,5,47,6],"793":[37,5,47,6],"801":[37,5,47,6],"809":[37,5,47,6],"817":[37,5,47,6],"825":[37,5,47,6],"833":[49,19,49,20],"841":[49,23,49,30],"849":[49,41,49,46],"857":[49,41,49,51],"865":[49,23,49,52],"867":[49,23,49,40],"873":[49,23,49,59],"881":[49,62,49,69],"889":[49,80,49,86],"897":[49,62,49,87],"899":[49,62,49,79],"905":[49,62,49,94],"913":[49,19,49,94],"921":[49,19,49,94],"929":[51,20,51,21],"937":[51,13,51,16],"945":[51,13,51,21],"953":[51,13,51,22],"961":[52,17,52,18],"969":[52,23,52,26],"977":[53,17,53,21],"985":[53,27,53,31],"993":[53,17,53,32],"995":[53,17,53,26],"1001":[53,17,53,33],"1009":[50,9,55,10],"1017":[50,9,55,10],"1025":[56,9,56,16],"1033":[56,22,56,27],"1041":[56,22,56,32],"1049":[56,34,56,38],"1057":[56,40,56,45],"1065":[56,47,56,60],"1073":[56,9,56,61],"1075":[56,9,56,21],"1081":[56,9,56,62],"1089":[57,9,57,16],"1097":[57,22,57,28],"1105":[57,30,57,34],"1113":[57,36,57,41],"1121":[57,43,57,56],"1129":[57,9,57,57],"1131":[57,9,57,21],"1137":[57,9,57,58],"1145":[58,9,58,22],"1153":[58,9,58,24],"1161":[58,9,58,25],"1169":[48,5,59,6],"1177":[48,5,59,6],"1185":[48,5,59,6],"1193":[48,5,59,6],"1201":[48,5,59,6],"1209":[48,5,59,6],"1217":[48,5,59,6],"1225":[48,5,59,6],"1233":[50,9,55,10],"1241":[48,5,59,6],"1249":[61,19,61,20],"1257":[61,19,61,20],"1265":[61,19,61,20],"1273":[63,20,63,21],"1281":[63,13,63,16],"1289":[63,13,63,21],"1297":[63,13,63,22],"1305":[64,17,64,18],"1313":[64,23,64,26],"1321":[65,17,65,21],"1329":[65,27,65,31],"1337":[65,17,65,32],"1339":[65,17,65,26],"1345":[65,17,65,33],"1353":[62,9,67,10],"1361":[62,9,67,10],"1369":[68,9,68,25],"1377":[69,13,69,20],"1385":[70,13,70,21],"1393":[68,33,71,10],"1401":[68,9,71,11],"1403":[68,9,68,32],"1409":[72,17,72,18],"1417":[72,23,72,28],"1425":[72,29,72,38],"1433":[72,23,72,39],"1441":[72,23,72,46],"1449":[73,17,73,24],"1457":[73,17,73,24],"1465":[75,20,75,27],"1473":[75,38,75,47],"1481":[75,20,75,48],"1483":[75,20,75,37],"1489":[75,20,75,55],"1497":[75,13,75,16],"1505":[75,13,75,55],"1513":[75,13,75,56],"1521":[76,13,76,20],"1529":[76,26,76,35],"1537":[76,37,76,41],"1545":[76,43,76,48],"1553":[76,49,76,58],"1561":[76,43,76,59],"1569":[76,61,76,74],"1577":[76,13,76,75],"1579":[76,13,76,25],"1585":[76,13,76,76],"1593":[71,20,77,10],"1601":[71,20,77,10],"1609":[71,20,77,10],"1617":[71,20,77,10],"1625":[68,9,77,11],"1627":[68,9,71,19],"1633":[68,9,77,12],"1641":[78,9,78,22],"1649":[78,9,78,24],"1657":[78,9,78,25],"1665":[60,5,79,6],"1673":[60,5,79,6],"1681":[60,5,79,6],"1689":[60,5,79,6],"1697":[60,5,79,6],"1705":[60,5,79,6],"1713":[60,5,79,6],"1721":[60,5,79,6],"1729":[62,9,67,10],"1737":[60,5,79,6],"1745":[80,5,80,11],"1753":[81,23,81,39],"1761":[82,29,82,45],"1769":[83,23,83,35],"1777":[84,21,84,31],"1785":[85,27,85,43],"1793":[86,27,86,43],"1801":[87,27,87,43],"1809":[80,22,88,6],"1817":[80,5,88,6],"1825":[80,5,88,7],"1833":[3,2,89,2],"1841":[3,2,89,2],"1849":[3,2,89,2],"1857":[3,2,89,2],"1865":[3,2,89,2],"1873":[30,5,36,6],"1881":[3,2,89,2],"1889":[37,5,47,6],"1897":[3,2,89,2],"1905":[48,5,59,6],"1913":[3,2,89,2],"1921":[60,5,79,6],"1929":[3,2,89,2],"1937":[3,2,89,2],"1945":[3,2,89,4],"1953":[3,1,89,6],"1961":[1,1,89,6],"1969":[1,1,89,6],"1977":[1,1,89,6],"1985":[32,60,34,10],"1993":[32,60,34,10],"2001":[30,5,36,6],"2009":[30,5,36,6],"2017":[41,13,45,14],"2025":[39,9,46,10],"2033":[39,9,46,10],"2041":[39,9,46,10],"2049":[37,5,47,6],"2057":[37,5,47,6],"2065":[52,13,54,14],"2073":[50,9,55,10],"2081":[50,9,55,10],"2089":[48,5,59,6],"2097":[48,5,59,6],"2105":[64,13,66,14],"2113":[62,9,67,10],"2121":[62,9,67,10],"2129":[72,13,74,14],"2137":[71,20,77,10],"2145":[71,20,77,10],"2153":[60,5,79,6],"2161":[60,5,79,6],"2169":[3,2,89,2],"2177":[3,2,89,2],"2185":[1,1,89,6],"2193":[1,1,89,6],"nBranches":10,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/walk/node-type-emitter.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/walk/node-type-emitter_jalangi_.js","code":"/*jshint strict:true node:true es5:true onevar:true laxcomma:true laxbreak:true*/\n(function () {\n  \"use strict\";\n\n  // \"FIFO\" isn't easy to convert to camelCase and back reliably\n  var isFnodeTypes = [\n      \"isFile\", \"isDirectory\",  \"isSymbolicLink\", \"isBlockDevice\",  \"isCharacterDevice\", \"isFIFO\", \"isSocket\"\n    ],\n    fnodeTypes = [\n      \"file\",   \"directory\",    \"symbolicLink\",   \"blockDevice\",    \"characterDevice\",    \"FIFO\",   \"socket\"\n    ],\n    fnodeTypesPlural = [\n      \"files\",  \"directories\",  \"symbolicLinks\",  \"blockDevices\",   \"characterDevices\",   \"FIFOs\",  \"sockets\"\n    ];\n\n\n  // \n  function createNodeGroups() {\n    var nodeGroups = {};\n    fnodeTypesPlural.concat(\"nodes\", \"errors\").forEach(function (fnodeTypePlural) {\n      nodeGroups[fnodeTypePlural] = [];\n    });\n    return nodeGroups;\n  }\n\n\n  // Determine each file node's type\n  // \n  function sortFnodesByType(stat, fnodes) {\n    var i, isType;\n\n    for (i = 0; i < isFnodeTypes.length; i += 1) {\n      isType = isFnodeTypes[i];\n      if (stat[isType]()) {\n        stat.type = fnodeTypes[i];\n        fnodes[fnodeTypesPlural[i]].push(stat);\n        return;\n      }\n    }\n  }\n\n\n  // Get the current number of listeners (which may change)\n  // Emit events to each listener\n  // Wait for all listeners to `next()` before continueing\n  // (in theory this may avoid disk thrashing)\n  function emitSingleEvents(emitter, path, stats, next, self) {\n    var num = 1 + emitter.listeners(stats.type).length + emitter.listeners(\"node\").length;\n\n    function nextWhenReady() {\n      num -= 1;\n      if (0 === num) { next.call(self); }\n    }\n\n    emitter.emit(stats.type, path, stats, nextWhenReady);\n    emitter.emit(\"node\", path, stats, nextWhenReady);\n    nextWhenReady();\n  }\n\n\n  // Since the risk for disk thrashing among anything\n  // other than files is relatively low, all types are\n  // emitted at once, but all must complete before advancing\n  function emitPluralEvents(emitter, path, nodes, next, self) {\n    var num = 1;\n\n    function nextWhenReady() {\n      num -= 1;\n      if (0 === num) { next.call(self); }\n    }\n\n    fnodeTypesPlural.concat([\"nodes\", \"errors\"]).forEach(function (fnodeType) {\n      if (0 === nodes[fnodeType].length) { return; }\n      num += emitter.listeners(fnodeType).length;\n      emitter.emit(fnodeType, path, nodes[fnodeType], nextWhenReady);\n    });\n    nextWhenReady();\n  }\n\n  module.exports = {\n    emitNodeType: emitSingleEvents,\n    emitNodeTypeGroups: emitPluralEvents,\n    isFnodeTypes: isFnodeTypes,\n    fnodeTypes: fnodeTypes,\n    fnodeTypesPlural: fnodeTypesPlural,\n    sortFnodesByType: sortFnodesByType,\n    createNodeGroups: createNodeGroups\n  };\n}());\n"};
jalangiLabel767:
    while (true) {
        try {
            J$.Se(1961, '/home/blake/ExpoSE/Targets/node-flarum/node_modules/walk/node-type-emitter_jalangi_.js', '/home/blake/ExpoSE/Targets/node-flarum/node_modules/walk/node-type-emitter.js');
            J$.N(1969, '__secret__S$', __secret__S$, 0);
            J$.N(1977, '__secret__traits__', __secret__traits__, 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            J$.X1(1953, J$.F(1945, J$.T(1937, function () {
                jalangiLabel766:
                    while (true) {
                        try {
                            J$.Fe(1833, arguments.callee, this, arguments);
                            function createNodeGroups() {
                                jalangiLabel759:
                                    while (true) {
                                        try {
                                            J$.Fe(505, arguments.callee, this, arguments);
                                            arguments = J$.N(513, 'arguments', arguments, 4);
                                            J$.N(521, 'nodeGroups', nodeGroups, 0);
                                            var nodeGroups = J$.X1(353, J$.W(345, 'nodeGroups', J$.T(337, {}, 11, false), nodeGroups, 1));
                                            J$.X1(473, J$.M(465, J$.M(385, J$.R(361, 'fnodeTypesPlural', fnodeTypesPlural, 0), 'concat', 0)(J$.T(369, 'nodes', 21, false), J$.T(377, 'errors', 21, false)), 'forEach', 0)(J$.T(457, function (fnodeTypePlural) {
                                                jalangiLabel758:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(433, arguments.callee, this, arguments);
                                                            arguments = J$.N(441, 'arguments', arguments, 4);
                                                            fnodeTypePlural = J$.N(449, 'fnodeTypePlural', fnodeTypePlural, 4);
                                                            J$.X1(425, J$.P(417, J$.R(393, 'nodeGroups', nodeGroups, 0), J$.R(401, 'fnodeTypePlural', fnodeTypePlural, 0), J$.T(409, [], 10, false), 2));
                                                        } catch (J$e) {
                                                            J$.Ex(1985, J$e);
                                                        } finally {
                                                            if (J$.Fr(1993))
                                                                continue jalangiLabel758;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false, 433)));
                                            return J$.X1(497, J$.Rt(489, J$.R(481, 'nodeGroups', nodeGroups, 0)));
                                        } catch (J$e) {
                                            J$.Ex(2001, J$e);
                                        } finally {
                                            if (J$.Fr(2009))
                                                continue jalangiLabel759;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            function sortFnodesByType(stat, fnodes) {
                                jalangiLabel760:
                                    while (true) {
                                        try {
                                            J$.Fe(785, arguments.callee, this, arguments);
                                            arguments = J$.N(793, 'arguments', arguments, 4);
                                            stat = J$.N(801, 'stat', stat, 4);
                                            fnodes = J$.N(809, 'fnodes', fnodes, 4);
                                            J$.N(817, 'i', i, 0);
                                            J$.N(825, 'isType', isType, 0);
                                            var i, isType;
                                            for (J$.X1(2033, i = J$.W(537, 'i', J$.T(529, 0, 22, false), i, 0)); J$.X1(2025, J$.C(16, J$.B(10, '<', J$.R(545, 'i', i, 0), J$.G(561, J$.R(553, 'isFnodeTypes', isFnodeTypes, 0), 'length', 0), 0))); J$.X1(2041, i = J$.W(585, 'i', J$.B(18, '+', J$.R(577, 'i', i, 0), J$.T(569, 1, 22, false), 0), i, 0))) {
                                                J$.X1(625, isType = J$.W(617, 'isType', J$.G(609, J$.R(593, 'isFnodeTypes', isFnodeTypes, 0), J$.R(601, 'i', i, 0), 4), isType, 0));
                                                if (J$.X1(2017, J$.C(8, J$.M(649, J$.R(633, 'stat', stat, 0), J$.R(641, 'isType', isType, 0), 1)()))) {
                                                    J$.X1(697, J$.P(689, J$.R(657, 'stat', stat, 0), 'type', J$.G(681, J$.R(665, 'fnodeTypes', fnodeTypes, 0), J$.R(673, 'i', i, 0), 4), 0));
                                                    J$.X1(761, J$.M(753, J$.G(737, J$.R(705, 'fnodes', fnodes, 0), J$.G(729, J$.R(713, 'fnodeTypesPlural', fnodeTypesPlural, 0), J$.R(721, 'i', i, 0), 4), 4), 'push', 0)(J$.R(745, 'stat', stat, 0)));
                                                    return J$.X1(777, J$.Rt(769, undefined));
                                                }
                                            }
                                        } catch (J$e) {
                                            J$.Ex(2049, J$e);
                                        } finally {
                                            if (J$.Fr(2057))
                                                continue jalangiLabel760;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            function emitSingleEvents(emitter, path, stats, next, self) {
                                jalangiLabel762:
                                    while (true) {
                                        try {
                                            J$.Fe(1169, arguments.callee, this, arguments);
                                            function nextWhenReady() {
                                                jalangiLabel761:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(1009, arguments.callee, this, arguments);
                                                            arguments = J$.N(1017, 'arguments', arguments, 4);
                                                            J$.X1(953, num = J$.W(945, 'num', J$.B(42, '-', J$.R(937, 'num', num, 0), J$.T(929, 1, 22, false), 0), num, 0));
                                                            if (J$.X1(2065, J$.C(24, J$.B(50, '===', J$.T(961, 0, 22, false), J$.R(969, 'num', num, 0), 0)))) {
                                                                J$.X1(1001, J$.M(993, J$.R(977, 'next', next, 0), 'call', 0)(J$.R(985, 'self', self, 0)));
                                                            }
                                                        } catch (J$e) {
                                                            J$.Ex(2073, J$e);
                                                        } finally {
                                                            if (J$.Fr(2081))
                                                                continue jalangiLabel761;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }
                                            arguments = J$.N(1177, 'arguments', arguments, 4);
                                            emitter = J$.N(1185, 'emitter', emitter, 4);
                                            path = J$.N(1193, 'path', path, 4);
                                            stats = J$.N(1201, 'stats', stats, 4);
                                            next = J$.N(1209, 'next', next, 4);
                                            self = J$.N(1217, 'self', self, 4);
                                            J$.N(1225, 'num', num, 0);
                                            nextWhenReady = J$.N(1241, 'nextWhenReady', J$.T(1233, nextWhenReady, 12, false, 1009), 0);
                                            var num = J$.X1(921, J$.W(913, 'num', J$.B(34, '+', J$.B(26, '+', J$.T(833, 1, 22, false), J$.G(873, J$.M(865, J$.R(841, 'emitter', emitter, 0), 'listeners', 0)(J$.G(857, J$.R(849, 'stats', stats, 0), 'type', 0)), 'length', 0), 0), J$.G(905, J$.M(897, J$.R(881, 'emitter', emitter, 0), 'listeners', 0)(J$.T(889, 'node', 21, false)), 'length', 0), 0), num, 1));
                                            J$.X1(1081, J$.M(1073, J$.R(1025, 'emitter', emitter, 0), 'emit', 0)(J$.G(1041, J$.R(1033, 'stats', stats, 0), 'type', 0), J$.R(1049, 'path', path, 0), J$.R(1057, 'stats', stats, 0), J$.R(1065, 'nextWhenReady', nextWhenReady, 0)));
                                            J$.X1(1137, J$.M(1129, J$.R(1089, 'emitter', emitter, 0), 'emit', 0)(J$.T(1097, 'node', 21, false), J$.R(1105, 'path', path, 0), J$.R(1113, 'stats', stats, 0), J$.R(1121, 'nextWhenReady', nextWhenReady, 0)));
                                            J$.X1(1161, J$.F(1153, J$.R(1145, 'nextWhenReady', nextWhenReady, 0), 0)());
                                        } catch (J$e) {
                                            J$.Ex(2089, J$e);
                                        } finally {
                                            if (J$.Fr(2097))
                                                continue jalangiLabel762;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            function emitPluralEvents(emitter, path, nodes, next, self) {
                                jalangiLabel765:
                                    while (true) {
                                        try {
                                            J$.Fe(1665, arguments.callee, this, arguments);
                                            function nextWhenReady() {
                                                jalangiLabel763:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(1353, arguments.callee, this, arguments);
                                                            arguments = J$.N(1361, 'arguments', arguments, 4);
                                                            J$.X1(1297, num = J$.W(1289, 'num', J$.B(58, '-', J$.R(1281, 'num', num, 0), J$.T(1273, 1, 22, false), 0), num, 0));
                                                            if (J$.X1(2105, J$.C(32, J$.B(66, '===', J$.T(1305, 0, 22, false), J$.R(1313, 'num', num, 0), 0)))) {
                                                                J$.X1(1345, J$.M(1337, J$.R(1321, 'next', next, 0), 'call', 0)(J$.R(1329, 'self', self, 0)));
                                                            }
                                                        } catch (J$e) {
                                                            J$.Ex(2113, J$e);
                                                        } finally {
                                                            if (J$.Fr(2121))
                                                                continue jalangiLabel763;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }
                                            arguments = J$.N(1673, 'arguments', arguments, 4);
                                            emitter = J$.N(1681, 'emitter', emitter, 4);
                                            path = J$.N(1689, 'path', path, 4);
                                            nodes = J$.N(1697, 'nodes', nodes, 4);
                                            next = J$.N(1705, 'next', next, 4);
                                            self = J$.N(1713, 'self', self, 4);
                                            J$.N(1721, 'num', num, 0);
                                            nextWhenReady = J$.N(1737, 'nextWhenReady', J$.T(1729, nextWhenReady, 12, false, 1353), 0);
                                            var num = J$.X1(1265, J$.W(1257, 'num', J$.T(1249, 1, 22, false), num, 1));
                                            J$.X1(1633, J$.M(1625, J$.M(1401, J$.R(1369, 'fnodeTypesPlural', fnodeTypesPlural, 0), 'concat', 0)(J$.T(1393, [
                                                J$.T(1377, 'nodes', 21, false),
                                                J$.T(1385, 'errors', 21, false)
                                            ], 10, false)), 'forEach', 0)(J$.T(1617, function (fnodeType) {
                                                jalangiLabel764:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(1593, arguments.callee, this, arguments);
                                                            arguments = J$.N(1601, 'arguments', arguments, 4);
                                                            fnodeType = J$.N(1609, 'fnodeType', fnodeType, 4);
                                                            if (J$.X1(2129, J$.C(40, J$.B(74, '===', J$.T(1409, 0, 22, false), J$.G(1441, J$.G(1433, J$.R(1417, 'nodes', nodes, 0), J$.R(1425, 'fnodeType', fnodeType, 0), 4), 'length', 0), 0)))) {
                                                                return J$.X1(1457, J$.Rt(1449, undefined));
                                                            }
                                                            J$.X1(1513, num = J$.W(1505, 'num', J$.B(82, '+', J$.R(1497, 'num', num, 0), J$.G(1489, J$.M(1481, J$.R(1465, 'emitter', emitter, 0), 'listeners', 0)(J$.R(1473, 'fnodeType', fnodeType, 0)), 'length', 0), 0), num, 0));
                                                            J$.X1(1585, J$.M(1577, J$.R(1521, 'emitter', emitter, 0), 'emit', 0)(J$.R(1529, 'fnodeType', fnodeType, 0), J$.R(1537, 'path', path, 0), J$.G(1561, J$.R(1545, 'nodes', nodes, 0), J$.R(1553, 'fnodeType', fnodeType, 0), 4), J$.R(1569, 'nextWhenReady', nextWhenReady, 0)));
                                                        } catch (J$e) {
                                                            J$.Ex(2137, J$e);
                                                        } finally {
                                                            if (J$.Fr(2145))
                                                                continue jalangiLabel764;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false, 1593)));
                                            J$.X1(1657, J$.F(1649, J$.R(1641, 'nextWhenReady', nextWhenReady, 0), 0)());
                                        } catch (J$e) {
                                            J$.Ex(2153, J$e);
                                        } finally {
                                            if (J$.Fr(2161))
                                                continue jalangiLabel765;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(1841, 'arguments', arguments, 4);
                            J$.N(1849, 'isFnodeTypes', isFnodeTypes, 0);
                            J$.N(1857, 'fnodeTypes', fnodeTypes, 0);
                            J$.N(1865, 'fnodeTypesPlural', fnodeTypesPlural, 0);
                            createNodeGroups = J$.N(1881, 'createNodeGroups', J$.T(1873, createNodeGroups, 12, false, 505), 0);
                            sortFnodesByType = J$.N(1897, 'sortFnodesByType', J$.T(1889, sortFnodesByType, 12, false, 785), 0);
                            emitSingleEvents = J$.N(1913, 'emitSingleEvents', J$.T(1905, emitSingleEvents, 12, false, 1169), 0);
                            emitPluralEvents = J$.N(1929, 'emitPluralEvents', J$.T(1921, emitPluralEvents, 12, false, 1665), 0);
                            J$.X1(89, J$.T(81, 'use strict', 21, false));
                            var isFnodeTypes = J$.X1(297, J$.W(289, 'isFnodeTypes', J$.T(153, [
                                    J$.T(97, 'isFile', 21, false),
                                    J$.T(105, 'isDirectory', 21, false),
                                    J$.T(113, 'isSymbolicLink', 21, false),
                                    J$.T(121, 'isBlockDevice', 21, false),
                                    J$.T(129, 'isCharacterDevice', 21, false),
                                    J$.T(137, 'isFIFO', 21, false),
                                    J$.T(145, 'isSocket', 21, false)
                                ], 10, false), isFnodeTypes, 1)), fnodeTypes = J$.X1(313, J$.W(305, 'fnodeTypes', J$.T(217, [
                                    J$.T(161, 'file', 21, false),
                                    J$.T(169, 'directory', 21, false),
                                    J$.T(177, 'symbolicLink', 21, false),
                                    J$.T(185, 'blockDevice', 21, false),
                                    J$.T(193, 'characterDevice', 21, false),
                                    J$.T(201, 'FIFO', 21, false),
                                    J$.T(209, 'socket', 21, false)
                                ], 10, false), fnodeTypes, 1)), fnodeTypesPlural = J$.X1(329, J$.W(321, 'fnodeTypesPlural', J$.T(281, [
                                    J$.T(225, 'files', 21, false),
                                    J$.T(233, 'directories', 21, false),
                                    J$.T(241, 'symbolicLinks', 21, false),
                                    J$.T(249, 'blockDevices', 21, false),
                                    J$.T(257, 'characterDevices', 21, false),
                                    J$.T(265, 'FIFOs', 21, false),
                                    J$.T(273, 'sockets', 21, false)
                                ], 10, false), fnodeTypesPlural, 1));
                            J$.X1(1825, J$.P(1817, J$.R(1745, 'module', module, 2), 'exports', J$.T(1809, {
                                emitNodeType: J$.R(1753, 'emitSingleEvents', emitSingleEvents, 0),
                                emitNodeTypeGroups: J$.R(1761, 'emitPluralEvents', emitPluralEvents, 0),
                                isFnodeTypes: J$.R(1769, 'isFnodeTypes', isFnodeTypes, 0),
                                fnodeTypes: J$.R(1777, 'fnodeTypes', fnodeTypes, 0),
                                fnodeTypesPlural: J$.R(1785, 'fnodeTypesPlural', fnodeTypesPlural, 0),
                                sortFnodesByType: J$.R(1793, 'sortFnodesByType', sortFnodesByType, 0),
                                createNodeGroups: J$.R(1801, 'createNodeGroups', createNodeGroups, 0)
                            }, 11, false), 0));
                        } catch (J$e) {
                            J$.Ex(2169, J$e);
                        } finally {
                            if (J$.Fr(2177))
                                continue jalangiLabel766;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1833), 0)());
        } catch (J$e) {
            J$.Ex(2185, J$e);
        } finally {
            if (J$.Sr(2193)) {
                J$.L();
                continue jalangiLabel767;
            } else {
                J$.L();
                break jalangiLabel767;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
