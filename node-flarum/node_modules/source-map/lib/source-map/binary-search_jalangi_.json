{"8":[3,5,3,33],"9":[1,20,1,27],"10":[3,5,3,18],"16":[15,17,15,32],"17":[1,28,1,32],"18":[3,5,3,33],"24":[19,24,19,48],"25":[1,20,1,33],"26":[10,31,10,43],"32":[18,17,18,51],"33":[1,20,1,33],"34":[10,30,10,48],"40":[24,17,24,31],"41":[1,20,1,33],"42":[10,19,10,56],"48":[30,24,30,32],"49":[2,26,2,38],"50":[12,13,12,22],"56":[27,17,27,51],"57":[2,26,2,45],"58":[14,20,14,27],"64":[14,20,14,27],"65":[2,26,2,45],"66":[15,17,15,28],"72":[12,13,12,22],"73":[2,26,2,45],"74":[15,17,15,32],"80":[35,13,35,35],"81":[3,12,3,18],"82":[18,17,18,51],"88":[38,89,38,126],"89":[3,23,3,33],"90":[19,24,19,48],"96":[39,13,39,22],"97":[4,18,4,25],"98":[19,59,19,61],"104":[43,17,43,77],"105":[4,26,4,36],"106":[24,17,24,27],"112":[42,16,42,30],"113":[4,18,4,37],"114":[24,17,24,31],"121":[4,38,4,44],"122":[27,17,27,51],"129":[4,46,4,53],"130":[30,24,30,32],"137":[4,18,4,54],"138":[30,35,30,37],"145":[4,18,4,54],"146":[35,13,35,35],"153":[4,18,4,54],"154":[36,20,36,22],"161":[6,1,6,7],"162":[38,37,38,39],"169":[7,5,7,12],"170":[39,13,39,22],"177":[7,36,7,37],"178":[40,20,40,22],"185":[7,5,7,37],"186":[42,16,42,25],"193":[7,5,7,38],"194":[42,16,42,30],"201":[8,5,8,12],"202":[43,54,43,63],"209":[8,33,8,34],"210":[43,17,43,77],"217":[8,5,8,34],"218":[46,13,46,20],"225":[8,5,8,35],"233":[10,19,10,23],"241":[10,31,10,36],"249":[10,39,10,43],"257":[10,47,10,48],"265":[10,19,10,49],"267":[10,19,10,29],"273":[10,52,10,56],"281":[10,19,10,56],"289":[10,19,10,56],"297":[11,19,11,27],"305":[11,28,11,35],"313":[11,37,11,46],"321":[11,47,11,50],"329":[11,37,11,51],"337":[11,53,11,57],"345":[11,19,11,58],"353":[11,19,11,58],"361":[11,19,11,58],"369":[12,13,12,16],"377":[12,21,12,22],"385":[13,20,13,23],"393":[13,20,13,23],"401":[13,13,13,24],"409":[14,20,14,23],"417":[14,26,14,27],"425":[15,17,15,22],"433":[15,25,15,28],"441":[15,31,15,32],"449":[16,24,16,39],"457":[16,40,16,43],"465":[16,45,16,50],"473":[16,52,16,59],"481":[16,61,16,70],"489":[16,72,16,80],"497":[16,82,16,87],"505":[16,24,16,88],"513":[16,24,16,88],"521":[16,17,16,89],"529":[18,17,18,22],"537":[18,26,18,33],"545":[18,26,18,51],"553":[19,24,19,29],"561":[19,32,19,41],"569":[19,32,19,48],"577":[19,51,19,56],"585":[19,60,19,61],"593":[19,24,19,61],"601":[19,17,19,62],"609":[21,24,21,27],"617":[21,24,21,27],"625":[21,17,21,28],"633":[24,17,24,20],"641":[24,23,24,27],"649":[24,30,24,31],"657":[25,24,25,39],"665":[25,40,25,44],"673":[25,46,25,49],"681":[25,51,25,58],"689":[25,60,25,69],"697":[25,71,25,79],"705":[25,81,25,86],"713":[25,24,25,87],"721":[25,24,25,87],"729":[25,17,25,88],"737":[27,17,27,22],"745":[27,26,27,33],"753":[27,26,27,51],"761":[28,24,28,27],"769":[28,24,28,27],"777":[28,17,28,28],"785":[30,24,30,28],"793":[30,31,30,32],"801":[30,36,30,37],"809":[30,40,30,44],"817":[30,24,30,44],"825":[30,17,30,45],"833":[9,5,33,6],"841":[9,5,33,6],"849":[9,5,33,6],"857":[9,5,33,6],"865":[9,5,33,6],"873":[9,5,33,6],"881":[9,5,33,6],"889":[9,5,33,6],"897":[9,5,33,6],"905":[9,5,33,6],"913":[34,5,34,12],"921":[35,13,35,22],"929":[35,13,35,29],"937":[35,34,35,35],"945":[36,21,36,22],"953":[36,20,36,22],"961":[36,13,36,23],"969":[38,21,38,36],"977":[38,38,38,39],"985":[38,41,38,50],"993":[38,41,38,57],"1001":[38,59,38,66],"1009":[38,68,38,77],"1017":[38,79,38,87],"1025":[38,89,38,94],"1033":[38,98,38,105],"1041":[38,98,38,126],"1049":[38,21,38,127],"1057":[38,21,38,127],"1065":[38,21,38,127],"1073":[39,13,39,18],"1081":[39,21,39,22],"1089":[40,21,40,22],"1097":[40,20,40,22],"1105":[40,13,40,23],"1113":[42,16,42,21],"1121":[42,24,42,25],"1129":[42,29,42,30],"1137":[43,17,43,25],"1145":[43,26,43,35],"1153":[43,36,43,41],"1161":[43,26,43,42],"1169":[43,44,43,53],"1177":[43,54,43,59],"1185":[43,62,43,63],"1193":[43,44,43,64],"1201":[43,66,43,70],"1209":[43,17,43,71],"1217":[43,76,43,77],"1233":[46,15,46,20],"1241":[46,13,46,20],"1249":[46,13,46,21],"1257":[48,16,48,21],"1265":[48,16,48,21],"1273":[48,9,48,22],"1281":[34,22,49,6],"1289":[34,22,49,6],"1297":[34,22,49,6],"1305":[34,22,49,6],"1313":[34,22,49,6],"1321":[34,22,49,6],"1329":[34,22,49,6],"1337":[34,22,49,6],"1345":[34,22,49,6],"1353":[34,5,49,6],"1361":[34,5,49,7],"1369":[6,8,50,2],"1377":[6,8,50,2],"1385":[6,8,50,2],"1393":[6,8,50,2],"1401":[6,8,50,2],"1409":[9,5,33,6],"1417":[6,8,50,2],"1425":[6,8,50,2],"1433":[6,1,50,3],"1441":[6,1,50,4],"1449":[1,1,50,4],"1457":[1,1,50,4],"1465":[1,1,50,4],"1473":[1,1,50,4],"1481":[3,1,5,2],"1489":[15,13,17,14],"1497":[19,24,19,61],"1505":[18,13,22,14],"1513":[24,13,26,14],"1521":[30,24,30,44],"1529":[27,13,31,14],"1537":[14,16,32,10],"1545":[12,9,32,10],"1553":[9,5,33,6],"1561":[9,5,33,6],"1569":[35,9,37,10],"1577":[39,9,41,10],"1585":[43,13,45,14],"1593":[42,9,47,10],"1601":[34,22,49,6],"1609":[34,22,49,6],"1617":[6,8,50,2],"1625":[6,8,50,2],"1633":[1,1,50,4],"1641":[1,1,50,4],"nBranches":28,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/source-map/lib/source-map/binary-search.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/source-map/lib/source-map/binary-search_jalangi_.js","code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  exports.GREATEST_LOWER_BOUND = 1;\n  exports.LEAST_UPPER_BOUND = 2;\n\n  /**\n   * Recursive implementation of binary search.\n   *\n   * @param aLow Indices here and lower do not contain the needle.\n   * @param aHigh Indices here and higher do not contain the needle.\n   * @param aNeedle The element being searched for.\n   * @param aHaystack The non-empty array being searched.\n   * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   */\n  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n    // This function terminates when one of the following is true:\n    //\n    //   1. We find the exact element we are looking for.\n    //\n    //   2. We did not find the exact element, but we can return the index of\n    //      the next-closest element.\n    //\n    //   3. We did not find the exact element, and there is no next-closest\n    //      element than the one we are searching for, so we return -1.\n    var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n    var cmp = aCompare(aNeedle, aHaystack[mid], true);\n    if (cmp === 0) {\n      // Found the element we are looking for.\n      return mid;\n    }\n    else if (cmp > 0) {\n      // Our needle is greater than aHaystack[mid].\n      if (aHigh - mid > 1) {\n        // The element is in the upper half.\n        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n      }\n\n      // The exact needle element was not found in this haystack. Determine if\n      // we are in termination case (3) or (2) and return the appropriate thing.\n      if (aBias == exports.LEAST_UPPER_BOUND) {\n        return aHigh < aHaystack.length ? aHigh : -1;\n      } else {\n        return mid;\n      }\n    }\n    else {\n      // Our needle is less than aHaystack[mid].\n      if (mid - aLow > 1) {\n        // The element is in the lower half.\n        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n      }\n\n      // we are in termination case (3) or (2) and return the appropriate thing.\n      if (aBias == exports.LEAST_UPPER_BOUND) {\n        return mid;\n      } else {\n        return aLow < 0 ? -1 : aLow;\n      }\n    }\n  }\n\n  /**\n   * This is an implementation of binary search which will always try and return\n   * the index of the closest element if there is no exact hit. This is because\n   * mappings between original and generated line/col pairs are single points,\n   * and there is an implicit region between each of them, so a miss just means\n   * that you aren't on the very start of a region.\n   *\n   * @param aNeedle The element you are looking for.\n   * @param aHaystack The array that is being searched.\n   * @param aCompare A function which takes the needle and an element in the\n   *     array and returns -1, 0, or 1 depending on whether the needle is less\n   *     than, equal to, or greater than the element, respectively.\n   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n   */\n  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n    if (aHaystack.length === 0) {\n      return -1;\n    }\n\n    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                                aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n    if (index < 0) {\n      return -1;\n    }\n\n    // We have found either the exact element, or the next-closest element than\n    // the one we are searching for. However, there may be more than one such\n    // element. Make sure we always return the smallest of these.\n    while (index - 1 >= 0) {\n      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n        break;\n      }\n      --index;\n    }\n\n    return index;\n  };\n\n});\n"}