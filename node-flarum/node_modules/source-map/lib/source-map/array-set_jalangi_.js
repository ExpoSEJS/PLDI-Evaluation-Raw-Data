J$.iids = {"8":[3,5,3,33],"9":[1,20,1,27],"10":[3,5,3,18],"16":[14,46,14,53],"17":[1,28,1,32],"18":[3,5,3,33],"24":[25,13,25,45],"25":[1,20,1,33],"26":[14,46,14,53],"32":[25,13,25,45],"33":[1,20,1,33],"34":[14,55,14,58],"40":[28,13,28,25],"41":[1,20,1,33],"48":[36,13,36,27],"49":[2,26,2,38],"50":[14,55,14,58],"56":[42,13,42,51],"57":[2,26,2,45],"58":[25,13,25,25],"64":[42,13,42,51],"65":[2,26,2,45],"66":[28,13,28,25],"73":[2,26,2,45],"74":[39,25,39,35],"81":[3,12,3,18],"82":[39,25,39,60],"89":[3,23,3,33],"90":[42,13,42,22],"97":[4,18,4,25],"98":[42,26,42,51],"105":[4,26,4,36],"106":[45,25,45,56],"113":[4,18,4,37],"121":[4,38,4,44],"129":[4,46,4,53],"137":[4,18,4,54],"145":[4,18,4,54],"153":[4,18,4,54],"161":[6,1,6,7],"169":[7,16,7,23],"177":[7,24,7,32],"185":[7,16,7,33],"193":[7,16,7,33],"201":[7,16,7,33],"209":[9,9,9,13],"217":[9,23,9,25],"225":[9,9,9,25],"233":[9,9,9,26],"241":[10,9,10,13],"249":[10,21,10,23],"257":[10,9,10,23],"265":[10,9,10,24],"273":[8,5,11,6],"281":[8,5,11,6],"289":[12,5,12,13],"297":[13,23,13,31],"305":[13,19,13,33],"313":[13,19,13,33],"321":[13,19,13,33],"329":[14,22,14,23],"337":[14,31,14,37],"345":[14,31,14,44],"353":[14,22,14,23],"361":[14,22,14,23],"369":[14,31,14,44],"377":[14,31,14,44],"385":[14,46,14,47],"393":[14,50,14,53],"409":[14,55,14,56],"417":[14,55,14,58],"433":[15,13,15,16],"441":[15,21,15,27],"449":[15,28,15,29],"457":[15,21,15,30],"465":[15,32,15,48],"473":[15,13,15,49],"475":[15,13,15,20],"481":[15,13,15,50],"489":[17,16,17,19],"497":[17,16,17,19],"505":[17,9,17,20],"513":[12,26,18,6],"521":[12,26,18,6],"529":[12,26,18,6],"537":[12,26,18,6],"545":[12,26,18,6],"553":[12,26,18,6],"561":[12,26,18,6],"569":[12,26,18,6],"577":[12,26,18,6],"585":[12,5,18,6],"593":[12,5,18,7],"601":[19,5,19,13],"609":[19,5,19,23],"617":[20,16,20,22],"625":[20,43,20,47],"633":[20,43,20,52],"641":[20,16,20,53],"643":[20,16,20,42],"649":[20,16,20,60],"657":[20,16,20,60],"665":[20,9,20,61],"673":[19,31,21,6],"681":[19,31,21,6],"689":[19,31,21,6],"697":[19,31,21,6],"705":[19,5,21,6],"713":[19,5,21,7],"721":[22,5,22,13],"729":[22,5,22,23],"737":[23,27,23,31],"745":[23,36,23,40],"753":[23,27,23,41],"755":[23,27,23,35],"761":[23,27,23,41],"769":[23,27,23,41],"777":[24,19,24,23],"785":[24,19,24,30],"793":[24,19,24,37],"801":[24,19,24,37],"809":[24,19,24,37],"817":[25,14,25,25],"825":[25,29,25,45],"833":[26,13,26,17],"841":[26,13,26,24],"849":[26,30,26,34],"857":[26,13,26,35],"859":[26,13,26,29],"865":[26,13,26,36],"873":[28,14,28,25],"881":[29,13,29,17],"889":[29,13,29,22],"897":[29,23,29,27],"905":[29,40,29,44],"913":[29,23,29,45],"915":[29,23,29,39],"921":[29,49,29,52],"929":[29,13,29,52],"937":[29,13,29,53],"945":[22,30,31,6],"953":[22,30,31,6],"961":[22,30,31,6],"969":[22,30,31,6],"977":[22,30,31,6],"985":[22,30,31,6],"993":[22,30,31,6],"1001":[22,30,31,6],"1009":[22,5,31,6],"1017":[22,5,31,7],"1025":[32,5,32,13],"1033":[32,5,32,23],"1041":[33,16,33,22],"1049":[33,16,33,32],"1057":[33,16,33,47],"1065":[33,53,33,57],"1073":[33,53,33,62],"1081":[33,64,33,68],"1089":[33,81,33,85],"1097":[33,64,33,86],"1099":[33,64,33,80],"1105":[33,16,33,87],"1107":[33,16,33,52],"1113":[33,16,33,87],"1121":[33,9,33,88],"1129":[32,30,34,6],"1137":[32,30,34,6],"1145":[32,30,34,6],"1153":[32,30,34,6],"1161":[32,30,34,6],"1169":[32,5,34,6],"1177":[32,5,34,7],"1185":[35,5,35,13],"1193":[35,5,35,23],"1201":[36,13,36,17],"1209":[36,22,36,26],"1217":[36,13,36,27],"1219":[36,13,36,21],"1225":[37,20,37,24],"1233":[37,20,37,29],"1241":[37,30,37,34],"1249":[37,47,37,51],"1257":[37,30,37,52],"1259":[37,30,37,46],"1265":[37,20,37,53],"1273":[37,20,37,53],"1281":[37,13,37,54],"1289":[39,19,39,24],"1297":[39,25,39,28],"1305":[39,31,39,35],"1313":[39,38,39,60],"1321":[39,15,39,61],"1329":[39,15,39,61],"1337":[39,9,39,62],"1345":[35,34,40,6],"1353":[35,34,40,6],"1361":[35,34,40,6],"1369":[35,34,40,6],"1377":[35,34,40,6],"1385":[35,5,40,6],"1393":[35,5,40,7],"1401":[41,5,41,13],"1409":[41,5,41,23],"1417":[42,13,42,17],"1425":[42,21,42,22],"1433":[42,26,42,30],"1441":[42,33,42,37],"1449":[42,33,42,44],"1457":[42,33,42,51],"1465":[43,20,43,24],"1473":[43,20,43,31],"1481":[43,32,43,36],"1489":[43,20,43,37],"1497":[43,20,43,37],"1505":[43,13,43,38],"1513":[45,19,45,24],"1521":[45,25,45,49],"1529":[45,52,45,56],"1537":[45,15,45,57],"1545":[45,15,45,57],"1553":[45,9,45,58],"1561":[41,29,46,6],"1569":[41,29,46,6],"1577":[41,29,46,6],"1585":[41,29,46,6],"1593":[41,29,46,6],"1601":[41,5,46,6],"1609":[41,5,46,7],"1617":[47,5,47,13],"1625":[47,5,47,23],"1633":[48,16,48,20],"1641":[48,16,48,27],"1649":[48,16,48,35],"1651":[48,16,48,33],"1657":[48,16,48,35],"1665":[48,9,48,36],"1673":[47,34,49,6],"1681":[47,34,49,6],"1689":[47,34,49,6],"1697":[47,34,49,6],"1705":[47,5,49,6],"1713":[47,5,49,7],"1721":[50,5,50,12],"1729":[50,24,50,32],"1737":[50,5,50,32],"1745":[50,5,50,33],"1753":[6,8,51,2],"1761":[6,8,51,2],"1769":[6,8,51,2],"1777":[6,8,51,2],"1785":[6,8,51,2],"1793":[6,8,51,2],"1801":[8,5,11,6],"1809":[6,8,51,2],"1817":[6,8,51,2],"1825":[6,1,51,3],"1833":[6,1,51,4],"1841":[1,1,51,4],"1849":[1,1,51,4],"1857":[1,1,51,4],"1865":[1,1,51,4],"1873":[3,1,5,2],"1881":[8,5,11,6],"1889":[8,5,11,6],"1897":[14,9,16,10],"1905":[14,9,16,10],"1913":[12,26,18,6],"1921":[12,26,18,6],"1929":[19,31,21,6],"1937":[19,31,21,6],"1945":[25,9,27,10],"1953":[28,9,30,10],"1961":[22,30,31,6],"1969":[22,30,31,6],"1977":[32,30,34,6],"1985":[32,30,34,6],"1993":[36,9,38,10],"2001":[35,34,40,6],"2009":[35,34,40,6],"2017":[42,9,44,10],"2025":[41,29,46,6],"2033":[41,29,46,6],"2041":[47,34,49,6],"2049":[47,34,49,6],"2057":[6,8,51,2],"2065":[6,8,51,2],"2073":[1,1,51,4],"2081":[1,1,51,4],"nBranches":16,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/source-map/lib/source-map/array-set.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/source-map/lib/source-map/array-set_jalangi_.js","code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var util = require('./util');\n\n  /**\n   * A data structure which is a combination of an array and a set. Adding a new\n   * member is O(1), testing for membership is O(1), and finding the index of an\n   * element is O(1). Removing elements from the set is not supported. Only\n   * strings are supported for membership.\n   */\n  function ArraySet() {\n    this._array = [];\n    this._set = {};\n  }\n\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n    var set = new ArraySet();\n    for (var i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n    return set;\n  };\n\n  /**\n   * Return how many unique items are in this ArraySet. If duplicates have been\n   * added, than those do not count towards the size.\n   *\n   * @returns Number\n   */\n  ArraySet.prototype.size = function ArraySet_size() {\n    return Object.getOwnPropertyNames(this._set).length;\n  };\n\n  /**\n   * Add the given string to this set.\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n    var isDuplicate = this.has(aStr);\n    var idx = this._array.length;\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n    if (!isDuplicate) {\n      this._set[util.toSetString(aStr)] = idx;\n    }\n  };\n\n  /**\n   * Is the given string a member of this set?\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.has = function ArraySet_has(aStr) {\n    return Object.prototype.hasOwnProperty.call(this._set,\n                                                util.toSetString(aStr));\n  };\n\n  /**\n   * What is the index of the given string in the array?\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n    if (this.has(aStr)) {\n      return this._set[util.toSetString(aStr)];\n    }\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  };\n\n  /**\n   * What is the element at the given index?\n   *\n   * @param Number aIdx\n   */\n  ArraySet.prototype.at = function ArraySet_at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n    throw new Error('No element indexed by ' + aIdx);\n  };\n\n  /**\n   * Returns the array representation of this set (which has the proper indices\n   * indicated by indexOf). Note that this is a copy of the internal array used\n   * for storing the members so that no one can mess with internal state.\n   */\n  ArraySet.prototype.toArray = function ArraySet_toArray() {\n    return this._array.slice();\n  };\n\n  exports.ArraySet = ArraySet;\n\n});\n"};
jalangiLabel1164:
    while (true) {
        try {
            J$.Se(1841, '/home/blake/ExpoSE/Targets/node-flarum/node_modules/source-map/lib/source-map/array-set_jalangi_.js', '/home/blake/ExpoSE/Targets/node-flarum/node_modules/source-map/lib/source-map/array-set.js');
            J$.N(1849, '__secret__S$', __secret__S$, 0);
            J$.N(1857, '__secret__traits__', __secret__traits__, 0);
            J$.N(1865, 'define', define, 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            if (J$.X1(1873, J$.C(8, J$.B(18, '!==', J$.U(10, 'typeof', J$.R(81, 'define', define, 1)), J$.T(89, 'function', 21, false), 0)))) {
                var define = J$.X1(153, J$.W(145, 'define', J$.F(137, J$.F(113, J$.R(97, 'require', require, 2), 0)(J$.T(105, 'amdefine', 21, false)), 0)(J$.R(121, 'module', module, 2), J$.R(129, 'require', require, 2)), define, 3));
            }
            J$.X1(1833, J$.F(1825, J$.R(161, 'define', define, 1), 0)(J$.T(1817, function (require, exports, module) {
                jalangiLabel1163:
                    while (true) {
                        try {
                            J$.Fe(1753, arguments.callee, this, arguments);
                            function ArraySet() {
                                jalangiLabel1155:
                                    while (true) {
                                        try {
                                            J$.Fe(273, arguments.callee, this, arguments);
                                            arguments = J$.N(281, 'arguments', arguments, 4);
                                            J$.X1(233, J$.P(225, J$.R(209, 'this', this, 0), '_array', J$.T(217, [], 10, false), 0));
                                            J$.X1(265, J$.P(257, J$.R(241, 'this', this, 0), '_set', J$.T(249, {}, 11, false), 0));
                                        } catch (J$e) {
                                            J$.Ex(1881, J$e);
                                        } finally {
                                            if (J$.Fr(1889))
                                                continue jalangiLabel1155;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(1761, 'arguments', arguments, 4);
                            require = J$.N(1769, 'require', require, 4);
                            exports = J$.N(1777, 'exports', exports, 4);
                            module = J$.N(1785, 'module', module, 4);
                            J$.N(1793, 'util', util, 0);
                            ArraySet = J$.N(1809, 'ArraySet', J$.T(1801, ArraySet, 12, false, 273), 0);
                            var util = J$.X1(201, J$.W(193, 'util', J$.F(185, J$.R(169, 'require', require, 0), 0)(J$.T(177, './util', 21, false)), util, 1));
                            J$.X1(593, J$.P(585, J$.R(289, 'ArraySet', ArraySet, 0), 'fromArray', J$.T(577, function ArraySet_fromArray(aArray, aAllowDuplicates) {
                                jalangiLabel1156:
                                    while (true) {
                                        try {
                                            J$.Fe(513, arguments.callee, this, arguments);
                                            arguments = J$.N(521, 'arguments', arguments, 4);
                                            ArraySet_fromArray = J$.N(529, 'ArraySet_fromArray', ArraySet_fromArray, 0);
                                            aArray = J$.N(537, 'aArray', aArray, 4);
                                            aAllowDuplicates = J$.N(545, 'aAllowDuplicates', aAllowDuplicates, 4);
                                            J$.N(553, 'set', set, 0);
                                            J$.N(561, 'i', i, 0);
                                            J$.N(569, 'len', len, 0);
                                            var set = J$.X1(321, J$.W(313, 'set', J$.F(305, J$.R(297, 'ArraySet', ArraySet, 0), 1)(), set, 1));
                                            for (var i = J$.X1(361, J$.W(353, 'i', J$.T(329, 0, 22, false), i, 1)), len = J$.X1(377, J$.W(369, 'len', J$.G(345, J$.R(337, 'aArray', aArray, 0), 'length', 0), len, 1)); J$.X1(1897, J$.C(16, J$.B(26, '<', J$.R(385, 'i', i, 0), J$.R(393, 'len', len, 0), 0))); J$.X1(1905, J$.B(50, '-', i = J$.W(417, 'i', J$.B(42, '+', J$.U(34, '+', J$.R(409, 'i', i, 0)), J$.T(401, 1, 22, false), 0), i, 0), J$.T(425, 1, 22, false), 0))) {
                                                J$.X1(481, J$.M(473, J$.R(433, 'set', set, 0), 'add', 0)(J$.G(457, J$.R(441, 'aArray', aArray, 0), J$.R(449, 'i', i, 0), 4), J$.R(465, 'aAllowDuplicates', aAllowDuplicates, 0)));
                                            }
                                            return J$.X1(505, J$.Rt(497, J$.R(489, 'set', set, 0)));
                                        } catch (J$e) {
                                            J$.Ex(1913, J$e);
                                        } finally {
                                            if (J$.Fr(1921))
                                                continue jalangiLabel1156;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 513), 0));
                            J$.X1(713, J$.P(705, J$.G(609, J$.R(601, 'ArraySet', ArraySet, 0), 'prototype', 0), 'size', J$.T(697, function ArraySet_size() {
                                jalangiLabel1157:
                                    while (true) {
                                        try {
                                            J$.Fe(673, arguments.callee, this, arguments);
                                            arguments = J$.N(681, 'arguments', arguments, 4);
                                            ArraySet_size = J$.N(689, 'ArraySet_size', ArraySet_size, 0);
                                            return J$.X1(665, J$.Rt(657, J$.G(649, J$.M(641, J$.R(617, 'Object', Object, 2), 'getOwnPropertyNames', 0)(J$.G(633, J$.R(625, 'this', this, 0), '_set', 0)), 'length', 0)));
                                        } catch (J$e) {
                                            J$.Ex(1929, J$e);
                                        } finally {
                                            if (J$.Fr(1937))
                                                continue jalangiLabel1157;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 673), 0));
                            J$.X1(1017, J$.P(1009, J$.G(729, J$.R(721, 'ArraySet', ArraySet, 0), 'prototype', 0), 'add', J$.T(1001, function ArraySet_add(aStr, aAllowDuplicates) {
                                jalangiLabel1158:
                                    while (true) {
                                        try {
                                            J$.Fe(945, arguments.callee, this, arguments);
                                            arguments = J$.N(953, 'arguments', arguments, 4);
                                            ArraySet_add = J$.N(961, 'ArraySet_add', ArraySet_add, 0);
                                            aStr = J$.N(969, 'aStr', aStr, 4);
                                            aAllowDuplicates = J$.N(977, 'aAllowDuplicates', aAllowDuplicates, 4);
                                            J$.N(985, 'isDuplicate', isDuplicate, 0);
                                            J$.N(993, 'idx', idx, 0);
                                            var isDuplicate = J$.X1(769, J$.W(761, 'isDuplicate', J$.M(753, J$.R(737, 'this', this, 0), 'has', 0)(J$.R(745, 'aStr', aStr, 0)), isDuplicate, 1));
                                            var idx = J$.X1(809, J$.W(801, 'idx', J$.G(793, J$.G(785, J$.R(777, 'this', this, 0), '_array', 0), 'length', 0), idx, 1));
                                            if (J$.X1(1945, J$.C(32, J$.C(24, J$.U(58, '!', J$.R(817, 'isDuplicate', isDuplicate, 0))) ? J$._() : J$.R(825, 'aAllowDuplicates', aAllowDuplicates, 0)))) {
                                                J$.X1(865, J$.M(857, J$.G(841, J$.R(833, 'this', this, 0), '_array', 0), 'push', 0)(J$.R(849, 'aStr', aStr, 0)));
                                            }
                                            if (J$.X1(1953, J$.C(40, J$.U(66, '!', J$.R(873, 'isDuplicate', isDuplicate, 0))))) {
                                                J$.X1(937, J$.P(929, J$.G(889, J$.R(881, 'this', this, 0), '_set', 0), J$.M(913, J$.R(897, 'util', util, 0), 'toSetString', 0)(J$.R(905, 'aStr', aStr, 0)), J$.R(921, 'idx', idx, 0), 2));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(1961, J$e);
                                        } finally {
                                            if (J$.Fr(1969))
                                                continue jalangiLabel1158;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 945), 0));
                            J$.X1(1177, J$.P(1169, J$.G(1033, J$.R(1025, 'ArraySet', ArraySet, 0), 'prototype', 0), 'has', J$.T(1161, function ArraySet_has(aStr) {
                                jalangiLabel1159:
                                    while (true) {
                                        try {
                                            J$.Fe(1129, arguments.callee, this, arguments);
                                            arguments = J$.N(1137, 'arguments', arguments, 4);
                                            ArraySet_has = J$.N(1145, 'ArraySet_has', ArraySet_has, 0);
                                            aStr = J$.N(1153, 'aStr', aStr, 4);
                                            return J$.X1(1121, J$.Rt(1113, J$.M(1105, J$.G(1057, J$.G(1049, J$.R(1041, 'Object', Object, 2), 'prototype', 0), 'hasOwnProperty', 0), 'call', 0)(J$.G(1073, J$.R(1065, 'this', this, 0), '_set', 0), J$.M(1097, J$.R(1081, 'util', util, 0), 'toSetString', 0)(J$.R(1089, 'aStr', aStr, 0)))));
                                        } catch (J$e) {
                                            J$.Ex(1977, J$e);
                                        } finally {
                                            if (J$.Fr(1985))
                                                continue jalangiLabel1159;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 1129), 0));
                            J$.X1(1393, J$.P(1385, J$.G(1193, J$.R(1185, 'ArraySet', ArraySet, 0), 'prototype', 0), 'indexOf', J$.T(1377, function ArraySet_indexOf(aStr) {
                                jalangiLabel1160:
                                    while (true) {
                                        try {
                                            J$.Fe(1345, arguments.callee, this, arguments);
                                            arguments = J$.N(1353, 'arguments', arguments, 4);
                                            ArraySet_indexOf = J$.N(1361, 'ArraySet_indexOf', ArraySet_indexOf, 0);
                                            aStr = J$.N(1369, 'aStr', aStr, 4);
                                            if (J$.X1(1993, J$.C(48, J$.M(1217, J$.R(1201, 'this', this, 0), 'has', 0)(J$.R(1209, 'aStr', aStr, 0))))) {
                                                return J$.X1(1281, J$.Rt(1273, J$.G(1265, J$.G(1233, J$.R(1225, 'this', this, 0), '_set', 0), J$.M(1257, J$.R(1241, 'util', util, 0), 'toSetString', 0)(J$.R(1249, 'aStr', aStr, 0)), 4)));
                                            }
                                            throw J$.X1(1337, J$.Th(1329, J$.F(1321, J$.R(1289, 'Error', Error, 2), 1)(J$.B(82, '+', J$.B(74, '+', J$.T(1297, '"', 21, false), J$.R(1305, 'aStr', aStr, 0), 0), J$.T(1313, '" is not in the set.', 21, false), 0))));
                                        } catch (J$e) {
                                            J$.Ex(2001, J$e);
                                        } finally {
                                            if (J$.Fr(2009))
                                                continue jalangiLabel1160;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 1345), 0));
                            J$.X1(1609, J$.P(1601, J$.G(1409, J$.R(1401, 'ArraySet', ArraySet, 0), 'prototype', 0), 'at', J$.T(1593, function ArraySet_at(aIdx) {
                                jalangiLabel1161:
                                    while (true) {
                                        try {
                                            J$.Fe(1561, arguments.callee, this, arguments);
                                            arguments = J$.N(1569, 'arguments', arguments, 4);
                                            ArraySet_at = J$.N(1577, 'ArraySet_at', ArraySet_at, 0);
                                            aIdx = J$.N(1585, 'aIdx', aIdx, 4);
                                            if (J$.X1(2017, J$.C(64, J$.C(56, J$.B(90, '>=', J$.R(1417, 'aIdx', aIdx, 0), J$.T(1425, 0, 22, false), 0)) ? J$.B(98, '<', J$.R(1433, 'aIdx', aIdx, 0), J$.G(1457, J$.G(1449, J$.R(1441, 'this', this, 0), '_array', 0), 'length', 0), 0) : J$._()))) {
                                                return J$.X1(1505, J$.Rt(1497, J$.G(1489, J$.G(1473, J$.R(1465, 'this', this, 0), '_array', 0), J$.R(1481, 'aIdx', aIdx, 0), 4)));
                                            }
                                            throw J$.X1(1553, J$.Th(1545, J$.F(1537, J$.R(1513, 'Error', Error, 2), 1)(J$.B(106, '+', J$.T(1521, 'No element indexed by ', 21, false), J$.R(1529, 'aIdx', aIdx, 0), 0))));
                                        } catch (J$e) {
                                            J$.Ex(2025, J$e);
                                        } finally {
                                            if (J$.Fr(2033))
                                                continue jalangiLabel1161;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 1561), 0));
                            J$.X1(1713, J$.P(1705, J$.G(1625, J$.R(1617, 'ArraySet', ArraySet, 0), 'prototype', 0), 'toArray', J$.T(1697, function ArraySet_toArray() {
                                jalangiLabel1162:
                                    while (true) {
                                        try {
                                            J$.Fe(1673, arguments.callee, this, arguments);
                                            arguments = J$.N(1681, 'arguments', arguments, 4);
                                            ArraySet_toArray = J$.N(1689, 'ArraySet_toArray', ArraySet_toArray, 0);
                                            return J$.X1(1665, J$.Rt(1657, J$.M(1649, J$.G(1641, J$.R(1633, 'this', this, 0), '_array', 0), 'slice', 0)()));
                                        } catch (J$e) {
                                            J$.Ex(2041, J$e);
                                        } finally {
                                            if (J$.Fr(2049))
                                                continue jalangiLabel1162;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 1673), 0));
                            J$.X1(1745, J$.P(1737, J$.R(1721, 'exports', exports, 0), 'ArraySet', J$.R(1729, 'ArraySet', ArraySet, 0), 0));
                        } catch (J$e) {
                            J$.Ex(2057, J$e);
                        } finally {
                            if (J$.Fr(2065))
                                continue jalangiLabel1163;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1753)));
        } catch (J$e) {
            J$.Ex(2073, J$e);
        } finally {
            if (J$.Sr(2081)) {
                J$.L();
                continue jalangiLabel1164;
            } else {
                J$.L();
                break jalangiLabel1164;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
