{"8":[3,5,3,33],"9":[1,20,1,27],"10":[3,5,3,18],"16":[22,21,22,51],"17":[1,28,1,32],"18":[3,5,3,33],"24":[21,29,21,34],"25":[1,20,1,33],"26":[13,50,13,60],"32":[16,13,16,18],"33":[1,20,1,33],"34":[13,33,13,61],"41":[1,20,1,33],"42":[13,27,13,61],"49":[2,26,2,38],"50":[16,13,16,18],"57":[2,26,2,45],"58":[18,21,18,26],"65":[2,26,2,45],"66":[21,29,21,34],"73":[2,26,2,45],"74":[21,36,21,39],"81":[3,12,3,18],"89":[3,23,3,33],"90":[21,36,21,39],"97":[4,18,4,25],"98":[22,21,22,51],"105":[4,26,4,36],"106":[23,26,23,27],"113":[4,18,4,37],"114":[27,23,27,28],"121":[4,38,4,44],"122":[28,21,28,26],"129":[4,46,4,53],"130":[29,45,29,50],"137":[4,18,4,54],"138":[30,42,30,47],"145":[4,18,4,54],"146":[34,41,34,55],"153":[4,18,4,54],"161":[6,1,6,7],"169":[8,20,8,23],"177":[8,24,8,25],"185":[8,20,8,26],"193":[8,20,8,26],"201":[8,20,8,26],"209":[9,9,9,12],"217":[9,13,9,14],"225":[9,18,9,21],"233":[9,22,9,23],"241":[9,18,9,24],"249":[9,9,9,24],"257":[9,9,9,25],"265":[10,9,10,12],"273":[10,13,10,14],"281":[10,18,10,22],"289":[10,9,10,22],"297":[10,9,10,23],"305":[7,5,11,6],"313":[7,5,11,6],"321":[7,5,11,6],"329":[7,5,11,6],"337":[7,5,11,6],"345":[7,5,11,6],"353":[13,16,13,20],"361":[13,27,13,30],"369":[13,33,13,37],"377":[13,33,13,46],"379":[13,33,13,44],"385":[13,50,13,54],"393":[13,57,13,60],"401":[13,16,13,62],"403":[13,16,13,26],"409":[13,16,13,62],"417":[13,9,13,63],"425":[12,5,14,6],"433":[12,5,14,6],"441":[12,5,14,6],"449":[12,5,14,6],"457":[16,13,16,14],"465":[16,17,16,18],"473":[17,30,17,46],"481":[17,47,17,48],"489":[17,50,17,51],"497":[17,30,17,52],"505":[17,30,17,52],"513":[17,30,17,52],"521":[18,21,18,22],"529":[18,25,18,26],"537":[18,21,18,26],"545":[18,21,18,26],"553":[19,13,19,17],"561":[19,18,19,21],"569":[19,23,19,33],"577":[19,35,19,36],"585":[19,13,19,37],"593":[19,13,19,38],"601":[20,25,20,28],"609":[20,29,20,30],"617":[20,25,20,31],"625":[20,25,20,31],"633":[20,25,20,31],"641":[21,26,21,27],"649":[21,26,21,27],"657":[21,26,21,27],"665":[21,29,21,30],"673":[21,33,21,34],"689":[21,36,21,37],"697":[21,36,21,39],"713":[22,21,22,31],"721":[22,32,22,35],"729":[22,36,22,37],"737":[22,32,22,38],"745":[22,40,22,45],"753":[22,21,22,46],"761":[22,50,22,51],"769":[23,26,23,27],"777":[23,21,23,22],"785":[23,21,23,27],"793":[23,21,23,28],"801":[24,21,24,25],"809":[24,26,24,29],"817":[24,31,24,32],"825":[24,34,24,35],"833":[24,21,24,36],"841":[24,21,24,37],"849":[27,13,27,17],"857":[27,18,27,21],"865":[27,23,27,24],"873":[27,27,27,28],"881":[27,30,27,31],"889":[27,13,27,32],"897":[27,13,27,33],"905":[28,21,28,22],"913":[28,25,28,26],"921":[28,21,28,26],"929":[28,21,28,26],"937":[29,13,29,24],"945":[29,25,29,28],"953":[29,30,29,40],"961":[29,42,29,43],"969":[29,45,29,46],"977":[29,49,29,50],"985":[29,13,29,51],"993":[29,13,29,52],"1001":[30,13,30,24],"1009":[30,25,30,28],"1017":[30,30,30,40],"1025":[30,42,30,43],"1033":[30,46,30,47],"1041":[30,49,30,50],"1049":[30,13,30,51],"1057":[30,13,30,52],"1065":[15,5,32,6],"1073":[15,5,32,6],"1081":[15,5,32,6],"1089":[15,5,32,6],"1097":[15,5,32,6],"1105":[15,5,32,6],"1113":[15,5,32,6],"1121":[15,5,32,6],"1129":[15,5,32,6],"1137":[15,5,32,6],"1145":[15,5,32,6],"1153":[33,5,33,12],"1161":[34,9,34,20],"1169":[34,21,34,24],"1177":[34,26,34,36],"1185":[34,38,34,39],"1193":[34,41,34,44],"1201":[34,41,34,51],"1209":[34,54,34,55],"1217":[34,9,34,56],"1225":[34,9,34,57],"1233":[33,25,35,6],"1241":[33,25,35,6],"1249":[33,25,35,6],"1257":[33,25,35,6],"1265":[33,25,35,6],"1273":[33,5,35,6],"1281":[33,5,35,7],"1289":[6,8,36,2],"1297":[6,8,36,2],"1305":[6,8,36,2],"1313":[6,8,36,2],"1321":[6,8,36,2],"1329":[7,5,11,6],"1337":[6,8,36,2],"1345":[12,5,14,6],"1353":[6,8,36,2],"1361":[15,5,32,6],"1369":[6,8,36,2],"1377":[6,8,36,2],"1385":[6,1,36,3],"1393":[6,1,36,4],"1401":[1,1,36,4],"1409":[1,1,36,4],"1417":[1,1,36,4],"1425":[1,1,36,4],"1433":[3,1,5,2],"1441":[7,5,11,6],"1449":[7,5,11,6],"1457":[12,5,14,6],"1465":[12,5,14,6],"1473":[22,17,25,18],"1481":[21,13,26,14],"1489":[21,13,26,14],"1497":[16,9,31,10],"1505":[15,5,32,6],"1513":[15,5,32,6],"1521":[33,25,35,6],"1529":[33,25,35,6],"1537":[6,8,36,2],"1545":[6,8,36,2],"1553":[1,1,36,4],"1561":[1,1,36,4],"nBranches":8,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/source-map/lib/source-map/quick-sort.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/source-map/lib/source-map/quick-sort_jalangi_.js","code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  // It turns out that some (most?) JavaScript engines don't self-host\n  // `Array.prototype.sort`. This makes sense because C++ will likely remain\n  // faster than JS when doing raw CPU-intensive sorting. However, when using a\n  // custom comparator function, calling back and forth between the VM's C++ and\n  // JIT'd JS is rather slow *and* loses JIT type information, resulting in\n  // worse generated code for the comparator function than would be optimal. In\n  // fact, when sorting with a comparator, these costs outweigh the benefits of\n  // sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n  // a ~3500ms mean speed-up in `bench/bench.html`.\n\n  /**\n   * Swap the elements indexed by `x` and `y` in the array `ary`.\n   *\n   * @param {Array} ary\n   *        The array.\n   * @param {Number} x\n   *        The index of the first item.\n   * @param {Number} y\n   *        The index of the second item.\n   */\n  function swap(ary, x, y) {\n    var temp = ary[x];\n    ary[x] = ary[y];\n    ary[y] = temp;\n  }\n\n  /**\n   * Returns a random integer within the range `low .. high` inclusive.\n   *\n   * @param {Number} low\n   *        The lower bound on the range.\n   * @param {Number} high\n   *        The upper bound on the range.\n   */\n  function randomIntInRange(low, high) {\n    return Math.round(low + (Math.random() * (high - low)));\n  }\n\n  /**\n   * The Quick Sort algorithm.\n   *\n   * @param {Array} ary\n   *        An array to sort.\n   * @param {function} comparator\n   *        Function to use to compare two items.\n   * @param {Number} p\n   *        Start index of the array\n   * @param {Number} r\n   *        End index of the array\n   */\n  function doQuickSort(ary, comparator, p, r) {\n    // If our lower bound is less than our upper bound, we (1) partition the\n    // array into two pieces and (2) recurse on each half. If it is not, this is\n    // the empty array and our base case.\n\n    if (p < r) {\n      // (1) Partitioning.\n      //\n      // The partitioning chooses a pivot between `p` and `r` and moves all\n      // elements that are less than or equal to the pivot to the before it, and\n      // all the elements that are greater than it after it. The effect is that\n      // once partition is done, the pivot is in the exact place it will be when\n      // the array is put in sorted order, and it will not need to be moved\n      // again. This runs in O(n) time.\n\n      // Always choose a random pivot so that an input array which is reverse\n      // sorted does not cause O(n^2) running time.\n      var pivotIndex = randomIntInRange(p, r);\n      var i = p - 1;\n\n      swap(ary, pivotIndex, r);\n      var pivot = ary[r];\n\n      // Immediately after `j` is incremented in this loop, the following hold\n      // true:\n      //\n      //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n      //\n      //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n      for (var j = p; j < r; j++) {\n        if (comparator(ary[j], pivot) <= 0) {\n          i += 1;\n          swap(ary, i, j);\n        }\n      }\n\n      swap(ary, i + 1, j);\n      var q = i + 1;\n\n      // (2) Recurse on each half.\n\n      doQuickSort(ary, comparator, p, q - 1);\n      doQuickSort(ary, comparator, q + 1, r);\n    }\n  }\n\n  /**\n   * Sort the given array in-place with the given comparator function.\n   *\n   * @param {Array} ary\n   *        An array to sort.\n   * @param {function} comparator\n   *        Function to use to compare two items.\n   */\n  exports.quickSort = function (ary, comparator) {\n    doQuickSort(ary, comparator, 0, ary.length - 1);\n  };\n\n});\n"}