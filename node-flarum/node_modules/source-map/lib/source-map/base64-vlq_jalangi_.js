J$.iids = {"8":[3,5,3,33],"9":[1,20,1,27],"10":[3,5,3,18],"16":[13,16,13,26],"17":[1,28,1,32],"18":[3,5,3,33],"24":[18,16,18,26],"25":[1,20,1,33],"26":[9,20,9,39],"32":[27,17,27,24],"33":[1,20,1,33],"34":[10,25,10,37],"40":[31,18,31,25],"41":[1,20,1,33],"42":[13,16,13,26],"48":[40,17,40,33],"49":[2,26,2,38],"50":[13,30,13,37],"56":[44,17,44,29],"57":[2,26,2,45],"58":[13,30,13,42],"64":[51,18,51,30],"65":[2,26,2,45],"66":[13,29,13,47],"73":[2,26,2,45],"74":[13,51,13,62],"81":[3,12,3,18],"82":[13,50,13,67],"89":[3,23,3,33],"90":[16,27,16,37],"97":[4,18,4,25],"98":[16,26,16,44],"105":[4,26,4,36],"106":[17,23,17,34],"113":[4,18,4,37],"114":[18,29,18,37],"121":[4,38,4,44],"122":[25,21,25,40],"129":[4,46,4,53],"130":[26,22,26,36],"137":[4,18,4,54],"138":[27,17,27,24],"145":[4,18,4,54],"146":[28,26,28,46],"153":[4,18,4,54],"154":[30,24,30,44],"161":[6,1,6,7],"162":[31,18,31,25],"169":[7,18,7,25],"170":[40,17,40,33],"177":[7,26,7,36],"178":[43,51,43,59],"185":[7,18,7,37],"193":[7,18,7,37],"194":[43,51,43,59],"201":[7,18,7,37],"202":[44,27,44,29],"209":[8,26,8,27],"210":[44,17,44,29],"217":[8,26,8,27],"218":[45,72,45,82],"225":[8,26,8,27],"226":[45,33,45,83],"233":[9,20,9,21],"234":[47,31,47,59],"241":[9,25,9,39],"242":[47,29,47,60],"249":[9,20,9,39],"250":[47,28,47,60],"257":[9,20,9,39],"258":[48,22,48,35],"265":[10,25,10,33],"266":[49,32,49,46],"273":[10,36,10,37],"274":[49,22,49,47],"281":[10,25,10,37],"282":[50,22,50,36],"289":[10,25,10,37],"297":[11,32,11,40],"305":[11,32,11,40],"313":[11,32,11,40],"321":[13,16,13,22],"329":[13,25,13,26],"337":[13,31,13,37],"345":[13,41,13,42],"353":[13,46,13,47],"361":[13,51,13,57],"369":[13,61,13,62],"377":[13,66,13,67],"385":[13,16,13,67],"393":[13,9,13,68],"401":[12,5,14,6],"409":[12,5,14,6],"417":[12,5,14,6],"425":[16,27,16,33],"433":[16,36,16,37],"441":[16,43,16,44],"449":[16,26,16,44],"457":[16,26,16,44],"465":[17,23,17,29],"473":[17,33,17,34],"481":[17,23,17,34],"489":[17,23,17,34],"497":[18,16,18,26],"505":[18,30,18,37],"513":[18,40,18,47],"521":[18,16,18,47],"529":[18,9,18,48],"537":[15,5,19,6],"545":[15,5,19,6],"553":[15,5,19,6],"561":[15,5,19,6],"569":[15,5,19,6],"577":[20,5,20,12],"585":[21,23,21,25],"593":[21,23,21,25],"601":[21,23,21,25],"609":[23,19,23,30],"617":[23,31,23,37],"625":[23,19,23,38],"633":[23,19,23,38],"641":[23,19,23,38],"649":[25,21,25,24],"657":[25,27,25,40],"665":[25,21,25,40],"673":[25,13,25,41],"681":[26,22,26,36],"689":[26,13,26,16],"697":[26,13,26,36],"705":[26,13,26,37],"713":[27,17,27,20],"721":[27,23,27,24],"729":[28,26,28,46],"737":[28,17,28,22],"745":[28,17,28,46],"753":[28,17,28,47],"761":[30,24,30,30],"769":[30,38,30,43],"777":[30,24,30,44],"779":[30,24,30,37],"785":[30,13,30,20],"793":[30,13,30,44],"801":[30,13,30,45],"809":[31,18,31,21],"817":[31,24,31,25],"825":[32,16,32,23],"833":[32,16,32,23],"841":[32,9,32,24],"849":[20,22,33,6],"857":[20,22,33,6],"865":[20,22,33,6],"873":[20,22,33,6],"881":[20,22,33,6],"889":[20,22,33,6],"897":[20,22,33,6],"905":[20,22,33,6],"913":[20,5,33,6],"921":[20,5,33,7],"929":[34,5,34,12],"937":[35,22,35,26],"945":[35,22,35,33],"953":[35,22,35,33],"961":[35,22,35,33],"969":[36,22,36,23],"977":[36,22,36,23],"985":[36,22,36,23],"993":[37,21,37,22],"1001":[37,21,37,22],"1009":[37,21,37,22],"1017":[40,17,40,23],"1025":[40,27,40,33],"1033":[41,27,41,32],"1041":[41,33,41,77],"1049":[41,23,41,78],"1057":[41,23,41,78],"1065":[41,17,41,79],"1073":[43,21,43,27],"1081":[43,35,43,39],"1097":[43,51,43,57],"1105":[43,51,43,59],"1121":[43,35,43,60],"1123":[43,35,43,50],"1129":[43,21,43,61],"1131":[43,21,43,34],"1137":[43,21,43,61],"1145":[43,13,43,62],"1153":[44,17,44,22],"1161":[44,28,44,29],"1169":[45,27,45,32],"1177":[45,33,45,57],"1185":[45,60,45,64],"1193":[45,72,45,78],"1201":[45,81,45,82],"1209":[45,60,45,83],"1211":[45,60,45,71],"1217":[45,23,45,84],"1225":[45,23,45,84],"1233":[45,17,45,85],"1241":[47,31,47,36],"1249":[47,39,47,59],"1257":[47,28,47,60],"1265":[47,13,47,61],"1273":[48,22,48,35],"1281":[48,13,48,18],"1289":[48,13,48,35],"1297":[48,13,48,36],"1305":[49,22,49,28],"1313":[49,32,49,37],"1321":[49,41,49,46],"1329":[49,22,49,47],"1337":[49,13,49,48],"1345":[50,22,50,36],"1353":[50,13,50,18],"1361":[50,13,50,36],"1369":[50,13,50,37],"1377":[51,18,51,30],"1385":[52,9,52,18],"1393":[52,27,52,40],"1401":[52,41,52,47],"1409":[52,27,52,48],"1417":[52,9,52,48],"1425":[52,9,52,49],"1433":[53,9,53,18],"1441":[53,26,53,32],"1449":[53,9,53,32],"1457":[53,9,53,33],"1465":[34,22,54,6],"1473":[34,22,54,6],"1481":[34,22,54,6],"1489":[34,22,54,6],"1497":[34,22,54,6],"1505":[34,22,54,6],"1513":[34,22,54,6],"1521":[34,22,54,6],"1529":[34,22,54,6],"1537":[34,22,54,6],"1545":[34,22,54,6],"1553":[34,22,54,6],"1561":[34,5,54,6],"1569":[34,5,54,7],"1577":[6,8,55,2],"1585":[6,8,55,2],"1593":[6,8,55,2],"1601":[6,8,55,2],"1609":[6,8,55,2],"1617":[6,8,55,2],"1625":[6,8,55,2],"1633":[6,8,55,2],"1641":[6,8,55,2],"1649":[6,8,55,2],"1657":[12,5,14,6],"1665":[6,8,55,2],"1673":[15,5,19,6],"1681":[6,8,55,2],"1689":[6,8,55,2],"1697":[6,1,55,3],"1705":[6,1,55,4],"1713":[1,1,55,4],"1721":[1,1,55,4],"1729":[1,1,55,4],"1737":[1,1,55,4],"1745":[3,1,5,2],"1753":[13,16,13,67],"1761":[12,5,14,6],"1769":[12,5,14,6],"1777":[18,16,18,47],"1785":[15,5,19,6],"1793":[15,5,19,6],"1801":[27,13,29,14],"1809":[24,9,31,27],"1817":[20,22,33,6],"1825":[20,22,33,6],"1833":[40,13,42,14],"1841":[44,13,46,14],"1849":[39,9,51,32],"1857":[34,22,54,6],"1865":[34,22,54,6],"1873":[6,8,55,2],"1881":[6,8,55,2],"1889":[1,1,55,4],"1897":[1,1,55,4],"nBranches":16,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/source-map/lib/source-map/base64-vlq.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/source-map/lib/source-map/base64-vlq_jalangi_.js","code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var base64 = require('./base64');\n\n  // A single base 64 digit can contain 6 bits of data. For the base 64 variable\n  // length quantities we use in the source map spec, the first bit is the sign,\n  // the next four bits are the actual value, and the 6th bit is the\n  // continuation bit. The continuation bit tells us whether there are more\n  // digits in this value following this digit.\n  //\n  //   Continuation\n  //   |    Sign\n  //   |    |\n  //   V    V\n  //   101011\n\n  var VLQ_BASE_SHIFT = 5;\n\n  // binary: 100000\n  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n  // binary: 011111\n  var VLQ_BASE_MASK = VLQ_BASE - 1;\n\n  // binary: 100000\n  var VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n  /**\n   * Converts from a two-complement value to a value where the sign bit is\n   * placed in the least significant bit.  For example, as decimals:\n   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n   */\n  function toVLQSigned(aValue) {\n    return aValue < 0\n      ? ((-aValue) << 1) + 1\n      : (aValue << 1) + 0;\n  }\n\n  /**\n   * Converts to a two-complement value from a value where the sign bit is\n   * placed in the least significant bit.  For example, as decimals:\n   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n   */\n  function fromVLQSigned(aValue) {\n    var isNegative = (aValue & 1) === 1;\n    var shifted = aValue >> 1;\n    return isNegative\n      ? -shifted\n      : shifted;\n  }\n\n  /**\n   * Returns the base 64 VLQ encoded value.\n   */\n  exports.encode = function base64VLQ_encode(aValue) {\n    var encoded = \"\";\n    var digit;\n\n    var vlq = toVLQSigned(aValue);\n\n    do {\n      digit = vlq & VLQ_BASE_MASK;\n      vlq >>>= VLQ_BASE_SHIFT;\n      if (vlq > 0) {\n        // There are still more digits in this value, so we must make sure the\n        // continuation bit is marked.\n        digit |= VLQ_CONTINUATION_BIT;\n      }\n      encoded += base64.encode(digit);\n    } while (vlq > 0);\n\n    return encoded;\n  };\n\n  /**\n   * Decodes the next base 64 VLQ value from the given string and returns the\n   * value and the rest of the string via the out parameter.\n   */\n  exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n    var strLen = aStr.length;\n    var result = 0;\n    var shift = 0;\n    var continuation, digit;\n\n    do {\n      if (aIndex >= strLen) {\n        throw new Error(\"Expected more digits in base 64 VLQ value.\");\n      }\n\n      digit = base64.decode(aStr.charCodeAt(aIndex++));\n      if (digit === -1) {\n        throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n      }\n\n      continuation = !!(digit & VLQ_CONTINUATION_BIT);\n      digit &= VLQ_BASE_MASK;\n      result = result + (digit << shift);\n      shift += VLQ_BASE_SHIFT;\n    } while (continuation);\n\n    aOutParam.value = fromVLQSigned(result);\n    aOutParam.rest = aIndex;\n  };\n\n});\n"};
jalangiLabel1136:
    while (true) {
        try {
            J$.Se(1713, '/home/blake/ExpoSE/Targets/node-flarum/node_modules/source-map/lib/source-map/base64-vlq_jalangi_.js', '/home/blake/ExpoSE/Targets/node-flarum/node_modules/source-map/lib/source-map/base64-vlq.js');
            J$.N(1721, '__secret__S$', __secret__S$, 0);
            J$.N(1729, '__secret__traits__', __secret__traits__, 0);
            J$.N(1737, 'define', define, 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            if (J$.X1(1745, J$.C(8, J$.B(18, '!==', J$.U(10, 'typeof', J$.R(81, 'define', define, 1)), J$.T(89, 'function', 21, false), 0)))) {
                var define = J$.X1(153, J$.W(145, 'define', J$.F(137, J$.F(113, J$.R(97, 'require', require, 2), 0)(J$.T(105, 'amdefine', 21, false)), 0)(J$.R(121, 'module', module, 2), J$.R(129, 'require', require, 2)), define, 3));
            }
            J$.X1(1705, J$.F(1697, J$.R(161, 'define', define, 1), 0)(J$.T(1689, function (require, exports, module) {
                jalangiLabel1135:
                    while (true) {
                        try {
                            J$.Fe(1577, arguments.callee, this, arguments);
                            function toVLQSigned(aValue) {
                                jalangiLabel1131:
                                    while (true) {
                                        try {
                                            J$.Fe(401, arguments.callee, this, arguments);
                                            arguments = J$.N(409, 'arguments', arguments, 4);
                                            aValue = J$.N(417, 'aValue', aValue, 4);
                                            return J$.X1(393, J$.Rt(385, J$.X1(1753, J$.C(16, J$.B(42, '<', J$.R(321, 'aValue', aValue, 0), J$.T(329, 0, 22, false), 0))) ? J$.B(66, '+', J$.B(58, '<<', J$.U(50, '-', J$.R(337, 'aValue', aValue, 0)), J$.T(345, 1, 22, false), 0), J$.T(353, 1, 22, false), 0) : J$.B(82, '+', J$.B(74, '<<', J$.R(361, 'aValue', aValue, 0), J$.T(369, 1, 22, false), 0), J$.T(377, 0, 22, false), 0)));
                                        } catch (J$e) {
                                            J$.Ex(1761, J$e);
                                        } finally {
                                            if (J$.Fr(1769))
                                                continue jalangiLabel1131;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            function fromVLQSigned(aValue) {
                                jalangiLabel1132:
                                    while (true) {
                                        try {
                                            J$.Fe(537, arguments.callee, this, arguments);
                                            arguments = J$.N(545, 'arguments', arguments, 4);
                                            aValue = J$.N(553, 'aValue', aValue, 4);
                                            J$.N(561, 'isNegative', isNegative, 0);
                                            J$.N(569, 'shifted', shifted, 0);
                                            var isNegative = J$.X1(457, J$.W(449, 'isNegative', J$.B(98, '===', J$.B(90, '&', J$.R(425, 'aValue', aValue, 0), J$.T(433, 1, 22, false), 0), J$.T(441, 1, 22, false), 0), isNegative, 1));
                                            var shifted = J$.X1(489, J$.W(481, 'shifted', J$.B(106, '>>', J$.R(465, 'aValue', aValue, 0), J$.T(473, 1, 22, false), 0), shifted, 1));
                                            return J$.X1(529, J$.Rt(521, J$.X1(1777, J$.C(24, J$.R(497, 'isNegative', isNegative, 0))) ? J$.U(114, '-', J$.R(505, 'shifted', shifted, 0)) : J$.R(513, 'shifted', shifted, 0)));
                                        } catch (J$e) {
                                            J$.Ex(1785, J$e);
                                        } finally {
                                            if (J$.Fr(1793))
                                                continue jalangiLabel1132;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(1585, 'arguments', arguments, 4);
                            require = J$.N(1593, 'require', require, 4);
                            exports = J$.N(1601, 'exports', exports, 4);
                            module = J$.N(1609, 'module', module, 4);
                            J$.N(1617, 'base64', base64, 0);
                            J$.N(1625, 'VLQ_BASE_SHIFT', VLQ_BASE_SHIFT, 0);
                            J$.N(1633, 'VLQ_BASE', VLQ_BASE, 0);
                            J$.N(1641, 'VLQ_BASE_MASK', VLQ_BASE_MASK, 0);
                            J$.N(1649, 'VLQ_CONTINUATION_BIT', VLQ_CONTINUATION_BIT, 0);
                            toVLQSigned = J$.N(1665, 'toVLQSigned', J$.T(1657, toVLQSigned, 12, false, 401), 0);
                            fromVLQSigned = J$.N(1681, 'fromVLQSigned', J$.T(1673, fromVLQSigned, 12, false, 537), 0);
                            var base64 = J$.X1(201, J$.W(193, 'base64', J$.F(185, J$.R(169, 'require', require, 0), 0)(J$.T(177, './base64', 21, false)), base64, 1));
                            var VLQ_BASE_SHIFT = J$.X1(225, J$.W(217, 'VLQ_BASE_SHIFT', J$.T(209, 5, 22, false), VLQ_BASE_SHIFT, 1));
                            var VLQ_BASE = J$.X1(257, J$.W(249, 'VLQ_BASE', J$.B(26, '<<', J$.T(233, 1, 22, false), J$.R(241, 'VLQ_BASE_SHIFT', VLQ_BASE_SHIFT, 0), 0), VLQ_BASE, 1));
                            var VLQ_BASE_MASK = J$.X1(289, J$.W(281, 'VLQ_BASE_MASK', J$.B(34, '-', J$.R(265, 'VLQ_BASE', VLQ_BASE, 0), J$.T(273, 1, 22, false), 0), VLQ_BASE_MASK, 1));
                            var VLQ_CONTINUATION_BIT = J$.X1(313, J$.W(305, 'VLQ_CONTINUATION_BIT', J$.R(297, 'VLQ_BASE', VLQ_BASE, 0), VLQ_CONTINUATION_BIT, 1));
                            J$.X1(921, J$.P(913, J$.R(577, 'exports', exports, 0), 'encode', J$.T(905, function base64VLQ_encode(aValue) {
                                jalangiLabel1133:
                                    while (true) {
                                        try {
                                            J$.Fe(849, arguments.callee, this, arguments);
                                            arguments = J$.N(857, 'arguments', arguments, 4);
                                            base64VLQ_encode = J$.N(865, 'base64VLQ_encode', base64VLQ_encode, 0);
                                            aValue = J$.N(873, 'aValue', aValue, 4);
                                            J$.N(881, 'encoded', encoded, 0);
                                            J$.N(889, 'digit', digit, 0);
                                            J$.N(897, 'vlq', vlq, 0);
                                            var encoded = J$.X1(601, J$.W(593, 'encoded', J$.T(585, '', 21, false), encoded, 1));
                                            var digit;
                                            var vlq = J$.X1(641, J$.W(633, 'vlq', J$.F(625, J$.R(609, 'toVLQSigned', toVLQSigned, 0), 0)(J$.R(617, 'aValue', aValue, 0)), vlq, 1));
                                            do {
                                                J$.X1(673, digit = J$.W(665, 'digit', J$.B(122, '&', J$.R(649, 'vlq', vlq, 0), J$.R(657, 'VLQ_BASE_MASK', VLQ_BASE_MASK, 0), 0), digit, 0));
                                                J$.X1(705, vlq = J$.W(697, 'vlq', J$.B(130, '>>>', J$.R(689, 'vlq', vlq, 0), J$.R(681, 'VLQ_BASE_SHIFT', VLQ_BASE_SHIFT, 0), 0), vlq, 0));
                                                if (J$.X1(1801, J$.C(32, J$.B(138, '>', J$.R(713, 'vlq', vlq, 0), J$.T(721, 0, 22, false), 0)))) {
                                                    J$.X1(753, digit = J$.W(745, 'digit', J$.B(146, '|', J$.R(737, 'digit', digit, 0), J$.R(729, 'VLQ_CONTINUATION_BIT', VLQ_CONTINUATION_BIT, 0), 0), digit, 0));
                                                }
                                                J$.X1(801, encoded = J$.W(793, 'encoded', J$.B(154, '+', J$.R(785, 'encoded', encoded, 0), J$.M(777, J$.R(761, 'base64', base64, 0), 'encode', 0)(J$.R(769, 'digit', digit, 0)), 0), encoded, 0));
                                            } while (J$.X1(1809, J$.C(40, J$.B(162, '>', J$.R(809, 'vlq', vlq, 0), J$.T(817, 0, 22, false), 0))));
                                            return J$.X1(841, J$.Rt(833, J$.R(825, 'encoded', encoded, 0)));
                                        } catch (J$e) {
                                            J$.Ex(1817, J$e);
                                        } finally {
                                            if (J$.Fr(1825))
                                                continue jalangiLabel1133;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 849), 0));
                            J$.X1(1569, J$.P(1561, J$.R(929, 'exports', exports, 0), 'decode', J$.T(1553, function base64VLQ_decode(aStr, aIndex, aOutParam) {
                                jalangiLabel1134:
                                    while (true) {
                                        try {
                                            J$.Fe(1465, arguments.callee, this, arguments);
                                            arguments = J$.N(1473, 'arguments', arguments, 4);
                                            base64VLQ_decode = J$.N(1481, 'base64VLQ_decode', base64VLQ_decode, 0);
                                            aStr = J$.N(1489, 'aStr', aStr, 4);
                                            aIndex = J$.N(1497, 'aIndex', aIndex, 4);
                                            aOutParam = J$.N(1505, 'aOutParam', aOutParam, 4);
                                            J$.N(1513, 'strLen', strLen, 0);
                                            J$.N(1521, 'result', result, 0);
                                            J$.N(1529, 'shift', shift, 0);
                                            J$.N(1537, 'continuation', continuation, 0);
                                            J$.N(1545, 'digit', digit, 0);
                                            var strLen = J$.X1(961, J$.W(953, 'strLen', J$.G(945, J$.R(937, 'aStr', aStr, 0), 'length', 0), strLen, 1));
                                            var result = J$.X1(985, J$.W(977, 'result', J$.T(969, 0, 22, false), result, 1));
                                            var shift = J$.X1(1009, J$.W(1001, 'shift', J$.T(993, 0, 22, false), shift, 1));
                                            var continuation, digit;
                                            do {
                                                if (J$.X1(1833, J$.C(48, J$.B(170, '>=', J$.R(1017, 'aIndex', aIndex, 0), J$.R(1025, 'strLen', strLen, 0), 0)))) {
                                                    throw J$.X1(1065, J$.Th(1057, J$.F(1049, J$.R(1033, 'Error', Error, 2), 1)(J$.T(1041, 'Expected more digits in base 64 VLQ value.', 21, false))));
                                                }
                                                J$.X1(1145, digit = J$.W(1137, 'digit', J$.M(1129, J$.R(1073, 'base64', base64, 0), 'decode', 0)(J$.M(1121, J$.R(1081, 'aStr', aStr, 0), 'charCodeAt', 0)(J$.B(194, '-', aIndex = J$.W(1105, 'aIndex', J$.B(186, '+', J$.U(178, '+', J$.R(1097, 'aIndex', aIndex, 0)), J$.T(1089, 1, 22, false), 0), aIndex, 0), J$.T(1113, 1, 22, false), 0))), digit, 0));
                                                if (J$.X1(1841, J$.C(56, J$.B(210, '===', J$.R(1153, 'digit', digit, 0), J$.U(202, '-', J$.T(1161, 1, 22, false)), 0)))) {
                                                    throw J$.X1(1233, J$.Th(1225, J$.F(1217, J$.R(1169, 'Error', Error, 2), 1)(J$.B(226, '+', J$.T(1177, 'Invalid base64 digit: ', 21, false), J$.M(1209, J$.R(1185, 'aStr', aStr, 0), 'charAt', 0)(J$.B(218, '-', J$.R(1193, 'aIndex', aIndex, 0), J$.T(1201, 1, 22, false), 0)), 0))));
                                                }
                                                J$.X1(1265, continuation = J$.W(1257, 'continuation', J$.U(250, '!', J$.U(242, '!', J$.B(234, '&', J$.R(1241, 'digit', digit, 0), J$.R(1249, 'VLQ_CONTINUATION_BIT', VLQ_CONTINUATION_BIT, 0), 0))), continuation, 0));
                                                J$.X1(1297, digit = J$.W(1289, 'digit', J$.B(258, '&', J$.R(1281, 'digit', digit, 0), J$.R(1273, 'VLQ_BASE_MASK', VLQ_BASE_MASK, 0), 0), digit, 0));
                                                J$.X1(1337, result = J$.W(1329, 'result', J$.B(274, '+', J$.R(1305, 'result', result, 0), J$.B(266, '<<', J$.R(1313, 'digit', digit, 0), J$.R(1321, 'shift', shift, 0), 0), 0), result, 0));
                                                J$.X1(1369, shift = J$.W(1361, 'shift', J$.B(282, '+', J$.R(1353, 'shift', shift, 0), J$.R(1345, 'VLQ_BASE_SHIFT', VLQ_BASE_SHIFT, 0), 0), shift, 0));
                                            } while (J$.X1(1849, J$.C(64, J$.R(1377, 'continuation', continuation, 0))));
                                            J$.X1(1425, J$.P(1417, J$.R(1385, 'aOutParam', aOutParam, 0), 'value', J$.F(1409, J$.R(1393, 'fromVLQSigned', fromVLQSigned, 0), 0)(J$.R(1401, 'result', result, 0)), 0));
                                            J$.X1(1457, J$.P(1449, J$.R(1433, 'aOutParam', aOutParam, 0), 'rest', J$.R(1441, 'aIndex', aIndex, 0), 0));
                                        } catch (J$e) {
                                            J$.Ex(1857, J$e);
                                        } finally {
                                            if (J$.Fr(1865))
                                                continue jalangiLabel1134;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 1465), 0));
                        } catch (J$e) {
                            J$.Ex(1873, J$e);
                        } finally {
                            if (J$.Fr(1881))
                                continue jalangiLabel1135;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1577)));
        } catch (J$e) {
            J$.Ex(1889, J$e);
        } finally {
            if (J$.Sr(1897)) {
                J$.L();
                continue jalangiLabel1136;
            } else {
                J$.L();
                break jalangiLabel1136;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
