{"8":[40,13,40,26],"9":[1,20,1,27],"10":[39,9,39,20],"16":[39,9,39,33],"17":[1,28,1,32],"18":[39,9,39,33],"24":[44,9,44,33],"25":[1,20,1,33],"26":[40,13,40,26],"32":[49,13,49,23],"33":[1,20,1,33],"34":[41,29,41,59],"40":[48,9,48,18],"41":[1,20,1,33],"42":[44,9,44,20],"48":[54,9,54,11],"49":[2,26,2,38],"50":[44,9,44,33],"57":[2,26,2,45],"58":[48,9,48,18],"65":[2,26,2,45],"66":[49,13,49,23],"73":[2,26,2,45],"74":[50,29,50,56],"81":[3,1,3,13],"82":[54,9,54,11],"89":[3,1,3,14],"90":[55,25,55,59],"97":[4,13,4,20],"98":[55,25,55,65],"105":[4,21,4,35],"113":[4,13,4,36],"121":[4,13,4,36],"129":[4,13,4,36],"137":[5,1,5,7],"145":[5,18,5,24],"153":[5,1,5,24],"161":[5,1,5,25],"169":[6,1,6,7],"177":[6,16,6,35],"185":[6,36,6,42],"193":[6,44,6,49],"201":[6,16,6,50],"209":[6,1,6,50],"217":[6,1,6,51],"225":[7,1,7,7],"233":[8,10,8,14],"241":[9,10,9,14],"249":[10,10,10,14],"257":[11,10,11,14],"265":[12,10,12,14],"273":[13,10,13,14],"281":[14,10,14,14],"289":[7,19,15,2],"297":[7,1,15,2],"305":[7,1,15,3],"313":[16,1,16,7],"321":[17,10,17,14],"329":[18,10,18,14],"337":[19,10,19,14],"345":[16,16,20,2],"353":[16,1,20,2],"361":[16,1,20,3],"369":[21,1,21,7],"377":[22,10,22,14],"385":[23,10,23,14],"393":[24,10,24,14],"401":[21,16,25,2],"409":[21,1,25,2],"417":[21,1,25,3],"425":[27,15,27,17],"433":[27,15,27,17],"441":[27,15,27,17],"449":[28,5,28,11],"457":[28,17,28,22],"465":[28,5,28,23],"467":[28,5,28,16],"473":[29,23,29,28],"481":[29,29,29,33],"489":[29,23,29,34],"497":[29,23,29,34],"505":[29,23,29,34],"513":[30,22,30,28],"521":[30,29,30,33],"529":[30,22,30,34],"537":[30,22,30,34],"545":[30,22,30,34],"553":[31,9,31,17],"561":[31,18,31,24],"569":[31,28,31,35],"577":[31,9,31,35],"585":[31,9,31,36],"593":[32,9,32,17],"601":[32,18,32,25],"609":[32,29,32,35],"617":[32,9,32,35],"625":[32,9,32,36],"633":[33,9,33,17],"641":[33,18,33,25],"649":[33,18,33,39],"651":[33,18,33,37],"657":[33,43,33,49],"665":[33,9,33,49],"673":[33,9,33,50],"681":[34,9,34,12],"689":[34,18,34,24],"697":[34,9,34,25],"699":[34,9,34,17],"705":[34,9,34,26],"713":[28,32,35,6],"721":[28,32,35,6],"729":[28,32,35,6],"737":[28,32,35,6],"745":[28,32,35,6],"753":[28,32,35,6],"761":[28,32,35,6],"769":[28,5,35,7],"771":[28,5,28,31],"777":[28,5,35,8],"785":[36,12,36,15],"793":[36,12,36,15],"801":[36,5,36,16],"809":[26,1,37,2],"817":[26,1,37,2],"825":[26,1,37,2],"833":[26,1,37,2],"841":[26,1,37,2],"849":[39,16,39,20],"857":[39,25,39,33],"865":[40,14,40,20],"873":[40,21,40,25],"881":[40,14,40,26],"889":[41,23,41,28],"897":[41,29,41,52],"905":[41,55,41,59],"913":[41,19,41,60],"921":[41,19,41,60],"929":[41,13,41,61],"937":[42,16,42,20],"945":[42,16,42,20],"953":[42,9,42,21],"961":[44,16,44,20],"969":[44,25,44,33],"977":[45,19,45,28],"985":[45,29,45,62],"993":[45,15,45,63],"1001":[45,15,45,63],"1009":[45,9,45,64],"1017":[47,13,47,21],"1025":[47,22,47,26],"1033":[47,28,47,30],"1041":[47,13,47,31],"1049":[47,13,47,31],"1057":[47,13,47,31],"1065":[48,10,48,15],"1073":[48,16,48,17],"1081":[48,10,48,18],"1089":[49,14,49,20],"1097":[49,21,49,22],"1105":[49,14,49,23],"1113":[50,23,50,28],"1121":[50,29,50,52],"1129":[50,55,50,56],"1137":[50,19,50,57],"1145":[50,19,50,57],"1153":[50,13,50,58],"1161":[51,16,51,17],"1169":[51,16,51,17],"1177":[51,9,51,18],"1185":[53,9,53,15],"1193":[53,16,53,20],"1201":[53,16,53,34],"1203":[53,16,53,32],"1209":[53,9,53,35],"1217":[53,9,53,35],"1225":[53,5,53,36],"1233":[54,10,54,11],"1241":[55,19,55,24],"1249":[55,25,55,52],"1257":[55,55,55,59],"1265":[55,62,55,65],"1273":[55,15,55,66],"1281":[55,15,55,66],"1289":[55,9,55,67],"1297":[56,12,56,13],"1305":[56,12,56,13],"1313":[56,5,56,14],"1321":[38,1,57,2],"1329":[38,1,57,2],"1337":[38,1,57,2],"1345":[38,1,57,2],"1353":[1,1,57,2],"1361":[1,1,57,2],"1369":[1,1,57,2],"1377":[1,1,57,2],"1385":[26,1,37,2],"1393":[1,1,57,2],"1401":[38,1,57,2],"1409":[1,1,57,2],"1417":[28,32,35,6],"1425":[28,32,35,6],"1433":[26,1,37,2],"1441":[26,1,37,2],"1449":[40,9,41,61],"1457":[39,5,43,6],"1465":[44,5,46,6],"1473":[49,9,50,58],"1481":[48,5,52,6],"1489":[54,5,55,67],"1497":[38,1,57,2],"1505":[38,1,57,2],"1513":[1,1,57,2],"1521":[1,1,57,2],"nBranches":12,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/statuses/index.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/statuses/index_jalangi_.js","code":"/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar codes = require('./codes.json')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = status\n\n// array of status codes\nstatus.codes = populateStatusesMap(status, codes)\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n}\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n}\n\n/**\n * Populate the statuses map for given codes.\n * @private\n */\n\nfunction populateStatusesMap (statuses, codes) {\n  var arr = []\n\n  Object.keys(codes).forEach(function forEachCode (code) {\n    var message = codes[code]\n    var status = Number(code)\n\n    // Populate properties\n    statuses[status] = message\n    statuses[message] = status\n    statuses[message.toLowerCase()] = status\n\n    // Add to array\n    arr.push(status)\n  })\n\n  return arr\n}\n\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\nfunction status (code) {\n  if (typeof code === 'number') {\n    if (!status[code]) throw new Error('invalid status code: ' + code)\n    return code\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string')\n  }\n\n  // '403'\n  var n = parseInt(code, 10)\n  if (!isNaN(n)) {\n    if (!status[n]) throw new Error('invalid status code: ' + n)\n    return n\n  }\n\n  n = status[code.toLowerCase()]\n  if (!n) throw new Error('invalid status message: \"' + code + '\"')\n  return n\n}\n"}