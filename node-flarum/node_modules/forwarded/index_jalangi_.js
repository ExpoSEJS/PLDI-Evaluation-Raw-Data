J$.iids = {"8":[7,9,7,13],"9":[1,20,1,27],"10":[7,9,7,13],"16":[10,23,10,59],"17":[1,28,1,32],"25":[1,20,1,33],"33":[1,20,1,33],"41":[1,20,1,33],"49":[2,26,2,38],"57":[2,26,2,45],"65":[2,26,2,45],"73":[2,26,2,45],"81":[3,1,3,13],"89":[3,1,3,14],"97":[4,25,4,32],"105":[4,25,4,32],"113":[4,25,4,32],"121":[5,1,5,7],"129":[5,18,5,27],"137":[5,1,5,27],"145":[5,1,5,28],"153":[7,10,7,13],"161":[8,19,8,28],"169":[8,29,8,55],"177":[8,15,8,56],"185":[8,15,8,56],"193":[8,9,8,57],"201":[10,23,10,26],"209":[10,23,10,34],"217":[10,35,10,52],"225":[10,23,10,53],"233":[10,57,10,59],"241":[10,22,10,67],"243":[10,22,10,65],"249":[10,74,10,91],"257":[10,22,10,92],"259":[10,22,10,73],"265":[10,100,10,107],"273":[10,22,10,108],"275":[10,22,10,99],"281":[10,22,10,118],"283":[10,22,10,116],"289":[10,22,10,118],"297":[10,22,10,118],"305":[11,22,11,25],"313":[11,22,11,36],"321":[11,22,11,50],"329":[11,22,11,50],"337":[11,22,11,50],"345":[12,18,12,28],"353":[12,17,12,29],"361":[12,37,12,47],"369":[12,17,12,48],"371":[12,17,12,36],"377":[12,17,12,48],"385":[12,17,12,48],"393":[13,12,13,17],"401":[13,12,13,17],"409":[13,5,13,18],"417":[6,1,14,2],"425":[6,1,14,2],"433":[6,1,14,2],"441":[6,1,14,2],"449":[6,1,14,2],"457":[6,1,14,2],"465":[1,1,14,2],"473":[1,1,14,2],"481":[1,1,14,2],"489":[1,1,14,2],"497":[6,1,14,2],"505":[1,1,14,2],"513":[7,5,9,6],"521":[6,1,14,2],"529":[6,1,14,2],"537":[1,1,14,2],"545":[1,1,14,2],"nBranches":4,"originalCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/forwarded/index.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/node-flarum/node_modules/forwarded/index_jalangi_.js","code":"/*!\n * forwarded\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Simple expression to split token list.\n * @private\n */\n\nvar TOKEN_LIST_REGEXP = / *, */\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = forwarded\n\n/**\n * Get all addresses in the request, using the `X-Forwarded-For` header.\n *\n * @param {object} req\n * @return {array}\n * @public\n */\n\nfunction forwarded (req) {\n  if (!req) {\n    throw new TypeError('argument req is required')\n  }\n\n  // simple header parsing\n  var proxyAddrs = (req.headers['x-forwarded-for'] || '')\n    .trim()\n    .split(TOKEN_LIST_REGEXP)\n    .filter(Boolean)\n    .reverse()\n  var socketAddr = req.connection.remoteAddress\n  var addrs = [socketAddr].concat(proxyAddrs)\n\n  // return all addresses\n  return addrs\n}\n"};
jalangiLabel405:
    while (true) {
        try {
            J$.Se(465, '/home/blake/ExpoSE/Targets/node-flarum/node_modules/forwarded/index_jalangi_.js', '/home/blake/ExpoSE/Targets/node-flarum/node_modules/forwarded/index.js');
            function forwarded(req) {
                jalangiLabel404:
                    while (true) {
                        try {
                            J$.Fe(417, arguments.callee, this, arguments);
                            arguments = J$.N(425, 'arguments', arguments, 4);
                            req = J$.N(433, 'req', req, 4);
                            J$.N(441, 'proxyAddrs', proxyAddrs, 0);
                            J$.N(449, 'socketAddr', socketAddr, 0);
                            J$.N(457, 'addrs', addrs, 0);
                            if (J$.X1(513, J$.C(8, J$.U(10, '!', J$.R(153, 'req', req, 0))))) {
                                throw J$.X1(193, J$.Th(185, J$.F(177, J$.R(161, 'TypeError', TypeError, 2), 1)(J$.T(169, 'argument req is required', 21, false))));
                            }
                            var proxyAddrs = J$.X1(297, J$.W(289, 'proxyAddrs', J$.M(281, J$.M(273, J$.M(257, J$.M(241, J$.C(16, J$.G(225, J$.G(209, J$.R(201, 'req', req, 0), 'headers', 0), J$.T(217, 'x-forwarded-for', 21, false), 4)) ? J$._() : J$.T(233, '', 21, false), 'trim', 0)(), 'split', 0)(J$.R(249, 'TOKEN_LIST_REGEXP', TOKEN_LIST_REGEXP, 1)), 'filter', 0)(J$.R(265, 'Boolean', Boolean, 2)), 'reverse', 0)(), proxyAddrs, 1));
                            var socketAddr = J$.X1(337, J$.W(329, 'socketAddr', J$.G(321, J$.G(313, J$.R(305, 'req', req, 0), 'connection', 0), 'remoteAddress', 0), socketAddr, 1));
                            var addrs = J$.X1(385, J$.W(377, 'addrs', J$.M(369, J$.T(353, [J$.R(345, 'socketAddr', socketAddr, 0)], 10, false), 'concat', 0)(J$.R(361, 'proxyAddrs', proxyAddrs, 0)), addrs, 1));
                            return J$.X1(409, J$.Rt(401, J$.R(393, 'addrs', addrs, 0)));
                        } catch (J$e) {
                            J$.Ex(521, J$e);
                        } finally {
                            if (J$.Fr(529))
                                continue jalangiLabel404;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(473, '__secret__S$', __secret__S$, 0);
            J$.N(481, '__secret__traits__', __secret__traits__, 0);
            J$.N(489, 'TOKEN_LIST_REGEXP', TOKEN_LIST_REGEXP, 0);
            forwarded = J$.N(505, 'forwarded', J$.T(497, forwarded, 12, false, 417), 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            J$.X1(89, J$.T(81, 'use strict', 21, false));
            var TOKEN_LIST_REGEXP = J$.X1(113, J$.W(105, 'TOKEN_LIST_REGEXP', J$.T(97, / *, */, 14, false), TOKEN_LIST_REGEXP, 3));
            J$.X1(145, J$.P(137, J$.R(121, 'module', module, 2), 'exports', J$.R(129, 'forwarded', forwarded, 1), 0));
        } catch (J$e) {
            J$.Ex(537, J$e);
        } finally {
            if (J$.Sr(545)) {
                J$.L();
                continue jalangiLabel405;
            } else {
                J$.L();
                break jalangiLabel405;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
