import each from "lodash/fp/each";
import cloneDeep from "lodash/fp/cloneDeep";

function pipelineIsRegistered( pipelineName, pipelines ){
    return !!pipelines[ pipelineName ];
}

function executePipeline( pipelineOperations, horseInstance ){
    var previousResult = null;
    var pipelineOperationsIterator = each(
        ( operation ) => {
            let newResult = operation( previousResult, {
                "Horse": horseInstance
            } );

            previousResult = cloneDeep( newResult || previousResult );
        }
    );

    pipelineOperationsIterator( pipelineOperations );

    return previousResult;
}

function processPipelineQueue( queue, pipelines, horseInstance ){
    var pipelineProcessingResult;

    while( queue.length ){
        let pipeline = queue.shift();

        if( pipelineIsRegistered( pipeline, pipelines ) ){
            pipelineProcessingResult = executePipeline( pipelines[ pipeline ], horseInstance );
        }
        else{
            throw new Error( `The pipeline "${pipeline}" could not be located. Have you registered it with \`Horse.pipeline( "${pipeline}", operations )\`?` );
        }
    }

    return pipelineProcessingResult;
}

function Horse( coldState = {} ){
    this.state = coldState;

    this.pipelines = {};
    this.pipelineQueue = [];
}

Horse.prototype.pipeline = function pipeline( name, operations, overwrite = false ){
    if( pipelineIsRegistered( name, this.pipelines ) && !overwrite ){
        throw new Error( `The pipeline "${name}" already exists. Include the truthy third parameter to enable pipeline destruction: \`Horse.pipeline( "${name}", operations, true )\`.` );
    }
    else{
        this.pipelines[ name ] = operations;
    }
};

Horse.prototype.queuePipeline = function queuePipeline( name, executeImmediately = false ){
    var result = () => processPipelineQueue( this.pipelineQueue, this.pipelines, this );

    this.pipelineQueue.push( name );

    if( executeImmediately ){
        result = result();
    }

    return result;
};

Horse.prototype.processPipelineQueue = processPipelineQueue;

export default Horse;
