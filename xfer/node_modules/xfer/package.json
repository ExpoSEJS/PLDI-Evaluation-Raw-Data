{
  "_args": [
    [
      {
        "raw": "xfer",
        "scope": null,
        "escapedName": "xfer",
        "name": "xfer",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/blake/ExpoSE/Targets/xfer"
    ]
  ],
  "_from": "xfer@latest",
  "_id": "xfer@0.2.1",
  "_inCache": true,
  "_location": "/xfer",
  "_npmUser": {
    "name": "mscdex",
    "email": "mscdex@mscdex.net"
  },
  "_npmVersion": "1.3.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "xfer",
    "scope": null,
    "escapedName": "xfer",
    "name": "xfer",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/xfer/-/xfer-0.2.1.tgz",
  "_shasum": "7686789584ac9b16dddb198efbdeb4467bfa7843",
  "_shrinkwrap": null,
  "_spec": "xfer",
  "_where": "/home/blake/ExpoSE/Targets/xfer",
  "author": {
    "name": "Brian White",
    "email": "mscdex@mscdex.net"
  },
  "bugs": {
    "url": "https://github.com/mscdex/xfer/issues"
  },
  "dependencies": {},
  "description": "A simple, general purpose, TLV-like binary protocol",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "7686789584ac9b16dddb198efbdeb4467bfa7843",
    "tarball": "https://registry.npmjs.org/xfer/-/xfer-0.2.1.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "homepage": "https://github.com/mscdex/xfer#readme",
  "keywords": [
    "binary",
    "protocol",
    "tlv",
    "generic",
    "multipurpose",
    "simple",
    "messaging"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/mscdex/xfer/raw/master/LICENSE"
    }
  ],
  "main": "./lib/main",
  "maintainers": [
    {
      "name": "mscdex",
      "email": "mscdex@mscdex.net"
    }
  ],
  "name": "xfer",
  "optionalDependencies": {},
  "readme": "Description\n===========\n\nxfer is a module for [node.js](http://nodejs.org/) that reads and writes binary-compatible messages using a simple TLV-like protocol.\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.10.0 or newer\n\n\nInstall\n=======\n\n    npm install xfer\n\n\nExample\n=======\n```javascript\n  var net = require('net'),\n      inspect = require('util').inspect,\n      Xfer = require('./xfer');\n\n  function makeDisplay(role, kind) {\n    return function(arg1, arg2) {\n      var type, stream;\n      if (kind === true) {\n        type = arg1;\n        stream = arg2;\n      } else {\n        type = kind;\n        stream = arg1;\n      }\n      if (!stream)\n        console.log('[' + role + '] Type: ' + type + ', Data: (none)');\n      else {\n        var s = '';\n        stream.on('data', function(d) { s += d; })\n              .on('end', function() {\n                console.log('[' + role + '] Type: ' + type + ', Data: ' + inspect(s));\n              });\n      }\n    };\n  }\n\n  net.createServer(function(client) {\n    this.close();\n    client.xfer = new Xfer();\n    client.pipe(client.xfer).pipe(client);\n\n    client.xfer.on('*', makeDisplay('SERVER', true));\n\n    client.xfer.send(0x01, 'Node.js rules! :-)');\n    client.xfer.send(0x05);\n  }).listen(8118, function() {\n    var client = net.createConnection(8118);\n    client.xfer = new Xfer();\n    client.pipe(client.xfer).pipe(client);\n\n    client.xfer.on(0x01, makeDisplay('CLIENT', 0x01))\n               .on(0x05, makeDisplay('CLIENT', 0x05));\n    client.on('connect', function() {\n      client.xfer.send(0xFF, 'I am caught by the catch-all event!');\n      client.end();\n    });\n  });\n\n  // output:\n  //\n  // [CLIENT] Type: 5, Data: (none)\n  // [CLIENT] Type: 1, Data: 'Node.js rules! :-)'\n  // [SERVER] Type: 255, Data: 'I am caught by the catch-all event!'\n```\n\n\nAPI\n===\n\n_Xfer_ is a _Duplex_ stream\n\nXfer Events\n-----------\n\nTwo types of events are emitted from an Xfer instance: integer (type) events and a special catch-all event ('*').\n\nInteger (type) events are passed a Readable stream object if there was data with the message. The catch-all ('*') event is passed an additional argument (< _integer_ > type) before the stream object.\n\n\nXfer Methods\n------------\n\n * *constructor* ([< _object_ >config]) - Creates and returns a new Xfer instance with the following valid `config` settings:\n\n    * **highWaterMark** - _integer_ - The high water mark (in bytes) used for backpressure handling for this Xfer instance (default: 128KB)\n\n    * **streamHWM** - _integer_ - The high water mark (in bytes) used for the data streams for inbound messages (default: `highWaterMark` value from above)\n\n    * **skipWriteTick** - _boolean_ - This disables the use of process.nextTick() inside node core's Writable stream class after data is written to this xfer instance. This can help prevent exceeding the maximum call stack if you run into that issue. (default: false)\n\n * **send** (< _integer_ >type[, < _mixed_ >data]) - _boolean_ - Writes the message to the Readable stream portion of the Xfer instance. If provided, `data` can be either a Buffer or string. The return value indicates whether or not more sends should be performed.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/mscdex/xfer.git"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "version": "0.2.1"
}
