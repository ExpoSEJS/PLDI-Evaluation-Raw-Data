{
  "_args": [
    [
      {
        "raw": "roose",
        "scope": null,
        "escapedName": "roose",
        "name": "roose",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/blake/ExpoSE/Targets/roose"
    ]
  ],
  "_from": "roose@latest",
  "_id": "roose@0.1.8",
  "_inCache": true,
  "_location": "/roose",
  "_npmUser": {
    "name": "kamituel",
    "email": "kamituel@gmail.com"
  },
  "_npmVersion": "1.3.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "roose",
    "scope": null,
    "escapedName": "roose",
    "name": "roose",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/roose/-/roose-0.1.8.tgz",
  "_shasum": "e553798aab3d4e5d1c09cebcac280aecbf7bd15e",
  "_shrinkwrap": null,
  "_spec": "roose",
  "_where": "/home/blake/ExpoSE/Targets/roose",
  "author": {
    "name": "kamituel@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/kamituel/node-roose/issues"
  },
  "dependencies": {
    "debug": "~0.7.2",
    "lodash": "~1.3.1",
    "q": "~0.9.7",
    "validator": "~1.5.1"
  },
  "description": "Extremely simple, promise based Redis object modeling tool.",
  "devDependencies": {
    "chai": "~1.7.2",
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.9",
    "grunt-contrib-jshint": "~0.6.3",
    "grunt-contrib-watch": "~0.5.3",
    "mocha": "~1.12.1",
    "q": "~0.9.7",
    "redis": "~0.8.4"
  },
  "directories": {},
  "dist": {
    "shasum": "e553798aab3d4e5d1c09cebcac280aecbf7bd15e",
    "tarball": "https://registry.npmjs.org/roose/-/roose-0.1.8.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/kamituel/node-roose#readme",
  "keywords": [
    "redis",
    "document",
    "model",
    "schema",
    "database",
    "odm",
    "data",
    "datastore",
    "nosql",
    "orm",
    "db"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "kamituel",
      "email": "kamituel@gmail.com"
    }
  ],
  "name": "roose",
  "optionalDependencies": {},
  "readme": "node-roose\n==========\n\nExtremely simple, promise based Redis object modeling tool.\n\nUsage\n-----\n\nThe following:\n\n```javascript\nvar Vehicle = new Roose.Model('vehicle', {\n\t// properties starting with '$' will be keys in the Redis store.\n\t'$manufacturer': 'string',\n\t'$model': 'string',\n\t'date_of_production': 'number',\n\t'colors': ['string | HexColor'],\n\t'wheels': ['number | Int']\n});\n\nvar tesla = Vehicle.create({\n\t'manufacturer': 'Tesla',\n\t'model': 'Model S',\n\t'date_of_production': new Date().getTime(),\n\t'colors': ['#ff0000', '#00ff00', '#0000ff'],\n\t'wheels': [1, 2, 3, 4]\n});\t\n\ntesla.save().done();\n\n```\n\nTranslates into following Redis commands:\n\n```\n\"MULTI\"\n\"set\" \"vehicle:Tesla__Model S:manufacturer\" \"Tesla\"\n\"set\" \"vehicle:Tesla__Model S:model\" \"Model S\"\n\"set\" \"vehicle:Tesla__Model S:date_of_production\" \"1378994037125\"\n\"sadd\" \"vehicle:Tesla__Model S:colors\" \"#ff0000\" \"#00ff00\" \"#0000ff\"\n\"sadd\" \"vehicle:Tesla__Model S:wheels\" \"1\" \"2\" \"3\" \"4\"\n\"EXEC\"\n```\n\nLater, you can retrieve this object:\n\n```javascript\nvar query = Vehicle.get({\n 'manufacturer': 'Tesla',\n 'model': 'Model S'\n})\n\nquery.then(function (tesla) {\n  if (tesla) {\n    console.log('Found the car!', tesla);\n  } else {\n    console.log('No such car');\n  }\n}).fail(function (err) {\n  console.log('Error: ', err);\n}).done();\n```\n\nwhich translates into following Redis commands:\n\n```\n\"MULTI\"\n\"get\" \"vehicle:Tesla__Model S:manufacturer\"\n\"get\" \"vehicle:Tesla__Model S:model\"\n\"get\" \"vehicle:Tesla__Model S:date_of_production\"\n\"smembers\" \"vehicle:Tesla__Model S:colors\"\n\"smembers\" \"vehicle:Tesla__Model S:wheels\"\n\"EXEC\"\n```\n\nValidation\n----------\n\nSince Redis operates on strings only, so does Roose. But, for your convienience, we've provided\nso-called \"data types\". Data type is a set of validation rules defined for each field in a model. \nWhen you create an new instance of a model, each field has to pass those validation rules.\n\nRoose uses Validator module (https://github.com/chriso/node-validator) for data validation. \nValidator exposes methods like `isHexColor()` or `isUppercase()`. Strip the `is` part and the rest\nforms the name of your rule. \n\nYou can specify your field to pass multiple such rules by \"piping\" them (use `|` for this). For instance:\n```\n'address': 'Url | Lowercase'\n```\nmeans that `address` should be an lower-case URL.\n\nIn addition to rules inherited from Validator, Roose defines two primitives: `string` and `number`.\nIf you want to allow any value, use `string`. \nIf you include `number` in a validation rule, the value you pass will have to be a Javascript `Number`. \n\n**Example**\n```javascript\nvar Person = new Roose.Model({\n\t'$name': 'string',\n\t'age': 'number | Int',\n\t'foot_length': 'Int'\n});\n```\nCorrect values for:\n - `name` - any string.\n - `age` - any integer number, i.e. `5`, but not `\"5\"` (it's a string)\n - `foot_length` - any integer number, i.e. `5` as well as `\"5\"`\n\n**Example**\n```javascript\nvar Client = new Roose.Model('client', {\n\t'$id': 'number | Int',            // Javascript Number type which is an integer (i.e. not a float)\n\t'color': 'HexColor | Uppercase'   // String which is a hex color written in uppercase.\n});\n```\n\nCorrect values for:\n - `ip` - `5` (number), but not `\"5\"` (string) and not `5.1`.\n - `color` - `#FF00CC`, but not `#ff00cc` (lowercase).\n\nTests\n-----\n\nFirst, start Redis on localhost, at a default port. Then:\n\n```\nnpm test\n```\n\nCode coverage \n-----\n\nStart Redis, then:\n\n```\nnpm run-script cov\n```\n\nCoverage report will be in `coverage.html`.\n\nLicense\n----\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kamituel/node-roose.git"
  },
  "scripts": {
    "cov": "rm -rf lib-cov/ && jscoverage lib lib-cov/ && ROOSE_COV=1 ./node_modules/.bin/mocha --harmony-generators --harmony --reporter html-cov spec/ > coverage.html",
    "test": "DEBUG=roose ./node_modules/.bin/mocha --harmony-generators --harmony spec/"
  },
  "version": "0.1.8"
}
