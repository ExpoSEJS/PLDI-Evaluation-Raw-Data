{
  "_args": [
    [
      {
        "raw": "dokumentiere",
        "scope": null,
        "escapedName": "dokumentiere",
        "name": "dokumentiere",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/blake/ExpoSE/Targets/dokumentiere"
    ]
  ],
  "_from": "dokumentiere@latest",
  "_id": "dokumentiere@0.7.2",
  "_inCache": true,
  "_location": "/dokumentiere",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dokumentiere",
    "scope": null,
    "escapedName": "dokumentiere",
    "name": "dokumentiere",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/dokumentiere/-/dokumentiere-0.7.2.tgz",
  "_shasum": "f618888ae77a92cae400cdffb70fc961aa3c3f40",
  "_shrinkwrap": null,
  "_spec": "dokumentiere",
  "_where": "/home/blake/ExpoSE/Targets/dokumentiere",
  "author": {
    "name": "bobbor",
    "email": "bobbor.pap@gmail.com"
  },
  "bin": {
    "dokumentiere": "./bin/dokumentiere"
  },
  "bugs": {
    "url": "https://github.com/bobbor/dokumentiere/issues"
  },
  "dependencies": {
    "colors": "0.6.0",
    "commander": "0.6.1",
    "jade": "0.26.3",
    "underscore": "1.3.3"
  },
  "description": "JavaScript documentation generator",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "f618888ae77a92cae400cdffb70fc961aa3c3f40",
    "tarball": "https://registry.npmjs.org/dokumentiere/-/dokumentiere-0.7.2.tgz"
  },
  "homepage": "https://github.com/bobbor/dokumentiere#readme",
  "keywords": [
    "documentation",
    "docs",
    "jsdoc"
  ],
  "maintainers": [
    {
      "name": "bobbor",
      "email": "bobbor.pap@gmail.com"
    }
  ],
  "name": "dokumentiere",
  "optionalDependencies": {},
  "readme": "# dokumentiere\r\n\r\n## a node.js module for documentation\r\n\r\n## Installation\r\n\r\n\tnpm -g install dokumentiere\r\n\t\r\n## Usage\r\n\r\n\tdokumentiere -h\r\n\r\n\t-f, --files   : tells which files to document, can be folders, scans those recursively\r\n\t-o, --out     : tells where to to put the documentation to\r\n\t-e, --exclude : tells which files, folders to exclude, recursively\r\n\t\r\n---\r\n\t\t\r\n### See it in Action.\r\n\r\nthe source of this project is documented using dokumentiere. \r\nyou can browse the documentation (including the source) on:\r\nhttp://bobbor.github.com/dokumentiere\r\n\r\n---\r\n\r\nLet's jump right in\r\n\r\n\t\t/*-\r\n\t\t\r\n\t\t * myFunction\r\n\t\t \r\n\t\t [ function (public) ]\r\n\t\t \r\n\t\t * myFunction does some special stuff --> this is the summary\r\n\t\t * myFunction is not really special it accepts some parameters\r\n\t\t * and returns a value --> this is the description-body\r\n\t\t \r\n\t\t > Parameters\r\n\t\t - options (object) these are the first values\r\n\t\t -- property1 (boolean) this describes the key \"property1\" of the \"options\" parameter in detail\r\n\t\t - state* (string) <'active'> ['active', 'inactive'] tells which state should be applied @see options\r\n\t\t\t\r\n\t\t\tthe asterisk states \"state\" is optional\r\n\t\t\t(string) describes the type\r\n\t\t\t<'active'> tells the default state if the parameter is not given\r\n\t\t\t['active', 'inactive'] this array says which values are allowed\r\n\t\t\t@see tells which other options or function should be looked for reference\r\n\t\t\t\r\n\t\t = (object) the object that will be returned\r\n\t\t == property1 (string) the key \"property1\" of the returned object\r\n\t\t \r\n\t\t > Usage\r\n\t\t | myFunction({\r\n\t\t |   property1: true\r\n\t\t | }, 'inactive');\r\n\t\t \r\n\t\t -*/\r\n\r\nif you know Raphael.js and you have crawled through the source, you may notice some similarities. \r\nTo be honest, Raphael was our reference. when we decided to develop a documentation standard for our\r\ncompany, we didn't want the typical @-tags. they are too close to java-doc and the branched js-doc.\r\nthese both documentation frameworks are pretty close to Class-based development patterns. \r\nThat is not the way our javascript is developed. we make heavy usage of fantastic javascript features\r\nlike closures, callbacks or module-pattern. and we want to document jQuery-widgets or plugins too.\r\n\r\n\r\n### detailed description\r\n\t\t/*-\r\n\t\t\r\nevery documentation block is started by `/*-`\r\n\r\n\t\t * myFunction\r\n\t\t\r\ntitle of the object to describe\r\n\r\n\t\t [ function (details) ]\r\n\t\t\r\nthe type of the object (this can be `\"function\"` or `\"plugin\"` or `\"module\"` etc.\r\n\r\nthe details object can be `\"public\"` or `\"private\"` for functions or the namespace etc.\r\n\r\n\t\t * myFunction does some special stuff --> this is the summary\r\n\t\t * myFunction is not really special it accepts some parameters\r\n\t\t * and returns a value --> this is the description-body\r\n\t\t\r\nthis is the description of the object.\r\n\r\nthe first line is the summary and will be handled seperately\r\n\r\nall other lines will be as the description body, where each lines generates its own paragraph\r\n\r\n\t\t > Parameters\r\n\t\t\r\neach block introduced with a `\">\"` reflects a collection of parameters or options\r\n\r\npossible values are `\"Parameters\"` `\"Options\"` `\"Events\"` and `\"throws\"`. \r\n\r\nA special case is `\"Usage\"`. I will tell about this one later.\r\n\r\n\t\t - options (object) these are the first values\r\n\t\t -- property1 (boolean) this describes the key \"property1\" of the \"options\" parameter in detail\r\n\t\t - state* (string) <'active'> ['active', 'inactive'] tells which state should be applied @see options\r\n\t\t\t\r\n\t\t\tthe asterisk states \"state\" is optional\r\n\t\t\t(string) describes the type\r\n\t\t\t<'active'> tells the default state if the parameter is not given\r\n\t\t\t['active', 'inactive'] this array says which values are allowed\r\n\t\t\t@see tells which other options or function should be looked for reference\r\n\t\t\r\nEach `\">\"` is followed by a list of `\"-\"` for each value. these follow a certain pattern.\r\n\r\n\t- name(* if optional) (type) <defaultValue> [possibleValues] description @see reference\r\n\r\nif the type is object you can specify the properties of the object by indenting with an additional minus-sign.\r\n\r\nthis is extendable to no limit (even `----------` is allowed)\r\n\r\n\t\t = (object) the object that will be returned\r\n\t\t == property1 (string) the key \"property1\" of the returned object\r\n\r\nthe return statement is introduced by an equal-sign\r\n \r\nthis follows the typical `\"-\"` style for indentation and structure.\r\n\r\nexcept the top-level `=` can't have a name, since it won't get any\r\n\r\n\t\t > Usage\r\n\t\t | myFunction({\r\n\t\t |   property1: true\r\n\t\t | }, 'inactive');\r\n\r\nhere is the `Usage`. it is special, since it is not followed by minus signs.\r\n\r\nInstead it is followed by vertical lines, which are transformed to code-examples. So formatting and whitespace is important.\r\n\r\n\t\t -*/\r\n\t\t \r\nand with `-*/` you end the documentation block.",
  "repository": {
    "type": "git",
    "url": "git://github.com/bobbor/dokumentiere.git"
  },
  "scripts": {},
  "version": "0.7.2"
}
