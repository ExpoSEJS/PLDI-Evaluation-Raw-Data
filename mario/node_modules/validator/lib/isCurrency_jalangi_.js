J$.iids = {"8":[1,5,1,17],"9":[1,6,1,12],"10":[1,5,1,17],"16":[12,12,12,33],"17":[1,6,1,17],"18":[15,26,15,66],"24":[12,12,12,33],"25":[2,5,2,11],"26":[15,26,15,72],"32":[17,13,17,24],"33":[2,19,2,26],"34":[17,13,17,24],"40":[20,72,20,94],"41":[2,27,2,31],"42":[18,30,18,54],"48":[24,169,24,192],"49":[2,19,2,32],"50":[18,30,18,62],"56":[25,42,25,90],"57":[2,5,2,32],"58":[18,30,18,68],"64":[25,42,25,90],"65":[2,5,2,33],"66":[20,18,20,62],"72":[26,9,26,65],"73":[4,1,4,13],"74":[20,18,20,68],"80":[29,20,29,55],"81":[4,1,4,14],"82":[20,18,20,106],"88":[27,13,27,47],"89":[5,1,5,7],"90":[20,203,20,251],"96":[26,9,26,65],"97":[5,23,5,30],"98":[20,203,20,264],"104":[37,16,37,48],"105":[5,32,5,44],"106":[24,34,24,76],"112":[35,16,35,48],"113":[5,55,5,59],"114":[24,34,24,83],"120":[33,9,33,48],"121":[5,46,5,61],"122":[24,102,24,135],"128":[40,9,40,36],"129":[5,1,5,62],"130":[24,102,24,141],"131":[5,1,5,22],"136":[48,22,48,95],"137":[5,1,5,63],"138":[24,102,24,158],"144":[48,20,48,96],"145":[6,1,6,8],"146":[24,102,24,165],"152":[46,13,46,41],"153":[6,19,6,29],"154":[24,102,24,204],"160":[45,9,45,32],"161":[6,1,6,29],"162":[25,19,25,113],"169":[6,1,6,30],"170":[26,36,26,65],"177":[7,14,7,21],"178":[28,24,28,32],"185":[7,22,7,36],"186":[30,23,30,41],"193":[7,14,7,37],"194":[34,19,34,42],"201":[7,14,7,37],"202":[36,19,36,33],"209":[7,14,7,37],"210":[38,20,38,31],"217":[8,15,8,37],"218":[41,20,41,26],"225":[8,38,8,44],"226":[43,19,43,35],"233":[8,15,8,45],"234":[47,23,47,39],"241":[8,15,8,45],"242":[47,23,47,48],"249":[8,15,8,45],"250":[47,23,47,58],"257":[9,21,9,28],"258":[47,23,47,64],"265":[9,29,9,50],"266":[48,20,48,96],"273":[9,21,9,51],"274":[49,23,49,41],"281":[9,21,9,51],"282":[52,23,52,52],"289":[9,21,9,51],"290":[52,23,52,58],"297":[10,22,10,44],"305":[10,45,10,58],"313":[10,22,10,59],"321":[10,22,10,59],"329":[10,22,10,59],"337":[12,12,12,15],"345":[12,19,12,22],"353":[12,19,12,33],"361":[12,36,12,39],"369":[12,53,12,56],"377":[12,42,12,58],"385":[12,12,12,58],"393":[12,5,12,59],"401":[11,1,13,2],"409":[11,1,13,2],"417":[11,1,13,2],"425":[15,26,15,32],"433":[15,35,15,42],"441":[15,35,15,63],"449":[15,64,15,65],"457":[15,35,15,66],"465":[15,69,15,72],"473":[15,26,15,72],"481":[15,26,15,72],"489":[16,5,16,12],"497":[16,5,16,33],"505":[17,13,17,18],"513":[17,23,17,24],"521":[18,30,18,44],"529":[18,47,18,54],"537":[18,57,18,62],"545":[18,65,18,68],"553":[18,30,18,68],"561":[18,13,18,69],"569":[16,42,19,6],"577":[16,42,19,6],"585":[16,42,19,6],"593":[16,42,19,6],"601":[16,42,19,6],"609":[16,5,19,7],"611":[16,5,16,41],"617":[16,5,19,8],"625":[20,18,20,23],"633":[20,26,20,33],"641":[20,26,20,40],"649":[20,49,20,54],"657":[20,56,20,61],"665":[20,26,20,62],"667":[20,26,20,48],"673":[20,65,20,68],"681":[20,72,20,79],"689":[20,72,20,94],"697":[20,97,20,99],"705":[20,102,20,105],"713":[20,119,20,123],"721":[20,159,20,170],"729":[20,203,20,221],"737":[20,224,20,231],"745":[20,224,20,251],"753":[20,254,20,264],"761":[21,13,21,16],"769":[22,13,22,44],"777":[23,13,23,41],"785":[20,295,24,10],"793":[24,34,24,37],"801":[24,40,24,66],"809":[24,72,24,75],"817":[24,40,24,76],"819":[24,40,24,71],"825":[24,79,24,83],"833":[24,102,24,107],"841":[24,110,24,117],"849":[24,110,24,135],"857":[24,138,24,141],"865":[24,144,24,158],"873":[24,161,24,165],"881":[24,169,24,176],"889":[24,169,24,192],"897":[24,195,24,197],"905":[24,200,24,203],"913":[20,18,20,106],"921":[20,18,20,106],"929":[20,119,20,123],"937":[20,119,20,123],"945":[20,159,20,170],"953":[20,159,20,170],"961":[20,203,20,264],"969":[20,203,20,264],"977":[20,295,24,10],"985":[20,295,24,10],"993":[24,34,24,83],"1001":[24,34,24,83],"1009":[24,102,24,204],"1017":[24,102,24,204],"1025":[25,19,25,38],"1033":[25,42,25,49],"1041":[25,42,25,63],"1049":[25,67,25,74],"1057":[25,67,25,90],"1065":[25,93,25,107],"1073":[25,110,25,112],"1081":[25,19,25,113],"1089":[25,19,25,113],"1097":[26,9,26,16],"1105":[26,9,26,32],"1113":[26,37,26,44],"1121":[26,37,26,65],"1129":[27,13,27,20],"1137":[27,13,27,47],"1145":[28,24,28,32],"1153":[28,13,28,20],"1161":[28,13,28,32],"1169":[28,13,28,33],"1177":[29,20,29,27],"1185":[29,20,29,55],"1193":[30,23,30,31],"1201":[30,34,30,41],"1209":[30,23,30,41],"1217":[30,13,30,42],"1225":[33,9,33,16],"1233":[33,9,33,48],"1241":[34,19,34,32],"1249":[34,35,34,42],"1257":[34,19,34,42],"1265":[34,9,34,43],"1273":[35,16,35,23],"1281":[35,16,35,48],"1289":[36,19,36,23],"1297":[36,26,36,33],"1305":[36,19,36,33],"1313":[36,9,36,34],"1321":[37,16,37,23],"1329":[37,16,37,48],"1337":[38,20,38,31],"1345":[38,9,38,16],"1353":[38,9,38,31],"1361":[38,9,38,32],"1369":[40,9,40,16],"1377":[40,9,40,36],"1385":[41,20,41,26],"1393":[41,9,41,16],"1401":[41,9,41,26],"1409":[41,9,41,27],"1417":[43,19,43,25],"1425":[43,28,43,35],"1433":[43,19,43,35],"1441":[43,9,43,36],"1449":[45,9,45,16],"1457":[45,9,45,32],"1465":[46,13,46,20],"1473":[46,13,46,41],"1481":[47,23,47,29],"1489":[47,32,47,39],"1497":[47,42,47,48],"1505":[47,51,47,58],"1513":[47,61,47,64],"1521":[47,23,47,64],"1529":[47,13,47,65],"1537":[48,22,48,29],"1545":[48,22,48,57],"1553":[48,61,48,68],"1561":[48,61,48,95],"1569":[49,23,49,31],"1577":[49,34,49,41],"1585":[49,23,49,41],"1593":[49,13,49,42],"1601":[52,16,52,22],"1609":[52,23,52,42],"1617":[52,45,52,52],"1625":[52,55,52,58],"1633":[52,12,52,59],"1641":[52,12,52,59],"1649":[52,5,52,60],"1657":[14,1,53,2],"1665":[14,1,53,2],"1673":[14,1,53,2],"1681":[14,1,53,2],"1689":[14,1,53,2],"1697":[14,1,53,2],"1705":[14,1,53,2],"1713":[14,1,53,2],"1721":[14,1,53,2],"1729":[14,1,53,2],"1737":[14,1,53,2],"1745":[14,1,53,2],"1753":[55,13,55,16],"1761":[56,21,56,26],"1769":[57,31,57,36],"1777":[58,26,58,31],"1785":[59,22,59,26],"1793":[60,27,60,32],"1801":[61,34,61,39],"1809":[62,33,62,38],"1817":[63,38,63,43],"1825":[64,26,64,29],"1833":[65,24,65,27],"1841":[66,20,66,24],"1849":[67,22,67,27],"1857":[68,28,68,29],"1865":[68,27,68,30],"1873":[69,31,69,36],"1881":[54,32,70,2],"1889":[54,32,70,2],"1897":[54,32,70,2],"1905":[72,6,72,7],"1913":[72,9,72,23],"1921":[72,9,72,31],"1929":[72,6,72,7],"1937":[72,33,72,36],"1945":[72,5,72,37],"1953":[72,5,72,38],"1961":[73,16,73,17],"1969":[73,19,73,26],"1977":[73,19,73,34],"1985":[73,16,73,17],"1993":[73,36,73,43],"2001":[73,45,73,69],"2009":[73,15,73,70],"2017":[73,15,73,70],"2025":[73,5,73,71],"2033":[74,12,74,25],"2041":[74,26,74,33],"2049":[74,12,74,34],"2057":[74,40,74,43],"2065":[74,12,74,44],"2067":[74,12,74,39],"2073":[74,12,74,44],"2081":[74,5,74,45],"2089":[71,1,75,2],"2097":[71,1,75,2],"2105":[71,1,75,2],"2113":[71,1,75,2],"2121":[76,1,76,7],"2129":[76,18,76,25],"2137":[76,26,76,35],"2145":[76,18,76,36],"2153":[76,1,76,36],"2161":[76,1,76,37],"2169":[1,1,76,37],"2177":[1,1,76,37],"2185":[1,1,76,37],"2193":[1,1,76,37],"2201":[1,1,76,37],"2209":[11,1,13,2],"2217":[1,1,76,37],"2225":[14,1,53,2],"2233":[1,1,76,37],"2241":[1,1,76,37],"2249":[71,1,75,2],"2257":[1,1,76,37],"2265":[1,1,3,2],"2273":[12,12,12,58],"2281":[11,1,13,2],"2289":[11,1,13,2],"2297":[17,9,18,69],"2305":[16,42,19,6],"2313":[16,42,19,6],"2321":[20,72,20,105],"2329":[24,169,24,203],"2337":[25,42,25,112],"2345":[29,16,31,10],"2353":[27,9,31,10],"2361":[26,5,32,6],"2369":[37,12,39,6],"2377":[35,12,39,6],"2385":[33,5,39,6],"2393":[40,5,44,6],"2401":[48,16,50,10],"2409":[46,9,50,10],"2417":[45,5,51,6],"2425":[14,1,53,2],"2433":[14,1,53,2],"2441":[71,1,75,2],"2449":[71,1,75,2],"2457":[1,1,76,37],"2465":[1,1,76,37],"nBranches":40,"originalCodeFileName":"/home/blake/ExpoSE/Targets/mario/node_modules/validator/lib/isCurrency.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/mario/node_modules/validator/lib/isCurrency_jalangi_.js","code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCurrency;\n\nvar _merge = require('./util/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction currencyRegex(options) {\n  var decimal_digits = '\\\\d{' + options.digits_after_decimal[0] + '}';\n  options.digits_after_decimal.forEach(function (digit, index) {\n    if (index !== 0) decimal_digits = decimal_digits + '|\\\\d{' + digit + '}';\n  });\n  var symbol = '(\\\\' + options.symbol.replace(/\\./g, '\\\\.') + ')' + (options.require_symbol ? '' : '?'),\n      negative = '-?',\n      whole_dollar_amount_without_sep = '[1-9]\\\\d*',\n      whole_dollar_amount_with_sep = '[1-9]\\\\d{0,2}(\\\\' + options.thousands_separator + '\\\\d{3})*',\n      valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],\n      whole_dollar_amount = '(' + valid_whole_dollar_amounts.join('|') + ')?',\n      decimal_amount = '(\\\\' + options.decimal_separator + '(' + decimal_digits + '))' + (options.require_decimal ? '' : '?');\n  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : '');\n\n  // default is negative sign before symbol, but there are two other options (besides parens)\n  if (options.allow_negatives && !options.parens_for_negatives) {\n    if (options.negative_sign_after_digits) {\n      pattern += negative;\n    } else if (options.negative_sign_before_digits) {\n      pattern = negative + pattern;\n    }\n  }\n\n  // South African Rand, for example, uses R 123 (space) and R-123 (no space)\n  if (options.allow_negative_sign_placeholder) {\n    pattern = '( (?!\\\\-))?' + pattern;\n  } else if (options.allow_space_after_symbol) {\n    pattern = ' ?' + pattern;\n  } else if (options.allow_space_after_digits) {\n    pattern += '( (?!$))?';\n  }\n\n  if (options.symbol_after_digits) {\n    pattern += symbol;\n  } else {\n    pattern = symbol + pattern;\n  }\n\n  if (options.allow_negatives) {\n    if (options.parens_for_negatives) {\n      pattern = '(\\\\(' + pattern + '\\\\)|' + pattern + ')';\n    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {\n      pattern = negative + pattern;\n    }\n  }\n\n  // ensure there's a dollar and/or decimal amount, and that\n  // it doesn't start with a space or a negative sign followed by a space\n  return new RegExp('^(?!-? )(?=.*\\\\d)' + pattern + '$');\n}\n\nvar default_currency_options = {\n  symbol: '$',\n  require_symbol: false,\n  allow_space_after_symbol: false,\n  symbol_after_digits: false,\n  allow_negatives: true,\n  parens_for_negatives: false,\n  negative_sign_before_digits: false,\n  negative_sign_after_digits: false,\n  allow_negative_sign_placeholder: false,\n  thousands_separator: ',',\n  decimal_separator: '.',\n  allow_decimal: true,\n  require_decimal: false,\n  digits_after_decimal: [2],\n  allow_space_after_digits: false\n};\n\nfunction isCurrency(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_currency_options);\n  return currencyRegex(options).test(str);\n}\nmodule.exports = exports['default'];"};
jalangiLabel193:
    while (true) {
        try {
            J$.Se(2169, '/home/blake/ExpoSE/Targets/mario/node_modules/validator/lib/isCurrency_jalangi_.js', '/home/blake/ExpoSE/Targets/mario/node_modules/validator/lib/isCurrency.js');
            function _interopRequireDefault(obj) {
                jalangiLabel189:
                    while (true) {
                        try {
                            J$.Fe(401, arguments.callee, this, arguments);
                            arguments = J$.N(409, 'arguments', arguments, 4);
                            obj = J$.N(417, 'obj', obj, 4);
                            return J$.X1(393, J$.Rt(385, J$.X1(2273, J$.C(24, J$.C(16, J$.R(337, 'obj', obj, 0)) ? J$.G(353, J$.R(345, 'obj', obj, 0), '__esModule', 0) : J$._())) ? J$.R(361, 'obj', obj, 0) : J$.T(377, {
                                default: J$.R(369, 'obj', obj, 0)
                            }, 11, false)));
                        } catch (J$e) {
                            J$.Ex(2281, J$e);
                        } finally {
                            if (J$.Fr(2289))
                                continue jalangiLabel189;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function currencyRegex(options) {
                jalangiLabel191:
                    while (true) {
                        try {
                            J$.Fe(1657, arguments.callee, this, arguments);
                            arguments = J$.N(1665, 'arguments', arguments, 4);
                            options = J$.N(1673, 'options', options, 4);
                            J$.N(1681, 'decimal_digits', decimal_digits, 0);
                            J$.N(1689, 'symbol', symbol, 0);
                            J$.N(1697, 'negative', negative, 0);
                            J$.N(1705, 'whole_dollar_amount_without_sep', whole_dollar_amount_without_sep, 0);
                            J$.N(1713, 'whole_dollar_amount_with_sep', whole_dollar_amount_with_sep, 0);
                            J$.N(1721, 'valid_whole_dollar_amounts', valid_whole_dollar_amounts, 0);
                            J$.N(1729, 'whole_dollar_amount', whole_dollar_amount, 0);
                            J$.N(1737, 'decimal_amount', decimal_amount, 0);
                            J$.N(1745, 'pattern', pattern, 0);
                            var decimal_digits = J$.X1(481, J$.W(473, 'decimal_digits', J$.B(26, '+', J$.B(18, '+', J$.T(425, '\\d{', 21, false), J$.G(457, J$.G(441, J$.R(433, 'options', options, 0), 'digits_after_decimal', 0), J$.T(449, 0, 22, false), 4), 0), J$.T(465, '}', 21, false), 0), decimal_digits, 1));
                            J$.X1(617, J$.M(609, J$.G(497, J$.R(489, 'options', options, 0), 'digits_after_decimal', 0), 'forEach', 0)(J$.T(601, function (digit, index) {
                                jalangiLabel190:
                                    while (true) {
                                        try {
                                            J$.Fe(569, arguments.callee, this, arguments);
                                            arguments = J$.N(577, 'arguments', arguments, 4);
                                            digit = J$.N(585, 'digit', digit, 4);
                                            index = J$.N(593, 'index', index, 4);
                                            if (J$.X1(2297, J$.C(32, J$.B(34, '!==', J$.R(505, 'index', index, 0), J$.T(513, 0, 22, false), 0))))
                                                J$.X1(561, decimal_digits = J$.W(553, 'decimal_digits', J$.B(58, '+', J$.B(50, '+', J$.B(42, '+', J$.R(521, 'decimal_digits', decimal_digits, 0), J$.T(529, '|\\d{', 21, false), 0), J$.R(537, 'digit', digit, 0), 0), J$.T(545, '}', 21, false), 0), decimal_digits, 0));
                                        } catch (J$e) {
                                            J$.Ex(2305, J$e);
                                        } finally {
                                            if (J$.Fr(2313))
                                                continue jalangiLabel190;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 569)));
                            var symbol = J$.X1(921, J$.W(913, 'symbol', J$.B(82, '+', J$.B(74, '+', J$.B(66, '+', J$.T(625, '(\\', 21, false), J$.M(665, J$.G(641, J$.R(633, 'options', options, 0), 'symbol', 0), 'replace', 0)(J$.T(649, /\./g, 14, false), J$.T(657, '\\.', 21, false)), 0), J$.T(673, ')', 21, false), 0), J$.X1(2321, J$.C(40, J$.G(689, J$.R(681, 'options', options, 0), 'require_symbol', 0))) ? J$.T(697, '', 21, false) : J$.T(705, '?', 21, false), 0), symbol, 1)), negative = J$.X1(937, J$.W(929, 'negative', J$.T(713, '-?', 21, false), negative, 1)), whole_dollar_amount_without_sep = J$.X1(953, J$.W(945, 'whole_dollar_amount_without_sep', J$.T(721, '[1-9]\\d*', 21, false), whole_dollar_amount_without_sep, 1)), whole_dollar_amount_with_sep = J$.X1(969, J$.W(961, 'whole_dollar_amount_with_sep', J$.B(98, '+', J$.B(90, '+', J$.T(729, '[1-9]\\d{0,2}(\\', 21, false), J$.G(745, J$.R(737, 'options', options, 0), 'thousands_separator', 0), 0), J$.T(753, '\\d{3})*', 21, false), 0), whole_dollar_amount_with_sep, 1)), valid_whole_dollar_amounts = J$.X1(985, J$.W(977, 'valid_whole_dollar_amounts', J$.T(785, [
                                    J$.T(761, '0', 21, false),
                                    J$.R(769, 'whole_dollar_amount_without_sep', whole_dollar_amount_without_sep, 0),
                                    J$.R(777, 'whole_dollar_amount_with_sep', whole_dollar_amount_with_sep, 0)
                                ], 10, false), valid_whole_dollar_amounts, 1)), whole_dollar_amount = J$.X1(1001, J$.W(993, 'whole_dollar_amount', J$.B(114, '+', J$.B(106, '+', J$.T(793, '(', 21, false), J$.M(817, J$.R(801, 'valid_whole_dollar_amounts', valid_whole_dollar_amounts, 0), 'join', 0)(J$.T(809, '|', 21, false)), 0), J$.T(825, ')?', 21, false), 0), whole_dollar_amount, 1)), decimal_amount = J$.X1(1017, J$.W(1009, 'decimal_amount', J$.B(154, '+', J$.B(146, '+', J$.B(138, '+', J$.B(130, '+', J$.B(122, '+', J$.T(833, '(\\', 21, false), J$.G(849, J$.R(841, 'options', options, 0), 'decimal_separator', 0), 0), J$.T(857, '(', 21, false), 0), J$.R(865, 'decimal_digits', decimal_digits, 0), 0), J$.T(873, '))', 21, false), 0), J$.X1(2329, J$.C(48, J$.G(889, J$.R(881, 'options', options, 0), 'require_decimal', 0))) ? J$.T(897, '', 21, false) : J$.T(905, '?', 21, false), 0), decimal_amount, 1));
                            var pattern = J$.X1(1089, J$.W(1081, 'pattern', J$.B(162, '+', J$.R(1025, 'whole_dollar_amount', whole_dollar_amount, 0), J$.X1(2337, J$.C(64, J$.C(56, J$.G(1041, J$.R(1033, 'options', options, 0), 'allow_decimal', 0)) ? J$._() : J$.G(1057, J$.R(1049, 'options', options, 0), 'require_decimal', 0))) ? J$.R(1065, 'decimal_amount', decimal_amount, 0) : J$.T(1073, '', 21, false), 0), pattern, 1));
                            if (J$.X1(2361, J$.C(96, J$.C(72, J$.G(1105, J$.R(1097, 'options', options, 0), 'allow_negatives', 0)) ? J$.U(170, '!', J$.G(1121, J$.R(1113, 'options', options, 0), 'parens_for_negatives', 0)) : J$._()))) {
                                if (J$.X1(2353, J$.C(88, J$.G(1137, J$.R(1129, 'options', options, 0), 'negative_sign_after_digits', 0)))) {
                                    J$.X1(1169, pattern = J$.W(1161, 'pattern', J$.B(178, '+', J$.R(1153, 'pattern', pattern, 0), J$.R(1145, 'negative', negative, 0), 0), pattern, 0));
                                } else if (J$.X1(2345, J$.C(80, J$.G(1185, J$.R(1177, 'options', options, 0), 'negative_sign_before_digits', 0)))) {
                                    J$.X1(1217, pattern = J$.W(1209, 'pattern', J$.B(186, '+', J$.R(1193, 'negative', negative, 0), J$.R(1201, 'pattern', pattern, 0), 0), pattern, 0));
                                }
                            }
                            if (J$.X1(2385, J$.C(120, J$.G(1233, J$.R(1225, 'options', options, 0), 'allow_negative_sign_placeholder', 0)))) {
                                J$.X1(1265, pattern = J$.W(1257, 'pattern', J$.B(194, '+', J$.T(1241, '( (?!\\-))?', 21, false), J$.R(1249, 'pattern', pattern, 0), 0), pattern, 0));
                            } else if (J$.X1(2377, J$.C(112, J$.G(1281, J$.R(1273, 'options', options, 0), 'allow_space_after_symbol', 0)))) {
                                J$.X1(1313, pattern = J$.W(1305, 'pattern', J$.B(202, '+', J$.T(1289, ' ?', 21, false), J$.R(1297, 'pattern', pattern, 0), 0), pattern, 0));
                            } else if (J$.X1(2369, J$.C(104, J$.G(1329, J$.R(1321, 'options', options, 0), 'allow_space_after_digits', 0)))) {
                                J$.X1(1361, pattern = J$.W(1353, 'pattern', J$.B(210, '+', J$.R(1345, 'pattern', pattern, 0), J$.T(1337, '( (?!$))?', 21, false), 0), pattern, 0));
                            }
                            if (J$.X1(2393, J$.C(128, J$.G(1377, J$.R(1369, 'options', options, 0), 'symbol_after_digits', 0)))) {
                                J$.X1(1409, pattern = J$.W(1401, 'pattern', J$.B(218, '+', J$.R(1393, 'pattern', pattern, 0), J$.R(1385, 'symbol', symbol, 0), 0), pattern, 0));
                            } else {
                                J$.X1(1441, pattern = J$.W(1433, 'pattern', J$.B(226, '+', J$.R(1417, 'symbol', symbol, 0), J$.R(1425, 'pattern', pattern, 0), 0), pattern, 0));
                            }
                            if (J$.X1(2417, J$.C(160, J$.G(1457, J$.R(1449, 'options', options, 0), 'allow_negatives', 0)))) {
                                if (J$.X1(2409, J$.C(152, J$.G(1473, J$.R(1465, 'options', options, 0), 'parens_for_negatives', 0)))) {
                                    J$.X1(1529, pattern = J$.W(1521, 'pattern', J$.B(258, '+', J$.B(250, '+', J$.B(242, '+', J$.B(234, '+', J$.T(1481, '(\\(', 21, false), J$.R(1489, 'pattern', pattern, 0), 0), J$.T(1497, '\\)|', 21, false), 0), J$.R(1505, 'pattern', pattern, 0), 0), J$.T(1513, ')', 21, false), 0), pattern, 0));
                                } else if (J$.X1(2401, J$.C(144, J$.U(266, '!', J$.C(136, J$.G(1545, J$.R(1537, 'options', options, 0), 'negative_sign_before_digits', 0)) ? J$._() : J$.G(1561, J$.R(1553, 'options', options, 0), 'negative_sign_after_digits', 0))))) {
                                    J$.X1(1593, pattern = J$.W(1585, 'pattern', J$.B(274, '+', J$.R(1569, 'negative', negative, 0), J$.R(1577, 'pattern', pattern, 0), 0), pattern, 0));
                                }
                            }
                            return J$.X1(1649, J$.Rt(1641, J$.F(1633, J$.R(1601, 'RegExp', RegExp, 2), 1)(J$.B(290, '+', J$.B(282, '+', J$.T(1609, '^(?!-? )(?=.*\\d)', 21, false), J$.R(1617, 'pattern', pattern, 0), 0), J$.T(1625, '$', 21, false), 0))));
                        } catch (J$e) {
                            J$.Ex(2425, J$e);
                        } finally {
                            if (J$.Fr(2433))
                                continue jalangiLabel191;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function isCurrency(str, options) {
                jalangiLabel192:
                    while (true) {
                        try {
                            J$.Fe(2089, arguments.callee, this, arguments);
                            arguments = J$.N(2097, 'arguments', arguments, 4);
                            str = J$.N(2105, 'str', str, 4);
                            options = J$.N(2113, 'options', options, 4);
                            J$.X1(1953, J$.F(1945, (J$.X1(1929, J$.T(1905, 0, 22, false)), J$.G(1921, J$.R(1913, '_assertString2', _assertString2, 1), 'default', 0)), 0)(J$.R(1937, 'str', str, 0)));
                            J$.X1(2025, options = J$.W(2017, 'options', J$.F(2009, (J$.X1(1985, J$.T(1961, 0, 22, false)), J$.G(1977, J$.R(1969, '_merge2', _merge2, 1), 'default', 0)), 0)(J$.R(1993, 'options', options, 0), J$.R(2001, 'default_currency_options', default_currency_options, 1)), options, 0));
                            return J$.X1(2081, J$.Rt(2073, J$.M(2065, J$.F(2049, J$.R(2033, 'currencyRegex', currencyRegex, 1), 0)(J$.R(2041, 'options', options, 0)), 'test', 0)(J$.R(2057, 'str', str, 0))));
                        } catch (J$e) {
                            J$.Ex(2441, J$e);
                        } finally {
                            if (J$.Fr(2449))
                                continue jalangiLabel192;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(2177, '_merge', _merge, 0);
            J$.N(2185, '_merge2', _merge2, 0);
            J$.N(2193, '_assertString', _assertString, 0);
            J$.N(2201, '_assertString2', _assertString2, 0);
            _interopRequireDefault = J$.N(2217, '_interopRequireDefault', J$.T(2209, _interopRequireDefault, 12, false, 401), 0);
            currencyRegex = J$.N(2233, 'currencyRegex', J$.T(2225, currencyRegex, 12, false, 1657), 0);
            J$.N(2241, 'default_currency_options', default_currency_options, 0);
            isCurrency = J$.N(2257, 'isCurrency', J$.T(2249, isCurrency, 12, false, 2089), 0);
            if (J$.X1(2265, J$.C(8, J$.U(10, '!', J$.G(17, J$.R(9, 'Object', Object, 2), '_s$_', 0))))) {
                J$.X1(65, J$.P(57, J$.R(25, 'Object', Object, 2), '_s$_', J$.F(49, J$.R(33, 'require', require, 2), 0)(J$.T(41, 'S$', 21, false)), 0));
            }
            J$.X1(81, J$.T(73, 'use strict', 21, false));
            J$.X1(137, J$.M(129, J$.R(89, 'Object', Object, 2), 'defineProperty', 0)(J$.R(97, 'exports', exports, 2), J$.T(105, '__esModule', 21, false), J$.T(121, {
                value: J$.T(113, true, 23, false)
            }, 11, false)));
            J$.X1(169, J$.P(161, J$.R(145, 'exports', exports, 2), 'default', J$.R(153, 'isCurrency', isCurrency, 1), 0));
            var _merge = J$.X1(209, J$.W(201, '_merge', J$.F(193, J$.R(177, 'require', require, 2), 0)(J$.T(185, './util/merge', 21, false)), _merge, 3));
            var _merge2 = J$.X1(249, J$.W(241, '_merge2', J$.F(233, J$.R(217, '_interopRequireDefault', _interopRequireDefault, 1), 0)(J$.R(225, '_merge', _merge, 1)), _merge2, 3));
            var _assertString = J$.X1(289, J$.W(281, '_assertString', J$.F(273, J$.R(257, 'require', require, 2), 0)(J$.T(265, './util/assertString', 21, false)), _assertString, 3));
            var _assertString2 = J$.X1(329, J$.W(321, '_assertString2', J$.F(313, J$.R(297, '_interopRequireDefault', _interopRequireDefault, 1), 0)(J$.R(305, '_assertString', _assertString, 1)), _assertString2, 3));
            var default_currency_options = J$.X1(1897, J$.W(1889, 'default_currency_options', J$.T(1881, {
                symbol: J$.T(1753, '$', 21, false),
                require_symbol: J$.T(1761, false, 23, false),
                allow_space_after_symbol: J$.T(1769, false, 23, false),
                symbol_after_digits: J$.T(1777, false, 23, false),
                allow_negatives: J$.T(1785, true, 23, false),
                parens_for_negatives: J$.T(1793, false, 23, false),
                negative_sign_before_digits: J$.T(1801, false, 23, false),
                negative_sign_after_digits: J$.T(1809, false, 23, false),
                allow_negative_sign_placeholder: J$.T(1817, false, 23, false),
                thousands_separator: J$.T(1825, ',', 21, false),
                decimal_separator: J$.T(1833, '.', 21, false),
                allow_decimal: J$.T(1841, true, 23, false),
                require_decimal: J$.T(1849, false, 23, false),
                digits_after_decimal: J$.T(1865, [J$.T(1857, 2, 22, false)], 10, false),
                allow_space_after_digits: J$.T(1873, false, 23, false)
            }, 11, false), default_currency_options, 3));
            J$.X1(2161, J$.P(2153, J$.R(2121, 'module', module, 2), 'exports', J$.G(2145, J$.R(2129, 'exports', exports, 2), J$.T(2137, 'default', 21, false), 4), 0));
        } catch (J$e) {
            J$.Ex(2457, J$e);
        } finally {
            if (J$.Sr(2465)) {
                J$.L();
                continue jalangiLabel193;
            } else {
                J$.L();
                break jalangiLabel193;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
