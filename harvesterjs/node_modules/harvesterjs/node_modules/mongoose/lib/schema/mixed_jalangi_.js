J$.iids = {"8":[6,9,6,35],"9":[1,20,1,27],"10":[8,35,8,51],"16":[8,13,8,51],"17":[1,28,1,32],"18":[10,20,10,35],"24":[10,20,10,58],"25":[1,20,1,33],"26":[10,62,10,91],"32":[10,20,10,91],"33":[1,20,1,33],"34":[22,12,22,29],"40":[10,20,10,91],"41":[1,20,1,33],"42":[22,33,22,45],"48":[8,13,8,51],"49":[2,26,2,38],"50":[28,9,28,31],"56":[6,9,6,35],"57":[2,26,2,45],"64":[22,12,22,45],"65":[2,26,2,45],"72":[28,9,28,31],"73":[2,26,2,45],"81":[3,18,3,25],"89":[3,26,3,41],"97":[3,18,3,42],"105":[3,18,3,42],"113":[3,18,3,42],"121":[4,13,4,20],"129":[4,21,4,31],"137":[4,13,4,32],"145":[4,13,4,32],"153":[4,13,4,32],"161":[6,9,6,16],"169":[6,20,6,27],"177":[6,20,6,35],"185":[7,19,7,26],"193":[7,19,7,34],"201":[7,19,7,34],"209":[7,19,7,34],"217":[8,13,8,18],"225":[8,27,8,30],"233":[8,13,8,31],"235":[8,13,8,26],"241":[8,35,8,36],"249":[8,41,8,44],"257":[8,41,8,51],"265":[9,13,9,20],"273":[9,31,9,36],"281":[9,13,9,36],"289":[9,13,9,37],"297":[10,21,10,28],"305":[10,21,10,35],"313":[10,39,10,44],"321":[10,54,10,57],"329":[10,39,10,58],"331":[10,39,10,53],"337":[10,62,10,63],"345":[10,68,10,74],"353":[10,80,10,83],"361":[10,68,10,84],"363":[10,68,10,79],"369":[10,68,10,91],"377":[11,13,11,20],"385":[12,24,12,26],"393":[12,24,12,26],"401":[12,17,12,27],"409":[11,31,13,14],"417":[11,31,13,14],"425":[11,31,13,14],"433":[11,13,13,14],"441":[11,13,13,15],"449":[16,5,16,15],"457":[16,21,16,25],"465":[16,27,16,31],"473":[16,33,16,40],"481":[16,42,16,49],"489":[16,5,16,50],"491":[16,5,16,20],"497":[16,5,16,51],"505":[5,1,17,2],"513":[5,1,17,2],"521":[5,1,17,2],"529":[5,1,17,2],"537":[5,1,17,2],"545":[18,1,18,6],"553":[18,20,18,27],"561":[18,1,18,27],"569":[18,1,18,28],"577":[19,1,19,6],"585":[19,19,19,25],"593":[19,33,19,43],"601":[19,33,19,53],"609":[19,19,19,54],"611":[19,19,19,32],"617":[19,1,19,54],"625":[19,1,19,55],"633":[20,1,20,6],"641":[20,1,20,16],"649":[20,31,20,36],"657":[20,1,20,36],"665":[20,1,20,37],"673":[21,1,21,6],"681":[21,1,21,16],"689":[22,12,22,15],"697":[22,20,22,29],"705":[22,33,22,36],"713":[22,41,22,45],"721":[22,12,22,45],"729":[22,5,22,46],"737":[21,33,23,2],"745":[21,33,23,2],"753":[21,33,23,2],"761":[21,33,23,2],"769":[21,1,23,2],"777":[21,1,23,3],"785":[24,1,24,6],"793":[24,1,24,16],"801":[25,12,25,15],"809":[25,12,25,15],"817":[25,5,25,16],"825":[24,24,26,2],"833":[24,24,26,2],"841":[24,24,26,2],"849":[24,24,26,2],"857":[24,1,26,2],"865":[24,1,26,3],"873":[27,1,27,6],"881":[27,1,27,16],"889":[28,9,28,18],"897":[28,9,28,25],"905":[28,30,28,31],"913":[29,16,29,19],"921":[29,16,29,19],"929":[29,9,29,20],"937":[30,12,30,17],"945":[30,12,30,17],"953":[30,5,30,18],"961":[27,32,31,2],"969":[27,32,31,2],"977":[27,32,31,2],"985":[27,32,31,2],"993":[27,32,31,2],"1001":[27,1,31,2],"1009":[27,1,31,3],"1017":[32,1,32,7],"1025":[32,18,32,23],"1033":[32,1,32,23],"1041":[32,1,32,24],"1049":[1,1,32,24],"1057":[1,1,32,24],"1065":[1,1,32,24],"1073":[1,1,32,24],"1081":[1,1,32,24],"1089":[5,1,17,2],"1097":[1,1,32,24],"1105":[11,31,13,14],"1113":[11,31,13,14],"1121":[10,16,14,10],"1129":[8,9,14,10],"1137":[6,5,15,6],"1145":[5,1,17,2],"1153":[5,1,17,2],"1161":[21,33,23,2],"1169":[21,33,23,2],"1177":[24,24,26,2],"1185":[24,24,26,2],"1193":[28,5,29,20],"1201":[27,32,31,2],"1209":[27,32,31,2],"1217":[1,1,32,24],"1225":[1,1,32,24],"nBranches":18,"originalCodeFileName":"/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/lib/schema/mixed.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/lib/schema/mixed_jalangi_.js","code":"\n/*!\n * Module dependencies.\n */\n\nvar SchemaType = require('../schematype');\nvar utils = require('../utils');\n\n/**\n * Mixed SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api private\n */\n\nfunction Mixed(path, options) {\n  if (options && options.default) {\n    var def = options.default;\n    if (Array.isArray(def) && 0 === def.length) {\n      // make sure empty array defaults are handled\n      options.default = Array;\n    } else if (!options.shared &&\n               utils.isObject(def) &&\n               0 === Object.keys(def).length) {\n      // prevent odd \"shared\" objects between documents\n      options.default = function() {\n        return {};\n      };\n    }\n  }\n\n  SchemaType.call(this, path, options, 'Mixed');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api private\n */\nMixed.schemaName = 'Mixed';\n\n/*!\n * Inherits from SchemaType.\n */\nMixed.prototype = Object.create( SchemaType.prototype );\nMixed.prototype.constructor = Mixed;\n\n/**\n * Required validator\n *\n * @api private\n */\n\nMixed.prototype.checkRequired = function(val) {\n  return (val !== undefined) && (val !== null);\n};\n\n/**\n * Casts `val` for Mixed.\n *\n * _this is a no-op_\n *\n * @param {Object} value to cast\n * @api private\n */\n\nMixed.prototype.cast = function(val) {\n  return val;\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $cond\n * @param {any} [val]\n * @api private\n */\n\nMixed.prototype.castForQuery = function($cond, val) {\n  if (arguments.length === 2) return val;\n  return $cond;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = Mixed;\n"};
jalangiLabel5025:
    while (true) {
        try {
            J$.Se(1049, '/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/lib/schema/mixed_jalangi_.js', '/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/lib/schema/mixed.js');
            function Mixed(path, options) {
                jalangiLabel5021:
                    while (true) {
                        try {
                            J$.Fe(505, arguments.callee, this, arguments);
                            arguments = J$.N(513, 'arguments', arguments, 4);
                            path = J$.N(521, 'path', path, 4);
                            options = J$.N(529, 'options', options, 4);
                            J$.N(537, 'def', def, 0);
                            if (J$.X1(1137, J$.C(56, J$.C(8, J$.R(161, 'options', options, 0)) ? J$.G(177, J$.R(169, 'options', options, 0), 'default', 0) : J$._()))) {
                                var def = J$.X1(209, J$.W(201, 'def', J$.G(193, J$.R(185, 'options', options, 0), 'default', 0), def, 1));
                                if (J$.X1(1129, J$.C(48, J$.C(16, J$.M(233, J$.R(217, 'Array', Array, 2), 'isArray', 0)(J$.R(225, 'def', def, 0))) ? J$.B(10, '===', J$.T(241, 0, 22, false), J$.G(257, J$.R(249, 'def', def, 0), 'length', 0), 0) : J$._()))) {
                                    J$.X1(289, J$.P(281, J$.R(265, 'options', options, 0), 'default', J$.R(273, 'Array', Array, 2), 0));
                                } else if (J$.X1(1121, J$.C(40, J$.C(32, J$.C(24, J$.U(18, '!', J$.G(305, J$.R(297, 'options', options, 0), 'shared', 0))) ? J$.M(329, J$.R(313, 'utils', utils, 1), 'isObject', 0)(J$.R(321, 'def', def, 0)) : J$._()) ? J$.B(26, '===', J$.T(337, 0, 22, false), J$.G(369, J$.M(361, J$.R(345, 'Object', Object, 2), 'keys', 0)(J$.R(353, 'def', def, 0)), 'length', 0), 0) : J$._()))) {
                                    J$.X1(441, J$.P(433, J$.R(377, 'options', options, 0), 'default', J$.T(425, function () {
                                        jalangiLabel5020:
                                            while (true) {
                                                try {
                                                    J$.Fe(409, arguments.callee, this, arguments);
                                                    arguments = J$.N(417, 'arguments', arguments, 4);
                                                    return J$.X1(401, J$.Rt(393, J$.T(385, {}, 11, false)));
                                                } catch (J$e) {
                                                    J$.Ex(1105, J$e);
                                                } finally {
                                                    if (J$.Fr(1113))
                                                        continue jalangiLabel5020;
                                                    else
                                                        return J$.Ra();
                                                }
                                            }
                                    }, 12, false, 409), 0));
                                }
                            }
                            J$.X1(497, J$.M(489, J$.R(449, 'SchemaType', SchemaType, 1), 'call', 0)(J$.R(457, 'this', this, 0), J$.R(465, 'path', path, 0), J$.R(473, 'options', options, 0), J$.T(481, 'Mixed', 21, false)));
                        } catch (J$e) {
                            J$.Ex(1145, J$e);
                        } finally {
                            if (J$.Fr(1153))
                                continue jalangiLabel5021;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1057, '__secret__S$', __secret__S$, 0);
            J$.N(1065, '__secret__traits__', __secret__traits__, 0);
            J$.N(1073, 'SchemaType', SchemaType, 0);
            J$.N(1081, 'utils', utils, 0);
            Mixed = J$.N(1097, 'Mixed', J$.T(1089, Mixed, 12, false, 505), 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            var SchemaType = J$.X1(113, J$.W(105, 'SchemaType', J$.F(97, J$.R(81, 'require', require, 2), 0)(J$.T(89, '../schematype', 21, false)), SchemaType, 3));
            var utils = J$.X1(153, J$.W(145, 'utils', J$.F(137, J$.R(121, 'require', require, 2), 0)(J$.T(129, '../utils', 21, false)), utils, 3));
            J$.X1(569, J$.P(561, J$.R(545, 'Mixed', Mixed, 1), 'schemaName', J$.T(553, 'Mixed', 21, false), 0));
            J$.X1(625, J$.P(617, J$.R(577, 'Mixed', Mixed, 1), 'prototype', J$.M(609, J$.R(585, 'Object', Object, 2), 'create', 0)(J$.G(601, J$.R(593, 'SchemaType', SchemaType, 1), 'prototype', 0)), 0));
            J$.X1(665, J$.P(657, J$.G(641, J$.R(633, 'Mixed', Mixed, 1), 'prototype', 0), 'constructor', J$.R(649, 'Mixed', Mixed, 1), 0));
            J$.X1(777, J$.P(769, J$.G(681, J$.R(673, 'Mixed', Mixed, 1), 'prototype', 0), 'checkRequired', J$.T(761, function (val) {
                jalangiLabel5022:
                    while (true) {
                        try {
                            J$.Fe(737, arguments.callee, this, arguments);
                            arguments = J$.N(745, 'arguments', arguments, 4);
                            val = J$.N(753, 'val', val, 4);
                            return J$.X1(729, J$.Rt(721, J$.C(64, J$.B(34, '!==', J$.R(689, 'val', val, 0), J$.T(697, undefined, 24, false), 0)) ? J$.B(42, '!==', J$.R(705, 'val', val, 0), J$.T(713, null, 25, false), 0) : J$._()));
                        } catch (J$e) {
                            J$.Ex(1161, J$e);
                        } finally {
                            if (J$.Fr(1169))
                                continue jalangiLabel5022;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 737), 0));
            J$.X1(865, J$.P(857, J$.G(793, J$.R(785, 'Mixed', Mixed, 1), 'prototype', 0), 'cast', J$.T(849, function (val) {
                jalangiLabel5023:
                    while (true) {
                        try {
                            J$.Fe(825, arguments.callee, this, arguments);
                            arguments = J$.N(833, 'arguments', arguments, 4);
                            val = J$.N(841, 'val', val, 4);
                            return J$.X1(817, J$.Rt(809, J$.R(801, 'val', val, 0)));
                        } catch (J$e) {
                            J$.Ex(1177, J$e);
                        } finally {
                            if (J$.Fr(1185))
                                continue jalangiLabel5023;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 825), 0));
            J$.X1(1009, J$.P(1001, J$.G(881, J$.R(873, 'Mixed', Mixed, 1), 'prototype', 0), 'castForQuery', J$.T(993, function ($cond, val) {
                jalangiLabel5024:
                    while (true) {
                        try {
                            J$.Fe(961, arguments.callee, this, arguments);
                            arguments = J$.N(969, 'arguments', arguments, 4);
                            $cond = J$.N(977, '$cond', $cond, 4);
                            val = J$.N(985, 'val', val, 4);
                            if (J$.X1(1193, J$.C(72, J$.B(50, '===', J$.G(897, J$.R(889, 'arguments', arguments, 2), 'length', 0), J$.T(905, 2, 22, false), 0))))
                                return J$.X1(929, J$.Rt(921, J$.R(913, 'val', val, 0)));
                            return J$.X1(953, J$.Rt(945, J$.R(937, '$cond', $cond, 0)));
                        } catch (J$e) {
                            J$.Ex(1201, J$e);
                        } finally {
                            if (J$.Fr(1209))
                                continue jalangiLabel5024;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 961), 0));
            J$.X1(1041, J$.P(1033, J$.R(1017, 'module', module, 2), 'exports', J$.R(1025, 'Mixed', Mixed, 1), 0));
        } catch (J$e) {
            J$.Ex(1217, J$e);
        } finally {
            if (J$.Sr(1225)) {
                J$.L();
                continue jalangiLabel5025;
            } else {
                J$.L();
                break jalangiLabel5025;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
