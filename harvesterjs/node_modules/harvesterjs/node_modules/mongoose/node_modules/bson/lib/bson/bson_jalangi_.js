J$.iids = {"8":[10,68,10,78],"9":[1,20,1,27],"10":[5,15,5,26],"16":[16,68,16,83],"17":[1,28,1,32],"18":[5,15,5,31],"24":[27,15,27,30],"25":[1,20,1,33],"26":[18,12,18,43],"32":[29,21,29,42],"33":[1,20,1,33],"34":[18,12,18,47],"41":[1,20,1,33],"42":[27,15,27,30],"49":[2,26,2,38],"50":[29,21,29,42],"57":[2,26,2,45],"58":[29,44,29,47],"65":[2,26,2,45],"73":[2,26,2,45],"74":[29,44,29,47],"81":[3,20,3,27],"82":[30,39,30,48],"89":[3,28,3,44],"90":[30,34,30,54],"97":[3,20,3,45],"98":[30,20,30,54],"105":[3,20,3,58],"106":[30,62,30,71],"113":[3,74,3,81],"114":[30,57,30,78],"121":[3,82,3,98],"122":[30,20,30,78],"129":[3,74,3,99],"130":[30,86,30,95],"137":[3,74,3,111],"138":[30,81,30,102],"145":[3,119,3,126],"146":[30,20,30,102],"153":[3,127,3,134],"154":[32,19,32,36],"161":[3,119,3,135],"162":[33,17,33,29],"169":[3,144,3,151],"170":[38,23,38,34],"177":[3,152,3,160],"178":[39,23,39,42],"185":[3,144,3,161],"186":[40,23,40,39],"193":[3,144,3,166],"194":[42,19,42,36],"201":[3,177,3,184],"202":[44,39,44,56],"209":[3,185,3,195],"217":[3,177,3,196],"225":[3,177,3,203],"233":[3,217,3,224],"241":[3,225,3,238],"249":[3,217,3,239],"257":[3,217,3,249],"265":[3,262,3,269],"273":[3,270,3,282],"281":[3,262,3,283],"289":[3,262,3,292],"297":[3,307,3,314],"305":[3,315,3,325],"313":[3,307,3,326],"321":[3,307,3,337],"329":[3,348,3,355],"337":[3,356,3,366],"345":[3,348,3,367],"353":[3,348,3,374],"361":[3,383,3,390],"369":[3,391,3,399],"377":[3,383,3,400],"385":[3,383,3,405],"393":[3,416,3,423],"401":[3,424,3,435],"409":[3,416,3,436],"417":[3,416,3,443],"425":[3,454,3,461],"433":[3,462,3,473],"441":[3,454,3,474],"449":[3,454,3,481],"457":[3,491,3,498],"465":[3,499,3,509],"473":[3,491,3,510],"481":[3,491,3,516],"489":[3,527,3,534],"497":[3,535,3,545],"505":[3,527,3,546],"513":[3,527,3,553],"521":[3,20,3,58],"529":[3,20,3,58],"537":[3,74,3,111],"545":[3,74,3,111],"553":[3,119,3,135],"561":[3,119,3,135],"569":[3,144,3,166],"577":[3,144,3,166],"585":[3,177,3,203],"593":[3,177,3,203],"601":[3,217,3,249],"609":[3,217,3,249],"617":[3,262,3,292],"625":[3,262,3,292],"633":[3,307,3,337],"641":[3,307,3,337],"649":[3,348,3,374],"657":[3,348,3,374],"665":[3,383,3,405],"673":[3,383,3,405],"681":[3,416,3,443],"689":[3,416,3,443],"697":[3,454,3,481],"705":[3,454,3,481],"713":[3,491,3,516],"721":[3,491,3,516],"729":[3,527,3,553],"737":[3,527,3,553],"745":[4,19,4,26],"753":[4,27,4,50],"761":[4,19,4,51],"769":[4,66,4,73],"777":[4,74,4,95],"785":[4,66,4,96],"793":[4,120,4,127],"801":[4,128,4,153],"809":[4,120,4,154],"817":[4,19,4,51],"825":[4,19,4,51],"833":[4,66,4,96],"841":[4,66,4,96],"849":[4,120,4,154],"857":[4,120,4,154],"865":[5,15,5,19],"873":[5,22,5,26],"881":[5,29,5,31],"889":[5,15,5,31],"897":[5,15,5,31],"905":[6,18,6,24],"913":[6,25,6,32],"921":[6,14,6,33],"929":[6,14,6,33],"937":[6,14,6,33],"945":[7,12,8,2],"953":[7,12,8,2],"961":[7,12,8,2],"969":[7,12,8,2],"977":[7,12,8,2],"985":[9,1,9,5],"993":[9,1,9,15],"1001":[10,30,10,40],"1009":[10,41,10,47],"1017":[10,49,10,55],"1025":[10,57,10,66],"1033":[10,68,10,73],"1041":[10,77,10,78],"1049":[10,80,10,81],"1057":[10,83,10,101],"1065":[10,103,10,118],"1073":[10,30,10,119],"1081":[10,30,10,119],"1089":[10,30,10,119],"1097":[11,30,11,36],"1105":[11,37,11,55],"1113":[11,26,11,56],"1121":[11,26,11,56],"1129":[11,26,11,56],"1137":[12,5,12,11],"1145":[12,17,12,31],"1153":[12,33,12,34],"1161":[12,36,12,37],"1169":[12,39,12,53],"1177":[12,39,12,60],"1185":[12,5,12,61],"1187":[12,5,12,16],"1193":[12,5,12,62],"1201":[13,12,13,26],"1209":[13,12,13,26],"1217":[13,5,13,27],"1225":[9,28,14,2],"1233":[9,28,14,2],"1241":[9,28,14,2],"1249":[9,28,14,2],"1257":[9,28,14,2],"1265":[9,28,14,2],"1273":[9,28,14,2],"1281":[9,28,14,2],"1289":[9,28,14,2],"1297":[9,28,14,2],"1305":[9,28,14,2],"1313":[9,28,14,2],"1321":[9,1,14,2],"1329":[9,1,14,3],"1337":[15,1,15,5],"1345":[15,1,15,15],"1353":[16,30,16,40],"1361":[16,41,16,47],"1369":[16,49,16,55],"1377":[16,57,16,66],"1385":[16,68,16,78],"1393":[16,82,16,83],"1401":[16,85,16,86],"1409":[16,88,16,106],"1417":[16,108,16,123],"1425":[16,30,16,124],"1433":[16,30,16,124],"1441":[16,30,16,124],"1449":[17,5,17,11],"1457":[17,17,17,28],"1465":[17,30,17,40],"1473":[17,42,17,43],"1481":[17,45,17,63],"1489":[17,5,17,64],"1491":[17,5,17,16],"1497":[17,5,17,65],"1505":[18,12,18,22],"1513":[18,25,18,43],"1521":[18,46,18,47],"1529":[18,12,18,47],"1537":[18,5,18,48],"1545":[15,46,19,2],"1553":[15,46,19,2],"1561":[15,46,19,2],"1569":[15,46,19,2],"1577":[15,46,19,2],"1585":[15,46,19,2],"1593":[15,46,19,2],"1601":[15,46,19,2],"1609":[15,46,19,2],"1617":[15,46,19,2],"1625":[15,1,19,2],"1633":[15,1,19,3],"1641":[20,1,20,5],"1649":[20,1,20,15],"1657":[21,12,21,23],"1665":[21,24,21,28],"1673":[21,30,21,37],"1681":[21,12,21,38],"1689":[21,12,21,38],"1697":[21,5,21,39],"1705":[20,30,22,2],"1713":[20,30,22,2],"1721":[20,30,22,2],"1729":[20,30,22,2],"1737":[20,30,22,2],"1745":[20,1,22,2],"1753":[20,1,22,3],"1761":[23,1,23,5],"1769":[23,1,23,15],"1777":[24,12,24,31],"1785":[24,32,24,38],"1793":[24,40,24,58],"1801":[24,60,24,75],"1809":[24,12,24,76],"1817":[24,12,24,76],"1825":[24,5,24,77],"1833":[23,38,25,2],"1841":[23,38,25,2],"1849":[23,38,25,2],"1857":[23,38,25,2],"1865":[23,38,25,2],"1873":[23,38,25,2],"1881":[23,1,25,2],"1889":[23,1,25,3],"1897":[26,1,26,5],"1905":[26,1,26,15],"1913":[27,15,27,22],"1921":[27,26,27,30],"1929":[27,33,27,40],"1937":[27,43,27,45],"1945":[27,15,27,45],"1953":[27,5,27,46],"1961":[28,17,28,27],"1969":[28,17,28,27],"1977":[28,17,28,27],"1985":[29,18,29,19],"1993":[29,18,29,19],"2001":[29,18,29,19],"2009":[29,21,29,22],"2017":[29,25,29,42],"2033":[29,44,29,45],"2041":[29,44,29,47],"2057":[30,20,30,24],"2065":[30,25,30,30],"2073":[30,20,30,31],"2081":[30,34,30,38],"2089":[30,39,30,44],"2097":[30,47,30,48],"2105":[30,34,30,49],"2113":[30,53,30,54],"2121":[30,57,30,61],"2129":[30,62,30,67],"2137":[30,70,30,71],"2145":[30,57,30,72],"2153":[30,76,30,78],"2161":[30,81,30,85],"2169":[30,86,30,91],"2177":[30,94,30,95],"2185":[30,81,30,96],"2193":[30,100,30,102],"2201":[30,20,30,102],"2209":[30,20,30,102],"2217":[31,9,31,16],"2225":[31,17,31,24],"2233":[31,28,31,33],"2241":[31,9,31,33],"2249":[31,9,31,34],"2257":[32,9,32,18],"2265":[32,19,32,32],"2273":[32,35,32,36],"2281":[32,40,32,44],"2289":[32,57,32,61],"2297":[32,63,32,70],"2305":[32,40,32,71],"2307":[32,40,32,56],"2313":[32,9,32,71],"2321":[32,9,32,72],"2329":[33,17,33,22],"2337":[33,25,33,29],"2345":[33,17,33,29],"2353":[33,9,33,30],"2361":[35,12,35,17],"2369":[35,12,35,17],"2377":[35,5,35,18],"2385":[26,36,36,2],"2393":[26,36,36,2],"2401":[26,36,36,2],"2409":[26,36,36,2],"2417":[26,36,36,2],"2425":[26,36,36,2],"2433":[26,36,36,2],"2441":[26,36,36,2],"2449":[26,36,36,2],"2457":[26,36,36,2],"2465":[26,36,36,2],"2473":[26,36,36,2],"2481":[26,1,36,2],"2489":[26,1,36,3],"2497":[37,1,37,5],"2505":[37,23,37,33],"2513":[37,1,37,33],"2521":[37,1,37,34],"2529":[38,1,38,5],"2537":[38,24,38,34],"2545":[38,1,38,34],"2553":[38,1,38,35],"2561":[39,1,39,5],"2569":[39,23,39,27],"2577":[39,32,39,33],"2585":[39,35,39,37],"2593":[39,23,39,38],"2595":[39,23,39,31],"2601":[39,41,39,42],"2609":[39,1,39,42],"2617":[39,1,39,43],"2625":[40,1,40,5],"2633":[40,24,40,28],"2641":[40,33,40,34],"2649":[40,36,40,38],"2657":[40,24,40,39],"2659":[40,24,40,32],"2665":[40,1,40,39],"2673":[40,1,40,40],"2681":[41,1,41,5],"2689":[41,19,41,35],"2697":[41,1,41,35],"2705":[41,1,41,36],"2713":[42,1,42,5],"2721":[42,20,42,36],"2729":[42,1,42,36],"2737":[42,1,42,37],"2745":[43,23,43,27],"2753":[43,39,43,55],"2761":[43,23,43,56],"2763":[43,23,43,38],"2769":[43,23,43,56],"2777":[43,23,43,56],"2785":[44,23,44,27],"2793":[44,40,44,56],"2801":[44,23,44,57],"2803":[44,23,44,38],"2809":[44,23,44,57],"2817":[44,23,44,57],"2825":[45,1,45,5],"2833":[45,25,45,26],"2841":[45,1,45,26],"2849":[45,1,45,27],"2857":[46,1,46,5],"2865":[46,25,46,26],"2873":[46,1,46,26],"2881":[46,1,46,27],"2889":[47,1,47,5],"2897":[47,25,47,26],"2905":[47,1,47,26],"2913":[47,1,47,27],"2921":[48,1,48,5],"2929":[48,24,48,25],"2937":[48,1,48,25],"2945":[48,1,48,26],"2953":[49,1,49,5],"2961":[49,25,49,26],"2969":[49,1,49,26],"2977":[49,1,49,27],"2985":[50,1,50,5],"2993":[50,22,50,23],"3001":[50,1,50,23],"3009":[50,1,50,24],"3017":[51,1,51,5],"3025":[51,26,51,27],"3033":[51,1,51,27],"3041":[51,1,51,28],"3049":[52,1,52,5],"3057":[52,23,52,24],"3065":[52,1,52,24],"3073":[52,1,52,25],"3081":[53,1,53,5],"3089":[53,23,53,25],"3097":[53,1,53,25],"3105":[53,1,53,26],"3113":[54,1,54,5],"3121":[54,25,54,27],"3129":[54,1,54,27],"3137":[54,1,54,28],"3145":[55,1,55,5],"3153":[55,23,55,25],"3161":[55,1,55,25],"3169":[55,1,55,26],"3177":[56,1,56,5],"3185":[56,25,56,27],"3193":[56,1,56,27],"3201":[56,1,56,28],"3209":[57,1,57,5],"3217":[57,31,57,33],"3225":[57,1,57,33],"3233":[57,1,57,34],"3241":[58,1,58,5],"3249":[58,22,58,24],"3257":[58,1,58,24],"3265":[58,1,58,25],"3273":[59,1,59,5],"3281":[59,28,59,30],"3289":[59,1,59,30],"3297":[59,1,59,31],"3305":[60,1,60,5],"3313":[60,23,60,25],"3321":[60,1,60,25],"3329":[60,1,60,26],"3337":[61,1,61,5],"3345":[61,26,61,29],"3353":[61,1,61,29],"3361":[61,1,61,30],"3369":[62,1,62,5],"3377":[62,26,62,29],"3385":[62,1,62,29],"3393":[62,1,62,30],"3401":[63,1,63,5],"3409":[63,36,63,37],"3417":[63,1,63,37],"3425":[63,1,63,38],"3433":[64,1,64,5],"3441":[64,37,64,38],"3449":[64,1,64,38],"3457":[64,1,64,39],"3465":[65,1,65,5],"3473":[65,39,65,40],"3481":[65,1,65,40],"3489":[65,1,65,41],"3497":[66,1,66,5],"3505":[66,33,66,34],"3513":[66,1,66,34],"3521":[66,1,66,35],"3529":[67,1,67,5],"3537":[67,32,67,33],"3545":[67,1,67,33],"3553":[67,1,67,34],"3561":[68,1,68,5],"3569":[68,41,68,44],"3577":[68,1,68,44],"3585":[68,1,68,45],"3593":[69,1,69,7],"3601":[69,18,69,22],"3609":[69,1,69,22],"3617":[69,1,69,23],"3625":[70,1,70,7],"3633":[70,1,70,15],"3641":[70,23,70,27],"3649":[70,1,70,27],"3657":[70,1,70,28],"3665":[71,1,71,7],"3673":[71,1,71,15],"3681":[71,22,71,25],"3689":[71,1,71,25],"3697":[71,1,71,26],"3705":[72,1,72,7],"3713":[72,1,72,15],"3721":[72,25,72,31],"3729":[72,1,72,31],"3737":[72,1,72,32],"3745":[73,1,73,7],"3753":[73,1,73,15],"3761":[73,23,73,27],"3769":[73,1,73,27],"3777":[73,1,73,28],"3785":[74,1,74,7],"3793":[74,1,74,15],"3801":[74,24,74,29],"3809":[74,1,74,29],"3817":[74,1,74,30],"3825":[75,1,75,7],"3833":[75,1,75,15],"3841":[75,25,75,31],"3849":[75,1,75,31],"3857":[75,1,75,32],"3865":[76,1,76,7],"3873":[76,1,76,15],"3881":[76,27,76,35],"3889":[76,1,76,35],"3897":[76,1,76,36],"3905":[77,1,77,7],"3913":[77,1,77,15],"3921":[77,23,77,27],"3929":[77,1,77,27],"3937":[77,1,77,28],"3945":[78,1,78,7],"3953":[78,1,78,15],"3961":[78,28,78,37],"3969":[78,1,78,37],"3977":[78,1,78,38],"3985":[79,1,79,7],"3993":[79,1,79,15],"4001":[79,25,79,31],"4009":[79,1,79,31],"4017":[79,1,79,32],"4025":[80,1,80,7],"4033":[80,1,80,15],"4041":[80,25,80,31],"4049":[80,1,80,31],"4057":[80,1,80,32],"4065":[81,1,81,7],"4073":[81,1,81,15],"4081":[81,25,81,31],"4089":[81,1,81,31],"4097":[81,1,81,32],"4105":[82,1,82,7],"4113":[82,1,82,15],"4121":[82,29,82,39],"4129":[82,1,82,39],"4137":[82,1,82,40],"4145":[1,1,82,40],"4153":[1,1,82,40],"4161":[1,1,82,40],"4169":[1,1,82,40],"4177":[1,1,82,40],"4185":[1,1,82,40],"4193":[1,1,82,40],"4201":[1,1,82,40],"4209":[1,1,82,40],"4217":[1,1,82,40],"4225":[1,1,82,40],"4233":[1,1,82,40],"4241":[1,1,82,40],"4249":[1,1,82,40],"4257":[1,1,82,40],"4265":[1,1,82,40],"4273":[1,1,82,40],"4281":[1,1,82,40],"4289":[1,1,82,40],"4297":[1,1,82,40],"4305":[1,1,82,40],"4313":[1,1,82,40],"4321":[1,1,82,40],"4329":[1,1,82,40],"4337":[1,1,82,40],"4345":[7,12,8,2],"4353":[7,12,8,2],"4361":[9,28,14,2],"4369":[9,28,14,2],"4377":[15,46,19,2],"4385":[15,46,19,2],"4393":[20,30,22,2],"4401":[20,30,22,2],"4409":[23,38,25,2],"4417":[23,38,25,2],"4425":[27,15,27,45],"4433":[29,5,34,6],"4441":[29,5,34,6],"4449":[26,36,36,2],"4457":[26,36,36,2],"4465":[1,1,82,40],"4473":[1,1,82,40],"nBranches":8,"originalCodeFileName":"/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/node_modules/bson/lib/bson/bson.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/node_modules/bson/lib/bson/bson_jalangi_.js","code":"// \"use strict\"\n\nvar writeIEEE754 = require('./float_parser').writeIEEE754,\n\treadIEEE754 = require('./float_parser').readIEEE754,\n  Map = require('./map'),\n\tLong = require('./long').Long,\n  Double = require('./double').Double,\n  Timestamp = require('./timestamp').Timestamp,\n  ObjectID = require('./objectid').ObjectID,\n  BSONRegExp = require('./regexp').BSONRegExp,\n  Symbol = require('./symbol').Symbol,\n  Code = require('./code').Code,\n  MinKey = require('./min_key').MinKey,\n  MaxKey = require('./max_key').MaxKey,\n  DBRef = require('./db_ref').DBRef,\n  Binary = require('./binary').Binary;\n\n// Parts of the parser\nvar deserialize = require('./parser/deserializer'),\n\tserializer = require('./parser/serializer'),\n\tcalculateObjectSize = require('./parser/calculate_size');\n\n/**\n * @ignore\n * @api private\n */\n// Max Size\nvar MAXSIZE = (1024*1024*17);\n// Max Document Buffer size\nvar buffer = new Buffer(MAXSIZE);\n\nvar BSON = function() {\n}\n\n/**\n * Serialize a Javascript object.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} checkKeys the serializer will check if keys are valid.\n * @param {Boolean} asBuffer return the serialized object as a Buffer object **(ignore)**.\n * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.\n * @return {Buffer} returns the Buffer object containing the serialized object.\n * @api public\n */\nBSON.prototype.serialize = function serialize(object, checkKeys, asBuffer, serializeFunctions, index, ignoreUndefined) {\n\t// Attempt to serialize\n\tvar serializationIndex = serializer(buffer, object, checkKeys, index || 0, 0, serializeFunctions, ignoreUndefined);\n\t// Create the final buffer\n\tvar finishedBuffer = new Buffer(serializationIndex);\n\t// Copy into the finished buffer\n\tbuffer.copy(finishedBuffer, 0, 0, finishedBuffer.length);\n\t// Return the buffer\n\treturn finishedBuffer;\n}\n\n/**\n * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} checkKeys the serializer will check if keys are valid.\n * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.\n * @param {Number} index the index in the buffer where we wish to start serializing into.\n * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.\n * @return {Number} returns the new write index in the Buffer.\n * @api public\n */\nBSON.prototype.serializeWithBufferAndIndex = function(object, checkKeys, finalBuffer, startIndex, serializeFunctions, ignoreUndefined) {\n\t// Attempt to serialize\n\tvar serializationIndex = serializer(buffer, object, checkKeys, startIndex || 0, 0, serializeFunctions, ignoreUndefined);\n\tbuffer.copy(finalBuffer, startIndex, 0, serializationIndex);\n\t// Return the index\n\treturn startIndex + serializationIndex - 1;\n}\n\n/**\n * Deserialize data as BSON.\n *\n * Options\n *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.\n *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.\n *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.\n *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n *\n * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @param {Boolean} [isArray] ignore used for recursive parsing.\n * @return {Object} returns the deserialized Javascript Object.\n * @api public\n */\nBSON.prototype.deserialize = function(data, options) {\n  return deserialize(data, options);\n}\n\n/**\n * Calculate the bson size for a passed in Javascript object.\n *\n * @param {Object} object the Javascript object to calculate the BSON byte size for.\n * @param {Boolean} [serializeFunctions] serialize all functions in the object **(default:false)**.\n * @return {Number} returns the number of bytes the BSON object will take up.\n * @api public\n */\nBSON.prototype.calculateObjectSize = function(object, serializeFunctions, ignoreUndefined) {\n  return calculateObjectSize(object, serializeFunctions, ignoreUndefined);\n}\n\n/**\n * Deserialize stream data as BSON documents.\n *\n * Options\n *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.\n *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.\n *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.\n *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n *\n * @param {Buffer} data the buffer containing the serialized set of BSON documents.\n * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.\n * @param {Number} numberOfDocuments number of documents to deserialize.\n * @param {Array} documents an array where to store the deserialized documents.\n * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.\n * @api public\n */\nBSON.prototype.deserializeStream = function(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {\n  // if(numberOfDocuments !== documents.length) throw new Error(\"Number of expected results back is less than the number of documents\");\n  options = options != null ? options : {};\n  var index = startIndex;\n  // Loop over all documents\n  for(var i = 0; i < numberOfDocuments; i++) {\n    // Find size of the document\n    var size = data[index] | data[index + 1] << 8 | data[index + 2] << 16 | data[index + 3] << 24;\n    // Update options with index\n    options['index'] = index;\n    // Parse the document at this point\n    documents[docStartIndex + i] = this.deserialize(data, options);\n    // Adjust index by the document size\n    index = index + size;\n  }\n\n  // Return object containing end index of parsing and list of documents\n  return index;\n}\n\n/**\n * @ignore\n * @api private\n */\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7FFFFFFF;\nBSON.BSON_INT32_MIN = -0x80000000;\n\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000;  // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000;  // Any integer down to -2^53 can be precisely represented by a double.\n\n// Internal long versions\nvar JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000);  // Any integer up to 2^53 can be precisely represented by a double.\nvar JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000);  // Any integer down to -2^53 can be precisely represented by a double.\n\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\nBSON.BSON_DATA_BINARY = 5;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\nBSON.BSON_DATA_LONG = 18;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\n\n// Return BSON\nmodule.exports = BSON;\nmodule.exports.Code = Code;\nmodule.exports.Map = Map;\nmodule.exports.Symbol = Symbol;\nmodule.exports.BSON = BSON;\nmodule.exports.DBRef = DBRef;\nmodule.exports.Binary = Binary;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.Long = Long;\nmodule.exports.Timestamp = Timestamp;\nmodule.exports.Double = Double;\nmodule.exports.MinKey = MinKey;\nmodule.exports.MaxKey = MaxKey;\nmodule.exports.BSONRegExp = BSONRegExp;\n"};
jalangiLabel2793:
    while (true) {
        try {
            J$.Se(4145, '/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/node_modules/bson/lib/bson/bson_jalangi_.js', '/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/node_modules/bson/lib/bson/bson.js');
            J$.N(4153, '__secret__S$', __secret__S$, 0);
            J$.N(4161, '__secret__traits__', __secret__traits__, 0);
            J$.N(4169, 'writeIEEE754', writeIEEE754, 0);
            J$.N(4177, 'readIEEE754', readIEEE754, 0);
            J$.N(4185, 'Map', Map, 0);
            J$.N(4193, 'Long', Long, 0);
            J$.N(4201, 'Double', Double, 0);
            J$.N(4209, 'Timestamp', Timestamp, 0);
            J$.N(4217, 'ObjectID', ObjectID, 0);
            J$.N(4225, 'BSONRegExp', BSONRegExp, 0);
            J$.N(4233, 'Symbol', Symbol, 0);
            J$.N(4241, 'Code', Code, 0);
            J$.N(4249, 'MinKey', MinKey, 0);
            J$.N(4257, 'MaxKey', MaxKey, 0);
            J$.N(4265, 'DBRef', DBRef, 0);
            J$.N(4273, 'Binary', Binary, 0);
            J$.N(4281, 'deserialize', deserialize, 0);
            J$.N(4289, 'serializer', serializer, 0);
            J$.N(4297, 'calculateObjectSize', calculateObjectSize, 0);
            J$.N(4305, 'MAXSIZE', MAXSIZE, 0);
            J$.N(4313, 'buffer', buffer, 0);
            J$.N(4321, 'BSON', BSON, 0);
            J$.N(4329, 'JS_INT_MAX_LONG', JS_INT_MAX_LONG, 0);
            J$.N(4337, 'JS_INT_MIN_LONG', JS_INT_MIN_LONG, 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            var writeIEEE754 = J$.X1(529, J$.W(521, 'writeIEEE754', J$.G(105, J$.F(97, J$.R(81, 'require', require, 2), 0)(J$.T(89, './float_parser', 21, false)), 'writeIEEE754', 0), writeIEEE754, 3)), readIEEE754 = J$.X1(545, J$.W(537, 'readIEEE754', J$.G(137, J$.F(129, J$.R(113, 'require', require, 2), 0)(J$.T(121, './float_parser', 21, false)), 'readIEEE754', 0), readIEEE754, 3)), Map = J$.X1(561, J$.W(553, 'Map', J$.F(161, J$.R(145, 'require', require, 2), 0)(J$.T(153, './map', 21, false)), Map, 3)), Long = J$.X1(577, J$.W(569, 'Long', J$.G(193, J$.F(185, J$.R(169, 'require', require, 2), 0)(J$.T(177, './long', 21, false)), 'Long', 0), Long, 3)), Double = J$.X1(593, J$.W(585, 'Double', J$.G(225, J$.F(217, J$.R(201, 'require', require, 2), 0)(J$.T(209, './double', 21, false)), 'Double', 0), Double, 3)), Timestamp = J$.X1(609, J$.W(601, 'Timestamp', J$.G(257, J$.F(249, J$.R(233, 'require', require, 2), 0)(J$.T(241, './timestamp', 21, false)), 'Timestamp', 0), Timestamp, 3)), ObjectID = J$.X1(625, J$.W(617, 'ObjectID', J$.G(289, J$.F(281, J$.R(265, 'require', require, 2), 0)(J$.T(273, './objectid', 21, false)), 'ObjectID', 0), ObjectID, 3)), BSONRegExp = J$.X1(641, J$.W(633, 'BSONRegExp', J$.G(321, J$.F(313, J$.R(297, 'require', require, 2), 0)(J$.T(305, './regexp', 21, false)), 'BSONRegExp', 0), BSONRegExp, 3)), Symbol = J$.X1(657, J$.W(649, 'Symbol', J$.G(353, J$.F(345, J$.R(329, 'require', require, 2), 0)(J$.T(337, './symbol', 21, false)), 'Symbol', 0), Symbol, 3)), Code = J$.X1(673, J$.W(665, 'Code', J$.G(385, J$.F(377, J$.R(361, 'require', require, 2), 0)(J$.T(369, './code', 21, false)), 'Code', 0), Code, 3)), MinKey = J$.X1(689, J$.W(681, 'MinKey', J$.G(417, J$.F(409, J$.R(393, 'require', require, 2), 0)(J$.T(401, './min_key', 21, false)), 'MinKey', 0), MinKey, 3)), MaxKey = J$.X1(705, J$.W(697, 'MaxKey', J$.G(449, J$.F(441, J$.R(425, 'require', require, 2), 0)(J$.T(433, './max_key', 21, false)), 'MaxKey', 0), MaxKey, 3)), DBRef = J$.X1(721, J$.W(713, 'DBRef', J$.G(481, J$.F(473, J$.R(457, 'require', require, 2), 0)(J$.T(465, './db_ref', 21, false)), 'DBRef', 0), DBRef, 3)), Binary = J$.X1(737, J$.W(729, 'Binary', J$.G(513, J$.F(505, J$.R(489, 'require', require, 2), 0)(J$.T(497, './binary', 21, false)), 'Binary', 0), Binary, 3));
            var deserialize = J$.X1(825, J$.W(817, 'deserialize', J$.F(761, J$.R(745, 'require', require, 2), 0)(J$.T(753, './parser/deserializer', 21, false)), deserialize, 3)), serializer = J$.X1(841, J$.W(833, 'serializer', J$.F(785, J$.R(769, 'require', require, 2), 0)(J$.T(777, './parser/serializer', 21, false)), serializer, 3)), calculateObjectSize = J$.X1(857, J$.W(849, 'calculateObjectSize', J$.F(809, J$.R(793, 'require', require, 2), 0)(J$.T(801, './parser/calculate_size', 21, false)), calculateObjectSize, 3));
            var MAXSIZE = J$.X1(897, J$.W(889, 'MAXSIZE', J$.B(18, '*', J$.B(10, '*', J$.T(865, 1024, 22, false), J$.T(873, 1024, 22, false), 0), J$.T(881, 17, 22, false), 0), MAXSIZE, 3));
            var buffer = J$.X1(937, J$.W(929, 'buffer', J$.F(921, J$.R(905, 'Buffer', Buffer, 2), 1)(J$.R(913, 'MAXSIZE', MAXSIZE, 1)), buffer, 3));
            var BSON = J$.X1(977, J$.W(969, 'BSON', J$.T(961, function () {
                jalangiLabel2787:
                    while (true) {
                        try {
                            J$.Fe(945, arguments.callee, this, arguments);
                            arguments = J$.N(953, 'arguments', arguments, 4);
                        } catch (J$e) {
                            J$.Ex(4345, J$e);
                        } finally {
                            if (J$.Fr(4353))
                                continue jalangiLabel2787;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 945), BSON, 3));
            J$.X1(1329, J$.P(1321, J$.G(993, J$.R(985, 'BSON', BSON, 1), 'prototype', 0), 'serialize', J$.T(1313, function serialize(object, checkKeys, asBuffer, serializeFunctions, index, ignoreUndefined) {
                jalangiLabel2788:
                    while (true) {
                        try {
                            J$.Fe(1225, arguments.callee, this, arguments);
                            arguments = J$.N(1233, 'arguments', arguments, 4);
                            serialize = J$.N(1241, 'serialize', serialize, 0);
                            object = J$.N(1249, 'object', object, 4);
                            checkKeys = J$.N(1257, 'checkKeys', checkKeys, 4);
                            asBuffer = J$.N(1265, 'asBuffer', asBuffer, 4);
                            serializeFunctions = J$.N(1273, 'serializeFunctions', serializeFunctions, 4);
                            index = J$.N(1281, 'index', index, 4);
                            ignoreUndefined = J$.N(1289, 'ignoreUndefined', ignoreUndefined, 4);
                            J$.N(1297, 'serializationIndex', serializationIndex, 0);
                            J$.N(1305, 'finishedBuffer', finishedBuffer, 0);
                            var serializationIndex = J$.X1(1089, J$.W(1081, 'serializationIndex', J$.F(1073, J$.R(1001, 'serializer', serializer, 1), 0)(J$.R(1009, 'buffer', buffer, 1), J$.R(1017, 'object', object, 0), J$.R(1025, 'checkKeys', checkKeys, 0), J$.C(8, J$.R(1033, 'index', index, 0)) ? J$._() : J$.T(1041, 0, 22, false), J$.T(1049, 0, 22, false), J$.R(1057, 'serializeFunctions', serializeFunctions, 0), J$.R(1065, 'ignoreUndefined', ignoreUndefined, 0)), serializationIndex, 1));
                            var finishedBuffer = J$.X1(1129, J$.W(1121, 'finishedBuffer', J$.F(1113, J$.R(1097, 'Buffer', Buffer, 2), 1)(J$.R(1105, 'serializationIndex', serializationIndex, 0)), finishedBuffer, 1));
                            J$.X1(1193, J$.M(1185, J$.R(1137, 'buffer', buffer, 1), 'copy', 0)(J$.R(1145, 'finishedBuffer', finishedBuffer, 0), J$.T(1153, 0, 22, false), J$.T(1161, 0, 22, false), J$.G(1177, J$.R(1169, 'finishedBuffer', finishedBuffer, 0), 'length', 0)));
                            return J$.X1(1217, J$.Rt(1209, J$.R(1201, 'finishedBuffer', finishedBuffer, 0)));
                        } catch (J$e) {
                            J$.Ex(4361, J$e);
                        } finally {
                            if (J$.Fr(4369))
                                continue jalangiLabel2788;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1225), 0));
            J$.X1(1633, J$.P(1625, J$.G(1345, J$.R(1337, 'BSON', BSON, 1), 'prototype', 0), 'serializeWithBufferAndIndex', J$.T(1617, function (object, checkKeys, finalBuffer, startIndex, serializeFunctions, ignoreUndefined) {
                jalangiLabel2789:
                    while (true) {
                        try {
                            J$.Fe(1545, arguments.callee, this, arguments);
                            arguments = J$.N(1553, 'arguments', arguments, 4);
                            object = J$.N(1561, 'object', object, 4);
                            checkKeys = J$.N(1569, 'checkKeys', checkKeys, 4);
                            finalBuffer = J$.N(1577, 'finalBuffer', finalBuffer, 4);
                            startIndex = J$.N(1585, 'startIndex', startIndex, 4);
                            serializeFunctions = J$.N(1593, 'serializeFunctions', serializeFunctions, 4);
                            ignoreUndefined = J$.N(1601, 'ignoreUndefined', ignoreUndefined, 4);
                            J$.N(1609, 'serializationIndex', serializationIndex, 0);
                            var serializationIndex = J$.X1(1441, J$.W(1433, 'serializationIndex', J$.F(1425, J$.R(1353, 'serializer', serializer, 1), 0)(J$.R(1361, 'buffer', buffer, 1), J$.R(1369, 'object', object, 0), J$.R(1377, 'checkKeys', checkKeys, 0), J$.C(16, J$.R(1385, 'startIndex', startIndex, 0)) ? J$._() : J$.T(1393, 0, 22, false), J$.T(1401, 0, 22, false), J$.R(1409, 'serializeFunctions', serializeFunctions, 0), J$.R(1417, 'ignoreUndefined', ignoreUndefined, 0)), serializationIndex, 1));
                            J$.X1(1497, J$.M(1489, J$.R(1449, 'buffer', buffer, 1), 'copy', 0)(J$.R(1457, 'finalBuffer', finalBuffer, 0), J$.R(1465, 'startIndex', startIndex, 0), J$.T(1473, 0, 22, false), J$.R(1481, 'serializationIndex', serializationIndex, 0)));
                            return J$.X1(1537, J$.Rt(1529, J$.B(34, '-', J$.B(26, '+', J$.R(1505, 'startIndex', startIndex, 0), J$.R(1513, 'serializationIndex', serializationIndex, 0), 0), J$.T(1521, 1, 22, false), 0)));
                        } catch (J$e) {
                            J$.Ex(4377, J$e);
                        } finally {
                            if (J$.Fr(4385))
                                continue jalangiLabel2789;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1545), 0));
            J$.X1(1753, J$.P(1745, J$.G(1649, J$.R(1641, 'BSON', BSON, 1), 'prototype', 0), 'deserialize', J$.T(1737, function (data, options) {
                jalangiLabel2790:
                    while (true) {
                        try {
                            J$.Fe(1705, arguments.callee, this, arguments);
                            arguments = J$.N(1713, 'arguments', arguments, 4);
                            data = J$.N(1721, 'data', data, 4);
                            options = J$.N(1729, 'options', options, 4);
                            return J$.X1(1697, J$.Rt(1689, J$.F(1681, J$.R(1657, 'deserialize', deserialize, 1), 0)(J$.R(1665, 'data', data, 0), J$.R(1673, 'options', options, 0))));
                        } catch (J$e) {
                            J$.Ex(4393, J$e);
                        } finally {
                            if (J$.Fr(4401))
                                continue jalangiLabel2790;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1705), 0));
            J$.X1(1889, J$.P(1881, J$.G(1769, J$.R(1761, 'BSON', BSON, 1), 'prototype', 0), 'calculateObjectSize', J$.T(1873, function (object, serializeFunctions, ignoreUndefined) {
                jalangiLabel2791:
                    while (true) {
                        try {
                            J$.Fe(1833, arguments.callee, this, arguments);
                            arguments = J$.N(1841, 'arguments', arguments, 4);
                            object = J$.N(1849, 'object', object, 4);
                            serializeFunctions = J$.N(1857, 'serializeFunctions', serializeFunctions, 4);
                            ignoreUndefined = J$.N(1865, 'ignoreUndefined', ignoreUndefined, 4);
                            return J$.X1(1825, J$.Rt(1817, J$.F(1809, J$.R(1777, 'calculateObjectSize', calculateObjectSize, 1), 0)(J$.R(1785, 'object', object, 0), J$.R(1793, 'serializeFunctions', serializeFunctions, 0), J$.R(1801, 'ignoreUndefined', ignoreUndefined, 0))));
                        } catch (J$e) {
                            J$.Ex(4409, J$e);
                        } finally {
                            if (J$.Fr(4417))
                                continue jalangiLabel2791;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1833), 0));
            J$.X1(2489, J$.P(2481, J$.G(1905, J$.R(1897, 'BSON', BSON, 1), 'prototype', 0), 'deserializeStream', J$.T(2473, function (data, startIndex, numberOfDocuments, documents, docStartIndex, options) {
                jalangiLabel2792:
                    while (true) {
                        try {
                            J$.Fe(2385, arguments.callee, this, arguments);
                            arguments = J$.N(2393, 'arguments', arguments, 4);
                            data = J$.N(2401, 'data', data, 4);
                            startIndex = J$.N(2409, 'startIndex', startIndex, 4);
                            numberOfDocuments = J$.N(2417, 'numberOfDocuments', numberOfDocuments, 4);
                            documents = J$.N(2425, 'documents', documents, 4);
                            docStartIndex = J$.N(2433, 'docStartIndex', docStartIndex, 4);
                            options = J$.N(2441, 'options', options, 4);
                            J$.N(2449, 'index', index, 0);
                            J$.N(2457, 'i', i, 0);
                            J$.N(2465, 'size', size, 0);
                            J$.X1(1953, options = J$.W(1945, 'options', J$.X1(4425, J$.C(24, J$.B(42, '!=', J$.R(1913, 'options', options, 0), J$.T(1921, null, 25, false), 0))) ? J$.R(1929, 'options', options, 0) : J$.T(1937, {}, 11, false), options, 0));
                            var index = J$.X1(1977, J$.W(1969, 'index', J$.R(1961, 'startIndex', startIndex, 0), index, 1));
                            for (var i = J$.X1(2001, J$.W(1993, 'i', J$.T(1985, 0, 22, false), i, 1)); J$.X1(4433, J$.C(32, J$.B(50, '<', J$.R(2009, 'i', i, 0), J$.R(2017, 'numberOfDocuments', numberOfDocuments, 0), 0))); J$.X1(4441, J$.B(74, '-', i = J$.W(2041, 'i', J$.B(66, '+', J$.U(58, '+', J$.R(2033, 'i', i, 0)), J$.T(2025, 1, 22, false), 0), i, 0), J$.T(2049, 1, 22, false), 0))) {
                                var size = J$.X1(2209, J$.W(2201, 'size', J$.B(146, '|', J$.B(122, '|', J$.B(98, '|', J$.G(2073, J$.R(2057, 'data', data, 0), J$.R(2065, 'index', index, 0), 4), J$.B(90, '<<', J$.G(2105, J$.R(2081, 'data', data, 0), J$.B(82, '+', J$.R(2089, 'index', index, 0), J$.T(2097, 1, 22, false), 0), 4), J$.T(2113, 8, 22, false), 0), 0), J$.B(114, '<<', J$.G(2145, J$.R(2121, 'data', data, 0), J$.B(106, '+', J$.R(2129, 'index', index, 0), J$.T(2137, 2, 22, false), 0), 4), J$.T(2153, 16, 22, false), 0), 0), J$.B(138, '<<', J$.G(2185, J$.R(2161, 'data', data, 0), J$.B(130, '+', J$.R(2169, 'index', index, 0), J$.T(2177, 3, 22, false), 0), 4), J$.T(2193, 24, 22, false), 0), 0), size, 1));
                                J$.X1(2249, J$.P(2241, J$.R(2217, 'options', options, 0), J$.T(2225, 'index', 21, false), J$.R(2233, 'index', index, 0), 2));
                                J$.X1(2321, J$.P(2313, J$.R(2257, 'documents', documents, 0), J$.B(154, '+', J$.R(2265, 'docStartIndex', docStartIndex, 0), J$.R(2273, 'i', i, 0), 0), J$.M(2305, J$.R(2281, 'this', this, 0), 'deserialize', 0)(J$.R(2289, 'data', data, 0), J$.R(2297, 'options', options, 0)), 2));
                                J$.X1(2353, index = J$.W(2345, 'index', J$.B(162, '+', J$.R(2329, 'index', index, 0), J$.R(2337, 'size', size, 0), 0), index, 0));
                            }
                            return J$.X1(2377, J$.Rt(2369, J$.R(2361, 'index', index, 0)));
                        } catch (J$e) {
                            J$.Ex(4449, J$e);
                        } finally {
                            if (J$.Fr(4457))
                                continue jalangiLabel2792;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 2385), 0));
            J$.X1(2521, J$.P(2513, J$.R(2497, 'BSON', BSON, 1), 'BSON_INT32_MAX', J$.T(2505, 2147483647, 22, false), 0));
            J$.X1(2553, J$.P(2545, J$.R(2529, 'BSON', BSON, 1), 'BSON_INT32_MIN', J$.U(170, '-', J$.T(2537, 2147483648, 22, false)), 0));
            J$.X1(2617, J$.P(2609, J$.R(2561, 'BSON', BSON, 1), 'BSON_INT64_MAX', J$.B(178, '-', J$.M(2593, J$.R(2569, 'Math', Math, 2), 'pow', 0)(J$.T(2577, 2, 22, false), J$.T(2585, 63, 22, false)), J$.T(2601, 1, 22, false), 0), 0));
            J$.X1(2673, J$.P(2665, J$.R(2625, 'BSON', BSON, 1), 'BSON_INT64_MIN', J$.U(186, '-', J$.M(2657, J$.R(2633, 'Math', Math, 2), 'pow', 0)(J$.T(2641, 2, 22, false), J$.T(2649, 63, 22, false))), 0));
            J$.X1(2705, J$.P(2697, J$.R(2681, 'BSON', BSON, 1), 'JS_INT_MAX', J$.T(2689, 9007199254740992, 22, false), 0));
            J$.X1(2737, J$.P(2729, J$.R(2713, 'BSON', BSON, 1), 'JS_INT_MIN', J$.U(194, '-', J$.T(2721, 9007199254740992, 22, false)), 0));
            var JS_INT_MAX_LONG = J$.X1(2777, J$.W(2769, 'JS_INT_MAX_LONG', J$.M(2761, J$.R(2745, 'Long', Long, 1), 'fromNumber', 0)(J$.T(2753, 9007199254740992, 22, false)), JS_INT_MAX_LONG, 3));
            var JS_INT_MIN_LONG = J$.X1(2817, J$.W(2809, 'JS_INT_MIN_LONG', J$.M(2801, J$.R(2785, 'Long', Long, 1), 'fromNumber', 0)(J$.U(202, '-', J$.T(2793, 9007199254740992, 22, false))), JS_INT_MIN_LONG, 3));
            J$.X1(2849, J$.P(2841, J$.R(2825, 'BSON', BSON, 1), 'BSON_DATA_NUMBER', J$.T(2833, 1, 22, false), 0));
            J$.X1(2881, J$.P(2873, J$.R(2857, 'BSON', BSON, 1), 'BSON_DATA_STRING', J$.T(2865, 2, 22, false), 0));
            J$.X1(2913, J$.P(2905, J$.R(2889, 'BSON', BSON, 1), 'BSON_DATA_OBJECT', J$.T(2897, 3, 22, false), 0));
            J$.X1(2945, J$.P(2937, J$.R(2921, 'BSON', BSON, 1), 'BSON_DATA_ARRAY', J$.T(2929, 4, 22, false), 0));
            J$.X1(2977, J$.P(2969, J$.R(2953, 'BSON', BSON, 1), 'BSON_DATA_BINARY', J$.T(2961, 5, 22, false), 0));
            J$.X1(3009, J$.P(3001, J$.R(2985, 'BSON', BSON, 1), 'BSON_DATA_OID', J$.T(2993, 7, 22, false), 0));
            J$.X1(3041, J$.P(3033, J$.R(3017, 'BSON', BSON, 1), 'BSON_DATA_BOOLEAN', J$.T(3025, 8, 22, false), 0));
            J$.X1(3073, J$.P(3065, J$.R(3049, 'BSON', BSON, 1), 'BSON_DATA_DATE', J$.T(3057, 9, 22, false), 0));
            J$.X1(3105, J$.P(3097, J$.R(3081, 'BSON', BSON, 1), 'BSON_DATA_NULL', J$.T(3089, 10, 22, false), 0));
            J$.X1(3137, J$.P(3129, J$.R(3113, 'BSON', BSON, 1), 'BSON_DATA_REGEXP', J$.T(3121, 11, 22, false), 0));
            J$.X1(3169, J$.P(3161, J$.R(3145, 'BSON', BSON, 1), 'BSON_DATA_CODE', J$.T(3153, 13, 22, false), 0));
            J$.X1(3201, J$.P(3193, J$.R(3177, 'BSON', BSON, 1), 'BSON_DATA_SYMBOL', J$.T(3185, 14, 22, false), 0));
            J$.X1(3233, J$.P(3225, J$.R(3209, 'BSON', BSON, 1), 'BSON_DATA_CODE_W_SCOPE', J$.T(3217, 15, 22, false), 0));
            J$.X1(3265, J$.P(3257, J$.R(3241, 'BSON', BSON, 1), 'BSON_DATA_INT', J$.T(3249, 16, 22, false), 0));
            J$.X1(3297, J$.P(3289, J$.R(3273, 'BSON', BSON, 1), 'BSON_DATA_TIMESTAMP', J$.T(3281, 17, 22, false), 0));
            J$.X1(3329, J$.P(3321, J$.R(3305, 'BSON', BSON, 1), 'BSON_DATA_LONG', J$.T(3313, 18, 22, false), 0));
            J$.X1(3361, J$.P(3353, J$.R(3337, 'BSON', BSON, 1), 'BSON_DATA_MIN_KEY', J$.T(3345, 255, 22, false), 0));
            J$.X1(3393, J$.P(3385, J$.R(3369, 'BSON', BSON, 1), 'BSON_DATA_MAX_KEY', J$.T(3377, 127, 22, false), 0));
            J$.X1(3425, J$.P(3417, J$.R(3401, 'BSON', BSON, 1), 'BSON_BINARY_SUBTYPE_DEFAULT', J$.T(3409, 0, 22, false), 0));
            J$.X1(3457, J$.P(3449, J$.R(3433, 'BSON', BSON, 1), 'BSON_BINARY_SUBTYPE_FUNCTION', J$.T(3441, 1, 22, false), 0));
            J$.X1(3489, J$.P(3481, J$.R(3465, 'BSON', BSON, 1), 'BSON_BINARY_SUBTYPE_BYTE_ARRAY', J$.T(3473, 2, 22, false), 0));
            J$.X1(3521, J$.P(3513, J$.R(3497, 'BSON', BSON, 1), 'BSON_BINARY_SUBTYPE_UUID', J$.T(3505, 3, 22, false), 0));
            J$.X1(3553, J$.P(3545, J$.R(3529, 'BSON', BSON, 1), 'BSON_BINARY_SUBTYPE_MD5', J$.T(3537, 4, 22, false), 0));
            J$.X1(3585, J$.P(3577, J$.R(3561, 'BSON', BSON, 1), 'BSON_BINARY_SUBTYPE_USER_DEFINED', J$.T(3569, 128, 22, false), 0));
            J$.X1(3617, J$.P(3609, J$.R(3593, 'module', module, 2), 'exports', J$.R(3601, 'BSON', BSON, 1), 0));
            J$.X1(3657, J$.P(3649, J$.G(3633, J$.R(3625, 'module', module, 2), 'exports', 0), 'Code', J$.R(3641, 'Code', Code, 1), 0));
            J$.X1(3697, J$.P(3689, J$.G(3673, J$.R(3665, 'module', module, 2), 'exports', 0), 'Map', J$.R(3681, 'Map', Map, 1), 0));
            J$.X1(3737, J$.P(3729, J$.G(3713, J$.R(3705, 'module', module, 2), 'exports', 0), 'Symbol', J$.R(3721, 'Symbol', Symbol, 1), 0));
            J$.X1(3777, J$.P(3769, J$.G(3753, J$.R(3745, 'module', module, 2), 'exports', 0), 'BSON', J$.R(3761, 'BSON', BSON, 1), 0));
            J$.X1(3817, J$.P(3809, J$.G(3793, J$.R(3785, 'module', module, 2), 'exports', 0), 'DBRef', J$.R(3801, 'DBRef', DBRef, 1), 0));
            J$.X1(3857, J$.P(3849, J$.G(3833, J$.R(3825, 'module', module, 2), 'exports', 0), 'Binary', J$.R(3841, 'Binary', Binary, 1), 0));
            J$.X1(3897, J$.P(3889, J$.G(3873, J$.R(3865, 'module', module, 2), 'exports', 0), 'ObjectID', J$.R(3881, 'ObjectID', ObjectID, 1), 0));
            J$.X1(3937, J$.P(3929, J$.G(3913, J$.R(3905, 'module', module, 2), 'exports', 0), 'Long', J$.R(3921, 'Long', Long, 1), 0));
            J$.X1(3977, J$.P(3969, J$.G(3953, J$.R(3945, 'module', module, 2), 'exports', 0), 'Timestamp', J$.R(3961, 'Timestamp', Timestamp, 1), 0));
            J$.X1(4017, J$.P(4009, J$.G(3993, J$.R(3985, 'module', module, 2), 'exports', 0), 'Double', J$.R(4001, 'Double', Double, 1), 0));
            J$.X1(4057, J$.P(4049, J$.G(4033, J$.R(4025, 'module', module, 2), 'exports', 0), 'MinKey', J$.R(4041, 'MinKey', MinKey, 1), 0));
            J$.X1(4097, J$.P(4089, J$.G(4073, J$.R(4065, 'module', module, 2), 'exports', 0), 'MaxKey', J$.R(4081, 'MaxKey', MaxKey, 1), 0));
            J$.X1(4137, J$.P(4129, J$.G(4113, J$.R(4105, 'module', module, 2), 'exports', 0), 'BSONRegExp', J$.R(4121, 'BSONRegExp', BSONRegExp, 1), 0));
        } catch (J$e) {
            J$.Ex(4465, J$e);
        } finally {
            if (J$.Sr(4473)) {
                J$.L();
                continue jalangiLabel2793;
            } else {
                J$.L();
                break jalangiLabel2793;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
