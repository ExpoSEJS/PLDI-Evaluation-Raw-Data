J$.iids = {"8":[5,9,5,42],"9":[1,20,1,27],"10":[5,11,5,41],"16":[12,12,12,88],"17":[1,28,1,32],"18":[5,9,5,42],"24":[12,12,12,125],"25":[1,20,1,33],"26":[12,12,12,43],"32":[12,12,12,172],"33":[1,20,1,33],"34":[12,47,12,88],"40":[12,12,12,207],"41":[1,20,1,33],"42":[12,92,12,125],"48":[12,12,12,224],"49":[2,26,2,38],"50":[12,129,12,172],"56":[12,12,12,242],"57":[2,26,2,45],"58":[12,176,12,207],"64":[12,12,12,259],"65":[2,26,2,45],"66":[12,211,12,224],"72":[15,17,15,40],"73":[2,26,2,45],"74":[12,228,12,242],"80":[20,9,20,26],"81":[3,1,3,13],"82":[12,246,12,259],"89":[3,1,3,14],"90":[15,17,15,28],"97":[5,11,5,15],"98":[15,17,15,40],"105":[5,27,5,41],"106":[20,9,20,26],"113":[6,20,6,34],"121":[6,35,6,39],"129":[6,41,6,45],"137":[6,16,6,46],"145":[6,16,6,46],"153":[6,9,6,47],"161":[7,5,7,9],"169":[7,18,7,34],"177":[7,5,7,34],"185":[7,5,7,35],"193":[8,5,8,9],"201":[8,17,8,21],"209":[8,5,8,21],"217":[8,5,8,22],"225":[9,5,9,9],"233":[9,17,9,21],"241":[9,5,9,21],"249":[9,5,9,22],"257":[4,22,10,2],"265":[4,22,10,2],"273":[4,22,10,2],"281":[4,22,10,2],"289":[4,22,10,2],"297":[4,22,10,2],"305":[4,22,10,2],"313":[11,1,11,15],"321":[12,12,12,17],"329":[12,21,12,35],"337":[12,21,12,43],"345":[12,47,12,52],"353":[12,56,12,70],"361":[12,56,12,88],"369":[12,92,12,97],"377":[12,101,12,115],"385":[12,101,12,125],"393":[12,129,12,134],"401":[12,138,12,152],"409":[12,138,12,172],"417":[12,176,12,181],"425":[12,185,12,199],"433":[12,185,12,207],"441":[12,211,12,216],"449":[12,220,12,224],"457":[12,228,12,233],"465":[12,237,12,242],"473":[12,246,12,251],"481":[12,255,12,259],"489":[12,12,12,259],"497":[12,5,12,260],"505":[11,26,13,2],"513":[11,26,13,2],"521":[11,26,13,2],"529":[11,26,13,2],"537":[11,1,13,2],"545":[11,1,13,3],"553":[14,1,14,15],"561":[14,1,14,25],"569":[15,24,15,28],"577":[15,32,15,40],"585":[15,43,15,47],"593":[15,50,15,54],"601":[15,50,15,59],"609":[15,17,15,59],"617":[15,17,15,59],"625":[16,12,16,26],"633":[16,35,16,40],"641":[16,12,16,41],"643":[16,12,16,34],"649":[16,12,16,41],"657":[16,5,16,42],"665":[14,36,17,2],"673":[14,36,17,2],"681":[14,36,17,2],"689":[14,36,17,2],"697":[14,36,17,2],"705":[14,1,17,2],"713":[14,1,17,3],"721":[18,1,18,15],"729":[18,1,18,25],"737":[19,26,19,30],"745":[19,26,19,35],"753":[19,18,19,37],"761":[19,18,19,37],"769":[19,18,19,37],"777":[20,9,20,13],"785":[20,9,20,18],"793":[20,22,20,26],"801":[21,9,21,15],"809":[21,16,21,22],"817":[21,26,21,30],"825":[21,26,21,35],"833":[21,9,21,35],"841":[21,9,21,36],"849":[23,12,23,18],"857":[23,12,23,18],"865":[23,5,23,19],"873":[18,37,24,2],"881":[18,37,24,2],"889":[18,37,24,2],"897":[18,37,24,2],"905":[18,1,24,2],"913":[18,1,24,3],"921":[25,1,25,15],"929":[25,26,25,35],"937":[25,1,25,35],"945":[25,1,25,36],"953":[26,1,26,15],"961":[26,36,26,54],"969":[26,1,26,54],"977":[26,1,26,55],"985":[27,1,27,15],"993":[27,28,27,39],"1001":[27,1,27,39],"1009":[27,1,27,40],"1017":[28,1,28,15],"1025":[28,38,28,58],"1033":[28,1,28,58],"1041":[28,1,28,59],"1049":[29,1,29,15],"1057":[29,26,29,35],"1065":[29,1,29,35],"1073":[29,1,29,36],"1081":[30,1,30,7],"1089":[30,18,30,32],"1097":[30,1,30,32],"1105":[30,1,30,33],"1113":[1,1,30,33],"1121":[1,1,30,33],"1129":[1,1,30,33],"1137":[1,1,30,33],"1145":[5,5,6,47],"1153":[4,22,10,2],"1161":[4,22,10,2],"1169":[11,26,13,2],"1177":[11,26,13,2],"1185":[15,17,15,59],"1193":[14,36,17,2],"1201":[14,36,17,2],"1209":[20,5,22,6],"1217":[18,37,24,2],"1225":[18,37,24,2],"1233":[1,1,30,33],"1241":[1,1,30,33],"nBranches":20,"originalCodeFileName":"/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/node_modules/mongodb/lib/read_preference.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/node_modules/mongodb/lib/read_preference_jalangi_.js","code":"\"use strict\";\n\n/**\n * @fileOverview The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * \n * @example\n * var Db = require('mongodb').Db,\n *   ReplSet = require('mongodb').ReplSet,\n *   Server = require('mongodb').Server,\n *   ReadPreference = require('mongodb').ReadPreference,\n *   test = require('assert');\n * // Connect using ReplSet\n * var server = new Server('localhost', 27017);\n * var db = new Db('test', new ReplSet([server]));\n * db.open(function(err, db) {\n *   test.equal(null, err);\n *   // Perform a read\n *   var cursor = db.collection('t').find({});\n *   cursor.setReadPreference(ReadPreference.PRIMARY);\n *   cursor.toArray(function(err, docs) {\n *     test.equal(null, err);\n *     db.close();\n *   });\n * });\n */\n\n/**\n * Creates a new ReadPreference instance\n * \n * Read Preferences\n *  - **ReadPreference.PRIMARY**, Read from primary only. All operations produce an error (throw an exception where applicable) if primary is unavailable. Cannot be combined with tags (This is the default.).\n *  - **ReadPreference.PRIMARY_PREFERRED**, Read from primary if available, otherwise a secondary.\n *  - **ReadPreference.SECONDARY**, Read from secondary if available, otherwise error.\n *  - **ReadPreference.SECONDARY_PREFERRED**, Read from a secondary if available, otherwise read from the primary.\n *  - **ReadPreference.NEAREST**, All modes read from among the nearest candidates, but unlike other modes, NEAREST will include both the primary and all secondaries in the random selection.\n *\n * @class\n * @param {string} mode The ReadPreference mode as listed above.\n * @param {object} tags An object representing read preference tags.\n * @property {string} mode The ReadPreference mode.\n * @property {object} tags The ReadPreference tags.\n * @return {ReadPreference} a ReadPreference instance.\n */ \nvar ReadPreference = function(mode, tags) {\n  if(!(this instanceof ReadPreference))\n    return new ReadPreference(mode, tags);\n  this._type = 'ReadPreference';\n  this.mode = mode;\n  this.tags = tags;\n}\n\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean}\n */  \nReadPreference.isValid = function(_mode) {\n  return (_mode == ReadPreference.PRIMARY || _mode == ReadPreference.PRIMARY_PREFERRED\n    || _mode == ReadPreference.SECONDARY || _mode == ReadPreference.SECONDARY_PREFERRED\n    || _mode == ReadPreference.NEAREST\n    || _mode == true || _mode == false || _mode == null);\n}\n\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean}\n */  \nReadPreference.prototype.isValid = function(mode) {\n  var _mode = typeof mode == 'string' ? mode : this.mode;\n  return ReadPreference.isValid(_mode);\n}\n\n/**\n * @ignore\n */\nReadPreference.prototype.toObject = function() {\n  var object = {mode:this.mode};\n\n  if(this.tags != null) {\n    object['tags'] = this.tags;\n  }\n\n  return object;\n}\n\n/**\n * @ignore\n */\nReadPreference.PRIMARY = 'primary';\nReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';\nReadPreference.SECONDARY = 'secondary';\nReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';\nReadPreference.NEAREST = 'nearest'\n\n/**\n * @ignore\n */\nmodule.exports = ReadPreference;"};
jalangiLabel3525:
    while (true) {
        try {
            J$.Se(1113, '/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/node_modules/mongodb/lib/read_preference_jalangi_.js', '/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/node_modules/mongodb/lib/read_preference.js');
            J$.N(1121, '__secret__S$', __secret__S$, 0);
            J$.N(1129, '__secret__traits__', __secret__traits__, 0);
            J$.N(1137, 'ReadPreference', ReadPreference, 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            J$.X1(89, J$.T(81, 'use strict', 21, false));
            var ReadPreference = J$.X1(305, J$.W(297, 'ReadPreference', J$.T(289, function (mode, tags) {
                jalangiLabel3521:
                    while (true) {
                        try {
                            J$.Fe(257, arguments.callee, this, arguments);
                            arguments = J$.N(265, 'arguments', arguments, 4);
                            mode = J$.N(273, 'mode', mode, 4);
                            tags = J$.N(281, 'tags', tags, 4);
                            if (J$.X1(1145, J$.C(8, J$.U(18, '!', J$.B(10, 'instanceof', J$.R(97, 'this', this, 0), J$.R(105, 'ReadPreference', ReadPreference, 1), 0)))))
                                return J$.X1(153, J$.Rt(145, J$.F(137, J$.R(113, 'ReadPreference', ReadPreference, 1), 1)(J$.R(121, 'mode', mode, 0), J$.R(129, 'tags', tags, 0))));
                            J$.X1(185, J$.P(177, J$.R(161, 'this', this, 0), '_type', J$.T(169, 'ReadPreference', 21, false), 0));
                            J$.X1(217, J$.P(209, J$.R(193, 'this', this, 0), 'mode', J$.R(201, 'mode', mode, 0), 0));
                            J$.X1(249, J$.P(241, J$.R(225, 'this', this, 0), 'tags', J$.R(233, 'tags', tags, 0), 0));
                        } catch (J$e) {
                            J$.Ex(1153, J$e);
                        } finally {
                            if (J$.Fr(1161))
                                continue jalangiLabel3521;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 257), ReadPreference, 3));
            J$.X1(545, J$.P(537, J$.R(313, 'ReadPreference', ReadPreference, 1), 'isValid', J$.T(529, function (_mode) {
                jalangiLabel3522:
                    while (true) {
                        try {
                            J$.Fe(505, arguments.callee, this, arguments);
                            arguments = J$.N(513, 'arguments', arguments, 4);
                            _mode = J$.N(521, '_mode', _mode, 4);
                            return J$.X1(497, J$.Rt(489, J$.C(64, J$.C(56, J$.C(48, J$.C(40, J$.C(32, J$.C(24, J$.C(16, J$.B(26, '==', J$.R(321, '_mode', _mode, 0), J$.G(337, J$.R(329, 'ReadPreference', ReadPreference, 1), 'PRIMARY', 0), 0)) ? J$._() : J$.B(34, '==', J$.R(345, '_mode', _mode, 0), J$.G(361, J$.R(353, 'ReadPreference', ReadPreference, 1), 'PRIMARY_PREFERRED', 0), 0)) ? J$._() : J$.B(42, '==', J$.R(369, '_mode', _mode, 0), J$.G(385, J$.R(377, 'ReadPreference', ReadPreference, 1), 'SECONDARY', 0), 0)) ? J$._() : J$.B(50, '==', J$.R(393, '_mode', _mode, 0), J$.G(409, J$.R(401, 'ReadPreference', ReadPreference, 1), 'SECONDARY_PREFERRED', 0), 0)) ? J$._() : J$.B(58, '==', J$.R(417, '_mode', _mode, 0), J$.G(433, J$.R(425, 'ReadPreference', ReadPreference, 1), 'NEAREST', 0), 0)) ? J$._() : J$.B(66, '==', J$.R(441, '_mode', _mode, 0), J$.T(449, true, 23, false), 0)) ? J$._() : J$.B(74, '==', J$.R(457, '_mode', _mode, 0), J$.T(465, false, 23, false), 0)) ? J$._() : J$.B(82, '==', J$.R(473, '_mode', _mode, 0), J$.T(481, null, 25, false), 0)));
                        } catch (J$e) {
                            J$.Ex(1169, J$e);
                        } finally {
                            if (J$.Fr(1177))
                                continue jalangiLabel3522;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 505), 0));
            J$.X1(713, J$.P(705, J$.G(561, J$.R(553, 'ReadPreference', ReadPreference, 1), 'prototype', 0), 'isValid', J$.T(697, function (mode) {
                jalangiLabel3523:
                    while (true) {
                        try {
                            J$.Fe(665, arguments.callee, this, arguments);
                            arguments = J$.N(673, 'arguments', arguments, 4);
                            mode = J$.N(681, 'mode', mode, 4);
                            J$.N(689, '_mode', _mode, 0);
                            var _mode = J$.X1(617, J$.W(609, '_mode', J$.X1(1185, J$.C(72, J$.B(98, '==', J$.U(90, 'typeof', J$.R(569, 'mode', mode, 0)), J$.T(577, 'string', 21, false), 0))) ? J$.R(585, 'mode', mode, 0) : J$.G(601, J$.R(593, 'this', this, 0), 'mode', 0), _mode, 1));
                            return J$.X1(657, J$.Rt(649, J$.M(641, J$.R(625, 'ReadPreference', ReadPreference, 1), 'isValid', 0)(J$.R(633, '_mode', _mode, 0))));
                        } catch (J$e) {
                            J$.Ex(1193, J$e);
                        } finally {
                            if (J$.Fr(1201))
                                continue jalangiLabel3523;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 665), 0));
            J$.X1(913, J$.P(905, J$.G(729, J$.R(721, 'ReadPreference', ReadPreference, 1), 'prototype', 0), 'toObject', J$.T(897, function () {
                jalangiLabel3524:
                    while (true) {
                        try {
                            J$.Fe(873, arguments.callee, this, arguments);
                            arguments = J$.N(881, 'arguments', arguments, 4);
                            J$.N(889, 'object', object, 0);
                            var object = J$.X1(769, J$.W(761, 'object', J$.T(753, {
                                mode: J$.G(745, J$.R(737, 'this', this, 0), 'mode', 0)
                            }, 11, false), object, 1));
                            if (J$.X1(1209, J$.C(80, J$.B(106, '!=', J$.G(785, J$.R(777, 'this', this, 0), 'tags', 0), J$.T(793, null, 25, false), 0)))) {
                                J$.X1(841, J$.P(833, J$.R(801, 'object', object, 0), J$.T(809, 'tags', 21, false), J$.G(825, J$.R(817, 'this', this, 0), 'tags', 0), 2));
                            }
                            return J$.X1(865, J$.Rt(857, J$.R(849, 'object', object, 0)));
                        } catch (J$e) {
                            J$.Ex(1217, J$e);
                        } finally {
                            if (J$.Fr(1225))
                                continue jalangiLabel3524;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 873), 0));
            J$.X1(945, J$.P(937, J$.R(921, 'ReadPreference', ReadPreference, 1), 'PRIMARY', J$.T(929, 'primary', 21, false), 0));
            J$.X1(977, J$.P(969, J$.R(953, 'ReadPreference', ReadPreference, 1), 'PRIMARY_PREFERRED', J$.T(961, 'primaryPreferred', 21, false), 0));
            J$.X1(1009, J$.P(1001, J$.R(985, 'ReadPreference', ReadPreference, 1), 'SECONDARY', J$.T(993, 'secondary', 21, false), 0));
            J$.X1(1041, J$.P(1033, J$.R(1017, 'ReadPreference', ReadPreference, 1), 'SECONDARY_PREFERRED', J$.T(1025, 'secondaryPreferred', 21, false), 0));
            J$.X1(1073, J$.P(1065, J$.R(1049, 'ReadPreference', ReadPreference, 1), 'NEAREST', J$.T(1057, 'nearest', 21, false), 0));
            J$.X1(1105, J$.P(1097, J$.R(1081, 'module', module, 2), 'exports', J$.R(1089, 'ReadPreference', ReadPreference, 1), 0));
        } catch (J$e) {
            J$.Ex(1233, J$e);
        } finally {
            if (J$.Sr(1241)) {
                J$.L();
                continue jalangiLabel3525;
            } else {
                J$.L();
                break jalangiLabel3525;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
