J$.iids = {"8":[4,477,4,542],"9":[1,20,1,27],"10":[12,9,12,24],"16":[13,26,13,61],"17":[1,28,1,32],"18":[13,26,13,47],"24":[12,9,12,24],"25":[1,20,1,33],"26":[13,26,13,61],"32":[50,17,50,44],"33":[1,20,1,33],"34":[50,17,50,44],"40":[55,9,55,62],"41":[1,20,1,33],"42":[50,46,50,49],"48":[55,9,55,62],"49":[2,26,2,38],"56":[60,9,60,33],"57":[2,26,2,45],"58":[50,46,50,49],"64":[65,9,65,26],"65":[2,26,2,45],"66":[55,9,55,45],"72":[76,9,76,58],"73":[2,26,2,45],"74":[60,9,60,21],"81":[3,1,3,13],"82":[60,9,60,33],"89":[3,1,3,14],"90":[76,9,76,58],"97":[4,16,4,23],"105":[4,24,4,30],"113":[4,16,4,31],"121":[4,16,4,40],"129":[4,46,4,53],"137":[4,54,4,60],"145":[4,46,4,61],"153":[4,46,4,68],"161":[4,80,4,87],"169":[4,88,4,97],"177":[4,80,4,98],"185":[4,80,4,106],"193":[4,128,4,135],"201":[4,136,4,145],"209":[4,128,4,146],"217":[4,128,4,164],"225":[4,189,4,196],"233":[4,197,4,206],"241":[4,189,4,207],"249":[4,189,4,228],"257":[4,247,4,254],"265":[4,255,4,264],"273":[4,247,4,265],"281":[4,247,4,280],"289":[4,291,4,298],"297":[4,299,4,313],"305":[4,291,4,314],"313":[4,291,4,321],"321":[4,338,4,345],"329":[4,346,4,354],"337":[4,338,4,355],"345":[4,338,4,368],"353":[4,387,4,394],"361":[4,395,4,414],"369":[4,387,4,415],"377":[4,430,4,437],"385":[4,438,4,452],"393":[4,430,4,453],"401":[4,430,4,464],"409":[4,477,4,484],"417":[4,485,4,493],"425":[4,477,4,494],"433":[4,477,4,503],"441":[4,507,4,514],"449":[4,515,4,532],"457":[4,507,4,533],"465":[4,507,4,542],"473":[4,553,4,560],"481":[4,561,4,573],"489":[4,553,4,574],"497":[4,589,4,596],"505":[4,597,4,607],"513":[4,589,4,608],"521":[4,618,4,625],"529":[4,626,4,640],"537":[4,618,4,641],"545":[4,618,4,647],"553":[4,670,4,677],"561":[4,678,4,692],"569":[4,670,4,693],"577":[4,670,4,708],"585":[4,16,4,40],"593":[4,16,4,40],"601":[4,46,4,68],"609":[4,46,4,68],"617":[4,80,4,106],"625":[4,80,4,106],"633":[4,128,4,164],"641":[4,128,4,164],"649":[4,189,4,228],"657":[4,189,4,228],"665":[4,247,4,280],"673":[4,247,4,280],"681":[4,291,4,321],"689":[4,291,4,321],"697":[4,338,4,368],"705":[4,338,4,368],"713":[4,387,4,415],"721":[4,387,4,415],"729":[4,430,4,464],"737":[4,430,4,464],"745":[4,477,4,542],"753":[4,477,4,542],"761":[4,553,4,574],"769":[4,553,4,574],"777":[4,589,4,608],"785":[4,589,4,608],"793":[4,618,4,647],"801":[4,618,4,647],"809":[4,670,4,708],"817":[4,670,4,708],"825":[6,5,6,15],"833":[6,22,6,26],"841":[6,28,6,33],"849":[6,28,6,43],"857":[6,28,6,49],"865":[6,55,6,64],"873":[6,66,6,67],"881":[6,28,6,68],"883":[6,28,6,54],"889":[6,5,6,69],"891":[6,5,6,21],"897":[6,5,6,70],"905":[7,16,7,20],"913":[7,16,7,20],"921":[7,16,7,20],"929":[8,17,8,30],"937":[8,17,8,35],"945":[8,17,8,35],"953":[8,17,8,35],"961":[9,25,9,27],"969":[9,25,9,27],"977":[9,25,9,27],"985":[10,21,10,25],"993":[10,21,10,25],"1001":[10,21,10,25],"1009":[11,26,11,33],"1017":[11,26,11,48],"1025":[11,26,11,48],"1033":[11,26,11,48],"1041":[12,10,12,24],"1049":[13,33,13,39],"1057":[13,33,13,47],"1065":[13,51,13,61],"1073":[13,64,13,70],"1081":[13,64,13,78],"1089":[13,81,13,88],"1097":[13,89,13,102],"1105":[13,81,13,103],"1113":[13,81,13,111],"1121":[13,26,13,111],"1129":[13,9,13,112],"1137":[15,5,15,13],"1145":[15,19,15,23],"1153":[15,39,15,43],"1161":[15,25,15,45],"1169":[15,5,15,46],"1171":[15,5,15,18],"1177":[15,5,15,47],"1185":[16,5,16,9],"1193":[17,20,17,29],"1201":[18,16,18,21],"1209":[19,24,19,37],"1217":[20,15,20,19],"1225":[21,13,21,15],"1233":[22,14,22,17],"1241":[23,18,23,25],"1249":[24,19,24,27],"1257":[25,26,25,41],"1265":[26,25,26,39],"1273":[16,14,27,6],"1281":[16,5,27,6],"1289":[16,5,27,7],"1297":[5,21,28,2],"1305":[5,21,28,2],"1313":[5,21,28,2],"1321":[5,21,28,2],"1329":[5,21,28,2],"1337":[5,21,28,2],"1345":[5,21,28,2],"1353":[5,21,28,2],"1361":[5,21,28,2],"1369":[5,21,28,2],"1377":[5,21,28,2],"1385":[5,21,28,2],"1393":[5,21,28,2],"1401":[5,21,28,2],"1409":[5,21,28,2],"1417":[5,21,28,2],"1425":[29,1,29,9],"1433":[29,10,29,23],"1441":[29,25,29,33],"1449":[29,1,29,34],"1457":[29,1,29,35],"1465":[31,5,31,12],"1473":[32,5,32,11],"1481":[33,5,33,11],"1489":[34,5,34,14],"1497":[35,5,35,14],"1505":[36,5,36,13],"1513":[37,5,37,20],"1521":[38,5,38,28],"1529":[39,5,39,12],"1537":[40,5,40,15],"1545":[41,5,41,11],"1553":[42,5,42,12],"1561":[43,5,43,15],"1569":[44,5,44,18],"1577":[45,5,45,13],"1585":[46,5,46,14],"1593":[47,5,47,17],"1601":[48,5,48,15],"1609":[30,24,49,2],"1617":[30,24,49,2],"1625":[30,24,49,2],"1633":[50,14,50,15],"1641":[50,14,50,15],"1649":[50,14,50,15],"1657":[50,17,50,18],"1665":[50,21,50,37],"1673":[50,21,50,44],"1689":[50,46,50,47],"1697":[50,46,50,49],"1713":[51,5,51,18],"1721":[51,5,51,28],"1729":[51,29,51,45],"1737":[51,46,51,47],"1745":[51,29,51,48],"1753":[51,52,51,62],"1761":[51,52,51,72],"1769":[51,73,51,89],"1777":[51,90,51,91],"1785":[51,73,51,92],"1793":[51,52,51,93],"1801":[51,5,51,93],"1809":[51,5,51,94],"1817":[53,14,53,27],"1825":[53,41,53,47],"1833":[53,48,53,63],"1841":[53,65,53,78],"1849":[53,80,53,84],"1857":[53,37,53,85],"1865":[53,14,53,85],"1873":[53,14,53,85],"1881":[53,14,53,85],"1889":[54,1,54,14],"1897":[54,1,54,24],"1905":[55,9,55,13],"1913":[55,9,55,15],"1921":[55,9,55,21],"1929":[55,25,55,38],"1937":[55,25,55,45],"1945":[55,49,55,53],"1953":[55,49,55,62],"1955":[55,49,55,60],"1961":[56,15,56,25],"1969":[57,22,57,40],"1977":[58,21,58,25],"1985":[56,33,59,10],"1993":[56,15,59,11],"1995":[56,15,56,32],"2001":[56,15,59,11],"2009":[56,9,59,12],"2017":[60,16,60,21],"2025":[60,25,60,33],"2033":[61,15,61,25],"2041":[62,22,62,53],"2049":[63,21,63,25],"2057":[61,33,64,10],"2065":[61,15,64,11],"2067":[61,15,61,32],"2073":[61,15,64,11],"2081":[61,9,64,12],"2089":[65,9,65,13],"2097":[65,9,65,15],"2105":[65,9,65,19],"2113":[65,9,65,26],"2121":[66,9,66,13],"2129":[66,9,66,15],"2137":[66,9,66,19],"2145":[66,9,66,26],"2153":[66,39,66,44],"2161":[66,9,66,44],"2169":[66,9,66,45],"2177":[67,5,67,9],"2185":[67,29,67,34],"2193":[67,5,67,35],"2195":[67,5,67,28],"2201":[67,5,67,36],"2209":[68,12,68,16],"2217":[68,12,68,16],"2225":[68,5,68,17],"2233":[54,37,69,2],"2241":[54,37,69,2],"2249":[54,37,69,2],"2257":[54,37,69,2],"2265":[54,1,69,2],"2273":[54,1,69,3],"2281":[70,1,70,7],"2289":[70,20,70,31],"2297":[71,15,71,20],"2305":[72,14,72,19],"2313":[73,15,73,28],"2321":[73,14,73,29],"2329":[70,33,74,2],"2337":[70,1,74,3],"2339":[70,1,70,19],"2345":[70,1,74,4],"2353":[75,1,75,14],"2361":[75,1,75,24],"2369":[76,9,76,13],"2377":[76,9,76,15],"2385":[76,9,76,24],"2393":[76,9,76,39],"2395":[76,9,76,37],"2401":[76,9,76,54],"2409":[76,57,76,58],"2417":[77,9,77,13],"2425":[77,9,77,15],"2433":[77,9,77,19],"2441":[77,32,77,37],"2449":[77,9,77,37],"2457":[77,9,77,38],"2465":[79,12,79,16],"2473":[79,12,79,16],"2481":[79,5,79,17],"2489":[75,37,80,2],"2497":[75,37,80,2],"2505":[75,37,80,2],"2513":[75,37,80,2],"2521":[75,1,80,2],"2529":[75,1,80,3],"2537":[81,1,81,7],"2545":[81,20,81,31],"2553":[82,15,82,20],"2561":[83,14,83,19],"2569":[84,15,84,28],"2577":[84,14,84,29],"2585":[81,33,85,2],"2593":[81,1,85,3],"2595":[81,1,81,19],"2601":[81,1,85,4],"2609":[86,1,86,14],"2617":[86,1,86,24],"2625":[86,31,86,44],"2633":[86,31,86,54],"2641":[86,31,86,62],"2649":[86,1,86,62],"2657":[86,1,86,63],"2665":[87,1,87,7],"2673":[87,20,87,25],"2681":[88,15,88,19],"2689":[89,14,89,19],"2697":[87,27,90,2],"2705":[87,1,90,3],"2707":[87,1,87,19],"2713":[87,1,90,4],"2721":[91,1,91,7],"2729":[91,20,91,29],"2737":[92,15,92,19],"2745":[93,14,93,18],"2753":[91,31,94,2],"2761":[91,1,94,3],"2763":[91,1,91,19],"2769":[91,1,94,4],"2777":[95,1,95,7],"2785":[95,20,95,26],"2793":[96,15,96,19],"2801":[97,14,97,19],"2809":[95,28,98,2],"2817":[95,1,98,3],"2819":[95,1,95,19],"2825":[95,1,98,4],"2833":[99,1,99,7],"2841":[99,20,99,29],"2849":[100,15,100,19],"2857":[101,14,101,19],"2865":[99,31,102,2],"2873":[99,1,102,3],"2875":[99,1,99,19],"2881":[99,1,102,4],"2889":[103,1,103,7],"2897":[103,20,103,26],"2905":[104,15,104,19],"2913":[105,14,105,18],"2921":[103,28,106,2],"2929":[103,1,106,3],"2931":[103,1,103,19],"2937":[103,1,106,4],"2945":[107,1,107,7],"2953":[107,20,107,27],"2961":[108,15,108,19],"2969":[109,14,109,18],"2977":[107,29,110,2],"2985":[107,1,110,3],"2987":[107,1,107,19],"2993":[107,1,110,4],"3001":[111,1,111,7],"3009":[111,20,111,30],"3017":[112,15,112,20],"3025":[113,14,113,19],"3033":[114,15,114,22],"3041":[114,14,114,23],"3049":[111,32,115,2],"3057":[111,1,115,3],"3059":[111,1,111,19],"3065":[111,1,115,4],"3073":[116,1,116,7],"3081":[116,20,116,28],"3089":[117,15,117,20],"3097":[118,14,118,19],"3105":[116,30,119,2],"3113":[116,1,119,3],"3115":[116,1,116,19],"3121":[116,1,119,4],"3129":[120,1,120,7],"3137":[120,20,120,35],"3145":[121,15,121,20],"3153":[122,14,122,19],"3161":[123,15,123,21],"3169":[123,14,123,22],"3177":[120,37,124,2],"3185":[120,1,124,3],"3187":[120,1,120,19],"3193":[120,1,124,4],"3201":[125,1,125,7],"3209":[125,20,125,43],"3217":[126,15,126,20],"3225":[127,14,127,19],"3233":[128,15,128,20],"3241":[128,14,128,21],"3249":[125,45,129,2],"3257":[125,1,129,3],"3259":[125,1,125,19],"3265":[125,1,129,4],"3273":[130,1,130,14],"3281":[130,22,130,23],"3289":[130,1,130,23],"3297":[130,1,130,24],"3305":[131,1,131,14],"3313":[131,22,131,23],"3321":[131,1,131,23],"3329":[131,1,131,24],"3337":[132,1,132,14],"3345":[132,24,132,25],"3353":[132,1,132,25],"3361":[132,1,132,26],"3369":[133,1,133,7],"3377":[133,18,133,31],"3385":[133,1,133,31],"3393":[133,1,133,32],"3401":[1,1,133,32],"3409":[1,1,133,32],"3417":[1,1,133,32],"3425":[1,1,133,32],"3433":[1,1,133,32],"3441":[1,1,133,32],"3449":[1,1,133,32],"3457":[1,1,133,32],"3465":[1,1,133,32],"3473":[1,1,133,32],"3481":[1,1,133,32],"3489":[1,1,133,32],"3497":[1,1,133,32],"3505":[1,1,133,32],"3513":[1,1,133,32],"3521":[1,1,133,32],"3529":[1,1,133,32],"3537":[1,1,133,32],"3545":[1,1,133,32],"3553":[1,1,133,32],"3561":[1,1,133,32],"3569":[1,1,133,32],"3577":[13,26,13,111],"3585":[12,5,14,6],"3593":[5,21,28,2],"3601":[5,21,28,2],"3609":[50,1,52,2],"3617":[50,1,52,2],"3625":[55,5,59,12],"3633":[60,5,64,12],"3641":[65,5,66,45],"3649":[54,37,69,2],"3657":[54,37,69,2],"3665":[76,5,78,6],"3673":[75,37,80,2],"3681":[75,37,80,2],"3689":[1,1,133,32],"3697":[1,1,133,32],"nBranches":18,"originalCodeFileName":"/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/node_modules/mongodb/lib/command_cursor.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/node_modules/mongodb/lib/command_cursor_jalangi_.js","code":"\"use strict\";\n\nvar inherits = require('util').inherits\n  , f = require('util').format\n  , toError = require('./utils').toError\n  , getSingleProperty = require('./utils').getSingleProperty\n  , formattedOrderClause = require('./utils').formattedOrderClause\n  , handleCallback = require('./utils').handleCallback\n  , Logger = require('mongodb-core').Logger\n  , EventEmitter = require('events').EventEmitter\n  , ReadPreference = require('./read_preference')\n  , MongoError = require('mongodb-core').MongoError\n  , Readable = require('stream').Readable || require('readable-stream').Readable\n  , Define = require('./metadata')\n  , CoreCursor = require('./cursor')\n  , Query = require('mongodb-core').Query\n  , CoreReadPreference = require('mongodb-core').ReadPreference;\n\n/**\n * @fileOverview The **CommandCursor** class is an internal class that embodies a\n * generalized cursor based on a MongoDB command allowing for iteration over the\n * results returned. It supports one by one document iteration, conversion to an\n * array or can be iterated as a Node 0.10.X or higher stream\n *\n * **CommandCursor Cannot directly be instantiated**\n * @example\n * var MongoClient = require('mongodb').MongoClient,\n *   test = require('assert');\n * // Connection url\n * var url = 'mongodb://localhost:27017/test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, db) {\n *   // Create a collection we want to drop later\n *   var col = db.collection('listCollectionsExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *\n *     // List the database collections available\n *     db.listCollections().toArray(function(err, items) {\n *       test.equal(null, err);\n *       db.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the browser.\n * @external Readable\n */\n\n/**\n * Creates a new Command Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class CommandCursor\n * @extends external:Readable\n * @fires CommandCursor#data\n * @fires CommandCursor#end\n * @fires CommandCursor#close\n * @fires CommandCursor#readable\n * @return {CommandCursor} an CommandCursor instance.\n */\nvar CommandCursor = function(bson, ns, cmd, options, topology, topologyOptions) {\n  CoreCursor.apply(this, Array.prototype.slice.call(arguments, 0));\n  var self = this;\n  var state = CommandCursor.INIT;\n  var streamOptions = {};\n\n  // MaxTimeMS\n  var maxTimeMS = null;\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary;\n\n  // No promise library selected fall back\n  if(!promiseLibrary) {\n    promiseLibrary = typeof global.Promise == 'function' ?\n      global.Promise : require('es6-promise').Promise;\n  }\n\n  // Set up\n  Readable.call(this, {objectMode: true});\n\n  // Internal state\n  this.s = {\n    // MaxTimeMS\n      maxTimeMS: maxTimeMS\n    // State\n    , state: state\n    // Stream options\n    , streamOptions: streamOptions\n    // BSON\n    , bson: bson\n    // Namespae\n    , ns: ns\n    // Command\n    , cmd: cmd\n    // Options\n    , options: options\n    // Topology\n    , topology: topology\n    // Topology Options\n    , topologyOptions: topologyOptions\n    // Promise library\n    , promiseLibrary: promiseLibrary\n  }\n}\n\n/**\n * CommandCursor stream data event, fired for each document in the cursor.\n *\n * @event CommandCursor#data\n * @type {object}\n */\n\n/**\n * CommandCursor stream end event\n *\n * @event CommandCursor#end\n * @type {null}\n */\n\n/**\n * CommandCursor stream close event\n *\n * @event CommandCursor#close\n * @type {null}\n */\n\n/**\n * CommandCursor stream readable event\n *\n * @event CommandCursor#readable\n * @type {null}\n */\n\n// Inherit from Readable\ninherits(CommandCursor, Readable);\n\n// Set the methods to inherit from prototype\nvar methodsToInherit = ['_next', 'next', 'each', 'forEach', 'toArray'\n  , 'rewind', 'bufferedCount', 'readBufferedDocuments', 'close', 'isClosed', 'kill'\n  , '_find', '_getmore', '_killcursor', 'isDead', 'explain', 'isNotified', 'isKilled'];\n\n// Only inherit the types we need\nfor(var i = 0; i < methodsToInherit.length; i++) {\n  CommandCursor.prototype[methodsToInherit[i]] = CoreCursor.prototype[methodsToInherit[i]];\n}\n\nvar define = CommandCursor.define = new Define('CommandCursor', CommandCursor, true);\n\n/**\n * Set the batch size for the cursor.\n * @method\n * @param {number} value The batchSize for the cursor.\n * @throws {MongoError}\n * @return {CommandCursor}\n */\nCommandCursor.prototype.batchSize = function(value) {\n  if(this.s.state == CommandCursor.CLOSED || this.isDead()) throw MongoError.create({message: \"Cursor is closed\", driver:true});\n  if(typeof value != 'number') throw MongoError.create({message: \"batchSize requires an integer\", driver:true});\n  if(this.s.cmd.cursor) this.s.cmd.cursor.batchSize = value;\n  this.setCursorBatchSize(value);\n  return this;\n}\n\ndefine.classMethod('batchSize', {callback: false, promise:false, returns: [CommandCursor]});\n\n/**\n * Add a maxTimeMS stage to the aggregation pipeline\n * @method\n * @param {number} value The state maxTimeMS value.\n * @return {CommandCursor}\n */\nCommandCursor.prototype.maxTimeMS = function(value) {\n  if(this.s.topology.lastIsMaster().minWireVersion > 2) {\n    this.s.cmd.maxTimeMS = value;\n  }\n  return this;\n}\n\ndefine.classMethod('maxTimeMS', {callback: false, promise:false, returns: [CommandCursor]});\n\nCommandCursor.prototype.get = CommandCursor.prototype.toArray;\n\ndefine.classMethod('get', {callback: true, promise:false});\n\n// Inherited methods\ndefine.classMethod('toArray', {callback: true, promise:true});\ndefine.classMethod('each', {callback: true, promise:false});\ndefine.classMethod('forEach', {callback: true, promise:false});\ndefine.classMethod('next', {callback: true, promise:true});\ndefine.classMethod('close', {callback: true, promise:true});\ndefine.classMethod('isClosed', {callback: false, promise:false, returns: [Boolean]});\ndefine.classMethod('rewind', {callback: false, promise:false});\ndefine.classMethod('bufferedCount', {callback: false, promise:false, returns: [Number]});\ndefine.classMethod('readBufferedDocuments', {callback: false, promise:false, returns: [Array]});\n\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @function CommandCursor.prototype.next\n * @param {CommandCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback CommandCursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previouly accessed.\n * @method CommandCursor.prototype.toArray\n * @param {CommandCursor~toArrayResultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback CommandCursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previouly accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method CommandCursor.prototype.each\n * @param {CommandCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Close the cursor, sending a KillCursor command and emitting close.\n * @method CommandCursor.prototype.close\n * @param {CommandCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Is the cursor closed\n * @method CommandCursor.prototype.isClosed\n * @return {boolean}\n */\n\n/**\n * Clone the cursor\n * @function CommandCursor.prototype.clone\n * @return {CommandCursor}\n */\n\n/**\n * Resets the cursor\n * @function CommandCursor.prototype.rewind\n * @return {CommandCursor}\n */\n\n/**\n * The callback format for the forEach iterator method\n * @callback CommandCursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback CommandCursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/*\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method CommandCursor.prototype.forEach\n * @param {CommandCursor~iteratorCallback} iterator The iteration callback.\n * @param {CommandCursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\n\nCommandCursor.INIT = 0;\nCommandCursor.OPEN = 1;\nCommandCursor.CLOSED = 2;\n\nmodule.exports = CommandCursor;\n"};
jalangiLabel3596:
    while (true) {
        try {
            J$.Se(3401, '/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/node_modules/mongodb/lib/command_cursor_jalangi_.js', '/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/node_modules/mongodb/lib/command_cursor.js');
            J$.N(3409, '__secret__S$', __secret__S$, 0);
            J$.N(3417, '__secret__traits__', __secret__traits__, 0);
            J$.N(3425, 'inherits', inherits, 0);
            J$.N(3433, 'f', f, 0);
            J$.N(3441, 'toError', toError, 0);
            J$.N(3449, 'getSingleProperty', getSingleProperty, 0);
            J$.N(3457, 'formattedOrderClause', formattedOrderClause, 0);
            J$.N(3465, 'handleCallback', handleCallback, 0);
            J$.N(3473, 'Logger', Logger, 0);
            J$.N(3481, 'EventEmitter', EventEmitter, 0);
            J$.N(3489, 'ReadPreference', ReadPreference, 0);
            J$.N(3497, 'MongoError', MongoError, 0);
            J$.N(3505, 'Readable', Readable, 0);
            J$.N(3513, 'Define', Define, 0);
            J$.N(3521, 'CoreCursor', CoreCursor, 0);
            J$.N(3529, 'Query', Query, 0);
            J$.N(3537, 'CoreReadPreference', CoreReadPreference, 0);
            J$.N(3545, 'CommandCursor', CommandCursor, 0);
            J$.N(3553, 'methodsToInherit', methodsToInherit, 0);
            J$.N(3561, 'i', i, 0);
            J$.N(3569, 'define', define, 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            J$.X1(89, J$.T(81, 'use strict', 21, false));
            var inherits = J$.X1(593, J$.W(585, 'inherits', J$.G(121, J$.F(113, J$.R(97, 'require', require, 2), 0)(J$.T(105, 'util', 21, false)), 'inherits', 0), inherits, 3)), f = J$.X1(609, J$.W(601, 'f', J$.G(153, J$.F(145, J$.R(129, 'require', require, 2), 0)(J$.T(137, 'util', 21, false)), 'format', 0), f, 3)), toError = J$.X1(625, J$.W(617, 'toError', J$.G(185, J$.F(177, J$.R(161, 'require', require, 2), 0)(J$.T(169, './utils', 21, false)), 'toError', 0), toError, 3)), getSingleProperty = J$.X1(641, J$.W(633, 'getSingleProperty', J$.G(217, J$.F(209, J$.R(193, 'require', require, 2), 0)(J$.T(201, './utils', 21, false)), 'getSingleProperty', 0), getSingleProperty, 3)), formattedOrderClause = J$.X1(657, J$.W(649, 'formattedOrderClause', J$.G(249, J$.F(241, J$.R(225, 'require', require, 2), 0)(J$.T(233, './utils', 21, false)), 'formattedOrderClause', 0), formattedOrderClause, 3)), handleCallback = J$.X1(673, J$.W(665, 'handleCallback', J$.G(281, J$.F(273, J$.R(257, 'require', require, 2), 0)(J$.T(265, './utils', 21, false)), 'handleCallback', 0), handleCallback, 3)), Logger = J$.X1(689, J$.W(681, 'Logger', J$.G(313, J$.F(305, J$.R(289, 'require', require, 2), 0)(J$.T(297, 'mongodb-core', 21, false)), 'Logger', 0), Logger, 3)), EventEmitter = J$.X1(705, J$.W(697, 'EventEmitter', J$.G(345, J$.F(337, J$.R(321, 'require', require, 2), 0)(J$.T(329, 'events', 21, false)), 'EventEmitter', 0), EventEmitter, 3)), ReadPreference = J$.X1(721, J$.W(713, 'ReadPreference', J$.F(369, J$.R(353, 'require', require, 2), 0)(J$.T(361, './read_preference', 21, false)), ReadPreference, 3)), MongoError = J$.X1(737, J$.W(729, 'MongoError', J$.G(401, J$.F(393, J$.R(377, 'require', require, 2), 0)(J$.T(385, 'mongodb-core', 21, false)), 'MongoError', 0), MongoError, 3)), Readable = J$.X1(753, J$.W(745, 'Readable', J$.C(8, J$.G(433, J$.F(425, J$.R(409, 'require', require, 2), 0)(J$.T(417, 'stream', 21, false)), 'Readable', 0)) ? J$._() : J$.G(465, J$.F(457, J$.R(441, 'require', require, 2), 0)(J$.T(449, 'readable-stream', 21, false)), 'Readable', 0), Readable, 3)), Define = J$.X1(769, J$.W(761, 'Define', J$.F(489, J$.R(473, 'require', require, 2), 0)(J$.T(481, './metadata', 21, false)), Define, 3)), CoreCursor = J$.X1(785, J$.W(777, 'CoreCursor', J$.F(513, J$.R(497, 'require', require, 2), 0)(J$.T(505, './cursor', 21, false)), CoreCursor, 3)), Query = J$.X1(801, J$.W(793, 'Query', J$.G(545, J$.F(537, J$.R(521, 'require', require, 2), 0)(J$.T(529, 'mongodb-core', 21, false)), 'Query', 0), Query, 3)), CoreReadPreference = J$.X1(817, J$.W(809, 'CoreReadPreference', J$.G(577, J$.F(569, J$.R(553, 'require', require, 2), 0)(J$.T(561, 'mongodb-core', 21, false)), 'ReadPreference', 0), CoreReadPreference, 3));
            var CommandCursor = J$.X1(1417, J$.W(1409, 'CommandCursor', J$.T(1401, function (bson, ns, cmd, options, topology, topologyOptions) {
                jalangiLabel3593:
                    while (true) {
                        try {
                            J$.Fe(1297, arguments.callee, this, arguments);
                            arguments = J$.N(1305, 'arguments', arguments, 4);
                            bson = J$.N(1313, 'bson', bson, 4);
                            ns = J$.N(1321, 'ns', ns, 4);
                            cmd = J$.N(1329, 'cmd', cmd, 4);
                            options = J$.N(1337, 'options', options, 4);
                            topology = J$.N(1345, 'topology', topology, 4);
                            topologyOptions = J$.N(1353, 'topologyOptions', topologyOptions, 4);
                            J$.N(1361, 'self', self, 0);
                            J$.N(1369, 'state', state, 0);
                            J$.N(1377, 'streamOptions', streamOptions, 0);
                            J$.N(1385, 'maxTimeMS', maxTimeMS, 0);
                            J$.N(1393, 'promiseLibrary', promiseLibrary, 0);
                            J$.X1(897, J$.M(889, J$.R(825, 'CoreCursor', CoreCursor, 1), 'apply', 0)(J$.R(833, 'this', this, 0), J$.M(881, J$.G(857, J$.G(849, J$.R(841, 'Array', Array, 2), 'prototype', 0), 'slice', 0), 'call', 0)(J$.R(865, 'arguments', arguments, 2), J$.T(873, 0, 22, false))));
                            var self = J$.X1(921, J$.W(913, 'self', J$.R(905, 'this', this, 0), self, 1));
                            var state = J$.X1(953, J$.W(945, 'state', J$.G(937, J$.R(929, 'CommandCursor', CommandCursor, 1), 'INIT', 0), state, 1));
                            var streamOptions = J$.X1(977, J$.W(969, 'streamOptions', J$.T(961, {}, 11, false), streamOptions, 1));
                            var maxTimeMS = J$.X1(1001, J$.W(993, 'maxTimeMS', J$.T(985, null, 25, false), maxTimeMS, 1));
                            var promiseLibrary = J$.X1(1033, J$.W(1025, 'promiseLibrary', J$.G(1017, J$.R(1009, 'options', options, 0), 'promiseLibrary', 0), promiseLibrary, 1));
                            if (J$.X1(3585, J$.C(24, J$.U(10, '!', J$.R(1041, 'promiseLibrary', promiseLibrary, 0))))) {
                                J$.X1(1129, promiseLibrary = J$.W(1121, 'promiseLibrary', J$.X1(3577, J$.C(16, J$.B(26, '==', J$.U(18, 'typeof', J$.G(1057, J$.R(1049, 'global', global, 2), 'Promise', 0)), J$.T(1065, 'function', 21, false), 0))) ? J$.G(1081, J$.R(1073, 'global', global, 2), 'Promise', 0) : J$.G(1113, J$.F(1105, J$.R(1089, 'require', require, 2), 0)(J$.T(1097, 'es6-promise', 21, false)), 'Promise', 0), promiseLibrary, 0));
                            }
                            J$.X1(1177, J$.M(1169, J$.R(1137, 'Readable', Readable, 1), 'call', 0)(J$.R(1145, 'this', this, 0), J$.T(1161, {
                                objectMode: J$.T(1153, true, 23, false)
                            }, 11, false)));
                            J$.X1(1289, J$.P(1281, J$.R(1185, 'this', this, 0), 's', J$.T(1273, {
                                maxTimeMS: J$.R(1193, 'maxTimeMS', maxTimeMS, 0),
                                state: J$.R(1201, 'state', state, 0),
                                streamOptions: J$.R(1209, 'streamOptions', streamOptions, 0),
                                bson: J$.R(1217, 'bson', bson, 0),
                                ns: J$.R(1225, 'ns', ns, 0),
                                cmd: J$.R(1233, 'cmd', cmd, 0),
                                options: J$.R(1241, 'options', options, 0),
                                topology: J$.R(1249, 'topology', topology, 0),
                                topologyOptions: J$.R(1257, 'topologyOptions', topologyOptions, 0),
                                promiseLibrary: J$.R(1265, 'promiseLibrary', promiseLibrary, 0)
                            }, 11, false), 0));
                        } catch (J$e) {
                            J$.Ex(3593, J$e);
                        } finally {
                            if (J$.Fr(3601))
                                continue jalangiLabel3593;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1297), CommandCursor, 3));
            J$.X1(1457, J$.F(1449, J$.R(1425, 'inherits', inherits, 1), 0)(J$.R(1433, 'CommandCursor', CommandCursor, 1), J$.R(1441, 'Readable', Readable, 1)));
            var methodsToInherit = J$.X1(1625, J$.W(1617, 'methodsToInherit', J$.T(1609, [
                J$.T(1465, '_next', 21, false),
                J$.T(1473, 'next', 21, false),
                J$.T(1481, 'each', 21, false),
                J$.T(1489, 'forEach', 21, false),
                J$.T(1497, 'toArray', 21, false),
                J$.T(1505, 'rewind', 21, false),
                J$.T(1513, 'bufferedCount', 21, false),
                J$.T(1521, 'readBufferedDocuments', 21, false),
                J$.T(1529, 'close', 21, false),
                J$.T(1537, 'isClosed', 21, false),
                J$.T(1545, 'kill', 21, false),
                J$.T(1553, '_find', 21, false),
                J$.T(1561, '_getmore', 21, false),
                J$.T(1569, '_killcursor', 21, false),
                J$.T(1577, 'isDead', 21, false),
                J$.T(1585, 'explain', 21, false),
                J$.T(1593, 'isNotified', 21, false),
                J$.T(1601, 'isKilled', 21, false)
            ], 10, false), methodsToInherit, 3));
            for (var i = J$.X1(1649, J$.W(1641, 'i', J$.T(1633, 0, 22, false), i, 3)); J$.X1(3609, J$.C(32, J$.B(34, '<', J$.R(1657, 'i', i, 1), J$.G(1673, J$.R(1665, 'methodsToInherit', methodsToInherit, 1), 'length', 0), 0))); J$.X1(3617, J$.B(58, '-', i = J$.W(1697, 'i', J$.B(50, '+', J$.U(42, '+', J$.R(1689, 'i', i, 1)), J$.T(1681, 1, 22, false), 0), i, 2), J$.T(1705, 1, 22, false), 0))) {
                J$.X1(1809, J$.P(1801, J$.G(1721, J$.R(1713, 'CommandCursor', CommandCursor, 1), 'prototype', 0), J$.G(1745, J$.R(1729, 'methodsToInherit', methodsToInherit, 1), J$.R(1737, 'i', i, 1), 4), J$.G(1793, J$.G(1761, J$.R(1753, 'CoreCursor', CoreCursor, 1), 'prototype', 0), J$.G(1785, J$.R(1769, 'methodsToInherit', methodsToInherit, 1), J$.R(1777, 'i', i, 1), 4), 4), 2));
            }
            var define = J$.X1(1881, J$.W(1873, 'define', J$.P(1865, J$.R(1817, 'CommandCursor', CommandCursor, 1), 'define', J$.F(1857, J$.R(1825, 'Define', Define, 1), 1)(J$.T(1833, 'CommandCursor', 21, false), J$.R(1841, 'CommandCursor', CommandCursor, 1), J$.T(1849, true, 23, false)), 0), define, 3));
            J$.X1(2273, J$.P(2265, J$.G(1897, J$.R(1889, 'CommandCursor', CommandCursor, 1), 'prototype', 0), 'batchSize', J$.T(2257, function (value) {
                jalangiLabel3594:
                    while (true) {
                        try {
                            J$.Fe(2233, arguments.callee, this, arguments);
                            arguments = J$.N(2241, 'arguments', arguments, 4);
                            value = J$.N(2249, 'value', value, 4);
                            if (J$.X1(3625, J$.C(48, J$.C(40, J$.B(66, '==', J$.G(1921, J$.G(1913, J$.R(1905, 'this', this, 0), 's', 0), 'state', 0), J$.G(1937, J$.R(1929, 'CommandCursor', CommandCursor, 1), 'CLOSED', 0), 0)) ? J$._() : J$.M(1953, J$.R(1945, 'this', this, 0), 'isDead', 0)())))
                                throw J$.X1(2009, J$.Th(2001, J$.M(1993, J$.R(1961, 'MongoError', MongoError, 1), 'create', 0)(J$.T(1985, {
                                message: J$.T(1969, 'Cursor is closed', 21, false),
                                driver: J$.T(1977, true, 23, false)
                            }, 11, false))));
                            if (J$.X1(3633, J$.C(56, J$.B(82, '!=', J$.U(74, 'typeof', J$.R(2017, 'value', value, 0)), J$.T(2025, 'number', 21, false), 0))))
                                throw J$.X1(2081, J$.Th(2073, J$.M(2065, J$.R(2033, 'MongoError', MongoError, 1), 'create', 0)(J$.T(2057, {
                                message: J$.T(2041, 'batchSize requires an integer', 21, false),
                                driver: J$.T(2049, true, 23, false)
                            }, 11, false))));
                            if (J$.X1(3641, J$.C(64, J$.G(2113, J$.G(2105, J$.G(2097, J$.R(2089, 'this', this, 0), 's', 0), 'cmd', 0), 'cursor', 0))))
                                J$.X1(2169, J$.P(2161, J$.G(2145, J$.G(2137, J$.G(2129, J$.R(2121, 'this', this, 0), 's', 0), 'cmd', 0), 'cursor', 0), 'batchSize', J$.R(2153, 'value', value, 0), 0));
                            J$.X1(2201, J$.M(2193, J$.R(2177, 'this', this, 0), 'setCursorBatchSize', 0)(J$.R(2185, 'value', value, 0)));
                            return J$.X1(2225, J$.Rt(2217, J$.R(2209, 'this', this, 0)));
                        } catch (J$e) {
                            J$.Ex(3649, J$e);
                        } finally {
                            if (J$.Fr(3657))
                                continue jalangiLabel3594;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 2233), 0));
            J$.X1(2345, J$.M(2337, J$.R(2281, 'define', define, 1), 'classMethod', 0)(J$.T(2289, 'batchSize', 21, false), J$.T(2329, {
                callback: J$.T(2297, false, 23, false),
                promise: J$.T(2305, false, 23, false),
                returns: J$.T(2321, [J$.R(2313, 'CommandCursor', CommandCursor, 1)], 10, false)
            }, 11, false)));
            J$.X1(2529, J$.P(2521, J$.G(2361, J$.R(2353, 'CommandCursor', CommandCursor, 1), 'prototype', 0), 'maxTimeMS', J$.T(2513, function (value) {
                jalangiLabel3595:
                    while (true) {
                        try {
                            J$.Fe(2489, arguments.callee, this, arguments);
                            arguments = J$.N(2497, 'arguments', arguments, 4);
                            value = J$.N(2505, 'value', value, 4);
                            if (J$.X1(3665, J$.C(72, J$.B(90, '>', J$.G(2401, J$.M(2393, J$.G(2385, J$.G(2377, J$.R(2369, 'this', this, 0), 's', 0), 'topology', 0), 'lastIsMaster', 0)(), 'minWireVersion', 0), J$.T(2409, 2, 22, false), 0)))) {
                                J$.X1(2457, J$.P(2449, J$.G(2433, J$.G(2425, J$.R(2417, 'this', this, 0), 's', 0), 'cmd', 0), 'maxTimeMS', J$.R(2441, 'value', value, 0), 0));
                            }
                            return J$.X1(2481, J$.Rt(2473, J$.R(2465, 'this', this, 0)));
                        } catch (J$e) {
                            J$.Ex(3673, J$e);
                        } finally {
                            if (J$.Fr(3681))
                                continue jalangiLabel3595;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 2489), 0));
            J$.X1(2601, J$.M(2593, J$.R(2537, 'define', define, 1), 'classMethod', 0)(J$.T(2545, 'maxTimeMS', 21, false), J$.T(2585, {
                callback: J$.T(2553, false, 23, false),
                promise: J$.T(2561, false, 23, false),
                returns: J$.T(2577, [J$.R(2569, 'CommandCursor', CommandCursor, 1)], 10, false)
            }, 11, false)));
            J$.X1(2657, J$.P(2649, J$.G(2617, J$.R(2609, 'CommandCursor', CommandCursor, 1), 'prototype', 0), 'get', J$.G(2641, J$.G(2633, J$.R(2625, 'CommandCursor', CommandCursor, 1), 'prototype', 0), 'toArray', 0), 0));
            J$.X1(2713, J$.M(2705, J$.R(2665, 'define', define, 1), 'classMethod', 0)(J$.T(2673, 'get', 21, false), J$.T(2697, {
                callback: J$.T(2681, true, 23, false),
                promise: J$.T(2689, false, 23, false)
            }, 11, false)));
            J$.X1(2769, J$.M(2761, J$.R(2721, 'define', define, 1), 'classMethod', 0)(J$.T(2729, 'toArray', 21, false), J$.T(2753, {
                callback: J$.T(2737, true, 23, false),
                promise: J$.T(2745, true, 23, false)
            }, 11, false)));
            J$.X1(2825, J$.M(2817, J$.R(2777, 'define', define, 1), 'classMethod', 0)(J$.T(2785, 'each', 21, false), J$.T(2809, {
                callback: J$.T(2793, true, 23, false),
                promise: J$.T(2801, false, 23, false)
            }, 11, false)));
            J$.X1(2881, J$.M(2873, J$.R(2833, 'define', define, 1), 'classMethod', 0)(J$.T(2841, 'forEach', 21, false), J$.T(2865, {
                callback: J$.T(2849, true, 23, false),
                promise: J$.T(2857, false, 23, false)
            }, 11, false)));
            J$.X1(2937, J$.M(2929, J$.R(2889, 'define', define, 1), 'classMethod', 0)(J$.T(2897, 'next', 21, false), J$.T(2921, {
                callback: J$.T(2905, true, 23, false),
                promise: J$.T(2913, true, 23, false)
            }, 11, false)));
            J$.X1(2993, J$.M(2985, J$.R(2945, 'define', define, 1), 'classMethod', 0)(J$.T(2953, 'close', 21, false), J$.T(2977, {
                callback: J$.T(2961, true, 23, false),
                promise: J$.T(2969, true, 23, false)
            }, 11, false)));
            J$.X1(3065, J$.M(3057, J$.R(3001, 'define', define, 1), 'classMethod', 0)(J$.T(3009, 'isClosed', 21, false), J$.T(3049, {
                callback: J$.T(3017, false, 23, false),
                promise: J$.T(3025, false, 23, false),
                returns: J$.T(3041, [J$.R(3033, 'Boolean', Boolean, 2)], 10, false)
            }, 11, false)));
            J$.X1(3121, J$.M(3113, J$.R(3073, 'define', define, 1), 'classMethod', 0)(J$.T(3081, 'rewind', 21, false), J$.T(3105, {
                callback: J$.T(3089, false, 23, false),
                promise: J$.T(3097, false, 23, false)
            }, 11, false)));
            J$.X1(3193, J$.M(3185, J$.R(3129, 'define', define, 1), 'classMethod', 0)(J$.T(3137, 'bufferedCount', 21, false), J$.T(3177, {
                callback: J$.T(3145, false, 23, false),
                promise: J$.T(3153, false, 23, false),
                returns: J$.T(3169, [J$.R(3161, 'Number', Number, 2)], 10, false)
            }, 11, false)));
            J$.X1(3265, J$.M(3257, J$.R(3201, 'define', define, 1), 'classMethod', 0)(J$.T(3209, 'readBufferedDocuments', 21, false), J$.T(3249, {
                callback: J$.T(3217, false, 23, false),
                promise: J$.T(3225, false, 23, false),
                returns: J$.T(3241, [J$.R(3233, 'Array', Array, 2)], 10, false)
            }, 11, false)));
            J$.X1(3297, J$.P(3289, J$.R(3273, 'CommandCursor', CommandCursor, 1), 'INIT', J$.T(3281, 0, 22, false), 0));
            J$.X1(3329, J$.P(3321, J$.R(3305, 'CommandCursor', CommandCursor, 1), 'OPEN', J$.T(3313, 1, 22, false), 0));
            J$.X1(3361, J$.P(3353, J$.R(3337, 'CommandCursor', CommandCursor, 1), 'CLOSED', J$.T(3345, 2, 22, false), 0));
            J$.X1(3393, J$.P(3385, J$.R(3369, 'module', module, 2), 'exports', J$.R(3377, 'CommandCursor', CommandCursor, 1), 0));
        } catch (J$e) {
            J$.Ex(3689, J$e);
        } finally {
            if (J$.Sr(3697)) {
                J$.L();
                continue jalangiLabel3596;
            } else {
                J$.L();
                break jalangiLabel3596;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
