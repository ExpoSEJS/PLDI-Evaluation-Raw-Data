J$.iids = {"8":[9,18,9,61],"9":[1,20,1,27],"10":[9,18,9,48],"16":[20,18,20,61],"17":[1,28,1,32],"18":[9,18,9,61],"24":[57,9,57,46],"25":[1,20,1,33],"26":[20,18,20,48],"32":[59,9,59,37],"33":[1,20,1,33],"34":[20,18,20,61],"40":[61,9,61,160],"41":[1,20,1,33],"42":[57,9,57,46],"48":[61,9,61,205],"49":[2,26,2,38],"50":[58,23,58,94],"56":[61,9,61,205],"57":[2,26,2,45],"58":[59,9,59,37],"64":[70,9,70,33],"65":[2,26,2,45],"66":[61,9,61,37],"72":[76,9,76,32],"73":[2,26,2,45],"74":[61,9,61,66],"80":[86,15,86,30],"81":[3,1,3,13],"82":[61,70,61,131],"88":[92,29,92,91],"89":[3,1,3,14],"90":[61,70,61,160],"96":[92,29,92,91],"97":[4,14,4,21],"98":[61,164,61,205],"104":[93,29,93,91],"105":[4,22,4,32],"106":[67,36,67,64],"112":[93,29,93,91],"113":[4,14,4,33],"114":[68,41,68,81],"120":[97,26,97,61],"121":[4,43,4,50],"122":[70,9,70,33],"128":[96,9,96,24],"129":[4,51,4,61],"130":[81,32,81,56],"136":[135,35,135,87],"137":[4,43,4,62],"138":[86,15,86,30],"144":[141,31,141,85],"145":[4,74,4,81],"146":[92,135,92,146],"152":[142,9,142,39],"153":[4,82,4,92],"154":[92,135,92,151],"160":[142,43,142,75],"161":[4,74,4,93],"162":[96,9,96,24],"168":[142,9,142,75],"169":[4,74,4,101],"170":[97,26,97,47],"176":[142,79,142,111],"177":[4,107,4,114],"178":[97,26,97,61],"184":[142,9,142,111],"185":[4,115,4,121],"186":[135,35,135,74],"192":[143,25,143,54],"193":[4,107,4,122],"194":[135,35,135,87],"200":[143,25,143,54],"201":[4,107,4,129],"202":[141,31,141,72],"208":[142,9,142,111],"209":[4,146,4,151],"210":[141,31,141,85],"216":[146,9,146,38],"217":[4,146,4,164],"218":[168,25,168,54],"224":[146,9,146,55],"225":[4,179,4,185],"226":[169,13,169,41],"232":[147,21,147,50],"233":[4,179,4,196],"234":[169,45,169,69],"240":[147,21,147,50],"241":[4,216,4,222],"242":[173,13,173,41],"248":[150,16,150,53],"249":[4,216,4,238],"250":[173,45,173,78],"256":[153,28,153,42],"257":[4,251,4,257],"258":[178,25,178,49],"264":[146,9,146,55],"265":[4,251,4,266],"266":[178,51,178,54],"272":[156,9,156,38],"273":[4,279,4,286],"280":[156,42,156,72],"281":[4,287,4,301],"282":[178,51,178,54],"288":[156,9,156,72],"289":[4,279,4,302],"290":[179,17,179,45],"296":[156,76,156,108],"297":[4,279,4,307],"298":[179,49,179,77],"304":[156,9,156,108],"305":[4,279,4,316],"306":[188,9,188,68],"312":[157,25,157,37],"313":[4,327,4,334],"314":[188,72,188,92],"320":[156,9,156,108],"321":[4,335,4,348],"322":[193,9,193,18],"328":[160,9,160,38],"329":[4,327,4,349],"330":[206,9,206,35],"336":[161,21,161,33],"337":[4,359,4,365],"338":[217,13,217,32],"344":[160,9,160,38],"345":[4,359,4,371],"346":[220,13,220,53],"352":[168,9,168,54],"353":[4,393,4,399],"354":[226,9,226,36],"360":[169,13,169,69],"361":[4,393,4,417],"362":[238,9,238,48],"368":[169,13,169,69],"369":[4,14,4,33],"370":[242,13,242,45],"376":[172,16,172,53],"377":[4,14,4,33],"378":[244,20,244,52],"384":[173,13,173,78],"385":[4,43,4,62],"386":[246,20,246,52],"392":[173,13,173,78],"393":[4,43,4,62],"394":[258,9,258,29],"400":[172,16,172,53],"401":[4,74,4,101],"402":[258,9,258,43],"408":[168,9,168,54],"409":[4,74,4,101],"410":[265,9,265,35],"416":[179,17,179,77],"417":[4,107,4,129],"418":[268,9,268,24],"424":[179,17,179,77],"425":[4,107,4,129],"426":[268,9,268,38],"432":[178,25,178,49],"433":[4,146,4,164],"440":[177,9,177,22],"441":[4,146,4,164],"448":[188,9,188,92],"449":[4,179,4,196],"456":[188,9,188,92],"457":[4,179,4,196],"464":[193,9,193,18],"465":[4,216,4,238],"472":[206,9,206,35],"473":[4,216,4,238],"480":[211,13,211,30],"481":[4,251,4,266],"488":[211,34,211,52],"489":[4,251,4,266],"496":[211,13,211,52],"497":[4,279,4,316],"504":[211,13,211,52],"505":[4,279,4,316],"512":[214,13,214,16],"513":[4,327,4,349],"520":[217,13,217,32],"521":[4,327,4,349],"528":[220,13,220,53],"529":[4,359,4,371],"536":[226,9,226,36],"537":[4,359,4,371],"544":[229,9,229,25],"545":[4,393,4,417],"552":[232,9,232,42],"553":[4,393,4,417],"560":[235,9,235,39],"561":[6,5,6,9],"568":[238,9,238,48],"569":[6,14,6,18],"576":[246,20,246,52],"577":[6,14,6,20],"584":[244,20,244,52],"585":[6,5,6,20],"592":[242,13,242,45],"593":[6,5,6,21],"600":[256,9,256,24],"601":[5,28,7,2],"608":[258,9,258,43],"609":[5,28,7,2],"616":[263,9,263,28],"617":[5,28,7,2],"624":[265,9,265,35],"625":[5,28,7,2],"632":[268,9,268,38],"633":[5,28,7,2],"640":[273,17,273,20],"641":[5,28,7,2],"649":[8,1,8,21],"657":[8,1,8,31],"665":[9,25,9,29],"673":[9,25,9,31],"681":[9,25,9,41],"689":[9,25,9,48],"697":[9,52,9,61],"705":[9,64,9,68],"713":[9,64,9,70],"721":[9,64,9,80],"729":[9,64,9,87],"737":[9,90,9,95],"745":[9,18,9,95],"753":[9,18,9,95],"761":[11,12,11,16],"769":[11,12,11,18],"777":[11,12,11,28],"785":[11,12,11,37],"793":[12,12,12,26],"801":[13,16,13,20],"809":[14,17,14,23],"817":[10,20,15,6],"825":[10,20,15,6],"833":[10,20,15,6],"841":[16,5,16,9],"849":[16,5,16,11],"857":[16,24,16,28],"865":[16,5,16,28],"873":[16,5,16,29],"881":[17,12,17,31],"889":[17,32,17,36],"897":[17,38,17,44],"905":[17,38,17,51],"913":[17,53,17,61],"921":[17,12,17,62],"929":[17,12,17,62],"937":[17,5,17,63],"945":[8,41,18,2],"953":[8,41,18,2],"961":[8,41,18,2],"969":[8,41,18,2],"977":[8,41,18,2],"985":[8,41,18,2],"993":[8,1,18,2],"1001":[8,1,18,3],"1009":[19,1,19,21],"1017":[19,1,19,31],"1025":[20,25,20,29],"1033":[20,25,20,31],"1041":[20,25,20,41],"1049":[20,25,20,48],"1057":[20,52,20,61],"1065":[20,64,20,68],"1073":[20,64,20,70],"1081":[20,64,20,80],"1089":[20,64,20,87],"1097":[20,90,20,95],"1105":[20,18,20,95],"1113":[20,18,20,95],"1121":[22,12,22,16],"1129":[22,12,22,18],"1137":[22,12,22,28],"1145":[22,12,22,37],"1153":[23,12,23,26],"1161":[24,16,24,21],"1169":[25,17,25,23],"1177":[21,20,26,6],"1185":[21,20,26,6],"1193":[21,20,26,6],"1201":[27,5,27,9],"1209":[27,5,27,11],"1217":[27,24,27,28],"1225":[27,5,27,28],"1233":[27,5,27,29],"1241":[28,12,28,31],"1249":[28,32,28,36],"1257":[28,38,28,44],"1265":[28,38,28,51],"1273":[28,53,28,61],"1281":[28,12,28,62],"1289":[28,12,28,62],"1297":[28,5,28,63],"1305":[19,44,29,2],"1313":[19,44,29,2],"1321":[19,44,29,2],"1329":[19,44,29,2],"1337":[19,44,29,2],"1345":[19,44,29,2],"1353":[19,1,29,2],"1361":[19,1,29,3],"1369":[30,1,30,21],"1377":[30,1,30,31],"1385":[31,5,31,9],"1393":[31,20,31,34],"1401":[31,5,31,35],"1403":[31,5,31,19],"1409":[31,5,31,36],"1417":[30,45,32,2],"1425":[30,45,32,2],"1433":[30,45,32,2],"1441":[30,45,32,2],"1449":[30,1,32,2],"1457":[30,1,32,3],"1465":[33,1,33,21],"1473":[33,1,33,31],"1481":[34,5,34,9],"1489":[34,5,34,11],"1497":[34,5,34,21],"1505":[34,31,34,35],"1513":[34,5,34,35],"1521":[34,5,34,36],"1529":[35,12,35,16],"1537":[35,12,35,16],"1545":[35,5,35,17],"1553":[33,41,36,2],"1561":[33,41,36,2],"1569":[33,41,36,2],"1577":[33,1,36,2],"1585":[33,1,36,3],"1593":[37,1,37,21],"1601":[37,1,37,31],"1609":[39,12,39,16],"1617":[39,12,39,18],"1625":[39,12,39,28],"1633":[39,12,39,37],"1641":[40,16,40,17],"1649":[38,20,41,6],"1657":[38,20,41,6],"1665":[38,20,41,6],"1673":[42,5,42,9],"1681":[42,5,42,11],"1689":[42,24,42,28],"1697":[42,5,42,28],"1705":[42,5,42,29],"1713":[43,12,43,31],"1721":[43,32,43,36],"1729":[43,38,43,44],"1737":[43,38,43,51],"1745":[43,53,43,61],"1753":[43,12,43,62],"1761":[43,12,43,62],"1769":[43,5,43,63],"1777":[37,44,44,2],"1785":[37,44,44,2],"1793":[37,44,44,2],"1801":[37,44,44,2],"1809":[37,1,44,2],"1817":[37,1,44,3],"1825":[45,1,45,21],"1833":[45,1,45,31],"1841":[45,44,45,64],"1849":[45,44,45,74],"1857":[45,44,45,84],"1865":[45,1,45,84],"1873":[45,1,45,85],"1881":[46,1,46,21],"1889":[46,1,46,31],"1897":[48,12,48,16],"1905":[48,12,48,18],"1913":[48,12,48,28],"1921":[48,12,48,37],"1929":[49,16,49,17],"1937":[47,20,50,6],"1945":[47,20,50,6],"1953":[47,20,50,6],"1961":[51,5,51,9],"1969":[51,5,51,11],"1977":[51,24,51,28],"1985":[51,5,51,28],"1993":[51,5,51,29],"2001":[52,12,52,31],"2009":[52,32,52,36],"2017":[52,38,52,44],"2025":[52,38,52,51],"2033":[52,53,52,61],"2041":[52,12,52,62],"2049":[52,12,52,62],"2057":[52,5,52,63],"2065":[46,41,53,2],"2073":[46,41,53,2],"2081":[46,41,53,2],"2089":[46,41,53,2],"2097":[46,1,53,2],"2105":[46,1,53,3],"2113":[54,1,54,21],"2121":[54,1,54,31],"2129":[54,41,54,61],"2137":[54,41,54,71],"2145":[54,41,54,78],"2153":[54,1,54,78],"2161":[54,1,54,79],"2169":[56,20,56,25],"2177":[56,20,56,27],"2185":[56,20,56,32],"2193":[56,53,56,61],"2201":[56,63,56,68],"2209":[56,20,56,69],"2211":[56,20,56,52],"2217":[56,20,56,69],"2225":[56,20,56,69],"2233":[57,9,57,17],"2241":[57,21,57,26],"2249":[57,21,57,28],"2257":[57,21,57,46],"2265":[58,15,58,22],"2273":[58,23,58,66],"2281":[58,69,58,74],"2289":[58,69,58,76],"2297":[58,69,58,94],"2305":[58,15,58,95],"2313":[58,15,58,95],"2321":[58,9,58,96],"2329":[59,9,59,14],"2337":[59,9,59,16],"2345":[59,9,59,29],"2353":[59,33,59,37],"2361":[60,9,60,14],"2369":[60,9,60,16],"2377":[60,36,60,41],"2385":[60,42,60,49],"2393":[60,51,60,56],"2401":[60,51,60,58],"2409":[60,51,60,71],"2417":[60,32,60,72],"2425":[60,9,60,72],"2433":[60,9,60,73],"2441":[61,9,61,14],"2449":[61,9,61,16],"2457":[61,9,61,33],"2465":[61,36,61,37],"2473":[61,41,61,46],"2481":[61,41,61,48],"2489":[61,41,61,66],"2497":[61,70,61,75],"2505":[61,70,61,77],"2513":[61,70,61,99],"2521":[61,102,61,107],"2529":[61,102,61,109],"2537":[61,102,61,131],"2545":[61,135,61,140],"2553":[61,135,61,142],"2561":[61,135,61,160],"2569":[61,164,61,169],"2577":[61,164,61,171],"2585":[61,164,61,184],"2593":[61,164,61,194],"2601":[61,198,61,205],"2609":[62,9,62,14],"2617":[62,9,62,16],"2625":[62,9,62,24],"2633":[62,30,62,35],"2641":[62,30,62,37],"2649":[62,30,62,50],"2657":[62,9,62,51],"2659":[62,9,62,29],"2665":[62,9,62,52],"2673":[63,9,63,14],"2681":[63,9,63,16],"2689":[63,36,63,41],"2697":[63,42,63,49],"2705":[63,51,63,56],"2713":[63,51,63,58],"2721":[63,51,63,71],"2729":[63,32,63,72],"2737":[63,9,63,72],"2745":[63,9,63,73],"2753":[64,9,64,14],"2761":[64,9,64,16],"2769":[64,36,64,37],"2777":[64,9,64,37],"2785":[64,9,64,38],"2793":[65,9,65,14],"2801":[65,9,65,16],"2809":[65,41,65,42],"2817":[65,9,65,42],"2825":[65,9,65,43],"2833":[67,9,67,14],"2841":[67,9,67,16],"2849":[67,36,67,41],"2857":[67,36,67,43],"2865":[67,36,67,60],"2873":[67,63,67,64],"2881":[67,9,67,64],"2889":[67,9,67,65],"2897":[68,9,68,14],"2905":[68,9,68,16],"2913":[68,41,68,46],"2921":[68,41,68,48],"2929":[68,41,68,70],"2937":[68,73,68,81],"2945":[68,9,68,81],"2953":[68,9,68,82],"2961":[70,9,70,16],"2969":[70,20,70,26],"2977":[70,20,70,33],"2985":[71,9,71,14],"2993":[71,9,71,16],"3001":[71,9,71,27],"3009":[71,9,71,39],"3017":[72,20,72,25],"3025":[72,20,72,27],"3033":[72,20,72,40],"3041":[73,18,73,26],"3049":[73,18,73,30],"3057":[71,45,74,10],"3065":[71,9,74,11],"3067":[71,9,71,44],"3073":[71,9,74,12],"3081":[76,9,76,14],"3089":[76,23,76,31],"3097":[76,9,76,32],"3099":[76,9,76,22],"3105":[77,15,77,22],"3113":[77,23,77,63],"3121":[77,15,77,64],"3129":[77,15,77,64],"3137":[77,9,77,65],"3145":[79,9,79,14],"3153":[79,9,79,16],"3161":[79,9,79,29],"3169":[79,9,79,45],"3177":[79,51,79,56],"3185":[79,51,79,58],"3193":[79,51,79,71],"3201":[79,9,79,72],"3203":[79,9,79,50],"3209":[79,9,79,73],"3217":[80,9,80,14],"3225":[80,9,80,16],"3233":[80,9,80,29],"3241":[80,9,80,40],"3249":[80,46,80,54],"3257":[80,9,80,55],"3259":[80,9,80,45],"3265":[80,9,80,56],"3273":[81,9,81,14],"3281":[81,9,81,16],"3289":[81,32,81,37],"3297":[81,32,81,39],"3305":[81,32,81,52],"3313":[81,55,81,56],"3321":[81,9,81,56],"3329":[81,9,81,57],"3337":[83,12,83,17],"3345":[83,12,83,17],"3353":[83,5,83,18],"3361":[55,27,84,2],"3369":[55,27,84,2],"3377":[55,27,84,2],"3385":[55,27,84,2],"3393":[55,27,84,2],"3401":[55,27,84,2],"3409":[55,27,84,2],"3417":[55,27,84,2],"3425":[55,27,84,2],"3433":[86,15,86,22],"3441":[86,26,86,30],"3449":[86,33,86,35],"3457":[86,38,86,45],"3465":[86,15,86,45],"3473":[86,5,86,46],"3481":[87,16,87,20],"3489":[87,16,87,20],"3497":[87,16,87,20],"3505":[88,20,88,25],"3513":[88,20,88,25],"3521":[88,20,88,25],"3529":[89,21,89,25],"3537":[89,21,89,25],"3545":[89,21,89,25],"3553":[90,16,90,24],"3561":[90,16,90,29],"3569":[90,16,90,29],"3577":[90,16,90,29],"3585":[91,21,91,31],"3593":[91,21,91,46],"3601":[91,21,91,46],"3609":[91,21,91,46],"3617":[92,29,92,37],"3625":[92,29,92,49],"3633":[92,53,92,61],"3641":[92,53,92,73],"3649":[92,53,92,91],"3657":[92,94,92,102],"3665":[92,94,92,114],"3673":[92,94,92,132],"3681":[92,135,92,139],"3689":[92,142,92,146],"3697":[92,149,92,151],"3705":[92,29,92,151],"3713":[92,29,92,151],"3721":[93,29,93,37],"3729":[93,29,93,49],"3737":[93,53,93,61],"3745":[93,53,93,73],"3753":[93,53,93,91],"3761":[93,94,93,102],"3769":[93,94,93,114],"3777":[93,94,93,132],"3785":[93,135,93,139],"3793":[93,29,93,139],"3801":[93,29,93,139],"3809":[94,24,94,30],"3817":[94,44,94,56],"3825":[94,57,94,64],"3833":[94,44,94,65],"3841":[94,67,94,77],"3849":[94,79,94,86],"3857":[94,24,94,87],"3859":[94,24,94,43],"3865":[94,24,94,87],"3873":[94,24,94,87],"3881":[95,26,95,33],"3889":[95,26,95,48],"3897":[95,26,95,48],"3905":[95,26,95,48],"3913":[96,10,96,24],"3921":[97,33,97,39],"3929":[97,33,97,47],"3937":[97,51,97,61],"3945":[97,64,97,70],"3953":[97,64,97,78],"3961":[97,81,97,88],"3969":[97,89,97,102],"3977":[97,81,97,103],"3985":[97,81,97,111],"3993":[97,26,97,111],"4001":[97,9,97,112],"4009":[99,24,99,28],"4017":[99,24,99,28],"4025":[99,24,99,28],"4033":[100,24,100,25],"4041":[100,24,100,25],"4049":[100,24,100,25],"4057":[101,28,101,29],"4065":[101,28,101,29],"4073":[101,28,101,29],"4081":[102,33,102,34],"4089":[102,33,102,34],"4097":[102,33,102,34],"4105":[103,19,103,21],"4113":[103,19,103,21],"4121":[103,19,103,21],"4129":[105,13,105,14],"4137":[106,22,106,24],"4145":[107,29,107,31],"4153":[108,22,108,24],"4161":[109,20,109,21],"4169":[110,20,110,21],"4177":[111,19,111,20],"4185":[112,20,112,21],"4193":[113,19,113,20],"4201":[114,19,114,21],"4209":[104,22,115,6],"4217":[104,22,115,6],"4225":[104,22,115,6],"4233":[116,5,116,9],"4241":[117,21,117,31],"4249":[118,23,118,27],"4257":[119,23,119,24],"4265":[120,27,120,28],"4273":[121,32,121,33],"4281":[122,18,122,20],"4289":[123,23,123,35],"4297":[124,28,124,45],"4305":[125,28,125,45],"4313":[126,20,126,29],"4321":[127,15,127,19],"4329":[128,19,128,27],"4337":[129,18,129,25],"4345":[130,20,130,29],"4353":[131,19,131,27],"4361":[132,21,132,31],"4369":[133,25,133,39],"4377":[134,14,134,18],"4385":[135,42,135,49],"4393":[135,42,135,74],"4401":[135,78,135,87],"4409":[135,90,135,97],"4417":[135,90,135,122],"4425":[135,125,135,130],"4433":[116,14,136,6],"4441":[116,5,136,6],"4449":[116,5,136,7],"4457":[85,1,137,2],"4465":[85,1,137,2],"4473":[85,1,137,2],"4481":[85,1,137,2],"4489":[85,1,137,2],"4497":[85,1,137,2],"4505":[85,1,137,2],"4513":[85,1,137,2],"4521":[85,1,137,2],"4529":[85,1,137,2],"4537":[85,1,137,2],"4545":[85,1,137,2],"4553":[85,1,137,2],"4561":[85,1,137,2],"4569":[85,1,137,2],"4577":[85,1,137,2],"4585":[85,1,137,2],"4593":[85,1,137,2],"4601":[85,1,137,2],"4609":[85,1,137,2],"4617":[138,14,138,34],"4625":[138,48,138,54],"4633":[138,55,138,77],"4641":[138,79,138,99],"4649":[138,101,138,106],"4657":[138,44,138,107],"4665":[138,14,138,107],"4673":[138,14,138,107],"4681":[138,14,138,107],"4689":[139,1,139,21],"4697":[139,1,139,31],"4705":[140,15,140,21],"4713":[140,27,140,29],"4721":[140,15,140,30],"4723":[140,15,140,26],"4729":[140,31,140,32],"4737":[140,15,140,33],"4745":[140,15,140,33],"4753":[140,15,140,33],"4761":[141,38,141,42],"4769":[141,38,141,44],"4777":[141,38,141,52],"4785":[141,38,141,72],"4793":[141,76,141,85],"4801":[141,88,141,92],"4809":[141,88,141,94],"4817":[141,88,141,102],"4825":[141,88,141,122],"4833":[141,125,141,129],"4841":[141,125,141,131],"4849":[141,125,141,142],"4857":[141,125,141,144],"4865":[141,125,141,147],"4873":[141,125,141,155],"4881":[141,125,141,175],"4889":[141,31,141,175],"4897":[141,31,141,175],"4905":[142,9,142,11],"4913":[142,9,142,21],"4921":[142,25,142,27],"4929":[142,25,142,37],"4937":[142,25,142,39],"4945":[142,43,142,45],"4953":[142,43,142,56],"4961":[142,60,142,62],"4969":[142,60,142,73],"4977":[142,60,142,75],"4985":[142,79,142,81],"4993":[142,79,142,92],"5001":[142,96,142,98],"5009":[142,96,142,109],"5017":[142,96,142,111],"5025":[143,9,143,11],"5033":[143,12,143,15],"5041":[143,9,143,16],"5049":[143,25,143,27],"5057":[143,25,143,37],"5065":[143,41,143,43],"5073":[143,41,143,54],"5081":[143,57,143,62],"5089":[143,65,143,69],"5097":[143,9,143,69],"5105":[143,9,143,70],"5113":[144,16,144,35],"5121":[144,36,144,40],"5129":[144,42,144,48],"5137":[144,42,144,55],"5145":[144,57,144,59],"5153":[144,60,144,63],"5161":[144,57,144,64],"5169":[144,16,144,65],"5177":[144,16,144,65],"5185":[144,9,144,66],"5193":[146,9,146,11],"5201":[146,9,146,21],"5209":[146,25,146,27],"5217":[146,25,146,38],"5225":[146,42,146,44],"5233":[146,42,146,55],"5241":[147,21,147,23],"5249":[147,21,147,33],"5257":[147,37,147,39],"5265":[147,37,147,50],"5273":[147,53,147,58],"5281":[147,61,147,65],"5289":[147,21,147,65],"5297":[147,21,147,65],"5305":[149,16,149,18],"5313":[149,19,149,22],"5321":[149,16,149,23],"5329":[149,16,149,30],"5337":[150,16,150,18],"5345":[150,19,150,22],"5353":[150,16,150,23],"5361":[150,16,150,30],"5369":[150,34,150,36],"5377":[150,37,150,40],"5385":[150,34,150,41],"5393":[150,34,150,53],"5401":[151,20,151,25],"5409":[148,25,152,10],"5417":[148,25,152,10],"5425":[148,25,152,10],"5433":[153,9,153,18],"5441":[153,28,153,30],"5449":[153,31,153,34],"5457":[153,28,153,35],"5465":[153,28,153,42],"5473":[153,45,153,49],"5481":[153,52,153,57],"5489":[153,9,153,57],"5497":[153,9,153,58],"5505":[154,16,154,35],"5513":[154,36,154,40],"5521":[154,42,154,48],"5529":[154,42,154,55],"5537":[154,57,154,66],"5545":[154,16,154,67],"5553":[154,16,154,67],"5561":[154,9,154,68],"5569":[156,9,156,11],"5577":[156,9,156,21],"5585":[156,25,156,27],"5593":[156,25,156,38],"5601":[156,42,156,44],"5609":[156,42,156,54],"5617":[156,58,156,60],"5625":[156,58,156,70],"5633":[156,58,156,72],"5641":[156,76,156,78],"5649":[156,76,156,89],"5657":[156,93,156,95],"5665":[156,93,156,106],"5673":[156,93,156,108],"5681":[157,9,157,11],"5689":[157,12,157,15],"5697":[157,9,157,16],"5705":[157,25,157,27],"5713":[157,25,157,37],"5721":[157,40,157,41],"5729":[157,44,157,45],"5737":[157,9,157,45],"5745":[157,9,157,46],"5753":[158,16,158,35],"5761":[158,36,158,40],"5769":[158,42,158,48],"5777":[158,42,158,55],"5785":[158,57,158,59],"5793":[158,60,158,63],"5801":[158,57,158,64],"5809":[158,16,158,65],"5817":[158,16,158,65],"5825":[158,9,158,66],"5833":[160,9,160,11],"5841":[160,9,160,21],"5849":[160,25,160,27],"5857":[160,25,160,38],"5865":[161,21,161,23],"5873":[161,21,161,33],"5881":[161,36,161,37],"5889":[161,40,161,41],"5897":[161,21,161,41],"5905":[161,21,161,41],"5913":[163,16,163,18],"5921":[163,19,163,22],"5929":[163,16,163,23],"5937":[163,16,163,30],"5945":[164,20,164,25],"5953":[162,25,165,10],"5961":[162,25,165,10],"5969":[162,25,165,10],"5977":[166,16,166,35],"5985":[166,36,166,40],"5993":[166,42,166,48],"6001":[166,42,166,55],"6009":[166,57,166,66],"6017":[166,16,166,67],"6025":[166,16,166,67],"6033":[166,9,166,68],"6041":[168,9,168,11],"6049":[168,9,168,21],"6057":[168,25,168,27],"6065":[168,25,168,37],"6073":[168,25,168,46],"6081":[168,50,168,54],"6089":[169,13,169,32],"6097":[169,37,169,41],"6105":[169,45,169,47],"6113":[169,45,169,57],"6121":[169,45,169,61],"6129":[169,65,169,69],"6137":[170,13,170,15],"6145":[170,13,170,25],"6153":[170,36,170,44],"6161":[170,32,170,46],"6169":[170,13,170,46],"6177":[170,13,170,47],"6185":[171,16,171,35],"6193":[171,36,171,40],"6201":[171,42,171,48],"6209":[171,42,171,55],"6217":[171,57,171,59],"6225":[171,57,171,69],"6233":[171,16,171,70],"6241":[171,16,171,70],"6249":[171,9,171,71],"6257":[172,16,172,18],"6265":[172,16,172,28],"6273":[172,32,172,34],"6281":[172,32,172,44],"6289":[172,32,172,53],"6297":[173,13,173,32],"6305":[173,37,173,41],"6313":[173,45,173,47],"6321":[173,45,173,57],"6329":[173,45,173,66],"6337":[173,45,173,70],"6345":[173,74,173,78],"6353":[174,13,174,15],"6361":[174,13,174,25],"6369":[174,13,174,34],"6377":[174,45,174,53],"6385":[174,41,174,55],"6393":[174,13,174,55],"6401":[174,13,174,56],"6409":[175,16,175,35],"6417":[175,36,175,40],"6425":[175,42,175,48],"6433":[175,42,175,55],"6441":[175,57,175,59],"6449":[175,57,175,69],"6457":[175,57,175,78],"6465":[175,16,175,79],"6473":[175,16,175,79],"6481":[175,9,175,80],"6489":[177,9,177,11],"6497":[177,9,177,22],"6505":[178,22,178,23],"6513":[178,22,178,23],"6521":[178,22,178,23],"6529":[178,25,178,26],"6537":[178,29,178,31],"6545":[178,29,178,42],"6553":[178,29,178,49],"6569":[178,51,178,52],"6577":[178,51,178,54],"6593":[179,17,179,36],"6601":[179,41,179,45],"6609":[179,49,179,51],"6617":[179,49,179,62],"6625":[179,63,179,64],"6633":[179,49,179,65],"6641":[179,49,179,69],"6649":[179,73,179,77],"6657":[180,17,180,19],"6665":[180,17,180,30],"6673":[180,31,180,32],"6681":[180,17,180,33],"6689":[180,44,180,52],"6697":[180,40,180,54],"6705":[180,17,180,54],"6713":[180,17,180,55],"6721":[181,13,181,32],"6729":[181,33,181,37],"6737":[181,39,181,45],"6745":[181,39,181,52],"6753":[181,54,181,56],"6761":[181,54,181,67],"6769":[181,68,181,69],"6777":[181,54,181,70],"6785":[181,13,181,71],"6793":[181,13,181,72],"6801":[183,9,183,16],"6809":[183,9,183,16],"6817":[185,11,185,18],"6825":[185,19,185,135],"6833":[185,11,185,136],"6841":[185,11,185,136],"6849":[185,5,185,137],"6857":[139,38,186,2],"6865":[139,38,186,2],"6873":[139,38,186,2],"6881":[139,38,186,2],"6889":[139,38,186,2],"6897":[139,38,186,2],"6905":[139,38,186,2],"6913":[139,38,186,2],"6921":[139,38,186,2],"6929":[139,38,186,2],"6937":[139,1,186,2],"6945":[139,1,186,3],"6953":[187,1,187,21],"6961":[187,1,187,31],"6969":[188,9,188,13],"6977":[188,9,188,15],"6985":[188,9,188,26],"6993":[188,9,188,28],"7001":[188,9,188,31],"7009":[188,9,188,39],"7017":[188,9,188,59],"7025":[188,64,188,68],"7033":[188,72,188,80],"7041":[188,72,188,84],"7049":[188,88,188,92],"7057":[189,9,189,17],"7065":[189,28,189,36],"7073":[189,24,189,38],"7081":[189,9,189,38],"7089":[189,9,189,39],"7097":[190,12,190,31],"7105":[190,32,190,36],"7113":[190,38,190,44],"7121":[190,38,190,51],"7129":[190,53,190,61],"7137":[190,12,190,62],"7145":[190,12,190,62],"7153":[190,5,190,63],"7161":[187,41,191,2],"7169":[187,41,191,2],"7177":[187,41,191,2],"7185":[187,41,191,2],"7193":[187,1,191,2],"7201":[187,1,191,3],"7209":[192,1,192,21],"7217":[192,1,192,31],"7225":[193,10,193,18],"7233":[194,15,194,22],"7241":[194,23,194,68],"7249":[194,15,194,69],"7257":[194,15,194,69],"7265":[194,9,194,70],"7273":[196,5,196,9],"7281":[196,5,196,11],"7289":[196,36,196,44],"7297":[196,24,196,46],"7305":[196,5,196,46],"7313":[196,5,196,47],"7321":[197,16,197,36],"7329":[197,37,197,41],"7337":[197,12,197,42],"7345":[197,12,197,42],"7353":[197,5,197,43],"7361":[192,39,198,2],"7369":[192,39,198,2],"7377":[192,39,198,2],"7385":[192,39,198,2],"7393":[192,1,198,2],"7401":[192,1,198,3],"7409":[199,1,199,7],"7417":[199,23,199,43],"7425":[199,23,199,53],"7433":[199,55,199,63],"7441":[200,17,200,21],"7449":[202,16,202,20],"7457":[202,16,202,22],"7465":[202,16,202,35],"7473":[202,16,202,35],"7481":[202,9,202,36],"7489":[201,10,203,6],"7497":[201,10,203,6],"7505":[201,10,203,6],"7513":[199,65,204,2],"7521":[199,1,204,3],"7523":[199,1,199,22],"7529":[199,1,204,4],"7537":[206,9,206,13],"7545":[206,9,206,15],"7553":[206,9,206,23],"7561":[206,9,206,30],"7569":[206,34,206,35],"7577":[207,16,207,24],"7585":[207,25,207,29],"7593":[207,35,207,50],"7601":[207,51,207,55],"7609":[207,51,207,57],"7617":[207,51,207,68],"7625":[207,31,207,69],"7633":[207,16,207,70],"7641":[207,16,207,70],"7649":[207,9,207,71],"7657":[209,17,209,21],"7665":[209,17,209,23],"7673":[209,17,209,31],"7681":[209,17,209,39],"7683":[209,17,209,37],"7689":[209,17,209,39],"7697":[209,17,209,39],"7705":[211,13,211,16],"7713":[211,20,211,23],"7721":[211,20,211,30],"7729":[211,34,211,37],"7737":[211,41,211,44],"7745":[211,41,211,52],"7753":[212,20,212,28],"7761":[212,29,212,32],"7769":[212,20,212,33],"7777":[212,20,212,33],"7785":[212,13,212,34],"7793":[214,13,214,16],"7801":[215,13,215,16],"7809":[215,22,215,23],"7817":[215,13,215,23],"7825":[215,13,215,24],"7833":[216,27,216,44],"7841":[216,45,216,49],"7849":[216,51,216,56],"7857":[216,58,216,62],"7865":[216,58,216,64],"7873":[216,58,216,75],"7881":[216,77,216,80],"7889":[216,82,216,88],"7897":[216,27,216,89],"7905":[216,27,216,89],"7913":[216,27,216,89],"7921":[217,13,217,24],"7929":[217,28,217,32],"7937":[218,20,218,28],"7945":[218,29,218,33],"7953":[218,39,218,54],"7961":[218,55,218,59],"7969":[218,55,218,61],"7977":[218,55,218,72],"7985":[218,35,218,73],"7993":[218,20,218,74],"8001":[218,20,218,74],"8009":[218,13,218,75],"8017":[220,13,220,17],"8025":[220,13,220,19],"8033":[220,13,220,30],"8041":[220,13,220,42],"8049":[220,13,220,49],"8057":[220,52,220,53],"8065":[221,20,221,28],"8073":[221,29,221,36],"8081":[221,37,221,41],"8089":[221,37,221,43],"8097":[221,37,221,54],"8105":[221,37,221,66],"8113":[221,67,221,68],"8121":[221,37,221,69],"8129":[221,29,221,70],"8137":[221,76,221,91],"8145":[221,92,221,96],"8153":[221,92,221,98],"8161":[221,92,221,109],"8169":[221,72,221,110],"8177":[221,20,221,111],"8185":[221,20,221,111],"8193":[221,13,221,112],"8201":[223,9,223,24],"8209":[223,25,223,29],"8217":[223,31,223,39],"8225":[223,9,223,40],"8233":[223,9,223,41],"8241":[210,25,224,6],"8249":[210,25,224,6],"8257":[210,25,224,6],"8265":[210,25,224,6],"8273":[210,25,224,6],"8281":[210,25,224,6],"8289":[210,25,224,6],"8297":[210,25,224,6],"8305":[225,35,225,39],"8313":[225,24,225,41],"8321":[225,24,225,41],"8329":[225,24,225,41],"8337":[226,9,226,13],"8345":[226,9,226,15],"8353":[226,9,226,28],"8361":[226,32,226,36],"8369":[227,9,227,21],"8377":[227,37,227,41],"8385":[227,37,227,43],"8393":[227,37,227,56],"8401":[227,9,227,56],"8409":[227,9,227,57],"8417":[229,9,229,13],"8425":[229,9,229,25],"8433":[230,9,230,22],"8441":[230,37,230,41],"8449":[230,37,230,53],"8457":[230,9,230,53],"8465":[230,9,230,54],"8473":[232,9,232,13],"8481":[232,9,232,15],"8489":[232,9,232,23],"8497":[232,9,232,42],"8505":[233,9,233,21],"8513":[233,43,233,47],"8521":[233,9,233,47],"8529":[233,9,233,48],"8537":[235,9,235,13],"8545":[235,9,235,15],"8553":[235,9,235,23],"8561":[235,9,235,39],"8569":[236,9,236,21],"8577":[236,40,236,44],"8585":[236,9,236,44],"8593":[236,9,236,45],"8601":[238,9,238,13],"8609":[238,9,238,15],"8617":[238,9,238,40],"8625":[238,44,238,48],"8633":[239,9,239,21],"8641":[239,49,239,53],"8649":[239,9,239,53],"8657":[239,9,239,54],"8665":[242,13,242,18],"8673":[242,13,242,28],"8681":[242,32,242,38],"8689":[242,32,242,45],"8697":[243,13,243,17],"8705":[243,13,243,19],"8713":[243,13,243,28],"8721":[243,36,243,40],"8729":[243,36,243,42],"8737":[243,36,243,53],"8745":[243,36,243,63],"8753":[243,65,243,70],"8761":[243,65,243,81],"8769":[243,83,243,95],"8777":[243,97,243,110],"8785":[243,13,243,111],"8787":[243,13,243,35],"8793":[243,13,243,112],"8801":[244,20,244,25],"8809":[244,20,244,35],"8817":[244,39,244,45],"8825":[244,39,244,52],"8833":[245,13,245,17],"8841":[245,13,245,19],"8849":[245,13,245,28],"8857":[245,36,245,40],"8865":[245,36,245,42],"8873":[245,36,245,53],"8881":[245,36,245,63],"8889":[245,65,245,70],"8897":[245,65,245,81],"8905":[245,83,245,95],"8913":[245,97,245,110],"8921":[245,13,245,111],"8923":[245,13,245,35],"8929":[245,13,245,112],"8937":[246,20,246,25],"8945":[246,20,246,35],"8953":[246,39,246,45],"8961":[246,39,246,52],"8969":[247,13,247,17],"8977":[247,13,247,19],"8985":[247,13,247,28],"8993":[247,36,247,40],"9001":[247,36,247,42],"9009":[247,36,247,53],"9017":[247,36,247,63],"9025":[247,65,247,70],"9033":[247,65,247,81],"9041":[247,83,247,95],"9049":[247,97,247,110],"9057":[247,13,247,111],"9059":[247,13,247,35],"9065":[247,13,247,112],"9073":[250,9,250,12],"9081":[250,18,250,19],"9089":[250,9,250,19],"9097":[250,9,250,20],"9105":[251,9,251,17],"9113":[251,18,251,22],"9121":[251,24,251,41],"9129":[251,42,251,47],"9137":[251,49,251,54],"9145":[251,56,251,60],"9153":[251,56,251,62],"9161":[251,56,251,73],"9169":[251,75,251,78],"9177":[251,80,251,84],"9185":[251,24,251,85],"9193":[251,9,251,86],"9201":[251,9,251,87],"9209":[249,7,252,6],"9217":[205,23,253,2],"9225":[205,23,253,2],"9233":[205,23,253,2],"9241":[205,23,253,2],"9249":[205,23,253,2],"9257":[205,23,253,2],"9265":[205,23,253,2],"9273":[205,23,253,2],"9281":[205,23,253,2],"9289":[205,23,253,2],"9297":[254,1,254,21],"9305":[254,1,254,31],"9313":[255,16,255,20],"9321":[255,16,255,20],"9329":[255,16,255,20],"9337":[256,9,256,13],"9345":[256,9,256,15],"9353":[256,9,256,24],"9361":[257,19,257,26],"9369":[257,27,257,56],"9377":[257,15,257,57],"9385":[257,15,257,57],"9393":[257,9,257,58],"9401":[258,16,258,29],"9409":[258,33,258,43],"9417":[259,20,259,33],"9425":[259,20,259,33],"9433":[259,9,259,34],"9441":[261,9,261,13],"9449":[261,9,261,15],"9457":[261,31,261,44],"9465":[261,9,261,44],"9473":[261,9,261,45],"9481":[263,9,263,13],"9489":[263,9,263,15],"9497":[263,9,263,28],"9505":[264,9,264,13],"9513":[264,9,264,15],"9521":[264,9,264,23],"9529":[264,29,264,33],"9537":[264,29,264,35],"9545":[264,29,264,48],"9553":[264,9,264,49],"9555":[264,9,264,28],"9561":[264,9,264,50],"9569":[265,9,265,13],"9577":[265,9,265,15],"9585":[265,9,265,23],"9593":[265,9,265,30],"9601":[265,34,265,35],"9609":[266,15,266,22],"9617":[266,23,266,65],"9625":[266,15,266,66],"9633":[266,15,266,66],"9641":[266,9,266,67],"9649":[268,16,268,24],"9657":[268,28,268,38],"9665":[269,16,269,31],"9673":[269,32,269,36],"9681":[269,38,269,46],"9689":[269,16,269,47],"9697":[269,16,269,47],"9705":[269,9,269,48],"9713":[271,16,271,20],"9721":[271,16,271,22],"9729":[272,9,272,24],"9737":[272,25,272,29],"9745":[273,17,273,20],"9753":[274,24,274,30],"9761":[274,31,274,34],"9769":[274,24,274,35],"9777":[274,24,274,35],"9785":[274,17,274,36],"9793":[275,13,275,20],"9801":[275,21,275,22],"9809":[275,13,275,23],"9817":[275,13,275,24],"9825":[272,31,276,10],"9833":[272,31,276,10],"9841":[272,31,276,10],"9849":[272,31,276,10],"9857":[272,31,276,10],"9865":[272,9,276,11],"9873":[272,9,276,12],"9881":[271,38,277,6],"9889":[271,38,277,6],"9897":[271,38,277,6],"9905":[271,38,277,6],"9913":[271,38,277,6],"9921":[271,12,277,7],"9923":[271,16,271,37],"9929":[271,12,277,7],"9937":[271,5,277,8],"9945":[254,42,278,2],"9953":[254,42,278,2],"9961":[254,42,278,2],"9969":[254,42,278,2],"9977":[254,42,278,2],"9985":[254,42,278,2],"9993":[254,1,278,2],"10001":[254,1,278,3],"10009":[279,1,279,7],"10017":[279,20,279,29],"10025":[280,15,280,19],"10033":[281,14,281,19],"10041":[279,31,282,2],"10049":[279,1,282,3],"10051":[279,1,279,19],"10057":[279,1,282,4],"10065":[284,16,284,36],"10073":[284,37,284,45],"10081":[284,47,284,57],"10089":[284,59,284,66],"10097":[284,12,284,67],"10105":[284,12,284,67],"10113":[284,5,284,68],"10121":[283,31,285,2],"10129":[283,31,285,2],"10137":[283,31,285,2],"10145":[283,31,285,2],"10153":[283,31,285,2],"10161":[283,31,285,2],"10169":[283,31,285,2],"10177":[283,31,285,2],"10185":[286,1,286,24],"10193":[286,48,286,68],"10201":[286,1,286,68],"10209":[286,1,286,69],"10217":[287,1,287,7],"10225":[287,18,287,41],"10233":[287,1,287,41],"10241":[287,1,287,42],"10249":[288,1,288,7],"10257":[288,1,288,15],"10265":[288,23,288,43],"10273":[288,1,288,43],"10281":[288,1,288,44],"10289":[1,1,288,44],"10297":[1,1,288,44],"10305":[1,1,288,44],"10313":[1,1,288,44],"10321":[1,1,288,44],"10329":[1,1,288,44],"10337":[1,1,288,44],"10345":[1,1,288,44],"10353":[1,1,288,44],"10361":[1,1,288,44],"10369":[1,1,288,44],"10377":[1,1,288,44],"10385":[1,1,288,44],"10393":[1,1,288,44],"10401":[1,1,288,44],"10409":[1,1,288,44],"10417":[1,1,288,44],"10425":[85,1,137,2],"10433":[1,1,288,44],"10441":[1,1,288,44],"10449":[1,1,288,44],"10457":[1,1,288,44],"10465":[5,28,7,2],"10473":[5,28,7,2],"10481":[9,18,9,95],"10489":[8,41,18,2],"10497":[8,41,18,2],"10505":[20,18,20,95],"10513":[19,44,29,2],"10521":[19,44,29,2],"10529":[30,45,32,2],"10537":[30,45,32,2],"10545":[33,41,36,2],"10553":[33,41,36,2],"10561":[37,44,44,2],"10569":[37,44,44,2],"10577":[46,41,53,2],"10585":[46,41,53,2],"10593":[57,5,58,96],"10601":[59,5,60,73],"10609":[61,5,69,6],"10617":[70,5,75,6],"10625":[76,5,82,6],"10633":[55,27,84,2],"10641":[55,27,84,2],"10649":[86,15,86,45],"10657":[92,29,92,151],"10665":[93,29,93,139],"10673":[97,26,97,111],"10681":[96,5,98,6],"10689":[135,35,135,130],"10697":[85,1,137,2],"10705":[85,1,137,2],"10713":[141,31,141,175],"10721":[143,25,143,69],"10729":[142,5,145,6],"10737":[147,21,147,65],"10745":[153,28,153,57],"10753":[146,5,155,6],"10761":[157,25,157,45],"10769":[156,5,159,6],"10777":[161,21,161,41],"10785":[160,5,167,6],"10793":[169,9,170,47],"10801":[173,9,174,56],"10809":[172,12,176,6],"10817":[168,5,176,6],"10825":[179,13,180,55],"10833":[178,9,182,10],"10841":[178,9,182,10],"10849":[177,5,184,6],"10857":[139,38,186,2],"10865":[139,38,186,2],"10873":[188,5,189,39],"10881":[187,41,191,2],"10889":[187,41,191,2],"10897":[193,5,195,6],"10905":[192,39,198,2],"10913":[192,39,198,2],"10921":[201,10,203,6],"10929":[201,10,203,6],"10937":[206,5,208,6],"10945":[211,9,213,10],"10953":[214,9,215,24],"10961":[217,9,219,10],"10969":[220,9,222,10],"10977":[210,25,224,6],"10985":[210,25,224,6],"10993":[226,5,228,6],"11001":[229,5,231,6],"11009":[232,5,234,6],"11017":[235,5,237,6],"11025":[238,5,240,6],"11033":[246,16,248,10],"11041":[244,16,248,10],"11049":[242,9,248,10],"11057":[205,23,253,2],"11065":[205,23,253,2],"11073":[256,5,257,58],"11081":[258,5,262,6],"11089":[263,5,264,50],"11097":[265,5,267,6],"11105":[268,5,270,6],"11113":[273,13,274,36],"11121":[272,31,276,10],"11129":[272,31,276,10],"11137":[271,38,277,6],"11145":[271,38,277,6],"11153":[254,42,278,2],"11161":[254,42,278,2],"11169":[283,31,285,2],"11177":[283,31,285,2],"11185":[1,1,288,44],"11193":[1,1,288,44],"nBranches":160,"originalCodeFileName":"/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/node_modules/mongodb/lib/bulk/ordered.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/node_modules/mongodb/lib/bulk/ordered_jalangi_.js","code":"\"use strict\";\n\nvar common = require('./common')\n\t, utils = require('../utils')\n  , toError = require('../utils').toError\n\t, f = require('util').format\n\t, shallowClone = utils.shallowClone\n  , WriteError = common.WriteError\n  , BulkWriteResult = common.BulkWriteResult\n  , LegacyOp = common.LegacyOp\n  , ObjectID = require('mongodb-core').BSON.ObjectID\n  , Define = require('../metadata')\n  , Batch = common.Batch\n  , mergeBatchResults = common.mergeBatchResults;\n\n/**\n * Create a FindOperatorsOrdered instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @return {FindOperatorsOrdered} a FindOperatorsOrdered instance.\n */\nvar FindOperatorsOrdered = function(self) {\n  this.s = self.s;\n}\n\n/**\n * Add a single update document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.update = function(updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , u: updateDocument\n    , multi: true\n    , upsert: upsert\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n}\n\n/**\n * Add a single update one document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.updateOne = function(updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , u: updateDocument\n    , multi: false\n    , upsert: upsert\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n}\n\n/**\n * Add a replace one operation to the bulk operation\n *\n * @method\n * @param {object} doc the new document to replace the existing one with\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.replaceOne = function(updateDocument) {\n  this.updateOne(updateDocument);\n}\n\n/**\n * Upsert modifier for update bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {FindOperatorsOrdered}\n */\nFindOperatorsOrdered.prototype.upsert = function() {\n  this.s.currentOp.upsert = true;\n  return this;\n}\n\n/**\n * Add a remove one operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.deleteOne = function() {\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , limit: 1\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n}\n\n// Backward compatibility\nFindOperatorsOrdered.prototype.removeOne = FindOperatorsOrdered.prototype.deleteOne;\n\n/**\n * Add a remove operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.delete = function() {\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , limit: 0\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n}\n\n// Backward compatibility\nFindOperatorsOrdered.prototype.remove = FindOperatorsOrdered.prototype.delete;\n\n// Add to internal list of documents\nvar addToOperationsList = function(_self, docType, document) {\n  // Get the bsonSize\n  var bsonSize = _self.s.bson.calculateObjectSize(document, false);\n\n  // Throw error if the doc is bigger than the max BSON size\n  if(bsonSize >= _self.s.maxBatchSizeBytes) throw toError(\"document is larger than the maximum size \" + _self.s.maxBatchSizeBytes);\n  // Create a new batch object if we don't have a current one\n  if(_self.s.currentBatch == null) _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n\n  // Check if we need to create a new batch\n  if(((_self.s.currentBatchSize + 1) >= _self.s.maxWriteBatchSize)\n    || ((_self.s.currentBatchSizeBytes +  _self.s.currentBatchSizeBytes) >= _self.s.maxBatchSizeBytes)\n    || (_self.s.currentBatch.batchType != docType)) {\n    // Save the batch to the execution stack\n    _self.s.batches.push(_self.s.currentBatch);\n\n    // Create a new batch\n    _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n\n    // Reset the current size trackers\n    _self.s.currentBatchSize = 0;\n    _self.s.currentBatchSizeBytes = 0;\n  } else {\n    // Update current batch size\n    _self.s.currentBatchSize = _self.s.currentBatchSize + 1;\n    _self.s.currentBatchSizeBytes = _self.s.currentBatchSizeBytes + bsonSize;\n  }\n\n  if(docType == common.INSERT) {\n    _self.s.bulkResult.insertedIds.push({index: _self.s.currentIndex, _id: document._id});\n  }\n\n  // We have an array of documents\n  if(Array.isArray(document)) {\n    throw toError(\"operation passed in cannot be an Array\");\n  } else {\n    _self.s.currentBatch.originalIndexes.push(_self.s.currentIndex);\n    _self.s.currentBatch.operations.push(document)\n    _self.s.currentIndex = _self.s.currentIndex + 1;\n  }\n\n  // Return self\n  return _self;\n}\n\n/**\n * Create a new OrderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @property {number} length Get the number of operations in the bulk.\n * @return {OrderedBulkOperation} a OrderedBulkOperation instance.\n */\nfunction OrderedBulkOperation(topology, collection, options) {\n\toptions = options == null ? {} : options;\n\t// TODO Bring from driver information in isMaster\n\tvar self = this;\n\tvar executed = false;\n\n\t// Current item\n\tvar currentOp = null;\n\n\t// Handle to the bson serializer, used to calculate running sizes\n\tvar bson = topology.bson;\n\n\t// Namespace for the operation\n  var namespace = collection.collectionName;\n\n  // Set max byte size\n\tvar maxBatchSizeBytes = topology.isMasterDoc && topology.isMasterDoc.maxBsonObjectSize\n    ? topology.isMasterDoc.maxBsonObjectSize : (1024*1025*16);\n\tvar maxWriteBatchSize = topology.isMasterDoc && topology.isMasterDoc.maxWriteBatchSize \n    ? topology.isMasterDoc.maxWriteBatchSize : 1000;\n\n  // Get the write concern\n  var writeConcern = common.writeConcern(shallowClone(options), collection, options);\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary;\n\n  // No promise library selected fall back\n  if(!promiseLibrary) {\n    promiseLibrary = typeof global.Promise == 'function' ?\n      global.Promise : require('es6-promise').Promise;\n  }\n\n  // Current batch\n  var currentBatch = null;\n  var currentIndex = 0;\n  var currentBatchSize = 0;\n  var currentBatchSizeBytes = 0;\n  var batches = [];\n\n  // Final results\n  var bulkResult = {\n  \t  ok: 1\n    , writeErrors: []\n    , writeConcernErrors: []\n    , insertedIds: []\n    , nInserted: 0\n    , nUpserted: 0\n    , nMatched: 0\n    , nModified: 0\n    , nRemoved: 0\n    , upserted: []\n  };\n\n  // Internal state\n  this.s = {\n    // Final result\n      bulkResult: bulkResult\n    // Current batch state\n    , currentBatch: null\n    , currentIndex: 0\n    , currentBatchSize: 0\n    , currentBatchSizeBytes: 0\n    , batches: []\n    // Write concern\n    , writeConcern: writeConcern\n    // Max batch size options\n    , maxBatchSizeBytes: maxBatchSizeBytes\n    , maxWriteBatchSize: maxWriteBatchSize\n    // Namespace\n    , namespace: namespace\n    // BSON\n    , bson: bson\n    // Topology\n    , topology: topology\n    // Options\n    , options: options\n    // Current operation\n    , currentOp: currentOp\n    // Executed\n    , executed: executed\n    // Collection\n    , collection: collection\n    // Promise Library\n    , promiseLibrary: promiseLibrary\n\t\t// Fundamental error\n\t\t, err: null\n    // Bypass validation\n    , bypassDocumentValidation: typeof options.bypassDocumentValidation == 'boolean' ? options.bypassDocumentValidation : false\n  }\n}\n\nvar define = OrderedBulkOperation.define = new Define('OrderedBulkOperation', OrderedBulkOperation, false);\n\nOrderedBulkOperation.prototype.raw = function(op) {\n  var key = Object.keys(op)[0];\n\n  // Set up the force server object id\n  var forceServerObjectId = typeof this.s.options.forceServerObjectId == 'boolean'\n    ? this.s.options.forceServerObjectId : this.s.collection.s.db.options.forceServerObjectId;\n\n  // Update operations\n  if((op.updateOne && op.updateOne.q)\n    || (op.updateMany && op.updateMany.q)\n    || (op.replaceOne && op.replaceOne.q)) {\n    op[key].multi = op.updateOne || op.replaceOne ? false : true;\n    return addToOperationsList(this, common.UPDATE, op[key]);\n  }\n\n  // Crud spec update format\n  if(op.updateOne || op.updateMany || op.replaceOne) {\n    var multi = op.updateOne || op.replaceOne ? false : true;\n    var operation = {q: op[key].filter, u: op[key].update || op[key].replacement, multi: multi}\n    operation.upsert = op[key].upsert ? true: false;\n    return addToOperationsList(this, common.UPDATE, operation);\n  }\n\n  // Remove operations\n  if(op.removeOne || op.removeMany || (op.deleteOne && op.deleteOne.q) || op.deleteMany && op.deleteMany.q) {\n    op[key].limit = op.removeOne ? 1 : 0;\n    return addToOperationsList(this, common.REMOVE, op[key]);\n  }\n\n  // Crud spec delete operations, less efficient\n  if(op.deleteOne || op.deleteMany) {\n    var limit = op.deleteOne ? 1 : 0;\n    var operation = {q: op[key].filter, limit: limit}\n    return addToOperationsList(this, common.REMOVE, operation);\n  }\n\n  // Insert operations\n  if(op.insertOne && op.insertOne.document == null) {\n    if(forceServerObjectId !== true && op.insertOne._id == null) op.insertOne._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne);\n  } else if(op.insertOne && op.insertOne.document) {\n    if(forceServerObjectId !== true && op.insertOne.document._id == null) op.insertOne.document._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne.document);\n  }\n\n  if(op.insertMany) {\n    for(var i = 0; i < op.insertMany.length; i++) {\n      if(forceServerObjectId !== true && op.insertMany[i]._id == null) op.insertMany[i]._id = new ObjectID();\n      addToOperationsList(this, common.INSERT, op.insertMany[i]);\n    }\n\n    return;\n  }\n\n  // No valid type of operation\n  throw toError(\"bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany\");\n}\n\n/**\n * Add a single insert document to the bulk operation\n *\n * @param {object} doc the document to insert\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nOrderedBulkOperation.prototype.insert = function(document) {\n  if(this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null) document._id = new ObjectID();\n  return addToOperationsList(this, common.INSERT, document);\n}\n\n/**\n * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne\n *\n * @method\n * @param {object} selector The selector for the bulk operation.\n * @throws {MongoError}\n * @return {FindOperatorsOrdered}\n */\nOrderedBulkOperation.prototype.find = function(selector) {\n  if (!selector) {\n    throw toError(\"Bulk find operation must specify a selector\");\n  }\n\n  // Save a current selector\n  this.s.currentOp = {\n    selector: selector\n  }\n\n  return new FindOperatorsOrdered(this);\n}\n\nObject.defineProperty(OrderedBulkOperation.prototype, 'length', {\n  enumerable: true,\n  get: function() {\n    return this.s.currentIndex;\n  }\n});\n\n//\n// Execute next write command in a chain\nvar executeCommands = function(self, callback) {\n  if(self.s.batches.length == 0) {\n    return callback(null, new BulkWriteResult(self.s.bulkResult));\n  }\n\n  // Ordered execution of the command\n  var batch = self.s.batches.shift();\n\n  var resultHandler = function(err, result) {\n\t\t// Error is a driver related error not a bulk op error, terminate\n\t\tif(err && err.driver || err && err.message) {\n\t\t\treturn callback(err);\n\t\t}\n\n    // If we have and error\n    if(err) err.ok = 0;\n    // Merge the results together\n    var mergeResult = mergeBatchResults(true, batch, self.s.bulkResult, err, result);\n    if(mergeResult != null) {\n      return callback(null, new BulkWriteResult(self.s.bulkResult));\n    }\n\n    // If we are ordered and have errors and they are\n    // not all replication errors terminate the operation\n    if(self.s.bulkResult.writeErrors.length > 0) {\n      return callback(toError(self.s.bulkResult.writeErrors[0]), new BulkWriteResult(self.s.bulkResult));\n    }\n\n    // Execute the next command in line\n    executeCommands(self, callback);\n  }\n\n  var finalOptions = {ordered: true}\n  if(self.s.writeConcern != null) {\n    finalOptions.writeConcern = self.s.writeConcern;\n  }\n\n\t// Set an operationIf if provided\n\tif(self.operationId) {\n\t\tresultHandler.operationId = self.operationId;\n\t}\n\n\t// Serialize functions\n\tif(self.s.options.serializeFunctions) {\n\t\tfinalOptions.serializeFunctions = true\n\t}\n\n  // Serialize functions\n  if(self.s.options.ignoreUndefined) {\n    finalOptions.ignoreUndefined = true\n  }\n\n  // Is the bypassDocumentValidation options specific\n  if(self.s.bypassDocumentValidation == true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n\n  try {\n    if(batch.batchType == common.INSERT) {\n      self.s.topology.insert(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if(batch.batchType == common.UPDATE) {\n      self.s.topology.update(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if(batch.batchType == common.REMOVE) {\n      self.s.topology.remove(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    }\n  } catch(err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    callback(null, mergeBatchResults(false, batch, self.s.bulkResult, err, null));\n  }\n}\n\n/**\n * The callback format for results\n * @callback OrderedBulkOperation~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {BulkWriteResult} result The bulk write result.\n */\n\n/**\n * Execute the ordered bulk operation\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {OrderedBulkOperation~resultCallback} [callback] The result callback\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\nOrderedBulkOperation.prototype.execute = function(_writeConcern, callback) {\n  var self = this;\n  if(this.s.executed) throw new toError(\"batch cannot be re-executed\");\n  if(typeof _writeConcern == 'function') {\n    callback = _writeConcern;\n  } else {\n    this.s.writeConcern = _writeConcern;\n  }\n\n  // If we have current batch\n  if(this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n\n  // If we have no operations in the bulk raise an error\n  if(this.s.batches.length == 0) {\n    throw toError(\"Invalid Operation, No operations in bulk\");\n  }\n\n  // Execute using callback\n  if(typeof callback == 'function') {\n\t\treturn executeCommands(this, callback);\n\t}\n\n  // Return a Promise\n  return new this.s.promiseLibrary(function(resolve, reject) {\n    executeCommands(self, function(err, r) {\n      if(err) return reject(err);\n      resolve(r);\n    });\n  });\n}\n\ndefine.classMethod('execute', {callback: true, promise:false});\n\n/**\n * Returns an unordered batch object\n * @ignore\n */\nvar initializeOrderedBulkOp = function(topology, collection, options) {\n\treturn new OrderedBulkOperation(topology, collection, options);\n}\n\ninitializeOrderedBulkOp.OrderedBulkOperation = OrderedBulkOperation;\nmodule.exports = initializeOrderedBulkOp;\nmodule.exports.Bulk = OrderedBulkOperation;\n"};
jalangiLabel3616:
    while (true) {
        try {
            J$.Se(10289, '/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/node_modules/mongodb/lib/bulk/ordered_jalangi_.js', '/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongoose/node_modules/mongodb/lib/bulk/ordered.js');
            function OrderedBulkOperation(topology, collection, options) {
                jalangiLabel3605:
                    while (true) {
                        try {
                            J$.Fe(4457, arguments.callee, this, arguments);
                            arguments = J$.N(4465, 'arguments', arguments, 4);
                            topology = J$.N(4473, 'topology', topology, 4);
                            collection = J$.N(4481, 'collection', collection, 4);
                            options = J$.N(4489, 'options', options, 4);
                            J$.N(4497, 'self', self, 0);
                            J$.N(4505, 'executed', executed, 0);
                            J$.N(4513, 'currentOp', currentOp, 0);
                            J$.N(4521, 'bson', bson, 0);
                            J$.N(4529, 'namespace', namespace, 0);
                            J$.N(4537, 'maxBatchSizeBytes', maxBatchSizeBytes, 0);
                            J$.N(4545, 'maxWriteBatchSize', maxWriteBatchSize, 0);
                            J$.N(4553, 'writeConcern', writeConcern, 0);
                            J$.N(4561, 'promiseLibrary', promiseLibrary, 0);
                            J$.N(4569, 'currentBatch', currentBatch, 0);
                            J$.N(4577, 'currentIndex', currentIndex, 0);
                            J$.N(4585, 'currentBatchSize', currentBatchSize, 0);
                            J$.N(4593, 'currentBatchSizeBytes', currentBatchSizeBytes, 0);
                            J$.N(4601, 'batches', batches, 0);
                            J$.N(4609, 'bulkResult', bulkResult, 0);
                            J$.X1(3473, options = J$.W(3465, 'options', J$.X1(10649, J$.C(80, J$.B(138, '==', J$.R(3433, 'options', options, 0), J$.T(3441, null, 25, false), 0))) ? J$.T(3449, {}, 11, false) : J$.R(3457, 'options', options, 0), options, 0));
                            var self = J$.X1(3497, J$.W(3489, 'self', J$.R(3481, 'this', this, 0), self, 1));
                            var executed = J$.X1(3521, J$.W(3513, 'executed', J$.T(3505, false, 23, false), executed, 1));
                            var currentOp = J$.X1(3545, J$.W(3537, 'currentOp', J$.T(3529, null, 25, false), currentOp, 1));
                            var bson = J$.X1(3577, J$.W(3569, 'bson', J$.G(3561, J$.R(3553, 'topology', topology, 0), 'bson', 0), bson, 1));
                            var namespace = J$.X1(3609, J$.W(3601, 'namespace', J$.G(3593, J$.R(3585, 'collection', collection, 0), 'collectionName', 0), namespace, 1));
                            var maxBatchSizeBytes = J$.X1(3713, J$.W(3705, 'maxBatchSizeBytes', J$.X1(10657, J$.C(96, J$.C(88, J$.G(3625, J$.R(3617, 'topology', topology, 0), 'isMasterDoc', 0)) ? J$.G(3649, J$.G(3641, J$.R(3633, 'topology', topology, 0), 'isMasterDoc', 0), 'maxBsonObjectSize', 0) : J$._())) ? J$.G(3673, J$.G(3665, J$.R(3657, 'topology', topology, 0), 'isMasterDoc', 0), 'maxBsonObjectSize', 0) : J$.B(154, '*', J$.B(146, '*', J$.T(3681, 1024, 22, false), J$.T(3689, 1025, 22, false), 0), J$.T(3697, 16, 22, false), 0), maxBatchSizeBytes, 1));
                            var maxWriteBatchSize = J$.X1(3801, J$.W(3793, 'maxWriteBatchSize', J$.X1(10665, J$.C(112, J$.C(104, J$.G(3729, J$.R(3721, 'topology', topology, 0), 'isMasterDoc', 0)) ? J$.G(3753, J$.G(3745, J$.R(3737, 'topology', topology, 0), 'isMasterDoc', 0), 'maxWriteBatchSize', 0) : J$._())) ? J$.G(3777, J$.G(3769, J$.R(3761, 'topology', topology, 0), 'isMasterDoc', 0), 'maxWriteBatchSize', 0) : J$.T(3785, 1000, 22, false), maxWriteBatchSize, 1));
                            var writeConcern = J$.X1(3873, J$.W(3865, 'writeConcern', J$.M(3857, J$.R(3809, 'common', common, 1), 'writeConcern', 0)(J$.F(3833, J$.R(3817, 'shallowClone', shallowClone, 1), 0)(J$.R(3825, 'options', options, 0)), J$.R(3841, 'collection', collection, 0), J$.R(3849, 'options', options, 0)), writeConcern, 1));
                            var promiseLibrary = J$.X1(3905, J$.W(3897, 'promiseLibrary', J$.G(3889, J$.R(3881, 'options', options, 0), 'promiseLibrary', 0), promiseLibrary, 1));
                            if (J$.X1(10681, J$.C(128, J$.U(162, '!', J$.R(3913, 'promiseLibrary', promiseLibrary, 0))))) {
                                J$.X1(4001, promiseLibrary = J$.W(3993, 'promiseLibrary', J$.X1(10673, J$.C(120, J$.B(178, '==', J$.U(170, 'typeof', J$.G(3929, J$.R(3921, 'global', global, 2), 'Promise', 0)), J$.T(3937, 'function', 21, false), 0))) ? J$.G(3953, J$.R(3945, 'global', global, 2), 'Promise', 0) : J$.G(3985, J$.F(3977, J$.R(3961, 'require', require, 2), 0)(J$.T(3969, 'es6-promise', 21, false)), 'Promise', 0), promiseLibrary, 0));
                            }
                            var currentBatch = J$.X1(4025, J$.W(4017, 'currentBatch', J$.T(4009, null, 25, false), currentBatch, 1));
                            var currentIndex = J$.X1(4049, J$.W(4041, 'currentIndex', J$.T(4033, 0, 22, false), currentIndex, 1));
                            var currentBatchSize = J$.X1(4073, J$.W(4065, 'currentBatchSize', J$.T(4057, 0, 22, false), currentBatchSize, 1));
                            var currentBatchSizeBytes = J$.X1(4097, J$.W(4089, 'currentBatchSizeBytes', J$.T(4081, 0, 22, false), currentBatchSizeBytes, 1));
                            var batches = J$.X1(4121, J$.W(4113, 'batches', J$.T(4105, [], 10, false), batches, 1));
                            var bulkResult = J$.X1(4225, J$.W(4217, 'bulkResult', J$.T(4209, {
                                ok: J$.T(4129, 1, 22, false),
                                writeErrors: J$.T(4137, [], 10, false),
                                writeConcernErrors: J$.T(4145, [], 10, false),
                                insertedIds: J$.T(4153, [], 10, false),
                                nInserted: J$.T(4161, 0, 22, false),
                                nUpserted: J$.T(4169, 0, 22, false),
                                nMatched: J$.T(4177, 0, 22, false),
                                nModified: J$.T(4185, 0, 22, false),
                                nRemoved: J$.T(4193, 0, 22, false),
                                upserted: J$.T(4201, [], 10, false)
                            }, 11, false), bulkResult, 1));
                            J$.X1(4449, J$.P(4441, J$.R(4233, 'this', this, 0), 's', J$.T(4433, {
                                bulkResult: J$.R(4241, 'bulkResult', bulkResult, 0),
                                currentBatch: J$.T(4249, null, 25, false),
                                currentIndex: J$.T(4257, 0, 22, false),
                                currentBatchSize: J$.T(4265, 0, 22, false),
                                currentBatchSizeBytes: J$.T(4273, 0, 22, false),
                                batches: J$.T(4281, [], 10, false),
                                writeConcern: J$.R(4289, 'writeConcern', writeConcern, 0),
                                maxBatchSizeBytes: J$.R(4297, 'maxBatchSizeBytes', maxBatchSizeBytes, 0),
                                maxWriteBatchSize: J$.R(4305, 'maxWriteBatchSize', maxWriteBatchSize, 0),
                                namespace: J$.R(4313, 'namespace', namespace, 0),
                                bson: J$.R(4321, 'bson', bson, 0),
                                topology: J$.R(4329, 'topology', topology, 0),
                                options: J$.R(4337, 'options', options, 0),
                                currentOp: J$.R(4345, 'currentOp', currentOp, 0),
                                executed: J$.R(4353, 'executed', executed, 0),
                                collection: J$.R(4361, 'collection', collection, 0),
                                promiseLibrary: J$.R(4369, 'promiseLibrary', promiseLibrary, 0),
                                err: J$.T(4377, null, 25, false),
                                bypassDocumentValidation: J$.X1(10689, J$.C(136, J$.B(194, '==', J$.U(186, 'typeof', J$.G(4393, J$.R(4385, 'options', options, 0), 'bypassDocumentValidation', 0)), J$.T(4401, 'boolean', 21, false), 0))) ? J$.G(4417, J$.R(4409, 'options', options, 0), 'bypassDocumentValidation', 0) : J$.T(4425, false, 23, false)
                            }, 11, false), 0));
                        } catch (J$e) {
                            J$.Ex(10697, J$e);
                        } finally {
                            if (J$.Fr(10705))
                                continue jalangiLabel3605;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(10297, '__secret__S$', __secret__S$, 0);
            J$.N(10305, '__secret__traits__', __secret__traits__, 0);
            J$.N(10313, 'common', common, 0);
            J$.N(10321, 'utils', utils, 0);
            J$.N(10329, 'toError', toError, 0);
            J$.N(10337, 'f', f, 0);
            J$.N(10345, 'shallowClone', shallowClone, 0);
            J$.N(10353, 'WriteError', WriteError, 0);
            J$.N(10361, 'BulkWriteResult', BulkWriteResult, 0);
            J$.N(10369, 'LegacyOp', LegacyOp, 0);
            J$.N(10377, 'ObjectID', ObjectID, 0);
            J$.N(10385, 'Define', Define, 0);
            J$.N(10393, 'Batch', Batch, 0);
            J$.N(10401, 'mergeBatchResults', mergeBatchResults, 0);
            J$.N(10409, 'FindOperatorsOrdered', FindOperatorsOrdered, 0);
            J$.N(10417, 'addToOperationsList', addToOperationsList, 0);
            OrderedBulkOperation = J$.N(10433, 'OrderedBulkOperation', J$.T(10425, OrderedBulkOperation, 12, false, 4457), 0);
            J$.N(10441, 'define', define, 0);
            J$.N(10449, 'executeCommands', executeCommands, 0);
            J$.N(10457, 'initializeOrderedBulkOp', initializeOrderedBulkOp, 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            J$.X1(89, J$.T(81, 'use strict', 21, false));
            var common = J$.X1(377, J$.W(369, 'common', J$.F(113, J$.R(97, 'require', require, 2), 0)(J$.T(105, './common', 21, false)), common, 3)), utils = J$.X1(393, J$.W(385, 'utils', J$.F(137, J$.R(121, 'require', require, 2), 0)(J$.T(129, '../utils', 21, false)), utils, 3)), toError = J$.X1(409, J$.W(401, 'toError', J$.G(169, J$.F(161, J$.R(145, 'require', require, 2), 0)(J$.T(153, '../utils', 21, false)), 'toError', 0), toError, 3)), f = J$.X1(425, J$.W(417, 'f', J$.G(201, J$.F(193, J$.R(177, 'require', require, 2), 0)(J$.T(185, 'util', 21, false)), 'format', 0), f, 3)), shallowClone = J$.X1(441, J$.W(433, 'shallowClone', J$.G(217, J$.R(209, 'utils', utils, 1), 'shallowClone', 0), shallowClone, 3)), WriteError = J$.X1(457, J$.W(449, 'WriteError', J$.G(233, J$.R(225, 'common', common, 1), 'WriteError', 0), WriteError, 3)), BulkWriteResult = J$.X1(473, J$.W(465, 'BulkWriteResult', J$.G(249, J$.R(241, 'common', common, 1), 'BulkWriteResult', 0), BulkWriteResult, 3)), LegacyOp = J$.X1(489, J$.W(481, 'LegacyOp', J$.G(265, J$.R(257, 'common', common, 1), 'LegacyOp', 0), LegacyOp, 3)), ObjectID = J$.X1(505, J$.W(497, 'ObjectID', J$.G(305, J$.G(297, J$.F(289, J$.R(273, 'require', require, 2), 0)(J$.T(281, 'mongodb-core', 21, false)), 'BSON', 0), 'ObjectID', 0), ObjectID, 3)), Define = J$.X1(521, J$.W(513, 'Define', J$.F(329, J$.R(313, 'require', require, 2), 0)(J$.T(321, '../metadata', 21, false)), Define, 3)), Batch = J$.X1(537, J$.W(529, 'Batch', J$.G(345, J$.R(337, 'common', common, 1), 'Batch', 0), Batch, 3)), mergeBatchResults = J$.X1(553, J$.W(545, 'mergeBatchResults', J$.G(361, J$.R(353, 'common', common, 1), 'mergeBatchResults', 0), mergeBatchResults, 3));
            var FindOperatorsOrdered = J$.X1(641, J$.W(633, 'FindOperatorsOrdered', J$.T(625, function (self) {
                jalangiLabel3597:
                    while (true) {
                        try {
                            J$.Fe(601, arguments.callee, this, arguments);
                            arguments = J$.N(609, 'arguments', arguments, 4);
                            self = J$.N(617, 'self', self, 4);
                            J$.X1(593, J$.P(585, J$.R(561, 'this', this, 0), 's', J$.G(577, J$.R(569, 'self', self, 0), 's', 0), 0));
                        } catch (J$e) {
                            J$.Ex(10465, J$e);
                        } finally {
                            if (J$.Fr(10473))
                                continue jalangiLabel3597;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 601), FindOperatorsOrdered, 3));
            J$.X1(1001, J$.P(993, J$.G(657, J$.R(649, 'FindOperatorsOrdered', FindOperatorsOrdered, 1), 'prototype', 0), 'update', J$.T(985, function (updateDocument) {
                jalangiLabel3598:
                    while (true) {
                        try {
                            J$.Fe(945, arguments.callee, this, arguments);
                            arguments = J$.N(953, 'arguments', arguments, 4);
                            updateDocument = J$.N(961, 'updateDocument', updateDocument, 4);
                            J$.N(969, 'upsert', upsert, 0);
                            J$.N(977, 'document', document, 0);
                            var upsert = J$.X1(753, J$.W(745, 'upsert', J$.X1(10481, J$.C(8, J$.B(18, '==', J$.U(10, 'typeof', J$.G(689, J$.G(681, J$.G(673, J$.R(665, 'this', this, 0), 's', 0), 'currentOp', 0), 'upsert', 0)), J$.T(697, 'boolean', 21, false), 0))) ? J$.G(729, J$.G(721, J$.G(713, J$.R(705, 'this', this, 0), 's', 0), 'currentOp', 0), 'upsert', 0) : J$.T(737, false, 23, false), upsert, 1));
                            var document = J$.X1(833, J$.W(825, 'document', J$.T(817, {
                                q: J$.G(785, J$.G(777, J$.G(769, J$.R(761, 'this', this, 0), 's', 0), 'currentOp', 0), 'selector', 0),
                                u: J$.R(793, 'updateDocument', updateDocument, 0),
                                multi: J$.T(801, true, 23, false),
                                upsert: J$.R(809, 'upsert', upsert, 0)
                            }, 11, false), document, 1));
                            J$.X1(873, J$.P(865, J$.G(849, J$.R(841, 'this', this, 0), 's', 0), 'currentOp', J$.T(857, null, 25, false), 0));
                            return J$.X1(937, J$.Rt(929, J$.F(921, J$.R(881, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(889, 'this', this, 0), J$.G(905, J$.R(897, 'common', common, 1), 'UPDATE', 0), J$.R(913, 'document', document, 0))));
                        } catch (J$e) {
                            J$.Ex(10489, J$e);
                        } finally {
                            if (J$.Fr(10497))
                                continue jalangiLabel3598;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 945), 0));
            J$.X1(1361, J$.P(1353, J$.G(1017, J$.R(1009, 'FindOperatorsOrdered', FindOperatorsOrdered, 1), 'prototype', 0), 'updateOne', J$.T(1345, function (updateDocument) {
                jalangiLabel3599:
                    while (true) {
                        try {
                            J$.Fe(1305, arguments.callee, this, arguments);
                            arguments = J$.N(1313, 'arguments', arguments, 4);
                            updateDocument = J$.N(1321, 'updateDocument', updateDocument, 4);
                            J$.N(1329, 'upsert', upsert, 0);
                            J$.N(1337, 'document', document, 0);
                            var upsert = J$.X1(1113, J$.W(1105, 'upsert', J$.X1(10505, J$.C(16, J$.B(34, '==', J$.U(26, 'typeof', J$.G(1049, J$.G(1041, J$.G(1033, J$.R(1025, 'this', this, 0), 's', 0), 'currentOp', 0), 'upsert', 0)), J$.T(1057, 'boolean', 21, false), 0))) ? J$.G(1089, J$.G(1081, J$.G(1073, J$.R(1065, 'this', this, 0), 's', 0), 'currentOp', 0), 'upsert', 0) : J$.T(1097, false, 23, false), upsert, 1));
                            var document = J$.X1(1193, J$.W(1185, 'document', J$.T(1177, {
                                q: J$.G(1145, J$.G(1137, J$.G(1129, J$.R(1121, 'this', this, 0), 's', 0), 'currentOp', 0), 'selector', 0),
                                u: J$.R(1153, 'updateDocument', updateDocument, 0),
                                multi: J$.T(1161, false, 23, false),
                                upsert: J$.R(1169, 'upsert', upsert, 0)
                            }, 11, false), document, 1));
                            J$.X1(1233, J$.P(1225, J$.G(1209, J$.R(1201, 'this', this, 0), 's', 0), 'currentOp', J$.T(1217, null, 25, false), 0));
                            return J$.X1(1297, J$.Rt(1289, J$.F(1281, J$.R(1241, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(1249, 'this', this, 0), J$.G(1265, J$.R(1257, 'common', common, 1), 'UPDATE', 0), J$.R(1273, 'document', document, 0))));
                        } catch (J$e) {
                            J$.Ex(10513, J$e);
                        } finally {
                            if (J$.Fr(10521))
                                continue jalangiLabel3599;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1305), 0));
            J$.X1(1457, J$.P(1449, J$.G(1377, J$.R(1369, 'FindOperatorsOrdered', FindOperatorsOrdered, 1), 'prototype', 0), 'replaceOne', J$.T(1441, function (updateDocument) {
                jalangiLabel3600:
                    while (true) {
                        try {
                            J$.Fe(1417, arguments.callee, this, arguments);
                            arguments = J$.N(1425, 'arguments', arguments, 4);
                            updateDocument = J$.N(1433, 'updateDocument', updateDocument, 4);
                            J$.X1(1409, J$.M(1401, J$.R(1385, 'this', this, 0), 'updateOne', 0)(J$.R(1393, 'updateDocument', updateDocument, 0)));
                        } catch (J$e) {
                            J$.Ex(10529, J$e);
                        } finally {
                            if (J$.Fr(10537))
                                continue jalangiLabel3600;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1417), 0));
            J$.X1(1585, J$.P(1577, J$.G(1473, J$.R(1465, 'FindOperatorsOrdered', FindOperatorsOrdered, 1), 'prototype', 0), 'upsert', J$.T(1569, function () {
                jalangiLabel3601:
                    while (true) {
                        try {
                            J$.Fe(1553, arguments.callee, this, arguments);
                            arguments = J$.N(1561, 'arguments', arguments, 4);
                            J$.X1(1521, J$.P(1513, J$.G(1497, J$.G(1489, J$.R(1481, 'this', this, 0), 's', 0), 'currentOp', 0), 'upsert', J$.T(1505, true, 23, false), 0));
                            return J$.X1(1545, J$.Rt(1537, J$.R(1529, 'this', this, 0)));
                        } catch (J$e) {
                            J$.Ex(10545, J$e);
                        } finally {
                            if (J$.Fr(10553))
                                continue jalangiLabel3601;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1553), 0));
            J$.X1(1817, J$.P(1809, J$.G(1601, J$.R(1593, 'FindOperatorsOrdered', FindOperatorsOrdered, 1), 'prototype', 0), 'deleteOne', J$.T(1801, function () {
                jalangiLabel3602:
                    while (true) {
                        try {
                            J$.Fe(1777, arguments.callee, this, arguments);
                            arguments = J$.N(1785, 'arguments', arguments, 4);
                            J$.N(1793, 'document', document, 0);
                            var document = J$.X1(1665, J$.W(1657, 'document', J$.T(1649, {
                                q: J$.G(1633, J$.G(1625, J$.G(1617, J$.R(1609, 'this', this, 0), 's', 0), 'currentOp', 0), 'selector', 0),
                                limit: J$.T(1641, 1, 22, false)
                            }, 11, false), document, 1));
                            J$.X1(1705, J$.P(1697, J$.G(1681, J$.R(1673, 'this', this, 0), 's', 0), 'currentOp', J$.T(1689, null, 25, false), 0));
                            return J$.X1(1769, J$.Rt(1761, J$.F(1753, J$.R(1713, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(1721, 'this', this, 0), J$.G(1737, J$.R(1729, 'common', common, 1), 'REMOVE', 0), J$.R(1745, 'document', document, 0))));
                        } catch (J$e) {
                            J$.Ex(10561, J$e);
                        } finally {
                            if (J$.Fr(10569))
                                continue jalangiLabel3602;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1777), 0));
            J$.X1(1873, J$.P(1865, J$.G(1833, J$.R(1825, 'FindOperatorsOrdered', FindOperatorsOrdered, 1), 'prototype', 0), 'removeOne', J$.G(1857, J$.G(1849, J$.R(1841, 'FindOperatorsOrdered', FindOperatorsOrdered, 1), 'prototype', 0), 'deleteOne', 0), 0));
            J$.X1(2105, J$.P(2097, J$.G(1889, J$.R(1881, 'FindOperatorsOrdered', FindOperatorsOrdered, 1), 'prototype', 0), 'delete', J$.T(2089, function () {
                jalangiLabel3603:
                    while (true) {
                        try {
                            J$.Fe(2065, arguments.callee, this, arguments);
                            arguments = J$.N(2073, 'arguments', arguments, 4);
                            J$.N(2081, 'document', document, 0);
                            var document = J$.X1(1953, J$.W(1945, 'document', J$.T(1937, {
                                q: J$.G(1921, J$.G(1913, J$.G(1905, J$.R(1897, 'this', this, 0), 's', 0), 'currentOp', 0), 'selector', 0),
                                limit: J$.T(1929, 0, 22, false)
                            }, 11, false), document, 1));
                            J$.X1(1993, J$.P(1985, J$.G(1969, J$.R(1961, 'this', this, 0), 's', 0), 'currentOp', J$.T(1977, null, 25, false), 0));
                            return J$.X1(2057, J$.Rt(2049, J$.F(2041, J$.R(2001, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(2009, 'this', this, 0), J$.G(2025, J$.R(2017, 'common', common, 1), 'REMOVE', 0), J$.R(2033, 'document', document, 0))));
                        } catch (J$e) {
                            J$.Ex(10577, J$e);
                        } finally {
                            if (J$.Fr(10585))
                                continue jalangiLabel3603;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 2065), 0));
            J$.X1(2161, J$.P(2153, J$.G(2121, J$.R(2113, 'FindOperatorsOrdered', FindOperatorsOrdered, 1), 'prototype', 0), 'remove', J$.G(2145, J$.G(2137, J$.R(2129, 'FindOperatorsOrdered', FindOperatorsOrdered, 1), 'prototype', 0), 'delete', 0), 0));
            var addToOperationsList = J$.X1(3425, J$.W(3417, 'addToOperationsList', J$.T(3409, function (_self, docType, document) {
                jalangiLabel3604:
                    while (true) {
                        try {
                            J$.Fe(3361, arguments.callee, this, arguments);
                            arguments = J$.N(3369, 'arguments', arguments, 4);
                            _self = J$.N(3377, '_self', _self, 4);
                            docType = J$.N(3385, 'docType', docType, 4);
                            document = J$.N(3393, 'document', document, 4);
                            J$.N(3401, 'bsonSize', bsonSize, 0);
                            var bsonSize = J$.X1(2225, J$.W(2217, 'bsonSize', J$.M(2209, J$.G(2185, J$.G(2177, J$.R(2169, '_self', _self, 0), 's', 0), 'bson', 0), 'calculateObjectSize', 0)(J$.R(2193, 'document', document, 0), J$.T(2201, false, 23, false)), bsonSize, 1));
                            if (J$.X1(10593, J$.C(24, J$.B(42, '>=', J$.R(2233, 'bsonSize', bsonSize, 0), J$.G(2257, J$.G(2249, J$.R(2241, '_self', _self, 0), 's', 0), 'maxBatchSizeBytes', 0), 0))))
                                throw J$.X1(2321, J$.Th(2313, J$.F(2305, J$.R(2265, 'toError', toError, 1), 0)(J$.B(50, '+', J$.T(2273, 'document is larger than the maximum size ', 21, false), J$.G(2297, J$.G(2289, J$.R(2281, '_self', _self, 0), 's', 0), 'maxBatchSizeBytes', 0), 0))));
                            if (J$.X1(10601, J$.C(32, J$.B(58, '==', J$.G(2345, J$.G(2337, J$.R(2329, '_self', _self, 0), 's', 0), 'currentBatch', 0), J$.T(2353, null, 25, false), 0))))
                                J$.X1(2433, J$.P(2425, J$.G(2369, J$.R(2361, '_self', _self, 0), 's', 0), 'currentBatch', J$.F(2417, J$.R(2377, 'Batch', Batch, 1), 1)(J$.R(2385, 'docType', docType, 0), J$.G(2409, J$.G(2401, J$.R(2393, '_self', _self, 0), 's', 0), 'currentIndex', 0)), 0));
                            if (J$.X1(10609, J$.C(56, J$.C(48, J$.C(40, J$.B(74, '>=', J$.B(66, '+', J$.G(2457, J$.G(2449, J$.R(2441, '_self', _self, 0), 's', 0), 'currentBatchSize', 0), J$.T(2465, 1, 22, false), 0), J$.G(2489, J$.G(2481, J$.R(2473, '_self', _self, 0), 's', 0), 'maxWriteBatchSize', 0), 0)) ? J$._() : J$.B(90, '>=', J$.B(82, '+', J$.G(2513, J$.G(2505, J$.R(2497, '_self', _self, 0), 's', 0), 'currentBatchSizeBytes', 0), J$.G(2537, J$.G(2529, J$.R(2521, '_self', _self, 0), 's', 0), 'currentBatchSizeBytes', 0), 0), J$.G(2561, J$.G(2553, J$.R(2545, '_self', _self, 0), 's', 0), 'maxBatchSizeBytes', 0), 0)) ? J$._() : J$.B(98, '!=', J$.G(2593, J$.G(2585, J$.G(2577, J$.R(2569, '_self', _self, 0), 's', 0), 'currentBatch', 0), 'batchType', 0), J$.R(2601, 'docType', docType, 0), 0)))) {
                                J$.X1(2665, J$.M(2657, J$.G(2625, J$.G(2617, J$.R(2609, '_self', _self, 0), 's', 0), 'batches', 0), 'push', 0)(J$.G(2649, J$.G(2641, J$.R(2633, '_self', _self, 0), 's', 0), 'currentBatch', 0)));
                                J$.X1(2745, J$.P(2737, J$.G(2681, J$.R(2673, '_self', _self, 0), 's', 0), 'currentBatch', J$.F(2729, J$.R(2689, 'Batch', Batch, 1), 1)(J$.R(2697, 'docType', docType, 0), J$.G(2721, J$.G(2713, J$.R(2705, '_self', _self, 0), 's', 0), 'currentIndex', 0)), 0));
                                J$.X1(2785, J$.P(2777, J$.G(2761, J$.R(2753, '_self', _self, 0), 's', 0), 'currentBatchSize', J$.T(2769, 0, 22, false), 0));
                                J$.X1(2825, J$.P(2817, J$.G(2801, J$.R(2793, '_self', _self, 0), 's', 0), 'currentBatchSizeBytes', J$.T(2809, 0, 22, false), 0));
                            } else {
                                J$.X1(2889, J$.P(2881, J$.G(2841, J$.R(2833, '_self', _self, 0), 's', 0), 'currentBatchSize', J$.B(106, '+', J$.G(2865, J$.G(2857, J$.R(2849, '_self', _self, 0), 's', 0), 'currentBatchSize', 0), J$.T(2873, 1, 22, false), 0), 0));
                                J$.X1(2953, J$.P(2945, J$.G(2905, J$.R(2897, '_self', _self, 0), 's', 0), 'currentBatchSizeBytes', J$.B(114, '+', J$.G(2929, J$.G(2921, J$.R(2913, '_self', _self, 0), 's', 0), 'currentBatchSizeBytes', 0), J$.R(2937, 'bsonSize', bsonSize, 0), 0), 0));
                            }
                            if (J$.X1(10617, J$.C(64, J$.B(122, '==', J$.R(2961, 'docType', docType, 0), J$.G(2977, J$.R(2969, 'common', common, 1), 'INSERT', 0), 0)))) {
                                J$.X1(3073, J$.M(3065, J$.G(3009, J$.G(3001, J$.G(2993, J$.R(2985, '_self', _self, 0), 's', 0), 'bulkResult', 0), 'insertedIds', 0), 'push', 0)(J$.T(3057, {
                                    index: J$.G(3033, J$.G(3025, J$.R(3017, '_self', _self, 0), 's', 0), 'currentIndex', 0),
                                    _id: J$.G(3049, J$.R(3041, 'document', document, 0), '_id', 0)
                                }, 11, false)));
                            }
                            if (J$.X1(10625, J$.C(72, J$.M(3097, J$.R(3081, 'Array', Array, 2), 'isArray', 0)(J$.R(3089, 'document', document, 0))))) {
                                throw J$.X1(3137, J$.Th(3129, J$.F(3121, J$.R(3105, 'toError', toError, 1), 0)(J$.T(3113, 'operation passed in cannot be an Array', 21, false))));
                            } else {
                                J$.X1(3209, J$.M(3201, J$.G(3169, J$.G(3161, J$.G(3153, J$.R(3145, '_self', _self, 0), 's', 0), 'currentBatch', 0), 'originalIndexes', 0), 'push', 0)(J$.G(3193, J$.G(3185, J$.R(3177, '_self', _self, 0), 's', 0), 'currentIndex', 0)));
                                J$.X1(3265, J$.M(3257, J$.G(3241, J$.G(3233, J$.G(3225, J$.R(3217, '_self', _self, 0), 's', 0), 'currentBatch', 0), 'operations', 0), 'push', 0)(J$.R(3249, 'document', document, 0)));
                                J$.X1(3329, J$.P(3321, J$.G(3281, J$.R(3273, '_self', _self, 0), 's', 0), 'currentIndex', J$.B(130, '+', J$.G(3305, J$.G(3297, J$.R(3289, '_self', _self, 0), 's', 0), 'currentIndex', 0), J$.T(3313, 1, 22, false), 0), 0));
                            }
                            return J$.X1(3353, J$.Rt(3345, J$.R(3337, '_self', _self, 0)));
                        } catch (J$e) {
                            J$.Ex(10633, J$e);
                        } finally {
                            if (J$.Fr(10641))
                                continue jalangiLabel3604;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 3361), addToOperationsList, 3));
            var define = J$.X1(4681, J$.W(4673, 'define', J$.P(4665, J$.R(4617, 'OrderedBulkOperation', OrderedBulkOperation, 1), 'define', J$.F(4657, J$.R(4625, 'Define', Define, 1), 1)(J$.T(4633, 'OrderedBulkOperation', 21, false), J$.R(4641, 'OrderedBulkOperation', OrderedBulkOperation, 1), J$.T(4649, false, 23, false)), 0), define, 3));
            J$.X1(6945, J$.P(6937, J$.G(4697, J$.R(4689, 'OrderedBulkOperation', OrderedBulkOperation, 1), 'prototype', 0), 'raw', J$.T(6929, function (op) {
                jalangiLabel3606:
                    while (true) {
                        try {
                            J$.Fe(6857, arguments.callee, this, arguments);
                            arguments = J$.N(6865, 'arguments', arguments, 4);
                            op = J$.N(6873, 'op', op, 4);
                            J$.N(6881, 'key', key, 0);
                            J$.N(6889, 'forceServerObjectId', forceServerObjectId, 0);
                            J$.N(6897, 'multi', multi, 0);
                            J$.N(6905, 'operation', operation, 0);
                            J$.N(6913, 'limit', limit, 0);
                            J$.N(6921, 'i', i, 0);
                            var key = J$.X1(4753, J$.W(4745, 'key', J$.G(4737, J$.M(4721, J$.R(4705, 'Object', Object, 2), 'keys', 0)(J$.R(4713, 'op', op, 0)), J$.T(4729, 0, 22, false), 4), key, 1));
                            var forceServerObjectId = J$.X1(4897, J$.W(4889, 'forceServerObjectId', J$.X1(10713, J$.C(144, J$.B(210, '==', J$.U(202, 'typeof', J$.G(4785, J$.G(4777, J$.G(4769, J$.R(4761, 'this', this, 0), 's', 0), 'options', 0), 'forceServerObjectId', 0)), J$.T(4793, 'boolean', 21, false), 0))) ? J$.G(4825, J$.G(4817, J$.G(4809, J$.R(4801, 'this', this, 0), 's', 0), 'options', 0), 'forceServerObjectId', 0) : J$.G(4881, J$.G(4873, J$.G(4865, J$.G(4857, J$.G(4849, J$.G(4841, J$.R(4833, 'this', this, 0), 's', 0), 'collection', 0), 's', 0), 'db', 0), 'options', 0), 'forceServerObjectId', 0), forceServerObjectId, 1));
                            if (J$.X1(10729, J$.C(208, J$.C(184, J$.C(168, J$.C(152, J$.G(4913, J$.R(4905, 'op', op, 0), 'updateOne', 0)) ? J$.G(4937, J$.G(4929, J$.R(4921, 'op', op, 0), 'updateOne', 0), 'q', 0) : J$._()) ? J$._() : J$.C(160, J$.G(4953, J$.R(4945, 'op', op, 0), 'updateMany', 0)) ? J$.G(4977, J$.G(4969, J$.R(4961, 'op', op, 0), 'updateMany', 0), 'q', 0) : J$._()) ? J$._() : J$.C(176, J$.G(4993, J$.R(4985, 'op', op, 0), 'replaceOne', 0)) ? J$.G(5017, J$.G(5009, J$.R(5001, 'op', op, 0), 'replaceOne', 0), 'q', 0) : J$._()))) {
                                J$.X1(5105, J$.P(5097, J$.G(5041, J$.R(5025, 'op', op, 0), J$.R(5033, 'key', key, 0), 4), 'multi', J$.X1(10721, J$.C(200, J$.C(192, J$.G(5057, J$.R(5049, 'op', op, 0), 'updateOne', 0)) ? J$._() : J$.G(5073, J$.R(5065, 'op', op, 0), 'replaceOne', 0))) ? J$.T(5081, false, 23, false) : J$.T(5089, true, 23, false), 0));
                                return J$.X1(5185, J$.Rt(5177, J$.F(5169, J$.R(5113, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(5121, 'this', this, 0), J$.G(5137, J$.R(5129, 'common', common, 1), 'UPDATE', 0), J$.G(5161, J$.R(5145, 'op', op, 0), J$.R(5153, 'key', key, 0), 4))));
                            }
                            if (J$.X1(10753, J$.C(264, J$.C(224, J$.C(216, J$.G(5201, J$.R(5193, 'op', op, 0), 'updateOne', 0)) ? J$._() : J$.G(5217, J$.R(5209, 'op', op, 0), 'updateMany', 0)) ? J$._() : J$.G(5233, J$.R(5225, 'op', op, 0), 'replaceOne', 0)))) {
                                var multi = J$.X1(5297, J$.W(5289, 'multi', J$.X1(10737, J$.C(240, J$.C(232, J$.G(5249, J$.R(5241, 'op', op, 0), 'updateOne', 0)) ? J$._() : J$.G(5265, J$.R(5257, 'op', op, 0), 'replaceOne', 0))) ? J$.T(5273, false, 23, false) : J$.T(5281, true, 23, false), multi, 1));
                                var operation = J$.X1(5425, J$.W(5417, 'operation', J$.T(5409, {
                                    q: J$.G(5329, J$.G(5321, J$.R(5305, 'op', op, 0), J$.R(5313, 'key', key, 0), 4), 'filter', 0),
                                    u: J$.C(248, J$.G(5361, J$.G(5353, J$.R(5337, 'op', op, 0), J$.R(5345, 'key', key, 0), 4), 'update', 0)) ? J$._() : J$.G(5393, J$.G(5385, J$.R(5369, 'op', op, 0), J$.R(5377, 'key', key, 0), 4), 'replacement', 0),
                                    multi: J$.R(5401, 'multi', multi, 0)
                                }, 11, false), operation, 1));
                                J$.X1(5497, J$.P(5489, J$.R(5433, 'operation', operation, 0), 'upsert', J$.X1(10745, J$.C(256, J$.G(5465, J$.G(5457, J$.R(5441, 'op', op, 0), J$.R(5449, 'key', key, 0), 4), 'upsert', 0))) ? J$.T(5473, true, 23, false) : J$.T(5481, false, 23, false), 0));
                                return J$.X1(5561, J$.Rt(5553, J$.F(5545, J$.R(5505, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(5513, 'this', this, 0), J$.G(5529, J$.R(5521, 'common', common, 1), 'UPDATE', 0), J$.R(5537, 'operation', operation, 0))));
                            }
                            if (J$.X1(10769, J$.C(320, J$.C(304, J$.C(288, J$.C(272, J$.G(5577, J$.R(5569, 'op', op, 0), 'removeOne', 0)) ? J$._() : J$.G(5593, J$.R(5585, 'op', op, 0), 'removeMany', 0)) ? J$._() : J$.C(280, J$.G(5609, J$.R(5601, 'op', op, 0), 'deleteOne', 0)) ? J$.G(5633, J$.G(5625, J$.R(5617, 'op', op, 0), 'deleteOne', 0), 'q', 0) : J$._()) ? J$._() : J$.C(296, J$.G(5649, J$.R(5641, 'op', op, 0), 'deleteMany', 0)) ? J$.G(5673, J$.G(5665, J$.R(5657, 'op', op, 0), 'deleteMany', 0), 'q', 0) : J$._()))) {
                                J$.X1(5745, J$.P(5737, J$.G(5697, J$.R(5681, 'op', op, 0), J$.R(5689, 'key', key, 0), 4), 'limit', J$.X1(10761, J$.C(312, J$.G(5713, J$.R(5705, 'op', op, 0), 'removeOne', 0))) ? J$.T(5721, 1, 22, false) : J$.T(5729, 0, 22, false), 0));
                                return J$.X1(5825, J$.Rt(5817, J$.F(5809, J$.R(5753, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(5761, 'this', this, 0), J$.G(5777, J$.R(5769, 'common', common, 1), 'REMOVE', 0), J$.G(5801, J$.R(5785, 'op', op, 0), J$.R(5793, 'key', key, 0), 4))));
                            }
                            if (J$.X1(10785, J$.C(344, J$.C(328, J$.G(5841, J$.R(5833, 'op', op, 0), 'deleteOne', 0)) ? J$._() : J$.G(5857, J$.R(5849, 'op', op, 0), 'deleteMany', 0)))) {
                                var limit = J$.X1(5905, J$.W(5897, 'limit', J$.X1(10777, J$.C(336, J$.G(5873, J$.R(5865, 'op', op, 0), 'deleteOne', 0))) ? J$.T(5881, 1, 22, false) : J$.T(5889, 0, 22, false), limit, 1));
                                var operation = J$.X1(5969, J$.W(5961, 'operation', J$.T(5953, {
                                    q: J$.G(5937, J$.G(5929, J$.R(5913, 'op', op, 0), J$.R(5921, 'key', key, 0), 4), 'filter', 0),
                                    limit: J$.R(5945, 'limit', limit, 0)
                                }, 11, false), operation, 1));
                                return J$.X1(6033, J$.Rt(6025, J$.F(6017, J$.R(5977, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(5985, 'this', this, 0), J$.G(6001, J$.R(5993, 'common', common, 1), 'REMOVE', 0), J$.R(6009, 'operation', operation, 0))));
                            }
                            if (J$.X1(10817, J$.C(408, J$.C(352, J$.G(6049, J$.R(6041, 'op', op, 0), 'insertOne', 0)) ? J$.B(218, '==', J$.G(6073, J$.G(6065, J$.R(6057, 'op', op, 0), 'insertOne', 0), 'document', 0), J$.T(6081, null, 25, false), 0) : J$._()))) {
                                if (J$.X1(10793, J$.C(368, J$.C(360, J$.B(226, '!==', J$.R(6089, 'forceServerObjectId', forceServerObjectId, 0), J$.T(6097, true, 23, false), 0)) ? J$.B(234, '==', J$.G(6121, J$.G(6113, J$.R(6105, 'op', op, 0), 'insertOne', 0), '_id', 0), J$.T(6129, null, 25, false), 0) : J$._())))
                                    J$.X1(6177, J$.P(6169, J$.G(6145, J$.R(6137, 'op', op, 0), 'insertOne', 0), '_id', J$.F(6161, J$.R(6153, 'ObjectID', ObjectID, 1), 1)(), 0));
                                return J$.X1(6249, J$.Rt(6241, J$.F(6233, J$.R(6185, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(6193, 'this', this, 0), J$.G(6209, J$.R(6201, 'common', common, 1), 'INSERT', 0), J$.G(6225, J$.R(6217, 'op', op, 0), 'insertOne', 0))));
                            } else if (J$.X1(10809, J$.C(400, J$.C(376, J$.G(6265, J$.R(6257, 'op', op, 0), 'insertOne', 0)) ? J$.G(6289, J$.G(6281, J$.R(6273, 'op', op, 0), 'insertOne', 0), 'document', 0) : J$._()))) {
                                if (J$.X1(10801, J$.C(392, J$.C(384, J$.B(242, '!==', J$.R(6297, 'forceServerObjectId', forceServerObjectId, 0), J$.T(6305, true, 23, false), 0)) ? J$.B(250, '==', J$.G(6337, J$.G(6329, J$.G(6321, J$.R(6313, 'op', op, 0), 'insertOne', 0), 'document', 0), '_id', 0), J$.T(6345, null, 25, false), 0) : J$._())))
                                    J$.X1(6401, J$.P(6393, J$.G(6369, J$.G(6361, J$.R(6353, 'op', op, 0), 'insertOne', 0), 'document', 0), '_id', J$.F(6385, J$.R(6377, 'ObjectID', ObjectID, 1), 1)(), 0));
                                return J$.X1(6481, J$.Rt(6473, J$.F(6465, J$.R(6409, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(6417, 'this', this, 0), J$.G(6433, J$.R(6425, 'common', common, 1), 'INSERT', 0), J$.G(6457, J$.G(6449, J$.R(6441, 'op', op, 0), 'insertOne', 0), 'document', 0))));
                            }
                            if (J$.X1(10849, J$.C(440, J$.G(6497, J$.R(6489, 'op', op, 0), 'insertMany', 0)))) {
                                for (var i = J$.X1(6521, J$.W(6513, 'i', J$.T(6505, 0, 22, false), i, 1)); J$.X1(10833, J$.C(432, J$.B(258, '<', J$.R(6529, 'i', i, 0), J$.G(6553, J$.G(6545, J$.R(6537, 'op', op, 0), 'insertMany', 0), 'length', 0), 0))); J$.X1(10841, J$.B(282, '-', i = J$.W(6577, 'i', J$.B(274, '+', J$.U(266, '+', J$.R(6569, 'i', i, 0)), J$.T(6561, 1, 22, false), 0), i, 0), J$.T(6585, 1, 22, false), 0))) {
                                    if (J$.X1(10825, J$.C(424, J$.C(416, J$.B(290, '!==', J$.R(6593, 'forceServerObjectId', forceServerObjectId, 0), J$.T(6601, true, 23, false), 0)) ? J$.B(298, '==', J$.G(6641, J$.G(6633, J$.G(6617, J$.R(6609, 'op', op, 0), 'insertMany', 0), J$.R(6625, 'i', i, 0), 4), '_id', 0), J$.T(6649, null, 25, false), 0) : J$._())))
                                        J$.X1(6713, J$.P(6705, J$.G(6681, J$.G(6665, J$.R(6657, 'op', op, 0), 'insertMany', 0), J$.R(6673, 'i', i, 0), 4), '_id', J$.F(6697, J$.R(6689, 'ObjectID', ObjectID, 1), 1)(), 0));
                                    J$.X1(6793, J$.F(6785, J$.R(6721, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(6729, 'this', this, 0), J$.G(6745, J$.R(6737, 'common', common, 1), 'INSERT', 0), J$.G(6777, J$.G(6761, J$.R(6753, 'op', op, 0), 'insertMany', 0), J$.R(6769, 'i', i, 0), 4)));
                                }
                                return J$.X1(6809, J$.Rt(6801, undefined));
                            }
                            throw J$.X1(6849, J$.Th(6841, J$.F(6833, J$.R(6817, 'toError', toError, 1), 0)(J$.T(6825, 'bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany', 21, false))));
                        } catch (J$e) {
                            J$.Ex(10857, J$e);
                        } finally {
                            if (J$.Fr(10865))
                                continue jalangiLabel3606;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 6857), 0));
            J$.X1(7201, J$.P(7193, J$.G(6961, J$.R(6953, 'OrderedBulkOperation', OrderedBulkOperation, 1), 'prototype', 0), 'insert', J$.T(7185, function (document) {
                jalangiLabel3607:
                    while (true) {
                        try {
                            J$.Fe(7161, arguments.callee, this, arguments);
                            arguments = J$.N(7169, 'arguments', arguments, 4);
                            document = J$.N(7177, 'document', document, 4);
                            if (J$.X1(10873, J$.C(456, J$.C(448, J$.B(306, '!==', J$.G(7017, J$.G(7009, J$.G(7001, J$.G(6993, J$.G(6985, J$.G(6977, J$.R(6969, 'this', this, 0), 's', 0), 'collection', 0), 's', 0), 'db', 0), 'options', 0), 'forceServerObjectId', 0), J$.T(7025, true, 23, false), 0)) ? J$.B(314, '==', J$.G(7041, J$.R(7033, 'document', document, 0), '_id', 0), J$.T(7049, null, 25, false), 0) : J$._())))
                                J$.X1(7089, J$.P(7081, J$.R(7057, 'document', document, 0), '_id', J$.F(7073, J$.R(7065, 'ObjectID', ObjectID, 1), 1)(), 0));
                            return J$.X1(7153, J$.Rt(7145, J$.F(7137, J$.R(7097, 'addToOperationsList', addToOperationsList, 1), 0)(J$.R(7105, 'this', this, 0), J$.G(7121, J$.R(7113, 'common', common, 1), 'INSERT', 0), J$.R(7129, 'document', document, 0))));
                        } catch (J$e) {
                            J$.Ex(10881, J$e);
                        } finally {
                            if (J$.Fr(10889))
                                continue jalangiLabel3607;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 7161), 0));
            J$.X1(7401, J$.P(7393, J$.G(7217, J$.R(7209, 'OrderedBulkOperation', OrderedBulkOperation, 1), 'prototype', 0), 'find', J$.T(7385, function (selector) {
                jalangiLabel3608:
                    while (true) {
                        try {
                            J$.Fe(7361, arguments.callee, this, arguments);
                            arguments = J$.N(7369, 'arguments', arguments, 4);
                            selector = J$.N(7377, 'selector', selector, 4);
                            if (J$.X1(10897, J$.C(464, J$.U(322, '!', J$.R(7225, 'selector', selector, 0))))) {
                                throw J$.X1(7265, J$.Th(7257, J$.F(7249, J$.R(7233, 'toError', toError, 1), 0)(J$.T(7241, 'Bulk find operation must specify a selector', 21, false))));
                            }
                            J$.X1(7313, J$.P(7305, J$.G(7281, J$.R(7273, 'this', this, 0), 's', 0), 'currentOp', J$.T(7297, {
                                selector: J$.R(7289, 'selector', selector, 0)
                            }, 11, false), 0));
                            return J$.X1(7353, J$.Rt(7345, J$.F(7337, J$.R(7321, 'FindOperatorsOrdered', FindOperatorsOrdered, 1), 1)(J$.R(7329, 'this', this, 0))));
                        } catch (J$e) {
                            J$.Ex(10905, J$e);
                        } finally {
                            if (J$.Fr(10913))
                                continue jalangiLabel3608;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 7361), 0));
            J$.X1(7529, J$.M(7521, J$.R(7409, 'Object', Object, 2), 'defineProperty', 0)(J$.G(7425, J$.R(7417, 'OrderedBulkOperation', OrderedBulkOperation, 1), 'prototype', 0), J$.T(7433, 'length', 21, false), J$.T(7513, {
                enumerable: J$.T(7441, true, 23, false),
                get: J$.T(7505, function () {
                    jalangiLabel3609:
                        while (true) {
                            try {
                                J$.Fe(7489, arguments.callee, this, arguments);
                                arguments = J$.N(7497, 'arguments', arguments, 4);
                                return J$.X1(7481, J$.Rt(7473, J$.G(7465, J$.G(7457, J$.R(7449, 'this', this, 0), 's', 0), 'currentIndex', 0)));
                            } catch (J$e) {
                                J$.Ex(10921, J$e);
                            } finally {
                                if (J$.Fr(10929))
                                    continue jalangiLabel3609;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false, 7489)
            }, 11, false)));
            var executeCommands = J$.X1(9289, J$.W(9281, 'executeCommands', J$.T(9273, function (self, callback) {
                jalangiLabel3611:
                    while (true) {
                        try {
                            J$.Fe(9217, arguments.callee, this, arguments);
                            arguments = J$.N(9225, 'arguments', arguments, 4);
                            self = J$.N(9233, 'self', self, 4);
                            callback = J$.N(9241, 'callback', callback, 4);
                            J$.N(9249, 'batch', batch, 0);
                            J$.N(9257, 'resultHandler', resultHandler, 0);
                            J$.N(9265, 'finalOptions', finalOptions, 0);
                            if (J$.X1(10937, J$.C(472, J$.B(330, '==', J$.G(7561, J$.G(7553, J$.G(7545, J$.R(7537, 'self', self, 0), 's', 0), 'batches', 0), 'length', 0), J$.T(7569, 0, 22, false), 0)))) {
                                return J$.X1(7649, J$.Rt(7641, J$.F(7633, J$.R(7577, 'callback', callback, 0), 0)(J$.T(7585, null, 25, false), J$.F(7625, J$.R(7593, 'BulkWriteResult', BulkWriteResult, 1), 1)(J$.G(7617, J$.G(7609, J$.R(7601, 'self', self, 0), 's', 0), 'bulkResult', 0)))));
                            }
                            var batch = J$.X1(7697, J$.W(7689, 'batch', J$.M(7681, J$.G(7673, J$.G(7665, J$.R(7657, 'self', self, 0), 's', 0), 'batches', 0), 'shift', 0)(), batch, 1));
                            var resultHandler = J$.X1(8297, J$.W(8289, 'resultHandler', J$.T(8281, function (err, result) {
                                jalangiLabel3610:
                                    while (true) {
                                        try {
                                            J$.Fe(8241, arguments.callee, this, arguments);
                                            arguments = J$.N(8249, 'arguments', arguments, 4);
                                            err = J$.N(8257, 'err', err, 4);
                                            result = J$.N(8265, 'result', result, 4);
                                            J$.N(8273, 'mergeResult', mergeResult, 0);
                                            if (J$.X1(10945, J$.C(504, J$.C(496, J$.C(480, J$.R(7705, 'err', err, 0)) ? J$.G(7721, J$.R(7713, 'err', err, 0), 'driver', 0) : J$._()) ? J$._() : J$.C(488, J$.R(7729, 'err', err, 0)) ? J$.G(7745, J$.R(7737, 'err', err, 0), 'message', 0) : J$._()))) {
                                                return J$.X1(7785, J$.Rt(7777, J$.F(7769, J$.R(7753, 'callback', callback, 0), 0)(J$.R(7761, 'err', err, 0))));
                                            }
                                            if (J$.X1(10953, J$.C(512, J$.R(7793, 'err', err, 0))))
                                                J$.X1(7825, J$.P(7817, J$.R(7801, 'err', err, 0), 'ok', J$.T(7809, 0, 22, false), 0));
                                            var mergeResult = J$.X1(7913, J$.W(7905, 'mergeResult', J$.F(7897, J$.R(7833, 'mergeBatchResults', mergeBatchResults, 1), 0)(J$.T(7841, true, 23, false), J$.R(7849, 'batch', batch, 0), J$.G(7873, J$.G(7865, J$.R(7857, 'self', self, 0), 's', 0), 'bulkResult', 0), J$.R(7881, 'err', err, 0), J$.R(7889, 'result', result, 0)), mergeResult, 1));
                                            if (J$.X1(10961, J$.C(520, J$.B(338, '!=', J$.R(7921, 'mergeResult', mergeResult, 0), J$.T(7929, null, 25, false), 0)))) {
                                                return J$.X1(8009, J$.Rt(8001, J$.F(7993, J$.R(7937, 'callback', callback, 0), 0)(J$.T(7945, null, 25, false), J$.F(7985, J$.R(7953, 'BulkWriteResult', BulkWriteResult, 1), 1)(J$.G(7977, J$.G(7969, J$.R(7961, 'self', self, 0), 's', 0), 'bulkResult', 0)))));
                                            }
                                            if (J$.X1(10969, J$.C(528, J$.B(346, '>', J$.G(8049, J$.G(8041, J$.G(8033, J$.G(8025, J$.R(8017, 'self', self, 0), 's', 0), 'bulkResult', 0), 'writeErrors', 0), 'length', 0), J$.T(8057, 0, 22, false), 0)))) {
                                                return J$.X1(8193, J$.Rt(8185, J$.F(8177, J$.R(8065, 'callback', callback, 0), 0)(J$.F(8129, J$.R(8073, 'toError', toError, 1), 0)(J$.G(8121, J$.G(8105, J$.G(8097, J$.G(8089, J$.R(8081, 'self', self, 0), 's', 0), 'bulkResult', 0), 'writeErrors', 0), J$.T(8113, 0, 22, false), 4)), J$.F(8169, J$.R(8137, 'BulkWriteResult', BulkWriteResult, 1), 1)(J$.G(8161, J$.G(8153, J$.R(8145, 'self', self, 0), 's', 0), 'bulkResult', 0)))));
                                            }
                                            J$.X1(8233, J$.F(8225, J$.R(8201, 'executeCommands', executeCommands, 1), 0)(J$.R(8209, 'self', self, 0), J$.R(8217, 'callback', callback, 0)));
                                        } catch (J$e) {
                                            J$.Ex(10977, J$e);
                                        } finally {
                                            if (J$.Fr(10985))
                                                continue jalangiLabel3610;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 8241), resultHandler, 1));
                            var finalOptions = J$.X1(8329, J$.W(8321, 'finalOptions', J$.T(8313, {
                                ordered: J$.T(8305, true, 23, false)
                            }, 11, false), finalOptions, 1));
                            if (J$.X1(10993, J$.C(536, J$.B(354, '!=', J$.G(8353, J$.G(8345, J$.R(8337, 'self', self, 0), 's', 0), 'writeConcern', 0), J$.T(8361, null, 25, false), 0)))) {
                                J$.X1(8409, J$.P(8401, J$.R(8369, 'finalOptions', finalOptions, 0), 'writeConcern', J$.G(8393, J$.G(8385, J$.R(8377, 'self', self, 0), 's', 0), 'writeConcern', 0), 0));
                            }
                            if (J$.X1(11001, J$.C(544, J$.G(8425, J$.R(8417, 'self', self, 0), 'operationId', 0)))) {
                                J$.X1(8465, J$.P(8457, J$.R(8433, 'resultHandler', resultHandler, 0), 'operationId', J$.G(8449, J$.R(8441, 'self', self, 0), 'operationId', 0), 0));
                            }
                            if (J$.X1(11009, J$.C(552, J$.G(8497, J$.G(8489, J$.G(8481, J$.R(8473, 'self', self, 0), 's', 0), 'options', 0), 'serializeFunctions', 0)))) {
                                J$.X1(8529, J$.P(8521, J$.R(8505, 'finalOptions', finalOptions, 0), 'serializeFunctions', J$.T(8513, true, 23, false), 0));
                            }
                            if (J$.X1(11017, J$.C(560, J$.G(8561, J$.G(8553, J$.G(8545, J$.R(8537, 'self', self, 0), 's', 0), 'options', 0), 'ignoreUndefined', 0)))) {
                                J$.X1(8593, J$.P(8585, J$.R(8569, 'finalOptions', finalOptions, 0), 'ignoreUndefined', J$.T(8577, true, 23, false), 0));
                            }
                            if (J$.X1(11025, J$.C(568, J$.B(362, '==', J$.G(8617, J$.G(8609, J$.R(8601, 'self', self, 0), 's', 0), 'bypassDocumentValidation', 0), J$.T(8625, true, 23, false), 0)))) {
                                J$.X1(8657, J$.P(8649, J$.R(8633, 'finalOptions', finalOptions, 0), 'bypassDocumentValidation', J$.T(8641, true, 23, false), 0));
                            }
                            try {
                                if (J$.X1(11049, J$.C(592, J$.B(370, '==', J$.G(8673, J$.R(8665, 'batch', batch, 0), 'batchType', 0), J$.G(8689, J$.R(8681, 'common', common, 1), 'INSERT', 0), 0)))) {
                                    J$.X1(8793, J$.M(8785, J$.G(8713, J$.G(8705, J$.R(8697, 'self', self, 0), 's', 0), 'topology', 0), 'insert', 0)(J$.G(8745, J$.G(8737, J$.G(8729, J$.R(8721, 'self', self, 0), 's', 0), 'collection', 0), 'namespace', 0), J$.G(8761, J$.R(8753, 'batch', batch, 0), 'operations', 0), J$.R(8769, 'finalOptions', finalOptions, 0), J$.R(8777, 'resultHandler', resultHandler, 0)));
                                } else if (J$.X1(11041, J$.C(584, J$.B(378, '==', J$.G(8809, J$.R(8801, 'batch', batch, 0), 'batchType', 0), J$.G(8825, J$.R(8817, 'common', common, 1), 'UPDATE', 0), 0)))) {
                                    J$.X1(8929, J$.M(8921, J$.G(8849, J$.G(8841, J$.R(8833, 'self', self, 0), 's', 0), 'topology', 0), 'update', 0)(J$.G(8881, J$.G(8873, J$.G(8865, J$.R(8857, 'self', self, 0), 's', 0), 'collection', 0), 'namespace', 0), J$.G(8897, J$.R(8889, 'batch', batch, 0), 'operations', 0), J$.R(8905, 'finalOptions', finalOptions, 0), J$.R(8913, 'resultHandler', resultHandler, 0)));
                                } else if (J$.X1(11033, J$.C(576, J$.B(386, '==', J$.G(8945, J$.R(8937, 'batch', batch, 0), 'batchType', 0), J$.G(8961, J$.R(8953, 'common', common, 1), 'REMOVE', 0), 0)))) {
                                    J$.X1(9065, J$.M(9057, J$.G(8985, J$.G(8977, J$.R(8969, 'self', self, 0), 's', 0), 'topology', 0), 'remove', 0)(J$.G(9017, J$.G(9009, J$.G(9001, J$.R(8993, 'self', self, 0), 's', 0), 'collection', 0), 'namespace', 0), J$.G(9033, J$.R(9025, 'batch', batch, 0), 'operations', 0), J$.R(9041, 'finalOptions', finalOptions, 0), J$.R(9049, 'resultHandler', resultHandler, 0)));
                                }
                            } catch (err) {
                                err = J$.N(9209, 'err', err, 1);
                                J$.X1(9097, J$.P(9089, J$.R(9073, 'err', err, 0), 'ok', J$.T(9081, 0, 22, false), 0));
                                J$.X1(9201, J$.F(9193, J$.R(9105, 'callback', callback, 0), 0)(J$.T(9113, null, 25, false), J$.F(9185, J$.R(9121, 'mergeBatchResults', mergeBatchResults, 1), 0)(J$.T(9129, false, 23, false), J$.R(9137, 'batch', batch, 0), J$.G(9161, J$.G(9153, J$.R(9145, 'self', self, 0), 's', 0), 'bulkResult', 0), J$.R(9169, 'err', err, 0), J$.T(9177, null, 25, false))));
                            }
                        } catch (J$e) {
                            J$.Ex(11057, J$e);
                        } finally {
                            if (J$.Fr(11065))
                                continue jalangiLabel3611;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 9217), executeCommands, 3));
            J$.X1(10001, J$.P(9993, J$.G(9305, J$.R(9297, 'OrderedBulkOperation', OrderedBulkOperation, 1), 'prototype', 0), 'execute', J$.T(9985, function (_writeConcern, callback) {
                jalangiLabel3614:
                    while (true) {
                        try {
                            J$.Fe(9945, arguments.callee, this, arguments);
                            arguments = J$.N(9953, 'arguments', arguments, 4);
                            _writeConcern = J$.N(9961, '_writeConcern', _writeConcern, 4);
                            callback = J$.N(9969, 'callback', callback, 4);
                            J$.N(9977, 'self', self, 0);
                            var self = J$.X1(9329, J$.W(9321, 'self', J$.R(9313, 'this', this, 0), self, 1));
                            if (J$.X1(11073, J$.C(600, J$.G(9353, J$.G(9345, J$.R(9337, 'this', this, 0), 's', 0), 'executed', 0))))
                                throw J$.X1(9393, J$.Th(9385, J$.F(9377, J$.R(9361, 'toError', toError, 1), 1)(J$.T(9369, 'batch cannot be re-executed', 21, false))));
                            if (J$.X1(11081, J$.C(608, J$.B(402, '==', J$.U(394, 'typeof', J$.R(9401, '_writeConcern', _writeConcern, 0)), J$.T(9409, 'function', 21, false), 0)))) {
                                J$.X1(9433, callback = J$.W(9425, 'callback', J$.R(9417, '_writeConcern', _writeConcern, 0), callback, 0));
                            } else {
                                J$.X1(9473, J$.P(9465, J$.G(9449, J$.R(9441, 'this', this, 0), 's', 0), 'writeConcern', J$.R(9457, '_writeConcern', _writeConcern, 0), 0));
                            }
                            if (J$.X1(11089, J$.C(616, J$.G(9497, J$.G(9489, J$.R(9481, 'this', this, 0), 's', 0), 'currentBatch', 0))))
                                J$.X1(9561, J$.M(9553, J$.G(9521, J$.G(9513, J$.R(9505, 'this', this, 0), 's', 0), 'batches', 0), 'push', 0)(J$.G(9545, J$.G(9537, J$.R(9529, 'this', this, 0), 's', 0), 'currentBatch', 0)));
                            if (J$.X1(11097, J$.C(624, J$.B(410, '==', J$.G(9593, J$.G(9585, J$.G(9577, J$.R(9569, 'this', this, 0), 's', 0), 'batches', 0), 'length', 0), J$.T(9601, 0, 22, false), 0)))) {
                                throw J$.X1(9641, J$.Th(9633, J$.F(9625, J$.R(9609, 'toError', toError, 1), 0)(J$.T(9617, 'Invalid Operation, No operations in bulk', 21, false))));
                            }
                            if (J$.X1(11105, J$.C(632, J$.B(426, '==', J$.U(418, 'typeof', J$.R(9649, 'callback', callback, 0)), J$.T(9657, 'function', 21, false), 0)))) {
                                return J$.X1(9705, J$.Rt(9697, J$.F(9689, J$.R(9665, 'executeCommands', executeCommands, 1), 0)(J$.R(9673, 'this', this, 0), J$.R(9681, 'callback', callback, 0))));
                            }
                            return J$.X1(9937, J$.Rt(9929, J$.M(9921, J$.G(9721, J$.R(9713, 'this', this, 0), 's', 0), 'promiseLibrary', 2)(J$.T(9913, function (resolve, reject) {
                                jalangiLabel3613:
                                    while (true) {
                                        try {
                                            J$.Fe(9881, arguments.callee, this, arguments);
                                            arguments = J$.N(9889, 'arguments', arguments, 4);
                                            resolve = J$.N(9897, 'resolve', resolve, 4);
                                            reject = J$.N(9905, 'reject', reject, 4);
                                            J$.X1(9873, J$.F(9865, J$.R(9729, 'executeCommands', executeCommands, 1), 0)(J$.R(9737, 'self', self, 0), J$.T(9857, function (err, r) {
                                                jalangiLabel3612:
                                                    while (true) {
                                                        try {
                                                            J$.Fe(9825, arguments.callee, this, arguments);
                                                            arguments = J$.N(9833, 'arguments', arguments, 4);
                                                            err = J$.N(9841, 'err', err, 4);
                                                            r = J$.N(9849, 'r', r, 4);
                                                            if (J$.X1(11113, J$.C(640, J$.R(9745, 'err', err, 0))))
                                                                return J$.X1(9785, J$.Rt(9777, J$.F(9769, J$.R(9753, 'reject', reject, 0), 0)(J$.R(9761, 'err', err, 0))));
                                                            J$.X1(9817, J$.F(9809, J$.R(9793, 'resolve', resolve, 0), 0)(J$.R(9801, 'r', r, 0)));
                                                        } catch (J$e) {
                                                            J$.Ex(11121, J$e);
                                                        } finally {
                                                            if (J$.Fr(11129))
                                                                continue jalangiLabel3612;
                                                            else
                                                                return J$.Ra();
                                                        }
                                                    }
                                            }, 12, false, 9825)));
                                        } catch (J$e) {
                                            J$.Ex(11137, J$e);
                                        } finally {
                                            if (J$.Fr(11145))
                                                continue jalangiLabel3613;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 9881))));
                        } catch (J$e) {
                            J$.Ex(11153, J$e);
                        } finally {
                            if (J$.Fr(11161))
                                continue jalangiLabel3614;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 9945), 0));
            J$.X1(10057, J$.M(10049, J$.R(10009, 'define', define, 1), 'classMethod', 0)(J$.T(10017, 'execute', 21, false), J$.T(10041, {
                callback: J$.T(10025, true, 23, false),
                promise: J$.T(10033, false, 23, false)
            }, 11, false)));
            var initializeOrderedBulkOp = J$.X1(10177, J$.W(10169, 'initializeOrderedBulkOp', J$.T(10161, function (topology, collection, options) {
                jalangiLabel3615:
                    while (true) {
                        try {
                            J$.Fe(10121, arguments.callee, this, arguments);
                            arguments = J$.N(10129, 'arguments', arguments, 4);
                            topology = J$.N(10137, 'topology', topology, 4);
                            collection = J$.N(10145, 'collection', collection, 4);
                            options = J$.N(10153, 'options', options, 4);
                            return J$.X1(10113, J$.Rt(10105, J$.F(10097, J$.R(10065, 'OrderedBulkOperation', OrderedBulkOperation, 1), 1)(J$.R(10073, 'topology', topology, 0), J$.R(10081, 'collection', collection, 0), J$.R(10089, 'options', options, 0))));
                        } catch (J$e) {
                            J$.Ex(11169, J$e);
                        } finally {
                            if (J$.Fr(11177))
                                continue jalangiLabel3615;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 10121), initializeOrderedBulkOp, 3));
            J$.X1(10209, J$.P(10201, J$.R(10185, 'initializeOrderedBulkOp', initializeOrderedBulkOp, 1), 'OrderedBulkOperation', J$.R(10193, 'OrderedBulkOperation', OrderedBulkOperation, 1), 0));
            J$.X1(10241, J$.P(10233, J$.R(10217, 'module', module, 2), 'exports', J$.R(10225, 'initializeOrderedBulkOp', initializeOrderedBulkOp, 1), 0));
            J$.X1(10281, J$.P(10273, J$.G(10257, J$.R(10249, 'module', module, 2), 'exports', 0), 'Bulk', J$.R(10265, 'OrderedBulkOperation', OrderedBulkOperation, 1), 0));
        } catch (J$e) {
            J$.Ex(11185, J$e);
        } finally {
            if (J$.Sr(11193)) {
                J$.L();
                continue jalangiLabel3616;
            } else {
                J$.L();
                break jalangiLabel3616;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
