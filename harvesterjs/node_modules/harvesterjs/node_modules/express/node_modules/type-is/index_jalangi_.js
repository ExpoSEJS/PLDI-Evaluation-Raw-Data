J$.iids = {"8":[14,9,14,15],"9":[1,20,1,27],"10":[14,9,14,15],"16":[17,9,17,39],"17":[1,28,1,32],"18":[17,18,17,39],"24":[19,21,19,37],"25":[1,20,1,33],"26":[18,27,18,47],"32":[17,9,17,39],"33":[1,20,1,33],"34":[19,21,19,37],"40":[23,9,23,32],"41":[1,20,1,33],"42":[19,39,19,42],"48":[23,9,23,32],"49":[2,26,2,38],"56":[28,20,28,57],"57":[2,26,2,45],"58":[19,39,19,42],"64":[28,20,28,57],"65":[2,26,2,45],"66":[20,34,20,39],"72":[27,13,27,57],"73":[2,26,2,45],"74":[23,9,23,15],"80":[26,17,26,33],"81":[3,13,3,20],"82":[23,19,23,32],"88":[35,9,35,39],"89":[3,21,3,34],"90":[26,17,26,33],"96":[38,9,38,16],"97":[3,13,3,35],"98":[26,35,26,38],"104":[40,9,40,22],"105":[3,13,3,35],"112":[46,9,46,22],"113":[3,13,3,35],"114":[26,35,26,38],"120":[51,25,51,41],"121":[4,12,4,19],"122":[28,20,28,35],"128":[49,9,49,29],"129":[4,20,4,32],"130":[28,39,28,57],"136":[59,13,59,17],"137":[4,12,4,33],"138":[35,9,35,39],"144":[60,10,60,22],"145":[4,12,4,33],"146":[38,9,38,16],"152":[62,10,62,21],"153":[4,12,4,33],"154":[42,13,42,34],"160":[66,12,66,49],"161":[5,1,5,7],"162":[42,12,42,34],"168":[66,12,66,49],"169":[5,18,5,31],"170":[46,9,46,22],"176":[69,9,69,27],"177":[5,1,5,31],"178":[49,9,49,29],"184":[72,9,72,28],"185":[5,1,5,32],"186":[50,27,50,47],"192":[77,16,77,73],"193":[6,1,6,14],"194":[51,25,51,41],"200":[77,16,77,127],"201":[6,20,6,26],"202":[51,43,51,46],"208":[76,9,76,28],"209":[6,1,6,26],"216":[79,9,79,32],"217":[6,1,6,27],"218":[51,43,51,46],"224":[82,9,82,28],"225":[7,1,7,14],"226":[52,34,52,39],"232":[85,9,85,28],"233":[7,25,7,32],"234":[66,12,66,27],"240":[88,9,88,57],"241":[7,1,7,32],"242":[66,31,66,49],"248":[89,16,89,87],"249":[7,1,7,33],"250":[69,9,69,27],"256":[89,16,89,157],"257":[8,1,8,14],"258":[72,9,72,28],"264":[88,9,88,57],"265":[8,27,8,36],"266":[76,9,76,28],"273":[8,1,8,36],"274":[77,38,77,73],"281":[8,1,8,37],"282":[77,107,77,126],"289":[9,1,9,14],"290":[77,77,77,127],"297":[9,23,9,32],"298":[79,10,79,32],"305":[9,1,9,32],"306":[79,9,79,32],"313":[9,1,9,33],"314":[82,9,82,28],"321":[12,17,12,23],"322":[83,16,83,41],"329":[12,17,12,23],"330":[85,9,85,28],"337":[12,17,12,23],"338":[86,16,86,41],"345":[13,13,13,26],"346":[88,9,88,31],"353":[13,27,13,32],"354":[88,35,88,57],"361":[13,13,13,33],"362":[89,16,89,41],"369":[13,13,13,33],"370":[89,67,89,87],"377":[13,5,13,34],"378":[89,45,89,87],"385":[14,10,14,15],"386":[89,134,89,156],"393":[15,16,15,21],"394":[89,91,89,157],"401":[15,16,15,21],"402":[96,9,96,31],"409":[15,9,15,22],"417":[17,9,17,14],"425":[17,19,17,24],"433":[17,33,17,38],"441":[17,19,17,39],"443":[17,19,17,32],"449":[18,21,18,26],"457":[18,27,18,36],"465":[18,27,18,43],"473":[18,46,18,47],"481":[18,17,18,48],"489":[18,17,18,48],"497":[18,9,18,49],"505":[19,18,19,19],"513":[19,18,19,19],"521":[19,21,19,22],"529":[19,25,19,30],"537":[19,25,19,37],"553":[19,39,19,40],"561":[19,39,19,42],"577":[20,13,20,18],"585":[20,19,20,20],"593":[20,24,20,33],"601":[20,34,20,35],"609":[20,38,20,39],"617":[20,24,20,40],"625":[20,13,20,40],"633":[20,13,20,41],"641":[23,10,23,15],"649":[23,20,23,25],"657":[23,20,23,32],"665":[24,16,24,21],"673":[24,16,24,21],"681":[24,9,24,22],"689":[26,14,26,15],"697":[26,14,26,15],"705":[26,17,26,18],"713":[26,21,26,26],"721":[26,21,26,33],"737":[26,35,26,36],"745":[26,35,26,38],"761":[27,13,27,22],"769":[27,23,27,32],"777":[27,40,27,45],"785":[27,46,27,47],"793":[27,40,27,48],"801":[27,40,27,48],"809":[27,23,27,49],"817":[27,51,27,56],"825":[27,13,27,57],"833":[28,20,28,24],"841":[28,25,28,26],"849":[28,20,28,27],"857":[28,32,28,35],"865":[28,40,28,44],"873":[28,53,28,56],"881":[28,40,28,57],"883":[28,40,28,52],"889":[28,60,28,65],"897":[28,68,28,72],"905":[28,20,28,72],"913":[28,13,28,73],"921":[31,12,31,17],"929":[31,12,31,17],"937":[31,5,31,18],"945":[10,1,32,2],"953":[10,1,32,2],"961":[10,1,32,2],"969":[10,1,32,2],"977":[10,1,32,2],"985":[10,1,32,2],"993":[10,1,32,2],"1001":[34,19,34,22],"1009":[34,19,34,30],"1017":[34,19,34,30],"1025":[34,19,34,30],"1033":[35,9,35,28],"1041":[35,32,35,39],"1049":[36,16,36,20],"1057":[36,16,36,20],"1065":[36,9,36,21],"1073":[37,18,37,25],"1081":[37,26,37,42],"1089":[37,18,37,43],"1097":[37,18,37,43],"1105":[37,18,37,43],"1113":[38,10,38,16],"1121":[39,16,39,21],"1129":[39,16,39,21],"1137":[39,9,39,22],"1145":[40,9,40,14],"1153":[40,15,40,21],"1161":[40,9,40,22],"1169":[41,16,41,21],"1177":[41,16,41,21],"1185":[41,9,41,22],"1193":[42,14,42,22],"1201":[42,23,42,29],"1209":[42,31,42,33],"1217":[42,14,42,34],"1225":[42,12,42,34],"1233":[42,5,42,35],"1241":[33,1,43,2],"1249":[33,1,43,2],"1257":[33,1,43,2],"1265":[33,1,43,2],"1273":[33,1,43,2],"1281":[45,17,45,23],"1289":[45,17,45,23],"1297":[45,17,45,23],"1305":[46,10,46,17],"1313":[46,18,46,21],"1321":[46,10,46,22],"1329":[47,16,47,20],"1337":[47,16,47,20],"1345":[47,9,47,21],"1353":[49,9,49,18],"1361":[49,9,49,25],"1369":[49,28,49,29],"1377":[50,21,50,26],"1385":[50,27,50,36],"1393":[50,27,50,43],"1401":[50,46,50,47],"1409":[50,17,50,48],"1417":[50,17,50,48],"1425":[50,9,50,49],"1433":[51,22,51,23],"1441":[51,22,51,23],"1449":[51,22,51,23],"1457":[51,25,51,26],"1465":[51,29,51,34],"1473":[51,29,51,41],"1489":[51,43,51,44],"1497":[51,43,51,46],"1513":[52,13,52,18],"1521":[52,19,52,20],"1529":[52,24,52,33],"1537":[52,34,52,35],"1545":[52,38,52,39],"1553":[52,24,52,40],"1561":[52,13,52,40],"1569":[52,13,52,41],"1577":[55,17,55,20],"1585":[55,17,55,28],"1593":[55,29,55,43],"1601":[55,17,55,44],"1609":[55,17,55,44],"1617":[55,17,55,44],"1625":[56,12,56,18],"1633":[56,19,56,24],"1641":[56,26,56,31],"1649":[56,12,56,32],"1657":[56,12,56,32],"1665":[56,5,56,33],"1673":[44,1,57,2],"1681":[44,1,57,2],"1689":[44,1,57,2],"1697":[44,1,57,2],"1705":[44,1,57,2],"1713":[44,1,57,2],"1721":[44,1,57,2],"1729":[59,13,59,17],"1737":[61,16,61,51],"1745":[61,16,61,51],"1753":[61,9,61,52],"1761":[60,10,60,22],"1769":[63,16,63,29],"1777":[63,16,63,29],"1785":[63,9,63,30],"1793":[62,10,62,21],"1801":[66,12,66,16],"1809":[66,17,66,18],"1817":[66,12,66,19],"1825":[66,24,66,27],"1833":[66,32,66,36],"1841":[66,45,66,48],"1849":[66,32,66,49],"1851":[66,32,66,44],"1857":[66,52,66,56],"1865":[66,59,66,63],"1873":[66,71,66,75],"1881":[66,59,66,76],"1883":[66,59,66,70],"1889":[66,12,66,76],"1897":[66,5,66,77],"1905":[58,1,67,2],"1913":[58,1,67,2],"1921":[58,1,67,2],"1929":[69,9,69,17],"1937":[69,22,69,27],"1945":[70,16,70,21],"1953":[70,16,70,21],"1961":[70,9,70,22],"1969":[72,9,72,17],"1977":[72,22,72,28],"1985":[73,16,73,20],"1993":[73,16,73,20],"2001":[73,9,73,21],"2009":[75,14,75,20],"2017":[75,27,75,30],"2025":[75,14,75,31],"2027":[75,14,75,26],"2033":[75,14,75,31],"2041":[75,5,75,32],"2049":[76,9,76,17],"2057":[76,18,76,19],"2065":[76,9,76,20],"2073":[76,25,76,28],"2081":[77,16,77,23],"2089":[77,24,77,30],"2097":[77,31,77,32],"2105":[77,24,77,33],"2113":[77,16,77,34],"2121":[77,38,77,46],"2129":[77,38,77,53],"2137":[77,57,77,63],"2145":[77,64,77,65],"2153":[77,57,77,66],"2161":[77,57,77,73],"2169":[77,77,77,85],"2177":[77,90,77,96],"2185":[77,97,77,98],"2193":[77,90,77,99],"2201":[77,107,77,108],"2209":[77,111,77,119],"2217":[77,111,77,126],"2225":[77,90,77,127],"2227":[77,90,77,106],"2233":[77,16,77,127],"2241":[77,9,77,128],"2249":[79,11,79,19],"2257":[79,28,79,31],"2265":[79,11,79,32],"2267":[79,11,79,27],"2273":[80,16,80,21],"2281":[80,16,80,21],"2289":[80,9,80,22],"2297":[81,16,81,24],"2305":[81,31,81,34],"2313":[81,16,81,35],"2315":[81,16,81,30],"2321":[81,16,81,35],"2329":[81,5,81,36],"2337":[82,9,82,17],"2345":[82,18,82,19],"2353":[82,9,82,20],"2361":[82,25,82,28],"2369":[83,16,83,24],"2377":[83,25,83,26],"2385":[83,16,83,27],"2393":[83,32,83,38],"2401":[83,39,83,40],"2409":[83,32,83,41],"2417":[83,16,83,41],"2425":[83,9,83,42],"2433":[85,9,85,17],"2441":[85,18,85,19],"2449":[85,9,85,20],"2457":[85,25,85,28],"2465":[86,16,86,24],"2473":[86,25,86,26],"2481":[86,16,86,27],"2489":[86,32,86,38],"2497":[86,39,86,40],"2505":[86,32,86,41],"2513":[86,16,86,41],"2521":[86,9,86,42],"2529":[88,9,88,17],"2537":[88,18,88,19],"2545":[88,9,88,20],"2553":[88,21,88,22],"2561":[88,9,88,23],"2569":[88,28,88,31],"2577":[88,35,88,43],"2585":[88,44,88,45],"2593":[88,35,88,46],"2601":[88,47,88,48],"2609":[88,35,88,49],"2617":[88,54,88,57],"2625":[89,16,89,24],"2633":[89,25,89,26],"2641":[89,16,89,27],"2649":[89,32,89,38],"2657":[89,39,89,40],"2665":[89,32,89,41],"2673":[89,45,89,53],"2681":[89,54,89,55],"2689":[89,45,89,56],"2697":[89,45,89,63],"2705":[89,67,89,73],"2713":[89,74,89,75],"2721":[89,67,89,76],"2729":[89,67,89,83],"2737":[89,86,89,87],"2745":[89,91,89,99],"2753":[89,100,89,101],"2761":[89,91,89,102],"2769":[89,110,89,111],"2777":[89,91,89,112],"2779":[89,91,89,109],"2785":[89,117,89,123],"2793":[89,124,89,125],"2801":[89,117,89,126],"2809":[89,134,89,135],"2817":[89,138,89,146],"2825":[89,147,89,148],"2833":[89,138,89,149],"2841":[89,138,89,156],"2849":[89,117,89,157],"2851":[89,117,89,133],"2857":[89,16,89,157],"2865":[89,9,89,158],"2873":[91,12,91,17],"2881":[91,12,91,17],"2889":[91,5,91,18],"2897":[68,1,92,2],"2905":[68,1,92,2],"2913":[68,1,92,2],"2921":[68,1,92,2],"2929":[95,20,95,25],"2937":[95,32,95,37],"2945":[95,20,95,38],"2947":[95,20,95,31],"2953":[95,20,95,38],"2961":[95,20,95,38],"2969":[96,16,96,20],"2977":[96,9,96,32],"2985":[97,16,97,21],"2993":[97,29,97,33],"3001":[97,16,97,34],"3003":[97,16,97,28],"3009":[97,16,97,34],"3017":[97,9,97,35],"3025":[99,16,99,20],"3033":[99,16,99,20],"3041":[99,9,99,21],"3049":[98,7,100,6],"3057":[93,1,101,2],"3065":[93,1,101,2],"3073":[93,1,101,2],"3081":[93,1,101,2],"3089":[1,1,101,2],"3097":[1,1,101,2],"3105":[1,1,101,2],"3113":[1,1,101,2],"3121":[1,1,101,2],"3129":[10,1,32,2],"3137":[1,1,101,2],"3145":[33,1,43,2],"3153":[1,1,101,2],"3161":[44,1,57,2],"3169":[1,1,101,2],"3177":[58,1,67,2],"3185":[1,1,101,2],"3193":[68,1,92,2],"3201":[1,1,101,2],"3209":[93,1,101,2],"3217":[1,1,101,2],"3225":[14,5,16,6],"3233":[19,9,21,10],"3241":[19,9,21,10],"3249":[19,9,21,10],"3257":[17,5,22,6],"3265":[23,5,24,22],"3273":[28,20,28,72],"3281":[27,9,29,10],"3289":[26,5,30,6],"3297":[26,5,30,6],"3305":[26,5,30,6],"3313":[10,1,32,2],"3321":[10,1,32,2],"3329":[35,5,36,21],"3337":[38,5,39,22],"3345":[40,5,41,22],"3353":[33,1,43,2],"3361":[33,1,43,2],"3369":[46,5,48,6],"3377":[51,9,53,10],"3385":[51,9,53,10],"3393":[49,5,54,6],"3401":[44,1,57,2],"3409":[44,1,57,2],"3417":[59,13,59,17],"3425":[60,10,60,22],"3433":[62,10,62,21],"3441":[66,12,66,76],"3449":[58,1,67,2],"3457":[58,1,67,2],"3465":[69,5,71,6],"3473":[72,5,74,6],"3481":[76,5,78,6],"3489":[79,5,80,22],"3497":[82,5,84,6],"3505":[85,5,87,6],"3513":[88,5,90,6],"3521":[68,1,92,2],"3529":[68,1,92,2],"3537":[93,1,101,2],"3545":[93,1,101,2],"3553":[1,1,101,2],"3561":[1,1,101,2],"nBranches":66,"originalCodeFileName":"/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/express/node_modules/type-is/index.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/express/node_modules/type-is/index_jalangi_.js","code":"\nvar typer = require('media-typer')\nvar mime = require('mime-types')\n\nmodule.exports = typeofrequest;\ntypeofrequest.is = typeis;\ntypeofrequest.hasBody = hasbody;\ntypeofrequest.normalize = normalize;\ntypeofrequest.match = mimeMatch;\n\n/**\n * Compare a `value` content-type with `types`.\n * Each `type` can be an extension like `html`,\n * a special shortcut like `multipart` or `urlencoded`,\n * or a mime type.\n *\n * If no types match, `false` is returned.\n * Otherwise, the first `type` that matches is returned.\n *\n * @param {String} value\n * @param {Array} types\n * @return String\n */\n\nfunction typeis(value, types_) {\n  var i\n  var types = types_\n\n  // remove parameters and normalize\n  value = typenormalize(value)\n\n  // no type or invalid\n  if (!value) {\n    return false\n  }\n\n  // support flattened arguments\n  if (types && !Array.isArray(types)) {\n    types = new Array(arguments.length - 1)\n    for (i = 0; i < types.length; i++) {\n      types[i] = arguments[i + 1]\n    }\n  }\n\n  // no types, return the content type\n  if (!types || !types.length) return value;\n\n  var type\n  for (i = 0; i < types.length; i++) {\n    if (mimeMatch(normalize(type = types[i]), value)) {\n      return type[0] === '+' || ~type.indexOf('*')\n        ? value\n        : type\n    }\n  }\n\n  // no matches\n  return false;\n}\n\n/**\n * Check if a request has a request body.\n * A request with a body __must__ either have `transfer-encoding`\n * or `content-length` headers set.\n * http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3\n *\n * @param {Object} request\n * @return {Boolean}\n * @api public\n */\n\nfunction hasbody(req) {\n  var headers = req.headers;\n  if ('transfer-encoding' in headers) return true;\n  var length = headers['content-length'];\n  if (!length) return false;\n  // no idea when this would happen, but `isNaN(null) === false`\n  if (isNaN(length)) return false;\n  return !!parseInt(length, 10);\n}\n\n/**\n * Check if the incoming request contains the \"Content-Type\"\n * header field, and it contains any of the give mime `type`s.\n * If there is no request body, `null` is returned.\n * If there is no content type, `false` is returned.\n * Otherwise, it returns the first `type` that matches.\n *\n * Examples:\n *\n *     // With Content-Type: text/html; charset=utf-8\n *     this.is('html'); // => 'html'\n *     this.is('text/html'); // => 'text/html'\n *     this.is('text/*', 'application/json'); // => 'text/html'\n *\n *     // When Content-Type is application/json\n *     this.is('json', 'urlencoded'); // => 'json'\n *     this.is('application/json'); // => 'application/json'\n *     this.is('html', 'application/*'); // => 'application/json'\n *\n *     this.is('html'); // => false\n *\n * @param {String|Array} types...\n * @return {String|false|null}\n * @api public\n */\n\nfunction typeofrequest(req, types_) {\n  var types = types_\n\n  // no body\n  if (!hasbody(req)) {\n    return null\n  }\n\n  // support flattened arguments\n  if (arguments.length > 2) {\n    types = new Array(arguments.length - 1)\n    for (var i = 0; i < types.length; i++) {\n      types[i] = arguments[i + 1]\n    }\n  }\n\n  // request content type\n  var value = req.headers['content-type']\n\n  return typeis(value, types);\n}\n\n/**\n * Normalize a mime type.\n * If it's a shorthand, expand it to a valid mime type.\n *\n * In general, you probably want:\n *\n *   var type = is(req, ['urlencoded', 'json', 'multipart']);\n *\n * Then use the appropriate body parsers.\n * These three are the most common request body types\n * and are thus ensured to work.\n *\n * @param {String} type\n * @api private\n */\n\nfunction normalize(type) {\n  switch (type) {\n    case 'urlencoded': return 'application/x-www-form-urlencoded';\n    case 'multipart':\n      type = 'multipart/*';\n      break;\n  }\n\n  return type[0] === '+' || ~type.indexOf('/')\n    ? type\n    : mime.lookup(type)\n}\n\n/**\n * Check if `exected` mime type\n * matches `actual` mime type with\n * wildcard and +suffix support.\n *\n * @param {String} expected\n * @param {String} actual\n * @return {Boolean}\n * @api private\n */\n\nfunction mimeMatch(expected, actual) {\n  // invalid type\n  if (expected === false) {\n    return false\n  }\n\n  // exact match\n  if (expected === actual) {\n    return true\n  }\n\n  actual = actual.split('/');\n\n  if (expected[0] === '+') {\n    // support +suffix\n    return Boolean(actual[1])\n      && expected.length <= actual[1].length\n      && expected === actual[1].substr(0 - expected.length)\n  }\n\n  if (!~expected.indexOf('*')) return false;\n\n  expected = expected.split('/');\n\n  if (expected[0] === '*') {\n    // support */yyy\n    return expected[1] === actual[1]\n  }\n\n  if (expected[1] === '*') {\n    // support xxx/*\n    return expected[0] === actual[0]\n  }\n\n  if (expected[1][0] === '*' && expected[1][1] === '+') {\n    // support xxx/*+zzz\n    return expected[0] === actual[0]\n      && expected[1].length <= actual[1].length + 1\n      && expected[1].substr(1) === actual[1].substr(1 - expected[1].length)\n  }\n\n  return false\n}\n\n/**\n * Normalize a type and remove parameters.\n *\n * @param {string} value\n * @return {string}\n * @api private\n */\n\nfunction typenormalize(value) {\n  try {\n    var type = typer.parse(value)\n    delete type.parameters\n    return typer.format(type)\n  } catch (err) {\n    return null\n  }\n}\n"};
jalangiLabel544:
    while (true) {
        try {
            J$.Se(3089, '/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/express/node_modules/type-is/index_jalangi_.js', '/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/express/node_modules/type-is/index.js');
            function typeis(value, types_) {
                jalangiLabel538:
                    while (true) {
                        try {
                            J$.Fe(945, arguments.callee, this, arguments);
                            arguments = J$.N(953, 'arguments', arguments, 4);
                            value = J$.N(961, 'value', value, 4);
                            types_ = J$.N(969, 'types_', types_, 4);
                            J$.N(977, 'i', i, 0);
                            J$.N(985, 'types', types, 0);
                            J$.N(993, 'type', type, 0);
                            var i;
                            var types = J$.X1(337, J$.W(329, 'types', J$.R(321, 'types_', types_, 0), types, 1));
                            J$.X1(377, value = J$.W(369, 'value', J$.F(361, J$.R(345, 'typenormalize', typenormalize, 1), 0)(J$.R(353, 'value', value, 0)), value, 0));
                            if (J$.X1(3225, J$.C(8, J$.U(10, '!', J$.R(385, 'value', value, 0))))) {
                                return J$.X1(409, J$.Rt(401, J$.T(393, false, 23, false)));
                            }
                            if (J$.X1(3257, J$.C(32, J$.C(16, J$.R(417, 'types', types, 0)) ? J$.U(18, '!', J$.M(441, J$.R(425, 'Array', Array, 2), 'isArray', 0)(J$.R(433, 'types', types, 0))) : J$._()))) {
                                J$.X1(497, types = J$.W(489, 'types', J$.F(481, J$.R(449, 'Array', Array, 2), 1)(J$.B(26, '-', J$.G(465, J$.R(457, 'arguments', arguments, 2), 'length', 0), J$.T(473, 1, 22, false), 0)), types, 0));
                                for (J$.X1(3241, i = J$.W(513, 'i', J$.T(505, 0, 22, false), i, 0)); J$.X1(3233, J$.C(24, J$.B(34, '<', J$.R(521, 'i', i, 0), J$.G(537, J$.R(529, 'types', types, 0), 'length', 0), 0))); J$.X1(3249, J$.B(58, '-', i = J$.W(561, 'i', J$.B(50, '+', J$.U(42, '+', J$.R(553, 'i', i, 0)), J$.T(545, 1, 22, false), 0), i, 0), J$.T(569, 1, 22, false), 0))) {
                                    J$.X1(633, J$.P(625, J$.R(577, 'types', types, 0), J$.R(585, 'i', i, 0), J$.G(617, J$.R(593, 'arguments', arguments, 2), J$.B(66, '+', J$.R(601, 'i', i, 0), J$.T(609, 1, 22, false), 0), 4), 2));
                                }
                            }
                            if (J$.X1(3265, J$.C(48, J$.C(40, J$.U(74, '!', J$.R(641, 'types', types, 0))) ? J$._() : J$.U(82, '!', J$.G(657, J$.R(649, 'types', types, 0), 'length', 0)))))
                                return J$.X1(681, J$.Rt(673, J$.R(665, 'value', value, 0)));
                            var type;
                            for (J$.X1(3297, i = J$.W(697, 'i', J$.T(689, 0, 22, false), i, 0)); J$.X1(3289, J$.C(80, J$.B(90, '<', J$.R(705, 'i', i, 0), J$.G(721, J$.R(713, 'types', types, 0), 'length', 0), 0))); J$.X1(3305, J$.B(114, '-', i = J$.W(745, 'i', J$.B(106, '+', J$.U(98, '+', J$.R(737, 'i', i, 0)), J$.T(729, 1, 22, false), 0), i, 0), J$.T(753, 1, 22, false), 0))) {
                                if (J$.X1(3281, J$.C(72, J$.F(825, J$.R(761, 'mimeMatch', mimeMatch, 1), 0)(J$.F(809, J$.R(769, 'normalize', normalize, 1), 0)(type = J$.W(801, 'type', J$.G(793, J$.R(777, 'types', types, 0), J$.R(785, 'i', i, 0), 4), type, 0)), J$.R(817, 'value', value, 0))))) {
                                    return J$.X1(913, J$.Rt(905, J$.X1(3273, J$.C(64, J$.C(56, J$.B(122, '===', J$.G(849, J$.R(833, 'type', type, 0), J$.T(841, 0, 22, false), 4), J$.T(857, '+', 21, false), 0)) ? J$._() : J$.U(130, '~', J$.M(881, J$.R(865, 'type', type, 0), 'indexOf', 0)(J$.T(873, '*', 21, false))))) ? J$.R(889, 'value', value, 0) : J$.R(897, 'type', type, 0)));
                                }
                            }
                            return J$.X1(937, J$.Rt(929, J$.T(921, false, 23, false)));
                        } catch (J$e) {
                            J$.Ex(3313, J$e);
                        } finally {
                            if (J$.Fr(3321))
                                continue jalangiLabel538;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function hasbody(req) {
                jalangiLabel539:
                    while (true) {
                        try {
                            J$.Fe(1241, arguments.callee, this, arguments);
                            arguments = J$.N(1249, 'arguments', arguments, 4);
                            req = J$.N(1257, 'req', req, 4);
                            J$.N(1265, 'headers', headers, 0);
                            J$.N(1273, 'length', length, 0);
                            var headers = J$.X1(1025, J$.W(1017, 'headers', J$.G(1009, J$.R(1001, 'req', req, 0), 'headers', 0), headers, 1));
                            if (J$.X1(3329, J$.C(88, J$.B(138, 'in', J$.T(1033, 'transfer-encoding', 21, false), J$.R(1041, 'headers', headers, 0), 0))))
                                return J$.X1(1065, J$.Rt(1057, J$.T(1049, true, 23, false)));
                            var length = J$.X1(1105, J$.W(1097, 'length', J$.G(1089, J$.R(1073, 'headers', headers, 0), J$.T(1081, 'content-length', 21, false), 4), length, 1));
                            if (J$.X1(3337, J$.C(96, J$.U(146, '!', J$.R(1113, 'length', length, 0)))))
                                return J$.X1(1137, J$.Rt(1129, J$.T(1121, false, 23, false)));
                            if (J$.X1(3345, J$.C(104, J$.F(1161, J$.R(1145, 'isNaN', isNaN, 2), 0)(J$.R(1153, 'length', length, 0)))))
                                return J$.X1(1185, J$.Rt(1177, J$.T(1169, false, 23, false)));
                            return J$.X1(1233, J$.Rt(1225, J$.U(162, '!', J$.U(154, '!', J$.F(1217, J$.R(1193, 'parseInt', parseInt, 2), 0)(J$.R(1201, 'length', length, 0), J$.T(1209, 10, 22, false))))));
                        } catch (J$e) {
                            J$.Ex(3353, J$e);
                        } finally {
                            if (J$.Fr(3361))
                                continue jalangiLabel539;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function typeofrequest(req, types_) {
                jalangiLabel540:
                    while (true) {
                        try {
                            J$.Fe(1673, arguments.callee, this, arguments);
                            arguments = J$.N(1681, 'arguments', arguments, 4);
                            req = J$.N(1689, 'req', req, 4);
                            types_ = J$.N(1697, 'types_', types_, 4);
                            J$.N(1705, 'types', types, 0);
                            J$.N(1713, 'i', i, 0);
                            J$.N(1721, 'value', value, 0);
                            var types = J$.X1(1297, J$.W(1289, 'types', J$.R(1281, 'types_', types_, 0), types, 1));
                            if (J$.X1(3369, J$.C(112, J$.U(170, '!', J$.F(1321, J$.R(1305, 'hasbody', hasbody, 1), 0)(J$.R(1313, 'req', req, 0)))))) {
                                return J$.X1(1345, J$.Rt(1337, J$.T(1329, null, 25, false)));
                            }
                            if (J$.X1(3393, J$.C(128, J$.B(178, '>', J$.G(1361, J$.R(1353, 'arguments', arguments, 2), 'length', 0), J$.T(1369, 2, 22, false), 0)))) {
                                J$.X1(1425, types = J$.W(1417, 'types', J$.F(1409, J$.R(1377, 'Array', Array, 2), 1)(J$.B(186, '-', J$.G(1393, J$.R(1385, 'arguments', arguments, 2), 'length', 0), J$.T(1401, 1, 22, false), 0)), types, 0));
                                for (var i = J$.X1(1449, J$.W(1441, 'i', J$.T(1433, 0, 22, false), i, 1)); J$.X1(3377, J$.C(120, J$.B(194, '<', J$.R(1457, 'i', i, 0), J$.G(1473, J$.R(1465, 'types', types, 0), 'length', 0), 0))); J$.X1(3385, J$.B(218, '-', i = J$.W(1497, 'i', J$.B(210, '+', J$.U(202, '+', J$.R(1489, 'i', i, 0)), J$.T(1481, 1, 22, false), 0), i, 0), J$.T(1505, 1, 22, false), 0))) {
                                    J$.X1(1569, J$.P(1561, J$.R(1513, 'types', types, 0), J$.R(1521, 'i', i, 0), J$.G(1553, J$.R(1529, 'arguments', arguments, 2), J$.B(226, '+', J$.R(1537, 'i', i, 0), J$.T(1545, 1, 22, false), 0), 4), 2));
                                }
                            }
                            var value = J$.X1(1617, J$.W(1609, 'value', J$.G(1601, J$.G(1585, J$.R(1577, 'req', req, 0), 'headers', 0), J$.T(1593, 'content-type', 21, false), 4), value, 1));
                            return J$.X1(1665, J$.Rt(1657, J$.F(1649, J$.R(1625, 'typeis', typeis, 1), 0)(J$.R(1633, 'value', value, 0), J$.R(1641, 'types', types, 0))));
                        } catch (J$e) {
                            J$.Ex(3401, J$e);
                        } finally {
                            if (J$.Fr(3409))
                                continue jalangiLabel540;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function normalize(type) {
                jalangiLabel541:
                    while (true) {
                        try {
                            J$.Fe(1905, arguments.callee, this, arguments);
                            arguments = J$.N(1913, 'arguments', arguments, 4);
                            type = J$.N(1921, 'type', type, 4);
                            switch (J$.X1(3417, J$.C1(136, J$.R(1729, 'type', type, 0)))) {
                            case J$.X1(3425, J$.C2(144, J$.T(1761, 'urlencoded', 21, false))):
                                return J$.X1(1753, J$.Rt(1745, J$.T(1737, 'application/x-www-form-urlencoded', 21, false)));
                            case J$.X1(3433, J$.C2(152, J$.T(1793, 'multipart', 21, false))):
                                J$.X1(1785, type = J$.W(1777, 'type', J$.T(1769, 'multipart/*', 21, false), type, 0));
                                break;
                            }
                            return J$.X1(1897, J$.Rt(1889, J$.X1(3441, J$.C(168, J$.C(160, J$.B(234, '===', J$.G(1817, J$.R(1801, 'type', type, 0), J$.T(1809, 0, 22, false), 4), J$.T(1825, '+', 21, false), 0)) ? J$._() : J$.U(242, '~', J$.M(1849, J$.R(1833, 'type', type, 0), 'indexOf', 0)(J$.T(1841, '/', 21, false))))) ? J$.R(1857, 'type', type, 0) : J$.M(1881, J$.R(1865, 'mime', mime, 1), 'lookup', 0)(J$.R(1873, 'type', type, 0))));
                        } catch (J$e) {
                            J$.Ex(3449, J$e);
                        } finally {
                            if (J$.Fr(3457))
                                continue jalangiLabel541;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function mimeMatch(expected, actual) {
                jalangiLabel542:
                    while (true) {
                        try {
                            J$.Fe(2897, arguments.callee, this, arguments);
                            arguments = J$.N(2905, 'arguments', arguments, 4);
                            expected = J$.N(2913, 'expected', expected, 4);
                            actual = J$.N(2921, 'actual', actual, 4);
                            if (J$.X1(3465, J$.C(176, J$.B(250, '===', J$.R(1929, 'expected', expected, 0), J$.T(1937, false, 23, false), 0)))) {
                                return J$.X1(1961, J$.Rt(1953, J$.T(1945, false, 23, false)));
                            }
                            if (J$.X1(3473, J$.C(184, J$.B(258, '===', J$.R(1969, 'expected', expected, 0), J$.R(1977, 'actual', actual, 0), 0)))) {
                                return J$.X1(2001, J$.Rt(1993, J$.T(1985, true, 23, false)));
                            }
                            J$.X1(2041, actual = J$.W(2033, 'actual', J$.M(2025, J$.R(2009, 'actual', actual, 0), 'split', 0)(J$.T(2017, '/', 21, false)), actual, 0));
                            if (J$.X1(3481, J$.C(208, J$.B(266, '===', J$.G(2065, J$.R(2049, 'expected', expected, 0), J$.T(2057, 0, 22, false), 4), J$.T(2073, '+', 21, false), 0)))) {
                                return J$.X1(2241, J$.Rt(2233, J$.C(200, J$.C(192, J$.F(2113, J$.R(2081, 'Boolean', Boolean, 2), 0)(J$.G(2105, J$.R(2089, 'actual', actual, 0), J$.T(2097, 1, 22, false), 4))) ? J$.B(274, '<=', J$.G(2129, J$.R(2121, 'expected', expected, 0), 'length', 0), J$.G(2161, J$.G(2153, J$.R(2137, 'actual', actual, 0), J$.T(2145, 1, 22, false), 4), 'length', 0), 0) : J$._()) ? J$.B(290, '===', J$.R(2169, 'expected', expected, 0), J$.M(2225, J$.G(2193, J$.R(2177, 'actual', actual, 0), J$.T(2185, 1, 22, false), 4), 'substr', 0)(J$.B(282, '-', J$.T(2201, 0, 22, false), J$.G(2217, J$.R(2209, 'expected', expected, 0), 'length', 0), 0)), 0) : J$._()));
                            }
                            if (J$.X1(3489, J$.C(216, J$.U(306, '!', J$.U(298, '~', J$.M(2265, J$.R(2249, 'expected', expected, 0), 'indexOf', 0)(J$.T(2257, '*', 21, false)))))))
                                return J$.X1(2289, J$.Rt(2281, J$.T(2273, false, 23, false)));
                            J$.X1(2329, expected = J$.W(2321, 'expected', J$.M(2313, J$.R(2297, 'expected', expected, 0), 'split', 0)(J$.T(2305, '/', 21, false)), expected, 0));
                            if (J$.X1(3497, J$.C(224, J$.B(314, '===', J$.G(2353, J$.R(2337, 'expected', expected, 0), J$.T(2345, 0, 22, false), 4), J$.T(2361, '*', 21, false), 0)))) {
                                return J$.X1(2425, J$.Rt(2417, J$.B(322, '===', J$.G(2385, J$.R(2369, 'expected', expected, 0), J$.T(2377, 1, 22, false), 4), J$.G(2409, J$.R(2393, 'actual', actual, 0), J$.T(2401, 1, 22, false), 4), 0)));
                            }
                            if (J$.X1(3505, J$.C(232, J$.B(330, '===', J$.G(2449, J$.R(2433, 'expected', expected, 0), J$.T(2441, 1, 22, false), 4), J$.T(2457, '*', 21, false), 0)))) {
                                return J$.X1(2521, J$.Rt(2513, J$.B(338, '===', J$.G(2481, J$.R(2465, 'expected', expected, 0), J$.T(2473, 0, 22, false), 4), J$.G(2505, J$.R(2489, 'actual', actual, 0), J$.T(2497, 0, 22, false), 4), 0)));
                            }
                            if (J$.X1(3513, J$.C(264, J$.C(240, J$.B(346, '===', J$.G(2561, J$.G(2545, J$.R(2529, 'expected', expected, 0), J$.T(2537, 1, 22, false), 4), J$.T(2553, 0, 22, false), 4), J$.T(2569, '*', 21, false), 0)) ? J$.B(354, '===', J$.G(2609, J$.G(2593, J$.R(2577, 'expected', expected, 0), J$.T(2585, 1, 22, false), 4), J$.T(2601, 1, 22, false), 4), J$.T(2617, '+', 21, false), 0) : J$._()))) {
                                return J$.X1(2865, J$.Rt(2857, J$.C(256, J$.C(248, J$.B(362, '===', J$.G(2641, J$.R(2625, 'expected', expected, 0), J$.T(2633, 0, 22, false), 4), J$.G(2665, J$.R(2649, 'actual', actual, 0), J$.T(2657, 0, 22, false), 4), 0)) ? J$.B(378, '<=', J$.G(2697, J$.G(2689, J$.R(2673, 'expected', expected, 0), J$.T(2681, 1, 22, false), 4), 'length', 0), J$.B(370, '+', J$.G(2729, J$.G(2721, J$.R(2705, 'actual', actual, 0), J$.T(2713, 1, 22, false), 4), 'length', 0), J$.T(2737, 1, 22, false), 0), 0) : J$._()) ? J$.B(394, '===', J$.M(2777, J$.G(2761, J$.R(2745, 'expected', expected, 0), J$.T(2753, 1, 22, false), 4), 'substr', 0)(J$.T(2769, 1, 22, false)), J$.M(2849, J$.G(2801, J$.R(2785, 'actual', actual, 0), J$.T(2793, 1, 22, false), 4), 'substr', 0)(J$.B(386, '-', J$.T(2809, 1, 22, false), J$.G(2841, J$.G(2833, J$.R(2817, 'expected', expected, 0), J$.T(2825, 1, 22, false), 4), 'length', 0), 0)), 0) : J$._()));
                            }
                            return J$.X1(2889, J$.Rt(2881, J$.T(2873, false, 23, false)));
                        } catch (J$e) {
                            J$.Ex(3521, J$e);
                        } finally {
                            if (J$.Fr(3529))
                                continue jalangiLabel542;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function typenormalize(value) {
                jalangiLabel543:
                    while (true) {
                        try {
                            J$.Fe(3057, arguments.callee, this, arguments);
                            arguments = J$.N(3065, 'arguments', arguments, 4);
                            value = J$.N(3073, 'value', value, 4);
                            J$.N(3081, 'type', type, 0);
                            try {
                                var type = J$.X1(2961, J$.W(2953, 'type', J$.M(2945, J$.R(2929, 'typer', typer, 1), 'parse', 0)(J$.R(2937, 'value', value, 0)), type, 1));
                                J$.X1(2977, J$.B(402, 'delete', J$.R(2969, 'type', type, 0), 'parameters', 0));
                                return J$.X1(3017, J$.Rt(3009, J$.M(3001, J$.R(2985, 'typer', typer, 1), 'format', 0)(J$.R(2993, 'type', type, 0))));
                            } catch (err) {
                                err = J$.N(3049, 'err', err, 1);
                                return J$.X1(3041, J$.Rt(3033, J$.T(3025, null, 25, false)));
                            }
                        } catch (J$e) {
                            J$.Ex(3537, J$e);
                        } finally {
                            if (J$.Fr(3545))
                                continue jalangiLabel543;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(3097, '__secret__S$', __secret__S$, 0);
            J$.N(3105, '__secret__traits__', __secret__traits__, 0);
            J$.N(3113, 'typer', typer, 0);
            J$.N(3121, 'mime', mime, 0);
            typeis = J$.N(3137, 'typeis', J$.T(3129, typeis, 12, false, 945), 0);
            hasbody = J$.N(3153, 'hasbody', J$.T(3145, hasbody, 12, false, 1241), 0);
            typeofrequest = J$.N(3169, 'typeofrequest', J$.T(3161, typeofrequest, 12, false, 1673), 0);
            normalize = J$.N(3185, 'normalize', J$.T(3177, normalize, 12, false, 1905), 0);
            mimeMatch = J$.N(3201, 'mimeMatch', J$.T(3193, mimeMatch, 12, false, 2897), 0);
            typenormalize = J$.N(3217, 'typenormalize', J$.T(3209, typenormalize, 12, false, 3057), 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            var typer = J$.X1(113, J$.W(105, 'typer', J$.F(97, J$.R(81, 'require', require, 2), 0)(J$.T(89, 'media-typer', 21, false)), typer, 3));
            var mime = J$.X1(153, J$.W(145, 'mime', J$.F(137, J$.R(121, 'require', require, 2), 0)(J$.T(129, 'mime-types', 21, false)), mime, 3));
            J$.X1(185, J$.P(177, J$.R(161, 'module', module, 2), 'exports', J$.R(169, 'typeofrequest', typeofrequest, 1), 0));
            J$.X1(217, J$.P(209, J$.R(193, 'typeofrequest', typeofrequest, 1), 'is', J$.R(201, 'typeis', typeis, 1), 0));
            J$.X1(249, J$.P(241, J$.R(225, 'typeofrequest', typeofrequest, 1), 'hasBody', J$.R(233, 'hasbody', hasbody, 1), 0));
            J$.X1(281, J$.P(273, J$.R(257, 'typeofrequest', typeofrequest, 1), 'normalize', J$.R(265, 'normalize', normalize, 1), 0));
            J$.X1(313, J$.P(305, J$.R(289, 'typeofrequest', typeofrequest, 1), 'match', J$.R(297, 'mimeMatch', mimeMatch, 1), 0));
        } catch (J$e) {
            J$.Ex(3553, J$e);
        } finally {
            if (J$.Sr(3561)) {
                J$.L();
                continue jalangiLabel544;
            } else {
                J$.L();
                break jalangiLabel544;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
