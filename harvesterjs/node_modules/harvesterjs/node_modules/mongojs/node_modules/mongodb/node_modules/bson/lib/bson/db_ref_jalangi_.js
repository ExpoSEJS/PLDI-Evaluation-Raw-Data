J$.iids = {"8":[4,9,4,33],"9":[1,20,1,27],"10":[4,11,4,32],"16":[16,16,16,31],"17":[1,28,1,32],"18":[4,9,4,33],"25":[1,20,1,33],"26":[16,16,16,31],"33":[1,20,1,33],"41":[1,20,1,33],"49":[2,26,2,38],"57":[2,26,2,45],"65":[2,26,2,45],"73":[2,26,2,45],"81":[4,11,4,15],"89":[4,27,4,32],"97":[5,20,5,25],"105":[5,26,5,35],"113":[5,37,5,40],"121":[5,42,5,44],"129":[5,16,5,45],"137":[5,16,5,45],"145":[5,9,5,46],"153":[6,5,6,9],"161":[6,22,6,29],"169":[6,5,6,29],"177":[6,5,6,30],"185":[7,5,7,9],"193":[7,22,7,31],"201":[7,5,7,31],"209":[7,5,7,32],"217":[8,5,8,9],"225":[8,16,8,19],"233":[8,5,8,19],"241":[8,5,8,20],"249":[9,5,9,9],"257":[9,15,9,17],"265":[9,5,9,17],"273":[9,5,9,18],"281":[3,1,10,2],"289":[3,1,10,2],"297":[3,1,10,2],"305":[3,1,10,2],"313":[3,1,10,2],"321":[12,1,12,6],"329":[12,1,12,16],"337":[14,17,14,21],"345":[14,17,14,31],"353":[15,16,15,20],"361":[15,16,15,24],"369":[16,16,16,20],"377":[16,16,16,23],"385":[16,27,16,31],"393":[16,34,16,36],"401":[16,39,16,43],"409":[16,39,16,46],"417":[13,12,17,6],"425":[13,12,17,6],"433":[13,5,17,7],"441":[12,26,18,2],"449":[12,26,18,2],"457":[12,26,18,2],"465":[12,1,18,2],"473":[12,1,18,3],"481":[19,1,19,7],"489":[19,18,19,23],"497":[19,1,19,23],"505":[19,1,19,24],"513":[20,1,20,7],"521":[20,1,20,15],"529":[20,24,20,29],"537":[20,1,20,29],"545":[20,1,20,30],"553":[1,1,20,30],"561":[1,1,20,30],"569":[1,1,20,30],"577":[3,1,10,2],"585":[1,1,20,30],"593":[4,5,5,46],"601":[3,1,10,2],"609":[3,1,10,2],"617":[16,16,16,46],"625":[12,26,18,2],"633":[12,26,18,2],"641":[1,1,20,30],"649":[1,1,20,30],"nBranches":4,"originalCodeFileName":"/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongojs/node_modules/mongodb/node_modules/bson/lib/bson/db_ref.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongojs/node_modules/mongodb/node_modules/bson/lib/bson/db_ref_jalangi_.js","code":"/**\n * A class representation of the BSON DBRef type.\n *\n * @class\n * @param {string} namespace the collection name.\n * @param {ObjectID} oid the reference ObjectID.\n * @param {string} [db] optional db name, if omitted the reference is local to the current db.\n * @return {DBRef}\n */\nfunction DBRef(namespace, oid, db) {\n  if(!(this instanceof DBRef)) return new DBRef(namespace, oid, db);\n  \n  this._bsontype = 'DBRef';\n  this.namespace = namespace;\n  this.oid = oid;\n  this.db = db;\n};\n\n/**\n * @ignore\n * @api private\n */\nDBRef.prototype.toJSON = function() {\n  return {\n    '$ref':this.namespace,\n    '$id':this.oid,\n    '$db':this.db == null ? '' : this.db\n  };\n}\n\nmodule.exports = DBRef;\nmodule.exports.DBRef = DBRef;"};
jalangiLabel1471:
    while (true) {
        try {
            J$.Se(553, '/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongojs/node_modules/mongodb/node_modules/bson/lib/bson/db_ref_jalangi_.js', '/home/blake/ExpoSE/Targets/harvesterjs/node_modules/harvesterjs/node_modules/mongojs/node_modules/mongodb/node_modules/bson/lib/bson/db_ref.js');
            function DBRef(namespace, oid, db) {
                jalangiLabel1469:
                    while (true) {
                        try {
                            J$.Fe(281, arguments.callee, this, arguments);
                            arguments = J$.N(289, 'arguments', arguments, 4);
                            namespace = J$.N(297, 'namespace', namespace, 4);
                            oid = J$.N(305, 'oid', oid, 4);
                            db = J$.N(313, 'db', db, 4);
                            if (J$.X1(593, J$.C(8, J$.U(18, '!', J$.B(10, 'instanceof', J$.R(81, 'this', this, 0), J$.R(89, 'DBRef', DBRef, 1), 0)))))
                                return J$.X1(145, J$.Rt(137, J$.F(129, J$.R(97, 'DBRef', DBRef, 1), 1)(J$.R(105, 'namespace', namespace, 0), J$.R(113, 'oid', oid, 0), J$.R(121, 'db', db, 0))));
                            J$.X1(177, J$.P(169, J$.R(153, 'this', this, 0), '_bsontype', J$.T(161, 'DBRef', 21, false), 0));
                            J$.X1(209, J$.P(201, J$.R(185, 'this', this, 0), 'namespace', J$.R(193, 'namespace', namespace, 0), 0));
                            J$.X1(241, J$.P(233, J$.R(217, 'this', this, 0), 'oid', J$.R(225, 'oid', oid, 0), 0));
                            J$.X1(273, J$.P(265, J$.R(249, 'this', this, 0), 'db', J$.R(257, 'db', db, 0), 0));
                        } catch (J$e) {
                            J$.Ex(601, J$e);
                        } finally {
                            if (J$.Fr(609))
                                continue jalangiLabel1469;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(561, '__secret__S$', __secret__S$, 0);
            J$.N(569, '__secret__traits__', __secret__traits__, 0);
            DBRef = J$.N(585, 'DBRef', J$.T(577, DBRef, 12, false, 281), 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            ;
            J$.X1(473, J$.P(465, J$.G(329, J$.R(321, 'DBRef', DBRef, 1), 'prototype', 0), 'toJSON', J$.T(457, function () {
                jalangiLabel1470:
                    while (true) {
                        try {
                            J$.Fe(441, arguments.callee, this, arguments);
                            arguments = J$.N(449, 'arguments', arguments, 4);
                            return J$.X1(433, J$.Rt(425, J$.T(417, {
                                '$ref': J$.G(345, J$.R(337, 'this', this, 0), 'namespace', 0),
                                '$id': J$.G(361, J$.R(353, 'this', this, 0), 'oid', 0),
                                '$db': J$.X1(617, J$.C(16, J$.B(26, '==', J$.G(377, J$.R(369, 'this', this, 0), 'db', 0), J$.T(385, null, 25, false), 0))) ? J$.T(393, '', 21, false) : J$.G(409, J$.R(401, 'this', this, 0), 'db', 0)
                            }, 11, false)));
                        } catch (J$e) {
                            J$.Ex(625, J$e);
                        } finally {
                            if (J$.Fr(633))
                                continue jalangiLabel1470;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 441), 0));
            J$.X1(505, J$.P(497, J$.R(481, 'module', module, 2), 'exports', J$.R(489, 'DBRef', DBRef, 1), 0));
            J$.X1(545, J$.P(537, J$.G(521, J$.R(513, 'module', module, 2), 'exports', 0), 'DBRef', J$.R(529, 'DBRef', DBRef, 1), 0));
        } catch (J$e) {
            J$.Ex(641, J$e);
        } finally {
            if (J$.Sr(649)) {
                J$.L();
                continue jalangiLabel1471;
            } else {
                J$.L();
                break jalangiLabel1471;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
