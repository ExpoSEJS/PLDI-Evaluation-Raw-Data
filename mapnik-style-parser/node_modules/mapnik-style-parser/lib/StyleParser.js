'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _prettyData = require('pretty-data');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Parse JSON data to XML Mapnik Style.
 */
var StyleParser = {
  /**
   * toXML() will parse the object to the Mapnik XML Style format.
   * @param {Object} data
   * @param {Boolean} [compress]
   * @return {String}
   */
  toXML: function toXML(data) {
    var compress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var style = StyleParser._template(_lodash2.default.extend({
      _toXMLAttribute: StyleParser._toXMLAttribute
    }, data)).trim();

    if (compress) {
      return style.replace(/\>[\s]+\</g, '><');
    }

    return _prettyData.pd.xml(style);
  }
};

/**
 * _toXMLAttribute() will return a string in XML attribute format.
 * @param {Array<Object>} attributes
 * @return {String}
 */
StyleParser._toXMLAttribute = function (attributes) {
  return _lodash2.default.reduce(attributes, function (memory, _ref) {
    var name = _ref.name;
    var value = _ref.value;

    return memory + ' ' + name + '="' + value + '"';
  }, '').trim();
};

/** The XML template. */
StyleParser._template = _lodash2.default.template('\n  <?xml version="1.0" encoding="utf-8" ?>\n  <!DOCTYPE Map>\n  <Map <%= _toXMLAttribute(attributes) %>>\n    <% _.forEach(styles, function (style) { %>\n      <Style <%= _toXMLAttribute(style.attributes) %>>\n        <Rule>\n          <% _.forEach(style.rules, function (rule) { %>\n            <% if (!_.isEmpty(rule.value) && _.isEmpty(rule.parameters)) { %>\n              <<%= rule.name %>><%= rule.value %></<%= rule.name %>>\n            <% } else { %>\n              <<%= rule.name %>>\n                <% _.forEach(rule.parameters, function (parameter) { %>\n                  <CssParameter name="<%= parameter.name %>"><%= parameter.value %></CssParameter>\n                <% }); %>\n              </<%= rule.name %>>\n            <% } %>\n          <% }); %>\n        </Rule>\n      </Style>\n    <% }); %>\n    <% _.forEach(layers, function (layer) { %>\n      <Layer <%= _toXMLAttribute(layer.attributes) %>>\n        <% _.forEach(layer.styles, function (name) { %>\n          <StyleName><%= name %></StyleName>\n        <% }); %>\n        <% if (_.isObject(layer.datasource)) { %>\n          <Datasource>\n            <% _.forEach(layer.datasource.parameters, function (parameter) { %>\n              <Parameter name="<%= parameter.name %>"><%= parameter.value %></Parameter>\n            <% }); %>\n          </Datasource>\n        <% } %>\n      </Layer>\n    <% }); %>\n  </Map>\n');

exports.default = StyleParser;