J$.iids = {"8":[9,12,9,33],"9":[1,20,1,27],"10":[13,24,13,44],"16":[9,12,9,33],"17":[1,28,1,32],"18":[13,48,13,74],"24":[13,24,13,74],"25":[1,20,1,33],"26":[25,16,25,28],"32":[13,24,13,74],"33":[1,20,1,33],"34":[25,16,25,35],"40":[15,13,15,21],"41":[1,20,1,33],"42":[25,16,25,42],"49":[2,26,2,38],"50":[25,16,25,50],"57":[2,26,2,45],"58":[25,16,25,56],"65":[2,26,2,45],"73":[2,26,2,45],"81":[3,1,3,13],"89":[3,1,3,14],"97":[4,1,4,7],"105":[4,23,4,30],"113":[4,32,4,44],"121":[4,55,4,59],"129":[4,46,4,61],"137":[4,1,4,62],"139":[4,1,4,22],"145":[4,1,4,63],"153":[5,15,5,22],"161":[5,23,5,31],"169":[5,15,5,32],"177":[5,15,5,32],"185":[5,15,5,32],"193":[6,16,6,38],"201":[6,39,6,46],"209":[6,16,6,47],"217":[6,16,6,47],"225":[6,16,6,47],"233":[7,19,7,26],"241":[7,27,7,40],"249":[7,19,7,41],"257":[7,19,7,41],"265":[7,19,7,41],"273":[9,12,9,15],"281":[9,19,9,22],"289":[9,19,9,33],"297":[9,36,9,39],"305":[9,53,9,56],"313":[9,42,9,58],"321":[9,12,9,58],"329":[9,5,9,59],"337":[8,1,10,2],"345":[8,1,10,2],"353":[8,1,10,2],"361":[13,24,13,33],"369":[13,24,13,40],"377":[13,43,13,44],"385":[13,48,13,57],"393":[13,58,13,59],"401":[13,48,13,60],"409":[13,65,13,74],"417":[13,77,13,86],"425":[13,87,13,88],"433":[13,77,13,89],"441":[13,92,13,97],"449":[13,24,13,97],"457":[13,24,13,97],"465":[14,21,14,32],"473":[14,43,14,51],"481":[14,43,14,59],"489":[14,86,14,97],"497":[14,86,14,113],"505":[14,67,14,115],"513":[14,117,14,121],"521":[14,43,14,122],"523":[14,43,14,66],"529":[14,21,14,123],"531":[14,21,14,42],"537":[14,21,14,130],"539":[14,21,14,128],"545":[14,21,14,130],"553":[14,21,14,130],"561":[15,13,15,21],"569":[16,20,16,25],"577":[16,34,16,46],"585":[16,48,16,52],"593":[16,20,16,53],"595":[16,20,16,33],"601":[16,20,16,53],"609":[16,13,16,54],"617":[18,16,18,27],"625":[18,16,18,30],"633":[18,35,18,40],"641":[18,16,18,41],"643":[18,16,18,34],"649":[18,16,18,41],"657":[18,9,18,42],"665":[12,12,19,6],"673":[12,12,19,6],"681":[12,12,19,6],"689":[12,12,19,6],"697":[12,12,19,6],"705":[12,12,19,6],"713":[12,12,19,6],"721":[11,19,20,2],"729":[11,19,20,2],"737":[11,19,20,2],"745":[21,1,21,12],"753":[22,12,22,20],"761":[22,12,22,28],"769":[22,36,22,46],"777":[23,20,23,24],"785":[23,20,23,29],"793":[23,20,23,29],"801":[23,20,23,29],"809":[24,21,24,25],"817":[24,21,24,31],"825":[24,21,24,31],"833":[24,21,24,31],"841":[25,16,25,22],"849":[25,25,25,28],"857":[25,31,25,35],"865":[25,38,25,42],"873":[25,45,25,50],"881":[25,53,25,56],"889":[25,16,25,56],"897":[25,9,25,57],"905":[22,48,26,6],"913":[22,48,26,6],"921":[22,48,26,6],"929":[22,48,26,6],"937":[22,48,26,6],"945":[22,48,26,6],"953":[22,48,26,6],"961":[26,8,26,10],"969":[22,12,26,11],"971":[22,12,22,35],"977":[22,12,26,18],"979":[22,12,26,16],"985":[22,12,26,18],"993":[22,5,26,19],"1001":[21,31,27,2],"1009":[21,31,27,2],"1017":[21,31,27,2],"1025":[21,31,27,2],"1033":[21,1,27,2],"1041":[21,1,27,3],"1049":[28,1,28,12],"1057":[28,25,28,33],"1065":[28,25,28,41],"1073":[28,51,28,1452],"1081":[28,25,28,1453],"1083":[28,25,28,50],"1089":[28,1,28,1453],"1097":[28,1,28,1454],"1105":[29,1,29,8],"1113":[29,19,29,30],"1121":[29,1,29,30],"1129":[29,1,29,31],"1137":[1,1,29,31],"1145":[1,1,29,31],"1153":[1,1,29,31],"1161":[1,1,29,31],"1169":[1,1,29,31],"1177":[1,1,29,31],"1185":[8,1,10,2],"1193":[1,1,29,31],"1201":[1,1,29,31],"1209":[9,12,9,58],"1217":[8,1,10,2],"1225":[8,1,10,2],"1233":[13,24,13,97],"1241":[15,9,17,10],"1249":[12,12,19,6],"1257":[12,12,19,6],"1265":[22,48,26,6],"1273":[22,48,26,6],"1281":[21,31,27,2],"1289":[21,31,27,2],"1297":[1,1,29,31],"1305":[1,1,29,31],"nBranches":10,"originalCodeFileName":"/home/blake/ExpoSE/Targets/mapnik-style-parser/node_modules/mapnik-style-parser/lib/StyleParser.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/mapnik-style-parser/node_modules/mapnik-style-parser/lib/StyleParser_jalangi_.js","code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _prettyData = require('pretty-data');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Parse JSON data to XML Mapnik Style.\n */\nvar StyleParser = {\n  /**\n   * toXML() will parse the object to the Mapnik XML Style format.\n   * @param {Object} data\n   * @param {Boolean} [compress]\n   * @return {String}\n   */\n  toXML: function toXML(data) {\n    var compress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var style = StyleParser._template(_lodash2.default.extend({\n      _toXMLAttribute: StyleParser._toXMLAttribute\n    }, data)).trim();\n\n    if (compress) {\n      return style.replace(/\\>[\\s]+\\</g, '><');\n    }\n\n    return _prettyData.pd.xml(style);\n  }\n};\n\n/**\n * _toXMLAttribute() will return a string in XML attribute format.\n * @param {Array<Object>} attributes\n * @return {String}\n */\nStyleParser._toXMLAttribute = function (attributes) {\n  return _lodash2.default.reduce(attributes, function (memory, _ref) {\n    var name = _ref.name;\n    var value = _ref.value;\n\n    return memory + ' ' + name + '=\"' + value + '\"';\n  }, '').trim();\n};\n\n/** The XML template. */\nStyleParser._template = _lodash2.default.template('\\n  <?xml version=\"1.0\" encoding=\"utf-8\" ?>\\n  <!DOCTYPE Map>\\n  <Map <%= _toXMLAttribute(attributes) %>>\\n    <% _.forEach(styles, function (style) { %>\\n      <Style <%= _toXMLAttribute(style.attributes) %>>\\n        <Rule>\\n          <% _.forEach(style.rules, function (rule) { %>\\n            <% if (!_.isEmpty(rule.value) && _.isEmpty(rule.parameters)) { %>\\n              <<%= rule.name %>><%= rule.value %></<%= rule.name %>>\\n            <% } else { %>\\n              <<%= rule.name %>>\\n                <% _.forEach(rule.parameters, function (parameter) { %>\\n                  <CssParameter name=\"<%= parameter.name %>\"><%= parameter.value %></CssParameter>\\n                <% }); %>\\n              </<%= rule.name %>>\\n            <% } %>\\n          <% }); %>\\n        </Rule>\\n      </Style>\\n    <% }); %>\\n    <% _.forEach(layers, function (layer) { %>\\n      <Layer <%= _toXMLAttribute(layer.attributes) %>>\\n        <% _.forEach(layer.styles, function (name) { %>\\n          <StyleName><%= name %></StyleName>\\n        <% }); %>\\n        <% if (_.isObject(layer.datasource)) { %>\\n          <Datasource>\\n            <% _.forEach(layer.datasource.parameters, function (parameter) { %>\\n              <Parameter name=\"<%= parameter.name %>\"><%= parameter.value %></Parameter>\\n            <% }); %>\\n          </Datasource>\\n        <% } %>\\n      </Layer>\\n    <% }); %>\\n  </Map>\\n');\n\nexports.default = StyleParser;"};
jalangiLabel47:
    while (true) {
        try {
            J$.Se(1137, '/home/blake/ExpoSE/Targets/mapnik-style-parser/node_modules/mapnik-style-parser/lib/StyleParser_jalangi_.js', '/home/blake/ExpoSE/Targets/mapnik-style-parser/node_modules/mapnik-style-parser/lib/StyleParser.js');
            function _interopRequireDefault(obj) {
                jalangiLabel43:
                    while (true) {
                        try {
                            J$.Fe(337, arguments.callee, this, arguments);
                            arguments = J$.N(345, 'arguments', arguments, 4);
                            obj = J$.N(353, 'obj', obj, 4);
                            return J$.X1(329, J$.Rt(321, J$.X1(1209, J$.C(16, J$.C(8, J$.R(273, 'obj', obj, 0)) ? J$.G(289, J$.R(281, 'obj', obj, 0), '__esModule', 0) : J$._())) ? J$.R(297, 'obj', obj, 0) : J$.T(313, {
                                default: J$.R(305, 'obj', obj, 0)
                            }, 11, false)));
                        } catch (J$e) {
                            J$.Ex(1217, J$e);
                        } finally {
                            if (J$.Fr(1225))
                                continue jalangiLabel43;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(1145, '__secret__S$', __secret__S$, 0);
            J$.N(1153, '__secret__traits__', __secret__traits__, 0);
            J$.N(1161, '_lodash', _lodash, 0);
            J$.N(1169, '_lodash2', _lodash2, 0);
            J$.N(1177, '_prettyData', _prettyData, 0);
            _interopRequireDefault = J$.N(1193, '_interopRequireDefault', J$.T(1185, _interopRequireDefault, 12, false, 337), 0);
            J$.N(1201, 'StyleParser', StyleParser, 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            J$.X1(89, J$.T(81, 'use strict', 21, false));
            J$.X1(145, J$.M(137, J$.R(97, 'Object', Object, 2), 'defineProperty', 0)(J$.R(105, 'exports', exports, 2), J$.T(113, '__esModule', 21, false), J$.T(129, {
                value: J$.T(121, true, 23, false)
            }, 11, false)));
            var _lodash = J$.X1(185, J$.W(177, '_lodash', J$.F(169, J$.R(153, 'require', require, 2), 0)(J$.T(161, 'lodash', 21, false)), _lodash, 3));
            var _lodash2 = J$.X1(225, J$.W(217, '_lodash2', J$.F(209, J$.R(193, '_interopRequireDefault', _interopRequireDefault, 1), 0)(J$.R(201, '_lodash', _lodash, 1)), _lodash2, 3));
            var _prettyData = J$.X1(265, J$.W(257, '_prettyData', J$.F(249, J$.R(233, 'require', require, 2), 0)(J$.T(241, 'pretty-data', 21, false)), _prettyData, 3));
            var StyleParser = J$.X1(737, J$.W(729, 'StyleParser', J$.T(721, {
                toXML: J$.T(713, function toXML(data) {
                    jalangiLabel44:
                        while (true) {
                            try {
                                J$.Fe(665, arguments.callee, this, arguments);
                                arguments = J$.N(673, 'arguments', arguments, 4);
                                toXML = J$.N(681, 'toXML', toXML, 0);
                                data = J$.N(689, 'data', data, 4);
                                J$.N(697, 'compress', compress, 0);
                                J$.N(705, 'style', style, 0);
                                var compress = J$.X1(457, J$.W(449, 'compress', J$.X1(1233, J$.C(32, J$.C(24, J$.B(10, '>', J$.G(369, J$.R(361, 'arguments', arguments, 2), 'length', 0), J$.T(377, 1, 22, false), 0)) ? J$.B(18, '!==', J$.G(401, J$.R(385, 'arguments', arguments, 2), J$.T(393, 1, 22, false), 4), J$.T(409, undefined, 24, false), 0) : J$._())) ? J$.G(433, J$.R(417, 'arguments', arguments, 2), J$.T(425, 1, 22, false), 4) : J$.T(441, false, 23, false), compress, 1));
                                var style = J$.X1(553, J$.W(545, 'style', J$.M(537, J$.M(529, J$.R(465, 'StyleParser', StyleParser, 1), '_template', 0)(J$.M(521, J$.G(481, J$.R(473, '_lodash2', _lodash2, 1), 'default', 0), 'extend', 0)(J$.T(505, {
                                    _toXMLAttribute: J$.G(497, J$.R(489, 'StyleParser', StyleParser, 1), '_toXMLAttribute', 0)
                                }, 11, false), J$.R(513, 'data', data, 0))), 'trim', 0)(), style, 1));
                                if (J$.X1(1241, J$.C(40, J$.R(561, 'compress', compress, 0)))) {
                                    return J$.X1(609, J$.Rt(601, J$.M(593, J$.R(569, 'style', style, 0), 'replace', 0)(J$.T(577, /\>[\s]+\</g, 14, false), J$.T(585, '><', 21, false))));
                                }
                                return J$.X1(657, J$.Rt(649, J$.M(641, J$.G(625, J$.R(617, '_prettyData', _prettyData, 1), 'pd', 0), 'xml', 0)(J$.R(633, 'style', style, 0))));
                            } catch (J$e) {
                                J$.Ex(1249, J$e);
                            } finally {
                                if (J$.Fr(1257))
                                    continue jalangiLabel44;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false, 665)
            }, 11, false), StyleParser, 3));
            J$.X1(1041, J$.P(1033, J$.R(745, 'StyleParser', StyleParser, 1), '_toXMLAttribute', J$.T(1025, function (attributes) {
                jalangiLabel46:
                    while (true) {
                        try {
                            J$.Fe(1001, arguments.callee, this, arguments);
                            arguments = J$.N(1009, 'arguments', arguments, 4);
                            attributes = J$.N(1017, 'attributes', attributes, 4);
                            return J$.X1(993, J$.Rt(985, J$.M(977, J$.M(969, J$.G(761, J$.R(753, '_lodash2', _lodash2, 1), 'default', 0), 'reduce', 0)(J$.R(769, 'attributes', attributes, 0), J$.T(953, function (memory, _ref) {
                                jalangiLabel45:
                                    while (true) {
                                        try {
                                            J$.Fe(905, arguments.callee, this, arguments);
                                            arguments = J$.N(913, 'arguments', arguments, 4);
                                            memory = J$.N(921, 'memory', memory, 4);
                                            _ref = J$.N(929, '_ref', _ref, 4);
                                            J$.N(937, 'name', name, 0);
                                            J$.N(945, 'value', value, 0);
                                            var name = J$.X1(801, J$.W(793, 'name', J$.G(785, J$.R(777, '_ref', _ref, 0), 'name', 0), name, 1));
                                            var value = J$.X1(833, J$.W(825, 'value', J$.G(817, J$.R(809, '_ref', _ref, 0), 'value', 0), value, 1));
                                            return J$.X1(897, J$.Rt(889, J$.B(58, '+', J$.B(50, '+', J$.B(42, '+', J$.B(34, '+', J$.B(26, '+', J$.R(841, 'memory', memory, 0), J$.T(849, ' ', 21, false), 0), J$.R(857, 'name', name, 0), 0), J$.T(865, '="', 21, false), 0), J$.R(873, 'value', value, 0), 0), J$.T(881, '"', 21, false), 0)));
                                        } catch (J$e) {
                                            J$.Ex(1265, J$e);
                                        } finally {
                                            if (J$.Fr(1273))
                                                continue jalangiLabel45;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 905), J$.T(961, '', 21, false)), 'trim', 0)()));
                        } catch (J$e) {
                            J$.Ex(1281, J$e);
                        } finally {
                            if (J$.Fr(1289))
                                continue jalangiLabel46;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1001), 0));
            J$.X1(1097, J$.P(1089, J$.R(1049, 'StyleParser', StyleParser, 1), '_template', J$.M(1081, J$.G(1065, J$.R(1057, '_lodash2', _lodash2, 1), 'default', 0), 'template', 0)(J$.T(1073, '\n  <?xml version="1.0" encoding="utf-8" ?>\n  <!DOCTYPE Map>\n  <Map <%= _toXMLAttribute(attributes) %>>\n    <% _.forEach(styles, function (style) { %>\n      <Style <%= _toXMLAttribute(style.attributes) %>>\n        <Rule>\n          <% _.forEach(style.rules, function (rule) { %>\n            <% if (!_.isEmpty(rule.value) && _.isEmpty(rule.parameters)) { %>\n              <<%= rule.name %>><%= rule.value %></<%= rule.name %>>\n            <% } else { %>\n              <<%= rule.name %>>\n                <% _.forEach(rule.parameters, function (parameter) { %>\n                  <CssParameter name="<%= parameter.name %>"><%= parameter.value %></CssParameter>\n                <% }); %>\n              </<%= rule.name %>>\n            <% } %>\n          <% }); %>\n        </Rule>\n      </Style>\n    <% }); %>\n    <% _.forEach(layers, function (layer) { %>\n      <Layer <%= _toXMLAttribute(layer.attributes) %>>\n        <% _.forEach(layer.styles, function (name) { %>\n          <StyleName><%= name %></StyleName>\n        <% }); %>\n        <% if (_.isObject(layer.datasource)) { %>\n          <Datasource>\n            <% _.forEach(layer.datasource.parameters, function (parameter) { %>\n              <Parameter name="<%= parameter.name %>"><%= parameter.value %></Parameter>\n            <% }); %>\n          </Datasource>\n        <% } %>\n      </Layer>\n    <% }); %>\n  </Map>\n', 21, false)), 0));
            J$.X1(1129, J$.P(1121, J$.R(1105, 'exports', exports, 2), 'default', J$.R(1113, 'StyleParser', StyleParser, 1), 0));
        } catch (J$e) {
            J$.Ex(1297, J$e);
        } finally {
            if (J$.Sr(1305)) {
                J$.L();
                continue jalangiLabel47;
            } else {
                J$.L();
                break jalangiLabel47;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
