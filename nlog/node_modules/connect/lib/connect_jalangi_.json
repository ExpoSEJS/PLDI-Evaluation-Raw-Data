{"8":[8,9,8,40],"9":[1,20,1,27],"10":[8,21,8,40],"16":[18,9,18,31],"17":[1,28,1,32],"18":[8,9,8,40],"25":[1,20,1,33],"26":[17,16,17,41],"33":[1,20,1,33],"34":[21,28,21,50],"41":[1,20,1,33],"49":[2,26,2,38],"57":[2,26,2,45],"65":[2,26,2,45],"73":[2,26,2,45],"81":[3,18,3,25],"89":[3,26,3,34],"97":[3,18,3,35],"105":[3,18,3,42],"113":[3,58,3,65],"121":[3,66,3,75],"129":[3,58,3,76],"137":[3,58,3,83],"145":[3,90,3,97],"153":[3,98,3,102],"161":[3,90,3,103],"169":[3,18,3,42],"177":[3,18,3,42],"185":[3,58,3,83],"193":[3,58,3,83],"201":[3,90,3,103],"209":[3,90,3,103],"217":[4,1,4,8],"225":[4,9,4,18],"233":[4,1,4,19],"241":[4,1,4,20],"249":[5,11,5,17],"257":[5,28,5,40],"265":[5,11,5,40],"273":[5,11,5,40],"281":[5,1,5,41],"289":[6,1,6,8],"297":[6,19,6,26],"305":[6,1,6,26],"313":[6,1,6,27],"321":[8,9,8,17],"329":[8,28,8,37],"337":[8,38,8,39],"345":[8,28,8,40],"353":[9,20,9,31],"361":[9,32,9,41],"369":[9,42,9,43],"377":[9,32,9,44],"385":[9,46,9,51],"393":[9,46,9,61],"401":[9,46,9,67],"409":[9,73,9,82],"417":[9,84,9,85],"425":[9,46,9,86],"427":[9,46,9,72],"433":[9,16,9,87],"441":[9,16,9,87],"449":[9,9,9,88],"457":[11,20,11,30],"465":[11,31,11,36],"473":[11,31,11,46],"481":[11,31,11,52],"489":[11,58,11,67],"497":[11,31,11,68],"499":[11,31,11,57],"505":[11,16,11,69],"513":[11,16,11,69],"521":[11,9,11,70],"529":[7,1,13,2],"537":[7,1,13,2],"545":[15,1,15,8],"553":[15,24,15,36],"561":[15,1,15,36],"569":[15,1,15,37],"577":[16,1,16,8],"585":[16,22,16,24],"593":[16,1,16,24],"601":[16,1,16,25],"609":[17,1,17,3],"617":[17,16,17,25],"625":[17,28,17,41],"633":[17,1,17,42],"635":[17,1,17,15],"641":[18,9,18,16],"649":[18,22,18,30],"657":[18,9,18,31],"659":[18,9,18,21],"665":[19,20,19,28],"673":[19,36,19,37],"681":[19,39,19,47],"689":[19,60,19,63],"697":[19,39,19,64],"699":[19,39,19,59],"705":[19,20,19,65],"707":[19,20,19,35],"713":[19,20,19,65],"721":[19,20,19,65],"729":[20,9,20,16],"737":[20,9,20,27],"745":[20,45,20,49],"753":[21,20,21,27],"761":[21,28,21,43],"769":[21,46,21,50],"777":[21,20,21,51],"785":[21,20,21,51],"793":[21,13,21,52],"801":[20,51,22,10],"809":[20,51,22,10],"817":[20,51,22,10],"825":[20,9,22,11],"827":[20,9,20,44],"833":[20,9,22,12],"841":[17,51,24,2],"849":[17,51,24,2],"857":[17,51,24,2],"865":[17,51,24,2],"873":[17,51,24,2],"881":[17,1,24,3],"883":[17,1,17,50],"889":[17,1,24,4],"897":[25,1,25,8],"905":[25,17,25,24],"913":[25,25,25,34],"921":[25,17,25,35],"929":[25,1,25,35],"937":[25,1,25,36],"945":[26,1,26,8],"953":[26,1,26,14],"961":[26,21,26,28],"969":[26,30,26,37],"977":[26,30,26,48],"985":[26,1,26,49],"987":[26,1,26,20],"993":[26,1,26,50],"1001":[27,1,27,8],"1009":[27,22,27,32],"1017":[27,1,27,32],"1025":[27,1,27,33],"1033":[28,1,28,8],"1041":[28,23,28,34],"1049":[28,1,28,34],"1057":[28,1,28,35],"1065":[1,1,28,35],"1073":[1,1,28,35],"1081":[1,1,28,35],"1089":[1,1,28,35],"1097":[1,1,28,35],"1105":[1,1,28,35],"1113":[7,1,13,2],"1121":[1,1,28,35],"1129":[8,5,12,6],"1137":[7,1,13,2],"1145":[7,1,13,2],"1153":[20,51,22,10],"1161":[20,51,22,10],"1169":[18,5,23,6],"1177":[17,51,24,2],"1185":[17,51,24,2],"1193":[1,1,28,35],"1201":[1,1,28,35],"nBranches":4,"originalCodeFileName":"/home/blake/ExpoSE/Targets/nlog/node_modules/connect/lib/connect.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/nlog/node_modules/connect/lib/connect_jalangi_.js","code":"\n/*!\n * Connect\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar HTTPServer = require('./http').Server\n  , HTTPSServer = require('./https').Server\n  , fs = require('fs');\n\n// node patches\n\nrequire('./patch');\n\n// expose createServer() as the module\n\nexports = module.exports = createServer;\n\n/**\n * Framework version.\n */\n\nexports.version = '1.4.0';\n\n/**\n * Initialize a new `connect.HTTPServer` with the middleware\n * passed to this function. When an object is passed _first_,\n * we assume these are the tls options, and return a `connect.HTTPSServer`.\n *\n * Examples:\n *\n * An example HTTP server, accepting several middleware.\n *\n *     var server = connect.createServer(\n *         connect.logger()\n *       , connect.static(__dirname + '/public')\n *     );\n *\n * An HTTPS server, utilizing the same middleware as above.\n *\n *     var server = connect.createServer(\n *         { key: key, cert: cert }\n *       , connect.logger()\n *       , connect.static(__dirname + '/public')\n *     );\n *\n * Alternatively with connect 1.0 we may omit `createServer()`.\n *\n *     connect(\n *         connect.logger()\n *       , connect.static(__dirname + '/public')\n *     ).listen(3000);\n *\n * @param  {Object|Function} ...\n * @return {Server}\n * @api public\n */\n\nfunction createServer() {\n  if ('object' == typeof arguments[0]) {\n    return new HTTPSServer(arguments[0], Array.prototype.slice.call(arguments, 1));\n  } else {\n    return new HTTPServer(Array.prototype.slice.call(arguments));\n  }\n};\n\n// support connect.createServer()\n\nexports.createServer = createServer;\n\n// auto-load getters\n\nexports.middleware = {};\n\n/**\n * Auto-load bundled middleware with getters.\n */\n\nfs.readdirSync(__dirname + '/middleware').forEach(function(filename){\n  if (/\\.js$/.test(filename)) {\n    var name = filename.substr(0, filename.lastIndexOf('.'));\n    exports.middleware.__defineGetter__(name, function(){\n      return require('./middleware/' + name);\n    });\n  }\n});\n\n// expose utils\n\nexports.utils = require('./utils');\n\n// expose getters as first-class exports\n\nexports.utils.merge(exports, exports.middleware);\n\n// expose constructors\n\nexports.HTTPServer = HTTPServer;\nexports.HTTPSServer = HTTPSServer;\n\n"}