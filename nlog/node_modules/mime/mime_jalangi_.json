{"8":[10,29,10,44],"9":[1,20,1,27],"10":[10,29,10,44],"16":[26,16,26,43],"17":[1,28,1,32],"18":[10,46,10,49],"24":[26,16,26,64],"25":[1,20,1,33],"32":[33,20,33,44],"33":[1,20,1,33],"34":[10,46,10,49],"41":[1,20,1,33],"49":[2,26,2,38],"57":[2,26,2,45],"65":[2,26,2,45],"73":[2,26,2,45],"81":[3,12,3,19],"89":[3,20,3,26],"97":[3,12,3,27],"105":[3,34,3,41],"113":[3,42,3,46],"121":[3,34,3,47],"129":[3,12,3,27],"137":[3,12,3,27],"145":[3,34,3,47],"153":[3,34,3,47],"161":[4,12,4,18],"169":[5,12,5,14],"177":[6,17,6,19],"185":[8,26,8,29],"193":[9,24,9,27],"201":[9,28,9,32],"209":[9,24,9,33],"217":[9,24,9,33],"225":[9,24,9,33],"233":[10,26,10,27],"241":[10,26,10,27],"249":[10,26,10,27],"257":[10,29,10,30],"265":[10,33,10,37],"273":[10,33,10,44],"289":[10,46,10,47],"297":[10,46,10,49],"313":[11,17,11,21],"321":[11,17,11,27],"329":[11,28,11,32],"337":[11,33,11,34],"345":[11,28,11,35],"353":[11,39,11,43],"361":[11,17,11,43],"369":[11,17,11,44],"377":[13,13,13,17],"385":[13,13,13,28],"393":[13,29,13,33],"401":[13,37,13,41],"409":[13,42,13,43],"417":[13,37,13,44],"425":[13,13,13,44],"433":[13,13,13,45],"441":[8,26,8,29],"449":[8,9,14,10],"457":[8,9,14,10],"465":[7,13,15,6],"473":[7,13,15,6],"481":[7,13,15,6],"489":[7,13,15,6],"497":[7,13,15,6],"505":[7,13,15,6],"513":[7,13,15,6],"521":[17,19,17,21],"529":[17,33,17,35],"537":[17,49,17,53],"545":[17,55,17,62],"553":[17,33,17,63],"555":[17,33,17,48],"561":[17,73,17,80],"569":[17,87,17,96],"577":[17,73,17,97],"579":[17,73,17,86],"585":[17,19,17,21],"593":[17,19,17,21],"601":[17,33,17,63],"609":[17,33,17,63],"617":[17,73,17,97],"625":[17,73,17,97],"633":[18,9,18,14],"641":[19,26,19,30],"649":[19,39,19,58],"657":[19,60,19,62],"665":[19,26,19,63],"667":[19,26,19,38],"673":[19,70,19,75],"681":[19,26,19,76],"683":[19,26,19,69],"689":[19,26,19,76],"697":[19,26,19,76],"705":[20,13,20,16],"713":[20,17,20,23],"721":[20,17,20,31],"723":[20,17,20,29],"729":[20,35,20,41],"737":[20,13,20,41],"745":[20,13,20,42],"753":[18,23,21,10],"761":[18,23,21,10],"769":[18,23,21,10],"777":[18,23,21,10],"785":[18,23,21,10],"793":[18,23,21,10],"801":[18,9,21,11],"803":[18,9,18,22],"809":[18,9,21,12],"817":[22,9,22,13],"825":[22,21,22,24],"833":[22,9,22,25],"835":[22,9,22,20],"841":[22,9,22,26],"849":[16,11,23,6],"857":[16,11,23,6],"865":[16,11,23,6],"873":[16,11,23,6],"881":[16,11,23,6],"889":[16,11,23,6],"897":[16,11,23,6],"905":[25,19,25,23],"913":[25,32,25,42],"921":[25,44,25,46],"929":[25,19,25,47],"931":[25,19,25,31],"937":[25,19,25,61],"939":[25,19,25,59],"945":[25,19,25,61],"953":[25,19,25,61],"961":[26,16,26,20],"969":[26,16,26,26],"977":[26,27,26,30],"985":[26,16,26,31],"993":[26,35,26,43],"1001":[26,47,26,51],"1009":[26,47,26,64],"1017":[26,16,26,64],"1025":[26,9,26,65],"1033":[24,13,27,6],"1041":[24,13,27,6],"1049":[24,13,27,6],"1057":[24,13,27,6],"1065":[24,13,27,6],"1073":[24,13,27,6],"1081":[29,16,29,20],"1089":[29,16,29,31],"1097":[29,32,29,40],"1105":[29,16,29,41],"1113":[29,16,29,41],"1121":[29,9,29,42],"1129":[28,16,30,6],"1137":[28,16,30,6],"1145":[28,16,30,6],"1153":[28,16,30,6],"1161":[33,20,33,29],"1169":[33,35,33,43],"1177":[33,20,33,44],"1179":[33,20,33,34],"1185":[33,47,33,54],"1193":[33,57,33,65],"1201":[33,20,33,65],"1209":[33,13,33,66],"1217":[32,17,34,10],"1225":[32,17,34,10],"1233":[32,17,34,10],"1241":[32,17,34,10],"1249":[32,17,34,10],"1257":[31,15,35,6],"1265":[4,29,36,2],"1273":[4,12,36,2],"1281":[4,12,36,2],"1289":[4,12,36,2],"1297":[37,1,37,5],"1305":[37,11,37,15],"1313":[37,21,37,30],"1321":[37,32,37,44],"1329":[37,11,37,45],"1331":[37,11,37,20],"1337":[37,1,37,46],"1339":[37,1,37,10],"1345":[37,1,37,47],"1353":[38,1,38,5],"1361":[38,11,38,15],"1369":[38,21,38,30],"1377":[38,32,38,44],"1385":[38,11,38,45],"1387":[38,11,38,20],"1393":[38,1,38,46],"1395":[38,1,38,10],"1401":[38,1,38,47],"1409":[39,1,39,5],"1417":[39,21,39,25],"1425":[39,21,39,31],"1433":[39,21,39,35],"1441":[39,1,39,35],"1449":[39,1,39,36],"1457":[1,1,39,36],"1465":[1,1,39,36],"1473":[1,1,39,36],"1481":[1,1,39,36],"1489":[1,1,39,36],"1497":[1,1,39,36],"1505":[10,13,12,14],"1513":[10,13,12,14],"1521":[7,13,15,6],"1529":[7,13,15,6],"1537":[18,23,21,10],"1545":[18,23,21,10],"1553":[16,11,23,6],"1561":[16,11,23,6],"1569":[24,13,27,6],"1577":[24,13,27,6],"1585":[28,16,30,6],"1593":[28,16,30,6],"1601":[33,20,33,65],"1609":[32,17,34,10],"1617":[32,17,34,10],"1625":[1,1,39,36],"1633":[1,1,39,36],"nBranches":8,"originalCodeFileName":"/home/blake/ExpoSE/Targets/nlog/node_modules/mime/mime.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/nlog/node_modules/mime/mime_jalangi_.js","code":"var path = require('path'),\n    fs = require('fs');\n\nvar mime = module.exports = {\n  /** Map of extension to mime type */\n  types: {},\n\n  /** Map of mime type to extension */\n  extensions :{},\n\n  /**\n   * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n   * to an array of extensions associated with the type.  The first extension is\n   * used as the default extension for the type.\n   *\n   * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n   *\n   * @param map (Object) type definitions\n   */\n  define: function(map) {\n    for (var type in map) {\n      var exts = map[type];\n\n      for (var i = 0; i < exts.length; i++) {\n        mime.types[exts[i]] = type;\n      }\n\n      mime.extensions[type] = exts[0];\n    }\n  },\n\n  /**\n   * Load an Apache2-style \".types\" file\n   *\n   * This may be called multiple times (it's expected).  Where files declare\n   * overlapping types/extensions, the last file wins.\n   *\n   * @param file (String) path of file to load.\n   */\n  load: function(file) {\n    // Read file and split into lines\n    var map = {},\n        content = fs.readFileSync(file, 'ascii'),\n        lines = content.split(/[\\r\\n]+/);\n\n    lines.forEach(function(line, lineno) {\n      // Clean up whitespace/comments, and split into fields\n      var fields = line.replace(/\\s*#.*|^\\s*|\\s*$/g, '').split(/\\s+/);\n      map[fields.shift()] = fields;\n    });\n\n    mime.define(map);\n  },\n\n  /**\n   * Lookup a mime type based on extension\n   */\n  lookup: function(path, fallback) {\n    var ext = path.replace(/.*[\\.\\/]/, '').toLowerCase();\n    return mime.types[ext] || fallback || mime.default_type;\n  },\n\n  /**\n   * Return file extension associated with a mime type\n   */\n  extension: function(mimeType) {\n    return mime.extensions[mimeType];\n  },\n\n  /**\n   * Lookup a charset based on mime type.\n   */\n  charsets: {\n    lookup: function (mimeType, fallback) {\n      // Assume text types are utf8.  Modify mime logic as needed.\n      return /^text\\//.test(mimeType) ? 'UTF-8' : fallback;\n    }\n  }\n};\n\n// Load our local copy of\n// http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\nmime.load(path.join(__dirname, 'mime.types'));\n\n// Overlay enhancements we've had requests for (and that seem to make sense)\nmime.load(path.join(__dirname, 'node.types'));\n\n// Set the default type\nmime.default_type = mime.types.bin;\n"}