J$.iids = {"8":[10,29,10,44],"9":[1,20,1,27],"10":[10,29,10,44],"16":[26,16,26,43],"17":[1,28,1,32],"18":[10,46,10,49],"24":[26,16,26,64],"25":[1,20,1,33],"32":[33,20,33,44],"33":[1,20,1,33],"34":[10,46,10,49],"41":[1,20,1,33],"49":[2,26,2,38],"57":[2,26,2,45],"65":[2,26,2,45],"73":[2,26,2,45],"81":[3,12,3,19],"89":[3,20,3,26],"97":[3,12,3,27],"105":[3,34,3,41],"113":[3,42,3,46],"121":[3,34,3,47],"129":[3,12,3,27],"137":[3,12,3,27],"145":[3,34,3,47],"153":[3,34,3,47],"161":[4,12,4,18],"169":[5,12,5,14],"177":[6,17,6,19],"185":[8,26,8,29],"193":[9,24,9,27],"201":[9,28,9,32],"209":[9,24,9,33],"217":[9,24,9,33],"225":[9,24,9,33],"233":[10,26,10,27],"241":[10,26,10,27],"249":[10,26,10,27],"257":[10,29,10,30],"265":[10,33,10,37],"273":[10,33,10,44],"289":[10,46,10,47],"297":[10,46,10,49],"313":[11,17,11,21],"321":[11,17,11,27],"329":[11,28,11,32],"337":[11,33,11,34],"345":[11,28,11,35],"353":[11,39,11,43],"361":[11,17,11,43],"369":[11,17,11,44],"377":[13,13,13,17],"385":[13,13,13,28],"393":[13,29,13,33],"401":[13,37,13,41],"409":[13,42,13,43],"417":[13,37,13,44],"425":[13,13,13,44],"433":[13,13,13,45],"441":[8,26,8,29],"449":[8,9,14,10],"457":[8,9,14,10],"465":[7,13,15,6],"473":[7,13,15,6],"481":[7,13,15,6],"489":[7,13,15,6],"497":[7,13,15,6],"505":[7,13,15,6],"513":[7,13,15,6],"521":[17,19,17,21],"529":[17,33,17,35],"537":[17,49,17,53],"545":[17,55,17,62],"553":[17,33,17,63],"555":[17,33,17,48],"561":[17,73,17,80],"569":[17,87,17,96],"577":[17,73,17,97],"579":[17,73,17,86],"585":[17,19,17,21],"593":[17,19,17,21],"601":[17,33,17,63],"609":[17,33,17,63],"617":[17,73,17,97],"625":[17,73,17,97],"633":[18,9,18,14],"641":[19,26,19,30],"649":[19,39,19,58],"657":[19,60,19,62],"665":[19,26,19,63],"667":[19,26,19,38],"673":[19,70,19,75],"681":[19,26,19,76],"683":[19,26,19,69],"689":[19,26,19,76],"697":[19,26,19,76],"705":[20,13,20,16],"713":[20,17,20,23],"721":[20,17,20,31],"723":[20,17,20,29],"729":[20,35,20,41],"737":[20,13,20,41],"745":[20,13,20,42],"753":[18,23,21,10],"761":[18,23,21,10],"769":[18,23,21,10],"777":[18,23,21,10],"785":[18,23,21,10],"793":[18,23,21,10],"801":[18,9,21,11],"803":[18,9,18,22],"809":[18,9,21,12],"817":[22,9,22,13],"825":[22,21,22,24],"833":[22,9,22,25],"835":[22,9,22,20],"841":[22,9,22,26],"849":[16,11,23,6],"857":[16,11,23,6],"865":[16,11,23,6],"873":[16,11,23,6],"881":[16,11,23,6],"889":[16,11,23,6],"897":[16,11,23,6],"905":[25,19,25,23],"913":[25,32,25,42],"921":[25,44,25,46],"929":[25,19,25,47],"931":[25,19,25,31],"937":[25,19,25,61],"939":[25,19,25,59],"945":[25,19,25,61],"953":[25,19,25,61],"961":[26,16,26,20],"969":[26,16,26,26],"977":[26,27,26,30],"985":[26,16,26,31],"993":[26,35,26,43],"1001":[26,47,26,51],"1009":[26,47,26,64],"1017":[26,16,26,64],"1025":[26,9,26,65],"1033":[24,13,27,6],"1041":[24,13,27,6],"1049":[24,13,27,6],"1057":[24,13,27,6],"1065":[24,13,27,6],"1073":[24,13,27,6],"1081":[29,16,29,20],"1089":[29,16,29,31],"1097":[29,32,29,40],"1105":[29,16,29,41],"1113":[29,16,29,41],"1121":[29,9,29,42],"1129":[28,16,30,6],"1137":[28,16,30,6],"1145":[28,16,30,6],"1153":[28,16,30,6],"1161":[33,20,33,29],"1169":[33,35,33,43],"1177":[33,20,33,44],"1179":[33,20,33,34],"1185":[33,47,33,54],"1193":[33,57,33,65],"1201":[33,20,33,65],"1209":[33,13,33,66],"1217":[32,17,34,10],"1225":[32,17,34,10],"1233":[32,17,34,10],"1241":[32,17,34,10],"1249":[32,17,34,10],"1257":[31,15,35,6],"1265":[4,29,36,2],"1273":[4,12,36,2],"1281":[4,12,36,2],"1289":[4,12,36,2],"1297":[37,1,37,5],"1305":[37,11,37,15],"1313":[37,21,37,30],"1321":[37,32,37,44],"1329":[37,11,37,45],"1331":[37,11,37,20],"1337":[37,1,37,46],"1339":[37,1,37,10],"1345":[37,1,37,47],"1353":[38,1,38,5],"1361":[38,11,38,15],"1369":[38,21,38,30],"1377":[38,32,38,44],"1385":[38,11,38,45],"1387":[38,11,38,20],"1393":[38,1,38,46],"1395":[38,1,38,10],"1401":[38,1,38,47],"1409":[39,1,39,5],"1417":[39,21,39,25],"1425":[39,21,39,31],"1433":[39,21,39,35],"1441":[39,1,39,35],"1449":[39,1,39,36],"1457":[1,1,39,36],"1465":[1,1,39,36],"1473":[1,1,39,36],"1481":[1,1,39,36],"1489":[1,1,39,36],"1497":[1,1,39,36],"1505":[10,13,12,14],"1513":[10,13,12,14],"1521":[7,13,15,6],"1529":[7,13,15,6],"1537":[18,23,21,10],"1545":[18,23,21,10],"1553":[16,11,23,6],"1561":[16,11,23,6],"1569":[24,13,27,6],"1577":[24,13,27,6],"1585":[28,16,30,6],"1593":[28,16,30,6],"1601":[33,20,33,65],"1609":[32,17,34,10],"1617":[32,17,34,10],"1625":[1,1,39,36],"1633":[1,1,39,36],"nBranches":8,"originalCodeFileName":"/home/blake/ExpoSE/Targets/nlog/node_modules/mime/mime.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/nlog/node_modules/mime/mime_jalangi_.js","code":"var path = require('path'),\n    fs = require('fs');\n\nvar mime = module.exports = {\n  /** Map of extension to mime type */\n  types: {},\n\n  /** Map of mime type to extension */\n  extensions :{},\n\n  /**\n   * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n   * to an array of extensions associated with the type.  The first extension is\n   * used as the default extension for the type.\n   *\n   * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n   *\n   * @param map (Object) type definitions\n   */\n  define: function(map) {\n    for (var type in map) {\n      var exts = map[type];\n\n      for (var i = 0; i < exts.length; i++) {\n        mime.types[exts[i]] = type;\n      }\n\n      mime.extensions[type] = exts[0];\n    }\n  },\n\n  /**\n   * Load an Apache2-style \".types\" file\n   *\n   * This may be called multiple times (it's expected).  Where files declare\n   * overlapping types/extensions, the last file wins.\n   *\n   * @param file (String) path of file to load.\n   */\n  load: function(file) {\n    // Read file and split into lines\n    var map = {},\n        content = fs.readFileSync(file, 'ascii'),\n        lines = content.split(/[\\r\\n]+/);\n\n    lines.forEach(function(line, lineno) {\n      // Clean up whitespace/comments, and split into fields\n      var fields = line.replace(/\\s*#.*|^\\s*|\\s*$/g, '').split(/\\s+/);\n      map[fields.shift()] = fields;\n    });\n\n    mime.define(map);\n  },\n\n  /**\n   * Lookup a mime type based on extension\n   */\n  lookup: function(path, fallback) {\n    var ext = path.replace(/.*[\\.\\/]/, '').toLowerCase();\n    return mime.types[ext] || fallback || mime.default_type;\n  },\n\n  /**\n   * Return file extension associated with a mime type\n   */\n  extension: function(mimeType) {\n    return mime.extensions[mimeType];\n  },\n\n  /**\n   * Lookup a charset based on mime type.\n   */\n  charsets: {\n    lookup: function (mimeType, fallback) {\n      // Assume text types are utf8.  Modify mime logic as needed.\n      return /^text\\//.test(mimeType) ? 'UTF-8' : fallback;\n    }\n  }\n};\n\n// Load our local copy of\n// http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\nmime.load(path.join(__dirname, 'mime.types'));\n\n// Overlay enhancements we've had requests for (and that seem to make sense)\nmime.load(path.join(__dirname, 'node.types'));\n\n// Set the default type\nmime.default_type = mime.types.bin;\n"};
jalangiLabel52:
    while (true) {
        try {
            J$.Se(1457, '/home/blake/ExpoSE/Targets/nlog/node_modules/mime/mime_jalangi_.js', '/home/blake/ExpoSE/Targets/nlog/node_modules/mime/mime.js');
            J$.N(1465, '__secret__S$', __secret__S$, 0);
            J$.N(1473, '__secret__traits__', __secret__traits__, 0);
            J$.N(1481, 'path', path, 0);
            J$.N(1489, 'fs', fs, 0);
            J$.N(1497, 'mime', mime, 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            var path = J$.X1(137, J$.W(129, 'path', J$.F(97, J$.R(81, 'require', require, 2), 0)(J$.T(89, 'path', 21, false)), path, 3)), fs = J$.X1(153, J$.W(145, 'fs', J$.F(121, J$.R(105, 'require', require, 2), 0)(J$.T(113, 'fs', 21, false)), fs, 3));
            var mime = J$.X1(1289, J$.W(1281, 'mime', J$.P(1273, J$.R(161, 'module', module, 2), 'exports', J$.T(1265, {
                types: J$.T(169, {}, 11, false),
                extensions: J$.T(177, {}, 11, false),
                define: J$.T(513, function (map) {
                    jalangiLabel46:
                        while (true) {
                            try {
                                J$.Fe(465, arguments.callee, this, arguments);
                                arguments = J$.N(473, 'arguments', arguments, 4);
                                map = J$.N(481, 'map', map, 4);
                                J$.N(489, 'type', type, 0);
                                J$.N(497, 'exts', exts, 0);
                                J$.N(505, 'i', i, 0);
                                for (J$._tm_p in J$.H(441, J$.R(185, 'map', map, 0))) {
                                    var type = J$.X1(457, J$.W(449, 'type', J$._tm_p, type, 1));
                                    {
                                        {
                                            var exts = J$.X1(225, J$.W(217, 'exts', J$.G(209, J$.R(193, 'map', map, 0), J$.R(201, 'type', type, 0), 4), exts, 1));
                                            for (var i = J$.X1(249, J$.W(241, 'i', J$.T(233, 0, 22, false), i, 1)); J$.X1(1505, J$.C(8, J$.B(10, '<', J$.R(257, 'i', i, 0), J$.G(273, J$.R(265, 'exts', exts, 0), 'length', 0), 0))); J$.X1(1513, J$.B(34, '-', i = J$.W(297, 'i', J$.B(26, '+', J$.U(18, '+', J$.R(289, 'i', i, 0)), J$.T(281, 1, 22, false), 0), i, 0), J$.T(305, 1, 22, false), 0))) {
                                                J$.X1(369, J$.P(361, J$.G(321, J$.R(313, 'mime', mime, 1), 'types', 0), J$.G(345, J$.R(329, 'exts', exts, 0), J$.R(337, 'i', i, 0), 4), J$.R(353, 'type', type, 0), 2));
                                            }
                                            J$.X1(433, J$.P(425, J$.G(385, J$.R(377, 'mime', mime, 1), 'extensions', 0), J$.R(393, 'type', type, 0), J$.G(417, J$.R(401, 'exts', exts, 0), J$.T(409, 0, 22, false), 4), 2));
                                        }
                                    }
                                }
                            } catch (J$e) {
                                J$.Ex(1521, J$e);
                            } finally {
                                if (J$.Fr(1529))
                                    continue jalangiLabel46;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false, 465),
                load: J$.T(897, function (file) {
                    jalangiLabel48:
                        while (true) {
                            try {
                                J$.Fe(849, arguments.callee, this, arguments);
                                arguments = J$.N(857, 'arguments', arguments, 4);
                                file = J$.N(865, 'file', file, 4);
                                J$.N(873, 'map', map, 0);
                                J$.N(881, 'content', content, 0);
                                J$.N(889, 'lines', lines, 0);
                                var map = J$.X1(593, J$.W(585, 'map', J$.T(521, {}, 11, false), map, 1)), content = J$.X1(609, J$.W(601, 'content', J$.M(553, J$.R(529, 'fs', fs, 1), 'readFileSync', 0)(J$.R(537, 'file', file, 0), J$.T(545, 'ascii', 21, false)), content, 1)), lines = J$.X1(625, J$.W(617, 'lines', J$.M(577, J$.R(561, 'content', content, 0), 'split', 0)(J$.T(569, /[\r\n]+/, 14, false)), lines, 1));
                                J$.X1(809, J$.M(801, J$.R(633, 'lines', lines, 0), 'forEach', 0)(J$.T(793, function (line, lineno) {
                                    jalangiLabel47:
                                        while (true) {
                                            try {
                                                J$.Fe(753, arguments.callee, this, arguments);
                                                arguments = J$.N(761, 'arguments', arguments, 4);
                                                line = J$.N(769, 'line', line, 4);
                                                lineno = J$.N(777, 'lineno', lineno, 4);
                                                J$.N(785, 'fields', fields, 0);
                                                var fields = J$.X1(697, J$.W(689, 'fields', J$.M(681, J$.M(665, J$.R(641, 'line', line, 0), 'replace', 0)(J$.T(649, /\s*#.*|^\s*|\s*$/g, 14, false), J$.T(657, '', 21, false)), 'split', 0)(J$.T(673, /\s+/, 14, false)), fields, 1));
                                                J$.X1(745, J$.P(737, J$.R(705, 'map', map, 0), J$.M(721, J$.R(713, 'fields', fields, 0), 'shift', 0)(), J$.R(729, 'fields', fields, 0), 2));
                                            } catch (J$e) {
                                                J$.Ex(1537, J$e);
                                            } finally {
                                                if (J$.Fr(1545))
                                                    continue jalangiLabel47;
                                                else
                                                    return J$.Ra();
                                            }
                                        }
                                }, 12, false, 753)));
                                J$.X1(841, J$.M(833, J$.R(817, 'mime', mime, 1), 'define', 0)(J$.R(825, 'map', map, 0)));
                            } catch (J$e) {
                                J$.Ex(1553, J$e);
                            } finally {
                                if (J$.Fr(1561))
                                    continue jalangiLabel48;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false, 849),
                lookup: J$.T(1073, function (path, fallback) {
                    jalangiLabel49:
                        while (true) {
                            try {
                                J$.Fe(1033, arguments.callee, this, arguments);
                                arguments = J$.N(1041, 'arguments', arguments, 4);
                                path = J$.N(1049, 'path', path, 4);
                                fallback = J$.N(1057, 'fallback', fallback, 4);
                                J$.N(1065, 'ext', ext, 0);
                                var ext = J$.X1(953, J$.W(945, 'ext', J$.M(937, J$.M(929, J$.R(905, 'path', path, 0), 'replace', 0)(J$.T(913, /.*[\.\/]/, 14, false), J$.T(921, '', 21, false)), 'toLowerCase', 0)(), ext, 1));
                                return J$.X1(1025, J$.Rt(1017, J$.C(24, J$.C(16, J$.G(985, J$.G(969, J$.R(961, 'mime', mime, 1), 'types', 0), J$.R(977, 'ext', ext, 0), 4)) ? J$._() : J$.R(993, 'fallback', fallback, 0)) ? J$._() : J$.G(1009, J$.R(1001, 'mime', mime, 1), 'default_type', 0)));
                            } catch (J$e) {
                                J$.Ex(1569, J$e);
                            } finally {
                                if (J$.Fr(1577))
                                    continue jalangiLabel49;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false, 1033),
                extension: J$.T(1153, function (mimeType) {
                    jalangiLabel50:
                        while (true) {
                            try {
                                J$.Fe(1129, arguments.callee, this, arguments);
                                arguments = J$.N(1137, 'arguments', arguments, 4);
                                mimeType = J$.N(1145, 'mimeType', mimeType, 4);
                                return J$.X1(1121, J$.Rt(1113, J$.G(1105, J$.G(1089, J$.R(1081, 'mime', mime, 1), 'extensions', 0), J$.R(1097, 'mimeType', mimeType, 0), 4)));
                            } catch (J$e) {
                                J$.Ex(1585, J$e);
                            } finally {
                                if (J$.Fr(1593))
                                    continue jalangiLabel50;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false, 1129),
                charsets: J$.T(1257, {
                    lookup: J$.T(1249, function (mimeType, fallback) {
                        jalangiLabel51:
                            while (true) {
                                try {
                                    J$.Fe(1217, arguments.callee, this, arguments);
                                    arguments = J$.N(1225, 'arguments', arguments, 4);
                                    mimeType = J$.N(1233, 'mimeType', mimeType, 4);
                                    fallback = J$.N(1241, 'fallback', fallback, 4);
                                    return J$.X1(1209, J$.Rt(1201, J$.X1(1601, J$.C(32, J$.M(1177, J$.T(1161, /^text\//, 14, false), 'test', 0)(J$.R(1169, 'mimeType', mimeType, 0)))) ? J$.T(1185, 'UTF-8', 21, false) : J$.R(1193, 'fallback', fallback, 0)));
                                } catch (J$e) {
                                    J$.Ex(1609, J$e);
                                } finally {
                                    if (J$.Fr(1617))
                                        continue jalangiLabel51;
                                    else
                                        return J$.Ra();
                                }
                            }
                    }, 12, false, 1217)
                }, 11, false)
            }, 11, false), 0), mime, 3));
            J$.X1(1345, J$.M(1337, J$.R(1297, 'mime', mime, 1), 'load', 0)(J$.M(1329, J$.R(1305, 'path', path, 1), 'join', 0)(J$.R(1313, '__dirname', __dirname, 2), J$.T(1321, 'mime.types', 21, false))));
            J$.X1(1401, J$.M(1393, J$.R(1353, 'mime', mime, 1), 'load', 0)(J$.M(1385, J$.R(1361, 'path', path, 1), 'join', 0)(J$.R(1369, '__dirname', __dirname, 2), J$.T(1377, 'node.types', 21, false))));
            J$.X1(1449, J$.P(1441, J$.R(1409, 'mime', mime, 1), 'default_type', J$.G(1433, J$.G(1425, J$.R(1417, 'mime', mime, 1), 'types', 0), 'bin', 0), 0));
        } catch (J$e) {
            J$.Ex(1625, J$e);
        } finally {
            if (J$.Sr(1633)) {
                J$.L();
                continue jalangiLabel52;
            } else {
                J$.L();
                break jalangiLabel52;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
