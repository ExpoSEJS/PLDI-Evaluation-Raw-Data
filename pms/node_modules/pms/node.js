function $mol_log(path, values) {
    var filter = $mol_log.filter();
    if (filter == null)
        return;
    if (path.indexOf(filter) === -1)
        return;
    var time = new Date().toISOString().substring(11, 19);
    console.log.apply(console, [time, path].concat(values));
}
var $mol_log;
(function ($mol_log) {
    var _filter;
    function filter() {
        var diff = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            diff[_i - 0] = arguments[_i];
        }
        if (diff[0] !== void 0) {
            _filter = diff[0];
        }
        if (_filter !== void 0)
            return _filter;
        return _filter = null;
    }
    $mol_log.filter = filter;
})($mol_log || ($mol_log = {}));
//log.node.js.map
;
var $mol_object = (function () {
    function $mol_object() {
        this['destroyed()'] = false;
    }
    $mol_object.prototype.Class = function () {
        return this.constructor;
    };
    $mol_object.objectPath = function () {
        var self = this;
        return self['name']
            || self['displayName']
            || (self['displayName'] = Function.prototype.toString.call(self).match(/^function ([a-z0-9_$]*)/)[1]);
    };
    $mol_object.prototype.objectClassNames = function () {
        if (this.hasOwnProperty('objectClassNames()'))
            return this['objectClassNames()'];
        var names = [];
        var current = this;
        while (typeof current === 'object') {
            if (!current.constructor.objectPath)
                break;
            var name = current.constructor.objectPath();
            if (!name)
                continue;
            names.push(name);
            if (current === null)
                break;
            current = Object.getPrototypeOf(current);
        }
        return this['objectClassNames()'] = names;
    };
    $mol_object.prototype.objectOwner = function (next) {
        if (this['objectOwner()'])
            return this['objectOwner()'];
        return this['objectOwner()'] = next;
    };
    $mol_object.prototype.objectField = function (next) {
        if (this['objectField()'])
            return this['objectField()'] || '';
        return this['objectField()'] = next;
    };
    $mol_object.prototype.objectPath = function (next) {
        var path = '';
        var owner = this.objectOwner();
        if (owner)
            path = owner.objectPath();
        var field = this.objectField();
        if (field)
            path += '.' + field;
        return path;
    };
    $mol_object.prototype.setup = function (script) {
        script(this);
        return this;
    };
    $mol_object.prototype.destroyed = function () {
        var diff = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            diff[_i - 0] = arguments[_i];
        }
        if (diff[0] === void 0)
            return this['destroyed()'];
        this['destroyed()'] = diff[0];
        this.log(['.destroyed()', diff[0]]);
        return diff[0];
    };
    $mol_object.prototype.log = function (values) {
        if ($mol_log.filter() == null)
            return;
        $mol_log(this.objectPath(), values);
    };
    $mol_object.toString = function () {
        return this.objectPath();
    };
    $mol_object.prototype.toString = function () {
        return this.objectPath();
    };
    return $mol_object;
}());
//object.js.map
;
var $mol_set_shim = (function () {
    function $mol_set_shim() {
        this._index = {};
        this.size = 0;
    }
    $mol_set_shim.prototype.add = function (value) {
        var key = String(value);
        var list = this._index[key];
        if (list) {
            if (list.indexOf(value) !== -1)
                return this;
            list.push(value);
        }
        else {
            list = this._index[key] = [value];
        }
        ++this.size;
        return this;
    };
    $mol_set_shim.prototype.has = function (value) {
        var key = String(value);
        var list = this._index[key];
        if (!list)
            return false;
        return list.indexOf(value) !== -1;
    };
    $mol_set_shim.prototype.delete = function (value) {
        var key = String(value);
        var list = this._index[key];
        if (!list)
            return;
        var index = list.indexOf(value);
        if (index === -1)
            return;
        list.splice(index, 1);
        --this.size;
    };
    $mol_set_shim.prototype.forEach = function (handle) {
        for (var key in this._index) {
            if (!this._index.hasOwnProperty(key))
                continue;
            this._index[key].forEach(function (val, index) { return handle(val, val); });
        }
    };
    $mol_set_shim.prototype.keys = function () {
        var keys = [];
        this.forEach(function (val, key) {
            keys.push(key);
        });
        return keys;
    };
    $mol_set_shim.prototype.values = function () {
        var values = [];
        this.forEach(function (val, key) {
            values.push(val);
        });
        return values;
    };
    $mol_set_shim.prototype.entries = function () {
        var entries = [];
        this.forEach(function (val, key) {
            entries.push([val, key]);
        });
        return entries;
    };
    $mol_set_shim.prototype.clear = function () {
        this._index = {};
        this.size = 0;
    };
    return $mol_set_shim;
}());
//set.js.map
;
var $mol_set = ( typeof Set === 'function' ) ? Set : $mol_set_shim

;
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var $mol_defer = (function (_super) {
    __extends($mol_defer, _super);
    function $mol_defer(run) {
        _super.call(this);
        this.run = run;
        $mol_defer.add(this);
    }
    $mol_defer.prototype.destroyed = function () {
        var diff = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            diff[_i - 0] = arguments[_i];
        }
        if (diff[0])
            $mol_defer.drop(this);
        return _super.prototype.destroyed.apply(this, diff);
    };
    $mol_defer.schedule = function () {
        var _this = this;
        if (this.timer)
            return;
        this.timer = this.scheduleNative(function () {
            _this.timer = 0;
            _this.run();
        });
    };
    $mol_defer.unschedule = function () {
        if (!this.timer)
            return;
        cancelAnimationFrame(this.timer);
        this.timer = 0;
    };
    $mol_defer.add = function (defer) {
        this.all.push(defer);
        this.schedule();
    };
    $mol_defer.drop = function (defer) {
        var index = this.all.indexOf(defer);
        if (index >= 0)
            this.all.splice(index, 1);
    };
    $mol_defer.run = function () {
        if (this.all.length === 0)
            return;
        this.schedule();
        for (var defer; defer = this.all.pop();)
            defer.run();
    };
    $mol_defer.all = [];
    $mol_defer.timer = 0;
    $mol_defer.scheduleNative = (typeof requestAnimationFrame == 'function')
        ? function (handler) { return requestAnimationFrame(handler); }
        : function (handler) { return setTimeout(handler, 16); };
    return $mol_defer;
}($mol_object));
//defer.js.map
;
var $mol_dict_shim = (function () {
    function $mol_dict_shim() {
        this._keys = {};
        this._values = {};
        this.size = 0;
    }
    $mol_dict_shim.prototype.set = function (key, value) {
        var keyStr = String(key);
        var keys = this._keys[keyStr];
        if (keys) {
            var index = keys.indexOf(key);
            if (index === -1) {
                index = keys.length;
                keys.push(key);
                ++this.size;
            }
            this._values[keyStr][index] = value;
        }
        else {
            this._keys[keyStr] = [key];
            this._values[keyStr] = [value];
            ++this.size;
        }
        return this;
    };
    $mol_dict_shim.prototype.get = function (key) {
        var keyStr = String(key);
        var list = this._keys[keyStr];
        if (!list)
            return void 0;
        var index = list.indexOf(key);
        if (index === -1)
            return void 0;
        return this._values[keyStr][index];
    };
    $mol_dict_shim.prototype.has = function (key) {
        var keyStr = String(key);
        var list = this._keys[keyStr];
        if (!list)
            return false;
        return list.indexOf(key) !== -1;
    };
    $mol_dict_shim.prototype.delete = function (key) {
        var keyStr = String(key);
        var keys = this._keys[keyStr];
        if (!keys)
            return;
        var index = keys.indexOf(key);
        if (index === -1)
            return;
        keys.splice(index, 1);
        this._values[keyStr].splice(index, 1);
        --this.size;
    };
    $mol_dict_shim.prototype.forEach = function (handle) {
        for (var keyStr in this._keys) {
            if (!this._keys.hasOwnProperty(keyStr))
                continue;
            var values = this._values[keyStr];
            this._keys[keyStr].forEach(function (key, index) {
                handle(values[index], key);
            });
        }
    };
    $mol_dict_shim.prototype.keys = function () {
        var keys = [];
        this.forEach(function (val, key) {
            keys.push(key);
        });
        return keys;
    };
    $mol_dict_shim.prototype.values = function () {
        var values = [];
        this.forEach(function (val, key) {
            values.push(val);
        });
        return values;
    };
    $mol_dict_shim.prototype.entries = function () {
        var entries = [];
        this.forEach(function (val, key) {
            entries.push([key, val]);
        });
        return entries;
    };
    $mol_dict_shim.prototype.clear = function () {
        this._keys = {};
        this._values = {};
        this.size = 0;
    };
    return $mol_dict_shim;
}());
//dict.js.map
;
var $mol_dict = ( typeof Map === 'function' ) ? Map : $mol_dict_shim

;
var $mol_state_stack = new $mol_dict();
//stack.js.map
;
process.on('uncaughtException', function (error) {
    var stack = $mol_atom.stack;
    console.error(error);
    $mol_atom_restore(error);
});
//atom.node.js.map
;
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var $mol_atom_status;
(function ($mol_atom_status) {
    $mol_atom_status[$mol_atom_status["obsolete"] = 'obsolete'] = "obsolete";
    $mol_atom_status[$mol_atom_status["checking"] = 'checking'] = "checking";
    $mol_atom_status[$mol_atom_status["actual"] = 'actual'] = "actual";
})($mol_atom_status || ($mol_atom_status = {}));
var $mol_atom = (function (_super) {
    __extends($mol_atom, _super);
    function $mol_atom(host, field, handler, fail, key) {
        if (field === void 0) { field = 'value()'; }
        _super.call(this);
        this.host = host;
        this.field = field;
        this.handler = handler;
        this.fail = fail;
        this.key = key;
        this.masters = null;
        this.slaves = null;
        this.status = $mol_atom_status.obsolete;
        this.autoFresh = false;
    }
    $mol_atom.prototype.destroyed = function () {
        var diff = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            diff[_i - 0] = arguments[_i];
        }
        if (diff[0]) {
            this.unlink();
            var host = this.host || this;
            var value = host[this.field];
            if (value instanceof $mol_object) {
                if ((value.objectOwner() === host) && (value.objectField() === this.field)) {
                    value.destroyed(true);
                }
            }
            host[this.field] = void 0;
            host['$mol_atom_state'][this.field] = void 0;
            this['destroyed()'] = true;
            this.log(['.destroyed()', true, 'atom']);
            return true;
        }
        else {
            return this['destroyed()'];
        }
    };
    $mol_atom.prototype.unlink = function () {
        this.disobeyAll();
        this.checkSlaves();
    };
    $mol_atom.prototype.objectPath = function () {
        return this.host ? this.host.objectPath() + '.' + this.field : this.field;
    };
    $mol_atom.prototype.get = function () {
        if ($mol_atom.stack.indexOf(this) !== -1) {
            throw new Error('Recursive dependency! ' + this.objectPath());
        }
        var slave = $mol_atom.stack[$mol_atom.stack.length - 1];
        if (slave)
            this.lead(slave);
        if (slave)
            slave.obey(this);
        this.actualize();
        var value = (this.host || this)[this.field];
        if (value instanceof Error)
            throw value;
        return value;
    };
    $mol_atom.prototype.actualize = function () {
        var _this = this;
        this.log(['actualize']);
        if (this.status === $mol_atom_status.actual)
            return;
        var index = $mol_atom.stack.length;
        $mol_atom.stack.push(this);
        if (this.status === $mol_atom_status.checking) {
            this.masters.forEach(function (master) {
                if (_this.status !== $mol_atom_status.checking)
                    return;
                master.actualize();
            });
            if (this.status === $mol_atom_status.checking) {
                this.status = $mol_atom_status.actual;
            }
        }
        if (this.status !== $mol_atom_status.actual) {
            this.log(['pull']);
            var oldMasters = this.masters;
            this.masters = null;
            if (oldMasters)
                oldMasters.forEach(function (master) {
                    master.dislead(_this);
                });
            var host = this.host || this;
            if (this.key !== void 0) {
                var next = this.handler.call(host, this.key);
            }
            else {
                var next = this.handler.call(host);
            }
            if (next === void 0)
                next = host[this.field];
            this.push(next);
        }
        $mol_atom.stack.length = index;
    };
    $mol_atom.prototype.set = function () {
        var diff = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            diff[_i - 0] = arguments[_i];
        }
        var host = this.host || this;
        if (this.key !== void 0) {
            var next = (_a = this.handler).call.apply(_a, [host, this.key].concat(diff));
        }
        else {
            var next = (_b = this.handler).call.apply(_b, [host].concat(diff));
        }
        if (next === void 0)
            return host[this.field];
        return this.push(next);
        var _a, _b;
    };
    $mol_atom.prototype.push = function (next) {
        var host = this.host || this;
        var prev = host[this.field];
        if (next instanceof Error && this.fail) {
            if (this.key !== void 0) {
                next = this.fail.call(host, this.key, host, next);
            }
            else {
                next = this.fail.call(host, host, next);
            }
        }
        comparing: if ((next instanceof Array) && (prev instanceof Array) && (next.length === prev.length)) {
            for (var i = 0; i < next['length']; ++i) {
                if (next[i] !== prev[i])
                    break comparing;
            }
            next = prev;
        }
        if (prev !== next) {
            if (next instanceof $mol_object) {
                next['objectField'](this.field);
                next['objectOwner'](host);
            }
            host[this.field] = next;
            this.log(['push', next, prev]);
            this.obsoleteSlaves();
        }
        this.status = $mol_atom_status.actual;
        return next;
    };
    $mol_atom.prototype.obsoleteSlaves = function () {
        if (!this.slaves)
            return;
        this.slaves.forEach(function (slave) { return slave.obsolete(); });
    };
    $mol_atom.prototype.checkSlaves = function () {
        if (this.slaves) {
            this.slaves.forEach(function (slave) { return slave.check(); });
        }
        else {
            if (this.autoFresh)
                $mol_atom.actualize(this);
        }
    };
    $mol_atom.prototype.check = function () {
        if (this.status === $mol_atom_status.actual) {
            this.log(['checking']);
            this.status = $mol_atom_status.checking;
            this.checkSlaves();
        }
    };
    $mol_atom.prototype.obsolete = function () {
        if (this.status === $mol_atom_status.obsolete)
            return;
        this.log(['obsolete']);
        this.status = $mol_atom_status.obsolete;
        this.checkSlaves();
        return void 0;
    };
    $mol_atom.prototype.lead = function (slave) {
        if (!this.slaves)
            this.slaves = new $mol_set();
        this.slaves.add(slave);
    };
    $mol_atom.prototype.dislead = function (slave) {
        if (!this.slaves)
            return;
        this.slaves.delete(slave);
        if (!this.slaves.size) {
            this.slaves = null;
            $mol_atom.reap(this);
        }
    };
    $mol_atom.prototype.obey = function (master) {
        if (!this.masters)
            this.masters = new $mol_set();
        this.masters.add(master);
    };
    $mol_atom.prototype.disobey = function (master) {
        if (!this.masters)
            return;
        this.masters.delete(master);
    };
    $mol_atom.prototype.disobeyAll = function () {
        var _this = this;
        if (!this.masters)
            return;
        this.masters.forEach(function (master) { return master.dislead(_this); });
        this.masters = null;
    };
    $mol_atom.prototype.value = function () {
        var diff = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            diff[_i - 0] = arguments[_i];
        }
        if (diff[0] === void 0) {
            if (diff.length > 1)
                return this.push(diff[1]);
            if (diff.length > 0)
                return this.obsolete();
            return this.get();
        }
        else {
            return this.set.apply(this, diff);
        }
    };
    $mol_atom.actualize = function (atom) {
        $mol_atom.updating.push(atom);
        $mol_atom.schedule();
    };
    $mol_atom.reap = function (atom) {
        $mol_atom.reaping.add(atom);
        $mol_atom.schedule();
    };
    $mol_atom.schedule = function () {
        var _this = this;
        if (this.scheduled)
            return;
        new $mol_defer(function () {
            if (!_this.scheduled)
                return;
            _this.scheduled = false;
            _this.sync();
        });
        this.scheduled = true;
    };
    $mol_atom.sync = function () {
        var _this = this;
        $mol_log('$mol_atom.sync', []);
        this.schedule();
        while (this.updating.length) {
            var atom = this.updating.shift();
            if (!atom.destroyed())
                atom.actualize();
        }
        while (this.reaping.size) {
            this.reaping.forEach(function (atom) {
                _this.reaping.delete(atom);
                if (!atom.slaves)
                    atom.destroyed(true);
            });
        }
        this.scheduled = false;
    };
    $mol_atom.stack = [];
    $mol_atom.updating = [];
    $mol_atom.reaping = new $mol_set();
    $mol_atom.scheduled = false;
    return $mol_atom;
}($mol_object));
function $mol_atom_restore(error) {
    while ($mol_atom.stack.length) {
        var atom = $mol_atom.stack.pop();
        if (error instanceof Error) {
            error = atom.push(error);
        }
    }
}
$mol_state_stack.set('$mol_atom.stack', $mol_atom.stack);
var $mol_atom_wait = (function (_super) {
    __extends($mol_atom_wait, _super);
    function $mol_atom_wait(message) {
        if (message === void 0) { message = 'Wait...'; }
        _super.call(this, message);
        this.message = message;
        this.name = '$mol_atom_wait';
    }
    return $mol_atom_wait;
}(Error));
function $mol_atom_task(handler, fail, autoFresh) {
    if (autoFresh === void 0) { autoFresh = true; }
    var atom = new $mol_atom(null, 'value()', handler, fail);
    atom.autoFresh = autoFresh;
    $mol_atom.actualize(atom);
    return atom;
}
//atom.js.map
;
function $mol_prop(config) {
    return function (obj, name, descr) {
        var value = descr.value;
        if (value.length) {
            descr.value = function (key) {
                var diff = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    diff[_i - 1] = arguments[_i];
                }
                var host = this;
                var field = name + "(" + JSON.stringify(key) + ")";
                var atoms = host['$mol_atom_state'];
                if (!atoms)
                    atoms = host['$mol_atom_state'] = {};
                var info = atoms[field];
                if (!info)
                    atoms[field] = info = new $mol_atom(host, field, value, config && config.fail, key);
                return info.value.apply(info, diff);
            };
        }
        else {
            descr.value = function () {
                var diff = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    diff[_i - 0] = arguments[_i];
                }
                var host = this;
                var field = name + "()";
                var atoms = host['$mol_atom_state'];
                if (!atoms)
                    atoms = host['$mol_atom_state'] = {};
                var info = atoms[field];
                if (!info)
                    atoms[field] = info = new $mol_atom(host, field, value, config && config.fail);
                return info.value.apply(info, diff);
            };
        }
        void (descr.value['value'] = value);
    };
}
//prop.js.map
;
var $node = new Proxy({}, { get: function (target, field, wrapper) {
        return require(field);
    } });
//node.node.js.map
;
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $mol_file = (function (_super) {
    __extends($mol_file, _super);
    function $mol_file() {
        _super.apply(this, arguments);
    }
    $mol_file.absolute = function (path) {
        return new $mol_file().setup(function (obj) {
            obj.path = function () { return path; };
        });
    };
    $mol_file.relative = function (path) {
        return $mol_file.absolute($node.path.resolve(path).replace(/\\/g, '/'));
    };
    $mol_file.prototype.mime = function () {
        return 'application/octet-stream';
    };
    $mol_file.prototype.path = function () {
        return '.';
    };
    $mol_file.prototype.toString = function () {
        return this.path();
    };
    $mol_file.prototype.inspect = function () {
        return this.objectPath();
    };
    $mol_file.prototype.watcher = function () {
        var _this = this;
        return $node.fs.watch(this.path(), { persistent: false }, function (type, name) {
            _this.stat(void 0);
            if (name && !/(^\.|___$)/.test(name)) {
                var file = _this.resolve(name);
                file.stat(void 0);
            }
        });
    };
    $mol_file.prototype.stat = function () {
        var diff = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            diff[_i - 0] = arguments[_i];
        }
        var path = this.path();
        try {
            var stat = $node.fs.statSync(path);
        }
        catch (error) {
            if (error.code === 'ENOENT')
                return null;
            throw error;
        }
        this.parent().watcher();
        return stat;
    };
    $mol_file.prototype.version = function () {
        return this.stat().mtime.getTime().toString(36).toUpperCase();
    };
    $mol_file.prototype.exists = function () {
        var diff = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            diff[_i - 0] = arguments[_i];
        }
        var exists = !!this.stat();
        if (diff[0] === void 0) {
            return exists;
        }
        else {
            if (diff[0] == exists)
                return exists;
            if (diff[0]) {
                this.parent().exists(true);
                $node.fs.mkdirSync(this.path());
            }
            else {
                $node.fs.unlinkSync(this.path());
            }
            this.stat(void 0);
            return diff[0];
        }
    };
    $mol_file.prototype.parent = function () {
        return this.resolve('..');
    };
    $mol_file.prototype.type = function () {
        var stat = this.stat();
        if (stat) {
            if (stat.isFile())
                return 'file';
            if (stat.isDirectory())
                return 'dir';
            if (stat.isBlockDevice())
                return 'blocks';
            if (stat.isCharacterDevice())
                return 'chars';
            if (stat.isSymbolicLink())
                return 'link';
            if (stat.isFIFO())
                return 'fifo';
            if (stat.isSocket())
                return 'socket';
        }
        else {
            return null;
        }
        throw new Error("Unknown file type " + this.path());
    };
    $mol_file.prototype.name = function () {
        return $node.path.basename(this.path());
    };
    $mol_file.prototype.ext = function () {
        var match = /((?:\.\w+)+)$/.exec(this.path());
        return match && match[1].substring(1);
    };
    $mol_file.prototype.content = function () {
        var diff = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            diff[_i - 0] = arguments[_i];
        }
        if (diff[0] === void 0) {
            return this.stat() && $node.fs.readFileSync(this.path());
        }
        this.parent().exists(true);
        $node.fs.writeFileSync(this.path(), diff[0]);
        return diff[0];
    };
    $mol_file.prototype.reader = function () {
        return $node.fs.createReadStream(this.path());
    };
    $mol_file.prototype.writer = function () {
        return $node.fs.createWriteStream(this.path());
    };
    $mol_file.prototype.childs = function () {
        var _this = this;
        this.stat();
        switch (this.type()) {
            case 'dir':
                return $node.fs.readdirSync(this.path())
                    .filter(function (name) { return !/^\.+$/.test(name); })
                    .map(function (name) { return _this.resolve(name); });
        }
        return [];
    };
    $mol_file.prototype.resolve = function (path) {
        return this.Class().relative($node.path.join(this.path(), path));
    };
    $mol_file.prototype.relate = function (base) {
        if (base === void 0) { base = this.Class().relative('.'); }
        return $node.path.relative(base.path(), this.path()).replace(/\\/g, '/');
    };
    $mol_file.prototype.append = function (next) {
        $node.fs.appendFileSync(this.path(), next);
    };
    $mol_file.prototype.find = function (include, exclude) {
        var found = [];
        this.childs().forEach(function (child) {
            if (exclude && child.path().match(exclude))
                return;
            if (!include || child.path().match(include))
                found.push(child);
            if (child.type() === 'dir')
                found = found.concat(child.find(include, exclude));
        });
        return found;
    };
    __decorate([
        $mol_prop()
    ], $mol_file.prototype, "watcher", null);
    __decorate([
        $mol_prop()
    ], $mol_file.prototype, "stat", null);
    __decorate([
        $mol_prop()
    ], $mol_file.prototype, "version", null);
    __decorate([
        $mol_prop()
    ], $mol_file.prototype, "content", null);
    __decorate([
        $mol_prop()
    ], $mol_file.prototype, "childs", null);
    __decorate([
        $mol_prop()
    ], $mol_file, "absolute", null);
    return $mol_file;
}($mol_object));
//file.node.js.map
;
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $mol_server = (function (_super) {
    __extends($mol_server, _super);
    function $mol_server() {
        _super.apply(this, arguments);
    }
    $mol_server.prototype.express = function () {
        var _this = this;
        var express = $node.express();
        this.expressHandlers().forEach(function (plugin) { return express.use(plugin); });
        $node.portastic.find({
            min: this.port(),
            max: this.port() + 1000,
            retrieve: 1
        }).then(function (ports) {
            express.listen(ports[0]);
            console.log(_this.messageStart(ports[0]));
        });
        return express;
    };
    $mol_server.prototype.messageStart = function (port) {
        return this.objectPath() + " started at http://127.0.0.1:" + port + "/";
    };
    $mol_server.prototype.expressHandlers = function () {
        return [].concat.apply([], [
            this.expressCompressor(),
            this.expressBodier(),
            this.expressGenerator(),
            this.expressFiler(),
        ]);
    };
    $mol_server.prototype.expressCompressor = function () {
        return $node.compression();
    };
    $mol_server.prototype.expressBodier = function () {
        return $node['body-parser'].json({
            limit: this.bodyLimit()
        });
    };
    $mol_server.prototype.expressFiler = function () {
        return $node.express.static($node.path.resolve(this.rootPublic()), {
            maxAge: this.cacheTime()
        });
    };
    $mol_server.prototype.expressGenerator = function () {
        return function (req, res, next) { return next(); };
    };
    $mol_server.prototype.bodyLimit = function () {
        return '1mb';
    };
    $mol_server.prototype.cacheTime = function () {
        return 1000 * 60 * 60 * 24 * 365 * 1000;
    };
    $mol_server.prototype.port = function () {
        return 80;
    };
    $mol_server.prototype.rootPublic = function () {
        return '.';
    };
    __decorate([
        $mol_prop()
    ], $mol_server.prototype, "express", null);
    return $mol_server;
}($mol_object));
//server.node.js.map
;
function $mol_const(value) {
    var getter = function () { return value; };
    void (getter['()'] = value);
    return getter;
}
//const.js.map
;
var $mol_graph = (function () {
    function $mol_graph() {
        this.nodes = {};
        this.edgesOut = {};
        this.edgesIn = {};
    }
    $mol_graph.prototype.nodeEnsure = function (id) {
        if (this.nodes.hasOwnProperty(id))
            return;
        this.nodes[id] = null;
    };
    $mol_graph.prototype.linkOut = function (from, to, edge) {
        if (!this.edgesOut[from]) {
            this.edgesOut[from] = {};
            this.nodeEnsure(from);
        }
        this.edgesOut[from][to] = edge;
        this.nodeEnsure(to);
    };
    $mol_graph.prototype.linkIn = function (to, from, edge) {
        if (!this.edgesIn[to]) {
            this.edgesIn[to] = {};
            this.nodeEnsure(to);
        }
        this.edgesIn[to][from] = edge;
        this.nodeEnsure(from);
    };
    $mol_graph.prototype.edgeOut = function (from, to) {
        return this.edgesOut[from] && this.edgesOut[from][to];
    };
    $mol_graph.prototype.edgeIn = function (to, from) {
        return this.edgesIn[to] && this.edgesIn[to][from];
    };
    $mol_graph.prototype.link = function (one, two, edge) {
        this.linkOut(one, two, edge);
        this.linkIn(two, one, edge);
    };
    $mol_graph.prototype.sorted = function (getWeight) {
        var _this = this;
        var pending = Object.keys(this.nodes);
        var visited = [];
        var weights = [];
        var sorted = [];
        var visit = function (id, weight) {
            var index = visited.lastIndexOf(id);
            if (index >= 0) {
                if (index === visited.length - 1)
                    return false;
                if (weight <= weights[index + 1])
                    return false;
            }
            if (weight != null) {
                visited.push(id);
                weights.push(weight);
            }
            var deps = _this.edgesOut[id];
            for (var dep in deps) {
                if (dep === id)
                    continue;
                visit(dep, getWeight(deps[dep]));
            }
            if (sorted.indexOf(id) !== -1)
                return false;
            sorted.push(id);
            return true;
        };
        pending.forEach(function (id) { return visit(id, null); });
        return sorted;
    };
    return $mol_graph;
}());
//graph.js.map
;
function $jin_type(value) {
    var str = {}.toString.apply(value);
    var type = str.substring(8, str.length - 1);
    if (['Window', 'global'].indexOf(type) >= 0)
        type = 'Global';
    return type;
}
//type.js.map
;
var $mol_tree = (function () {
    function $mol_tree(config) {
        this.type = config.type || '';
        if (config.value) {
            var childs = $mol_tree.values(config.value);
            if (config.type || childs.length > 1) {
                this.childs = childs.concat(config.childs || []);
                this.data = config.data || '';
            }
            else {
                this.data = childs[0].data;
                this.childs = config.childs || [];
            }
        }
        else {
            this.data = config.data || '';
            this.childs = config.childs || [];
        }
        this.baseUri = config.baseUri || '';
        this.row = config.row || 0;
        this.col = config.col || 0;
    }
    $mol_tree.values = function (str, baseUri) {
        return str.split('\n').map(function (data, index) { return new $mol_tree({
            data: data,
            baseUri: baseUri,
            row: index + 1
        }); });
    };
    $mol_tree.prototype.clone = function (config) {
        return new $mol_tree({
            type: ('type' in config) ? config.type : this.type,
            data: ('data' in config) ? config.data : this.data,
            childs: ('childs' in config) ? config.childs : this.childs,
            baseUri: ('baseUri' in config) ? config.baseUri : this.baseUri,
            row: ('row' in config) ? config.row : this.row,
            col: ('col' in config) ? config.col : this.col,
            value: config.value
        });
    };
    $mol_tree.fromString = function (str, baseUri) {
        var root = new $mol_tree({ baseUri: baseUri });
        var stack = [root];
        var row = 0;
        var lines = String(str).split(/\n/);
        lines.forEach(function (line) {
            ++row;
            var chunks = /^(\t*)((?:[^\n\t\\ ]+ *)*)(\\[^\n]*)?/.exec(line);
            if (!chunks)
                new Error("Syntax error at " + baseUri + "#" + row + "\n" + line);
            var indent = chunks[1];
            var path = chunks[2];
            var data = chunks[3];
            var deep = indent.length;
            var types = path ? path.split(/ +/) : [];
            if (stack.length < deep)
                throw new Error("Too many tabs at " + baseUri + "#" + row + "\n" + line);
            stack.length = deep + 1;
            var parent = stack[deep];
            types.forEach(function (type) {
                if (!type)
                    return;
                var next = new $mol_tree({
                    type: type,
                    baseUri: baseUri,
                    row: row
                });
                parent.childs.push(next);
                parent = next;
            });
            if (data) {
                var next = new $mol_tree({
                    data: data.substring(1),
                    baseUri: baseUri,
                    row: row
                });
                parent.childs.push(next);
                parent = next;
            }
            stack.push(parent);
        });
        return root;
    };
    $mol_tree.fromJSON = function (json, baseUri) {
        if (baseUri === void 0) { baseUri = ''; }
        var type = $jin_type(json);
        switch (type) {
            case 'Boolean':
            case 'Null':
            case 'Number':
                return new $mol_tree({
                    type: String(json),
                    baseUri: baseUri
                });
            case 'String':
                return new $mol_tree({
                    value: json,
                    baseUri: baseUri
                });
            case 'Array':
                return new $mol_tree({
                    type: "list",
                    childs: json.map(function (json) { return $mol_tree.fromJSON(json, baseUri); })
                });
            case 'Date':
                return new $mol_tree({
                    type: "time",
                    value: json.toISOString(),
                    baseUri: baseUri
                });
            case 'Object':
                var childs = [];
                for (var key in json) {
                    if (json[key] === undefined)
                        continue;
                    if (/^[^\n\t\\ ]+$/.test(key)) {
                        var child = new $mol_tree({
                            type: key,
                            baseUri: baseUri
                        });
                    }
                    else {
                        var child = new $mol_tree({
                            value: key,
                            baseUri: baseUri
                        });
                    }
                    child.childs.push(new $mol_tree({
                        type: ":",
                        childs: [$mol_tree.fromJSON(json[key], baseUri)],
                        baseUri: baseUri
                    }));
                    childs.push(child);
                }
                return new $mol_tree({
                    type: "dict",
                    childs: childs,
                    baseUri: baseUri
                });
        }
        throw new Error("Unsupported type (" + type + ") at " + baseUri);
    };
    Object.defineProperty($mol_tree.prototype, "uri", {
        get: function () {
            return this.baseUri + '#' + this.row + ':' + this.col;
        },
        enumerable: true,
        configurable: true
    });
    $mol_tree.prototype.toString = function (prefix) {
        if (prefix === void 0) { prefix = ''; }
        var output = '';
        if (this.type.length) {
            if (!prefix.length) {
                prefix = "\t";
            }
            output += this.type + " ";
            if (this.childs.length == 1) {
                return output + this.childs[0].toString(prefix);
            }
            output += "\n";
        }
        else if (this.data.length || prefix.length) {
            output += "\\" + this.data + "\n";
        }
        for (var _i = 0, _a = this.childs; _i < _a.length; _i++) {
            var child = _a[_i];
            output += prefix;
            output += child.toString(prefix + "\t");
        }
        return output;
    };
    $mol_tree.prototype.toJSON = function () {
        if (!this.type)
            return this.value;
        if (this.type === '//')
            return undefined;
        if (this.type === 'true')
            return true;
        if (this.type === 'false')
            return false;
        if (this.type === 'null')
            return null;
        if (this.type === 'dict') {
            var obj = {};
            for (var _i = 0, _a = this.childs; _i < _a.length; _i++) {
                var child = _a[_i];
                var key = child.type || child.value;
                if (key === '//')
                    continue;
                var colon = child.select(':').childs[0];
                if (!colon)
                    throw new Error("Required colon after key at " + child.uri);
                var val = colon.childs[0].toJSON();
                if (val !== undefined)
                    obj[key] = val;
            }
            return obj;
        }
        if (this.type === 'list') {
            var res = [];
            this.childs.forEach(function (child) {
                var val = child.toJSON();
                if (val !== undefined)
                    res.push(val);
            });
            return res;
        }
        if (this.type === 'time') {
            return new Date(this.value);
        }
        if (String(Number(this.type)) == this.type.trim())
            return Number(this.type);
        throw new Error("Unknown type (" + this.type + ") at " + this.uri);
    };
    Object.defineProperty($mol_tree.prototype, "value", {
        get: function () {
            var values = [];
            for (var _i = 0, _a = this.childs; _i < _a.length; _i++) {
                var child = _a[_i];
                if (child.type)
                    continue;
                values.push(child.value);
            }
            return this.data + values.join("\n");
        },
        enumerable: true,
        configurable: true
    });
    $mol_tree.prototype.select = function () {
        var path = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            path[_i - 0] = arguments[_i];
        }
        if (typeof path === 'string')
            path = path.split(/ +/);
        var next = [this];
        for (var _a = 0, path_1 = path; _a < path_1.length; _a++) {
            var type = path_1[_a];
            if (!next.length)
                break;
            var prev = next;
            next = [];
            for (var _b = 0, prev_1 = prev; _b < prev_1.length; _b++) {
                var item = prev_1[_b];
                for (var _c = 0, _d = item.childs; _c < _d.length; _c++) {
                    var child = _d[_c];
                    if (child.type == type) {
                        next.push(child);
                    }
                }
            }
        }
        return new $mol_tree({ childs: next });
    };
    $mol_tree.prototype.filter = function (path, value) {
        if (typeof path === 'string')
            path = path.split(/ +/);
        var childs = this.childs.filter(function (item) {
            var found = item.select.apply(item, path);
            if (value == null) {
                return Boolean(found.childs.length);
            }
            else {
                return found.childs.some(function (child) { return child.value == value; });
            }
        });
        return new $mol_tree({ childs: childs });
    };
    return $mol_tree;
}());
//tree.js.map
;
function $mol_viewer_tree2ts(tree) {
    var content = '';
    function error(message, tree) {
        return new Error(message + ": " + tree + " " + tree.baseUri + ":" + tree.row + ":" + tree.col);
    }
    tree.childs.forEach(function (def) {
        if (!def.type || /^-/.test(def.type))
            return;
        if (!/^\$\w+$/.test(def.type))
            throw error('Wrong component name', def);
        var parent = def.childs[0];
        var members = {};
        parent.childs.forEach(function (param) { return addProp(param); });
        function addProp(param) {
            var needKey = false;
            var needSet = false;
            var needReturn = true;
            var needCache = false;
            var isOverride = true;
            var keys = [];
            if (param.type === '>') {
                needCache = true;
                isOverride = false;
                param = param.childs[0];
            }
            if (param.type === '<') {
                needCache = false;
                isOverride = false;
                param = param.childs[0];
            }
            if (!param.type || /^-/.test(param.type))
                return;
            function getValue(value) {
                switch (value.type[0]) {
                    case void 0:
                        return JSON.stringify(value.value);
                    case '-':
                        return null;
                    case '/':
                        var items = [];
                        value.childs.forEach(function (item) {
                            if (item.type === '-')
                                return;
                            var val = getValue(item);
                            if (val)
                                items.push(val);
                        });
                        return '[].concat( ' + items.join(' , ') + ' )';
                    case '$':
                        needCache = true;
                        var overs = [];
                        value.childs.forEach(function (over) {
                            if (/^(-|$)/.test(over.type))
                                return '';
                            var overName = /(.*?)(#?)$/.exec(over.type);
                            var ns = needSet;
                            var v = getValue(over.childs[0]);
                            var args = [];
                            if (overName[2])
                                args.push(' key : any ');
                            if (needSet)
                                args.push(' ...diff : any[] ');
                            overs.push('\t\t\t__.' + overName[1] + ' = (' + args.join(',') + ') => ' + v + '\n');
                            needSet = ns;
                        });
                        return 'new ' + value.type + '().setup( __ => { \n' + overs.join('') + '\t\t} )';
                    case '*':
                        var opts = [];
                        value.childs.forEach(function (opt) {
                            if (/^(-|$)/.test(opt.type))
                                return '';
                            keys.push(opt.type);
                            var ns = needSet;
                            var v = getValue(opt.childs[0]);
                            var arg = needSet ? ' ...diff : any[] ' : '';
                            opts.push('\t\t\t"' + opt.type + '" : (' + arg + ')=> <any> ' + v + ' ,\n');
                            needSet = ns;
                        });
                        if (!isOverride)
                            return '{\n' + opts.join('') + '\t\t}';
                        else
                            return "$" + ("mol_merge_dict( super." + param.type + "() , {\n" + opts.join('') + "\t\t} )");
                    case ':':
                        return '( <any> ' + JSON.stringify(value.childs[0]) + ' )';
                    case '>':
                        needSet = true;
                        if (value.childs.length === 1) {
                            addProp(value);
                            var type = /(.*?)(#?)$/.exec(value.childs[0].type);
                            return 'this.' + type[1] + '( ' + (type[2] ? 'key ,' : '') + ' ...diff )';
                        }
                    case '<':
                        if (value.childs.length === 1) {
                            addProp(value);
                            var type = /(.*?)(#?)$/.exec(value.childs[0].type);
                            return 'this.' + type[1] + '(' + (type[2] ? ' key ' : '') + ')';
                        }
                }
                switch (value.type) {
                    case 'true':
                    case 'false':
                        return value.type;
                    case 'null':
                        return '<any> null';
                }
                if (Number(value.type).toString() == value.type)
                    return value.type;
                throw error('Wrong value', value);
            }
            if (param.childs.length > 1)
                throw error('Too more childs', param);
            param.childs.forEach(function (child) {
                var val = getValue(child);
                var propName = /(.*?)(#?)$/.exec(param.type);
                var args = [];
                if (needKey || propName[2])
                    args.push(' key : any ');
                if (needCache || needSet)
                    args.push(' ...diff : any[] ');
                if (needCache)
                    val = (needReturn ? '( diff[0] !== void 0 ) ? diff[0] : ' : 'if( diff[0] !== void 0 ) return diff[0]\n\t\t') + val;
                if (needReturn)
                    val = 'return ' + val;
                var decl = '\t' + propName[1] + '(' + args.join(',') + ') {\n\t\t' + val + '\n\t}\n\n';
                if (needCache)
                    decl = '\t@ $' + 'mol_prop()\n' + decl;
                decl = source(param).toString().trim().replace(/^/gm, '\t/// ') + '\n' + decl;
                members[propName[1]] = decl;
                if (needKey) {
                    if (isOverride)
                        members[propName[1] + '_keys'] = '\t' + propName[1] + '_keys(){\n\t\treturn <string[]>' + JSON.stringify(keys) + '.concat( super.' + propName[1] + '_keys() || [] )\n\t}\n\n';
                    else
                        members[propName[1] + '_keys'] = '\t' + propName[1] + '_keys(){\n\t\treturn <string[]>' + JSON.stringify(keys) + '\n\t}\n\n';
                }
            });
            function source(root) {
                if (['>', '<'].indexOf(root.type) !== -1) {
                    return root.clone({
                        childs: root.childs.map(function (name) { return name.clone({
                            childs: []
                        }); })
                    });
                }
                return root.clone({ childs: root.childs.map(source) });
            }
            return needSet;
        }
        var body = Object.keys(members).map(function (name) {
            return members[name] || '\t' + name + '() { return <any>null }\n\t}\n';
        }).join('');
        var classes = 'module $ { export class ' + def.type + ' extends ' + parent.type + ' {\n\n' + body + '} }\n';
        content += classes + '\n';
    });
    return content;
}
//tree2ts.js.map
;
function $mol_exec(dir, command) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    console.log(dir + "> " + command + " " + args.join(' '));
    var res = $node.child_process.spawnSync(command, args, { cwd: dir, stdio: 'inherit' });
    if (res.status)
        throw res.error;
    return res;
}
//exec.node.js.map
;
require( 'source-map-support' ).install();

;
var $jin = this.$jin = {}

;
var $jin;
(function ($jin) {
    function concater(funcs) {
        switch (funcs.length) {
            case 0:
                return function (value) { return value; };
            case 1:
                return funcs[0];
            default:
                var mid = Math.ceil(funcs.length / 2);
                var first = $jin.concater(funcs.slice(0, mid));
                var second = $jin.concater(funcs.slice(mid));
                return function (value) {
                    return first(value) + second(value);
                };
        }
    }
    $jin.concater = concater;
})($jin || ($jin = {}));
//jin-concater.js.map
;
var $jin;
(function ($jin) {
    var time;
    (function (time) {
        var base_class = (function () {
            function base_class() {
            }
            base_class.formatter = function (pattern) {
                var _this = this;
                if (this.patterns[pattern])
                    return this.patterns[pattern];
                var tokens = Object.keys(this.patterns)
                    .sort()
                    .reverse()
                    .map(function (token) { return token.replace(/([-+*.\[\]()\^])/g, '\\$1'); });
                var lexer = RegExp('(.*?)(' + tokens.join('|') + '|$)', 'g');
                var funcs = [];
                pattern.replace(lexer, function (str, text, token) {
                    if (text)
                        funcs.push(function () { return text; });
                    if (token)
                        funcs.push(_this.patterns[token]);
                    return str;
                });
                return this.patterns[pattern] = $jin.concater(funcs);
            };
            base_class.prototype.toString = function (pattern) {
                var Base = this.constructor;
                var formatter = Base.formatter(pattern);
                return formatter.call(Base, this);
            };
            base_class.patterns = {};
            return base_class;
        }());
        time.base_class = base_class;
    })(time = $jin.time || ($jin.time = {}));
})($jin || ($jin = {}));
//base.js.map
;
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var $jin;
(function ($jin) {
    var time;
    (function (time) {
        var duration_class = (function (_super) {
            __extends(duration_class, _super);
            function duration_class(config) {
                _super.call(this);
                this._year = config.year && Number(config.year) || 0;
                this._month = config.month && Number(config.month) || 0;
                this._day = config.day && Number(config.day) || 0;
                this._hour = config.hour && Number(config.hour) || 0;
                this._minute = config.minute && Number(config.minute) || 0;
                this._second = config.second && Number(config.second) || 0;
            }
            duration_class.make = function (duration) {
                if (!arguments.length)
                    duration = [];
                var type = $jin_type(duration);
                switch (type) {
                    case 'Number':
                        return new this({ second: duration / 1000 });
                    case 'Array':
                        var dur = duration;
                        return new this({
                            year: dur[0],
                            month: dur[1],
                            day: dur[2],
                            hour: dur[3],
                            minute: dur[4],
                            second: dur[5],
                        });
                    case 'Object':
                        if (duration instanceof this)
                            return duration;
                        return new this(duration);
                    case 'String':
                        if (duration === 'Z') {
                            return new this({});
                        }
                        var parser = /^P(?:([+-]?\d+(?:\.\d+)?)Y)?(?:([+-]?\d+(?:\.\d+)?)M)?(?:([+-]?\d+(?:\.\d+)?)D)?(?:T(?:([+-]?\d+(?:\.\d+)?)h)?(?:([+-]?\d+(?:\.\d+)?)m)?(?:([+-]?\d+(?:\.\d+)?)s)?)?$/i;
                        var found = parser.exec(duration);
                        if (found) {
                            return new this({
                                year: found[1],
                                month: found[2],
                                day: found[3],
                                hour: found[4],
                                minute: found[5],
                                second: found[6],
                            });
                        }
                        var parser = /^[+-](\d\d)(?::?(\d\d))?$/i;
                        var found = parser.exec(duration);
                        if (found) {
                            return new this({
                                hour: found[1],
                                minute: found[2],
                            });
                        }
                        throw new Error('Can not parse time duration (' + duration + ')');
                    default:
                        throw new Error('Wrong type of time duration (' + type + ')');
                }
            };
            Object.defineProperty(duration_class.prototype, "year", {
                get: function () { return this._year; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(duration_class.prototype, "month", {
                get: function () { return this._month; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(duration_class.prototype, "day", {
                get: function () { return this._day; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(duration_class.prototype, "hour", {
                get: function () { return this._hour; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(duration_class.prototype, "minute", {
                get: function () { return this._minute; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(duration_class.prototype, "second", {
                get: function () { return this._second; },
                enumerable: true,
                configurable: true
            });
            duration_class.prototype.summ = function (config) {
                var Duration = this.constructor;
                var duration = Duration.make(config);
                return new Duration({
                    year: this.year + duration.year,
                    month: this.month + duration.month,
                    day: this.day + duration.day,
                    hour: this.hour + duration.hour,
                    minute: this.minute + duration.minute,
                    second: this.second + duration.second,
                });
            };
            duration_class.prototype.sub = function (config) {
                var Duration = this.constructor;
                var duration = Duration.make(config);
                return new Duration({
                    year: this.year - duration.year,
                    month: this.month - duration.month,
                    day: this.day - duration.day,
                    hour: this.hour - duration.hour,
                    minute: this.minute - duration.minute,
                    second: this.second - duration.second,
                });
            };
            duration_class.prototype.valueOf = function () {
                var day = this.year * 365 + this.month * 30.4 + this.day;
                var second = ((day * 24 + this.hour) * 60 + this.minute) * 60 + this.second;
                return second * 1000;
            };
            duration_class.prototype.toJSON = function () { return this.toString(); };
            duration_class.prototype.toString = function (pattern) {
                if (pattern === void 0) { pattern = 'P#Y#M#DT#h#m#s'; }
                return _super.prototype.toString.call(this, pattern);
            };
            duration_class.patterns = {
                '#Y': function (duration) {
                    if (!duration.year)
                        return '';
                    return duration.year + 'Y';
                },
                '#M': function (duration) {
                    if (!duration.month)
                        return '';
                    return duration.month + 'M';
                },
                '#D': function (duration) {
                    if (!duration.day)
                        return '';
                    return duration.day + 'D';
                },
                '#h': function (duration) {
                    if (!duration.hour)
                        return '';
                    return duration.hour + 'H';
                },
                '#m': function (duration) {
                    if (!duration.minute)
                        return '';
                    return duration.minute + 'M';
                },
                '#s': function (duration) {
                    if (!duration.second)
                        return '';
                    return duration.second + 'S';
                },
                '+hh': function (duration) {
                    var hour = duration.hour;
                    var sign = '+';
                    if (hour < 0) {
                        sign = '-';
                        hour = -hour;
                    }
                    return (hour < 10)
                        ? (sign + '0' + hour)
                        : (sign + hour);
                },
                'mm': function (duration) {
                    return (duration.minute < 10)
                        ? ('0' + duration.minute)
                        : String(duration.minute);
                },
            };
            return duration_class;
        }($jin.time.base_class));
        time.duration_class = duration_class;
        time.duration = duration_class.make.bind(duration_class);
    })(time = $jin.time || ($jin.time = {}));
})($jin || ($jin = {}));
//duration.js.map
;
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var $jin;
(function ($jin) {
    var time;
    (function (time) {
        var moment_class = (function (_super) {
            __extends(moment_class, _super);
            function moment_class(config) {
                _super.call(this);
                this._year = config.year && Number(config.year);
                this._month = config.month && Number(config.month);
                this._day = config.day && Number(config.day);
                this._hour = config.hour && Number(config.hour);
                this._minute = config.minute && Number(config.minute);
                this._second = config.second && Number(config.second);
                this._offset = config.offset && this.constructor.duration_class.make(config.offset);
                this._native = null;
            }
            moment_class.make = function (moment) {
                if (!arguments.length)
                    moment = new Date;
                var type = $jin_type(moment);
                switch (type) {
                    case 'Number':
                        moment = new Date(moment);
                    case 'Date':
                        var native = moment;
                        var offset = -native.getTimezoneOffset();
                        return new this({
                            year: native.getFullYear(),
                            month: native.getMonth(),
                            day: native.getDate() - 1,
                            hour: native.getHours(),
                            minute: native.getMinutes(),
                            second: native.getSeconds() + native.getMilliseconds() / 1000,
                            offset: {
                                hour: (offset < 0) ? Math.ceil(offset / 60) : Math.floor(offset / 60),
                                minute: offset % 60
                            }
                        });
                    case 'String':
                        var parsed = /^(?:(\d\d\d\d)(?:-?(\d\d)(?:-?(\d\d))?)?)?(?:[T ](\d\d)(?::?(\d\d)(?::?(\d\d(?:\.\d\d\d)?))?)?(Z|[\+\-]\d\d(?::?(?:\d\d)?)?)?)?$/.exec(moment);
                        if (!parsed)
                            throw new Error('Can not parse time moment (' + moment + ')');
                        return new this({
                            year: parsed[1],
                            month: parsed[2] ? (Number(parsed[2]) - 1) : void 0,
                            day: parsed[3] ? (Number(parsed[3]) - 1) : void 0,
                            hour: parsed[4],
                            minute: parsed[5],
                            second: parsed[6],
                            offset: parsed[7]
                        });
                    case 'Array':
                        var mom = moment;
                        return new this({
                            year: mom[0],
                            month: mom[1],
                            day: mom[2],
                            hour: mom[3],
                            minute: mom[4],
                            second: mom[5],
                            offset: mom[6],
                        });
                    case 'Object':
                        if (moment instanceof this)
                            return moment;
                        return new this(moment);
                    default:
                        throw new Error('Wrong type of time moment (' + type + ')');
                }
            };
            Object.defineProperty(moment_class.prototype, "year", {
                get: function () { return this._year; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(moment_class.prototype, "month", {
                get: function () { return this._month; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(moment_class.prototype, "day", {
                get: function () { return this._day; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(moment_class.prototype, "hour", {
                get: function () { return this._hour; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(moment_class.prototype, "minute", {
                get: function () { return this._minute; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(moment_class.prototype, "second", {
                get: function () { return this._second; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(moment_class.prototype, "offset", {
                get: function () { return this._offset; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(moment_class.prototype, "native", {
                get: function () {
                    if (this._native)
                        return this._native;
                    var utc = this.toOffset('Z');
                    return this._native = new Date(Date.UTC(utc.year || 0, utc.month || 0, (utc.day || 0) + 1, utc.hour || 0, utc.minute || 0, utc.second && Math.ceil(utc.second) || 0, utc.second && (utc.second - Math.ceil(utc.second)) || 0));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(moment_class.prototype, "normal", {
                get: function () {
                    return this.constructor.make(this.native).merge({
                        year: (this._year === void 0) ? null : void 0,
                        month: (this._month === void 0) ? null : void 0,
                        day: (this._day === void 0) ? null : void 0,
                        hour: (this._hour === void 0) ? null : void 0,
                        minute: (this._minute === void 0) ? null : void 0,
                        second: (this._second === void 0) ? null : void 0,
                        offset: (this._offset === void 0) ? null : void 0,
                    });
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(moment_class.prototype, "weekDay", {
                get: function () {
                    return this.native.getDay();
                },
                enumerable: true,
                configurable: true
            });
            moment_class.prototype.merge = function (config) {
                var Moment = this.constructor;
                var moment = Moment.make(config);
                return new Moment({
                    year: (moment.year === void 0)
                        ? this._year
                        : (moment.year === null)
                            ? void 0
                            : moment.year,
                    month: (moment.month === void 0)
                        ? this._month
                        : (moment.month === null)
                            ? void 0
                            : moment.month,
                    day: (moment.day === void 0)
                        ? this._day
                        : (moment.day === null)
                            ? void 0
                            : moment.day,
                    hour: (moment.hour === void 0)
                        ? this._hour
                        : (moment.hour === null)
                            ? void 0
                            : moment.hour,
                    minute: (moment.minute === void 0)
                        ? this._minute
                        : (moment.minute === null)
                            ? void 0
                            : moment.minute,
                    second: (moment.second === void 0)
                        ? this._second
                        : (moment.second === null)
                            ? void 0
                            : moment.second,
                    offset: (moment.offset === void 0)
                        ? this._offset
                        : (moment.offset === null)
                            ? void 0
                            : moment.offset,
                });
            };
            moment_class.prototype.shift = function (config) {
                var Moment = this.constructor;
                var duration = Moment.duration_class.make(config);
                var moment = Moment.make().merge(this);
                var second = moment.second + duration.second;
                var native = new Date(moment.year + duration.year, moment.month + duration.month, moment.day + duration.day + 1, moment.hour + duration.hour, moment.minute + duration.minute, Math.floor(second), (second - Math.floor(second)) * 1000);
                if (isNaN(native.valueOf()))
                    throw new Error('Wrong time');
                return new Moment({
                    year: (this._year === void 0) ? void 0 : native.getFullYear(),
                    month: (this._month === void 0) ? void 0 : native.getMonth(),
                    day: (this._day === void 0) ? void 0 : native.getDate() - 1,
                    hour: (this._hour === void 0) ? void 0 : native.getHours(),
                    minute: (this._minute === void 0) ? void 0 : native.getMinutes(),
                    second: (this._second === void 0) ? void 0 : native.getSeconds() + native.getMilliseconds() / 1000,
                    offset: this.offset,
                });
            };
            moment_class.prototype.sub = function (config) {
                var Moment = this.constructor;
                var moment = Moment.make(config);
                var dur = {
                    year: (moment.year === void 0)
                        ? this.year
                        : (this.year || 0) - moment.year,
                    month: (moment.month === void 0)
                        ? this.month
                        : (this.month || 0) - moment.month,
                    day: (moment.day === void 0)
                        ? this.day
                        : (this.day || 0) - moment.day,
                    hour: (moment.hour === void 0)
                        ? this.hour
                        : (this.hour || 0) - moment.hour,
                    minute: (moment.minute === void 0)
                        ? this.minute
                        : (this.minute || 0) - moment.minute,
                    second: (moment.second === void 0)
                        ? this.second
                        : (this.second || 0) - moment.second,
                };
                return new Moment.duration_class(dur);
            };
            moment_class.prototype.toOffset = function (duration) {
                if (this._offset) {
                    var Moment = this.constructor;
                    return this
                        .shift(Moment.duration_class.make(duration).sub(this._offset))
                        .merge({ offset: duration });
                }
                else {
                    return this.merge({ offset: duration });
                }
            };
            moment_class.prototype.valueOf = function () { return this.native.getTime(); };
            moment_class.prototype.toJSON = function () { return this.toString(); };
            moment_class.prototype.toString = function (pattern) {
                if (pattern === void 0) { pattern = 'YYYY-MM-DDThh:mm:ss.sssZ'; }
                return _super.prototype.toString.call(this, pattern);
            };
            moment_class.duration_class = $jin.time.duration_class;
            moment_class.patterns = {
                'YYYY': function (moment) {
                    if (moment.year == null)
                        return '';
                    return String(moment.year);
                },
                'AD': function (moment) {
                    if (moment.year == null)
                        return '';
                    return String(Math.floor(moment.year / 100) + 1);
                },
                'YY': function (moment) {
                    if (moment.year == null)
                        return '';
                    return String(moment.year % 100);
                },
                'Month': function (moment) {
                    if (moment.month == null)
                        return '';
                    return moment.constructor.monthLong[moment.month];
                },
                'Mon': function (moment) {
                    if (moment.month == null)
                        return '';
                    return moment.constructor.monthShort[moment.month];
                },
                '-MM': function (moment) {
                    if (moment.month == null)
                        return '';
                    return '-' + moment.constructor.patterns['MM'](moment);
                },
                'MM': function (moment) {
                    if (moment.month == null)
                        return '';
                    var month = moment.month + 1;
                    return (month < 10)
                        ? ('0' + month)
                        : ('' + month);
                },
                'M': function (moment) {
                    if (moment.month == null)
                        return '';
                    return String(moment.month + 1);
                },
                'WeekDay': function (moment) {
                    if (moment.weekDay == null)
                        return '';
                    return moment.constructor.weekDayLong[moment.weekDay];
                },
                'WD': function (moment) {
                    if (moment.weekDay == null)
                        return '';
                    return moment.constructor.weekDayShort[moment.weekDay];
                },
                '-DD': function (moment) {
                    if (moment.day == null)
                        return '';
                    return '-' + moment.constructor.patterns['DD'](moment);
                },
                'DD': function (moment) {
                    if (moment.day == null)
                        return '';
                    var day = moment.day + 1;
                    return (day < 10)
                        ? ('0' + day)
                        : String(day);
                },
                'D': function (moment) {
                    if (moment.day == null)
                        return '';
                    return String(moment.day + 1);
                },
                'Thh': function (moment) {
                    if (moment.hour == null)
                        return '';
                    return 'T' + moment.constructor.patterns['hh'](moment);
                },
                'hh': function (moment) {
                    if (moment.hour == null)
                        return '';
                    return (moment.hour < 10)
                        ? ('0' + moment.hour)
                        : String(moment.hour);
                },
                'h': function (moment) {
                    if (moment.hour == null)
                        return '';
                    return String(moment.hour);
                },
                ':mm': function (moment) {
                    if (moment.minute == null)
                        return '';
                    return ':' + moment.constructor.patterns['mm'](moment);
                },
                'mm': function (moment) {
                    if (moment.minute == null)
                        return '';
                    return (moment.minute < 10)
                        ? ('0' + moment.minute)
                        : String(moment.minute);
                },
                'm': function (moment) {
                    if (moment.minute == null)
                        return '';
                    return String(moment.minute);
                },
                ':ss': function (moment) {
                    if (moment.second == null)
                        return '';
                    return ':' + moment.constructor.patterns['ss'](moment);
                },
                'ss': function (moment) {
                    if (moment.second == null)
                        return '';
                    var second = Math.floor(moment.second);
                    return (second < 10)
                        ? ('0' + second)
                        : String(second);
                },
                's': function (moment) {
                    if (moment.second == null)
                        return '';
                    return String(Math.floor(moment.second));
                },
                '.sss': function (moment) {
                    if (moment.second == null)
                        return '';
                    if (moment.second - Math.floor(moment.second) === 0)
                        return '';
                    return '.' + moment.constructor.patterns['sss'](moment);
                },
                'sss': function (moment) {
                    if (moment.second == null)
                        return '';
                    var millisecond = Math.floor((moment.second - Math.floor(moment.second)) * 1000);
                    return (millisecond < 10)
                        ? ('00' + millisecond)
                        : (millisecond < 100)
                            ? ('0' + millisecond)
                            : String(millisecond);
                },
                'Z': function (moment) {
                    var offset = moment.offset;
                    if (!offset)
                        return '';
                    return offset.toString('+hh:mm');
                }
            };
            moment_class.monthLong = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            moment_class.monthShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            moment_class.weekDayLong = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
            moment_class.weekDayShort = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            return moment_class;
        }($jin.time.base_class));
        time.moment_class = moment_class;
        time.moment = moment_class.make.bind(moment_class);
        time.moment['en'] = moment_class.make.bind(moment_class);
        var moment_class_ru = (function (_super) {
            __extends(moment_class_ru, _super);
            function moment_class_ru() {
                _super.apply(this, arguments);
            }
            moment_class_ru.monthLong = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];
            moment_class_ru.monthShort = ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'];
            moment_class_ru.weekDayLong = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];
            moment_class_ru.weekDayShort = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];
            return moment_class_ru;
        }(moment_class));
        time.moment_class_ru = moment_class_ru;
        time.moment['ru'] = moment_class_ru.make.bind(moment_class_ru);
    })(time = $jin.time || ($jin.time = {}));
})($jin || ($jin = {}));
//moment.js.map
;
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $mol_build = (function (_super) {
    __extends($mol_build, _super);
    function $mol_build() {
        _super.apply(this, arguments);
    }
    $mol_build.root = function (path) {
        return new this().setup(function (obj) {
            obj.root = function () { return $mol_file.absolute(path); };
        });
    };
    $mol_build.relative = function (path) {
        return $mol_build.root($mol_file.relative(path).path());
    };
    $mol_build.prototype.server = function () {
        var _this = this;
        return new $mol_build_server().setup(function (obj) {
            obj.build = $mol_const(_this);
        });
    };
    $mol_build.prototype.root = function () {
        return $mol_file.relative('.');
    };
    $mol_build.prototype.mods = function (_a) {
        var path = _a.path, exclude = _a.exclude;
        return $mol_file.absolute(path).childs()
            .filter(function (child) {
            var name = child.name();
            if (!/^[a-z]/.test(name))
                return false;
            if (exclude && RegExp('[.=](' + exclude.join('|') + ')[.]', 'i').test(name))
                return false;
            return true;
        });
    };
    $mol_build.prototype.modsRecursive = function (_a) {
        var path = _a.path, exclude = _a.exclude;
        var mod = $mol_file.absolute(path);
        switch (mod.type()) {
            case 'file':
                return [mod];
            case 'dir':
                var mods = [mod];
                for (var _i = 0, _b = this.mods({ path: path, exclude: exclude }); _i < _b.length; _i++) {
                    var m = _b[_i];
                    if (m.type() !== 'dir')
                        continue;
                    for (var _c = 0, _d = this.modsRecursive({ path: m.path(), exclude: exclude }); _c < _d.length; _c++) {
                        var dep = _d[_c];
                        if (mods.indexOf(dep) !== -1)
                            continue;
                        mods.push(dep);
                    }
                }
                return mods;
        }
    };
    $mol_build.prototype.sources = function (_a) {
        var path = _a.path, exclude = _a.exclude;
        var mod = $mol_file.absolute(path);
        switch (mod.type()) {
            case 'file': return [mod];
            case 'dir':
                return this.mods({ path: path, exclude: exclude }).filter(function (mod) { return mod.type() === 'file'; });
            default: return [];
        }
    };
    $mol_build.prototype.sourcesSorted = function (_a) {
        var _this = this;
        var path = _a.path, exclude = _a.exclude;
        var mod = $mol_file.absolute(path);
        var graph = new $mol_graph();
        var sources = this.sources({ path: path, exclude: exclude });
        for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
            var src = sources_1[_i];
            graph.nodeEnsure(src.relate(this.root()));
        }
        for (var _b = 0, sources_2 = sources; _b < sources_2.length; _b++) {
            var src = sources_2[_b];
            var deps = this.srcDeps(src.path());
            for (var p in deps) {
                var names;
                if (p[0] === '/')
                    names = p.substring(1).split('/');
                else
                    names = mod.resolve(p).relate(this.root()).split('/');
                var files = [this.root()];
                for (var _c = 0, names_1 = names; _c < names_1.length; _c++) {
                    var name_1 = names_1[_c];
                    var nextFiles = [];
                    for (var _d = 0, files_1 = files; _d < files_1.length; _d++) {
                        var file = files_1[_d];
                        var validName = new RegExp("^(" + file.name() + ")?" + name_1 + "(?![a-z0-9])", 'i');
                        for (var _e = 0, _f = this.mods({ path: file.path(), exclude: exclude }); _e < _f.length; _e++) {
                            var child = _f[_e];
                            if (!child.name().match(validName))
                                continue;
                            nextFiles.push(child);
                        }
                    }
                    if (nextFiles.length === 0)
                        break;
                    files = nextFiles;
                }
                for (var _g = 0, files_2 = files; _g < files_2.length; _g++) {
                    var file = files_2[_g];
                    if (file === this.root())
                        continue;
                    if (file.relate(this.root()) in graph.nodes) {
                        graph.link(src.relate(this.root()), file.relate(this.root()), { priority: deps[p] });
                    }
                }
            }
        }
        var next = graph.sorted(function (edge) { return edge.priority; }).map(function (name) { return _this.root().resolve(name); });
        return next;
    };
    $mol_build.prototype.sourcesAll = function (_a) {
        var _this = this;
        var path = _a.path, exclude = _a.exclude;
        var sortedPaths = this.graph({ path: path, exclude: exclude }).sorted(function (edge) { return edge.priority; });
        return [].concat.apply([], sortedPaths.map(function (path) { return _this.sourcesSorted({ path: _this.root().resolve(path).path(), exclude: exclude }); }));
    };
    $mol_build.prototype.tsHost = function () {
        var _this = this;
        var options = {
            experimentalDecorators: true,
            noEmitOnError: false,
            noImplicitAny: true,
            target: $node.typescript.ScriptTarget.ES5,
            removeComments: true,
            sourceMap: true,
            inlineSources: true,
            allowJS: true,
        };
        var host = {
            getScriptVersion: function (path) { return $mol_file.absolute(path).version(); },
            getScriptSnapshot: function (path) { return $mol_file.absolute(path).content().toString(); },
            getCurrentDirectory: function () { return _this.root().path(); },
            getCompilationSettings: function () { return options; },
            useCaseSensitiveFileNames: function () { return false; },
            getCanonicalFileName: function (path) { return path.toLowerCase(); },
            getDefaultLibFileName: function (options) { return $node.typescript.getDefaultLibFilePath(options); },
            getCommonSourceDirectory: function () { return _this.root().path(); },
            getNewLine: function () { return '\n'; },
            getSourceFile: function (path, target, fail) {
                var content = $mol_file.absolute(path).content().toString();
                return $node.typescript.createSourceFile(path, content, target);
            },
            fileExists: function (path) {
                return $mol_file.absolute(path).exists();
            },
            writeFile: function (path, content) {
                $mol_file.absolute(path).content(void 0, content);
            },
        };
        return host;
    };
    $mol_build.prototype.sourcesJS = function (_a) {
        var path = _a.path, exclude = _a.exclude;
        var sources = this.sourcesAll({ path: path, exclude: exclude })
            .filter(function (src) { return /(jam\.js|tsx?|view\.tree)$/.test(src.ext()); });
        if (!sources.length)
            return [];
        sources = sources.map(function (src) {
            if (!/(view\.tree)$/.test(src.ext()))
                return src;
            var target = src.parent().resolve("-/view.tree.ts/" + src.name() + ".ts");
            var tree = $mol_tree.fromString(String(src.content()), src.path());
            target.content($mol_viewer_tree2ts(tree));
            return target;
        });
        var sourcesTS = [];
        sources = sources.map(function (src) {
            if (!/tsx?$/.test(src.ext()))
                return src;
            sourcesTS.push(src);
            return src.parent().resolve(src.name().replace(/\.tsx?$/, '.js'));
        });
        if (sourcesTS.length) {
            var host = this.tsHost();
            var options = host.getCompilationSettings();
            var program = $node.typescript.createProgram(sourcesTS.map(function (src) { return src.path(); }), options, host);
            var result = program.emit();
            var errors = $node.typescript.getPreEmitDiagnostics(program).concat(result.diagnostics);
            var logs = errors.map(function (error) {
                var message = $node.typescript.flattenDiagnosticMessageText(error.messageText, '\n');
                if (!error.file)
                    return message;
                var pos = error.file.getLineAndCharacterOfPosition(error.start);
                return error.file.fileName + ':' + (pos.line + 1) + ':' + pos.character + '\n ' + message;
            });
            if (logs.length)
                throw new Error('\n' + logs.join('\n'));
        }
        return sources;
    };
    $mol_build.prototype.sourcesCSS = function (_a) {
        var path = _a.path, exclude = _a.exclude;
        return this.sourcesAll({ path: path, exclude: exclude }).filter(function (src) { return /(css)$/.test(src.ext()); });
    };
    $mol_build.prototype.srcDeps = function (path) {
        var src = $mol_file.absolute(path);
        var ext = src.ext();
        var dependencies = null;
        while (!dependencies) {
            dependencies = this.Class().dependors[ext];
            if (dependencies)
                break;
            var extShort = ext.replace(/^\w+\./, '');
            if (ext === extShort)
                break;
            ext = extShort;
        }
        return dependencies ? dependencies(src) : {};
    };
    $mol_build.prototype.modDeps = function (_a) {
        var path = _a.path, exclude = _a.exclude;
        var depends = {};
        for (var _i = 0, _b = this.sources({ path: path, exclude: exclude }); _i < _b.length; _i++) {
            var src = _b[_i];
            $mol_build_depsMerge(depends, this.srcDeps(src.path()));
        }
        return depends;
    };
    $mol_build.prototype.dependencies = function (_a) {
        var path = _a.path, exclude = _a.exclude;
        var mod = $mol_file.absolute(path);
        switch (mod.type()) {
            case 'file': return this.srcDeps(path);
            case 'dir': return this.modDeps({ path: path, exclude: exclude });
        }
    };
    $mol_build.prototype.packEnsure = function (name) {
        var pack = this.root().resolve(name);
        if (pack.exists())
            return;
        var mapping = this.packMapping();
        for (var _i = 0, _a = mapping.select('pack', name, 'git').childs; _i < _a.length; _i++) {
            var repo = _a[_i];
            $mol_exec(this.root().path(), 'git', 'clone', repo.value, name);
            pack.stat(void 0);
            return true;
        }
        throw new Error("Package \"" + name + "\" not found");
    };
    $mol_build.prototype.modEnsure = function (path) {
        var file = $mol_file.absolute(path);
        var sub = file.relate(this.root());
        var name = sub.replace(/\/.*$/, '');
        return this.packEnsure(name);
    };
    $mol_build.prototype.packMapping = function () {
        return $mol_tree.fromString($mol_file.relative('.pms.tree').content());
    };
    $mol_build.prototype.graph = function (_a) {
        var _this = this;
        var path = _a.path, exclude = _a.exclude;
        var graph = new $mol_graph();
        var added = {};
        var addMod = function (mod) {
            if (added[mod.path()])
                return;
            added[mod.path()] = true;
            graph.nodes[mod.relate(_this.root())] = null;
            var deps = _this.dependencies({ path: mod.path(), exclude: exclude });
            for (var p in deps) {
                var dep = (p[0] === '/') ? _this.root().resolve(p) : mod.resolve(p);
                _this.modEnsure(dep.path());
                while (!dep.exists())
                    dep = dep.parent();
                if (dep.type() === 'file')
                    dep = dep.parent();
                if (mod === dep)
                    continue;
                if (dep === _this.root())
                    continue;
                graph.link(mod.relate(_this.root()), dep.relate(_this.root()), { priority: deps[p] });
                addMod(dep);
            }
        };
        this.modEnsure(path);
        this.modsRecursive({ path: path, exclude: exclude }).forEach(function (mod) { return addMod(mod); });
        return graph;
    };
    $mol_build.prototype.bundle = function (_a) {
        var _this = this;
        var path = _a.path, bundle = _a.bundle;
        bundle = bundle && bundle.replace(/\.map$/, '');
        var envsDef = ['web', 'node'];
        var envs = envsDef.slice();
        var stages = ['test', 'dev'];
        if (bundle) {
            var _b = /^(.*?)(?:\.(test\.js|js|css|deps\.json))?$/.exec(bundle), bundle = _b[0], tags = _b[1], type = _b[2];
            tags.split('.').forEach(function (tag) {
                if (envs.indexOf(tag) !== -1)
                    envs = [tag];
            });
        }
        var res = [];
        envs.forEach(function (env) {
            var exclude = envsDef.filter(function (e) { return e !== env; }).concat(stages);
            if (!type || type === 'deps.json') {
                res = res.concat(_this.bundleDepsJSON({ path: path, exclude: exclude, bundle: env }));
            }
            if (!type || type === 'css') {
                res = res.concat(_this.bundleCSS({ path: path, exclude: exclude, bundle: env }));
            }
            if (!type || type === 'js') {
                res = res.concat(_this.bundleJS({ path: path, exclude: exclude, bundle: env }));
            }
            if (!type || type === 'test.js') {
                res = res.concat(_this.bundleTestJS({ path: path, exclude: exclude, bundle: env }));
            }
        });
        return res;
    };
    $mol_build.prototype.logBundle = function (target) {
        var time = $jin.time.moment().toString('hh:mm');
        var path = target.relate(this.root());
        console.log(time + " Builded " + path);
    };
    $mol_build.prototype.bundleJS = function (_a) {
        var path = _a.path, exclude = _a.exclude, bundle = _a.bundle;
        var pack = $mol_file.absolute(path);
        var target = pack.resolve("-/" + bundle + ".js");
        var targetMap = pack.resolve("-/" + bundle + ".js.map");
        var sources = this.sourcesJS({ path: path, exclude: exclude });
        if (!sources.length)
            return [];
        var concater = new $node['concat-with-sourcemaps'](true, target.name(), '\n;\n');
        sources.forEach(function (src) {
            var content = src.content().toString().replace(/^\/\/#\ssourceMappingURL=/mg, '//');
            var srcMap = src.parent().resolve(src.name() + '.map').content();
            if (srcMap) {
                var map = JSON.parse(srcMap);
                map.sourceRoot = src.parent().relate(target.parent());
            }
            concater.add(src.relate(target.parent()), content, map && JSON.stringify(map));
        });
        target.content(concater.content + '\n//# sourceMappingURL=' + targetMap.relate(target.parent()));
        targetMap.content(concater.sourceMap);
        this.logBundle(target);
        return [target, targetMap];
    };
    $mol_build.prototype.bundleTestJS = function (_a) {
        var path = _a.path, exclude = _a.exclude, bundle = _a.bundle;
        var pack = $mol_file.absolute(path);
        var target = pack.resolve("-/" + bundle + ".test.js");
        var targetMap = pack.resolve("-/" + bundle + ".test.js.map");
        var sources = this.sourcesJS({ path: path, exclude: exclude.filter(function (ex) { return ex !== 'test' && ex !== 'dev'; }) });
        if (bundle !== 'node') {
            var sourcesNoTest = this.sourcesJS({ path: path, exclude: exclude });
            sources = sources.filter(function (src) { return sourcesNoTest.indexOf(src) === -1; });
        }
        if (!sources.length)
            return [];
        var concater = new $node['concat-with-sourcemaps'](true, target.name(), '\n;\n');
        sources.forEach(function (src) {
            var content = src.content().toString().replace(/^\/\/#\ssourceMappingURL=/mg, '//');
            var srcMap = src.parent().resolve(src.name() + '.map').content();
            if (srcMap) {
                var map = JSON.parse(srcMap);
                map.sourceRoot = src.parent().relate(target.parent());
            }
            concater.add(src.relate(target.parent()), content, map && JSON.stringify(map));
        });
        target.content(concater.content + '\n//# sourceMappingURL=' + targetMap.relate(target.parent()));
        targetMap.content(concater.sourceMap);
        this.logBundle(target);
        return [target, targetMap];
    };
    $mol_build.prototype.bundleCSS = function (_a) {
        var path = _a.path, exclude = _a.exclude, bundle = _a.bundle;
        var pack = $mol_file.absolute(path);
        var sources = this.sourcesCSS({ path: path, exclude: exclude });
        if (!sources.length)
            return [];
        var target = pack.resolve("-/" + bundle + ".css");
        var targetMap = pack.resolve("-/" + bundle + ".css.map");
        var root = null;
        sources.forEach(function (src) {
            var root2 = $node.postcss.parse(src.content(), { from: src.path() });
            root = root ? root.append(root2) : root2;
        });
        var cssnext = $node['postcss-cssnext'];
        var processor = $node.postcss(cssnext(null, {
            features: {
                customProperties: {
                    preserve: true
                }
            }
        }).plugins);
        var result = processor.process(root, { to: target.relate(), map: { inline: false } });
        target.content(result.css);
        targetMap.content(JSON.stringify(result.map, null, '\t'));
        this.logBundle(target);
        return [target, targetMap];
    };
    $mol_build.prototype.bundleDepsJSON = function (_a) {
        var _this = this;
        var path = _a.path, exclude = _a.exclude, bundle = _a.bundle;
        var pack = $mol_file.absolute(path);
        var list = this.sourcesAll({ path: path, exclude: exclude });
        if (!list.length)
            return [];
        var graph = this.graph({ path: path, exclude: exclude });
        var deps = {};
        for (var dep in graph.nodes) {
            deps[dep] = this.dependencies({ path: this.root().resolve(dep).path(), exclude: exclude });
        }
        var data = {
            files: list.map(function (src) { return src.relate(_this.root()); }),
            edgesIn: graph.edgesIn,
            edgesOut: graph.edgesOut,
            deps: deps
        };
        var target = pack.resolve("-/" + bundle + ".deps.json");
        target.content(JSON.stringify(data));
        this.logBundle(target);
        return [target];
    };
    $mol_build.dependors = {};
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "server", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "mods", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "modsRecursive", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "sources", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "sourcesSorted", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "sourcesAll", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "tsHost", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "sourcesJS", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "sourcesCSS", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "srcDeps", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "modDeps", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "dependencies", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "packEnsure", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "packMapping", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "graph", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "bundle", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "bundleJS", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "bundleTestJS", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "bundleCSS", null);
    __decorate([
        $mol_prop()
    ], $mol_build.prototype, "bundleDepsJSON", null);
    __decorate([
        $mol_prop()
    ], $mol_build, "root", null);
    return $mol_build;
}($mol_object));
function $mol_build_depsMerge(target, source) {
    for (var path in source) {
        if (target[path] >= source[path])
            continue;
        target[path] = source[path];
    }
    return target;
}
$mol_build.dependors['ts'] = $mol_build.dependors['tsx'] = $mol_build.dependors['jam.js'] = function (source) {
    var depends = {};
    var lines = String(source.content())
        .replace(/\/\*[^]*?\*\//g, '')
        .replace(/\/\/.*$/gm, '')
        .split('\n');
    lines.forEach(function (line) {
        var indent = /^([\s\t]*)/.exec(line);
        var priority = -indent[0].replace(/\t/g, '    ').length / 4;
        line.replace(/\$([a-z][a-z0-9]+(?:[._][a-z0-9]+)*)/ig, function (str, name) {
            $mol_build_depsMerge(depends, (_a = {}, _a['/' + name.replace(/[._-]/g, '/')] = priority, _a));
            return str;
            var _a;
        });
    });
    return depends;
};
$mol_build.dependors['view.ts'] = function (source) {
    var treeName = source.name().replace(/ts$/, 'tree');
    var depends = (_a = {}, _a[treeName] = 0, _a);
    $mol_build_depsMerge(depends, $mol_build.dependors['ts'](source));
    return depends;
    var _a;
};
$mol_build.dependors['css'] = $mol_build.dependors['view.css'] = function (source) {
    var depends = {};
    var lines = String(source.content())
        .replace(/\/\*[^]*?\*\//g, '')
        .replace(/\/\/.*$/gm, '')
        .split('\n');
    lines.forEach(function (line) {
        var indent = /^([\s\t]*)/.exec(line);
        var priority = -indent[0].replace(/\t/g, '    ').length / 4;
        line.replace(/(?:--|[\[\.#])([a-z][a-z0-9]+(?:[-_][a-z0-9]+)+)/ig, function (str, name) {
            $mol_build_depsMerge(depends, (_a = {}, _a['/' + name.replace(/[._-]/g, '/')] = priority, _a));
            return str;
            var _a;
        });
    });
    return depends;
};
$mol_build.dependors['view.tree'] = function (source) {
    var depends = { '/mol/merge/dict': 3 };
    var lines = String(source.content())
        .split('\n');
    lines.forEach(function (line) {
        var indent = /^([\s\t]*)/.exec(line);
        var priority = -indent[0].replace(/\t/g, '    ').length / 4;
        line.replace(/\$([a-z][a-z0-9]+(?:[-_][a-z0-9]+)*)/ig, function (str, name) {
            $mol_build_depsMerge(depends, (_a = {}, _a['/' + name.replace(/[._-]/g, '/')] = priority, _a));
            return str;
            var _a;
        });
    });
    return depends;
};
//build.node.js.map
;
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var $mol_build_server = (function (_super) {
    __extends($mol_build_server, _super);
    function $mol_build_server() {
        _super.apply(this, arguments);
    }
    $mol_build_server.prototype.expressGenerator = function () {
        var _this = this;
        return function (req, res, next) {
            try {
                return _this.generator(req.url) || next();
            }
            catch (error) {
                $mol_atom_restore(error);
                if (req.url.match(/\.js$/)) {
                    console.error(error);
                    res.send("console.error( " + JSON.stringify(error.message) + " )").end();
                }
                else {
                    throw error;
                }
            }
        };
    };
    $mol_build_server.prototype.build = function () {
        return null;
    };
    $mol_build_server.prototype.generator = function (path) {
        var matched = path.match(/^((?:\/\w+)+)\/-\/(\w+(?:.\w+)+)$/);
        if (!matched)
            return null;
        var build = this.build();
        var path = matched[0], path = matched[1], bundle = matched[2];
        path = build.root().resolve(path).path();
        build.bundle({ path: path, bundle: bundle });
        return null;
    };
    $mol_build_server.prototype.port = function () {
        return 8080;
    };
    __decorate([
        $mol_prop()
    ], $mol_build_server.prototype, "generator", null);
    return $mol_build_server;
}($mol_server));
//server.node.js.map
;
function $mol_build_start(paths) {
    var build = $mol_build.relative('.');
    if (paths.length > 0) {
        process.argv.slice(2).forEach(function (path) {
            path = build.root().resolve(path).path();
            build.bundle({ path: path });
        });
    }
    else {
        build.server().express();
    }
}
$mol_build_start(process.argv.slice(2));
//start.node.js.map
//# sourceMappingURL=node.js.map