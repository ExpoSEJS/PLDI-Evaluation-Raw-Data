/* global describe, it */
'use strict';
var path = require('path')
  , basename = path.basename(__filename, '.js')
  , util = require('util')
  , assert = require('assert')
  , datamodel = require('../')
  ;


var shareopt = {
};


describe('datamodel', function () {

  it('01 - declare', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill('(a)');
    })
    .apply(function(err, result) {
      assert.equal(result.a, '(a)');
      done();
    });
  });

  it('02 - append', function (done) {
    datamodel()
    .append('b', function(input, fill) {
      fill('(b)');
    })
    .apply(function(err, result) {
      assert.equal(result.b, '(b)');
      done();
    });
  });

  it('02bis - prepend', function (done) {
    datamodel()
    .prepend('b', function(input, fill) {
      fill('(b)');
    })
    .apply(function(err, result) {
      assert.equal(result.b, '(b)');
      done();
    });
  });

  it('03 - complete', function (done) {
    datamodel()
    .complete('b', function(input, fill) {
      fill('(b)');
    })
    .apply(function(err, result) {
      assert.equal(result.b, '(b)');
      done();
    });
  });

  it('04 - declare & append', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill('(a)');
    })
    .append('b', function(input, fill) {
      fill('(' + this.a + ' * b)');
    })
    .apply(function(err, result) {
      assert.equal(result.a, '(a)');
      assert.equal(result.b, '((a) * b)');
      done();
    });
  });

  it('04bis - declare & prepend', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill('(a)');
    })
    .prepend('b', function(input, fill) {
      fill('(' + this.a + ' * b)');
    })
    .apply(function(err, result) {
      assert.equal(result.a, '(a)');
      assert.equal(result.b, '((a) * b)');
      done();
    });
  });


  it('05 - declare & complete', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill('(a)');
    })
    .complete('b', function(input, fill) {
      fill('(' + this.a + ' * b)');
    })
    .apply(function(err, result) {
      assert.equal(result.a, '(a)');
      assert.equal(result.b, '((a) * b)');
      done();
    });
  });

  it('06 - append & complete', function (done) {
    datamodel()
    .append('a', function(input, fill) {
      fill('(a)');
    })
    .complete('b', function(input, fill) {
      fill('(' + this.a + ' * b)');
    })
    .apply(function(err, result) {
      assert.equal(result.a, '(a)');
      assert.equal(result.b, '((a) * b)');
      done();
    });
  });

  it('06bis - prepend & complete', function (done) {
    datamodel()
    .prepend('a', function(input, fill) {
      fill('(a)');
    })
    .complete('b', function(input, fill) {
      fill('(' + this.a + ' * b)');
    })
    .apply(function(err, result) {
      assert.equal(result.a, '(a)');
      assert.equal(result.b, '((a) * b)');
      done();
    });
  });

  it('07 - declare & append & complete', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill('(a)');
    })
    .append('b', function(input, fill) {
      fill('(' + this.a + ' * b)');
    })
    .complete('c', function(input, fill) {
      fill('(' + this.a + ' * ' + this.b + ' * c)');
    })
    .apply(function(err, result) {
      assert.equal(result.a, '(a)');
      assert.equal(result.b, '((a) * b)');
      assert.equal(result.c, '((a) * ((a) * b) * c)');
      done();
    });
  });

  it('07bis - declare & prepend & complete', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill('(a)');
    })
    .prepend('b', function(input, fill) {
      fill('(' + this.a + ' * b)');
    })
    .complete('c', function(input, fill) {
      fill('(' + this.a + ' * ' + this.b + ' * c)');
    })
    .apply(function(err, result) {
      assert.equal(result.a, '(a)');
      assert.equal(result.b, '((a) * b)');
      assert.equal(result.c, '((a) * ((a) * b) * c)');
      done();
    });
  });

  it('08 - declare & append & complete with input', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill('(a)' + input);
    })
    .append('b', function(input, fill) {
      fill('(' + this.a + ' * b)' + input);
    })
    .complete('c', function(input, fill) {
      fill('(' + this.a + ' * ' + this.b + ' * c)' + input);
    })
    .apply('^2', function(err, result) {
      assert.equal(result.a, '(a)^2');
      assert.equal(result.b, '((a)^2 * b)^2');
      assert.equal(result.c, '((a)^2 * ((a)^2 * b)^2 * c)^2');
      done();
    });
  });

  it('08bis - declare & prepend & complete with input', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill('(a)' + input);
    })
    .prepend('b', function(input, fill) {
      fill('(' + this.a + ' * b)' + input);
    })
    .complete('c', function(input, fill) {
      fill('(' + this.a + ' * ' + this.b + ' * c)' + input);
    })
    .apply('^2', function(err, result) {
      assert.equal(result.a, '(a)^2');
      assert.equal(result.b, '((a)^2 * b)^2');
      assert.equal(result.c, '((a)^2 * ((a)^2 * b)^2 * c)^2');
      done();
    });
  });


  it('09 - declare & append & complete with errors', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill(new Error('a!'));
    })
    .append('b', function(input, fill) {
      fill('(' + this.a + ' * b)');
    })
    .complete('c', function(input, fill) {
      fill('(' + this.a + ' * ' + this.b + ' * c)');
    })
    .apply(function(err, result) {
        assert.equal(err.message.indexOf("[Datamodel.a") === 0, 1);
        done();
    });
  });

  it('09p - declare & append & complete with errors', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill(new Error('a!'));
    })
    .append('b', function(input, fill) {
      fill('(' + this.a + ' * b)');
    })
    .complete('c', function(input, fill) {
      fill('(' + this.a + ' * ' + this.b + ' * c)');
    })
    .apply()
    .catch(function(err) {
        assert.equal(err.message.indexOf("[Datamodel.a") === 0, 1);
        done();
    })
    .then(function(res) {
        assert(false);
        done();
    })
    ;
  });


  it('09bis - declare & prepend & complete with errors', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill(new Error('a!'));
    })
    .prepend('b', function(input, fill) {
      fill('(' + this.a + ' * b)');
    })
    .complete('c', function(input, fill) {
      fill('(' + this.a + ' * ' + this.b + ' * c)');
    })
    .apply(function(err, result) {
        assert.equal(err.message.indexOf("[Datamodel.a") === 0, 1);
        done();
    });
  });

  it('10 - declare & append & complete & transform', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill('(a)');
    })
    .append('b', function(input, fill) {
      fill('(' + this.a + ' * b)');
    })
    .complete('c', function(input, fill) {
      fill('(' + this.a + ' * ' + this.b + ' * c)');
    })
    .transform(function(input, fill) {
      fill(
        {
          a: this.a.replace(/\*/g, '+'),
          b: this.b.replace(/\*/g, '+'),
          c: this.c.replace(/\*/g, '+')
        }
      );
    })
    .apply(function(err, result) {
      assert.equal(result.a, '(a)');
      assert.equal(result.b, '((a) + b)');
      assert.equal(result.c, '((a) + ((a) + b) + c)');
      done();
    });

  });

  it('10bis - declare & prepend & complete & transform', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill('(a)');
    })
    .prepend('b', function(input, fill) {
      fill('(' + this.a + ' * b)');
    })
    .complete('c', function(input, fill) {
      fill('(' + this.a + ' * ' + this.b + ' * c)');
    })
    .transform(function(input, fill) {
      fill(
        {
          a: this.a.replace(/\*/g, '+'),
          b: this.b.replace(/\*/g, '+'),
          c: this.c.replace(/\*/g, '+')
        }
      );
    })
    .apply(function(err, result) {
      assert.equal(result.a, '(a)');
      assert.equal(result.b, '((a) + b)');
      assert.equal(result.c, '((a) + ((a) + b) + c)');
      done();
    });
  });

  it('11 - declare & append & complete & send', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill('(a)');
    })
    .append('b', function(input, fill) {
      fill('(' + this.a + input + 'b)');
    })
    .complete('c', function(input, fill) {
      fill('(' + this.a + input + this.b + input + 'c)');
    })
    .send(function(output, next) {
      next(output + this.c)
    })
    .apply(' + ', ' ----> ', function(r) {
      assert.equal(r, ' ----> ((a) + ((a) + b) + c)');
      done();
    });
  });

  it('11bis - declare & prepend & complete & send', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill('(a)');
    })
    .prepend('b', function(input, fill) {
      fill('(' + this.a + input + 'b)');
    })
    .complete('c', function(input, fill) {
      fill('(' + this.a + input + this.b + input + 'c)');
    })
    .send(function(output, next) {
      next(output + this.c)
    })
    .apply(' + ', ' ----> ', function(r) {
      assert.equal(r, ' ----> ((a) + ((a) + b) + c)');
      done();
    });

  });

  it('12 - declare', function (done) {
    var m = datamodel()
    .declare('a', function(input, fill) {
      fill('(a)');
    });

    m.apply(function(err, res1) {
      assert.equal(res1.a, '(a)');
      m.apply(function(err, res2) {
        assert.equal(res2.a, '(a)');
        done();
      });
    });
  });

  it('13 - muticall', function (done) {
    var m = datamodel()
    .declare('a', function(input, fill) {
      fill('(a)');
      fill('(b)');
    });

    m.apply(function(err, res1) {
      assert.equal(res1.a, '(a)');
      m.apply(function(err, res2) {
        assert.equal(res2.a, '(a)');
        done();
      });
    });
  });

  it('14 - declare & append & complete & transform & send', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill('(a)');
    })
    .append('b', function(input, fill) {
      fill('(' + this.a + input + 'b)');
    })
    .complete('c', function(input, fill) {
      fill('(' + this.a + input + this.b + input + 'c)');
    })
    .transform(function(input, fill) {
      fill(
        {
          a: this.a.replace(/\(/g, '[').replace(/\)/g, ']'),
          b: this.b.replace(/\(/g, '[').replace(/\)/g, ']'),
          c: this.c.replace(/\(/g, '[').replace(/\)/g, ']')
        }
      );
    })
    .send(function(output, next) {
      next(output + this.c)
    })
    .apply(' - ', ' ----> ', function(r) {
      assert.equal(r, ' ----> [[a] - [[a] - b] - c]');
      done();
    });
  });

  it('14bis - declare & prepend & complete & transform & send', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill('(a)');
    })
    .prepend('b', function(input, fill) {
      fill('(' + this.a + input + 'b)');
    })
    .complete('c', function(input, fill) {
      fill('(' + this.a + input + this.b + input + 'c)');
    })
    .transform(function(input, fill) {
      fill(
        {
          a: this.a.replace(/\(/g, '[').replace(/\)/g, ']'),
          b: this.b.replace(/\(/g, '[').replace(/\)/g, ']'),
          c: this.c.replace(/\(/g, '[').replace(/\)/g, ']')
        }
      );
    })
    .send(function(output, next) {
      next(output + this.c)
    })
    .apply(' - ', ' ----> ', function(r) {
      assert.equal(r, ' ----> [[a] - [[a] - b] - c]');
      done();
    });
  });

  it('15 - module', function (done) {
    var m = require('./assets/obj.js')
    m('$', 'out', function(err, res) {
      assert.equal(res.a, '$A');
      assert.equal(res['b.1'], '$B1');
      assert.equal(res['b.2'], '$B2');
      assert.equal(res['b.3'], '$B3');
      assert.equal(res.c, '$C');
      done();
    });
  });
  it('15p - module', function (done) {
    var m = require('./assets/obj.js')
    m('$', 'out').then(function(res) {
        assert.equal(res.a, '$A');
        assert.equal(res['b.1'], '$B1');
        assert.equal(res['b.2'], '$B2');
        assert.equal(res['b.3'], '$B3');
        assert.equal(res.c, '$C');
        done();
    }).catch(function(e) {
        assert(false);
        done();
    });
  });


  it('16 - prepend & append', function (done) {
    datamodel()
    .prepend('a', function(input, fill) {
      fill('(a)');
    })
    .append('b', function(input, fill) {
      fill('(' + this.a + ' * b)');
    })
    .apply(function(err, result) {
      assert.equal(result.a, '(a)');
      assert.equal(result.b, '((a) * b)');
      done();
    });
  });

 it('17 - callback called once', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill('(a)');
      fill('(x)');
    })
    .declare('b', function(input, fill) {
      fill('(b)');
      fill('(y)');
    })
    .declare('c', function(input, fill) {
      fill('(c)');
      fill('(z)');
    })
    .apply(function(err, result) {
      assert.equal(result.a, '(a)');
      assert.equal(result.b, '(b)');
      assert.equal(result.c, '(c)');
      done();
    });
  });

  it('17b - callback called once', function (done) {
    datamodel()
    .declare('a', function(input, fill) {
      fill('(a)');
      fill('(x)');
    })
    .declare('b', function(input, fill) {
      fill('(b)');
      fill('(y)');
    })
    .declare('c', function(input, fill) {
      fill('(c)');
      fill('(z)');
    })
    .apply().catch(function(e) {
        assert(false);
        done();
    }).then(function(result) {
        assert.equal(result.a, '(a)');
        assert.equal(result.b, '(b)');
        assert.equal(result.c, '(c)');
        done();
    });
  });


  /* */
});
