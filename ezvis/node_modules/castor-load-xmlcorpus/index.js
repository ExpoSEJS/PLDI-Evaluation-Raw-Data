'use strict';

var clone = require('clone')
, XMLSplitter = require('xml-splitter')
, XMLMapping = require('xml-mapping')
;

module.exports = function(options) {
  options = options || {};
  options.specialChar = '#';
  options.throwErrors = false;
  options.tagName = options.tagName ? options.tagName : undefined;
  options.longTag = options.longTag ? options.longTag : true;
  options.nested = options.nested ? options.nested : true;
  options.comments = options.comments ? options.comments : false;
  options.parserInfos = options.parserInfos ? options.parserInfos : false;
  options.encoding = options.encoding ? options.encoding : 'utf8';

  var xs;

  if (options.cutter) {
    xs = new XMLSplitter(options.cutter, options);
  }

  return function (input, submit, conf) {
    if (!xs) {
      return submit(null, input);
    }
    var readable = input.openStream()
      , concurrency = conf.concurrency || 1
      , delay = conf.delay || 100
      ;
    xs.on('data', function(data) {
      var doc = clone(input, false);
      doc.content = {};
      doc.content.xml = XMLMapping.dump(data);
      doc.content.json = XMLMapping.load(doc.content.xml, options);
      var qe = submit(doc, function() {
        delayed();
      });
      var delayed = function() {
        if (qe.length() < concurrency) {
          readable.resume();
        }
        else {
          setTimeout(delayed, delay);
        }
      }
      if (qe.length() >= concurrency) {
        readable.pause();
        delayed();
      }
    });
    xs.on('end', function(counter) {
      if (counter) {
        submit();
      }
      else {
        submit(new Error('No document detected !'));
      }
    })

    readable.setEncoding(options.encoding);
    readable.on('data', function(chunk) {
      xs.stream.write(chunk);
    });
  }
}
