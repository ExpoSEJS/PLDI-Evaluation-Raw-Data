J$.iids = {"9":[1,20,1,27],"17":[1,28,1,32],"25":[1,20,1,33],"33":[1,20,1,33],"41":[1,20,1,33],"49":[2,26,2,38],"57":[2,26,2,45],"65":[2,26,2,45],"73":[2,26,2,45],"81":[3,1,3,13],"89":[3,1,3,14],"97":[5,5,5,9],"105":[5,27,5,28],"113":[5,5,5,28],"121":[5,5,5,29],"129":[6,5,6,9],"137":[6,29,6,30],"145":[6,5,6,30],"153":[6,5,6,31],"161":[7,5,7,9],"169":[7,18,7,19],"177":[7,5,7,19],"185":[7,5,7,20],"193":[8,5,8,9],"201":[8,30,8,34],"209":[8,5,8,34],"217":[8,5,8,35],"225":[9,5,9,9],"233":[9,30,9,34],"241":[9,5,9,34],"249":[9,5,9,35],"257":[4,1,10,2],"265":[4,1,10,2],"273":[11,1,11,17],"281":[13,16,13,20],"289":[13,16,13,20],"297":[13,9,13,21],"305":[12,17,14,6],"313":[12,17,14,6],"321":[12,17,14,6],"329":[16,16,16,20],"337":[16,16,16,20],"345":[16,9,16,21],"353":[15,27,17,6],"361":[15,27,17,6],"369":[15,27,17,6],"377":[11,30,18,2],"385":[11,1,18,2],"393":[11,1,18,3],"401":[19,1,19,7],"409":[19,18,19,34],"417":[19,1,19,34],"425":[19,1,19,35],"433":[1,1,19,35],"441":[1,1,19,35],"449":[1,1,19,35],"457":[4,1,10,2],"465":[1,1,19,35],"473":[4,1,10,2],"481":[4,1,10,2],"489":[12,17,14,6],"497":[12,17,14,6],"505":[15,27,17,6],"513":[15,27,17,6],"521":[1,1,19,35],"529":[1,1,19,35],"nBranches":0,"originalCodeFileName":"/home/blake/ExpoSE/Targets/excel-builder/node_modules/jszip/lib/compressedObject.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/excel-builder/node_modules/jszip/lib/compressedObject_jalangi_.js","code":"'use strict';\nfunction CompressedObject() {\n    this.compressedSize = 0;\n    this.uncompressedSize = 0;\n    this.crc32 = 0;\n    this.compressionMethod = null;\n    this.compressedContent = null;\n}\n\nCompressedObject.prototype = {\n    /**\n     * Return the decompressed content in an unspecified format.\n     * The format will depend on the decompressor.\n     * @return {Object} the decompressed content.\n     */\n    getContent: function() {\n        return null; // see implementation\n    },\n    /**\n     * Return the compressed content in an unspecified format.\n     * The format will depend on the compressed conten source.\n     * @return {Object} the compressed content.\n     */\n    getCompressedContent: function() {\n        return null; // see implementation\n    }\n};\nmodule.exports = CompressedObject;\n"};
jalangiLabel1115:
    while (true) {
        try {
            J$.Se(433, '/home/blake/ExpoSE/Targets/excel-builder/node_modules/jszip/lib/compressedObject_jalangi_.js', '/home/blake/ExpoSE/Targets/excel-builder/node_modules/jszip/lib/compressedObject.js');
            function CompressedObject() {
                jalangiLabel1112:
                    while (true) {
                        try {
                            J$.Fe(257, arguments.callee, this, arguments);
                            arguments = J$.N(265, 'arguments', arguments, 4);
                            J$.X1(121, J$.P(113, J$.R(97, 'this', this, 0), 'compressedSize', J$.T(105, 0, 22, false), 0));
                            J$.X1(153, J$.P(145, J$.R(129, 'this', this, 0), 'uncompressedSize', J$.T(137, 0, 22, false), 0));
                            J$.X1(185, J$.P(177, J$.R(161, 'this', this, 0), 'crc32', J$.T(169, 0, 22, false), 0));
                            J$.X1(217, J$.P(209, J$.R(193, 'this', this, 0), 'compressionMethod', J$.T(201, null, 25, false), 0));
                            J$.X1(249, J$.P(241, J$.R(225, 'this', this, 0), 'compressedContent', J$.T(233, null, 25, false), 0));
                        } catch (J$e) {
                            J$.Ex(473, J$e);
                        } finally {
                            if (J$.Fr(481))
                                continue jalangiLabel1112;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(441, '__secret__S$', __secret__S$, 0);
            J$.N(449, '__secret__traits__', __secret__traits__, 0);
            CompressedObject = J$.N(465, 'CompressedObject', J$.T(457, CompressedObject, 12, false, 257), 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            J$.X1(89, J$.T(81, 'use strict', 21, false));
            J$.X1(393, J$.P(385, J$.R(273, 'CompressedObject', CompressedObject, 1), 'prototype', J$.T(377, {
                getContent: J$.T(321, function () {
                    jalangiLabel1113:
                        while (true) {
                            try {
                                J$.Fe(305, arguments.callee, this, arguments);
                                arguments = J$.N(313, 'arguments', arguments, 4);
                                return J$.X1(297, J$.Rt(289, J$.T(281, null, 25, false)));
                            } catch (J$e) {
                                J$.Ex(489, J$e);
                            } finally {
                                if (J$.Fr(497))
                                    continue jalangiLabel1113;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false, 305),
                getCompressedContent: J$.T(369, function () {
                    jalangiLabel1114:
                        while (true) {
                            try {
                                J$.Fe(353, arguments.callee, this, arguments);
                                arguments = J$.N(361, 'arguments', arguments, 4);
                                return J$.X1(345, J$.Rt(337, J$.T(329, null, 25, false)));
                            } catch (J$e) {
                                J$.Ex(505, J$e);
                            } finally {
                                if (J$.Fr(513))
                                    continue jalangiLabel1114;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false, 353)
            }, 11, false), 0));
            J$.X1(425, J$.P(417, J$.R(401, 'module', module, 2), 'exports', J$.R(409, 'CompressedObject', CompressedObject, 1), 0));
        } catch (J$e) {
            J$.Ex(521, J$e);
        } finally {
            if (J$.Sr(529)) {
                J$.L();
                continue jalangiLabel1115;
            } else {
                J$.L();
                break jalangiLabel1115;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
