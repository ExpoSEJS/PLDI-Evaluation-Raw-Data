// Compiled by ClojureScript 1.7.170 {:static-fns true, :optimize-constants true, :target :nodejs}
goog.provide('denvr.cli');
goog.require('cljs.core');
goog.require('cljs.nodejs');
goog.require('cljs.tools.cli');
goog.require('clojure.string');
goog.require('denvr.core');
denvr.cli.top_level_spec = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["-c","--configdir DIR","Configuration Directory",cljs.core.cst$kw$id,cljs.core.cst$kw$configdir,cljs.core.cst$kw$default,"~/.denvr"], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["-v",null,"Verbosity level",cljs.core.cst$kw$id,cljs.core.cst$kw$verbosity,cljs.core.cst$kw$default,(0),cljs.core.cst$kw$assoc_DASH_fn,(function (m,k,_){
return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(m,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null),cljs.core.inc);
})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["-h","--help"], null)], null);
denvr.cli.subcmd_cli_options = new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["version","Report version of denvr",cljs.core.PersistentVector.EMPTY], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["up","Bring an environment up",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["-h","--help"], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["down","Shut an environment down",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["-h","--help"], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["status","Query the status of environments",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["-h","--help"], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["sync","Start code-sync of a single container",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["-h","--help"], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["unsync","Stop code-sync of a single container",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["-h","--help"], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["rebuild","Rebuild a single container and update local environment",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["-h","--help"], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["push","Push an environment to a remote repository",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["-h","--help"], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["pull","Pull an updated environment from a remote repository",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["-h","--help"], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clone","Clone an environment from a remote repository",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["-h","--help"], null)], null)], null)], null);
denvr.cli.usage = (function denvr$cli$usage(script){
return [cljs.core.str("Usage: "),cljs.core.str(script),cljs.core.str(" [top-options] subcmd [subcmd-options]")].join('');
});
denvr.cli.subcmd_cli_options_map = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__5634_SHARP_,p2__5635_SHARP_){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(p1__5634_SHARP_,cljs.core.first(p2__5635_SHARP_),cljs.core.last(p2__5635_SHARP_));
}),cljs.core.PersistentArrayMap.EMPTY,denvr.cli.subcmd_cli_options);
denvr.cli.top_help = (function denvr$cli$top_help(script,top_summary,error){
return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$error,[cljs.core.str(denvr.cli.usage(script)),cljs.core.str(((cljs.core.some_QMARK_(error))?"\n":"")),cljs.core.str(error),cljs.core.str("\nTop-level options:\n"),cljs.core.str(top_summary),cljs.core.str("\nAvailable Subcommands:"),cljs.core.str(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__5636_SHARP_,p2__5637_SHARP_){
return [cljs.core.str(p1__5636_SHARP_),cljs.core.str("\n  "),cljs.core.str(cljs.core.first(p2__5637_SHARP_)),cljs.core.str(": "),cljs.core.str(cljs.core.second(p2__5637_SHARP_))].join('');
}),"",denvr.cli.subcmd_cli_options))].join('')], null);
});
denvr.cli.subcmd_help = (function denvr$cli$subcmd_help(script,top_summary,subcmd_summary,error,subcmd){
return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$error,[cljs.core.str(denvr.cli.usage(script)),cljs.core.str(((cljs.core.some_QMARK_(error))?"\n":"")),cljs.core.str(error),cljs.core.str("\nTop-level options:\n"),cljs.core.str(top_summary),cljs.core.str("\nSubcommand "),cljs.core.str(subcmd),cljs.core.str(" options:\n"),cljs.core.str(subcmd_summary)].join('')], null);
});
denvr.cli.parse_subcmd_args = (function denvr$cli$parse_subcmd_args(script,subcmd,args,top_summary,top_options){
var vec__5640 = (denvr.cli.subcmd_cli_options_map.cljs$core$IFn$_invoke$arity$1 ? denvr.cli.subcmd_cli_options_map.cljs$core$IFn$_invoke$arity$1(subcmd) : denvr.cli.subcmd_cli_options_map.call(null,subcmd));
var subcmd_docstr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__5640,(0),null);
var subcmd_spec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__5640,(1),null);
var map__5641 = cljs.tools.cli.parse_opts(args,subcmd_spec);
var map__5641__$1 = ((cljs.core.seq_QMARK_(map__5641))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__5641):map__5641);
var options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5641__$1,cljs.core.cst$kw$options);
var summary = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5641__$1,cljs.core.cst$kw$summary);
var errors = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5641__$1,cljs.core.cst$kw$errors);
var arguments$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5641__$1,cljs.core.cst$kw$arguments);
if(cljs.core.truth_(errors)){
return denvr.cli.subcmd_help(script,top_summary,summary,clojure.string.join.cljs$core$IFn$_invoke$arity$2("\n",errors),subcmd);
} else {
if(cljs.core.truth_(cljs.core.cst$kw$help.cljs$core$IFn$_invoke$arity$1(options))){
return denvr.cli.subcmd_help(script,top_summary,summary,null,subcmd);
} else {
return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$parsed,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$subcmd,cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(subcmd),cljs.core.cst$kw$top_DASH_options,top_options,cljs.core.cst$kw$options,options,cljs.core.cst$kw$arguments,arguments$], null)], null);

}
}
});
denvr.cli.parse_args = (function denvr$cli$parse_args(script,args){
var map__5644 = cljs.tools.cli.parse_opts.cljs$core$IFn$_invoke$arity$variadic(args,denvr.cli.top_level_spec,cljs.core.array_seq([cljs.core.cst$kw$in_DASH_order,true], 0));
var map__5644__$1 = ((cljs.core.seq_QMARK_(map__5644))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__5644):map__5644);
var vec__5645 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5644__$1,cljs.core.cst$kw$arguments);
var subcmd = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__5645,(0),null);
var subargs = cljs.core.nthnext(vec__5645,(1));
var options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5644__$1,cljs.core.cst$kw$options);
var summary = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5644__$1,cljs.core.cst$kw$summary);
var errors = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5644__$1,cljs.core.cst$kw$errors);
if(cljs.core.truth_(errors)){
return denvr.cli.top_help(script,summary,clojure.string.join.cljs$core$IFn$_invoke$arity$2("\n",errors));
} else {
if(cljs.core.truth_(cljs.core.cst$kw$help.cljs$core$IFn$_invoke$arity$1(options))){
return denvr.cli.top_help(script,summary,null);
} else {
if((subcmd == null)){
return denvr.cli.top_help(script,summary,"No subcommand specified.");
} else {
if(((denvr.cli.subcmd_cli_options_map.cljs$core$IFn$_invoke$arity$1 ? denvr.cli.subcmd_cli_options_map.cljs$core$IFn$_invoke$arity$1(subcmd) : denvr.cli.subcmd_cli_options_map.call(null,subcmd)) == null)){
return denvr.cli.top_help(script,summary,[cljs.core.str("Subcommand "),cljs.core.str(subcmd),cljs.core.str(" not recognized")].join(''));
} else {
return denvr.cli.parse_subcmd_args(script,subcmd,subargs,summary,options);

}
}
}
}
});
denvr.cli.cli = (function denvr$cli$cli(script,args){
var map__5647 = denvr.cli.parse_args(script,args);
var map__5647__$1 = ((cljs.core.seq_QMARK_(map__5647))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__5647):map__5647);
var error = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5647__$1,cljs.core.cst$kw$error);
var parsed = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5647__$1,cljs.core.cst$kw$parsed);
if(cljs.core.truth_(error)){
return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([error], 0));
} else {
return (denvr.core.run.cljs$core$IFn$_invoke$arity$1 ? denvr.core.run.cljs$core$IFn$_invoke$arity$1(parsed) : denvr.core.run.call(null,parsed));
}
});
