{"8":[3,5,3,33],"9":[1,20,1,27],"10":[3,5,3,18],"16":[13,16,13,26],"17":[1,28,1,32],"18":[3,5,3,33],"24":[18,16,18,26],"25":[1,20,1,33],"26":[9,20,9,39],"32":[27,17,27,24],"33":[1,20,1,33],"34":[10,25,10,37],"40":[31,18,31,25],"41":[1,20,1,33],"42":[13,16,13,26],"48":[41,17,41,28],"49":[2,26,2,38],"50":[13,30,13,37],"56":[49,18,49,30],"57":[2,26,2,45],"58":[13,30,13,42],"65":[2,26,2,45],"66":[13,29,13,47],"73":[2,26,2,45],"74":[13,51,13,62],"81":[3,12,3,18],"82":[13,50,13,67],"89":[3,23,3,33],"90":[16,27,16,37],"97":[4,18,4,25],"98":[16,26,16,44],"105":[4,26,4,36],"106":[17,23,17,34],"113":[4,18,4,37],"114":[18,29,18,37],"121":[4,38,4,44],"122":[25,21,25,40],"129":[4,46,4,53],"130":[26,22,26,36],"137":[4,18,4,54],"138":[27,17,27,24],"145":[4,18,4,54],"146":[28,26,28,46],"153":[4,18,4,54],"154":[30,24,30,44],"161":[6,1,6,7],"162":[31,18,31,25],"169":[7,18,7,25],"170":[41,17,41,28],"177":[7,26,7,36],"178":[44,47,44,50],"185":[7,18,7,37],"193":[7,18,7,37],"194":[44,47,44,50],"201":[7,18,7,37],"202":[45,31,45,59],"209":[8,26,8,27],"210":[45,29,45,60],"217":[8,26,8,27],"218":[45,28,45,60],"225":[8,26,8,27],"226":[46,22,46,35],"233":[9,20,9,21],"234":[47,32,47,46],"241":[9,25,9,39],"242":[47,22,47,47],"249":[9,20,9,39],"250":[48,22,48,36],"257":[9,20,9,39],"265":[10,25,10,33],"273":[10,36,10,37],"281":[10,25,10,37],"289":[10,25,10,37],"297":[11,32,11,40],"305":[11,32,11,40],"313":[11,32,11,40],"321":[13,16,13,22],"329":[13,25,13,26],"337":[13,31,13,37],"345":[13,41,13,42],"353":[13,46,13,47],"361":[13,51,13,57],"369":[13,61,13,62],"377":[13,66,13,67],"385":[13,16,13,67],"393":[13,9,13,68],"401":[12,5,14,6],"409":[12,5,14,6],"417":[12,5,14,6],"425":[16,27,16,33],"433":[16,36,16,37],"441":[16,43,16,44],"449":[16,26,16,44],"457":[16,26,16,44],"465":[17,23,17,29],"473":[17,33,17,34],"481":[17,23,17,34],"489":[17,23,17,34],"497":[18,16,18,26],"505":[18,30,18,37],"513":[18,40,18,47],"521":[18,16,18,47],"529":[18,9,18,48],"537":[15,5,19,6],"545":[15,5,19,6],"553":[15,5,19,6],"561":[15,5,19,6],"569":[15,5,19,6],"577":[20,5,20,12],"585":[21,23,21,25],"593":[21,23,21,25],"601":[21,23,21,25],"609":[23,19,23,30],"617":[23,31,23,37],"625":[23,19,23,38],"633":[23,19,23,38],"641":[23,19,23,38],"649":[25,21,25,24],"657":[25,27,25,40],"665":[25,21,25,40],"673":[25,13,25,41],"681":[26,22,26,36],"689":[26,13,26,16],"697":[26,13,26,36],"705":[26,13,26,37],"713":[27,17,27,20],"721":[27,23,27,24],"729":[28,26,28,46],"737":[28,17,28,22],"745":[28,17,28,46],"753":[28,17,28,47],"761":[30,24,30,30],"769":[30,38,30,43],"777":[30,24,30,44],"779":[30,24,30,37],"785":[30,13,30,20],"793":[30,13,30,44],"801":[30,13,30,45],"809":[31,18,31,21],"817":[31,24,31,25],"825":[32,16,32,23],"833":[32,16,32,23],"841":[32,9,32,24],"849":[20,22,33,6],"857":[20,22,33,6],"865":[20,22,33,6],"873":[20,22,33,6],"881":[20,22,33,6],"889":[20,22,33,6],"897":[20,22,33,6],"905":[20,22,33,6],"913":[20,5,33,6],"921":[20,5,33,7],"929":[34,5,34,12],"937":[35,17,35,18],"945":[35,17,35,18],"953":[35,17,35,18],"961":[36,22,36,26],"969":[36,22,36,33],"977":[36,22,36,33],"985":[36,22,36,33],"993":[37,22,37,23],"1001":[37,22,37,23],"1009":[37,22,37,23],"1017":[38,21,38,22],"1025":[38,21,38,22],"1033":[38,21,38,22],"1041":[41,17,41,18],"1049":[41,22,41,28],"1057":[42,27,42,32],"1065":[42,33,42,77],"1073":[42,23,42,78],"1081":[42,23,42,78],"1089":[42,17,42,79],"1097":[44,21,44,27],"1105":[44,35,44,39],"1121":[44,47,44,48],"1129":[44,47,44,50],"1145":[44,35,44,51],"1147":[44,35,44,46],"1153":[44,21,44,52],"1155":[44,21,44,34],"1161":[44,21,44,52],"1169":[44,13,44,53],"1177":[45,31,45,36],"1185":[45,39,45,59],"1193":[45,28,45,60],"1201":[45,13,45,61],"1209":[46,22,46,35],"1217":[46,13,46,18],"1225":[46,13,46,35],"1233":[46,13,46,36],"1241":[47,22,47,28],"1249":[47,32,47,37],"1257":[47,41,47,46],"1265":[47,22,47,47],"1273":[47,13,47,48],"1281":[48,22,48,36],"1289":[48,13,48,18],"1297":[48,13,48,36],"1305":[48,13,48,37],"1313":[49,18,49,30],"1321":[51,20,51,33],"1329":[51,34,51,40],"1337":[51,20,51,41],"1345":[52,19,52,23],"1353":[52,30,52,31],"1361":[52,19,52,32],"1363":[52,19,52,29],"1369":[50,16,53,10],"1377":[50,16,53,10],"1385":[50,9,53,11],"1393":[34,22,54,6],"1401":[34,22,54,6],"1409":[34,22,54,6],"1417":[34,22,54,6],"1425":[34,22,54,6],"1433":[34,22,54,6],"1441":[34,22,54,6],"1449":[34,22,54,6],"1457":[34,22,54,6],"1465":[34,22,54,6],"1473":[34,22,54,6],"1481":[34,5,54,6],"1489":[34,5,54,7],"1497":[6,8,55,2],"1505":[6,8,55,2],"1513":[6,8,55,2],"1521":[6,8,55,2],"1529":[6,8,55,2],"1537":[6,8,55,2],"1545":[6,8,55,2],"1553":[6,8,55,2],"1561":[6,8,55,2],"1569":[6,8,55,2],"1577":[12,5,14,6],"1585":[6,8,55,2],"1593":[15,5,19,6],"1601":[6,8,55,2],"1609":[6,8,55,2],"1617":[6,1,55,3],"1625":[6,1,55,4],"1633":[1,1,55,4],"1641":[1,1,55,4],"1649":[1,1,55,4],"1657":[1,1,55,4],"1665":[3,1,5,2],"1673":[13,16,13,67],"1681":[12,5,14,6],"1689":[12,5,14,6],"1697":[18,16,18,47],"1705":[15,5,19,6],"1713":[15,5,19,6],"1721":[27,13,29,14],"1729":[24,9,31,27],"1737":[20,22,33,6],"1745":[20,22,33,6],"1753":[41,13,43,14],"1761":[40,9,49,32],"1769":[34,22,54,6],"1777":[34,22,54,6],"1785":[6,8,55,2],"1793":[6,8,55,2],"1801":[1,1,55,4],"1809":[1,1,55,4],"nBranches":14,"originalCodeFileName":"/home/blake/ExpoSE/Targets/uglify/node_modules/source-map/lib/source-map/base64-vlq.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/uglify/node_modules/source-map/lib/source-map/base64-vlq_jalangi_.js","code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var base64 = require('./base64');\n\n  // A single base 64 digit can contain 6 bits of data. For the base 64 variable\n  // length quantities we use in the source map spec, the first bit is the sign,\n  // the next four bits are the actual value, and the 6th bit is the\n  // continuation bit. The continuation bit tells us whether there are more\n  // digits in this value following this digit.\n  //\n  //   Continuation\n  //   |    Sign\n  //   |    |\n  //   V    V\n  //   101011\n\n  var VLQ_BASE_SHIFT = 5;\n\n  // binary: 100000\n  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n  // binary: 011111\n  var VLQ_BASE_MASK = VLQ_BASE - 1;\n\n  // binary: 100000\n  var VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n  /**\n   * Converts from a two-complement value to a value where the sign bit is\n   * is placed in the least significant bit.  For example, as decimals:\n   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n   */\n  function toVLQSigned(aValue) {\n    return aValue < 0\n      ? ((-aValue) << 1) + 1\n      : (aValue << 1) + 0;\n  }\n\n  /**\n   * Converts to a two-complement value from a value where the sign bit is\n   * is placed in the least significant bit.  For example, as decimals:\n   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n   */\n  function fromVLQSigned(aValue) {\n    var isNegative = (aValue & 1) === 1;\n    var shifted = aValue >> 1;\n    return isNegative\n      ? -shifted\n      : shifted;\n  }\n\n  /**\n   * Returns the base 64 VLQ encoded value.\n   */\n  exports.encode = function base64VLQ_encode(aValue) {\n    var encoded = \"\";\n    var digit;\n\n    var vlq = toVLQSigned(aValue);\n\n    do {\n      digit = vlq & VLQ_BASE_MASK;\n      vlq >>>= VLQ_BASE_SHIFT;\n      if (vlq > 0) {\n        // There are still more digits in this value, so we must make sure the\n        // continuation bit is marked.\n        digit |= VLQ_CONTINUATION_BIT;\n      }\n      encoded += base64.encode(digit);\n    } while (vlq > 0);\n\n    return encoded;\n  };\n\n  /**\n   * Decodes the next base 64 VLQ value from the given string and returns the\n   * value and the rest of the string.\n   */\n  exports.decode = function base64VLQ_decode(aStr) {\n    var i = 0;\n    var strLen = aStr.length;\n    var result = 0;\n    var shift = 0;\n    var continuation, digit;\n\n    do {\n      if (i >= strLen) {\n        throw new Error(\"Expected more digits in base 64 VLQ value.\");\n      }\n      digit = base64.decode(aStr.charAt(i++));\n      continuation = !!(digit & VLQ_CONTINUATION_BIT);\n      digit &= VLQ_BASE_MASK;\n      result = result + (digit << shift);\n      shift += VLQ_BASE_SHIFT;\n    } while (continuation);\n\n    return {\n      value: fromVLQSigned(result),\n      rest: aStr.slice(i)\n    };\n  };\n\n});\n"}