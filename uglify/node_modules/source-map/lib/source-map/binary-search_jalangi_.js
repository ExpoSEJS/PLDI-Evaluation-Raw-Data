J$.iids = {"8":[3,5,3,33],"9":[1,20,1,27],"10":[3,5,3,18],"16":[13,17,13,32],"17":[1,28,1,32],"18":[3,5,3,33],"24":[18,17,18,31],"25":[1,20,1,33],"26":[8,31,8,43],"32":[21,20,21,28],"33":[1,20,1,33],"34":[8,30,8,48],"40":[12,20,12,27],"41":[1,20,1,33],"42":[8,19,8,56],"48":[10,13,10,22],"49":[2,26,2,38],"50":[10,13,10,22],"56":[25,16,25,36],"57":[2,26,2,45],"58":[12,20,12,27],"65":[2,26,2,45],"66":[13,17,13,28],"73":[2,26,2,45],"74":[13,17,13,32],"81":[3,12,3,18],"82":[18,17,18,27],"89":[3,23,3,33],"90":[18,17,18,31],"97":[4,18,4,25],"98":[21,20,21,28],"105":[4,26,4,36],"106":[25,16,25,36],"113":[4,18,4,37],"114":[25,55,25,57],"121":[4,38,4,44],"129":[4,46,4,53],"137":[4,18,4,54],"145":[4,18,4,54],"153":[4,18,4,54],"161":[6,1,6,7],"169":[8,19,8,23],"177":[8,31,8,36],"185":[8,39,8,43],"193":[8,47,8,48],"201":[8,19,8,49],"203":[8,19,8,29],"209":[8,52,8,56],"217":[8,19,8,56],"225":[8,19,8,56],"233":[9,19,9,27],"241":[9,28,9,35],"249":[9,37,9,46],"257":[9,47,9,50],"265":[9,37,9,51],"273":[9,53,9,57],"281":[9,19,9,58],"289":[9,19,9,58],"297":[9,19,9,58],"305":[10,13,10,16],"313":[10,21,10,22],"321":[11,20,11,29],"329":[11,30,11,33],"337":[11,20,11,34],"345":[11,20,11,34],"353":[11,13,11,35],"361":[12,20,12,23],"369":[12,26,12,27],"377":[13,17,13,22],"385":[13,25,13,28],"393":[13,31,13,32],"401":[14,24,14,39],"409":[14,40,14,43],"417":[14,45,14,50],"425":[14,52,14,59],"433":[14,61,14,70],"441":[14,72,14,80],"449":[14,24,14,81],"457":[14,24,14,81],"465":[14,17,14,82],"473":[16,20,16,29],"481":[16,30,16,33],"489":[16,20,16,34],"497":[16,20,16,34],"505":[16,13,16,35],"513":[18,17,18,20],"521":[18,23,18,27],"529":[18,30,18,31],"537":[19,24,19,39],"545":[19,40,19,44],"553":[19,46,19,49],"561":[19,51,19,58],"569":[19,60,19,69],"577":[19,71,19,79],"585":[19,24,19,80],"593":[19,24,19,80],"601":[19,17,19,81],"609":[21,20,21,24],"617":[21,27,21,28],"625":[21,31,21,35],"633":[21,38,21,47],"641":[21,48,21,52],"649":[21,38,21,53],"657":[21,20,21,53],"665":[21,13,21,54],"673":[7,5,23,6],"681":[7,5,23,6],"689":[7,5,23,6],"697":[7,5,23,6],"705":[7,5,23,6],"713":[7,5,23,6],"721":[7,5,23,6],"729":[7,5,23,6],"737":[7,5,23,6],"745":[24,5,24,12],"753":[25,16,25,25],"761":[25,16,25,32],"769":[25,35,25,36],"777":[25,39,25,54],"785":[25,56,25,57],"793":[25,59,25,68],"801":[25,59,25,75],"809":[25,77,25,84],"817":[25,86,25,95],"825":[25,97,25,105],"833":[25,39,25,106],"841":[25,109,25,113],"849":[25,16,25,113],"857":[25,9,25,114],"865":[24,22,26,6],"873":[24,22,26,6],"881":[24,22,26,6],"889":[24,22,26,6],"897":[24,22,26,6],"905":[24,22,26,6],"913":[24,22,26,6],"921":[24,5,26,6],"929":[24,5,26,7],"937":[6,8,27,2],"945":[6,8,27,2],"953":[6,8,27,2],"961":[6,8,27,2],"969":[6,8,27,2],"977":[7,5,23,6],"985":[6,8,27,2],"993":[6,8,27,2],"1001":[6,1,27,3],"1009":[6,1,27,4],"1017":[1,1,27,4],"1025":[1,1,27,4],"1033":[1,1,27,4],"1041":[1,1,27,4],"1049":[3,1,5,2],"1057":[13,13,15,14],"1065":[18,13,20,14],"1073":[21,20,21,53],"1081":[12,16,22,10],"1089":[10,9,22,10],"1097":[7,5,23,6],"1105":[7,5,23,6],"1113":[25,16,25,113],"1121":[24,22,26,6],"1129":[24,22,26,6],"1137":[6,8,27,2],"1145":[6,8,27,2],"1153":[1,1,27,4],"1161":[1,1,27,4],"nBranches":14,"originalCodeFileName":"/home/blake/ExpoSE/Targets/uglify/node_modules/source-map/lib/source-map/binary-search.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/uglify/node_modules/source-map/lib/source-map/binary-search_jalangi_.js","code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  /**\n   * Recursive implementation of binary search.\n   *\n   * @param aLow Indices here and lower do not contain the needle.\n   * @param aHigh Indices here and higher do not contain the needle.\n   * @param aNeedle The element being searched for.\n   * @param aHaystack The non-empty array being searched.\n   * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n   */\n  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare) {\n    // This function terminates when one of the following is true:\n    //\n    //   1. We find the exact element we are looking for.\n    //\n    //   2. We did not find the exact element, but we can return the next\n    //      closest element that is less than that element.\n    //\n    //   3. We did not find the exact element, and there is no next-closest\n    //      element which is less than the one we are searching for, so we\n    //      return null.\n    var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n    var cmp = aCompare(aNeedle, aHaystack[mid], true);\n    if (cmp === 0) {\n      // Found the element we are looking for.\n      return aHaystack[mid];\n    }\n    else if (cmp > 0) {\n      // aHaystack[mid] is greater than our needle.\n      if (aHigh - mid > 1) {\n        // The element is in the upper half.\n        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare);\n      }\n      // We did not find an exact match, return the next closest one\n      // (termination case 2).\n      return aHaystack[mid];\n    }\n    else {\n      // aHaystack[mid] is less than our needle.\n      if (mid - aLow > 1) {\n        // The element is in the lower half.\n        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare);\n      }\n      // The exact needle element was not found in this haystack. Determine if\n      // we are in termination case (2) or (3) and return the appropriate thing.\n      return aLow < 0\n        ? null\n        : aHaystack[aLow];\n    }\n  }\n\n  /**\n   * This is an implementation of binary search which will always try and return\n   * the next lowest value checked if there is no exact hit. This is because\n   * mappings between original and generated line/col pairs are single points,\n   * and there is an implicit region between each of them, so a miss just means\n   * that you aren't on the very start of a region.\n   *\n   * @param aNeedle The element you are looking for.\n   * @param aHaystack The array that is being searched.\n   * @param aCompare A function which takes the needle and an element in the\n   *     array and returns -1, 0, or 1 depending on whether the needle is less\n   *     than, equal to, or greater than the element, respectively.\n   */\n  exports.search = function search(aNeedle, aHaystack, aCompare) {\n    return aHaystack.length > 0\n      ? recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare)\n      : null;\n  };\n\n});\n"};
jalangiLabel151:
    while (true) {
        try {
            J$.Se(1017, '/home/blake/ExpoSE/Targets/uglify/node_modules/source-map/lib/source-map/binary-search_jalangi_.js', '/home/blake/ExpoSE/Targets/uglify/node_modules/source-map/lib/source-map/binary-search.js');
            J$.N(1025, '__secret__S$', __secret__S$, 0);
            J$.N(1033, '__secret__traits__', __secret__traits__, 0);
            J$.N(1041, 'define', define, 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            if (J$.X1(1049, J$.C(8, J$.B(18, '!==', J$.U(10, 'typeof', J$.R(81, 'define', define, 1)), J$.T(89, 'function', 21, false), 0)))) {
                var define = J$.X1(153, J$.W(145, 'define', J$.F(137, J$.F(113, J$.R(97, 'require', require, 2), 0)(J$.T(105, 'amdefine', 21, false)), 0)(J$.R(121, 'module', module, 2), J$.R(129, 'require', require, 2)), define, 3));
            }
            J$.X1(1009, J$.F(1001, J$.R(161, 'define', define, 1), 0)(J$.T(993, function (require, exports, module) {
                jalangiLabel150:
                    while (true) {
                        try {
                            J$.Fe(937, arguments.callee, this, arguments);
                            function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare) {
                                jalangiLabel148:
                                    while (true) {
                                        try {
                                            J$.Fe(673, arguments.callee, this, arguments);
                                            arguments = J$.N(681, 'arguments', arguments, 4);
                                            aLow = J$.N(689, 'aLow', aLow, 4);
                                            aHigh = J$.N(697, 'aHigh', aHigh, 4);
                                            aNeedle = J$.N(705, 'aNeedle', aNeedle, 4);
                                            aHaystack = J$.N(713, 'aHaystack', aHaystack, 4);
                                            aCompare = J$.N(721, 'aCompare', aCompare, 4);
                                            J$.N(729, 'mid', mid, 0);
                                            J$.N(737, 'cmp', cmp, 0);
                                            var mid = J$.X1(225, J$.W(217, 'mid', J$.B(42, '+', J$.M(201, J$.R(169, 'Math', Math, 2), 'floor', 0)(J$.B(34, '/', J$.B(26, '-', J$.R(177, 'aHigh', aHigh, 0), J$.R(185, 'aLow', aLow, 0), 0), J$.T(193, 2, 22, false), 0)), J$.R(209, 'aLow', aLow, 0), 0), mid, 1));
                                            var cmp = J$.X1(297, J$.W(289, 'cmp', J$.F(281, J$.R(233, 'aCompare', aCompare, 0), 0)(J$.R(241, 'aNeedle', aNeedle, 0), J$.G(265, J$.R(249, 'aHaystack', aHaystack, 0), J$.R(257, 'mid', mid, 0), 4), J$.T(273, true, 23, false)), cmp, 1));
                                            if (J$.X1(1089, J$.C(48, J$.B(50, '===', J$.R(305, 'cmp', cmp, 0), J$.T(313, 0, 22, false), 0)))) {
                                                return J$.X1(353, J$.Rt(345, J$.G(337, J$.R(321, 'aHaystack', aHaystack, 0), J$.R(329, 'mid', mid, 0), 4)));
                                            } else if (J$.X1(1081, J$.C(40, J$.B(58, '>', J$.R(361, 'cmp', cmp, 0), J$.T(369, 0, 22, false), 0)))) {
                                                if (J$.X1(1057, J$.C(16, J$.B(74, '>', J$.B(66, '-', J$.R(377, 'aHigh', aHigh, 0), J$.R(385, 'mid', mid, 0), 0), J$.T(393, 1, 22, false), 0)))) {
                                                    return J$.X1(465, J$.Rt(457, J$.F(449, J$.R(401, 'recursiveSearch', recursiveSearch, 0), 0)(J$.R(409, 'mid', mid, 0), J$.R(417, 'aHigh', aHigh, 0), J$.R(425, 'aNeedle', aNeedle, 0), J$.R(433, 'aHaystack', aHaystack, 0), J$.R(441, 'aCompare', aCompare, 0))));
                                                }
                                                return J$.X1(505, J$.Rt(497, J$.G(489, J$.R(473, 'aHaystack', aHaystack, 0), J$.R(481, 'mid', mid, 0), 4)));
                                            } else {
                                                if (J$.X1(1065, J$.C(24, J$.B(90, '>', J$.B(82, '-', J$.R(513, 'mid', mid, 0), J$.R(521, 'aLow', aLow, 0), 0), J$.T(529, 1, 22, false), 0)))) {
                                                    return J$.X1(601, J$.Rt(593, J$.F(585, J$.R(537, 'recursiveSearch', recursiveSearch, 0), 0)(J$.R(545, 'aLow', aLow, 0), J$.R(553, 'mid', mid, 0), J$.R(561, 'aNeedle', aNeedle, 0), J$.R(569, 'aHaystack', aHaystack, 0), J$.R(577, 'aCompare', aCompare, 0))));
                                                }
                                                return J$.X1(665, J$.Rt(657, J$.X1(1073, J$.C(32, J$.B(98, '<', J$.R(609, 'aLow', aLow, 0), J$.T(617, 0, 22, false), 0))) ? J$.T(625, null, 25, false) : J$.G(649, J$.R(633, 'aHaystack', aHaystack, 0), J$.R(641, 'aLow', aLow, 0), 4)));
                                            }
                                        } catch (J$e) {
                                            J$.Ex(1097, J$e);
                                        } finally {
                                            if (J$.Fr(1105))
                                                continue jalangiLabel148;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }
                            arguments = J$.N(945, 'arguments', arguments, 4);
                            require = J$.N(953, 'require', require, 4);
                            exports = J$.N(961, 'exports', exports, 4);
                            module = J$.N(969, 'module', module, 4);
                            recursiveSearch = J$.N(985, 'recursiveSearch', J$.T(977, recursiveSearch, 12, false, 673), 0);
                            J$.X1(929, J$.P(921, J$.R(745, 'exports', exports, 0), 'search', J$.T(913, function search(aNeedle, aHaystack, aCompare) {
                                jalangiLabel149:
                                    while (true) {
                                        try {
                                            J$.Fe(865, arguments.callee, this, arguments);
                                            arguments = J$.N(873, 'arguments', arguments, 4);
                                            search = J$.N(881, 'search', search, 0);
                                            aNeedle = J$.N(889, 'aNeedle', aNeedle, 4);
                                            aHaystack = J$.N(897, 'aHaystack', aHaystack, 4);
                                            aCompare = J$.N(905, 'aCompare', aCompare, 4);
                                            return J$.X1(857, J$.Rt(849, J$.X1(1113, J$.C(56, J$.B(106, '>', J$.G(761, J$.R(753, 'aHaystack', aHaystack, 0), 'length', 0), J$.T(769, 0, 22, false), 0))) ? J$.F(833, J$.R(777, 'recursiveSearch', recursiveSearch, 0), 0)(J$.U(114, '-', J$.T(785, 1, 22, false)), J$.G(801, J$.R(793, 'aHaystack', aHaystack, 0), 'length', 0), J$.R(809, 'aNeedle', aNeedle, 0), J$.R(817, 'aHaystack', aHaystack, 0), J$.R(825, 'aCompare', aCompare, 0)) : J$.T(841, null, 25, false)));
                                        } catch (J$e) {
                                            J$.Ex(1121, J$e);
                                        } finally {
                                            if (J$.Fr(1129))
                                                continue jalangiLabel149;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 865), 0));
                        } catch (J$e) {
                            J$.Ex(1137, J$e);
                        } finally {
                            if (J$.Fr(1145))
                                continue jalangiLabel150;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 937)));
        } catch (J$e) {
            J$.Ex(1153, J$e);
        } finally {
            if (J$.Sr(1161)) {
                J$.L();
                continue jalangiLabel151;
            } else {
                J$.L();
                break jalangiLabel151;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
