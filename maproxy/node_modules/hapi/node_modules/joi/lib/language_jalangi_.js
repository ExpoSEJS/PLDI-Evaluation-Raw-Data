J$.iids = {"9":[1,20,1,27],"17":[1,28,1,32],"25":[1,20,1,33],"33":[1,20,1,33],"41":[1,20,1,33],"49":[2,26,2,38],"57":[2,26,2,45],"65":[2,26,2,45],"73":[2,26,2,45],"81":[3,17,3,19],"89":[3,17,3,19],"97":[3,17,3,19],"105":[4,1,4,8],"113":[5,11,5,18],"121":[6,10,6,23],"129":[7,29,7,33],"137":[7,15,7,35],"145":[9,18,9,34],"153":[10,18,10,45],"161":[11,16,11,44],"169":[12,19,12,32],"177":[13,20,13,47],"185":[14,18,14,62],"193":[8,10,15,6],"201":[16,27,16,73],"209":[16,19,16,75],"217":[18,15,18,33],"225":[19,19,19,80],"233":[20,25,20,93],"241":[21,22,21,68],"249":[22,28,22,81],"257":[23,35,23,89],"265":[24,33,24,67],"273":[25,31,25,111],"281":[26,19,26,67],"289":[27,25,27,80],"297":[28,14,28,53],"305":[29,14,29,66],"313":[30,17,30,47],"321":[31,17,31,45],"329":[32,17,32,62],"337":[17,12,33,6],"345":[34,22,34,41],"353":[34,14,34,43],"361":[36,15,36,45],"369":[37,14,37,48],"377":[38,14,38,61],"385":[39,17,39,42],"393":[35,13,40,6],"401":[42,15,42,70],"409":[43,14,43,59],"417":[44,14,44,57],"425":[45,18,45,49],"433":[46,14,46,56],"441":[41,11,47,6],"449":[48,23,48,43],"457":[48,15,48,45],"465":[50,15,50,34],"473":[51,16,51,59],"481":[52,14,52,53],"489":[53,14,53,66],"497":[54,17,54,47],"505":[55,23,55,39],"513":[56,15,56,49],"521":[57,18,57,59],"529":[58,18,58,58],"537":[59,14,59,69],"545":[60,13,60,53],"553":[61,14,61,75],"561":[62,15,62,74],"569":[63,17,63,88],"577":[65,23,65,141],"585":[66,23,66,111],"593":[64,17,67,10],"601":[68,15,68,50],"609":[49,13,69,6],"617":[71,15,71,33],"625":[72,14,72,57],"633":[73,14,73,55],"641":[74,15,74,44],"649":[75,18,75,50],"657":[76,16,76,43],"665":[77,18,77,38],"673":[78,19,78,46],"681":[79,19,79,46],"689":[80,20,80,69],"697":[81,14,81,58],"705":[82,19,82,55],"713":[70,13,83,6],"721":[85,15,85,33],"729":[86,14,86,65],"737":[87,14,87,78],"745":[88,17,88,59],"753":[89,19,89,63],"761":[90,16,90,75],"769":[92,19,92,93],"777":[93,19,93,80],"785":[91,16,94,10],"793":[95,16,95,39],"801":[96,14,96,35],"809":[97,26,97,93],"817":[98,18,98,49],"825":[99,15,99,37],"833":[100,14,100,56],"841":[101,19,101,45],"849":[102,20,102,60],"857":[103,20,103,60],"865":[104,15,104,61],"873":[105,21,105,44],"881":[106,14,106,58],"889":[107,13,107,62],"897":[108,20,108,114],"905":[84,13,109,6],"913":[4,18,110,2],"921":[4,1,110,2],"929":[4,1,110,3],"937":[1,1,110,3],"945":[1,1,110,3],"953":[1,1,110,3],"961":[1,1,110,3],"969":[1,1,110,3],"977":[1,1,110,3],"nBranches":0,"originalCodeFileName":"/home/blake/ExpoSE/Targets/maproxy/node_modules/hapi/node_modules/joi/lib/language.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/maproxy/node_modules/hapi/node_modules/joi/lib/language_jalangi_.js","code":"// Load modules\n\n\n// Declare internals\n\nvar internals = {};\n\n\nexports.errors = {\n    root: 'value',\n    key: '\"{{!key}}\" ',\n    messages: {\n        wrapArrays: true\n    },\n    any: {\n        unknown: 'is not allowed',\n        invalid: 'contains an invalid value',\n        empty: 'is not allowed to be empty',\n        required: 'is required',\n        allowOnly: 'must be one of {{valids}}',\n        default: 'threw an error when running default method'\n    },\n    alternatives: {\n        base: 'not matching any of the allowed alternatives'\n    },\n    array: {\n        base: 'must be an array',\n        includes: 'at position {{pos}} does not match any of the allowed types',\n        includesSingle: 'single value of \"{{!key}}\" does not match any of the allowed types',\n        includesOne: 'at position {{pos}} fails because {{reason}}',\n        includesOneSingle: 'single value of \"{{!key}}\" fails because {{reason}}',\n        includesRequiredUnknowns: 'does not contain {{unknownMisses}} required value(s)',\n        includesRequiredKnowns: 'does not contain {{knownMisses}}',\n        includesRequiredBoth: 'does not contain {{knownMisses}} and {{unknownMisses}} other required value(s)',\n        excludes: 'at position {{pos}} contains an excluded value',\n        excludesSingle: 'single value of \"{{!key}}\" contains an excluded value',\n        min: 'must contain at least {{limit}} items',\n        max: 'must contain less than or equal to {{limit}} items',\n        length: 'must contain {{limit}} items',\n        sparse: 'must not be a sparse array',\n        unique: 'position {{pos}} contains a duplicate value'\n    },\n    boolean: {\n        base: 'must be a boolean'\n    },\n    binary: {\n        base: 'must be a buffer or a string',\n        min: 'must be at least {{limit}} bytes',\n        max: 'must be less than or equal to {{limit}} bytes',\n        length: 'must be {{limit}} bytes'\n    },\n    date: {\n        base: 'must be a number of milliseconds or valid date string',\n        min: 'must be larger than or equal to \"{{limit}}\"',\n        max: 'must be less than or equal to \"{{limit}}\"',\n        isoDate: 'must be a valid ISO 8601 date',\n        ref: 'references \"{{ref}}\" which is not a date'\n    },\n    function: {\n        base: 'must be a Function'\n    },\n    object: {\n        base: 'must be an object',\n        child: 'child \"{{!key}}\" fails because {{reason}}',\n        min: 'must have at least {{limit}} children',\n        max: 'must have less than or equal to {{limit}} children',\n        length: 'must have {{limit}} children',\n        allowUnknown: 'is not allowed',\n        with: 'missing required peer \"{{peer}}\"',\n        without: 'conflict with forbidden peer \"{{peer}}\"',\n        missing: 'must contain at least one of {{peers}}',\n        xor: 'contains a conflict between exclusive peers {{peers}}',\n        or: 'must contain at least one of {{peers}}',\n        and: 'contains {{present}} without its required peers {{missing}}',\n        nand: '!!\"{{main}}\" must not exist simultaneously with {{peers}}',\n        assert: '!!\"{{ref}}\" validation failed because \"{{ref}}\" failed to {{message}}',\n        rename: {\n            multiple: 'cannot rename child \"{{from}}\" because multiple renames are disabled and another key was already renamed to \"{{to}}\"',\n            override: 'cannot rename child \"{{from}}\" because override is disabled and target \"{{to}}\" exists'\n        },\n        type: 'must be an instance of \"{{type}}\"'\n    },\n    number: {\n        base: 'must be a number',\n        min: 'must be larger than or equal to {{limit}}',\n        max: 'must be less than or equal to {{limit}}',\n        less: 'must be less than {{limit}}',\n        greater: 'must be greater than {{limit}}',\n        float: 'must be a float or double',\n        integer: 'must be an integer',\n        negative: 'must be a negative number',\n        positive: 'must be a positive number',\n        precision: 'must have no more than {{limit}} decimal places',\n        ref: 'references \"{{ref}}\" which is not a number',\n        multiple: 'must be a multiple of {{multiple}}'\n    },\n    string: {\n        base: 'must be a string',\n        min: 'length must be at least {{limit}} characters long',\n        max: 'length must be less than or equal to {{limit}} characters long',\n        length: 'length must be {{limit}} characters long',\n        alphanum: 'must only contain alpha-numeric characters',\n        token: 'must only contain alpha-numeric and underscore characters',\n        regex: {\n            base: 'with value \"{{!value}}\" fails to match the required pattern: {{pattern}}',\n            name: 'with value \"{{!value}}\" fails to match the {{name}} pattern'\n        },\n        email: 'must be a valid email',\n        uri: 'must be a valid uri',\n        uriCustomScheme: 'must be a valid uri with a scheme matching the {{scheme}} pattern',\n        isoDate: 'must be a valid ISO 8601 date',\n        guid: 'must be a valid GUID',\n        hex: 'must only contain hexadecimal characters',\n        hostname: 'must be a valid hostname',\n        lowercase: 'must only contain lowercase characters',\n        uppercase: 'must only contain uppercase characters',\n        trim: 'must not have leading or trailing whitespace',\n        creditCard: 'must be a credit card',\n        ref: 'references \"{{ref}}\" which is not a number',\n        ip: 'must be a valid ip address with a {{cidr}} CIDR',\n        ipVersion: 'must be a valid ip address of one of the following versions {{version}} with a {{cidr}} CIDR'\n    }\n};\n"};
jalangiLabel277:
    while (true) {
        try {
            J$.Se(937, '/home/blake/ExpoSE/Targets/maproxy/node_modules/hapi/node_modules/joi/lib/language_jalangi_.js', '/home/blake/ExpoSE/Targets/maproxy/node_modules/hapi/node_modules/joi/lib/language.js');
            J$.N(945, '__secret__S$', __secret__S$, 0);
            J$.N(953, '__secret__traits__', __secret__traits__, 0);
            J$.N(961, 'internals', internals, 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            var internals = J$.X1(97, J$.W(89, 'internals', J$.T(81, {}, 11, false), internals, 3));
            J$.X1(929, J$.P(921, J$.R(105, 'exports', exports, 2), 'errors', J$.T(913, {
                root: J$.T(113, 'value', 21, false),
                key: J$.T(121, '"{{!key}}" ', 21, false),
                messages: J$.T(137, {
                    wrapArrays: J$.T(129, true, 23, false)
                }, 11, false),
                any: J$.T(193, {
                    unknown: J$.T(145, 'is not allowed', 21, false),
                    invalid: J$.T(153, 'contains an invalid value', 21, false),
                    empty: J$.T(161, 'is not allowed to be empty', 21, false),
                    required: J$.T(169, 'is required', 21, false),
                    allowOnly: J$.T(177, 'must be one of {{valids}}', 21, false),
                    default: J$.T(185, 'threw an error when running default method', 21, false)
                }, 11, false),
                alternatives: J$.T(209, {
                    base: J$.T(201, 'not matching any of the allowed alternatives', 21, false)
                }, 11, false),
                array: J$.T(337, {
                    base: J$.T(217, 'must be an array', 21, false),
                    includes: J$.T(225, 'at position {{pos}} does not match any of the allowed types', 21, false),
                    includesSingle: J$.T(233, 'single value of "{{!key}}" does not match any of the allowed types', 21, false),
                    includesOne: J$.T(241, 'at position {{pos}} fails because {{reason}}', 21, false),
                    includesOneSingle: J$.T(249, 'single value of "{{!key}}" fails because {{reason}}', 21, false),
                    includesRequiredUnknowns: J$.T(257, 'does not contain {{unknownMisses}} required value(s)', 21, false),
                    includesRequiredKnowns: J$.T(265, 'does not contain {{knownMisses}}', 21, false),
                    includesRequiredBoth: J$.T(273, 'does not contain {{knownMisses}} and {{unknownMisses}} other required value(s)', 21, false),
                    excludes: J$.T(281, 'at position {{pos}} contains an excluded value', 21, false),
                    excludesSingle: J$.T(289, 'single value of "{{!key}}" contains an excluded value', 21, false),
                    min: J$.T(297, 'must contain at least {{limit}} items', 21, false),
                    max: J$.T(305, 'must contain less than or equal to {{limit}} items', 21, false),
                    length: J$.T(313, 'must contain {{limit}} items', 21, false),
                    sparse: J$.T(321, 'must not be a sparse array', 21, false),
                    unique: J$.T(329, 'position {{pos}} contains a duplicate value', 21, false)
                }, 11, false),
                boolean: J$.T(353, {
                    base: J$.T(345, 'must be a boolean', 21, false)
                }, 11, false),
                binary: J$.T(393, {
                    base: J$.T(361, 'must be a buffer or a string', 21, false),
                    min: J$.T(369, 'must be at least {{limit}} bytes', 21, false),
                    max: J$.T(377, 'must be less than or equal to {{limit}} bytes', 21, false),
                    length: J$.T(385, 'must be {{limit}} bytes', 21, false)
                }, 11, false),
                date: J$.T(441, {
                    base: J$.T(401, 'must be a number of milliseconds or valid date string', 21, false),
                    min: J$.T(409, 'must be larger than or equal to "{{limit}}"', 21, false),
                    max: J$.T(417, 'must be less than or equal to "{{limit}}"', 21, false),
                    isoDate: J$.T(425, 'must be a valid ISO 8601 date', 21, false),
                    ref: J$.T(433, 'references "{{ref}}" which is not a date', 21, false)
                }, 11, false),
                function: J$.T(457, {
                    base: J$.T(449, 'must be a Function', 21, false)
                }, 11, false),
                object: J$.T(609, {
                    base: J$.T(465, 'must be an object', 21, false),
                    child: J$.T(473, 'child "{{!key}}" fails because {{reason}}', 21, false),
                    min: J$.T(481, 'must have at least {{limit}} children', 21, false),
                    max: J$.T(489, 'must have less than or equal to {{limit}} children', 21, false),
                    length: J$.T(497, 'must have {{limit}} children', 21, false),
                    allowUnknown: J$.T(505, 'is not allowed', 21, false),
                    with: J$.T(513, 'missing required peer "{{peer}}"', 21, false),
                    without: J$.T(521, 'conflict with forbidden peer "{{peer}}"', 21, false),
                    missing: J$.T(529, 'must contain at least one of {{peers}}', 21, false),
                    xor: J$.T(537, 'contains a conflict between exclusive peers {{peers}}', 21, false),
                    or: J$.T(545, 'must contain at least one of {{peers}}', 21, false),
                    and: J$.T(553, 'contains {{present}} without its required peers {{missing}}', 21, false),
                    nand: J$.T(561, '!!"{{main}}" must not exist simultaneously with {{peers}}', 21, false),
                    assert: J$.T(569, '!!"{{ref}}" validation failed because "{{ref}}" failed to {{message}}', 21, false),
                    rename: J$.T(593, {
                        multiple: J$.T(577, 'cannot rename child "{{from}}" because multiple renames are disabled and another key was already renamed to "{{to}}"', 21, false),
                        override: J$.T(585, 'cannot rename child "{{from}}" because override is disabled and target "{{to}}" exists', 21, false)
                    }, 11, false),
                    type: J$.T(601, 'must be an instance of "{{type}}"', 21, false)
                }, 11, false),
                number: J$.T(713, {
                    base: J$.T(617, 'must be a number', 21, false),
                    min: J$.T(625, 'must be larger than or equal to {{limit}}', 21, false),
                    max: J$.T(633, 'must be less than or equal to {{limit}}', 21, false),
                    less: J$.T(641, 'must be less than {{limit}}', 21, false),
                    greater: J$.T(649, 'must be greater than {{limit}}', 21, false),
                    float: J$.T(657, 'must be a float or double', 21, false),
                    integer: J$.T(665, 'must be an integer', 21, false),
                    negative: J$.T(673, 'must be a negative number', 21, false),
                    positive: J$.T(681, 'must be a positive number', 21, false),
                    precision: J$.T(689, 'must have no more than {{limit}} decimal places', 21, false),
                    ref: J$.T(697, 'references "{{ref}}" which is not a number', 21, false),
                    multiple: J$.T(705, 'must be a multiple of {{multiple}}', 21, false)
                }, 11, false),
                string: J$.T(905, {
                    base: J$.T(721, 'must be a string', 21, false),
                    min: J$.T(729, 'length must be at least {{limit}} characters long', 21, false),
                    max: J$.T(737, 'length must be less than or equal to {{limit}} characters long', 21, false),
                    length: J$.T(745, 'length must be {{limit}} characters long', 21, false),
                    alphanum: J$.T(753, 'must only contain alpha-numeric characters', 21, false),
                    token: J$.T(761, 'must only contain alpha-numeric and underscore characters', 21, false),
                    regex: J$.T(785, {
                        base: J$.T(769, 'with value "{{!value}}" fails to match the required pattern: {{pattern}}', 21, false),
                        name: J$.T(777, 'with value "{{!value}}" fails to match the {{name}} pattern', 21, false)
                    }, 11, false),
                    email: J$.T(793, 'must be a valid email', 21, false),
                    uri: J$.T(801, 'must be a valid uri', 21, false),
                    uriCustomScheme: J$.T(809, 'must be a valid uri with a scheme matching the {{scheme}} pattern', 21, false),
                    isoDate: J$.T(817, 'must be a valid ISO 8601 date', 21, false),
                    guid: J$.T(825, 'must be a valid GUID', 21, false),
                    hex: J$.T(833, 'must only contain hexadecimal characters', 21, false),
                    hostname: J$.T(841, 'must be a valid hostname', 21, false),
                    lowercase: J$.T(849, 'must only contain lowercase characters', 21, false),
                    uppercase: J$.T(857, 'must only contain uppercase characters', 21, false),
                    trim: J$.T(865, 'must not have leading or trailing whitespace', 21, false),
                    creditCard: J$.T(873, 'must be a credit card', 21, false),
                    ref: J$.T(881, 'references "{{ref}}" which is not a number', 21, false),
                    ip: J$.T(889, 'must be a valid ip address with a {{cidr}} CIDR', 21, false),
                    ipVersion: J$.T(897, 'must be a valid ip address of one of the following versions {{version}} with a {{cidr}} CIDR', 21, false)
                }, 11, false)
            }, 11, false), 0));
        } catch (J$e) {
            J$.Ex(969, J$e);
        } finally {
            if (J$.Sr(977)) {
                J$.L();
                continue jalangiLabel277;
            } else {
                J$.L();
                break jalangiLabel277;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
