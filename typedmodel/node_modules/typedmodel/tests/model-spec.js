"use strict";

var _          = require("lodash");
var qclass     = require("qclass");
var Model      = require("../typedmodel").Model;
var ArrayModel = require("../typedmodel").ArrayModel;

var MySubModel = qclass({
  $extend    : Model,
  $construct : function(id, title)
  {
    var converters = {
      "c1" : {
        fromFn: function(from, to) {
          to.set({
            id    : from.myId,
            title : from.myTitle
          });
        }
      },
      "c2" : {
        fromFn: function(from, to) {
          to.set({
            id    : from.id + from.name,
            title : from.title
          });
        }
      }
    };

    Model.call(this, {
      id    : { $type : "string", $pk : true },
      title : { $type : "string" }
    }, converters);

    if (id && title) {
      this.set({
        id    : id,
        title : title
      });
    }
  }
});

var MyModel = qclass({
  $extend : Model,
  $construct : function() {
    Model.call(this, {
      id       : { $type : "string", $default : "default", $pk : true },
      subModel : { $type : MySubModel                                 }
    });
  }
});

var MySubModelArray = qclass({
  $extend : ArrayModel,
  $construct : function() {
    ArrayModel.call(this, MySubModel);
  }
});

var MyModelWithArray = qclass({
  $extend : Model,
  $construct : function() {
    Model.call(this, {
      id        : { $type : "string", $default : "default", $pk : true },
      subModels : { $type : MySubModelArray                            }
    });
  }
});

var MySubModel1 = qclass({
  $extend : Model,
  $construct : function(id, title, name) {
    Model.call(this, {
      id    : { $type : "string", $pk : true },
      title : { $type : "string" },
      name  : { $type : "string" }
    });

    if (id && title && name) {
      this.set({
        id    : id,
        title : title,
        name  : name
      });
    }
  }
});

var MySubModel1Array = qclass({
  $extend : ArrayModel,
  $construct : function() {
    ArrayModel.call(this, MySubModel1);
  }
});

var MyModel1WithArray = qclass({
  $extend : Model,
  $construct : function() {
    Model.call(this, {
      id        : { $type : "string", $default : "default", $pk : true },
      subModels : { $type : MySubModel1Array                           }
    });
  }
});

describe("Test Generic Model", function()
{
  it("should create a model", function()
  {
    var mySubModel = new MySubModel();
    mySubModel.set({
      id    : "123",
      title : "Title"
    });

    var myModel = new MyModel();
    myModel.set({
      subModel : mySubModel
    });

    expect(_.isEqual({
      id : "default"
    }, myModel.primaryKey())).toBe(true);

    expect(_.isEqual({
      id       : "default",
      subModel : {
        id    : "123",
        title : "Title"
      }
    }, myModel.toJSON())).toBe(true);
  });

  it("should complain about primitive", function()
  {
    var mySubModel = new MySubModel();
    expect(function() {
      mySubModel.set({
        id    : "123",
        title : 123
        });
    }).toThrow(new Error("Invalid attribute title"));
  });

  it("should complain about model", function()
  {
    var myModel = new MyModel();
    expect(function()
    {
      myModel.set({
        subModel : new MySubModel1()
      });
    }).toThrow(new Error("Invalid attribute subModel"));
  });

  it("should work with converters", function()
  {
    var mySubModel = new MySubModel();
    mySubModel.fromC1({
      myId    : "123",
      myTitle : "Something"
    });

    expect(_.isEqual({
      id    : "123",
      title : "Something"
    }, mySubModel.toJSON())).toBe(true);

    mySubModel.fromC2({
      id      : "123",
      name    : "test",
      title   : "abc",
      myTitle : "Something"
    });

    expect(_.isEqual({
      id    : "123test",
      title : "abc"
    }, mySubModel.toJSON())).toBe(true);
  });

  it("should support array models", function()
  {
    var mySubModelArray = new MySubModelArray();
    mySubModelArray.append(new MySubModel("123", "Test"));
    mySubModelArray.append(new MySubModel("456", "Test1"));

    var modelWithArray = new MyModelWithArray();
    modelWithArray.set({
      id        : "1",
      subModels : mySubModelArray
    });

    expect(_.isEqual(modelWithArray.toJSON(), {
      id        : "1",
      subModels : [{
        id    : "123",
        title : "Test"
      }, {
        id    : "456",
        title : "Test1"
      }]
    })).toBe(true);

    expect(_.isEqual(modelWithArray.primaryKey(), {
      id : "1"
    })).toBe(true);
  });

  it("should copy a model", function()
  {
    var mySubModel = new MySubModel();
    mySubModel.set({
      id    : "123",
      title : "Title"
    });

    var myModel = new MyModel();
    myModel.set({
      subModel : mySubModel
    });

    var modelCopy = myModel.copy();
    expect(_.isEqual({
      id       : "default",
      subModel : {
        id    : "123",
        title : "Title"
      }
    }, modelCopy.toJSON())).toBe(true);
  });

  it("should copy an array model", function()
  {
    var mySubModelArray = new MySubModelArray();
    mySubModelArray.append(new MySubModel("123", "Test"));
    mySubModelArray.append(new MySubModel("456", "Test1"));

    var modelWithArray = new MyModelWithArray();
    modelWithArray.set({
      id        : "1",
      subModels : mySubModelArray
    });

    var modelCopy = modelWithArray.copy();
    expect(_.isEqual(modelCopy.toJSON(), {
      id        : "1",
      subModels : [{
        id    : "123",
        title : "Test"
      }, {
        id    : "456",
        title : "Test1"
      }]
    })).toBe(true);
  });

  it("should diff a model", function()
  {
    var mySubModel = new MySubModel();
    mySubModel.set({
      id    : "123",
      title : "Title"
    });

    var mySubModel1 = new MySubModel();
    mySubModel1.set({
      id    : "123",
      title : "Titl"
    });

    var myModel = new MyModel();
    myModel.set({
      id : "test",
      subModel : mySubModel
    });

    var myModel1 = new MyModel();
    myModel1.set({
      id : "test",
      subModel : mySubModel1
    });

    var modelDiff = myModel.diff(myModel1);

    expect(_.isEqual(modelDiff.toJSON, {
      id       : "test",
      subModel : {
        id    : "123",
        title : "Titl"
      }
    }));

    myModel1.set({ subModel : mySubModel });
    modelDiff = myModel.diff(myModel1);
    expect(modelDiff).toBeNull();

    mySubModel1.set({ title : "Title" });
    myModel1.set({ subModel : mySubModel1 });
    modelDiff = myModel.diff(myModel1);
    expect(modelDiff).toBeNull();

    var mySubModelArray = new MySubModel1Array();
    mySubModelArray.append(new MySubModel1("123", "Test", "leo"));
    mySubModelArray.append(new MySubModel1("456", "Test1", "bispo"));

    var modelWithArray = new MyModel1WithArray();
    modelWithArray.set({
      id        : "1",
      subModels : mySubModelArray
    });

    var modelCopy = modelWithArray.copy();
    modelCopy.get("subModels").get(0).set({ title : "Brasil" });
    modelCopy.get("subModels").append(new MySubModel1("89", "Test1", "abc"));
    mySubModelArray.append(new MySubModel1("789", "Test1", "t"));

    modelDiff = modelWithArray.diff(modelCopy);

    expect(_.isEqual(modelDiff.toJSON(), {
      id        : "1",
      subModels : [{
        id    : "123",
        title : "Brasil"
      }, {
        id    : "89",
        title : "Test1",
        name  : "abc"
      }, {
        id      : "789",
        deleted : true
      }]
    })).toBe(true);
  });

  it("should test isEqual() functionality of a model", function() {
    var mySubModel1 = new MySubModel();
    mySubModel1.set({
      id      : "secondary",
      title   : "SubModel"
    });

    var mySubModel2 = new MySubModel();
    mySubModel2.set({
      id      : "secondary",
      title   : "SubModel"
    });

    var model1 = new MyModel();
    model1.set({
      id       : "primary",
      subModel : mySubModel1
    });

    var model2 = new MyModel();
    model2.set({
      id       : "primary",
      subModel : mySubModel2
    });

    var equals = model1.isEqual(model2);
    expect(equals).toBe(true);

    model2.get("subModel").set({ title: "NewSubModelTitle"});

    var expectedDiff = new MyModel();
    var sModel = new MySubModel();

    sModel.set({
      id       : "secondary",
      title    : "NewSubModelTitle"
    });

    expectedDiff.set({
      id       : "primary",
      subModel : sModel
    });

    var modelDiff = model1.diff(model2);
    var eqDiff = modelDiff.isEqual(expectedDiff);

    expect(eqDiff).toBe(true);
  });

  it("should not assert equal differences from both sides", function() {
    var mySubModel1 = new MySubModel();
    mySubModel1.set({
      id       : "secondary",
      title    : "sModel1"
    });

    var mySubModel2 = new MySubModel();
    mySubModel2.set({
      id       : "secondary",
      title    : "sModel2"
    });

    var model1 = new MyModel();
    model1.set({
      id       : "primary",
      subModel : mySubModel1
    });

    var model2 = new MyModel();
    model2.set({
      id       : "primary",
      subModel : mySubModel2
    });

    var modelDiff1 = model1.diff(model2);
    var modelDiff2 = model2.diff(model1);

    expect(modelDiff1.isEqual(modelDiff2)).toBe(false);
  });

  it("should test model array differences", function() {
    var subModelArray = new MySubModelArray();
    subModelArray.append(new MySubModel("1", "submodel1"));
    subModelArray.append(new MySubModel("2", "submodel2"));

    var arrayModel1 = new MyModelWithArray();
    arrayModel1.set({
      id        : "primary",
      subModels :  subModelArray
    });

    var arrayModel2 = new MyModelWithArray();

    var subModelArrayCopy = new MySubModelArray();
    subModelArrayCopy.append(new MySubModel("1", "submodel1"));
    subModelArrayCopy.append(new MySubModel("2", "title"));

    arrayModel2.set({
      id        : "primary",
      subModels : subModelArrayCopy
    });

    var sModelArray = new MySubModelArray();
    sModelArray.append(new MySubModel("2", "title"));

    var expectedDiff = new MyModelWithArray();
    expectedDiff.set({
      id         : "primary",
      subModels  : sModelArray
    });

    var diff = arrayModel1.diff(arrayModel2);
    expect(_.isEqual(diff.toJSON(), expectedDiff.toJSON())).toBe(true);
  });
});
