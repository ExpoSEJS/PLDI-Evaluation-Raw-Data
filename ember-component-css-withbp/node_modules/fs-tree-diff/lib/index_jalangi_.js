J$.iids = {"8":[11,15,11,28],"9":[1,20,1,27],"10":[64,9,64,40],"16":[15,32,15,53],"17":[1,28,1,32],"18":[68,21,68,36],"24":[12,9,12,25],"25":[1,20,1,33],"26":[68,38,68,41],"32":[64,9,64,40],"33":[1,20,1,33],"40":[69,13,69,46],"41":[1,20,1,33],"42":[68,38,68,41],"48":[68,21,68,36],"49":[2,26,2,38],"50":[79,22,79,48],"56":[76,9,76,52],"57":[2,26,2,45],"58":[79,52,79,80],"64":[76,9,76,52],"65":[2,26,2,45],"66":[79,84,79,110],"72":[79,22,79,80],"73":[2,26,2,45],"74":[106,13,106,45],"80":[79,22,79,110],"81":[3,1,3,13],"82":[113,13,113,44],"88":[80,9,80,19],"89":[3,1,3,14],"90":[117,18,117,41],"96":[90,29,90,41],"97":[4,11,4,18],"98":[120,16,120,62],"104":[89,13,89,24],"105":[4,19,4,37],"112":[107,29,107,41],"113":[4,11,4,38],"120":[106,13,106,45],"121":[4,11,4,38],"128":[120,16,120,62],"129":[4,11,4,38],"136":[118,9,118,15],"137":[5,12,5,19],"145":[5,20,5,28],"153":[5,12,5,29],"161":[5,12,5,29],"169":[5,12,5,29],"177":[6,13,6,20],"185":[6,21,6,30],"193":[6,13,6,31],"201":[6,13,6,31],"209":[6,13,6,31],"217":[7,13,7,20],"225":[7,21,7,28],"233":[7,13,7,29],"241":[7,30,7,44],"249":[7,13,7,45],"257":[7,13,7,45],"265":[7,13,7,45],"273":[8,31,8,32],"281":[8,31,8,32],"289":[8,31,8,32],"297":[9,1,9,7],"305":[9,18,9,24],"313":[9,1,9,24],"321":[9,1,9,25],"329":[11,15,11,22],"337":[11,26,11,28],"345":[11,15,11,28],"353":[11,5,11,29],"361":[12,9,12,16],"369":[12,9,12,25],"377":[13,9,13,13],"385":[13,24,13,31],"393":[13,24,13,40],"401":[13,9,13,40],"409":[13,9,13,41],"417":[15,9,15,13],"425":[15,28,15,31],"433":[15,32,15,39],"441":[15,32,15,47],"449":[15,51,15,53],"457":[15,55,15,69],"465":[15,24,15,70],"473":[15,9,15,70],"481":[15,9,15,71],"489":[10,1,17,2],"497":[10,1,17,2],"505":[10,1,17,2],"513":[18,1,18,7],"521":[19,19,19,24],"529":[20,20,20,25],"537":[20,26,20,30],"545":[20,32,20,33],"553":[20,35,20,58],"561":[20,16,20,59],"569":[20,16,20,59],"577":[20,9,20,60],"585":[19,29,21,6],"593":[19,29,21,6],"601":[19,29,21,6],"609":[19,29,21,6],"617":[19,19,21,7],"619":[19,19,19,28],"625":[19,19,21,7],"633":[19,19,21,7],"641":[22,16,22,22],"649":[22,34,22,41],"657":[22,23,22,43],"665":[22,12,22,44],"673":[22,12,22,44],"681":[22,5,22,45],"689":[18,20,23,2],"697":[18,20,23,2],"705":[18,20,23,2],"713":[18,20,23,2],"721":[18,20,23,2],"729":[18,1,23,2],"737":[18,1,23,3],"745":[24,1,24,7],"753":[25,16,25,22],"761":[25,34,25,41],"769":[25,23,25,43],"777":[25,12,25,44],"785":[25,12,25,44],"793":[25,5,25,45],"801":[24,22,26,2],"809":[24,22,26,2],"817":[24,22,26,2],"825":[24,22,26,2],"833":[24,1,26,2],"841":[24,1,26,3],"849":[27,1,27,7],"857":[28,16,28,22],"865":[28,35,28,38],"873":[28,23,28,40],"881":[28,12,28,41],"889":[28,12,28,41],"897":[28,5,28,42],"905":[27,22,29,2],"913":[27,22,29,2],"921":[27,22,29,2],"929":[27,22,29,2],"937":[27,1,29,2],"945":[27,1,29,3],"953":[30,1,30,7],"961":[30,23,30,29],"969":[30,23,30,39],"977":[30,41,30,47],"985":[32,16,32,20],"993":[32,16,32,28],"1001":[32,16,32,33],"1009":[32,16,32,33],"1017":[32,9,32,34],"1025":[31,10,33,6],"1033":[31,10,33,6],"1041":[31,10,33,6],"1049":[30,49,34,2],"1057":[30,1,34,3],"1059":[30,1,30,22],"1065":[30,1,34,4],"1073":[35,1,35,7],"1081":[35,1,35,17],"1089":[36,5,36,9],"1097":[36,5,36,17],"1105":[36,26,36,28],"1113":[36,30,36,37],"1121":[36,5,36,38],"1123":[36,5,36,25],"1129":[36,5,36,39],"1137":[35,28,37,2],"1145":[35,28,37,2],"1153":[35,28,37,2],"1161":[35,28,37,2],"1169":[35,28,37,2],"1177":[35,1,37,2],"1185":[35,1,37,3],"1193":[38,1,38,7],"1201":[38,1,38,17],"1209":[39,12,39,18],"1217":[39,31,39,35],"1225":[39,31,39,43],"1233":[39,55,39,66],"1241":[39,55,39,74],"1249":[39,31,39,75],"1251":[39,31,39,54],"1257":[39,12,39,76],"1259":[39,12,39,30],"1265":[39,12,39,76],"1273":[39,5,39,77],"1281":[38,31,40,2],"1289":[38,31,40,2],"1297":[38,31,40,2],"1305":[38,31,40,2],"1313":[38,1,40,2],"1321":[38,1,40,3],"1329":[41,1,41,7],"1337":[41,1,41,17],"1345":[42,12,42,18],"1353":[42,31,42,35],"1361":[42,31,42,43],"1369":[42,57,42,68],"1377":[42,57,42,76],"1385":[42,31,42,77],"1387":[42,31,42,56],"1393":[42,12,42,78],"1395":[42,12,42,30],"1401":[42,12,42,78],"1409":[42,5,42,79],"1417":[41,33,43,2],"1425":[41,33,43,2],"1433":[41,33,43,2],"1441":[41,33,43,2],"1449":[41,1,43,2],"1457":[41,1,43,3],"1465":[44,1,44,7],"1473":[44,1,44,17],"1481":[45,20,45,24],"1489":[45,25,45,29],"1497":[45,25,45,37],"1505":[45,16,45,38],"1513":[45,16,45,38],"1521":[45,16,45,38],"1529":[46,24,46,28],"1537":[46,40,46,51],"1545":[46,24,46,52],"1547":[46,24,46,39],"1553":[46,24,46,52],"1561":[46,24,46,52],"1569":[47,21,47,32],"1577":[47,44,47,48],"1585":[47,21,47,49],"1587":[47,21,47,43],"1593":[47,21,47,49],"1601":[47,21,47,49],"1609":[48,5,48,9],"1617":[48,24,48,36],"1625":[48,24,48,44],"1633":[48,5,48,45],"1635":[48,5,48,23],"1641":[48,5,48,46],"1649":[49,21,49,25],"1657":[49,48,49,62],"1665":[49,64,49,66],"1673":[49,21,49,67],"1675":[49,21,49,47],"1681":[49,21,49,67],"1689":[49,21,49,67],"1697":[50,5,50,9],"1705":[50,21,50,30],"1713":[50,21,50,38],"1721":[50,5,50,39],"1723":[50,5,50,20],"1729":[50,5,50,40],"1737":[51,21,51,25],"1745":[51,47,51,62],"1753":[51,64,51,66],"1761":[51,21,51,67],"1763":[51,21,51,46],"1769":[51,21,51,67],"1777":[51,21,51,67],"1785":[52,19,52,23],"1793":[52,37,52,48],"1801":[52,19,52,49],"1803":[52,19,52,36],"1809":[54,13,54,21],"1817":[55,13,55,18],"1825":[55,13,55,31],"1833":[56,13,56,18],"1841":[53,16,57,10],"1849":[53,16,57,10],"1857":[53,9,57,11],"1865":[52,54,58,6],"1873":[52,54,58,6],"1881":[52,54,58,6],"1889":[52,54,58,6],"1897":[52,19,58,7],"1899":[52,19,52,53],"1905":[52,19,58,7],"1913":[52,19,58,7],"1921":[59,12,59,21],"1929":[59,29,59,38],"1937":[59,12,59,39],"1939":[59,12,59,28],"1945":[59,47,59,54],"1953":[59,12,59,55],"1955":[59,12,59,46],"1961":[59,12,59,55],"1969":[59,5,59,56],"1977":[44,35,60,2],"1985":[44,35,60,2],"1993":[44,35,60,2],"2001":[44,35,60,2],"2009":[44,35,60,2],"2017":[44,35,60,2],"2025":[44,35,60,2],"2033":[44,35,60,2],"2041":[44,35,60,2],"2049":[44,35,60,2],"2057":[44,1,60,2],"2065":[44,1,60,3],"2073":[61,1,61,7],"2081":[61,1,61,17],"2089":[62,16,62,20],"2097":[62,34,62,42],"2105":[62,16,62,43],"2107":[62,16,62,33],"2113":[62,16,62,51],"2121":[62,16,62,58],"2129":[62,16,62,58],"2137":[62,16,62,58],"2145":[63,20,63,28],"2153":[63,42,63,46],"2161":[63,20,63,47],"2163":[63,20,63,41],"2169":[63,20,63,55],"2177":[63,20,63,62],"2185":[63,20,63,62],"2193":[63,20,63,62],"2201":[64,9,64,13],"2209":[64,9,64,20],"2217":[64,25,64,33],"2225":[64,25,64,40],"2233":[65,19,65,24],"2241":[65,25,65,31],"2249":[65,15,65,32],"2257":[65,15,65,32],"2265":[65,9,65,33],"2273":[67,19,67,21],"2281":[67,19,67,21],"2289":[67,19,67,21],"2297":[68,18,68,19],"2305":[68,18,68,19],"2313":[68,18,68,19],"2321":[68,21,68,22],"2329":[68,25,68,29],"2337":[68,25,68,36],"2353":[68,38,68,39],"2361":[68,38,68,41],"2377":[69,13,69,24],"2385":[69,25,69,29],"2393":[69,30,69,31],"2401":[69,25,69,32],"2409":[69,34,69,42],"2417":[69,43,69,44],"2425":[69,34,69,45],"2433":[69,13,69,46],"2441":[70,13,70,20],"2449":[70,26,70,30],"2457":[70,31,70,32],"2465":[70,26,70,33],"2473":[70,13,70,34],"2475":[70,13,70,25],"2481":[70,13,70,35],"2489":[73,12,73,19],"2497":[73,12,73,19],"2505":[73,5,73,20],"2513":[61,33,74,2],"2521":[61,33,74,2],"2529":[61,33,74,2],"2537":[61,33,74,2],"2545":[61,33,74,2],"2553":[61,33,74,2],"2561":[61,33,74,2],"2569":[61,33,74,2],"2577":[61,1,74,2],"2585":[61,1,74,3],"2593":[76,9,76,15],"2601":[76,9,76,29],"2603":[76,9,76,27],"2609":[76,33,76,38],"2617":[76,33,76,52],"2619":[76,33,76,50],"2625":[77,16,77,21],"2633":[77,16,77,21],"2641":[77,9,77,22],"2649":[79,22,79,28],"2657":[79,22,79,33],"2665":[79,38,79,43],"2673":[79,38,79,48],"2681":[79,52,79,58],"2689":[79,52,79,64],"2697":[79,69,79,74],"2705":[79,69,79,80],"2713":[79,84,79,90],"2721":[79,84,79,95],"2729":[79,100,79,105],"2737":[79,100,79,110],"2745":[79,22,79,110],"2753":[79,22,79,110],"2761":[80,9,80,19],"2769":[81,9,81,14],"2777":[81,15,81,60],"2785":[81,62,81,68],"2793":[81,70,81,75],"2801":[81,9,81,76],"2809":[81,9,81,77],"2817":[83,12,83,22],"2825":[83,12,83,22],"2833":[83,5,83,23],"2841":[75,1,84,2],"2849":[75,1,84,2],"2857":[75,1,84,2],"2865":[75,1,84,2],"2873":[75,1,84,2],"2881":[86,22,86,28],"2889":[86,34,86,38],"2897":[86,34,86,47],"2905":[86,22,86,48],"2907":[86,22,86,33],"2913":[86,22,86,48],"2921":[86,22,86,48],"2929":[87,27,87,37],"2937":[88,21,88,25],"2945":[88,21,88,34],"2953":[88,35,88,44],"2961":[88,21,88,45],"2969":[88,21,88,45],"2977":[88,21,88,45],"2985":[89,13,89,18],"2993":[89,13,89,24],"3001":[90,29,90,34],"3009":[90,29,90,41],"3017":[90,44,90,52],"3025":[90,55,90,62],"3033":[90,29,90,62],"3041":[90,29,90,62],"3049":[91,13,91,18],"3057":[91,27,91,32],"3065":[91,13,91,32],"3073":[91,13,91,33],"3081":[92,13,92,16],"3089":[93,17,93,26],"3097":[94,17,94,21],"3105":[94,35,94,44],"3113":[94,17,94,45],"3115":[94,17,94,34],"3121":[95,17,95,22],"3129":[95,17,95,28],"3137":[92,22,96,14],"3145":[92,13,96,15],"3147":[92,13,92,21],"3153":[92,13,96,16],"3161":[98,16,98,19],"3169":[98,16,98,19],"3177":[98,9,98,20],"3185":[87,45,99,6],"3193":[87,45,99,6],"3201":[87,45,99,6],"3209":[87,45,99,6],"3217":[87,45,99,6],"3225":[87,45,99,6],"3233":[87,45,99,6],"3241":[99,8,99,10],"3249":[87,27,99,11],"3251":[87,27,87,44],"3257":[87,27,99,11],"3265":[87,27,99,11],"3273":[100,12,100,15],"3281":[100,23,100,38],"3289":[100,12,100,39],"3291":[100,12,100,22],"3297":[100,12,100,39],"3305":[100,5,100,40],"3313":[85,1,101,2],"3321":[85,1,101,2],"3329":[85,1,101,2],"3337":[85,1,101,2],"3345":[85,1,101,2],"3353":[85,1,101,2],"3361":[103,22,103,28],"3369":[103,34,103,38],"3377":[103,34,103,47],"3385":[103,22,103,48],"3387":[103,22,103,33],"3393":[103,22,103,48],"3401":[103,22,103,48],"3409":[104,29,104,39],"3417":[105,21,105,25],"3425":[105,21,105,34],"3433":[105,35,105,44],"3441":[105,21,105,45],"3449":[105,21,105,45],"3457":[105,21,105,45],"3465":[106,13,106,18],"3473":[106,13,106,28],"3481":[106,33,106,37],"3489":[106,33,106,45],"3497":[107,29,107,34],"3505":[107,29,107,41],"3513":[107,44,107,52],"3521":[107,55,107,62],"3529":[107,29,107,62],"3537":[107,29,107,62],"3545":[108,13,108,16],"3553":[109,17,109,26],"3561":[110,17,110,21],"3569":[110,35,110,44],"3577":[110,17,110,45],"3579":[110,17,110,34],"3585":[111,17,111,26],"3593":[108,22,112,14],"3601":[108,13,112,15],"3603":[108,13,108,21],"3609":[108,13,112,16],"3617":[113,20,113,24],"3625":[113,20,113,33],"3633":[113,34,113,43],"3641":[113,13,113,45],"3649":[115,16,115,19],"3657":[115,16,115,19],"3665":[115,9,115,20],"3673":[104,47,116,6],"3681":[104,47,116,6],"3689":[104,47,116,6],"3697":[104,47,116,6],"3705":[104,47,116,6],"3713":[104,47,116,6],"3721":[104,47,116,6],"3729":[116,8,116,10],"3737":[104,29,116,11],"3739":[104,29,104,46],"3745":[104,29,116,11],"3753":[104,29,116,11],"3761":[117,18,117,22],"3769":[117,18,117,27],"3777":[117,32,117,41],"3785":[117,18,117,41],"3793":[117,18,117,41],"3801":[118,9,118,15],"3809":[119,16,119,19],"3817":[119,27,119,44],"3825":[119,16,119,45],"3827":[119,16,119,26],"3833":[119,16,119,45],"3841":[119,9,119,46],"3849":[120,16,120,33],"3857":[120,16,120,40],"3865":[120,45,120,55],"3873":[120,45,120,62],"3881":[121,9,121,13],"3889":[121,26,121,30],"3897":[121,26,121,38],"3905":[121,9,121,38],"3913":[121,9,121,39],"3921":[122,16,122,19],"3929":[122,27,122,44],"3937":[122,16,122,45],"3939":[122,16,122,26],"3945":[122,16,122,45],"3953":[122,9,122,46],"3961":[124,16,124,19],"3969":[124,27,124,44],"3977":[124,16,124,45],"3979":[124,16,124,26],"3985":[124,16,124,45],"3993":[124,9,124,46],"4001":[102,1,126,2],"4009":[102,1,126,2],"4017":[102,1,126,2],"4025":[102,1,126,2],"4033":[102,1,126,2],"4041":[102,1,126,2],"4049":[102,1,126,2],"4057":[1,1,126,2],"4065":[1,1,126,2],"4073":[1,1,126,2],"4081":[1,1,126,2],"4089":[1,1,126,2],"4097":[1,1,126,2],"4105":[1,1,126,2],"4113":[1,1,126,2],"4121":[10,1,17,2],"4129":[1,1,126,2],"4137":[75,1,84,2],"4145":[1,1,126,2],"4153":[85,1,101,2],"4161":[1,1,126,2],"4169":[102,1,126,2],"4177":[1,1,126,2],"4185":[12,5,16,6],"4193":[10,1,17,2],"4201":[10,1,17,2],"4209":[19,29,21,6],"4217":[19,29,21,6],"4225":[18,20,23,2],"4233":[18,20,23,2],"4241":[24,22,26,2],"4249":[24,22,26,2],"4257":[27,22,29,2],"4265":[27,22,29,2],"4273":[31,10,33,6],"4281":[31,10,33,6],"4289":[35,28,37,2],"4297":[35,28,37,2],"4305":[38,31,40,2],"4313":[38,31,40,2],"4321":[41,33,43,2],"4329":[41,33,43,2],"4337":[52,54,58,6],"4345":[52,54,58,6],"4353":[44,35,60,2],"4361":[44,35,60,2],"4369":[64,5,66,6],"4377":[69,9,71,10],"4385":[68,5,72,6],"4393":[68,5,72,6],"4401":[61,33,74,2],"4409":[61,33,74,2],"4417":[76,5,78,6],"4425":[80,5,82,6],"4433":[75,1,84,2],"4441":[75,1,84,2],"4449":[90,29,90,62],"4457":[89,9,97,10],"4465":[87,45,99,6],"4473":[87,45,99,6],"4481":[85,1,101,2],"4489":[85,1,101,2],"4497":[107,29,107,62],"4505":[106,9,114,10],"4513":[104,47,116,6],"4521":[104,47,116,6],"4529":[120,12,125,6],"4537":[118,5,125,6],"4545":[102,1,126,2],"4553":[102,1,126,2],"4561":[1,1,126,2],"4569":[1,1,126,2],"nBranches":34,"originalCodeFileName":"/home/blake/ExpoSE/Targets/ember-component-css-withbp/node_modules/fs-tree-diff/lib/index.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/ember-component-css-withbp/node_modules/fs-tree-diff/lib/index_jalangi_.js","code":"'use strict';\n\n/* global Set:true */\n\nvar Set = require('fast-ordered-set');\nvar Tree = require('./tree');\nvar Entry = require('./entry');\nvar debug = require('debug')('fs-tree-diff');\n\nvar ARBITRARY_START_OF_TIME = 0;\n\nmodule.exports = FSTree;\n\nfunction FSTree(options) {\n  options = options || {};\n\n  if (options._entries) {\n    this.entries = options._entries;\n  } else {\n    this.entries = new Set(options.entries || [], 'relativePath');\n  }\n}\n\nFSTree.fromPaths = function(paths) {\n  var entries = paths.map(function(path) {\n    return new Entry(path, 0, ARBITRARY_START_OF_TIME);\n  });\n\n  return new FSTree({\n    entries: entries,\n  });\n};\n\n\nFSTree.fromEntries = function(entries) {\n  return new FSTree({\n    entries: entries\n  });\n};\n\nFSTree._fromOwnSet = function(set) {\n  return new FSTree({ _entries: set });\n};\n\nObject.defineProperty(FSTree.prototype, 'size', {\n  get: function() {\n    return this.entries.size;\n  }\n});\n\nFSTree.prototype.forEach = function (fn, context) {\n  this.entries.forEach(fn, context);\n};\n\nFSTree.prototype.difference = function(otherFSTree) {\n  return FSTree._fromOwnSet(this.entries.difference(otherFSTree.entries));\n};\n\nFSTree.prototype.intersection = function(otherFSTree) {\n  return FSTree._fromOwnSet(this.entries.intersection(otherFSTree.entries));\n};\n\nFSTree.prototype.calculatePatch = function (otherFSTree) {\n  // TODO: algorithimic complexity here isn't ideal. Future work can reduce\n  // that cost. Today, the FS IO operations outweigh the cost, even with a\n  // naive implementation\n  var tree = new Tree(this.entries);\n\n  var fsRemoveTree = this.difference(otherFSTree);\n  var fsAddTree = otherFSTree.difference(this);\n\n  // TODO: removeEntries should be combined with the postOrderDepthReducer and return removeOps\n  tree.removeEntries(fsRemoveTree.entries);\n  var removeOps = tree.postOrderDepthReducer(reduceRemovals, []);\n\n  // TODO: addEntries should be combined with th  preOrderDepthReducer and return addOps\n  tree.addEntries(fsAddTree.entries);\n  var createOps = tree.preOrderDepthReducer(reduceAdditions, []);\n\n  var changes = this._findChanges(otherFSTree).map(function(entry) {\n    return ['change', entry.relativePath, entry];\n  });\n\n  return removeOps.concat(createOps).concat(changes);\n};\n\nFSTree.prototype._findChanges = function(nextTree) {\n  var next = this.intersection(nextTree).entries.values;\n  var previous = nextTree.intersection(this).entries.values;\n\n  if (next.length !== previous.length) {\n    throw new Error('EWUT');\n  }\n\n  var changes = [];\n  for (var i = 0; i < next.length; i++) {\n    if (needsUpdate(next[i], previous[i])) {\n      changes.push(next[i]);\n    }\n  }\n\n  return changes;\n};\n\nfunction needsUpdate(before, after) {\n  if (before.isDirectory() && after.isDirectory()) {\n    return false;\n  }\n\n  var invalidate = before.size !== after.size ||\n         before.mtime !== after.mtime ||\n         before.mode !== after.mode;\n\n  if (invalidate) {\n    debug('invalidation reason: \\nbefore %o\\n after %o', before, after);\n  }\n\n  return invalidate;\n}\n\nfunction reduceAdditions(tree, acc) {\n  var childNames = Object.keys(tree.children);\n\n  var createdChildren = childNames.reduce(function (ops, childName) {\n    var child = tree.children[childName];\n    if (child.isNew) {\n      var operation = child.isFile ? 'create' : 'mkdir';\n      child.isNew = false;\n      ops.push([\n        operation,\n        tree.pathForChild(childName),\n        child.entry\n      ]);\n    }\n\n    return ops;\n  }, []);\n\n  return acc.concat(createdChildren);\n}\n\nfunction reduceRemovals(tree, acc) {\n  var childNames = Object.keys(tree.children);\n\n  var removeChildrenOps = childNames.reduce(function (ops, childName) {\n    var child = tree.children[childName];\n\n    if (child.operation === Tree.RMToken) {\n      var operation = child.isFile ? 'unlink' : 'rmdir';\n      ops.push([\n        operation,\n        tree.pathForChild(childName),\n        undefined\n      ]);\n\n      delete tree.children[childName];\n    }\n\n    return ops;\n  }, []);\n\n  var isRoot = tree.path === undefined;\n\n  if (isRoot) {\n    return acc.concat(removeChildrenOps);\n  }  else if (removeChildrenOps.length === childNames.length) {\n    tree.operation = Tree.RMToken;\n    return acc.concat(removeChildrenOps);\n  } else {\n    return acc.concat(removeChildrenOps);\n  }\n}\n"};
jalangiLabel284:
    while (true) {
        try {
            J$.Se(4057, '/home/blake/ExpoSE/Targets/ember-component-css-withbp/node_modules/fs-tree-diff/lib/index_jalangi_.js', '/home/blake/ExpoSE/Targets/ember-component-css-withbp/node_modules/fs-tree-diff/lib/index.js');
            function FSTree(options) {
                jalangiLabel267:
                    while (true) {
                        try {
                            J$.Fe(489, arguments.callee, this, arguments);
                            arguments = J$.N(497, 'arguments', arguments, 4);
                            options = J$.N(505, 'options', options, 4);
                            J$.X1(353, options = J$.W(345, 'options', J$.C(8, J$.R(329, 'options', options, 0)) ? J$._() : J$.T(337, {}, 11, false), options, 0));
                            if (J$.X1(4185, J$.C(24, J$.G(369, J$.R(361, 'options', options, 0), '_entries', 0)))) {
                                J$.X1(409, J$.P(401, J$.R(377, 'this', this, 0), 'entries', J$.G(393, J$.R(385, 'options', options, 0), '_entries', 0), 0));
                            } else {
                                J$.X1(481, J$.P(473, J$.R(417, 'this', this, 0), 'entries', J$.F(465, J$.R(425, 'Set', Set, 1), 1)(J$.C(16, J$.G(441, J$.R(433, 'options', options, 0), 'entries', 0)) ? J$._() : J$.T(449, [], 10, false), J$.T(457, 'relativePath', 21, false)), 0));
                            }
                        } catch (J$e) {
                            J$.Ex(4193, J$e);
                        } finally {
                            if (J$.Fr(4201))
                                continue jalangiLabel267;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function needsUpdate(before, after) {
                jalangiLabel279:
                    while (true) {
                        try {
                            J$.Fe(2841, arguments.callee, this, arguments);
                            arguments = J$.N(2849, 'arguments', arguments, 4);
                            before = J$.N(2857, 'before', before, 4);
                            after = J$.N(2865, 'after', after, 4);
                            J$.N(2873, 'invalidate', invalidate, 0);
                            if (J$.X1(4417, J$.C(64, J$.C(56, J$.M(2601, J$.R(2593, 'before', before, 0), 'isDirectory', 0)()) ? J$.M(2617, J$.R(2609, 'after', after, 0), 'isDirectory', 0)() : J$._()))) {
                                return J$.X1(2641, J$.Rt(2633, J$.T(2625, false, 23, false)));
                            }
                            var invalidate = J$.X1(2753, J$.W(2745, 'invalidate', J$.C(80, J$.C(72, J$.B(50, '!==', J$.G(2657, J$.R(2649, 'before', before, 0), 'size', 0), J$.G(2673, J$.R(2665, 'after', after, 0), 'size', 0), 0)) ? J$._() : J$.B(58, '!==', J$.G(2689, J$.R(2681, 'before', before, 0), 'mtime', 0), J$.G(2705, J$.R(2697, 'after', after, 0), 'mtime', 0), 0)) ? J$._() : J$.B(66, '!==', J$.G(2721, J$.R(2713, 'before', before, 0), 'mode', 0), J$.G(2737, J$.R(2729, 'after', after, 0), 'mode', 0), 0), invalidate, 1));
                            if (J$.X1(4425, J$.C(88, J$.R(2761, 'invalidate', invalidate, 0)))) {
                                J$.X1(2809, J$.F(2801, J$.R(2769, 'debug', debug, 1), 0)(J$.T(2777, 'invalidation reason: \nbefore %o\n after %o', 21, false), J$.R(2785, 'before', before, 0), J$.R(2793, 'after', after, 0)));
                            }
                            return J$.X1(2833, J$.Rt(2825, J$.R(2817, 'invalidate', invalidate, 0)));
                        } catch (J$e) {
                            J$.Ex(4433, J$e);
                        } finally {
                            if (J$.Fr(4441))
                                continue jalangiLabel279;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function reduceAdditions(tree, acc) {
                jalangiLabel281:
                    while (true) {
                        try {
                            J$.Fe(3313, arguments.callee, this, arguments);
                            arguments = J$.N(3321, 'arguments', arguments, 4);
                            tree = J$.N(3329, 'tree', tree, 4);
                            acc = J$.N(3337, 'acc', acc, 4);
                            J$.N(3345, 'childNames', childNames, 0);
                            J$.N(3353, 'createdChildren', createdChildren, 0);
                            var childNames = J$.X1(2921, J$.W(2913, 'childNames', J$.M(2905, J$.R(2881, 'Object', Object, 2), 'keys', 0)(J$.G(2897, J$.R(2889, 'tree', tree, 0), 'children', 0)), childNames, 1));
                            var createdChildren = J$.X1(3265, J$.W(3257, 'createdChildren', J$.M(3249, J$.R(2929, 'childNames', childNames, 0), 'reduce', 0)(J$.T(3233, function (ops, childName) {
                                jalangiLabel280:
                                    while (true) {
                                        try {
                                            J$.Fe(3185, arguments.callee, this, arguments);
                                            arguments = J$.N(3193, 'arguments', arguments, 4);
                                            ops = J$.N(3201, 'ops', ops, 4);
                                            childName = J$.N(3209, 'childName', childName, 4);
                                            J$.N(3217, 'child', child, 0);
                                            J$.N(3225, 'operation', operation, 0);
                                            var child = J$.X1(2977, J$.W(2969, 'child', J$.G(2961, J$.G(2945, J$.R(2937, 'tree', tree, 0), 'children', 0), J$.R(2953, 'childName', childName, 0), 4), child, 1));
                                            if (J$.X1(4457, J$.C(104, J$.G(2993, J$.R(2985, 'child', child, 0), 'isNew', 0)))) {
                                                var operation = J$.X1(3041, J$.W(3033, 'operation', J$.X1(4449, J$.C(96, J$.G(3009, J$.R(3001, 'child', child, 0), 'isFile', 0))) ? J$.T(3017, 'create', 21, false) : J$.T(3025, 'mkdir', 21, false), operation, 1));
                                                J$.X1(3073, J$.P(3065, J$.R(3049, 'child', child, 0), 'isNew', J$.T(3057, false, 23, false), 0));
                                                J$.X1(3153, J$.M(3145, J$.R(3081, 'ops', ops, 0), 'push', 0)(J$.T(3137, [
                                                    J$.R(3089, 'operation', operation, 0),
                                                    J$.M(3113, J$.R(3097, 'tree', tree, 0), 'pathForChild', 0)(J$.R(3105, 'childName', childName, 0)),
                                                    J$.G(3129, J$.R(3121, 'child', child, 0), 'entry', 0)
                                                ], 10, false)));
                                            }
                                            return J$.X1(3177, J$.Rt(3169, J$.R(3161, 'ops', ops, 0)));
                                        } catch (J$e) {
                                            J$.Ex(4465, J$e);
                                        } finally {
                                            if (J$.Fr(4473))
                                                continue jalangiLabel280;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 3185), J$.T(3241, [], 10, false)), createdChildren, 1));
                            return J$.X1(3305, J$.Rt(3297, J$.M(3289, J$.R(3273, 'acc', acc, 0), 'concat', 0)(J$.R(3281, 'createdChildren', createdChildren, 0))));
                        } catch (J$e) {
                            J$.Ex(4481, J$e);
                        } finally {
                            if (J$.Fr(4489))
                                continue jalangiLabel281;
                            else
                                return J$.Ra();
                        }
                    }
            }
            function reduceRemovals(tree, acc) {
                jalangiLabel283:
                    while (true) {
                        try {
                            J$.Fe(4001, arguments.callee, this, arguments);
                            arguments = J$.N(4009, 'arguments', arguments, 4);
                            tree = J$.N(4017, 'tree', tree, 4);
                            acc = J$.N(4025, 'acc', acc, 4);
                            J$.N(4033, 'childNames', childNames, 0);
                            J$.N(4041, 'removeChildrenOps', removeChildrenOps, 0);
                            J$.N(4049, 'isRoot', isRoot, 0);
                            var childNames = J$.X1(3401, J$.W(3393, 'childNames', J$.M(3385, J$.R(3361, 'Object', Object, 2), 'keys', 0)(J$.G(3377, J$.R(3369, 'tree', tree, 0), 'children', 0)), childNames, 1));
                            var removeChildrenOps = J$.X1(3753, J$.W(3745, 'removeChildrenOps', J$.M(3737, J$.R(3409, 'childNames', childNames, 0), 'reduce', 0)(J$.T(3721, function (ops, childName) {
                                jalangiLabel282:
                                    while (true) {
                                        try {
                                            J$.Fe(3673, arguments.callee, this, arguments);
                                            arguments = J$.N(3681, 'arguments', arguments, 4);
                                            ops = J$.N(3689, 'ops', ops, 4);
                                            childName = J$.N(3697, 'childName', childName, 4);
                                            J$.N(3705, 'child', child, 0);
                                            J$.N(3713, 'operation', operation, 0);
                                            var child = J$.X1(3457, J$.W(3449, 'child', J$.G(3441, J$.G(3425, J$.R(3417, 'tree', tree, 0), 'children', 0), J$.R(3433, 'childName', childName, 0), 4), child, 1));
                                            if (J$.X1(4505, J$.C(120, J$.B(74, '===', J$.G(3473, J$.R(3465, 'child', child, 0), 'operation', 0), J$.G(3489, J$.R(3481, 'Tree', Tree, 1), 'RMToken', 0), 0)))) {
                                                var operation = J$.X1(3537, J$.W(3529, 'operation', J$.X1(4497, J$.C(112, J$.G(3505, J$.R(3497, 'child', child, 0), 'isFile', 0))) ? J$.T(3513, 'unlink', 21, false) : J$.T(3521, 'rmdir', 21, false), operation, 1));
                                                J$.X1(3609, J$.M(3601, J$.R(3545, 'ops', ops, 0), 'push', 0)(J$.T(3593, [
                                                    J$.R(3553, 'operation', operation, 0),
                                                    J$.M(3577, J$.R(3561, 'tree', tree, 0), 'pathForChild', 0)(J$.R(3569, 'childName', childName, 0)),
                                                    J$.T(3585, undefined, 24, false)
                                                ], 10, false)));
                                                J$.X1(3641, J$.B(82, 'delete', J$.G(3625, J$.R(3617, 'tree', tree, 0), 'children', 0), J$.R(3633, 'childName', childName, 0), 4));
                                            }
                                            return J$.X1(3665, J$.Rt(3657, J$.R(3649, 'ops', ops, 0)));
                                        } catch (J$e) {
                                            J$.Ex(4513, J$e);
                                        } finally {
                                            if (J$.Fr(4521))
                                                continue jalangiLabel282;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 3673), J$.T(3729, [], 10, false)), removeChildrenOps, 1));
                            var isRoot = J$.X1(3793, J$.W(3785, 'isRoot', J$.B(90, '===', J$.G(3769, J$.R(3761, 'tree', tree, 0), 'path', 0), J$.T(3777, undefined, 24, false), 0), isRoot, 1));
                            if (J$.X1(4537, J$.C(136, J$.R(3801, 'isRoot', isRoot, 0)))) {
                                return J$.X1(3841, J$.Rt(3833, J$.M(3825, J$.R(3809, 'acc', acc, 0), 'concat', 0)(J$.R(3817, 'removeChildrenOps', removeChildrenOps, 0))));
                            } else if (J$.X1(4529, J$.C(128, J$.B(98, '===', J$.G(3857, J$.R(3849, 'removeChildrenOps', removeChildrenOps, 0), 'length', 0), J$.G(3873, J$.R(3865, 'childNames', childNames, 0), 'length', 0), 0)))) {
                                J$.X1(3913, J$.P(3905, J$.R(3881, 'tree', tree, 0), 'operation', J$.G(3897, J$.R(3889, 'Tree', Tree, 1), 'RMToken', 0), 0));
                                return J$.X1(3953, J$.Rt(3945, J$.M(3937, J$.R(3921, 'acc', acc, 0), 'concat', 0)(J$.R(3929, 'removeChildrenOps', removeChildrenOps, 0))));
                            } else {
                                return J$.X1(3993, J$.Rt(3985, J$.M(3977, J$.R(3961, 'acc', acc, 0), 'concat', 0)(J$.R(3969, 'removeChildrenOps', removeChildrenOps, 0))));
                            }
                        } catch (J$e) {
                            J$.Ex(4545, J$e);
                        } finally {
                            if (J$.Fr(4553))
                                continue jalangiLabel283;
                            else
                                return J$.Ra();
                        }
                    }
            }
            J$.N(4065, '__secret__S$', __secret__S$, 0);
            J$.N(4073, '__secret__traits__', __secret__traits__, 0);
            J$.N(4081, 'Set', Set, 0);
            J$.N(4089, 'Tree', Tree, 0);
            J$.N(4097, 'Entry', Entry, 0);
            J$.N(4105, 'debug', debug, 0);
            J$.N(4113, 'ARBITRARY_START_OF_TIME', ARBITRARY_START_OF_TIME, 0);
            FSTree = J$.N(4129, 'FSTree', J$.T(4121, FSTree, 12, false, 489), 0);
            needsUpdate = J$.N(4145, 'needsUpdate', J$.T(4137, needsUpdate, 12, false, 2841), 0);
            reduceAdditions = J$.N(4161, 'reduceAdditions', J$.T(4153, reduceAdditions, 12, false, 3313), 0);
            reduceRemovals = J$.N(4177, 'reduceRemovals', J$.T(4169, reduceRemovals, 12, false, 4001), 0);
            var __secret__S$ = J$.X1(41, J$.W(33, '__secret__S$', J$.F(25, J$.R(9, 'require', require, 2), 0)(J$.T(17, 'S$', 21, false)), __secret__S$, 3));
            var __secret__traits__ = J$.X1(73, J$.W(65, '__secret__traits__', J$.G(57, J$.R(49, '__secret__S$', __secret__S$, 1), 'Traits', 0), __secret__traits__, 3));
            J$.X1(89, J$.T(81, 'use strict', 21, false));
            var Set = J$.X1(129, J$.W(121, 'Set', J$.F(113, J$.R(97, 'require', require, 2), 0)(J$.T(105, 'fast-ordered-set', 21, false)), Set, 3));
            var Tree = J$.X1(169, J$.W(161, 'Tree', J$.F(153, J$.R(137, 'require', require, 2), 0)(J$.T(145, './tree', 21, false)), Tree, 3));
            var Entry = J$.X1(209, J$.W(201, 'Entry', J$.F(193, J$.R(177, 'require', require, 2), 0)(J$.T(185, './entry', 21, false)), Entry, 3));
            var debug = J$.X1(265, J$.W(257, 'debug', J$.F(249, J$.F(233, J$.R(217, 'require', require, 2), 0)(J$.T(225, 'debug', 21, false)), 0)(J$.T(241, 'fs-tree-diff', 21, false)), debug, 3));
            var ARBITRARY_START_OF_TIME = J$.X1(289, J$.W(281, 'ARBITRARY_START_OF_TIME', J$.T(273, 0, 22, false), ARBITRARY_START_OF_TIME, 3));
            J$.X1(321, J$.P(313, J$.R(297, 'module', module, 2), 'exports', J$.R(305, 'FSTree', FSTree, 1), 0));
            J$.X1(737, J$.P(729, J$.R(513, 'FSTree', FSTree, 1), 'fromPaths', J$.T(721, function (paths) {
                jalangiLabel269:
                    while (true) {
                        try {
                            J$.Fe(689, arguments.callee, this, arguments);
                            arguments = J$.N(697, 'arguments', arguments, 4);
                            paths = J$.N(705, 'paths', paths, 4);
                            J$.N(713, 'entries', entries, 0);
                            var entries = J$.X1(633, J$.W(625, 'entries', J$.M(617, J$.R(521, 'paths', paths, 0), 'map', 0)(J$.T(609, function (path) {
                                jalangiLabel268:
                                    while (true) {
                                        try {
                                            J$.Fe(585, arguments.callee, this, arguments);
                                            arguments = J$.N(593, 'arguments', arguments, 4);
                                            path = J$.N(601, 'path', path, 4);
                                            return J$.X1(577, J$.Rt(569, J$.F(561, J$.R(529, 'Entry', Entry, 1), 1)(J$.R(537, 'path', path, 0), J$.T(545, 0, 22, false), J$.R(553, 'ARBITRARY_START_OF_TIME', ARBITRARY_START_OF_TIME, 1))));
                                        } catch (J$e) {
                                            J$.Ex(4209, J$e);
                                        } finally {
                                            if (J$.Fr(4217))
                                                continue jalangiLabel268;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 585)), entries, 1));
                            return J$.X1(681, J$.Rt(673, J$.F(665, J$.R(641, 'FSTree', FSTree, 1), 1)(J$.T(657, {
                                entries: J$.R(649, 'entries', entries, 0)
                            }, 11, false))));
                        } catch (J$e) {
                            J$.Ex(4225, J$e);
                        } finally {
                            if (J$.Fr(4233))
                                continue jalangiLabel269;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 689), 0));
            J$.X1(841, J$.P(833, J$.R(745, 'FSTree', FSTree, 1), 'fromEntries', J$.T(825, function (entries) {
                jalangiLabel270:
                    while (true) {
                        try {
                            J$.Fe(801, arguments.callee, this, arguments);
                            arguments = J$.N(809, 'arguments', arguments, 4);
                            entries = J$.N(817, 'entries', entries, 4);
                            return J$.X1(793, J$.Rt(785, J$.F(777, J$.R(753, 'FSTree', FSTree, 1), 1)(J$.T(769, {
                                entries: J$.R(761, 'entries', entries, 0)
                            }, 11, false))));
                        } catch (J$e) {
                            J$.Ex(4241, J$e);
                        } finally {
                            if (J$.Fr(4249))
                                continue jalangiLabel270;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 801), 0));
            J$.X1(945, J$.P(937, J$.R(849, 'FSTree', FSTree, 1), '_fromOwnSet', J$.T(929, function (set) {
                jalangiLabel271:
                    while (true) {
                        try {
                            J$.Fe(905, arguments.callee, this, arguments);
                            arguments = J$.N(913, 'arguments', arguments, 4);
                            set = J$.N(921, 'set', set, 4);
                            return J$.X1(897, J$.Rt(889, J$.F(881, J$.R(857, 'FSTree', FSTree, 1), 1)(J$.T(873, {
                                _entries: J$.R(865, 'set', set, 0)
                            }, 11, false))));
                        } catch (J$e) {
                            J$.Ex(4257, J$e);
                        } finally {
                            if (J$.Fr(4265))
                                continue jalangiLabel271;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 905), 0));
            J$.X1(1065, J$.M(1057, J$.R(953, 'Object', Object, 2), 'defineProperty', 0)(J$.G(969, J$.R(961, 'FSTree', FSTree, 1), 'prototype', 0), J$.T(977, 'size', 21, false), J$.T(1049, {
                get: J$.T(1041, function () {
                    jalangiLabel272:
                        while (true) {
                            try {
                                J$.Fe(1025, arguments.callee, this, arguments);
                                arguments = J$.N(1033, 'arguments', arguments, 4);
                                return J$.X1(1017, J$.Rt(1009, J$.G(1001, J$.G(993, J$.R(985, 'this', this, 0), 'entries', 0), 'size', 0)));
                            } catch (J$e) {
                                J$.Ex(4273, J$e);
                            } finally {
                                if (J$.Fr(4281))
                                    continue jalangiLabel272;
                                else
                                    return J$.Ra();
                            }
                        }
                }, 12, false, 1025)
            }, 11, false)));
            J$.X1(1185, J$.P(1177, J$.G(1081, J$.R(1073, 'FSTree', FSTree, 1), 'prototype', 0), 'forEach', J$.T(1169, function (fn, context) {
                jalangiLabel273:
                    while (true) {
                        try {
                            J$.Fe(1137, arguments.callee, this, arguments);
                            arguments = J$.N(1145, 'arguments', arguments, 4);
                            fn = J$.N(1153, 'fn', fn, 4);
                            context = J$.N(1161, 'context', context, 4);
                            J$.X1(1129, J$.M(1121, J$.G(1097, J$.R(1089, 'this', this, 0), 'entries', 0), 'forEach', 0)(J$.R(1105, 'fn', fn, 0), J$.R(1113, 'context', context, 0)));
                        } catch (J$e) {
                            J$.Ex(4289, J$e);
                        } finally {
                            if (J$.Fr(4297))
                                continue jalangiLabel273;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1137), 0));
            J$.X1(1321, J$.P(1313, J$.G(1201, J$.R(1193, 'FSTree', FSTree, 1), 'prototype', 0), 'difference', J$.T(1305, function (otherFSTree) {
                jalangiLabel274:
                    while (true) {
                        try {
                            J$.Fe(1281, arguments.callee, this, arguments);
                            arguments = J$.N(1289, 'arguments', arguments, 4);
                            otherFSTree = J$.N(1297, 'otherFSTree', otherFSTree, 4);
                            return J$.X1(1273, J$.Rt(1265, J$.M(1257, J$.R(1209, 'FSTree', FSTree, 1), '_fromOwnSet', 0)(J$.M(1249, J$.G(1225, J$.R(1217, 'this', this, 0), 'entries', 0), 'difference', 0)(J$.G(1241, J$.R(1233, 'otherFSTree', otherFSTree, 0), 'entries', 0)))));
                        } catch (J$e) {
                            J$.Ex(4305, J$e);
                        } finally {
                            if (J$.Fr(4313))
                                continue jalangiLabel274;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1281), 0));
            J$.X1(1457, J$.P(1449, J$.G(1337, J$.R(1329, 'FSTree', FSTree, 1), 'prototype', 0), 'intersection', J$.T(1441, function (otherFSTree) {
                jalangiLabel275:
                    while (true) {
                        try {
                            J$.Fe(1417, arguments.callee, this, arguments);
                            arguments = J$.N(1425, 'arguments', arguments, 4);
                            otherFSTree = J$.N(1433, 'otherFSTree', otherFSTree, 4);
                            return J$.X1(1409, J$.Rt(1401, J$.M(1393, J$.R(1345, 'FSTree', FSTree, 1), '_fromOwnSet', 0)(J$.M(1385, J$.G(1361, J$.R(1353, 'this', this, 0), 'entries', 0), 'intersection', 0)(J$.G(1377, J$.R(1369, 'otherFSTree', otherFSTree, 0), 'entries', 0)))));
                        } catch (J$e) {
                            J$.Ex(4321, J$e);
                        } finally {
                            if (J$.Fr(4329))
                                continue jalangiLabel275;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1417), 0));
            J$.X1(2065, J$.P(2057, J$.G(1473, J$.R(1465, 'FSTree', FSTree, 1), 'prototype', 0), 'calculatePatch', J$.T(2049, function (otherFSTree) {
                jalangiLabel277:
                    while (true) {
                        try {
                            J$.Fe(1977, arguments.callee, this, arguments);
                            arguments = J$.N(1985, 'arguments', arguments, 4);
                            otherFSTree = J$.N(1993, 'otherFSTree', otherFSTree, 4);
                            J$.N(2001, 'tree', tree, 0);
                            J$.N(2009, 'fsRemoveTree', fsRemoveTree, 0);
                            J$.N(2017, 'fsAddTree', fsAddTree, 0);
                            J$.N(2025, 'removeOps', removeOps, 0);
                            J$.N(2033, 'createOps', createOps, 0);
                            J$.N(2041, 'changes', changes, 0);
                            var tree = J$.X1(1521, J$.W(1513, 'tree', J$.F(1505, J$.R(1481, 'Tree', Tree, 1), 1)(J$.G(1497, J$.R(1489, 'this', this, 0), 'entries', 0)), tree, 1));
                            var fsRemoveTree = J$.X1(1561, J$.W(1553, 'fsRemoveTree', J$.M(1545, J$.R(1529, 'this', this, 0), 'difference', 0)(J$.R(1537, 'otherFSTree', otherFSTree, 0)), fsRemoveTree, 1));
                            var fsAddTree = J$.X1(1601, J$.W(1593, 'fsAddTree', J$.M(1585, J$.R(1569, 'otherFSTree', otherFSTree, 0), 'difference', 0)(J$.R(1577, 'this', this, 0)), fsAddTree, 1));
                            J$.X1(1641, J$.M(1633, J$.R(1609, 'tree', tree, 0), 'removeEntries', 0)(J$.G(1625, J$.R(1617, 'fsRemoveTree', fsRemoveTree, 0), 'entries', 0)));
                            var removeOps = J$.X1(1689, J$.W(1681, 'removeOps', J$.M(1673, J$.R(1649, 'tree', tree, 0), 'postOrderDepthReducer', 0)(J$.R(1657, 'reduceRemovals', reduceRemovals, 1), J$.T(1665, [], 10, false)), removeOps, 1));
                            J$.X1(1729, J$.M(1721, J$.R(1697, 'tree', tree, 0), 'addEntries', 0)(J$.G(1713, J$.R(1705, 'fsAddTree', fsAddTree, 0), 'entries', 0)));
                            var createOps = J$.X1(1777, J$.W(1769, 'createOps', J$.M(1761, J$.R(1737, 'tree', tree, 0), 'preOrderDepthReducer', 0)(J$.R(1745, 'reduceAdditions', reduceAdditions, 1), J$.T(1753, [], 10, false)), createOps, 1));
                            var changes = J$.X1(1913, J$.W(1905, 'changes', J$.M(1897, J$.M(1801, J$.R(1785, 'this', this, 0), '_findChanges', 0)(J$.R(1793, 'otherFSTree', otherFSTree, 0)), 'map', 0)(J$.T(1889, function (entry) {
                                jalangiLabel276:
                                    while (true) {
                                        try {
                                            J$.Fe(1865, arguments.callee, this, arguments);
                                            arguments = J$.N(1873, 'arguments', arguments, 4);
                                            entry = J$.N(1881, 'entry', entry, 4);
                                            return J$.X1(1857, J$.Rt(1849, J$.T(1841, [
                                                J$.T(1809, 'change', 21, false),
                                                J$.G(1825, J$.R(1817, 'entry', entry, 0), 'relativePath', 0),
                                                J$.R(1833, 'entry', entry, 0)
                                            ], 10, false)));
                                        } catch (J$e) {
                                            J$.Ex(4337, J$e);
                                        } finally {
                                            if (J$.Fr(4345))
                                                continue jalangiLabel276;
                                            else
                                                return J$.Ra();
                                        }
                                    }
                            }, 12, false, 1865)), changes, 1));
                            return J$.X1(1969, J$.Rt(1961, J$.M(1953, J$.M(1937, J$.R(1921, 'removeOps', removeOps, 0), 'concat', 0)(J$.R(1929, 'createOps', createOps, 0)), 'concat', 0)(J$.R(1945, 'changes', changes, 0))));
                        } catch (J$e) {
                            J$.Ex(4353, J$e);
                        } finally {
                            if (J$.Fr(4361))
                                continue jalangiLabel277;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 1977), 0));
            J$.X1(2585, J$.P(2577, J$.G(2081, J$.R(2073, 'FSTree', FSTree, 1), 'prototype', 0), '_findChanges', J$.T(2569, function (nextTree) {
                jalangiLabel278:
                    while (true) {
                        try {
                            J$.Fe(2513, arguments.callee, this, arguments);
                            arguments = J$.N(2521, 'arguments', arguments, 4);
                            nextTree = J$.N(2529, 'nextTree', nextTree, 4);
                            J$.N(2537, 'next', next, 0);
                            J$.N(2545, 'previous', previous, 0);
                            J$.N(2553, 'changes', changes, 0);
                            J$.N(2561, 'i', i, 0);
                            var next = J$.X1(2137, J$.W(2129, 'next', J$.G(2121, J$.G(2113, J$.M(2105, J$.R(2089, 'this', this, 0), 'intersection', 0)(J$.R(2097, 'nextTree', nextTree, 0)), 'entries', 0), 'values', 0), next, 1));
                            var previous = J$.X1(2193, J$.W(2185, 'previous', J$.G(2177, J$.G(2169, J$.M(2161, J$.R(2145, 'nextTree', nextTree, 0), 'intersection', 0)(J$.R(2153, 'this', this, 0)), 'entries', 0), 'values', 0), previous, 1));
                            if (J$.X1(4369, J$.C(32, J$.B(10, '!==', J$.G(2209, J$.R(2201, 'next', next, 0), 'length', 0), J$.G(2225, J$.R(2217, 'previous', previous, 0), 'length', 0), 0)))) {
                                throw J$.X1(2265, J$.Th(2257, J$.F(2249, J$.R(2233, 'Error', Error, 2), 1)(J$.T(2241, 'EWUT', 21, false))));
                            }
                            var changes = J$.X1(2289, J$.W(2281, 'changes', J$.T(2273, [], 10, false), changes, 1));
                            for (var i = J$.X1(2313, J$.W(2305, 'i', J$.T(2297, 0, 22, false), i, 1)); J$.X1(4385, J$.C(48, J$.B(18, '<', J$.R(2321, 'i', i, 0), J$.G(2337, J$.R(2329, 'next', next, 0), 'length', 0), 0))); J$.X1(4393, J$.B(42, '-', i = J$.W(2361, 'i', J$.B(34, '+', J$.U(26, '+', J$.R(2353, 'i', i, 0)), J$.T(2345, 1, 22, false), 0), i, 0), J$.T(2369, 1, 22, false), 0))) {
                                if (J$.X1(4377, J$.C(40, J$.F(2433, J$.R(2377, 'needsUpdate', needsUpdate, 1), 0)(J$.G(2401, J$.R(2385, 'next', next, 0), J$.R(2393, 'i', i, 0), 4), J$.G(2425, J$.R(2409, 'previous', previous, 0), J$.R(2417, 'i', i, 0), 4))))) {
                                    J$.X1(2481, J$.M(2473, J$.R(2441, 'changes', changes, 0), 'push', 0)(J$.G(2465, J$.R(2449, 'next', next, 0), J$.R(2457, 'i', i, 0), 4)));
                                }
                            }
                            return J$.X1(2505, J$.Rt(2497, J$.R(2489, 'changes', changes, 0)));
                        } catch (J$e) {
                            J$.Ex(4401, J$e);
                        } finally {
                            if (J$.Fr(4409))
                                continue jalangiLabel278;
                            else
                                return J$.Ra();
                        }
                    }
            }, 12, false, 2513), 0));
        } catch (J$e) {
            J$.Ex(4561, J$e);
        } finally {
            if (J$.Sr(4569)) {
                J$.L();
                continue jalangiLabel284;
            } else {
                J$.L();
                break jalangiLabel284;
            }
        }
    }
// JALANGI DO NOT INSTRUMENT
