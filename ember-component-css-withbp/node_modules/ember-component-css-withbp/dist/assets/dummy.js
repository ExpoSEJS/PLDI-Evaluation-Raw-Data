/* jshint ignore:start */

/* jshint ignore:end */

define('dummy/acceptance/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    componentPath: Ember['default'].computed("model.component", function () {
      return "acceptance/tests/" + this.get("model.component");
    })
  });

});
define('dummy/acceptance/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.0-beta.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        }
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","component",[["get","componentPath"]],[]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/acceptance/tests/ampersand-self-selector/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: "ampersand-self"
  });

});
define('dummy/acceptance/tests/ampersand-self-selector/expectation', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    styles: {
      ".ampersand-self": {
        fontWeight: "bold"
      }
    }
  };

});
define('dummy/acceptance/tests/app-styles-in-assets/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: "app-wide"
  });

});
define('dummy/acceptance/tests/app-styles-in-assets/expectation', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    styles: {
      ".app-wide": {
        "background-color": "rgb(254, 82, 0)"
      }
    }
  };

});
define('dummy/acceptance/tests/component-self-selector/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: "component-self"
  });

});
define('dummy/acceptance/tests/component-self-selector/expectation', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    styles: {
      ".component-self": {
        fontWeight: "bold"
      }
    }
  };

});
define('dummy/acceptance/tests/descendant-namespacing/expectation', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    styles: {
      "[data-test-green]": {
        color: "rgb(0, 255, 0)"
      },

      "[data-test-black]": {
        color: "rgb(0, 0, 0)"
      },

      "[data-test-orange]": {
        color: "rgb(255, 127, 0)"
      }
    }
  };

});
define('dummy/acceptance/tests/descendant-namespacing/green-text/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.0-beta.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        }
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","colored");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        return morphs;
      },
      statements: [
        ["content","yield"]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/acceptance/tests/descendant-namespacing/orange-text/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.0-beta.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        }
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","colored");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        return morphs;
      },
      statements: [
        ["content","yield"]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/acceptance/tests/descendant-namespacing/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.0-beta.1",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"data-test-green","");
          var el2 = dom.createTextNode("text");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.0-beta.1",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"data-test-orange","");
          var el2 = dom.createTextNode("text");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.0-beta.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        }
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","colored");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"data-test-black","");
        var el3 = dom.createTextNode("text");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","acceptance/tests/descendant-namespacing/green-text",[],[],0,null],
        ["block","acceptance/tests/descendant-namespacing/orange-text",[],[],1,null]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('dummy/acceptance/tests/pod-component-in-components/expectation', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    styles: {
      ".location-explanation": {
        color: "rgb(0, 0, 255)"
      }
    }
  };

});
define('dummy/acceptance/tests/pod-component-in-components/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.0-beta.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        }
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","pod-component-in-components"]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/acceptance/tests/pod-component-in-pod/expectation', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    styles: {
      ".location-explanation": {
        color: "rgb(255, 0, 0)"
      }
    }
  };

});
define('dummy/acceptance/tests/pod-component-in-pod/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.0-beta.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        }
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","outer-pod/inner-pod/pod-component-in-pod"]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/acceptance/tests/pod-component-in-root/expectation', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    styles: {
      ".location-explanation": {
        color: "rgb(0, 255, 0)"
      }
    }
  };

});
define('dummy/acceptance/tests/pod-component-in-root/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.0-beta.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        }
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","pod-component-in-root"]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

  'use strict';

  Ember['default'].MODEL_FACTORY_INJECTIONS = true;

  var App = Ember['default'].Application.extend({
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix,
    Resolver: Resolver['default']
  });

  loadInitializers['default'](App, config['default'].modulePrefix);

  exports['default'] = App;

});
define('dummy/blueprints/component', ['exports', 'ember-component-css/blueprints/component'], function (exports, component) {

	'use strict';



	exports.default = component.default;

});
define('dummy/components/pod-component-in-components/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.0-beta.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        }
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","location-explanation");
        var el2 = dom.createTextNode("\n  This component lives in the ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("components");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" directory.\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {

  'use strict';

  var classify = Ember['default'].String.classify;

  exports['default'] = {
    name: "App Version",
    initialize: function initialize(container, application) {
      var appName = classify(application.toString());
      Ember['default'].libraries.register(appName, config['default'].APP.version);
    }
  };

});
define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (config['default'].exportApplicationGlobal !== false) {
      var value = config['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === "string") {
        globalName = value;
      } else {
        globalName = Ember['default'].String.classify(config['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: "export-application-global",

    initialize: initialize
  };

});
define('dummy/my-component/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.0-beta.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        }
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","foo");
        var el2 = dom.createTextNode("this is my ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","bar");
        var el3 = dom.createTextNode("component");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("!");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/outer-pod/inner-pod/pod-component-in-pod/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.0-beta.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        }
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","location-explanation");
        var el2 = dom.createTextNode("\n  This component lives inside a pod, in the ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("outer-pod/inner-pod");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" directory.\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/pod-component-in-root/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.0-beta.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        }
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","location-explanation");
        var el2 = dom.createTextNode("\n  This component lives in the root of the ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("podModulePrefix");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(", which for this app is ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("/app");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(".\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  var Router = Ember['default'].Router.extend({
    location: config['default'].locationType
  });

  Router.map(function () {
    this.route("acceptance", { path: "/acceptance/:component" });
  });

  exports['default'] = Router;

});
define('dummy/templates/application', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.0-beta.1",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        }
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","my-component"],
        ["content","outlet"]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/tests/acceptance/computed-styles-test', ['ember', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/config/environment'], function (Ember, qunit, startApp, Environment) {

  'use strict';

  var application;

  qunit.module("Acceptance - Computed Styles", {
    beforeEach: function beforeEach() {
      application = startApp['default']();
      application.registry.optionsForType("expectation", { instantiate: false });
    },

    afterEach: function afterEach() {
      Ember['default'].run(application, "destroy");
    }
  });

  Environment['default'].ACCEPTANCE_TESTS.forEach(function (name) {
    qunit.test(name, function (assert) {
      visit("/acceptance/" + name);

      andThen(function () {
        var $root = Ember['default'].$(application.rootElement);

        // Look up the expected styles for this test
        var expectation = application.registry.lookup("expectation:acceptance/tests/" + name);
        var selectors = Object.keys(expectation.styles);

        // Locate each element with an expected set of styles, and assert that it matches those styles
        selectors.forEach(function (selector) {
          var expectedStyles = expectation.styles[selector];
          var selectorMatches = $root.find(selector);

          // Ensure we're only working against a single element
          if (selectorMatches.length !== 1) {
            throw new Error("Invalid test: `" + selector + "` matches " + selectorMatches.length + " elements.");
          }

          // Calculate the styles applied to the given element, and then pluck the ones we care about
          var computedStyles = window.getComputedStyle(selectorMatches[0]);
          var interestingStyles = Ember['default'].getProperties(computedStyles, Object.keys(expectedStyles));

          assert.deepEqual(interestingStyles, expectedStyles);
        });
      });
    });
  });

});
define('dummy/tests/acceptance/computed-styles-test.jshint', function () {

  'use strict';

  module('JSHint - acceptance');
  test('acceptance/computed-styles-test.js should pass jshint', function() { 
    ok(true, 'acceptance/computed-styles-test.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/controller.jshint', function () {

  'use strict';

  module('JSHint - acceptance');
  test('acceptance/controller.js should pass jshint', function() { 
    ok(true, 'acceptance/controller.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/ampersand-self-selector/component.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/ampersand-self-selector');
  test('acceptance/tests/ampersand-self-selector/component.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/ampersand-self-selector/component.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/ampersand-self-selector/expectation.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/ampersand-self-selector');
  test('acceptance/tests/ampersand-self-selector/expectation.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/ampersand-self-selector/expectation.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/app-styles-in-assets/component.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/app-styles-in-assets');
  test('acceptance/tests/app-styles-in-assets/component.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/app-styles-in-assets/component.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/app-styles-in-assets/expectation.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/app-styles-in-assets');
  test('acceptance/tests/app-styles-in-assets/expectation.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/app-styles-in-assets/expectation.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/component-self-selector/component.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/component-self-selector');
  test('acceptance/tests/component-self-selector/component.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/component-self-selector/component.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/component-self-selector/expectation.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/component-self-selector');
  test('acceptance/tests/component-self-selector/expectation.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/component-self-selector/expectation.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/descendant-namespacing/expectation.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/descendant-namespacing');
  test('acceptance/tests/descendant-namespacing/expectation.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/descendant-namespacing/expectation.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/pod-component-in-components/expectation.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/pod-component-in-components');
  test('acceptance/tests/pod-component-in-components/expectation.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/pod-component-in-components/expectation.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/pod-component-in-pod/expectation.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/pod-component-in-pod');
  test('acceptance/tests/pod-component-in-pod/expectation.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/pod-component-in-pod/expectation.js should pass jshint.'); 
  });

});
define('dummy/tests/acceptance/tests/pod-component-in-root/expectation.jshint', function () {

  'use strict';

  module('JSHint - acceptance/tests/pod-component-in-root');
  test('acceptance/tests/pod-component-in-root/expectation.js should pass jshint', function() { 
    ok(true, 'acceptance/tests/pod-component-in-root/expectation.js should pass jshint.'); 
  });

});
define('dummy/tests/app.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('app.js should pass jshint', function() { 
    ok(true, 'app.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {

  'use strict';

  var resolver = Resolver['default'].create();

  resolver.namespace = {
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix
  };

  exports['default'] = resolver;

});
define('dummy/tests/helpers/resolver.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/resolver.js should pass jshint', function() { 
    ok(true, 'helpers/resolver.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/router', 'dummy/config/environment'], function (exports, Ember, Application, Router, config) {

  'use strict';



  exports['default'] = startApp;
  function startApp(attrs) {
    var application;

    var attributes = Ember['default'].merge({}, config['default'].APP);
    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    Ember['default'].run(function () {
      application = Application['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }

});
define('dummy/tests/helpers/start-app.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/start-app.js should pass jshint', function() { 
    ok(true, 'helpers/start-app.js should pass jshint.'); 
  });

});
define('dummy/tests/lib/component-css-preprocessor', function () {

  'use strict';

  /* jshint node: true */
  "use strict";

  var path = require("path");
  var expect = require("expect.js");
  var walkSync = require("walk-sync");
  var broccoli = require("broccoli");

  var ComponentCssPreprocessor = require("../../lib/component-css-preprocessor");

  describe("component-css-preprocessor", function () {
    var cssFixturePath = path.join(__dirname, "css_fixtures");
    var scssFixturePath = path.join(__dirname, "scss_fixtures");
    var addon = {
      podDir: function podDir() {
        return null;
      },
      pod: {
        lookup: Object.create(null)
      }
    };

    describe("constructor", function () {
      it("is named component-css and acquires the passed in options", function () {
        var plugin = new ComponentCssPreprocessor({ addon: addon });

        expect(plugin.name).to.eql("component-css");
        expect(plugin.options).to.eql({ addon: addon });
      });
    });
  });

});
define('dummy/tests/lib/component-css-preprocessor.jshint', function () {

  'use strict';

  module('JSHint - lib');
  test('lib/component-css-preprocessor.js should pass jshint', function() { 
    ok(true, 'lib/component-css-preprocessor.js should pass jshint.'); 
  });

});
define('dummy/tests/router.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('router.js should pass jshint', function() { 
    ok(true, 'router.js should pass jshint.'); 
  });

});
define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {

	'use strict';

	ember_qunit.setResolver(resolver['default']);

});
define('dummy/tests/test-helper.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('test-helper.js should pass jshint', function() { 
    ok(true, 'test-helper.js should pass jshint.'); 
  });

});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({"name":"ember-component-css-withbp","version":"0.1.7.6624334d"});
}

/* jshint ignore:end */
//# sourceMappingURL=dummy.map