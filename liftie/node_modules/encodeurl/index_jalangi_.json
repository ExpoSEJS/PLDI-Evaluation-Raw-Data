{"9":[1,20,1,27],"17":[1,28,1,32],"25":[1,20,1,33],"33":[1,20,1,33],"41":[1,20,1,33],"49":[2,26,2,38],"57":[2,26,2,45],"65":[2,26,2,45],"73":[2,26,2,45],"81":[3,1,3,13],"89":[3,1,3,14],"97":[4,1,4,7],"105":[4,18,4,27],"113":[4,1,4,27],"121":[4,1,4,28],"129":[5,27,5,131],"137":[5,27,5,131],"145":[5,27,5,131],"153":[6,39,6,113],"161":[6,39,6,113],"169":[6,39,6,113],"177":[7,40,7,52],"185":[7,40,7,52],"193":[7,40,7,52],"201":[9,12,9,18],"209":[9,19,9,22],"217":[9,12,9,23],"225":[9,32,9,63],"233":[9,65,9,97],"241":[9,12,9,98],"243":[9,12,9,31],"249":[9,107,9,126],"257":[9,128,9,137],"265":[9,12,9,138],"267":[9,12,9,106],"273":[9,12,9,138],"281":[9,5,9,139],"289":[8,1,10,2],"297":[8,1,10,2],"305":[8,1,10,2],"313":[1,1,10,2],"321":[1,1,10,2],"329":[1,1,10,2],"337":[1,1,10,2],"345":[1,1,10,2],"353":[1,1,10,2],"361":[8,1,10,2],"369":[1,1,10,2],"377":[8,1,10,2],"385":[8,1,10,2],"393":[1,1,10,2],"401":[1,1,10,2],"nBranches":0,"originalCodeFileName":"/home/blake/ExpoSE/Targets/liftie/node_modules/encodeurl/index.js","instrumentedCodeFileName":"/home/blake/ExpoSE/Targets/liftie/node_modules/encodeurl/index_jalangi_.js","code":"/*!\n * encodeurl\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = encodeUrl\n\n/**\n * RegExp to match non-URL code points, *after* encoding (i.e. not including \"%\")\n * and including invalid escape sequences.\n * @private\n */\n\nvar ENCODE_CHARS_REGEXP = /(?:[^\\x21\\x25\\x26-\\x3B\\x3D\\x3F-\\x5B\\x5D\\x5F\\x61-\\x7A\\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]))+/g\n\n/**\n * RegExp to match unmatched surrogate pair.\n * @private\n */\n\nvar UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\\uD800-\\uDBFF])[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF]([^\\uDC00-\\uDFFF]|$)/g\n\n/**\n * String to replace unmatched surrogate pair with.\n * @private\n */\n\nvar UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\\uFFFD$2'\n\n/**\n * Encode a URL to a percent-encoded form, excluding already-encoded sequences.\n *\n * This function will take an already-encoded URL and encode all the non-URL\n * code points. This function will not encode the \"%\" character unless it is\n * not part of a valid sequence (`%20` will be left as-is, but `%foo` will\n * be encoded as `%25foo`).\n *\n * This encode is meant to be \"safe\" and does not throw errors. It will try as\n * hard as it can to properly encode the given URL, including replacing any raw,\n * unpaired surrogate pairs with the Unicode replacement character prior to\n * encoding.\n *\n * @param {string} url\n * @return {string}\n * @public\n */\n\nfunction encodeUrl (url) {\n  return String(url)\n    .replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE)\n    .replace(ENCODE_CHARS_REGEXP, encodeURI)\n}\n"}