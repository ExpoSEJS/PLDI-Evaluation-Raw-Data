/root/Targets/starfish
└─┬ starfish@0.1.1 
  ├── colors@0.6.0-1 
  ├─┬ commander@1.1.1 
  │ └── keypress@0.1.0 
  ├── iconv-lite@0.2.7 
  ├── is-utf8@0.2.0 
  ├─┬ juicer@0.6.5-stable 
  │ ├─┬ optimist@0.3.7 
  │ │ └── wordwrap@0.0.3 
  │ └── uglify-js@1.2.6 
  ├── mkdirp@0.3.4 
  └─┬ uglify-js@2.2.5 
    └─┬ source-map@0.1.43 
      └── amdefine@1.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/starfish/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0454 took 3.1018s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

/**
* 命令集合
*/
var program = require('commander'),
	path = require('path'),
	fs = require('fs'),
	cwd = process.cwd(),
	util = require('util'),
	join = path.join,
	mkdir = require('mkdirp'),
	Utils = require('../lib/utils.js'),
	Config = require('../lib/config.js'),
	resourcePath = '../resource/';
	
program
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .usage('[options] [path]')
  .option('-v, --version', 'version info')
  .option('-c, --create [path]', 'create test system directory and files at specified path')
  .option('-r, --runtest [path]', 'run unit test at specified path');	

program.name = 'ut';

// 初始化测试环境(定义项目根目录,找到/创建tests目录并生成测试所需的文件)
program
.command('init [path]')
.description('initialize client-side unittest enviroment at [path] or current path')
.action(function(p){
	if (!p) {
		p = cwd;
	} else {
		if (!fs.existsSync(p)) {
			console.log('Path: ' + p.cyan + ' doesn\'t exist!');
			process.exit(0);
		}
	}
	var init = require('../lib/init.js');
	init.init(p);
});

// 设置Starfish的源代码目录名
program
.command('src <src name>')
.description('Set source directory name')
.action(function(src){
	Config.set('SRC', src);
	console.log('\n'+ 'You have set the ' + 'SRC'.cyan + ' as ' + src.magenta.bold + '\n');
});

// 在指定目录或已指定的项目目录生成测试文件 
program.on('create', function(p){
	p = !p ? Config.getRoot():p;
	var gen = require('../lib/generator.js');
	gen(p);
});	

// 在指定目录或当前目录执行单元测试
program.on('runtest', function(p) {
	p = !p ? Config.getRoot():p;
	var run = require('../lib/run.js');
	run(p);
});
	
program.parse(process.argv);			
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
