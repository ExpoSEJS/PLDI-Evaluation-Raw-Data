/root/Targets/export-resume-to-html
└─┬ export-resume-to-html@0.0.3 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  └─┬ npmi@0.0.10 
    └─┬ npm@1.4.29 
      ├── abbrev@1.0.5 
      ├── ansi@0.3.0 
      ├── ansicolors@0.3.2 
      ├── ansistyles@0.1.3 
      ├── archy@0.0.2 
      ├── block-stream@0.0.7 
      ├── char-spinner@1.0.1 
      ├── child-process-close@0.1.1 
      ├── chmodr@0.1.0 
      ├── chownr@0.0.1 
      ├── cmd-shim@2.0.0  (git://github.com/othiym23/cmd-shim#12de64ca97f45ac600910092f19afacc3d5376dd)
      ├─┬ columnify@1.2.1 
      │ ├─┬ strip-ansi@1.0.0 
      │ │ └── ansi-regex@0.2.1 
      │ └─┬ wcwidth@1.0.0 
      │   └─┬ defaults@1.0.0 
      │     └── clone@0.1.18 
      ├── editor@0.1.0 
      ├── fstream@1.0.2 
      ├─┬ fstream-npm@1.0.0 
      │ └── fstream-ignore@1.0.1 
      ├── github-url-from-git@1.4.0 
      ├── github-url-from-username-repo@1.0.0 
      ├── glob@4.0.5 
      ├── graceful-fs@3.0.2 
      ├── inflight@1.0.1 
      ├── inherits@2.0.1 
      ├── ini@1.2.1 
      ├─┬ init-package-json@1.0.0 
      │ └── promzard@0.2.2 
      ├── lockfile@1.0.0 
      ├── lru-cache@2.5.0 
      ├─┬ minimatch@1.0.0 
      │ └── sigmund@1.0.0 
      ├─┬ mkdirp@0.5.0 
      │ └── minimist@0.0.8 
      ├── node-gyp@1.0.1 
      ├── nopt@3.0.1 
      ├── npm-cache-filename@1.0.1 
      ├── npm-install-checks@1.0.2 
      ├── npm-registry-client@2.0.7 
      ├── npm-user-validate@0.1.0 
      ├─┬ npmconf@1.1.8 
      │ └─┬ config-chain@1.1.8 
      │   └── proto-list@1.2.3 
      ├── npmlog@0.1.1 
      ├── once@1.3.0 
      ├── opener@1.3.0 
      ├── osenv@0.1.0 
      ├── path-is-inside@1.0.1 
      ├─┬ read@1.0.5 
      │ └── mute-stream@0.0.4 
      ├─┬ read-installed@2.0.5 
      │ └── util-extend@1.0.1 
      ├─┬ read-package-json@1.2.7 
      │ └── normalize-package-data@1.0.1 
      ├─┬ request@2.42.0 
      │ ├── aws-sign2@0.5.0 
      │ ├─┬ bl@0.9.1 
      │ │ └─┬ readable-stream@1.0.31 
      │ │   ├── core-util-is@1.0.1 
      │ │   ├── isarray@0.0.1 
      │ │   └── string_decoder@0.10.31 
      │ ├── caseless@0.6.0 
      │ ├── forever-agent@0.5.2 
      │ ├─┬ form-data@0.1.4 
      │ │ ├── async@0.9.0 
      │ │ ├─┬ combined-stream@0.0.5 
      │ │ │ └── delayed-stream@0.0.5 
      │ │ └── mime@1.2.11 
      │ ├─┬ hawk@1.1.1 
      │ │ ├── boom@0.4.2 
      │ │ ├── cryptiles@0.2.2 
      │ │ ├── hoek@0.9.1 
      │ │ └── sntp@0.2.4 
      │ ├─┬ http-signature@0.10.0 
      │ │ ├── asn1@0.1.11 
      │ │ ├── assert-plus@0.1.2 
      │ │ └── ctype@0.5.2 
      │ ├── json-stringify-safe@5.0.0 
      │ ├── mime-types@1.0.2 
      │ ├── node-uuid@1.4.1 
      │ ├── oauth-sign@0.4.0 
      │ ├── qs@1.2.2 
      │ ├── stringstream@0.0.4 
      │ ├─┬ tough-cookie@0.12.1 
      │ │ └── punycode@1.3.1 
      │ └── tunnel-agent@0.4.0 
      ├── retry@0.6.0 
      ├── rimraf@2.2.8 
      ├── semver@2.3.0 
      ├─┬ sha@1.2.4 
      │ └─┬ readable-stream@1.0.34 
      │   ├── core-util-is@1.0.2 
      │   ├── isarray@0.0.1 
      │   └── string_decoder@0.10.31 
      ├── slide@1.1.6 
      ├── sorted-object@1.0.0 
      ├── tar@1.0.1 
      ├── text-table@0.2.0 
      ├── uid-number@0.0.5 
      └── which@1.0.5 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/export-resume-to-html/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 23% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","parseInt"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0869 took 5.6734s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Invalid number (367:26) on program ;(function(){
// windows: running "npm blah" in this folder will invoke WSH, not node.
if (typeof WScript !== "undefined") {
  WScript.echo("npm does not work when run\n"
              +"with the Windows Scripting Host\n\n"
              +"'cd' to a different directory,\n"
              +"or type 'npm.cmd <args>',\n"
              +"or type 'node npm <args>'.")
  WScript.quit(1)
  return
}


// monkey-patch support for 0.6 child processes
require('child-process-close')

var EventEmitter = require("events").EventEmitter
  , npm = module.exports = new EventEmitter()
  , npmconf = require("npmconf")
  , log = require("npmlog")
  , fs = require("graceful-fs")
  , path = require("path")
  , abbrev = require("abbrev")
  , which = require("which")
  , semver = require("semver")
  , RegClient = require("npm-registry-client")
  , charSpin = require("char-spinner")

npm.config = {
  loaded: false,
  get: function() {
    throw new Error('npm.load() required')
  },
  set: function() {
    throw new Error('npm.load() required')
  }
}

npm.commands = {}

npm.rollbacks = []

try {
  var pv = process.version.replace(/^v/, '')
  // startup, ok to do this synchronously
  var j = JSON.parse(fs.readFileSync(
    path.join(__dirname, "../package.json"))+"")
  npm.version = j.version
  npm.nodeVersionRequired = j.engines.node
  if (!semver.satisfies(pv, j.engines.node)) {
    log.warn("unsupported version", [""
            ,"npm requires node version: "+j.engines.node
            ,"And you have: "+pv
            ,"which is not satisfactory."
            ,""
            ,"Bad things will likely happen.  You have been warned."
            ,""].join("\n"))
  }
} catch (ex) {
  try {
    log.info("error reading version", ex)
  } catch (er) {}
  npm.version = ex
}

var commandCache = {}
  // short names for common things
  , aliases = { "rm" : "uninstall"
              , "r" : "uninstall"
              , "un" : "uninstall"
              , "unlink" : "uninstall"
              , "remove" : "uninstall"
              , "rb" : "rebuild"
              , "list" : "ls"
              , "la" : "ls"
              , "ll" : "ls"
              , "ln" : "link"
              , "i" : "install"
              , "isntall" : "install"
              , "up" : "update"
              , "c" : "config"
              , "info" : "view"
              , "show" : "view"
              , "find" : "search"
              , "s" : "search"
              , "se" : "search"
              , "author" : "owner"
              , "home" : "docs"
              , "issues": "bugs"
              , "unstar": "star" // same function
              , "apihelp" : "help"
              , "login": "adduser"
              , "add-user": "adduser"
              , "tst": "test"
              , "t": "test"
              , "find-dupes": "dedupe"
              , "ddp": "dedupe"
              , "v": "view"
              }

  , aliasNames = Object.keys(aliases)
  // these are filenames in .
  , cmdList = [ "install"
              , "uninstall"
              , "cache"
              , "config"
              , "set"
              , "get"
              , "update"
              , "outdated"
              , "prune"
              , "submodule"
              , "pack"
              , "dedupe"

              , "rebuild"
              , "link"

              , "publish"
              , "star"
              , "stars"
              , "tag"
              , "adduser"
              , "unpublish"
              , "owner"
              , "deprecate"
              , "shrinkwrap"

              , "help"
              , "help-search"
              , "ls"
              , "search"
              , "view"
              , "init"
              , "version"
              , "edit"
              , "explore"
              , "docs"
              , "repo"
              , "bugs"
              , "faq"
              , "root"
              , "prefix"
              , "bin"
              , "whoami"

              , "test"
              , "stop"
              , "start"
              , "restart"
              , "run-script"
              , "completion"
              ]
  , plumbing = [ "build"
               , "unbuild"
               , "xmas"
               , "substack"
               , "visnup"
               ]
  , fullList = npm.fullList = cmdList.concat(aliasNames).filter(function (c) {
      return plumbing.indexOf(c) === -1
    })
  , abbrevs = abbrev(fullList)

npm.spinner =
  { int: null
  , started: false
  , start: function () {
      if (npm.spinner.int) return
      var c = npm.config.get("spin")
      if (!c) return
      var stream = npm.config.get("logstream")
      var opt = { tty: c !== "always", stream: stream }
      opt.cleanup = !npm.spinner.started
      npm.spinner.int = charSpin(opt)
      npm.spinner.started = true
    }
  , stop: function () {
      clearInterval(npm.spinner.int)
      npm.spinner.int = null
    }
  }

Object.keys(abbrevs).concat(plumbing).forEach(function addCommand (c) {
  Object.defineProperty(npm.commands, c, { get : function () {
    if (!loaded) throw new Error(
      "Call npm.load(config, cb) before using this command.\n"+
      "See the README.md or cli.js for example usage.")
    var a = npm.deref(c)
    if (c === "la" || c === "ll") {
      npm.config.set("long", true)
    }

    npm.command = c
    if (commandCache[a]) return commandCache[a]

    var cmd = require(__dirname+"/"+a+".js")

    commandCache[a] = function () {
      var args = Array.prototype.slice.call(arguments, 0)
      if (typeof args[args.length - 1] !== "function") {
        args.push(defaultCb)
      }
      if (args.length === 1) args.unshift([])

      npm.registry.version = npm.version
      if (!npm.registry.refer) {
        npm.registry.refer = [a].concat(args[0]).map(function (arg) {
          // exclude anything that might be a URL, path, or private module
          // Those things will always have a slash in them somewhere
          if (arg && arg.match && arg.match(/\/|\\/)) {
            return "[REDACTED]"
          } else {
            return arg
          }
        }).filter(function (arg) {
          return arg && arg.match
        }).join(" ")
      }

      cmd.apply(npm, args)
    }

    Object.keys(cmd).forEach(function (k) {
      commandCache[a][k] = cmd[k]
    })

    return commandCache[a]
  }, enumerable: fullList.indexOf(c) !== -1 })

  // make css-case commands callable via camelCase as well
  if (c.match(/\-([a-z])/)) {
    addCommand(c.replace(/\-([a-z])/g, function (a, b) {
      return b.toUpperCase()
    }))
  }
})

function defaultCb (er, data) {
  if (er) console.error(er.stack || er.message)
  else console.log(data)
}

npm.deref = function (c) {
  if (!c) return ""
  if (c.match(/[A-Z]/)) c = c.replace(/([A-Z])/g, function (m) {
    return "-" + m.toLowerCase()
  })
  if (plumbing.indexOf(c) !== -1) return c
  var a = abbrevs[c]
  if (aliases[a]) a = aliases[a]
  return a
}

var loaded = false
  , loading = false
  , loadErr = null
  , loadListeners = []

function loadCb (er) {
  loadListeners.forEach(function (cb) {
    process.nextTick(cb.bind(npm, er, npm))
  })
  loadListeners.length = 0
}

npm.load = function (cli, cb_) {
  if (!cb_ && typeof cli === "function") cb_ = cli , cli = {}
  if (!cb_) cb_ = function () {}
  if (!cli) cli = {}
  loadListeners.push(cb_)
  if (loaded || loadErr) return cb(loadErr)
  if (loading) return
  loading = true
  var onload = true

  function cb (er) {
    if (loadErr) return
    loadErr = er
    if (er) return cb_(er)
    if (npm.config.get("force")) {
      log.warn("using --force", "I sure hope you know what you are doing.")
    }
    npm.config.loaded = true
    loaded = true
    loadCb(loadErr = er)
    if (onload = onload && npm.config.get("onload-script")) {
      require(onload)
      onload = false
    }
  }

  log.pause()

  load(npm, cli, cb)
}

function load (npm, cli, cb) {
  which(process.argv[0], function (er, node) {
    if (!er && node.toUpperCase() !== process.execPath.toUpperCase()) {
      log.verbose("node symlink", node)
      process.execPath = node
      process.installPrefix = path.resolve(node, "..", "..")
    }

    // look up configs
    //console.error("about to look up configs")

    var builtin = path.resolve(__dirname, "..", "npmrc")
    npmconf.load(cli, builtin, function (er, config) {
      if (er === config) er = null

      npm.config = config
      if (er) return cb(er)

      // if the "project" config is not a filename, and we're
      // not in global mode, then that means that it collided
      // with either the default or effective userland config
      if (!config.get("global")
          && config.sources.project
          && config.sources.project.type !== "ini") {
        log.verbose("config"
                   , "Skipping project config: %s. "
                   + "(matches userconfig)"
                   , config.localPrefix + "/.npmrc")
      }

      // Include npm-version and node-version in user-agent
      var ua = config.get("user-agent") || ""
      ua = ua.replace(/\{node-version\}/gi, process.version)
      ua = ua.replace(/\{npm-version\}/gi, npm.version)
      ua = ua.replace(/\{platform\}/gi, process.platform)
      ua = ua.replace(/\{arch\}/gi, process.arch)
      config.set("user-agent", ua)

      var color = config.get("color")

      log.level = config.get("loglevel")
      log.heading = config.get("heading") || "npm"
      log.stream = config.get("logstream")

      switch (color) {
        case "always":
          log.enableColor()
          npm.color = true
          break
        case false:
          log.disableColor()
          npm.color = false
          break
        default:
          var tty = require("tty")
          if (process.stdout.isTTY) npm.color = true
          else if (!tty.isatty) npm.color = true
          else if (tty.isatty(1)) npm.color = true
          else npm.color = false
          break
      }

      log.resume()

      // at this point the configs are all set.
      // go ahead and spin up the registry client.
      npm.registry = new RegClient(npm.config)

      var umask = npm.config.get("umask")
      npm.modes = { exec: 0777 & (~umask)
                  , file: 0666 & (~umask)
                  , umask: umask }

      var gp = Object.getOwnPropertyDescriptor(config, "globalPrefix")
      Object.defineProperty(npm, "globalPrefix", gp)

      var lp = Object.getOwnPropertyDescriptor(config, "localPrefix")
      Object.defineProperty(npm, "localPrefix", lp)

      log.warn("deprecated", "This version of npm lacks support for important features,")
      log.warn("deprecated", "such as scoped packages, offered by the primary npm")
      log.warn("deprecated", "registry. Consider upgrading to at least npm@2, if not the")
      log.warn("deprecated", "latest stable version. To upgrade to npm@2, run:\n")
      log.warn("deprecated", "  npm -g install npm@latest-2\n")
      log.warn("deprecated", "To upgrade to the latest stable version, run:\n")
      log.warn("deprecated", "  npm -g install npm@latest\n")
      log.warn("deprecated", "(Depending on how Node.js was installed on your system, you")
      log.warn("deprecated", "may need to prefix the preceding commands with `sudo`, or if")
      log.warn("deprecated", "on Windows, run them from an Administrator prompt.)\n")
      log.warn("deprecated", "If you're running the version of npm bundled with")
      log.warn("deprecated", "Node.js 0.10 LTS, be aware that the next version of 0.10 LTS")
      log.warn("deprecated", "will be bundled with a version of npm@2, which has some small")
      log.warn("deprecated", "backwards-incompatible changes made to `npm run-script` and")
      log.warn("deprecated", "semver behavior.")
      return cb(null, npm)
    })
  })
}

Object.defineProperty(npm, "prefix",
  { get : function () {
      return npm.config.get("global") ? npm.globalPrefix : npm.localPrefix
    }
  , set : function (r) {
      var k = npm.config.get("global") ? "globalPrefix" : "localPrefix"
      return npm[k] = r
    }
  , enumerable : true
  })

Object.defineProperty(npm, "bin",
  { get : function () {
      if (npm.config.get("global")) return npm.globalBin
      return path.resolve(npm.root, ".bin")
    }
  , enumerable : true
  })

Object.defineProperty(npm, "globalBin",
  { get : function () {
      var b = npm.globalPrefix
      if (process.platform !== "win32") b = path.resolve(b, "bin")
      return b
    }
  })

Object.defineProperty(npm, "dir",
  { get : function () {
      if (npm.config.get("global")) return npm.globalDir
      return path.resolve(npm.prefix, "node_modules")
    }
  , enumerable : true
  })

Object.defineProperty(npm, "globalDir",
  { get : function () {
      return (process.platform !== "win32")
           ? path.resolve(npm.globalPrefix, "lib", "node_modules")
           : path.resolve(npm.globalPrefix, "node_modules")
    }
  , enumerable : true
  })

Object.defineProperty(npm, "root",
  { get : function () { return npm.dir } })

Object.defineProperty(npm, "cache",
  { get : function () { return npm.config.get("cache") }
  , set : function (r) { return npm.config.set("cache", r) }
  , enumerable : true
  })

var tmpFolder
var crypto = require("crypto")
var rand = crypto.randomBytes(6)
                 .toString("base64")
                 .replace(/\//g, '_')
                 .replace(/\+/, '-')
Object.defineProperty(npm, "tmp",
  { get : function () {
      if (!tmpFolder) tmpFolder = "npm-" + process.pid + "-" + rand
      return path.resolve(npm.config.get("tmp"), tmpFolder)
    }
  , enumerable : true
  })

// the better to repl you with
Object.getOwnPropertyNames(npm.commands).forEach(function (n) {
  if (npm.hasOwnProperty(n) || n === "config") return

  Object.defineProperty(npm, n, { get: function () {
    return function () {
      var args = Array.prototype.slice.call(arguments, 0)
        , cb = defaultCb

      if (args.length === 1 && Array.isArray(args[0])) {
        args = args[0]
      }

      if (typeof args[args.length - 1] === "function") {
        cb = args.pop()
      }

      npm.commands[n](args, cb)
    }
  }, enumerable: false, configurable: true })
})

if (require.main === module) {
  require("../bin/npm-cli.js")
}
})()
 at SyntaxError: Invalid number (367:26)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp$3.parsePropertyValue (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1997:14)
    at Parser.pp$3.parseObj (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1989:14)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/export-resume-to-html/node_modules/export-resume-to-html/index.js. Coverage (Term): 14% Coverage (LOC): 18%
*- File /root/Targets/export-resume-to-html/node_modules/mkdirp/index.js. Coverage (Term): 14% Coverage (LOC): 13%
*- File /root/Targets/export-resume-to-html/node_modules/npmi/npmi.js. Coverage (Term): 5% Coverage (LOC): 5%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
