/root/Targets/markbind-cli
└─┬ markbind-cli@1.3.7 
  ├── bluebird@3.5.0 
  ├─┬ chalk@1.1.3 
  │ ├── ansi-styles@2.2.1 
  │ ├── escape-string-regexp@1.0.5 
  │ ├─┬ has-ansi@2.0.0 
  │ │ └── ansi-regex@2.1.1 
  │ ├── strip-ansi@3.0.1 
  │ └── supports-color@2.0.0 
  ├─┬ chokidar@1.7.0 
  │ ├─┬ anymatch@1.3.2 
  │ │ ├─┬ micromatch@2.3.11 
  │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ ├── array-unique@0.2.1 
  │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │   ├── isobject@2.1.0 
  │ │ │ │ │   ├─┬ randomatic@1.1.7 
  │ │ │ │ │   │ ├─┬ is-number@3.0.0 
  │ │ │ │ │   │ │ └── kind-of@3.2.2 
  │ │ │ │ │   │ └── kind-of@4.0.0 
  │ │ │ │ │   └── repeat-string@1.6.1 
  │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ ├── extglob@0.3.2 
  │ │ │ ├── filename-regex@2.0.1 
  │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ ├─┬ for-own@0.1.5 
  │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ ├── glob-base@0.3.0 
  │ │ │ │ └── is-dotfile@1.0.3 
  │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │     └── is-primitive@2.0.0 
  │ │ └─┬ normalize-path@2.1.1 
  │ │   └── remove-trailing-separator@1.1.0 
  │ ├── async-each@1.0.1 
  │ ├── glob-parent@2.0.0 
  │ ├── inherits@2.0.3 
  │ ├─┬ is-binary-path@1.0.1 
  │ │ └── binary-extensions@1.10.0 
  │ ├─┬ is-glob@2.0.1 
  │ │ └── is-extglob@1.0.0 
  │ ├── path-is-absolute@1.0.1 
  │ └─┬ readdirp@2.1.0 
  │   ├── graceful-fs@4.1.11 
  │   ├─┬ minimatch@3.0.4 
  │   │ └─┬ brace-expansion@1.1.8 
  │   │   ├── balanced-match@1.0.0 
  │   │   └── concat-map@0.0.1 
  │   ├─┬ readable-stream@2.3.3 
  │   │ ├── core-util-is@1.0.2 
  │   │ ├── isarray@1.0.0 
  │   │ ├── process-nextick-args@1.0.7 
  │   │ ├── safe-buffer@5.1.1 
  │   │ ├── string_decoder@1.0.3 
  │   │ └── util-deprecate@1.0.2 
  │   └── set-immediate-shim@1.0.1 
  ├── clear@0.0.1 
  ├── commander@2.11.0 
  ├── ejs@2.5.7 
  ├── figlet@1.2.0 
  ├─┬ fs-extra-promise@0.4.1 
  │ └─┬ fs-extra@0.30.0 
  │   ├── jsonfile@2.4.0 
  │   └── klaw@1.3.1 
  ├─┬ gh-pages@0.12.0 
  │ ├── async@2.1.2 
  │ ├─┬ commander@2.9.0 
  │ │ └── graceful-readlink@1.0.1 
  │ ├─┬ globby@6.1.0 
  │ │ ├─┬ array-union@1.0.2 
  │ │ │ └── array-uniq@1.0.3 
  │ │ ├─┬ glob@7.1.2 
  │ │ │ ├── fs.realpath@1.0.0 
  │ │ │ ├─┬ inflight@1.0.6 
  │ │ │ │ └── wrappy@1.0.2 
  │ │ │ └── once@1.4.0 
  │ │ ├── object-assign@4.1.1 
  │ │ ├── pify@2.3.0 
  │ │ └─┬ pinkie-promise@2.0.1 
  │ │   └── pinkie@2.0.4 
  │ ├── graceful-fs@4.1.10 
  │ ├── q@1.4.1 
  │ ├─┬ q-io@1.13.2 
  │ │ ├─┬ collections@0.2.2 
  │ │ │ └── weak-map@1.0.0 
  │ │ ├── mime@1.4.0 
  │ │ ├── mimeparse@0.1.4 
  │ │ ├── qs@1.2.2 
  │ │ └── url2@0.0.0 
  │ └── rimraf@2.6.2 
  ├── ignore@3.3.5 
  ├─┬ js-beautify@1.7.3 
  │ ├─┬ config-chain@1.1.11 
  │ │ ├── ini@1.3.4 
  │ │ └── proto-list@1.2.4 
  │ ├─┬ editorconfig@0.13.3 
  │ │ ├─┬ lru-cache@3.2.0 
  │ │ │ └── pseudomap@1.0.2 
  │ │ ├── semver@5.4.1 
  │ │ └── sigmund@1.0.1 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ └─┬ nopt@3.0.6 
  │   └── abbrev@1.1.0 
  ├─┬ live-server@1.2.0 
  │ ├── colors@1.1.2 
  │ ├─┬ connect@3.5.1 
  │ │ ├─┬ debug@2.2.0 
  │ │ │ └── ms@0.7.1 
  │ │ ├─┬ finalhandler@0.5.1 
  │ │ │ └── unpipe@1.0.0 
  │ │ ├── parseurl@1.3.2 
  │ │ └── utils-merge@1.0.0 
  │ ├─┬ cors@2.8.4 
  │ │ └── vary@1.1.1 
  │ ├─┬ event-stream@3.3.4 
  │ │ ├── duplexer@0.1.1 
  │ │ ├── from@0.1.7 
  │ │ ├── map-stream@0.1.0 
  │ │ ├── pause-stream@0.0.11 
  │ │ ├── split@0.3.3 
  │ │ ├── stream-combiner@0.0.4 
  │ │ └── through@2.3.8 
  │ ├─┬ faye-websocket@0.11.1 
  │ │ └─┬ websocket-driver@0.7.0 
  │ │   ├── http-parser-js@0.4.8 
  │ │   └── websocket-extensions@0.1.2 
  │ ├─┬ http-auth@3.1.3 
  │ │ ├─┬ apache-crypt@1.2.1 
  │ │ │ └── unix-crypt-td-js@1.0.0 
  │ │ ├── apache-md5@1.1.2 
  │ │ ├── bcryptjs@2.4.3 
  │ │ └── uuid@3.1.0 
  │ ├─┬ morgan@1.8.2 
  │ │ ├── basic-auth@1.1.0 
  │ │ ├─┬ debug@2.6.8 
  │ │ │ └── ms@2.0.0 
  │ │ ├── depd@1.1.1 
  │ │ ├─┬ on-finished@2.3.0 
  │ │ │ └── ee-first@1.1.1 
  │ │ └── on-headers@1.0.1 
  │ ├── object-assign@4.1.1 
  │ ├─┬ opn@5.1.0 
  │ │ └── is-wsl@1.1.0 
  │ ├── proxy-middleware@0.15.0 
  │ ├─┬ send@0.15.5 
  │ │ ├── debug@2.6.8 
  │ │ ├── destroy@1.0.4 
  │ │ ├── encodeurl@1.0.1 
  │ │ ├── escape-html@1.0.3 
  │ │ ├── etag@1.8.1 
  │ │ ├── fresh@0.5.2 
  │ │ ├─┬ http-errors@1.6.2 
  │ │ │ └── setprototypeof@1.0.3 
  │ │ ├── mime@1.3.4 
  │ │ ├── ms@2.0.0 
  │ │ ├── range-parser@1.2.0 
  │ │ └── statuses@1.3.1 
  │ └─┬ serve-index@1.9.0 
  │   ├─┬ accepts@1.3.4 
  │   │ └── negotiator@0.6.1 
  │   ├── batch@0.6.1 
  │   ├─┬ debug@2.6.8 
  │   │ └── ms@2.0.0 
  │   └─┬ mime-types@2.1.17 
  │     └── mime-db@1.30.0 
  ├─┬ markbind@1.1.5 
  │ ├─┬ cheerio@0.22.0 
  │ │ ├─┬ css-select@1.2.0 
  │ │ │ ├── boolbase@1.0.0 
  │ │ │ ├── css-what@2.1.0 
  │ │ │ └── nth-check@1.0.1 
  │ │ ├─┬ dom-serializer@0.1.0 
  │ │ │ └── domelementtype@1.1.3 
  │ │ ├── entities@1.1.1 
  │ │ ├── lodash.assignin@4.2.0 
  │ │ ├── lodash.bind@4.2.1 
  │ │ ├── lodash.defaults@4.2.0 
  │ │ ├── lodash.filter@4.6.0 
  │ │ ├── lodash.flatten@4.4.0 
  │ │ ├── lodash.foreach@4.5.0 
  │ │ ├── lodash.map@4.6.0 
  │ │ ├── lodash.merge@4.6.0 
  │ │ ├── lodash.pick@4.4.0 
  │ │ ├── lodash.reduce@4.6.0 
  │ │ ├── lodash.reject@4.6.0 
  │ │ └── lodash.some@4.6.0 
  │ ├── highlight.js@9.12.0 
  │ ├─┬ htmlparser2@3.9.2 
  │ │ ├── domelementtype@1.3.0 
  │ │ ├── domhandler@2.4.1 
  │ │ └── domutils@1.5.1 
  │ ├── lodash@4.17.4 
  │ ├─┬ markdown-it@8.4.0 
  │ │ ├─┬ argparse@1.0.9 
  │ │ │ └── sprintf-js@1.0.3 
  │ │ ├── linkify-it@2.0.3 
  │ │ ├── mdurl@1.0.1 
  │ │ └── uc.micro@1.0.3 
  │ ├─┬ markdown-it-anchor@4.0.0 
  │ │ └── string@3.3.3 
  │ ├── markdown-it-emoji@1.4.0 
  │ ├── markdown-it-imsize@2.0.1 
  │ ├── markdown-it-ins@2.0.0 
  │ ├── markdown-it-mark@2.0.0 
  │ ├─┬ markdown-it-table-of-contents@0.3.2 
  │ │ └── lodash.assign@4.2.0 
  │ ├── markdown-it-task-lists@1.4.1 
  │ └── markdown-it-video@0.4.0 
  ├─┬ nunjucks@3.0.1 
  │ ├── a-sync-waterfall@1.0.0 
  │ ├── asap@2.0.6 
  │ └─┬ yargs@3.32.0 
  │   ├── camelcase@2.1.1 
  │   ├─┬ cliui@3.2.0 
  │   │ └── wrap-ansi@2.1.0 
  │   ├── decamelize@1.2.0 
  │   ├─┬ os-locale@1.4.0 
  │   │ └─┬ lcid@1.0.0 
  │   │   └── invert-kv@1.0.0 
  │   ├─┬ string-width@1.0.2 
  │   │ ├── code-point-at@1.1.0 
  │   │ └─┬ is-fullwidth-code-point@1.0.0 
  │   │   └── number-is-nan@1.0.1 
  │   ├── window-size@0.1.4 
  │   └── y18n@3.2.1 
  ├── path-is-inside@1.0.2 
  └─┬ walk-sync@0.3.2 
    ├── ensure-posix-path@1.0.2 
    └── matcher-collection@1.0.5 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/markbind-cli/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0613 took 4.4677s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
'use strict';

// Entry file for Markbind project
const clear = require('clear');
const fs = require('fs-extra-promise');
const path = require('path');
const Promise = require('bluebird');
const program = require('commander');
const htmlBeautify = require('js-beautify').html;
const liveServer = require('live-server');
const chokidar = require('chokidar');

const logger = require('./lib/util/logger');
const fsUtil = require('./lib/util/fsUtil');
const Site = require('./lib/Site');
const MarkBind = require('markbind');

const CLI_VERSION = require('./package.json').version;
const ACCEPTED_COMMANDS = ['version', 'include', 'render', 'init', 'build', 'serve', 'deploy'];

let markbinder = new MarkBind();

clear();

process.title = 'MarkBind';
process.stdout.write(
  String.fromCharCode(27) + ']0;' + 'MarkBind' + String.fromCharCode(7)
);

program
  .allowUnknownOption()
  .usage(' <command>');

program
  .version(CLI_VERSION);

program
  .command('include <file>')
  .description('process all the fragment include in the given file')
  .option('-o, --output <path>', 'output file path')
  .action(function (file, options) {
    markbinder.includeFile(path.resolve(process.cwd(), file))
      .then((result) => {
        if (options.output) {
          let outputPath = path.resolve(process.cwd(), options.output);
          fs.outputFileSync(outputPath, result);
          logger.logo();
          logger.info(`Result was written to ${outputPath}`);
        } else {
          logger.log(result);
        }
      })
      .catch((error) => {
        logger.logo();
        logger.error('Error processing fragment include:');
        logger.error(error.message);
        return;
      });
  });

program
  .command('render <file>')
  .description('render the given file')
  .option('-o, --output <path>', 'output file path')
  .action(function (file, options) {
    markbinder.renderFile(path.resolve(process.cwd(), file))
      .then((result) => {
        result = htmlBeautify(result, {indent_size: 2});
        if (options.output) {
          let outputPath = path.resolve(process.cwd(), options.output);
          fs.outputFileSync(outputPath, result);
          logger.logo();
          logger.info(`Result was written to ${outputPath}`);
        } else {
          logger.log(result);
        }
      })
      .catch((error) => {
        logger.error('Error processing file rendering:');
        logger.error(error.message);
        return;
      });
  });

program
  .command('init [root]')
  .description('init a markbind website project')
  .action((root) => {
    const rootFolder = path.resolve(root || process.cwd());
    logger.logo();
    Site.initSite(rootFolder)
      .then(() => {
        logger.info('Initialization success.');
      })
      .catch((error) => {
        logger.error(error.message);
      });
  });

program
  .command('serve [root]')
  .description('build then serve a website from a directory')
  .option('-p, --port <port>', 'port for server to listen on (Default is 8080)')
  .option('--no-open', 'do not automatically open the site in browser')
  .action((root, options) => {
    const rootFolder = path.resolve(root || process.cwd());
    const outputFolder = path.join(rootFolder, '_site');

    let site = new Site(rootFolder, outputFolder);

    let changeHandler = (path) => {
      logger.info(`Reload for file change: ${path}`);
      Promise.resolve('').then(() => {
        if (fsUtil.isMarkdown(path) || fsUtil.isHtml(path)) {
          return site.buildSourceFiles()
        } else {
          return site.buildAsset(path);
        }
      }).catch((err) => {
        logger.error(err.message)
      });
    };

    let removeHandler = (path) => {
      logger.info(`Reload for file deletion: ${path}`);
      Promise.resolve('').then(() => {
        if (fsUtil.isMarkdown(path) || fsUtil.isHtml(path)) {
          return site.buildSourceFiles()
        } else {
          return site.removeAsset(path);
        }
      }).catch((err) => {
        logger.error(err.message)
      });
    };

    // server conifg
    let serverConfig = {
      open: options.open,
      logLevel: 0,
      root: outputFolder,
      port: options.port || 8080,
      mount: []
    };

    logger.logo();

    site
      .readSiteConfig()
      .then((config) => {
        serverConfig.mount.push([config.baseUrl || '/', outputFolder]);
        return site.generate();
      })
      .then(() => {
        var watcher = chokidar.watch(rootFolder, {
          ignored: [outputFolder, /(^|[\/\\])\../],
          ignoreInitial: true
        });
        watcher
          .on('add', changeHandler)
          .on('change', changeHandler)
          .on('unlink', removeHandler);
      })
      .then(() => {
        let server = liveServer.start(serverConfig);
        server.addListener('listening', function () {
          var address = server.address();
          var serveHost = address.address === '0.0.0.0' ? '127.0.0.1' : address.address;
          var serveURL = 'http://' + serveHost + ':' + address.port;
          logger.info(`Serving \"${outputFolder}\" at ${serveURL}`)
          logger.info('Press CTRL+C to stop ...');
        });
      })
      .catch((error) => {
        logger.error(error.message);
      });
  });

program
  .command('deploy')
  .description('deploy the site to the repo\'s Github pages.')
  .action(() => {
    const rootFolder = path.resolve(process.cwd());
    const outputRoot = path.join(rootFolder, '_site');
    new Site(rootFolder, outputRoot).deploy()
      .then(() => {
        logger.info('Deployed!')
      })
      .catch((err) => {
        logger.error(err.message);
      });
    logger.logo();
  });

program
  .command('build [root] [output]')
  .description('build a website')
  .action((root, output) => {
    const rootFolder = path.resolve(root || process.cwd());
    const defaultOutputRoot = path.join(rootFolder, '_site');
    const outputFolder = output ? path.resolve(process.cwd(), output) : defaultOutputRoot;
    logger.logo();
    new Site(rootFolder, outputFolder)
      .generate()
      .then(() => {
        logger.info('Build success!');
      })
      .catch((error) => {
        logger.error(error.message);
      });
  });

program.parse(process.argv);

if (!program.args.length || !ACCEPTED_COMMANDS.includes(process.argv[2])) {
  if (program.args.length) {
    logger.warn(`Command '${program.args[0]}' doesn't exist, run "markbind help" to list commands.`);
  } else {
    logger.logo();
    program.help();
  }
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
