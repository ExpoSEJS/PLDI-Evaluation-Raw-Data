
> secp256k1@3.3.0 install /root/Targets/libp2p-floodsub/node_modules/secp256k1
> prebuild-install || node-gyp rebuild || echo "Secp256k1 bindings compilation fail. Pure JS implementation will be used."

/root/Targets/libp2p-floodsub
└─┬ libp2p-floodsub@0.11.1 
  ├─┬ async@2.5.0 
  │ └── lodash@4.17.4 
  ├─┬ debug@3.1.0 
  │ └── ms@2.0.0 
  ├─┬ length-prefixed-stream@1.5.1 
  │ ├─┬ readable-stream@2.3.3 
  │ │ ├── core-util-is@1.0.2 
  │ │ ├── inherits@2.0.3 
  │ │ ├── isarray@1.0.0 
  │ │ ├── process-nextick-args@1.0.7 
  │ │ ├── string_decoder@1.0.3 
  │ │ └── util-deprecate@1.0.2 
  │ └── varint@5.0.0 
  ├─┬ libp2p-crypto@0.10.3 
  │ ├─┬ asn1.js@4.9.1 
  │ │ ├── bn.js@4.11.8 
  │ │ └── minimalistic-assert@1.0.0 
  │ ├─┬ browserify-aes@1.0.8 
  │ │ ├── buffer-xor@1.0.3 
  │ │ ├── cipher-base@1.0.4 
  │ │ ├─┬ create-hash@1.1.3 
  │ │ │ ├─┬ ripemd160@2.0.1 
  │ │ │ │ └── hash-base@2.0.2 
  │ │ │ └── sha.js@2.4.9 
  │ │ └─┬ evp_bytestokey@1.0.3 
  │ │   └─┬ md5.js@1.3.4 
  │ │     └── hash-base@3.0.4 
  │ ├── keypair@1.0.1 
  │ ├─┬ libp2p-crypto-secp256k1@0.2.2 
  │ │ ├─┬ nodeify@1.0.1 
  │ │ │ ├── is-promise@1.0.1 
  │ │ │ └── promise@1.3.0 
  │ │ └─┬ secp256k1@3.3.0 
  │ │   ├── bindings@1.3.0 
  │ │   ├── bip66@1.1.5 
  │ │   ├─┬ drbg.js@1.0.1 
  │ │   │ └── create-hmac@1.1.6 
  │ │   ├─┬ elliptic@6.4.0 
  │ │   │ ├── brorand@1.1.0 
  │ │   │ ├── hash.js@1.1.3 
  │ │   │ ├── hmac-drbg@1.0.1 
  │ │   │ └── minimalistic-crypto-utils@1.0.1 
  │ │   ├── nan@2.7.0 
  │ │   └─┬ prebuild-install@2.2.2 
  │ │     ├── expand-template@1.1.0 
  │ │     ├── github-from-package@0.0.0 
  │ │     ├─┬ mkdirp@0.5.1 
  │ │     │ └── minimist@0.0.8 
  │ │     ├── node-abi@2.1.1 
  │ │     ├── noop-logger@0.1.1 
  │ │     ├─┬ npmlog@4.1.2 
  │ │     │ ├─┬ are-we-there-yet@1.1.4 
  │ │     │ │ └── delegates@1.0.0 
  │ │     │ ├── console-control-strings@1.1.0 
  │ │     │ ├─┬ gauge@2.7.4 
  │ │     │ │ ├── aproba@1.2.0 
  │ │     │ │ ├── has-unicode@2.0.1 
  │ │     │ │ ├── object-assign@4.1.1 
  │ │     │ │ ├── signal-exit@3.0.2 
  │ │     │ │ ├─┬ string-width@1.0.2 
  │ │     │ │ │ ├── code-point-at@1.1.0 
  │ │     │ │ │ └─┬ is-fullwidth-code-point@1.0.0 
  │ │     │ │ │   └── number-is-nan@1.0.1 
  │ │     │ │ ├─┬ strip-ansi@3.0.1 
  │ │     │ │ │ └── ansi-regex@2.1.1 
  │ │     │ │ └── wide-align@1.1.2 
  │ │     │ └── set-blocking@2.0.0 
  │ │     ├── os-homedir@1.0.2 
  │ │     ├─┬ pump@1.0.2 
  │ │     │ ├── end-of-stream@1.4.0 
  │ │     │ └─┬ once@1.4.0 
  │ │     │   └── wrappy@1.0.2 
  │ │     ├─┬ rc@1.2.1 
  │ │     │ ├── deep-extend@0.4.2 
  │ │     │ ├── ini@1.3.4 
  │ │     │ └── strip-json-comments@2.0.1 
  │ │     ├─┬ simple-get@1.4.3 
  │ │     │ └── unzip-response@1.0.2 
  │ │     ├─┬ tar-fs@1.15.3 
  │ │     │ ├── chownr@1.0.1 
  │ │     │ └─┬ tar-stream@1.5.4 
  │ │     │   └── bl@1.2.1 
  │ │     └── tunnel-agent@0.6.0 
  │ ├─┬ multihashing-async@0.4.6 
  │ │ ├── blakejs@1.1.0 
  │ │ ├── js-sha3@0.6.1 
  │ │ ├─┬ multihashes@0.4.9 
  │ │ │ └─┬ bs58@4.0.1 
  │ │ │   └── base-x@3.0.2 
  │ │ └── murmurhash3js@3.0.1 
  │ ├─┬ pem-jwk@1.5.1 
  │ │ └─┬ asn1.js@1.0.3 
  │ │   └── bn.js@1.3.0 
  │ ├─┬ rsa-pem-to-jwk@1.1.3 
  │ │ ├── object-assign@2.1.1 
  │ │ └─┬ rsa-unpack@0.0.6 
  │ │   └─┬ optimist@0.3.7 
  │ │     └── wordwrap@0.0.3 
  │ ├── tweetnacl@1.0.0 
  │ └── webcrypto-shim@0.1.1  (git://github.com/dignifiedquire/webcrypto-shim.git#effe03d3401ccbfb4837191bc393bb347e0c0f0a)
  ├── lodash.values@4.3.0 
  ├─┬ protons@1.0.0 
  │ ├─┬ brfs@1.4.3 
  │ │ ├─┬ quote-stream@1.0.2 
  │ │ │ ├── buffer-equal@0.0.1 
  │ │ │ └── minimist@1.2.0 
  │ │ ├─┬ resolve@1.4.0 
  │ │ │ └── path-parse@1.0.5 
  │ │ ├─┬ static-module@1.5.0 
  │ │ │ ├─┬ concat-stream@1.6.0 
  │ │ │ │ └── typedarray@0.0.6 
  │ │ │ ├─┬ duplexer2@0.0.2 
  │ │ │ │ └─┬ readable-stream@1.1.14 
  │ │ │ │   ├── isarray@0.0.1 
  │ │ │ │   └── string_decoder@0.10.31 
  │ │ │ ├─┬ escodegen@1.3.3 
  │ │ │ │ ├── esprima@1.1.1 
  │ │ │ │ ├── estraverse@1.5.1 
  │ │ │ │ ├── esutils@1.0.0 
  │ │ │ │ └─┬ source-map@0.1.43 
  │ │ │ │   └── amdefine@1.0.1 
  │ │ │ ├─┬ falafel@2.1.0 
  │ │ │ │ ├── acorn@5.1.2 
  │ │ │ │ ├── foreach@2.0.5 
  │ │ │ │ ├── isarray@0.0.1 
  │ │ │ │ └── object-keys@1.0.11 
  │ │ │ ├─┬ has@1.0.1 
  │ │ │ │ └── function-bind@1.1.1 
  │ │ │ ├── object-inspect@0.4.0 
  │ │ │ ├─┬ quote-stream@0.0.0 
  │ │ │ │ └── minimist@0.0.8 
  │ │ │ ├─┬ readable-stream@1.0.34 
  │ │ │ │ ├── isarray@0.0.1 
  │ │ │ │ └── string_decoder@0.10.31 
  │ │ │ ├── shallow-copy@0.0.1 
  │ │ │ ├─┬ static-eval@0.2.4 
  │ │ │ │ └─┬ escodegen@0.0.28 
  │ │ │ │   ├── esprima@1.0.4 
  │ │ │ │   └── estraverse@1.3.2 
  │ │ │ └─┬ through2@0.4.2 
  │ │ │   └─┬ xtend@2.1.2 
  │ │ │     └── object-keys@0.4.0 
  │ │ └─┬ through2@2.0.3 
  │ │   └── xtend@4.0.1 
  │ ├── protocol-buffers-schema@3.3.2 
  │ ├── safe-buffer@5.1.1 
  │ └── signed-varint@2.0.1 
  ├── pull-pushable@2.1.1 
  └─┬ time-cache@0.3.0 
    └── lodash.throttle@4.1.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/libp2p-floodsub/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0391 took 2.6087s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:6) on program 'use strict'

const EventEmitter = require('events')
const TimeCache = require('time-cache')
const values = require('lodash.values')
const pull = require('pull-stream')
const lp = require('pull-length-prefixed')
const assert = require('assert')
const asyncEach = require('async/each')

const Peer = require('./peer')
const utils = require('./utils')
const pb = require('./message')
const config = require('./config')
const Buffer = require('safe-buffer').Buffer

const log = config.log
const multicodec = config.multicodec
const ensureArray = utils.ensureArray
const setImmediate = require('async/setImmediate')

/**
 * FloodSub (aka dumbsub is an implementation of pubsub focused on
 * delivering an API for Publish/Subscribe, but with no CastTree Forming
 * (it just floods the network).
 */
class FloodSub extends EventEmitter {
  /**
   * @param {Object} libp2p
   * @returns {FloodSub}
   */
  constructor (libp2p) {
    super()

    this.libp2p = libp2p
    this.started = false

    /**
     * Time based cache for sequence numbers.
     *
     * @type {TimeCache}
     */
    this.cache = new TimeCache()

    /**
     * Map of peers.
     *
     * @type {Map<string, Peer>}
     */
    this.peers = new Map()

    /**
     * List of our subscriptions
     * @type {Set<string>}
     */
    this.subscriptions = new Set()

    this._onConnection = this._onConnection.bind(this)
    this._dialPeer = this._dialPeer.bind(this)
  }

  _dialPeer (peerInfo, callback) {
    callback = callback || function noop () {}
    const idB58Str = peerInfo.id.toB58String()
    log('dialing %s', idB58Str)

    // If already have a PubSub conn, ignore
    const peer = this.peers.get(idB58Str)
    if (peer && peer.isConnected) {
      return setImmediate(() => callback())
    }

    this.libp2p.dial(peerInfo, multicodec, (err, conn) => {
      if (err) {
        log.err(err)
        return callback()
      }

      this._onDial(peerInfo, conn, callback)
    })
  }

  _onDial (peerInfo, conn, callback) {
    const idB58Str = peerInfo.id.toB58String()

    // If already had a dial to me, just add the conn
    if (!this.peers.has(idB58Str)) {
      this.peers.set(idB58Str, new Peer(peerInfo))
    }

    const peer = this.peers.get(idB58Str)
    peer.attachConnection(conn)

    // Immediately send my own subscriptions to the newly established conn
    peer.sendSubscriptions(this.subscriptions)
    setImmediate(() => callback())
  }

  _onConnection (protocol, conn) {
    conn.getPeerInfo((err, peerInfo) => {
      if (err) {
        log.err('Failed to identify incomming conn', err)
        return pull(pull.empty(), conn)
      }

      const idB58Str = peerInfo.id.toB58String()

      if (!this.peers.has(idB58Str)) {
        log('new peer', idB58Str)
        this.peers.set(idB58Str, new Peer(peerInfo))
      }

      this._processConnection(idB58Str, conn)
    })
  }

  _processConnection (idB58Str, conn) {
    pull(
      conn,
      lp.decode(),
      pull.map((data) => pb.rpc.RPC.decode(data)),
      pull.drain(
        (rpc) => this._onRpc(idB58Str, rpc),
        (err) => this._onConnectionEnd(idB58Str, err)
      )
    )
  }

  _onRpc (idB58Str, rpc) {
    if (!rpc) {
      return
    }

    const subs = rpc.subscriptions
    const msgs = rpc.msgs

    if (msgs && msgs.length) {
      this._processRpcMessages(rpc.msgs)
    }

    if (subs && subs.length) {
      const peer = this.peers.get(idB58Str)
      if (peer) {
        peer.updateSubscriptions(subs)
      }
    }
  }

  _processRpcMessages (msgs) {
    msgs.forEach((msg) => {
      const seqno = utils.msgId(msg.from, msg.seqno.toString())
      // 1. check if I've seen the message, if yes, ignore
      if (this.cache.has(seqno)) {
        return
      }

      this.cache.put(seqno)

      // 2. emit to self
      this._emitMessages(msg.topicCIDs, [msg])

      // 3. propagate msg to others
      this._forwardMessages(msg.topicCIDs, [msg])
    })
  }

  _onConnectionEnd (idB58Str, err) {
    // socket hang up, means the one side canceled
    if (err && err.message !== 'socket hang up') {
      log.err(err)
    }

    this.peers.delete(idB58Str)
  }

  _emitMessages (topics, messages) {
    topics.forEach((topic) => {
      if (!this.subscriptions.has(topic)) {
        return
      }

      messages.forEach((message) => {
        this.emit(topic, message)
      })
    })
  }

  _forwardMessages (topics, messages) {
    this.peers.forEach((peer) => {
      if (!peer.isWritable || !utils.anyMatch(peer.topics, topics)) {
        return
      }

      peer.sendMessages(messages)

      log('publish msgs on topics', topics, peer.info.id.toB58String())
    })
  }

  /**
   * Mounts the floodsub protocol onto the libp2p node and sends our
   * subscriptions to every peer conneceted
   *
   * @param {Function} callback
   * @returns {undefined}
   *
   */
  start (callback) {
    if (this.started) {
      return setImmediate(() => callback(new Error('already started')))
    }

    this.libp2p.handle(multicodec, this._onConnection)

    // Speed up any new peer that comes in my way
    this.libp2p.on('peer:connect', this._dialPeer)

    // Dial already connected peers
    const peerInfos = values(this.libp2p.peerBook.getAll())

    asyncEach(peerInfos, (peer, cb) => this._dialPeer(peer, cb), (err) => {
      setImmediate(() => {
        this.started = true
        callback(err)
      })
    })
  }

  /**
   * Unmounts the floodsub protocol and shuts down every connection
   *
   * @param {Function} callback
   * @returns {undefined}
   *
   */
  stop (callback) {
    if (!this.started) {
      return setImmediate(() => callback(new Error('not started yet')))
    }

    this.libp2p.unhandle(multicodec)
    this.libp2p.removeListener('peer:connect', this._dialPeer)

    asyncEach(this.peers.values(), (peer, cb) => peer.close(cb), (err) => {
      if (err) {
        return callback(err)
      }
      this.peers = new Map()
      this.started = false
      callback()
    })
  }

  /**
   * Publish messages to the given topics.
   *
   * @param {Array<string>|string} topics
   * @param {Array<any>|any} messages
   * @returns {undefined}
   *
   */
  publish (topics, messages) {
    assert(this.started, 'FloodSub is not started')

    log('publish', topics, messages)

    topics = ensureArray(topics)
    messages = ensureArray(messages)

    const from = this.libp2p.peerInfo.id.toB58String()

    const buildMessage = (msg) => {
      const seqno = utils.randomSeqno()
      this.cache.put(utils.msgId(from, seqno))

      return {
        from: from,
        data: msg,
        seqno: new Buffer(seqno),
        topicCIDs: topics
      }
    }

    const msgObjects = messages.map(buildMessage)

    // Emit to self if I'm interested
    this._emitMessages(topics, msgObjects)

    // send to all the other peers
    this._forwardMessages(topics, messages.map(buildMessage))
  }

  /**
   * Subscribe to the given topic(s).
   *
   * @param {Array<string>|string} topics
   * @returns {undefined}
   */
  subscribe (topics) {
    assert(this.started, 'FloodSub is not started')

    topics = ensureArray(topics)

    topics.forEach((topic) => this.subscriptions.add(topic))

    this.peers.forEach((peer) => checkIfReady(peer))
    // make sure that FloodSub is already mounted
    function checkIfReady (peer) {
      if (peer && peer.isWritable) {
        peer.sendSubscriptions(topics)
      } else {
        setImmediate(checkIfReady.bind(peer))
      }
    }
  }

  /**
   * Unsubscribe from the given topic(s).
   *
   * @param {Array<string>|string} topics
   * @returns {undefined}
   */
  unsubscribe (topics) {
    assert(this.started, 'FloodSub is not started')
    topics = ensureArray(topics)

    topics.forEach((topic) => this.subscriptions.delete(topic))

    this.peers.forEach((peer) => checkIfReady(peer))
    // make sure that FloodSub is already mounted
    function checkIfReady (peer) {
      if (peer && peer.isWritable) {
        peer.sendUnsubscriptions(topics)
      } else {
        setImmediate(checkIfReady.bind(peer))
      }
    }
  }
}

module.exports = FloodSub
 at SyntaxError: Unexpected token (8:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
