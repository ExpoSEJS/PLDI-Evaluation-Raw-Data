/root/Targets/pimatic-voice-recognition
├── UNMET PEER DEPENDENCY pimatic@0.8.*
└── pimatic-voice-recognition@0.8.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/pimatic-voice-recognition/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0337 took 2.095s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:102) on program module.exports = (env) ->

  Promise = env.require 'bluebird'
  assert = env.require 'cassert'

  class VoiceRecognitionPlugin extends env.plugins.Plugin
    actions: []

    init: (@app, @framework, @config) =>
      _this = this

      @framework.on("after init", =>
        mobileFrontend = @framework.pluginManager.getPlugin 'mobile-frontend'
        if mobileFrontend?
          mobileFrontend.registerAssetFile 'js', 
            "pimatic-voice-recognition/app/voice-recognition-setup.coffee"
        else
          env.logger.warn "VoiceRecognitionPlugin could not find mobile-frontend. " +
            "No gui will be available"
      )

      app.post("/api/speech", (req, res, next) =>
        words = req.body.words
        unless words?
          res.send 400, "Illegal Request"
          return
        words = (if Array.isArray words then words else [words])
        found = false
        for word in words
          context = @framework.ruleManager._createParseContext()
          parseResult = @framework.ruleManager._parseAction('speech-action', word, context)
          unless context.hasErrors()
            @framework.ruleManager._executeAction(parseResult.action, false).then( (message) =>
              res.send 200, message
            ).catch( (e) =>
              res.send 200, "Error: #{e.message}"
            ).done()
            found = true
            break
        unless found then res.send 200, "Could not execute: #{words[0]}" 
      )
  return new VoiceRecognitionPlugin at SyntaxError: Unexpected token (1:102)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOp (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1656:43)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1639:17)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
