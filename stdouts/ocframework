
> bson@0.1.8 install /root/Targets/ocframework/node_modules/bson
> (node-gyp rebuild 2> builderror.log) || (exit 0)

make: Entering directory '/root/Targets/ocframework/node_modules/bson/build'
  CXX(target) Release/obj.target/bson/ext/bson.o
bson.target.mk:90: recipe for target 'Release/obj.target/bson/ext/bson.o' failed
make: Leaving directory '/root/Targets/ocframework/node_modules/bson/build'
/root/Targets/ocframework
└─┬ ocframework@0.9.2 
  ├─┬ connect@2.7.0 
  │ ├── bytes@0.1.0 
  │ ├── cookie@0.0.5 
  │ ├── cookie-signature@0.0.1 
  │ ├── crc@0.2.0 
  │ ├─┬ debug@3.0.1 
  │ │ └── ms@2.0.0 
  │ ├── formidable@1.0.11 
  │ ├── fresh@0.1.0 
  │ ├── pause@0.0.1 
  │ └── qs@0.5.1 
  ├─┬ log4js@0.6.6 
  │ ├── async@0.1.15 
  │ ├── dequeue@1.0.3 
  │ ├─┬ readable-stream@1.0.34 
  │ │ ├── core-util-is@1.0.2 
  │ │ ├── inherits@2.0.3 
  │ │ ├── isarray@0.0.1 
  │ │ └── string_decoder@0.10.31 
  │ └── semver@1.1.4 
  ├── mocks@0.0.11 
  ├─┬ mongodb@1.2.14 
  │ └── bson@0.1.8 
  ├── ocsteps@0.2.20 
  ├─┬ octemplate@0.1.3 
  │ ├── cssom@0.2.5 
  │ ├─┬ cssstyle@0.2.37 
  │ │ └── cssom@0.3.2 
  │ ├── htmlparser@1.7.7 
  │ ├── nwmatcher@1.3.9 
  │ ├── ocsteps@0.2.21 
  │ └─┬ request@2.82.0 
  │   ├── aws-sign2@0.7.0 
  │   ├── aws4@1.6.0 
  │   ├── caseless@0.12.0 
  │   ├─┬ combined-stream@1.0.5 
  │   │ └── delayed-stream@1.0.0 
  │   ├── extend@3.0.1 
  │   ├── forever-agent@0.6.1 
  │   ├─┬ form-data@2.3.1 
  │   │ └── asynckit@0.4.0 
  │   ├─┬ har-validator@5.0.3 
  │   │ ├─┬ ajv@5.2.2 
  │   │ │ ├── co@4.6.0 
  │   │ │ ├── fast-deep-equal@1.0.0 
  │   │ │ ├── json-schema-traverse@0.3.1 
  │   │ │ └─┬ json-stable-stringify@1.0.1 
  │   │ │   └── jsonify@0.0.0 
  │   │ └── har-schema@2.0.0 
  │   ├─┬ hawk@6.0.2 
  │   │ ├── boom@4.3.1 
  │   │ ├─┬ cryptiles@3.1.2 
  │   │ │ └── boom@5.2.0 
  │   │ ├── hoek@4.2.0 
  │   │ └── sntp@2.0.2 
  │   ├─┬ http-signature@1.2.0 
  │   │ ├── assert-plus@1.0.0 
  │   │ ├─┬ jsprim@1.4.1 
  │   │ │ ├── extsprintf@1.3.0 
  │   │ │ ├── json-schema@0.2.3 
  │   │ │ └── verror@1.10.0 
  │   │ └─┬ sshpk@1.13.1 
  │   │   ├── asn1@0.2.3 
  │   │   ├── bcrypt-pbkdf@1.0.1 
  │   │   ├── dashdash@1.14.1 
  │   │   ├── ecc-jsbn@0.1.1 
  │   │   ├── getpass@0.1.7 
  │   │   ├── jsbn@0.1.1 
  │   │   └── tweetnacl@0.14.5 
  │   ├── is-typedarray@1.0.0 
  │   ├── isstream@0.1.2 
  │   ├── json-stringify-safe@5.0.1 
  │   ├─┬ mime-types@2.1.17 
  │   │ └── mime-db@1.30.0 
  │   ├── oauth-sign@0.8.2 
  │   ├── performance-now@2.1.0 
  │   ├── qs@6.5.1 
  │   ├── safe-buffer@5.1.1 
  │   ├── stringstream@0.0.5 
  │   ├─┬ tough-cookie@2.3.2 
  │   │ └── punycode@1.4.1 
  │   ├── tunnel-agent@0.6.0 
  │   └── uuid@3.1.0 
  ├─┬ send@0.1.0 
  │ ├── mime@1.2.6 
  │ └── range-parser@0.0.4 
  └── stack-trace@0.0.6 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/ocframework/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0691 took 4.5281s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: The keyword 'public' is reserved (244:8) on program module.exports = function(rootdir,config){

    if(!module.exports.singleton)
    {
        module.exports.singleton = this ;
    }

    this.rootdir = rootdir||process.cwd() ;

	this.helpers = null ;
    this.connect = null ;
    this.shipper = null ;
    this.router = null ;
    this.templates = null ;
    this.packages = null ;
    this.db = null ;
    this.config = config ;
    this.sessionStore ;
    this._connetBaseMiddlewares = {} ;
}
module.exports.singleton = null ;

// ------
var _pt = require("path") ;
var fs = require("fs") ;
var http = require('http');
var url = require('url');
var mongodb = require('mongodb');
var EventEmitter = require('events').EventEmitter ;
var Steps = require("ocsteps") ;
var PackagesManager = require("./packages/PackagesManager.js") ;
var connect = require('connect') ;

if(typeof window!='undefined')
{
	throw new Error(__filename+'can not run under browser.') ;
}




module.exports.prototype = new EventEmitter ;

module.exports.prototype._createBaseModules = function(application){

	// 初始化 templates
	application.templates = require('../mvc/view/ViewTemplateCaches.js').init() ;

	// 初始化 former
	require("../mvc/former").setup(application.templates) ;

	application
		._createConnect(application)			// 创建 connect
        ._createShipper(application)			// 创建 shipper
		._createRouter(application)				// 创建路由

    // session
    var SessionStore = require("./SessionStore.js") ;
    this.sessionStore = new SessionStore(this) ;
}


module.exports.prototype._createShipper = function(application)
{
    var ShipperServer = require("./ShipperServer") ;

    this.shipper = new ShipperServer() ;

    var frameworkfolder = _pt.dirname(require.resolve("../../package.json")) ;
    this.shipper.registerAllowFolder( frameworkfolder+"/public/" ) ;
    this.shipper.registerAllowFolder( frameworkfolder+"/lib/core/reset.js" ) ;
    this.shipper.registerAllowFolder( frameworkfolder+"/lib/mvc/Nut.js" ) ;
    this.shipper.registerAllowFolder( frameworkfolder+"/lib/mvc/view" ) ;
    this.shipper.registerAllowFolder( frameworkfolder+"/lib/mvc/MessageQueue.js" ) ;
    this.shipper.registerAllowFolder( frameworkfolder+"/lib/mvc/Validator.js" ) ;
    this.shipper.registerAllowFolder( frameworkfolder+"/lib/util/" ) ;
    this.shipper.registerAllowFolder( _pt.dirname(require.resolve("octemplate/package.json")) ) ;
    this.shipper.registerAllowFolder( _pt.dirname(require.resolve("ocsteps/index.js")) ) ;
    this.shipper.registerAllowFolder( _pt.dirname(require.resolve("stack-trace/package.json"))+"/lib/" ) ;
    return this ;
}

module.exports.prototype._createConnect = function(application){
	application.connect = connect() ;
	return this ;
}
module.exports.prototype._createRouter = function(application){
	application.router = new (require("./router/Router.js")) (application) ;
	return this ;
}

module.exports.prototype._loadPackages = function(application){
	console.log("reading package tree") ;
	this.packages = new PackagesManager ;
	this.packages.root.load( application.rootdir, this.hold(function(err){
		if(err) throw err ;
		console.log("package tree readed") ;
	}) ) ;
}

var helper ;
module.exports.prototype._createHelpers = function(application){
    this.helpers = require("../helpers") ;
    this.helpers.setup(application,this.hold(function(err){
        if(err) throw err ;
        // 设置自己的 helpers
        helper = new (this.helpers.Helper) (module) ;
    })) ;
}


// todo 这个过程应该 packages 包中实现
module.exports.prototype._loadExtensions = function(application){
	pubs = [] ;
	var modulesdir = this.rootdir + "/node_modules/" ;
	var application = this ;


    helper.log.info("root dir:"+this.rootdir) ;

	this.step(

		// 注册 opencomb/public 目录
		function(){
			fs.exists(this.rootdir+"/public",this.hold()) ;
		}
		, function(exists)
		{
			if( exists )
			{
				pubs.push({
					root: this.rootdir+"/public"
					, urlroot: "/public"
				}) ;
			}
		}

		// 各个扩展目录
		, function(){
			// 读取 node_modules 目录
			fs.readdir(modulesdir,this.hold()) ;
		}
		, function(err,files){
			err && this.terminate() ;

			if(!files || !files.length)
			{
				return ;
			}

			for(var i=0;i<files.length;i++)
			{

				(function(foldername){

					var moddir = modulesdir + foldername ;
					var extscript = moddir + "/extension.js" ;

					this.step(

						// 注册 public 目录 -------
						function(){
							fs.exists(moddir+"/public",this.hold()) ;
						}
						, function(exists){
							if(exists)
							{
								pubs.push({
									root: moddir+"/public"
									, urlroot: "/"+foldername+'/public'
								}) ;
							}
						}

						// 注册 controllers 目录 --------
						, function(){
							fs.exists(moddir+"/controllers",this.hold()) ;
						}
						, function(exists){
							if(exists)
							{
								helper.log.info("public controllers folder: "+moddir+_pt.sep+'controllers'+_pt.sep) ;
								application.router.regiterPublicController(moddir+_pt.sep+'controllers'+_pt.sep) ;
							}
						}

						// 执行 onload 函数 -------
						, function(){
							fs.exists(extscript,this.hold()) ;
						}
						, function(exists){
							if(!exists)
								return ;

	                        helper.log.info("loading extension script: "+extscript) ;
							var extension = require(extscript) ;

							this.try() ;
							// {
								// 执行 onload 事件
								if( typeof extension=='function' )
								{
									this.step([application],extension) ;
								}
								else if( typeof extension.onload=='function' )
								{
									this.step([application],extension.onload) ;
								}
								else
								{
									throw new Error("导出的内容代码无效："+extscript) ;
								}
							// }
							this.catch(function(err){
								var error = new Error("蜂巢在执行扩展"+extname+"的 extension.js 文件的时候遇到了错误") ;
								error.cause = err ;
								throw error ;
							}) ;
						}
					) ;

				}).bind(this) (files[i]) ;
			}
		}
	) ;

}

module.exports.prototype._createFrontendFramework = function(){
    helper.log.info("frontend.bundle:",this.config.dev.frontend.bundle) ;
    this.shipper.buildFrontendFramework(this.config.dev.frontend.bundle,this.hold(function(err){
        if(err)
        {
            var error = new Error("初始化前端框架时遇到了错误") ;
            error.cause = err ;
            throw error ;
        }
    })) ;
}


module.exports.prototype._createBaseMiddlewares = function(application){

    var public = require("./router/middleware/public.js") ;
    var DocViewer = require('../../controllers/DocViewer.js') ;

	for(var i=0;i<pubs.length;i++)
	{
        helper.log.info("public folder: "+pubs[i].urlroot+" >> "+pubs[i].root) ;
		application.connect.use(public(pubs[i].root,pubs[i].urlroot)) ;
	}

	application._connetBaseMiddlewares = {
        "shipper": application.shipper.middleware.bind(application.shipper)
		, "favicon": connect.favicon()
		, "cookie": connect.cookieParser()
		, "session": connect.session({ secret: 'opencomb application', cookie: { maxAge: 1800000 }, store: application.sessionStore })
		, "body": connect.bodyParser()
		, "doc": DocViewer.middleware
		, "router": application.router.route.bind(application.router)
		, "notfound": function(req,rspn){
			rspn.statusCode = "404" ;
			rspn.write("<h1>404</h1>") ;
			rspn.end() ;
		}
	}
	for(var name in application._connetBaseMiddlewares)
	{
		application.emit('use-connect-middleware.before',name,application.connect,application) ;
	
		application.connect.use( application._connetBaseMiddlewares[name] ) ;
	
		application.emit('use-connect-middleware.after',name,application.connect,application) ;
	}
}


module.exports.prototype._createHttpPortServer = function(){

	var port = this.config.server? (this.config.server.port || 6060): 6060 ;

	this.httpServer = http.createServer(this.connect) ;
	this.emit('createServer',this,this.httpServer) ;

	this.httpServer.listen(port,this.hold(function(err){
		this.emit('listenServer',err,this,this.httpServer) ;
		if(err) throw err ;
	}));
}

module.exports.prototype.startup = function(callback){
	Steps(

		// 加载 packages
		[this], this._loadPackages

        // 创建Helprs功能对象
        , [this], this._createHelpers

        // 创建基础功能对象
        , [this], this._createBaseModules

        // 为前端框架生成代码
        , [this], this._createFrontendFramework

		// 加载扩展
		, [this], this._loadExtensions

		// 创建基础中间件
		, [this], this._createBaseMiddlewares

		// 创建 http 端口服务器
		, [this], this._createHttpPortServer

		
	).done(function(err){
		callback && callback(err,this) ;
	}).bind(this) () ;
}

 at SyntaxError: The keyword 'public' is reserved (244:8)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$3.parseIdent (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2182:14)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:41:34)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
    at Parser.pp$3.parseFunctionBody (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2105:24)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/ocframework/node_modules/ocframework/index.js. Coverage (Term): 45% Coverage (LOC): 71%
*- File /root/Targets/ocframework/node_modules/ocframework/lib/core/reset.js. Coverage (Term): 16% Coverage (LOC): 19%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
