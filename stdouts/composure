
> dtrace-provider@0.2.8 install /root/Targets/composure/node_modules/dtrace-provider
> node-gyp rebuild

make: Entering directory '/root/Targets/composure/node_modules/dtrace-provider/build'
  TOUCH Release/obj.target/DTraceProviderStub.stamp
make: Leaving directory '/root/Targets/composure/node_modules/dtrace-provider/build'
/root/Targets/composure
└─┬ composure@0.1.1 
  ├─┬ jade@0.28.2 
  │ ├── commander@0.6.1 
  │ └── mkdirp@0.3.5 
  ├─┬ restify@2.3.5 
  │ ├── assert-plus@0.1.2 
  │ ├── backoff@2.0.0 
  │ ├─┬ bunyan@0.20.0 
  │ │ └── mv@0.0.5 
  │ ├── deep-equal@0.0.0 
  │ ├── dtrace-provider@0.2.8 
  │ ├── formidable@1.0.11 
  │ ├─┬ http-signature@0.9.11 
  │ │ ├── asn1@0.1.11 
  │ │ └── ctype@0.5.2 
  │ ├── keep-alive-agent@0.0.1 
  │ ├── lru-cache@2.2.2 
  │ ├── mime@1.2.9 
  │ ├── negotiator@0.2.5 
  │ ├── node-uuid@1.4.0 
  │ ├── once@1.1.1 
  │ ├── qs@0.5.3 
  │ ├── semver@1.1.2 
  │ ├── spdy@1.4.6 
  │ └─┬ verror@1.3.5 
  │   └── extsprintf@1.0.0 
  └── semver@1.1.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/composure/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 26% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0266 took 4.5004s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (14:12) on program // Copyright 2012 Mark Cavage, Inc.  All rights reserved.
//
// Restify supports both a client and server API, and in the essence of not
// loading the kitchen sink on clients, the exports here is chunked up into
// client and server; note clients will have to opt in by setting the env
// var "RESTIFY_CLIENT_ONLY", but if you're in that boat, it's not hard to do,
// and enables much faster load times
//

var shallowCopy = require('./utils').shallowCopy;


function createClient(options) {
        var assert = require('assert-plus');
        var bunyan = require('./bunyan_helper');
        var clients = require('./clients');

        assert.object(options, 'options');

        var client;
        var opts = shallowCopy(options);
        opts.agent = options.agent;
        opts.name = opts.name || 'restify';
        opts.type = opts.type || 'application/octet-stream';
        opts.log = opts.log || bunyan.createLogger(opts.name);

        switch (opts.type) {
        case 'json':
                client = new clients.JsonClient(opts);
                break;

        case 'string':
                client = new clients.StringClient(opts);
                break;

        case 'http':
        default:
                client = new clients.HttpClient(opts);
                break;
        }

        return (client);
}


function createJsonClient(options) {
        options = options ? shallowCopy(options) : {};
        options.type = 'json';
        return (createClient(options));
}


function createStringClient(options) {
        options = options ? shallowCopy(options) : {};
        options.type = 'string';
        return (createClient(options));
}


function createHttpClient(options) {
        options = options ? shallowCopy(options) : {};
        options.type = 'http';
        return (createClient(options));
}


function createServer(options) {
        var bunyan = require('./bunyan_helper');
        var InternalError = require('./errors').InternalError;
        var Router = require('./router');
        var Server = require('./server');

        var opts = shallowCopy(options || {});
        var server;

        opts.name = opts.name || 'restify';
        opts.log = opts.log || bunyan.createLogger(opts.name);
        opts.router = opts.router || new Router(opts);

        server = new Server(opts);
        server.on('uncaughtException', function (req, res, route, e) {
                if (this.listeners('uncaughtException').length > 1 ||
                    res._headerSent) {
                        return (false);
                }

                res.send(new InternalError(e, e.message || 'unexpected error'));
                return (true);
        });

        return (server);
}


/**
 * Returns a string representation of a URL pattern , with its
 * parameters filled in by the passed hash.
 *
 * If a key is not found in the hash for a param, it is left alone.
 *
 * @param {Object} a hash of parameter names to values for substitution.
 */
function realizeUrl(pattern, params) {
        var p = pattern.replace(/\/:([^/]+)/g, function (match, k) {
                return (params.hasOwnProperty(k) ? '/' + params[k] : match);
        });


        return (require('./utils').sanitizePath(p));
}



///--- Exports

module.exports = {
        // Client API
        createClient: createClient,
        createJsonClient: createJsonClient,
        createJSONClient: createJsonClient,
        createStringClient: createStringClient,
        createHttpClient: createHttpClient,
        get HttpClient() {
                return (require('./clients').HttpClient);
        },
        get JsonClient() {
                return (require('./clients').JsonClient);
        },
        get StringClient() {
                return (require('./clients').StringClient);
        },

        // Miscellaneous API
        get bunyan() {
                return (require('./bunyan_helper'));
        },

        errors: {}

};

var errors = require('./errors');
Object.keys(errors).forEach(function (k) {
        module.exports.errors[k] = errors[k];
        module.exports[k] = errors[k];
});

if (!process.env.RESTIFY_CLIENT_ONLY) {

        module.exports.createServer = createServer;
        module.exports.httpDate = require('./http_date');
        module.exports.realizeUrl = realizeUrl;
        module.exports.formatters = require('./formatters');
        module.exports.plugins = {};
        var plugins = require('./plugins');
        Object.keys(plugins).forEach(function (k) {
                module.exports.plugins[k] = plugins[k];
                module.exports[k] = plugins[k];
        });
}
 at SyntaxError: Unexpected token (14:12)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/composure/node_modules/composure/lib/index.js. Coverage (Term): 4% Coverage (LOC): 5%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
