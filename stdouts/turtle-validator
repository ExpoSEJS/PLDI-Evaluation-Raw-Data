/root/Targets/turtle-validator
└─┬ turtle-validator@1.0.1 
  └── n3@0.4.5 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/turtle-validator/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.054 took 3.9316s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

/*! @license ©2014 Miel Vander Sande - Multimedia Lab / iMinds / Ghent University */
/* Command-line utility to validate Turtle files. */

var N3 = require('n3'),
  fs = require('fs'),
  N3Util = N3.Util,
  http = require('http');
  url = require('url'),
  fs = require('fs'),
  validate = require('./lib/validator.js');

var help = function () {
  // In all other cases, let's help the user and return some help
  console.log('RDF NTriples/Turtle validator using Ruben Verborgh\'s N3 nodejs library');
  console.log('© 2014 - MMLab - Ghent University - iMinds');
  console.log('Source code: https://github.com/MMLab/TurtleValidator');
  console.log('');
  console.log('Examples:');
  console.log('');
  console.log('  $ ttl <path-to-file>');
  console.log('  $ curl http://data.linkeddatafragments.org/dbpedia -H "accept: text/turtle" | ttl');
  console.log('  $ ttl http://triples.demo.thedatatank.com/demo.ttl');
};

var args = process.argv.slice(2);

if (args.length > 1 || (args.length > 0 && (args[0] === "-h" || args[0] === "--help")))
  return help();

if (args.length === 0) {
  validate(process.stdin, showValidation);
} else if (args.length > 0) {
  // Create a stream from the file, whether it is a local file or a http stream
  var parsedUrl = url.parse(args[0]);
  switch (parsedUrl.protocol) {
  case 'https:':
    http = require('https');
  case 'http:':
    http.get(parsedUrl.href, function (res) {
      validate(res, showValidation);
    }).on('error', function (e) {
      console.log("Got error: " + e.message);
    });
    break;
  case null:
    validate(fs.createReadStream(parsedUrl.href), showValidation);
    break;
  default:
    console.log('Cannot access %s: "%s" not supported', parsedUrl.href, parsedUrl.protocol)
  }
}

// Use stdio as an input stream
function showValidation(feedback) {
  feedback.errors.forEach(function (error) {
    console.log(error);
  });
  feedback.warnings.forEach(function (warning) {
    console.log(warning);
  });
  console.log("Validator finished with " + feedback.warnings.length + " warnings and " + feedback.errors.length + " errors.");
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
