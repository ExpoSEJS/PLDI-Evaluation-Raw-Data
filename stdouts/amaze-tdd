
> chromedriver@2.24.1 install /root/Targets/amaze-tdd/node_modules/chromedriver
> node install.js

Downloading http://chromedriver.storage.googleapis.com/2.24/chromedriver_linux64.zip
Saving to /root/Targets/amaze-tdd/node_modules/chromedriver/chromedriver/chromedriver_linux64.zip
Receiving...
Received 789K...
Received 1571K...
Received 2356K...
Received 3043K total.
Extracting zip contents
Copying to target path /root/Targets/amaze-tdd/node_modules/chromedriver/lib/chromedriver
Fixing file permissions
Done. ChromeDriver binary available at /root/Targets/amaze-tdd/node_modules/chromedriver/lib/chromedriver/chromedriver
/root/Targets/amaze-tdd
└─┬ amaze-tdd@0.2.9 
  ├─┬ chai@3.5.0 
  │ ├── assertion-error@1.0.2 
  │ ├─┬ deep-eql@0.1.3 
  │ │ └── type-detect@0.1.1 
  │ └── type-detect@1.0.0 
  ├─┬ chromedriver@2.24.1 
  │ ├── adm-zip@0.4.7 
  │ ├── kew@0.5.0 
  │ ├─┬ npmconf@2.1.2 
  │ │ ├─┬ config-chain@1.1.11 
  │ │ │ └── proto-list@1.2.4 
  │ │ ├── ini@1.3.4 
  │ │ ├─┬ nopt@3.0.6 
  │ │ │ └── abbrev@1.1.1 
  │ │ ├─┬ osenv@0.1.4 
  │ │ │ ├── os-homedir@1.0.2 
  │ │ │ └── os-tmpdir@1.0.2 
  │ │ ├── semver@4.3.6 
  │ │ └── uid-number@0.0.5 
  │ └── rimraf@2.6.2 
  ├─┬ cli-color@1.2.0 
  │ ├── ansi-regex@2.1.1 
  │ ├── d@1.0.0 
  │ ├─┬ es5-ext@0.10.30 
  │ │ └── es6-symbol@3.1.1 
  │ ├── es6-iterator@2.0.1 
  │ ├─┬ memoizee@0.4.11 
  │ │ ├── es6-weak-map@2.0.2 
  │ │ ├── event-emitter@0.3.5 
  │ │ ├── is-promise@2.1.0 
  │ │ ├── lru-queue@0.1.0 
  │ │ └── next-tick@1.0.0 
  │ └── timers-ext@0.1.2 
  ├─┬ glob@7.1.1 
  │ ├── fs.realpath@1.0.0 
  │ ├─┬ inflight@1.0.6 
  │ │ └── wrappy@1.0.2 
  │ ├── inherits@2.0.3 
  │ ├─┬ minimatch@3.0.4 
  │ │ └─┬ brace-expansion@1.1.8 
  │ │   ├── balanced-match@1.0.0 
  │ │   └── concat-map@0.0.1 
  │ ├── once@1.3.3 
  │ └── path-is-absolute@1.0.1 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  ├─┬ mocha@3.1.2 
  │ ├── browser-stdout@1.3.0 
  │ ├─┬ commander@2.9.0 
  │ │ └── graceful-readlink@1.0.1 
  │ ├─┬ debug@2.2.0 
  │ │ └── ms@0.7.1 
  │ ├── diff@1.4.0 
  │ ├── escape-string-regexp@1.0.5 
  │ ├── glob@7.0.5 
  │ ├── growl@1.9.2 
  │ ├── json3@3.3.2 
  │ ├─┬ lodash.create@3.1.1 
  │ │ ├─┬ lodash._baseassign@3.2.0 
  │ │ │ ├── lodash._basecopy@3.0.1 
  │ │ │ └─┬ lodash.keys@3.1.2 
  │ │ │   ├── lodash._getnative@3.9.1 
  │ │ │   ├── lodash.isarguments@3.1.0 
  │ │ │   └── lodash.isarray@3.0.4 
  │ │ ├── lodash._basecreate@3.0.3 
  │ │ └── lodash._isiterateecall@3.0.9 
  │ └─┬ supports-color@3.1.2 
  │   └── has-flag@1.0.0 
  ├─┬ selenium-query@0.50.35 
  │ ├── atma-utils@0.1.13 
  │ └─┬ selenium-webdriver@2.53.3 
  │   └── adm-zip@0.4.4 
  └─┬ selenium-webdriver@3.0.0-beta-3 
    ├── adm-zip@0.4.4 
    ├── tmp@0.0.24 
    ├─┬ ws@1.1.4 
    │ ├── options@0.0.6 
    │ └── ultron@1.0.2 
    └─┬ xml2js@0.4.4 
      ├── sax@0.6.1 
      └── xmlbuilder@9.0.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/amaze-tdd/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0646 took 4.6126s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

/**
 * Amaze testing suite
 * https://npmjs.org/package/amaze-tdd
 *
 * Repo: https://bitbucket.org/dmusser/amaze-tdd
 * Issues/Bugs: https://bitbucket.org/dmusser/amaze-tdd/issues
 * Wiki/Docs: https://bitbucket.org/dmusser/amaze-tdd/wiki
 *
 * Author:
 * Chris Rodriguez
 *
 * Contributors:
 * Tony Kornmeier
 */

'use strict';

const Mocha = require('../node_modules/mocha');
const webdriver = require('../node_modules/selenium-webdriver');
const chromedriver = require('../node_modules/chromedriver');
const path = require('path');
const fs = require('fs');
const glob = require('glob');

const driverDir = path.join(__dirname, '../');
const v = JSON.parse(fs.readFileSync(driverDir + '/package.json', 'utf8')).version;

const color = require('cli-color');
const maps = {
    log: color.greenBright,
    warn: color.yellowBright,
    error: color.redBright
};

var flags = process.argv;
var chrome;
var client;
var capabilities;
var mocha;
var Amaze;

if (flags.indexOf('headless') > -1) {
    capabilities = {
        'browserName': 'phantomjs',
        'phantomjs.cli.args': [
            '--webdriver-loglevel=ERROR'
        ]
    }
    client = new webdriver.Builder().withCapabilities(capabilities);
} else {
    chrome = require('../node_modules/selenium-webdriver/chrome');
    capabilities = new chrome.Options();
    capabilities.addExtensions(driverDir + '/plugins/crx/5.1.1_0.crx');
    client = new webdriver.Builder().forBrowser('chrome').setChromeOptions(capabilities);
}

mocha = new Mocha({
    ui: 'tdd',
    reporter: 'spec',
    timeout: 30000
});

Amaze = {
    Webdriver: webdriver,
    Client: client,
    By: webdriver.By,
    Until: webdriver.until,
    Chrome: chromedriver,
    Mocha: mocha,
    Expect: require('chai').expect,
    Assert: require('chai').assert,
    jQuery: require('selenium-query')
};

function packageFile(file) {
    let parts = file.split('/');
    let f = parts[parts.length - 1];

    if (fs.existsSync('./specs')) {
        if (fs.existsSync('./specs/' + f)) {
            return true;
        } else {
            fs.createReadStream(file).pipe(fs.createWriteStream('./specs/' + f));
        }
    } else {
        let mkdir = require('mkdirp');
        mkdir('./specs', function(err) {
            if (err) {
                console.log(err);
            } else {
                fs.createReadStream(file).pipe(fs.createWriteStream('./specs/' + f));
            }
        });
    }

}

function isDemo(file) {
    let parts = file.split('/');
    for (let i = 0; i < parts.length; i++) {
        if (parts.indexOf('demo-spec.js') > -1) {
            return file;
        }
    }
}

function isNotDemo(file) {
    let parts = file.split('/');
    for (let i = 0; i < parts.length; i++) {
        if (parts.indexOf('demo-spec.js') < 0) {
            return file;
        }
    }
}

glob('./**/*-spec.js', { ignore: './specs/*-spec.js'}, function(err, files) {
    if (err) return console.log(maps.error(err));
    console.log(color.bold('\n>> AMAZE-TDD ' + v));

    if (flags.indexOf('sanity-check') > -1) {
        let only = files.filter(isDemo);
        for (let i = 0; i < only.length; i++) {
            packageFile(only[i]);
            Amaze.Mocha.addFile(only[i]);
        }
        console.log(maps.log('OK Skipping configuration file check.'));
    } else {
        let only = files.filter(isNotDemo);
        for (let i = 0; i < only.length; i++) {
            packageFile(only[i]);
            Amaze.Mocha.addFile(only[i]);
        }

        if (fs.existsSync(process.cwd() + '/.amazerc')) {
            Amaze.Configs = require(process.cwd() + '/.amazerc');

            fs.createReadStream(process.cwd() + '/.amazerc')
                .pipe(fs.createWriteStream('./specs/.amazerc'));

            console.log(maps.log('OK Configuration file found!'));
        } else {
            console.log(maps.warn('OK No configuration file found, moving on.'));
        }
    }

    if (Amaze.Mocha.files.length > 0) {
        console.log(maps.log('OK Running tests!'));
        Amaze.Mocha.run();
    } else {
        console.log(maps.error('ER No tests to run!\n'));
    }
});

module.exports = Amaze; at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/amaze-tdd/node_modules/amaze-tdd/index.js. Coverage (Term): 80% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
