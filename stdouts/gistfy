/root/Targets/gistfy
└─┬ gistfy@1.1.0 
  ├─┬ express@4.16.0 
  │ ├─┬ accepts@1.3.4 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ └── negotiator@0.6.1 
  │ ├── array-flatten@1.1.1 
  │ ├─┬ body-parser@1.18.2 
  │ │ ├── bytes@3.0.0 
  │ │ ├─┬ http-errors@1.6.2 
  │ │ │ └── setprototypeof@1.0.3 
  │ │ ├── iconv-lite@0.4.19 
  │ │ └── raw-body@2.3.2 
  │ ├── content-disposition@0.5.2 
  │ ├── content-type@1.0.4 
  │ ├── cookie@0.3.1 
  │ ├── cookie-signature@1.0.6 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├── depd@1.1.1 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├─┬ finalhandler@1.1.0 
  │ │ └── unpipe@1.0.0 
  │ ├── fresh@0.5.2 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@2.0.2 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.5.2 
  │ ├── qs@6.5.1 
  │ ├── range-parser@1.2.0 
  │ ├── safe-buffer@5.1.1 
  │ ├─┬ send@0.16.0 
  │ │ ├── destroy@1.0.4 
  │ │ └── mime@1.4.1 
  │ ├── serve-static@1.13.0 
  │ ├── setprototypeof@1.1.0 
  │ ├── statuses@1.3.1 
  │ ├─┬ type-is@1.6.15 
  │ │ └── media-typer@0.3.0 
  │ ├── utils-merge@1.0.1 
  │ └── vary@1.1.2 
  ├── highlight.js@9.12.0 
  ├─┬ nunjucks@2.5.2 
  │ ├── asap@2.0.6 
  │ ├─┬ chokidar@1.7.0 
  │ │ ├─┬ anymatch@1.3.2 
  │ │ │ ├─┬ micromatch@2.3.11 
  │ │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ │ ├── array-unique@0.2.1 
  │ │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │ │   ├── isobject@2.1.0 
  │ │ │ │ │ │   ├─┬ randomatic@1.1.7 
  │ │ │ │ │ │   │ ├─┬ is-number@3.0.0 
  │ │ │ │ │ │   │ │ └── kind-of@3.2.2 
  │ │ │ │ │ │   │ └── kind-of@4.0.0 
  │ │ │ │ │ │   └── repeat-string@1.6.1 
  │ │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ │ ├── extglob@0.3.2 
  │ │ │ │ ├── filename-regex@2.0.1 
  │ │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ │ ├─┬ for-own@0.1.5 
  │ │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ │ ├── glob-base@0.3.0 
  │ │ │ │ │ └── is-dotfile@1.0.3 
  │ │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │ │     └── is-primitive@2.0.0 
  │ │ │ └─┬ normalize-path@2.1.1 
  │ │ │   └── remove-trailing-separator@1.1.0 
  │ │ ├── async-each@1.0.1 
  │ │ ├── glob-parent@2.0.0 
  │ │ ├── inherits@2.0.3 
  │ │ ├─┬ is-binary-path@1.0.1 
  │ │ │ └── binary-extensions@1.10.0 
  │ │ ├─┬ is-glob@2.0.1 
  │ │ │ └── is-extglob@1.0.0 
  │ │ ├── path-is-absolute@1.0.1 
  │ │ └─┬ readdirp@2.1.0 
  │ │   ├── graceful-fs@4.1.11 
  │ │   ├─┬ minimatch@3.0.4 
  │ │   │ └─┬ brace-expansion@1.1.8 
  │ │   │   ├── balanced-match@1.0.0 
  │ │   │   └── concat-map@0.0.1 
  │ │   ├─┬ readable-stream@2.3.3 
  │ │   │ ├── core-util-is@1.0.2 
  │ │   │ ├── isarray@1.0.0 
  │ │   │ ├── process-nextick-args@1.0.7 
  │ │   │ ├── string_decoder@1.0.3 
  │ │   │ └── util-deprecate@1.0.2 
  │ │   └── set-immediate-shim@1.0.1 
  │ └─┬ yargs@3.32.0 
  │   ├── camelcase@2.1.1 
  │   ├─┬ cliui@3.2.0 
  │   │ ├─┬ strip-ansi@3.0.1 
  │   │ │ └── ansi-regex@2.1.1 
  │   │ └── wrap-ansi@2.1.0 
  │   ├── decamelize@1.2.0 
  │   ├─┬ os-locale@1.4.0 
  │   │ └─┬ lcid@1.0.0 
  │   │   └── invert-kv@1.0.0 
  │   ├─┬ string-width@1.0.2 
  │   │ ├── code-point-at@1.1.0 
  │   │ └─┬ is-fullwidth-code-point@1.0.0 
  │   │   └── number-is-nan@1.0.1 
  │   ├── window-size@0.1.4 
  │   └── y18n@3.2.1 
  ├── nunjucks-eval@1.0.0 
  └─┬ rc@1.2.1 
    ├── deep-extend@0.4.2 
    ├── ini@1.3.4 
    ├── minimist@1.2.0 
    └── strip-json-comments@2.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/gistfy/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.057 took 5.7774s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var config = require('./config'),
    express = require('express'),
    fs = require('fs'),
    hljs = require('highlight.js'),
    https = require('https'),
    nunjucks = require('nunjucks'),
    njeval = require('nunjucks-eval'),
    path = require('path'),
    url = require('url'),
    util = require('util');

var app = express(),
    templateFile = fs.readFileSync(path.resolve(__dirname, '../views/embed.html'), 'utf8'),
    template = nunjucks.compile(templateFile);

/* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String */
String.prototype.startsWith = function (searchString, position) {
    position = position || 0;
    return this.lastIndexOf(searchString, position) === position;
};

String.prototype.endsWith = function (searchString, position) {
    var subjectString = this.toString();
    if (position === undefined || position > subjectString.length) {
        position = subjectString.length;
    }
    position -= searchString.length;
    var lastIndex = subjectString.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
};

function escapeJS(s) {
    return s.replace(/\\/g, '&#92;')
            //.replace(/\\/g,"\\\\")
            //.replace(/\n/g, '<br>&#08;')
            .replace(/\n/g, '\\n')
            .replace(/\r/g, '\\r')
            .replace(/\'/g, '\\\'')
            .replace(/\"/g, '\\\"');
}

function highlight(code, language) {
    if (language && hljs.getLanguage(language)) {
        return hljs.highlight(language, code).value;
    } else {
        return hljs.highlightAuto(code).value;
    }
}

function downloadFile(urlStr, callback) {
    var options = url.parse(urlStr);

    options.headers = {
        'User-Agent': config.user_agent
    };

    https.get(options, function (response) {
        response.setEncoding('utf8');

        var body = '';

        response.on('data', function (chunk) {
            body += chunk;
        });

        response.on('end', function () {
            callback(body, response.statusCode, response.headers);
        });

    }).on('error', function (e) {
        console.log(e);
    });
}

function downloadJSON(url, callback) {
    downloadFile(url, function (data, status, headers) {
        callback(JSON.parse(data), status, headers);
    });
}

function guessLanguage(file) {
    if (file) {
        var lang = file.split('.').pop();
        var langDef = hljs.getLanguage(lang);

        if (!langDef){
            return null;
        }

        return langDef.aliases ? langDef.aliases[0] : lang;
    } else {
        return null;
    }
}

function processData(data, slice) {

    var start, end, len;

    if (data.endsWith('\n')) {
        data = data.substring(0, data.length - 1);
    }

    if (slice) {
        if (slice.indexOf(':') > -1) {
            slice = slice.split(':');

            if (slice) {
                // From line X to line Y.
                // e.g: slice=1:5 or slice=-3:-1
                start = parseInt(slice.shift(), 10);

                if (start === 0 || Number.isNaN(start)) {
                    start = 1;
                }

                end = parseInt(slice.shift(), 10);

                if (end === 0 || Number.isNaN(end)) {
                    end = -1;
                }
            }
        } else {
            // Single line.
            // e.g: slice=5
            start = parseInt(slice, 10);

            if (Number.isNaN(start)) {
                start = 1;
                end = -1;
            } else {
                end = start;
            }
        }

        len = data.split('\n').length;

        if (start < 0) {
            start = (len + start) + 1;
        } else if (start > len) {
            start = 1;
        }

        if (end < 0) {
            end = (len + end) + 1;
        } else if (end > len) {
            end = len;
        }

        data = data.split('\n').slice(start - 1, end).join('\n');
    } else {
        start = 1;
        end = data.split('\n').length;
    }

    return { data: data, start: start, end: end };
}

function buildResponse(type, options, callback) {
    switch (type) {
        case "js":
            var js = 'document.write(\'<link rel=\"stylesheet\" href=\"' + options.cdn_url + 'gistfy.' + options.style + '.min.css\">\');\n'+
                     'document.write(\'' + escapeJS(template.render(options)) + '\');';
            callback(200, js, 'text/javascript; charset=utf-8');
            break;
        case "html":
            var html = '<link rel=\"stylesheet\" href=\"' + options.cdn_url + 'gistfy.' + options.style + '.min.css\">' +
                       template.render(options);
            callback(200, html, 'text/html; charset=utf-8');
            break;
        default:
            callback(400, 'Invalid type.', 'text/html');
    }
}

/*
Optional parameters:
    @param extended     Use extended template. Show user information at header. e.g., extended=true. Default: false. 
    @param lang         Set code language, for highlight. e.g., lang=python. Default is based in file extension. e.g., file.py returns python highlight style.
    @param locale       Set template locale, for translation. e.g., locale=en. Default: en.
    @param slice        Slice file, returning only the lines selected. e.g., slice=1:8. Default: null.
    @param style        Set template style. e.g., style=github, Default: github.
    @param type         Return type for content. e.g. type=html. Default: js.
*/
app.get('/github/gist/:id', function (req, res) {

    var extended = req.query.extended,
        lang = req.query.lang,
        //locale = req.query.locale || 'en',
        slice = req.query.slice,
        style = req.query.style || 'github',
        type = req.query.type || 'js';

    var url = util.format('https://api.github.com/gists/%s', req.params.id);

    downloadJSON(url, function (data, status) {
        if (status === 200) {
            var files = [];

            for (var k in data.files) {
                var file = data.files[k];
                var newData = processData(file.content, slice),
                    c = highlight(newData.data, lang || guessLanguage(file.filename));

                files.push({
                    htmlUrl: data.html_url,
                    rawUrl: file.raw_url,
                    fileName: file.filename,
                    content: c,
                    lineStart: newData.start,
                    lineEnd: newData.end + 1
                });
            }

            var options = {
                files: files,
                repoUrl: null,
                style: style,
                extended: extended,
                cdn_url: config.cdn_url || util.format('//%s/assets/styles/', req.headers.host)
            };

            buildResponse(type, options, function (status, content, contentType) {
                res.header("Access-Control-Allow-Origin", "*");
                res.header("Access-Control-Allow-Headers", "X-Requested-With");
                res.setHeader('content-type', contentType);
                res.send(content);
            });
        } else {
            res.status(status).send(data);
        }
    });
});

/*
Optional parameters:
    @param branch       Set file branch or changeset. e.g., branch=master or branch=38d25e12627b. Default: master.
    @param extended     Use extended template. Show user information at header. e.g., extended=true. Default: false. 
    @param lang         Set code language, for highlight. e.g., lang=python. Default is based in file extension. e.g., file.py returns python highlight style.
    @param locale       Set template locale, for translation. e.g., locale=en. Default: en.
    @param slice        Slice file, returning only the lines selected. e.g., slice=1:8. Default: null.
    @param style        Set template style. e.g., style=github, Default: github.
    @param type         Return type for content. e.g. type=html. Default: js.
*/
app.get('/:host/:user/:repo/:path(*)', function (req, res) {

    var host = req.params.host.toLowerCase(),
        path = req.params.path,
        repo = req.params.repo,
        user = req.params.user,
        branch = req.query.branch || 'master',
        extended = req.query.extended,
        lang = req.query.lang,
        //locale = req.query.locale || 'en',
        slice = req.query.slice,
        style = req.query.style || 'github',
        type = req.query.type || 'js',
        fileName = path.split('/').pop(),
        htmlUrl, rawUrl, repoUrl;

    if (host === 'github') {
        htmlUrl =  util.format('https://github.com/%s/%s/blob/%s/%s', user, repo, branch, path);
        rawUrl =  util.format('https://raw.githubusercontent.com/%s/%s/%s/%s', user, repo, branch, path);
        repoUrl = util.format('https://github.com/%s/%s', user, repo);
    } else if (host === 'bitbucket') {
        htmlUrl =  util.format('https://bitbucket.org/%s/%s/src/%s/%s', user, repo, branch, path);
        rawUrl =  util.format('https://api.bitbucket.org/1.0/repositories/%s/%s/raw/%s/%s', user, repo, branch, path);
        repoUrl = util.format('https://bitbucket.org/%s/$s', user, repo);
    } else {
        res.status(400).send('Invalid host: ' + host);
        return;
    }

    downloadFile(rawUrl, function (data, status) {

        if (status === 200) {
            var newData = processData(data, slice),
                content = highlight(newData.data, lang || guessLanguage(fileName));

            var options = {
                files: [{
                    htmlUrl: htmlUrl,
                    rawUrl: rawUrl,
                    fileName: fileName,
                    content: content,
                    lineStart: newData.start,
                    lineEnd: newData.end + 1
                }],
                repoUrl: repoUrl,
                style: style,
                extended: extended,
                cdn_url: config.cdn_url || util.format('//%s/assets/styles/', req.headers.host)
            };

            buildResponse(type, options, function (status, content, contentType) {
                res.header("Access-Control-Allow-Origin", "*");
                res.header("Access-Control-Allow-Headers", "X-Requested-With");
                res.setHeader('Content-Type', contentType);
                res.send(content);
            });
        } else {
            res.status(status).send(data);
        }
    });
});

if (config.no_static === false) {
    app.use(express.static(path.resolve(__dirname, '../static')));
} else {
    console.log('Static file hosting disabled.');
}

app.set('views', path.resolve(__dirname, '../views/'));

var envOptions = {
    autoescape: true,
    express: app,
};

if (config.debug) {
    console.log('Template cache disabled.');
    envOptions.watch = true;
    envOptions.noCache = true;
}

var env = nunjucks.configure(app.get('views'), envOptions);

njeval.install(env);
env.addGlobal('ga', config.ga_id);
env.addGlobal('debug', config.debug);
app.set('view engine', 'nunjucks');

app.get('/', function (req, res) {
    res.redirect('/index.html');
});

app.get('/:path(index|api|usage|about).html', function (req, res) {
    var url = req.originalUrl;

    res.render(req.params.path + '.html', { url: url }, function(err, html){
        if (err) {
            console.log(err);
            res.render('500.html');
        } else {
            res.send(html);
        }
    });
});

app.get('/examples.html', function (req, res) {
    var url = req.originalUrl;

    res.render('examples.html', { url: url, style: req.query.style }, function(err, html){
        if (err) {
            console.log(err);
            res.render('500.html');
        } else {
            res.send(html);
        }
    });
});

app.get('*', function (req, res) {
    res.status(404).render('404.html');
});

app.listen(config.port, config.host, function () {
    console.log(util.format('Listening on http://%s:%s', config.host, config.port));
});
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
