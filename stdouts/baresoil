/root/Targets/baresoil
└─┬ baresoil@1.0.2 
  ├── async@2.5.0 
  ├── baresoil-client@1.0.0 
  ├─┬ baresoil-server@1.0.6 
  │ ├─┬ baresoil-provider-prod@1.0.2 
  │ │ ├── baresoil-plugin-docker-sandbox@1.0.1 
  │ │ └─┬ baresoil-plugin-postgres-metastore@1.0.1 
  │ │   └─┬ pg@7.3.0 
  │ │     ├── buffer-writer@1.0.1 
  │ │     ├── js-string-escape@1.0.1 
  │ │     ├── packet-reader@0.3.1 
  │ │     ├── pg-connection-string@0.1.3 
  │ │     ├── pg-pool@2.0.3 
  │ │     ├─┬ pg-types@1.12.1 
  │ │     │ ├── postgres-array@1.0.2 
  │ │     │ ├── postgres-bytea@1.0.0 
  │ │     │ ├── postgres-date@1.0.3 
  │ │     │ └── postgres-interval@1.1.1 
  │ │     ├─┬ pgpass@1.0.2 
  │ │     │ └── split@1.0.1 
  │ │     └── semver@4.3.2 
  │ ├─┬ body-parser@1.18.2 
  │ │ ├── bytes@3.0.0 
  │ │ ├── content-type@1.0.4 
  │ │ ├─┬ debug@2.6.9 
  │ │ │ └── ms@2.0.0 
  │ │ ├── depd@1.1.1 
  │ │ ├─┬ http-errors@1.6.2 
  │ │ │ ├── inherits@2.0.3 
  │ │ │ └── setprototypeof@1.0.3 
  │ │ ├── iconv-lite@0.4.19 
  │ │ ├─┬ on-finished@2.3.0 
  │ │ │ └── ee-first@1.1.1 
  │ │ ├── qs@6.5.1 
  │ │ ├─┬ raw-body@2.3.2 
  │ │ │ └── unpipe@1.0.0 
  │ │ └─┬ type-is@1.6.15 
  │ │   └── media-typer@0.3.0 
  │ ├─┬ cookie-parser@1.4.3 
  │ │ ├── cookie@0.3.1 
  │ │ └── cookie-signature@1.0.6 
  │ ├── event-io@0.1.10 
  │ ├─┬ express@4.16.1 
  │ │ ├─┬ accepts@1.3.4 
  │ │ │ └── negotiator@0.6.1 
  │ │ ├── array-flatten@1.1.1 
  │ │ ├── content-disposition@0.5.2 
  │ │ ├── encodeurl@1.0.1 
  │ │ ├── escape-html@1.0.3 
  │ │ ├── etag@1.8.1 
  │ │ ├── finalhandler@1.1.0 
  │ │ ├── fresh@0.5.2 
  │ │ ├── merge-descriptors@1.0.1 
  │ │ ├── methods@1.1.2 
  │ │ ├── parseurl@1.3.2 
  │ │ ├── path-to-regexp@0.1.7 
  │ │ ├─┬ proxy-addr@2.0.2 
  │ │ │ ├── forwarded@0.1.2 
  │ │ │ └── ipaddr.js@1.5.2 
  │ │ ├── range-parser@1.2.0 
  │ │ ├─┬ send@0.16.1 
  │ │ │ ├── destroy@1.0.4 
  │ │ │ └── mime@1.4.1 
  │ │ ├── serve-static@1.13.1 
  │ │ ├── setprototypeof@1.1.0 
  │ │ ├── statuses@1.3.1 
  │ │ ├── utils-merge@1.0.1 
  │ │ └── vary@1.1.2 
  │ ├─┬ lru-cache@4.1.1 
  │ │ ├── pseudomap@1.0.2 
  │ │ └── yallist@2.1.2 
  │ ├─┬ multer@1.3.0 
  │ │ ├── append-field@0.1.0 
  │ │ ├─┬ busboy@0.2.14 
  │ │ │ ├─┬ dicer@0.2.5 
  │ │ │ │ └── streamsearch@0.1.2 
  │ │ │ └─┬ readable-stream@1.1.14 
  │ │ │   ├── core-util-is@1.0.2 
  │ │ │   └── string_decoder@0.10.31 
  │ │ ├─┬ concat-stream@1.6.0 
  │ │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ │ ├── isarray@1.0.0 
  │ │ │ │ ├── process-nextick-args@1.0.7 
  │ │ │ │ ├── string_decoder@1.0.3 
  │ │ │ │ └── util-deprecate@1.0.2 
  │ │ │ └── typedarray@0.0.6 
  │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ └── minimist@0.0.8 
  │ │ ├── object-assign@3.0.0 
  │ │ └── xtend@4.0.1 
  │ ├── murmurhash@0.0.2 
  │ ├─┬ normalize-path@2.1.1 
  │ │ └── remove-trailing-separator@1.1.0 
  │ ├─┬ pug@2.0.0-rc.4 
  │ │ ├─┬ pug-code-gen@2.0.0 
  │ │ │ ├─┬ constantinople@3.1.0 
  │ │ │ │ ├── acorn@3.3.0 
  │ │ │ │ └─┬ is-expression@2.1.0 
  │ │ │ │   └── object-assign@4.1.1 
  │ │ │ ├── doctypes@1.1.0 
  │ │ │ ├── js-stringify@1.0.2 
  │ │ │ ├── pug-attrs@2.0.2 
  │ │ │ ├── pug-error@1.3.2 
  │ │ │ ├── void-elements@2.0.1 
  │ │ │ └─┬ with@5.1.1 
  │ │ │   └─┬ acorn-globals@3.1.0 
  │ │ │     └── acorn@4.0.13 
  │ │ ├─┬ pug-filters@2.1.5 
  │ │ │ ├─┬ clean-css@3.4.28 
  │ │ │ │ ├─┬ commander@2.8.1 
  │ │ │ │ │ └── graceful-readlink@1.0.1 
  │ │ │ │ └─┬ source-map@0.4.4 
  │ │ │ │   └── amdefine@1.0.1 
  │ │ │ ├─┬ jstransformer@1.0.0 
  │ │ │ │ └─┬ promise@7.3.1 
  │ │ │ │   └── asap@2.0.6 
  │ │ │ ├── pug-walk@1.1.5 
  │ │ │ ├─┬ resolve@1.4.0 
  │ │ │ │ └── path-parse@1.0.5 
  │ │ │ └─┬ uglify-js@2.8.29 
  │ │ │   ├── source-map@0.5.7 
  │ │ │   ├── uglify-to-browserify@1.0.2 
  │ │ │   └─┬ yargs@3.10.0 
  │ │ │     ├── camelcase@1.2.1 
  │ │ │     ├─┬ cliui@2.1.0 
  │ │ │     │ ├─┬ center-align@0.1.3 
  │ │ │     │ │ ├─┬ align-text@0.1.4 
  │ │ │     │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │     │ │ │ │ └── is-buffer@1.1.5 
  │ │ │     │ │ │ ├── longest@1.0.1 
  │ │ │     │ │ │ └── repeat-string@1.6.1 
  │ │ │     │ │ └── lazy-cache@1.0.4 
  │ │ │     │ ├── right-align@0.1.3 
  │ │ │     │ └── wordwrap@0.0.2 
  │ │ │     ├── decamelize@1.2.0 
  │ │ │     └── window-size@0.1.0 
  │ │ ├─┬ pug-lexer@3.1.0 
  │ │ │ ├─┬ character-parser@2.2.0 
  │ │ │ │ └─┬ is-regex@1.0.4 
  │ │ │ │   └─┬ has@1.0.1 
  │ │ │ │     └── function-bind@1.1.1 
  │ │ │ └─┬ is-expression@3.0.0 
  │ │ │   ├── acorn@4.0.13 
  │ │ │   └── object-assign@4.1.1 
  │ │ ├── pug-linker@3.0.3 
  │ │ ├─┬ pug-load@2.0.9 
  │ │ │ └── object-assign@4.1.1 
  │ │ ├─┬ pug-parser@4.0.0 
  │ │ │ └── token-stream@0.0.1 
  │ │ ├── pug-runtime@2.0.3 
  │ │ └── pug-strip-comments@1.0.2 
  │ ├─┬ sinon@3.3.0 
  │ │ ├─┬ build@0.1.4 
  │ │ │ ├── cssmin@0.3.2 
  │ │ │ ├── jsmin@1.0.1 
  │ │ │ ├─┬ jxLoader@0.1.1 
  │ │ │ │ └── js-yaml@0.3.7 
  │ │ │ ├── moo-server@1.3.0 
  │ │ │ ├── promised-io@0.3.5 
  │ │ │ ├── timespan@2.3.0 
  │ │ │ ├── uglify-js@1.3.5 
  │ │ │ ├─┬ walker@1.0.7 
  │ │ │ │ └─┬ makeerror@1.0.11 
  │ │ │ │   └── tmpl@1.0.4 
  │ │ │ ├─┬ winston@2.3.1 
  │ │ │ │ ├── async@1.0.0 
  │ │ │ │ ├── colors@1.0.3 
  │ │ │ │ ├── cycle@1.0.3 
  │ │ │ │ ├── eyes@0.1.8 
  │ │ │ │ ├── isstream@0.1.2 
  │ │ │ │ └── stack-trace@0.0.10 
  │ │ │ └── wrench@1.3.9 
  │ │ ├── diff@3.3.1 
  │ │ ├── formatio@1.2.0 
  │ │ ├── lodash.get@4.4.2 
  │ │ ├── lolex@2.1.2 
  │ │ ├── native-promise-only@0.8.1 
  │ │ ├─┬ nise@1.1.0 
  │ │ │ ├── just-extend@1.1.22 
  │ │ │ ├── lolex@1.6.0 
  │ │ │ └── path-to-regexp@1.7.0 
  │ │ ├─┬ path-to-regexp@1.7.0 
  │ │ │ └── isarray@0.0.1 
  │ │ ├── samsam@1.2.1 
  │ │ ├── text-encoding@0.6.4 
  │ │ └── type-detect@4.0.3 
  │ └─┬ tar@3.2.1 
  │   ├── chownr@1.0.1 
  │   ├─┬ minipass@2.2.1 
  │   │ └── yallist@3.0.2 
  │   ├── minizlib@1.0.3 
  │   └── yallist@3.0.2 
  ├─┬ chalk@2.1.0 
  │ ├─┬ ansi-styles@3.2.0 
  │ │ └─┬ color-convert@1.9.0 
  │ │   └── color-name@1.1.3 
  │ ├── escape-string-regexp@1.0.5 
  │ └─┬ supports-color@4.4.0 
  │   └── has-flag@2.0.0 
  ├─┬ cli-table2@0.2.0 
  │ ├── lodash@3.10.1 
  │ └─┬ string-width@1.0.2 
  │   ├── code-point-at@1.1.0 
  │   ├─┬ is-fullwidth-code-point@1.0.0 
  │   │ └── number-is-nan@1.0.1 
  │   └─┬ strip-ansi@3.0.1 
  │     └── ansi-regex@2.1.1 
  ├── colors@1.1.2 
  ├── e164@0.0.5 
  ├─┬ fs-extra@4.0.2 
  │ ├── graceful-fs@4.1.11 
  │ ├── jsonfile@4.0.0 
  │ └── universalify@0.1.1 
  ├─┬ inquirer@3.3.0 
  │ ├── ansi-escapes@3.0.0 
  │ ├─┬ cli-cursor@2.1.0 
  │ │ └─┬ restore-cursor@2.0.0 
  │ │   ├─┬ onetime@2.0.1 
  │ │   │ └── mimic-fn@1.1.0 
  │ │   └── signal-exit@3.0.2 
  │ ├── cli-width@2.2.0 
  │ ├─┬ external-editor@2.0.5 
  │ │ ├── jschardet@1.5.1 
  │ │ └── tmp@0.0.33 
  │ ├── figures@2.0.0 
  │ ├── mute-stream@0.0.7 
  │ ├─┬ run-async@2.3.0 
  │ │ └── is-promise@2.1.0 
  │ ├── rx-lite@4.0.8 
  │ ├── rx-lite-aggregates@4.0.8 
  │ ├─┬ string-width@2.1.1 
  │ │ └── is-fullwidth-code-point@2.0.0 
  │ └── through@2.3.8 
  ├─┬ json-stable-stringify@1.0.1 
  │ └── jsonify@0.0.0 
  ├─┬ jsonlint@1.6.2 
  │ ├── JSV@4.0.2 
  │ └─┬ nomnom@1.8.1 
  │   ├─┬ chalk@0.4.0 
  │   │ ├── ansi-styles@1.0.0 
  │   │ ├── has-color@0.1.7 
  │   │ └── strip-ansi@0.1.1 
  │   └── underscore@1.6.0 
  ├── lodash@4.17.4 
  ├─┬ mime-types@2.1.17 
  │ └── mime-db@1.30.0 
  ├── minimist@1.2.0 
  ├── moment@2.18.1 
  ├── runtype@0.2.3 
  ├─┬ strip-ansi@4.0.0 
  │ └── ansi-regex@3.0.0 
  ├─┬ temp@0.8.3 
  │ ├── os-tmpdir@1.0.2 
  │ └── rimraf@2.2.8 
  ├── validator@8.2.0 
  ├─┬ walk@2.3.9 
  │ └── foreachasync@3.0.0 
  └─┬ ws@3.2.0 
    ├── async-limiter@1.0.0 
    ├── safe-buffer@5.1.1 
    └── ultron@1.1.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/baresoil/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0583 took 3.0896s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
//
// Baresoil CLI
//
// Create and develop Baresoil projects, and interact with Baresoil Cloud.
//
const appdata = require('./util/appdata'),
  setupCLI = require('./util/setupCLI'),
  assert = require('assert'),
  col = require('./util/colutil'),
  clog = require('./util/clog'),
  fs = require('fs'),
  jsonlint = require('jsonlint'),
  minimist = require('minimist'),
  runtype = require('runtype'),
  Commands = require('./commands'),
  PackageJson = require('../package.json'),
  TypeLibrary = require('./types')
  ;


//
// Check authentication state.
// Delete the authentication token if it has expired.
//
function CheckUserSession() {
  assert(global.CLI_DATA, 'require CLI_DATA to be set');
  const cliData = global.CLI_DATA;
  try {
    const activeServer = cliData.activeServer;
    if ((!activeServer.userSession.expires) ||
        activeServer.userSession.expires > Date.now()) {
      global.ACTIVE_SERVER = activeServer;
      global.USER_SESSION = activeServer.userSession;
    } else {
      console.log(col.status(
        `Stored user session for ${col.bold(activeServer.server)} has expired.`));
      delete cliData.activeServer;
    }
  } catch (e) {
    // No user session.
    delete global.USER_SESSION;
    delete global.ACTIVE_SERVER;
  }
}

//
// Check project status in working directory.
//
function CheckProjectStatus() {
  assert(global.CLI_DATA, 'require CLI_DATA to be set');

  // Read baresoil.json from root directory.
  let baresoilJson;
  if (fs.existsSync('baresoil.json')) {
    try {
      const raw = fs.readFileSync('baresoil.json', 'utf-8');
      baresoilJson = jsonlint.parse(raw);
    } catch (e) {
      throw new Error(col.fatal(
        `Cannot load ${col.bold('baresoil.json')}: ${e.message}`));
    }
  }

  // Get server app info for this folder.
  global.CLI_DATA.projects = global.CLI_DATA.projects || {};
  const appConfig = global.CLI_DATA.projects[process.cwd()];

  // Ensure that project configuration exists before setting PROJECT.
  if (baresoilJson) {
    global.PROJECT = {
      appConfig,
      baresoilJson,
    };
  }
}


function main(argv) {
  let args;
  try {
    global.CLI_DATA = appdata.readSync();
    runtype.loadIntoLibrary(TypeLibrary);
    args = setupCLI('baresoil', PackageJson, Commands, argv);
    CheckUserSession();
    CheckProjectStatus();
  } catch (e) {
    console.error(e.message);
    return process.exit(1);
  }

  const project = global.PROJECT;
  const userSession = global.USER_SESSION;
  const cmd = global.COMMAND;

  // Commands can specify whether they need an active server token or explicitly not.
  if (cmd.requiresAuth && !userSession) {
    console.error(col.error(
      `Not logged into any server. Please run ${col.command('baresoil login')} first.`));
    return process.exit(1);
  }
  if (cmd.requiresNoAuth && userSession) {
    console.error(col.error(
      `Already logged in to a server. Please run ${col.command('baresoil logout')} first.`));
    return process.exit(1);
  }

  // For certain commands, ensure that the working directory is a valid
  // Baresoil project by ensuring that spec.get() does not throw.
  if (cmd.requiresProject && !project) {
    console.error(col.fatal(
      'No Baresoil project found in current directory; please re-run in your ' +
      'project\'s root directory.'));
    return process.exit(1);
  }

  // Some commands require the project to have a registered server app.
  if (cmd.requiresApp && (!project || !project.appConfig)) {
    console.error(col.fatal(
      'Project directory is not registered to a server application; ' +
      `please run ${col.command('baresoil register')} in this directory.`));
    return process.exit(1);
  }

  process.once('exit', () => {
    appdata.writeSync(global.CLI_DATA);
  });

  // Hand over process control to sub-command.
  clog.enable();
  try {
    assert(
      typeof cmd.impl === 'string',
      `Command ${cmd.name} has a non-string 'impl' attribute.`);
    cmd.impl = require(cmd.impl);
    return cmd.impl(args);
  } catch (e) {
    console.error(col.fatal(
      `Unable to run command "${col.command(cmd.name)}": ${e.message}`));
    if (process.env.VERBOSE) {
      console.error(e.stack.toString().gray);
    }
    return process.exit(2);
  }
}


if (require.main === module) {
  main(minimist(process.argv.slice(2)));
} else {
  module.exports = main;
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
