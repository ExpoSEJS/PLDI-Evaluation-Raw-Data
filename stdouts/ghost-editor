/root/Targets/ghost-editor
└─┬ ghost-editor@0.1.10 
  ├─┬ broccoli-funnel@1.2.0 
  │ ├── array-equal@1.0.0 
  │ ├── blank-object@1.0.2 
  │ ├─┬ broccoli-plugin@1.3.0 
  │ │ ├── promise-map-series@0.2.3 
  │ │ └─┬ quick-temp@0.1.8 
  │ │   ├── mktemp@0.4.0 
  │ │   └─┬ underscore.string@3.3.4 
  │ │     ├── sprintf-js@1.1.1 
  │ │     └── util-deprecate@1.0.2 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├── exists-sync@0.0.4 
  │ ├── fast-ordered-set@1.0.3 
  │ ├─┬ fs-tree-diff@0.5.6 
  │ │ └── object-assign@4.1.1 
  │ ├─┬ heimdalljs@0.2.5 
  │ │ └── rsvp@3.2.1 
  │ ├─┬ minimatch@3.0.4 
  │ │ └─┬ brace-expansion@1.1.8 
  │ │   ├── balanced-match@1.0.0 
  │ │   └── concat-map@0.0.1 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ ├── path-posix@1.0.0 
  │ ├─┬ rimraf@2.6.2 
  │ │ └─┬ glob@7.1.2 
  │ │   ├── fs.realpath@1.0.0 
  │ │   ├─┬ inflight@1.0.6 
  │ │   │ └── wrappy@1.0.2 
  │ │   ├── inherits@2.0.3 
  │ │   ├── once@1.4.0 
  │ │   └── path-is-absolute@1.0.1 
  │ ├── symlink-or-copy@1.1.8 
  │ └─┬ walk-sync@0.3.2 
  │   ├── ensure-posix-path@1.0.2 
  │   └── matcher-collection@1.0.5 
  ├─┬ broccoli-merge-trees@1.2.4 
  │ ├─┬ can-symlink@1.0.0 
  │ │ └─┬ tmp@0.0.28 
  │ │   └── os-tmpdir@1.0.2 
  │ └── heimdalljs-logger@0.1.9 
  ├─┬ ember-cli-babel@5.2.4 
  │ ├─┬ broccoli-babel-transpiler@5.7.2 
  │ │ ├─┬ babel-core@5.8.38 
  │ │ │ ├── babel-plugin-constant-folding@1.0.1 
  │ │ │ ├── babel-plugin-dead-code-elimination@1.0.2 
  │ │ │ ├── babel-plugin-eval@1.0.1 
  │ │ │ ├── babel-plugin-inline-environment-variables@1.0.1 
  │ │ │ ├── babel-plugin-jscript@1.0.4 
  │ │ │ ├── babel-plugin-member-expression-literals@1.0.1 
  │ │ │ ├── babel-plugin-property-literals@1.0.1 
  │ │ │ ├── babel-plugin-proto-to-assign@1.0.4 
  │ │ │ ├── babel-plugin-react-constant-elements@1.0.3 
  │ │ │ ├── babel-plugin-react-display-name@1.0.3 
  │ │ │ ├── babel-plugin-remove-console@1.0.1 
  │ │ │ ├── babel-plugin-remove-debugger@1.0.1 
  │ │ │ ├── babel-plugin-runtime@1.0.7 
  │ │ │ ├─┬ babel-plugin-undeclared-variables-check@1.0.2 
  │ │ │ │ └── leven@1.0.2 
  │ │ │ ├── babel-plugin-undefined-to-void@1.1.6 
  │ │ │ ├── babylon@5.8.38 
  │ │ │ ├── bluebird@2.11.0 
  │ │ │ ├─┬ chalk@1.1.3 
  │ │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ │ ├── escape-string-regexp@1.0.5 
  │ │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ │ └── ansi-regex@2.1.1 
  │ │ │ │ ├── strip-ansi@3.0.1 
  │ │ │ │ └── supports-color@2.0.0 
  │ │ │ ├── convert-source-map@1.5.0 
  │ │ │ ├── core-js@1.2.7 
  │ │ │ ├─┬ detect-indent@3.0.1 
  │ │ │ │ ├── get-stdin@4.0.1 
  │ │ │ │ └── minimist@1.2.0 
  │ │ │ ├── esutils@2.0.2 
  │ │ │ ├── fs-readdir-recursive@0.1.2 
  │ │ │ ├── globals@6.4.1 
  │ │ │ ├─┬ home-or-tmp@1.0.0 
  │ │ │ │ └── user-home@1.1.1 
  │ │ │ ├─┬ is-integer@1.0.7 
  │ │ │ │ └─┬ is-finite@1.0.2 
  │ │ │ │   └── number-is-nan@1.0.1 
  │ │ │ ├── js-tokens@1.0.1 
  │ │ │ ├── json5@0.4.0 
  │ │ │ ├── lodash@3.10.1 
  │ │ │ ├── minimatch@2.0.10 
  │ │ │ ├─┬ output-file-sync@1.1.2 
  │ │ │ │ └── graceful-fs@4.1.11 
  │ │ │ ├── path-exists@1.0.0 
  │ │ │ ├── private@0.1.7 
  │ │ │ ├─┬ regenerator@0.8.40 
  │ │ │ │ ├─┬ commoner@0.10.8 
  │ │ │ │ │ ├── commander@2.11.0 
  │ │ │ │ │ ├─┬ detective@4.5.0 
  │ │ │ │ │ │ ├── acorn@4.0.13 
  │ │ │ │ │ │ └── defined@1.0.0 
  │ │ │ │ │ ├── glob@5.0.15 
  │ │ │ │ │ ├── iconv-lite@0.4.19 
  │ │ │ │ │ ├── q@1.5.0 
  │ │ │ │ │ └─┬ recast@0.11.23 
  │ │ │ │ │   ├── ast-types@0.9.6 
  │ │ │ │ │   └── esprima@3.1.3 
  │ │ │ │ ├─┬ defs@1.1.1 
  │ │ │ │ │ ├─┬ alter@0.2.0 
  │ │ │ │ │ │ └── stable@0.1.6 
  │ │ │ │ │ ├── ast-traverse@0.1.1 
  │ │ │ │ │ ├── breakable@1.0.0 
  │ │ │ │ │ ├── simple-fmt@0.1.0 
  │ │ │ │ │ ├── simple-is@0.2.0 
  │ │ │ │ │ ├── stringmap@0.2.2 
  │ │ │ │ │ ├── stringset@0.2.1 
  │ │ │ │ │ ├── tryor@0.1.2 
  │ │ │ │ │ └─┬ yargs@3.27.0 
  │ │ │ │ │   ├── camelcase@1.2.1 
  │ │ │ │ │   ├─┬ cliui@2.1.0 
  │ │ │ │ │   │ ├─┬ center-align@0.1.3 
  │ │ │ │ │   │ │ ├─┬ align-text@0.1.4 
  │ │ │ │ │   │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ │   │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ │ │   │ │ │ ├── longest@1.0.1 
  │ │ │ │ │   │ │ │ └── repeat-string@1.6.1 
  │ │ │ │ │   │ │ └── lazy-cache@1.0.4 
  │ │ │ │ │   │ ├── right-align@0.1.3 
  │ │ │ │ │   │ └── wordwrap@0.0.2 
  │ │ │ │ │   ├── decamelize@1.2.0 
  │ │ │ │ │   ├─┬ os-locale@1.4.0 
  │ │ │ │ │   │ └─┬ lcid@1.0.0 
  │ │ │ │ │   │   └── invert-kv@1.0.0 
  │ │ │ │ │   ├── window-size@0.1.4 
  │ │ │ │ │   └── y18n@3.2.1 
  │ │ │ │ ├── esprima-fb@15001.1001.0-dev-harmony-fb 
  │ │ │ │ ├─┬ recast@0.10.33 
  │ │ │ │ │ └── ast-types@0.8.12 
  │ │ │ │ └── through@2.3.8 
  │ │ │ ├─┬ regexpu@1.3.0 
  │ │ │ │ ├── esprima@2.7.3 
  │ │ │ │ ├── regenerate@1.3.3 
  │ │ │ │ ├── regjsgen@0.2.0 
  │ │ │ │ └─┬ regjsparser@0.1.5 
  │ │ │ │   └── jsesc@0.5.0 
  │ │ │ ├── repeating@1.1.3 
  │ │ │ ├── shebang-regex@1.0.0 
  │ │ │ ├── slash@1.0.0 
  │ │ │ ├── source-map@0.5.7 
  │ │ │ ├─┬ source-map-support@0.2.10 
  │ │ │ │ └─┬ source-map@0.1.32 
  │ │ │ │   └── amdefine@1.0.1 
  │ │ │ ├── to-fast-properties@1.0.3 
  │ │ │ ├── trim-right@1.0.1 
  │ │ │ └── try-resolve@1.0.1 
  │ │ ├── clone@0.2.0 
  │ │ ├── rsvp@3.6.2 
  │ │ └── workerpool@2.2.4 
  │ ├── clone@2.1.1 
  │ ├─┬ ember-cli-version-checker@1.3.1 
  │ │ └── semver@5.4.1 
  │ └─┬ resolve@1.4.0 
  │   └── path-parse@1.0.5 
  ├─┬ ember-cli-htmlbars@1.3.4 
  │ ├─┬ broccoli-persistent-filter@1.4.3 
  │ │ ├─┬ async-disk-cache@1.3.3 
  │ │ │ ├─┬ istextorbinary@2.1.0 
  │ │ │ │ ├── binaryextensions@2.0.0 
  │ │ │ │ ├── editions@1.3.3 
  │ │ │ │ └── textextensions@2.1.0 
  │ │ │ └── username-sync@1.0.1 
  │ │ └─┬ async-promise-queue@1.0.4 
  │ │   └─┬ async@2.5.0 
  │ │     └── lodash@4.17.4 
  │ ├─┬ hash-for-dep@1.2.0 
  │ │ └─┬ broccoli-kitchen-sink-helpers@0.3.1 
  │ │   └── glob@5.0.15 
  │ ├─┬ json-stable-stringify@1.0.1 
  │ │ └── jsonify@0.0.0 
  │ └─┬ strip-bom@2.0.0 
  │   └── is-utf8@0.2.1 
  ├─┬ mobiledoc-kit@0.10.19 
  │ ├── mobiledoc-dom-renderer@0.6.5 
  │ └── mobiledoc-text-renderer@0.3.2 
  └── showdown-ghost@0.4.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/ghost-editor/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 19% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0512 took 6.042s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")
var glob = require("glob")
var _0666 = parseInt('666', 8)

var defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
var timeout = 0

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0
  var errState = null
  var n = 0

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, function (er, stat) {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

  function next (er) {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  function afterGlob (er, results) {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(function (p) {
      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            var time = busyTries * 100
            // try again, with the same exact callback as this one.
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, time)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      })
    })
  }
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, _0666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, _0666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  var results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (var i = 0; i < results.length; i++) {
    var p = results[i]

    try {
      var st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  var retries = isWindows ? 100 : 1
  var i = 0
  do {
    var threw = true
    try {
      var ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/ghost-editor/node_modules/ghost-editor/index.js. Coverage (Term): 12% Coverage (LOC): 11%
*- File /root/Targets/ghost-editor/node_modules/broccoli-merge-trees/index.js. Coverage (Term): 3% Coverage (LOC): 4%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
