/root/Targets/smithsonian
└─┬ smithsonian@3.0.1 
  ├── async@1.5.2 
  ├─┬ body-parser@1.18.2 
  │ ├── bytes@3.0.0 
  │ ├── content-type@1.0.4 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├── depd@1.1.1 
  │ ├─┬ http-errors@1.6.2 
  │ │ ├── inherits@2.0.3 
  │ │ └── setprototypeof@1.0.3 
  │ ├── iconv-lite@0.4.19 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── qs@6.5.1 
  │ ├─┬ raw-body@2.3.2 
  │ │ └── unpipe@1.0.0 
  │ └─┬ type-is@1.6.15 
  │   ├── media-typer@0.3.0 
  │   └─┬ mime-types@2.1.17 
  │     └── mime-db@1.30.0 
  ├─┬ express@4.16.1 
  │ ├─┬ accepts@1.3.4 
  │ │ └── negotiator@0.6.1 
  │ ├── array-flatten@1.1.1 
  │ ├── content-disposition@0.5.2 
  │ ├── cookie@0.3.1 
  │ ├── cookie-signature@1.0.6 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├── finalhandler@1.1.0 
  │ ├── fresh@0.5.2 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@2.0.2 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.5.2 
  │ ├── range-parser@1.2.0 
  │ ├── safe-buffer@5.1.1 
  │ ├─┬ send@0.16.1 
  │ │ ├── destroy@1.0.4 
  │ │ └── mime@1.4.1 
  │ ├── setprototypeof@1.1.0 
  │ ├── statuses@1.3.1 
  │ ├── utils-merge@1.0.1 
  │ └── vary@1.1.2 
  ├─┬ jade@1.11.0 
  │ ├── character-parser@1.2.1 
  │ ├─┬ clean-css@3.4.28 
  │ │ ├─┬ commander@2.8.1 
  │ │ │ └── graceful-readlink@1.0.1 
  │ │ └─┬ source-map@0.4.4 
  │ │   └── amdefine@1.0.1 
  │ ├── commander@2.6.0 
  │ ├─┬ constantinople@3.0.2 
  │ │ └── acorn@2.7.0 
  │ ├─┬ jstransformer@0.0.2 
  │ │ ├── is-promise@2.1.0 
  │ │ └─┬ promise@6.1.0 
  │ │   └── asap@1.0.0 
  │ ├─┬ transformers@2.1.0 
  │ │ ├─┬ css@1.0.8 
  │ │ │ ├── css-parse@1.0.4 
  │ │ │ └── css-stringify@1.0.5 
  │ │ ├─┬ promise@2.0.0 
  │ │ │ └── is-promise@1.0.1 
  │ │ └─┬ uglify-js@2.2.5 
  │ │   ├─┬ optimist@0.3.7 
  │ │   │ └── wordwrap@0.0.3 
  │ │   └── source-map@0.1.43 
  │ ├─┬ uglify-js@2.8.29 
  │ │ ├── source-map@0.5.7 
  │ │ ├── uglify-to-browserify@1.0.2 
  │ │ └─┬ yargs@3.10.0 
  │ │   ├── camelcase@1.2.1 
  │ │   ├─┬ cliui@2.1.0 
  │ │   │ ├─┬ center-align@0.1.3 
  │ │   │ │ ├─┬ align-text@0.1.4 
  │ │   │ │ │ ├─┬ kind-of@3.2.2 
  │ │   │ │ │ │ └── is-buffer@1.1.5 
  │ │   │ │ │ ├── longest@1.0.1 
  │ │   │ │ │ └── repeat-string@1.6.1 
  │ │   │ │ └── lazy-cache@1.0.4 
  │ │   │ ├── right-align@0.1.3 
  │ │   │ └── wordwrap@0.0.2 
  │ │   ├── decamelize@1.2.0 
  │ │   └── window-size@0.1.0 
  │ ├── void-elements@2.0.1 
  │ └─┬ with@4.0.3 
  │   ├── acorn@1.2.2 
  │   └── acorn-globals@1.0.9 
  ├─┬ metalsmith@2.3.0 
  │ ├── absolute@0.0.1 
  │ ├─┬ chalk@1.1.3 
  │ │ ├── ansi-styles@2.2.1 
  │ │ ├── escape-string-regexp@1.0.5 
  │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ └── ansi-regex@2.1.1 
  │ │ ├── strip-ansi@3.0.1 
  │ │ └── supports-color@2.0.0 
  │ ├── clone@1.0.2 
  │ ├─┬ co-fs-extra@1.2.1 
  │ │ ├─┬ co-from-stream@0.0.0 
  │ │ │ └── co-read@0.0.1 
  │ │ ├─┬ fs-extra@0.26.7 
  │ │ │ ├── graceful-fs@4.1.11 
  │ │ │ ├── jsonfile@2.4.0 
  │ │ │ ├── klaw@1.3.1 
  │ │ │ └── path-is-absolute@1.0.1 
  │ │ └─┬ thunkify-wrap@1.0.4 
  │ │   └── enable@1.3.2 
  │ ├─┬ gray-matter@2.1.1 
  │ │ ├─┬ ansi-red@0.1.1 
  │ │ │ └── ansi-wrap@0.1.0 
  │ │ ├── coffee-script@1.12.7 
  │ │ ├─┬ extend-shallow@2.0.1 
  │ │ │ └── is-extendable@0.1.1 
  │ │ ├─┬ js-yaml@3.10.0 
  │ │ │ ├─┬ argparse@1.0.9 
  │ │ │ │ └── sprintf-js@1.0.3 
  │ │ │ └── esprima@4.0.0 
  │ │ └── toml@2.3.3 
  │ ├── has-generators@1.0.1 
  │ ├── is@3.2.1 
  │ ├── is-utf8@0.2.1 
  │ ├─┬ recursive-readdir@2.2.1 
  │ │ └─┬ minimatch@3.0.3 
  │ │   └─┬ brace-expansion@1.1.8 
  │ │     ├── balanced-match@1.0.0 
  │ │     └── concat-map@0.0.1 
  │ ├─┬ rimraf@2.6.2 
  │ │ └─┬ glob@7.1.2 
  │ │   ├── fs.realpath@1.0.0 
  │ │   ├─┬ inflight@1.0.6 
  │ │   │ └── wrappy@1.0.2 
  │ │   ├── minimatch@3.0.4 
  │ │   └── once@1.4.0 
  │ ├── stat-mode@0.2.2 
  │ ├── thunkify@2.1.2 
  │ ├─┬ unyield@0.0.1 
  │ │ └── co@3.1.0 
  │ ├─┬ ware@1.3.0 
  │ │ └── wrap-fn@0.1.5 
  │ └── win-fork@1.1.1 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  ├── serve-static@1.13.1 
  └─┬ superagent@1.8.5 
    ├── component-emitter@1.2.1 
    ├── cookiejar@2.0.6 
    ├── extend@3.0.0 
    ├─┬ form-data@1.0.0-rc3 
    │ └─┬ combined-stream@1.0.5 
    │   └── delayed-stream@1.0.0 
    ├── formidable@1.0.17 
    ├── mime@1.3.4 
    ├── qs@2.3.3 
    ├─┬ readable-stream@1.0.27-1 
    │ ├── core-util-is@1.0.2 
    │ ├── isarray@0.0.1 
    │ └── string_decoder@0.10.31 
    └── reduce-component@1.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/smithsonian/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 28.000000000000004% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","captureStackTrace","cwd","max","getFileName","getLineNumber","getColumnNumber","isEval","getFunctionName","create","reduce","parseInt","charCodeAt","abs","Number","toString","toUpperCase","join","call","RegExp"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0251 took 24.8723s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program 
var absolute = require('absolute');
var assert = require('assert');
var clone = require('clone');
var fs = require('co-fs-extra');
var is = require('is');
var matter = require('gray-matter');
var Mode = require('stat-mode');
var path = require('path');
var readdir = require('recursive-readdir');
var rm = require('rimraf');
var thunkify = require('thunkify');
var unyield = require('unyield');
var utf8 = require('is-utf8');
var Ware = require('ware');

/**
 * Thunks.
 */

readdir = thunkify(readdir);
rm = thunkify(rm);

/**
 * Export `Metalsmith`.
 */

module.exports = Metalsmith;

/**
 * Initialize a new `Metalsmith` builder with a working `directory`.
 *
 * @param {String} directory
 */

function Metalsmith(directory){
  if (!(this instanceof Metalsmith)) return new Metalsmith(directory);
  assert(directory, 'You must pass a working directory path.');
  this.plugins = [];
  this.ignores = [];
  this.directory(directory);
  this.metadata({});
  this.source('src');
  this.destination('build');
  this.concurrency(Infinity);
  this.clean(true);
  this.frontmatter(true);
}

/**
 * Add a `plugin` function to the stack.
 *
 * @param {Function or Array} plugin
 * @return {Metalsmith}
 */

Metalsmith.prototype.use = function(plugin){
  this.plugins.push(plugin);
  return this;
};

/**
 * Get or set the working `directory`.
 *
 * @param {Object} directory
 * @return {Object or Metalsmith}
 */

Metalsmith.prototype.directory = function(directory){
  if (!arguments.length) return path.resolve(this._directory);
  assert(is.string(directory), 'You must pass a directory path string.');
  this._directory = directory;
  return this;
};

/**
 * Get or set the global `metadata` to pass to templates.
 *
 * @param {Object} metadata
 * @return {Object or Metalsmith}
 */

Metalsmith.prototype.metadata = function(metadata){
  if (!arguments.length) return this._metadata;
  assert(is.object(metadata), 'You must pass a metadata object.');
  this._metadata = clone(metadata);
  return this;
};

/**
 * Get or set the source directory.
 *
 * @param {String} path
 * @return {String or Metalsmith}
 */

Metalsmith.prototype.source = function(path){
  if (!arguments.length) return this.path(this._source);
  assert(is.string(path), 'You must pass a source path string.');
  this._source = path;
  return this;
};

/**
 * Get or set the destination directory.
 *
 * @param {String} path
 * @return {String or Metalsmith}
 */

Metalsmith.prototype.destination = function(path){
  if (!arguments.length) return this.path(this._destination);
  assert(is.string(path), 'You must pass a destination path string.');
  this._destination = path;
  return this;
};

/**
 * Get or set the maximum number of files to open at once.
 *
 * @param {Number} max
 * @return {Number or Metalsmith}
 */

Metalsmith.prototype.concurrency = function(max){
  if (!arguments.length) return this._concurrency;
  assert(is.number(max), 'You must pass a number for concurrency.');
  this._concurrency = max;
  return this;
};

/**
 * Get or set whether the destination directory will be removed before writing.
 *
 * @param {Boolean} clean
 * @return {Boolean or Metalsmith}
 */
Metalsmith.prototype.clean = function(clean){
  if (!arguments.length) return this._clean;
  assert(is.boolean(clean), 'You must pass a boolean.');
  this._clean = clean;
  return this;
};

/**
 * Optionally turn off frontmatter parsing.
 *
 * @param {Boolean} frontmatter
 * @return {Boolean or Metalsmith}
 */

Metalsmith.prototype.frontmatter = function(frontmatter){
  if (!arguments.length) return this._frontmatter;
  assert(is.boolean(frontmatter), 'You must pass a boolean.');
  this._frontmatter = frontmatter;
  return this;
};

/**
 * Add a file or files to the list of ignores.
 *
 * @param {String or Strings} The names of files or directories to ignore.
 * @return {Metalsmith}
 */
Metalsmith.prototype.ignore = function(files){
  if (!arguments.length) return this.ignores.slice();
  this.ignores = this.ignores.concat(files);
  return this;
};

/**
 * Resolve `paths` relative to the root directory.
 *
 * @param {String} paths...
 * @return {String}
 */

Metalsmith.prototype.path = function(){
  var paths = [].slice.call(arguments);
  paths.unshift(this.directory());
  return path.resolve.apply(path, paths);
};

/**
 * Build with the current settings to the destination directory.
 *
 * @return {Object}
 */

Metalsmith.prototype.build = unyield(function*(){
  var clean = this.clean();
  var dest = this.destination();
  if (clean) yield rm(path.join(dest, '*'));

  var files = yield this.process();
  yield this.write(files);
  return files;
});

/**
 * Process files through plugins without writing out files.
 *
 * @return {Object}
 */

Metalsmith.prototype.process = unyield(function*(){
  var files = yield this.read();
  files = yield this.run(files);
  return files;
});

/**
 * Run a set of `files` through the plugins stack.
 *
 * @param {Object} files
 * @param {Array} plugins
 * @return {Object}
 */

Metalsmith.prototype.run = unyield(function*(files, plugins){
  var ware = new Ware(plugins || this.plugins);
  var run = thunkify(ware.run.bind(ware));
  var res = yield run(files, this);
  return res[0];
});

/**
 * Read a dictionary of files from a `dir`, parsing frontmatter. If no directory
 * is provided, it will default to the source directory.
 *
 * @param {String} dir (optional)
 * @return {Object}
 */

Metalsmith.prototype.read = unyield(function*(dir){
  dir = dir || this.source();
  var read = this.readFile.bind(this);
  var concurrency = this.concurrency();
  var ignores = this.ignores || null;
  var paths = yield readdir(dir, ignores);
  var files = [];
  var complete = 0;
  var batch;

  while (complete < paths.length) {
    batch = paths.slice(complete, complete + concurrency);
    batch = yield batch.map(read);
    files = files.concat(batch);
    complete += concurrency;
  }

  return paths.reduce(memoizer, {});

  function memoizer(memo, file, i) {
    file = path.relative(dir, file);
    memo[file] = files[i];
    return memo;
  }
});

/**
 * Read a `file` by path. If the path is not absolute, it will be resolved
 * relative to the source directory.
 *
 * @param {String} file
 * @return {Object}
 */

Metalsmith.prototype.readFile = unyield(function*(file){
  var src = this.source();
  var ret = {};

  if (!absolute(file)) file = path.resolve(src, file);

  try {
    var frontmatter = this.frontmatter();
    var stats = yield fs.stat(file);
    var buffer = yield fs.readFile(file);
    var parsed;

    if (frontmatter && utf8(buffer)) {
      try {
        parsed = matter(buffer.toString());
      } catch (e) {
        var err = new Error('Invalid frontmatter in the file at: ' + file);
        err.code = 'invalid_frontmatter';
        throw err;
      }

      ret = parsed.data;
      ret.contents = new Buffer(parsed.content);
    } else {
      ret.contents = buffer;
    }

    ret.mode = Mode(stats).toOctal();
    ret.stats = stats;
  } catch (e) {
    if (e.code == 'invalid_frontmatter') throw e;
    e.message = 'Failed to read the file at: ' + file + '\n\n' + e.message;
    e.code = 'failed_read';
    throw e;
  }

  return ret;
});

/**
 * Write a dictionary of `files` to a destination `dir`. If no directory is
 * provided, it will default to the destination directory.
 *
 * @param {Object} files
 * @param {String} dir (optional)
 */

Metalsmith.prototype.write = unyield(function*(files, dir){
  dir = dir || this.destination();
  var write = this.writeFile.bind(this);
  var concurrency = this.concurrency();
  var keys = Object.keys(files);
  var complete = 0;
  var batch;

  while (complete < keys.length) {
    batch = keys.slice(complete, complete + concurrency);
    yield batch.map(writer);
    complete += concurrency;
  }

  function writer(key){
    var file = path.resolve(dir, key);
    return write(file, files[key]);
  }
});

/**
 * Write a `file` by path with `data`. If the path is not absolute, it will be
 * resolved relative to the destination directory.
 *
 * @param {String} file
 * @param {Object} data
 */

Metalsmith.prototype.writeFile = unyield(function*(file, data){
  var dest = this.destination();
  if (!absolute(file)) file = path.resolve(dest, file);

  try {
    yield fs.outputFile(file, data.contents);
    if (data.mode) yield fs.chmod(file, data.mode);
  } catch (e) {
    e.message = 'Failed to write the file at: ' + file + '\n\n' + e.message;
    throw e;
  }
});
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/smithsonian/node_modules/smithsonian/index.js. Coverage (Term): 11% Coverage (LOC): 15%
*- File /root/Targets/smithsonian/node_modules/express/index.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/smithsonian/node_modules/express/lib/express.js. Coverage (Term): 64% Coverage (LOC): 68%
*- File /root/Targets/smithsonian/node_modules/body-parser/index.js. Coverage (Term): 63% Coverage (LOC): 70%
*- File /root/Targets/smithsonian/node_modules/depd/index.js. Coverage (Term): 32% Coverage (LOC): 34%
*- File /root/Targets/smithsonian/node_modules/depd/lib/compat/index.js. Coverage (Term): 87% Coverage (LOC): 97%
*- File eval. Coverage (Term): 38% Coverage (LOC): 50%
*- File /root/Targets/smithsonian/node_modules/merge-descriptors/index.js. Coverage (Term): 26% Coverage (LOC): 26%
*- File /root/Targets/smithsonian/node_modules/express/lib/application.js. Coverage (Term): 17% Coverage (LOC): 25%
*- File /root/Targets/smithsonian/node_modules/finalhandler/index.js. Coverage (Term): 15% Coverage (LOC): 21%
*- File /root/Targets/smithsonian/node_modules/debug/src/index.js. Coverage (Term): 81% Coverage (LOC): 83%
*- File /root/Targets/smithsonian/node_modules/debug/src/node.js. Coverage (Term): 34% Coverage (LOC): 43%
*- File /root/Targets/smithsonian/node_modules/debug/src/debug.js. Coverage (Term): 44% Coverage (LOC): 48%
*- File /root/Targets/smithsonian/node_modules/ms/index.js. Coverage (Term): 12% Coverage (LOC): 15%
*- File /root/Targets/smithsonian/node_modules/encodeurl/index.js. Coverage (Term): 63% Coverage (LOC): 89%
*- File /root/Targets/smithsonian/node_modules/escape-html/index.js. Coverage (Term): 16% Coverage (LOC): 18%
*- File /root/Targets/smithsonian/node_modules/on-finished/index.js. Coverage (Term): 13% Coverage (LOC): 17%
*- File /root/Targets/smithsonian/node_modules/ee-first/index.js. Coverage (Term): 9% Coverage (LOC): 13%
*- File /root/Targets/smithsonian/node_modules/parseurl/index.js. Coverage (Term): 15% Coverage (LOC): 18%
*- File /root/Targets/smithsonian/node_modules/statuses/index.js. Coverage (Term): 56% Coverage (LOC): 67%
*- File /root/Targets/smithsonian/node_modules/unpipe/index.js. Coverage (Term): 16% Coverage (LOC): 20%
*- File /root/Targets/smithsonian/node_modules/express/lib/router/index.js. Coverage (Term): 8% Coverage (LOC): 12%
*- File /root/Targets/smithsonian/node_modules/express/lib/router/route.js. Coverage (Term): 18% Coverage (LOC): 23%
*- File /root/Targets/smithsonian/node_modules/array-flatten/array-flatten.js. Coverage (Term): 17% Coverage (LOC): 26%
*- File /root/Targets/smithsonian/node_modules/express/lib/router/layer.js. Coverage (Term): 14% Coverage (LOC): 18%
*- File /root/Targets/smithsonian/node_modules/path-to-regexp/index.js. Coverage (Term): 5% Coverage (LOC): 9%
*- File /root/Targets/smithsonian/node_modules/methods/index.js. Coverage (Term): 59% Coverage (LOC): 27%
*- File /root/Targets/smithsonian/node_modules/utils-merge/index.js. Coverage (Term): 40% Coverage (LOC): 40%
*- File /root/Targets/smithsonian/node_modules/express/node_modules/setprototypeof/index.js. Coverage (Term): 32% Coverage (LOC): 38%
*- File /root/Targets/smithsonian/node_modules/express/lib/middleware/init.js. Coverage (Term): 27% Coverage (LOC): 38%
*- File /root/Targets/smithsonian/node_modules/express/lib/middleware/query.js. Coverage (Term): 32% Coverage (LOC): 35%
*- File /root/Targets/smithsonian/node_modules/qs/lib/index.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/smithsonian/node_modules/qs/lib/stringify.js. Coverage (Term): 8% Coverage (LOC): 18%
*- File /root/Targets/smithsonian/node_modules/qs/lib/utils.js. Coverage (Term): 12% Coverage (LOC): 18%
*- File /root/Targets/smithsonian/node_modules/qs/lib/formats.js. Coverage (Term): 61% Coverage (LOC): 87%
*- File /root/Targets/smithsonian/node_modules/qs/lib/parse.js. Coverage (Term): 7% Coverage (LOC): 17%
*- File /root/Targets/smithsonian/node_modules/express/lib/view.js. Coverage (Term): 21% Coverage (LOC): 28%
*- File /root/Targets/smithsonian/node_modules/express/lib/utils.js. Coverage (Term): 26% Coverage (LOC): 31%
*- File /root/Targets/smithsonian/node_modules/safe-buffer/index.js. Coverage (Term): 36% Coverage (LOC): 44%
*- File /root/Targets/smithsonian/node_modules/content-disposition/index.js. Coverage (Term): 12% Coverage (LOC): 20%
*- File /root/Targets/smithsonian/node_modules/content-type/index.js. Coverage (Term): 12% Coverage (LOC): 18%
*- File /root/Targets/smithsonian/node_modules/send/index.js. Coverage (Term): 12% Coverage (LOC): 19%
*- File /root/Targets/smithsonian/node_modules/http-errors/index.js. Coverage (Term): 46% Coverage (LOC): 40%
*- File /root/Targets/smithsonian/node_modules/setprototypeof/index.js. Coverage (Term): 32% Coverage (LOC): 38%
*- File /root/Targets/smithsonian/node_modules/inherits/inherits.js. Coverage (Term): 74% Coverage (LOC): 88%
*- File /root/Targets/smithsonian/node_modules/destroy/index.js. Coverage (Term): 32% Coverage (LOC): 33%
*- File /root/Targets/smithsonian/node_modules/etag/index.js. Coverage (Term): 16% Coverage (LOC): 32%
*- File /root/Targets/smithsonian/node_modules/fresh/index.js. Coverage (Term): 10% Coverage (LOC): 13%
*- File /root/Targets/smithsonian/node_modules/mime/mime.js. Coverage (Term): 55% Coverage (LOC): 75%
*- File /root/Targets/smithsonian/node_modules/range-parser/index.js. Coverage (Term): 8% Coverage (LOC): 15%
*- File /root/Targets/smithsonian/node_modules/proxy-addr/index.js. Coverage (Term): 12% Coverage (LOC): 22%
*- File /root/Targets/smithsonian/node_modules/forwarded/index.js. Coverage (Term): 14% Coverage (LOC): 18%
*- File /root/Targets/smithsonian/node_modules/ipaddr.js/lib/ipaddr.js. Coverage (Term): 25% Coverage (LOC): 47%
*- File /root/Targets/smithsonian/node_modules/express/lib/request.js. Coverage (Term): 26% Coverage (LOC): 40%
*- File /root/Targets/smithsonian/node_modules/accepts/index.js. Coverage (Term): 16% Coverage (LOC): 23%
*- File /root/Targets/smithsonian/node_modules/negotiator/index.js. Coverage (Term): 33% Coverage (LOC): 47%
*- File /root/Targets/smithsonian/node_modules/mime-types/index.js. Coverage (Term): 48% Coverage (LOC): 51%
*- File /root/Targets/smithsonian/node_modules/mime-db/index.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/smithsonian/node_modules/type-is/index.js. Coverage (Term): 13% Coverage (LOC): 20%
*- File /root/Targets/smithsonian/node_modules/media-typer/index.js. Coverage (Term): 11% Coverage (LOC): 16%
*- File /root/Targets/smithsonian/node_modules/express/lib/response.js. Coverage (Term): 11% Coverage (LOC): 15%
*- File /root/Targets/smithsonian/node_modules/cookie-signature/index.js. Coverage (Term): 19% Coverage (LOC): 40%
*- File /root/Targets/smithsonian/node_modules/cookie/index.js. Coverage (Term): 10% Coverage (LOC): 13%
*- File /root/Targets/smithsonian/node_modules/vary/index.js. Coverage (Term): 10% Coverage (LOC): 15%
*- File /root/Targets/smithsonian/node_modules/body-parser/lib/types/json.js. Coverage (Term): 14% Coverage (LOC): 16%
*- File /root/Targets/smithsonian/node_modules/bytes/index.js. Coverage (Term): 19% Coverage (LOC): 26%
*- File /root/Targets/smithsonian/node_modules/body-parser/lib/read.js. Coverage (Term): 12% Coverage (LOC): 12%
*- File /root/Targets/smithsonian/node_modules/raw-body/index.js. Coverage (Term): 8% Coverage (LOC): 9%
*- File /root/Targets/smithsonian/node_modules/iconv-lite/lib/index.js. Coverage (Term): 27% Coverage (LOC): 36%
*- File /root/Targets/smithsonian/node_modules/iconv-lite/lib/bom-handling.js. Coverage (Term): 27% Coverage (LOC): 42%
*- File /root/Targets/smithsonian/node_modules/iconv-lite/lib/streams.js. Coverage (Term): 25% Coverage (LOC): 35%
*- File /root/Targets/smithsonian/node_modules/iconv-lite/lib/extend-node.js. Coverage (Term): 6% Coverage (LOC): 8%
*- File /root/Targets/smithsonian/node_modules/serve-static/index.js. Coverage (Term): 13% Coverage (LOC): 17%
*- File /root/Targets/smithsonian/node_modules/body-parser/lib/types/urlencoded.js. Coverage (Term): 13% Coverage (LOC): 14%
*- File /root/Targets/smithsonian/node_modules/metalsmith/index.js. Coverage (Term): 80% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
