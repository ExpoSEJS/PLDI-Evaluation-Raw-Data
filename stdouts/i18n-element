/root/Targets/i18n-element
└── i18n-element@2.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/i18n-element/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0584 took 3.8922s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:78) on program <!--
@license https://github.com/t2ym/i18n-element/blob/master/LICENSE.md
Copyright (c) 2016, Tetsuya Mori <t2y3141592@gmail.com>. All rights reserved.
-->
<link rel="import" href="../polymer/polymer.html">
<link rel="import" href="../i18n-behavior/i18n-behavior.html">

<script>
// Globally expose base elements and mixins
window.BaseElements = window.BaseElements || {};
window.Mixins = window.Mixins || {};

// Localizable mixin
Mixins.Localizable = function (base) {

  return class Localizable extends Polymer.mixinBehaviors([BehaviorsStore._I18nBehavior], base) {
    constructor () {
      Localizable.template;
      super();
    }
    static get _rawTemplate() {
      let id = this.is;
      let name = this.name ||
        (typeof this === 'function' ?
                this.toString().replace(/^[\S\s]*?function\s*/, "").replace(/[\s\(\/][\S\s]+$/, "") :
                undefined);
      if (!id && name && name !== 'Localizable' && name != 'class' && !name.match(/^_class/)) {
        id = this.is = this._uncamelCase(name);
      }
      // TODO: template fetching should be flexible to detect super.template
      let template = Polymer.DomModule.import(id, 'template');
      if (id && !template) {
        let current = (!window.HTMLImports || HTMLImports.useNative) ? document.currentScript
                                            : document._currentScript || document.currentScript;
        let _tmpNode = current;
        let ownerDocument = current ? current.ownerDocument : document;
        let baseURI = ownerDocument.baseURI;
        if (current && current.ownerDocument && current.ownerDocument.nodeType === current.ownerDocument.DOCUMENT_NODE) {
          while (_tmpNode && _tmpNode.tagName !== 'LINK' &&
            _tmpNode.nodeType !== _tmpNode.DOCUMENT_FRAGMENT_NODE &&
            _tmpNode.nodeType !== _tmpNode.DOCUMENT_NODE) {
            _tmpNode = _tmpNode.parentNode;
          }
          if (_tmpNode &&
            (_tmpNode.nodeType === _tmpNode.DOCUMENT_FRAGMENT_NODE ||
             _tmpNode.nodeType === _tmpNode.DOCUMENT_NODE)) {
            ownerDocument = _tmpNode;
            baseURI = ownerDocument.baseURI;
          }
          else if (_tmpNode && _tmpNode.import === _tmpNode) {
            ownerDocument = _tmpNode;
            baseURI = ownerDocument.href; // link node
          }
        }
        template = ownerDocument.querySelector('template[id=' + id + ']') ||
                   document.querySelector('template[id=' + id + ']');
        if (!template && id !== 'i18n-dom-bind') {
          template = document.createElement('template');
          template.setAttribute('id', id);
          console.warn('Localizable._rawTemplate: ' + id + ' has no template. Supplying an empty template');
        }
        if (template) {
          let domModule = document.createElement('dom-module');
          let assetpath = typeof URL === 'function' && URL.name === 'URL'
            ? new URL(baseURI || document.baseURI).pathname
            : (uri => { let a = document.createElement('a'); a.href = uri; return ('/' + a.pathname).replace(/^\/\//, '/'); })(baseURI);
          domModule.appendChild(template);
          domModule.setAttribute('assetpath', 
                                  template.hasAttribute('basepath') ?
                                    template.getAttribute('basepath') :
                                    template.hasAttribute('assetpath') ? 
                                      template.getAttribute('assetpath') : 
                                      assetpath);
          domModule.register(id);
          this._template = template;
        }
      }
      return template;
    }
    static get template() {
      return this._i18nPreprocess(this._rawTemplate);
    }
    static _uncamelCase(name) {
      return name
        // insert a hyphen between lower & upper
        .replace(/([a-z0-9])([A-Z])/g, '$1 $2')
        // space before last upper in a sequence followed by lower
        .replace(/\b([A-Z]+)([A-Z])([a-z0-9])/, '$1 $2$3')
        // replace spaces with hyphens
        .replace(/ /g, '-')
        // lowercase
        .toLowerCase();
    }
    static get _templateLocalizable () {
      return this.hasOwnProperty('__templateLocalizable');
    }
    static set _templateLocalizable (value) {
      this.__templateLocalizable = value;
    }
    static _i18nPreprocess(template) {
      if (this.is && template && !this._templateLocalizable) {
        this._templateLocalizable = this.prototype._constructDefaultBundle(template);
      }
      return template;
    }
    get is () {
      return this.constructor.is;
    }
    connectedCallback() {
      super.connectedCallback();
    }
  };
}

// Logger mixin
Mixins.Logger = (base) => class extends base {
  connectedCallback() {
    super.connectedCallback();
    console.log('<' + Object.getPrototypeOf(this).constructor.is + '>: ' +
      'id = ' + this.id + ', ' +
      'this.text = ' + JSON.stringify(this.text, null, 2));
    console.log('Preprocessed template = \n', Object.getPrototypeOf(this).constructor.template);
  }
};

// I18N Base Element
Object.defineProperty(BaseElements, 'I18nElement', {
  get: function () {
    return Mixins.Localizable(Polymer.LegacyElementMixin(HTMLElement));
  }
});
</script>
 at SyntaxError: Unexpected token (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
