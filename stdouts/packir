/root/Targets/packir
└─┬ packir@0.7.10 
  ├── inherits-js@0.1.1 
  ├── lodash@4.17.4 
  ├── murmurhash@0.0.2 
  ├── setimmediate@1.0.5 
  └── store@1.3.20 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/packir/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 31% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0856 took 3.4375s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (11:4) on program var Grid       = require("./grid"),
    Row        = require("./row"),
    Field      = require("./field"),
    Fields     = require("./fields"),
    Compressor = require("./compressor"),
    Strategy   = require("./strategy"),
    Hash       = require("./hash"),
    Store      = require("./store"),
    _          = require("lodash"),
    inherits   = require('inherits-js'),
    assert     = require("assert");

/**
 * @class Area
 * @constructor
 * @abstract
 */
function Area(width, height) {
    this.width = width;
    this.height = height;
}

/**
 * Injects strategy.
 *
 * @param strategy
 */
Area.prototype.injectStrategy = function(strategy) {
    assert(strategy instanceof Strategy, "Strategy is expected");
    assert(_.isEmpty(this.strategy), "Strategy is already set");
    this.strategy = strategy;
};

/**
 * Injects store.
 *
 * @param store
 */
Area.prototype.injectStore = function(store) {
    assert(store instanceof Store, "Store is expected");
    assert(_.isEmpty(this.store), "Store is already set");
    this.store = store;
};

Area.prototype.injectHash = function(hash) {
    assert(hash instanceof Hash, "Hash is expected");
    assert(_.isEmpty(this.hash), "Hash is already set");
    this.hash = hash;
};

/**
 * Fills area with fields.
 *
 * @param stack
 * @param options
 * @param done
 *
 * @returns {Grid}
 */
Area.prototype.fill = function(stack, options, done) {
    var self = this,
        fields, grid, x, y, margin,
        stepTop, stepLeft,
        cacheKey, gridCacheDefinition;

    if (_.isFunction(options)) {
        done = options;
        options = {};
    }

    x = _.pluck(stack, "width");
    y = _.pluck(stack, "height");

    margin = _.extend({ x: 0, y: 0, cut: false }, options.margin || {});

    if (margin.x) {
        x.push(margin.x);
    }

    if (margin.y) {
        y.push(margin.y);
    }

    stepTop  = Math.min.apply(Math, y);
    stepLeft = Math.min.apply(Math, x);

    margin.y/= stepTop;
    margin.x/= stepLeft;

    grid = new Grid(
        Math.floor(this.width / stepLeft),
        Math.floor(this.height / stepTop),
        stepLeft,
        stepTop,
        margin
    );

    fields = new Fields(
        _.map(stack, function (item, index) {
            assert(_.isNumber(item.width), "Item width is expected to be a number");
            assert(_.isNumber(item.height), "Item height is expected to be a number");

            return new Field(
                index,
                item.weight || index,
                item.width / stepLeft,
                item.height / stepTop
            );
        })
    );

    cacheKey = this.hash.hex(JSON.stringify([grid.getDefinition(), fields.getDefinition(), self.strategy.getDefinition()]));

    this.store.find(cacheKey, function(err, cachedGrid) {
        //if (err) {
        //    return done(err);
        //}

        if (cachedGrid) {
            _.forEach(cachedGrid.rows, function(obj, index, list) {
                grid.add(Row.fromJSON(obj), index == list.length);
            });

            return done(null, grid);
        }

        self.strategy.run(fields, grid, options, function(err, grid) {
            if (err) {
                return done(err);
            }

            self.store.set(cacheKey, grid.toJSON(), function(err) {
                //if (err) {
                //    return done(err);
                //}

                done(null, grid);
            });
        });
    });

    return grid;
};

Area.extend = function(proto, statics) {
    return inherits(this, proto, statics);
};

module.exports = Area; at SyntaxError: Unexpected token (11:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/packir/node_modules/packir/index.js. Coverage (Term): 20% Coverage (LOC): 20%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
