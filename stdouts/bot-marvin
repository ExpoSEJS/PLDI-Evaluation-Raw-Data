
> bot-marvin@2.0.2 postinstall /root/Targets/bot-marvin/node_modules/bot-marvin
> bot-marvin-init && bot-marvin --reset

Setting env variables
undefined
Setting env variables [SUCCESS]
Downloading tika server jar please wait !


downloading tika-server-1.11.jar 

Download was successfull !
Db config not set. Set using bot-marvin-db
Invalid db type :undefined
/root/Targets/bot-marvin
└─┬ bot-marvin@2.0.2 
  ├── check-types@6.0.0 
  ├─┬ cheerio@0.19.0 
  │ ├─┬ css-select@1.0.0 
  │ │ ├── boolbase@1.0.0 
  │ │ ├── css-what@1.0.0 
  │ │ ├── domutils@1.4.3 
  │ │ └── nth-check@1.0.1 
  │ ├─┬ dom-serializer@0.1.0 
  │ │ └── domelementtype@1.1.3 
  │ ├── entities@1.1.1 
  │ ├─┬ htmlparser2@3.8.3 
  │ │ ├── domelementtype@1.3.0 
  │ │ ├── domhandler@2.3.0 
  │ │ ├── domutils@1.5.1 
  │ │ ├── entities@1.0.0 
  │ │ └── readable-stream@1.1.14 
  │ └── lodash@3.10.1 
  ├── colors@1.1.2 
  ├── crypto@0.0.3 
  ├── death@1.0.0 
  ├─┬ download@4.4.3 
  │ ├─┬ caw@1.2.0 
  │ │ ├─┬ get-proxy@1.1.0 
  │ │ │ └─┬ rc@1.2.1 
  │ │ │   ├── deep-extend@0.4.2 
  │ │ │   ├── ini@1.3.4 
  │ │ │   └── strip-json-comments@2.0.1 
  │ │ ├── is-obj@1.0.1 
  │ │ └── object-assign@3.0.0 
  │ ├─┬ concat-stream@1.6.0 
  │ │ ├── inherits@2.0.3 
  │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ ├── isarray@1.0.0 
  │ │ │ └── string_decoder@1.0.3 
  │ │ └── typedarray@0.0.6 
  │ ├─┬ each-async@1.1.1 
  │ │ ├── onetime@1.1.0 
  │ │ └── set-immediate-shim@1.0.1 
  │ ├─┬ filenamify@1.2.1 
  │ │ ├── filename-reserved-regex@1.0.0 
  │ │ ├─┬ strip-outer@1.0.0 
  │ │ │ └── escape-string-regexp@1.0.5 
  │ │ └── trim-repeated@1.0.0 
  │ ├─┬ got@5.7.1 
  │ │ ├─┬ create-error-class@3.0.2 
  │ │ │ └── capture-stack-trace@1.0.0 
  │ │ ├─┬ duplexer2@0.1.4 
  │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │   ├── isarray@1.0.0 
  │ │ │   └── string_decoder@1.0.3 
  │ │ ├── is-redirect@1.0.0 
  │ │ ├── is-retry-allowed@1.1.0 
  │ │ ├── is-stream@1.1.0 
  │ │ ├── lowercase-keys@1.0.0 
  │ │ ├── node-status-codes@1.0.0 
  │ │ ├─┬ parse-json@2.2.0 
  │ │ │ └─┬ error-ex@1.3.1 
  │ │ │   └── is-arrayish@0.2.1 
  │ │ ├─┬ pinkie-promise@2.0.1 
  │ │ │ └── pinkie@2.0.4 
  │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ ├── isarray@1.0.0 
  │ │ │ └── string_decoder@1.0.3 
  │ │ ├── timed-out@3.1.3 
  │ │ ├── unzip-response@1.0.2 
  │ │ └─┬ url-parse-lax@1.0.0 
  │ │   └── prepend-http@1.0.4 
  │ ├─┬ gulp-decompress@1.2.0 
  │ │ ├─┬ archive-type@3.2.0 
  │ │ │ └── file-type@3.9.0 
  │ │ ├─┬ decompress@3.0.0 
  │ │ │ ├─┬ buffer-to-vinyl@1.1.0 
  │ │ │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ │ │ ├── isarray@1.0.0 
  │ │ │ │ │ └── string_decoder@1.0.3 
  │ │ │ │ └── uuid@2.0.3 
  │ │ │ ├─┬ decompress-tar@3.1.0 
  │ │ │ │ ├── is-tar@1.0.0 
  │ │ │ │ ├── object-assign@2.1.1 
  │ │ │ │ ├─┬ strip-dirs@1.1.1 
  │ │ │ │ │ ├── get-stdin@4.0.1 
  │ │ │ │ │ ├─┬ is-absolute@0.1.7 
  │ │ │ │ │ │ └── is-relative@0.1.3 
  │ │ │ │ │ ├── is-natural-number@2.1.1 
  │ │ │ │ │ └── sum-up@1.0.3 
  │ │ │ │ ├─┬ tar-stream@1.5.4 
  │ │ │ │ │ ├─┬ bl@1.2.1 
  │ │ │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │ │ │   ├── isarray@1.0.0 
  │ │ │ │ │ │   └── string_decoder@1.0.3 
  │ │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │ │   ├── isarray@1.0.0 
  │ │ │ │ │   └── string_decoder@1.0.3 
  │ │ │ │ └─┬ vinyl@0.4.6 
  │ │ │ │   └── clone@0.2.0 
  │ │ │ ├─┬ decompress-tarbz2@3.1.0 
  │ │ │ │ ├── is-bzip2@1.0.0 
  │ │ │ │ ├── object-assign@2.1.1 
  │ │ │ │ ├─┬ seek-bzip@1.0.5 
  │ │ │ │ │ └─┬ commander@2.8.1 
  │ │ │ │ │   └── graceful-readlink@1.0.1 
  │ │ │ │ └─┬ vinyl@0.4.6 
  │ │ │ │   └── clone@0.2.0 
  │ │ │ ├─┬ decompress-targz@3.1.0 
  │ │ │ │ ├── is-gzip@1.0.0 
  │ │ │ │ ├── object-assign@2.1.1 
  │ │ │ │ └─┬ vinyl@0.4.6 
  │ │ │ │   └── clone@0.2.0 
  │ │ │ ├─┬ decompress-unzip@3.4.0 
  │ │ │ │ ├── is-zip@1.0.0 
  │ │ │ │ ├── stat-mode@0.2.2 
  │ │ │ │ ├─┬ through2@2.0.3 
  │ │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │ │   ├── isarray@1.0.0 
  │ │ │ │ │   └── string_decoder@1.0.3 
  │ │ │ │ └─┬ yauzl@2.8.0 
  │ │ │ │   ├── buffer-crc32@0.2.13 
  │ │ │ │   └─┬ fd-slicer@1.0.1 
  │ │ │ │     └── pend@1.2.0 
  │ │ │ └─┬ vinyl-assign@1.2.1 
  │ │ │   └─┬ readable-stream@2.3.3 
  │ │ │     ├── isarray@1.0.0 
  │ │ │     └── string_decoder@1.0.3 
  │ │ ├─┬ gulp-util@3.0.8 
  │ │ │ ├── array-differ@1.0.0 
  │ │ │ ├── array-uniq@1.0.3 
  │ │ │ ├── beeper@1.1.1 
  │ │ │ ├── dateformat@2.0.0 
  │ │ │ ├─┬ fancy-log@1.3.0 
  │ │ │ │ └── time-stamp@1.1.0 
  │ │ │ ├─┬ gulplog@1.0.0 
  │ │ │ │ └── glogg@1.0.0 
  │ │ │ ├─┬ has-gulplog@0.1.0 
  │ │ │ │ └── sparkles@1.0.0 
  │ │ │ ├── lodash._reescape@3.0.0 
  │ │ │ ├── lodash._reevaluate@3.0.0 
  │ │ │ ├── lodash._reinterpolate@3.0.0 
  │ │ │ ├─┬ lodash.template@3.6.2 
  │ │ │ │ ├── lodash._basecopy@3.0.1 
  │ │ │ │ ├── lodash._basetostring@3.0.1 
  │ │ │ │ ├── lodash._basevalues@3.0.0 
  │ │ │ │ ├── lodash._isiterateecall@3.0.9 
  │ │ │ │ ├─┬ lodash.escape@3.2.0 
  │ │ │ │ │ └── lodash._root@3.0.1 
  │ │ │ │ ├─┬ lodash.keys@3.1.2 
  │ │ │ │ │ ├── lodash._getnative@3.9.1 
  │ │ │ │ │ ├── lodash.isarguments@3.1.0 
  │ │ │ │ │ └── lodash.isarray@3.0.4 
  │ │ │ │ ├── lodash.restparam@3.6.1 
  │ │ │ │ └── lodash.templatesettings@3.1.1 
  │ │ │ ├─┬ multipipe@0.1.2 
  │ │ │ │ └── duplexer2@0.0.2 
  │ │ │ ├── object-assign@3.0.0 
  │ │ │ ├─┬ through2@2.0.3 
  │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │   ├── isarray@1.0.0 
  │ │ │ │   └── string_decoder@1.0.3 
  │ │ │ └── vinyl@0.5.3 
  │ │ └─┬ readable-stream@2.3.3 
  │ │   ├── isarray@1.0.0 
  │ │   └── string_decoder@1.0.3 
  │ ├── gulp-rename@1.2.2 
  │ ├── is-url@1.2.2 
  │ ├── object-assign@4.1.1 
  │ ├─┬ read-all-stream@3.1.0 
  │ │ └─┬ readable-stream@2.3.3 
  │ │   ├── isarray@1.0.0 
  │ │   └── string_decoder@1.0.3 
  │ ├─┬ readable-stream@2.3.3 
  │ │ ├── core-util-is@1.0.2 
  │ │ ├── isarray@1.0.0 
  │ │ ├── process-nextick-args@1.0.7 
  │ │ ├── safe-buffer@5.1.1 
  │ │ ├── string_decoder@1.0.3 
  │ │ └── util-deprecate@1.0.2 
  │ ├─┬ stream-combiner2@1.1.1 
  │ │ └─┬ readable-stream@2.3.3 
  │ │   ├── isarray@1.0.0 
  │ │   └── string_decoder@1.0.3 
  │ ├─┬ vinyl@1.2.0 
  │ │ ├── clone@1.0.2 
  │ │ ├── clone-stats@0.0.1 
  │ │ └── replace-ext@0.0.1 
  │ ├─┬ vinyl-fs@2.4.4 
  │ │ ├─┬ duplexify@3.5.1 
  │ │ │ ├─┬ end-of-stream@1.4.0 
  │ │ │ │ └─┬ once@1.4.0 
  │ │ │ │   └── wrappy@1.0.2 
  │ │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ │ ├── isarray@1.0.0 
  │ │ │ │ └── string_decoder@1.0.3 
  │ │ │ └── stream-shift@1.0.0 
  │ │ ├─┬ glob-stream@5.3.5 
  │ │ │ ├─┬ glob@5.0.15 
  │ │ │ │ ├── inflight@1.0.6 
  │ │ │ │ ├─┬ minimatch@3.0.4 
  │ │ │ │ │ └─┬ brace-expansion@1.1.8 
  │ │ │ │ │   ├── balanced-match@1.0.0 
  │ │ │ │ │   └── concat-map@0.0.1 
  │ │ │ │ └── path-is-absolute@1.0.1 
  │ │ │ ├─┬ glob-parent@3.1.0 
  │ │ │ │ ├─┬ is-glob@3.1.0 
  │ │ │ │ │ └── is-extglob@2.1.1 
  │ │ │ │ └── path-dirname@1.0.2 
  │ │ │ ├─┬ micromatch@2.3.11 
  │ │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ │ ├── array-unique@0.2.1 
  │ │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │ │   ├─┬ isobject@2.1.0 
  │ │ │ │ │ │   │ └── isarray@1.0.0 
  │ │ │ │ │ │   ├─┬ randomatic@1.1.7 
  │ │ │ │ │ │   │ ├─┬ is-number@3.0.0 
  │ │ │ │ │ │   │ │ └── kind-of@3.2.2 
  │ │ │ │ │ │   │ └── kind-of@4.0.0 
  │ │ │ │ │ │   └── repeat-string@1.6.1 
  │ │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ │ ├─┬ extglob@0.3.2 
  │ │ │ │ │ └── is-extglob@1.0.0 
  │ │ │ │ ├── filename-regex@2.0.1 
  │ │ │ │ ├── is-extglob@1.0.0 
  │ │ │ │ ├── is-glob@2.0.1 
  │ │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ │ ├─┬ normalize-path@2.1.1 
  │ │ │ │ │ └── remove-trailing-separator@1.1.0 
  │ │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ │ ├─┬ for-own@0.1.5 
  │ │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ │ ├─┬ glob-base@0.3.0 
  │ │ │ │ │ │ ├── glob-parent@2.0.0 
  │ │ │ │ │ │ └─┬ is-glob@2.0.1 
  │ │ │ │ │ │   └── is-extglob@1.0.0 
  │ │ │ │ │ ├── is-dotfile@1.0.3 
  │ │ │ │ │ ├── is-extglob@1.0.0 
  │ │ │ │ │ └── is-glob@2.0.1 
  │ │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │ │     └── is-primitive@2.0.0 
  │ │ │ ├─┬ ordered-read-streams@0.3.0 
  │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │   ├── isarray@1.0.0 
  │ │ │ │   └── string_decoder@1.0.3 
  │ │ │ ├─┬ to-absolute-glob@0.1.1 
  │ │ │ │ └── extend-shallow@2.0.1 
  │ │ │ └─┬ unique-stream@2.2.1 
  │ │ │   └─┬ json-stable-stringify@1.0.1 
  │ │ │     └── jsonify@0.0.0 
  │ │ ├── graceful-fs@4.1.11 
  │ │ ├─┬ gulp-sourcemaps@1.6.0 
  │ │ │ ├── convert-source-map@1.5.0 
  │ │ │ └─┬ through2@2.0.3 
  │ │ │   └─┬ readable-stream@2.3.3 
  │ │ │     ├── isarray@1.0.0 
  │ │ │     └── string_decoder@1.0.3 
  │ │ ├── is-valid-glob@0.3.0 
  │ │ ├─┬ lazystream@1.0.0 
  │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │   ├── isarray@1.0.0 
  │ │ │   └── string_decoder@1.0.3 
  │ │ ├── lodash.isequal@4.5.0 
  │ │ ├─┬ merge-stream@1.0.1 
  │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │   ├── isarray@1.0.0 
  │ │ │   └── string_decoder@1.0.3 
  │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ └── minimist@0.0.8 
  │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ ├── isarray@1.0.0 
  │ │ │ └── string_decoder@1.0.3 
  │ │ ├─┬ strip-bom@2.0.0 
  │ │ │ └── is-utf8@0.2.1 
  │ │ ├─┬ strip-bom-stream@1.0.0 
  │ │ │ └── first-chunk-stream@1.0.0 
  │ │ ├── through2@2.0.3 
  │ │ ├─┬ through2-filter@2.0.0 
  │ │ │ └─┬ through2@2.0.3 
  │ │ │   └─┬ readable-stream@2.3.3 
  │ │ │     ├── isarray@1.0.0 
  │ │ │     └── string_decoder@1.0.3 
  │ │ └── vali-date@1.0.0 
  │ └─┬ ware@1.3.0 
  │   └─┬ wrap-fn@0.1.5 
  │     └── co@3.1.0 
  ├─┬ feed-read@0.0.1 
  │ └── sax@0.3.5 
  ├── immutable@3.8.1 
  ├── minimist@1.2.0 
  ├─┬ mongodb@2.0.49 
  │ ├── es6-promise@2.1.1 
  │ ├── UNMET PEER DEPENDENCY kerberos@~0.0
  │ ├─┬ mongodb-core@1.2.24 
  │ │ └── bson@0.4.23 
  │ └─┬ readable-stream@1.0.31 
  │   ├── isarray@0.0.1 
  │   └── string_decoder@0.10.31 
  ├─┬ node-static@0.7.7 
  │ ├── mime@2.0.2 
  │ └─┬ optimist@0.6.1 
  │   ├── minimist@0.0.10 
  │   └── wordwrap@0.0.3 
  ├── progress@1.1.8 
  ├─┬ request@2.67.0 
  │ ├── aws-sign2@0.6.0 
  │ ├─┬ bl@1.0.3 
  │ │ └─┬ readable-stream@2.0.6 
  │ │   └── isarray@1.0.0 
  │ ├── caseless@0.11.0 
  │ ├─┬ combined-stream@1.0.5 
  │ │ └── delayed-stream@1.0.0 
  │ ├── extend@3.0.1 
  │ ├── forever-agent@0.6.1 
  │ ├─┬ form-data@1.0.1 
  │ │ └─┬ async@2.5.0 
  │ │   └── lodash@4.17.4 
  │ ├─┬ har-validator@2.0.6 
  │ │ ├─┬ chalk@1.1.3 
  │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ └── ansi-regex@2.1.1 
  │ │ │ ├── strip-ansi@3.0.1 
  │ │ │ └── supports-color@2.0.0 
  │ │ ├── commander@2.11.0 
  │ │ └─┬ is-my-json-valid@2.16.1 
  │ │   ├── generate-function@2.0.0 
  │ │   ├─┬ generate-object-property@1.2.0 
  │ │   │ └── is-property@1.0.2 
  │ │   └── jsonpointer@4.0.1 
  │ ├─┬ hawk@3.1.3 
  │ │ ├── boom@2.10.1 
  │ │ ├── cryptiles@2.0.5 
  │ │ ├── hoek@2.16.3 
  │ │ └── sntp@1.0.9 
  │ ├─┬ http-signature@1.1.1 
  │ │ ├── assert-plus@0.2.0 
  │ │ ├─┬ jsprim@1.4.1 
  │ │ │ ├── assert-plus@1.0.0 
  │ │ │ ├── extsprintf@1.3.0 
  │ │ │ ├── json-schema@0.2.3 
  │ │ │ └─┬ verror@1.10.0 
  │ │ │   └── assert-plus@1.0.0 
  │ │ └─┬ sshpk@1.13.1 
  │ │   ├── asn1@0.2.3 
  │ │   ├── assert-plus@1.0.0 
  │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │   ├─┬ dashdash@1.14.1 
  │ │   │ └── assert-plus@1.0.0 
  │ │   ├── ecc-jsbn@0.1.1 
  │ │   ├─┬ getpass@0.1.7 
  │ │   │ └── assert-plus@1.0.0 
  │ │   ├── jsbn@0.1.1 
  │ │   └── tweetnacl@0.14.5 
  │ ├── is-typedarray@1.0.0 
  │ ├── isstream@0.1.2 
  │ ├── json-stringify-safe@5.0.1 
  │ ├─┬ mime-types@2.1.17 
  │ │ └── mime-db@1.30.0 
  │ ├── node-uuid@1.4.8 
  │ ├── oauth-sign@0.8.2 
  │ ├── qs@5.2.1 
  │ ├── stringstream@0.0.5 
  │ ├── tough-cookie@2.2.2 
  │ └── tunnel-agent@0.4.3 
  ├── robots@0.9.4 
  ├── server-graceful-shutdown@0.1.2 
  ├─┬ slice-file@1.0.0 
  │ ├── inherits@1.0.2 
  │ ├── split2@0.2.1 
  │ └─┬ through2@0.6.5 
  │   ├── readable-stream@1.0.34 
  │   └── xtend@4.0.1 
  ├─┬ string-editor@0.1.2 
  │ └── editor@1.0.0 
  ├── underscore@1.8.3 
  └─┬ xml2js@0.4.15 
    ├── sax@1.2.4 
    └── xmlbuilder@9.0.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/bot-marvin/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.025 took 2.3355s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node


var fs = require('fs');
var check = require('check-types');
var _ = require("underscore");
var proto = require(__dirname + '/lib/proto.js');
process.getAbsolutePath = proto.getAbsolutePath;
var parent_dir = __dirname; //parent dir path for importing modules safely



var SeedLoader = require(parent_dir + "/lib/seed-reloader.js");
var Message = require(parent_dir + '/lib/message.js');
var ConfigLoader = require(parent_dir + "/lib/config-reloader.js");
var Pool = require(__dirname + '/lib/pool');
var ChildManager = require(parent_dir + '/lib/child_manager.js')
var Logger = require(parent_dir + "/lib/logger.js");
var ArgumentProcesser = require(__dirname + '/lib/argv.js');
var Cluster = require(parent_dir + '/lib/cluster.js')
var Bot = require(parent_dir + '/lib/bot.js');
var Robots = require(__dirname + '/lib/robots.js');
var death = require("death");
var Lock = require(parent_dir + '/lib/lock.js');
var crawler_obj;


/**
 * Class responsible for loading and executing all the crawler components in proper sequence.
 * Responsiblities:
 *      Loads other classes and instantiate them
 *      Supply all the requirements of other classes
 *      Creates singleton objects which are shared along the program
 * @constructor
 * @param {Object} args - object containing cmd line args
 *	@author Tilak Patidar <tilakpatidar@gmail.com>
 */

var Crawler = function(args) {

    /**
    	Stores Cluster object 
    	@private
    	@type {Cluster}
    */
    var cluster;
    /**
		Stores Logger object;
		@private
		@type {Logger}
	*/
    var log;
    /**
		Stores Config object;
		@private
		@type {Config}
	*/
    var config;
    /**
		Stores Seed object;
		@private
		@type {SeedLoader}
	*/
    var seed;

    /**
		Stores MongoDB object;
		@private
		@type {MongoDB}
	*/
    var mongo_pool;
    /**
		Stores ChildManager object;
		@private
		@type {ChildManager}
	*/
    var child_manager;

    /**
		Stores Bot object;
		@private
		@type {Bot}
	*/
    var bot_obj;

    //boolean vars below are created to make use of setInterval and 
    //make async nested callbacks to appear sync for code clearity

    /**
		Set to true when db loaded.
		@private
		@type boolean
	*/
    var isDBLoaded = false;
    /**
		Set to true when cluster started.
		@private
		@type boolean
	*/
    var isClusterStarted = false;
    /**
		Set to true when inputs parsed.
		@private
		@type boolean
	*/
    var isInputsParsed = false;
    /**
		Set to true when normal crawl can continue.
		@private
	*/
    var isNormalCrawl = false;
    /**
		Set to true when logger loaded.
		@private
		@type boolean
	*/
    var isLoggerLoaded = false;
    /**
		Stores current obj context for nested functions.
		@private
		@type boolean
	*/
    var that = this;

    var JSONX = proto["JSONX"]; //JSON for regex support in .json files
    //constructor functions


    /**
		Loads depcheck.js and check dependencies.
		Exits if dependencies not met.
		@private
    */
    function checkDependency() {
        var Dependency = require(__dirname + "/lib/depcheck.js");
        var dep_obj = new Dependency();
        dep_obj.check();
    };


    /**
		Calls the seed method of MongoDb.
		And loads the ChildManager into child_manager
		@param {Object} botObjs - Robots.txt parsed data
		@private
    */
    function startBotManager(botObjs) {


        //function to start the child_manager
        seed.seed(function(completed) {
            if (completed) {
                //create a child manager

                child_manager = new ChildManager(message_obj);
                //#debug#console.log(process.child_manager,"child_manager")				
            }


        });

    }


    /**
		Calls cleanUp and kill all active_pids on death event. Ctrl^C
		@private
    */
    function deathCleanUp(fn) {
        //console.log("CAUGHT TERMINATION ",message_obj.get('caught_termination'));
        if (message_obj.get('caught_termination')) {
            return;
        }

        if (!check.assigned(log)) {
            log = {};
            msg = function(msg, color) {
                console.log(msg)
            };
            log.flush = function() {

            };
        }

        message_obj.set('caught_termination', true);
        msg('Termination request processing', 'info');
        //console.log(crawler_obj, "crawler_obj");
        crawler_obj.cleanUp(function(done) {
            if (done) {
                //console.log(done,"done")
                process.nextTick(function() {
                    var pids = fs.readFileSync(__dirname + "/db/pids/active_pids.txt").toString().split("\n");
                    for (var i = 0; i < pids.length; i++) {
                        try {
                            //#debug#console.log(parseInt(pids[i]))
                            process.kill(parseInt(pids[i]));
                        } catch (err) {
                            //#debug#console.log(err)
                        }

                    };
                    fs.unlinkSync(__dirname + "/db/pids/active_pids.txt");
                    if (process.RUN_ENV === "TEST") {
                        message_obj.set("bot_stopped", true);
                    } else {
                        process.exit(0);
                    }


                });
            }
        });
    }


    /**
		All the process global vars go here
		@private
    */

    function setGlobals() {

        //all the process related code here

        process.setMaxListeners(50);
        if (process.env.EDITOR === undefined) {
            process.env.EDITOR = "/bin/nano";
        }

    }


    /**
		Creates instance of MongoDB.
		Calls createConnection in MongodB and set the DB object 
		in Config, Seed. Marks isDBLoaded to true.

		@public
		@param {Pool} p - Pool object, returns constructor for MongoDB
	
    */
    this.loadDB = function loadDB(p) {

        var DBConnector = p.getDB(); //choosing db type
        mongo_pool = new DBConnector(message_obj);
        mongo_pool.createConnection(function() {
            message_obj.set('pool', mongo_pool);
            config.setDB();
            seed.setDB();
            isDBLoaded = true;
        });

    };

    /**
		Sets Config in our private var config,
		@public
		@param {Config} c
    */
    this.loadConfig = function loadConfig(c) {

        config = c; //globals for sharing config and seed file across various modules
    };

    /**
		Sets Seed in our private var seed,
		@public
		@param {SeedLoader} s
    */
    this.loadSeed = function loadSeed(s) {
        seed = s;
    };

    /**
		Starts the cluster by creating cluster and bot object.
		@public
    */
    this.startCluster = function startCluster() {

        var interval_locked = new Lock();

        var tmp_interval = setInterval(function() {
            //console.log("in startCluster");
            if (interval_locked.isLocked() || !isDBLoaded || !isLoggerLoaded) {
                return;
            }
            interval_locked.enter();
            //console.log("pass startCluster");


            cluster = new Cluster(message_obj);
            message_obj.set('cluster', cluster);
            bot_obj = new Bot(message_obj);
            message_obj.set('bot', bot_obj);
            mongo_pool.setBot();
            cluster.setBot();
            bot_obj.startBot(message_obj.get('force_mode'), function(status) {

                if (status) {
                    //bot was started successfully
                    isClusterStarted = true;

                } else {
                    //unable to start bot exit gracefully
                    message_obj.set('stop_bot_and_exit');
                }
                clearInterval(tmp_interval);
            });

        }, 1000);

    };

    this.isStopped = function() {
        return message_obj.get('bot_stopped');
    };
    /**
		Reset the bot when --reset arg passed
		@public
		@param {Function} fn - Callback function
    */
    this.reset = function reset(fn) {
        //drop the db				
        mongo_pool.drop(function reset_pool_drop() {
            msg("db reset", "success");
            msg("robots cache reset", "success");




            //drop pdf store
            var files = fs.readdirSync(__dirname + '/pdf-store/');
            for (var i = 0; i < files.length; i++) {
                if (files[i].indexOf(".") === 0) {
                    //do not take hidden files
                    continue;
                }
                var domain = files[i].replace(/##/g, "/");
                var data = fs.unlinkSync(__dirname + '/pdf-store/' + files[i]);
            };
            msg("pdf-store cache reset", "success");

            //drop pdf store-parsed
            var files = fs.readdirSync(__dirname + '/pdf-store-parsed/');
            for (var i = 0; i < files.length; i++) {
                if (files[i].indexOf(".") === 0) {
                    //do not take hidden files
                    continue;
                }
                var domain = files[i].replace(/##/g, "/");
                var data = fs.unlinkSync(__dirname + '/pdf-store-parsed/' + files[i]);
            };
            msg("pdf-store-parsed cache reset", "success");

            try {
                var stream = fs.createWriteStream(__dirname + "/config/db_config.json");
                stream.write("{}");
                stream.close();
                msg("Db config cleared", "success");
            } catch (ee) {
                msg("Db config not cleared not cleared", "error");
            }


            msg("crawler reset", "success");

            return fn();



        });

    };


    /**
		Exits the crawler by calling cleanUp
		@public
    */
    this.exit = function exit(fn) {

        that.cleanUp(function(done) {
            if (done) {
                if (process.RUN_ENV === "TEST") {
                    fn();
                } else {
                    fn();
                    process.exit(0);
                }

            }

        });
    }


    /**
        Returns if bot started successfully
        @public
        @return {boolean} status - status from messages
    */
    this.isStarted = function() {
        return message_obj.get('success_start');
    };


    /**
		Parses input and sets overriden config returned by ArgumentParser to Config object.
		@public
		@param {ArgumentProcesser} argv_obj
    */
    this.processInput = function(argv_obj) {
        var interval_locked = new Lock();
        var tmp_interval = setInterval(function() {
            //console.log("process input interval");
            if (interval_locked.isLocked() || !isClusterStarted || !isDBLoaded || !isLoggerLoaded) {
                return;
            }

            interval_locked.enter();

            clearInterval(tmp_interval);
            var new_opts = argv_obj.parse(); //executes the args passed and returns overriden config

            var overriden_config = new_opts; //parses cmd line argv and perform required operations
            config.setOverridenConfig(overriden_config);
            isInputsParsed = true;

        }, 1000);
    };


    /**
        Returns if bot stopped. 
        Default null. When stopped returns true.
        @public
        @return {boolean} status
    */
    this.botStopped = function() {

        return message_obj.get('bot_stopped');
    }

    /**
		When args is parsed this is called to select the action of crawler.
		@public
    */
    this.selectInput = function selectInput() {
        var interval_locked = new Lock();
        var tmp_interval = setInterval(function() {
            //console.log("selectInput interval");
            if (interval_locked.isLocked() || !isInputsParsed || !isDBLoaded || !isClusterStarted || !isLoggerLoaded) {
                return;
            }
            interval_locked.enter();
            clearInterval(tmp_interval);
            if (!message_obj.get('modifyConfig')) { //set to true by argv if --config is selected stops bot from starting if this option is selected

                config.pullConfig(function() {

                    mongo_pool.checkIfNewCrawl(function() {

                        //notify that bot started successfully
                        message_obj.set('success_start', true);


                        if (message_obj.get('editSeedFile')) {
                            seed.editSeedFile();
                        } else if (message_obj.get('removeSeed')) {
                            seed.removeSeed(Object.keys(message_obj.get('removeSeed'))[0]);
                        } else if (message_obj.get('seedFilePath')) {
                            seed.seedFile(message_obj.get('seedFilePath'), null, function() {
                                message_obj.set("stop_bot_and_exit");
                            });
                        } else if (message_obj.get('reset')) {
                            that.reset(function() {
                                message_obj.set('stop_bot_and_exit');
                            });
                        } else {
                            seed.pull(function() {
                                seed.readSeedFile(function readSeedFile() {
                                    isNormalCrawl = true;
                                });
                            });
                        }


                    });
                });

            }

        }, 1000);
    };

    /**
		When no special args are given this is called by this.selectInput
		@public
    */
    this.startNormalCrawl = function startNormalCrawl() {
        var interval_locked = new Lock();
        var tmp_interval = setInterval(function() {
            //console.log("start normal interval");
            if (interval_locked.isLocked() || !isInputsParsed || !isDBLoaded || !isClusterStarted || !isNormalCrawl || !isLoggerLoaded) {

                return;
            }

            interval_locked.enter();
            clearInterval(tmp_interval);
            var botObjs = {}; //will store robots.txt data for seed links

            if (config.getConfig("allow_robots") && !process.webappOnly) {

                /*	
                	if robots.txt has to be followed
                	we have to download all robots.txt files
                */

                msg("downloading robots.txt this could take a while", "info");



                message_obj.set('robots_links', Object.keys(message_obj.get('links_store')));

                var robots = new Robots(message_obj, config.getConfig("robots_parser_threads"));

                robots.parse(function robots_init(err, obj) {

                    if (obj) {
                        msg("robots.txt parsed", "success");
                    } else {
                        msg("robots.txt parsing failed", "error");
                    }
                    message_obj.set('botObjs', obj);
                    startBotManager();


                });
            } else {
                startBotManager();

            }

            if (!process.modifyConfig && !process.editSeedFile) {
                //to disable detection of Ctrl^X if nano editor is on

                (function(crawler_obj, message_obj, msg) {

                    death(deathCleanUp);

                })(this, message_obj, msg);


            }
        }, 1000);
    };


    /**
		Performs clean up operations before closing crawler.
		@public
		@param {Function} fn - Callback
    */
    this.cleanUp = function cleanUp(fn1) {
        msg("Performing cleanUp ", "info");
        bot_obj.stopBot(function() {
            try {
                process.kill(message_obj.get('tikaPID'), "SIGINT");
            } catch (err) {
                //console.log(err);
                //trying to kill the tika server jar
            }
            //console.log(1);
            if (!check.assigned(cluster.cluster_server)) {
                cluster.cluster_server = {}
            }
            //console.log(101);
            if (!check.assigned(cluster.file_server)) {
                cluster.file_server = {}
            }
            //console.log(102);
            if (!check.assigned(cluster.fileServer)) {
                cluster.fileServer = {}
            }
            //console.log(103);
            if (!check.assigned(cluster.cluster_server.shutdown)) {
                cluster.cluster_server.shutdown = function(fn) {
                    fn();
                };
            }
            //console.log(104);
            if (!check.assigned(cluster.file_server.shutdown)) {
                cluster.file_server.shutdown = function(fn) {
                    fn();
                };
            }
            //console.log(105);
            if (!check.assigned(cluster.fileServer.shutdown)) {
                cluster.fileServer.shutdown = function(fn) {
                    if (fn.constructor.name === 'Function') fn();
                };
            }
            // console.log(106);
            if (!check.assigned(child_manager)) {
                child_manager = {};
                child_manager.setManagerLocked = function(fn) {

                    if (fn.constructor.name === 'Function') fn();
                };
                child_manager.killWorkers = function(fn) {

                    if (fn.constructor.name === 'Function') fn();

                };
                child_manager.flushInlinks = function(fn) {
                    if (fn.constructor.name === 'Function') fn();
                };
            }

            //console.log(107);
            child_manager.setManagerLocked(true); //lock the manager so no new childs are spawned
            //#debug#console.log(cluster.cluster_server,cluster.file_server)
            child_manager.flushInlinks(function(status) {
                //console.log(108,child_manager);

                //flush all the inlinks into db before exit
                child_manager.killWorkers(function() {
                    //console.log(109);

                    //clear timers
                    var timers = message_obj.get('my_timers');
                    for (var i = 0; i < timers.length; i++) {
                        clearInterval(timers[i]);
                    };
                    //console.log(110);

                    cluster.cluster_server.shutdown(function() {
                        cluster.file_server.shutdown(function() {
                            cluster.fileServer.shutdown(function() {

                                //console.log(1111);


                                //clear all moduele references
                                //#debug#console.log(process.bot);
                                bot_obj.stopBot(function cleanUp_stopbot(err) {
                                    //if (err) throw err;

                                    msg("cleanUp done", "success");

                                    //flushing the log
                                    log.flush(function() {


                                        mongo_pool.close(function() {
                                            return fn1(true);
                                        });

                                    });
                                });
                            });





                        });


                    });
                });

            }); //kill all the workers before quiting
        })
    };


    /**
		Restarts the bot.
		@public
    */
    this.restart = function restart(fn) {
        //restart
        that.cleanUp(function(done) {
            if (done) {
                var spawn = require('child_process').spawn;
                var file_path = __dirname + '/index.js';
                var ls = spawn(config.getConfig("env"), [file_path], {
                    stdio: 'inherit'
                });
                fs.appendFileSync(__dirname + "/db/pids/active_pids.txt", ls.pid + "\n");
                //ls.stdout.pipe(process.stdout);
                //process.exit(0);			
                ls.on("exit", function() {
                    if (process.RUN_ENV === "TEST") {
                        message_obj.set("bot_stopped", true);
                    } else {
                        process.exit(0)
                    }

                });

            }



        });
    };
    /**
		Sets the Logger object in all Crawler components.
		@public
		@param {Logger} l
    */
    this.setLogger = function setLogger(l) {
        var interval_locked = new Lock();
        var tmp_interval = setInterval(function() {
            //console.log("logger interval");
            if (interval_locked.isLocked() || !isDBLoaded) {
                return;
            }

            log = l;

            message_obj.set('log', log);


            interval_locked.enter();

            clearInterval(tmp_interval);
            isLoggerLoaded = true;
        }, 1000);
    };


    checkDependency();

    /**
		Message object which is shared with all the crawler components.
		@private
		@type {Message}
    */
    var message_obj = new Message();
    message_obj.set('crawler', this);


    //some args need to be parsed before
    var argv = require('minimist')(args);
    if (check.assigned(argv["force"])) {
        message_obj.set('force_mode', true);
    }


    /**
    	Main method of the Crawler.
    	Executes the crawler by loading all components.
    	@public
    */
    this.run = function run() {



        fs.appendFileSync(__dirname + "/db/pids/active_pids.txt", process.pid + "\n");


        var config_obj = new ConfigLoader(message_obj);
        message_obj.set('config', config_obj);
        var log_obj = new Logger(message_obj);
        var seed_obj = new SeedLoader(message_obj);
        message_obj.set('seed', seed_obj);
        var pool_obj = new Pool(message_obj);
        message_obj.set('argv', argv);
        var argv_obj = new ArgumentProcesser(message_obj);


        that.loadConfig(config_obj);
        that.loadSeed(seed_obj);
        that.loadDB(pool_obj);

        that.setLogger(log_obj);
        that.startCluster();
        that.processInput(argv_obj);
        that.selectInput();
        that.startNormalCrawl();



    };


    /**
		Used to call Logger object with the caller function name.
		@private
	*/
    function msg() {
        log.put(arguments[0], arguments[1], __filename.split('/').pop(), arguments.callee.caller.name.toString());
    }

}



if (require.main === module) {
    crawler_obj = new Crawler(process.argv.slice(2));
    crawler_obj.run();

} else {

    module.exports = Crawler;

} at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
