/root/Targets/cocoon-framework
└── cocoon-framework@2.0.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/cocoon-framework/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0445 took 4.681s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var swig = require('swig');
var fs = require('fs-extra');
var colors = require('colors');
var argv = require('yargs').argv;
var exec = require('child_process').exec;

var cssBasePath = './src/css';
var viewBasePath = './src/views';
var scssBasePath = './src/sass';
var scriptsBasePath = './src/scripts';
var modelBasePath = scriptsBasePath + '/models';
var serviceBasePath = scriptsBasePath + '/services';
var directiveBasePath = scriptsBasePath + '/directives';
var controllerBasePath = scriptsBasePath + '/controllers';


function report(e) {
    if (e) {
        console.log(colors.red(e));
        process.exit();
    }
}


function getPathFileName(path) {
    var result = path.split('/');
    return result[result.length - 1];
}


function generateActionState(path) {

    var state = {};

    var name = path.replace(/\//, '.');

    state.name = name;
    state.url = '/' + path;
    state.templateUrl = 'views/' + path + '.html';
    state.controllerUrl = 'controllers/' + path;

    return state;


}

function copyCocoonTemplate(name) {

    fs.mkdirs('./' + name, function (e) {
        report(e);
        fs.copy(__dirname + '/template', './' + name, function (e) {
            report(e);
            setNpmProjectName(name);
            setBowerProjectName(name);
        });
    })

}


function setBowerProjectName(name) {

    fs.readJson('./' + name + '/bower.json', function (e, data) {
        report(e);

        data.name = name;

        fs.outputJson('./' + name + '/bower.json', data, function (e) {
            report(e);
        });
    });

}

function setNpmProjectName(name) {

    fs.readJson('./' + name + '/package.json', function (e, data) {

        report(e);

        data.name = name;

        fs.outputJson('./' + name + '/package.json', data, function (e) {
            report(e);
        });
    });

}

function getCssPath(path) {
    var paths = path.split('/');
    var _path = '../';
    for (var i = 0; i < paths.length; i++) {
        _path += '../';
    }
    return _path + 'css/' + path;
}


function createController(params) {
    for (var i in params) {

        var content = swig.renderFile(__dirname + '/files/controller.tpl', {
            name: getPathFileName(params[i]),
            css_path: getCssPath(params[i])
        });

        var file = controllerBasePath + '/' + params[i] + '.js';

        fs.outputFile(file, content, function (e) {

            report(e);

            createTemplate(params[i]);

            createControllerCss(params[i]);

            createControllerScss(params[i]);

            createControllerState(params[i]);

            console.log(colors.green('Add controller success.'));

            console.log(colors.yellow(file));
        });


    }
}

function createControllerState(path) {
    fs.readJson('./src/config.json', function (e, config) {

        report(e);

        var result = generateActionState(path);

        var name = result.name;

        delete result.name;

        config.routes[name] = result;

        fs.outputJson('./src/config.json', config, function (e) {

            report(e);

            var response = {};

            response[name] = result;

            console.log(colors.green('Generate angular route state :'));
            console.log(colors.yellow(JSON.stringify(response, null, 2)));

        });
    });
}

function createTemplate(path) {

    var content = swig.renderFile(__dirname + '/files/view.tpl', {
        name: path.replace(/\//, '-')
    });

    var file = viewBasePath + '/' + path + '.html';

    fs.outputFile(file, content, function (e) {
        report(e);
    });

}


function getGlobalsPath(path) {

    var paths = path.split('/');
    var _path = '';

    for (var i = 0; i < paths.length - 1; i++) {
        _path += '../';
    }
    return _path + 'globals';
}


function createControllerScss(path) {

    var content = swig.renderFile(__dirname + '/files/scss.tpl', {
        name: path.replace(/\//, '-'),
        globals_path: getGlobalsPath(path)
    });

    var file = scssBasePath + '/' + path + '.scss';

    fs.outputFile(file, content, function (e) {
        report(e);
    });

}

function createControllerCss(path) {

    var content = swig.renderFile(__dirname + '/files/css.tpl', {
        name: path.replace(/\//, '-'),
        globals_path: getGlobalsPath(path)
    });

    var file = cssBasePath + '/' + path + '.css';

    fs.outputFile(file, content, function (e) {
        report(e);
    });

}


function createModel(params) {
    for (var i in params) {

        var content = swig.renderFile(__dirname + '/files/model.tpl', {
            name: getPathFileName(params[i])
        });

        var file = modelBasePath + '/' + params[i] + '.js';

        fs.outputFile(file, content, function (e) {
            report(e);
            console.log(colors.green('Add model success.'));
            console.log(colors.yellow(file));
        });
    }
}

function createService(params) {
    for (var i in params) {

        var content = swig.renderFile(__dirname + '/files/service.tpl', {
            name: getPathFileName(params[i])
        });

        var file = serviceBasePath + '/' + params[i] + '.js';

        fs.outputFile(file, content, function (e) {
            report(e);

            console.log(colors.green('Add service success.'));
            console.log(colors.yellow(file));
        });
    }
}

function createDirective(params) {
    for (var i in params) {

        var content = swig.renderFile(__dirname + '/files/directive.tpl', {
            name: getPathFileName(params[i])
        });

        var file = directiveBasePath + '/' + params[i] + '.js';

        fs.outputFile(file, content, function (e) {
            report(e);

            console.log(colors.green('Add directive success.'));
            console.log(colors.yellow(file));
        });
    }
}

function renameController(o, n) {
    o = controllerBasePath + '/' + o + '.js';
    n = controllerBasePath + '/' + n + '.js';
    fs.move(o, n, function (e) {
        report(e);
        console.log(colors.green('rename controller success.'));
        console.log(colors.yellow(o + ' -> ' + n));
    });
}


function renameModel(o, n) {
    o = modelBasePath + '/' + o + '.js';
    n = modelBasePath + '/' + n + '.js';
    fs.move(o, n, function (e) {
        report(e);
        console.log(colors.green('rename model success.'));
        console.log(colors.yellow(o + ' -> ' + n));
    });
}

function renameService(o, n) {
    o = serviceBasePath + '/' + o + '.js';
    n = serviceBasePath + '/' + n + '.js';
    fs.move(o, n, function (e) {
        report(e);
        console.log(colors.green('rename service success.'));
        console.log(colors.yellow(o + ' -> ' + n));
    });
}

function renameDirective(o, n) {
    o = directiveBasePath + '/' + o + '.js';
    n = directiveBasePath + '/' + n + '.js';
    fs.move(o, n, function (e) {
        report(e);
        console.log(colors.green('rename directive success.'));
        console.log(colors.yellow(o + ' -> ' + n));
    });
}


function removeTemplate() {

}

function removeScss() {

}

function removeCss() {

}


function removeController(path) {

}

function removeModel(path) {

}

function removeService(path) {

}

function removeDirective(path) {

}

if (argv.new) {

    var name = argv.new === true ? 'cocoon' : argv.new;

    copyCocoonTemplate(name);

} else if (argv.create) {

    if (argv.create !== true) {

        switch (argv.create) {
            case 'controller':
                createController(argv._);
                break;
            case 'model':
                createModel(argv._);
                break;
            case 'service':
                createService(argv._);
                break;
            case 'directive':
                createDirective(argv._);
                break;
            default:
                break;
        }
    }

} else if (argv.rename) {

    if (argv.rename !== true) {

        switch (argv.rename) {
            case 'controller':
                renameController(argv._[0], argv._[1]);
                break;
            case 'model':
                renameModel(argv._[0], argv._[1]);
                break;
            case 'service':
                renameService(argv._[0], argv._[1]);
                break;
            case 'directive':
                renameDirective(argv._[0], argv._[1]);
                break;
            default:
                break;
        }
    }

} else if (argv.remove) {

    if (argv.remove !== true) {

        switch (argv.remove) {
            case 'controller':
                removeController(argv._);
                break;
            case 'model':
                removeModel(argv._);
                break;
            case 'service':
                removeService(argv._);
                break;
            case 'directive':
                removeDirective(argv._);
                break;
            default:
                break;
        }
    }

}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
