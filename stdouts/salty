/root/Targets/salty
└─┬ salty@4.1.1 
  ├── balanced-match@0.4.1 
  ├── base-x@1.0.4 
  ├── block-stream@0.0.9 
  ├── brace-expansion@1.1.5 
  ├── bs58@3.0.0 
  ├── cli-prompt@0.6.0 
  ├── commander@2.9.0  (git+https://github.com/carlos8f/commander.js.git#c910edee2f4ebff20a9143d08ec8f69c24ef6ae5)
  ├── concat-map@0.0.1 
  ├── fs.realpath@1.0.0 
  ├── fstream@1.0.10 
  ├── generic-pool@2.4.2 
  ├── glob@7.0.5 
  ├── graceful-fs@4.1.4 
  ├── graceful-readlink@1.0.1 
  ├── inflight@1.0.5 
  ├── inherits@2.0.1 
  ├── is-utf8@0.2.1 
  ├─┬ js-scrypt@0.2.0 
  │ └── generic-pool@2.0.4 
  ├── keypress@0.2.1 
  ├── micro-request@666.0.5 
  ├── minimatch@3.0.2 
  ├── minimist@1.2.0 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  ├── nacl-stream@0.3.3 
  ├── once@1.3.3 
  ├── path-is-absolute@1.0.0 
  ├── pempal@1.0.2 
  ├── progress@1.1.8 
  ├── rimraf@2.5.2 
  ├── tar@2.2.1 
  ├── through@2.3.8 
  ├── tweetnacl@0.14.3 
  └── wrappy@1.0.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/salty/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 36% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.036 took 2.6827s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (6:4) on program var fs = require('fs')
  , libEphemeral = require('./ephemeral')
  , constants = require('./constants')
  , libHeader = require('./header')
  , through = require('through')
  , assert = require('assert')
  , bs58 = require('bs58')

function decrypt (inStream, wallet, encryptedSize, noTranslate) {
  var self = this
  var outStream = through()
  var decryptor, hashStream, ephSlice, eph
  var chunks = []
  function parseEphemeral (chunk) {
    chunks.push(chunk)
    var buf = Buffer.concat(chunks)
    if (buf.length >= constants.EPH_LENGTH) {
      ephSlice = buf.slice(0, constants.EPH_LENGTH)
      chunks = [buf.slice(constants.EPH_LENGTH)]
      withEphSlice(ephSlice)
    }
  }
  inStream.on('data', parseEphemeral)
  inStream.once('end', function () {
    if (!ephSlice) {
      return outStream.emit('error', new Error('not a salty file'))
    }
  })
  function withEphSlice (buf) {
    var header
    var headerStr = ''
    var ended = false
    inStream.removeListener('data', parseEphemeral)
    try {
      var eph = libEphemeral.parse(buf, wallet)
      var decryptor = eph.createDecryptor(encryptedSize)
      var hashStream = eph.createHmac('sha256')
    }
    catch (e) {
      return outStream.emit('error', e)
    }
    var tail
    hashStream.once('data', withHash)
    outStream.pipe(hashStream)
    function withHash (hash) {
      try {
        assert(tail)
        header = libHeader.parse(headerStr, noTranslate).validate(hash).toObject()
        if (header['to-salty-id'] === 'self') {
          if (header['from-salty-id'] !== wallet.pubkey.pubkey) {
            return outStream.emit('error', new Error('to-salty-id is self, not addressed to you'))
          }
        }
        else if (header['to-salty-id'] && header['to-salty-id'] !== wallet.pubkey.pubkey) {
          return outStream.emit('error', new Error('to-salty-id is not addressed to you'))
        }
        outStream.emit('header', header)
      }
      catch (e) {
        return outStream.emit('error', e)
      }
    }
    var bytesDecrypted = 0
    var parserStream = through(function write (chunk) {
      if (bytesDecrypted + chunk.length < eph.totalSize) {
        this.queue(chunk)
        bytesDecrypted += chunk.length
      }
      else if (headerStr) {
        headerStr += chunk.toString()
      }
      else {
        tail = chunk.slice(0, eph.totalSize - bytesDecrypted)
        if (tail.length) this.queue(tail)
        bytesDecrypted += tail.length
        headerStr = chunk.slice(tail.length).toString()
      }
    })
    decryptor.pipe(parserStream).pipe(outStream)
    var head = Buffer.concat(chunks)
    decryptor.write(head)
    inStream.pipe(decryptor)
  }
  return outStream
}
module.exports = decrypt at SyntaxError: Unexpected token (6:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/salty/node_modules/salty/lib.js. Coverage (Term): 49% Coverage (LOC): 55%
*- File /root/Targets/salty/node_modules/salty/lib/constants.js. Coverage (Term): 96% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
