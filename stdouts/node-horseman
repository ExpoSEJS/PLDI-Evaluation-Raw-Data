/root/Targets/node-horseman
└─┬ node-horseman@3.3.0 
  ├── bluebird@3.5.0 
  ├── clone@1.0.2 
  ├── cookies.txt@0.1.2 
  ├── data-uri-to-buffer@0.0.4 
  ├─┬ debug@2.6.9 
  │ └── ms@2.0.0 
  ├── defaults@1.0.3 
  └── node-phantom-simple@2.2.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/node-horseman/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 10% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","reduce","parseInt","charCodeAt","abs"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0445 took 9.549s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program "use strict";
//This is a wget cookies.txt parser for nodejs
//Author:@mxfli
//date::2011年 12月 13日 星期二 13:33:06 UTC

var fs = require('fs');
var url = require('url');
var assert = require('assert');

var COOKIE_FIELDS = ['domain', 'httponly', 'path', 'secure', 'expires', 'name', 'value'];
//Object contains parsed cookies from cookies.txt
var COOKIES = [];

/**
 * Parse cookies file and return the result to cb;
 */
var parse = function (file, cb) {
  assert(fs.existsSync(file));
  assert(typeof cb === 'function');

  //Fix: 2 cookies file is merged in on Object.
  COOKIES.length = 0;

  fs.readFile(file, function read(err, buffer) {
    if (err) {
      throw err;
    }

    //change dos/mac files to unix format
    var toUnix = function (str) {
      assert(typeof  str === 'string');
      return str.replace(/\\r\\n/g, '\r').replace(/\\r/g, '\n');
    };

    var str = toUnix(buffer.toString('utf8'));
    //console.log('Cookies.txt content: \n', str);

    var cookies = str.split('\n');
    //console.log(cookies.length);

    cookies.forEach(function (line) {
      //console.log(index,':',line);
      line = line.trim();

      if (line.length > 0 && !/^#/.test(line)) {
        var cookie = {};
        line.split(/\s/).forEach(function (c, index) {
          if (COOKIE_FIELDS[index] === 'expires') {
            c = (new Date(parseInt(c, 10) * 1000));
          }
          cookie[COOKIE_FIELDS[index]] = c;
        });

        COOKIES.push(cookie);
      }
    });
    console.log("node-Cookies.txt load:", COOKIES.length, 'cookies.');

    cb(COOKIES);
  });
};

exports.parse = parse;

exports.getCookieString = function (urlStr) {
  var urlObj = url.parse(urlStr, false);

  var result = COOKIES.reduce(function (pre, cookie) {
    if (urlObj.hostname === cookie.domain && urlObj.pathname.indexOf(cookie.path) === 0) {
      pre.push(cookie.name + '=' + cookie.value);
    }
    return pre;
  }, []).join(';');

  console.log('Get "Cookie" :', result);
  return result;
};
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/node-horseman/node_modules/node-horseman/lib/index.js. Coverage (Term): 4% Coverage (LOC): 4%
*- File /root/Targets/node-horseman/node_modules/clone/clone.js. Coverage (Term): 16% Coverage (LOC): 22%
*- File /root/Targets/node-horseman/node_modules/defaults/index.js. Coverage (Term): 34% Coverage (LOC): 42%
*- File /root/Targets/node-horseman/node_modules/node-phantom-simple/node-phantom-simple.js. Coverage (Term): 6% Coverage (LOC): 5%
*- File /root/Targets/node-horseman/node_modules/node-phantom-simple/headless_error.js. Coverage (Term): 54% Coverage (LOC): 64%
*- File /root/Targets/node-horseman/node_modules/debug/src/index.js. Coverage (Term): 81% Coverage (LOC): 83%
*- File /root/Targets/node-horseman/node_modules/debug/src/node.js. Coverage (Term): 34% Coverage (LOC): 43%
*- File /root/Targets/node-horseman/node_modules/debug/src/debug.js. Coverage (Term): 44% Coverage (LOC): 48%
*- File /root/Targets/node-horseman/node_modules/ms/index.js. Coverage (Term): 12% Coverage (LOC): 15%
*- File /root/Targets/node-horseman/node_modules/node-horseman/lib/actions.js. Coverage (Term): 1% Coverage (LOC): 1%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
