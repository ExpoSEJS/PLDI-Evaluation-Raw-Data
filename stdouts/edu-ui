/root/Targets/edu-ui
└─┬ edu-ui@0.2.8 
  ├── UNMET PEER DEPENDENCY babel-core@^6.0.0
  └── UNMET PEER DEPENDENCY webpack@1 || 2 || ^2.1.0-beta || ^2.2.0-rc

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/edu-ui/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 22% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0714 took 4.6818s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (2:0) on program 
<template>
    <button 
        @click="handleClick"
        class="edu-btn"
        :class="btnClass"
        :style="styleList"
    >
        <i class="edu-btn-icon-only" :class="iconClass" v-if="icon"></i>
        <span class="edu-btn-loading ion-load-a" v-if="loading && !icon"></span>
        <span v-if="!icon">
            <slot></slot>
        </span>
    </button>
</template>
<script>
export default {
    props: {
        type: {
            type: String,
            default: () => {
                return 'default'
            }
        },
        size: {
            type: String,
            default: () => {
                return 'default'
            }
        },
        loading: {
            type: Boolean,
            default () {
                return false
            }
        },
        fontColor: {
            type: String,
            default () {
                return ''
            }
        },
        icon: {
            type: String,
            default () {
                return ''
            }
        },
        color: {
            type: String,
            default () {
                return ''
            }
        },
        disabled: {
            type: Boolean,
            default () {
                return false
            }
        }
    },
    methods:{
        handleClick:function() {
            this.$emit("click",arguments[0]);
        }
    },
    computed: {
        iconClass () {
            let list = []
            if (!this.icon) return list
            list.push(this.icon)
            return list
        },
        btnClass () {
            let list = []
            switch (this.type) {
            case 'primary':
                list.push('primary')
                break
            case 'gray':
                list.push('gray')
                break
            case 'default':
                list.push('default')
                break
            case 'ghost':
                list.push('ghost')
                break
            case 'success':
                list.push('success')
                break
            case 'info':
                list.push('info')
                break
            case 'warning':
                list.push('warning')
                break
            case 'danger':
                list.push('danger')
                break
            }

            switch (this.size) {
            case 'small':
                list.push('edu-btn-small')
                break
            case 'tinysmall':
                list.push('edu-btn-tinysmall')
                break
            case 'large':
                list.push('edu-btn-large')
                break
            }

            if (this.icon) {
                list.push('edu-btn-icon')
            }
            if (this.disabled) {
                list.push('edu-btn-disabled')
            }
            return list
        },
        styleList () {
            let list = {}
            if (this.color) {
                list['background'] = this.color
            }
            if (this.fontColor) {
                list['color'] = this.fontColor
            }
            return list
        }
    }
}
</script> at SyntaxError: Unexpected token (2:0)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/edu-ui/node_modules/edu-ui/dist/components/index.js. Coverage (Term): 23% Coverage (LOC): 5%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
