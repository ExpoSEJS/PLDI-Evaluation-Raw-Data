/root/Targets/pepino-cli
└─┬ pepino-cli@1.0.47 
  ├── bluebird@3.5.0 
  ├── commander@2.11.0 
  ├── gherkin@3.2.0 
  ├─┬ glob@7.1.2 
  │ ├── fs.realpath@1.0.0 
  │ ├─┬ inflight@1.0.6 
  │ │ └── wrappy@1.0.2 
  │ ├── inherits@2.0.3 
  │ ├─┬ minimatch@3.0.4 
  │ │ └─┬ brace-expansion@1.1.8 
  │ │   ├── balanced-match@1.0.0 
  │ │   └── concat-map@0.0.1 
  │ ├── once@1.4.0 
  │ └── path-is-absolute@1.0.1 
  └── underscore@1.8.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/pepino-cli/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0476 took 2.9773s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
"use strict";
var glob = require('glob');
var fs = require("fs");
var program = require('commander');
const _ = require('underscore');
const Promise = require('bluebird');
const p = require('./domain/services/StepParser');
const s = require('./domain/services/CriteriaSegmentMatcher');
const f = require('./domain/services/FeatureParser');
const g = require('./domain/services/CucumberStepFunctionGenerator');
const fileGen = require('./domain/services/CommonJsCucumberStepFileGenerator');
const ClickElementStrategy_1 = require('./domain/codeGenerationStrategies/ClickElementStrategy');
const NavigateStrategy_1 = require('./domain/codeGenerationStrategies/NavigateStrategy');
const TypeTextWithElementStrategy_1 = require('./domain/codeGenerationStrategies/TypeTextWithElementStrategy');
const TypeTextWithoutElementStrategy_1 = require('./domain/codeGenerationStrategies/TypeTextWithoutElementStrategy');
const JasmineExpectStrategy_1 = require('./domain/jasmineExpectCodeGeneration/JasmineExpectStrategy');
var stepParser = new p.Pepino.PepinoLangStepParser();
var matcher = new s.Pepino.CriteriaSegmentMatcher();
var featureParser = new f.Pepino.GherkinFeatureParser();
var codeGenerator = new g.Pepino.CucumberStepFunctionGenerator(new Array(new ClickElementStrategy_1.ClickElementStrategy(), new NavigateStrategy_1.NavigateStrategy(), new TypeTextWithElementStrategy_1.TypeTextWithElementStrategy(), new TypeTextWithoutElementStrategy_1.TypeTextWithoutElementStrategy(), new JasmineExpectStrategy_1.JasmineExpectStrategy()));
var stepFileGenerator = new fileGen.Pepino.CommonJsCucumberStepFileGenerator();
function getMatchingSegmentTypes(segmentText, features) {
    var segments = matcher.get(segmentText, features);
    var matchingSegmentTypes = _.map(segments, (s) => {
        return s.type;
    });
    var uniqueSegmentTypes = _.unique(matchingSegmentTypes);
    return uniqueSegmentTypes;
}
;
function createOverwriteStepCodeFile(stepFilename, code) {
    var newFilename = stepFilename + ".js";
    fs.writeFileSync(newFilename, code);
}
function forEachTextFileIn(globPath, action) {
    return new Promise((resolve, reject) => {
        glob(globPath, {}, (err, files) => {
            var arr = new Array();
            _.each(files, (filename) => {
                try {
                    var fileContents = fs.readFileSync(filename, 'utf8');
                    arr.push(action(fileContents, filename));
                }
                catch (err) {
                    reject(err);
                }
            });
            resolve(arr);
        });
    });
}
class CodedStepFile {
    constructor(codedSteps, filename) {
        this.codedSteps = codedSteps;
        this.filename = filename;
    }
}
function getCodedSegents(features, segments) {
    return _.flatten(_.map(segments, (segment) => {
        var matchingSegmentTypes = getMatchingSegmentTypes(segment.text, features);
        var codeForStep = _.map(matchingSegmentTypes, (segmentType) => {
            return codeGenerator.generate(segmentType, segment.text, segment.steps);
        });
        return codeForStep;
    }));
}
function getCodedStepFile(steps, filename, features) {
    var stepGroups = _.groupBy(steps, (s) => {
        return s.segment;
    });
    var segments = _.map(Object.keys(stepGroups), (key) => {
        return {
            text: key,
            steps: stepGroups[key]
        };
    });
    var codedSegments = getCodedSegents(features, segments);
    return new CodedStepFile(codedSegments, filename);
}
function createStepCodeFilesForEachPepinoStepFile(glb, features) {
    return forEachTextFileIn(glb, (stepFileContents, filename) => {
        console.log(filename);
        var steps = stepParser.parse(stepFileContents);
        return getCodedStepFile(steps, filename, features);
    });
}
;
function getCacheOfFeatures(glb) {
    return forEachTextFileIn(glb, (featureFileContents, featureFilename) => {
        console.log(featureFilename);
        return featureParser.parse(featureFileContents);
    });
}
function writeCodeFiles(codeStepFiles) {
    _.each(codeStepFiles, (file) => {
        var commonJsFile = stepFileGenerator.generate(file.codedSteps);
        createOverwriteStepCodeFile(file.filename, commonJsFile);
    });
}
console.log("Pepino CLI");
program
    .option('-f, --features <glob>', 'Glob to feature files.')
    .option('-s, --steps <glob>', 'Glob to step files.')
    .parse(process.argv);
try {
    var features = program.features || "./features/**/*.feature";
    if (features.indexOf("/**/") === -1) {
        features = features + "/**/*.feature";
    }
    var steps = program.steps || features.replace(".feature", ".step");
    getCacheOfFeatures(features)
        .then((features) => {
        return createStepCodeFilesForEachPepinoStepFile(steps, features);
    })
        .then(writeCodeFiles);
}
catch (err) {
    console.log(err);
    program.help();
}

//# sourceMappingURL=data:application/json;base64,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
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
