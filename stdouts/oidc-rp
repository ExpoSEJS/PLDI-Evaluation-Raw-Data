
> json-document@0.0.1 postinstall /root/Targets/oidc-rp/node_modules/json-document
> npm run build


> json-document@0.0.1 build /root/Targets/oidc-rp/node_modules/json-document
> npm run clean && npm run babel


> json-document@0.0.1 clean /root/Targets/oidc-rp/node_modules/json-document
> rm -rf dist/*


> json-document@0.0.1 babel /root/Targets/oidc-rp/node_modules/json-document
> babel src -d lib

src/Formats.js -> lib/Formats.js
src/Initializer.js -> lib/Initializer.js
src/JSONDocument.js -> lib/JSONDocument.js
src/JSONMapping.js -> lib/JSONMapping.js
src/JSONPatch.js -> lib/JSONPatch.js
src/JSONPointer.js -> lib/JSONPointer.js
src/JSONReference.js -> lib/JSONReference.js
src/JSONSchema.js -> lib/JSONSchema.js
src/Validator.js -> lib/Validator.js
src/index.js -> lib/index.js
/root/Targets/oidc-rp
├─┬ @trust/webcrypto@0.6.0  (git://github.com/anvilresearch/webcrypto.git#19fd00d35bca3d9e4776b79b3dc541a0cc335c4c)
│ ├─┬ @trust/keyto@0.3.1 
│ │ ├─┬ asn1.js@4.9.1 
│ │ │ ├── bn.js@4.11.8 
│ │ │ ├── inherits@2.0.3 
│ │ │ └── minimalistic-assert@1.0.0 
│ │ └─┬ elliptic@6.4.0 
│ │   ├── brorand@1.1.0 
│ │   ├── hash.js@1.1.3 
│ │   ├── hmac-drbg@1.0.1 
│ │   └── minimalistic-crypto-utils@1.0.1 
│ └─┬ node-rsa@0.4.2 
│   └── asn1@0.2.3 
└─┬ oidc-rp@0.1.0 
  ├── base64url@2.0.0 
  ├─┬ json-document@0.0.1 
  │ ├─┬ babel-cli@6.26.0 
  │ │ ├─┬ babel-core@6.26.0 
  │ │ │ ├─┬ babel-code-frame@6.26.0 
  │ │ │ │ ├─┬ chalk@1.1.3 
  │ │ │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ │ │ └── ansi-regex@2.1.1 
  │ │ │ │ │ ├── strip-ansi@3.0.1 
  │ │ │ │ │ └── supports-color@2.0.0 
  │ │ │ │ ├── esutils@2.0.2 
  │ │ │ │ └── js-tokens@3.0.2 
  │ │ │ ├─┬ babel-generator@6.26.0 
  │ │ │ │ ├─┬ detect-indent@4.0.0 
  │ │ │ │ │ └─┬ repeating@2.0.1 
  │ │ │ │ │   └─┬ is-finite@1.0.2 
  │ │ │ │ │     └── number-is-nan@1.0.1 
  │ │ │ │ ├── jsesc@1.3.0 
  │ │ │ │ └── trim-right@1.0.1 
  │ │ │ ├── babel-helpers@6.24.1 
  │ │ │ ├── babel-messages@6.23.0 
  │ │ │ ├── babel-template@6.26.0 
  │ │ │ ├─┬ babel-traverse@6.26.0 
  │ │ │ │ ├── globals@9.18.0 
  │ │ │ │ └─┬ invariant@2.2.2 
  │ │ │ │   └── loose-envify@1.3.1 
  │ │ │ ├─┬ babel-types@6.26.0 
  │ │ │ │ └── to-fast-properties@1.0.3 
  │ │ │ ├── babylon@6.18.0 
  │ │ │ ├── debug@2.6.9 
  │ │ │ ├── json5@0.5.1 
  │ │ │ ├─┬ minimatch@3.0.4 
  │ │ │ │ └─┬ brace-expansion@1.1.8 
  │ │ │ │   ├── balanced-match@1.0.0 
  │ │ │ │   └── concat-map@0.0.1 
  │ │ │ └── private@0.1.7 
  │ │ ├─┬ babel-polyfill@6.26.0 
  │ │ │ ├── core-js@2.5.1 
  │ │ │ └── regenerator-runtime@0.10.5 
  │ │ ├─┬ babel-register@6.26.0 
  │ │ │ ├─┬ home-or-tmp@2.0.0 
  │ │ │ │ ├── os-homedir@1.0.2 
  │ │ │ │ └── os-tmpdir@1.0.2 
  │ │ │ └── source-map-support@0.4.18 
  │ │ ├─┬ babel-runtime@6.26.0 
  │ │ │ └── regenerator-runtime@0.11.0 
  │ │ ├─┬ chokidar@1.7.0 
  │ │ │ ├─┬ anymatch@1.3.2 
  │ │ │ │ ├─┬ micromatch@2.3.11 
  │ │ │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ │ │ ├── array-unique@0.2.1 
  │ │ │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │ │ │   ├── isobject@2.1.0 
  │ │ │ │ │ │ │   ├─┬ randomatic@1.1.7 
  │ │ │ │ │ │ │   │ ├─┬ is-number@3.0.0 
  │ │ │ │ │ │ │   │ │ └── kind-of@3.2.2 
  │ │ │ │ │ │ │   │ └── kind-of@4.0.0 
  │ │ │ │ │ │ │   └── repeat-string@1.6.1 
  │ │ │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ │ │ ├── extglob@0.3.2 
  │ │ │ │ │ ├── filename-regex@2.0.1 
  │ │ │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ │ │ ├─┬ for-own@0.1.5 
  │ │ │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ │ │ ├── glob-base@0.3.0 
  │ │ │ │ │ │ └── is-dotfile@1.0.3 
  │ │ │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │ │ │     └── is-primitive@2.0.0 
  │ │ │ │ └─┬ normalize-path@2.1.1 
  │ │ │ │   └── remove-trailing-separator@1.1.0 
  │ │ │ ├── async-each@1.0.1 
  │ │ │ ├── glob-parent@2.0.0 
  │ │ │ ├─┬ is-binary-path@1.0.1 
  │ │ │ │ └── binary-extensions@1.10.0 
  │ │ │ ├─┬ is-glob@2.0.1 
  │ │ │ │ └── is-extglob@1.0.0 
  │ │ │ └─┬ readdirp@2.1.0 
  │ │ │   ├─┬ readable-stream@2.3.3 
  │ │ │   │ ├── core-util-is@1.0.2 
  │ │ │   │ ├── isarray@1.0.0 
  │ │ │   │ ├── process-nextick-args@1.0.7 
  │ │ │   │ ├── safe-buffer@5.1.1 
  │ │ │   │ ├── string_decoder@1.0.3 
  │ │ │   │ └── util-deprecate@1.0.2 
  │ │ │   └── set-immediate-shim@1.0.1 
  │ │ ├── commander@2.11.0 
  │ │ ├── convert-source-map@1.5.0 
  │ │ ├── fs-readdir-recursive@1.0.0 
  │ │ ├─┬ glob@7.1.2 
  │ │ │ ├── fs.realpath@1.0.0 
  │ │ │ ├─┬ inflight@1.0.6 
  │ │ │ │ └── wrappy@1.0.2 
  │ │ │ └── once@1.4.0 
  │ │ ├── lodash@4.17.4 
  │ │ ├─┬ output-file-sync@1.1.2 
  │ │ │ ├── graceful-fs@4.1.11 
  │ │ │ └── object-assign@4.1.1 
  │ │ ├── path-is-absolute@1.0.1 
  │ │ ├── slash@1.0.0 
  │ │ ├── source-map@0.5.7 
  │ │ └─┬ v8flags@2.1.1 
  │ │   └── user-home@1.1.1 
  │ └─┬ babel-preset-es2015@6.24.1 
  │   ├── babel-plugin-check-es2015-constants@6.22.0 
  │   ├── babel-plugin-transform-es2015-arrow-functions@6.22.0 
  │   ├── babel-plugin-transform-es2015-block-scoped-functions@6.22.0 
  │   ├── babel-plugin-transform-es2015-block-scoping@6.26.0 
  │   ├─┬ babel-plugin-transform-es2015-classes@6.24.1 
  │   │ ├── babel-helper-define-map@6.26.0 
  │   │ ├── babel-helper-function-name@6.24.1 
  │   │ ├── babel-helper-optimise-call-expression@6.24.1 
  │   │ └── babel-helper-replace-supers@6.24.1 
  │   ├── babel-plugin-transform-es2015-computed-properties@6.24.1 
  │   ├── babel-plugin-transform-es2015-destructuring@6.23.0 
  │   ├── babel-plugin-transform-es2015-duplicate-keys@6.24.1 
  │   ├── babel-plugin-transform-es2015-for-of@6.23.0 
  │   ├── babel-plugin-transform-es2015-function-name@6.24.1 
  │   ├── babel-plugin-transform-es2015-literals@6.22.0 
  │   ├── babel-plugin-transform-es2015-modules-amd@6.24.1 
  │   ├─┬ babel-plugin-transform-es2015-modules-commonjs@6.26.0 
  │   │ └── babel-plugin-transform-strict-mode@6.24.1 
  │   ├─┬ babel-plugin-transform-es2015-modules-systemjs@6.24.1 
  │   │ └── babel-helper-hoist-variables@6.24.1 
  │   ├── babel-plugin-transform-es2015-modules-umd@6.24.1 
  │   ├── babel-plugin-transform-es2015-object-super@6.24.1 
  │   ├─┬ babel-plugin-transform-es2015-parameters@6.24.1 
  │   │ ├── babel-helper-call-delegate@6.24.1 
  │   │ └── babel-helper-get-function-arity@6.24.1 
  │   ├── babel-plugin-transform-es2015-shorthand-properties@6.24.1 
  │   ├── babel-plugin-transform-es2015-spread@6.22.0 
  │   ├─┬ babel-plugin-transform-es2015-sticky-regex@6.24.1 
  │   │ └── babel-helper-regex@6.26.0 
  │   ├── babel-plugin-transform-es2015-template-literals@6.22.0 
  │   ├── babel-plugin-transform-es2015-typeof-symbol@6.23.0 
  │   ├─┬ babel-plugin-transform-es2015-unicode-regex@6.24.1 
  │   │ └─┬ regexpu-core@2.0.0 
  │   │   ├── regenerate@1.3.3 
  │   │   ├── regjsgen@0.2.0 
  │   │   └─┬ regjsparser@0.1.5 
  │   │     └── jsesc@0.5.0 
  │   └─┬ babel-plugin-transform-regenerator@6.26.0 
  │     └── regenerator-transform@0.10.1 
  ├─┬ node-fetch@1.7.3 
  │ ├─┬ encoding@0.1.12 
  │ │ └── iconv-lite@0.4.19 
  │ └── is-stream@1.1.0 
  ├── text-encoding@0.6.4 
  └─┬ urlutils@0.0.3 
    ├─┬ chai@4.1.2 
    │ ├── assertion-error@1.0.2 
    │ ├── check-error@1.0.2 
    │ ├── deep-eql@3.0.1 
    │ ├── get-func-name@2.0.0 
    │ ├── pathval@1.1.0 
    │ └── type-detect@4.0.3 
    ├─┬ mocha@4.0.0 
    │ ├── browser-stdout@1.3.0 
    │ ├─┬ debug@3.1.0 
    │ │ └── ms@2.0.0 
    │ ├── diff@3.3.1 
    │ ├── escape-string-regexp@1.0.5 
    │ ├─┬ growl@1.10.2 
    │ │ ├── UNMET PEER DEPENDENCY eslint@>=3.1.0
    │ │ └─┬ eslint-plugin-node@5.2.0 
    │ │   ├── ignore@3.3.5 
    │ │   ├─┬ resolve@1.4.0 
    │ │   │ └── path-parse@1.0.5 
    │ │   └── semver@5.3.0 
    │ ├── he@1.1.1 
    │ ├─┬ mkdirp@0.5.1 
    │ │ └── minimist@0.0.8 
    │ └─┬ supports-color@4.4.0 
    │   └── has-flag@2.0.0 
    └── URIjs@1.16.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/oidc-rp/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 34% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0378 took 4.0049s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (14:4) on program 'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Dependencies
 */
var assert = require('assert');
var fetch = require('node-fetch');
var Request = fetch.Request,
    Headers = fetch.Headers;

var _require = require('json-document'),
    JSONSchema = _require.JSONSchema,
    JSONDocument = _require.JSONDocument;

var _require2 = require('jose'),
    JWKSet = _require2.JWKSet;

var AuthenticationRequest = require('./AuthenticationRequest');
var AuthenticationResponse = require('./AuthenticationResponse');
var RelyingPartySchema = require('./RelyingPartySchema');
// const Session = require('./Session')

/**
 * RelyingParty
 *
 * @class
 * Client interface for OpenID Connect Relying Party.
 *
 * @example
 *  let client = RelyingParty({
 *    provider: {
 *      name: 'Anvil Research, Inc.',
 *      url: 'https://forge.anvil.io'
 *      // configuration
 *      // jwks
 *    },
 *    authenticate: {
 *      response_type: 'code',
 *      display: 'popup',
 *      scope: 'openid profile email'
 *    },
 *    register: {
 *      client_name: 'Example',
 *      client_uri: 'https://example.com',
 *      logo_uri: 'https://example.com/assets/logo.png',
 *      redirect_uris: ['https://app.example.com/callback'],
 *      response_types: ['code', 'code id_token token'],
 *      grant_types: ['authorization_code'],
 *      default_max_age: 7200,
 *      post_logout_redirect_uris: ['https://app.example.com']
 *    },
 *    registration: {
 *      // if you have it saved somewhere
 *    },
 *    store: localStorage || req.session,
 *    popup: { width: 400, height: 300 }
 *  })
 *
 *  client.discover() => Promise
 *  client.jwks() => Promise
 *  client.authenticate()
 *  client.authenticateUri()
 *  client.validateResponse(uri) => Promise
 *  client.userinfo() => Promise
 *  client.logout()
 */

var RelyingParty = function (_JSONDocument) {
  _inherits(RelyingParty, _JSONDocument);

  function RelyingParty() {
    _classCallCheck(this, RelyingParty);

    return _possibleConstructorReturn(this, (RelyingParty.__proto__ || Object.getPrototypeOf(RelyingParty)).apply(this, arguments));
  }

  _createClass(RelyingParty, [{
    key: 'discover',


    /**
     * Discover
     *
     * @description Promises the issuer's OpenID Configuration.
     * @returns {Promise}
     */
    value: function discover() {
      var _this2 = this;

      try {
        var issuer = this.provider.url;
        var endpoint = '.well-known/openid-configuration';

        assert(issuer, 'RelyingParty provider must define "url"');

        return fetch(issuer + '/' + endpoint)
        //.then(status(200))
        .then(function (response) {
          return response.json().then(function (json) {
            return _this2.provider.configuration = json;
          });
        });
      } catch (error) {
        return Promise.reject(error);
      }
    }

    /**
     * Register
     *
     * @description Register's a client with provider as a Relying Party
     * @returns {Promise}
     */

  }, {
    key: 'register',
    value: function register(options) {
      var _this3 = this;

      try {
        var configuration = this.provider.configuration;

        assert(configuration, 'OpenID Configuration is not initialized.');
        assert(configuration.registration_endpoint, 'OpenID Configuration is missing registration_endpoint.');

        var uri = configuration.registration_endpoint;
        var method = 'post';
        var headers = new Headers({ 'Content-Type': 'application/json' });
        var params = this.defaults.register;
        var body = JSON.stringify(Object.assign({}, params, options));

        return fetch(uri, { method: method, headers: headers, body: body })
        //.then(status)
        .then(function (response) {
          return response.json().then(function (json) {
            return _this3.registration = json;
          });
        });
      } catch (error) {
        return Promise.reject(error);
      }
    }
  }, {
    key: 'serialize',
    value: function serialize() {
      return JSON.stringify(this);
    }

    /**
     * jwks
     *
     * @description Promises the issuer's JWK Set.
     * @returns {Promise}
     */

  }, {
    key: 'jwks',
    value: function jwks() {
      var _this4 = this;

      try {
        var configuration = this.provider.configuration;

        assert(configuration, 'OpenID Configuration is not initialized.');
        assert(configuration.jwks_uri, 'OpenID Configuration is missing jwks_uri.');

        var uri = configuration.jwks_uri;

        return fetch(uri)
        //.then(status(200))
        .then(function (response) {
          return response.json().then(function (json) {
            return JWKSet.importKeys(json);
          }).then(function (jwks) {
            return _this4.provider.jwks = jwks;
          });
        });
      } catch (error) {
        return Promise.reject(error);
      }
    }

    /**
     * createRequest
     */

  }, {
    key: 'createRequest',
    value: function createRequest(options, session) {
      return AuthenticationRequest.create(this, options, session || this.store);
    }

    /**
     * Validate Response
     *
     * @param response {string} req.query or req.body.text
     * @param session {Object} req.session or similar session store
     * @returns {Promise<Object>} Custom response object, with `params` and
     *   `mode` properties
     */

  }, {
    key: 'validateResponse',
    value: function validateResponse(response, session) {
      session = session || this.store;

      if (response.match(/^http(s?):\/\//)) {
        response = { rp: this, redirect: response, session: session };
      } else {
        response = { rp: this, body: response, session: session };
      }

      return AuthenticationResponse.validateResponse(response);
    }

    /**
     * userinfo
     *
     * @description Promises the authenticated user's claims.
     * @returns {Promise}
     */

  }, {
    key: 'userinfo',
    value: function userinfo() {
      try {
        var configuration = this.provider.configuration;

        assert(configuration, 'OpenID Configuration is not initialized.');
        assert(configuration.registration_endpoint, 'OpenID Configuration is missing registration_endpoint.');

        var uri = configuration.userinfo_endpoint;
        var access_token = this.session.access_token;

        assert(access_token, 'Missing access token.');

        var headers = new Headers({
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + access_token
        });

        return fetch(uri, { headers: headers }).then(status(200)).then(function (response) {
          return response.json();
        });
      } catch (error) {
        return Promise.reject(error);
      }
    }

    /**
     * Logout
     */

  }, {
    key: 'logout',
    value: function logout() {}
  }], [{
    key: 'from',


    /**
     * from
     *
     * @description
     * Create a RelyingParty instance from a previously registered client.
     *
     * @param {Object} data
     * @returns Promise
     */
    value: function from(data) {
      var rp = new RelyingParty(data);
      var validation = rp.validate();

      // schema validation
      if (!validation.valid) {
        return Promise.reject(validation);
      }

      var jwks = rp.provider.jwks;

      // request the JWK Set if missing
      if (!jwks) {
        return rp.jwks().then(function () {
          return rp;
        });
      }

      // otherwise import the JWK Set to webcrypto
      return JWKSet.importKeys(jwks).then(function (jwks) {
        rp.provider.jwks = jwks;
        return rp;
      });
    }

    /**
     * register
     */

  }, {
    key: 'register',
    value: function register(issuer, registration, options) {
      var rp = new RelyingParty({
        provider: { url: issuer },
        defaults: Object.assign({}, options.defaults),
        store: options.store
      });

      return Promise.resolve().then(function () {
        return rp.discover();
      }).then(function () {
        return rp.jwks();
      }).then(function () {
        return rp.register(registration);
      }).then(function () {
        return rp;
      });
    }
  }, {
    key: 'schema',


    /**
     * Schema
     */
    get: function get() {
      return RelyingPartySchema;
    }
  }]);

  return RelyingParty;
}(JSONDocument);

module.exports = RelyingParty; at SyntaxError: Unexpected token (14:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/oidc-rp/node_modules/oidc-rp/lib/index.js. Coverage (Term): 82% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
