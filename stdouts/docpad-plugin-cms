/root/Targets/docpad-plugin-cms
├── UNMET PEER DEPENDENCY docpad@6
├── UNMET PEER DEPENDENCY docpad-plugin-cleanurls@^2.8.1
├── docpad-plugin-cms@2.5.6 
├── UNMET PEER DEPENDENCY docpad-plugin-eco@^2.1.0
└── UNMET PEER DEPENDENCY docpad-plugin-posteditor@^2.0.0

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/docpad-plugin-cms/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 20% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 20% coverage ] ****** [2 done /0 queued / 1 running / 1 errors / 26% coverage ] ****** [2 done /0 queued / 1 running / 1 errors / 26% coverage ] ****** [3 done /0 queued / 1 running / 2 errors / 26% coverage ] ****** [3 done /0 queued / 1 running / 2 errors / 26% coverage ] ****** [4 done /0 queued / 1 running / 3 errors / 26% coverage ] ****** [4 done /0 queued / 1 running / 3 errors / 26% coverage ] ****** [5 done /0 queued / 1 running / 4 errors / 26% coverage ] ****** [5 done /0 queued / 1 running / 4 errors / 26% coverage ] ****** [6 done /1 queued / 1 running / 5 errors / 28.000000000000004% coverage ] ****** [6 done /0 queued / 2 running / 5 errors / 28.000000000000004% coverage ] ****** [6 done /0 queued / 2 running / 5 errors / 28.000000000000004% coverage ] ****** [7 done /0 queued / 1 running / 6 errors / 28.000000000000004% coverage ] ****** [8 done /1 queued / 1 running / 7 errors / 28.000000000000004% coverage ] ****** [8 done /0 queued / 2 running / 7 errors / 28.000000000000004% coverage ] ****** [8 done /0 queued / 2 running / 7 errors / 28.000000000000004% coverage ] ****** [9 done /2 queued / 2 running / 8 errors / 28.000000000000004% coverage ] ****** [9 done /1 queued / 3 running / 8 errors / 28.000000000000004% coverage ] ****** [9 done /0 queued / 4 running / 8 errors / 28.000000000000004% coverage ] ****** [9 done /0 queued / 4 running / 8 errors / 28.000000000000004% coverage ] ****** [10 done /1 queued / 4 running / 9 errors / 28.000000000000004% coverage ] ****** [10 done /0 queued / 5 running / 9 errors / 28.000000000000004% coverage ] ****** [10 done /0 queued / 5 running / 9 errors / 28.000000000000004% coverage ] ****** [11 done /1 queued / 5 running / 10 errors / 28.000000000000004% coverage ] ****** [11 done /0 queued / 6 running / 10 errors / 28.000000000000004% coverage ] ****** [11 done /0 queued / 6 running / 10 errors / 28.000000000000004% coverage ] ****** [12 done /0 queued / 6 running / 11 errors / 28.000000000000004% coverage ] ****** [12 done /0 queued / 6 running / 11 errors / 28.000000000000004% coverage ] ****** [13 done /1 queued / 6 running / 12 errors / 28.000000000000004% coverage ] ****** [13 done /0 queued / 7 running / 12 errors / 28.000000000000004% coverage ] ****** [13 done /0 queued / 7 running / 12 errors / 28.000000000000004% coverage ] ****** [14 done /1 queued / 7 running / 13 errors / 28.000000000000004% coverage ] ****** [14 done /0 queued / 8 running / 13 errors / 28.000000000000004% coverage ] ****** [14 done /0 queued / 8 running / 13 errors / 28.000000000000004% coverage ] ****** [15 done /1 queued / 8 running / 14 errors / 28.000000000000004% coverage ] ****** [15 done /0 queued / 9 running / 14 errors / 28.000000000000004% coverage ] ****** [15 done /0 queued / 9 running / 14 errors / 28.000000000000004% coverage ] ****** [16 done /1 queued / 9 running / 15 errors / 28.000000000000004% coverage ] ****** [16 done /0 queued / 10 running / 15 errors / 28.000000000000004% coverage ] ****** [16 done /0 queued / 10 running / 15 errors / 28.000000000000004% coverage ] ****** [17 done /1 queued / 10 running / 16 errors / 28.000000000000004% coverage ] ****** [17 done /0 queued / 11 running / 16 errors / 28.000000000000004% coverage ] ****** [17 done /0 queued / 11 running / 16 errors / 28.000000000000004% coverage ] ****** [18 done /1 queued / 11 running / 17 errors / 28.000000000000004% coverage ] ****** [18 done /0 queued / 12 running / 17 errors / 28.000000000000004% coverage ] ****** [18 done /0 queued / 12 running / 17 errors / 28.000000000000004% coverage ] ****** [19 done /1 queued / 12 running / 18 errors / 28.000000000000004% coverage ] ****** [19 done /0 queued / 13 running / 18 errors / 28.000000000000004% coverage ] ****** [19 done /0 queued / 13 running / 18 errors / 28.000000000000004% coverage ] ****** [20 done /2 queued / 13 running / 19 errors / 28.000000000000004% coverage ] ****** [20 done /1 queued / 14 running / 19 errors / 28.000000000000004% coverage ] ****** [20 done /0 queued / 15 running / 19 errors / 28.000000000000004% coverage ] ****** [20 done /0 queued / 15 running / 19 errors / 28.000000000000004% coverage ] ****** [21 done /1 queued / 15 running / 20 errors / 28.000000000000004% coverage ] ****** [21 done /0 queued / 16 running / 20 errors / 28.000000000000004% coverage ] ****** [21 done /0 queued / 16 running / 20 errors / 28.000000000000004% coverage ] ****** [22 done /1 queued / 16 running / 21 errors / 28.000000000000004% coverage ] ****** [22 done /1 queued / 16 running / 21 errors / 28.000000000000004% coverage ] ****** [23 done /2 queued / 16 running / 22 errors / 28.000000000000004% coverage ] ****** [23 done /2 queued / 16 running / 22 errors / 28.000000000000004% coverage ] ****** [24 done /3 queued / 16 running / 23 errors / 28.000000000000004% coverage ] ****** [24 done /3 queued / 16 running / 23 errors / 28.000000000000004% coverage ] ****** [25 done /4 queued / 16 running / 24 errors / 28.000000000000004% coverage ] ****** [25 done /4 queued / 16 running / 24 errors / 28.000000000000004% coverage ] ****** [26 done /5 queued / 16 running / 25 errors / 28.000000000000004% coverage ] ****** [26 done /5 queued / 16 running / 25 errors / 28.000000000000004% coverage ] ****** [27 done /6 queued / 16 running / 26 errors / 28.000000000000004% coverage ] ****** [27 done /6 queued / 16 running / 26 errors / 28.000000000000004% coverage ] ****** [28 done /8 queued / 16 running / 27 errors / 28.000000000000004% coverage ] ****** [28 done /8 queued / 16 running / 27 errors / 28.000000000000004% coverage ] ****** [29 done /9 queued / 16 running / 28 errors / 28.000000000000004% coverage ] ****** [29 done /9 queued / 16 running / 28 errors / 28.000000000000004% coverage ] ****** [30 done /10 queued / 16 running / 29 errors / 28.000000000000004% coverage ] ****** [30 done /10 queued / 16 running / 29 errors / 28.000000000000004% coverage ] ****** [31 done /13 queued / 16 running / 30 errors / 28.000000000000004% coverage ] ****** [31 done /13 queued / 16 running / 30 errors / 28.000000000000004% coverage ] ****** [32 done /14 queued / 16 running / 31 errors / 28.000000000000004% coverage ] ****** [32 done /14 queued / 16 running / 31 errors / 28.000000000000004% coverage ] ****** [33 done /15 queued / 16 running / 32 errors / 28.000000000000004% coverage ] ****** [33 done /15 queued / 16 running / 32 errors / 28.000000000000004% coverage ] ****** [34 done /15 queued / 16 running / 33 errors / 28.000000000000004% coverage ] ****** [34 done /15 queued / 16 running / 33 errors / 28.000000000000004% coverage ] ****** [35 done /16 queued / 16 running / 34 errors / 28.000000000000004% coverage ] ****** [35 done /16 queued / 16 running / 34 errors / 28.000000000000004% coverage ] ****** [36 done /17 queued / 16 running / 35 errors / 28.000000000000004% coverage ] ****** [36 done /17 queued / 16 running / 35 errors / 28.000000000000004% coverage ] ****** [37 done /18 queued / 16 running / 36 errors / 28.000000000000004% coverage ] ****** [37 done /18 queued / 16 running / 36 errors / 28.000000000000004% coverage ] ****** [38 done /22 queued / 16 running / 37 errors / 28.000000000000004% coverage ] ****** [38 done /22 queued / 16 running / 37 errors / 28.000000000000004% coverage ] ****** [39 done /23 queued / 16 running / 38 errors / 28.000000000000004% coverage ] ****** [39 done /23 queued / 16 running / 38 errors / 28.000000000000004% coverage ] ****** [40 done /25 queued / 16 running / 39 errors / 28.000000000000004% coverage ] ****** [40 done /25 queued / 16 running / 39 errors / 28.000000000000004% coverage ] ****** [41 done /26 queued / 16 running / 40 errors / 28.000000000000004% coverage ] ****** [41 done /26 queued / 16 running / 40 errors / 28.000000000000004% coverage ] ****** [42 done /27 queued / 16 running / 41 errors / 28.000000000000004% coverage ] ****** [42 done /27 queued / 16 running / 41 errors / 28.000000000000004% coverage ] ****** [43 done /28 queued / 16 running / 42 errors / 28.000000000000004% coverage ] ****** [43 done /28 queued / 16 running / 42 errors / 28.000000000000004% coverage ] ****** [44 done /32 queued / 16 running / 43 errors / 28.000000000000004% coverage ] ****** [44 done /32 queued / 16 running / 43 errors / 28.000000000000004% coverage ] ****** [45 done /32 queued / 16 running / 44 errors / 28.000000000000004% coverage ] ****** [45 done /32 queued / 16 running / 44 errors / 28.000000000000004% coverage ] ****** [46 done /34 queued / 16 running / 45 errors / 28.000000000000004% coverage ] ****** [46 done /34 queued / 16 running / 45 errors / 28.000000000000004% coverage ] ****** [47 done /37 queued / 16 running / 46 errors / 28.000000000000004% coverage ] ****** [47 done /37 queued / 16 running / 46 errors / 28.000000000000004% coverage ] ****** [48 done /37 queued / 16 running / 47 errors / 28.000000000000004% coverage ] ****** [48 done /37 queued / 16 running / 47 errors / 28.000000000000004% coverage ] ****** [49 done /38 queued / 16 running / 48 errors / 28.000000000000004% coverage ] ****** [49 done /38 queued / 16 running / 48 errors / 28.000000000000004% coverage ] ****** [50 done /39 queued / 16 running / 49 errors / 28.000000000000004% coverage ] ****** [50 done /39 queued / 16 running / 49 errors / 28.000000000000004% coverage ] ****** [51 done /39 queued / 16 running / 50 errors / 28.000000000000004% coverage ] ****** [51 done /39 queued / 16 running / 50 errors / 28.000000000000004% coverage ] ****** [52 done /42 queued / 16 running / 51 errors / 28.000000000000004% coverage ] ****** [52 done /42 queued / 16 running / 51 errors / 28.000000000000004% coverage ] ****** [53 done /43 queued / 16 running / 52 errors / 28.000000000000004% coverage ] ****** [53 done /43 queued / 16 running / 52 errors / 28.000000000000004% coverage ] ****** [54 done /43 queued / 16 running / 53 errors / 28.000000000000004% coverage ] ****** [54 done /43 queued / 16 running / 53 errors / 28.000000000000004% coverage ] ****** [55 done /44 queued / 16 running / 54 errors / 28.000000000000004% coverage ] ****** [55 done /44 queued / 16 running / 54 errors / 28.000000000000004% coverage ] ****** [56 done /46 queued / 16 running / 55 errors / 28.000000000000004% coverage ] ****** [56 done /46 queued / 16 running / 55 errors / 28.000000000000004% coverage ] ****** [57 done /47 queued / 16 running / 56 errors / 28.000000000000004% coverage ] ****** [57 done /47 queued / 16 running / 56 errors / 28.000000000000004% coverage ] ****** [58 done /48 queued / 16 running / 57 errors / 28.000000000000004% coverage ] ****** [58 done /48 queued / 16 running / 57 errors / 28.000000000000004% coverage ] ****** [59 done /48 queued / 16 running / 58 errors / 28.000000000000004% coverage ] ****** [59 done /48 queued / 16 running / 58 errors / 28.000000000000004% coverage ] ****** [60 done /48 queued / 16 running / 59 errors / 28.000000000000004% coverage ] ****** [60 done /48 queued / 16 running / 59 errors / 28.000000000000004% coverage ] ****** [61 done /50 queued / 16 running / 60 errors / 28.000000000000004% coverage ] ****** [61 done /50 queued / 16 running / 60 errors / 28.000000000000004% coverage ] ****** [62 done /50 queued / 16 running / 61 errors / 28.000000000000004% coverage ] ****** [62 done /50 queued / 16 running / 61 errors / 28.000000000000004% coverage ] ****** [63 done /51 queued / 16 running / 62 errors / 28.000000000000004% coverage ] ****** [63 done /51 queued / 16 running / 62 errors / 28.000000000000004% coverage ] ****** [64 done /51 queued / 16 running / 63 errors / 28.000000000000004% coverage ] ****** [64 done /51 queued / 16 running / 63 errors / 28.000000000000004% coverage ] ****** [65 done /52 queued / 16 running / 64 errors / 28.000000000000004% coverage ] ****** [65 done /52 queued / 16 running / 64 errors / 28.000000000000004% coverage ] ****** [66 done /53 queued / 16 running / 65 errors / 28.000000000000004% coverage ] ****** [66 done /53 queued / 16 running / 65 errors / 28.000000000000004% coverage ] ****** [67 done /53 queued / 16 running / 66 errors / 28.000000000000004% coverage ] ****** [67 done /53 queued / 16 running / 66 errors / 28.000000000000004% coverage ] ****** [68 done /53 queued / 16 running / 67 errors / 28.000000000000004% coverage ] ****** [68 done /53 queued / 16 running / 67 errors / 28.000000000000004% coverage ] ****** [69 done /53 queued / 16 running / 68 errors / 28.000000000000004% coverage ] ****** [69 done /53 queued / 16 running / 68 errors / 28.000000000000004% coverage ] ****** [70 done /53 queued / 16 running / 69 errors / 28.000000000000004% coverage ] ****** [70 done /53 queued / 16 running / 69 errors / 28.000000000000004% coverage ] ****** [71 done /55 queued / 16 running / 70 errors / 28.000000000000004% coverage ] ****** [71 done /55 queued / 16 running / 70 errors / 28.000000000000004% coverage ] ****** [72 done /56 queued / 16 running / 71 errors / 28.000000000000004% coverage ] ****** [72 done /56 queued / 16 running / 71 errors / 28.000000000000004% coverage ] ****** [73 done /56 queued / 16 running / 72 errors / 28.000000000000004% coverage ] ****** [73 done /56 queued / 16 running / 72 errors / 28.000000000000004% coverage ] ****** [74 done /56 queued / 16 running / 73 errors / 28.000000000000004% coverage ] ****** [74 done /56 queued / 16 running / 73 errors / 28.000000000000004% coverage ] ****** [75 done /57 queued / 16 running / 74 errors / 28.000000000000004% coverage ] ****** [75 done /57 queued / 16 running / 74 errors / 28.000000000000004% coverage ] ****** [76 done /57 queued / 16 running / 75 errors / 28.000000000000004% coverage ] ****** [76 done /57 queued / 16 running / 75 errors / 28.000000000000004% coverage ] ****** [77 done /57 queued / 16 running / 76 errors / 28.000000000000004% coverage ] ****** [77 done /57 queued / 16 running / 76 errors / 28.000000000000004% coverage ] ****** [78 done /57 queued / 16 running / 77 errors / 28.000000000000004% coverage ] ****** [78 done /57 queued / 16 running / 77 errors / 28.000000000000004% coverage ] ****** [79 done /58 queued / 16 running / 78 errors / 28.000000000000004% coverage ] ****** [79 done /58 queued / 16 running / 78 errors / 28.000000000000004% coverage ] ****** [80 done /59 queued / 16 running / 79 errors / 28.000000000000004% coverage ] ****** [80 done /59 queued / 16 running / 79 errors / 28.000000000000004% coverage ] ****** [81 done /60 queued / 16 running / 80 errors / 28.000000000000004% coverage ] ****** [81 done /60 queued / 16 running / 80 errors / 28.000000000000004% coverage ] ****** [82 done /61 queued / 16 running / 81 errors / 28.000000000000004% coverage ] ****** [82 done /61 queued / 16 running / 81 errors / 28.000000000000004% coverage ] ****** [83 done /62 queued / 16 running / 82 errors / 28.000000000000004% coverage ] ****** [83 done /62 queued / 16 running / 82 errors / 28.000000000000004% coverage ] ****** [84 done /63 queued / 16 running / 83 errors / 28.000000000000004% coverage ] ****** [84 done /63 queued / 16 running / 83 errors / 28.000000000000004% coverage ] ****** [85 done /64 queued / 16 running / 84 errors / 28.000000000000004% coverage ] ****** [85 done /64 queued / 16 running / 84 errors / 28.000000000000004% coverage ] ****** [86 done /64 queued / 16 running / 85 errors / 28.000000000000004% coverage ] ****** [86 done /64 queued / 16 running / 85 errors / 28.000000000000004% coverage ] ****** [87 done /65 queued / 16 running / 86 errors / 28.000000000000004% coverage ] ****** [87 done /65 queued / 16 running / 86 errors / 28.000000000000004% coverage ] ****** [88 done /67 queued / 16 running / 87 errors / 28.000000000000004% coverage ] ****** [88 done /67 queued / 16 running / 87 errors / 28.000000000000004% coverage ] ****** [89 done /68 queued / 16 running / 88 errors / 28.000000000000004% coverage ] ****** [89 done /68 queued / 16 running / 88 errors / 28.000000000000004% coverage ] ****** [90 done /69 queued / 16 running / 89 errors / 28.000000000000004% coverage ] ****** [90 done /69 queued / 16 running / 89 errors / 28.000000000000004% coverage ] ****** [91 done /70 queued / 16 running / 90 errors / 28.000000000000004% coverage ] ****** [91 done /70 queued / 16 running / 90 errors / 28.000000000000004% coverage ] ****** [92 done /72 queued / 16 running / 91 errors / 28.000000000000004% coverage ] ****** [92 done /72 queued / 16 running / 91 errors / 28.000000000000004% coverage ] ****** [93 done /73 queued / 16 running / 92 errors / 28.000000000000004% coverage ] ****** [93 done /73 queued / 16 running / 92 errors / 28.000000000000004% coverage ] ****** [94 done /74 queued / 16 running / 93 errors / 28.000000000000004% coverage ] ****** [94 done /74 queued / 16 running / 93 errors / 28.000000000000004% coverage ] ****** [95 done /75 queued / 16 running / 94 errors / 28.000000000000004% coverage ] ****** [95 done /75 queued / 16 running / 94 errors / 28.000000000000004% coverage ] ****** [96 done /77 queued / 16 running / 95 errors / 28.000000000000004% coverage ] ****** [96 done /77 queued / 16 running / 95 errors / 28.000000000000004% coverage ] ****** [97 done /80 queued / 16 running / 96 errors / 28.000000000000004% coverage ] ****** [97 done /80 queued / 16 running / 96 errors / 28.000000000000004% coverage ] ****** [98 done /82 queued / 16 running / 97 errors / 28.000000000000004% coverage ] ****** [98 done /82 queued / 16 running / 97 errors / 28.000000000000004% coverage ] ****** [99 done /83 queued / 16 running / 98 errors / 28.000000000000004% coverage ] ****** [99 done /83 queued / 16 running / 98 errors / 28.000000000000004% coverage ] ****** [100 done /84 queued / 16 running / 99 errors / 28.000000000000004% coverage ] ****** [100 done /84 queued / 16 running / 99 errors / 28.000000000000004% coverage ] ****** [101 done /85 queued / 16 running / 100 errors / 28.000000000000004% coverage ] ****** [101 done /85 queued / 16 running / 100 errors / 28.000000000000004% coverage ] ****** [102 done /87 queued / 16 running / 101 errors / 28.000000000000004% coverage ] ****** [102 done /87 queued / 16 running / 101 errors / 28.000000000000004% coverage ] ****** [103 done /88 queued / 16 running / 102 errors / 28.000000000000004% coverage ] ****** [103 done /88 queued / 16 running / 102 errors / 28.000000000000004% coverage ] ****** [104 done /88 queued / 16 running / 103 errors / 28.000000000000004% coverage ] ****** [104 done /88 queued / 16 running / 103 errors / 28.000000000000004% coverage ] ****** [105 done /89 queued / 16 running / 104 errors / 28.000000000000004% coverage ] ****** [105 done /89 queued / 16 running / 104 errors / 28.000000000000004% coverage ] ****** [106 done /93 queued / 16 running / 105 errors / 28.000000000000004% coverage ] ****** [106 done /93 queued / 16 running / 105 errors / 28.000000000000004% coverage ] ****** [107 done /94 queued / 16 running / 106 errors / 28.000000000000004% coverage ] ****** [107 done /94 queued / 16 running / 106 errors / 28.000000000000004% coverage ] ****** [108 done /95 queued / 16 running / 107 errors / 28.000000000000004% coverage ] ****** [108 done /95 queued / 16 running / 107 errors / 28.000000000000004% coverage ] ****** [109 done /96 queued / 16 running / 108 errors / 28.000000000000004% coverage ] ****** [109 done /96 queued / 16 running / 108 errors / 28.000000000000004% coverage ] ****** [110 done /98 queued / 16 running / 109 errors / 28.000000000000004% coverage ] ****** [110 done /98 queued / 16 running / 109 errors / 28.000000000000004% coverage ] ****** [111 done /98 queued / 16 running / 110 errors / 28.000000000000004% coverage ] ****** [111 done /98 queued / 16 running / 110 errors / 28.000000000000004% coverage ] ****** [112 done /101 queued / 16 running / 111 errors / 28.000000000000004% coverage ] ****** [112 done /101 queued / 16 running / 111 errors / 28.000000000000004% coverage ] ****** [113 done /101 queued / 16 running / 112 errors / 28.000000000000004% coverage ] ****** [113 done /101 queued / 16 running / 112 errors / 28.000000000000004% coverage ] ****** [114 done /102 queued / 16 running / 113 errors / 28.000000000000004% coverage ] ****** [114 done /102 queued / 16 running / 113 errors / 28.000000000000004% coverage ] ****** [115 done /102 queued / 16 running / 114 errors / 28.000000000000004% coverage ] ****** [115 done /102 queued / 16 running / 114 errors / 28.000000000000004% coverage ] ****** [116 done /102 queued / 16 running / 115 errors / 28.000000000000004% coverage ] ****** [116 done /102 queued / 16 running / 115 errors / 28.000000000000004% coverage ] ****** [117 done /103 queued / 16 running / 116 errors / 28.000000000000004% coverage ] ****** [117 done /103 queued / 16 running / 116 errors / 28.000000000000004% coverage ] ****** [118 done /104 queued / 16 running / 117 errors / 28.000000000000004% coverage ] ****** [118 done /104 queued / 16 running / 117 errors / 28.000000000000004% coverage ] ****** [119 done /105 queued / 16 running / 118 errors / 28.000000000000004% coverage ] ****** [119 done /105 queued / 16 running / 118 errors / 28.000000000000004% coverage ] ****** [120 done /106 queued / 16 running / 119 errors / 28.000000000000004% coverage ] ****** [120 done /106 queued / 16 running / 119 errors / 28.000000000000004% coverage ] ****** [121 done /106 queued / 16 running / 120 errors / 28.000000000000004% coverage ] ****** [121 done /106 queued / 16 running / 120 errors / 28.000000000000004% coverage ] ****** [122 done /106 queued / 16 running / 121 errors / 28.000000000000004% coverage ] ****** [122 done /106 queued / 16 running / 121 errors / 28.000000000000004% coverage ] ****** [123 done /107 queued / 16 running / 122 errors / 28.000000000000004% coverage ] ****** [123 done /107 queued / 16 running / 122 errors / 28.000000000000004% coverage ] ****** [124 done /108 queued / 16 running / 123 errors / 28.000000000000004% coverage ] ****** [124 done /108 queued / 16 running / 123 errors / 28.000000000000004% coverage ] ****** [125 done /109 queued / 16 running / 124 errors / 28.000000000000004% coverage ] ****** [125 done /109 queued / 16 running / 124 errors / 28.000000000000004% coverage ] ****** [126 done /109 queued / 16 running / 125 errors / 28.000000000000004% coverage ] ****** [126 done /109 queued / 16 running / 125 errors / 28.000000000000004% coverage ] ****** [127 done /111 queued / 16 running / 126 errors / 28.000000000000004% coverage ] ****** [127 done /111 queued / 16 running / 126 errors / 28.000000000000004% coverage ] ****** [128 done /112 queued / 16 running / 127 errors / 28.000000000000004% coverage ] ****** [128 done /112 queued / 16 running / 127 errors / 28.000000000000004% coverage ] ****** [129 done /113 queued / 16 running / 128 errors / 28.000000000000004% coverage ] ****** [129 done /113 queued / 16 running / 128 errors / 28.000000000000004% coverage ] ****** [130 done /113 queued / 16 running / 129 errors / 28.000000000000004% coverage ] ****** [130 done /113 queued / 16 running / 129 errors / 28.000000000000004% coverage ] ****** [131 done /114 queued / 16 running / 130 errors / 28.000000000000004% coverage ] ****** [131 done /114 queued / 16 running / 130 errors / 28.000000000000004% coverage ] ****** [132 done /115 queued / 16 running / 131 errors / 28.000000000000004% coverage ] ****** [132 done /115 queued / 16 running / 131 errors / 28.000000000000004% coverage ] ****** [133 done /116 queued / 16 running / 132 errors / 28.000000000000004% coverage ] ****** [133 done /116 queued / 16 running / 132 errors / 28.000000000000004% coverage ] ****** [134 done /116 queued / 16 running / 133 errors / 28.000000000000004% coverage ] ****** [134 done /116 queued / 16 running / 133 errors / 28.000000000000004% coverage ] ****** [135 done /118 queued / 16 running / 134 errors / 28.000000000000004% coverage ] ****** [135 done /118 queued / 16 running / 134 errors / 28.000000000000004% coverage ] ****** [136 done /118 queued / 16 running / 135 errors / 28.000000000000004% coverage ] ****** [136 done /118 queued / 16 running / 135 errors / 28.000000000000004% coverage ] ****** [137 done /121 queued / 16 running / 136 errors / 28.000000000000004% coverage ] ****** [137 done /121 queued / 16 running / 136 errors / 28.000000000000004% coverage ] ****** [138 done /122 queued / 16 running / 137 errors / 28.000000000000004% coverage ] ****** [138 done /122 queued / 16 running / 137 errors / 28.000000000000004% coverage ] ****** [139 done /123 queued / 16 running / 138 errors / 28.000000000000004% coverage ] ****** [139 done /123 queued / 16 running / 138 errors / 28.000000000000004% coverage ] ****** [140 done /123 queued / 16 running / 139 errors / 28.000000000000004% coverage ] ****** [140 done /123 queued / 16 running / 139 errors / 28.000000000000004% coverage ] ****** [141 done /125 queued / 16 running / 140 errors / 28.000000000000004% coverage ] ****** [141 done /125 queued / 16 running / 140 errors / 28.000000000000004% coverage ] ****** [142 done /125 queued / 16 running / 141 errors / 28.000000000000004% coverage ] ****** [142 done /125 queued / 16 running / 141 errors / 28.000000000000004% coverage ] ****** [143 done /126 queued / 16 running / 142 errors / 28.000000000000004% coverage ] ****** [143 done /126 queued / 16 running / 142 errors / 28.000000000000004% coverage ] ****** [144 done /129 queued / 16 running / 143 errors / 28.000000000000004% coverage ] ****** [144 done /129 queued / 16 running / 143 errors / 28.000000000000004% coverage ] ****** [145 done /129 queued / 16 running / 144 errors / 28.000000000000004% coverage ] ****** [145 done /129 queued / 16 running / 144 errors / 28.000000000000004% coverage ] ****** [146 done /130 queued / 16 running / 145 errors / 28.000000000000004% coverage ] ****** [146 done /130 queued / 16 running / 145 errors / 28.000000000000004% coverage ] ****** [147 done /131 queued / 16 running / 146 errors / 28.000000000000004% coverage ] ****** [147 done /131 queued / 16 running / 146 errors / 28.000000000000004% coverage ] ****** [148 done /132 queued / 16 running / 147 errors / 28.000000000000004% coverage ] ****** [148 done /132 queued / 16 running / 147 errors / 28.000000000000004% coverage ] ****** [149 done /132 queued / 16 running / 148 errors / 28.000000000000004% coverage ] ****** [149 done /132 queued / 16 running / 148 errors / 28.000000000000004% coverage ] ****** [150 done /133 queued / 16 running / 149 errors / 28.000000000000004% coverage ] ****** [150 done /133 queued / 16 running / 149 errors / 28.000000000000004% coverage ] ****** [151 done /134 queued / 16 running / 150 errors / 28.000000000000004% coverage ] ****** [151 done /134 queued / 16 running / 150 errors / 28.000000000000004% coverage ] ****** [152 done /135 queued / 16 running / 151 errors / 28.000000000000004% coverage ] ****** [152 done /135 queued / 16 running / 151 errors / 28.000000000000004% coverage ] ****** [153 done /136 queued / 16 running / 152 errors / 28.000000000000004% coverage ] ****** [153 done /136 queued / 16 running / 152 errors / 28.000000000000004% coverage ] ****** [154 done /136 queued / 16 running / 153 errors / 28.000000000000004% coverage ] ****** [154 done /136 queued / 16 running / 153 errors / 28.000000000000004% coverage ] ****** [155 done /137 queued / 16 running / 154 errors / 28.000000000000004% coverage ] ****** [155 done /137 queued / 16 running / 154 errors / 28.000000000000004% coverage ] ****** [156 done /138 queued / 16 running / 155 errors / 28.000000000000004% coverage ] ****** [156 done /138 queued / 16 running / 155 errors / 28.000000000000004% coverage ] ****** [157 done /138 queued / 16 running / 156 errors / 28.000000000000004% coverage ] ****** [157 done /138 queued / 16 running / 156 errors / 28.000000000000004% coverage ] ****** [158 done /140 queued / 16 running / 157 errors / 28.000000000000004% coverage ] ****** [158 done /140 queued / 16 running / 157 errors / 28.000000000000004% coverage ] ****** [159 done /142 queued / 16 running / 158 errors / 28.000000000000004% coverage ] ****** [159 done /142 queued / 16 running / 158 errors / 28.000000000000004% coverage ] ****** [160 done /143 queued / 16 running / 159 errors / 28.000000000000004% coverage ] ****** [160 done /143 queued / 16 running / 159 errors / 28.000000000000004% coverage ] ****** [161 done /144 queued / 16 running / 160 errors / 28.000000000000004% coverage ] ****** [161 done /144 queued / 16 running / 160 errors / 28.000000000000004% coverage ] ****** [162 done /145 queued / 16 running / 161 errors / 28.000000000000004% coverage ] ****** [162 done /145 queued / 16 running / 161 errors / 28.000000000000004% coverage ] ****** [163 done /146 queued / 16 running / 162 errors / 28.000000000000004% coverage ] ****** [163 done /146 queued / 16 running / 162 errors / 28.000000000000004% coverage ] ****** [164 done /147 queued / 16 running / 163 errors / 28.000000000000004% coverage ] ****** [164 done /147 queued / 16 running / 163 errors / 28.000000000000004% coverage ] ****** [165 done /150 queued / 16 running / 164 errors / 28.000000000000004% coverage ] ****** [165 done /150 queued / 16 running / 164 errors / 28.000000000000004% coverage ] ****** [166 done /151 queued / 16 running / 165 errors / 28.000000000000004% coverage ] ****** [166 done /151 queued / 16 running / 165 errors / 28.000000000000004% coverage ] ****** [167 done /152 queued / 16 running / 166 errors / 28.000000000000004% coverage ] ****** [167 done /152 queued / 16 running / 166 errors / 28.000000000000004% coverage ] ****** [168 done /153 queued / 16 running / 167 errors / 28.000000000000004% coverage ] ****** [168 done /153 queued / 16 running / 167 errors / 28.000000000000004% coverage ] ****** [169 done /154 queued / 16 running / 168 errors / 28.000000000000004% coverage ] ****** [169 done /154 queued / 16 running / 168 errors / 28.000000000000004% coverage ] ****** [170 done /155 queued / 16 running / 169 errors / 28.000000000000004% coverage ] ****** [170 done /155 queued / 16 running / 169 errors / 28.000000000000004% coverage ] ****** [171 done /157 queued / 16 running / 170 errors / 28.000000000000004% coverage ] ****** [171 done /157 queued / 16 running / 170 errors / 28.000000000000004% coverage ] ****** [172 done /158 queued / 16 running / 171 errors / 28.000000000000004% coverage ] ****** [172 done /158 queued / 16 running / 171 errors / 28.000000000000004% coverage ] ****** [173 done /159 queued / 16 running / 172 errors / 28.000000000000004% coverage ] ****** [173 done /159 queued / 16 running / 172 errors / 28.000000000000004% coverage ] ****** [174 done /160 queued / 16 running / 173 errors / 28.000000000000004% coverage ] ****** [174 done /160 queued / 16 running / 173 errors / 28.000000000000004% coverage ] ****** [175 done /162 queued / 16 running / 174 errors / 28.000000000000004% coverage ] ****** [175 done /162 queued / 16 running / 174 errors / 28.000000000000004% coverage ] ****** [176 done /163 queued / 16 running / 175 errors / 28.000000000000004% coverage ] ****** [176 done /163 queued / 16 running / 175 errors / 28.000000000000004% coverage ] ****** [177 done /163 queued / 16 running / 176 errors / 28.000000000000004% coverage ] ****** [177 done /163 queued / 16 running / 176 errors / 28.000000000000004% coverage ] ****** [178 done /164 queued / 16 running / 177 errors / 28.000000000000004% coverage ] ****** [178 done /164 queued / 16 running / 177 errors / 28.000000000000004% coverage ] ****** [179 done /164 queued / 16 running / 178 errors / 28.000000000000004% coverage ] ****** [179 done /164 queued / 16 running / 178 errors / 28.000000000000004% coverage ] ****** [180 done /167 queued / 16 running / 179 errors / 28.000000000000004% coverage ] ****** [180 done /167 queued / 16 running / 179 errors / 28.000000000000004% coverage ] ****** [181 done /168 queued / 16 running / 180 errors / 28.000000000000004% coverage ] ****** [181 done /168 queued / 16 running / 180 errors / 28.000000000000004% coverage ] ****** [182 done /172 queued / 16 running / 181 errors / 28.000000000000004% coverage ] ****** [182 done /172 queued / 16 running / 181 errors / 28.000000000000004% coverage ] ****** [183 done /172 queued / 16 running / 182 errors / 28.000000000000004% coverage ] ****** [183 done /172 queued / 16 running / 182 errors / 28.000000000000004% coverage ] ****** [184 done /172 queued / 16 running / 183 errors / 28.000000000000004% coverage ] ****** [184 done /172 queued / 16 running / 183 errors / 28.000000000000004% coverage ] ****** [185 done /173 queued / 16 running / 184 errors / 28.000000000000004% coverage ] ****** [185 done /173 queued / 16 running / 184 errors / 28.000000000000004% coverage ] ****** [186 done /174 queued / 16 running / 185 errors / 28.000000000000004% coverage ] ****** [186 done /174 queued / 16 running / 185 errors / 28.000000000000004% coverage ] ****** [187 done /178 queued / 16 running / 186 errors / 28.000000000000004% coverage ] ****** [187 done /178 queued / 16 running / 186 errors / 28.000000000000004% coverage ] ****** [188 done /180 queued / 16 running / 187 errors / 28.000000000000004% coverage ] ****** [188 done /180 queued / 16 running / 187 errors / 28.000000000000004% coverage ] ****** [189 done /182 queued / 16 running / 188 errors / 28.000000000000004% coverage ] ****** [189 done /182 queued / 16 running / 188 errors / 28.000000000000004% coverage ] ****** [190 done /184 queued / 16 running / 189 errors / 28.000000000000004% coverage ] ****** [190 done /184 queued / 16 running / 189 errors / 28.000000000000004% coverage ] ****** [191 done /188 queued / 16 running / 190 errors / 28.000000000000004% coverage ] ****** [191 done /188 queued / 16 running / 190 errors / 28.000000000000004% coverage ] ****** [192 done /189 queued / 16 running / 191 errors / 28.000000000000004% coverage ] ****** [192 done /189 queued / 16 running / 191 errors / 28.000000000000004% coverage ] ****** [193 done /190 queued / 16 running / 192 errors / 28.000000000000004% coverage ] ****** [193 done /190 queued / 16 running / 192 errors / 28.000000000000004% coverage ] ****** [194 done /190 queued / 16 running / 193 errors / 28.000000000000004% coverage ] ****** [194 done /190 queued / 16 running / 193 errors / 28.000000000000004% coverage ] ****** [195 done /191 queued / 16 running / 194 errors / 28.000000000000004% coverage ] ****** [195 done /191 queued / 16 running / 194 errors / 28.000000000000004% coverage ] ****** [196 done /192 queued / 16 running / 195 errors / 28.000000000000004% coverage ] ****** [196 done /192 queued / 16 running / 195 errors / 28.000000000000004% coverage ] ****** [197 done /193 queued / 16 running / 196 errors / 28.000000000000004% coverage ] ****** [197 done /193 queued / 16 running / 196 errors / 28.000000000000004% coverage ] ****** [198 done /193 queued / 16 running / 197 errors / 28.000000000000004% coverage ] ****** [198 done /193 queued / 16 running / 197 errors / 28.000000000000004% coverage ] ****** [199 done /193 queued / 16 running / 198 errors / 28.000000000000004% coverage ] ****** [199 done /193 queued / 16 running / 198 errors / 28.000000000000004% coverage ] ****** [200 done /195 queued / 16 running / 199 errors / 28.000000000000004% coverage ] ****** [200 done /195 queued / 16 running / 199 errors / 28.000000000000004% coverage ] ****** [201 done /196 queued / 16 running / 200 errors / 28.000000000000004% coverage ] ****** [201 done /196 queued / 16 running / 200 errors / 28.000000000000004% coverage ] ****** [202 done /196 queued / 16 running / 201 errors / 28.000000000000004% coverage ] ****** [202 done /196 queued / 16 running / 201 errors / 28.000000000000004% coverage ] ****** [203 done /196 queued / 16 running / 202 errors / 28.000000000000004% coverage ] ****** [203 done /196 queued / 16 running / 202 errors / 28.000000000000004% coverage ] ****** [204 done /196 queued / 16 running / 203 errors / 28.000000000000004% coverage ] ****** [204 done /196 queued / 16 running / 203 errors / 28.000000000000004% coverage ] ****** [205 done /197 queued / 16 running / 204 errors / 28.000000000000004% coverage ] ****** [205 done /197 queued / 16 running / 204 errors / 28.000000000000004% coverage ] ****** [206 done /198 queued / 16 running / 205 errors / 28.000000000000004% coverage ] ****** [206 done /198 queued / 16 running / 205 errors / 28.000000000000004% coverage ] ****** [207 done /199 queued / 16 running / 206 errors / 28.000000000000004% coverage ] ****** [207 done /199 queued / 16 running / 206 errors / 28.000000000000004% coverage ] ****** [208 done /199 queued / 16 running / 207 errors / 28.000000000000004% coverage ] ****** [208 done /199 queued / 16 running / 207 errors / 28.000000000000004% coverage ] ****** [209 done /199 queued / 16 running / 208 errors / 28.000000000000004% coverage ] ****** [209 done /199 queued / 16 running / 208 errors / 28.000000000000004% coverage ] ****** [210 done /199 queued / 16 running / 209 errors / 28.000000000000004% coverage ] ****** [210 done /199 queued / 16 running / 209 errors / 28.000000000000004% coverage ] ****** [211 done /200 queued / 16 running / 210 errors / 28.000000000000004% coverage ] ****** [211 done /200 queued / 16 running / 210 errors / 28.000000000000004% coverage ] ****** [212 done /200 queued / 16 running / 211 errors / 28.000000000000004% coverage ] ****** [212 done /200 queued / 16 running / 211 errors / 28.000000000000004% coverage ] ****** [213 done /200 queued / 16 running / 212 errors / 28.000000000000004% coverage ] ****** [213 done /200 queued / 16 running / 212 errors / 28.000000000000004% coverage ] ****** [214 done /201 queued / 16 running / 213 errors / 28.000000000000004% coverage ] ****** [214 done /201 queued / 16 running / 213 errors / 28.000000000000004% coverage ] ****** [215 done /202 queued / 16 running / 214 errors / 28.000000000000004% coverage ] ****** [215 done /202 queued / 16 running / 214 errors / 28.000000000000004% coverage ] ****** [216 done /202 queued / 16 running / 215 errors / 28.000000000000004% coverage ] ****** [216 done /202 queued / 16 running / 215 errors / 28.000000000000004% coverage ] ****** [217 done /203 queued / 16 running / 216 errors / 28.000000000000004% coverage ] ****** [217 done /203 queued / 16 running / 216 errors / 28.000000000000004% coverage ] ****** [218 done /203 queued / 16 running / 217 errors / 28.000000000000004% coverage ] ****** [218 done /203 queued / 16 running / 217 errors / 28.000000000000004% coverage ] ****** [219 done /205 queued / 16 running / 218 errors / 28.000000000000004% coverage ] ****** [219 done /205 queued / 16 running / 218 errors / 28.000000000000004% coverage ] ****** [220 done /206 queued / 16 running / 219 errors / 28.000000000000004% coverage ] ****** [220 done /206 queued / 16 running / 219 errors / 28.000000000000004% coverage ] ****** [221 done /206 queued / 16 running / 220 errors / 28.000000000000004% coverage ] ****** [221 done /206 queued / 16 running / 220 errors / 28.000000000000004% coverage ] ****** [222 done /208 queued / 16 running / 221 errors / 28.000000000000004% coverage ] ****** [222 done /208 queued / 16 running / 221 errors / 28.000000000000004% coverage ] ****** [223 done /210 queued / 16 running / 222 errors / 28.000000000000004% coverage ] ****** [223 done /210 queued / 16 running / 222 errors / 28.000000000000004% coverage ] ****** [224 done /212 queued / 16 running / 223 errors / 28.000000000000004% coverage ] ****** [224 done /212 queued / 16 running / 223 errors / 28.000000000000004% coverage ] ****** [225 done /213 queued / 16 running / 224 errors / 28.000000000000004% coverage ] ****** [225 done /213 queued / 16 running / 224 errors / 28.000000000000004% coverage ] ****** [226 done /216 queued / 16 running / 225 errors / 28.000000000000004% coverage ] ****** [226 done /216 queued / 16 running / 225 errors / 28.000000000000004% coverage ] ****** [227 done /220 queued / 16 running / 226 errors / 28.000000000000004% coverage ] ****** [227 done /220 queued / 16 running / 226 errors / 28.000000000000004% coverage ] ****** [228 done /221 queued / 16 running / 227 errors / 28.000000000000004% coverage ] ****** [228 done /221 queued / 16 running / 227 errors / 28.000000000000004% coverage ] ****** [229 done /222 queued / 16 running / 228 errors / 28.000000000000004% coverage ] ****** [229 done /222 queued / 16 running / 228 errors / 28.000000000000004% coverage ] ****** [230 done /223 queued / 16 running / 229 errors / 28.000000000000004% coverage ] ****** [230 done /223 queued / 16 running / 229 errors / 28.000000000000004% coverage ] ****** [231 done /224 queued / 16 running / 230 errors / 28.000000000000004% coverage ] ****** [231 done /224 queued / 16 running / 230 errors / 28.000000000000004% coverage ] ****** [232 done /225 queued / 16 running / 231 errors / 28.000000000000004% coverage ] ****** [232 done /225 queued / 16 running / 231 errors / 28.000000000000004% coverage ] ****** [233 done /227 queued / 16 running / 232 errors / 28.000000000000004% coverage ] ****** [233 done /227 queued / 16 running / 232 errors / 28.000000000000004% coverage ] ****** [234 done /228 queued / 16 running / 233 errors / 28.000000000000004% coverage ] ****** [234 done /228 queued / 16 running / 233 errors / 28.000000000000004% coverage ] ****** [235 done /230 queued / 16 running / 234 errors / 28.000000000000004% coverage ] ****** [235 done /230 queued / 16 running / 234 errors / 28.000000000000004% coverage ] ****** [236 done /232 queued / 16 running / 235 errors / 28.000000000000004% coverage ] ****** [236 done /232 queued / 16 running / 235 errors / 28.000000000000004% coverage ] ****** [237 done /233 queued / 16 running / 236 errors / 28.000000000000004% coverage ] ****** [237 done /233 queued / 16 running / 236 errors / 28.000000000000004% coverage ] ****** [238 done /233 queued / 16 running / 237 errors / 28.000000000000004% coverage ] ****** [238 done /233 queued / 16 running / 237 errors / 28.000000000000004% coverage ] ****** [239 done /234 queued / 16 running / 238 errors / 28.000000000000004% coverage ] ****** [239 done /234 queued / 16 running / 238 errors / 28.000000000000004% coverage ] ****** [240 done /234 queued / 16 running / 239 errors / 28.000000000000004% coverage ] ****** [240 done /234 queued / 16 running / 239 errors / 28.000000000000004% coverage ] ****** [241 done /235 queued / 16 running / 240 errors / 28.000000000000004% coverage ] ****** [241 done /235 queued / 16 running / 240 errors / 28.000000000000004% coverage ] ****** [242 done /235 queued / 16 running / 241 errors / 28.000000000000004% coverage ] ****** [242 done /235 queued / 16 running / 241 errors / 28.000000000000004% coverage ] ****** [243 done /235 queued / 16 running / 242 errors / 28.000000000000004% coverage ] ****** [243 done /235 queued / 16 running / 242 errors / 28.000000000000004% coverage ] ****** [244 done /236 queued / 16 running / 243 errors / 28.000000000000004% coverage ] ****** [244 done /236 queued / 16 running / 243 errors / 28.000000000000004% coverage ] ****** [245 done /237 queued / 16 running / 244 errors / 28.000000000000004% coverage ] ****** [245 done /237 queued / 16 running / 244 errors / 28.000000000000004% coverage ] ****** [246 done /237 queued / 16 running / 245 errors / 28.000000000000004% coverage ] ****** [246 done /237 queued / 16 running / 245 errors / 28.000000000000004% coverage ] ****** [247 done /237 queued / 16 running / 246 errors / 28.000000000000004% coverage ] ****** [247 done /237 queued / 16 running / 246 errors / 28.000000000000004% coverage ] ****** [248 done /237 queued / 16 running / 247 errors / 28.000000000000004% coverage ] ****** [248 done /237 queued / 16 running / 247 errors / 28.000000000000004% coverage ] ****** [249 done /237 queued / 16 running / 248 errors / 28.000000000000004% coverage ] ****** [249 done /237 queued / 16 running / 248 errors / 28.000000000000004% coverage ] ****** [250 done /237 queued / 16 running / 249 errors / 28.000000000000004% coverage ] ****** [250 done /237 queued / 16 running / 249 errors / 28.000000000000004% coverage ] ****** [251 done /238 queued / 16 running / 250 errors / 28.000000000000004% coverage ] ****** [251 done /238 queued / 16 running / 250 errors / 28.000000000000004% coverage ] ****** [252 done /239 queued / 16 running / 251 errors / 28.000000000000004% coverage ] ****** [252 done /239 queued / 16 running / 251 errors / 28.000000000000004% coverage ] ****** [253 done /243 queued / 16 running / 252 errors / 28.000000000000004% coverage ] ****** [253 done /243 queued / 16 running / 252 errors / 28.000000000000004% coverage ] ****** [254 done /244 queued / 16 running / 253 errors / 28.000000000000004% coverage ] ****** [254 done /244 queued / 16 running / 253 errors / 28.000000000000004% coverage ] ****** [255 done /248 queued / 16 running / 254 errors / 28.000000000000004% coverage ] ****** [255 done /248 queued / 16 running / 254 errors / 28.000000000000004% coverage ] ****** [256 done /249 queued / 16 running / 255 errors / 28.000000000000004% coverage ] ****** [256 done /249 queued / 16 running / 255 errors / 28.000000000000004% coverage ] ****** [257 done /250 queued / 16 running / 256 errors / 28.000000000000004% coverage ] ****** [257 done /250 queued / 16 running / 256 errors / 28.000000000000004% coverage ] ****** [258 done /250 queued / 16 running / 257 errors / 28.000000000000004% coverage ] ****** [258 done /250 queued / 16 running / 257 errors / 28.000000000000004% coverage ] ****** [259 done /250 queued / 16 running / 258 errors / 28.000000000000004% coverage ] ****** [259 done /250 queued / 16 running / 258 errors / 28.000000000000004% coverage ] ****** [260 done /251 queued / 16 running / 259 errors / 28.000000000000004% coverage ] ****** [260 done /251 queued / 16 running / 259 errors / 28.000000000000004% coverage ] ****** [261 done /255 queued / 16 running / 260 errors / 28.000000000000004% coverage ] ****** [261 done /255 queued / 16 running / 260 errors / 28.000000000000004% coverage ] ****** [262 done /259 queued / 16 running / 261 errors / 28.000000000000004% coverage ] ****** [262 done /259 queued / 16 running / 261 errors / 28.000000000000004% coverage ] ****** [263 done /261 queued / 16 running / 262 errors / 28.000000000000004% coverage ] ****** [263 done /261 queued / 16 running / 262 errors / 28.000000000000004% coverage ] ****** [264 done /265 queued / 16 running / 263 errors / 28.000000000000004% coverage ] ****** [264 done /265 queued / 16 running / 263 errors / 28.000000000000004% coverage ] ****** [265 done /266 queued / 16 running / 264 errors / 28.000000000000004% coverage ] ****** [265 done /266 queued / 16 running / 264 errors / 28.000000000000004% coverage ] ****** [266 done /268 queued / 16 running / 265 errors / 28.000000000000004% coverage ] ****** [266 done /268 queued / 16 running / 265 errors / 28.000000000000004% coverage ] ****** [267 done /269 queued / 16 running / 266 errors / 28.000000000000004% coverage ] ****** [267 done /269 queued / 16 running / 266 errors / 28.000000000000004% coverage ] ****** [268 done /270 queued / 16 running / 267 errors / 28.000000000000004% coverage ] ****** [268 done /270 queued / 16 running / 267 errors / 28.000000000000004% coverage ] ****** [269 done /271 queued / 16 running / 268 errors / 28.000000000000004% coverage ] ****** [269 done /271 queued / 16 running / 268 errors / 28.000000000000004% coverage ] ****** [270 done /271 queued / 16 running / 269 errors / 28.000000000000004% coverage ] ****** [270 done /271 queued / 16 running / 269 errors / 28.000000000000004% coverage ] ****** [271 done /271 queued / 16 running / 270 errors / 28.000000000000004% coverage ] ****** [271 done /271 queued / 16 running / 270 errors / 28.000000000000004% coverage ] ****** [272 done /272 queued / 16 running / 271 errors / 28.000000000000004% coverage ] ****** [272 done /272 queued / 16 running / 271 errors / 28.000000000000004% coverage ] ****** [273 done /272 queued / 16 running / 272 errors / 28.000000000000004% coverage ] ****** [273 done /272 queued / 16 running / 272 errors / 28.000000000000004% coverage ] ****** [274 done /273 queued / 16 running / 273 errors / 28.000000000000004% coverage ] ****** [274 done /273 queued / 16 running / 273 errors / 28.000000000000004% coverage ] ****** [275 done /273 queued / 16 running / 274 errors / 28.000000000000004% coverage ] ****** [275 done /273 queued / 16 running / 274 errors / 28.000000000000004% coverage ] ****** [276 done /273 queued / 16 running / 275 errors / 28.000000000000004% coverage ] ****** [276 done /273 queued / 16 running / 275 errors / 28.000000000000004% coverage ] ****** [277 done /274 queued / 16 running / 276 errors / 28.000000000000004% coverage ] ****** [277 done /274 queued / 16 running / 276 errors / 28.000000000000004% coverage ] ****** [278 done /274 queued / 16 running / 277 errors / 28.000000000000004% coverage ] ****** [278 done /274 queued / 16 running / 277 errors / 28.000000000000004% coverage ] ****** [279 done /277 queued / 16 running / 278 errors / 28.000000000000004% coverage ] ****** [279 done /277 queued / 16 running / 278 errors / 28.000000000000004% coverage ] ****** [280 done /277 queued / 16 running / 279 errors / 28.000000000000004% coverage ] ****** [280 done /277 queued / 16 running / 279 errors / 28.000000000000004% coverage ] ****** [281 done /277 queued / 16 running / 280 errors / 28.000000000000004% coverage ] ****** [281 done /277 queued / 16 running / 280 errors / 28.000000000000004% coverage ] ****** [282 done /277 queued / 16 running / 281 errors / 28.000000000000004% coverage ] ****** [282 done /277 queued / 16 running / 281 errors / 28.000000000000004% coverage ] ****** [283 done /279 queued / 16 running / 282 errors / 28.000000000000004% coverage ] ****** [283 done /279 queued / 16 running / 282 errors / 28.000000000000004% coverage ] ****** [284 done /279 queued / 16 running / 283 errors / 28.000000000000004% coverage ] ****** [284 done /279 queued / 16 running / 283 errors / 28.000000000000004% coverage ] ****** [285 done /279 queued / 16 running / 284 errors / 28.000000000000004% coverage ] ****** [285 done /279 queued / 16 running / 284 errors / 28.000000000000004% coverage ] ****** [286 done /280 queued / 16 running / 285 errors / 28.000000000000004% coverage ] ****** [286 done /280 queued / 16 running / 285 errors / 28.000000000000004% coverage ] ****** [287 done /281 queued / 16 running / 286 errors / 28.000000000000004% coverage ] ****** [287 done /281 queued / 16 running / 286 errors / 28.000000000000004% coverage ] ****** [288 done /283 queued / 16 running / 287 errors / 28.000000000000004% coverage ] ****** [288 done /283 queued / 16 running / 287 errors / 28.000000000000004% coverage ] ****** [289 done /283 queued / 16 running / 288 errors / 28.000000000000004% coverage ] ****** [289 done /283 queued / 16 running / 288 errors / 28.000000000000004% coverage ] ****** [290 done /283 queued / 16 running / 289 errors / 28.000000000000004% coverage ] ****** [290 done /283 queued / 16 running / 289 errors / 28.000000000000004% coverage ] ****** [291 done /288 queued / 16 running / 290 errors / 28.000000000000004% coverage ] ****** [291 done /288 queued / 16 running / 290 errors / 28.000000000000004% coverage ] ****** [292 done /289 queued / 16 running / 291 errors / 28.000000000000004% coverage ] ****** [292 done /289 queued / 16 running / 291 errors / 28.000000000000004% coverage ] ****** [293 done /290 queued / 16 running / 292 errors / 28.000000000000004% coverage ] ****** [293 done /290 queued / 16 running / 292 errors / 28.000000000000004% coverage ] ****** [294 done /291 queued / 16 running / 293 errors / 28.000000000000004% coverage ] ****** [294 done /291 queued / 16 running / 293 errors / 28.000000000000004% coverage ] ****** [295 done /292 queued / 16 running / 294 errors / 28.000000000000004% coverage ] ****** [295 done /292 queued / 16 running / 294 errors / 28.000000000000004% coverage ] ****** [296 done /294 queued / 16 running / 295 errors / 28.000000000000004% coverage ] ****** [296 done /294 queued / 16 running / 295 errors / 28.000000000000004% coverage ] ****** [297 done /296 queued / 16 running / 296 errors / 28.000000000000004% coverage ] ****** [297 done /296 queued / 16 running / 296 errors / 28.000000000000004% coverage ] ****** [298 done /296 queued / 16 running / 297 errors / 28.000000000000004% coverage ] ****** [298 done /296 queued / 16 running / 297 errors / 28.000000000000004% coverage ] ****** [299 done /297 queued / 16 running / 298 errors / 28.000000000000004% coverage ] ****** [299 done /297 queued / 16 running / 298 errors / 28.000000000000004% coverage ] ****** [300 done /297 queued / 16 running / 299 errors / 28.000000000000004% coverage ] ****** [300 done /297 queued / 16 running / 299 errors / 28.000000000000004% coverage ] ****** [301 done /298 queued / 16 running / 300 errors / 28.000000000000004% coverage ] ****** [301 done /298 queued / 16 running / 300 errors / 28.000000000000004% coverage ] ****** [302 done /302 queued / 16 running / 301 errors / 28.000000000000004% coverage ] ****** [302 done /302 queued / 16 running / 301 errors / 28.000000000000004% coverage ] ****** [303 done /303 queued / 16 running / 302 errors / 28.000000000000004% coverage ] ****** [303 done /303 queued / 16 running / 302 errors / 28.000000000000004% coverage ] ****** [304 done /304 queued / 16 running / 303 errors / 28.000000000000004% coverage ] ****** [304 done /304 queued / 16 running / 303 errors / 28.000000000000004% coverage ] ****** [305 done /305 queued / 16 running / 304 errors / 28.000000000000004% coverage ] ****** [305 done /305 queued / 16 running / 304 errors / 28.000000000000004% coverage ] ****** [306 done /305 queued / 16 running / 305 errors / 28.000000000000004% coverage ] ****** [306 done /305 queued / 16 running / 305 errors / 28.000000000000004% coverage ] ****** [307 done /306 queued / 16 running / 306 errors / 28.000000000000004% coverage ] ****** [307 done /306 queued / 16 running / 306 errors / 28.000000000000004% coverage ] ****** [308 done /308 queued / 16 running / 307 errors / 28.000000000000004% coverage ] ****** [308 done /308 queued / 16 running / 307 errors / 28.000000000000004% coverage ] ****** [309 done /309 queued / 16 running / 308 errors / 28.000000000000004% coverage ] ****** [309 done /309 queued / 16 running / 308 errors / 28.000000000000004% coverage ] ****** [310 done /310 queued / 16 running / 309 errors / 28.000000000000004% coverage ] ****** [310 done /310 queued / 16 running / 309 errors / 28.000000000000004% coverage ] ****** [311 done /313 queued / 16 running / 310 errors / 28.000000000000004% coverage ] ****** [311 done /313 queued / 16 running / 310 errors / 28.000000000000004% coverage ] ****** [312 done /315 queued / 16 running / 311 errors / 28.000000000000004% coverage ] ****** [312 done /315 queued / 16 running / 311 errors / 28.000000000000004% coverage ] ****** [313 done /316 queued / 16 running / 312 errors / 28.000000000000004% coverage ] ****** [313 done /316 queued / 16 running / 312 errors / 28.000000000000004% coverage ] ****** [314 done /321 queued / 16 running / 313 errors / 28.000000000000004% coverage ] ****** [314 done /321 queued / 16 running / 313 errors / 28.000000000000004% coverage ] ****** [315 done /322 queued / 16 running / 314 errors / 28.000000000000004% coverage ] ****** [315 done /322 queued / 16 running / 314 errors / 28.000000000000004% coverage ] ****** [316 done /326 queued / 16 running / 315 errors / 28.000000000000004% coverage ] ****** [316 done /326 queued / 16 running / 315 errors / 28.000000000000004% coverage ] ****** [317 done /327 queued / 16 running / 316 errors / 28.000000000000004% coverage ] ****** [317 done /327 queued / 16 running / 316 errors / 28.000000000000004% coverage ] ****** [318 done /327 queued / 16 running / 317 errors / 28.000000000000004% coverage ] ****** [318 done /327 queued / 16 running / 317 errors / 28.000000000000004% coverage ] ****** [319 done /328 queued / 16 running / 318 errors / 28.000000000000004% coverage ] ****** [319 done /328 queued / 16 running / 318 errors / 28.000000000000004% coverage ] ****** [320 done /328 queued / 16 running / 319 errors / 28.000000000000004% coverage ] ****** [320 done /328 queued / 16 running / 319 errors / 28.000000000000004% coverage ] ****** [321 done /332 queued / 16 running / 320 errors / 28.000000000000004% coverage ] ****** [321 done /332 queued / 16 running / 320 errors / 28.000000000000004% coverage ] ****** [322 done /334 queued / 16 running / 321 errors / 28.000000000000004% coverage ] ****** [322 done /334 queued / 16 running / 321 errors / 28.000000000000004% coverage ] ****** [323 done /334 queued / 16 running / 322 errors / 28.000000000000004% coverage ] ****** [323 done /334 queued / 16 running / 322 errors / 28.000000000000004% coverage ] ****** [324 done /335 queued / 16 running / 323 errors / 28.000000000000004% coverage ] ****** [324 done /335 queued / 16 running / 323 errors / 28.000000000000004% coverage ] ****** [325 done /336 queued / 16 running / 324 errors / 28.000000000000004% coverage ] ****** [325 done /336 queued / 16 running / 324 errors / 28.000000000000004% coverage ] ****** [326 done /338 queued / 16 running / 325 errors / 28.000000000000004% coverage ] ****** [326 done /338 queued / 16 running / 325 errors / 28.000000000000004% coverage ] ****** [327 done /339 queued / 16 running / 326 errors / 28.000000000000004% coverage ] ****** [327 done /339 queued / 16 running / 326 errors / 28.000000000000004% coverage ] ****** [328 done /340 queued / 16 running / 327 errors / 28.000000000000004% coverage ] ****** [328 done /340 queued / 16 running / 327 errors / 28.000000000000004% coverage ] ****** [329 done /342 queued / 16 running / 328 errors / 28.000000000000004% coverage ] ****** [329 done /342 queued / 16 running / 328 errors / 28.000000000000004% coverage ] ****** [330 done /342 queued / 16 running / 329 errors / 28.000000000000004% coverage ] ****** [330 done /342 queued / 16 running / 329 errors / 28.000000000000004% coverage ] ****** [331 done /342 queued / 16 running / 330 errors / 28.000000000000004% coverage ] ****** [331 done /342 queued / 16 running / 330 errors / 28.000000000000004% coverage ] ****** [332 done /342 queued / 16 running / 331 errors / 28.000000000000004% coverage ] ****** [332 done /342 queued / 16 running / 331 errors / 28.000000000000004% coverage ] ****** [333 done /342 queued / 16 running / 332 errors / 28.000000000000004% coverage ] ****** [333 done /342 queued / 16 running / 332 errors / 28.000000000000004% coverage ] ****** [334 done /343 queued / 16 running / 333 errors / 28.000000000000004% coverage ] ****** [334 done /343 queued / 16 running / 333 errors / 28.000000000000004% coverage ] ****** [335 done /343 queued / 16 running / 334 errors / 28.000000000000004% coverage ] ****** [335 done /343 queued / 16 running / 334 errors / 28.000000000000004% coverage ] ****** [336 done /344 queued / 16 running / 335 errors / 28.000000000000004% coverage ] ****** [336 done /344 queued / 16 running / 335 errors / 28.000000000000004% coverage ] ****** [337 done /347 queued / 16 running / 336 errors / 28.000000000000004% coverage ] ****** [337 done /347 queued / 16 running / 336 errors / 28.000000000000004% coverage ] ****** [338 done /347 queued / 16 running / 337 errors / 28.000000000000004% coverage ] ****** [338 done /347 queued / 16 running / 337 errors / 28.000000000000004% coverage ] ****** [339 done /348 queued / 16 running / 338 errors / 28.000000000000004% coverage ] ****** [339 done /348 queued / 16 running / 338 errors / 28.000000000000004% coverage ] ****** [340 done /348 queued / 16 running / 339 errors / 28.000000000000004% coverage ] ****** [340 done /348 queued / 16 running / 339 errors / 28.000000000000004% coverage ] ****** [341 done /349 queued / 16 running / 340 errors / 28.000000000000004% coverage ] ****** [341 done /349 queued / 16 running / 340 errors / 28.000000000000004% coverage ] ****** [342 done /349 queued / 16 running / 341 errors / 28.000000000000004% coverage ] ****** [342 done /349 queued / 16 running / 341 errors / 28.000000000000004% coverage ] ****** [343 done /349 queued / 16 running / 342 errors / 28.000000000000004% coverage ] ****** [343 done /349 queued / 16 running / 342 errors / 28.000000000000004% coverage ] ****** [344 done /350 queued / 16 running / 343 errors / 28.000000000000004% coverage ] ****** [344 done /350 queued / 16 running / 343 errors / 28.000000000000004% coverage ] ****** [345 done /351 queued / 16 running / 344 errors / 28.000000000000004% coverage ] ****** [345 done /351 queued / 16 running / 344 errors / 28.000000000000004% coverage ] ****** [346 done /352 queued / 16 running / 345 errors / 28.000000000000004% coverage ] ****** [346 done /352 queued / 16 running / 345 errors / 28.000000000000004% coverage ] ****** [347 done /356 queued / 16 running / 346 errors / 28.000000000000004% coverage ] ****** [347 done /356 queued / 16 running / 346 errors / 28.000000000000004% coverage ] ****** [348 done /358 queued / 16 running / 347 errors / 28.000000000000004% coverage ] ****** [348 done /358 queued / 16 running / 347 errors / 28.000000000000004% coverage ] ****** [349 done /361 queued / 16 running / 348 errors / 28.000000000000004% coverage ] ****** [349 done /361 queued / 16 running / 348 errors / 28.000000000000004% coverage ] ****** [350 done /362 queued / 16 running / 349 errors / 28.000000000000004% coverage ] ****** [350 done /362 queued / 16 running / 349 errors / 28.000000000000004% coverage ] ****** [351 done /366 queued / 16 running / 350 errors / 28.000000000000004% coverage ] ****** [351 done /366 queued / 16 running / 350 errors / 28.000000000000004% coverage ] ****** [352 done /366 queued / 16 running / 351 errors / 28.000000000000004% coverage ] ****** [352 done /366 queued / 16 running / 351 errors / 28.000000000000004% coverage ] ****** [353 done /367 queued / 16 running / 352 errors / 28.000000000000004% coverage ] ****** [353 done /367 queued / 16 running / 352 errors / 28.000000000000004% coverage ] ****** [354 done /371 queued / 16 running / 353 errors / 28.000000000000004% coverage ] ****** [354 done /371 queued / 16 running / 353 errors / 28.000000000000004% coverage ] ****** [355 done /375 queued / 16 running / 354 errors / 28.000000000000004% coverage ] ****** [355 done /375 queued / 16 running / 354 errors / 28.000000000000004% coverage ] ****** [356 done /375 queued / 16 running / 355 errors / 28.000000000000004% coverage ] ****** [356 done /375 queued / 16 running / 355 errors / 28.000000000000004% coverage ] ****** [357 done /376 queued / 16 running / 356 errors / 28.000000000000004% coverage ] ****** [357 done /376 queued / 16 running / 356 errors / 28.000000000000004% coverage ] ****** [358 done /377 queued / 16 running / 357 errors / 28.000000000000004% coverage ] ****** [358 done /377 queued / 16 running / 357 errors / 28.000000000000004% coverage ] ****** [359 done /378 queued / 16 running / 358 errors / 28.000000000000004% coverage ] ****** [359 done /378 queued / 16 running / 358 errors / 28.000000000000004% coverage ] ****** [360 done /380 queued / 16 running / 359 errors / 28.000000000000004% coverage ] ****** [360 done /380 queued / 16 running / 359 errors / 28.000000000000004% coverage ] ****** [361 done /382 queued / 16 running / 360 errors / 28.000000000000004% coverage ] ****** [361 done /382 queued / 16 running / 360 errors / 28.000000000000004% coverage ] ****** [362 done /383 queued / 16 running / 361 errors / 28.000000000000004% coverage ] ****** [362 done /383 queued / 16 running / 361 errors / 28.000000000000004% coverage ] ****** [363 done /384 queued / 16 running / 362 errors / 28.000000000000004% coverage ] ****** [363 done /384 queued / 16 running / 362 errors / 28.000000000000004% coverage ] ****** [364 done /385 queued / 16 running / 363 errors / 28.000000000000004% coverage ] ****** [364 done /385 queued / 16 running / 363 errors / 28.000000000000004% coverage ] ****** [365 done /385 queued / 16 running / 364 errors / 28.000000000000004% coverage ] ****** [365 done /385 queued / 16 running / 364 errors / 28.000000000000004% coverage ] ****** [366 done /385 queued / 16 running / 365 errors / 28.000000000000004% coverage ] ****** [366 done /385 queued / 16 running / 365 errors / 28.000000000000004% coverage ] ****** [367 done /385 queued / 16 running / 366 errors / 28.000000000000004% coverage ] ****** [367 done /385 queued / 16 running / 366 errors / 28.000000000000004% coverage ] ****** [368 done /386 queued / 16 running / 367 errors / 28.000000000000004% coverage ] ****** [368 done /386 queued / 16 running / 367 errors / 28.000000000000004% coverage ] ****** [369 done /388 queued / 16 running / 368 errors / 28.000000000000004% coverage ] ****** [369 done /388 queued / 16 running / 368 errors / 28.000000000000004% coverage ] ****** [370 done /389 queued / 16 running / 369 errors / 28.000000000000004% coverage ] ****** [370 done /389 queued / 16 running / 369 errors / 28.000000000000004% coverage ] ****** [371 done /390 queued / 16 running / 370 errors / 28.000000000000004% coverage ] ****** [371 done /390 queued / 16 running / 370 errors / 28.000000000000004% coverage ] ****** [372 done /391 queued / 16 running / 371 errors / 28.000000000000004% coverage ] ****** [372 done /391 queued / 16 running / 371 errors / 28.000000000000004% coverage ] ****** [373 done /391 queued / 16 running / 372 errors / 28.000000000000004% coverage ] ****** [373 done /391 queued / 16 running / 372 errors / 28.000000000000004% coverage ] ****** [374 done /391 queued / 16 running / 373 errors / 28.000000000000004% coverage ] ****** [374 done /391 queued / 16 running / 373 errors / 28.000000000000004% coverage ] ****** [375 done /393 queued / 16 running / 374 errors / 28.000000000000004% coverage ] ****** [375 done /393 queued / 16 running / 374 errors / 28.000000000000004% coverage ] ****** [376 done /393 queued / 16 running / 375 errors / 28.000000000000004% coverage ] ****** [376 done /393 queued / 16 running / 375 errors / 28.000000000000004% coverage ] ****** [377 done /393 queued / 16 running / 376 errors / 28.000000000000004% coverage ] ****** [377 done /393 queued / 16 running / 376 errors / 28.000000000000004% coverage ] ****** [378 done /394 queued / 16 running / 377 errors / 28.000000000000004% coverage ] ****** [378 done /394 queued / 16 running / 377 errors / 28.000000000000004% coverage ] ****** [379 done /394 queued / 16 running / 378 errors / 28.000000000000004% coverage ] ****** [379 done /394 queued / 16 running / 378 errors / 28.000000000000004% coverage ] ****** [380 done /395 queued / 16 running / 379 errors / 28.000000000000004% coverage ] ****** [380 done /395 queued / 16 running / 379 errors / 28.000000000000004% coverage ] ****** [381 done /397 queued / 16 running / 380 errors / 28.000000000000004% coverage ] ****** [381 done /397 queued / 16 running / 380 errors / 28.000000000000004% coverage ] ****** [382 done /397 queued / 16 running / 381 errors / 28.000000000000004% coverage ] ****** [382 done /397 queued / 16 running / 381 errors / 28.000000000000004% coverage ] ****** [383 done /398 queued / 16 running / 382 errors / 28.000000000000004% coverage ] ****** [383 done /398 queued / 16 running / 382 errors / 28.000000000000004% coverage ] ****** [384 done /403 queued / 16 running / 383 errors / 28.000000000000004% coverage ] ****** [384 done /403 queued / 16 running / 383 errors / 28.000000000000004% coverage ] ****** [385 done /405 queued / 16 running / 384 errors / 28.000000000000004% coverage ] ****** [385 done /405 queued / 16 running / 384 errors / 28.000000000000004% coverage ] ****** [386 done /406 queued / 16 running / 385 errors / 28.000000000000004% coverage ] ****** [386 done /406 queued / 16 running / 385 errors / 28.000000000000004% coverage ] ****** [387 done /407 queued / 16 running / 386 errors / 28.000000000000004% coverage ] ****** [387 done /407 queued / 16 running / 386 errors / 28.000000000000004% coverage ] ****** [388 done /411 queued / 16 running / 387 errors / 28.000000000000004% coverage ] ****** [388 done /411 queued / 16 running / 387 errors / 28.000000000000004% coverage ] ****** [389 done /412 queued / 16 running / 388 errors / 28.000000000000004% coverage ] ****** [389 done /412 queued / 16 running / 388 errors / 28.000000000000004% coverage ] ****** [390 done /417 queued / 16 running / 389 errors / 28.000000000000004% coverage ] ****** [390 done /417 queued / 16 running / 389 errors / 28.000000000000004% coverage ] ****** [391 done /418 queued / 16 running / 390 errors / 28.000000000000004% coverage ] ****** [391 done /418 queued / 16 running / 390 errors / 28.000000000000004% coverage ] ****** [392 done /420 queued / 16 running / 391 errors / 28.000000000000004% coverage ] ****** [392 done /420 queued / 16 running / 391 errors / 28.000000000000004% coverage ] ****** [393 done /421 queued / 16 running / 392 errors / 28.000000000000004% coverage ] ****** [393 done /421 queued / 16 running / 392 errors / 28.000000000000004% coverage ] ****** [394 done /422 queued / 16 running / 393 errors / 28.000000000000004% coverage ] ****** [394 done /422 queued / 16 running / 393 errors / 28.000000000000004% coverage ] ****** [395 done /423 queued / 16 running / 394 errors / 28.000000000000004% coverage ] ****** [395 done /423 queued / 16 running / 394 errors / 28.000000000000004% coverage ] ****** [396 done /424 queued / 16 running / 395 errors / 28.000000000000004% coverage ] ****** [396 done /424 queued / 16 running / 395 errors / 28.000000000000004% coverage ] ****** [397 done /425 queued / 16 running / 396 errors / 28.000000000000004% coverage ] ****** [397 done /425 queued / 16 running / 396 errors / 28.000000000000004% coverage ] ****** [398 done /427 queued / 16 running / 397 errors / 28.000000000000004% coverage ] ****** [398 done /427 queued / 16 running / 397 errors / 28.000000000000004% coverage ] ****** [399 done /428 queued / 16 running / 398 errors / 28.000000000000004% coverage ] ****** [399 done /428 queued / 16 running / 398 errors / 28.000000000000004% coverage ] ****** [400 done /429 queued / 16 running / 399 errors / 28.000000000000004% coverage ] ****** [400 done /429 queued / 16 running / 399 errors / 28.000000000000004% coverage ] ****** [401 done /429 queued / 16 running / 400 errors / 28.000000000000004% coverage ] ****** [401 done /429 queued / 16 running / 400 errors / 28.000000000000004% coverage ] ****** [402 done /430 queued / 16 running / 401 errors / 28.000000000000004% coverage ] ****** [402 done /430 queued / 16 running / 401 errors / 28.000000000000004% coverage ] ****** [403 done /433 queued / 16 running / 402 errors / 28.000000000000004% coverage ] ****** [403 done /433 queued / 16 running / 402 errors / 28.000000000000004% coverage ] ****** [404 done /434 queued / 16 running / 403 errors / 28.000000000000004% coverage ] ****** [404 done /434 queued / 16 running / 403 errors / 28.000000000000004% coverage ] ****** [405 done /435 queued / 16 running / 404 errors / 28.000000000000004% coverage ] ****** [405 done /435 queued / 16 running / 404 errors / 28.000000000000004% coverage ] ****** [406 done /437 queued / 16 running / 405 errors / 28.000000000000004% coverage ] ****** [406 done /437 queued / 16 running / 405 errors / 28.000000000000004% coverage ] ****** [407 done /437 queued / 16 running / 406 errors / 28.000000000000004% coverage ] ****** [407 done /437 queued / 16 running / 406 errors / 28.000000000000004% coverage ] ****** [408 done /438 queued / 16 running / 407 errors / 28.000000000000004% coverage ] ****** [408 done /438 queued / 16 running / 407 errors / 28.000000000000004% coverage ] ****** [409 done /438 queued / 16 running / 408 errors / 28.000000000000004% coverage ] ****** [409 done /438 queued / 16 running / 408 errors / 28.000000000000004% coverage ] ****** [410 done /439 queued / 16 running / 409 errors / 28.000000000000004% coverage ] ****** [410 done /439 queued / 16 running / 409 errors / 28.000000000000004% coverage ] ****** [411 done /440 queued / 16 running / 410 errors / 28.000000000000004% coverage ] ****** [411 done /440 queued / 16 running / 410 errors / 28.000000000000004% coverage ] ****** [412 done /441 queued / 16 running / 411 errors / 28.000000000000004% coverage ] ****** [412 done /441 queued / 16 running / 411 errors / 28.000000000000004% coverage ] ****** [413 done /443 queued / 16 running / 412 errors / 28.000000000000004% coverage ] ****** [413 done /443 queued / 16 running / 412 errors / 28.000000000000004% coverage ] ****** [414 done /443 queued / 16 running / 413 errors / 28.000000000000004% coverage ] ****** [414 done /443 queued / 16 running / 413 errors / 28.000000000000004% coverage ] ****** [415 done /443 queued / 16 running / 414 errors / 28.000000000000004% coverage ] ****** [415 done /443 queued / 16 running / 414 errors / 28.000000000000004% coverage ] ****** [416 done /444 queued / 16 running / 415 errors / 28.000000000000004% coverage ] ****** [416 done /444 queued / 16 running / 415 errors / 28.000000000000004% coverage ] ****** [417 done /445 queued / 16 running / 416 errors / 28.000000000000004% coverage ] ****** [417 done /445 queued / 16 running / 416 errors / 28.000000000000004% coverage ] ****** [418 done /445 queued / 16 running / 417 errors / 28.000000000000004% coverage ] ****** [418 done /445 queued / 16 running / 417 errors / 28.000000000000004% coverage ] ****** [419 done /448 queued / 16 running / 418 errors / 28.000000000000004% coverage ] ****** [419 done /448 queued / 16 running / 418 errors / 28.000000000000004% coverage ] ****** [420 done /450 queued / 16 running / 419 errors / 28.000000000000004% coverage ] ****** [420 done /450 queued / 16 running / 419 errors / 28.000000000000004% coverage ] ****** [421 done /454 queued / 16 running / 420 errors / 28.000000000000004% coverage ] ****** [421 done /454 queued / 16 running / 420 errors / 28.000000000000004% coverage ] ****** [422 done /455 queued / 16 running / 421 errors / 28.000000000000004% coverage ] ****** [422 done /455 queued / 16 running / 421 errors / 28.000000000000004% coverage ] ****** [423 done /456 queued / 16 running / 422 errors / 28.000000000000004% coverage ] ****** [423 done /456 queued / 16 running / 422 errors / 28.000000000000004% coverage ] ****** [424 done /456 queued / 16 running / 423 errors / 28.000000000000004% coverage ] ****** [424 done /456 queued / 16 running / 423 errors / 28.000000000000004% coverage ] ****** [425 done /457 queued / 16 running / 424 errors / 28.000000000000004% coverage ] ****** [425 done /457 queued / 16 running / 424 errors / 28.000000000000004% coverage ] ****** [426 done /460 queued / 16 running / 425 errors / 28.000000000000004% coverage ] ****** [426 done /460 queued / 16 running / 425 errors / 28.000000000000004% coverage ] ****** [427 done /461 queued / 16 running / 426 errors / 28.000000000000004% coverage ] ****** [427 done /461 queued / 16 running / 426 errors / 28.000000000000004% coverage ] ****** [428 done /462 queued / 16 running / 427 errors / 28.000000000000004% coverage ] ****** [428 done /462 queued / 16 running / 427 errors / 28.000000000000004% coverage ] ****** [429 done /463 queued / 16 running / 428 errors / 28.000000000000004% coverage ] ****** [429 done /463 queued / 16 running / 428 errors / 28.000000000000004% coverage ] ****** [430 done /464 queued / 16 running / 429 errors / 28.000000000000004% coverage ] ****** [430 done /464 queued / 16 running / 429 errors / 28.000000000000004% coverage ] ****** [431 done /466 queued / 16 running / 430 errors / 28.000000000000004% coverage ] ****** [431 done /466 queued / 16 running / 430 errors / 28.000000000000004% coverage ] ****** [432 done /468 queued / 16 running / 431 errors / 28.000000000000004% coverage ] ****** [432 done /468 queued / 16 running / 431 errors / 28.000000000000004% coverage ] ****** [433 done /469 queued / 16 running / 432 errors / 28.000000000000004% coverage ] ****** [433 done /469 queued / 16 running / 432 errors / 28.000000000000004% coverage ] ****** [434 done /470 queued / 16 running / 433 errors / 28.000000000000004% coverage ] ****** [434 done /470 queued / 16 running / 433 errors / 28.000000000000004% coverage ] ****** [435 done /472 queued / 16 running / 434 errors / 28.000000000000004% coverage ] ****** [435 done /472 queued / 16 running / 434 errors / 28.000000000000004% coverage ] ****** [436 done /472 queued / 16 running / 435 errors / 28.000000000000004% coverage ] ****** [436 done /472 queued / 16 running / 435 errors / 28.000000000000004% coverage ] ****** [437 done /473 queued / 16 running / 436 errors / 28.000000000000004% coverage ] ****** [437 done /473 queued / 16 running / 436 errors / 28.000000000000004% coverage ] ****** [438 done /473 queued / 16 running / 437 errors / 28.000000000000004% coverage ] ****** [438 done /473 queued / 16 running / 437 errors / 28.000000000000004% coverage ] ****** [439 done /474 queued / 16 running / 438 errors / 28.000000000000004% coverage ] ****** [439 done /474 queued / 16 running / 438 errors / 28.000000000000004% coverage ] ****** [440 done /474 queued / 16 running / 439 errors / 28.000000000000004% coverage ] ****** [440 done /474 queued / 16 running / 439 errors / 28.000000000000004% coverage ] ****** [441 done /474 queued / 16 running / 440 errors / 28.000000000000004% coverage ] ****** [441 done /474 queued / 16 running / 440 errors / 28.000000000000004% coverage ] ****** [442 done /475 queued / 16 running / 441 errors / 28.000000000000004% coverage ] ****** [442 done /475 queued / 16 running / 441 errors / 28.000000000000004% coverage ] ****** [443 done /475 queued / 16 running / 442 errors / 28.000000000000004% coverage ] ****** [443 done /475 queued / 16 running / 442 errors / 28.000000000000004% coverage ] ****** [444 done /475 queued / 16 running / 443 errors / 28.000000000000004% coverage ] ****** [444 done /475 queued / 16 running / 443 errors / 28.000000000000004% coverage ] ****** [445 done /476 queued / 16 running / 444 errors / 28.000000000000004% coverage ] ****** [445 done /476 queued / 16 running / 444 errors / 28.000000000000004% coverage ] ****** [446 done /477 queued / 16 running / 445 errors / 28.000000000000004% coverage ] ****** [446 done /477 queued / 16 running / 445 errors / 28.000000000000004% coverage ] ****** [447 done /477 queued / 16 running / 446 errors / 28.000000000000004% coverage ] ****** [447 done /477 queued / 16 running / 446 errors / 28.000000000000004% coverage ] ****** [448 done /478 queued / 16 running / 447 errors / 28.000000000000004% coverage ] ****** [448 done /478 queued / 16 running / 447 errors / 28.000000000000004% coverage ] ****** [449 done /478 queued / 16 running / 448 errors / 28.000000000000004% coverage ] ****** [449 done /478 queued / 16 running / 448 errors / 28.000000000000004% coverage ] ****** [450 done /478 queued / 16 running / 449 errors / 28.000000000000004% coverage ] ****** [450 done /478 queued / 16 running / 449 errors / 28.000000000000004% coverage ] ****** [451 done /479 queued / 16 running / 450 errors / 28.000000000000004% coverage ] ****** [451 done /479 queued / 16 running / 450 errors / 28.000000000000004% coverage ] ****** [452 done /480 queued / 16 running / 451 errors / 28.000000000000004% coverage ] ****** [452 done /480 queued / 16 running / 451 errors / 28.000000000000004% coverage ] ****** [453 done /481 queued / 16 running / 452 errors / 28.000000000000004% coverage ] ****** [453 done /481 queued / 16 running / 452 errors / 28.000000000000004% coverage ] ****** [454 done /484 queued / 16 running / 453 errors / 28.000000000000004% coverage ] ****** [454 done /484 queued / 16 running / 453 errors / 28.000000000000004% coverage ] ****** [455 done /488 queued / 16 running / 454 errors / 28.000000000000004% coverage ] ****** [455 done /488 queued / 16 running / 454 errors / 28.000000000000004% coverage ] ****** [456 done /489 queued / 16 running / 455 errors / 28.000000000000004% coverage ] ****** [456 done /489 queued / 16 running / 455 errors / 28.000000000000004% coverage ] ****** [457 done /490 queued / 16 running / 456 errors / 28.000000000000004% coverage ] ****** [457 done /490 queued / 16 running / 456 errors / 28.000000000000004% coverage ] ****** [458 done /493 queued / 16 running / 457 errors / 28.000000000000004% coverage ] ****** [458 done /493 queued / 16 running / 457 errors / 28.000000000000004% coverage ] ****** [459 done /495 queued / 16 running / 458 errors / 28.000000000000004% coverage ] ****** [459 done /495 queued / 16 running / 458 errors / 28.000000000000004% coverage ] ****** [460 done /497 queued / 16 running / 459 errors / 28.000000000000004% coverage ] ****** [460 done /497 queued / 16 running / 459 errors / 28.000000000000004% coverage ] ****** [461 done /498 queued / 16 running / 460 errors / 28.000000000000004% coverage ] ****** [461 done /498 queued / 16 running / 460 errors / 28.000000000000004% coverage ] ****** [462 done /499 queued / 16 running / 461 errors / 28.000000000000004% coverage ] ****** [462 done /499 queued / 16 running / 461 errors / 28.000000000000004% coverage ] ****** [463 done /500 queued / 16 running / 462 errors / 28.000000000000004% coverage ] ****** [463 done /500 queued / 16 running / 462 errors / 28.000000000000004% coverage ] ****** [464 done /501 queued / 16 running / 463 errors / 28.000000000000004% coverage ] ****** [464 done /501 queued / 16 running / 463 errors / 28.000000000000004% coverage ] ****** [465 done /502 queued / 16 running / 464 errors / 28.000000000000004% coverage ] ****** [465 done /502 queued / 16 running / 464 errors / 28.000000000000004% coverage ] ****** [466 done /505 queued / 16 running / 465 errors / 28.000000000000004% coverage ] ****** [466 done /505 queued / 16 running / 465 errors / 28.000000000000004% coverage ] ****** [467 done /506 queued / 16 running / 466 errors / 28.000000000000004% coverage ] ****** [467 done /506 queued / 16 running / 466 errors / 28.000000000000004% coverage ] ****** [468 done /507 queued / 16 running / 467 errors / 28.000000000000004% coverage ] ****** [468 done /507 queued / 16 running / 467 errors / 28.000000000000004% coverage ] ****** [469 done /508 queued / 16 running / 468 errors / 28.000000000000004% coverage ] ****** [469 done /508 queued / 16 running / 468 errors / 28.000000000000004% coverage ] ****** [470 done /509 queued / 16 running / 469 errors / 28.000000000000004% coverage ] ****** [470 done /509 queued / 16 running / 469 errors / 28.000000000000004% coverage ] ****** [471 done /510 queued / 16 running / 470 errors / 28.000000000000004% coverage ] ****** [471 done /510 queued / 16 running / 470 errors / 28.000000000000004% coverage ] ****** [472 done /510 queued / 16 running / 471 errors / 28.000000000000004% coverage ] ****** [472 done /510 queued / 16 running / 471 errors / 28.000000000000004% coverage ] ****** [473 done /511 queued / 16 running / 472 errors / 28.000000000000004% coverage ] ****** [473 done /511 queued / 16 running / 472 errors / 28.000000000000004% coverage ] ****** [474 done /511 queued / 16 running / 473 errors / 28.000000000000004% coverage ] ****** [474 done /511 queued / 16 running / 473 errors / 28.000000000000004% coverage ] ****** [475 done /513 queued / 16 running / 474 errors / 28.000000000000004% coverage ] ****** [475 done /513 queued / 16 running / 474 errors / 28.000000000000004% coverage ] ****** [476 done /514 queued / 16 running / 475 errors / 28.000000000000004% coverage ] ****** [476 done /514 queued / 16 running / 475 errors / 28.000000000000004% coverage ] ****** [477 done /514 queued / 16 running / 476 errors / 28.000000000000004% coverage ] ****** [477 done /514 queued / 16 running / 476 errors / 28.000000000000004% coverage ] ****** [478 done /514 queued / 16 running / 477 errors / 28.000000000000004% coverage ] ****** [478 done /514 queued / 16 running / 477 errors / 28.000000000000004% coverage ] ****** [479 done /516 queued / 16 running / 478 errors / 28.000000000000004% coverage ] ****** [479 done /516 queued / 16 running / 478 errors / 28.000000000000004% coverage ] ****** [480 done /516 queued / 16 running / 479 errors / 28.000000000000004% coverage ] ****** [480 done /516 queued / 16 running / 479 errors / 28.000000000000004% coverage ] ****** [481 done /517 queued / 16 running / 480 errors / 28.000000000000004% coverage ] ****** [481 done /517 queued / 16 running / 480 errors / 28.000000000000004% coverage ] ****** [482 done /519 queued / 16 running / 481 errors / 28.000000000000004% coverage ] ****** [482 done /519 queued / 16 running / 481 errors / 28.000000000000004% coverage ] ****** [483 done /522 queued / 16 running / 482 errors / 28.000000000000004% coverage ] ****** [483 done /522 queued / 16 running / 482 errors / 28.000000000000004% coverage ] ****** [484 done /524 queued / 16 running / 483 errors / 28.000000000000004% coverage ] ****** [484 done /524 queued / 16 running / 483 errors / 28.000000000000004% coverage ] ****** [485 done /525 queued / 16 running / 484 errors / 28.000000000000004% coverage ] ****** [485 done /525 queued / 16 running / 484 errors / 28.000000000000004% coverage ] ****** [486 done /526 queued / 16 running / 485 errors / 28.000000000000004% coverage ] ****** [486 done /526 queued / 16 running / 485 errors / 28.000000000000004% coverage ] ****** [487 done /527 queued / 16 running / 486 errors / 28.000000000000004% coverage ] ****** [487 done /527 queued / 16 running / 486 errors / 28.000000000000004% coverage ] ****** [488 done /528 queued / 16 running / 487 errors / 28.000000000000004% coverage ] ****** [488 done /528 queued / 16 running / 487 errors / 28.000000000000004% coverage ] ****** [489 done /528 queued / 16 running / 488 errors / 28.000000000000004% coverage ] ****** [489 done /528 queued / 16 running / 488 errors / 28.000000000000004% coverage ] ****** [490 done /529 queued / 16 running / 489 errors / 28.000000000000004% coverage ] ****** [490 done /529 queued / 16 running / 489 errors / 28.000000000000004% coverage ] ****** [491 done /531 queued / 16 running / 490 errors / 28.000000000000004% coverage ] ****** [491 done /531 queued / 16 running / 490 errors / 28.000000000000004% coverage ] ****** [492 done /532 queued / 16 running / 491 errors / 28.000000000000004% coverage ] ****** [492 done /532 queued / 16 running / 491 errors / 28.000000000000004% coverage ] ****** [493 done /534 queued / 16 running / 492 errors / 28.000000000000004% coverage ] ****** [493 done /534 queued / 16 running / 492 errors / 28.000000000000004% coverage ] ****** [494 done /534 queued / 16 running / 493 errors / 28.000000000000004% coverage ] ****** [494 done /534 queued / 16 running / 493 errors / 28.000000000000004% coverage ] ****** [495 done /536 queued / 16 running / 494 errors / 28.000000000000004% coverage ] ****** [495 done /536 queued / 16 running / 494 errors / 28.000000000000004% coverage ] ****** [496 done /537 queued / 16 running / 495 errors / 28.000000000000004% coverage ] ****** [496 done /537 queued / 16 running / 495 errors / 28.000000000000004% coverage ] ****** [497 done /538 queued / 16 running / 496 errors / 28.000000000000004% coverage ] ****** [497 done /538 queued / 16 running / 496 errors / 28.000000000000004% coverage ] ****** [498 done /539 queued / 16 running / 497 errors / 28.000000000000004% coverage ] ****** [498 done /539 queued / 16 running / 497 errors / 28.000000000000004% coverage ] ****** [499 done /541 queued / 16 running / 498 errors / 28.000000000000004% coverage ] ****** [499 done /541 queued / 16 running / 498 errors / 28.000000000000004% coverage ] ****** [500 done /542 queued / 16 running / 499 errors / 28.000000000000004% coverage ] ****** [500 done /542 queued / 16 running / 499 errors / 28.000000000000004% coverage ] ****** [501 done /543 queued / 16 running / 500 errors / 28.000000000000004% coverage ] ****** [501 done /543 queued / 16 running / 500 errors / 28.000000000000004% coverage ] ****** [502 done /544 queued / 16 running / 501 errors / 28.000000000000004% coverage ] ****** [502 done /544 queued / 16 running / 501 errors / 28.000000000000004% coverage ] ****** [503 done /544 queued / 16 running / 502 errors / 28.000000000000004% coverage ] ****** [503 done /544 queued / 16 running / 502 errors / 28.000000000000004% coverage ] ****** [504 done /544 queued / 16 running / 503 errors / 28.000000000000004% coverage ] ****** [504 done /544 queued / 16 running / 503 errors / 28.000000000000004% coverage ] ****** [505 done /545 queued / 16 running / 504 errors / 28.000000000000004% coverage ] ****** [505 done /545 queued / 16 running / 504 errors / 28.000000000000004% coverage ] ****** [506 done /545 queued / 16 running / 505 errors / 28.000000000000004% coverage ] ****** [506 done /545 queued / 16 running / 505 errors / 28.000000000000004% coverage ] ****** [507 done /547 queued / 16 running / 506 errors / 28.000000000000004% coverage ] ****** [507 done /547 queued / 16 running / 506 errors / 28.000000000000004% coverage ] ****** [508 done /548 queued / 16 running / 507 errors / 28.000000000000004% coverage ] ****** [508 done /548 queued / 16 running / 507 errors / 28.000000000000004% coverage ] ****** [509 done /549 queued / 16 running / 508 errors / 28.000000000000004% coverage ] ****** [509 done /549 queued / 16 running / 508 errors / 28.000000000000004% coverage ] ****** [510 done /549 queued / 16 running / 509 errors / 28.000000000000004% coverage ] ****** [510 done /549 queued / 16 running / 509 errors / 28.000000000000004% coverage ] ****** [511 done /550 queued / 16 running / 510 errors / 28.000000000000004% coverage ] ****** [511 done /550 queued / 16 running / 510 errors / 28.000000000000004% coverage ] ****** [512 done /552 queued / 16 running / 511 errors / 28.000000000000004% coverage ] ****** [512 done /552 queued / 16 running / 511 errors / 28.000000000000004% coverage ] ****** [513 done /555 queued / 16 running / 512 errors / 28.000000000000004% coverage ] ****** [513 done /555 queued / 16 running / 512 errors / 28.000000000000004% coverage ] ****** [514 done /557 queued / 16 running / 513 errors / 28.000000000000004% coverage ] ****** [514 done /557 queued / 16 running / 513 errors / 28.000000000000004% coverage ] ****** [515 done /558 queued / 16 running / 514 errors / 28.000000000000004% coverage ] ****** [515 done /558 queued / 16 running / 514 errors / 28.000000000000004% coverage ] ****** [516 done /559 queued / 16 running / 515 errors / 28.000000000000004% coverage ] ****** [516 done /559 queued / 16 running / 515 errors / 28.000000000000004% coverage ] ****** [517 done /560 queued / 16 running / 516 errors / 28.000000000000004% coverage ] ****** [517 done /560 queued / 16 running / 516 errors / 28.000000000000004% coverage ] ****** [518 done /561 queued / 16 running / 517 errors / 28.000000000000004% coverage ] ****** [518 done /561 queued / 16 running / 517 errors / 28.000000000000004% coverage ] ****** [519 done /562 queued / 16 running / 518 errors / 28.000000000000004% coverage ] ****** [519 done /562 queued / 16 running / 518 errors / 28.000000000000004% coverage ] ****** [520 done /563 queued / 16 running / 519 errors / 28.000000000000004% coverage ] ****** [520 done /563 queued / 16 running / 519 errors / 28.000000000000004% coverage ] ****** [521 done /564 queued / 16 running / 520 errors / 28.000000000000004% coverage ] ****** [521 done /564 queued / 16 running / 520 errors / 28.000000000000004% coverage ] ****** [522 done /565 queued / 16 running / 521 errors / 28.000000000000004% coverage ] ****** [522 done /565 queued / 16 running / 521 errors / 28.000000000000004% coverage ] ****** [523 done /568 queued / 16 running / 522 errors / 28.000000000000004% coverage ] ****** [523 done /568 queued / 16 running / 522 errors / 28.000000000000004% coverage ] ****** [524 done /568 queued / 16 running / 523 errors / 28.000000000000004% coverage ] ****** [524 done /568 queued / 16 running / 523 errors / 28.000000000000004% coverage ] ****** [525 done /570 queued / 16 running / 524 errors / 28.000000000000004% coverage ] ****** [525 done /570 queued / 16 running / 524 errors / 28.000000000000004% coverage ] ****** [526 done /571 queued / 16 running / 525 errors / 28.000000000000004% coverage ] ****** [526 done /571 queued / 16 running / 525 errors / 28.000000000000004% coverage ] ****** [527 done /572 queued / 16 running / 526 errors / 28.000000000000004% coverage ] ****** [527 done /572 queued / 16 running / 526 errors / 28.000000000000004% coverage ] ****** [528 done /575 queued / 16 running / 527 errors / 28.000000000000004% coverage ] ****** [528 done /575 queued / 16 running / 527 errors / 28.000000000000004% coverage ] ****** [529 done /575 queued / 16 running / 528 errors / 28.000000000000004% coverage ] ****** [529 done /575 queued / 16 running / 528 errors / 28.000000000000004% coverage ] ****** [530 done /576 queued / 16 running / 529 errors / 28.000000000000004% coverage ] ****** [530 done /576 queued / 16 running / 529 errors / 28.000000000000004% coverage ] ****** [531 done /577 queued / 16 running / 530 errors / 28.000000000000004% coverage ] ****** [531 done /577 queued / 16 running / 530 errors / 28.000000000000004% coverage ] ****** [532 done /577 queued / 16 running / 531 errors / 28.000000000000004% coverage ] ****** [532 done /577 queued / 16 running / 531 errors / 28.000000000000004% coverage ] ****** [533 done /580 queued / 16 running / 532 errors / 28.000000000000004% coverage ] ****** [533 done /580 queued / 16 running / 532 errors / 28.000000000000004% coverage ] ****** [534 done /581 queued / 16 running / 533 errors / 28.000000000000004% coverage ] ****** [534 done /581 queued / 16 running / 533 errors / 28.000000000000004% coverage ] ****** [535 done /582 queued / 16 running / 534 errors / 28.000000000000004% coverage ] ****** [535 done /582 queued / 16 running / 534 errors / 28.000000000000004% coverage ] ****** [536 done /582 queued / 16 running / 535 errors / 28.000000000000004% coverage ] ****** [536 done /582 queued / 16 running / 535 errors / 28.000000000000004% coverage ] ****** [537 done /582 queued / 16 running / 536 errors / 28.000000000000004% coverage ] ****** [537 done /582 queued / 16 running / 536 errors / 28.000000000000004% coverage ] ****** [538 done /583 queued / 16 running / 537 errors / 28.000000000000004% coverage ] ****** [538 done /583 queued / 16 running / 537 errors / 28.000000000000004% coverage ] ****** [539 done /584 queued / 16 running / 538 errors / 28.000000000000004% coverage ] ****** [539 done /584 queued / 16 running / 538 errors / 28.000000000000004% coverage ] ****** [540 done /585 queued / 16 running / 539 errors / 28.000000000000004% coverage ] ****** [540 done /585 queued / 16 running / 539 errors / 28.000000000000004% coverage ] ****** [541 done /585 queued / 16 running / 540 errors / 28.000000000000004% coverage ] ****** [541 done /585 queued / 16 running / 540 errors / 28.000000000000004% coverage ] ****** [542 done /586 queued / 16 running / 541 errors / 28.000000000000004% coverage ] ****** [542 done /586 queued / 16 running / 541 errors / 28.000000000000004% coverage ] ****** [543 done /586 queued / 16 running / 542 errors / 28.000000000000004% coverage ] ****** [543 done /586 queued / 16 running / 542 errors / 28.000000000000004% coverage ] ****** [544 done /589 queued / 16 running / 543 errors / 28.000000000000004% coverage ] ****** [544 done /589 queued / 16 running / 543 errors / 28.000000000000004% coverage ] ****** [545 done /591 queued / 16 running / 544 errors / 28.000000000000004% coverage ] ****** [545 done /591 queued / 16 running / 544 errors / 28.000000000000004% coverage ] ****** [546 done /592 queued / 16 running / 545 errors / 28.000000000000004% coverage ] ****** [546 done /592 queued / 16 running / 545 errors / 28.000000000000004% coverage ] ****** [547 done /595 queued / 16 running / 546 errors / 28.000000000000004% coverage ] ****** [547 done /595 queued / 16 running / 546 errors / 28.000000000000004% coverage ] ****** [548 done /597 queued / 16 running / 547 errors / 28.000000000000004% coverage ] ****** [548 done /597 queued / 16 running / 547 errors / 28.000000000000004% coverage ] ****** [549 done /597 queued / 16 running / 548 errors / 28.000000000000004% coverage ] ****** [549 done /597 queued / 16 running / 548 errors / 28.000000000000004% coverage ] ****** [550 done /598 queued / 16 running / 549 errors / 28.000000000000004% coverage ] ****** [550 done /598 queued / 16 running / 549 errors / 28.000000000000004% coverage ] ****** [551 done /599 queued / 16 running / 550 errors / 28.000000000000004% coverage ] ****** [551 done /599 queued / 16 running / 550 errors / 28.000000000000004% coverage ] ****** [552 done /600 queued / 16 running / 551 errors / 28.000000000000004% coverage ] ****** [552 done /600 queued / 16 running / 551 errors / 28.000000000000004% coverage ] ****** [553 done /602 queued / 16 running / 552 errors / 28.000000000000004% coverage ] ****** [553 done /602 queued / 16 running / 552 errors / 28.000000000000004% coverage ] ****** [554 done /603 queued / 16 running / 553 errors / 28.000000000000004% coverage ] ****** [554 done /603 queued / 16 running / 553 errors / 28.000000000000004% coverage ] ****** [555 done /603 queued / 16 running / 554 errors / 28.000000000000004% coverage ] ****** [555 done /603 queued / 16 running / 554 errors / 28.000000000000004% coverage ] ****** [556 done /604 queued / 16 running / 555 errors / 28.000000000000004% coverage ] ****** [556 done /604 queued / 16 running / 555 errors / 28.000000000000004% coverage ] ****** [557 done /605 queued / 16 running / 556 errors / 28.000000000000004% coverage ] ****** [557 done /605 queued / 16 running / 556 errors / 28.000000000000004% coverage ] ****** [558 done /606 queued / 16 running / 557 errors / 28.000000000000004% coverage ] ****** [558 done /606 queued / 16 running / 557 errors / 28.000000000000004% coverage ] ****** [559 done /607 queued / 16 running / 558 errors / 28.000000000000004% coverage ] ****** [559 done /607 queued / 16 running / 558 errors / 28.000000000000004% coverage ] ****** [560 done /609 queued / 16 running / 559 errors / 28.000000000000004% coverage ] ****** [560 done /609 queued / 16 running / 559 errors / 28.000000000000004% coverage ] ****** [561 done /610 queued / 16 running / 560 errors / 28.000000000000004% coverage ] ****** [561 done /610 queued / 16 running / 560 errors / 28.000000000000004% coverage ] ****** [562 done /611 queued / 16 running / 561 errors / 28.000000000000004% coverage ] ****** [562 done /611 queued / 16 running / 561 errors / 28.000000000000004% coverage ] ****** [563 done /611 queued / 16 running / 562 errors / 28.000000000000004% coverage ] ****** [563 done /611 queued / 16 running / 562 errors / 28.000000000000004% coverage ] ****** [564 done /612 queued / 16 running / 563 errors / 28.000000000000004% coverage ] ****** [564 done /612 queued / 16 running / 563 errors / 28.000000000000004% coverage ] ****** [565 done /612 queued / 16 running / 564 errors / 28.000000000000004% coverage ] ****** [565 done /612 queued / 16 running / 564 errors / 28.000000000000004% coverage ] ****** [566 done /612 queued / 16 running / 565 errors / 28.000000000000004% coverage ] ****** [566 done /612 queued / 16 running / 565 errors / 28.000000000000004% coverage ] ****** [567 done /613 queued / 16 running / 566 errors / 28.000000000000004% coverage ] ****** [567 done /613 queued / 16 running / 566 errors / 28.000000000000004% coverage ] ****** [568 done /614 queued / 16 running / 567 errors / 28.000000000000004% coverage ] ****** [568 done /614 queued / 16 running / 567 errors / 28.000000000000004% coverage ] ****** [569 done /617 queued / 16 running / 568 errors / 28.000000000000004% coverage ] ****** [569 done /617 queued / 16 running / 568 errors / 28.000000000000004% coverage ] ****** [570 done /618 queued / 16 running / 569 errors / 28.000000000000004% coverage ] ****** [570 done /618 queued / 16 running / 569 errors / 28.000000000000004% coverage ] ****** [571 done /620 queued / 16 running / 570 errors / 28.000000000000004% coverage ] ****** [571 done /620 queued / 16 running / 570 errors / 28.000000000000004% coverage ] ****** [572 done /624 queued / 16 running / 571 errors / 28.000000000000004% coverage ] ****** [572 done /624 queued / 16 running / 571 errors / 28.000000000000004% coverage ] ****** [573 done /625 queued / 16 running / 572 errors / 28.000000000000004% coverage ] ****** [573 done /625 queued / 16 running / 572 errors / 28.000000000000004% coverage ] ****** [574 done /625 queued / 16 running / 573 errors / 28.000000000000004% coverage ] ****** [574 done /625 queued / 16 running / 573 errors / 28.000000000000004% coverage ] ****** [575 done /626 queued / 16 running / 574 errors / 28.000000000000004% coverage ] ****** [575 done /626 queued / 16 running / 574 errors / 28.000000000000004% coverage ] ****** [576 done /630 queued / 16 running / 575 errors / 28.000000000000004% coverage ] ****** [576 done /630 queued / 16 running / 575 errors / 28.000000000000004% coverage ] ****** [577 done /631 queued / 16 running / 576 errors / 28.000000000000004% coverage ] ****** [577 done /631 queued / 16 running / 576 errors / 28.000000000000004% coverage ] ****** [578 done /632 queued / 16 running / 577 errors / 28.000000000000004% coverage ] ****** [578 done /632 queued / 16 running / 577 errors / 28.000000000000004% coverage ] ****** [579 done /633 queued / 16 running / 578 errors / 28.000000000000004% coverage ] ****** [579 done /633 queued / 16 running / 578 errors / 28.000000000000004% coverage ] ****** [580 done /634 queued / 16 running / 579 errors / 28.000000000000004% coverage ] ****** [580 done /634 queued / 16 running / 579 errors / 28.000000000000004% coverage ] ****** [581 done /635 queued / 16 running / 580 errors / 28.000000000000004% coverage ] ****** [581 done /635 queued / 16 running / 580 errors / 28.000000000000004% coverage ] ****** [582 done /636 queued / 16 running / 581 errors / 28.000000000000004% coverage ] ****** [582 done /636 queued / 16 running / 581 errors / 28.000000000000004% coverage ] ****** [583 done /637 queued / 16 running / 582 errors / 28.000000000000004% coverage ] ****** [583 done /637 queued / 16 running / 582 errors / 28.000000000000004% coverage ] ****** [584 done /637 queued / 16 running / 583 errors / 28.000000000000004% coverage ] ****** [584 done /637 queued / 16 running / 583 errors / 28.000000000000004% coverage ] ****** [585 done /638 queued / 16 running / 584 errors / 28.000000000000004% coverage ] ****** [585 done /638 queued / 16 running / 584 errors / 28.000000000000004% coverage ] ****** [586 done /639 queued / 16 running / 585 errors / 28.000000000000004% coverage ] ****** [586 done /639 queued / 16 running / 585 errors / 28.000000000000004% coverage ] ****** [587 done /640 queued / 16 running / 586 errors / 28.000000000000004% coverage ] ****** [587 done /640 queued / 16 running / 586 errors / 28.000000000000004% coverage ] ****** [588 done /640 queued / 16 running / 587 errors / 28.000000000000004% coverage ] ****** [588 done /640 queued / 16 running / 587 errors / 28.000000000000004% coverage ] ****** [589 done /642 queued / 16 running / 588 errors / 28.000000000000004% coverage ] ****** [589 done /642 queued / 16 running / 588 errors / 28.000000000000004% coverage ] ****** [590 done /644 queued / 16 running / 589 errors / 28.000000000000004% coverage ] ****** [590 done /644 queued / 16 running / 589 errors / 28.000000000000004% coverage ] ****** [591 done /645 queued / 16 running / 590 errors / 28.000000000000004% coverage ] ****** [591 done /645 queued / 16 running / 590 errors / 28.000000000000004% coverage ] ****** [592 done /648 queued / 16 running / 591 errors / 28.000000000000004% coverage ] ****** [592 done /648 queued / 16 running / 591 errors / 28.000000000000004% coverage ] ****** [593 done /649 queued / 16 running / 592 errors / 28.000000000000004% coverage ] ****** [593 done /649 queued / 16 running / 592 errors / 28.000000000000004% coverage ] ****** [594 done /649 queued / 16 running / 593 errors / 28.000000000000004% coverage ] ****** [594 done /649 queued / 16 running / 593 errors / 28.000000000000004% coverage ] ****** [595 done /649 queued / 16 running / 594 errors / 28.000000000000004% coverage ] ****** [595 done /649 queued / 16 running / 594 errors / 28.000000000000004% coverage ] ****** [596 done /649 queued / 16 running / 595 errors / 28.000000000000004% coverage ] ****** [596 done /649 queued / 16 running / 595 errors / 28.000000000000004% coverage ] ****** [597 done /649 queued / 16 running / 596 errors / 28.000000000000004% coverage ] ****** [597 done /649 queued / 16 running / 596 errors / 28.000000000000004% coverage ] ****** [598 done /652 queued / 16 running / 597 errors / 28.000000000000004% coverage ] ****** [598 done /652 queued / 16 running / 597 errors / 28.000000000000004% coverage ] ****** [599 done /653 queued / 16 running / 598 errors / 28.000000000000004% coverage ] ****** [599 done /653 queued / 16 running / 598 errors / 28.000000000000004% coverage ] ****** [600 done /655 queued / 16 running / 599 errors / 28.000000000000004% coverage ] ****** [600 done /655 queued / 16 running / 599 errors / 28.000000000000004% coverage ] ****** [601 done /656 queued / 16 running / 600 errors / 28.000000000000004% coverage ] ****** [601 done /656 queued / 16 running / 600 errors / 28.000000000000004% coverage ] ****** [602 done /656 queued / 16 running / 601 errors / 28.000000000000004% coverage ] ****** [602 done /656 queued / 16 running / 601 errors / 28.000000000000004% coverage ] ****** [603 done /660 queued / 16 running / 602 errors / 28.000000000000004% coverage ] ****** [603 done /660 queued / 16 running / 602 errors / 28.000000000000004% coverage ] ****** [604 done /662 queued / 16 running / 603 errors / 28.000000000000004% coverage ] ****** [604 done /662 queued / 16 running / 603 errors / 28.000000000000004% coverage ] ****** [605 done /664 queued / 16 running / 604 errors / 28.000000000000004% coverage ] ****** [605 done /664 queued / 16 running / 604 errors / 28.000000000000004% coverage ] ****** [606 done /666 queued / 16 running / 605 errors / 28.000000000000004% coverage ] ****** [606 done /666 queued / 16 running / 605 errors / 28.000000000000004% coverage ] ****** [607 done /666 queued / 16 running / 606 errors / 28.000000000000004% coverage ] ****** [607 done /666 queued / 16 running / 606 errors / 28.000000000000004% coverage ] ****** [608 done /667 queued / 16 running / 607 errors / 28.000000000000004% coverage ] ****** [608 done /667 queued / 16 running / 607 errors / 28.000000000000004% coverage ] ****** [609 done /668 queued / 16 running / 608 errors / 28.000000000000004% coverage ] ****** [609 done /668 queued / 16 running / 608 errors / 28.000000000000004% coverage ] ****** [610 done /668 queued / 16 running / 609 errors / 28.000000000000004% coverage ] ****** [610 done /668 queued / 16 running / 609 errors / 28.000000000000004% coverage ] ****** [611 done /669 queued / 16 running / 610 errors / 28.000000000000004% coverage ] ****** [611 done /669 queued / 16 running / 610 errors / 28.000000000000004% coverage ] ****** [612 done /670 queued / 16 running / 611 errors / 28.000000000000004% coverage ] ****** [612 done /670 queued / 16 running / 611 errors / 28.000000000000004% coverage ] ****** [613 done /670 queued / 16 running / 612 errors / 28.000000000000004% coverage ] ****** [613 done /670 queued / 16 running / 612 errors / 28.000000000000004% coverage ] ****** [614 done /671 queued / 16 running / 613 errors / 28.000000000000004% coverage ] ****** [614 done /671 queued / 16 running / 613 errors / 28.000000000000004% coverage ] ****** [615 done /672 queued / 16 running / 614 errors / 28.000000000000004% coverage ] ****** [615 done /672 queued / 16 running / 614 errors / 28.000000000000004% coverage ] ****** [616 done /673 queued / 16 running / 615 errors / 28.000000000000004% coverage ] ****** [616 done /673 queued / 16 running / 615 errors / 28.000000000000004% coverage ] ****** [617 done /673 queued / 16 running / 616 errors / 28.000000000000004% coverage ] ****** [617 done /673 queued / 16 running / 616 errors / 28.000000000000004% coverage ] ****** [618 done /673 queued / 16 running / 617 errors / 28.000000000000004% coverage ] ****** [618 done /673 queued / 16 running / 617 errors / 28.000000000000004% coverage ] ****** [619 done /675 queued / 16 running / 618 errors / 28.000000000000004% coverage ] ****** [619 done /675 queued / 16 running / 618 errors / 28.000000000000004% coverage ] ****** [620 done /675 queued / 16 running / 619 errors / 28.000000000000004% coverage ] ****** [620 done /675 queued / 16 running / 619 errors / 28.000000000000004% coverage ] ****** [621 done /675 queued / 16 running / 620 errors / 28.000000000000004% coverage ] ****** [621 done /675 queued / 16 running / 620 errors / 28.000000000000004% coverage ] ****** [622 done /675 queued / 16 running / 621 errors / 28.000000000000004% coverage ] ****** [622 done /675 queued / 16 running / 621 errors / 28.000000000000004% coverage ] ****** [623 done /676 queued / 16 running / 622 errors / 28.000000000000004% coverage ] ****** [623 done /676 queued / 16 running / 622 errors / 28.000000000000004% coverage ] ****** [624 done /677 queued / 16 running / 623 errors / 28.000000000000004% coverage ] ****** [624 done /677 queued / 16 running / 623 errors / 28.000000000000004% coverage ] ****** [625 done /681 queued / 16 running / 624 errors / 28.000000000000004% coverage ] ****** [625 done /681 queued / 16 running / 624 errors / 28.000000000000004% coverage ] ****** [626 done /682 queued / 16 running / 625 errors / 28.000000000000004% coverage ] ****** [626 done /682 queued / 16 running / 625 errors / 28.000000000000004% coverage ] ****** [627 done /685 queued / 16 running / 626 errors / 28.000000000000004% coverage ] ****** [627 done /685 queued / 16 running / 626 errors / 28.000000000000004% coverage ] ****** [628 done /688 queued / 16 running / 627 errors / 28.000000000000004% coverage ] ****** [628 done /688 queued / 16 running / 627 errors / 28.000000000000004% coverage ] ****** [629 done /688 queued / 16 running / 628 errors / 28.000000000000004% coverage ] ****** [629 done /688 queued / 16 running / 628 errors / 28.000000000000004% coverage ] ****** [630 done /688 queued / 16 running / 629 errors / 28.000000000000004% coverage ] ****** [630 done /688 queued / 16 running / 629 errors / 28.000000000000004% coverage ] ****** [631 done /689 queued / 16 running / 630 errors / 28.000000000000004% coverage ] ****** [631 done /689 queued / 16 running / 630 errors / 28.000000000000004% coverage ] ****** [632 done /690 queued / 16 running / 631 errors / 28.000000000000004% coverage ] ****** [632 done /690 queued / 16 running / 631 errors / 28.000000000000004% coverage ] ****** [633 done /691 queued / 16 running / 632 errors / 28.000000000000004% coverage ] ****** [633 done /691 queued / 16 running / 632 errors / 28.000000000000004% coverage ] ****** [634 done /692 queued / 16 running / 633 errors / 28.000000000000004% coverage ] ****** [634 done /692 queued / 16 running / 633 errors / 28.000000000000004% coverage ] ****** [635 done /693 queued / 16 running / 634 errors / 28.000000000000004% coverage ] ****** [635 done /693 queued / 16 running / 634 errors / 28.000000000000004% coverage ] ****** [636 done /694 queued / 16 running / 635 errors / 28.000000000000004% coverage ] ****** [636 done /694 queued / 16 running / 635 errors / 28.000000000000004% coverage ] ****** [637 done /695 queued / 16 running / 636 errors / 28.000000000000004% coverage ] ****** [637 done /695 queued / 16 running / 636 errors / 28.000000000000004% coverage ] ****** [638 done /696 queued / 16 running / 637 errors / 28.000000000000004% coverage ] ****** [638 done /696 queued / 16 running / 637 errors / 28.000000000000004% coverage ] ****** [639 done /696 queued / 16 running / 638 errors / 28.000000000000004% coverage ] ****** [639 done /696 queued / 16 running / 638 errors / 28.000000000000004% coverage ] ****** [640 done /697 queued / 16 running / 639 errors / 28.000000000000004% coverage ] ****** [640 done /697 queued / 16 running / 639 errors / 28.000000000000004% coverage ] ****** [641 done /697 queued / 16 running / 640 errors / 28.000000000000004% coverage ] ****** [641 done /697 queued / 16 running / 640 errors / 28.000000000000004% coverage ] ****** [642 done /698 queued / 16 running / 641 errors / 28.000000000000004% coverage ] ****** [642 done /698 queued / 16 running / 641 errors / 28.000000000000004% coverage ] ****** [643 done /698 queued / 16 running / 642 errors / 28.000000000000004% coverage ] ****** [643 done /698 queued / 16 running / 642 errors / 28.000000000000004% coverage ] ****** [644 done /699 queued / 16 running / 643 errors / 28.000000000000004% coverage ] ****** [644 done /699 queued / 16 running / 643 errors / 28.000000000000004% coverage ] ****** [645 done /699 queued / 16 running / 644 errors / 28.000000000000004% coverage ] ****** [645 done /699 queued / 16 running / 644 errors / 28.000000000000004% coverage ] ****** [646 done /699 queued / 16 running / 645 errors / 28.000000000000004% coverage ] ****** [646 done /699 queued / 16 running / 645 errors / 28.000000000000004% coverage ] ****** [647 done /699 queued / 16 running / 646 errors / 28.000000000000004% coverage ] ****** [647 done /699 queued / 16 running / 646 errors / 28.000000000000004% coverage ] ****** [648 done /700 queued / 16 running / 647 errors / 28.000000000000004% coverage ] ****** [648 done /700 queued / 16 running / 647 errors / 28.000000000000004% coverage ] ****** [649 done /701 queued / 16 running / 648 errors / 28.000000000000004% coverage ] ****** [649 done /701 queued / 16 running / 648 errors / 28.000000000000004% coverage ] ****** [650 done /701 queued / 16 running / 649 errors / 28.000000000000004% coverage ] ****** [650 done /701 queued / 16 running / 649 errors / 28.000000000000004% coverage ] ****** [651 done /703 queued / 16 running / 650 errors / 28.000000000000004% coverage ] ****** [651 done /703 queued / 16 running / 650 errors / 28.000000000000004% coverage ] ****** [652 done /704 queued / 16 running / 651 errors / 28.000000000000004% coverage ] ****** [652 done /704 queued / 16 running / 651 errors / 28.000000000000004% coverage ] ****** [653 done /706 queued / 16 running / 652 errors / 28.000000000000004% coverage ] ****** [653 done /706 queued / 16 running / 652 errors / 28.000000000000004% coverage ] ****** [654 done /707 queued / 16 running / 653 errors / 28.000000000000004% coverage ] ****** [654 done /707 queued / 16 running / 653 errors / 28.000000000000004% coverage ] ****** [655 done /707 queued / 16 running / 654 errors / 28.000000000000004% coverage ] ****** [655 done /707 queued / 16 running / 654 errors / 28.000000000000004% coverage ] ****** [656 done /711 queued / 16 running / 655 errors / 28.000000000000004% coverage ] ****** [656 done /711 queued / 16 running / 655 errors / 28.000000000000004% coverage ] ****** [657 done /712 queued / 16 running / 656 errors / 28.000000000000004% coverage ] ****** [657 done /712 queued / 16 running / 656 errors / 28.000000000000004% coverage ] ****** [658 done /716 queued / 16 running / 657 errors / 28.000000000000004% coverage ] ****** [658 done /716 queued / 16 running / 657 errors / 28.000000000000004% coverage ] ****** [659 done /718 queued / 16 running / 658 errors / 28.000000000000004% coverage ] ****** [659 done /718 queued / 16 running / 658 errors / 28.000000000000004% coverage ] ****** [660 done /719 queued / 16 running / 659 errors / 28.000000000000004% coverage ] ****** [660 done /719 queued / 16 running / 659 errors / 28.000000000000004% coverage ] ****** [661 done /720 queued / 16 running / 660 errors / 28.000000000000004% coverage ] ****** [661 done /720 queued / 16 running / 660 errors / 28.000000000000004% coverage ] ****** [662 done /721 queued / 16 running / 661 errors / 28.000000000000004% coverage ] ****** [662 done /721 queued / 16 running / 661 errors / 28.000000000000004% coverage ] ****** [663 done /722 queued / 16 running / 662 errors / 28.000000000000004% coverage ] ****** [663 done /722 queued / 16 running / 662 errors / 28.000000000000004% coverage ] ****** [664 done /723 queued / 16 running / 663 errors / 28.000000000000004% coverage ] ****** [664 done /723 queued / 16 running / 663 errors / 28.000000000000004% coverage ] ****** [665 done /724 queued / 16 running / 664 errors / 28.000000000000004% coverage ] ****** [665 done /724 queued / 16 running / 664 errors / 28.000000000000004% coverage ] ****** [666 done /724 queued / 16 running / 665 errors / 28.000000000000004% coverage ] ****** [666 done /724 queued / 16 running / 665 errors / 28.000000000000004% coverage ] ****** [667 done /725 queued / 16 running / 666 errors / 28.000000000000004% coverage ] ****** [667 done /725 queued / 16 running / 666 errors / 28.000000000000004% coverage ] ****** [668 done /726 queued / 16 running / 667 errors / 28.000000000000004% coverage ] ****** [668 done /726 queued / 16 running / 667 errors / 28.000000000000004% coverage ] ****** [669 done /728 queued / 16 running / 668 errors / 28.000000000000004% coverage ] ****** [669 done /728 queued / 16 running / 668 errors / 28.000000000000004% coverage ] ****** [670 done /728 queued / 16 running / 669 errors / 28.000000000000004% coverage ] ****** [670 done /728 queued / 16 running / 669 errors / 28.000000000000004% coverage ] ****** [671 done /728 queued / 16 running / 670 errors / 28.000000000000004% coverage ] ****** [671 done /728 queued / 16 running / 670 errors / 28.000000000000004% coverage ] ****** [672 done /728 queued / 16 running / 671 errors / 28.000000000000004% coverage ] ****** [672 done /728 queued / 16 running / 671 errors / 28.000000000000004% coverage ] ****** [673 done /729 queued / 16 running / 672 errors / 28.000000000000004% coverage ] ****** [673 done /729 queued / 16 running / 672 errors / 28.000000000000004% coverage ] ****** [674 done /731 queued / 16 running / 673 errors / 28.000000000000004% coverage ] ****** [674 done /731 queued / 16 running / 673 errors / 28.000000000000004% coverage ] ****** [675 done /731 queued / 16 running / 674 errors / 28.000000000000004% coverage ] ****** [675 done /731 queued / 16 running / 674 errors / 28.000000000000004% coverage ] ****** [676 done /731 queued / 16 running / 675 errors / 28.000000000000004% coverage ] ****** [676 done /731 queued / 16 running / 675 errors / 28.000000000000004% coverage ] ****** [677 done /732 queued / 16 running / 676 errors / 28.000000000000004% coverage ] ****** [677 done /732 queued / 16 running / 676 errors / 28.000000000000004% coverage ] ****** [678 done /733 queued / 16 running / 677 errors / 28.000000000000004% coverage ] ****** [678 done /733 queued / 16 running / 677 errors / 28.000000000000004% coverage ] ****** [679 done /733 queued / 16 running / 678 errors / 28.000000000000004% coverage ] ****** [679 done /733 queued / 16 running / 678 errors / 28.000000000000004% coverage ] ****** [680 done /733 queued / 16 running / 679 errors / 28.000000000000004% coverage ] ****** [680 done /733 queued / 16 running / 679 errors / 28.000000000000004% coverage ] ****** [681 done /734 queued / 16 running / 680 errors / 28.000000000000004% coverage ] ****** [681 done /734 queued / 16 running / 680 errors / 28.000000000000004% coverage ] ****** [682 done /736 queued / 16 running / 681 errors / 28.000000000000004% coverage ] ****** [682 done /736 queued / 16 running / 681 errors / 28.000000000000004% coverage ] ****** [683 done /739 queued / 16 running / 682 errors / 28.000000000000004% coverage ] ****** [683 done /739 queued / 16 running / 682 errors / 28.000000000000004% coverage ] ****** [684 done /739 queued / 16 running / 683 errors / 28.000000000000004% coverage ] ****** [684 done /739 queued / 16 running / 683 errors / 28.000000000000004% coverage ] ****** [685 done /743 queued / 16 running / 684 errors / 28.000000000000004% coverage ] ****** [685 done /743 queued / 16 running / 684 errors / 28.000000000000004% coverage ] ****** [686 done /744 queued / 16 running / 685 errors / 28.000000000000004% coverage ] ****** [686 done /744 queued / 16 running / 685 errors / 28.000000000000004% coverage ] ****** [687 done /748 queued / 16 running / 686 errors / 28.000000000000004% coverage ] ****** [687 done /748 queued / 16 running / 686 errors / 28.000000000000004% coverage ] ****** [688 done /749 queued / 16 running / 687 errors / 28.000000000000004% coverage ] ****** [688 done /749 queued / 16 running / 687 errors / 28.000000000000004% coverage ] ****** [689 done /752 queued / 16 running / 688 errors / 28.000000000000004% coverage ] ****** [689 done /752 queued / 16 running / 688 errors / 28.000000000000004% coverage ] ****** [690 done /752 queued / 16 running / 689 errors / 28.000000000000004% coverage ] ****** [690 done /752 queued / 16 running / 689 errors / 28.000000000000004% coverage ] ****** [691 done /752 queued / 16 running / 690 errors / 28.000000000000004% coverage ] ****** [691 done /752 queued / 16 running / 690 errors / 28.000000000000004% coverage ] ****** [692 done /753 queued / 16 running / 691 errors / 28.000000000000004% coverage ] ****** [692 done /753 queued / 16 running / 691 errors / 28.000000000000004% coverage ] ****** [693 done /754 queued / 16 running / 692 errors / 28.000000000000004% coverage ] ****** [693 done /754 queued / 16 running / 692 errors / 28.000000000000004% coverage ] ****** [694 done /755 queued / 16 running / 693 errors / 28.000000000000004% coverage ] ****** [694 done /755 queued / 16 running / 693 errors / 28.000000000000004% coverage ] ****** [695 done /756 queued / 16 running / 694 errors / 28.000000000000004% coverage ] ****** [695 done /756 queued / 16 running / 694 errors / 28.000000000000004% coverage ] ****** [696 done /758 queued / 16 running / 695 errors / 28.000000000000004% coverage ] ****** [696 done /758 queued / 16 running / 695 errors / 28.000000000000004% coverage ] ****** [697 done /759 queued / 16 running / 696 errors / 28.000000000000004% coverage ] ****** [697 done /759 queued / 16 running / 696 errors / 28.000000000000004% coverage ] ****** [698 done /759 queued / 16 running / 697 errors / 28.000000000000004% coverage ] ****** [698 done /759 queued / 16 running / 697 errors / 28.000000000000004% coverage ] ****** [699 done /760 queued / 16 running / 698 errors / 28.000000000000004% coverage ] ****** [699 done /760 queued / 16 running / 698 errors / 28.000000000000004% coverage ] ****** [700 done /760 queued / 16 running / 699 errors / 28.000000000000004% coverage ] ****** [700 done /760 queued / 16 running / 699 errors / 28.000000000000004% coverage ] ****** [701 done /762 queued / 16 running / 700 errors / 28.000000000000004% coverage ] ****** [701 done /762 queued / 16 running / 700 errors / 28.000000000000004% coverage ] ****** [702 done /763 queued / 16 running / 701 errors / 28.000000000000004% coverage ] ****** [702 done /763 queued / 16 running / 701 errors / 28.000000000000004% coverage ] ****** [703 done /764 queued / 16 running / 702 errors / 28.000000000000004% coverage ] ****** [703 done /764 queued / 16 running / 702 errors / 28.000000000000004% coverage ] ****** [704 done /764 queued / 16 running / 703 errors / 28.000000000000004% coverage ] ****** [704 done /764 queued / 16 running / 703 errors / 28.000000000000004% coverage ] ****** [705 done /764 queued / 16 running / 704 errors / 28.000000000000004% coverage ] ****** [705 done /764 queued / 16 running / 704 errors / 28.000000000000004% coverage ] ****** [706 done /765 queued / 16 running / 705 errors / 28.000000000000004% coverage ] ****** [706 done /765 queued / 16 running / 705 errors / 28.000000000000004% coverage ] ****** [707 done /765 queued / 16 running / 706 errors / 28.000000000000004% coverage ] ****** [707 done /765 queued / 16 running / 706 errors / 28.000000000000004% coverage ] ****** [708 done /765 queued / 16 running / 707 errors / 28.000000000000004% coverage ] ****** [708 done /765 queued / 16 running / 707 errors / 28.000000000000004% coverage ] ****** [709 done /766 queued / 16 running / 708 errors / 28.000000000000004% coverage ] ****** [709 done /766 queued / 16 running / 708 errors / 28.000000000000004% coverage ] ****** [710 done /766 queued / 16 running / 709 errors / 28.000000000000004% coverage ] ****** [710 done /766 queued / 16 running / 709 errors / 28.000000000000004% coverage ] ****** [711 done /767 queued / 16 running / 710 errors / 28.000000000000004% coverage ] ****** [711 done /767 queued / 16 running / 710 errors / 28.000000000000004% coverage ] ****** [712 done /769 queued / 16 running / 711 errors / 28.000000000000004% coverage ] ****** [712 done /769 queued / 16 running / 711 errors / 28.000000000000004% coverage ] ****** [713 done /772 queued / 16 running / 712 errors / 28.000000000000004% coverage ] ****** [713 done /772 queued / 16 running / 712 errors / 28.000000000000004% coverage ] ****** [714 done /772 queued / 16 running / 713 errors / 28.000000000000004% coverage ] ****** [714 done /772 queued / 16 running / 713 errors / 28.000000000000004% coverage ] ****** [715 done /772 queued / 16 running / 714 errors / 28.000000000000004% coverage ] ****** [715 done /772 queued / 16 running / 714 errors / 28.000000000000004% coverage ] ****** [716 done /772 queued / 16 running / 715 errors / 28.000000000000004% coverage ] ****** [716 done /772 queued / 16 running / 715 errors / 28.000000000000004% coverage ] ****** [717 done /772 queued / 16 running / 716 errors / 28.000000000000004% coverage ] ****** [717 done /772 queued / 16 running / 716 errors / 28.000000000000004% coverage ] ****** [718 done /772 queued / 16 running / 717 errors / 28.000000000000004% coverage ] ****** [718 done /772 queued / 16 running / 717 errors / 28.000000000000004% coverage ] ****** [719 done /773 queued / 16 running / 718 errors / 28.000000000000004% coverage ] ****** [719 done /773 queued / 16 running / 718 errors / 28.000000000000004% coverage ] ****** [720 done /777 queued / 16 running / 719 errors / 28.000000000000004% coverage ] ****** [720 done /777 queued / 16 running / 719 errors / 28.000000000000004% coverage ] ****** [721 done /779 queued / 16 running / 720 errors / 28.000000000000004% coverage ] ****** [721 done /779 queued / 16 running / 720 errors / 28.000000000000004% coverage ] ****** [722 done /780 queued / 16 running / 721 errors / 28.000000000000004% coverage ] ****** [722 done /780 queued / 16 running / 721 errors / 28.000000000000004% coverage ] ****** [723 done /784 queued / 16 running / 722 errors / 28.000000000000004% coverage ] ****** [723 done /784 queued / 16 running / 722 errors / 28.000000000000004% coverage ] ****** [724 done /785 queued / 16 running / 723 errors / 28.000000000000004% coverage ] ****** [724 done /785 queued / 16 running / 723 errors / 28.000000000000004% coverage ] ****** [725 done /786 queued / 16 running / 724 errors / 28.000000000000004% coverage ] ****** [725 done /786 queued / 16 running / 724 errors / 28.000000000000004% coverage ] ****** [726 done /787 queued / 16 running / 725 errors / 28.000000000000004% coverage ] ****** [726 done /787 queued / 16 running / 725 errors / 28.000000000000004% coverage ] ****** [727 done /788 queued / 16 running / 726 errors / 28.000000000000004% coverage ] ****** [727 done /788 queued / 16 running / 726 errors / 28.000000000000004% coverage ] ****** [728 done /791 queued / 16 running / 727 errors / 28.000000000000004% coverage ] ****** [728 done /791 queued / 16 running / 727 errors / 28.000000000000004% coverage ] ****** [729 done /794 queued / 16 running / 728 errors / 28.000000000000004% coverage ] ****** [729 done /794 queued / 16 running / 728 errors / 28.000000000000004% coverage ] ****** [730 done /796 queued / 16 running / 729 errors / 28.000000000000004% coverage ] ****** [730 done /796 queued / 16 running / 729 errors / 28.000000000000004% coverage ] ****** [731 done /797 queued / 16 running / 730 errors / 28.000000000000004% coverage ] ****** [731 done /797 queued / 16 running / 730 errors / 28.000000000000004% coverage ] ****** [732 done /798 queued / 16 running / 731 errors / 28.000000000000004% coverage ] ****** [732 done /798 queued / 16 running / 731 errors / 28.000000000000004% coverage ] ****** [733 done /799 queued / 16 running / 732 errors / 28.000000000000004% coverage ] ****** [733 done /799 queued / 16 running / 732 errors / 28.000000000000004% coverage ] ****** [734 done /799 queued / 16 running / 733 errors / 28.000000000000004% coverage ] ****** [734 done /799 queued / 16 running / 733 errors / 28.000000000000004% coverage ] ****** [735 done /800 queued / 16 running / 734 errors / 28.000000000000004% coverage ] ****** [735 done /800 queued / 16 running / 734 errors / 28.000000000000004% coverage ] ****** [736 done /801 queued / 16 running / 735 errors / 28.000000000000004% coverage ] ****** [736 done /801 queued / 16 running / 735 errors / 28.000000000000004% coverage ] ****** [737 done /801 queued / 16 running / 736 errors / 28.000000000000004% coverage ] ****** [737 done /801 queued / 16 running / 736 errors / 28.000000000000004% coverage ] ****** [738 done /801 queued / 16 running / 737 errors / 28.000000000000004% coverage ] ****** [738 done /801 queued / 16 running / 737 errors / 28.000000000000004% coverage ] ****** [739 done /802 queued / 16 running / 738 errors / 28.000000000000004% coverage ] ****** [739 done /802 queued / 16 running / 738 errors / 28.000000000000004% coverage ] ****** [740 done /802 queued / 16 running / 739 errors / 28.000000000000004% coverage ] ****** [740 done /802 queued / 16 running / 739 errors / 28.000000000000004% coverage ] ****** [741 done /802 queued / 16 running / 740 errors / 28.000000000000004% coverage ] ****** [741 done /802 queued / 16 running / 740 errors / 28.000000000000004% coverage ] ****** [742 done /804 queued / 16 running / 741 errors / 28.000000000000004% coverage ] ****** [742 done /804 queued / 16 running / 741 errors / 28.000000000000004% coverage ] ****** [743 done /805 queued / 16 running / 742 errors / 28.000000000000004% coverage ] ****** [743 done /805 queued / 16 running / 742 errors / 28.000000000000004% coverage ] ****** [744 done /805 queued / 16 running / 743 errors / 28.000000000000004% coverage ] ****** [744 done /805 queued / 16 running / 743 errors / 28.000000000000004% coverage ] ****** [745 done /805 queued / 16 running / 744 errors / 28.000000000000004% coverage ] ****** [745 done /805 queued / 16 running / 744 errors / 28.000000000000004% coverage ] ****** [746 done /806 queued / 16 running / 745 errors / 28.000000000000004% coverage ] ****** [746 done /806 queued / 16 running / 745 errors / 28.000000000000004% coverage ] ****** [747 done /806 queued / 16 running / 746 errors / 28.000000000000004% coverage ] ****** [747 done /806 queued / 16 running / 746 errors / 28.000000000000004% coverage ] ****** [748 done /806 queued / 16 running / 747 errors / 28.000000000000004% coverage ] ****** [748 done /806 queued / 16 running / 747 errors / 28.000000000000004% coverage ] ****** [749 done /807 queued / 16 running / 748 errors / 28.000000000000004% coverage ] ****** [749 done /807 queued / 16 running / 748 errors / 28.000000000000004% coverage ] ****** [750 done /808 queued / 16 running / 749 errors / 28.000000000000004% coverage ] ****** [750 done /808 queued / 16 running / 749 errors / 28.000000000000004% coverage ] ****** [751 done /809 queued / 16 running / 750 errors / 28.000000000000004% coverage ] ****** [751 done /809 queued / 16 running / 750 errors / 28.000000000000004% coverage ] ****** [752 done /812 queued / 16 running / 751 errors / 28.000000000000004% coverage ] ****** [752 done /812 queued / 16 running / 751 errors / 28.000000000000004% coverage ] ****** [753 done /816 queued / 16 running / 752 errors / 28.000000000000004% coverage ] ****** [753 done /816 queued / 16 running / 752 errors / 28.000000000000004% coverage ] ****** [754 done /816 queued / 16 running / 753 errors / 28.000000000000004% coverage ] ****** [754 done /816 queued / 16 running / 753 errors / 28.000000000000004% coverage ] ****** [755 done /819 queued / 16 running / 754 errors / 28.000000000000004% coverage ] ****** [755 done /819 queued / 16 running / 754 errors / 28.000000000000004% coverage ] ****** [756 done /820 queued / 16 running / 755 errors / 28.000000000000004% coverage ] ****** [756 done /820 queued / 16 running / 755 errors / 28.000000000000004% coverage ] ****** [757 done /824 queued / 16 running / 756 errors / 28.000000000000004% coverage ] ****** [757 done /824 queued / 16 running / 756 errors / 28.000000000000004% coverage ] ****** [758 done /825 queued / 16 running / 757 errors / 28.000000000000004% coverage ] ****** [758 done /825 queued / 16 running / 757 errors / 28.000000000000004% coverage ] ****** [759 done /826 queued / 16 running / 758 errors / 28.000000000000004% coverage ] ****** [759 done /826 queued / 16 running / 758 errors / 28.000000000000004% coverage ] ****** [760 done /828 queued / 16 running / 759 errors / 28.000000000000004% coverage ] ****** [760 done /828 queued / 16 running / 759 errors / 28.000000000000004% coverage ] ****** [761 done /829 queued / 16 running / 760 errors / 28.000000000000004% coverage ] ****** [761 done /829 queued / 16 running / 760 errors / 28.000000000000004% coverage ] ****** [762 done /831 queued / 16 running / 761 errors / 28.000000000000004% coverage ] ****** [762 done /831 queued / 16 running / 761 errors / 28.000000000000004% coverage ] ****** [763 done /832 queued / 16 running / 762 errors / 28.000000000000004% coverage ] ****** [763 done /832 queued / 16 running / 762 errors / 28.000000000000004% coverage ] ****** [764 done /833 queued / 16 running / 763 errors / 28.000000000000004% coverage ] ****** [764 done /833 queued / 16 running / 763 errors / 28.000000000000004% coverage ] ****** [765 done /835 queued / 16 running / 764 errors / 28.000000000000004% coverage ] ****** [765 done /835 queued / 16 running / 764 errors / 28.000000000000004% coverage ] ****** [766 done /836 queued / 16 running / 765 errors / 28.000000000000004% coverage ] ****** [766 done /836 queued / 16 running / 765 errors / 28.000000000000004% coverage ] ****** [767 done /837 queued / 16 running / 766 errors / 28.000000000000004% coverage ] ****** [767 done /837 queued / 16 running / 766 errors / 28.000000000000004% coverage ] ****** [768 done /838 queued / 16 running / 767 errors / 28.000000000000004% coverage ] ****** [768 done /838 queued / 16 running / 767 errors / 28.000000000000004% coverage ] ****** [769 done /838 queued / 16 running / 768 errors / 28.000000000000004% coverage ] ****** [769 done /838 queued / 16 running / 768 errors / 28.000000000000004% coverage ] ****** [770 done /838 queued / 16 running / 769 errors / 28.000000000000004% coverage ] ****** [770 done /838 queued / 16 running / 769 errors / 28.000000000000004% coverage ] ****** [771 done /839 queued / 16 running / 770 errors / 28.000000000000004% coverage ] ****** [771 done /839 queued / 16 running / 770 errors / 28.000000000000004% coverage ] ****** [772 done /839 queued / 16 running / 771 errors / 28.000000000000004% coverage ] ****** [772 done /839 queued / 16 running / 771 errors / 28.000000000000004% coverage ] ****** [773 done /840 queued / 16 running / 772 errors / 28.000000000000004% coverage ] ****** [773 done /840 queued / 16 running / 772 errors / 28.000000000000004% coverage ] ****** [774 done /842 queued / 16 running / 773 errors / 28.000000000000004% coverage ] ****** [774 done /842 queued / 16 running / 773 errors / 28.000000000000004% coverage ] ****** [775 done /843 queued / 16 running / 774 errors / 28.000000000000004% coverage ] ****** [775 done /843 queued / 16 running / 774 errors / 28.000000000000004% coverage ] ****** [776 done /843 queued / 16 running / 775 errors / 28.000000000000004% coverage ] ****** [776 done /843 queued / 16 running / 775 errors / 28.000000000000004% coverage ] ****** [777 done /843 queued / 16 running / 776 errors / 28.000000000000004% coverage ] ****** [777 done /843 queued / 16 running / 776 errors / 28.000000000000004% coverage ] ****** [778 done /847 queued / 16 running / 777 errors / 28.000000000000004% coverage ] ****** [778 done /847 queued / 16 running / 777 errors / 28.000000000000004% coverage ] ****** [779 done /849 queued / 16 running / 778 errors / 28.000000000000004% coverage ] ****** [779 done /849 queued / 16 running / 778 errors / 28.000000000000004% coverage ] ****** [780 done /849 queued / 16 running / 779 errors / 28.000000000000004% coverage ] ****** [780 done /849 queued / 16 running / 779 errors / 28.000000000000004% coverage ] ****** [781 done /849 queued / 16 running / 780 errors / 28.000000000000004% coverage ] ****** [781 done /849 queued / 16 running / 780 errors / 28.000000000000004% coverage ] ****** [782 done /850 queued / 16 running / 781 errors / 28.000000000000004% coverage ] ****** [782 done /850 queued / 16 running / 781 errors / 28.000000000000004% coverage ] ****** [783 done /854 queued / 16 running / 782 errors / 28.000000000000004% coverage ] ****** [783 done /854 queued / 16 running / 782 errors / 28.000000000000004% coverage ] ****** [784 done /856 queued / 16 running / 783 errors / 28.000000000000004% coverage ] ****** [784 done /856 queued / 16 running / 783 errors / 28.000000000000004% coverage ] ****** [785 done /856 queued / 16 running / 784 errors / 28.000000000000004% coverage ] ****** [785 done /856 queued / 16 running / 784 errors / 28.000000000000004% coverage ] ****** [786 done /861 queued / 16 running / 785 errors / 28.000000000000004% coverage ] ****** [786 done /861 queued / 16 running / 785 errors / 28.000000000000004% coverage ] ****** [787 done /862 queued / 16 running / 786 errors / 28.000000000000004% coverage ] ****** [787 done /862 queued / 16 running / 786 errors / 28.000000000000004% coverage ] ****** [788 done /864 queued / 16 running / 787 errors / 28.000000000000004% coverage ] ****** [788 done /864 queued / 16 running / 787 errors / 28.000000000000004% coverage ] ****** [789 done /866 queued / 16 running / 788 errors / 28.000000000000004% coverage ] ****** [789 done /866 queued / 16 running / 788 errors / 28.000000000000004% coverage ] ****** [790 done /866 queued / 16 running / 789 errors / 28.000000000000004% coverage ] ****** [790 done /866 queued / 16 running / 789 errors / 28.000000000000004% coverage ] ****** [791 done /868 queued / 16 running / 790 errors / 28.000000000000004% coverage ] ****** [791 done /868 queued / 16 running / 790 errors / 28.000000000000004% coverage ] ****** [792 done /868 queued / 16 running / 791 errors / 28.000000000000004% coverage ] ****** [792 done /868 queued / 16 running / 791 errors / 28.000000000000004% coverage ] ****** [793 done /869 queued / 16 running / 792 errors / 28.000000000000004% coverage ] ****** [793 done /869 queued / 16 running / 792 errors / 28.000000000000004% coverage ] ****** [794 done /870 queued / 16 running / 793 errors / 28.000000000000004% coverage ] ****** [794 done /870 queued / 16 running / 793 errors / 28.000000000000004% coverage ] ****** [795 done /870 queued / 16 running / 794 errors / 28.000000000000004% coverage ] ****** [795 done /870 queued / 16 running / 794 errors / 28.000000000000004% coverage ] ****** [796 done /871 queued / 16 running / 795 errors / 28.000000000000004% coverage ] ****** [796 done /871 queued / 16 running / 795 errors / 28.000000000000004% coverage ] ****** [797 done /875 queued / 16 running / 796 errors / 28.000000000000004% coverage ] ****** [797 done /875 queued / 16 running / 796 errors / 28.000000000000004% coverage ] ****** [798 done /875 queued / 16 running / 797 errors / 28.000000000000004% coverage ] ****** [798 done /875 queued / 16 running / 797 errors / 28.000000000000004% coverage ] ****** [799 done /876 queued / 16 running / 798 errors / 28.000000000000004% coverage ] ****** [799 done /876 queued / 16 running / 798 errors / 28.000000000000004% coverage ] ****** [800 done /877 queued / 16 running / 799 errors / 28.000000000000004% coverage ] ****** [800 done /877 queued / 16 running / 799 errors / 28.000000000000004% coverage ] ****** [801 done /877 queued / 16 running / 800 errors / 28.000000000000004% coverage ] ****** [801 done /877 queued / 16 running / 800 errors / 28.000000000000004% coverage ] ****** [802 done /879 queued / 16 running / 801 errors / 28.000000000000004% coverage ] ****** [802 done /879 queued / 16 running / 801 errors / 28.000000000000004% coverage ] ****** [803 done /880 queued / 16 running / 802 errors / 28.000000000000004% coverage ] ****** [803 done /880 queued / 16 running / 802 errors / 28.000000000000004% coverage ] ****** [804 done /881 queued / 16 running / 803 errors / 28.000000000000004% coverage ] ****** [804 done /881 queued / 16 running / 803 errors / 28.000000000000004% coverage ] ****** [805 done /881 queued / 16 running / 804 errors / 28.000000000000004% coverage ] ****** [805 done /881 queued / 16 running / 804 errors / 28.000000000000004% coverage ] ****** [806 done /883 queued / 16 running / 805 errors / 28.000000000000004% coverage ] ****** [806 done /883 queued / 16 running / 805 errors / 28.000000000000004% coverage ] ****** [807 done /884 queued / 16 running / 806 errors / 28.000000000000004% coverage ] ****** [807 done /884 queued / 16 running / 806 errors / 28.000000000000004% coverage ] ****** [808 done /884 queued / 16 running / 807 errors / 28.000000000000004% coverage ] ****** [808 done /884 queued / 16 running / 807 errors / 28.000000000000004% coverage ] ****** [809 done /884 queued / 16 running / 808 errors / 28.000000000000004% coverage ] ****** [809 done /884 queued / 16 running / 808 errors / 28.000000000000004% coverage ] ****** [810 done /884 queued / 16 running / 809 errors / 28.000000000000004% coverage ] ****** [810 done /884 queued / 16 running / 809 errors / 28.000000000000004% coverage ] ****** [811 done /886 queued / 16 running / 810 errors / 28.000000000000004% coverage ] ****** [811 done /886 queued / 16 running / 810 errors / 28.000000000000004% coverage ] ****** [812 done /886 queued / 16 running / 811 errors / 28.000000000000004% coverage ] ****** [812 done /886 queued / 16 running / 811 errors / 28.000000000000004% coverage ] ****** [813 done /887 queued / 16 running / 812 errors / 28.000000000000004% coverage ] ****** [813 done /887 queued / 16 running / 812 errors / 28.000000000000004% coverage ] ****** [814 done /887 queued / 16 running / 813 errors / 28.000000000000004% coverage ] ****** [814 done /887 queued / 16 running / 813 errors / 28.000000000000004% coverage ] ****** [815 done /888 queued / 16 running / 814 errors / 28.000000000000004% coverage ] ****** [815 done /888 queued / 16 running / 814 errors / 28.000000000000004% coverage ] ****** [816 done /889 queued / 16 running / 815 errors / 28.000000000000004% coverage ] ****** [816 done /889 queued / 16 running / 815 errors / 28.000000000000004% coverage ] ****** [817 done /890 queued / 16 running / 816 errors / 28.000000000000004% coverage ] ****** [817 done /890 queued / 16 running / 816 errors / 28.000000000000004% coverage ] ****** [818 done /892 queued / 16 running / 817 errors / 28.000000000000004% coverage ] ****** [818 done /892 queued / 16 running / 817 errors / 28.000000000000004% coverage ] ****** [819 done /892 queued / 16 running / 818 errors / 28.000000000000004% coverage ] ****** [819 done /892 queued / 16 running / 818 errors / 28.000000000000004% coverage ] ****** [820 done /892 queued / 16 running / 819 errors / 28.000000000000004% coverage ] ****** [820 done /892 queued / 16 running / 819 errors / 28.000000000000004% coverage ] ****** [821 done /893 queued / 16 running / 820 errors / 28.000000000000004% coverage ] ****** [821 done /893 queued / 16 running / 820 errors / 28.000000000000004% coverage ] ****** [822 done /897 queued / 16 running / 821 errors / 28.000000000000004% coverage ] ****** [822 done /897 queued / 16 running / 821 errors / 28.000000000000004% coverage ] ****** [823 done /898 queued / 16 running / 822 errors / 28.000000000000004% coverage ] ****** [823 done /898 queued / 16 running / 822 errors / 28.000000000000004% coverage ] ****** [824 done /899 queued / 16 running / 823 errors / 28.000000000000004% coverage ] ****** [824 done /899 queued / 16 running / 823 errors / 28.000000000000004% coverage ] ****** [825 done /900 queued / 16 running / 824 errors / 28.000000000000004% coverage ] ****** [825 done /900 queued / 16 running / 824 errors / 28.000000000000004% coverage ] ****** [826 done /901 queued / 16 running / 825 errors / 28.000000000000004% coverage ] ****** [826 done /901 queued / 16 running / 825 errors / 28.000000000000004% coverage ] ****** [827 done /901 queued / 16 running / 826 errors / 28.000000000000004% coverage ] ****** [827 done /901 queued / 16 running / 826 errors / 28.000000000000004% coverage ] ****** [828 done /901 queued / 16 running / 827 errors / 28.000000000000004% coverage ] ****** [828 done /901 queued / 16 running / 827 errors / 28.000000000000004% coverage ] ****** [829 done /902 queued / 16 running / 828 errors / 28.000000000000004% coverage ] ****** [829 done /902 queued / 16 running / 828 errors / 28.000000000000004% coverage ] ****** [830 done /903 queued / 16 running / 829 errors / 28.000000000000004% coverage ] ****** [830 done /903 queued / 16 running / 829 errors / 28.000000000000004% coverage ] ****** [831 done /904 queued / 16 running / 830 errors / 28.000000000000004% coverage ] ****** [831 done /904 queued / 16 running / 830 errors / 28.000000000000004% coverage ] ****** [832 done /906 queued / 16 running / 831 errors / 28.000000000000004% coverage ] ****** [832 done /906 queued / 16 running / 831 errors / 28.000000000000004% coverage ] ****** [833 done /907 queued / 16 running / 832 errors / 28.000000000000004% coverage ] ****** [833 done /907 queued / 16 running / 832 errors / 28.000000000000004% coverage ] ****** [834 done /908 queued / 16 running / 833 errors / 28.000000000000004% coverage ] ****** [834 done /908 queued / 16 running / 833 errors / 28.000000000000004% coverage ] ****** [835 done /908 queued / 16 running / 834 errors / 28.000000000000004% coverage ] ****** [835 done /908 queued / 16 running / 834 errors / 28.000000000000004% coverage ] ****** [836 done /909 queued / 16 running / 835 errors / 28.000000000000004% coverage ] ****** [836 done /909 queued / 16 running / 835 errors / 28.000000000000004% coverage ] ****** [837 done /910 queued / 16 running / 836 errors / 28.000000000000004% coverage ] ****** [837 done /910 queued / 16 running / 836 errors / 28.000000000000004% coverage ] ****** [838 done /912 queued / 16 running / 837 errors / 28.000000000000004% coverage ] ****** [838 done /912 queued / 16 running / 837 errors / 28.000000000000004% coverage ] ****** [839 done /914 queued / 16 running / 838 errors / 28.000000000000004% coverage ] ****** [839 done /914 queued / 16 running / 838 errors / 28.000000000000004% coverage ] ****** [840 done /915 queued / 16 running / 839 errors / 28.000000000000004% coverage ] ****** [840 done /915 queued / 16 running / 839 errors / 28.000000000000004% coverage ] ****** [841 done /916 queued / 16 running / 840 errors / 28.000000000000004% coverage ] ****** [841 done /916 queued / 16 running / 840 errors / 28.000000000000004% coverage ] ****** [842 done /917 queued / 16 running / 841 errors / 28.000000000000004% coverage ] ****** [842 done /917 queued / 16 running / 841 errors / 28.000000000000004% coverage ] ****** [843 done /918 queued / 16 running / 842 errors / 28.000000000000004% coverage ] ****** [843 done /918 queued / 16 running / 842 errors / 28.000000000000004% coverage ] ****** [844 done /922 queued / 16 running / 843 errors / 28.000000000000004% coverage ] ****** [844 done /922 queued / 16 running / 843 errors / 28.000000000000004% coverage ] ****** [845 done /923 queued / 16 running / 844 errors / 28.000000000000004% coverage ] ****** [845 done /923 queued / 16 running / 844 errors / 28.000000000000004% coverage ] ****** [846 done /927 queued / 16 running / 845 errors / 28.000000000000004% coverage ] ****** [846 done /927 queued / 16 running / 845 errors / 28.000000000000004% coverage ] ****** [847 done /931 queued / 16 running / 846 errors / 28.000000000000004% coverage ] ****** [847 done /931 queued / 16 running / 846 errors / 28.000000000000004% coverage ] ****** [848 done /932 queued / 16 running / 847 errors / 28.000000000000004% coverage ] ****** [848 done /932 queued / 16 running / 847 errors / 28.000000000000004% coverage ] ****** [849 done /936 queued / 16 running / 848 errors / 28.000000000000004% coverage ] ****** [849 done /936 queued / 16 running / 848 errors / 28.000000000000004% coverage ] ****** [850 done /938 queued / 16 running / 849 errors / 28.000000000000004% coverage ] ****** [850 done /938 queued / 16 running / 849 errors / 28.000000000000004% coverage ] ****** [851 done /939 queued / 16 running / 850 errors / 28.000000000000004% coverage ] ****** [851 done /939 queued / 16 running / 850 errors / 28.000000000000004% coverage ] ****** [852 done /943 queued / 16 running / 851 errors / 28.000000000000004% coverage ] ****** [852 done /943 queued / 16 running / 851 errors / 28.000000000000004% coverage ] ****** [853 done /946 queued / 16 running / 852 errors / 28.000000000000004% coverage ] ****** [853 done /946 queued / 16 running / 852 errors / 28.000000000000004% coverage ] ****** [854 done /947 queued / 16 running / 853 errors / 28.000000000000004% coverage ] ****** [854 done /947 queued / 16 running / 853 errors / 28.000000000000004% coverage ] ****** [855 done /947 queued / 16 running / 854 errors / 28.000000000000004% coverage ] ****** [855 done /947 queued / 16 running / 854 errors / 28.000000000000004% coverage ] ****** [856 done /949 queued / 16 running / 855 errors / 28.000000000000004% coverage ] ****** [856 done /949 queued / 16 running / 855 errors / 28.000000000000004% coverage ] ****** [857 done /950 queued / 16 running / 856 errors / 28.000000000000004% coverage ] ****** [857 done /950 queued / 16 running / 856 errors / 28.000000000000004% coverage ] ****** [858 done /951 queued / 16 running / 857 errors / 28.000000000000004% coverage ] ****** [858 done /951 queued / 16 running / 857 errors / 28.000000000000004% coverage ] ****** [859 done /953 queued / 16 running / 858 errors / 28.000000000000004% coverage ] ****** [859 done /953 queued / 16 running / 858 errors / 28.000000000000004% coverage ] ****** [860 done /953 queued / 16 running / 859 errors / 28.000000000000004% coverage ] ****** [860 done /953 queued / 16 running / 859 errors / 28.000000000000004% coverage ] ****** [861 done /954 queued / 16 running / 860 errors / 28.000000000000004% coverage ] ****** [861 done /954 queued / 16 running / 860 errors / 28.000000000000004% coverage ] ****** [862 done /955 queued / 16 running / 861 errors / 28.000000000000004% coverage ] ****** [862 done /955 queued / 16 running / 861 errors / 28.000000000000004% coverage ] ****** [863 done /956 queued / 16 running / 862 errors / 28.000000000000004% coverage ] ****** [863 done /956 queued / 16 running / 862 errors / 28.000000000000004% coverage ] ****** [864 done /956 queued / 16 running / 863 errors / 28.000000000000004% coverage ] ****** [864 done /956 queued / 16 running / 863 errors / 28.000000000000004% coverage ] ****** [865 done /956 queued / 16 running / 864 errors / 28.000000000000004% coverage ] ****** [865 done /956 queued / 16 running / 864 errors / 28.000000000000004% coverage ] ****** [866 done /956 queued / 16 running / 865 errors / 28.000000000000004% coverage ] ****** [866 done /956 queued / 16 running / 865 errors / 28.000000000000004% coverage ] ****** [867 done /957 queued / 16 running / 866 errors / 28.000000000000004% coverage ] ****** [867 done /957 queued / 16 running / 866 errors / 28.000000000000004% coverage ] ****** [868 done /957 queued / 16 running / 867 errors / 28.000000000000004% coverage ] ****** [868 done /957 queued / 16 running / 867 errors / 28.000000000000004% coverage ] ****** [869 done /957 queued / 16 running / 868 errors / 28.000000000000004% coverage ] ****** [869 done /957 queued / 16 running / 868 errors / 28.000000000000004% coverage ] ****** [870 done /957 queued / 16 running / 869 errors / 28.000000000000004% coverage ] ****** [870 done /957 queued / 16 running / 869 errors / 28.000000000000004% coverage ] ****** [871 done /957 queued / 16 running / 870 errors / 28.000000000000004% coverage ] ****** [871 done /957 queued / 16 running / 870 errors / 28.000000000000004% coverage ] ****** [872 done /957 queued / 16 running / 871 errors / 28.000000000000004% coverage ] ****** [872 done /957 queued / 16 running / 871 errors / 28.000000000000004% coverage ] ****** [873 done /958 queued / 16 running / 872 errors / 28.000000000000004% coverage ] ****** [873 done /958 queued / 16 running / 872 errors / 28.000000000000004% coverage ] ****** [874 done /959 queued / 16 running / 873 errors / 28.000000000000004% coverage ] ****** [874 done /959 queued / 16 running / 873 errors / 28.000000000000004% coverage ] ****** [875 done /960 queued / 16 running / 874 errors / 28.000000000000004% coverage ] ****** [875 done /960 queued / 16 running / 874 errors / 28.000000000000004% coverage ] ****** [876 done /961 queued / 16 running / 875 errors / 28.000000000000004% coverage ] ****** [876 done /961 queued / 16 running / 875 errors / 28.000000000000004% coverage ] ****** [877 done /963 queued / 16 running / 876 errors / 28.000000000000004% coverage ] ****** [877 done /963 queued / 16 running / 876 errors / 28.000000000000004% coverage ] ****** [878 done /963 queued / 16 running / 877 errors / 28.000000000000004% coverage ] ****** [878 done /963 queued / 16 running / 877 errors / 28.000000000000004% coverage ] ****** [879 done /966 queued / 16 running / 878 errors / 28.000000000000004% coverage ] ****** [879 done /966 queued / 16 running / 878 errors / 28.000000000000004% coverage ] ****** [880 done /966 queued / 16 running / 879 errors / 28.000000000000004% coverage ] ****** [880 done /966 queued / 16 running / 879 errors / 28.000000000000004% coverage ] ****** [881 done /966 queued / 16 running / 880 errors / 28.000000000000004% coverage ] ****** [881 done /966 queued / 16 running / 880 errors / 28.000000000000004% coverage ] ****** [882 done /966 queued / 16 running / 881 errors / 28.000000000000004% coverage ] ****** [882 done /966 queued / 16 running / 881 errors / 28.000000000000004% coverage ] ****** [883 done /966 queued / 16 running / 882 errors / 28.000000000000004% coverage ] ****** [883 done /966 queued / 16 running / 882 errors / 28.000000000000004% coverage ] ****** [884 done /967 queued / 16 running / 883 errors / 28.000000000000004% coverage ] ****** [884 done /967 queued / 16 running / 883 errors / 28.000000000000004% coverage ] ****** [885 done /968 queued / 16 running / 884 errors / 28.000000000000004% coverage ] ****** [885 done /968 queued / 16 running / 884 errors / 28.000000000000004% coverage ] ****** [886 done /970 queued / 16 running / 885 errors / 28.000000000000004% coverage ] ****** [886 done /970 queued / 16 running / 885 errors / 28.000000000000004% coverage ] ****** [887 done /970 queued / 16 running / 886 errors / 28.000000000000004% coverage ] ****** [887 done /970 queued / 16 running / 886 errors / 28.000000000000004% coverage ] ****** [888 done /972 queued / 16 running / 887 errors / 28.000000000000004% coverage ] ****** [888 done /972 queued / 16 running / 887 errors / 28.000000000000004% coverage ] ****** [889 done /973 queued / 16 running / 888 errors / 28.000000000000004% coverage ] ****** [889 done /973 queued / 16 running / 888 errors / 28.000000000000004% coverage ] ****** [890 done /974 queued / 16 running / 889 errors / 28.000000000000004% coverage ] ****** [890 done /974 queued / 16 running / 889 errors / 28.000000000000004% coverage ] ****** [891 done /977 queued / 16 running / 890 errors / 28.000000000000004% coverage ] ****** [891 done /977 queued / 16 running / 890 errors / 28.000000000000004% coverage ] ****** [892 done /979 queued / 16 running / 891 errors / 28.000000000000004% coverage ] ****** [892 done /979 queued / 16 running / 891 errors / 28.000000000000004% coverage ] ****** [893 done /980 queued / 16 running / 892 errors / 28.000000000000004% coverage ] ****** [893 done /980 queued / 16 running / 892 errors / 28.000000000000004% coverage ] ****** [894 done /981 queued / 16 running / 893 errors / 28.000000000000004% coverage ] ****** [894 done /981 queued / 16 running / 893 errors / 28.000000000000004% coverage ] ****** [895 done /982 queued / 16 running / 894 errors / 28.000000000000004% coverage ] ****** [895 done /982 queued / 16 running / 894 errors / 28.000000000000004% coverage ] ****** [896 done /983 queued / 16 running / 895 errors / 28.000000000000004% coverage ] ****** [896 done /983 queued / 16 running / 895 errors / 28.000000000000004% coverage ] ****** [897 done /983 queued / 16 running / 896 errors / 28.000000000000004% coverage ] ****** [897 done /983 queued / 16 running / 896 errors / 28.000000000000004% coverage ] ****** [898 done /983 queued / 16 running / 897 errors / 28.000000000000004% coverage ] ****** [898 done /983 queued / 16 running / 897 errors / 28.000000000000004% coverage ] ****** [899 done /984 queued / 16 running / 898 errors / 28.000000000000004% coverage ] ****** [899 done /984 queued / 16 running / 898 errors / 28.000000000000004% coverage ] ****** [900 done /985 queued / 16 running / 899 errors / 28.000000000000004% coverage ] ****** [900 done /985 queued / 16 running / 899 errors / 28.000000000000004% coverage ] ****** [901 done /986 queued / 16 running / 900 errors / 28.000000000000004% coverage ] ****** [901 done /986 queued / 16 running / 900 errors / 28.000000000000004% coverage ] ****** [902 done /987 queued / 16 running / 901 errors / 28.000000000000004% coverage ] ****** [902 done /987 queued / 16 running / 901 errors / 28.000000000000004% coverage ] ****** [903 done /987 queued / 16 running / 902 errors / 28.000000000000004% coverage ] ****** [903 done /987 queued / 16 running / 902 errors / 28.000000000000004% coverage ] ****** [904 done /988 queued / 16 running / 903 errors / 28.000000000000004% coverage ] ****** [904 done /988 queued / 16 running / 903 errors / 28.000000000000004% coverage ] ****** [905 done /989 queued / 16 running / 904 errors / 28.000000000000004% coverage ] ****** [905 done /989 queued / 16 running / 904 errors / 28.000000000000004% coverage ] ****** [906 done /989 queued / 16 running / 905 errors / 28.000000000000004% coverage ] ****** [906 done /989 queued / 16 running / 905 errors / 28.000000000000004% coverage ] ****** [907 done /991 queued / 16 running / 906 errors / 28.000000000000004% coverage ] ****** [907 done /991 queued / 16 running / 906 errors / 28.000000000000004% coverage ] ****** [908 done /993 queued / 16 running / 907 errors / 28.000000000000004% coverage ] ****** [908 done /993 queued / 16 running / 907 errors / 28.000000000000004% coverage ] ****** [909 done /994 queued / 16 running / 908 errors / 28.000000000000004% coverage ] ****** [909 done /994 queued / 16 running / 908 errors / 28.000000000000004% coverage ] ****** [910 done /995 queued / 16 running / 909 errors / 28.000000000000004% coverage ] ****** [910 done /995 queued / 16 running / 909 errors / 28.000000000000004% coverage ] ****** [911 done /996 queued / 16 running / 910 errors / 28.000000000000004% coverage ] ****** [911 done /996 queued / 16 running / 910 errors / 28.000000000000004% coverage ] ****** [912 done /999 queued / 16 running / 911 errors / 28.000000000000004% coverage ] ****** [912 done /999 queued / 16 running / 911 errors / 28.000000000000004% coverage ] ****** [913 done /1000 queued / 16 running / 912 errors / 28.000000000000004% coverage ] ****** [913 done /1000 queued / 16 running / 912 errors / 28.000000000000004% coverage ] ****** [914 done /1002 queued / 16 running / 913 errors / 28.000000000000004% coverage ] ****** [914 done /1002 queued / 16 running / 913 errors / 28.000000000000004% coverage ] ****** [915 done /1003 queued / 16 running / 914 errors / 28.000000000000004% coverage ] ****** [915 done /1003 queued / 16 running / 914 errors / 28.000000000000004% coverage ] ****** [916 done /1004 queued / 16 running / 915 errors / 28.000000000000004% coverage ] ****** [916 done /1004 queued / 16 running / 915 errors / 28.000000000000004% coverage ] ****** [917 done /1005 queued / 16 running / 916 errors / 28.000000000000004% coverage ] ****** [917 done /1005 queued / 16 running / 916 errors / 28.000000000000004% coverage ] ****** [918 done /1006 queued / 16 running / 917 errors / 28.000000000000004% coverage ] ****** [918 done /1006 queued / 16 running / 917 errors / 28.000000000000004% coverage ] ****** [919 done /1007 queued / 16 running / 918 errors / 28.000000000000004% coverage ] ****** [919 done /1007 queued / 16 running / 918 errors / 28.000000000000004% coverage ] ****** [920 done /1008 queued / 16 running / 919 errors / 28.000000000000004% coverage ] ****** [920 done /1008 queued / 16 running / 919 errors / 28.000000000000004% coverage ] ****** [921 done /1009 queued / 16 running / 920 errors / 28.000000000000004% coverage ] ****** [921 done /1009 queued / 16 running / 920 errors / 28.000000000000004% coverage ] ****** [922 done /1012 queued / 16 running / 921 errors / 28.000000000000004% coverage ] ****** [922 done /1012 queued / 16 running / 921 errors / 28.000000000000004% coverage ] ****** [923 done /1014 queued / 16 running / 922 errors / 28.000000000000004% coverage ] ****** [923 done /1014 queued / 16 running / 922 errors / 28.000000000000004% coverage ] ****** [924 done /1016 queued / 16 running / 923 errors / 28.000000000000004% coverage ] ****** [924 done /1016 queued / 16 running / 923 errors / 28.000000000000004% coverage ] ****** [925 done /1018 queued / 16 running / 924 errors / 28.000000000000004% coverage ] ****** [925 done /1018 queued / 16 running / 924 errors / 28.000000000000004% coverage ] ****** [926 done /1021 queued / 16 running / 925 errors / 28.000000000000004% coverage ] ****** [926 done /1021 queued / 16 running / 925 errors / 28.000000000000004% coverage ] ****** [927 done /1025 queued / 16 running / 926 errors / 28.000000000000004% coverage ] ****** [927 done /1025 queued / 16 running / 926 errors / 28.000000000000004% coverage ] ****** [928 done /1025 queued / 16 running / 927 errors / 28.000000000000004% coverage ] ****** [928 done /1025 queued / 16 running / 927 errors / 28.000000000000004% coverage ] ****** [929 done /1026 queued / 16 running / 928 errors / 28.000000000000004% coverage ] ****** [929 done /1026 queued / 16 running / 928 errors / 28.000000000000004% coverage ] ****** [930 done /1027 queued / 16 running / 929 errors / 28.000000000000004% coverage ] ****** [930 done /1027 queued / 16 running / 929 errors / 28.000000000000004% coverage ] ****** [931 done /1028 queued / 16 running / 930 errors / 28.000000000000004% coverage ] ****** [931 done /1028 queued / 16 running / 930 errors / 28.000000000000004% coverage ] ****** [932 done /1032 queued / 16 running / 931 errors / 28.000000000000004% coverage ] ****** [932 done /1032 queued / 16 running / 931 errors / 28.000000000000004% coverage ] ****** [933 done /1032 queued / 16 running / 932 errors / 28.000000000000004% coverage ] ****** [933 done /1032 queued / 16 running / 932 errors / 28.000000000000004% coverage ] ****** [934 done /1033 queued / 16 running / 933 errors / 28.000000000000004% coverage ] ****** [934 done /1033 queued / 16 running / 933 errors / 28.000000000000004% coverage ] ****** [935 done /1034 queued / 16 running / 934 errors / 28.000000000000004% coverage ] ****** [935 done /1034 queued / 16 running / 934 errors / 28.000000000000004% coverage ] ****** [936 done /1037 queued / 16 running / 935 errors / 28.000000000000004% coverage ] ****** [936 done /1037 queued / 16 running / 935 errors / 28.000000000000004% coverage ] ****** [937 done /1041 queued / 16 running / 936 errors / 28.000000000000004% coverage ] ****** [937 done /1041 queued / 16 running / 936 errors / 28.000000000000004% coverage ] ****** [938 done /1044 queued / 16 running / 937 errors / 28.000000000000004% coverage ] ****** [938 done /1044 queued / 16 running / 937 errors / 28.000000000000004% coverage ] ****** [939 done /1045 queued / 16 running / 938 errors / 28.000000000000004% coverage ] ****** [939 done /1045 queued / 16 running / 938 errors / 28.000000000000004% coverage ] ****** [940 done /1047 queued / 16 running / 939 errors / 28.000000000000004% coverage ] ****** [940 done /1047 queued / 16 running / 939 errors / 28.000000000000004% coverage ] ****** [941 done /1048 queued / 16 running / 940 errors / 28.000000000000004% coverage ] ****** [941 done /1048 queued / 16 running / 940 errors / 28.000000000000004% coverage ] ****** [942 done /1048 queued / 16 running / 941 errors / 28.000000000000004% coverage ] ****** [942 done /1048 queued / 16 running / 941 errors / 28.000000000000004% coverage ] ****** [943 done /1048 queued / 16 running / 942 errors / 28.000000000000004% coverage ] ****** [943 done /1048 queued / 16 running / 942 errors / 28.000000000000004% coverage ] ****** [944 done /1048 queued / 16 running / 943 errors / 28.000000000000004% coverage ] ****** [944 done /1048 queued / 16 running / 943 errors / 28.000000000000004% coverage ] ****** [945 done /1049 queued / 16 running / 944 errors / 28.000000000000004% coverage ] ****** [945 done /1049 queued / 16 running / 944 errors / 28.000000000000004% coverage ] ****** [946 done /1049 queued / 16 running / 945 errors / 28.000000000000004% coverage ] ****** [946 done /1049 queued / 16 running / 945 errors / 28.000000000000004% coverage ] ****** [947 done /1049 queued / 16 running / 946 errors / 28.000000000000004% coverage ] ****** [947 done /1049 queued / 16 running / 946 errors / 28.000000000000004% coverage ] ****** [948 done /1050 queued / 16 running / 947 errors / 28.000000000000004% coverage ] ****** [948 done /1050 queued / 16 running / 947 errors / 28.000000000000004% coverage ] ****** [949 done /1051 queued / 16 running / 948 errors / 28.000000000000004% coverage ] ****** [949 done /1051 queued / 16 running / 948 errors / 28.000000000000004% coverage ] ****** [950 done /1053 queued / 16 running / 949 errors / 28.000000000000004% coverage ] ****** [950 done /1053 queued / 16 running / 949 errors / 28.000000000000004% coverage ] ****** [951 done /1053 queued / 16 running / 950 errors / 28.000000000000004% coverage ] ****** [951 done /1053 queued / 16 running / 950 errors / 28.000000000000004% coverage ] ****** [952 done /1054 queued / 16 running / 951 errors / 28.000000000000004% coverage ] ****** [952 done /1054 queued / 16 running / 951 errors / 28.000000000000004% coverage ] ****** [953 done /1056 queued / 16 running / 952 errors / 28.000000000000004% coverage ] ****** [953 done /1056 queued / 16 running / 952 errors / 28.000000000000004% coverage ] ****** [954 done /1057 queued / 16 running / 953 errors / 28.000000000000004% coverage ] ****** [954 done /1057 queued / 16 running / 953 errors / 28.000000000000004% coverage ] ****** [955 done /1058 queued / 16 running / 954 errors / 28.000000000000004% coverage ] ****** [955 done /1058 queued / 16 running / 954 errors / 28.000000000000004% coverage ] ****** [956 done /1058 queued / 16 running / 955 errors / 28.000000000000004% coverage ] ****** [956 done /1058 queued / 16 running / 955 errors / 28.000000000000004% coverage ] ****** [957 done /1060 queued / 16 running / 956 errors / 28.000000000000004% coverage ] ****** [957 done /1060 queued / 16 running / 956 errors / 28.000000000000004% coverage ] ****** [958 done /1062 queued / 16 running / 957 errors / 28.000000000000004% coverage ] ****** [958 done /1062 queued / 16 running / 957 errors / 28.000000000000004% coverage ] ****** [959 done /1063 queued / 16 running / 958 errors / 28.000000000000004% coverage ] ****** [959 done /1063 queued / 16 running / 958 errors / 28.000000000000004% coverage ] ****** [960 done /1063 queued / 16 running / 959 errors / 28.000000000000004% coverage ] ****** [960 done /1063 queued / 16 running / 959 errors / 28.000000000000004% coverage ] ****** [961 done /1067 queued / 16 running / 960 errors / 28.000000000000004% coverage ] ****** [961 done /1067 queued / 16 running / 960 errors / 28.000000000000004% coverage ] ****** [962 done /1068 queued / 16 running / 961 errors / 28.000000000000004% coverage ] ****** [962 done /1068 queued / 16 running / 961 errors / 28.000000000000004% coverage ] ****** [963 done /1068 queued / 16 running / 962 errors / 28.000000000000004% coverage ] ****** [963 done /1068 queued / 16 running / 962 errors / 28.000000000000004% coverage ] ****** [964 done /1068 queued / 16 running / 963 errors / 28.000000000000004% coverage ] ****** [964 done /1068 queued / 16 running / 963 errors / 28.000000000000004% coverage ] ****** [965 done /1069 queued / 16 running / 964 errors / 28.000000000000004% coverage ] ****** [965 done /1069 queued / 16 running / 964 errors / 28.000000000000004% coverage ] ****** [966 done /1070 queued / 16 running / 965 errors / 28.000000000000004% coverage ] ****** [966 done /1070 queued / 16 running / 965 errors / 28.000000000000004% coverage ] ****** [967 done /1072 queued / 16 running / 966 errors / 28.000000000000004% coverage ] ****** [967 done /1072 queued / 16 running / 966 errors / 28.000000000000004% coverage ] ****** [968 done /1075 queued / 16 running / 967 errors / 28.000000000000004% coverage ] ****** [968 done /1075 queued / 16 running / 967 errors / 28.000000000000004% coverage ] ****** [969 done /1075 queued / 16 running / 968 errors / 28.000000000000004% coverage ] ****** [969 done /1075 queued / 16 running / 968 errors / 28.000000000000004% coverage ] ****** [970 done /1076 queued / 16 running / 969 errors / 28.000000000000004% coverage ] ****** [970 done /1076 queued / 16 running / 969 errors / 28.000000000000004% coverage ] ****** [971 done /1079 queued / 16 running / 970 errors / 28.000000000000004% coverage ] ****** [971 done /1079 queued / 16 running / 970 errors / 28.000000000000004% coverage ] ****** [972 done /1079 queued / 16 running / 971 errors / 28.000000000000004% coverage ] ****** [972 done /1079 queued / 16 running / 971 errors / 28.000000000000004% coverage ] ****** [973 done /1080 queued / 16 running / 972 errors / 28.000000000000004% coverage ] ****** [973 done /1080 queued / 16 running / 972 errors / 28.000000000000004% coverage ] ****** [974 done /1081 queued / 16 running / 973 errors / 28.000000000000004% coverage ] ****** [974 done /1081 queued / 16 running / 973 errors / 28.000000000000004% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","toString","apply","bound ","getOwnPropertyNames","getOwnPropertyDescriptor","create","parseInt"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0,"Switcher":false,"Target_Switch_Base":0} start 0.0601 took 5.6076s
*-- Test Case {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0} start 5.7685 took 11.3216s
*-- Errors occured in test {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")
var glob = require("glob")
var _0666 = parseInt('666', 8)

var defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
var timeout = 0

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0
  var errState = null
  var n = 0

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, function (er, stat) {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

  function next (er) {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  function afterGlob (er, results) {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(function (p) {
      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            var time = busyTries * 100
            // try again, with the same exact callback as this one.
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, time)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      })
    })
  }
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, _0666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, _0666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  var results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (var i = 0; i < results.length; i++) {
    var p = results[i]

    try {
      var st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  var retries = isWindows ? 100 : 1
  var i = 0
  do {
    var threw = true
    try {
      var ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switch_Base":0,"_bound":1}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"_bound":2} start 17.1667 took 12.1583s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"_bound":2}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")
var glob = require("glob")
var _0666 = parseInt('666', 8)

var defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
var timeout = 0

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0
  var errState = null
  var n = 0

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, function (er, stat) {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

  function next (er) {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  function afterGlob (er, results) {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(function (p) {
      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            var time = busyTries * 100
            // try again, with the same exact callback as this one.
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, time)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      })
    })
  }
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, _0666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, _0666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  var results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (var i = 0; i < results.length; i++) {
    var p = results[i]

    try {
      var st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  var retries = isWindows ? 100 : 1
  var i = 0
  do {
    var threw = true
    try {
      var ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"_bound":2}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"_bound":3,"ExpansionArg_int":0} start 29.4308 took 10.5429s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"_bound":3,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")
var glob = require("glob")
var _0666 = parseInt('666', 8)

var defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
var timeout = 0

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0
  var errState = null
  var n = 0

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, function (er, stat) {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

  function next (er) {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  function afterGlob (er, results) {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(function (p) {
      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            var time = busyTries * 100
            // try again, with the same exact callback as this one.
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, time)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      })
    })
  }
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, _0666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, _0666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  var results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (var i = 0; i < results.length; i++) {
    var p = results[i]

    try {
      var st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  var retries = isWindows ? 100 : 1
  var i = 0
  do {
    var threw = true
    try {
      var ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"_bound":3}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":4,"ExpansionArg_string":"PureString"} start 40.0547 took 13.1798s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":4,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")
var glob = require("glob")
var _0666 = parseInt('666', 8)

var defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
var timeout = 0

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0
  var errState = null
  var n = 0

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, function (er, stat) {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

  function next (er) {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  function afterGlob (er, results) {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(function (p) {
      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            var time = busyTries * 100
            // try again, with the same exact callback as this one.
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, time)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      })
    })
  }
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, _0666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, _0666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  var results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (var i = 0; i < results.length; i++) {
    var p = results[i]

    try {
      var st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  var retries = isWindows ? 100 : 1
  var i = 0
  do {
    var threw = true
    try {
      var ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":5,"ExpansionArg_array_length":0} start 53.3004 took 10.8965s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":5,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")
var glob = require("glob")
var _0666 = parseInt('666', 8)

var defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
var timeout = 0

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0
  var errState = null
  var n = 0

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, function (er, stat) {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

  function next (er) {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  function afterGlob (er, results) {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(function (p) {
      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            var time = busyTries * 100
            // try again, with the same exact callback as this one.
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, time)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      })
    })
  }
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, _0666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, _0666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  var results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (var i = 0; i < results.length; i++) {
    var p = results[i]

    try {
      var st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  var retries = isWindows ? 100 : 1
  var i = 0
  do {
    var threw = true
    try {
      var ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":6,"ExpansionArg_bool":false} start 64.3072 took 10.1247s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":6,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")
var glob = require("glob")
var _0666 = parseInt('666', 8)

var defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
var timeout = 0

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0
  var errState = null
  var n = 0

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, function (er, stat) {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

  function next (er) {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  function afterGlob (er, results) {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(function (p) {
      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            var time = busyTries * 100
            // try again, with the same exact callback as this one.
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, time)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      })
    })
  }
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, _0666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, _0666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  var results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (var i = 0; i < results.length; i++) {
    var p = results[i]

    try {
      var st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  var retries = isWindows ? 100 : 1
  var i = 0
  do {
    var threw = true
    try {
      var ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":7,"ExpansionArg_array_element_0_type":0} start 64.2672 took 10.7051s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":7,"ExpansionArg_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")
var glob = require("glob")
var _0666 = parseInt('666', 8)

var defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
var timeout = 0

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0
  var errState = null
  var n = 0

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, function (er, stat) {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

  function next (er) {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  function afterGlob (er, results) {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(function (p) {
      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            var time = busyTries * 100
            // try again, with the same exact callback as this one.
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, time)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      })
    })
  }
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, _0666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, _0666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  var results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (var i = 0; i < results.length; i++) {
    var p = results[i]

    try {
      var st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  var retries = isWindows ? 100 : 1
  var i = 0
  do {
    var threw = true
    try {
      var ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":7}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":8,"ExpansionArg_array_element_0_int":0} start 75.1155 took 8.2098s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":8,"ExpansionArg_array_element_0_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")
var glob = require("glob")
var _0666 = parseInt('666', 8)

var defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
var timeout = 0

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0
  var errState = null
  var n = 0

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, function (er, stat) {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

  function next (er) {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  function afterGlob (er, results) {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(function (p) {
      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            var time = busyTries * 100
            // try again, with the same exact callback as this one.
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, time)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      })
    })
  }
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, _0666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, _0666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  var results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (var i = 0; i < results.length; i++) {
    var p = results[i]

    try {
      var st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  var retries = isWindows ? 100 : 1
  var i = 0
  do {
    var threw = true
    try {
      var ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":8}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":9,"ExpansionArg_array_element_1_type":0} start 75.0481 took 11.9956s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":9,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")
var glob = require("glob")
var _0666 = parseInt('666', 8)

var defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
var timeout = 0

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0
  var errState = null
  var n = 0

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, function (er, stat) {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

  function next (er) {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  function afterGlob (er, results) {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(function (p) {
      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            var time = busyTries * 100
            // try again, with the same exact callback as this one.
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, time)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      })
    })
  }
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, _0666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, _0666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  var results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (var i = 0; i < results.length; i++) {
    var p = results[i]

    try {
      var st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  var retries = isWindows ? 100 : 1
  var i = 0
  do {
    var threw = true
    try {
      var ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":9}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":10,"ExpansionArg_array_element_0_string":"PureString"} start 83.3792 took 9.7194s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":10,"ExpansionArg_array_element_0_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")
var glob = require("glob")
var _0666 = parseInt('666', 8)

var defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
var timeout = 0

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0
  var errState = null
  var n = 0

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, function (er, stat) {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

  function next (er) {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  function afterGlob (er, results) {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(function (p) {
      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            var time = busyTries * 100
            // try again, with the same exact callback as this one.
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, time)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      })
    })
  }
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, _0666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, _0666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  var results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (var i = 0; i < results.length; i++) {
    var p = results[i]

    try {
      var st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  var retries = isWindows ? 100 : 1
  var i = 0
  do {
    var threw = true
    try {
      var ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":10}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":9} start 83.4116 took 10.9102s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":9}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")
var glob = require("glob")
var _0666 = parseInt('666', 8)

var defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
var timeout = 0

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0
  var errState = null
  var n = 0

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, function (er, stat) {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

  function next (er) {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  function afterGlob (er, results) {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(function (p) {
      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            var time = busyTries * 100
            // try again, with the same exact callback as this one.
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, time)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      })
    })
  }
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, _0666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, _0666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  var results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (var i = 0; i < results.length; i++) {
    var p = results[i]

    try {
      var st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  var retries = isWindows ? 100 : 1
  var i = 0
  do {
    var threw = true
    try {
      var ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":9}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":11,"ExpansionArg_array_element_1_type":0} start 83.3631 took 12.4439s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":11,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")
var glob = require("glob")
var _0666 = parseInt('666', 8)

var defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
var timeout = 0

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0
  var errState = null
  var n = 0

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, function (er, stat) {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

  function next (er) {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  function afterGlob (er, results) {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(function (p) {
      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            var time = busyTries * 100
            // try again, with the same exact callback as this one.
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, time)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      })
    })
  }
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, _0666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, _0666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  var results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (var i = 0; i < results.length; i++) {
    var p = results[i]

    try {
      var st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  var retries = isWindows ? 100 : 1
  var i = 0
  do {
    var threw = true
    try {
      var ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":10} start 87.0832 took 9.4595s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":10}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")
var glob = require("glob")
var _0666 = parseInt('666', 8)

var defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
var timeout = 0

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0
  var errState = null
  var n = 0

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, function (er, stat) {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

  function next (er) {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  function afterGlob (er, results) {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(function (p) {
      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            var time = busyTries * 100
            // try again, with the same exact callback as this one.
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, time)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      })
    })
  }
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, _0666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, _0666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  var results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (var i = 0; i < results.length; i++) {
    var p = results[i]

    try {
      var st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  var retries = isWindows ? 100 : 1
  var i = 0
  do {
    var threw = true
    try {
      var ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":10}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":11,"ExpansionArg_array_element_2_type":0} start 87.1115 took 12.5231s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":11,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")
var glob = require("glob")
var _0666 = parseInt('666', 8)

var defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
var timeout = 0

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0
  var errState = null
  var n = 0

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, function (er, stat) {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

  function next (er) {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  function afterGlob (er, results) {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(function (p) {
      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            var time = busyTries * 100
            // try again, with the same exact callback as this one.
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, time)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      })
    })
  }
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, _0666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, _0666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  var results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (var i = 0; i < results.length; i++) {
    var p = results[i]

    try {
      var st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  var retries = isWindows ? 100 : 1
  var i = 0
  do {
    var threw = true
    try {
      var ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
