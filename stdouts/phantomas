
> phantomjs-prebuilt@2.1.15 install /root/Targets/phantomas/node_modules/phantomjs-prebuilt
> node install.js

PhantomJS not found on PATH
Download already available at /tmp/phantomjs/phantomjs-2.1.1-linux-x86_64.tar.bz2
Verified checksum of previously downloaded file
Extracting tar contents (via spawned process)
Removing /root/Targets/phantomas/node_modules/phantomjs-prebuilt/lib/phantom
Copying extracted folder /tmp/phantomjs/phantomjs-2.1.1-linux-x86_64.tar.bz2-extract-1506038478709/phantomjs-2.1.1-linux-x86_64 -> /root/Targets/phantomas/node_modules/phantomjs-prebuilt/lib/phantom
Writing location.js file
Done. Phantomjs binary available at /root/Targets/phantomas/node_modules/phantomjs-prebuilt/lib/phantom/bin/phantomjs
/root/Targets/phantomas
└─┬ phantomas@1.19.0 
  ├─┬ analyze-css@0.12.5 
  │ ├─┬ cli@1.0.1 
  │ │ └── exit@0.1.2 
  │ ├─┬ css@2.2.1 
  │ │ ├─┬ source-map@0.1.43 
  │ │ │ └── amdefine@1.0.1 
  │ │ ├─┬ source-map-resolve@0.3.1 
  │ │ │ ├── atob@1.1.3 
  │ │ │ ├── resolve-url@0.2.1 
  │ │ │ └── source-map-url@0.3.0 
  │ │ └── urix@0.1.0 
  │ ├── css-shorthand-properties@1.0.0 
  │ ├── fast-stats@0.0.3 
  │ ├─┬ glob@7.1.2 
  │ │ ├── fs.realpath@1.0.0 
  │ │ ├─┬ inflight@1.0.6 
  │ │ │ └── wrappy@1.0.2 
  │ │ ├─┬ minimatch@3.0.4 
  │ │ │ └─┬ brace-expansion@1.1.8 
  │ │ │   ├── balanced-match@1.0.0 
  │ │ │   └── concat-map@0.0.1 
  │ │ ├── once@1.4.0 
  │ │ └── path-is-absolute@1.0.1 
  │ ├─┬ http-proxy-agent@1.0.0 
  │ │ ├─┬ agent-base@2.1.1 
  │ │ │ └── semver@5.0.3 
  │ │ └── extend@3.0.1 
  │ ├─┬ node-fetch@1.7.3 
  │ │ ├─┬ encoding@0.1.12 
  │ │ │ └── iconv-lite@0.4.19 
  │ │ └── is-stream@1.1.0 
  │ ├── onecolor@3.0.4 
  │ ├── slick@1.12.2 
  │ └── specificity@0.3.1 
  ├── ansicolors@0.3.2 
  ├── ansistyles@0.1.3 
  ├── ascii-table@0.0.9 
  ├─┬ async@2.5.0 
  │ └── lodash@4.17.4 
  ├── csv-string@2.3.2 
  ├─┬ debug@2.6.8 
  │ └── ms@2.0.0 
  ├─┬ js-yaml@3.10.0 
  │ ├─┬ argparse@1.0.9 
  │ │ └── sprintf-js@1.0.3 
  │ └── esprima@4.0.0 
  ├── node-statsd@0.1.1 
  ├─┬ optimist@0.6.1 
  │ ├── minimist@0.0.10 
  │ └── wordwrap@0.0.3 
  ├── optimist-config-file@1.0.1 
  ├─┬ phantomjs-prebuilt@2.1.15 
  │ ├── es6-promise@4.0.5 
  │ ├─┬ extract-zip@1.6.5 
  │ │ ├─┬ concat-stream@1.6.0 
  │ │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ │ ├── core-util-is@1.0.2 
  │ │ │ │ ├── isarray@1.0.0 
  │ │ │ │ ├── process-nextick-args@1.0.7 
  │ │ │ │ ├── string_decoder@1.0.3 
  │ │ │ │ └── util-deprecate@1.0.2 
  │ │ │ └── typedarray@0.0.6 
  │ │ ├─┬ debug@2.2.0 
  │ │ │ └── ms@0.7.1 
  │ │ ├─┬ mkdirp@0.5.0 
  │ │ │ └── minimist@0.0.8 
  │ │ └─┬ yauzl@2.4.1 
  │ │   └─┬ fd-slicer@1.0.1 
  │ │     └── pend@1.2.0 
  │ ├─┬ fs-extra@1.0.0 
  │ │ ├── graceful-fs@4.1.11 
  │ │ ├── jsonfile@2.4.0 
  │ │ └── klaw@1.3.1 
  │ ├─┬ hasha@2.2.0 
  │ │ └─┬ pinkie-promise@2.0.1 
  │ │   └── pinkie@2.0.4 
  │ ├── kew@0.7.0 
  │ ├── progress@1.1.8 
  │ ├─┬ request@2.81.0 
  │ │ ├── aws-sign2@0.6.0 
  │ │ ├── aws4@1.6.0 
  │ │ ├── caseless@0.12.0 
  │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ └── delayed-stream@1.0.0 
  │ │ ├── forever-agent@0.6.1 
  │ │ ├─┬ form-data@2.1.4 
  │ │ │ └── asynckit@0.4.0 
  │ │ ├─┬ har-validator@4.2.1 
  │ │ │ ├─┬ ajv@4.11.8 
  │ │ │ │ ├── co@4.6.0 
  │ │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │ │   └── jsonify@0.0.0 
  │ │ │ └── har-schema@1.0.5 
  │ │ ├─┬ hawk@3.1.3 
  │ │ │ ├── boom@2.10.1 
  │ │ │ ├── cryptiles@2.0.5 
  │ │ │ ├── hoek@2.16.3 
  │ │ │ └── sntp@1.0.9 
  │ │ ├─┬ http-signature@1.1.1 
  │ │ │ ├── assert-plus@0.2.0 
  │ │ │ ├─┬ jsprim@1.4.1 
  │ │ │ │ ├── assert-plus@1.0.0 
  │ │ │ │ ├── extsprintf@1.3.0 
  │ │ │ │ ├── json-schema@0.2.3 
  │ │ │ │ └─┬ verror@1.10.0 
  │ │ │ │   └── assert-plus@1.0.0 
  │ │ │ └─┬ sshpk@1.13.1 
  │ │ │   ├── asn1@0.2.3 
  │ │ │   ├── assert-plus@1.0.0 
  │ │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │   ├─┬ dashdash@1.14.1 
  │ │ │   │ └── assert-plus@1.0.0 
  │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │   ├─┬ getpass@0.1.7 
  │ │ │   │ └── assert-plus@1.0.0 
  │ │ │   ├── jsbn@0.1.1 
  │ │ │   └── tweetnacl@0.14.5 
  │ │ ├── is-typedarray@1.0.0 
  │ │ ├── isstream@0.1.2 
  │ │ ├── json-stringify-safe@5.0.1 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ ├── oauth-sign@0.8.2 
  │ │ ├── performance-now@0.2.0 
  │ │ ├── qs@6.4.0 
  │ │ ├── safe-buffer@5.1.1 
  │ │ ├── stringstream@0.0.5 
  │ │ ├─┬ tough-cookie@2.3.3 
  │ │ │ └── punycode@1.4.1 
  │ │ └── tunnel-agent@0.6.0 
  │ ├─┬ request-progress@2.0.1 
  │ │ └── throttleit@1.0.0 
  │ └─┬ which@1.2.14 
  │   └── isexe@2.0.0 
  ├── progress@2.0.0 
  ├── q@1.5.0 
  ├── slimerjs@0.10.3 
  ├─┬ tap-producer-macbre@0.0.3 
  │ ├── inherits@2.0.3 
  │ └── yamlish@0.0.7 
  ├── travis-fold@0.1.2 
  └── uuid@3.1.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/phantomas/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 28.000000000000004% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 28.000000000000004% coverage ] ****** [2 done /2 queued / 1 running / 1 errors / 28.000000000000004% coverage ] ****** [2 done /1 queued / 2 running / 1 errors / 28.000000000000004% coverage ] ****** [2 done /0 queued / 3 running / 1 errors / 28.000000000000004% coverage ] ****** [2 done /0 queued / 3 running / 1 errors / 28.000000000000004% coverage ] ****** [3 done /2 queued / 3 running / 2 errors / 28.000000000000004% coverage ] ****** [3 done /1 queued / 4 running / 2 errors / 28.000000000000004% coverage ] ****** [3 done /0 queued / 5 running / 2 errors / 28.000000000000004% coverage ] ****** [3 done /0 queued / 5 running / 2 errors / 28.000000000000004% coverage ] ****** [4 done /0 queued / 5 running / 3 errors / 28.000000000000004% coverage ] ****** [4 done /0 queued / 5 running / 3 errors / 28.000000000000004% coverage ] ****** [5 done /1 queued / 5 running / 4 errors / 28.000000000000004% coverage ] ****** [5 done /0 queued / 6 running / 4 errors / 28.000000000000004% coverage ] ****** [5 done /0 queued / 6 running / 4 errors / 28.000000000000004% coverage ] ****** [6 done /3 queued / 6 running / 5 errors / 28.000000000000004% coverage ] ****** [6 done /2 queued / 7 running / 5 errors / 28.000000000000004% coverage ] ****** [6 done /1 queued / 8 running / 5 errors / 28.000000000000004% coverage ] ****** [6 done /0 queued / 9 running / 5 errors / 28.000000000000004% coverage ] ****** [6 done /0 queued / 9 running / 5 errors / 28.000000000000004% coverage ] ****** [7 done /3 queued / 9 running / 6 errors / 28.000000000000004% coverage ] ****** [7 done /2 queued / 10 running / 6 errors / 28.000000000000004% coverage ] ****** [7 done /1 queued / 11 running / 6 errors / 28.000000000000004% coverage ] ****** [7 done /0 queued / 12 running / 6 errors / 28.000000000000004% coverage ] ****** [7 done /0 queued / 12 running / 6 errors / 28.000000000000004% coverage ] ****** [8 done /2 queued / 12 running / 7 errors / 28.000000000000004% coverage ] ****** [8 done /1 queued / 13 running / 7 errors / 28.000000000000004% coverage ] ****** [8 done /0 queued / 14 running / 7 errors / 28.000000000000004% coverage ] ****** [8 done /0 queued / 14 running / 7 errors / 28.000000000000004% coverage ] ****** [9 done /1 queued / 14 running / 8 errors / 28.000000000000004% coverage ] ****** [9 done /0 queued / 15 running / 8 errors / 28.000000000000004% coverage ] ****** [9 done /0 queued / 15 running / 8 errors / 28.000000000000004% coverage ] ****** [10 done /1 queued / 15 running / 9 errors / 28.000000000000004% coverage ] ****** [10 done /0 queued / 16 running / 9 errors / 28.000000000000004% coverage ] ****** [10 done /0 queued / 16 running / 9 errors / 28.000000000000004% coverage ] ****** [11 done /0 queued / 16 running / 10 errors / 28.000000000000004% coverage ] ****** [11 done /0 queued / 16 running / 10 errors / 28.000000000000004% coverage ] ****** [12 done /0 queued / 16 running / 11 errors / 28.000000000000004% coverage ] ****** [12 done /0 queued / 16 running / 11 errors / 28.000000000000004% coverage ] ****** [13 done /0 queued / 15 running / 12 errors / 28.000000000000004% coverage ] ****** [14 done /2 queued / 15 running / 13 errors / 28.000000000000004% coverage ] ****** [14 done /1 queued / 16 running / 13 errors / 28.000000000000004% coverage ] ****** [14 done /1 queued / 16 running / 13 errors / 28.000000000000004% coverage ] ****** [15 done /0 queued / 16 running / 14 errors / 28.000000000000004% coverage ] ****** [15 done /0 queued / 16 running / 14 errors / 28.000000000000004% coverage ] ****** [16 done /3 queued / 16 running / 15 errors / 28.000000000000004% coverage ] ****** [16 done /3 queued / 16 running / 15 errors / 28.000000000000004% coverage ] ****** [17 done /2 queued / 16 running / 16 errors / 28.000000000000004% coverage ] ****** [17 done /2 queued / 16 running / 16 errors / 28.000000000000004% coverage ] ****** [18 done /5 queued / 16 running / 17 errors / 28.000000000000004% coverage ] ****** [18 done /5 queued / 16 running / 17 errors / 28.000000000000004% coverage ] ****** [19 done /5 queued / 16 running / 18 errors / 28.000000000000004% coverage ] ****** [19 done /5 queued / 16 running / 18 errors / 28.000000000000004% coverage ] ****** [20 done /5 queued / 16 running / 19 errors / 28.000000000000004% coverage ] ****** [20 done /5 queued / 16 running / 19 errors / 28.000000000000004% coverage ] ****** [21 done /8 queued / 16 running / 20 errors / 28.000000000000004% coverage ] ****** [21 done /8 queued / 16 running / 20 errors / 28.000000000000004% coverage ] ****** [22 done /13 queued / 16 running / 21 errors / 28.000000000000004% coverage ] ****** [22 done /13 queued / 16 running / 21 errors / 28.000000000000004% coverage ] ****** [23 done /15 queued / 16 running / 22 errors / 28.000000000000004% coverage ] ****** [23 done /15 queued / 16 running / 22 errors / 28.000000000000004% coverage ] ****** [24 done /18 queued / 16 running / 23 errors / 28.000000000000004% coverage ] ****** [24 done /18 queued / 16 running / 23 errors / 28.000000000000004% coverage ] ****** [25 done /18 queued / 16 running / 24 errors / 28.000000000000004% coverage ] ****** [25 done /18 queued / 16 running / 24 errors / 28.000000000000004% coverage ] ****** [26 done /17 queued / 16 running / 25 errors / 28.000000000000004% coverage ] ****** [26 done /17 queued / 16 running / 25 errors / 28.000000000000004% coverage ] ****** [27 done /16 queued / 16 running / 26 errors / 28.000000000000004% coverage ] ****** [27 done /16 queued / 16 running / 26 errors / 28.000000000000004% coverage ] ****** [28 done /17 queued / 16 running / 27 errors / 28.000000000000004% coverage ] ****** [28 done /17 queued / 16 running / 27 errors / 28.000000000000004% coverage ] ****** [29 done /16 queued / 16 running / 28 errors / 28.000000000000004% coverage ] ****** [29 done /16 queued / 16 running / 28 errors / 28.000000000000004% coverage ] ****** [30 done /17 queued / 16 running / 29 errors / 28.999999999999996% coverage ] ****** [30 done /17 queued / 16 running / 29 errors / 28.999999999999996% coverage ] ****** [31 done /20 queued / 16 running / 30 errors / 28.999999999999996% coverage ] ****** [31 done /20 queued / 16 running / 30 errors / 28.999999999999996% coverage ] ****** [32 done /22 queued / 16 running / 31 errors / 28.999999999999996% coverage ] ****** [32 done /22 queued / 16 running / 31 errors / 28.999999999999996% coverage ] ****** [33 done /21 queued / 16 running / 32 errors / 28.999999999999996% coverage ] ****** [33 done /21 queued / 16 running / 32 errors / 28.999999999999996% coverage ] ****** [34 done /20 queued / 16 running / 33 errors / 28.999999999999996% coverage ] ****** [34 done /20 queued / 16 running / 33 errors / 28.999999999999996% coverage ] ****** [35 done /19 queued / 16 running / 34 errors / 28.999999999999996% coverage ] ****** [35 done /19 queued / 16 running / 34 errors / 28.999999999999996% coverage ] ****** [36 done /24 queued / 16 running / 35 errors / 28.999999999999996% coverage ] ****** [36 done /24 queued / 16 running / 35 errors / 28.999999999999996% coverage ] ****** [37 done /24 queued / 16 running / 36 errors / 28.999999999999996% coverage ] ****** [37 done /24 queued / 16 running / 36 errors / 28.999999999999996% coverage ] ****** [38 done /24 queued / 16 running / 37 errors / 28.999999999999996% coverage ] ****** [38 done /24 queued / 16 running / 37 errors / 28.999999999999996% coverage ] ****** [39 done /26 queued / 16 running / 38 errors / 28.999999999999996% coverage ] ****** [39 done /26 queued / 16 running / 38 errors / 28.999999999999996% coverage ] ****** [40 done /26 queued / 16 running / 39 errors / 28.999999999999996% coverage ] ****** [40 done /26 queued / 16 running / 39 errors / 28.999999999999996% coverage ] ****** [41 done /25 queued / 16 running / 40 errors / 28.999999999999996% coverage ] ****** [41 done /25 queued / 16 running / 40 errors / 28.999999999999996% coverage ] ****** [42 done /27 queued / 16 running / 41 errors / 28.999999999999996% coverage ] ****** [42 done /27 queued / 16 running / 41 errors / 28.999999999999996% coverage ] ****** [43 done /30 queued / 16 running / 42 errors / 28.999999999999996% coverage ] ****** [43 done /30 queued / 16 running / 42 errors / 28.999999999999996% coverage ] ****** [44 done /32 queued / 16 running / 43 errors / 28.999999999999996% coverage ] ****** [44 done /32 queued / 16 running / 43 errors / 28.999999999999996% coverage ] ****** [45 done /33 queued / 16 running / 44 errors / 28.999999999999996% coverage ] ****** [45 done /33 queued / 16 running / 44 errors / 28.999999999999996% coverage ] ****** [46 done /36 queued / 16 running / 45 errors / 28.999999999999996% coverage ] ****** [46 done /36 queued / 16 running / 45 errors / 28.999999999999996% coverage ] ****** [47 done /35 queued / 16 running / 46 errors / 28.999999999999996% coverage ] ****** [47 done /35 queued / 16 running / 46 errors / 28.999999999999996% coverage ] ****** [48 done /36 queued / 16 running / 47 errors / 28.999999999999996% coverage ] ****** [48 done /36 queued / 16 running / 47 errors / 28.999999999999996% coverage ] ****** [49 done /35 queued / 16 running / 48 errors / 28.999999999999996% coverage ] ****** [49 done /35 queued / 16 running / 48 errors / 28.999999999999996% coverage ] ****** [50 done /37 queued / 16 running / 49 errors / 28.999999999999996% coverage ] ****** [50 done /37 queued / 16 running / 49 errors / 28.999999999999996% coverage ] ****** [51 done /38 queued / 16 running / 50 errors / 28.999999999999996% coverage ] ****** [51 done /38 queued / 16 running / 50 errors / 28.999999999999996% coverage ] ****** [52 done /37 queued / 16 running / 51 errors / 28.999999999999996% coverage ] ****** [52 done /37 queued / 16 running / 51 errors / 28.999999999999996% coverage ] ****** [53 done /37 queued / 16 running / 52 errors / 28.999999999999996% coverage ] ****** [53 done /37 queued / 16 running / 52 errors / 28.999999999999996% coverage ] ****** [54 done /37 queued / 16 running / 53 errors / 28.999999999999996% coverage ] ****** [54 done /37 queued / 16 running / 53 errors / 28.999999999999996% coverage ] ****** [55 done /39 queued / 16 running / 54 errors / 28.999999999999996% coverage ] ****** [55 done /39 queued / 16 running / 54 errors / 28.999999999999996% coverage ] ****** [56 done /38 queued / 16 running / 55 errors / 28.999999999999996% coverage ] ****** [56 done /38 queued / 16 running / 55 errors / 28.999999999999996% coverage ] ****** [57 done /40 queued / 16 running / 56 errors / 28.999999999999996% coverage ] ****** [57 done /40 queued / 16 running / 56 errors / 28.999999999999996% coverage ] ****** [58 done /39 queued / 16 running / 57 errors / 28.999999999999996% coverage ] ****** [58 done /39 queued / 16 running / 57 errors / 28.999999999999996% coverage ] ****** [59 done /42 queued / 16 running / 58 errors / 28.999999999999996% coverage ] ****** [59 done /42 queued / 16 running / 58 errors / 28.999999999999996% coverage ] ****** [60 done /44 queued / 16 running / 59 errors / 28.999999999999996% coverage ] ****** [60 done /44 queued / 16 running / 59 errors / 28.999999999999996% coverage ] ****** [61 done /44 queued / 16 running / 60 errors / 28.999999999999996% coverage ] ****** [61 done /44 queued / 16 running / 60 errors / 28.999999999999996% coverage ] ****** [62 done /43 queued / 16 running / 61 errors / 28.999999999999996% coverage ] ****** [62 done /43 queued / 16 running / 61 errors / 28.999999999999996% coverage ] ****** [63 done /42 queued / 16 running / 62 errors / 28.999999999999996% coverage ] ****** [63 done /42 queued / 16 running / 62 errors / 28.999999999999996% coverage ] ****** [64 done /43 queued / 16 running / 63 errors / 28.999999999999996% coverage ] ****** [64 done /43 queued / 16 running / 63 errors / 28.999999999999996% coverage ] ****** [65 done /42 queued / 16 running / 64 errors / 28.999999999999996% coverage ] ****** [65 done /42 queued / 16 running / 64 errors / 28.999999999999996% coverage ] ****** [66 done /44 queued / 16 running / 65 errors / 28.999999999999996% coverage ] ****** [66 done /44 queued / 16 running / 65 errors / 28.999999999999996% coverage ] ****** [67 done /43 queued / 16 running / 66 errors / 28.999999999999996% coverage ] ****** [67 done /43 queued / 16 running / 66 errors / 28.999999999999996% coverage ] ****** [68 done /45 queued / 16 running / 67 errors / 28.999999999999996% coverage ] ****** [68 done /45 queued / 16 running / 67 errors / 28.999999999999996% coverage ] ****** [69 done /44 queued / 16 running / 68 errors / 28.999999999999996% coverage ] ****** [69 done /44 queued / 16 running / 68 errors / 28.999999999999996% coverage ] ****** [70 done /44 queued / 16 running / 69 errors / 28.999999999999996% coverage ] ****** [70 done /44 queued / 16 running / 69 errors / 28.999999999999996% coverage ] ****** [71 done /45 queued / 16 running / 70 errors / 28.999999999999996% coverage ] ****** [71 done /45 queued / 16 running / 70 errors / 28.999999999999996% coverage ] ****** [72 done /44 queued / 16 running / 71 errors / 28.999999999999996% coverage ] ****** [72 done /44 queued / 16 running / 71 errors / 28.999999999999996% coverage ] ****** [73 done /47 queued / 16 running / 72 errors / 28.999999999999996% coverage ] ****** [73 done /47 queued / 16 running / 72 errors / 28.999999999999996% coverage ] ****** [74 done /46 queued / 16 running / 73 errors / 28.999999999999996% coverage ] ****** [74 done /46 queued / 16 running / 73 errors / 28.999999999999996% coverage ] ****** [75 done /46 queued / 16 running / 74 errors / 28.999999999999996% coverage ] ****** [75 done /46 queued / 16 running / 74 errors / 28.999999999999996% coverage ] ****** [76 done /47 queued / 16 running / 75 errors / 28.999999999999996% coverage ] ****** [76 done /47 queued / 16 running / 75 errors / 28.999999999999996% coverage ] ****** [77 done /49 queued / 16 running / 76 errors / 28.999999999999996% coverage ] ****** [77 done /49 queued / 16 running / 76 errors / 28.999999999999996% coverage ] ****** [78 done /48 queued / 16 running / 77 errors / 28.999999999999996% coverage ] ****** [78 done /48 queued / 16 running / 77 errors / 28.999999999999996% coverage ] ****** [79 done /47 queued / 16 running / 78 errors / 28.999999999999996% coverage ] ****** [79 done /47 queued / 16 running / 78 errors / 28.999999999999996% coverage ] ****** [80 done /47 queued / 16 running / 79 errors / 28.999999999999996% coverage ] ****** [80 done /47 queued / 16 running / 79 errors / 28.999999999999996% coverage ] ****** [81 done /47 queued / 16 running / 80 errors / 28.999999999999996% coverage ] ****** [81 done /47 queued / 16 running / 80 errors / 28.999999999999996% coverage ] ****** [82 done /49 queued / 16 running / 81 errors / 28.999999999999996% coverage ] ****** [82 done /49 queued / 16 running / 81 errors / 28.999999999999996% coverage ] ****** [83 done /50 queued / 16 running / 82 errors / 28.999999999999996% coverage ] ****** [83 done /50 queued / 16 running / 82 errors / 28.999999999999996% coverage ] ****** [84 done /52 queued / 16 running / 83 errors / 28.999999999999996% coverage ] ****** [84 done /52 queued / 16 running / 83 errors / 28.999999999999996% coverage ] ****** [85 done /52 queued / 16 running / 84 errors / 28.999999999999996% coverage ] ****** [85 done /52 queued / 16 running / 84 errors / 28.999999999999996% coverage ] ****** [86 done /52 queued / 16 running / 85 errors / 28.999999999999996% coverage ] ****** [86 done /52 queued / 16 running / 85 errors / 28.999999999999996% coverage ] ****** [87 done /51 queued / 16 running / 86 errors / 28.999999999999996% coverage ] ****** [87 done /51 queued / 16 running / 86 errors / 28.999999999999996% coverage ] ****** [88 done /50 queued / 16 running / 87 errors / 28.999999999999996% coverage ] ****** [88 done /50 queued / 16 running / 87 errors / 28.999999999999996% coverage ] ****** [89 done /56 queued / 16 running / 88 errors / 28.999999999999996% coverage ] ****** [89 done /56 queued / 16 running / 88 errors / 28.999999999999996% coverage ] ****** [90 done /56 queued / 16 running / 89 errors / 28.999999999999996% coverage ] ****** [90 done /56 queued / 16 running / 89 errors / 28.999999999999996% coverage ] ****** [91 done /57 queued / 16 running / 90 errors / 28.999999999999996% coverage ] ****** [91 done /57 queued / 16 running / 90 errors / 28.999999999999996% coverage ] ****** [92 done /56 queued / 16 running / 91 errors / 28.999999999999996% coverage ] ****** [92 done /56 queued / 16 running / 91 errors / 28.999999999999996% coverage ] ****** [93 done /55 queued / 16 running / 92 errors / 28.999999999999996% coverage ] ****** [93 done /55 queued / 16 running / 92 errors / 28.999999999999996% coverage ] ****** [94 done /55 queued / 16 running / 93 errors / 28.999999999999996% coverage ] ****** [94 done /55 queued / 16 running / 93 errors / 28.999999999999996% coverage ] ****** [95 done /56 queued / 16 running / 94 errors / 28.999999999999996% coverage ] ****** [95 done /56 queued / 16 running / 94 errors / 28.999999999999996% coverage ] ****** [96 done /61 queued / 16 running / 95 errors / 28.999999999999996% coverage ] ****** [96 done /61 queued / 16 running / 95 errors / 28.999999999999996% coverage ] ****** [97 done /60 queued / 16 running / 96 errors / 28.999999999999996% coverage ] ****** [97 done /60 queued / 16 running / 96 errors / 28.999999999999996% coverage ] ****** [98 done /59 queued / 16 running / 97 errors / 28.999999999999996% coverage ] ****** [98 done /59 queued / 16 running / 97 errors / 28.999999999999996% coverage ] ****** [99 done /59 queued / 16 running / 98 errors / 28.999999999999996% coverage ] ****** [99 done /59 queued / 16 running / 98 errors / 28.999999999999996% coverage ] ****** [100 done /65 queued / 16 running / 99 errors / 28.999999999999996% coverage ] ****** [100 done /65 queued / 16 running / 99 errors / 28.999999999999996% coverage ] ****** [101 done /64 queued / 16 running / 100 errors / 28.999999999999996% coverage ] ****** [101 done /64 queued / 16 running / 100 errors / 28.999999999999996% coverage ] ****** [102 done /66 queued / 16 running / 101 errors / 28.999999999999996% coverage ] ****** [102 done /66 queued / 16 running / 101 errors / 28.999999999999996% coverage ] ****** [103 done /71 queued / 16 running / 102 errors / 28.999999999999996% coverage ] ****** [103 done /71 queued / 16 running / 102 errors / 28.999999999999996% coverage ] ****** [104 done /73 queued / 16 running / 103 errors / 28.999999999999996% coverage ] ****** [104 done /73 queued / 16 running / 103 errors / 28.999999999999996% coverage ] ****** [105 done /74 queued / 16 running / 104 errors / 28.999999999999996% coverage ] ****** [105 done /74 queued / 16 running / 104 errors / 28.999999999999996% coverage ] ****** [106 done /76 queued / 16 running / 105 errors / 28.999999999999996% coverage ] ****** [106 done /76 queued / 16 running / 105 errors / 28.999999999999996% coverage ] ****** [107 done /75 queued / 16 running / 106 errors / 28.999999999999996% coverage ] ****** [107 done /75 queued / 16 running / 106 errors / 28.999999999999996% coverage ] ****** [108 done /76 queued / 16 running / 107 errors / 28.999999999999996% coverage ] ****** [108 done /76 queued / 16 running / 107 errors / 28.999999999999996% coverage ] ****** [109 done /78 queued / 16 running / 108 errors / 28.999999999999996% coverage ] ****** [109 done /78 queued / 16 running / 108 errors / 28.999999999999996% coverage ] ****** [110 done /77 queued / 16 running / 109 errors / 28.999999999999996% coverage ] ****** [110 done /77 queued / 16 running / 109 errors / 28.999999999999996% coverage ] ****** [111 done /77 queued / 16 running / 110 errors / 28.999999999999996% coverage ] ****** [111 done /77 queued / 16 running / 110 errors / 28.999999999999996% coverage ] ****** [112 done /79 queued / 16 running / 111 errors / 28.999999999999996% coverage ] ****** [112 done /79 queued / 16 running / 111 errors / 28.999999999999996% coverage ] ****** [113 done /79 queued / 16 running / 112 errors / 28.999999999999996% coverage ] ****** [113 done /79 queued / 16 running / 112 errors / 28.999999999999996% coverage ] ****** [114 done /79 queued / 16 running / 113 errors / 28.999999999999996% coverage ] ****** [114 done /79 queued / 16 running / 113 errors / 28.999999999999996% coverage ] ****** [115 done /78 queued / 16 running / 114 errors / 28.999999999999996% coverage ] ****** [115 done /78 queued / 16 running / 114 errors / 28.999999999999996% coverage ] ****** [116 done /79 queued / 16 running / 115 errors / 28.999999999999996% coverage ] ****** [116 done /79 queued / 16 running / 115 errors / 28.999999999999996% coverage ] ****** [117 done /79 queued / 16 running / 116 errors / 28.999999999999996% coverage ] ****** [117 done /79 queued / 16 running / 116 errors / 28.999999999999996% coverage ] ****** [118 done /79 queued / 16 running / 117 errors / 28.999999999999996% coverage ] ****** [118 done /79 queued / 16 running / 117 errors / 28.999999999999996% coverage ] ****** [119 done /79 queued / 16 running / 118 errors / 28.999999999999996% coverage ] ****** [119 done /79 queued / 16 running / 118 errors / 28.999999999999996% coverage ] ****** [120 done /79 queued / 16 running / 119 errors / 28.999999999999996% coverage ] ****** [120 done /79 queued / 16 running / 119 errors / 28.999999999999996% coverage ] ****** [121 done /80 queued / 16 running / 120 errors / 28.999999999999996% coverage ] ****** [121 done /80 queued / 16 running / 120 errors / 28.999999999999996% coverage ] ****** [122 done /80 queued / 16 running / 121 errors / 28.999999999999996% coverage ] ****** [122 done /80 queued / 16 running / 121 errors / 28.999999999999996% coverage ] ****** [123 done /79 queued / 16 running / 122 errors / 28.999999999999996% coverage ] ****** [123 done /79 queued / 16 running / 122 errors / 28.999999999999996% coverage ] ****** [124 done /78 queued / 16 running / 123 errors / 28.999999999999996% coverage ] ****** [124 done /78 queued / 16 running / 123 errors / 28.999999999999996% coverage ] ****** [125 done /81 queued / 16 running / 124 errors / 28.999999999999996% coverage ] ****** [125 done /81 queued / 16 running / 124 errors / 28.999999999999996% coverage ] ****** [126 done /80 queued / 16 running / 125 errors / 28.999999999999996% coverage ] ****** [126 done /80 queued / 16 running / 125 errors / 28.999999999999996% coverage ] ****** [127 done /81 queued / 16 running / 126 errors / 28.999999999999996% coverage ] ****** [127 done /81 queued / 16 running / 126 errors / 28.999999999999996% coverage ] ****** [128 done /83 queued / 16 running / 127 errors / 28.999999999999996% coverage ] ****** [128 done /83 queued / 16 running / 127 errors / 28.999999999999996% coverage ] ****** [129 done /82 queued / 16 running / 128 errors / 28.999999999999996% coverage ] ****** [129 done /82 queued / 16 running / 128 errors / 28.999999999999996% coverage ] ****** [130 done /85 queued / 16 running / 129 errors / 28.999999999999996% coverage ] ****** [130 done /85 queued / 16 running / 129 errors / 28.999999999999996% coverage ] ****** [131 done /88 queued / 16 running / 130 errors / 28.999999999999996% coverage ] ****** [131 done /88 queued / 16 running / 130 errors / 28.999999999999996% coverage ] ****** [132 done /87 queued / 16 running / 131 errors / 28.999999999999996% coverage ] ****** [132 done /87 queued / 16 running / 131 errors / 28.999999999999996% coverage ] ****** [133 done /86 queued / 16 running / 132 errors / 28.999999999999996% coverage ] ****** [133 done /86 queued / 16 running / 132 errors / 28.999999999999996% coverage ] ****** [134 done /87 queued / 16 running / 133 errors / 28.999999999999996% coverage ] ****** [134 done /87 queued / 16 running / 133 errors / 28.999999999999996% coverage ] ****** [135 done /86 queued / 16 running / 134 errors / 28.999999999999996% coverage ] ****** [135 done /86 queued / 16 running / 134 errors / 28.999999999999996% coverage ] ****** [136 done /85 queued / 16 running / 135 errors / 28.999999999999996% coverage ] ****** [136 done /85 queued / 16 running / 135 errors / 28.999999999999996% coverage ] ****** [137 done /84 queued / 16 running / 136 errors / 28.999999999999996% coverage ] ****** [137 done /84 queued / 16 running / 136 errors / 28.999999999999996% coverage ] ****** [138 done /85 queued / 16 running / 137 errors / 28.999999999999996% coverage ] ****** [138 done /85 queued / 16 running / 137 errors / 28.999999999999996% coverage ] ****** [139 done /87 queued / 16 running / 138 errors / 28.999999999999996% coverage ] ****** [139 done /87 queued / 16 running / 138 errors / 28.999999999999996% coverage ] ****** [140 done /87 queued / 16 running / 139 errors / 28.999999999999996% coverage ] ****** [140 done /87 queued / 16 running / 139 errors / 28.999999999999996% coverage ] ****** [141 done /86 queued / 16 running / 140 errors / 28.999999999999996% coverage ] ****** [141 done /86 queued / 16 running / 140 errors / 28.999999999999996% coverage ] ****** [142 done /86 queued / 16 running / 141 errors / 28.999999999999996% coverage ] ****** [142 done /86 queued / 16 running / 141 errors / 28.999999999999996% coverage ] ****** [143 done /85 queued / 16 running / 142 errors / 28.999999999999996% coverage ] ****** [143 done /85 queued / 16 running / 142 errors / 28.999999999999996% coverage ] ****** [144 done /84 queued / 16 running / 143 errors / 28.999999999999996% coverage ] ****** [144 done /84 queued / 16 running / 143 errors / 28.999999999999996% coverage ] ****** [145 done /83 queued / 16 running / 144 errors / 28.999999999999996% coverage ] ****** [145 done /83 queued / 16 running / 144 errors / 28.999999999999996% coverage ] ****** [146 done /89 queued / 16 running / 145 errors / 28.999999999999996% coverage ] ****** [146 done /89 queued / 16 running / 145 errors / 28.999999999999996% coverage ] ****** [147 done /89 queued / 16 running / 146 errors / 28.999999999999996% coverage ] ****** [147 done /89 queued / 16 running / 146 errors / 28.999999999999996% coverage ] ****** [148 done /88 queued / 16 running / 147 errors / 28.999999999999996% coverage ] ****** [148 done /88 queued / 16 running / 147 errors / 28.999999999999996% coverage ] ****** [149 done /87 queued / 16 running / 148 errors / 28.999999999999996% coverage ] ****** [149 done /87 queued / 16 running / 148 errors / 28.999999999999996% coverage ] ****** [150 done /90 queued / 16 running / 149 errors / 28.999999999999996% coverage ] ****** [150 done /90 queued / 16 running / 149 errors / 28.999999999999996% coverage ] ****** [151 done /95 queued / 16 running / 150 errors / 28.999999999999996% coverage ] ****** [151 done /95 queued / 16 running / 150 errors / 28.999999999999996% coverage ] ****** [152 done /99 queued / 16 running / 151 errors / 28.999999999999996% coverage ] ****** [152 done /99 queued / 16 running / 151 errors / 28.999999999999996% coverage ] ****** [153 done /100 queued / 16 running / 152 errors / 28.999999999999996% coverage ] ****** [153 done /100 queued / 16 running / 152 errors / 28.999999999999996% coverage ] ****** [154 done /99 queued / 16 running / 153 errors / 28.999999999999996% coverage ] ****** [154 done /99 queued / 16 running / 153 errors / 28.999999999999996% coverage ] ****** [155 done /103 queued / 16 running / 154 errors / 28.999999999999996% coverage ] ****** [155 done /103 queued / 16 running / 154 errors / 28.999999999999996% coverage ] ****** [156 done /105 queued / 16 running / 155 errors / 28.999999999999996% coverage ] ****** [156 done /105 queued / 16 running / 155 errors / 28.999999999999996% coverage ] ****** [157 done /104 queued / 16 running / 156 errors / 28.999999999999996% coverage ] ****** [157 done /104 queued / 16 running / 156 errors / 28.999999999999996% coverage ] ****** [158 done /108 queued / 16 running / 157 errors / 28.999999999999996% coverage ] ****** [158 done /108 queued / 16 running / 157 errors / 28.999999999999996% coverage ] ****** [159 done /107 queued / 16 running / 158 errors / 28.999999999999996% coverage ] ****** [159 done /107 queued / 16 running / 158 errors / 28.999999999999996% coverage ] ****** [160 done /109 queued / 16 running / 159 errors / 28.999999999999996% coverage ] ****** [160 done /109 queued / 16 running / 159 errors / 28.999999999999996% coverage ] ****** [161 done /112 queued / 16 running / 160 errors / 28.999999999999996% coverage ] ****** [161 done /112 queued / 16 running / 160 errors / 28.999999999999996% coverage ] ****** [162 done /111 queued / 16 running / 161 errors / 28.999999999999996% coverage ] ****** [162 done /111 queued / 16 running / 161 errors / 28.999999999999996% coverage ] ****** [163 done /110 queued / 16 running / 162 errors / 28.999999999999996% coverage ] ****** [163 done /110 queued / 16 running / 162 errors / 28.999999999999996% coverage ] ****** [164 done /112 queued / 16 running / 163 errors / 28.999999999999996% coverage ] ****** [164 done /112 queued / 16 running / 163 errors / 28.999999999999996% coverage ] ****** [165 done /113 queued / 16 running / 164 errors / 28.999999999999996% coverage ] ****** [165 done /113 queued / 16 running / 164 errors / 28.999999999999996% coverage ] ****** [166 done /115 queued / 16 running / 165 errors / 28.999999999999996% coverage ] ****** [166 done /115 queued / 16 running / 165 errors / 28.999999999999996% coverage ] ****** [167 done /115 queued / 16 running / 166 errors / 28.999999999999996% coverage ] ****** [167 done /115 queued / 16 running / 166 errors / 28.999999999999996% coverage ] ****** [168 done /116 queued / 16 running / 167 errors / 28.999999999999996% coverage ] ****** [168 done /116 queued / 16 running / 167 errors / 28.999999999999996% coverage ] ****** [169 done /115 queued / 16 running / 168 errors / 28.999999999999996% coverage ] ****** [169 done /115 queued / 16 running / 168 errors / 28.999999999999996% coverage ] ****** [170 done /116 queued / 16 running / 169 errors / 28.999999999999996% coverage ] ****** [170 done /116 queued / 16 running / 169 errors / 28.999999999999996% coverage ] ****** [171 done /115 queued / 16 running / 170 errors / 28.999999999999996% coverage ] ****** [171 done /115 queued / 16 running / 170 errors / 28.999999999999996% coverage ] ****** [172 done /116 queued / 16 running / 171 errors / 28.999999999999996% coverage ] ****** [172 done /116 queued / 16 running / 171 errors / 28.999999999999996% coverage ] ****** [173 done /119 queued / 16 running / 172 errors / 28.999999999999996% coverage ] ****** [173 done /119 queued / 16 running / 172 errors / 28.999999999999996% coverage ] ****** [174 done /119 queued / 16 running / 173 errors / 28.999999999999996% coverage ] ****** [174 done /119 queued / 16 running / 173 errors / 28.999999999999996% coverage ] ****** [175 done /120 queued / 16 running / 174 errors / 28.999999999999996% coverage ] ****** [175 done /120 queued / 16 running / 174 errors / 28.999999999999996% coverage ] ****** [176 done /120 queued / 16 running / 175 errors / 28.999999999999996% coverage ] ****** [176 done /120 queued / 16 running / 175 errors / 28.999999999999996% coverage ] ****** [177 done /122 queued / 16 running / 176 errors / 28.999999999999996% coverage ] ****** [177 done /122 queued / 16 running / 176 errors / 28.999999999999996% coverage ] ****** [178 done /122 queued / 16 running / 177 errors / 28.999999999999996% coverage ] ****** [178 done /122 queued / 16 running / 177 errors / 28.999999999999996% coverage ] ****** [179 done /122 queued / 16 running / 178 errors / 28.999999999999996% coverage ] ****** [179 done /122 queued / 16 running / 178 errors / 28.999999999999996% coverage ] ****** [180 done /122 queued / 16 running / 179 errors / 28.999999999999996% coverage ] ****** [180 done /122 queued / 16 running / 179 errors / 28.999999999999996% coverage ] ****** [181 done /123 queued / 16 running / 180 errors / 28.999999999999996% coverage ] ****** [181 done /123 queued / 16 running / 180 errors / 28.999999999999996% coverage ] ****** [182 done /125 queued / 16 running / 181 errors / 28.999999999999996% coverage ] ****** [182 done /125 queued / 16 running / 181 errors / 28.999999999999996% coverage ] ****** [183 done /125 queued / 16 running / 182 errors / 28.999999999999996% coverage ] ****** [183 done /125 queued / 16 running / 182 errors / 28.999999999999996% coverage ] ****** [184 done /124 queued / 16 running / 183 errors / 28.999999999999996% coverage ] ****** [184 done /124 queued / 16 running / 183 errors / 28.999999999999996% coverage ] ****** [185 done /126 queued / 16 running / 184 errors / 28.999999999999996% coverage ] ****** [185 done /126 queued / 16 running / 184 errors / 28.999999999999996% coverage ] ****** [186 done /125 queued / 16 running / 185 errors / 28.999999999999996% coverage ] ****** [186 done /125 queued / 16 running / 185 errors / 28.999999999999996% coverage ] ****** [187 done /126 queued / 16 running / 186 errors / 28.999999999999996% coverage ] ****** [187 done /126 queued / 16 running / 186 errors / 28.999999999999996% coverage ] ****** [188 done /130 queued / 16 running / 187 errors / 28.999999999999996% coverage ] ****** [188 done /130 queued / 16 running / 187 errors / 28.999999999999996% coverage ] ****** [189 done /133 queued / 16 running / 188 errors / 28.999999999999996% coverage ] ****** [189 done /133 queued / 16 running / 188 errors / 28.999999999999996% coverage ] ****** [190 done /136 queued / 16 running / 189 errors / 28.999999999999996% coverage ] ****** [190 done /136 queued / 16 running / 189 errors / 28.999999999999996% coverage ] ****** [191 done /135 queued / 16 running / 190 errors / 28.999999999999996% coverage ] ****** [191 done /135 queued / 16 running / 190 errors / 28.999999999999996% coverage ] ****** [192 done /135 queued / 16 running / 191 errors / 28.999999999999996% coverage ] ****** [192 done /135 queued / 16 running / 191 errors / 28.999999999999996% coverage ] ****** [193 done /134 queued / 16 running / 192 errors / 28.999999999999996% coverage ] ****** [193 done /134 queued / 16 running / 192 errors / 28.999999999999996% coverage ] ****** [194 done /134 queued / 16 running / 193 errors / 28.999999999999996% coverage ] ****** [194 done /134 queued / 16 running / 193 errors / 28.999999999999996% coverage ] ****** [195 done /137 queued / 16 running / 194 errors / 28.999999999999996% coverage ] ****** [195 done /137 queued / 16 running / 194 errors / 28.999999999999996% coverage ] ****** [196 done /136 queued / 16 running / 195 errors / 28.999999999999996% coverage ] ****** [196 done /136 queued / 16 running / 195 errors / 28.999999999999996% coverage ] ****** [197 done /135 queued / 16 running / 196 errors / 28.999999999999996% coverage ] ****** [197 done /135 queued / 16 running / 196 errors / 28.999999999999996% coverage ] ****** [198 done /136 queued / 16 running / 197 errors / 28.999999999999996% coverage ] ****** [198 done /136 queued / 16 running / 197 errors / 28.999999999999996% coverage ] ****** [199 done /135 queued / 16 running / 198 errors / 28.999999999999996% coverage ] ****** [199 done /135 queued / 16 running / 198 errors / 28.999999999999996% coverage ] ****** [200 done /137 queued / 16 running / 199 errors / 28.999999999999996% coverage ] ****** [200 done /137 queued / 16 running / 199 errors / 28.999999999999996% coverage ] ****** [201 done /138 queued / 16 running / 200 errors / 28.999999999999996% coverage ] ****** [201 done /138 queued / 16 running / 200 errors / 28.999999999999996% coverage ] ****** [202 done /137 queued / 16 running / 201 errors / 28.999999999999996% coverage ] ****** [202 done /137 queued / 16 running / 201 errors / 28.999999999999996% coverage ] ****** [203 done /137 queued / 16 running / 202 errors / 28.999999999999996% coverage ] ****** [203 done /137 queued / 16 running / 202 errors / 28.999999999999996% coverage ] ****** [204 done /138 queued / 16 running / 203 errors / 28.999999999999996% coverage ] ****** [204 done /138 queued / 16 running / 203 errors / 28.999999999999996% coverage ] ****** [205 done /138 queued / 16 running / 204 errors / 28.999999999999996% coverage ] ****** [205 done /138 queued / 16 running / 204 errors / 28.999999999999996% coverage ] ****** [206 done /139 queued / 16 running / 205 errors / 28.999999999999996% coverage ] ****** [206 done /139 queued / 16 running / 205 errors / 28.999999999999996% coverage ] ****** [207 done /142 queued / 16 running / 206 errors / 28.999999999999996% coverage ] ****** [207 done /142 queued / 16 running / 206 errors / 28.999999999999996% coverage ] ****** [208 done /142 queued / 16 running / 207 errors / 28.999999999999996% coverage ] ****** [208 done /142 queued / 16 running / 207 errors / 28.999999999999996% coverage ] ****** [209 done /144 queued / 16 running / 208 errors / 28.999999999999996% coverage ] ****** [209 done /144 queued / 16 running / 208 errors / 28.999999999999996% coverage ] ****** [210 done /143 queued / 16 running / 209 errors / 28.999999999999996% coverage ] ****** [210 done /143 queued / 16 running / 209 errors / 28.999999999999996% coverage ] ****** [211 done /146 queued / 16 running / 210 errors / 28.999999999999996% coverage ] ****** [211 done /146 queued / 16 running / 210 errors / 28.999999999999996% coverage ] ****** [212 done /146 queued / 16 running / 211 errors / 28.999999999999996% coverage ] ****** [212 done /146 queued / 16 running / 211 errors / 28.999999999999996% coverage ] ****** [213 done /145 queued / 16 running / 212 errors / 28.999999999999996% coverage ] ****** [213 done /145 queued / 16 running / 212 errors / 28.999999999999996% coverage ] ****** [214 done /145 queued / 16 running / 213 errors / 28.999999999999996% coverage ] ****** [214 done /145 queued / 16 running / 213 errors / 28.999999999999996% coverage ] ****** [215 done /144 queued / 16 running / 214 errors / 28.999999999999996% coverage ] ****** [215 done /144 queued / 16 running / 214 errors / 28.999999999999996% coverage ] ****** [216 done /146 queued / 16 running / 215 errors / 28.999999999999996% coverage ] ****** [216 done /146 queued / 16 running / 215 errors / 28.999999999999996% coverage ] ****** [217 done /145 queued / 16 running / 216 errors / 28.999999999999996% coverage ] ****** [217 done /145 queued / 16 running / 216 errors / 28.999999999999996% coverage ] ****** [218 done /144 queued / 16 running / 217 errors / 28.999999999999996% coverage ] ****** [218 done /144 queued / 16 running / 217 errors / 28.999999999999996% coverage ] ****** [219 done /146 queued / 16 running / 218 errors / 28.999999999999996% coverage ] ****** [219 done /146 queued / 16 running / 218 errors / 28.999999999999996% coverage ] ****** [220 done /146 queued / 16 running / 219 errors / 28.999999999999996% coverage ] ****** [220 done /146 queued / 16 running / 219 errors / 28.999999999999996% coverage ] ****** [221 done /145 queued / 16 running / 220 errors / 28.999999999999996% coverage ] ****** [221 done /145 queued / 16 running / 220 errors / 28.999999999999996% coverage ] ****** [222 done /145 queued / 16 running / 221 errors / 28.999999999999996% coverage ] ****** [222 done /145 queued / 16 running / 221 errors / 28.999999999999996% coverage ] ****** [223 done /149 queued / 16 running / 222 errors / 28.999999999999996% coverage ] ****** [223 done /149 queued / 16 running / 222 errors / 28.999999999999996% coverage ] ****** [224 done /151 queued / 16 running / 223 errors / 28.999999999999996% coverage ] ****** [224 done /151 queued / 16 running / 223 errors / 28.999999999999996% coverage ] ****** [225 done /153 queued / 16 running / 224 errors / 28.999999999999996% coverage ] ****** [225 done /153 queued / 16 running / 224 errors / 28.999999999999996% coverage ] ****** [226 done /155 queued / 16 running / 225 errors / 28.999999999999996% coverage ] ****** [226 done /155 queued / 16 running / 225 errors / 28.999999999999996% coverage ] ****** [227 done /157 queued / 16 running / 226 errors / 28.999999999999996% coverage ] ****** [227 done /157 queued / 16 running / 226 errors / 28.999999999999996% coverage ] ****** [228 done /157 queued / 16 running / 227 errors / 28.999999999999996% coverage ] ****** [228 done /157 queued / 16 running / 227 errors / 28.999999999999996% coverage ] ****** [229 done /157 queued / 16 running / 228 errors / 28.999999999999996% coverage ] ****** [229 done /157 queued / 16 running / 228 errors / 28.999999999999996% coverage ] ****** [230 done /158 queued / 16 running / 229 errors / 28.999999999999996% coverage ] ****** [230 done /158 queued / 16 running / 229 errors / 28.999999999999996% coverage ] ****** [231 done /157 queued / 16 running / 230 errors / 28.999999999999996% coverage ] ****** [231 done /157 queued / 16 running / 230 errors / 28.999999999999996% coverage ] ****** [232 done /158 queued / 16 running / 231 errors / 28.999999999999996% coverage ] ****** [232 done /158 queued / 16 running / 231 errors / 28.999999999999996% coverage ] ****** [233 done /157 queued / 16 running / 232 errors / 28.999999999999996% coverage ] ****** [233 done /157 queued / 16 running / 232 errors / 28.999999999999996% coverage ] ****** [234 done /160 queued / 16 running / 233 errors / 28.999999999999996% coverage ] ****** [234 done /160 queued / 16 running / 233 errors / 28.999999999999996% coverage ] ****** [235 done /161 queued / 16 running / 234 errors / 28.999999999999996% coverage ] ****** [235 done /161 queued / 16 running / 234 errors / 28.999999999999996% coverage ] ****** [236 done /161 queued / 16 running / 235 errors / 28.999999999999996% coverage ] ****** [236 done /161 queued / 16 running / 235 errors / 28.999999999999996% coverage ] ****** [237 done /161 queued / 16 running / 236 errors / 28.999999999999996% coverage ] ****** [237 done /161 queued / 16 running / 236 errors / 28.999999999999996% coverage ] ****** [238 done /164 queued / 16 running / 237 errors / 28.999999999999996% coverage ] ****** [238 done /164 queued / 16 running / 237 errors / 28.999999999999996% coverage ] ****** [239 done /165 queued / 16 running / 238 errors / 28.999999999999996% coverage ] ****** [239 done /165 queued / 16 running / 238 errors / 28.999999999999996% coverage ] ****** [240 done /166 queued / 16 running / 239 errors / 28.999999999999996% coverage ] ****** [240 done /166 queued / 16 running / 239 errors / 28.999999999999996% coverage ] ****** [241 done /167 queued / 16 running / 240 errors / 28.999999999999996% coverage ] ****** [241 done /167 queued / 16 running / 240 errors / 28.999999999999996% coverage ] ****** [242 done /169 queued / 16 running / 241 errors / 28.999999999999996% coverage ] ****** [242 done /169 queued / 16 running / 241 errors / 28.999999999999996% coverage ] ****** [243 done /171 queued / 16 running / 242 errors / 28.999999999999996% coverage ] ****** [243 done /171 queued / 16 running / 242 errors / 28.999999999999996% coverage ] ****** [244 done /170 queued / 16 running / 243 errors / 28.999999999999996% coverage ] ****** [244 done /170 queued / 16 running / 243 errors / 28.999999999999996% coverage ] ****** [245 done /169 queued / 16 running / 244 errors / 28.999999999999996% coverage ] ****** [245 done /169 queued / 16 running / 244 errors / 28.999999999999996% coverage ] ****** [246 done /169 queued / 16 running / 245 errors / 28.999999999999996% coverage ] ****** [246 done /169 queued / 16 running / 245 errors / 28.999999999999996% coverage ] ****** [247 done /172 queued / 16 running / 246 errors / 28.999999999999996% coverage ] ****** [247 done /172 queued / 16 running / 246 errors / 28.999999999999996% coverage ] ****** [248 done /173 queued / 16 running / 247 errors / 28.999999999999996% coverage ] ****** [248 done /173 queued / 16 running / 247 errors / 28.999999999999996% coverage ] ****** [249 done /173 queued / 16 running / 248 errors / 28.999999999999996% coverage ] ****** [249 done /173 queued / 16 running / 248 errors / 28.999999999999996% coverage ] ****** [250 done /174 queued / 16 running / 249 errors / 28.999999999999996% coverage ] ****** [250 done /174 queued / 16 running / 249 errors / 28.999999999999996% coverage ] ****** [251 done /179 queued / 16 running / 250 errors / 28.999999999999996% coverage ] ****** [251 done /179 queued / 16 running / 250 errors / 28.999999999999996% coverage ] ****** [252 done /179 queued / 16 running / 251 errors / 28.999999999999996% coverage ] ****** [252 done /179 queued / 16 running / 251 errors / 28.999999999999996% coverage ] ****** [253 done /179 queued / 16 running / 252 errors / 28.999999999999996% coverage ] ****** [253 done /179 queued / 16 running / 252 errors / 28.999999999999996% coverage ] ****** [254 done /180 queued / 16 running / 253 errors / 28.999999999999996% coverage ] ****** [254 done /180 queued / 16 running / 253 errors / 28.999999999999996% coverage ] ****** [255 done /183 queued / 16 running / 254 errors / 28.999999999999996% coverage ] ****** [255 done /183 queued / 16 running / 254 errors / 28.999999999999996% coverage ] ****** [256 done /184 queued / 16 running / 255 errors / 28.999999999999996% coverage ] ****** [256 done /184 queued / 16 running / 255 errors / 28.999999999999996% coverage ] ****** [257 done /186 queued / 16 running / 256 errors / 28.999999999999996% coverage ] ****** [257 done /186 queued / 16 running / 256 errors / 28.999999999999996% coverage ] ****** [258 done /190 queued / 16 running / 257 errors / 28.999999999999996% coverage ] ****** [258 done /190 queued / 16 running / 257 errors / 28.999999999999996% coverage ] ****** [259 done /189 queued / 16 running / 258 errors / 28.999999999999996% coverage ] ****** [259 done /189 queued / 16 running / 258 errors / 28.999999999999996% coverage ] ****** [260 done /189 queued / 16 running / 259 errors / 28.999999999999996% coverage ] ****** [260 done /189 queued / 16 running / 259 errors / 28.999999999999996% coverage ] ****** [261 done /194 queued / 16 running / 260 errors / 28.999999999999996% coverage ] ****** [261 done /194 queued / 16 running / 260 errors / 28.999999999999996% coverage ] ****** [262 done /193 queued / 16 running / 261 errors / 28.999999999999996% coverage ] ****** [262 done /193 queued / 16 running / 261 errors / 28.999999999999996% coverage ] ****** [263 done /195 queued / 16 running / 262 errors / 28.999999999999996% coverage ] ****** [263 done /195 queued / 16 running / 262 errors / 28.999999999999996% coverage ] ****** [264 done /198 queued / 16 running / 263 errors / 28.999999999999996% coverage ] ****** [264 done /198 queued / 16 running / 263 errors / 28.999999999999996% coverage ] ****** [265 done /201 queued / 16 running / 264 errors / 28.999999999999996% coverage ] ****** [265 done /201 queued / 16 running / 264 errors / 28.999999999999996% coverage ] ****** [266 done /202 queued / 16 running / 265 errors / 28.999999999999996% coverage ] ****** [266 done /202 queued / 16 running / 265 errors / 28.999999999999996% coverage ] ****** [267 done /203 queued / 16 running / 266 errors / 28.999999999999996% coverage ] ****** [267 done /203 queued / 16 running / 266 errors / 28.999999999999996% coverage ] ****** [268 done /205 queued / 16 running / 267 errors / 28.999999999999996% coverage ] ****** [268 done /205 queued / 16 running / 267 errors / 28.999999999999996% coverage ] ****** [269 done /207 queued / 16 running / 268 errors / 28.999999999999996% coverage ] ****** [269 done /207 queued / 16 running / 268 errors / 28.999999999999996% coverage ] ****** [270 done /208 queued / 16 running / 269 errors / 28.999999999999996% coverage ] ****** [270 done /208 queued / 16 running / 269 errors / 28.999999999999996% coverage ] ****** [271 done /209 queued / 16 running / 270 errors / 28.999999999999996% coverage ] ****** [271 done /209 queued / 16 running / 270 errors / 28.999999999999996% coverage ] ****** [272 done /210 queued / 16 running / 271 errors / 28.999999999999996% coverage ] ****** [272 done /210 queued / 16 running / 271 errors / 28.999999999999996% coverage ] ****** [273 done /211 queued / 16 running / 272 errors / 28.999999999999996% coverage ] ****** [273 done /211 queued / 16 running / 272 errors / 28.999999999999996% coverage ] ****** [274 done /212 queued / 16 running / 273 errors / 28.999999999999996% coverage ] ****** [274 done /212 queued / 16 running / 273 errors / 28.999999999999996% coverage ] ****** [275 done /212 queued / 16 running / 274 errors / 28.999999999999996% coverage ] ****** [275 done /212 queued / 16 running / 274 errors / 28.999999999999996% coverage ] ****** [276 done /214 queued / 16 running / 275 errors / 28.999999999999996% coverage ] ****** [276 done /214 queued / 16 running / 275 errors / 28.999999999999996% coverage ] ****** [277 done /215 queued / 16 running / 276 errors / 28.999999999999996% coverage ] ****** [277 done /215 queued / 16 running / 276 errors / 28.999999999999996% coverage ] ****** [278 done /218 queued / 16 running / 277 errors / 28.999999999999996% coverage ] ****** [278 done /218 queued / 16 running / 277 errors / 28.999999999999996% coverage ] ****** [279 done /217 queued / 16 running / 278 errors / 28.999999999999996% coverage ] ****** [279 done /217 queued / 16 running / 278 errors / 28.999999999999996% coverage ] ****** [280 done /219 queued / 16 running / 279 errors / 28.999999999999996% coverage ] ****** [280 done /219 queued / 16 running / 279 errors / 28.999999999999996% coverage ] ****** [281 done /221 queued / 16 running / 280 errors / 28.999999999999996% coverage ] ****** [281 done /221 queued / 16 running / 280 errors / 28.999999999999996% coverage ] ****** [282 done /220 queued / 16 running / 281 errors / 28.999999999999996% coverage ] ****** [282 done /220 queued / 16 running / 281 errors / 28.999999999999996% coverage ] ****** [283 done /223 queued / 16 running / 282 errors / 28.999999999999996% coverage ] ****** [283 done /223 queued / 16 running / 282 errors / 28.999999999999996% coverage ] ****** [284 done /222 queued / 16 running / 283 errors / 28.999999999999996% coverage ] ****** [284 done /222 queued / 16 running / 283 errors / 28.999999999999996% coverage ] ****** [285 done /225 queued / 16 running / 284 errors / 28.999999999999996% coverage ] ****** [285 done /225 queued / 16 running / 284 errors / 28.999999999999996% coverage ] ****** [286 done /225 queued / 16 running / 285 errors / 28.999999999999996% coverage ] ****** [286 done /225 queued / 16 running / 285 errors / 28.999999999999996% coverage ] ****** [287 done /225 queued / 16 running / 286 errors / 28.999999999999996% coverage ] ****** [287 done /225 queued / 16 running / 286 errors / 28.999999999999996% coverage ] ****** [288 done /224 queued / 16 running / 287 errors / 28.999999999999996% coverage ] ****** [288 done /224 queued / 16 running / 287 errors / 28.999999999999996% coverage ] ****** [289 done /226 queued / 16 running / 288 errors / 28.999999999999996% coverage ] ****** [289 done /226 queued / 16 running / 288 errors / 28.999999999999996% coverage ] ****** [290 done /225 queued / 16 running / 289 errors / 28.999999999999996% coverage ] ****** [290 done /225 queued / 16 running / 289 errors / 28.999999999999996% coverage ] ****** [291 done /228 queued / 16 running / 290 errors / 28.999999999999996% coverage ] ****** [291 done /228 queued / 16 running / 290 errors / 28.999999999999996% coverage ] ****** [292 done /227 queued / 16 running / 291 errors / 28.999999999999996% coverage ] ****** [292 done /227 queued / 16 running / 291 errors / 28.999999999999996% coverage ] ****** [293 done /228 queued / 16 running / 292 errors / 28.999999999999996% coverage ] ****** [293 done /228 queued / 16 running / 292 errors / 28.999999999999996% coverage ] ****** [294 done /231 queued / 16 running / 293 errors / 28.999999999999996% coverage ] ****** [294 done /231 queued / 16 running / 293 errors / 28.999999999999996% coverage ] ****** [295 done /233 queued / 16 running / 294 errors / 28.999999999999996% coverage ] ****** [295 done /233 queued / 16 running / 294 errors / 28.999999999999996% coverage ] ****** [296 done /232 queued / 16 running / 295 errors / 28.999999999999996% coverage ] ****** [296 done /232 queued / 16 running / 295 errors / 28.999999999999996% coverage ] ****** [297 done /231 queued / 16 running / 296 errors / 28.999999999999996% coverage ] ****** [297 done /231 queued / 16 running / 296 errors / 28.999999999999996% coverage ] ****** [298 done /233 queued / 16 running / 297 errors / 28.999999999999996% coverage ] ****** [298 done /233 queued / 16 running / 297 errors / 28.999999999999996% coverage ] ****** [299 done /233 queued / 16 running / 298 errors / 28.999999999999996% coverage ] ****** [299 done /233 queued / 16 running / 298 errors / 28.999999999999996% coverage ] ****** [300 done /236 queued / 16 running / 299 errors / 28.999999999999996% coverage ] ****** [300 done /236 queued / 16 running / 299 errors / 28.999999999999996% coverage ] ****** [301 done /238 queued / 16 running / 300 errors / 28.999999999999996% coverage ] ****** [301 done /238 queued / 16 running / 300 errors / 28.999999999999996% coverage ] ****** [302 done /238 queued / 16 running / 301 errors / 28.999999999999996% coverage ] ****** [302 done /238 queued / 16 running / 301 errors / 28.999999999999996% coverage ] ****** [303 done /237 queued / 16 running / 302 errors / 28.999999999999996% coverage ] ****** [303 done /237 queued / 16 running / 302 errors / 28.999999999999996% coverage ] ****** [304 done /240 queued / 16 running / 303 errors / 28.999999999999996% coverage ] ****** [304 done /240 queued / 16 running / 303 errors / 28.999999999999996% coverage ] ****** [305 done /240 queued / 16 running / 304 errors / 28.999999999999996% coverage ] ****** [305 done /240 queued / 16 running / 304 errors / 28.999999999999996% coverage ] ****** [306 done /239 queued / 16 running / 305 errors / 28.999999999999996% coverage ] ****** [306 done /239 queued / 16 running / 305 errors / 28.999999999999996% coverage ] ****** [307 done /239 queued / 16 running / 306 errors / 28.999999999999996% coverage ] ****** [307 done /239 queued / 16 running / 306 errors / 28.999999999999996% coverage ] ****** [308 done /238 queued / 16 running / 307 errors / 28.999999999999996% coverage ] ****** [308 done /238 queued / 16 running / 307 errors / 28.999999999999996% coverage ] ****** [309 done /239 queued / 16 running / 308 errors / 28.999999999999996% coverage ] ****** [309 done /239 queued / 16 running / 308 errors / 28.999999999999996% coverage ] ****** [310 done /243 queued / 16 running / 309 errors / 28.999999999999996% coverage ] ****** [310 done /243 queued / 16 running / 309 errors / 28.999999999999996% coverage ] ****** [311 done /242 queued / 16 running / 310 errors / 28.999999999999996% coverage ] ****** [311 done /242 queued / 16 running / 310 errors / 28.999999999999996% coverage ] ****** [312 done /243 queued / 16 running / 311 errors / 28.999999999999996% coverage ] ****** [312 done /243 queued / 16 running / 311 errors / 28.999999999999996% coverage ] ****** [313 done /245 queued / 16 running / 312 errors / 28.999999999999996% coverage ] ****** [313 done /245 queued / 16 running / 312 errors / 28.999999999999996% coverage ] ****** [314 done /244 queued / 16 running / 313 errors / 28.999999999999996% coverage ] ****** [314 done /244 queued / 16 running / 313 errors / 28.999999999999996% coverage ] ****** [315 done /244 queued / 16 running / 314 errors / 28.999999999999996% coverage ] ****** [315 done /244 queued / 16 running / 314 errors / 28.999999999999996% coverage ] ****** [316 done /247 queued / 16 running / 315 errors / 28.999999999999996% coverage ] ****** [316 done /247 queued / 16 running / 315 errors / 28.999999999999996% coverage ] ****** [317 done /246 queued / 16 running / 316 errors / 28.999999999999996% coverage ] ****** [317 done /246 queued / 16 running / 316 errors / 28.999999999999996% coverage ] ****** [318 done /246 queued / 16 running / 317 errors / 28.999999999999996% coverage ] ****** [318 done /246 queued / 16 running / 317 errors / 28.999999999999996% coverage ] ****** [319 done /246 queued / 16 running / 318 errors / 28.999999999999996% coverage ] ****** [319 done /246 queued / 16 running / 318 errors / 28.999999999999996% coverage ] ****** [320 done /245 queued / 16 running / 319 errors / 28.999999999999996% coverage ] ****** [320 done /245 queued / 16 running / 319 errors / 28.999999999999996% coverage ] ****** [321 done /244 queued / 16 running / 320 errors / 28.999999999999996% coverage ] ****** [321 done /244 queued / 16 running / 320 errors / 28.999999999999996% coverage ] ****** [322 done /243 queued / 16 running / 321 errors / 28.999999999999996% coverage ] ****** [322 done /243 queued / 16 running / 321 errors / 28.999999999999996% coverage ] ****** [323 done /242 queued / 16 running / 322 errors / 28.999999999999996% coverage ] ****** [323 done /242 queued / 16 running / 322 errors / 28.999999999999996% coverage ] ****** [324 done /244 queued / 16 running / 323 errors / 28.999999999999996% coverage ] ****** [324 done /244 queued / 16 running / 323 errors / 28.999999999999996% coverage ] ****** [325 done /247 queued / 16 running / 324 errors / 28.999999999999996% coverage ] ****** [325 done /247 queued / 16 running / 324 errors / 28.999999999999996% coverage ] ****** [326 done /250 queued / 16 running / 325 errors / 28.999999999999996% coverage ] ****** [326 done /250 queued / 16 running / 325 errors / 28.999999999999996% coverage ] ****** [327 done /251 queued / 16 running / 326 errors / 28.999999999999996% coverage ] ****** [327 done /251 queued / 16 running / 326 errors / 28.999999999999996% coverage ] ****** [328 done /253 queued / 16 running / 327 errors / 28.999999999999996% coverage ] ****** [328 done /253 queued / 16 running / 327 errors / 28.999999999999996% coverage ] ****** [329 done /253 queued / 16 running / 328 errors / 28.999999999999996% coverage ] ****** [329 done /253 queued / 16 running / 328 errors / 28.999999999999996% coverage ] ****** [330 done /257 queued / 16 running / 329 errors / 28.999999999999996% coverage ] ****** [330 done /257 queued / 16 running / 329 errors / 28.999999999999996% coverage ] ****** [331 done /260 queued / 16 running / 330 errors / 28.999999999999996% coverage ] ****** [331 done /260 queued / 16 running / 330 errors / 28.999999999999996% coverage ] ****** [332 done /261 queued / 16 running / 331 errors / 28.999999999999996% coverage ] ****** [332 done /261 queued / 16 running / 331 errors / 28.999999999999996% coverage ] ****** [333 done /263 queued / 16 running / 332 errors / 28.999999999999996% coverage ] ****** [333 done /263 queued / 16 running / 332 errors / 28.999999999999996% coverage ] ****** [334 done /264 queued / 16 running / 333 errors / 28.999999999999996% coverage ] ****** [334 done /264 queued / 16 running / 333 errors / 28.999999999999996% coverage ] ****** [335 done /263 queued / 16 running / 334 errors / 28.999999999999996% coverage ] ****** [335 done /263 queued / 16 running / 334 errors / 28.999999999999996% coverage ] ****** [336 done /262 queued / 16 running / 335 errors / 28.999999999999996% coverage ] ****** [336 done /262 queued / 16 running / 335 errors / 28.999999999999996% coverage ] ****** [337 done /261 queued / 16 running / 336 errors / 28.999999999999996% coverage ] ****** [337 done /261 queued / 16 running / 336 errors / 28.999999999999996% coverage ] ****** [338 done /261 queued / 16 running / 337 errors / 28.999999999999996% coverage ] ****** [338 done /261 queued / 16 running / 337 errors / 28.999999999999996% coverage ] ****** [339 done /263 queued / 16 running / 338 errors / 28.999999999999996% coverage ] ****** [339 done /263 queued / 16 running / 338 errors / 28.999999999999996% coverage ] ****** [340 done /265 queued / 16 running / 339 errors / 28.999999999999996% coverage ] ****** [340 done /265 queued / 16 running / 339 errors / 28.999999999999996% coverage ] ****** [341 done /268 queued / 16 running / 340 errors / 28.999999999999996% coverage ] ****** [341 done /268 queued / 16 running / 340 errors / 28.999999999999996% coverage ] ****** [342 done /270 queued / 16 running / 341 errors / 28.999999999999996% coverage ] ****** [342 done /270 queued / 16 running / 341 errors / 28.999999999999996% coverage ] ****** [343 done /271 queued / 16 running / 342 errors / 28.999999999999996% coverage ] ****** [343 done /271 queued / 16 running / 342 errors / 28.999999999999996% coverage ] ****** [344 done /272 queued / 16 running / 343 errors / 28.999999999999996% coverage ] ****** [344 done /272 queued / 16 running / 343 errors / 28.999999999999996% coverage ] ****** [345 done /273 queued / 16 running / 344 errors / 28.999999999999996% coverage ] ****** [345 done /273 queued / 16 running / 344 errors / 28.999999999999996% coverage ] ****** [346 done /273 queued / 16 running / 345 errors / 28.999999999999996% coverage ] ****** [346 done /273 queued / 16 running / 345 errors / 28.999999999999996% coverage ] ****** [347 done /275 queued / 16 running / 346 errors / 28.999999999999996% coverage ] ****** [347 done /275 queued / 16 running / 346 errors / 28.999999999999996% coverage ] ****** [348 done /275 queued / 16 running / 347 errors / 28.999999999999996% coverage ] ****** [348 done /275 queued / 16 running / 347 errors / 28.999999999999996% coverage ] ****** [349 done /275 queued / 16 running / 348 errors / 28.999999999999996% coverage ] ****** [349 done /275 queued / 16 running / 348 errors / 28.999999999999996% coverage ] ****** [350 done /275 queued / 16 running / 349 errors / 28.999999999999996% coverage ] ****** [350 done /275 queued / 16 running / 349 errors / 28.999999999999996% coverage ] ****** [351 done /276 queued / 16 running / 350 errors / 28.999999999999996% coverage ] ****** [351 done /276 queued / 16 running / 350 errors / 28.999999999999996% coverage ] ****** [352 done /276 queued / 16 running / 351 errors / 28.999999999999996% coverage ] ****** [352 done /276 queued / 16 running / 351 errors / 28.999999999999996% coverage ] ****** [353 done /275 queued / 16 running / 352 errors / 28.999999999999996% coverage ] ****** [353 done /275 queued / 16 running / 352 errors / 28.999999999999996% coverage ] ****** [354 done /278 queued / 16 running / 353 errors / 28.999999999999996% coverage ] ****** [354 done /278 queued / 16 running / 353 errors / 28.999999999999996% coverage ] ****** [355 done /278 queued / 16 running / 354 errors / 28.999999999999996% coverage ] ****** [355 done /278 queued / 16 running / 354 errors / 28.999999999999996% coverage ] ****** [356 done /277 queued / 16 running / 355 errors / 28.999999999999996% coverage ] ****** [356 done /277 queued / 16 running / 355 errors / 28.999999999999996% coverage ] ****** [357 done /277 queued / 16 running / 356 errors / 28.999999999999996% coverage ] ****** [357 done /277 queued / 16 running / 356 errors / 28.999999999999996% coverage ] ****** [358 done /281 queued / 16 running / 357 errors / 28.999999999999996% coverage ] ****** [358 done /281 queued / 16 running / 357 errors / 28.999999999999996% coverage ] ****** [359 done /282 queued / 16 running / 358 errors / 28.999999999999996% coverage ] ****** [359 done /282 queued / 16 running / 358 errors / 28.999999999999996% coverage ] ****** [360 done /281 queued / 16 running / 359 errors / 28.999999999999996% coverage ] ****** [360 done /281 queued / 16 running / 359 errors / 28.999999999999996% coverage ] ****** [361 done /283 queued / 16 running / 360 errors / 28.999999999999996% coverage ] ****** [361 done /283 queued / 16 running / 360 errors / 28.999999999999996% coverage ] ****** [362 done /282 queued / 16 running / 361 errors / 28.999999999999996% coverage ] ****** [362 done /282 queued / 16 running / 361 errors / 28.999999999999996% coverage ] ****** [363 done /282 queued / 16 running / 362 errors / 28.999999999999996% coverage ] ****** [363 done /282 queued / 16 running / 362 errors / 28.999999999999996% coverage ] ****** [364 done /281 queued / 16 running / 363 errors / 28.999999999999996% coverage ] ****** [364 done /281 queued / 16 running / 363 errors / 28.999999999999996% coverage ] ****** [365 done /284 queued / 16 running / 364 errors / 28.999999999999996% coverage ] ****** [365 done /284 queued / 16 running / 364 errors / 28.999999999999996% coverage ] ****** [366 done /286 queued / 16 running / 365 errors / 28.999999999999996% coverage ] ****** [366 done /286 queued / 16 running / 365 errors / 28.999999999999996% coverage ] ****** [367 done /285 queued / 16 running / 366 errors / 28.999999999999996% coverage ] ****** [367 done /285 queued / 16 running / 366 errors / 28.999999999999996% coverage ] ****** [368 done /286 queued / 16 running / 367 errors / 28.999999999999996% coverage ] ****** [368 done /286 queued / 16 running / 367 errors / 28.999999999999996% coverage ] ****** [369 done /287 queued / 16 running / 368 errors / 28.999999999999996% coverage ] ****** [369 done /287 queued / 16 running / 368 errors / 28.999999999999996% coverage ] ****** [370 done /288 queued / 16 running / 369 errors / 28.999999999999996% coverage ] ****** [370 done /288 queued / 16 running / 369 errors / 28.999999999999996% coverage ] ****** [371 done /288 queued / 16 running / 370 errors / 28.999999999999996% coverage ] ****** [371 done /288 queued / 16 running / 370 errors / 28.999999999999996% coverage ] ****** [372 done /289 queued / 16 running / 371 errors / 28.999999999999996% coverage ] ****** [372 done /289 queued / 16 running / 371 errors / 28.999999999999996% coverage ] ****** [373 done /292 queued / 16 running / 372 errors / 28.999999999999996% coverage ] ****** [373 done /292 queued / 16 running / 372 errors / 28.999999999999996% coverage ] ****** [374 done /293 queued / 16 running / 373 errors / 28.999999999999996% coverage ] ****** [374 done /293 queued / 16 running / 373 errors / 28.999999999999996% coverage ] ****** [375 done /297 queued / 16 running / 374 errors / 28.999999999999996% coverage ] ****** [375 done /297 queued / 16 running / 374 errors / 28.999999999999996% coverage ] ****** [376 done /299 queued / 16 running / 375 errors / 28.999999999999996% coverage ] ****** [376 done /299 queued / 16 running / 375 errors / 28.999999999999996% coverage ] ****** [377 done /298 queued / 16 running / 376 errors / 28.999999999999996% coverage ] ****** [377 done /298 queued / 16 running / 376 errors / 28.999999999999996% coverage ] ****** [378 done /303 queued / 16 running / 377 errors / 28.999999999999996% coverage ] ****** [378 done /303 queued / 16 running / 377 errors / 28.999999999999996% coverage ] ****** [379 done /308 queued / 16 running / 378 errors / 28.999999999999996% coverage ] ****** [379 done /308 queued / 16 running / 378 errors / 28.999999999999996% coverage ] ****** [380 done /307 queued / 16 running / 379 errors / 28.999999999999996% coverage ] ****** [380 done /307 queued / 16 running / 379 errors / 28.999999999999996% coverage ] ****** [381 done /306 queued / 16 running / 380 errors / 28.999999999999996% coverage ] ****** [381 done /306 queued / 16 running / 380 errors / 28.999999999999996% coverage ] ****** [382 done /308 queued / 16 running / 381 errors / 28.999999999999996% coverage ] ****** [382 done /308 queued / 16 running / 381 errors / 28.999999999999996% coverage ] ****** [383 done /308 queued / 16 running / 382 errors / 28.999999999999996% coverage ] ****** [383 done /308 queued / 16 running / 382 errors / 28.999999999999996% coverage ] ****** [384 done /307 queued / 16 running / 383 errors / 28.999999999999996% coverage ] ****** [384 done /307 queued / 16 running / 383 errors / 28.999999999999996% coverage ] ****** [385 done /309 queued / 16 running / 384 errors / 28.999999999999996% coverage ] ****** [385 done /309 queued / 16 running / 384 errors / 28.999999999999996% coverage ] ****** [386 done /312 queued / 16 running / 385 errors / 28.999999999999996% coverage ] ****** [386 done /312 queued / 16 running / 385 errors / 28.999999999999996% coverage ] ****** [387 done /311 queued / 16 running / 386 errors / 28.999999999999996% coverage ] ****** [387 done /311 queued / 16 running / 386 errors / 28.999999999999996% coverage ] ****** [388 done /315 queued / 16 running / 387 errors / 28.999999999999996% coverage ] ****** [388 done /315 queued / 16 running / 387 errors / 28.999999999999996% coverage ] ****** [389 done /317 queued / 16 running / 388 errors / 28.999999999999996% coverage ] ****** [389 done /317 queued / 16 running / 388 errors / 28.999999999999996% coverage ] ****** [390 done /320 queued / 16 running / 389 errors / 28.999999999999996% coverage ] ****** [390 done /320 queued / 16 running / 389 errors / 28.999999999999996% coverage ] ****** [391 done /321 queued / 16 running / 390 errors / 28.999999999999996% coverage ] ****** [391 done /321 queued / 16 running / 390 errors / 28.999999999999996% coverage ] ****** [392 done /321 queued / 16 running / 391 errors / 28.999999999999996% coverage ] ****** [392 done /321 queued / 16 running / 391 errors / 28.999999999999996% coverage ] ****** [393 done /321 queued / 16 running / 392 errors / 28.999999999999996% coverage ] ****** [393 done /321 queued / 16 running / 392 errors / 28.999999999999996% coverage ] ****** [394 done /322 queued / 16 running / 393 errors / 28.999999999999996% coverage ] ****** [394 done /322 queued / 16 running / 393 errors / 28.999999999999996% coverage ] ****** [395 done /323 queued / 16 running / 394 errors / 28.999999999999996% coverage ] ****** [395 done /323 queued / 16 running / 394 errors / 28.999999999999996% coverage ] ****** [396 done /323 queued / 16 running / 395 errors / 28.999999999999996% coverage ] ****** [396 done /323 queued / 16 running / 395 errors / 28.999999999999996% coverage ] ****** [397 done /324 queued / 16 running / 396 errors / 28.999999999999996% coverage ] ****** [397 done /324 queued / 16 running / 396 errors / 28.999999999999996% coverage ] ****** [398 done /326 queued / 16 running / 397 errors / 28.999999999999996% coverage ] ****** [398 done /326 queued / 16 running / 397 errors / 28.999999999999996% coverage ] ****** [399 done /328 queued / 16 running / 398 errors / 28.999999999999996% coverage ] ****** [399 done /328 queued / 16 running / 398 errors / 28.999999999999996% coverage ] ****** [400 done /328 queued / 16 running / 399 errors / 28.999999999999996% coverage ] ****** [400 done /328 queued / 16 running / 399 errors / 28.999999999999996% coverage ] ****** [401 done /329 queued / 16 running / 400 errors / 28.999999999999996% coverage ] ****** [401 done /329 queued / 16 running / 400 errors / 28.999999999999996% coverage ] ****** [402 done /330 queued / 16 running / 401 errors / 28.999999999999996% coverage ] ****** [402 done /330 queued / 16 running / 401 errors / 28.999999999999996% coverage ] ****** [403 done /331 queued / 16 running / 402 errors / 28.999999999999996% coverage ] ****** [403 done /331 queued / 16 running / 402 errors / 28.999999999999996% coverage ] ****** [404 done /332 queued / 16 running / 403 errors / 28.999999999999996% coverage ] ****** [404 done /332 queued / 16 running / 403 errors / 28.999999999999996% coverage ] ****** [405 done /334 queued / 16 running / 404 errors / 28.999999999999996% coverage ] ****** [405 done /334 queued / 16 running / 404 errors / 28.999999999999996% coverage ] ****** [406 done /334 queued / 16 running / 405 errors / 28.999999999999996% coverage ] ****** [406 done /334 queued / 16 running / 405 errors / 28.999999999999996% coverage ] ****** [407 done /335 queued / 16 running / 406 errors / 28.999999999999996% coverage ] ****** [407 done /335 queued / 16 running / 406 errors / 28.999999999999996% coverage ] ****** [408 done /336 queued / 16 running / 407 errors / 28.999999999999996% coverage ] ****** [408 done /336 queued / 16 running / 407 errors / 28.999999999999996% coverage ] ****** [409 done /335 queued / 16 running / 408 errors / 28.999999999999996% coverage ] ****** [409 done /335 queued / 16 running / 408 errors / 28.999999999999996% coverage ] ****** [410 done /334 queued / 16 running / 409 errors / 28.999999999999996% coverage ] ****** [410 done /334 queued / 16 running / 409 errors / 28.999999999999996% coverage ] ****** [411 done /336 queued / 16 running / 410 errors / 28.999999999999996% coverage ] ****** [411 done /336 queued / 16 running / 410 errors / 28.999999999999996% coverage ] ****** [412 done /337 queued / 16 running / 411 errors / 28.999999999999996% coverage ] ****** [412 done /337 queued / 16 running / 411 errors / 28.999999999999996% coverage ] ****** [413 done /337 queued / 16 running / 412 errors / 28.999999999999996% coverage ] ****** [413 done /337 queued / 16 running / 412 errors / 28.999999999999996% coverage ] ****** [414 done /340 queued / 16 running / 413 errors / 28.999999999999996% coverage ] ****** [414 done /340 queued / 16 running / 413 errors / 28.999999999999996% coverage ] ****** [415 done /339 queued / 16 running / 414 errors / 28.999999999999996% coverage ] ****** [415 done /339 queued / 16 running / 414 errors / 28.999999999999996% coverage ] ****** [416 done /341 queued / 16 running / 415 errors / 28.999999999999996% coverage ] ****** [416 done /341 queued / 16 running / 415 errors / 28.999999999999996% coverage ] ****** [417 done /343 queued / 16 running / 416 errors / 28.999999999999996% coverage ] ****** [417 done /343 queued / 16 running / 416 errors / 28.999999999999996% coverage ] ****** [418 done /342 queued / 16 running / 417 errors / 28.999999999999996% coverage ] ****** [418 done /342 queued / 16 running / 417 errors / 28.999999999999996% coverage ] ****** [419 done /345 queued / 16 running / 418 errors / 28.999999999999996% coverage ] ****** [419 done /345 queued / 16 running / 418 errors / 28.999999999999996% coverage ] ****** [420 done /349 queued / 16 running / 419 errors / 28.999999999999996% coverage ] ****** [420 done /349 queued / 16 running / 419 errors / 28.999999999999996% coverage ] ****** [421 done /351 queued / 16 running / 420 errors / 28.999999999999996% coverage ] ****** [421 done /351 queued / 16 running / 420 errors / 28.999999999999996% coverage ] ****** [422 done /350 queued / 16 running / 421 errors / 28.999999999999996% coverage ] ****** [422 done /350 queued / 16 running / 421 errors / 28.999999999999996% coverage ] ****** [423 done /351 queued / 16 running / 422 errors / 28.999999999999996% coverage ] ****** [423 done /351 queued / 16 running / 422 errors / 28.999999999999996% coverage ] ****** [424 done /350 queued / 16 running / 423 errors / 28.999999999999996% coverage ] ****** [424 done /350 queued / 16 running / 423 errors / 28.999999999999996% coverage ] ****** [425 done /349 queued / 16 running / 424 errors / 28.999999999999996% coverage ] ****** [425 done /349 queued / 16 running / 424 errors / 28.999999999999996% coverage ] ****** [426 done /348 queued / 16 running / 425 errors / 28.999999999999996% coverage ] ****** [426 done /348 queued / 16 running / 425 errors / 28.999999999999996% coverage ] ****** [427 done /351 queued / 16 running / 426 errors / 28.999999999999996% coverage ] ****** [427 done /351 queued / 16 running / 426 errors / 28.999999999999996% coverage ] ****** [428 done /352 queued / 16 running / 427 errors / 28.999999999999996% coverage ] ****** [428 done /352 queued / 16 running / 427 errors / 28.999999999999996% coverage ] ****** [429 done /354 queued / 16 running / 428 errors / 28.999999999999996% coverage ] ****** [429 done /354 queued / 16 running / 428 errors / 28.999999999999996% coverage ] ****** [430 done /356 queued / 16 running / 429 errors / 28.999999999999996% coverage ] ****** [430 done /356 queued / 16 running / 429 errors / 28.999999999999996% coverage ] ****** [431 done /357 queued / 16 running / 430 errors / 28.999999999999996% coverage ] ****** [431 done /357 queued / 16 running / 430 errors / 28.999999999999996% coverage ] ****** [432 done /360 queued / 16 running / 431 errors / 28.999999999999996% coverage ] ****** [432 done /360 queued / 16 running / 431 errors / 28.999999999999996% coverage ] ****** [433 done /364 queued / 16 running / 432 errors / 28.999999999999996% coverage ] ****** [433 done /364 queued / 16 running / 432 errors / 28.999999999999996% coverage ] ****** [434 done /363 queued / 16 running / 433 errors / 28.999999999999996% coverage ] ****** [434 done /363 queued / 16 running / 433 errors / 28.999999999999996% coverage ] ****** [435 done /362 queued / 16 running / 434 errors / 28.999999999999996% coverage ] ****** [435 done /362 queued / 16 running / 434 errors / 28.999999999999996% coverage ] ****** [436 done /361 queued / 16 running / 435 errors / 28.999999999999996% coverage ] ****** [436 done /361 queued / 16 running / 435 errors / 28.999999999999996% coverage ] ****** [437 done /360 queued / 16 running / 436 errors / 28.999999999999996% coverage ] ****** [437 done /360 queued / 16 running / 436 errors / 28.999999999999996% coverage ] ****** [438 done /362 queued / 16 running / 437 errors / 28.999999999999996% coverage ] ****** [438 done /362 queued / 16 running / 437 errors / 28.999999999999996% coverage ] ****** [439 done /361 queued / 16 running / 438 errors / 28.999999999999996% coverage ] ****** [439 done /361 queued / 16 running / 438 errors / 28.999999999999996% coverage ] ****** [440 done /361 queued / 16 running / 439 errors / 28.999999999999996% coverage ] ****** [440 done /361 queued / 16 running / 439 errors / 28.999999999999996% coverage ] ****** [441 done /363 queued / 16 running / 440 errors / 28.999999999999996% coverage ] ****** [441 done /363 queued / 16 running / 440 errors / 28.999999999999996% coverage ] ****** [442 done /364 queued / 16 running / 441 errors / 28.999999999999996% coverage ] ****** [442 done /364 queued / 16 running / 441 errors / 28.999999999999996% coverage ] ****** [443 done /363 queued / 16 running / 442 errors / 28.999999999999996% coverage ] ****** [443 done /363 queued / 16 running / 442 errors / 28.999999999999996% coverage ] ****** [444 done /364 queued / 16 running / 443 errors / 28.999999999999996% coverage ] ****** [444 done /364 queued / 16 running / 443 errors / 28.999999999999996% coverage ] ****** [445 done /369 queued / 16 running / 444 errors / 28.999999999999996% coverage ] ****** [445 done /369 queued / 16 running / 444 errors / 28.999999999999996% coverage ] ****** [446 done /371 queued / 16 running / 445 errors / 28.999999999999996% coverage ] ****** [446 done /371 queued / 16 running / 445 errors / 28.999999999999996% coverage ] ****** [447 done /371 queued / 16 running / 446 errors / 28.999999999999996% coverage ] ****** [447 done /371 queued / 16 running / 446 errors / 28.999999999999996% coverage ] ****** [448 done /371 queued / 16 running / 447 errors / 28.999999999999996% coverage ] ****** [448 done /371 queued / 16 running / 447 errors / 28.999999999999996% coverage ] ****** [449 done /372 queued / 16 running / 448 errors / 28.999999999999996% coverage ] ****** [449 done /372 queued / 16 running / 448 errors / 28.999999999999996% coverage ] ****** [450 done /373 queued / 16 running / 449 errors / 28.999999999999996% coverage ] ****** [450 done /373 queued / 16 running / 449 errors / 28.999999999999996% coverage ] ****** [451 done /373 queued / 16 running / 450 errors / 28.999999999999996% coverage ] ****** [451 done /373 queued / 16 running / 450 errors / 28.999999999999996% coverage ] ****** [452 done /376 queued / 16 running / 451 errors / 28.999999999999996% coverage ] ****** [452 done /376 queued / 16 running / 451 errors / 28.999999999999996% coverage ] ****** [453 done /377 queued / 16 running / 452 errors / 28.999999999999996% coverage ] ****** [453 done /377 queued / 16 running / 452 errors / 28.999999999999996% coverage ] ****** [454 done /376 queued / 16 running / 453 errors / 28.999999999999996% coverage ] ****** [454 done /376 queued / 16 running / 453 errors / 28.999999999999996% coverage ] ****** [455 done /379 queued / 16 running / 454 errors / 28.999999999999996% coverage ] ****** [455 done /379 queued / 16 running / 454 errors / 28.999999999999996% coverage ] ****** [456 done /378 queued / 16 running / 455 errors / 28.999999999999996% coverage ] ****** [456 done /378 queued / 16 running / 455 errors / 28.999999999999996% coverage ] ****** [457 done /377 queued / 16 running / 456 errors / 28.999999999999996% coverage ] ****** [457 done /377 queued / 16 running / 456 errors / 28.999999999999996% coverage ] ****** [458 done /379 queued / 16 running / 457 errors / 28.999999999999996% coverage ] ****** [458 done /379 queued / 16 running / 457 errors / 28.999999999999996% coverage ] ****** [459 done /378 queued / 16 running / 458 errors / 28.999999999999996% coverage ] ****** [459 done /378 queued / 16 running / 458 errors / 28.999999999999996% coverage ] ****** [460 done /378 queued / 16 running / 459 errors / 28.999999999999996% coverage ] ****** [460 done /378 queued / 16 running / 459 errors / 28.999999999999996% coverage ] ****** [461 done /379 queued / 16 running / 460 errors / 28.999999999999996% coverage ] ****** [461 done /379 queued / 16 running / 460 errors / 28.999999999999996% coverage ] ****** [462 done /380 queued / 16 running / 461 errors / 28.999999999999996% coverage ] ****** [462 done /380 queued / 16 running / 461 errors / 28.999999999999996% coverage ] ****** [463 done /382 queued / 16 running / 462 errors / 28.999999999999996% coverage ] ****** [463 done /382 queued / 16 running / 462 errors / 28.999999999999996% coverage ] ****** [464 done /383 queued / 16 running / 463 errors / 28.999999999999996% coverage ] ****** [464 done /383 queued / 16 running / 463 errors / 28.999999999999996% coverage ] ****** [465 done /383 queued / 16 running / 464 errors / 28.999999999999996% coverage ] ****** [465 done /383 queued / 16 running / 464 errors / 28.999999999999996% coverage ] ****** [466 done /382 queued / 16 running / 465 errors / 28.999999999999996% coverage ] ****** [466 done /382 queued / 16 running / 465 errors / 28.999999999999996% coverage ] ****** [467 done /381 queued / 16 running / 466 errors / 28.999999999999996% coverage ] ****** [467 done /381 queued / 16 running / 466 errors / 28.999999999999996% coverage ] ****** [468 done /380 queued / 16 running / 467 errors / 28.999999999999996% coverage ] ****** [468 done /380 queued / 16 running / 467 errors / 28.999999999999996% coverage ] ****** [469 done /382 queued / 16 running / 468 errors / 28.999999999999996% coverage ] ****** [469 done /382 queued / 16 running / 468 errors / 28.999999999999996% coverage ] ****** [470 done /384 queued / 16 running / 469 errors / 28.999999999999996% coverage ] ****** [470 done /384 queued / 16 running / 469 errors / 28.999999999999996% coverage ] ****** [471 done /383 queued / 16 running / 470 errors / 28.999999999999996% coverage ] ****** [471 done /383 queued / 16 running / 470 errors / 28.999999999999996% coverage ] ****** [472 done /385 queued / 16 running / 471 errors / 28.999999999999996% coverage ] ****** [472 done /385 queued / 16 running / 471 errors / 28.999999999999996% coverage ] ****** [473 done /384 queued / 16 running / 472 errors / 28.999999999999996% coverage ] ****** [473 done /384 queued / 16 running / 472 errors / 28.999999999999996% coverage ] ****** [474 done /386 queued / 16 running / 473 errors / 28.999999999999996% coverage ] ****** [474 done /386 queued / 16 running / 473 errors / 28.999999999999996% coverage ] ****** [475 done /389 queued / 16 running / 474 errors / 28.999999999999996% coverage ] ****** [475 done /389 queued / 16 running / 474 errors / 28.999999999999996% coverage ] ****** [476 done /389 queued / 16 running / 475 errors / 28.999999999999996% coverage ] ****** [476 done /389 queued / 16 running / 475 errors / 28.999999999999996% coverage ] ****** [477 done /391 queued / 16 running / 476 errors / 28.999999999999996% coverage ] ****** [477 done /391 queued / 16 running / 476 errors / 28.999999999999996% coverage ] ****** [478 done /395 queued / 16 running / 477 errors / 28.999999999999996% coverage ] ****** [478 done /395 queued / 16 running / 477 errors / 28.999999999999996% coverage ] ****** [479 done /396 queued / 16 running / 478 errors / 28.999999999999996% coverage ] ****** [479 done /396 queued / 16 running / 478 errors / 28.999999999999996% coverage ] ****** [480 done /399 queued / 16 running / 479 errors / 28.999999999999996% coverage ] ****** [480 done /399 queued / 16 running / 479 errors / 28.999999999999996% coverage ] ****** [481 done /403 queued / 16 running / 480 errors / 28.999999999999996% coverage ] ****** [481 done /403 queued / 16 running / 480 errors / 28.999999999999996% coverage ] ****** [482 done /404 queued / 16 running / 481 errors / 28.999999999999996% coverage ] ****** [482 done /404 queued / 16 running / 481 errors / 28.999999999999996% coverage ] ****** [483 done /403 queued / 16 running / 482 errors / 28.999999999999996% coverage ] ****** [483 done /403 queued / 16 running / 482 errors / 28.999999999999996% coverage ] ****** [484 done /402 queued / 16 running / 483 errors / 28.999999999999996% coverage ] ****** [484 done /402 queued / 16 running / 483 errors / 28.999999999999996% coverage ] ****** [485 done /403 queued / 16 running / 484 errors / 28.999999999999996% coverage ] ****** [485 done /403 queued / 16 running / 484 errors / 28.999999999999996% coverage ] ****** [486 done /402 queued / 16 running / 485 errors / 28.999999999999996% coverage ] ****** [486 done /402 queued / 16 running / 485 errors / 28.999999999999996% coverage ] ****** [487 done /402 queued / 16 running / 486 errors / 28.999999999999996% coverage ] ****** [487 done /402 queued / 16 running / 486 errors / 28.999999999999996% coverage ] ****** [488 done /405 queued / 16 running / 487 errors / 28.999999999999996% coverage ] ****** [488 done /405 queued / 16 running / 487 errors / 28.999999999999996% coverage ] ****** [489 done /405 queued / 16 running / 488 errors / 28.999999999999996% coverage ] ****** [489 done /405 queued / 16 running / 488 errors / 28.999999999999996% coverage ] ****** [490 done /406 queued / 16 running / 489 errors / 28.999999999999996% coverage ] ****** [490 done /406 queued / 16 running / 489 errors / 28.999999999999996% coverage ] ****** [491 done /406 queued / 16 running / 490 errors / 28.999999999999996% coverage ] ****** [491 done /406 queued / 16 running / 490 errors / 28.999999999999996% coverage ] ****** [492 done /408 queued / 16 running / 491 errors / 28.999999999999996% coverage ] ****** [492 done /408 queued / 16 running / 491 errors / 28.999999999999996% coverage ] ****** [493 done /409 queued / 16 running / 492 errors / 28.999999999999996% coverage ] ****** [493 done /409 queued / 16 running / 492 errors / 28.999999999999996% coverage ] ****** [494 done /411 queued / 16 running / 493 errors / 28.999999999999996% coverage ] ****** [494 done /411 queued / 16 running / 493 errors / 28.999999999999996% coverage ] ****** [495 done /414 queued / 16 running / 494 errors / 28.999999999999996% coverage ] ****** [495 done /414 queued / 16 running / 494 errors / 28.999999999999996% coverage ] ****** [496 done /418 queued / 16 running / 495 errors / 28.999999999999996% coverage ] ****** [496 done /418 queued / 16 running / 495 errors / 28.999999999999996% coverage ] ****** [497 done /419 queued / 16 running / 496 errors / 28.999999999999996% coverage ] ****** [497 done /419 queued / 16 running / 496 errors / 28.999999999999996% coverage ] ****** [498 done /419 queued / 16 running / 497 errors / 28.999999999999996% coverage ] ****** [498 done /419 queued / 16 running / 497 errors / 28.999999999999996% coverage ] ****** [499 done /418 queued / 16 running / 498 errors / 28.999999999999996% coverage ] ****** [499 done /418 queued / 16 running / 498 errors / 28.999999999999996% coverage ] ****** [500 done /418 queued / 16 running / 499 errors / 28.999999999999996% coverage ] ****** [500 done /418 queued / 16 running / 499 errors / 28.999999999999996% coverage ] ****** [501 done /419 queued / 16 running / 500 errors / 28.999999999999996% coverage ] ****** [501 done /419 queued / 16 running / 500 errors / 28.999999999999996% coverage ] ****** [502 done /419 queued / 16 running / 501 errors / 28.999999999999996% coverage ] ****** [502 done /419 queued / 16 running / 501 errors / 28.999999999999996% coverage ] ****** [503 done /418 queued / 16 running / 502 errors / 28.999999999999996% coverage ] ****** [503 done /418 queued / 16 running / 502 errors / 28.999999999999996% coverage ] ****** [504 done /419 queued / 16 running / 503 errors / 28.999999999999996% coverage ] ****** [504 done /419 queued / 16 running / 503 errors / 28.999999999999996% coverage ] ****** [505 done /419 queued / 16 running / 504 errors / 28.999999999999996% coverage ] ****** [505 done /419 queued / 16 running / 504 errors / 28.999999999999996% coverage ] ****** [506 done /421 queued / 16 running / 505 errors / 28.999999999999996% coverage ] ****** [506 done /421 queued / 16 running / 505 errors / 28.999999999999996% coverage ] ****** [507 done /423 queued / 16 running / 506 errors / 28.999999999999996% coverage ] ****** [507 done /423 queued / 16 running / 506 errors / 28.999999999999996% coverage ] ****** [508 done /423 queued / 16 running / 507 errors / 28.999999999999996% coverage ] ****** [508 done /423 queued / 16 running / 507 errors / 28.999999999999996% coverage ] ****** [509 done /422 queued / 16 running / 508 errors / 28.999999999999996% coverage ] ****** [509 done /422 queued / 16 running / 508 errors / 28.999999999999996% coverage ] ****** [510 done /424 queued / 16 running / 509 errors / 28.999999999999996% coverage ] ****** [510 done /424 queued / 16 running / 509 errors / 28.999999999999996% coverage ] ****** [511 done /427 queued / 16 running / 510 errors / 28.999999999999996% coverage ] ****** [511 done /427 queued / 16 running / 510 errors / 28.999999999999996% coverage ] ****** [512 done /426 queued / 16 running / 511 errors / 28.999999999999996% coverage ] ****** [512 done /426 queued / 16 running / 511 errors / 28.999999999999996% coverage ] ****** [513 done /429 queued / 16 running / 512 errors / 28.999999999999996% coverage ] ****** [513 done /429 queued / 16 running / 512 errors / 28.999999999999996% coverage ] ****** [514 done /431 queued / 16 running / 513 errors / 28.999999999999996% coverage ] ****** [514 done /431 queued / 16 running / 513 errors / 28.999999999999996% coverage ] ****** [515 done /433 queued / 16 running / 514 errors / 28.999999999999996% coverage ] ****** [515 done /433 queued / 16 running / 514 errors / 28.999999999999996% coverage ] ****** [516 done /438 queued / 16 running / 515 errors / 28.999999999999996% coverage ] ****** [516 done /438 queued / 16 running / 515 errors / 28.999999999999996% coverage ] ****** [517 done /437 queued / 16 running / 516 errors / 28.999999999999996% coverage ] ****** [517 done /437 queued / 16 running / 516 errors / 28.999999999999996% coverage ] ****** [518 done /439 queued / 16 running / 517 errors / 28.999999999999996% coverage ] ****** [518 done /439 queued / 16 running / 517 errors / 28.999999999999996% coverage ] ****** [519 done /441 queued / 16 running / 518 errors / 28.999999999999996% coverage ] ****** [519 done /441 queued / 16 running / 518 errors / 28.999999999999996% coverage ] ****** [520 done /440 queued / 16 running / 519 errors / 28.999999999999996% coverage ] ****** [520 done /440 queued / 16 running / 519 errors / 28.999999999999996% coverage ] ****** [521 done /444 queued / 16 running / 520 errors / 28.999999999999996% coverage ] ****** [521 done /444 queued / 16 running / 520 errors / 28.999999999999996% coverage ] ****** [522 done /446 queued / 16 running / 521 errors / 28.999999999999996% coverage ] ****** [522 done /446 queued / 16 running / 521 errors / 28.999999999999996% coverage ] ****** [523 done /447 queued / 16 running / 522 errors / 28.999999999999996% coverage ] ****** [523 done /447 queued / 16 running / 522 errors / 28.999999999999996% coverage ] ****** [524 done /447 queued / 16 running / 523 errors / 28.999999999999996% coverage ] ****** [524 done /447 queued / 16 running / 523 errors / 28.999999999999996% coverage ] ****** [525 done /446 queued / 16 running / 524 errors / 28.999999999999996% coverage ] ****** [525 done /446 queued / 16 running / 524 errors / 28.999999999999996% coverage ] ****** [526 done /447 queued / 16 running / 525 errors / 28.999999999999996% coverage ] ****** [526 done /447 queued / 16 running / 525 errors / 28.999999999999996% coverage ] ****** [527 done /446 queued / 16 running / 526 errors / 28.999999999999996% coverage ] ****** [527 done /446 queued / 16 running / 526 errors / 28.999999999999996% coverage ] ****** [528 done /446 queued / 16 running / 527 errors / 28.999999999999996% coverage ] ****** [528 done /446 queued / 16 running / 527 errors / 28.999999999999996% coverage ] ****** [529 done /445 queued / 16 running / 528 errors / 28.999999999999996% coverage ] ****** [529 done /445 queued / 16 running / 528 errors / 28.999999999999996% coverage ] ****** [530 done /446 queued / 16 running / 529 errors / 28.999999999999996% coverage ] ****** [530 done /446 queued / 16 running / 529 errors / 28.999999999999996% coverage ] ****** [531 done /447 queued / 16 running / 530 errors / 28.999999999999996% coverage ] ****** [531 done /447 queued / 16 running / 530 errors / 28.999999999999996% coverage ] ****** [532 done /451 queued / 16 running / 531 errors / 28.999999999999996% coverage ] ****** [532 done /451 queued / 16 running / 531 errors / 28.999999999999996% coverage ] ****** [533 done /452 queued / 16 running / 532 errors / 28.999999999999996% coverage ] ****** [533 done /452 queued / 16 running / 532 errors / 28.999999999999996% coverage ] ****** [534 done /454 queued / 16 running / 533 errors / 28.999999999999996% coverage ] ****** [534 done /454 queued / 16 running / 533 errors / 28.999999999999996% coverage ] ****** [535 done /456 queued / 16 running / 534 errors / 28.999999999999996% coverage ] ****** [535 done /456 queued / 16 running / 534 errors / 28.999999999999996% coverage ] ****** [536 done /457 queued / 16 running / 535 errors / 28.999999999999996% coverage ] ****** [536 done /457 queued / 16 running / 535 errors / 28.999999999999996% coverage ] ****** [537 done /459 queued / 16 running / 536 errors / 28.999999999999996% coverage ] ****** [537 done /459 queued / 16 running / 536 errors / 28.999999999999996% coverage ] ****** [538 done /460 queued / 16 running / 537 errors / 28.999999999999996% coverage ] ****** [538 done /460 queued / 16 running / 537 errors / 28.999999999999996% coverage ] ****** [539 done /462 queued / 16 running / 538 errors / 28.999999999999996% coverage ] ****** [539 done /462 queued / 16 running / 538 errors / 28.999999999999996% coverage ] ****** [540 done /463 queued / 16 running / 539 errors / 28.999999999999996% coverage ] ****** [540 done /463 queued / 16 running / 539 errors / 28.999999999999996% coverage ] ****** [541 done /467 queued / 16 running / 540 errors / 28.999999999999996% coverage ] ****** [541 done /467 queued / 16 running / 540 errors / 28.999999999999996% coverage ] ****** [542 done /466 queued / 16 running / 541 errors / 28.999999999999996% coverage ] ****** [542 done /466 queued / 16 running / 541 errors / 28.999999999999996% coverage ] ****** [543 done /466 queued / 16 running / 542 errors / 28.999999999999996% coverage ] ****** [543 done /466 queued / 16 running / 542 errors / 28.999999999999996% coverage ] ****** [544 done /468 queued / 16 running / 543 errors / 28.999999999999996% coverage ] ****** [544 done /468 queued / 16 running / 543 errors / 28.999999999999996% coverage ] ****** [545 done /467 queued / 16 running / 544 errors / 28.999999999999996% coverage ] ****** [545 done /467 queued / 16 running / 544 errors / 28.999999999999996% coverage ] ****** [546 done /467 queued / 16 running / 545 errors / 28.999999999999996% coverage ] ****** [546 done /467 queued / 16 running / 545 errors / 28.999999999999996% coverage ] ****** [547 done /466 queued / 16 running / 546 errors / 28.999999999999996% coverage ] ****** [547 done /466 queued / 16 running / 546 errors / 28.999999999999996% coverage ] ****** [548 done /465 queued / 16 running / 547 errors / 28.999999999999996% coverage ] ****** [548 done /465 queued / 16 running / 547 errors / 28.999999999999996% coverage ] ****** [549 done /464 queued / 16 running / 548 errors / 28.999999999999996% coverage ] ****** [549 done /464 queued / 16 running / 548 errors / 28.999999999999996% coverage ] ****** [550 done /465 queued / 16 running / 549 errors / 28.999999999999996% coverage ] ****** [550 done /465 queued / 16 running / 549 errors / 28.999999999999996% coverage ] ****** [551 done /466 queued / 16 running / 550 errors / 28.999999999999996% coverage ] ****** [551 done /466 queued / 16 running / 550 errors / 28.999999999999996% coverage ] ****** [552 done /468 queued / 16 running / 551 errors / 28.999999999999996% coverage ] ****** [552 done /468 queued / 16 running / 551 errors / 28.999999999999996% coverage ] ****** [553 done /468 queued / 16 running / 552 errors / 28.999999999999996% coverage ] ****** [553 done /468 queued / 16 running / 552 errors / 28.999999999999996% coverage ] ****** [554 done /470 queued / 16 running / 553 errors / 28.999999999999996% coverage ] ****** [554 done /470 queued / 16 running / 553 errors / 28.999999999999996% coverage ] ****** [555 done /472 queued / 16 running / 554 errors / 28.999999999999996% coverage ] ****** [555 done /472 queued / 16 running / 554 errors / 28.999999999999996% coverage ] ****** [556 done /476 queued / 16 running / 555 errors / 28.999999999999996% coverage ] ****** [556 done /476 queued / 16 running / 555 errors / 28.999999999999996% coverage ] ****** [557 done /476 queued / 16 running / 556 errors / 28.999999999999996% coverage ] ****** [557 done /476 queued / 16 running / 556 errors / 28.999999999999996% coverage ] ****** [558 done /475 queued / 16 running / 557 errors / 28.999999999999996% coverage ] ****** [558 done /475 queued / 16 running / 557 errors / 28.999999999999996% coverage ] ****** [559 done /474 queued / 16 running / 558 errors / 28.999999999999996% coverage ] ****** [559 done /474 queued / 16 running / 558 errors / 28.999999999999996% coverage ] ****** [560 done /479 queued / 16 running / 559 errors / 28.999999999999996% coverage ] ****** [560 done /479 queued / 16 running / 559 errors / 28.999999999999996% coverage ] ****** [561 done /479 queued / 16 running / 560 errors / 28.999999999999996% coverage ] ****** [561 done /479 queued / 16 running / 560 errors / 28.999999999999996% coverage ] ****** [562 done /481 queued / 16 running / 561 errors / 28.999999999999996% coverage ] ****** [562 done /481 queued / 16 running / 561 errors / 28.999999999999996% coverage ] ****** [563 done /483 queued / 16 running / 562 errors / 28.999999999999996% coverage ] ****** [563 done /483 queued / 16 running / 562 errors / 28.999999999999996% coverage ] ****** [564 done /485 queued / 16 running / 563 errors / 28.999999999999996% coverage ] ****** [564 done /485 queued / 16 running / 563 errors / 28.999999999999996% coverage ] ****** [565 done /486 queued / 16 running / 564 errors / 28.999999999999996% coverage ] ****** [565 done /486 queued / 16 running / 564 errors / 28.999999999999996% coverage ] ****** [566 done /485 queued / 16 running / 565 errors / 28.999999999999996% coverage ] ****** [566 done /485 queued / 16 running / 565 errors / 28.999999999999996% coverage ] ****** [567 done /485 queued / 16 running / 566 errors / 28.999999999999996% coverage ] ****** [567 done /485 queued / 16 running / 566 errors / 28.999999999999996% coverage ] ****** [568 done /484 queued / 16 running / 567 errors / 28.999999999999996% coverage ] ****** [568 done /484 queued / 16 running / 567 errors / 28.999999999999996% coverage ] ****** [569 done /485 queued / 16 running / 568 errors / 28.999999999999996% coverage ] ****** [569 done /485 queued / 16 running / 568 errors / 28.999999999999996% coverage ] ****** [570 done /485 queued / 16 running / 569 errors / 28.999999999999996% coverage ] ****** [570 done /485 queued / 16 running / 569 errors / 28.999999999999996% coverage ] ****** [571 done /488 queued / 16 running / 570 errors / 28.999999999999996% coverage ] ****** [571 done /488 queued / 16 running / 570 errors / 28.999999999999996% coverage ] ****** [572 done /492 queued / 16 running / 571 errors / 28.999999999999996% coverage ] ****** [572 done /492 queued / 16 running / 571 errors / 28.999999999999996% coverage ] ****** [573 done /493 queued / 16 running / 572 errors / 28.999999999999996% coverage ] ****** [573 done /493 queued / 16 running / 572 errors / 28.999999999999996% coverage ] ****** [574 done /495 queued / 16 running / 573 errors / 28.999999999999996% coverage ] ****** [574 done /495 queued / 16 running / 573 errors / 28.999999999999996% coverage ] ****** [575 done /496 queued / 16 running / 574 errors / 28.999999999999996% coverage ] ****** [575 done /496 queued / 16 running / 574 errors / 28.999999999999996% coverage ] ****** [576 done /496 queued / 16 running / 575 errors / 28.999999999999996% coverage ] ****** [576 done /496 queued / 16 running / 575 errors / 28.999999999999996% coverage ] ****** [577 done /497 queued / 16 running / 576 errors / 28.999999999999996% coverage ] ****** [577 done /497 queued / 16 running / 576 errors / 28.999999999999996% coverage ] ****** [578 done /498 queued / 16 running / 577 errors / 28.999999999999996% coverage ] ****** [578 done /498 queued / 16 running / 577 errors / 28.999999999999996% coverage ] ****** [579 done /500 queued / 16 running / 578 errors / 28.999999999999996% coverage ] ****** [579 done /500 queued / 16 running / 578 errors / 28.999999999999996% coverage ] ****** [580 done /500 queued / 16 running / 579 errors / 28.999999999999996% coverage ] ****** [580 done /500 queued / 16 running / 579 errors / 28.999999999999996% coverage ] ****** [581 done /499 queued / 16 running / 580 errors / 28.999999999999996% coverage ] ****** [581 done /499 queued / 16 running / 580 errors / 28.999999999999996% coverage ] ****** [582 done /501 queued / 16 running / 581 errors / 28.999999999999996% coverage ] ****** [582 done /501 queued / 16 running / 581 errors / 28.999999999999996% coverage ] ****** [583 done /500 queued / 16 running / 582 errors / 28.999999999999996% coverage ] ****** [583 done /500 queued / 16 running / 582 errors / 28.999999999999996% coverage ] ****** [584 done /502 queued / 16 running / 583 errors / 28.999999999999996% coverage ] ****** [584 done /502 queued / 16 running / 583 errors / 28.999999999999996% coverage ] ****** [585 done /504 queued / 16 running / 584 errors / 28.999999999999996% coverage ] ****** [585 done /504 queued / 16 running / 584 errors / 28.999999999999996% coverage ] ****** [586 done /503 queued / 16 running / 585 errors / 28.999999999999996% coverage ] ****** [586 done /503 queued / 16 running / 585 errors / 28.999999999999996% coverage ] ****** [587 done /503 queued / 16 running / 586 errors / 28.999999999999996% coverage ] ****** [587 done /503 queued / 16 running / 586 errors / 28.999999999999996% coverage ] ****** [588 done /503 queued / 16 running / 587 errors / 28.999999999999996% coverage ] ****** [588 done /503 queued / 16 running / 587 errors / 28.999999999999996% coverage ] ****** [589 done /503 queued / 16 running / 588 errors / 28.999999999999996% coverage ] ****** [589 done /503 queued / 16 running / 588 errors / 28.999999999999996% coverage ] ****** [590 done /503 queued / 16 running / 589 errors / 28.999999999999996% coverage ] ****** [590 done /503 queued / 16 running / 589 errors / 28.999999999999996% coverage ] ****** [591 done /504 queued / 16 running / 590 errors / 28.999999999999996% coverage ] ****** [591 done /504 queued / 16 running / 590 errors / 28.999999999999996% coverage ] ****** [592 done /504 queued / 16 running / 591 errors / 28.999999999999996% coverage ] ****** [592 done /504 queued / 16 running / 591 errors / 28.999999999999996% coverage ] ****** [593 done /503 queued / 16 running / 592 errors / 28.999999999999996% coverage ] ****** [593 done /503 queued / 16 running / 592 errors / 28.999999999999996% coverage ] ****** [594 done /504 queued / 16 running / 593 errors / 28.999999999999996% coverage ] ****** [594 done /504 queued / 16 running / 593 errors / 28.999999999999996% coverage ] ****** [595 done /504 queued / 16 running / 594 errors / 28.999999999999996% coverage ] ****** [595 done /504 queued / 16 running / 594 errors / 28.999999999999996% coverage ] ****** [596 done /505 queued / 16 running / 595 errors / 28.999999999999996% coverage ] ****** [596 done /505 queued / 16 running / 595 errors / 28.999999999999996% coverage ] ****** [597 done /510 queued / 16 running / 596 errors / 28.999999999999996% coverage ] ****** [597 done /510 queued / 16 running / 596 errors / 28.999999999999996% coverage ] ****** [598 done /509 queued / 16 running / 597 errors / 28.999999999999996% coverage ] ****** [598 done /509 queued / 16 running / 597 errors / 28.999999999999996% coverage ] ****** [599 done /510 queued / 16 running / 598 errors / 28.999999999999996% coverage ] ****** [599 done /510 queued / 16 running / 598 errors / 28.999999999999996% coverage ] ****** [600 done /509 queued / 16 running / 599 errors / 28.999999999999996% coverage ] ****** [600 done /509 queued / 16 running / 599 errors / 28.999999999999996% coverage ] ****** [601 done /508 queued / 16 running / 600 errors / 28.999999999999996% coverage ] ****** [601 done /508 queued / 16 running / 600 errors / 28.999999999999996% coverage ] ****** [602 done /512 queued / 16 running / 601 errors / 28.999999999999996% coverage ] ****** [602 done /512 queued / 16 running / 601 errors / 28.999999999999996% coverage ] ****** [603 done /511 queued / 16 running / 602 errors / 28.999999999999996% coverage ] ****** [603 done /511 queued / 16 running / 602 errors / 28.999999999999996% coverage ] ****** [604 done /514 queued / 16 running / 603 errors / 28.999999999999996% coverage ] ****** [604 done /514 queued / 16 running / 603 errors / 28.999999999999996% coverage ] ****** [605 done /514 queued / 16 running / 604 errors / 28.999999999999996% coverage ] ****** [605 done /514 queued / 16 running / 604 errors / 28.999999999999996% coverage ] ****** [606 done /519 queued / 16 running / 605 errors / 28.999999999999996% coverage ] ****** [606 done /519 queued / 16 running / 605 errors / 28.999999999999996% coverage ] ****** [607 done /518 queued / 16 running / 606 errors / 28.999999999999996% coverage ] ****** [607 done /518 queued / 16 running / 606 errors / 28.999999999999996% coverage ] ****** [608 done /518 queued / 16 running / 607 errors / 28.999999999999996% coverage ] ****** [608 done /518 queued / 16 running / 607 errors / 28.999999999999996% coverage ] ****** [609 done /517 queued / 16 running / 608 errors / 28.999999999999996% coverage ] ****** [609 done /517 queued / 16 running / 608 errors / 28.999999999999996% coverage ] ****** [610 done /519 queued / 16 running / 609 errors / 28.999999999999996% coverage ] ****** [610 done /519 queued / 16 running / 609 errors / 28.999999999999996% coverage ] ****** [611 done /520 queued / 16 running / 610 errors / 28.999999999999996% coverage ] ****** [611 done /520 queued / 16 running / 610 errors / 28.999999999999996% coverage ] ****** [612 done /521 queued / 16 running / 611 errors / 28.999999999999996% coverage ] ****** [612 done /521 queued / 16 running / 611 errors / 28.999999999999996% coverage ] ****** [613 done /523 queued / 16 running / 612 errors / 28.999999999999996% coverage ] ****** [613 done /523 queued / 16 running / 612 errors / 28.999999999999996% coverage ] ****** [614 done /524 queued / 16 running / 613 errors / 28.999999999999996% coverage ] ****** [614 done /524 queued / 16 running / 613 errors / 28.999999999999996% coverage ] ****** [615 done /526 queued / 16 running / 614 errors / 28.999999999999996% coverage ] ****** [615 done /526 queued / 16 running / 614 errors / 28.999999999999996% coverage ] ****** [616 done /527 queued / 16 running / 615 errors / 28.999999999999996% coverage ] ****** [616 done /527 queued / 16 running / 615 errors / 28.999999999999996% coverage ] ****** [617 done /528 queued / 16 running / 616 errors / 28.999999999999996% coverage ] ****** [617 done /528 queued / 16 running / 616 errors / 28.999999999999996% coverage ] ****** [618 done /528 queued / 16 running / 617 errors / 28.999999999999996% coverage ] ****** [618 done /528 queued / 16 running / 617 errors / 28.999999999999996% coverage ] ****** [619 done /529 queued / 16 running / 618 errors / 28.999999999999996% coverage ] ****** [619 done /529 queued / 16 running / 618 errors / 28.999999999999996% coverage ] ****** [620 done /529 queued / 16 running / 619 errors / 28.999999999999996% coverage ] ****** [620 done /529 queued / 16 running / 619 errors / 28.999999999999996% coverage ] ****** [621 done /529 queued / 16 running / 620 errors / 28.999999999999996% coverage ] ****** [621 done /529 queued / 16 running / 620 errors / 28.999999999999996% coverage ] ****** [622 done /530 queued / 16 running / 621 errors / 28.999999999999996% coverage ] ****** [622 done /530 queued / 16 running / 621 errors / 28.999999999999996% coverage ] ****** [623 done /531 queued / 16 running / 622 errors / 28.999999999999996% coverage ] ****** [623 done /531 queued / 16 running / 622 errors / 28.999999999999996% coverage ] ****** [624 done /531 queued / 16 running / 623 errors / 28.999999999999996% coverage ] ****** [624 done /531 queued / 16 running / 623 errors / 28.999999999999996% coverage ] ****** [625 done /532 queued / 16 running / 624 errors / 28.999999999999996% coverage ] ****** [625 done /532 queued / 16 running / 624 errors / 28.999999999999996% coverage ] ****** [626 done /531 queued / 16 running / 625 errors / 28.999999999999996% coverage ] ****** [626 done /531 queued / 16 running / 625 errors / 28.999999999999996% coverage ] ****** [627 done /531 queued / 16 running / 626 errors / 28.999999999999996% coverage ] ****** [627 done /531 queued / 16 running / 626 errors / 28.999999999999996% coverage ] ****** [628 done /532 queued / 16 running / 627 errors / 28.999999999999996% coverage ] ****** [628 done /532 queued / 16 running / 627 errors / 28.999999999999996% coverage ] ****** [629 done /531 queued / 16 running / 628 errors / 28.999999999999996% coverage ] ****** [629 done /531 queued / 16 running / 628 errors / 28.999999999999996% coverage ] ****** [630 done /534 queued / 16 running / 629 errors / 28.999999999999996% coverage ] ****** [630 done /534 queued / 16 running / 629 errors / 28.999999999999996% coverage ] ****** [631 done /534 queued / 16 running / 630 errors / 28.999999999999996% coverage ] ****** [631 done /534 queued / 16 running / 630 errors / 28.999999999999996% coverage ] ****** [632 done /535 queued / 16 running / 631 errors / 28.999999999999996% coverage ] ****** [632 done /535 queued / 16 running / 631 errors / 28.999999999999996% coverage ] ****** [633 done /536 queued / 16 running / 632 errors / 28.999999999999996% coverage ] ****** [633 done /536 queued / 16 running / 632 errors / 28.999999999999996% coverage ] ****** [634 done /539 queued / 16 running / 633 errors / 28.999999999999996% coverage ] ****** [634 done /539 queued / 16 running / 633 errors / 28.999999999999996% coverage ] ****** [635 done /538 queued / 16 running / 634 errors / 28.999999999999996% coverage ] ****** [635 done /538 queued / 16 running / 634 errors / 28.999999999999996% coverage ] ****** [636 done /537 queued / 16 running / 635 errors / 28.999999999999996% coverage ] ****** [636 done /537 queued / 16 running / 635 errors / 28.999999999999996% coverage ] ****** [637 done /539 queued / 16 running / 636 errors / 28.999999999999996% coverage ] ****** [637 done /539 queued / 16 running / 636 errors / 28.999999999999996% coverage ] ****** [638 done /538 queued / 16 running / 637 errors / 28.999999999999996% coverage ] ****** [638 done /538 queued / 16 running / 637 errors / 28.999999999999996% coverage ] ****** [639 done /537 queued / 16 running / 638 errors / 28.999999999999996% coverage ] ****** [639 done /537 queued / 16 running / 638 errors / 28.999999999999996% coverage ] ****** [640 done /537 queued / 16 running / 639 errors / 28.999999999999996% coverage ] ****** [640 done /537 queued / 16 running / 639 errors / 28.999999999999996% coverage ] ****** [641 done /540 queued / 16 running / 640 errors / 28.999999999999996% coverage ] ****** [641 done /540 queued / 16 running / 640 errors / 28.999999999999996% coverage ] ****** [642 done /539 queued / 16 running / 641 errors / 28.999999999999996% coverage ] ****** [642 done /539 queued / 16 running / 641 errors / 28.999999999999996% coverage ] ****** [643 done /538 queued / 16 running / 642 errors / 28.999999999999996% coverage ] ****** [643 done /538 queued / 16 running / 642 errors / 28.999999999999996% coverage ] ****** [644 done /538 queued / 16 running / 643 errors / 28.999999999999996% coverage ] ****** [644 done /538 queued / 16 running / 643 errors / 28.999999999999996% coverage ] ****** [645 done /539 queued / 16 running / 644 errors / 28.999999999999996% coverage ] ****** [645 done /539 queued / 16 running / 644 errors / 28.999999999999996% coverage ] ****** [646 done /541 queued / 16 running / 645 errors / 28.999999999999996% coverage ] ****** [646 done /541 queued / 16 running / 645 errors / 28.999999999999996% coverage ] ****** [647 done /542 queued / 16 running / 646 errors / 28.999999999999996% coverage ] ****** [647 done /542 queued / 16 running / 646 errors / 28.999999999999996% coverage ] ****** [648 done /541 queued / 16 running / 647 errors / 28.999999999999996% coverage ] ****** [648 done /541 queued / 16 running / 647 errors / 28.999999999999996% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","reduce","parseInt","charCodeAt","abs","Error","Number","toString","apply","bound phantomas","create","stringify","randomBytes"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0,"Switcher":false,"Target_Switch_Base":0} start 0.0554 took 9.2881s
*-- Test Case {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0} start 9.4677 took 15.0456s
*-- Errors occured in test {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (50:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var rp = require('fs.realpath')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var isAbsolute = require('path-is-absolute')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')
var childrenIgnored = common.childrenIgnored
var isIgnored = common.isIgnored

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

function extend (origin, add) {
  if (add === null || typeof add !== 'object') {
    return origin
  }

  var keys = Object.keys(add)
  var i = keys.length
  while (i--) {
    origin[keys[i]] = add[keys[i]]
  }
  return origin
}

glob.hasMagic = function (pattern, options_) {
  var options = extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set

  if (!pattern)
    return false

  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)
  this._didRealPath = false

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  this._processing = 0

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  var sync = true
  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }
  sync = false

  function done () {
    --self._processing
    if (self._processing <= 0) {
      if (sync) {
        process.nextTick(function () {
          self._finish()
        })
      } else {
        self._finish()
      }
    }
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  if (this.realpath && !this._didRealpath)
    return this._realpath()

  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._realpath = function () {
  if (this._didRealpath)
    return

  this._didRealpath = true

  var n = this.matches.length
  if (n === 0)
    return this._finish()

  var self = this
  for (var i = 0; i < this.matches.length; i++)
    this._realpathSet(i, next)

  function next () {
    if (--n === 0)
      self._finish()
  }
}

Glob.prototype._realpathSet = function (index, cb) {
  var matchset = this.matches[index]
  if (!matchset)
    return cb()

  var found = Object.keys(matchset)
  var self = this
  var n = found.length

  if (n === 0)
    return cb()

  var set = this.matches[index] = Object.create(null)
  found.forEach(function (p, i) {
    // If there's a problem with the stat, then it means that
    // one or more of the links in the realpath couldn't be
    // resolved.  just return the abs value in that case.
    p = self._makeAbs(p)
    rp.realpath(p, self.realpathCache, function (er, real) {
      if (!er)
        set[real] = true
      else if (er.syscall === 'stat')
        set[p] = true
      else
        self.emit('error', er) // srsly wtf right here

      if (--n === 0) {
        self.matches[index] = set
        cb()
      }
    })
  })
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  //if ignored, skip _processing
  if (childrenIgnored(this, read))
    return cb()

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}

Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (isIgnored(this, e))
    return

  if (this.paused) {
    this._emitQueue.push([index, e])
    return
  }

  var abs = isAbsolute(e) ? e : this._makeAbs(e)

  if (this.mark)
    e = this._mark(e)

  if (this.absolute)
    e = abs

  if (this.matches[index][e])
    return

  if (this.nodir) {
    var c = this.cache[abs]
    if (c === 'DIR' || Array.isArray(c))
      return
  }

  this.matches[index][e] = true

  var st = this.statCache[abs]
  if (st)
    this.emit('stat', e, st)

  this.emit('match', e)
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  // follow all symlinked directories forever
  // just proceed as if this is a non-globstar situation
  if (this.follow)
    return this._readdir(abs, false, cb)

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er && er.code === 'ENOENT')
      return cb()

    var isSym = lstat && lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && lstat && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
    case 'ENOTDIR': // totally normal. means it *does* exist.
      var abs = this._makeAbs(f)
      this.cache[abs] = 'FILE'
      if (abs === this.cwdAbs) {
        var error = new Error(er.code + ' invalid cwd ' + this.cwd)
        error.path = this.cwd
        error.code = er.code
        this.emit('error', error)
        this.abort()
      }
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[this._makeAbs(f)] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[this._makeAbs(f)] = false
      if (this.strict) {
        this.emit('error', er)
        // If the error is handled, then we abort
        // if not, we threw out of here
        this.abort()
      }
      if (!this.silent)
        console.error('glob error', er)
      break
  }

  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = this._makeAbs(f)
  var needDir = f.slice(-1) === '/'

  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, abs)) {
    var c = this.cache[abs]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but maybe not how we need it
    if (!needDir || c === 'DIR')
      return cb(null, c)

    if (needDir && c === 'FILE')
      return cb()

    // otherwise we have to stat, because maybe c=true
    // if we know it exists, but not what it is.
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else {
      var type = stat.isDirectory() ? 'DIR' : 'FILE'
      if (needDir && type === 'FILE')
        return cb()
      else
        return cb(null, type, stat)
    }
  }

  var self = this
  var statcb = inflight('stat\0' + abs, lstatcb_)
  if (statcb)
    fs.lstat(abs, statcb)

  function lstatcb_ (er, lstat) {
    if (lstat && lstat.isSymbolicLink()) {
      // If it's a symlink, then treat it as the target, unless
      // the target does not exist, then treat it as a file.
      return fs.stat(abs, function (er, stat) {
        if (er)
          self._stat2(f, abs, null, lstat, cb)
        else
          self._stat2(f, abs, er, stat, cb)
      })
    } else {
      self._stat2(f, abs, er, lstat, cb)
    }
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
    this.statCache[abs] = false
    return cb()
  }

  var needDir = f.slice(-1) === '/'
  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())
    return cb(null, false, stat)

  var c = true
  if (stat)
    c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[abs] = this.cache[abs] || c

  if (needDir && c === 'FILE')
    return cb()

  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (50:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switch_Base":0,"_bound":1}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":2} start 24.6763 took 13.4374s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":2}
* Error: Tropigate failed because SyntaxError: Unexpected token (50:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var rp = require('fs.realpath')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var isAbsolute = require('path-is-absolute')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')
var childrenIgnored = common.childrenIgnored
var isIgnored = common.isIgnored

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

function extend (origin, add) {
  if (add === null || typeof add !== 'object') {
    return origin
  }

  var keys = Object.keys(add)
  var i = keys.length
  while (i--) {
    origin[keys[i]] = add[keys[i]]
  }
  return origin
}

glob.hasMagic = function (pattern, options_) {
  var options = extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set

  if (!pattern)
    return false

  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)
  this._didRealPath = false

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  this._processing = 0

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  var sync = true
  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }
  sync = false

  function done () {
    --self._processing
    if (self._processing <= 0) {
      if (sync) {
        process.nextTick(function () {
          self._finish()
        })
      } else {
        self._finish()
      }
    }
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  if (this.realpath && !this._didRealpath)
    return this._realpath()

  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._realpath = function () {
  if (this._didRealpath)
    return

  this._didRealpath = true

  var n = this.matches.length
  if (n === 0)
    return this._finish()

  var self = this
  for (var i = 0; i < this.matches.length; i++)
    this._realpathSet(i, next)

  function next () {
    if (--n === 0)
      self._finish()
  }
}

Glob.prototype._realpathSet = function (index, cb) {
  var matchset = this.matches[index]
  if (!matchset)
    return cb()

  var found = Object.keys(matchset)
  var self = this
  var n = found.length

  if (n === 0)
    return cb()

  var set = this.matches[index] = Object.create(null)
  found.forEach(function (p, i) {
    // If there's a problem with the stat, then it means that
    // one or more of the links in the realpath couldn't be
    // resolved.  just return the abs value in that case.
    p = self._makeAbs(p)
    rp.realpath(p, self.realpathCache, function (er, real) {
      if (!er)
        set[real] = true
      else if (er.syscall === 'stat')
        set[p] = true
      else
        self.emit('error', er) // srsly wtf right here

      if (--n === 0) {
        self.matches[index] = set
        cb()
      }
    })
  })
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  //if ignored, skip _processing
  if (childrenIgnored(this, read))
    return cb()

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}

Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (isIgnored(this, e))
    return

  if (this.paused) {
    this._emitQueue.push([index, e])
    return
  }

  var abs = isAbsolute(e) ? e : this._makeAbs(e)

  if (this.mark)
    e = this._mark(e)

  if (this.absolute)
    e = abs

  if (this.matches[index][e])
    return

  if (this.nodir) {
    var c = this.cache[abs]
    if (c === 'DIR' || Array.isArray(c))
      return
  }

  this.matches[index][e] = true

  var st = this.statCache[abs]
  if (st)
    this.emit('stat', e, st)

  this.emit('match', e)
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  // follow all symlinked directories forever
  // just proceed as if this is a non-globstar situation
  if (this.follow)
    return this._readdir(abs, false, cb)

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er && er.code === 'ENOENT')
      return cb()

    var isSym = lstat && lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && lstat && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
    case 'ENOTDIR': // totally normal. means it *does* exist.
      var abs = this._makeAbs(f)
      this.cache[abs] = 'FILE'
      if (abs === this.cwdAbs) {
        var error = new Error(er.code + ' invalid cwd ' + this.cwd)
        error.path = this.cwd
        error.code = er.code
        this.emit('error', error)
        this.abort()
      }
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[this._makeAbs(f)] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[this._makeAbs(f)] = false
      if (this.strict) {
        this.emit('error', er)
        // If the error is handled, then we abort
        // if not, we threw out of here
        this.abort()
      }
      if (!this.silent)
        console.error('glob error', er)
      break
  }

  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = this._makeAbs(f)
  var needDir = f.slice(-1) === '/'

  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, abs)) {
    var c = this.cache[abs]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but maybe not how we need it
    if (!needDir || c === 'DIR')
      return cb(null, c)

    if (needDir && c === 'FILE')
      return cb()

    // otherwise we have to stat, because maybe c=true
    // if we know it exists, but not what it is.
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else {
      var type = stat.isDirectory() ? 'DIR' : 'FILE'
      if (needDir && type === 'FILE')
        return cb()
      else
        return cb(null, type, stat)
    }
  }

  var self = this
  var statcb = inflight('stat\0' + abs, lstatcb_)
  if (statcb)
    fs.lstat(abs, statcb)

  function lstatcb_ (er, lstat) {
    if (lstat && lstat.isSymbolicLink()) {
      // If it's a symlink, then treat it as the target, unless
      // the target does not exist, then treat it as a file.
      return fs.stat(abs, function (er, stat) {
        if (er)
          self._stat2(f, abs, null, lstat, cb)
        else
          self._stat2(f, abs, er, stat, cb)
      })
    } else {
      self._stat2(f, abs, er, lstat, cb)
    }
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
    this.statCache[abs] = false
    return cb()
  }

  var needDir = f.slice(-1) === '/'
  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())
    return cb(null, false, stat)

  var c = true
  if (stat)
    c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[abs] = this.cache[abs] || c

  if (needDir && c === 'FILE')
    return cb()

  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (50:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":2}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"_bound":4} start 24.7533 took 16.3118s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"_bound":4}
* Error: Tropigate failed because SyntaxError: Unexpected token (50:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var rp = require('fs.realpath')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var isAbsolute = require('path-is-absolute')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')
var childrenIgnored = common.childrenIgnored
var isIgnored = common.isIgnored

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

function extend (origin, add) {
  if (add === null || typeof add !== 'object') {
    return origin
  }

  var keys = Object.keys(add)
  var i = keys.length
  while (i--) {
    origin[keys[i]] = add[keys[i]]
  }
  return origin
}

glob.hasMagic = function (pattern, options_) {
  var options = extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set

  if (!pattern)
    return false

  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)
  this._didRealPath = false

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  this._processing = 0

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  var sync = true
  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }
  sync = false

  function done () {
    --self._processing
    if (self._processing <= 0) {
      if (sync) {
        process.nextTick(function () {
          self._finish()
        })
      } else {
        self._finish()
      }
    }
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  if (this.realpath && !this._didRealpath)
    return this._realpath()

  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._realpath = function () {
  if (this._didRealpath)
    return

  this._didRealpath = true

  var n = this.matches.length
  if (n === 0)
    return this._finish()

  var self = this
  for (var i = 0; i < this.matches.length; i++)
    this._realpathSet(i, next)

  function next () {
    if (--n === 0)
      self._finish()
  }
}

Glob.prototype._realpathSet = function (index, cb) {
  var matchset = this.matches[index]
  if (!matchset)
    return cb()

  var found = Object.keys(matchset)
  var self = this
  var n = found.length

  if (n === 0)
    return cb()

  var set = this.matches[index] = Object.create(null)
  found.forEach(function (p, i) {
    // If there's a problem with the stat, then it means that
    // one or more of the links in the realpath couldn't be
    // resolved.  just return the abs value in that case.
    p = self._makeAbs(p)
    rp.realpath(p, self.realpathCache, function (er, real) {
      if (!er)
        set[real] = true
      else if (er.syscall === 'stat')
        set[p] = true
      else
        self.emit('error', er) // srsly wtf right here

      if (--n === 0) {
        self.matches[index] = set
        cb()
      }
    })
  })
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  //if ignored, skip _processing
  if (childrenIgnored(this, read))
    return cb()

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}

Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (isIgnored(this, e))
    return

  if (this.paused) {
    this._emitQueue.push([index, e])
    return
  }

  var abs = isAbsolute(e) ? e : this._makeAbs(e)

  if (this.mark)
    e = this._mark(e)

  if (this.absolute)
    e = abs

  if (this.matches[index][e])
    return

  if (this.nodir) {
    var c = this.cache[abs]
    if (c === 'DIR' || Array.isArray(c))
      return
  }

  this.matches[index][e] = true

  var st = this.statCache[abs]
  if (st)
    this.emit('stat', e, st)

  this.emit('match', e)
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  // follow all symlinked directories forever
  // just proceed as if this is a non-globstar situation
  if (this.follow)
    return this._readdir(abs, false, cb)

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er && er.code === 'ENOENT')
      return cb()

    var isSym = lstat && lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && lstat && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
    case 'ENOTDIR': // totally normal. means it *does* exist.
      var abs = this._makeAbs(f)
      this.cache[abs] = 'FILE'
      if (abs === this.cwdAbs) {
        var error = new Error(er.code + ' invalid cwd ' + this.cwd)
        error.path = this.cwd
        error.code = er.code
        this.emit('error', error)
        this.abort()
      }
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[this._makeAbs(f)] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[this._makeAbs(f)] = false
      if (this.strict) {
        this.emit('error', er)
        // If the error is handled, then we abort
        // if not, we threw out of here
        this.abort()
      }
      if (!this.silent)
        console.error('glob error', er)
      break
  }

  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = this._makeAbs(f)
  var needDir = f.slice(-1) === '/'

  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, abs)) {
    var c = this.cache[abs]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but maybe not how we need it
    if (!needDir || c === 'DIR')
      return cb(null, c)

    if (needDir && c === 'FILE')
      return cb()

    // otherwise we have to stat, because maybe c=true
    // if we know it exists, but not what it is.
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else {
      var type = stat.isDirectory() ? 'DIR' : 'FILE'
      if (needDir && type === 'FILE')
        return cb()
      else
        return cb(null, type, stat)
    }
  }

  var self = this
  var statcb = inflight('stat\0' + abs, lstatcb_)
  if (statcb)
    fs.lstat(abs, statcb)

  function lstatcb_ (er, lstat) {
    if (lstat && lstat.isSymbolicLink()) {
      // If it's a symlink, then treat it as the target, unless
      // the target does not exist, then treat it as a file.
      return fs.stat(abs, function (er, stat) {
        if (er)
          self._stat2(f, abs, null, lstat, cb)
        else
          self._stat2(f, abs, er, stat, cb)
      })
    } else {
      self._stat2(f, abs, er, lstat, cb)
    }
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
    this.statCache[abs] = false
    return cb()
  }

  var needDir = f.slice(-1) === '/'
  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())
    return cb(null, false, stat)

  var c = true
  if (stat)
    c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[abs] = this.cache[abs] || c

  if (needDir && c === 'FILE')
    return cb()

  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (50:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":0,"_bound":3} start 24.7048 took 16.5089s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":0,"_bound":3}
* Error: Tropigate failed because SyntaxError: Unexpected token (50:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var rp = require('fs.realpath')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var isAbsolute = require('path-is-absolute')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')
var childrenIgnored = common.childrenIgnored
var isIgnored = common.isIgnored

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

function extend (origin, add) {
  if (add === null || typeof add !== 'object') {
    return origin
  }

  var keys = Object.keys(add)
  var i = keys.length
  while (i--) {
    origin[keys[i]] = add[keys[i]]
  }
  return origin
}

glob.hasMagic = function (pattern, options_) {
  var options = extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set

  if (!pattern)
    return false

  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)
  this._didRealPath = false

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  this._processing = 0

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  var sync = true
  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }
  sync = false

  function done () {
    --self._processing
    if (self._processing <= 0) {
      if (sync) {
        process.nextTick(function () {
          self._finish()
        })
      } else {
        self._finish()
      }
    }
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  if (this.realpath && !this._didRealpath)
    return this._realpath()

  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._realpath = function () {
  if (this._didRealpath)
    return

  this._didRealpath = true

  var n = this.matches.length
  if (n === 0)
    return this._finish()

  var self = this
  for (var i = 0; i < this.matches.length; i++)
    this._realpathSet(i, next)

  function next () {
    if (--n === 0)
      self._finish()
  }
}

Glob.prototype._realpathSet = function (index, cb) {
  var matchset = this.matches[index]
  if (!matchset)
    return cb()

  var found = Object.keys(matchset)
  var self = this
  var n = found.length

  if (n === 0)
    return cb()

  var set = this.matches[index] = Object.create(null)
  found.forEach(function (p, i) {
    // If there's a problem with the stat, then it means that
    // one or more of the links in the realpath couldn't be
    // resolved.  just return the abs value in that case.
    p = self._makeAbs(p)
    rp.realpath(p, self.realpathCache, function (er, real) {
      if (!er)
        set[real] = true
      else if (er.syscall === 'stat')
        set[p] = true
      else
        self.emit('error', er) // srsly wtf right here

      if (--n === 0) {
        self.matches[index] = set
        cb()
      }
    })
  })
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  //if ignored, skip _processing
  if (childrenIgnored(this, read))
    return cb()

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}

Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (isIgnored(this, e))
    return

  if (this.paused) {
    this._emitQueue.push([index, e])
    return
  }

  var abs = isAbsolute(e) ? e : this._makeAbs(e)

  if (this.mark)
    e = this._mark(e)

  if (this.absolute)
    e = abs

  if (this.matches[index][e])
    return

  if (this.nodir) {
    var c = this.cache[abs]
    if (c === 'DIR' || Array.isArray(c))
      return
  }

  this.matches[index][e] = true

  var st = this.statCache[abs]
  if (st)
    this.emit('stat', e, st)

  this.emit('match', e)
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  // follow all symlinked directories forever
  // just proceed as if this is a non-globstar situation
  if (this.follow)
    return this._readdir(abs, false, cb)

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er && er.code === 'ENOENT')
      return cb()

    var isSym = lstat && lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && lstat && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
    case 'ENOTDIR': // totally normal. means it *does* exist.
      var abs = this._makeAbs(f)
      this.cache[abs] = 'FILE'
      if (abs === this.cwdAbs) {
        var error = new Error(er.code + ' invalid cwd ' + this.cwd)
        error.path = this.cwd
        error.code = er.code
        this.emit('error', error)
        this.abort()
      }
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[this._makeAbs(f)] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[this._makeAbs(f)] = false
      if (this.strict) {
        this.emit('error', er)
        // If the error is handled, then we abort
        // if not, we threw out of here
        this.abort()
      }
      if (!this.silent)
        console.error('glob error', er)
      break
  }

  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = this._makeAbs(f)
  var needDir = f.slice(-1) === '/'

  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, abs)) {
    var c = this.cache[abs]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but maybe not how we need it
    if (!needDir || c === 'DIR')
      return cb(null, c)

    if (needDir && c === 'FILE')
      return cb()

    // otherwise we have to stat, because maybe c=true
    // if we know it exists, but not what it is.
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else {
      var type = stat.isDirectory() ? 'DIR' : 'FILE'
      if (needDir && type === 'FILE')
        return cb()
      else
        return cb(null, type, stat)
    }
  }

  var self = this
  var statcb = inflight('stat\0' + abs, lstatcb_)
  if (statcb)
    fs.lstat(abs, statcb)

  function lstatcb_ (er, lstat) {
    if (lstat && lstat.isSymbolicLink()) {
      // If it's a symlink, then treat it as the target, unless
      // the target does not exist, then treat it as a file.
      return fs.stat(abs, function (er, stat) {
        if (er)
          self._stat2(f, abs, null, lstat, cb)
        else
          self._stat2(f, abs, er, stat, cb)
      })
    } else {
      self._stat2(f, abs, er, lstat, cb)
    }
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
    this.statCache[abs] = false
    return cb()
  }

  var needDir = f.slice(-1) === '/'
  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())
    return cb(null, false, stat)

  var c = true
  if (stat)
    c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[abs] = this.cache[abs] || c

  if (needDir && c === 'FILE')
    return cb()

  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (50:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":0,"_bound":3}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4,"ExpansionArg_int":0} start 38.2604 took 15.9008s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (50:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var rp = require('fs.realpath')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var isAbsolute = require('path-is-absolute')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')
var childrenIgnored = common.childrenIgnored
var isIgnored = common.isIgnored

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

function extend (origin, add) {
  if (add === null || typeof add !== 'object') {
    return origin
  }

  var keys = Object.keys(add)
  var i = keys.length
  while (i--) {
    origin[keys[i]] = add[keys[i]]
  }
  return origin
}

glob.hasMagic = function (pattern, options_) {
  var options = extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set

  if (!pattern)
    return false

  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)
  this._didRealPath = false

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  this._processing = 0

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  var sync = true
  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }
  sync = false

  function done () {
    --self._processing
    if (self._processing <= 0) {
      if (sync) {
        process.nextTick(function () {
          self._finish()
        })
      } else {
        self._finish()
      }
    }
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  if (this.realpath && !this._didRealpath)
    return this._realpath()

  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._realpath = function () {
  if (this._didRealpath)
    return

  this._didRealpath = true

  var n = this.matches.length
  if (n === 0)
    return this._finish()

  var self = this
  for (var i = 0; i < this.matches.length; i++)
    this._realpathSet(i, next)

  function next () {
    if (--n === 0)
      self._finish()
  }
}

Glob.prototype._realpathSet = function (index, cb) {
  var matchset = this.matches[index]
  if (!matchset)
    return cb()

  var found = Object.keys(matchset)
  var self = this
  var n = found.length

  if (n === 0)
    return cb()

  var set = this.matches[index] = Object.create(null)
  found.forEach(function (p, i) {
    // If there's a problem with the stat, then it means that
    // one or more of the links in the realpath couldn't be
    // resolved.  just return the abs value in that case.
    p = self._makeAbs(p)
    rp.realpath(p, self.realpathCache, function (er, real) {
      if (!er)
        set[real] = true
      else if (er.syscall === 'stat')
        set[p] = true
      else
        self.emit('error', er) // srsly wtf right here

      if (--n === 0) {
        self.matches[index] = set
        cb()
      }
    })
  })
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  //if ignored, skip _processing
  if (childrenIgnored(this, read))
    return cb()

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}

Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (isIgnored(this, e))
    return

  if (this.paused) {
    this._emitQueue.push([index, e])
    return
  }

  var abs = isAbsolute(e) ? e : this._makeAbs(e)

  if (this.mark)
    e = this._mark(e)

  if (this.absolute)
    e = abs

  if (this.matches[index][e])
    return

  if (this.nodir) {
    var c = this.cache[abs]
    if (c === 'DIR' || Array.isArray(c))
      return
  }

  this.matches[index][e] = true

  var st = this.statCache[abs]
  if (st)
    this.emit('stat', e, st)

  this.emit('match', e)
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  // follow all symlinked directories forever
  // just proceed as if this is a non-globstar situation
  if (this.follow)
    return this._readdir(abs, false, cb)

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er && er.code === 'ENOENT')
      return cb()

    var isSym = lstat && lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && lstat && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
    case 'ENOTDIR': // totally normal. means it *does* exist.
      var abs = this._makeAbs(f)
      this.cache[abs] = 'FILE'
      if (abs === this.cwdAbs) {
        var error = new Error(er.code + ' invalid cwd ' + this.cwd)
        error.path = this.cwd
        error.code = er.code
        this.emit('error', error)
        this.abort()
      }
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[this._makeAbs(f)] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[this._makeAbs(f)] = false
      if (this.strict) {
        this.emit('error', er)
        // If the error is handled, then we abort
        // if not, we threw out of here
        this.abort()
      }
      if (!this.silent)
        console.error('glob error', er)
      break
  }

  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = this._makeAbs(f)
  var needDir = f.slice(-1) === '/'

  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, abs)) {
    var c = this.cache[abs]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but maybe not how we need it
    if (!needDir || c === 'DIR')
      return cb(null, c)

    if (needDir && c === 'FILE')
      return cb()

    // otherwise we have to stat, because maybe c=true
    // if we know it exists, but not what it is.
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else {
      var type = stat.isDirectory() ? 'DIR' : 'FILE'
      if (needDir && type === 'FILE')
        return cb()
      else
        return cb(null, type, stat)
    }
  }

  var self = this
  var statcb = inflight('stat\0' + abs, lstatcb_)
  if (statcb)
    fs.lstat(abs, statcb)

  function lstatcb_ (er, lstat) {
    if (lstat && lstat.isSymbolicLink()) {
      // If it's a symlink, then treat it as the target, unless
      // the target does not exist, then treat it as a file.
      return fs.stat(abs, function (er, stat) {
        if (er)
          self._stat2(f, abs, null, lstat, cb)
        else
          self._stat2(f, abs, er, stat, cb)
      })
    } else {
      self._stat2(f, abs, er, lstat, cb)
    }
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
    this.statCache[abs] = false
    return cb()
  }

  var needDir = f.slice(-1) === '/'
  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())
    return cb(null, false, stat)

  var c = true
  if (stat)
    c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[abs] = this.cache[abs] || c

  if (needDir && c === 'FILE')
    return cb()

  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (50:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":3,"ExpansionArg_int":0} start 38.2245 took 16.2702s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":3,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (50:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var rp = require('fs.realpath')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var isAbsolute = require('path-is-absolute')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')
var childrenIgnored = common.childrenIgnored
var isIgnored = common.isIgnored

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

function extend (origin, add) {
  if (add === null || typeof add !== 'object') {
    return origin
  }

  var keys = Object.keys(add)
  var i = keys.length
  while (i--) {
    origin[keys[i]] = add[keys[i]]
  }
  return origin
}

glob.hasMagic = function (pattern, options_) {
  var options = extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set

  if (!pattern)
    return false

  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)
  this._didRealPath = false

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  this._processing = 0

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  var sync = true
  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }
  sync = false

  function done () {
    --self._processing
    if (self._processing <= 0) {
      if (sync) {
        process.nextTick(function () {
          self._finish()
        })
      } else {
        self._finish()
      }
    }
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  if (this.realpath && !this._didRealpath)
    return this._realpath()

  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._realpath = function () {
  if (this._didRealpath)
    return

  this._didRealpath = true

  var n = this.matches.length
  if (n === 0)
    return this._finish()

  var self = this
  for (var i = 0; i < this.matches.length; i++)
    this._realpathSet(i, next)

  function next () {
    if (--n === 0)
      self._finish()
  }
}

Glob.prototype._realpathSet = function (index, cb) {
  var matchset = this.matches[index]
  if (!matchset)
    return cb()

  var found = Object.keys(matchset)
  var self = this
  var n = found.length

  if (n === 0)
    return cb()

  var set = this.matches[index] = Object.create(null)
  found.forEach(function (p, i) {
    // If there's a problem with the stat, then it means that
    // one or more of the links in the realpath couldn't be
    // resolved.  just return the abs value in that case.
    p = self._makeAbs(p)
    rp.realpath(p, self.realpathCache, function (er, real) {
      if (!er)
        set[real] = true
      else if (er.syscall === 'stat')
        set[p] = true
      else
        self.emit('error', er) // srsly wtf right here

      if (--n === 0) {
        self.matches[index] = set
        cb()
      }
    })
  })
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  //if ignored, skip _processing
  if (childrenIgnored(this, read))
    return cb()

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}

Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (isIgnored(this, e))
    return

  if (this.paused) {
    this._emitQueue.push([index, e])
    return
  }

  var abs = isAbsolute(e) ? e : this._makeAbs(e)

  if (this.mark)
    e = this._mark(e)

  if (this.absolute)
    e = abs

  if (this.matches[index][e])
    return

  if (this.nodir) {
    var c = this.cache[abs]
    if (c === 'DIR' || Array.isArray(c))
      return
  }

  this.matches[index][e] = true

  var st = this.statCache[abs]
  if (st)
    this.emit('stat', e, st)

  this.emit('match', e)
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  // follow all symlinked directories forever
  // just proceed as if this is a non-globstar situation
  if (this.follow)
    return this._readdir(abs, false, cb)

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er && er.code === 'ENOENT')
      return cb()

    var isSym = lstat && lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && lstat && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
    case 'ENOTDIR': // totally normal. means it *does* exist.
      var abs = this._makeAbs(f)
      this.cache[abs] = 'FILE'
      if (abs === this.cwdAbs) {
        var error = new Error(er.code + ' invalid cwd ' + this.cwd)
        error.path = this.cwd
        error.code = er.code
        this.emit('error', error)
        this.abort()
      }
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[this._makeAbs(f)] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[this._makeAbs(f)] = false
      if (this.strict) {
        this.emit('error', er)
        // If the error is handled, then we abort
        // if not, we threw out of here
        this.abort()
      }
      if (!this.silent)
        console.error('glob error', er)
      break
  }

  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = this._makeAbs(f)
  var needDir = f.slice(-1) === '/'

  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, abs)) {
    var c = this.cache[abs]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but maybe not how we need it
    if (!needDir || c === 'DIR')
      return cb(null, c)

    if (needDir && c === 'FILE')
      return cb()

    // otherwise we have to stat, because maybe c=true
    // if we know it exists, but not what it is.
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else {
      var type = stat.isDirectory() ? 'DIR' : 'FILE'
      if (needDir && type === 'FILE')
        return cb()
      else
        return cb(null, type, stat)
    }
  }

  var self = this
  var statcb = inflight('stat\0' + abs, lstatcb_)
  if (statcb)
    fs.lstat(abs, statcb)

  function lstatcb_ (er, lstat) {
    if (lstat && lstat.isSymbolicLink()) {
      // If it's a symlink, then treat it as the target, unless
      // the target does not exist, then treat it as a file.
      return fs.stat(abs, function (er, stat) {
        if (er)
          self._stat2(f, abs, null, lstat, cb)
        else
          self._stat2(f, abs, er, stat, cb)
      })
    } else {
      self._stat2(f, abs, er, lstat, cb)
    }
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
    this.statCache[abs] = false
    return cb()
  }

  var needDir = f.slice(-1) === '/'
  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())
    return cb(null, false, stat)

  var c = true
  if (stat)
    c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[abs] = this.cache[abs] || c

  if (needDir && c === 'FILE')
    return cb()

  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (50:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":3}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4,"ExpansionArg_int":0} start 41.3915 took 13.7138s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (50:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var rp = require('fs.realpath')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var isAbsolute = require('path-is-absolute')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')
var childrenIgnored = common.childrenIgnored
var isIgnored = common.isIgnored

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

function extend (origin, add) {
  if (add === null || typeof add !== 'object') {
    return origin
  }

  var keys = Object.keys(add)
  var i = keys.length
  while (i--) {
    origin[keys[i]] = add[keys[i]]
  }
  return origin
}

glob.hasMagic = function (pattern, options_) {
  var options = extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set

  if (!pattern)
    return false

  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)
  this._didRealPath = false

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  this._processing = 0

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  var sync = true
  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }
  sync = false

  function done () {
    --self._processing
    if (self._processing <= 0) {
      if (sync) {
        process.nextTick(function () {
          self._finish()
        })
      } else {
        self._finish()
      }
    }
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  if (this.realpath && !this._didRealpath)
    return this._realpath()

  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._realpath = function () {
  if (this._didRealpath)
    return

  this._didRealpath = true

  var n = this.matches.length
  if (n === 0)
    return this._finish()

  var self = this
  for (var i = 0; i < this.matches.length; i++)
    this._realpathSet(i, next)

  function next () {
    if (--n === 0)
      self._finish()
  }
}

Glob.prototype._realpathSet = function (index, cb) {
  var matchset = this.matches[index]
  if (!matchset)
    return cb()

  var found = Object.keys(matchset)
  var self = this
  var n = found.length

  if (n === 0)
    return cb()

  var set = this.matches[index] = Object.create(null)
  found.forEach(function (p, i) {
    // If there's a problem with the stat, then it means that
    // one or more of the links in the realpath couldn't be
    // resolved.  just return the abs value in that case.
    p = self._makeAbs(p)
    rp.realpath(p, self.realpathCache, function (er, real) {
      if (!er)
        set[real] = true
      else if (er.syscall === 'stat')
        set[p] = true
      else
        self.emit('error', er) // srsly wtf right here

      if (--n === 0) {
        self.matches[index] = set
        cb()
      }
    })
  })
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  //if ignored, skip _processing
  if (childrenIgnored(this, read))
    return cb()

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}

Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (isIgnored(this, e))
    return

  if (this.paused) {
    this._emitQueue.push([index, e])
    return
  }

  var abs = isAbsolute(e) ? e : this._makeAbs(e)

  if (this.mark)
    e = this._mark(e)

  if (this.absolute)
    e = abs

  if (this.matches[index][e])
    return

  if (this.nodir) {
    var c = this.cache[abs]
    if (c === 'DIR' || Array.isArray(c))
      return
  }

  this.matches[index][e] = true

  var st = this.statCache[abs]
  if (st)
    this.emit('stat', e, st)

  this.emit('match', e)
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  // follow all symlinked directories forever
  // just proceed as if this is a non-globstar situation
  if (this.follow)
    return this._readdir(abs, false, cb)

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er && er.code === 'ENOENT')
      return cb()

    var isSym = lstat && lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && lstat && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
    case 'ENOTDIR': // totally normal. means it *does* exist.
      var abs = this._makeAbs(f)
      this.cache[abs] = 'FILE'
      if (abs === this.cwdAbs) {
        var error = new Error(er.code + ' invalid cwd ' + this.cwd)
        error.path = this.cwd
        error.code = er.code
        this.emit('error', error)
        this.abort()
      }
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[this._makeAbs(f)] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[this._makeAbs(f)] = false
      if (this.strict) {
        this.emit('error', er)
        // If the error is handled, then we abort
        // if not, we threw out of here
        this.abort()
      }
      if (!this.silent)
        console.error('glob error', er)
      break
  }

  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = this._makeAbs(f)
  var needDir = f.slice(-1) === '/'

  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, abs)) {
    var c = this.cache[abs]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but maybe not how we need it
    if (!needDir || c === 'DIR')
      return cb(null, c)

    if (needDir && c === 'FILE')
      return cb()

    // otherwise we have to stat, because maybe c=true
    // if we know it exists, but not what it is.
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else {
      var type = stat.isDirectory() ? 'DIR' : 'FILE'
      if (needDir && type === 'FILE')
        return cb()
      else
        return cb(null, type, stat)
    }
  }

  var self = this
  var statcb = inflight('stat\0' + abs, lstatcb_)
  if (statcb)
    fs.lstat(abs, statcb)

  function lstatcb_ (er, lstat) {
    if (lstat && lstat.isSymbolicLink()) {
      // If it's a symlink, then treat it as the target, unless
      // the target does not exist, then treat it as a file.
      return fs.stat(abs, function (er, stat) {
        if (er)
          self._stat2(f, abs, null, lstat, cb)
        else
          self._stat2(f, abs, er, stat, cb)
      })
    } else {
      self._stat2(f, abs, er, lstat, cb)
    }
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
    this.statCache[abs] = false
    return cb()
  }

  var needDir = f.slice(-1) === '/'
  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())
    return cb(null, false, stat)

  var c = true
  if (stat)
    c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[abs] = this.cache[abs] || c

  if (needDir && c === 'FILE')
    return cb()

  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (50:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":2,"_bound":5,"ExpansionArg_int":0} start 41.4892 took 14.3201s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":2,"_bound":5,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (50:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var rp = require('fs.realpath')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var isAbsolute = require('path-is-absolute')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')
var childrenIgnored = common.childrenIgnored
var isIgnored = common.isIgnored

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

function extend (origin, add) {
  if (add === null || typeof add !== 'object') {
    return origin
  }

  var keys = Object.keys(add)
  var i = keys.length
  while (i--) {
    origin[keys[i]] = add[keys[i]]
  }
  return origin
}

glob.hasMagic = function (pattern, options_) {
  var options = extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set

  if (!pattern)
    return false

  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)
  this._didRealPath = false

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  this._processing = 0

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  var sync = true
  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }
  sync = false

  function done () {
    --self._processing
    if (self._processing <= 0) {
      if (sync) {
        process.nextTick(function () {
          self._finish()
        })
      } else {
        self._finish()
      }
    }
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  if (this.realpath && !this._didRealpath)
    return this._realpath()

  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._realpath = function () {
  if (this._didRealpath)
    return

  this._didRealpath = true

  var n = this.matches.length
  if (n === 0)
    return this._finish()

  var self = this
  for (var i = 0; i < this.matches.length; i++)
    this._realpathSet(i, next)

  function next () {
    if (--n === 0)
      self._finish()
  }
}

Glob.prototype._realpathSet = function (index, cb) {
  var matchset = this.matches[index]
  if (!matchset)
    return cb()

  var found = Object.keys(matchset)
  var self = this
  var n = found.length

  if (n === 0)
    return cb()

  var set = this.matches[index] = Object.create(null)
  found.forEach(function (p, i) {
    // If there's a problem with the stat, then it means that
    // one or more of the links in the realpath couldn't be
    // resolved.  just return the abs value in that case.
    p = self._makeAbs(p)
    rp.realpath(p, self.realpathCache, function (er, real) {
      if (!er)
        set[real] = true
      else if (er.syscall === 'stat')
        set[p] = true
      else
        self.emit('error', er) // srsly wtf right here

      if (--n === 0) {
        self.matches[index] = set
        cb()
      }
    })
  })
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  //if ignored, skip _processing
  if (childrenIgnored(this, read))
    return cb()

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}

Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (isIgnored(this, e))
    return

  if (this.paused) {
    this._emitQueue.push([index, e])
    return
  }

  var abs = isAbsolute(e) ? e : this._makeAbs(e)

  if (this.mark)
    e = this._mark(e)

  if (this.absolute)
    e = abs

  if (this.matches[index][e])
    return

  if (this.nodir) {
    var c = this.cache[abs]
    if (c === 'DIR' || Array.isArray(c))
      return
  }

  this.matches[index][e] = true

  var st = this.statCache[abs]
  if (st)
    this.emit('stat', e, st)

  this.emit('match', e)
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  // follow all symlinked directories forever
  // just proceed as if this is a non-globstar situation
  if (this.follow)
    return this._readdir(abs, false, cb)

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er && er.code === 'ENOENT')
      return cb()

    var isSym = lstat && lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && lstat && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
    case 'ENOTDIR': // totally normal. means it *does* exist.
      var abs = this._makeAbs(f)
      this.cache[abs] = 'FILE'
      if (abs === this.cwdAbs) {
        var error = new Error(er.code + ' invalid cwd ' + this.cwd)
        error.path = this.cwd
        error.code = er.code
        this.emit('error', error)
        this.abort()
      }
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[this._makeAbs(f)] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[this._makeAbs(f)] = false
      if (this.strict) {
        this.emit('error', er)
        // If the error is handled, then we abort
        // if not, we threw out of here
        this.abort()
      }
      if (!this.silent)
        console.error('glob error', er)
      break
  }

  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = this._makeAbs(f)
  var needDir = f.slice(-1) === '/'

  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, abs)) {
    var c = this.cache[abs]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but maybe not how we need it
    if (!needDir || c === 'DIR')
      return cb(null, c)

    if (needDir && c === 'FILE')
      return cb()

    // otherwise we have to stat, because maybe c=true
    // if we know it exists, but not what it is.
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else {
      var type = stat.isDirectory() ? 'DIR' : 'FILE'
      if (needDir && type === 'FILE')
        return cb()
      else
        return cb(null, type, stat)
    }
  }

  var self = this
  var statcb = inflight('stat\0' + abs, lstatcb_)
  if (statcb)
    fs.lstat(abs, statcb)

  function lstatcb_ (er, lstat) {
    if (lstat && lstat.isSymbolicLink()) {
      // If it's a symlink, then treat it as the target, unless
      // the target does not exist, then treat it as a file.
      return fs.stat(abs, function (er, stat) {
        if (er)
          self._stat2(f, abs, null, lstat, cb)
        else
          self._stat2(f, abs, er, stat, cb)
      })
    } else {
      self._stat2(f, abs, er, lstat, cb)
    }
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
    this.statCache[abs] = false
    return cb()
  }

  var needDir = f.slice(-1) === '/'
  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())
    return cb(null, false, stat)

  var c = true
  if (stat)
    c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[abs] = this.cache[abs] || c

  if (needDir && c === 'FILE')
    return cb()

  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (50:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":2,"_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"_bound":5,"ExpansionArg_int":0} start 38.3207 took 17.6698s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"_bound":5,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (50:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var rp = require('fs.realpath')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var isAbsolute = require('path-is-absolute')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')
var childrenIgnored = common.childrenIgnored
var isIgnored = common.isIgnored

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

function extend (origin, add) {
  if (add === null || typeof add !== 'object') {
    return origin
  }

  var keys = Object.keys(add)
  var i = keys.length
  while (i--) {
    origin[keys[i]] = add[keys[i]]
  }
  return origin
}

glob.hasMagic = function (pattern, options_) {
  var options = extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set

  if (!pattern)
    return false

  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)
  this._didRealPath = false

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  this._processing = 0

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  var sync = true
  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }
  sync = false

  function done () {
    --self._processing
    if (self._processing <= 0) {
      if (sync) {
        process.nextTick(function () {
          self._finish()
        })
      } else {
        self._finish()
      }
    }
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  if (this.realpath && !this._didRealpath)
    return this._realpath()

  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._realpath = function () {
  if (this._didRealpath)
    return

  this._didRealpath = true

  var n = this.matches.length
  if (n === 0)
    return this._finish()

  var self = this
  for (var i = 0; i < this.matches.length; i++)
    this._realpathSet(i, next)

  function next () {
    if (--n === 0)
      self._finish()
  }
}

Glob.prototype._realpathSet = function (index, cb) {
  var matchset = this.matches[index]
  if (!matchset)
    return cb()

  var found = Object.keys(matchset)
  var self = this
  var n = found.length

  if (n === 0)
    return cb()

  var set = this.matches[index] = Object.create(null)
  found.forEach(function (p, i) {
    // If there's a problem with the stat, then it means that
    // one or more of the links in the realpath couldn't be
    // resolved.  just return the abs value in that case.
    p = self._makeAbs(p)
    rp.realpath(p, self.realpathCache, function (er, real) {
      if (!er)
        set[real] = true
      else if (er.syscall === 'stat')
        set[p] = true
      else
        self.emit('error', er) // srsly wtf right here

      if (--n === 0) {
        self.matches[index] = set
        cb()
      }
    })
  })
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  //if ignored, skip _processing
  if (childrenIgnored(this, read))
    return cb()

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}

Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (isIgnored(this, e))
    return

  if (this.paused) {
    this._emitQueue.push([index, e])
    return
  }

  var abs = isAbsolute(e) ? e : this._makeAbs(e)

  if (this.mark)
    e = this._mark(e)

  if (this.absolute)
    e = abs

  if (this.matches[index][e])
    return

  if (this.nodir) {
    var c = this.cache[abs]
    if (c === 'DIR' || Array.isArray(c))
      return
  }

  this.matches[index][e] = true

  var st = this.statCache[abs]
  if (st)
    this.emit('stat', e, st)

  this.emit('match', e)
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  // follow all symlinked directories forever
  // just proceed as if this is a non-globstar situation
  if (this.follow)
    return this._readdir(abs, false, cb)

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er && er.code === 'ENOENT')
      return cb()

    var isSym = lstat && lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && lstat && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
    case 'ENOTDIR': // totally normal. means it *does* exist.
      var abs = this._makeAbs(f)
      this.cache[abs] = 'FILE'
      if (abs === this.cwdAbs) {
        var error = new Error(er.code + ' invalid cwd ' + this.cwd)
        error.path = this.cwd
        error.code = er.code
        this.emit('error', error)
        this.abort()
      }
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[this._makeAbs(f)] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[this._makeAbs(f)] = false
      if (this.strict) {
        this.emit('error', er)
        // If the error is handled, then we abort
        // if not, we threw out of here
        this.abort()
      }
      if (!this.silent)
        console.error('glob error', er)
      break
  }

  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = this._makeAbs(f)
  var needDir = f.slice(-1) === '/'

  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, abs)) {
    var c = this.cache[abs]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but maybe not how we need it
    if (!needDir || c === 'DIR')
      return cb(null, c)

    if (needDir && c === 'FILE')
      return cb()

    // otherwise we have to stat, because maybe c=true
    // if we know it exists, but not what it is.
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else {
      var type = stat.isDirectory() ? 'DIR' : 'FILE'
      if (needDir && type === 'FILE')
        return cb()
      else
        return cb(null, type, stat)
    }
  }

  var self = this
  var statcb = inflight('stat\0' + abs, lstatcb_)
  if (statcb)
    fs.lstat(abs, statcb)

  function lstatcb_ (er, lstat) {
    if (lstat && lstat.isSymbolicLink()) {
      // If it's a symlink, then treat it as the target, unless
      // the target does not exist, then treat it as a file.
      return fs.stat(abs, function (er, stat) {
        if (er)
          self._stat2(f, abs, null, lstat, cb)
        else
          self._stat2(f, abs, er, stat, cb)
      })
    } else {
      self._stat2(f, abs, er, lstat, cb)
    }
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
    this.statCache[abs] = false
    return cb()
  }

  var needDir = f.slice(-1) === '/'
  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())
    return cb(null, false, stat)

  var c = true
  if (stat)
    c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[abs] = this.cache[abs] || c

  if (needDir && c === 'FILE')
    return cb()

  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (50:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
