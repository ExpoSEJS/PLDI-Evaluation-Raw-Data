
> spawn-sync@1.0.15 postinstall /root/Targets/opent2t-cli/node_modules/spawn-sync
> node postinstall


> electron@1.7.6 postinstall /root/Targets/opent2t-cli/node_modules/electron
> node install.js

/root/Targets/opent2t-cli
└─┬ opent2t-cli@0.3.0 
  ├── colors@1.1.2 
  ├── commander@2.11.0 
  ├─┬ electron@1.7.6 
  │ ├── @types/node@7.0.43 
  │ ├─┬ electron-download@3.3.0 
  │ │ ├─┬ fs-extra@0.30.0 
  │ │ │ ├── graceful-fs@4.1.11 
  │ │ │ ├── jsonfile@2.4.0 
  │ │ │ ├── klaw@1.3.1 
  │ │ │ └── rimraf@2.6.2 
  │ │ ├── home-path@1.0.5 
  │ │ ├── minimist@1.2.0 
  │ │ ├─┬ nugget@2.0.1 
  │ │ │ ├─┬ pretty-bytes@1.0.4 
  │ │ │ │ ├── get-stdin@4.0.1 
  │ │ │ │ └─┬ meow@3.7.0 
  │ │ │ │   ├─┬ camelcase-keys@2.1.0 
  │ │ │ │   │ └── camelcase@2.1.1 
  │ │ │ │   ├── decamelize@1.2.0 
  │ │ │ │   ├─┬ loud-rejection@1.6.0 
  │ │ │ │   │ ├─┬ currently-unhandled@0.4.1 
  │ │ │ │   │ │ └── array-find-index@1.0.2 
  │ │ │ │   │ └── signal-exit@3.0.2 
  │ │ │ │   ├── map-obj@1.0.1 
  │ │ │ │   ├─┬ normalize-package-data@2.4.0 
  │ │ │ │   │ ├── hosted-git-info@2.5.0 
  │ │ │ │   │ ├─┬ is-builtin-module@1.0.0 
  │ │ │ │   │ │ └── builtin-modules@1.1.1 
  │ │ │ │   │ └─┬ validate-npm-package-license@3.0.1 
  │ │ │ │   │   ├─┬ spdx-correct@1.0.2 
  │ │ │ │   │   │ └── spdx-license-ids@1.2.2 
  │ │ │ │   │   └── spdx-expression-parse@1.0.4 
  │ │ │ │   ├─┬ read-pkg-up@1.0.1 
  │ │ │ │   │ ├── find-up@1.1.2 
  │ │ │ │   │ └─┬ read-pkg@1.1.0 
  │ │ │ │   │   ├─┬ load-json-file@1.1.0 
  │ │ │ │   │   │ ├─┬ parse-json@2.2.0 
  │ │ │ │   │   │ │ └─┬ error-ex@1.3.1 
  │ │ │ │   │   │ │   └── is-arrayish@0.2.1 
  │ │ │ │   │   │ ├── pify@2.3.0 
  │ │ │ │   │   │ └─┬ strip-bom@2.0.0 
  │ │ │ │   │   │   └── is-utf8@0.2.1 
  │ │ │ │   │   └── path-type@1.1.0 
  │ │ │ │   ├─┬ redent@1.0.0 
  │ │ │ │   │ ├─┬ indent-string@2.1.0 
  │ │ │ │   │ │ └─┬ repeating@2.0.1 
  │ │ │ │   │ │   └── is-finite@1.0.2 
  │ │ │ │   │ └── strip-indent@1.0.1 
  │ │ │ │   └── trim-newlines@1.0.0 
  │ │ │ ├─┬ progress-stream@1.2.0 
  │ │ │ │ ├── speedometer@0.1.4 
  │ │ │ │ └─┬ through2@0.2.3 
  │ │ │ │   ├─┬ readable-stream@1.1.14 
  │ │ │ │   │ ├── isarray@0.0.1 
  │ │ │ │   │ └── string_decoder@0.10.31 
  │ │ │ │   └─┬ xtend@2.1.2 
  │ │ │ │     └── object-keys@0.4.0 
  │ │ │ ├─┬ request@2.82.0 
  │ │ │ │ ├── aws-sign2@0.7.0 
  │ │ │ │ ├── aws4@1.6.0 
  │ │ │ │ ├── caseless@0.12.0 
  │ │ │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ │ │ └── delayed-stream@1.0.0 
  │ │ │ │ ├── forever-agent@0.6.1 
  │ │ │ │ ├─┬ form-data@2.3.1 
  │ │ │ │ │ └── asynckit@0.4.0 
  │ │ │ │ ├─┬ har-validator@5.0.3 
  │ │ │ │ │ ├─┬ ajv@5.2.2 
  │ │ │ │ │ │ ├── co@4.6.0 
  │ │ │ │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │ │ │ │   └── jsonify@0.0.0 
  │ │ │ │ │ └── har-schema@2.0.0 
  │ │ │ │ ├─┬ hawk@6.0.2 
  │ │ │ │ │ ├── boom@4.3.1 
  │ │ │ │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ │ │ │ └── boom@5.2.0 
  │ │ │ │ │ ├── hoek@4.2.0 
  │ │ │ │ │ └── sntp@2.0.2 
  │ │ │ │ ├─┬ http-signature@1.2.0 
  │ │ │ │ │ ├── assert-plus@1.0.0 
  │ │ │ │ │ ├─┬ jsprim@1.4.1 
  │ │ │ │ │ │ ├── extsprintf@1.3.0 
  │ │ │ │ │ │ ├── json-schema@0.2.3 
  │ │ │ │ │ │ └── verror@1.10.0 
  │ │ │ │ │ └─┬ sshpk@1.13.1 
  │ │ │ │ │   ├── asn1@0.2.3 
  │ │ │ │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │ │ │   ├── dashdash@1.14.1 
  │ │ │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │ │ │   ├── getpass@0.1.7 
  │ │ │ │ │   ├── jsbn@0.1.1 
  │ │ │ │ │   └── tweetnacl@0.14.5 
  │ │ │ │ ├── is-typedarray@1.0.0 
  │ │ │ │ ├── isstream@0.1.2 
  │ │ │ │ ├── json-stringify-safe@5.0.1 
  │ │ │ │ ├── oauth-sign@0.8.2 
  │ │ │ │ ├── performance-now@2.1.0 
  │ │ │ │ ├── qs@6.5.1 
  │ │ │ │ ├── safe-buffer@5.1.1 
  │ │ │ │ ├── stringstream@0.0.5 
  │ │ │ │ ├─┬ tough-cookie@2.3.2 
  │ │ │ │ │ └── punycode@1.4.1 
  │ │ │ │ ├── tunnel-agent@0.6.0 
  │ │ │ │ └── uuid@3.1.0 
  │ │ │ ├── single-line-log@1.1.2 
  │ │ │ └── throttleit@0.0.2 
  │ │ ├── path-exists@2.1.0 
  │ │ ├─┬ rc@1.2.1 
  │ │ │ ├── deep-extend@0.4.2 
  │ │ │ ├── ini@1.3.4 
  │ │ │ └── strip-json-comments@2.0.1 
  │ │ ├── semver@5.4.1 
  │ │ └─┬ sumchecker@1.3.1 
  │ │   └── es6-promise@4.1.1 
  │ └─┬ extract-zip@1.6.5 
  │   ├─┬ concat-stream@1.6.0 
  │   │ ├─┬ readable-stream@2.3.3 
  │   │ │ ├── core-util-is@1.0.2 
  │   │ │ ├── isarray@1.0.0 
  │   │ │ ├── process-nextick-args@1.0.7 
  │   │ │ ├── string_decoder@1.0.3 
  │   │ │ └── util-deprecate@1.0.2 
  │   │ └── typedarray@0.0.6 
  │   ├─┬ debug@2.2.0 
  │   │ └── ms@0.7.1 
  │   ├─┬ mkdirp@0.5.0 
  │   │ └── minimist@0.0.8 
  │   └─┬ yauzl@2.4.1 
  │     └─┬ fd-slicer@1.0.1 
  │       └── pend@1.2.0 
  ├─┬ express@4.15.4 
  │ ├─┬ accepts@1.3.4 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ └── negotiator@0.6.1 
  │ ├── array-flatten@1.1.1 
  │ ├── content-disposition@0.5.2 
  │ ├── content-type@1.0.4 
  │ ├── cookie@0.3.1 
  │ ├── cookie-signature@1.0.6 
  │ ├─┬ debug@2.6.8 
  │ │ └── ms@2.0.0 
  │ ├── depd@1.1.1 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├─┬ finalhandler@1.0.5 
  │ │ └── unpipe@1.0.0 
  │ ├── fresh@0.5.0 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@1.1.5 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.4.0 
  │ ├── qs@6.5.0 
  │ ├── range-parser@1.2.0 
  │ ├─┬ send@0.15.4 
  │ │ ├── destroy@1.0.4 
  │ │ ├── http-errors@1.6.2 
  │ │ └── mime@1.3.4 
  │ ├── serve-static@1.12.4 
  │ ├── setprototypeof@1.0.3 
  │ ├── statuses@1.3.1 
  │ ├─┬ type-is@1.6.15 
  │ │ └── media-typer@0.3.0 
  │ ├── utils-merge@1.0.0 
  │ └── vary@1.1.1 
  ├─┬ glob@7.1.2 
  │ ├── fs.realpath@1.0.0 
  │ ├─┬ inflight@1.0.6 
  │ │ └── wrappy@1.0.2 
  │ ├── inherits@2.0.3 
  │ ├─┬ minimatch@3.0.4 
  │ │ └─┬ brace-expansion@1.1.8 
  │ │   ├── balanced-match@1.0.0 
  │ │   └── concat-map@0.0.1 
  │ ├── once@1.4.0 
  │ └── path-is-absolute@1.0.1 
  ├─┬ inquirer@1.2.3 
  │ ├── ansi-escapes@1.4.0 
  │ ├─┬ chalk@1.1.3 
  │ │ ├── ansi-styles@2.2.1 
  │ │ ├── escape-string-regexp@1.0.5 
  │ │ ├── has-ansi@2.0.0 
  │ │ └── supports-color@2.0.0 
  │ ├─┬ cli-cursor@1.0.2 
  │ │ └─┬ restore-cursor@1.0.1 
  │ │   ├── exit-hook@1.1.1 
  │ │   └── onetime@1.1.0 
  │ ├── cli-width@2.2.0 
  │ ├─┬ external-editor@1.1.1 
  │ │ ├── extend@3.0.1 
  │ │ ├─┬ spawn-sync@1.0.15 
  │ │ │ └── os-shim@0.1.3 
  │ │ └─┬ tmp@0.0.29 
  │ │   └── os-tmpdir@1.0.2 
  │ ├─┬ figures@1.7.0 
  │ │ └── object-assign@4.1.1 
  │ ├── lodash@4.17.4 
  │ ├── mute-stream@0.0.6 
  │ ├─┬ pinkie-promise@2.0.1 
  │ │ └── pinkie@2.0.4 
  │ ├─┬ run-async@2.3.0 
  │ │ └── is-promise@2.1.0 
  │ ├── rx@4.1.0 
  │ ├─┬ string-width@1.0.2 
  │ │ ├── code-point-at@1.1.0 
  │ │ └─┬ is-fullwidth-code-point@1.0.0 
  │ │   └── number-is-nan@1.0.1 
  │ ├─┬ strip-ansi@3.0.1 
  │ │ └── ansi-regex@2.1.1 
  │ └── through@2.3.8 
  ├── open@0.0.5 
  ├── q@1.5.0 
  ├─┬ sanitize-filename@1.6.1 
  │ └─┬ truncate-utf8-bytes@1.0.2 
  │   └── utf8-byte-length@1.0.4 
  ├── xmldom@0.1.27 
  └── xpath@0.0.23 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/opent2t-cli/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0535 took 4.3557s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
var colors = require('colors');
var Opent2tHelper = require("./Opent2tHelper");
var fs = require('fs');
var path = require('path');
var inquirer = require('inquirer');
var q = require('q');
var helpers = require('./helpers');
var opent2tHelper = new Opent2tHelper();
var MainController = require("./controllers/mainController");
var configRoot = process.cwd();

// set theme 
colors.setTheme({
    silly: 'rainbow',
    header: 'cyan',
    state: 'yellow'
});

program
    .version('1.0.0')
    .option('-o --onboarding [Translator Package Name]', 'Do onboarding for specified thing')
    .option('-h --hub [Hub Name]', 'Gets devices for the given hub')
    .option('-r --refreshAuthToken [Translator Package Name]', 'Refresh the oauth token for the given hub')

    .option('-t --translator [Translator Package Name]', 'Do get property for specified thing, requires -p')
    .option('-i --id [Control id]', 'Control id you want to use')
    .option('-d --di [Device id]', 'Device id of the resource you want to control')
    .option('-g --get [RAML property name]', 'Property name to GET for -t')
    .option('-s --set [RAML property name]', 'Property name to SET for -t')
    .option('-v --value [value]', 'Stringified JSON value to pass in')
    .option('-m --menu', 'Launch interactive menu')
    .parse(process.argv);

console.log('Open Translators to Things CLI:');
console.log('');

if (program.menu) {
    prompt({ currentController: new MainController(), controllerStack: [] });
}

else if (program.onboarding) {
    if (program.hub === undefined) {
        console.log("Need to provide hub name, -h <hub name>");
        return;
    }

    console.log("------ Doing onboarding for %j".header, program.onboarding);

    let fileName = path.join(configRoot, helpers.createOnboardingFileName(program.hub));

    opent2tHelper.doOnboarding(program.onboarding).then(info => {
        let configData = helpers.createConfigData(program.hub, program.onboarding, info);
        let data = JSON.stringify(configData);
        helpers.logObject(info);
        console.log("------ Saving onboardingInfo to: " + fileName);
        fs.writeFile(fileName, data, function (err) {
            if (err) {
                console.log(err);
                return console.log(err);
            }
            console.log("Saved!");
        });
    }).catch(err => {
        helpers.logError(err);
    });
}

// this is for devices which communicate via a hub translator (hub device or central cloud)
else if (program.translator && program.hub) {
    console.log("------ Hub + translator for %j %j".header, program.hub, program.translator);

    if (program.id === undefined) {
        console.log("Need to provide id, -i <id>");
        return;
    }

    let fileName = path.join(configRoot, helpers.createOnboardingFileName(program.hub));
    helpers.readFile(fileName, "Please complete onboarding -o").then(data => {
        var configInfo = JSON.parse(data);
        var deviceInfo = configInfo.authInfo;
        opent2tHelper.createTranslator(configInfo.translatorPackageName, deviceInfo).then(hub => {
            var fileName = path.join(configRoot, helpers.createHubDeviceFileName(program.translator, program.id));
            console.log(fileName);
            helpers.readFile(fileName, "Please complete hub -h before calling -t").then(data => {
                var deviceInfo = JSON.parse(data);
                var dInfo = { 'deviceInfo': deviceInfo, 'hub': hub };

                if (program.get) {

                    // If a device/entity id was provided, then pass it, otherwise pass expand=true
                    var value = true;
                    if (program.di) {
                        value = program.di;
                    }

                    opent2tHelper.getProperty(program.translator, dInfo, program.get, value).then(info => {
                        helpers.logObject(info);
                    }).catch(error => {
                        helpers.logError(error);
                    });
                }
                else if (program.set) {
                    var parsedValue = undefined;
                    try {
                        parsedValue = JSON.parse(program.value);
                    } catch (e) {
                        helpers.logError("Failed to parse JSON: " + program.value);
                        return;
                    }

                    opent2tHelper.setProperty(program.translator, dInfo, program.set, program.di, parsedValue).then(info => {
                        helpers.logObject(info)
                    }).catch(error => {
                        helpers.logError(error);
                    });
                }
            });
        });
    }).catch(error => {
        helpers.logError(error);
    });
}

else if (program.hub) {
    console.log("------ Hub enumerate devices for %j".header, program.hub);

    let fileName = path.join(configRoot, helpers.createOnboardingFileName(program.hub));
    helpers.readFile(fileName, "Please complete onboarding -o").then(data => {
        var configInfo = JSON.parse(data);
        var deviceInfo = configInfo.authInfo;
        opent2tHelper.getProperty(configInfo.translatorPackageName, deviceInfo, 'getPlatforms').then(info => {
            helpers.logObject(info);
            helpers.writeArrayToFile(info.platforms, configRoot, "_device_", "controlId");
        }).catch(error => {
            helpers.logError(error);
        });
    }).catch(error => {
        helpers.logError(error);
    });
}
else if (program.refreshAuthToken) {
    console.log("------ Refreshing oAuth token for hub %j".header, program.refreshAuthToken);
    let fileName = path.join(configRoot, helpers.createOnboardingFileName(program.refreshAuthToken));
    helpers.readFile(fileName, "Please complete onboarding -o").then(data => {
        let configInfo = JSON.parse(data);
        let authInfo = configInfo.authInfo;
        opent2tHelper.loadTranslatorAndGetOnboardingAnswers(configInfo.translatorPackageName).then(answers => {
            opent2tHelper.getProperty(configInfo.translatorPackageName, authInfo, 'refreshAuthToken', answers).then(refreshedInfo => {
                helpers.logObject(refreshedInfo);
                console.log("------ Saving refreshed onboardingInfo to: " + fileName);
                let configData = helpers.createConfigData(configInfo.translator, configInfo.translatorPackageName, refreshedInfo);
                let refreshedData = JSON.stringify(configData);
                fs.writeFile(fileName, refreshedData, function (err) {
                    if (err) {
                        console.log(err);
                        return console.log(err);
                    }
                    console.log("Saved!");
                });

            }).catch(error => {
                helpers.logError(error);
            });
        });
    }).catch(error => {
        helpers.logError(error);
    });
}

// this is for top level devices which don't require a hub
else if (program.translator) {
    console.log("------ Doing translator for %j".header, program.translator);

    var fileName = helpers.createHubDeviceFileName(program.translator, program.id);
    helpers.readFile(fileName, "Please complete onboarding -o").then(data => {
        var deviceInfo = JSON.parse(data);
        var dInfo = { 'deviceInfo': deviceInfo, 'hub': undefined };

        opent2tHelper.getProperty(program.translator, deviceInfo, program.get).then(info => {
            helpers.logObject(info);
        }).catch(error => {
            helpers.logError(error);
        });
    }).catch(error => {
        helpers.logError(error);
    });
}

else {
    program.outputHelp(make_red);
}

function make_red(txt) {
    //display the help text in red on the console
    return colors.red(txt);
}

function prompt(state) {
    state.currentController.logState(state);
    let operations = state.currentController.getOperations(state);

    let question = {
        type: 'rawlist',
        name: 'choice',
        message: 'What would you like to do?',
        choices: operations.map(o => o.name)
    };

    inquirer.prompt([question]).then(function (answers) {
        if (answers.choice !== 'Exit') {
            let choice = operations.find(o => o.name === answers.choice);
            if (choice !== undefined) {
                process.stdout.write('\033c');
                choice.operation(state).then(prompt)
                    .catch(err => {
                        helpers.logError(err);
                        prompt(state);
                    });
            }
            else {
                helpers.logError('Unknown operation');
                prompt(state);
            }
        }
        else {
            let question = {
                type: 'confirm',
                name: 'exit',
                message: 'Are you sure you want to exit?'
            };

            inquirer.prompt([question]).then(function (answers) {
                if (!answers.exit) {
                    prompt(state);
                }
            });
        }
    });
} at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
