
> secp256k1@3.3.0 install /root/Targets/peer-id/node_modules/secp256k1
> prebuild-install || node-gyp rebuild || echo "Secp256k1 bindings compilation fail. Pure JS implementation will be used."

/root/Targets/peer-id
└─┬ peer-id@0.10.1 
  ├── async@2.5.0 
  ├─┬ libp2p-crypto@0.10.3 
  │ ├─┬ asn1.js@4.9.1 
  │ │ ├── bn.js@4.11.8 
  │ │ ├── inherits@2.0.3 
  │ │ └── minimalistic-assert@1.0.0 
  │ ├─┬ browserify-aes@1.0.8 
  │ │ ├── buffer-xor@1.0.3 
  │ │ ├── cipher-base@1.0.4 
  │ │ ├─┬ create-hash@1.1.3 
  │ │ │ ├─┬ ripemd160@2.0.1 
  │ │ │ │ └── hash-base@2.0.2 
  │ │ │ └── sha.js@2.4.9 
  │ │ ├─┬ evp_bytestokey@1.0.3 
  │ │ │ └─┬ md5.js@1.3.4 
  │ │ │   └── hash-base@3.0.4 
  │ │ └── safe-buffer@5.1.1 
  │ ├── keypair@1.0.1 
  │ ├─┬ libp2p-crypto-secp256k1@0.2.2 
  │ │ ├─┬ nodeify@1.0.1 
  │ │ │ ├── is-promise@1.0.1 
  │ │ │ └── promise@1.3.0 
  │ │ └─┬ secp256k1@3.3.0 
  │ │   ├── bindings@1.3.0 
  │ │   ├── bip66@1.1.5 
  │ │   ├─┬ drbg.js@1.0.1 
  │ │   │ └── create-hmac@1.1.6 
  │ │   ├─┬ elliptic@6.4.0 
  │ │   │ ├── brorand@1.1.0 
  │ │   │ ├── hash.js@1.1.3 
  │ │   │ ├── hmac-drbg@1.0.1 
  │ │   │ └── minimalistic-crypto-utils@1.0.1 
  │ │   ├── nan@2.7.0 
  │ │   └─┬ prebuild-install@2.2.2 
  │ │     ├── expand-template@1.1.0 
  │ │     ├── github-from-package@0.0.0 
  │ │     ├── minimist@1.2.0 
  │ │     ├─┬ mkdirp@0.5.1 
  │ │     │ └── minimist@0.0.8 
  │ │     ├── node-abi@2.1.1 
  │ │     ├── noop-logger@0.1.1 
  │ │     ├─┬ npmlog@4.1.2 
  │ │     │ ├─┬ are-we-there-yet@1.1.4 
  │ │     │ │ └── delegates@1.0.0 
  │ │     │ ├── console-control-strings@1.1.0 
  │ │     │ ├─┬ gauge@2.7.4 
  │ │     │ │ ├── aproba@1.2.0 
  │ │     │ │ ├── has-unicode@2.0.1 
  │ │     │ │ ├── object-assign@4.1.1 
  │ │     │ │ ├── signal-exit@3.0.2 
  │ │     │ │ ├─┬ string-width@1.0.2 
  │ │     │ │ │ ├── code-point-at@1.1.0 
  │ │     │ │ │ └─┬ is-fullwidth-code-point@1.0.0 
  │ │     │ │ │   └── number-is-nan@1.0.1 
  │ │     │ │ ├─┬ strip-ansi@3.0.1 
  │ │     │ │ │ └── ansi-regex@2.1.1 
  │ │     │ │ └── wide-align@1.1.2 
  │ │     │ └── set-blocking@2.0.0 
  │ │     ├── os-homedir@1.0.2 
  │ │     ├─┬ pump@1.0.2 
  │ │     │ ├── end-of-stream@1.4.0 
  │ │     │ └─┬ once@1.4.0 
  │ │     │   └── wrappy@1.0.2 
  │ │     ├─┬ rc@1.2.1 
  │ │     │ ├── deep-extend@0.4.2 
  │ │     │ ├── ini@1.3.4 
  │ │     │ └── strip-json-comments@2.0.1 
  │ │     ├─┬ simple-get@1.4.3 
  │ │     │ └── unzip-response@1.0.2 
  │ │     ├─┬ tar-fs@1.15.3 
  │ │     │ ├── chownr@1.0.1 
  │ │     │ └─┬ tar-stream@1.5.4 
  │ │     │   └── bl@1.2.1 
  │ │     ├── tunnel-agent@0.6.0 
  │ │     └── xtend@4.0.1 
  │ ├─┬ multihashing-async@0.4.6 
  │ │ ├── blakejs@1.1.0 
  │ │ ├── js-sha3@0.6.1 
  │ │ └── murmurhash3js@3.0.1 
  │ ├─┬ pem-jwk@1.5.1 
  │ │ └─┬ asn1.js@1.0.3 
  │ │   └── bn.js@1.3.0 
  │ ├─┬ protons@1.0.0 
  │ │ ├─┬ brfs@1.4.3 
  │ │ │ ├─┬ quote-stream@1.0.2 
  │ │ │ │ └── buffer-equal@0.0.1 
  │ │ │ ├─┬ resolve@1.4.0 
  │ │ │ │ └── path-parse@1.0.5 
  │ │ │ ├─┬ static-module@1.5.0 
  │ │ │ │ ├─┬ concat-stream@1.6.0 
  │ │ │ │ │ └── typedarray@0.0.6 
  │ │ │ │ ├─┬ duplexer2@0.0.2 
  │ │ │ │ │ └─┬ readable-stream@1.1.14 
  │ │ │ │ │   ├── isarray@0.0.1 
  │ │ │ │ │   └── string_decoder@0.10.31 
  │ │ │ │ ├─┬ escodegen@1.3.3 
  │ │ │ │ │ ├── esprima@1.1.1 
  │ │ │ │ │ ├── estraverse@1.5.1 
  │ │ │ │ │ ├── esutils@1.0.0 
  │ │ │ │ │ └─┬ source-map@0.1.43 
  │ │ │ │ │   └── amdefine@1.0.1 
  │ │ │ │ ├─┬ falafel@2.1.0 
  │ │ │ │ │ ├── acorn@5.1.2 
  │ │ │ │ │ ├── foreach@2.0.5 
  │ │ │ │ │ ├── isarray@0.0.1 
  │ │ │ │ │ └── object-keys@1.0.11 
  │ │ │ │ ├─┬ has@1.0.1 
  │ │ │ │ │ └── function-bind@1.1.1 
  │ │ │ │ ├── object-inspect@0.4.0 
  │ │ │ │ ├─┬ quote-stream@0.0.0 
  │ │ │ │ │ └── minimist@0.0.8 
  │ │ │ │ ├─┬ readable-stream@1.0.34 
  │ │ │ │ │ ├── core-util-is@1.0.2 
  │ │ │ │ │ ├── isarray@0.0.1 
  │ │ │ │ │ └── string_decoder@0.10.31 
  │ │ │ │ ├── shallow-copy@0.0.1 
  │ │ │ │ ├─┬ static-eval@0.2.4 
  │ │ │ │ │ └─┬ escodegen@0.0.28 
  │ │ │ │ │   ├── esprima@1.0.4 
  │ │ │ │ │   └── estraverse@1.3.2 
  │ │ │ │ └─┬ through2@0.4.2 
  │ │ │ │   └─┬ xtend@2.1.2 
  │ │ │ │     └── object-keys@0.4.0 
  │ │ │ └─┬ through2@2.0.3 
  │ │ │   └─┬ readable-stream@2.3.3 
  │ │ │     ├── isarray@1.0.0 
  │ │ │     ├── process-nextick-args@1.0.7 
  │ │ │     ├── string_decoder@1.0.3 
  │ │ │     └── util-deprecate@1.0.2 
  │ │ ├── protocol-buffers-schema@3.3.2 
  │ │ └── signed-varint@2.0.1 
  │ ├─┬ rsa-pem-to-jwk@1.1.3 
  │ │ ├── object-assign@2.1.1 
  │ │ └─┬ rsa-unpack@0.0.6 
  │ │   └─┬ optimist@0.3.7 
  │ │     └── wordwrap@0.0.3 
  │ ├── tweetnacl@1.0.0 
  │ └── webcrypto-shim@0.1.1  (git://github.com/dignifiedquire/webcrypto-shim.git#effe03d3401ccbfb4837191bc393bb347e0c0f0a)
  ├── lodash@4.17.4 
  └─┬ multihashes@0.4.9 
    ├─┬ bs58@4.0.1 
    │ └── base-x@3.0.2 
    └── varint@5.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/peer-id/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0552 took 4.1251s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (9:6) on program /*
 * Id is an object representation of a peer Id. a peer Id is a multihash
 */

'use strict'

const mh = require('multihashes')
const crypto = require('libp2p-crypto')
const assert = require('assert')
const waterfall = require('async/waterfall')

class PeerId {
  constructor (id, privKey, pubKey) {
    assert(Buffer.isBuffer(id), 'invalid id provided')

    if (privKey && pubKey) {
      assert(privKey.public.bytes.equals(pubKey.bytes), 'inconsistent arguments')
    }

    this._id = id
    this._idB58String = mh.toB58String(this.id)
    this._privKey = privKey
    this._pubKey = pubKey
  }

  get id () {
    return this._id
  }

  set id (val) {
    throw new Error('Id is immutable')
  }

  get privKey () {
    return this._privKey
  }

  set privKey (privKey) {
    this._privKey = privKey
  }

  get pubKey () {
    if (this._pubKey) {
      return this._pubKey
    }

    if (this._privKey) {
      return this._privKey.public
    }
  }

  set pubKey (pubKey) {
    this._pubKey = pubKey
  }

  // Return the protobuf version of the public key, matching go ipfs formatting
  marshalPubKey () {
    if (this.pubKey) {
      return crypto.keys.marshalPublicKey(this.pubKey)
    }
  }

  // Return the protobuf version of the private key, matching go ipfs formatting
  marshalPrivKey () {
    if (this.privKey) {
      return crypto.keys.marshalPrivateKey(this.privKey)
    }
  }

  // pretty print
  toPrint () {
    return this.toJSON()
  }

  // return the jsonified version of the key, matching the formatting
  // of go-ipfs for its config file
  toJSON () {
    return {
      id: this.toB58String(),
      privKey: toB64Opt(this.marshalPrivKey()),
      pubKey: toB64Opt(this.marshalPubKey())
    }
  }

  // encode/decode functions
  toHexString () {
    return mh.toHexString(this.id)
  }

  toBytes () {
    return this.id
  }

  toB58String () {
    return this._idB58String
  }

  isEqual (id) {
    if (Buffer.isBuffer(id)) {
      return this.id.equals(id)
    } else if (id.id) {
      return this.id.equals(id.id)
    } else {
      throw new Error('not valid Id')
    }
  }

  /*
   * Check if this PeerId instance is valid (privKey -> pubKey -> Id)
   */
  isValid (callback) {
    // TODO Needs better checking
    if (this.privKey &&
      this.privKey.public &&
      this.privKey.public.bytes &&
      Buffer.isBuffer(this.pubKey.bytes) &&
      this.privKey.public.bytes.equals(this.pubKey.bytes)) {
      callback()
    } else {
      callback(new Error('Keys not match'))
    }
  }
}

exports = module.exports = PeerId

// generation
exports.create = function (opts, callback) {
  if (typeof opts === 'function') {
    callback = opts
    opts = {}
  }
  opts = opts || {}
  opts.bits = opts.bits || 2048

  waterfall([
    (cb) => crypto.keys.generateKeyPair('RSA', opts.bits, cb),
    (privKey, cb) => privKey.public.hash((err, digest) => {
      cb(err, digest, privKey)
    })
  ], (err, digest, privKey) => {
    if (err) {
      return callback(err)
    }

    callback(null, new PeerId(digest, privKey))
  })
}

exports.createFromHexString = function (str) {
  return new PeerId(mh.fromHexString(str))
}

exports.createFromBytes = function (buf) {
  return new PeerId(buf)
}

exports.createFromB58String = function (str) {
  return new PeerId(mh.fromB58String(str))
}

// Public Key input will be a buffer
exports.createFromPubKey = function (key, callback) {
  if (typeof callback !== 'function') {
    throw new Error('callback is required')
  }

  let buf = key
  if (typeof buf === 'string') {
    buf = Buffer.from(key, 'base64')
  }

  const pubKey = crypto.keys.unmarshalPublicKey(buf)

  pubKey.hash((err, digest) => {
    if (err) {
      return callback(err)
    }

    callback(null, new PeerId(digest, null, pubKey))
  })
}

// Private key input will be a string
exports.createFromPrivKey = function (key, callback) {
  let buf = key
  if (typeof buf === 'string') {
    buf = Buffer.from(key, 'base64')
  }

  if (typeof callback !== 'function') {
    throw new Error('callback is required')
  }

  waterfall([
    (cb) => crypto.keys.unmarshalPrivateKey(buf, cb),
    (privKey, cb) => privKey.public.hash((err, digest) => {
      cb(err, digest, privKey)
    })
  ], (err, digest, privKey) => {
    if (err) {
      return callback(err)
    }

    callback(null, new PeerId(digest, privKey))
  })
}

exports.createFromJSON = function (obj, callback) {
  if (typeof callback !== 'function') {
    throw new Error('callback is required')
  }

  const id = mh.fromB58String(obj.id)
  const rawPrivKey = obj.privKey && Buffer.from(obj.privKey, 'base64')
  const rawPubKey = obj.pubKey && Buffer.from(obj.pubKey, 'base64')
  const pub = rawPubKey && crypto.keys.unmarshalPublicKey(rawPubKey)

  if (rawPrivKey) {
    waterfall([
      (cb) => crypto.keys.unmarshalPrivateKey(rawPrivKey, cb),
      (priv, cb) => priv.public.hash((err, digest) => {
        cb(err, digest, priv)
      }),
      (privDigest, priv, cb) => {
        if (pub) {
          pub.hash((err, pubDigest) => {
            cb(err, privDigest, priv, pubDigest)
          })
        } else {
          cb(null, privDigest, priv)
        }
      }
    ], (err, privDigest, priv, pubDigest) => {
      if (err) {
        return callback(err)
      }

      if (pub && !privDigest.equals(pubDigest)) {
        return callback(new Error('Public and private key do not match'))
      }

      if (id && !privDigest.equals(id)) {
        return callback(new Error('Id and private key do not match'))
      }

      callback(null, new PeerId(id, priv, pub))
    })
  } else {
    callback(null, new PeerId(id, null, pub))
  }
}

exports.isPeerId = function (peerId) {
  return Boolean(typeof peerId === 'object' &&
    peerId._id &&
    peerId._idB58String)
}

function toB64Opt (val) {
  if (val) {
    return val.toString('base64')
  }
}
 at SyntaxError: Unexpected token (9:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
