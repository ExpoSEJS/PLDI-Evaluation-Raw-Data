/root/Targets/ei-pic-browser
└─┬ ei-pic-browser@1.0.3 
  ├── ei-dialog@1.0.3 
  ├── jquery@1.12.4 
  ├─┬ stringify@5.1.0 
  │ ├─┬ browserify-transform-tools@1.7.0 
  │ │ ├─┬ falafel@2.1.0 
  │ │ │ ├── acorn@5.1.2 
  │ │ │ ├── foreach@2.0.5 
  │ │ │ ├── isarray@0.0.1 
  │ │ │ └── object-keys@1.0.11 
  │ │ └── through@2.3.8 
  │ └─┬ html-minifier@1.1.1 
  │   ├─┬ change-case@2.3.1 
  │   │ ├── camel-case@1.2.2 
  │   │ ├── constant-case@1.1.2 
  │   │ ├── dot-case@1.1.2 
  │   │ ├── is-lower-case@1.1.3 
  │   │ ├── is-upper-case@1.1.2 
  │   │ ├── lower-case@1.1.4 
  │   │ ├── lower-case-first@1.0.2 
  │   │ ├── param-case@1.1.2 
  │   │ ├── pascal-case@1.1.2 
  │   │ ├── path-case@1.1.2 
  │   │ ├── sentence-case@1.1.3 
  │   │ ├── snake-case@1.1.2 
  │   │ ├── swap-case@1.1.2 
  │   │ ├── title-case@1.1.2 
  │   │ ├── upper-case@1.1.3 
  │   │ └── upper-case-first@1.1.2 
  │   ├─┬ clean-css@3.4.28 
  │   │ ├─┬ commander@2.8.1 
  │   │ │ └── graceful-readlink@1.0.1 
  │   │ └─┬ source-map@0.4.4 
  │   │   └── amdefine@1.0.1 
  │   ├─┬ cli@0.11.3 
  │   │ ├── exit@0.1.2 
  │   │ └─┬ glob@7.1.2 
  │   │   ├── fs.realpath@1.0.0 
  │   │   ├─┬ inflight@1.0.6 
  │   │   │ └── wrappy@1.0.2 
  │   │   ├─┬ minimatch@3.0.4 
  │   │   │ └─┬ brace-expansion@1.1.8 
  │   │   │   ├── balanced-match@1.0.0 
  │   │   │   └── concat-map@0.0.1 
  │   │   ├── once@1.4.0 
  │   │   └── path-is-absolute@1.0.1 
  │   ├─┬ concat-stream@1.5.2 
  │   │ ├── inherits@2.0.3 
  │   │ ├─┬ readable-stream@2.0.6 
  │   │ │ ├── core-util-is@1.0.2 
  │   │ │ ├── isarray@1.0.0 
  │   │ │ ├── process-nextick-args@1.0.7 
  │   │ │ ├── string_decoder@0.10.31 
  │   │ │ └── util-deprecate@1.0.2 
  │   │ └── typedarray@0.0.6 
  │   ├── relateurl@0.2.7 
  │   └─┬ uglify-js@2.6.4 
  │     ├── async@0.2.10 
  │     ├── source-map@0.5.7 
  │     ├── uglify-to-browserify@1.0.2 
  │     └─┬ yargs@3.10.0 
  │       ├── camelcase@1.2.1 
  │       ├─┬ cliui@2.1.0 
  │       │ ├─┬ center-align@0.1.3 
  │       │ │ ├─┬ align-text@0.1.4 
  │       │ │ │ ├─┬ kind-of@3.2.2 
  │       │ │ │ │ └── is-buffer@1.1.5 
  │       │ │ │ ├── longest@1.0.1 
  │       │ │ │ └── repeat-string@1.6.1 
  │       │ │ └── lazy-cache@1.0.4 
  │       │ ├── right-align@0.1.3 
  │       │ └── wordwrap@0.0.2 
  │       ├── decamelize@1.2.0 
  │       └── window-size@0.1.0 
  ├── tripartite@1.0.7 
  └── underscore@1.8.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/ei-pic-browser/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 2% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0561 took 32.594s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: 'with' in strict mode (317:1) on program 
if(typeof String.prototype.trim !== 'function') {
  String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, ''); 
  }
}

function cloneArray(ar) {
	var consumed = []
	for(var i = 0; i < ar.length; i++) {
		consumed.push(ar[i])
	}
	return consumed
}

var Tripartite = function() {
	this.templates = {
		defaultTemplate: function(thedata) {
			return '' + thedata;
		}
	}
	
	this.templates.defaultTemplate.write = function(thedata, stream, callback) {
		stream.write('' + thedata)
		if(callback) {
			callback()
		}
	}
	
	this.constants = {
		templateBoundary: '__',
		templateNameBoundary: '##'
	}
	
	// This object (if set) will receive the template functions parsed from a script
	// I want to be able to call my templates as global functions, so I've set it
	// to be the window object
	this.secondaryTemplateFunctionObject = null
	
	this.loaders = []
}

var t = Tripartite


t.prototype.addTemplate = function(name, template) {
	if(typeof template !== 'function') {
		template = this.pt(template);
	}
	if(!template.write) {
		var oldFun = template
		template = function(cc) {
			if(arguments.length > 1) {
				template.write.apply(this, arguments)
			}
			else {
				return oldFun(cc)
			}
		}
		template.write = function(cc, stream, callback) {
			stream.write(oldFun(cc))
			if(callback) {
				callback()
			}
		}
	}
	this.templates[name] = template;
	return template;
};

t.prototype.createBlank = function() {
	return new Tripartite()
}

t.prototype.getTemplate = function(name) {
	return this.templates[name]
}

t.prototype.loadTemplate = function(name, callback) {
	if(this.templates[name]) {
		callback(this.templates[name])
		
	}
	else {
		var tri = this
		
		var done = false
		for(var i = 0; i < this.loaders.length; i++) {
			this.loaders[i](name, function(template) {
				if(done) {
					return
				}
				if(template) {
					done = true
					tri.addTemplate(name, template)
					callback(tri.getTemplate(name))
				}
			})
		}
	}
}

t.prototype.parseTemplateScript = function(tx) {
	var tks = this.tts(tx);
	/* current template name */
	var ctn = null;
	for(var i = 0; i < tks.length; i++) {
		var token = tks[i];
		if(token.active) {
			ctn = token.content;
		}
		else {
			if(ctn) {
				var template = this.addTemplate(ctn, this.stw(token.content));
				if(this.secondaryTemplateFunctionObject) {
					this.secondaryTemplateFunctionObject[ctn] = template;
				}
				ctn = null;
			}
		}
	}
}

/* strip template whitespace */
t.prototype.stw = function(txt) {
	var i = txt.indexOf('\n');
	if(i > -1 && txt.substring(0, i).trim() == '') {
		txt = txt.substring(i + 1);
	}
	i = txt.lastIndexOf('\n');
	if(i > -1 && txt.substring(i).trim() == '') {
		txt = txt.substring(0, i);
	}
	return txt;
};

t.prototype.ActiveElement = function(/* the conditional */cd, data, hd, tripartite) {
	/* assign the conditional expression */
	this.ce = cd;
	/* assign the data selector expression */
	this.dse = data;
	
	this.tripartite = tripartite
	
	/* assign the hd expression */
	if(hd) {
		this.he = hd;
	}
	else {
		this.he = 'defaultTemplate';
	}
	
	/* evaluated data */
	this.ed = null;
};

var ae = t.prototype.ActiveElement;

/* SimpleTemplate */
t.prototype.st = function(/* conditional expression */ cd, data, /* handling expression */ hd, tripartite) {
	this.tripartite = tripartite
	var el = new ae(cd, data, hd, tripartite);
	var f = function(cc) {
		if(arguments.length > 1) {
			el.write.apply(el, arguments)
		}
		else {
			return el.run(cc);
		}
	}
	
	f.write = function(cc, stream, callback) {
		el.write(cc, stream, callback)
	}
	return f
};


ae.prototype.run = function(/* current context */cc) {
	/* run template */
	var rt = false;
	/* evaluated data */
	this.ed = this.edse(cc);
	if(this.ce) {
		rt = this.eic(cc, this.ce);
	}
	else {
		if(this.ed instanceof Array) {
			if(this.ed.length > 0) {
				rt = true;
			}
		}
		else {
			if(this.ed) {
				rt = true;
			}
			else if(!this.dse) {
				rt = true
				this.ed = cc
			}
		}
	}
	
	var at = this.he;
	if(at.charAt(0) == '$') {
		at = this.eic(cc, at.substring(1));
	}
	if(!at) {
		at = 'defaultTemplate';
	}
	
	if(rt) {
		if(this.ed instanceof Array) {
			var r = '';
			for(var i = 0; i < this.ed.length; i++) {
				r += this.getTemplate(at)(this.ed[i]);
			}
			return r;
		}
		else {
			return this.getTemplate(at)(this.ed);
		}
	}
	return '';
};

ae.prototype.write = function(/* current context */cc, stream, callback) {
	/* run template */
	var rt = false;
	/* evaluated data */
	this.ed = this.edse(cc);
	if(this.ce) {
		rt = this.eic(cc, this.ce);
	}
	else {
		if(this.ed instanceof Array) {
			if(this.ed.length > 0) {
				rt = true;
			}
		}
		else {
			if(this.ed) {
				rt = true;
			}
			else if(!this.dse) {
				rt = true
				this.ed = cc
			}
		}
	}
	
	var at = this.he;
	if(at.charAt(0) == '$') {
		at = this.eic(cc, at.substring(1));
	}
	if(!at) {
		at = 'defaultTemplate';
	}
	
	var self = this
	
	
	if(rt) {
		this.tripartite.loadTemplate(at, function(template) {
			var consumed
			if(self.ed instanceof Array) {
				consumed = cloneArray(self.ed)
			}
			else {
				consumed = [self.ed]
			}
			
			var procConsumed = function() {
				template.write(consumed.shift(), stream, function() {
					if(consumed.length > 0) {
						procConsumed()
					}
					else if(callback) {
						callback()
					}
				})
			}
			
			if(consumed.length > 0) {
				procConsumed()
			}
			else {
				callback()
			}
		})
	}
};

ae.prototype.getTemplate = function(name) {
	return this.tripartite.getTemplate(name)
}

/* evaluate data selector expression */
ae.prototype.edse = function(cc) {
	if(!this.dse) {
		return null;
	}
	if(this.dse === '$this') {
		return cc;
	}
	return this.eic(cc, this.dse);
};

/* evaluate in context */
ae.prototype.eic = function(cc, ex) {
	cc = cc || {};
	return this.eicwt.call(cc, cc, ex);
};

/* Evaluate in context having been called so that this === cc (current context */
ae.prototype.eicwt = function(cc, ex) {
	with (cc) {
		try {
			return eval(ex);
		} catch(e) {
			return null;
		}
	}
};

/* parse template */
t.prototype.pt = function(tx) {
	var tks = this.tt(tx);
	var pt = [];
	for(var i = 0; i < tks.length; i++) {
		var tk = tks[i];
		if(tk.active) {
			pt.push(this.tap(tk.content));
		}
		else {
			if(tk.content) {
				pt.push(tk.content);
			}
		}
	}
	
	var t = function(cc) {
		if(arguments.length > 1) {
			t.write.apply(t, arguments)
		}
		else {
			var r = '';
			for(var i = 0; i < pt.length; i++) {
				if(typeof pt[i] === 'string') {
					r += pt[i];
				}
				else {
					r += pt[i](cc);
				}
			}
			return r;
		}
	}
	
	t.write = function(cc, stream, callback) {
		var consumed = cloneArray(pt)
		
		var procConsumed = function() {
			var unit = consumed.shift()
			if(typeof unit === 'string') {
				stream.write(unit)
				if(consumed.length > 0) {
					procConsumed()
				}
				else if(callback) {
					callback()
				}
			}
			else {
				unit.write(cc, stream, function() {
					if(consumed.length > 0) {
						procConsumed()
					}
					else if(callback) {
						callback()
					}
				})
			}
		}
		
		if(consumed.length > 0) {
			procConsumed()
		}
	}
	
	return t
};

/* tokenize active part */
t.prototype.tokenizeActivePart = function(tx) {
	var con = null;
	var dat = null;
	var han = null;
	
	/* condition index */
	var ci = tx.indexOf('??');
	if(ci > -1) {
		con = tx.substring(0, ci);
		ci += 2;
	}
	else {
		ci = 0;
	}
	
	/* handler index */
	var hi = tx.indexOf('::');
	if(hi > -1) {
		dat = tx.substring(ci, hi);
		han = tx.substring(hi + 2);
	}
	else {
		dat = tx.substring(ci);
	}
	return new this.st(con, dat, han, this);
}

t.prototype.tap = t.prototype.tokenizeActivePart

/* tokenize template */
t.prototype.tokenizeTemplate = function(tx) {
	return this.taib(tx, this.constants.templateBoundary);
}

t.prototype.tt = t.prototype.tokenizeTemplate

/** tokenize template script */
t.prototype.tts = function(tx) {
	return this.taib(tx, this.constants.templateNameBoundary);
}

/* tokenize active and inactive blocks */
t.prototype.taib = function(tx, /*Active Region Boundary */ bnd) {
	/* whole length */
	var l = tx.length;
	
	/* current position */
	var p = 0;
	
	/* are we in an active region */
	var act = false;
	
	var tks = [];
	
	while(p < l) {
		var i = tx.indexOf(bnd, p);
		if(i == -1) {
			i = l;
		}
		var tk = { active: act, content: tx.substring(p, i)};
		tks.push(tk);
		p = i + 2;
		act = !act;
	}
	
	return tks;
}

var tripartiteInstance = new Tripartite()

if(typeof window != 'undefined') {
	tripartiteInstance.secondaryTemplateFunctionObject = window
}



if(module) {
	module.exports = tripartiteInstance
}
else {
	window.Tripartite = tripartiteInstance
}

 at SyntaxError: 'with' in strict mode (317:1)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$1.parseWithStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:932:27)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:708:32)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
    at Parser.pp$3.parseFunctionBody (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2105:24)
    at Parser.parseFunctionBody (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:14:32)
    at Parser.pp$1.parseFunction (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1065:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1810:19)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/ei-pic-browser/node_modules/ei-pic-browser/pic-browser.js. Coverage (Term): 13% Coverage (LOC): 14%
*- File /root/Targets/ei-pic-browser/node_modules/jquery/dist/jquery.js. Coverage (Term): 0% Coverage (LOC): 0%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
