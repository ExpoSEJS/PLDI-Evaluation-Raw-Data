
> pty.js@0.3.1 install /root/Targets/stdind/node_modules/pty.js
> node-gyp rebuild

make: Entering directory '/root/Targets/stdind/node_modules/pty.js/build'
  CXX(target) Release/obj.target/pty/src/unix/pty.o
  SOLINK_MODULE(target) Release/obj.target/pty.node
  COPY Release/pty.node
make: Leaving directory '/root/Targets/stdind/node_modules/pty.js/build'
/root/Targets/stdind
└─┬ stdind@0.1.16 
  ├─┬ chalk@1.1.3 
  │ ├── ansi-styles@2.2.1 
  │ ├── escape-string-regexp@1.0.5 
  │ ├─┬ has-ansi@2.0.0 
  │ │ └── ansi-regex@2.1.1 
  │ ├── strip-ansi@3.0.1 
  │ └── supports-color@2.0.0 
  ├── cli-spinners@1.0.1 
  ├─┬ compression@1.7.1 
  │ ├─┬ accepts@1.3.4 
  │ │ ├── mime-types@2.1.17 
  │ │ └── negotiator@0.6.1 
  │ ├── bytes@3.0.0 
  │ ├─┬ compressible@2.0.11 
  │ │ └── mime-db@1.30.0 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├── on-headers@1.0.1 
  │ ├── safe-buffer@5.1.1 
  │ └── vary@1.1.2 
  ├─┬ express@4.15.5 
  │ ├── array-flatten@1.1.1 
  │ ├── content-disposition@0.5.2 
  │ ├── content-type@1.0.4 
  │ ├── cookie@0.3.1 
  │ ├── cookie-signature@1.0.6 
  │ ├── depd@1.1.1 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├─┬ finalhandler@1.0.6 
  │ │ └── unpipe@1.0.0 
  │ ├── fresh@0.5.2 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@1.1.5 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.4.0 
  │ ├── qs@6.5.0 
  │ ├── range-parser@1.2.0 
  │ ├─┬ send@0.15.6 
  │ │ ├── destroy@1.0.4 
  │ │ ├─┬ http-errors@1.6.2 
  │ │ │ └── inherits@2.0.3 
  │ │ └── mime@1.3.4 
  │ ├── serve-static@1.12.6 
  │ ├── setprototypeof@1.0.3 
  │ ├── statuses@1.3.1 
  │ ├─┬ type-is@1.6.15 
  │ │ └── media-typer@0.3.0 
  │ └── utils-merge@1.0.0 
  ├─┬ fbjs@0.8.16 
  │ ├── core-js@1.2.7 
  │ ├─┬ isomorphic-fetch@2.2.1 
  │ │ ├─┬ node-fetch@1.7.3 
  │ │ │ ├─┬ encoding@0.1.12 
  │ │ │ │ └── iconv-lite@0.4.19 
  │ │ │ └── is-stream@1.1.0 
  │ │ └── whatwg-fetch@2.0.3 
  │ ├─┬ loose-envify@1.3.1 
  │ │ └── js-tokens@3.0.2 
  │ ├── object-assign@4.1.1 
  │ ├─┬ promise@7.3.1 
  │ │ └── asap@2.0.6 
  │ ├── setimmediate@1.0.5 
  │ └── ua-parser-js@0.7.14 
  ├─┬ history@4.7.2 
  │ ├── invariant@2.2.2 
  │ ├── resolve-pathname@2.2.0 
  │ ├── value-equal@0.4.0 
  │ └── warning@3.0.0 
  ├── hterm-umdjs@1.2.0 
  ├── js-base64@2.3.2 
  ├── lodash@4.17.4 
  ├── node-uuid@1.4.8 
  ├── normalize.css@5.0.0 
  ├─┬ ora@0.3.0 
  │ ├─┬ cli-cursor@1.0.2 
  │ │ └─┬ restore-cursor@1.0.1 
  │ │   ├── exit-hook@1.1.1 
  │ │   └── onetime@1.1.0 
  │ ├── cli-spinners@0.2.0 
  │ └── log-symbols@1.0.2 
  ├─┬ pty.js@0.3.1 
  │ ├── extend@1.2.1 
  │ └── nan@2.3.5 
  ├─┬ raf@3.3.2 
  │ └── performance-now@2.1.0 
  ├─┬ react@15.6.2 
  │ ├── create-react-class@15.6.2 
  │ └── prop-types@15.6.0 
  ├── react-addons-shallow-compare@15.6.2 
  ├── react-css-themr@1.7.2 
  ├── react-dom@15.6.2 
  ├─┬ react-hot-loader@3.0.0-beta.6 
  │ ├─┬ babel-template@6.26.0 
  │ │ ├─┬ babel-runtime@6.26.0 
  │ │ │ ├── core-js@2.5.1 
  │ │ │ └── regenerator-runtime@0.11.0 
  │ │ ├─┬ babel-traverse@6.26.0 
  │ │ │ ├── babel-code-frame@6.26.0 
  │ │ │ ├── babel-messages@6.23.0 
  │ │ │ └── globals@9.18.0 
  │ │ ├─┬ babel-types@6.26.0 
  │ │ │ ├── esutils@2.0.2 
  │ │ │ └── to-fast-properties@1.0.3 
  │ │ └── babylon@6.18.0 
  │ ├─┬ global@4.3.2 
  │ │ ├─┬ min-document@2.19.0 
  │ │ │ └── dom-walk@0.1.1 
  │ │ └── process@0.5.2 
  │ ├── react-deep-force-update@2.1.1 
  │ ├── react-proxy@3.0.0-alpha.1 
  │ ├─┬ redbox-react@1.5.0 
  │ │ ├─┬ error-stack-parser@1.3.6 
  │ │ │ └── stackframe@0.3.1 
  │ │ └─┬ sourcemapped-stacktrace@1.1.7 
  │ │   └── source-map@0.5.6 
  │ └─┬ source-map@0.4.4 
  │   └── amdefine@1.0.1 
  ├─┬ react-router@4.0.0-alpha.6 
  │ ├─┬ path-to-regexp@1.7.0 
  │ │ └── isarray@0.0.1 
  │ ├─┬ query-string@4.2.3 
  │ │ └── strict-uri-encode@1.1.0 
  │ └── react-broadcast@0.1.2 
  ├─┬ recompose@0.20.2 
  │ ├── change-emitter@0.1.6 
  │ ├── hoist-non-react-statics@1.2.0 
  │ └── symbol-observable@0.2.4 
  ├─┬ rxjs@5.4.3 
  │ └── symbol-observable@1.0.4 
  ├── webfontloader@1.6.28 
  └─┬ ws@1.1.4 
    ├── options@0.0.6 
    └── ultron@1.0.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/stdind/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0493 took 3.6778s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

/* eslint-disable comma-dangle, no-console */

/**
Build Dockerfile
node ./index.js --build

`npm bin`/pty64 --base64 -- echo hello | node ./index.js

Run server reading stdin or file content in base 64 format
providing websocket access on a WS_PORT at WS_PATH path

```
`npm bin`/pty64 --base64 -- echo hello | tee ./build/out.txt | node ./index.js
```

or with docker

 ```
 `npm bin`/pty64 --base64 -- echo hello | tee out.txt \
 | docker run -a STDIN -a STDOUT -i --rm -p 4000:4000 --name stdind 'stdind'
 ```

or with file

```
node ./index.js --file out.txt
```

or with stdin preventing close

```
cat out.txt | node ./index.js --always
```
**/
const readline = require('readline');
const express = require('express');
const compression = require('compression');
const path = require('path');
const { Server } = require('http');
const { Base64 } = require('js-base64');
const WebSocketServer = require('ws').Server;
const { Observable } = require('rxjs');
const fs = require('fs');
const execSync = require('child_process').execSync;

const WS_PORT = 4000;
const WS_PATH = '/ws';
const IMAGE_NAME = 'stdind';

const buildIndex = process.argv.indexOf('--build');

if (buildIndex > -1) {
  const execOptions = {
    encoding: 'utf8',
    cwd: `${__dirname}/..`,
    stdio: [
      'inherit', // stdin (default)
      'inherit', // stdout (default)
      'inherit'  // stderr
    ]
  };

  const code = execSync(`docker build -t ${IMAGE_NAME} .`, execOptions);
  process.exit(code);
}

const app = express();
const server = Server(app);
const wss = new WebSocketServer({ server, path: process.env.WS_PATH || WS_PATH });
app.use(compression());

const dataFileIndex = process.argv.indexOf('--file') + 1;
const preventExit = process.argv.indexOf('--always') > -1;
const isRealtime = process.argv.indexOf('--realtime') > -1;

const rl = readline.createInterface({
  input: dataFileIndex > 0
    ? fs.createReadStream(process.argv[dataFileIndex])
    : process.stdin,
});

const stdin$ = Observable.create((o) => {
  let index = 0;

  rl.on('line', (chunk) => {
    index += 1;
    o.next({ index, chunk });
  });

  rl.on('close', () => {
    if (dataFileIndex === 0 && !preventExit) {
      process.exit(0);
    }
    o.complete();
  });
})
.share();

const sockets$ = Observable.create((o) => {
  wss.on('connection', (socket) => {
    socket.on('close', () => {
      o.next({ socket, type: 'REMOVE_SOCKET' });
    });

    // to avoid gateway timeout
    socket.on('message', () => {
      socket.send(
        JSON.stringify({ index: -2, chunk: 'pong' }),
        { fin: false },
        () => {}
      );
    });

    o.next({ socket, type: 'ADD_SOCKET' });
  });
})
.share();

// combine all stdion input
const chunks$ = stdin$
  .scan(
    (r, v) => [...r, v],
    []
  );

// Combine new socket with all previous chunks
const $initialResponse = sockets$
  .filter(({ type }) => type === 'ADD_SOCKET')
  .withLatestFrom(
    chunks$,
    ({ socket }, chunks) => ({
      sockets: [socket],
      chunks,
    })
  );

// Combine all sockets
const combinedSockets$ = sockets$
  .scan(
    (r, { type, socket }) => (
      type === 'ADD_SOCKET'
        ? [...r, socket]
        : r.filter(s => s !== socket)
    ),
    []
  );

// combine last chunk with all sockets
const $realtimeResponses = stdin$
  .do((data) => {
    if (data !== null) {
      process.stdout.write(`${Base64.decode(data.chunk)}`);
    }
  })
  .withLatestFrom(
    combinedSockets$,
    (chunk, sockets) => ({
      sockets,
      chunks: [chunk],
    })
  );

// combine all streams and send results
const sendStream$ = isRealtime
  ? $realtimeResponses
  : Observable.merge($initialResponse, $realtimeResponses);

sendStream$
  .subscribe(
    ({ sockets, chunks }) => {
      sockets.forEach((socket) => {
        chunks.forEach((chunk) => {
          if (chunk === null) {
            socket.send(chunk, { fin: true });
          } else {
            socket.send(
              JSON.stringify(chunk),
              { fin: false },
              (err) => {
                if (err) {
                  console.error('---error---');
                  console.error(err);
                  console.error('-----------');
                }
              }
            );
          }
        });
      });
    }
  );

app.use(express.static(path.join(__dirname, '../build')));

app.get('/*', (req, res) => {
  res.sendFile(path.join(__dirname, '../build', 'index.html'));
});

server.listen(process.env.WS_PORT || WS_PORT);
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
