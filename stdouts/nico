/root/Targets/nico
└─┬ nico@0.5.2 
  ├── colorful@2.1.0 
  ├── commander@2.1.0 
  ├─┬ glob@3.2.11 
  │ ├── inherits@2.0.3 
  │ └─┬ minimatch@0.3.0 
  │   ├── lru-cache@2.7.3 
  │   └── sigmund@1.0.1 
  ├── highlight.js@7.5.0 
  ├── markit@0.1.0 
  ├── rimraf@2.2.8 
  ├── swig@0.14.0 
  ├── underscore@1.5.2 
  └── win-spawn@2.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/nico/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 66% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","join","RegExp","sort","splice","apply","max","Array","cwd"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0219 took 13.803s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")

// for EMFILE handling
var timeout = 0
exports.EMFILE_MAX = 1000
exports.BUSYTRIES_MAX = 3

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  defaults(options)

  if (!cb) throw new Error("No callback passed to rimraf()")

  var busyTries = 0
  rimraf_(p, options, function CB (er) {
    if (er) {
      if (isWindows && (er.code === "EBUSY" || er.code === "ENOTEMPTY") &&
          busyTries < exports.BUSYTRIES_MAX) {
        busyTries ++
        var time = busyTries * 100
        // try again, with the same exact callback as this one.
        return setTimeout(function () {
          rimraf_(p, options, CB)
        }, time)
      }

      // this one won't happen if graceful-fs is used.
      if (er.code === "EMFILE" && timeout < exports.EMFILE_MAX) {
        return setTimeout(function () {
          rimraf_(p, options, CB)
        }, timeout ++)
      }

      // already gone
      if (er.code === "ENOENT") er = null
    }

    timeout = 0
    cb(er)
  })
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.unlink(p, function (er) {
    if (er) {
      if (er.code === "ENOENT")
        return cb(null)
      if (er.code === "EPERM")
        return (isWindows)
          ? fixWinEPERM(p, options, er, cb)
          : rmdir(p, options, er, cb)
      if (er.code === "EISDIR")
        return rmdir(p, options, er, cb)
    }
    return cb(er)
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, 666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, 666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p)
  assert(options)

  try {
    options.unlinkSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "EPERM")
      return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
    if (er.code !== "EISDIR")
      throw er
    rmdirSync(p, options, er)
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })
  options.rmdirSync(p, options)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/nico/node_modules/nico/index.js. Coverage (Term): 68% Coverage (LOC): 83%
*- File /root/Targets/nico/node_modules/nico/lib/index.js. Coverage (Term): 20% Coverage (LOC): 25%
*- File /root/Targets/nico/node_modules/nico/lib/sdk/events.js. Coverage (Term): 96% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/nico/lib/build.js. Coverage (Term): 7% Coverage (LOC): 8%
*- File /root/Targets/nico/node_modules/underscore/underscore.js. Coverage (Term): 18% Coverage (LOC): 32%
*- File /root/Targets/nico/node_modules/nico/lib/sdk/post.js. Coverage (Term): 3% Coverage (LOC): 4%
*- File /root/Targets/nico/node_modules/nico/lib/sdk/encode.js. Coverage (Term): 21% Coverage (LOC): 32%
*- File /root/Targets/nico/node_modules/nico/lib/sdk/markdown/index.js. Coverage (Term): 78% Coverage (LOC): 88%
*- File /root/Targets/nico/node_modules/nico/lib/sdk/log.js. Coverage (Term): 51% Coverage (LOC): 59%
*- File /root/Targets/nico/node_modules/colorful/index.js. Coverage (Term): 31% Coverage (LOC): 40%
*- File /root/Targets/nico/node_modules/colorful/lib/ansi.js. Coverage (Term): 38% Coverage (LOC): 50%
*- File /root/Targets/nico/node_modules/nico/lib/sdk/markdown/robotskirt.js. Coverage (Term): 16% Coverage (LOC): 14%
*- File /root/Targets/nico/node_modules/nico/lib/sdk/markdown/_share.js. Coverage (Term): 17% Coverage (LOC): 23%
*- File /root/Targets/nico/node_modules/nico/lib/sdk/option.js. Coverage (Term): 44% Coverage (LOC): 60%
*- File /root/Targets/nico/node_modules/nico/lib/sdk/highlight.js. Coverage (Term): 23% Coverage (LOC): 26%
*- File /root/Targets/nico/node_modules/highlight.js/highlight.js. Coverage (Term): 30% Coverage (LOC): 31%
*- File /root/Targets/nico/node_modules/highlight.js/bash.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/erlang.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/cs.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/brainfuck.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/ruby.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/rust.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/ruleslanguage.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/rib.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/diff.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/haml.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/javascript.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/glsl.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/rsl.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/lua.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/xml.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/markdown.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/css.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/lisp.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/profile.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/http.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/java.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/fsharp.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/php.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/haskell.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/1c.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/python.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/smalltalk.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/tex.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/actionscript.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/sql.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/handlebars.js. Coverage (Term): 96% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/vala.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/ini.js. Coverage (Term): 96% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/livecodeserver.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/d.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/vbnet.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/axapta.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/perl.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/scala.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/cmake.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/ocaml.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/objectivec.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/avrasm.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/vhdl.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/coffeescript.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/mizar.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/nginx.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/erlang-repl.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/r.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/json.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/django.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/delphi.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/vbscript.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/mel.js. Coverage (Term): 100% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/dos.js. Coverage (Term): 96% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/apache.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/scss.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/applescript.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/lasso.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/cpp.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/matlab.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/scilab.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/makefile.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/asciidoc.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/parser3.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/clojure.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/highlight.js/go.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/nico/node_modules/nico/lib/sdk/markdown/marked.js. Coverage (Term): 47% Coverage (LOC): 41%
*- File /root/Targets/nico/node_modules/markit/index.js. Coverage (Term): 18% Coverage (LOC): 29%
*- File /root/Targets/nico/node_modules/nico/lib/sdk/file.js. Coverage (Term): 4% Coverage (LOC): 4%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
