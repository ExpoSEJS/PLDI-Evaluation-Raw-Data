
> apache-crypt@1.0.6 install /root/Targets/shoal/node_modules/apache-crypt
> node-gyp rebuild

make: Entering directory '/root/Targets/shoal/node_modules/apache-crypt/build'
  CXX(target) Release/obj.target/crypt3/deps/crypt3.o
crypt3.target.mk:94: recipe for target 'Release/obj.target/crypt3/deps/crypt3.o' failed
make: Leaving directory '/root/Targets/shoal/node_modules/apache-crypt/build'
/root/Targets/shoal
└─┬ shoal@0.2.3 
  ├── async@0.9.0 
  ├─┬ body-parser@1.5.2 
  │ ├── bytes@1.0.0 
  │ ├── depd@0.4.4 
  │ ├── iconv-lite@0.4.4 
  │ ├── media-typer@0.2.0 
  │ ├── qs@0.6.6 
  │ ├── raw-body@1.3.0 
  │ └── type-is@1.3.2 
  ├── colors@1.1.2 
  ├── commander@2.3.0 
  ├─┬ connect@3.1.0 
  │ ├─┬ debug@1.0.4 
  │ │ └── ms@0.6.2 
  │ ├── finalhandler@0.1.0 
  │ ├── parseurl@1.2.0 
  │ └── utils-merge@1.0.0 
  ├── ejs@1.0.0 
  ├─┬ express@4.7.2 
  │ ├─┬ accepts@1.0.7 
  │ │ └── negotiator@0.4.7 
  │ ├── buffer-crc32@0.2.3 
  │ ├── cookie@0.1.2 
  │ ├── cookie-signature@1.0.4 
  │ ├── escape-html@1.0.1 
  │ ├── fresh@0.2.2 
  │ ├── merge-descriptors@0.0.2 
  │ ├── methods@1.1.0 
  │ ├── path-to-regexp@0.1.3 
  │ ├─┬ proxy-addr@1.0.1 
  │ │ └── ipaddr.js@0.1.2 
  │ ├── range-parser@1.0.0 
  │ ├─┬ send@0.7.2 
  │ │ ├─┬ finished@1.2.2 
  │ │ │ └── ee-first@1.0.3 
  │ │ └── mime@1.2.11 
  │ ├─┬ serve-static@1.4.4 
  │ │ └── send@0.7.4 
  │ └── vary@0.1.0 
  ├─┬ http-auth@2.1.9 
  │ ├── coffee-script@1.6.3 
  │ ├─┬ htpasswd@2.1.2 
  │ │ ├── apache-md5@1.0.0 
  │ │ ├── commander@2.0.0 
  │ │ └─┬ prompt@0.2.11 
  │ │   ├── pkginfo@0.4.1 
  │ │   ├─┬ read@1.0.7 
  │ │   │ └── mute-stream@0.0.7 
  │ │   ├── revalidator@0.1.8 
  │ │   ├─┬ utile@0.2.1 
  │ │   │ ├── async@0.2.10 
  │ │   │ ├── deep-equal@1.0.1 
  │ │   │ ├── i@0.3.5 
  │ │   │ ├─┬ mkdirp@0.5.1 
  │ │   │ │ └── minimist@0.0.8 
  │ │   │ ├── ncp@0.4.2 
  │ │   │ └─┬ rimraf@2.6.2 
  │ │   │   └─┬ glob@7.1.2 
  │ │   │     ├── fs.realpath@1.0.0 
  │ │   │     ├─┬ inflight@1.0.6 
  │ │   │     │ └── wrappy@1.0.2 
  │ │   │     ├── inherits@2.0.3 
  │ │   │     ├─┬ minimatch@3.0.4 
  │ │   │     │ └─┬ brace-expansion@1.1.8 
  │ │   │     │   ├── balanced-match@1.0.0 
  │ │   │     │   └── concat-map@0.0.1 
  │ │   │     ├── once@1.4.0 
  │ │   │     └── path-is-absolute@1.0.1 
  │ │   └─┬ winston@0.6.2 
  │ │     ├── async@0.1.22 
  │ │     ├── colors@0.6.2 
  │ │     ├── cycle@1.0.3 
  │ │     ├── eyes@0.1.8 
  │ │     ├── pkginfo@0.2.3 
  │ │     ├── request@2.9.203 
  │ │     └── stack-trace@0.0.10 
  │ └── node-uuid@1.4.1 
  └─┬ request@2.39.0 
    ├── aws-sign2@0.5.0 
    ├── forever-agent@0.5.2 
    ├─┬ form-data@0.1.4 
    │ └─┬ combined-stream@0.0.7 
    │   └── delayed-stream@0.0.5 
    ├─┬ hawk@1.1.1 
    │ ├── boom@0.4.2 
    │ ├── cryptiles@0.2.2 
    │ ├── hoek@0.9.1 
    │ └── sntp@0.2.4 
    ├─┬ http-signature@0.10.1 
    │ ├── asn1@0.1.11 
    │ ├── assert-plus@0.1.5 
    │ └── ctype@0.5.3 
    ├── json-stringify-safe@5.0.1 
    ├── mime-types@1.0.2 
    ├── oauth-sign@0.3.0 
    ├── stringstream@0.0.5 
    ├─┬ tough-cookie@2.3.3 
    │ └── punycode@1.4.1 
    └── tunnel-agent@0.4.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/shoal/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 25% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","parse"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0767 took 3.5358s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Binding arguments in strict mode (41:6) on program 
var fs = require('fs');
var path = require('path');
var express = require('express');
var connect = require('connect');
var bodyParser = require('body-parser');
var http = require('http');
var https = require('https');
var defaults = require('./defaults');
var auth = require('./auth');
var extend = require('util')._extend;
var version = JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version;

var Server = function(manager, options) {
  options = options || {};
  this._manager = manager;
  this._httpsOptions = null;
  this._app = express();
  this._app.use(bodyParser.json());
  this._authType = (options.auth && options.auth.type) || 'none';
  auth.init(this, auth.server, 'auth', options);
  this.options = extend(defaults, options);
  this._routes();
};

Server.prototype.start = function(options) {
  options = options || {};
  options.port = options.port || this.options.port;
  options.host = options.host || this.options.host;
  this._server = this._httpsOptions ? https.createServer(this._httpsOptions, this._app) : http.createServer(this._app);
  this._server.listen(options.port, options.host);
  !options.quiet && console.log('Shoal Manager running on http://' + options.host + ':' + options.port + " (Authentication="+this._authType+")")
};

Server.prototype.stop = function() {
  this._server && this._server.close();
};

Server.prototype._execute = function(req, res, next) {
  var command = req.param('command');
  var arguments = req.param('arguments');

  if (!command) return this._error(res, 400, 'Need :command parameter');
  if (defaults.commands.indexOf(command) == -1) return this._error(res, 400, 'Invalid command: ' + command);

  try {
    var result = this._manager[command].apply(this._manager, arguments || []);
    if (result && typeof result == 'object')
      result = JSON.parse(JSON.stringify(result, safeCycles()));
    res.send({result: result || 'ok'});
  } catch(err) {
    this._error(res, 500, err.message);
  }
};

Server.prototype._info = function(req, res, next) {
  return res.send({shoal: {version: version}})
}

Server.prototype._routes = function() {
  this._app.post('/execute', this._execute.bind(this));
  this._app.get('/', this._info.bind(this));
};

Server.prototype._error = function(res, statusCode, message) {
  res.status(statusCode).send({error: {message: message}});
};

// A JSON stringifier that handles cycles safely.
// Usage: JSON.stringify(obj, safeCycles())
function safeCycles() {
  var seen = [];
  return function (key, val) {
    if (!val || typeof (val) !== 'object') {
      return val;
    }
    if (seen.indexOf(val) !== -1) {
      return '[Circular]';
    }
    seen.push(val);
    return val;
    };
}

module.exports = Server;
 at SyntaxError: Binding arguments in strict mode (41:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$2.checkLVal (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1472:14)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1050:10)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
    at Parser.pp$3.parseFunctionBody (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2105:24)
    at Parser.parseFunctionBody (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:14:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/shoal/node_modules/shoal/index.js. Coverage (Term): 58% Coverage (LOC): 67%
*- File /root/Targets/shoal/node_modules/shoal/lib/manager.js. Coverage (Term): 10% Coverage (LOC): 16%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
