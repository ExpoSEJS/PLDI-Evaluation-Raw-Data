/root/Targets/feebs
└─┬ feebs@0.5.3 
  ├── colors@0.6.2 
  ├── crypto@0.0.3 
  ├─┬ express@3.3.8 
  │ ├── buffer-crc32@0.2.1 
  │ ├─┬ commander@1.2.0 
  │ │ └── keypress@0.1.0 
  │ ├─┬ connect@2.8.8 
  │ │ ├── bytes@0.2.0 
  │ │ ├── formidable@1.0.14 
  │ │ ├── pause@0.0.1 
  │ │ ├── qs@0.6.5 
  │ │ └── uid2@0.0.2 
  │ ├── cookie@0.1.0 
  │ ├── cookie-signature@1.0.1 
  │ ├─┬ debug@3.1.0 
  │ │ └── ms@2.0.0 
  │ ├── fresh@0.2.0 
  │ ├── methods@0.0.1 
  │ ├── mkdirp@0.3.5 
  │ ├── range-parser@0.0.4 
  │ └── send@0.1.4 
  ├─┬ jade@0.28.2 
  │ └── commander@0.6.1 
  ├─┬ JSONPath@0.9.1 
  │ └── underscore@1.3.3 
  ├─┬ jugglingdb@0.2.14 
  │ └── inflection@1.2.7 
  ├─┬ localtunnel@0.0.4 
  │ ├── book@1.2.0 
  │ ├── http-raw@1.1.0 
  │ ├─┬ optimist@0.3.4 
  │ │ └── wordwrap@0.0.3 
  │ └─┬ request@2.11.4 
  │   ├─┬ form-data@0.0.3 
  │   │ ├── async@0.1.9 
  │   │ └─┬ combined-stream@0.0.3 
  │   │   └── delayed-stream@0.0.5 
  │   └── mime@1.2.7 
  ├── q@0.9.7 
  ├─┬ request@2.16.6 
  │ ├── aws-sign@0.2.0 
  │ ├── cookie-jar@0.2.0 
  │ ├── forever-agent@0.2.0 
  │ ├─┬ form-data@0.0.10 
  │ │ ├── async@0.2.10 
  │ │ └─┬ combined-stream@0.0.7 
  │ │   └── delayed-stream@0.0.5 
  │ ├─┬ hawk@0.10.2 
  │ │ ├── boom@0.3.8 
  │ │ ├── cryptiles@0.1.3 
  │ │ ├── hoek@0.7.6 
  │ │ └── sntp@0.1.4 
  │ ├── json-stringify-safe@3.0.0 
  │ ├── mime@1.2.11 
  │ ├── node-uuid@1.4.8 
  │ ├── oauth-sign@0.2.0 
  │ ├── qs@0.5.6 
  │ └── tunnel-agent@0.2.0 
  ├── rsvp@1.2.0 
  ├─┬ uglify-js@2.2.5 
  │ ├── optimist@0.3.7 
  │ └─┬ source-map@0.1.43 
  │   └── amdefine@1.0.1 
  ├── underscore@1.4.4 
  └─┬ xml2js@0.2.8 
    └── sax@0.5.8 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/feebs/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 21% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","join","RegExp","sort","isArray","apply"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0469 took 25.2944s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict';

var net = require('net');
var tls = require('tls');
var http = require('http');
var https = require('https');
var events = require('events');
var assert = require('assert');
var util = require('util');


exports.httpOverHttp = httpOverHttp;
exports.httpsOverHttp = httpsOverHttp;
exports.httpOverHttps = httpOverHttps;
exports.httpsOverHttps = httpsOverHttps;


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  return agent;
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  agent.createSocket = createSecureSocket;
  return agent;
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  return agent;
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  agent.createSocket = createSecureSocket;
  return agent;
}


function TunnelingAgent(options) {
  var self = this;
  self.options = options || {};
  self.proxyOptions = self.options.proxy || {};
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
  self.requests = [];
  self.sockets = [];

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i];
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1);
        pending.request.onSocket(socket);
        return;
      }
    }
    socket.destroy();
    self.removeSocket(socket);
  });
}
util.inherits(TunnelingAgent, events.EventEmitter);

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this;

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req});
    return;
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree);
    socket.on('close', onCloseOrRemove);
    socket.on('agentRemove', onCloseOrRemove);
    req.onSocket(socket);

    function onFree() {
      self.emit('free', socket, host, port);
    }

    function onCloseOrRemove(err) {
      self.removeSocket();
      socket.removeListener('free', onFree);
      socket.removeListener('close', onCloseOrRemove);
      socket.removeListener('agentRemove', onCloseOrRemove);
    }
  });
};

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this;
  var placeholder = {};
  self.sockets.push(placeholder);

  var connectOptions = mergeOptions({}, self.proxyOptions, {
    method: 'CONNECT',
    path: options.host + ':' + options.port,
    agent: false
  });
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {};
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64');
  }

  debug('making CONNECT request');
  var connectReq = self.request(connectOptions);
  connectReq.useChunkedEncodingByDefault = false; // for v0.6
  connectReq.once('response', onResponse); // for v0.6
  connectReq.once('upgrade', onUpgrade);   // for v0.6
  connectReq.once('connect', onConnect);   // for v0.7 or later
  connectReq.once('error', onError);
  connectReq.end();

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true;
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head);
    });
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners();
    socket.removeAllListeners();

    if (res.statusCode === 200) {
      assert.equal(head.length, 0);
      debug('tunneling connection has established');
      self.sockets[self.sockets.indexOf(placeholder)] = socket;
      cb(socket);
    } else {
      debug('tunneling socket could not be established, statusCode=%d',
            res.statusCode);
      var error = new Error('tunneling socket could not be established, ' +
                            'sutatusCode=' + res.statusCode);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners();

    debug('tunneling socket could not be established, cause=%s\n',
          cause.message, cause.stack);
    var error = new Error('tunneling socket could not be established, ' +
                          'cause=' + cause.message);
    error.code = 'ECONNRESET';
    options.request.emit('error', error);
    self.removeSocket(placeholder);
  }
};

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) {
    return;
  }
  this.sockets.splice(pos, 1);

  var pending = this.requests.shift();
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket);
    });
  }
};

function createSecureSocket(options, cb) {
  var self = this;
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, {
      servername: options.host,
      socket: socket
    }));
    cb(secureSocket);
  });
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i];
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides);
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j];
        if (overrides[k] !== undefined) {
          target[k] = overrides[k];
        }
      }
    }
  }
  return target;
}


var debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0];
    } else {
      args.unshift('TUNNEL:');
    }
    console.error.apply(console, args);
  }
} else {
  debug = function() {};
}
exports.debug = debug; // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/feebs/node_modules/feebs/index.js. Coverage (Term): 80% Coverage (LOC): 100%
*- File /root/Targets/feebs/node_modules/feebs/lib/index.js. Coverage (Term): 9% Coverage (LOC): 10%
*- File /root/Targets/feebs/node_modules/underscore/underscore.js. Coverage (Term): 18% Coverage (LOC): 32%
*- File /root/Targets/feebs/node_modules/feebs/lib/internal/config.js. Coverage (Term): 12% Coverage (LOC): 15%
*- File /root/Targets/feebs/node_modules/uglify-js/tools/node.js. Coverage (Term): 27% Coverage (LOC): 30%
*- File /root/Targets/feebs/node_modules/source-map/lib/source-map.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/feebs/node_modules/source-map/lib/source-map/source-map-generator.js. Coverage (Term): 10% Coverage (LOC): 13%
*- File /root/Targets/feebs/node_modules/amdefine/amdefine.js. Coverage (Term): 49% Coverage (LOC): 54%
*- File /root/Targets/feebs/node_modules/source-map/lib/source-map/base64-vlq.js. Coverage (Term): 28% Coverage (LOC): 38%
*- File /root/Targets/feebs/node_modules/source-map/lib/source-map/base64.js. Coverage (Term): 61% Coverage (LOC): 68%
*- File /root/Targets/feebs/node_modules/source-map/lib/source-map/util.js. Coverage (Term): 13% Coverage (LOC): 16%
*- File /root/Targets/feebs/node_modules/source-map/lib/source-map/array-set.js. Coverage (Term): 29% Coverage (LOC): 47%
*- File /root/Targets/feebs/node_modules/source-map/lib/source-map/mapping-list.js. Coverage (Term): 32% Coverage (LOC): 43%
*- File /root/Targets/feebs/node_modules/source-map/lib/source-map/source-map-consumer.js. Coverage (Term): 12% Coverage (LOC): 17%
*- File /root/Targets/feebs/node_modules/source-map/lib/source-map/binary-search.js. Coverage (Term): 27% Coverage (LOC): 36%
*- File /root/Targets/feebs/node_modules/source-map/lib/source-map/source-node.js. Coverage (Term): 10% Coverage (LOC): 14%
*- File /root/Targets/feebs/node_modules/localtunnel/index.js. Coverage (Term): 61% Coverage (LOC): 100%
*- File /root/Targets/feebs/node_modules/localtunnel/client.js. Coverage (Term): 7% Coverage (LOC): 7%
*- File /root/Targets/feebs/node_modules/localtunnel/node_modules/request/main.js. Coverage (Term): 2% Coverage (LOC): 1%
*- File /root/Targets/feebs/node_modules/localtunnel/node_modules/request/oauth.js. Coverage (Term): 23% Coverage (LOC): 47%
*- File /root/Targets/feebs/node_modules/localtunnel/node_modules/request/uuid.js. Coverage (Term): 15% Coverage (LOC): 31%
*- File /root/Targets/feebs/node_modules/localtunnel/node_modules/request/forever.js. Coverage (Term): 23% Coverage (LOC): 25%
*- File /root/Targets/feebs/node_modules/localtunnel/node_modules/request/vendor/cookie/index.js. Coverage (Term): 18% Coverage (LOC): 28%
*- File /root/Targets/feebs/node_modules/localtunnel/node_modules/request/vendor/cookie/jar.js. Coverage (Term): 25% Coverage (LOC): 44%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
