
> sqlite3@3.1.13 install /root/Targets/webcredits/node_modules/sqlite3
> node-pre-gyp install --fallback-to-build

[sqlite3] Success: "/root/Targets/webcredits/node_modules/sqlite3/lib/binding/node-v51-linux-x64/node_sqlite3.node" is installed via remote
/root/Targets/webcredits
└─┬ webcredits@0.1.31 
  ├─┬ body-parser@1.18.2 
  │ ├── bytes@3.0.0 
  │ ├── content-type@1.0.4 
  │ ├── depd@1.1.1 
  │ ├─┬ http-errors@1.6.2 
  │ │ ├── inherits@2.0.3 
  │ │ └── setprototypeof@1.0.3 
  │ ├── iconv-lite@0.4.19 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── qs@6.5.1 
  │ ├─┬ raw-body@2.3.2 
  │ │ └── unpipe@1.0.0 
  │ └─┬ type-is@1.6.15 
  │   ├── media-typer@0.3.0 
  │   └─┬ mime-types@2.1.17 
  │     └── mime-db@1.30.0 
  ├── commander@2.11.0 
  ├─┬ cors@2.8.4 
  │ ├── object-assign@4.1.1 
  │ └── vary@1.1.2 
  ├── crypto@0.0.3 
  ├─┬ dateformat@1.0.12 
  │ ├── get-stdin@4.0.1 
  │ └─┬ meow@3.7.0 
  │   ├─┬ camelcase-keys@2.1.0 
  │   │ └── camelcase@2.1.1 
  │   ├── decamelize@1.2.0 
  │   ├─┬ loud-rejection@1.6.0 
  │   │ ├─┬ currently-unhandled@0.4.1 
  │   │ │ └── array-find-index@1.0.2 
  │   │ └── signal-exit@3.0.2 
  │   ├── map-obj@1.0.1 
  │   ├── minimist@1.2.0 
  │   ├─┬ normalize-package-data@2.4.0 
  │   │ ├── hosted-git-info@2.5.0 
  │   │ ├─┬ is-builtin-module@1.0.0 
  │   │ │ └── builtin-modules@1.1.1 
  │   │ └─┬ validate-npm-package-license@3.0.1 
  │   │   ├─┬ spdx-correct@1.0.2 
  │   │   │ └── spdx-license-ids@1.2.2 
  │   │   └── spdx-expression-parse@1.0.4 
  │   ├─┬ read-pkg-up@1.0.1 
  │   │ ├─┬ find-up@1.1.2 
  │   │ │ ├── path-exists@2.1.0 
  │   │ │ └─┬ pinkie-promise@2.0.1 
  │   │ │   └── pinkie@2.0.4 
  │   │ └─┬ read-pkg@1.1.0 
  │   │   ├─┬ load-json-file@1.1.0 
  │   │   │ ├── graceful-fs@4.1.11 
  │   │   │ ├─┬ parse-json@2.2.0 
  │   │   │ │ └─┬ error-ex@1.3.1 
  │   │   │ │   └── is-arrayish@0.2.1 
  │   │   │ ├── pify@2.3.0 
  │   │   │ └─┬ strip-bom@2.0.0 
  │   │   │   └── is-utf8@0.2.1 
  │   │   └── path-type@1.1.0 
  │   ├─┬ redent@1.0.0 
  │   │ ├─┬ indent-string@2.1.0 
  │   │ │ └─┬ repeating@2.0.1 
  │   │ │   └─┬ is-finite@1.0.2 
  │   │ │     └── number-is-nan@1.0.1 
  │   │ └── strip-indent@1.0.1 
  │   └── trim-newlines@1.0.0 
  ├─┬ debug@2.6.9 
  │ └── ms@2.0.0 
  ├─┬ express@4.16.1 
  │ ├─┬ accepts@1.3.4 
  │ │ └── negotiator@0.6.1 
  │ ├── array-flatten@1.1.1 
  │ ├── content-disposition@0.5.2 
  │ ├── cookie@0.3.1 
  │ ├── cookie-signature@1.0.6 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├── finalhandler@1.1.0 
  │ ├── fresh@0.5.2 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@2.0.2 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.5.2 
  │ ├── range-parser@1.2.0 
  │ ├── safe-buffer@5.1.1 
  │ ├─┬ send@0.16.1 
  │ │ ├── destroy@1.0.4 
  │ │ └── mime@1.4.1 
  │ ├── serve-static@1.13.1 
  │ ├── setprototypeof@1.1.0 
  │ ├── statuses@1.3.1 
  │ └── utils-merge@1.0.1 
  ├─┬ express-session@1.15.6 
  │ ├── crc@3.4.4 
  │ ├── on-headers@1.0.1 
  │ └─┬ uid-safe@2.1.5 
  │   └── random-bytes@1.0.0 
  ├── https@1.0.0 
  ├─┬ jsonld@0.4.12 
  │ ├── es6-promise@2.3.0 
  │ ├── pkginfo@0.4.1 
  │ ├─┬ request@2.83.0 
  │ │ ├── aws-sign2@0.7.0 
  │ │ ├── aws4@1.6.0 
  │ │ ├── caseless@0.12.0 
  │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ └── delayed-stream@1.0.0 
  │ │ ├── extend@3.0.1 
  │ │ ├── forever-agent@0.6.1 
  │ │ ├─┬ form-data@2.3.1 
  │ │ │ └── asynckit@0.4.0 
  │ │ ├─┬ har-validator@5.0.3 
  │ │ │ ├─┬ ajv@5.2.3 
  │ │ │ │ ├── co@4.6.0 
  │ │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ │ └── json-stable-stringify@1.0.1 
  │ │ │ └── har-schema@2.0.0 
  │ │ ├─┬ hawk@6.0.2 
  │ │ │ ├── boom@4.3.1 
  │ │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ │ └── boom@5.2.0 
  │ │ │ ├── hoek@4.2.0 
  │ │ │ └── sntp@2.0.2 
  │ │ ├─┬ http-signature@1.2.0 
  │ │ │ ├── assert-plus@1.0.0 
  │ │ │ ├─┬ jsprim@1.4.1 
  │ │ │ │ ├── extsprintf@1.3.0 
  │ │ │ │ ├── json-schema@0.2.3 
  │ │ │ │ └── verror@1.10.0 
  │ │ │ └─┬ sshpk@1.13.1 
  │ │ │   ├── asn1@0.2.3 
  │ │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │   ├── dashdash@1.14.1 
  │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │   ├── getpass@0.1.7 
  │ │ │   ├── jsbn@0.1.1 
  │ │ │   └── tweetnacl@0.14.5 
  │ │ ├── is-typedarray@1.0.0 
  │ │ ├── isstream@0.1.2 
  │ │ ├── json-stringify-safe@5.0.1 
  │ │ ├── oauth-sign@0.8.2 
  │ │ ├── performance-now@2.1.0 
  │ │ ├── stringstream@0.0.5 
  │ │ ├─┬ tough-cookie@2.3.3 
  │ │ │ └── punycode@1.4.1 
  │ │ ├── tunnel-agent@0.6.0 
  │ │ └── uuid@3.1.0 
  │ └── xmldom@0.1.19 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  ├─┬ mysql@2.14.1 
  │ ├── bignumber.js@4.0.2 
  │ ├─┬ readable-stream@2.3.3 
  │ │ ├── core-util-is@1.0.2 
  │ │ ├── isarray@1.0.0 
  │ │ ├── process-nextick-args@1.0.7 
  │ │ ├── string_decoder@1.0.3 
  │ │ └── util-deprecate@1.0.2 
  │ └── sqlstring@2.2.0 
  ├── node-uuid@1.4.8 
  ├─┬ path@0.12.7 
  │ └── process@0.11.10 
  ├─┬ sequelize@3.30.4 
  │ ├── bluebird@3.5.0 
  │ ├── dottie@1.1.1 
  │ ├── generic-pool@2.4.2 
  │ ├── inflection@1.12.0 
  │ ├── lodash@4.12.0 
  │ ├── moment@2.18.1 
  │ ├── moment-timezone@0.5.13 
  │ ├── retry-as-promised@2.3.1 
  │ ├── semver@5.4.1 
  │ ├── shimmer@1.1.0 
  │ ├─┬ terraformer-wkt-parser@1.1.2 
  │ │ └─┬ terraformer@1.0.8 
  │ │   └── @types/geojson@1.0.4 
  │ ├── toposort-class@1.0.1 
  │ ├── uuid@3.1.0 
  │ ├── validator@5.7.0 
  │ └── wkx@0.2.0 
  ├─┬ sha256@0.2.0 
  │ ├── convert-hex@0.1.0 
  │ └── convert-string@0.1.0 
  ├─┬ sqlite3@3.1.13 
  │ ├── nan@2.7.0 
  │ └─┬ node-pre-gyp@0.6.38 
  │   ├─┬ hawk@3.1.3 
  │   │ ├── boom@2.10.1 
  │   │ ├── cryptiles@2.0.5 
  │   │ ├── hoek@2.16.3 
  │   │ └── sntp@1.0.9 
  │   ├─┬ mkdirp@0.5.1 
  │   │ └── minimist@0.0.8 
  │   ├─┬ nopt@4.0.1 
  │   │ ├── abbrev@1.1.1 
  │   │ └─┬ osenv@0.1.4 
  │   │   ├── os-homedir@1.0.2 
  │   │   └── os-tmpdir@1.0.2 
  │   ├─┬ npmlog@4.1.2 
  │   │ ├─┬ are-we-there-yet@1.1.4 
  │   │ │ └── delegates@1.0.0 
  │   │ ├── console-control-strings@1.1.0 
  │   │ ├─┬ gauge@2.7.4 
  │   │ │ ├── aproba@1.2.0 
  │   │ │ ├── has-unicode@2.0.1 
  │   │ │ ├── object-assign@4.1.1 
  │   │ │ ├── signal-exit@3.0.2 
  │   │ │ ├─┬ string-width@1.0.2 
  │   │ │ │ ├── code-point-at@1.1.0 
  │   │ │ │ └─┬ is-fullwidth-code-point@1.0.0 
  │   │ │ │   └── number-is-nan@1.0.1 
  │   │ │ ├─┬ strip-ansi@3.0.1 
  │   │ │ │ └── ansi-regex@2.1.1 
  │   │ │ └── wide-align@1.1.2 
  │   │ └── set-blocking@2.0.0 
  │   ├─┬ rc@1.2.1 
  │   │ ├── deep-extend@0.4.2 
  │   │ ├── ini@1.3.4 
  │   │ ├── minimist@1.2.0 
  │   │ └── strip-json-comments@2.0.1 
  │   ├─┬ request@2.81.0 
  │   │ ├── aws-sign2@0.6.0 
  │   │ ├── aws4@1.6.0 
  │   │ ├── caseless@0.12.0 
  │   │ ├─┬ combined-stream@1.0.5 
  │   │ │ └── delayed-stream@1.0.0 
  │   │ ├── extend@3.0.1 
  │   │ ├── forever-agent@0.6.1 
  │   │ ├─┬ form-data@2.1.4 
  │   │ │ └── asynckit@0.4.0 
  │   │ ├─┬ har-validator@4.2.1 
  │   │ │ ├─┬ ajv@4.11.8 
  │   │ │ │ ├── co@4.6.0 
  │   │ │ │ └─┬ json-stable-stringify@1.0.1 
  │   │ │ │   └── jsonify@0.0.0 
  │   │ │ └── har-schema@1.0.5 
  │   │ ├─┬ http-signature@1.1.1 
  │   │ │ ├── assert-plus@0.2.0 
  │   │ │ ├─┬ jsprim@1.4.1 
  │   │ │ │ ├── assert-plus@1.0.0 
  │   │ │ │ ├── extsprintf@1.3.0 
  │   │ │ │ ├── json-schema@0.2.3 
  │   │ │ │ └─┬ verror@1.10.0 
  │   │ │ │   └── assert-plus@1.0.0 
  │   │ │ └─┬ sshpk@1.13.1 
  │   │ │   ├── asn1@0.2.3 
  │   │ │   ├── assert-plus@1.0.0 
  │   │ │   ├── bcrypt-pbkdf@1.0.1 
  │   │ │   ├─┬ dashdash@1.14.1 
  │   │ │   │ └── assert-plus@1.0.0 
  │   │ │   ├── ecc-jsbn@0.1.1 
  │   │ │   ├─┬ getpass@0.1.7 
  │   │ │   │ └── assert-plus@1.0.0 
  │   │ │   ├── jsbn@0.1.1 
  │   │ │   └── tweetnacl@0.14.5 
  │   │ ├── is-typedarray@1.0.0 
  │   │ ├── isstream@0.1.2 
  │   │ ├── json-stringify-safe@5.0.1 
  │   │ ├─┬ mime-types@2.1.17 
  │   │ │ └── mime-db@1.30.0 
  │   │ ├── oauth-sign@0.8.2 
  │   │ ├── performance-now@0.2.0 
  │   │ ├── qs@6.4.0 
  │   │ ├── safe-buffer@5.1.1 
  │   │ ├── stringstream@0.0.5 
  │   │ ├─┬ tough-cookie@2.3.3 
  │   │ │ └── punycode@1.4.1 
  │   │ ├── tunnel-agent@0.6.0 
  │   │ └── uuid@3.1.0 
  │   ├─┬ rimraf@2.6.2 
  │   │ └─┬ glob@7.1.2 
  │   │   ├── fs.realpath@1.0.0 
  │   │   ├── inflight@1.0.6 
  │   │   ├─┬ minimatch@3.0.4 
  │   │   │ └─┬ brace-expansion@1.1.8 
  │   │   │   ├── balanced-match@1.0.0 
  │   │   │   └── concat-map@0.0.1 
  │   │   └── path-is-absolute@1.0.1 
  │   ├── semver@5.4.1 
  │   ├─┬ tar@2.2.1 
  │   │ ├── block-stream@0.0.9 
  │   │ ├─┬ fstream@1.0.11 
  │   │ │ └── graceful-fs@4.1.11 
  │   │ └── inherits@2.0.3 
  │   └─┬ tar-pack@3.4.0 
  │     ├─┬ debug@2.6.9 
  │     │ └── ms@2.0.0 
  │     ├── fstream-ignore@1.0.5 
  │     ├─┬ once@1.4.0 
  │     │ └── wrappy@1.0.2 
  │     ├─┬ readable-stream@2.3.3 
  │     │ ├── core-util-is@1.0.2 
  │     │ ├── isarray@1.0.0 
  │     │ ├── process-nextick-args@1.0.7 
  │     │ ├── string_decoder@1.0.3 
  │     │ └── util-deprecate@1.0.2 
  │     └── uid-number@0.0.6 
  ├─┬ util@0.10.3 
  │ └── inherits@2.0.1 
  ├── uuid@2.0.3 
  ├── vhost@3.0.2 
  ├─┬ webid@0.3.8 
  │ ├── node-forge@0.6.49 
  │ └─┬ rdflib@0.2.11 
  │   ├── async@0.9.2 
  │   ├─┬ browserify@14.4.0 
  │   │ ├── assert@1.4.1 
  │   │ ├─┬ browser-pack@6.0.2 
  │   │ │ ├─┬ combine-source-map@0.7.2 
  │   │ │ │ ├── convert-source-map@1.1.3 
  │   │ │ │ ├── inline-source-map@0.6.2 
  │   │ │ │ ├── lodash.memoize@3.0.4 
  │   │ │ │ └── source-map@0.5.7 
  │   │ │ └── umd@3.0.1 
  │   │ ├─┬ browser-resolve@1.11.2 
  │   │ │ └── resolve@1.1.7 
  │   │ ├─┬ browserify-zlib@0.1.4 
  │   │ │ └── pako@0.2.9 
  │   │ ├─┬ buffer@5.0.8 
  │   │ │ ├── base64-js@1.2.1 
  │   │ │ └── ieee754@1.1.8 
  │   │ ├── cached-path-relative@1.0.1 
  │   │ ├─┬ concat-stream@1.5.2 
  │   │ │ ├─┬ readable-stream@2.0.6 
  │   │ │ │ └── string_decoder@0.10.31 
  │   │ │ └── typedarray@0.0.6 
  │   │ ├─┬ console-browserify@1.1.0 
  │   │ │ └── date-now@0.1.4 
  │   │ ├── constants-browserify@1.0.0 
  │   │ ├─┬ crypto-browserify@3.11.1 
  │   │ │ ├─┬ browserify-cipher@1.0.0 
  │   │ │ │ ├─┬ browserify-aes@1.0.8 
  │   │ │ │ │ └── buffer-xor@1.0.3 
  │   │ │ │ ├─┬ browserify-des@1.0.0 
  │   │ │ │ │ └── des.js@1.0.0 
  │   │ │ │ └─┬ evp_bytestokey@1.0.3 
  │   │ │ │   └─┬ md5.js@1.3.4 
  │   │ │ │     └── hash-base@3.0.4 
  │   │ │ ├─┬ browserify-sign@4.0.4 
  │   │ │ │ ├── bn.js@4.11.8 
  │   │ │ │ ├── browserify-rsa@4.0.1 
  │   │ │ │ ├─┬ elliptic@6.4.0 
  │   │ │ │ │ ├── brorand@1.1.0 
  │   │ │ │ │ ├── hash.js@1.1.3 
  │   │ │ │ │ ├── hmac-drbg@1.0.1 
  │   │ │ │ │ ├── minimalistic-assert@1.0.0 
  │   │ │ │ │ └── minimalistic-crypto-utils@1.0.1 
  │   │ │ │ └─┬ parse-asn1@5.1.0 
  │   │ │ │   └── asn1.js@4.9.1 
  │   │ │ ├── create-ecdh@4.0.0 
  │   │ │ ├─┬ create-hash@1.1.3 
  │   │ │ │ ├── cipher-base@1.0.4 
  │   │ │ │ └─┬ ripemd160@2.0.1 
  │   │ │ │   └── hash-base@2.0.2 
  │   │ │ ├── create-hmac@1.1.6 
  │   │ │ ├─┬ diffie-hellman@5.0.2 
  │   │ │ │ └── miller-rabin@4.0.1 
  │   │ │ ├── pbkdf2@3.0.14 
  │   │ │ ├── public-encrypt@4.0.0 
  │   │ │ └── randombytes@2.0.5 
  │   │ ├── defined@1.0.0 
  │   │ ├── deps-sort@2.0.0 
  │   │ ├── domain-browser@1.1.7 
  │   │ ├── duplexer2@0.1.4 
  │   │ ├── events@1.1.1 
  │   │ ├─┬ glob@7.1.2 
  │   │ │ ├── fs.realpath@1.0.0 
  │   │ │ ├─┬ inflight@1.0.6 
  │   │ │ │ └── wrappy@1.0.2 
  │   │ │ ├─┬ minimatch@3.0.4 
  │   │ │ │ └─┬ brace-expansion@1.1.8 
  │   │ │ │   ├── balanced-match@1.0.0 
  │   │ │ │   └── concat-map@0.0.1 
  │   │ │ ├── once@1.4.0 
  │   │ │ └── path-is-absolute@1.0.1 
  │   │ ├─┬ has@1.0.1 
  │   │ │ └── function-bind@1.1.1 
  │   │ ├── htmlescape@1.1.1 
  │   │ ├── https-browserify@1.0.0 
  │   │ ├─┬ insert-module-globals@7.0.1 
  │   │ │ ├── is-buffer@1.1.5 
  │   │ │ └─┬ lexical-scope@1.2.0 
  │   │ │   └── astw@2.2.0 
  │   │ ├─┬ JSONStream@1.3.1 
  │   │ │ ├── jsonparse@1.3.1 
  │   │ │ └── through@2.3.8 
  │   │ ├─┬ labeled-stream-splicer@2.0.0 
  │   │ │ ├── isarray@0.0.1 
  │   │ │ └── stream-splicer@2.0.0 
  │   │ ├─┬ module-deps@4.1.1 
  │   │ │ ├── detective@4.5.0 
  │   │ │ └── stream-combiner2@1.1.1 
  │   │ ├── os-browserify@0.1.2 
  │   │ ├─┬ parents@1.0.1 
  │   │ │ └── path-platform@0.11.15 
  │   │ ├── path-browserify@0.0.0 
  │   │ ├── querystring-es3@0.2.1 
  │   │ ├── read-only-stream@2.0.0 
  │   │ ├─┬ resolve@1.4.0 
  │   │ │ └── path-parse@1.0.5 
  │   │ ├─┬ shasum@1.0.2 
  │   │ │ ├── json-stable-stringify@0.0.1 
  │   │ │ └── sha.js@2.4.9 
  │   │ ├─┬ shell-quote@1.6.1 
  │   │ │ ├── array-filter@0.0.1 
  │   │ │ ├── array-map@0.0.0 
  │   │ │ ├── array-reduce@0.0.0 
  │   │ │ └── jsonify@0.0.0 
  │   │ ├── stream-browserify@2.0.1 
  │   │ ├─┬ stream-http@2.7.2 
  │   │ │ ├── builtin-status-codes@3.0.0 
  │   │ │ └── to-arraybuffer@1.0.1 
  │   │ ├── subarg@1.0.0 
  │   │ ├─┬ syntax-error@1.3.0 
  │   │ │ └── acorn@4.0.13 
  │   │ ├── through2@2.0.3 
  │   │ ├── timers-browserify@1.4.2 
  │   │ ├── tty-browserify@0.0.0 
  │   │ ├─┬ url@0.11.0 
  │   │ │ ├── punycode@1.3.2 
  │   │ │ └── querystring@0.2.0 
  │   │ ├─┬ vm-browserify@0.0.4 
  │   │ │ └── indexof@0.0.1 
  │   │ └── xtend@4.0.1 
  │   ├── coffee-script@1.12.7 
  │   ├── n3@0.4.5 
  │   └── xmlhttprequest@1.8.0 
  ├─┬ ws@1.1.4 
  │ ├── options@0.0.6 
  │ └── ultron@1.0.2 
  └── wss@0.0.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/webcredits/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 34% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0622 took 3.13s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

module.exports = {
  balance: balance,
  createDB: createDB,
  createTables: createTables,
  deposit: deposit,
  getBalance: getBalance,
  getConfig: getConfig,
  getCredit: getCredit,
  getDeposit: getDeposit,
  getReputation: getReputation,
  getSpent: getSpent,
  genesis: genesis,
  genesisInit: genesisInit,
  insert: insert,
  reputation: reputation,
  toledger: toledger,
  setupDB: setupDB,
  today: today
}

// requires
var debug = require('debug')('webcredits:webcredits')
var Sequelize = require('sequelize')
var jsonld = require('jsonld')
var crypto = require('crypto')
var promises = jsonld.promises
var dateFormat = require('dateformat')

/**
* setup database
* @param  {string} dialect type of db mysql|sqlite
* @param  {string} storage file used for sqlite, default ./credit.db
* @return {Object} sequelize db object
*/
function setupDB (config) {
  var sequelize
  var defaultStorage = 'credit.db'

  if (config.dialect === 'sqlite') {
    if (!config.storage) {
      config.storage = defaultStorage
    }

    sequelize = new Sequelize(config.database, config.username, config.password, {
      host: config.host,
      dialect: config.dialect,
      storage: config.storage,
      logging: false
    })
  } else {
    sequelize = new Sequelize(config.database, config.username, config.password, {
      host: config.host,
      dialect: config.dialect,
      logging: false
    })
  }
  return sequelize
}

/**
 * gets the current config
 * @return {Object} The config
 */
function getConfig () {
  var config = require('../config/dbconfig')
  return config
}

/**
* create tables
* @param  {Object} sequelize db object
* @param  {Object} config    config object
* @param  {Object} callback  callback
*/
function createTables (sequelize, config, callback) {
  if (!config.wallet) {
    config.wallet = null
  }

  var coinbase = 'https://w3id.org/cc#coinbase'
  var currency = config.currency || 'https://w3id.org/cc#bit'
  var wallet = config.wallet
  var initial = 1000000

  var create_credit = 'CREATE TABLE Credit ( \
    `@id` VARCHAR(1000), \
    `source` VARCHAR(1000), \
    `amount` REAL, \
    `currency` VARCHAR(255) DEFAULT \'' + currency + '\', \
    `destination` VARCHAR(1000), \
    `timestamp` TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, \
    `context` VARCHAR(1000), \
    `description` VARCHAR(1000), \
    `wallet` VARCHAR(1000) \
  );'

  var create_ledger = 'CREATE TABLE Ledger ( \
    `source` VARCHAR(1000), \
    `amount` REAL, \
    `currency` VARCHAR(255) DEFAULT \'' + currency + '\', \
    `wallet` VARCHAR(1000), \
     UNIQUE KEY `unique_index` (`source`,`currency`,`wallet`) \
  );'

  var create_genesis = 'CREATE TABLE Genesis ( \
    `source` VARCHAR(1000), \
    `amount` REAL, \
    `currency` VARCHAR(255) DEFAULT \'' + currency + '\', \
    `wallet` VARCHAR(1000), \
    UNIQUE KEY `unique_index` (`source`,`currency`,`wallet`) \
  );'

  var create_deposit = 'CREATE TABLE Deposit ( \
    `source` VARCHAR(1000), \
    `amount` REAL, \
    `currency` VARCHAR(255) DEFAULT \'' + currency + '\', \
    `wallet` VARCHAR(1000), \
    UNIQUE KEY `unique_index` (`source`,`currency`,`wallet`) \
  );'

  var create_withdrawal = 'CREATE TABLE Withdrawal ( \
    `source` VARCHAR(1000), \
    `amount` REAL, \
    `currency` VARCHAR(255) DEFAULT \'' + currency + '\', \
    `wallet` VARCHAR(1000), \
    UNIQUE KEY `unique_index` (`source`,`currency`,`wallet`) \
  );'

  sequelize.query(create_credit).then(function (res) {
  }).then(function () {
    sequelize.query(create_ledger)
  }).then(function () {
    sequelize.query(create_genesis)
  }).then(function () {
    sequelize.query(create_deposit)
  }).then(function () {
    sequelize.query(create_withdrawal)
  }).then(function () {
    debug('Sucessfully created tables!')
  }).then(function () {
    // sequelize.close();
    callback(null, 'complete')
  }).catch(function (err) {
    debug('Failed to create tables.', err)
    // sequelize.close();
    callback(err)
  })
}

/**
 * get credit
 * @param  {Object} credit    the web credit
 * @param  {Object} sequelize the DB connection
 * @param  {Object} config    the config
 * @param  {Object} callback  callback
 * @return {Object}           the web credit if exists
 */
function getCredit (credit, sequelize, config, callback) {
  var currency = config.currency || 'https://w3id.org/cc#bit'
  var wallet = config.wallet

  var sql = 'Select * from Credit where context = :context and wallet = :wallet and currency = :currency ;'

  debug(sql)
  debug(config)

  sequelize.query(sql, { replacements: { currency: currency, wallet: config.wallet, context: credit['https://w3id.org/cc#context'] } }).then(function (res) {
    return res
  }).catch(function (err) {
    debug('Not found.', err)
    callback(err)
  }).then(function (res) {
    debug(res)
    if (res[0]) {
      debug(res[0])
      // sequelize.close();
      callback(null, res[0])
    }
  })
}

/**
* createDB function
* @param  {Object} config   config
* @param  {Object} callback callback
*/
function createDB (config, callback) {
  // vars
  var sequelize

  // run main
  sequelize = setupDB(config)
  createTables(sequelize, config, callback)
}

/**
 * get balance
 * @param  {String}   source    the source
 * @param  {Object}   sequelize sequelize object
 * @param  {Object}   config    config
 * @param  {Function} callback  callback
 */
function getBalance (source, sequelize, config, callback) {
  if (!config.wallet) {
    config.wallet = null
  }

  var coinbase = 'https://w3id.org/cc#coinbase'
  var currency = config.currency || 'https://w3id.org/cc#bit'
  var wallet = config.wallet
  var initial = 1000000

  var balanceSql = 'Select sum(amount) amount from Ledger where source = :source and wallet = :wallet and currency = :currency ;'

  sequelize.query(balanceSql, { replacements: { currency: currency, wallet: config.wallet, source: source } }).then(function (res) {
    return res
  }).catch(function (err) {
    debug('Balance Failed.', err)
    callback(err)
  }).then(function (res) {
    if (res[0][0]) {
      // debug(res[0][0].amount);
      // sequelize.close();
      callback(null, res[0][0].amount)
    }
  })
}

/**
 * get balance
 * @param  {String}   source    the source
 * @param  {Object}   sequelize sequelize object
 * @param  {Object}   config    config
 * @param  {Function} callback  callback
 */
function getDeposit (source, sequelize, config, callback) {
  if (!config.wallet) {
    config.wallet = null
  }

  var currency = config.currency || 'https://w3id.org/cc#bit'
  var wallet = config.wallet

  var balanceSql = 'Select sum(amount) amount from Deposit where source = :source and wallet = :wallet and currency = :currency ;'

  sequelize.query(balanceSql, { replacements: { currency: currency, wallet: config.wallet, source: source } }).then(function (res) {
    return res
  }).catch(function (err) {
    debug('Get Deposit Failed.', err)
    callback(err)
  }).then(function (res) {
    if (res[0][0]) {
      // debug(res[0][0].amount);
      // sequelize.close();
      callback(null, res[0][0].amount)
    }
  })
}

/**
 * genesis initialization
 * @param  {Object}   config   config
 * @param  {Function} callback callback
 */
function genesisInit (sequelize, config, callback) {
  if (!config.wallet) {
    config.wallet = null
  }

  var coinbase = 'https://w3id.org/cc#coinbase'
  var currency = config.currency || 'https://w3id.org/cc#bit'
  var wallet = config.wallet
  var initial = 1000000

  var coinbaseSql = 'Insert into Ledger values ( \'' + coinbase + '\', ' + initial + ', \'' + currency + '\', :wallet );'
  var genesisSql = 'Insert into Genesis values ( \'' + coinbase + '\', ' + initial + ', \'' + currency + '\', :wallet );'

  sequelize.query(coinbaseSql, { replacements: { wallet: config.wallet } }).then(function (res) {
  }).then(function () {
    sequelize.query(genesisSql, { replacements: { wallet: config.wallet } })
  }).then(function () {
    debug('Genesis successful!')
  }).catch(function (err) {
    debug('Genesis Failed.', err)
    callback(err)
  }).then(function () {
    callback(null, 'complete')
    // sequelize.close();
  })
}

/**
 * deposit
 * @param  {Object}   Credit   the credit to send
 * @param  {Object}   sequelize   sequelize
 * @param  {Object}   config   config
 * @param  {Function} callback callback
 */
function deposit (credit, sequelize, config, callback) {
  if (!config.wallet) {
    config.wallet = null
  }

  var currency = config.currency || 'https://w3id.org/cc#bit'
  var wallet = config.wallet

  // main
  debug('source : ' + credit['https://w3id.org/cc#source'])
  debug('amount : ' + credit['https://w3id.org/cc#amount'])
  debug('unit : ' + credit['https://w3id.org/cc#currency'])
  debug('destination : ' + credit['https://w3id.org/cc#destination'])
  debug('description : ' + credit['https://w3id.org/cc#description'])
  debug('timestamp : ' + credit['https://w3id.org/cc#timestamp'])
  debug('wallet : ' + config.wallet)

  credit['https://w3id.org/cc#currency'] = currency || null

  credit['https://w3id.org/cc#description'] = credit['https://w3id.org/cc#description'] || null
  credit['https://w3id.org/cc#timestamp'] = credit['https://w3id.org/cc#timestamp'] || null
  credit['https://w3id.org/cc#context'] = credit['https://w3id.org/cc#context'] || null
  config.wallet = config.wallet || null

  var existsSql = 'Select amount from Deposit where source = :source and currency = :currency and wallet = :wallet'
  var depositSql = 'Insert into Deposit values ( :source, :amount, :currency, :wallet );'
  var updateSql = 'Update Deposit set amount = :amount where source = :source and currency = :currency and wallet = :wallet'

  sequelize.query(existsSql, { replacements: { wallet: config.wallet, source: credit['https://w3id.org/cc#source'], amount: credit['https://w3id.org/cc#amount'], currency: credit['https://w3id.org/cc#currency'] }
  }).then(function (res) {
    var sql
    if (res[0][0] && !isNaN(res[0][0].amount)) {
      sql = updateSql
    } else {
      sql = depositSql
    }
    return sequelize.query(sql, { replacements: { wallet: config.wallet, source: credit['https://w3id.org/cc#source'], amount: credit['https://w3id.org/cc#amount'], currency: credit['https://w3id.org/cc#currency'] } })
  }).then(function (res) {
    debug('Deposit successful!')
  }).catch(function (err) {
    debug('Deposit Failed.', err)
    callback(err)
  }).then(function () {
    callback(null, 'complete')
    // sequelize.close();
  })
}

/**
 * deposit to ledger
 * @param  {Object}   Credit   the credit to send
 * @param  {Object}   sequelize   sequelize
 * @param  {Object}   config   config
 * @param  {Function} callback callback
 */
function toledger (credit, sequelize, config, callback) {
  if (!config.wallet) {
    config.wallet = null
  }

  var currency = config.currency || 'https://w3id.org/cc#bit'
  var wallet = config.wallet

  // main
  debug('source : ' + credit['https://w3id.org/cc#source'])
  debug('amount : ' + credit['https://w3id.org/cc#amount'])
  debug('unit : ' + credit['https://w3id.org/cc#currency'])
  debug('destination : ' + credit['https://w3id.org/cc#destination'])
  debug('description : ' + credit['https://w3id.org/cc#description'])
  debug('timestamp : ' + credit['https://w3id.org/cc#timestamp'])
  debug('wallet : ' + config.wallet)

  credit['https://w3id.org/cc#currency'] = currency || null

  credit['https://w3id.org/cc#description'] = credit['https://w3id.org/cc#description'] || null
  credit['https://w3id.org/cc#timestamp'] = credit['https://w3id.org/cc#timestamp'] || null
  credit['https://w3id.org/cc#context'] = credit['https://w3id.org/cc#context'] || null
  config.wallet = config.wallet || null

  var existsSql = 'Select amount from Ledger where source = :source and currency = :currency and wallet = :wallet'
  var depositSql = 'Insert into Ledger values ( :source, :amount, :currency, :wallet );'
  var updateSql = 'Update Ledger set amount = :amount where source = :source and currency = :currency and wallet = :wallet'

  sequelize.query(existsSql, { replacements: { wallet: config.wallet, source: credit['https://w3id.org/cc#source'], amount: credit['https://w3id.org/cc#amount'], currency: credit['https://w3id.org/cc#currency'] }
  }).then(function (res) {
    var sql
    if (res[0][0] && !isNaN(res[0][0].amount)) {
      sql = updateSql
    } else {
      sql = depositSql
    }
    return sequelize.query(sql, { replacements: { wallet: config.wallet, source: credit['https://w3id.org/cc#source'], amount: credit['https://w3id.org/cc#amount'], currency: credit['https://w3id.org/cc#currency'] } })
  }).then(function (res) {
    debug('Deposit successful!')
  }).catch(function (err) {
    debug('Deposit Failed.', err)
    callback(err)
  }).then(function () {
    callback(null, 'complete')
    // sequelize.close();
  })
}

/**
 * genesis
 * @param  {Object}   config   config
 * @param  {Function} callback callback
 */
function genesis (sequelize, config, callback) {
  genesisInit(sequelize, config, callback)
}

 /**
  * get balance
  * @param  {String}   source    the source
  * @param  {Object}   sequelize sequelize object
  * @param  {Object}   config    config
  * @param  {Function} callback  callback
  */
function balance (source, config, callback) {
  // vars
  var sequelize

  // run main
  sequelize = setupDB(config)
  var res = getBalance(source, sequelize, config, callback)
}

/**
 * get balance
 * @param  {String}   source    the source
 * @param  {Object}   sequelize sequelize object
 * @param  {Object}   config    config
 * @param  {Function} callback  callback
 */
function getReputation (source, sequelize, config, callback) {
  if (!config.wallet) {
    config.wallet = null
  }

  var coinbase = 'https://w3id.org/cc#coinbase'
  var currency = config.currency || 'https://w3id.org/cc#bit'
  var wallet = config.wallet
  var initial = 1000000

  var coinbaseSql = 'Select sum(amount) amount from Credit where destination = :source and wallet = :wallet and currency = :currency  ;'

  sequelize.query(coinbaseSql, { replacements: { currency: currency, wallet: wallet, source: source } }).then(function (res) {
    return res
  }).catch(function (err) {
    debug('Reputation Failed.', err)
    callback(err)
  }).then(function (res) {
    if (res[0][0]) {
      callback(null, res[0][0].amount)
      // sequelize.close();
    }
  })
}

/**
 * get balance
 * @param  {String}   source    the source
 * @param  {Object}   sequelize sequelize object
 * @param  {Object}   config    config
 * @param  {Function} callback  callback
 */
function getSpent (source, sequelize, config, callback) {
  if (!config.wallet) {
    config.wallet = null
  }

  var currency = config.currency || 'https://w3id.org/cc#bit'
  var wallet = config.wallet

  var coinbaseSql = 'Select sum(amount) amount from Credit where source = :source and wallet = :wallet and currency = :currency  ;'

  sequelize.query(coinbaseSql, { replacements: { currency: currency, wallet: wallet, source: source } }).then(function (res) {
    return res
  }).catch(function (err) {
    debug('Spent Failed.', err)
    callback(err)
  }).then(function (res) {
    if (res[0][0]) {
      callback(null, res[0][0].amount)
      // sequelize.close();
    }
  })
}

/**
 * Today's credits
 * @param  {Object}   credit    a web credit
 * @param  {Object}   sequelize db connection
 * @param  {Object}   config    config
 * @param  {Function} callback  callback
 */
function today (source, sequelize, config, callback) {
  if (!config.wallet) {
    config.wallet = null
  }

  var coinbase = 'https://w3id.org/cc#coinbase'
  var currency = config.currency || 'https://w3id.org/cc#bit'
  var wallet = config.wallet
  var initial = 1000000

  var coinbaseSql = 'Select sum(amount) amount from Credit where destination = :source and wallet = :wallet and DATE(`timestamp`) = CURDATE() and currency = :currency ;'

  sequelize.query(coinbaseSql, { replacements: { currency: currency, wallet: config.wallet, source: source } }).then(function (res) {
    return res
  }).catch(function (err) {
    debug('Today Failed.', err)
    callback(err)
  }).then(function (res) {
    if (res[0][0]) {
      //debug(res[0][0].amount)
      callback(null, res[0][0].amount)
      // sequelize.close();
    }
  })
}

/**
* reputation function
* @param  {Object} config [description]
*/
function reputation (source, config) {
  // vars
  var sequelize

  // run main
  sequelize = setupDB(config)
  var res = getReputation(source, sequelize, config)
}

/**
 * Insert into webcredits
 * @param  {Object}   credit    a web credit
 * @param  {Object}   sequelize db connection
 * @param  {Object}   config    config
 * @param  {Function} callback  callback
 */
function insert (credit, sequelize, config, callback) {
  if (!config.wallet) {
    config.wallet = null
  }

  var coinbase = 'https://w3id.org/cc#coinbase'
  var currency = config.currency || 'https://w3id.org/cc#bit'
  var wallet = config.wallet
  var initial = 1000000

  // main
  debug('source : ' + credit['https://w3id.org/cc#source'])
  debug('amount : ' + credit['https://w3id.org/cc#amount'])
  debug('unit : ' + credit['https://w3id.org/cc#currency'])
  debug('destination : ' + credit['https://w3id.org/cc#destination'])
  debug('description : ' + credit['https://w3id.org/cc#description'])
  debug('timestamp : ' + credit['https://w3id.org/cc#timestamp'])
  debug('wallet : ' + config.wallet)

  credit['https://w3id.org/cc#description'] = credit['https://w3id.org/cc#description'] || null
  credit['https://w3id.org/cc#timestamp'] = credit['https://w3id.org/cc#timestamp'] || null
  credit['https://w3id.org/cc#context'] = credit['https://w3id.org/cc#context'] || null
  config.wallet = config.wallet || null

  var existsSql = 'SELECT * FROM Credit where source = :source and destination = ' + ':destination' + ' and amount = :amount '
  existsSql += ' and description = :description '
  existsSql += ' and timestamp = :timestamp '
  existsSql += ' and wallet = :wallet '
  existsSql += ' and context = :context '

  debug(existsSql)

  sequelize.query(existsSql, { replacements: { description: credit['https://w3id.org/cc#description'],
  timestamp: credit['https://w3id.org/cc#timestamp'], 'destination': credit['https://w3id.org/cc#destination'], 'source': credit['https://w3id.org/cc#source'], 'amount': credit['https://w3id.org/cc#amount'], wallet: config.wallet, 'context': credit['https://w3id.org/cc#context'] } }).then(function (res) {
    debug('checking if row exists')
    debug(res)
    if (res[0][0]) {
      debug('row exists')
      throw ('row exists')
    } else {
      debug('row does not exist')
      debug('Getting balance')
      var balanceSql = 'SELECT * FROM Ledger where source = :source and wallet = :wallet '

      return sequelize.query(balanceSql, { replacements: { wallet: config.wallet, 'source': credit['https://w3id.org/cc#source'] } })
    }
  }).then(function (res) {
    if (res[0][0] && res[0][0].amount) {
      debug('balance is ' + res[0][0].amount)
      if (res[0][0].amount >= credit['https://w3id.org/cc#amount']) {
        debug('funds available')

        if (credit['https://w3id.org/cc#timestamp']) {
          credit['https://w3id.org/cc#timestamp'] = credit['https://w3id.org/cc#timestamp'].replace(' ', 'T')
          if (credit['https://w3id.org/cc#timestamp'].charAt(credit['https://w3id.org/cc#timestamp'].length - 1) != 'Z') {
            credit['https://w3id.org/cc#timestamp'] += 'Z'
          }
        } else {
          credit['https://w3id.org/cc#timestamp'] = new Date().toISOString().substring(0,19)
        }

        var doc = {
          'https://w3id.org/cc#timestamp': { '@value': credit['https://w3id.org/cc#timestamp'], '@type': 'http://www.w3.org/2001/XMLSchema#dateTime' },
          'https://w3id.org/cc#source': { '@id': credit['https://w3id.org/cc#source'] },
          'https://w3id.org/cc#amount': { '@value': credit['https://w3id.org/cc#amount'], '@type': 'http://www.w3.org/2001/XMLSchema#decimal' },
          'https://w3id.org/cc#destination': { '@id': credit['https://w3id.org/cc#destination'] },
          'https://w3id.org/cc#currency': { '@id': credit['https://w3id.org/cc#currency'] },
          '@type': 'https://w3id.org/cc#Credit'
        }
        debug(doc)
        return promises.normalize(doc, {format: 'application/nquads'})
      } else {
        throw ('not enough funds')
      }
    } else {
      throw ('could not find balance')
    }
  }).then(function (doc) {
    debug('Sucessfully normalized doc to json ld!')
    var hash = crypto.createHash('sha256').update(doc).digest('base64')
    debug(hash)

    var id = 'ni:///sha-256;' + new Buffer(hash).toString('base64').replace('+', '-').replace('/', '_').replace('=', '')
    credit['@id'] = id
    debug(credit)

    var insertSql = 'INSERT INTO Credit(\`@id\`, `source`, `destination`, `amount`, `timestamp`, `currency`'
    if (credit['https://w3id.org/cc#description']) insertSql += ', `description`'
    if (credit['https://w3id.org/cc#context']) insertSql += ', `context`'
    if (config.wallet) insertSql += ', `wallet`'
    insertSql += ") values ( '" + credit['@id'] + "', :source , " + ':destination' + ' , ' + credit['https://w3id.org/cc#amount']
    insertSql += " , :timestamp , '" + credit['https://w3id.org/cc#currency'] + "'"
    if (credit['https://w3id.org/cc#description']) insertSql += " , '" + credit['https://w3id.org/cc#description'] + "'"
    if (credit['https://w3id.org/cc#context']) insertSql += " , '" + credit['https://w3id.org/cc#context'] + "'"
    if (config.wallet) insertSql += " , '" + config.wallet + "'"
    insertSql += ' )'

    debug(insertSql)

    return sequelize.query(insertSql, {replacements: { 'destination': credit['https://w3id.org/cc#destination'], 'source': credit['https://w3id.org/cc#source'], 'timestamp': credit['https://w3id.org/cc#timestamp'] } })
  }).then(function (res) {
    debug('decrementing source')
    var decrementSql = 'UPDATE Ledger set amount = amount - ' + credit['https://w3id.org/cc#amount'] + ' where source = :source and wallet = :wallet'
    return sequelize.query(decrementSql, { replacements: { wallet: config.wallet, 'source': credit['https://w3id.org/cc#source'] } })
  }).then(function (res) {
    debug('incrementing or creating destination')
    var checkSql = 'SELECT * from Ledger where `source` =  :destination and wallet = :wallet'
    return sequelize.query(checkSql, { replacements: { wallet: config.wallet, 'destination': credit['https://w3id.org/cc#destination'] }})
  }).then(function (res) {
    var incrementSql
    if (res[0][0] && !isNaN(res[0][0].amount)) {
      if (config.wallet) {
        incrementSql = 'UPDATE Ledger set `amount` = `amount` + ' + credit['https://w3id.org/cc#amount'] + " where `source` =  :destination and wallet = '" + config.wallet + "'"
      } else {
        incrementSql = 'UPDATE Ledger set `amount` = `amount` + ' + credit['https://w3id.org/cc#amount'] + ' where `source` =  `source` =  :destination'
      }
    } else {
      if (config.wallet) {
        incrementSql = 'INSERT into Ledger (`source`, `amount`, `currency`, `wallet`) values (:destination, ' + credit['https://w3id.org/cc#amount'] + ", :currency, '" + config.wallet + "')"
      } else {
        incrementSql = 'INSERT into Ledger (`source`, `amount`, `currency`) values (:destination, ' + credit['https://w3id.org/cc#amount'] + ', :currency)'
      }
    }
    debug(incrementSql)
    return sequelize.query(incrementSql, {replacements: { 'destination': credit['https://w3id.org/cc#destination'], 'currency': credit['https://w3id.org/cc#currency'] }})
  }).then(function () {
    debug('Complete')
    // sequelize.close();
    callback(null, 'Complete')
    // hook
  }).catch(function (err) {
    debug('Failed to insert credit.', err)
    callback(err)
  })
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/webcredits/node_modules/webcredits/index.js. Coverage (Term): 59% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
