/root/Targets/vit-academics-cli
└─┬ vit-academics-cli@1.3.1 
  ├─┬ cli-table@0.3.1 
  │ └── colors@1.0.3 
  ├── colors@1.1.2 
  ├── commander@2.11.0 
  ├─┬ jsonfile@2.4.0 
  │ └── graceful-fs@4.1.11 
  ├─┬ needle@0.9.2 
  │ ├─┬ debug@2.6.8 
  │ │ └── ms@2.0.0 
  │ └── iconv-lite@0.4.19 
  └── progress@1.1.8 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/vit-academics-cli/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0549 took 4.6157s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
(function() {
  var Table, app, attUrl, cache, colors, creds, loginUrl, needle, pjson, program, progress;

  program = require("commander");

  Table = require("cli-table");

  colors = require("colors");

  needle = require("needle");

  cache = require("./Cache");

  progress = require("./fancyProgress");

  pjson = require('../package.json');

  app = {};

  creds = {};

  loginUrl = "https://vitacademics-rel.herokuapp.com/api/v2/vellore/login";

  attUrl = "http://vitacademics-rel.herokuapp.com/api/v2/vellore/refresh";

  program.version(pjson.version).option("-r,--reg <reg>", "Enter Registration Number", String).option("-d,--dob <dob>", "Enter date of birth(ddMMyyy or dd/MM/yyyy)", String).option("-m,--mobile <mobile>", "Enter parents mobile number", String).option("-R,--refresh", "Force load from the network").parse(process.argv);

  app.requestLoader = function(url, callback) {
    var cacheData;
    cacheData = cache.get(url, creds);
    if (cacheData && !program.refresh) {
      callback(cacheData);
    } else {
      try {

      } catch (_error) {}
      needle.post(url, creds, {}, function(err, response) {
        if (err) {
          app.showErrorMessage(err);
        } else if (app.checkResponse(response.body)) {
          cache.setCredentials(creds);
          cache.set(url, creds, response.body);
          callback(response.body);
        }
      });
    }
  };

  app.showErrorMessage = function(err) {
    progress.stop();
    return console.log("\n" + err);
  };

  app.checkResponse = function(response) {
    if (response.status.code !== 0) {
      app.showErrorMessage("Enter valid credentials");
      return false;
    }
    return true;
  };

  app.createTable = function(response) {
    var attendance, course, course_json, courses, i, len, message, table, title;
    course_json = {};
    table = new Table({
      head: ["Subject".blue, "Attendance".blue, "Message".blue]
    });
    courses = response.courses;
    for (i = 0, len = courses.length; i < len; i++) {
      course = courses[i];
      title = course.course_title;
      attendance = parseInt(course.attendance["attendance_percentage"]);
      if (attendance >= 80) {
        message = "Go out and explore life".green;
      } else if ((75 <= attendance && attendance < 80)) {
        message = "Safe for now".yellow;
      } else {
        message = "Get your ass to class".red;
      }
      table.push([title, attendance, message]);
    }
    return table.toString();
  };

  app.checkCredentials = function(reg, dob, mobile) {
    dob = app.checkDOB(dob);
    if (!reg && !dob && !mobile) {
      creds = cache.getCredentials();
      if (!creds) {
        console.log("Enter the right credentials");
        return false;
      }
      program.refresh = false;
      return true;
    } else if (!reg) {
      console.log("Enter the registration number");
      return false;
    } else if (!dob) {
      console.log("Enter your date of birth(ddMMyyy or dd/MM/yyyy)");
      return false;
    } else if (!mobile) {
      console.log("Enter parents mobile number");
      return false;
    }
    creds = {
      'regno': reg,
      'dob': dob,
      'mobile': mobile
    };
    return true;
  };

  app.checkDOB = function(dob) {
    var match;
    if (dob) {
      match = dob.match(/(\d{2})\/?(\d{2})\/?(\d{4})/);
      if (match) {
        return match[1] + match[2] + match[3];
      }
    }
    return null;
  };

  if (app.checkCredentials(program.reg, program.dob, program.mobile)) {
    progress.start();
    app.requestLoader(loginUrl, function(response) {
      return app.requestLoader(attUrl, function(response) {
        progress.stop();
        console.log();
        return console.log(app.createTable(response));
      });
    });
  }

  module.exports = app;

}).call(this);
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
