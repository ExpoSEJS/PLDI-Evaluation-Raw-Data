
> ws@0.4.32 install /root/Targets/front-end-guide/node_modules/karma/node_modules/ws
> (node-gyp rebuild 2> builderror.log) || (exit 0)

make: Entering directory '/root/Targets/front-end-guide/node_modules/karma/node_modules/ws/build'
  CXX(target) Release/obj.target/bufferutil/src/bufferutil.o
bufferutil.target.mk:96: recipe for target 'Release/obj.target/bufferutil/src/bufferutil.o' failed
make: Leaving directory '/root/Targets/front-end-guide/node_modules/karma/node_modules/ws/build'

> phantomjs@1.9.20 install /root/Targets/front-end-guide/node_modules/phantomjs
> node install.js

PhantomJS not found on PATH
Downloading https://github.com/Medium/phantomjs/releases/download/v1.9.19/phantomjs-1.9.8-linux-x86_64.tar.bz2
Saving to /root/Targets/front-end-guide/node_modules/phantomjs/phantomjs/phantomjs-1.9.8-linux-x86_64.tar.bz2
Receiving...

Received 12854K total.
Extracting tar contents (via spawned process)
Removing /root/Targets/front-end-guide/node_modules/phantomjs/lib/phantom
Copying extracted folder /root/Targets/front-end-guide/node_modules/phantomjs/phantomjs/phantomjs-1.9.8-linux-x86_64.tar.bz2-extract-1506045664432/phantomjs-1.9.8-linux-x86_64 -> /root/Targets/front-end-guide/node_modules/phantomjs/lib/phantom
Writing location.js file
Done. Phantomjs binary available at /root/Targets/front-end-guide/node_modules/phantomjs/lib/phantom/bin/phantomjs

> gifsicle@3.0.4 postinstall /root/Targets/front-end-guide/node_modules/gifsicle
> node lib/install.js


> jpegtran-bin@3.2.0 postinstall /root/Targets/front-end-guide/node_modules/jpegtran-bin
> node lib/install.js


> optipng-bin@3.1.4 postinstall /root/Targets/front-end-guide/node_modules/optipng-bin
> node lib/install.js


> pngquant-bin@3.1.1 postinstall /root/Targets/front-end-guide/node_modules/pngquant-bin
> node lib/install.js

/root/Targets/front-end-guide
└─┬ front-end-guide@0.5.6 
  ├─┬ bower@1.4.1 
  │ ├── abbrev@1.1.0 
  │ ├── archy@1.0.0 
  │ ├─┬ bower-config@0.6.2 
  │ │ ├── graceful-fs@2.0.3 
  │ │ ├── mout@0.9.1 
  │ │ └── osenv@0.0.3 
  │ ├── bower-endpoint-parser@0.2.2 
  │ ├─┬ bower-json@0.4.0 
  │ │ ├── deep-extend@0.2.11 
  │ │ ├── graceful-fs@2.0.3 
  │ │ └── intersect@0.0.3 
  │ ├── bower-logger@0.2.2 
  │ ├─┬ bower-registry-client@0.3.0 
  │ │ ├── async@0.2.10 
  │ │ ├── graceful-fs@2.0.3 
  │ │ ├── lru-cache@2.3.1 
  │ │ ├── mkdirp@0.3.5 
  │ │ ├─┬ request@2.51.0 
  │ │ │ ├── caseless@0.8.0 
  │ │ │ ├─┬ hawk@1.1.1 
  │ │ │ │ ├── boom@0.4.2 
  │ │ │ │ ├── cryptiles@0.2.2 
  │ │ │ │ ├── hoek@0.9.1 
  │ │ │ │ └── sntp@0.2.4 
  │ │ │ ├── mime-types@1.0.2 
  │ │ │ └── oauth-sign@0.5.0 
  │ │ ├── request-replay@0.2.0 
  │ │ └── rimraf@2.2.8 
  │ ├─┬ cardinal@0.4.4 
  │ │ ├── ansicolors@0.2.1 
  │ │ └─┬ redeyed@0.4.4 
  │ │   └── esprima@1.0.4 
  │ ├── chmodr@0.1.0 
  │ ├─┬ configstore@0.3.2 
  │ │ ├─┬ js-yaml@3.10.0 
  │ │ │ └── esprima@4.0.0 
  │ │ ├─┬ osenv@0.1.4 
  │ │ │ └── os-tmpdir@1.0.2 
  │ │ ├── uuid@2.0.3 
  │ │ └── xdg-basedir@1.0.1 
  │ ├─┬ decompress-zip@0.1.0 
  │ │ ├─┬ binary@0.3.0 
  │ │ │ ├── buffers@0.1.1 
  │ │ │ └─┬ chainsaw@0.1.0 
  │ │ │   └── traverse@0.3.9 
  │ │ ├── mkpath@0.1.0 
  │ │ ├── readable-stream@1.1.14 
  │ │ └─┬ touch@0.0.3 
  │ │   └── nopt@1.0.10 
  │ ├─┬ fstream@1.0.11 
  │ │ ├── graceful-fs@4.1.11 
  │ │ └── inherits@2.0.3 
  │ ├─┬ fstream-ignore@1.0.5 
  │ │ └── minimatch@3.0.4 
  │ ├─┬ github@0.2.4 
  │ │ └── mime@1.4.0 
  │ ├─┬ glob@4.5.3 
  │ │ ├─┬ inflight@1.0.6 
  │ │ │ └── wrappy@1.0.2 
  │ │ └── once@1.4.0 
  │ ├─┬ graceful-fs@3.0.11 
  │ │ └── natives@1.1.0 
  │ ├─┬ handlebars@2.0.0 
  │ │ ├── optimist@0.3.7 
  │ │ └─┬ uglify-js@2.3.6 
  │ │   └── optimist@0.3.7 
  │ ├─┬ inquirer@0.8.0 
  │ │ ├─┬ chalk@0.5.1 
  │ │ │ ├── ansi-styles@1.1.0 
  │ │ │ ├─┬ has-ansi@0.1.0 
  │ │ │ │ └── ansi-regex@0.2.1 
  │ │ │ ├─┬ strip-ansi@0.3.0 
  │ │ │ │ └── ansi-regex@0.2.1 
  │ │ │ └── supports-color@0.2.0 
  │ │ ├─┬ cli-color@0.3.3 
  │ │ │ ├── d@0.1.1 
  │ │ │ ├─┬ es5-ext@0.10.30 
  │ │ │ │ ├─┬ es6-iterator@2.0.1 
  │ │ │ │ │ └── d@1.0.0 
  │ │ │ │ └─┬ es6-symbol@3.1.1 
  │ │ │ │   └── d@1.0.0 
  │ │ │ ├─┬ memoizee@0.3.10 
  │ │ │ │ ├─┬ es6-weak-map@0.1.4 
  │ │ │ │ │ ├── es6-iterator@0.1.3 
  │ │ │ │ │ └── es6-symbol@2.0.1 
  │ │ │ │ ├─┬ event-emitter@0.3.5 
  │ │ │ │ │ └── d@1.0.0 
  │ │ │ │ ├── lru-queue@0.1.0 
  │ │ │ │ └── next-tick@0.2.2 
  │ │ │ └─┬ timers-ext@0.1.2 
  │ │ │   └── next-tick@1.0.0 
  │ │ └── mute-stream@0.0.4 
  │ ├─┬ insight@0.5.3 
  │ │ ├── async@0.9.2 
  │ │ ├─┬ lodash.debounce@3.1.1 
  │ │ │ └── lodash._getnative@3.9.1 
  │ │ ├─┬ os-name@1.0.3 
  │ │ │ ├── osx-release@1.1.0 
  │ │ │ └─┬ win-release@1.1.1 
  │ │ │   └── semver@5.4.1 
  │ │ └─┬ tough-cookie@0.12.1 
  │ │   └── punycode@1.4.1 
  │ ├── is-root@1.0.0 
  │ ├── junk@1.0.3 
  │ ├── lockfile@1.0.3 
  │ ├── lru-cache@2.7.3 
  │ ├── mout@0.11.1 
  │ ├── nopt@3.0.6 
  │ ├── opn@1.0.2 
  │ ├─┬ p-throttler@0.1.1 
  │ │ └── q@0.9.7 
  │ ├─┬ promptly@0.2.0 
  │ │ └── read@1.0.7 
  │ ├─┬ request@2.53.0 
  │ │ ├── aws-sign2@0.5.0 
  │ │ ├── bl@0.9.5 
  │ │ ├── caseless@0.9.0 
  │ │ ├─┬ combined-stream@0.0.7 
  │ │ │ └── delayed-stream@0.0.5 
  │ │ ├── forever-agent@0.5.2 
  │ │ ├─┬ form-data@0.2.0 
  │ │ │ ├── async@0.9.2 
  │ │ │ └── mime-types@2.0.14 
  │ │ ├─┬ hawk@2.3.1 
  │ │ │ ├── boom@2.10.1 
  │ │ │ ├── cryptiles@2.0.5 
  │ │ │ ├── hoek@2.16.3 
  │ │ │ └── sntp@1.0.9 
  │ │ ├─┬ http-signature@0.10.1 
  │ │ │ ├── asn1@0.1.11 
  │ │ │ ├── assert-plus@0.1.5 
  │ │ │ └── ctype@0.5.3 
  │ │ ├── isstream@0.1.2 
  │ │ ├── json-stringify-safe@5.0.1 
  │ │ ├─┬ mime-types@2.0.14 
  │ │ │ └── mime-db@1.12.0 
  │ │ ├── node-uuid@1.4.8 
  │ │ ├── oauth-sign@0.6.0 
  │ │ ├── qs@2.3.3 
  │ │ ├── stringstream@0.0.5 
  │ │ ├── tough-cookie@2.3.3 
  │ │ └── tunnel-agent@0.4.3 
  │ ├─┬ request-progress@0.3.1 
  │ │ └── throttleit@0.0.2 
  │ ├── retry@0.6.1 
  │ ├── semver@2.3.2 
  │ ├─┬ shell-quote@1.6.1 
  │ │ ├── array-filter@0.0.1 
  │ │ ├── array-map@0.0.0 
  │ │ └── array-reduce@0.0.0 
  │ ├── stringify-object@1.0.1 
  │ ├─┬ tar-fs@1.15.3 
  │ │ ├── chownr@1.0.1 
  │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ └── minimist@0.0.8 
  │ │ ├─┬ pump@1.0.2 
  │ │ │ └── end-of-stream@1.4.0 
  │ │ └─┬ tar-stream@1.5.4 
  │ │   ├── bl@1.2.1 
  │ │   └─┬ readable-stream@2.3.3 
  │ │     ├── isarray@1.0.0 
  │ │     └── string_decoder@1.0.3 
  │ ├── tmp@0.0.24 
  │ ├─┬ update-notifier@0.3.2 
  │ │ ├── is-npm@1.0.0 
  │ │ ├─┬ latest-version@1.0.1 
  │ │ │ └─┬ package-json@1.2.0 
  │ │ │   ├─┬ got@3.3.1 
  │ │ │   │ ├── infinity-agent@2.0.3 
  │ │ │   │ ├── is-redirect@1.0.0 
  │ │ │   │ ├── lowercase-keys@1.0.0 
  │ │ │   │ ├── nested-error-stacks@1.0.2 
  │ │ │   │ ├── object-assign@3.0.0 
  │ │ │   │ ├── prepend-http@1.0.4 
  │ │ │   │ └── timed-out@2.0.0 
  │ │ │   └─┬ registry-url@3.1.0 
  │ │ │     └─┬ rc@1.2.1 
  │ │ │       ├── deep-extend@0.4.2 
  │ │ │       ├── ini@1.3.4 
  │ │ │       ├── minimist@1.2.0 
  │ │ │       └── strip-json-comments@2.0.1 
  │ │ └─┬ semver-diff@2.1.0 
  │ │   └── semver@5.4.1 
  │ ├── user-home@1.1.1 
  │ └─┬ which@1.3.0 
  │   └── isexe@2.0.0 
  ├─┬ browser-sync@2.6.4 
  │ ├─┬ anymatch@1.3.2 
  │ │ ├─┬ micromatch@2.3.11 
  │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ ├── array-unique@0.2.1 
  │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │   ├─┬ isobject@2.1.0 
  │ │ │ │ │   │ └── isarray@1.0.0 
  │ │ │ │ │   ├─┬ randomatic@1.1.7 
  │ │ │ │ │   │ ├─┬ is-number@3.0.0 
  │ │ │ │ │   │ │ └── kind-of@3.2.2 
  │ │ │ │ │   │ └── kind-of@4.0.0 
  │ │ │ │ │   └── repeat-string@1.6.1 
  │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ ├── extglob@0.3.2 
  │ │ │ ├── filename-regex@2.0.1 
  │ │ │ ├── is-extglob@1.0.0 
  │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ ├─┬ for-own@0.1.5 
  │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ ├── glob-base@0.3.0 
  │ │ │ │ └── is-dotfile@1.0.3 
  │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │     └── is-primitive@2.0.0 
  │ │ └─┬ normalize-path@2.1.1 
  │ │   └── remove-trailing-separator@1.1.0 
  │ ├── async-each-series@0.1.1 
  │ ├─┬ browser-sync-client@2.5.1 
  │ │ ├── etag@1.8.1 
  │ │ └── fresh@0.3.0 
  │ ├─┬ browser-sync-ui@0.5.19 
  │ │ ├── connect-history-api-fallback@1.3.0 
  │ │ ├─┬ stream-throttle@0.1.3 
  │ │ │ ├── commander@2.11.0 
  │ │ │ └── limiter@1.1.2 
  │ │ └─┬ weinre@2.0.0-pre-I0Z7U9OV 
  │ │   └─┬ express@2.5.11 
  │ │     ├─┬ connect@1.9.2 
  │ │     │ └── formidable@1.0.17 
  │ │     ├── mime@1.2.4 
  │ │     ├── mkdirp@0.3.0 
  │ │     └── qs@0.4.2 
  │ ├─┬ chokidar@1.7.0 
  │ │ ├── async-each@1.0.1 
  │ │ ├── glob-parent@2.0.0 
  │ │ ├─┬ is-binary-path@1.0.1 
  │ │ │ └── binary-extensions@1.10.0 
  │ │ ├── is-glob@2.0.1 
  │ │ ├── path-is-absolute@1.0.1 
  │ │ └─┬ readdirp@2.1.0 
  │ │   ├── graceful-fs@4.1.11 
  │ │   ├── minimatch@3.0.4 
  │ │   └─┬ readable-stream@2.3.3 
  │ │     ├── isarray@1.0.0 
  │ │     └── string_decoder@1.0.3 
  │ ├─┬ connect@3.6.4 
  │ │ ├─┬ debug@2.6.8 
  │ │ │ └── ms@2.0.0 
  │ │ ├─┬ finalhandler@1.0.5 
  │ │ │ ├─┬ on-finished@2.3.0 
  │ │ │ │ └── ee-first@1.1.1 
  │ │ │ ├── statuses@1.3.1 
  │ │ │ └── unpipe@1.0.0 
  │ │ ├── parseurl@1.3.2 
  │ │ └── utils-merge@1.0.1 
  │ ├── dev-ip@1.0.1 
  │ ├─┬ easy-extender@2.3.2 
  │ │ └── lodash@3.10.1 
  │ ├─┬ eazy-logger@2.1.3 
  │ │ ├─┬ lodash.clonedeep@4.3.1 
  │ │ │ └── lodash._baseclone@4.5.7 
  │ │ ├─┬ opt-merger@1.1.1 
  │ │ │ └── lodash@3.10.1 
  │ │ └─┬ tfunk@3.1.0 
  │ │   ├─┬ chalk@1.1.3 
  │ │   │ ├─┬ has-ansi@2.0.0 
  │ │   │ │ └── ansi-regex@2.1.1 
  │ │   │ ├── strip-ansi@3.0.1 
  │ │   │ └── supports-color@2.0.0 
  │ │   └── object-path@0.9.2 
  │ ├── emitter-steward@0.0.1 
  │ ├─┬ foxy@10.1.2 
  │ │ ├── cookie@0.1.5 
  │ │ └─┬ http-proxy@1.16.2 
  │ │   ├── eventemitter3@1.2.0 
  │ │   └── requires-port@1.0.0 
  │ ├── immutable@3.8.1 
  │ ├─┬ localtunnel@1.8.3 
  │ │ ├── openurl@1.1.1 
  │ │ ├─┬ request@2.81.0 
  │ │ │ ├── aws-sign2@0.6.0 
  │ │ │ ├── aws4@1.6.0 
  │ │ │ ├── caseless@0.12.0 
  │ │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ │ └── delayed-stream@1.0.0 
  │ │ │ ├── forever-agent@0.6.1 
  │ │ │ ├─┬ form-data@2.1.4 
  │ │ │ │ └── asynckit@0.4.0 
  │ │ │ ├─┬ har-validator@4.2.1 
  │ │ │ │ ├─┬ ajv@4.11.8 
  │ │ │ │ │ ├── co@4.6.0 
  │ │ │ │ │ └── json-stable-stringify@1.0.1 
  │ │ │ │ └── har-schema@1.0.5 
  │ │ │ ├─┬ hawk@3.1.3 
  │ │ │ │ ├── boom@2.10.1 
  │ │ │ │ ├── cryptiles@2.0.5 
  │ │ │ │ ├── hoek@2.16.3 
  │ │ │ │ └── sntp@1.0.9 
  │ │ │ ├─┬ http-signature@1.1.1 
  │ │ │ │ ├── assert-plus@0.2.0 
  │ │ │ │ ├─┬ jsprim@1.4.1 
  │ │ │ │ │ ├── assert-plus@1.0.0 
  │ │ │ │ │ ├── extsprintf@1.3.0 
  │ │ │ │ │ ├── json-schema@0.2.3 
  │ │ │ │ │ └─┬ verror@1.10.0 
  │ │ │ │ │   └── assert-plus@1.0.0 
  │ │ │ │ └─┬ sshpk@1.13.1 
  │ │ │ │   ├── asn1@0.2.3 
  │ │ │ │   ├── assert-plus@1.0.0 
  │ │ │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │ │   ├─┬ dashdash@1.14.1 
  │ │ │ │   │ └── assert-plus@1.0.0 
  │ │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │ │   ├─┬ getpass@0.1.7 
  │ │ │ │   │ └── assert-plus@1.0.0 
  │ │ │ │   ├── jsbn@0.1.1 
  │ │ │ │   └── tweetnacl@0.14.5 
  │ │ │ ├── is-typedarray@1.0.0 
  │ │ │ ├─┬ mime-types@2.1.17 
  │ │ │ │ └── mime-db@1.30.0 
  │ │ │ ├── oauth-sign@0.8.2 
  │ │ │ ├── performance-now@0.2.0 
  │ │ │ ├── qs@6.4.0 
  │ │ │ ├── safe-buffer@5.1.1 
  │ │ │ ├── tunnel-agent@0.6.0 
  │ │ │ └── uuid@3.1.0 
  │ │ └─┬ yargs@3.29.0 
  │ │   ├── camelcase@1.2.1 
  │ │   ├─┬ cliui@3.2.0 
  │ │   │ ├─┬ string-width@1.0.2 
  │ │   │ │ ├── code-point-at@1.1.0 
  │ │   │ │ ├─┬ is-fullwidth-code-point@1.0.0 
  │ │   │ │ │ └── number-is-nan@1.0.1 
  │ │   │ │ └─┬ strip-ansi@3.0.1 
  │ │   │ │   └── ansi-regex@2.1.1 
  │ │   │ ├─┬ strip-ansi@3.0.1 
  │ │   │ │ └── ansi-regex@2.1.1 
  │ │   │ └─┬ wrap-ansi@2.1.0 
  │ │   │   └─┬ strip-ansi@3.0.1 
  │ │   │     └── ansi-regex@2.1.1 
  │ │   ├─┬ os-locale@1.4.0 
  │ │   │ └─┬ lcid@1.0.0 
  │ │   │   └── invert-kv@1.0.0 
  │ │   ├── window-size@0.1.4 
  │ │   └── y18n@3.2.1 
  │ ├── lodash@3.10.1 
  │ ├─┬ meow@3.7.0 
  │ │ ├─┬ camelcase-keys@2.1.0 
  │ │ │ └── camelcase@2.1.1 
  │ │ ├── decamelize@1.2.0 
  │ │ ├─┬ loud-rejection@1.6.0 
  │ │ │ ├─┬ currently-unhandled@0.4.1 
  │ │ │ │ └── array-find-index@1.0.2 
  │ │ │ └── signal-exit@3.0.2 
  │ │ ├── map-obj@1.0.1 
  │ │ ├── minimist@1.2.0 
  │ │ ├─┬ normalize-package-data@2.4.0 
  │ │ │ ├── hosted-git-info@2.5.0 
  │ │ │ ├─┬ is-builtin-module@1.0.0 
  │ │ │ │ └── builtin-modules@1.1.1 
  │ │ │ └─┬ validate-npm-package-license@3.0.1 
  │ │ │   ├─┬ spdx-correct@1.0.2 
  │ │ │   │ └── spdx-license-ids@1.2.2 
  │ │ │   └── spdx-expression-parse@1.0.4 
  │ │ ├── object-assign@4.1.1 
  │ │ ├─┬ read-pkg-up@1.0.1 
  │ │ │ ├─┬ find-up@1.1.2 
  │ │ │ │ └── path-exists@2.1.0 
  │ │ │ └─┬ read-pkg@1.1.0 
  │ │ │   ├─┬ load-json-file@1.1.0 
  │ │ │   │ ├── graceful-fs@4.1.11 
  │ │ │   │ ├─┬ parse-json@2.2.0 
  │ │ │   │ │ └─┬ error-ex@1.3.1 
  │ │ │   │ │   └── is-arrayish@0.2.1 
  │ │ │   │ ├── pify@2.3.0 
  │ │ │   │ └── strip-bom@2.0.0 
  │ │ │   └─┬ path-type@1.1.0 
  │ │ │     └── graceful-fs@4.1.11 
  │ │ ├─┬ redent@1.0.0 
  │ │ │ ├─┬ indent-string@2.1.0 
  │ │ │ │ └─┬ repeating@2.0.1 
  │ │ │ │   └── is-finite@1.0.2 
  │ │ │ └── strip-indent@1.0.1 
  │ │ └── trim-newlines@1.0.0 
  │ ├─┬ portscanner@1.2.0 
  │ │ └── async@1.5.2 
  │ ├── query-string@1.0.1 
  │ ├── resp-modifier@2.1.0 
  │ ├─┬ serve-index@1.9.0 
  │ │ ├─┬ accepts@1.3.4 
  │ │ │ ├─┬ mime-types@2.1.17 
  │ │ │ │ └── mime-db@1.30.0 
  │ │ │ └── negotiator@0.6.1 
  │ │ ├── batch@0.6.1 
  │ │ ├── escape-html@1.0.3 
  │ │ ├─┬ http-errors@1.6.2 
  │ │ │ ├── depd@1.1.1 
  │ │ │ └── setprototypeof@1.0.3 
  │ │ └─┬ mime-types@2.1.17 
  │ │   └── mime-db@1.30.0 
  │ ├─┬ serve-static@1.12.5 
  │ │ ├── encodeurl@1.0.1 
  │ │ └─┬ send@0.15.5 
  │ │   ├── destroy@1.0.4 
  │ │   ├── fresh@0.5.2 
  │ │   ├── mime@1.3.4 
  │ │   └── range-parser@1.2.0 
  │ ├─┬ socket.io@1.7.4 
  │ │ ├─┬ debug@2.3.3 
  │ │ │ └── ms@0.7.2 
  │ │ ├─┬ engine.io@1.8.4 
  │ │ │ ├─┬ accepts@1.3.3 
  │ │ │ │ └─┬ mime-types@2.1.17 
  │ │ │ │   └── mime-db@1.30.0 
  │ │ │ ├── base64id@1.0.0 
  │ │ │ ├── cookie@0.3.1 
  │ │ │ ├─┬ debug@2.3.3 
  │ │ │ │ └── ms@0.7.2 
  │ │ │ ├─┬ engine.io-parser@1.3.2 
  │ │ │ │ ├── after@0.8.2 
  │ │ │ │ ├── arraybuffer.slice@0.0.6 
  │ │ │ │ ├── base64-arraybuffer@0.1.5 
  │ │ │ │ ├── blob@0.0.4 
  │ │ │ │ └── wtf-8@1.0.0 
  │ │ │ └─┬ ws@1.1.4 
  │ │ │   ├── options@0.0.6 
  │ │ │   └── ultron@1.0.2 
  │ │ ├── has-binary@0.1.7 
  │ │ ├── object-assign@4.1.0 
  │ │ ├─┬ socket.io-adapter@0.5.0 
  │ │ │ └─┬ debug@2.3.3 
  │ │ │   └── ms@0.7.2 
  │ │ ├─┬ socket.io-client@1.7.4 
  │ │ │ ├── backo2@1.0.2 
  │ │ │ ├── component-bind@1.0.0 
  │ │ │ ├── component-emitter@1.2.1 
  │ │ │ ├─┬ debug@2.3.3 
  │ │ │ │ └── ms@0.7.2 
  │ │ │ ├─┬ engine.io-client@1.8.4 
  │ │ │ │ ├── component-emitter@1.2.1 
  │ │ │ │ ├── component-inherit@0.0.3 
  │ │ │ │ ├─┬ debug@2.3.3 
  │ │ │ │ │ └── ms@0.7.2 
  │ │ │ │ ├── has-cors@1.1.0 
  │ │ │ │ ├── parsejson@0.0.3 
  │ │ │ │ ├── parseqs@0.0.5 
  │ │ │ │ ├── ws@1.1.2 
  │ │ │ │ ├── xmlhttprequest-ssl@1.5.3 
  │ │ │ │ └── yeast@0.1.2 
  │ │ │ ├── indexof@0.0.1 
  │ │ │ ├── object-component@0.0.3 
  │ │ │ ├─┬ parseuri@0.0.5 
  │ │ │ │ └─┬ better-assert@1.0.2 
  │ │ │ │   └── callsite@1.0.0 
  │ │ │ └── to-array@0.1.4 
  │ │ └─┬ socket.io-parser@2.3.1 
  │ │   ├── component-emitter@1.1.2 
  │ │   ├─┬ debug@2.2.0 
  │ │   │ └── ms@0.7.1 
  │ │   └── json3@3.3.2 
  │ └── ua-parser-js@0.7.14 
  ├─┬ chalk@1.0.0 
  │ ├── ansi-styles@2.2.1 
  │ ├── escape-string-regexp@1.0.5 
  │ ├─┬ has-ansi@1.0.3 
  │ │ └── get-stdin@4.0.1 
  │ ├── strip-ansi@2.0.1 
  │ └── supports-color@1.3.1 
  ├─┬ del@1.1.1 
  │ ├─┬ each-async@1.1.1 
  │ │ ├── onetime@1.1.0 
  │ │ └── set-immediate-shim@1.0.1 
  │ ├─┬ globby@1.2.0 
  │ │ ├── array-union@1.0.2 
  │ │ └── async@0.9.2 
  │ ├── is-path-cwd@1.0.0 
  │ ├─┬ is-path-in-cwd@1.0.0 
  │ │ └─┬ is-path-inside@1.0.0 
  │ │   └── path-is-inside@1.0.2 
  │ └── object-assign@2.1.1 
  ├─┬ gulp@3.8.11 
  │ ├─┬ chalk@0.5.1 
  │ │ ├── ansi-styles@1.1.0 
  │ │ ├─┬ has-ansi@0.1.0 
  │ │ │ └── ansi-regex@0.2.1 
  │ │ ├── strip-ansi@0.3.0 
  │ │ └── supports-color@0.2.0 
  │ ├── deprecated@0.0.1 
  │ ├── interpret@0.3.10 
  │ ├─┬ liftoff@2.3.0 
  │ │ ├── extend@3.0.1 
  │ │ ├─┬ findup-sync@0.4.3 
  │ │ │ ├─┬ detect-file@0.1.0 
  │ │ │ │ └── fs-exists-sync@0.1.0 
  │ │ │ └─┬ resolve-dir@0.1.1 
  │ │ │   ├── expand-tilde@1.2.2 
  │ │ │   └─┬ global-modules@0.2.3 
  │ │ │     ├── global-prefix@0.1.5 
  │ │ │     └── is-windows@0.2.0 
  │ │ ├─┬ fined@1.1.0 
  │ │ │ ├─┬ expand-tilde@2.0.2 
  │ │ │ │ └─┬ homedir-polyfill@1.0.1 
  │ │ │ │   └── parse-passwd@1.0.0 
  │ │ │ ├─┬ is-plain-object@2.0.4 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ ├─┬ object.defaults@1.1.0 
  │ │ │ │ ├── array-each@1.0.1 
  │ │ │ │ ├── array-slice@1.0.0 
  │ │ │ │ ├── for-own@1.0.0 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ ├─┬ object.pick@1.3.0 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ └─┬ parse-filepath@1.0.1 
  │ │ │   ├─┬ is-absolute@0.2.6 
  │ │ │   │ └─┬ is-relative@0.2.1 
  │ │ │   │   └─┬ is-unc-path@0.1.2 
  │ │ │   │     └── unc-path-regex@0.1.2 
  │ │ │   ├── map-cache@0.2.2 
  │ │ │   └─┬ path-root@0.1.1 
  │ │ │     └── path-root-regex@0.1.2 
  │ │ ├── flagged-respawn@0.3.2 
  │ │ ├── lodash.isplainobject@4.0.6 
  │ │ ├── lodash.isstring@4.0.1 
  │ │ ├── lodash.mapvalues@4.6.0 
  │ │ ├── rechoir@0.6.2 
  │ │ └─┬ resolve@1.4.0 
  │ │   └── path-parse@1.0.5 
  │ ├─┬ orchestrator@0.3.8 
  │ │ ├─┬ end-of-stream@0.1.5 
  │ │ │ └── once@1.3.3 
  │ │ ├── sequencify@0.0.7 
  │ │ └── stream-consume@0.1.0 
  │ ├── pretty-hrtime@0.2.2 
  │ ├── semver@4.3.6 
  │ ├─┬ tildify@1.2.0 
  │ │ └── os-homedir@1.0.2 
  │ ├── v8flags@2.1.1 
  │ └─┬ vinyl-fs@0.3.14 
  │   ├─┬ defaults@1.0.3 
  │   │ └── clone@1.0.2 
  │   ├─┬ glob-stream@3.1.18 
  │   │ ├─┬ glob2base@0.0.12 
  │   │ │ └── find-index@0.1.1 
  │   │ ├── ordered-read-streams@0.1.0 
  │   │ ├── through2@0.6.5 
  │   │ └── unique-stream@1.0.0 
  │   ├─┬ glob-watcher@0.0.6 
  │   │ └─┬ gaze@0.5.2 
  │   │   └─┬ globule@0.1.0 
  │   │     ├─┬ glob@3.1.21 
  │   │     │ ├── graceful-fs@1.2.3 
  │   │     │ └── inherits@1.0.2 
  │   │     ├── lodash@1.0.2 
  │   │     └── minimatch@0.2.14 
  │   ├── strip-bom@1.0.0 
  │   └── through2@0.6.5 
  ├─┬ gulp-autoprefixer@2.1.0 
  │ ├─┬ autoprefixer-core@5.2.1 
  │ │ ├── browserslist@0.4.0 
  │ │ ├── caniuse-db@1.0.30000734 
  │ │ ├── num2fraction@1.2.2 
  │ │ └─┬ postcss@4.1.16 
  │ │   ├── es6-promise@2.3.0 
  │ │   ├── js-base64@2.1.9 
  │ │   └── source-map@0.4.4 
  │ ├─┬ through2@0.6.5 
  │ │ └── readable-stream@1.0.34 
  │ └── vinyl-sourcemaps-apply@0.1.4 
  ├─┬ gulp-cached@1.0.4 
  │ ├─┬ lodash.defaults@2.4.1 
  │ │ ├── lodash._objecttypes@2.4.1 
  │ │ └─┬ lodash.keys@2.4.1 
  │ │   ├── lodash._isnative@2.4.1 
  │ │   ├── lodash._shimkeys@2.4.1 
  │ │   └── lodash.isobject@2.4.1 
  │ └─┬ through2@0.5.1 
  │   └── xtend@3.0.0 
  ├─┬ gulp-filter@2.0.2 
  │ ├─┬ merge-stream@0.1.8 
  │ │ └── through2@0.6.5 
  │ ├─┬ multimatch@2.1.0 
  │ │ ├── arrify@1.0.1 
  │ │ └── minimatch@3.0.4 
  │ ├── plexer@0.0.3 
  │ └── through2@0.6.5 
  ├─┬ gulp-if@1.2.5 
  │ ├─┬ gulp-match@0.2.1 
  │ │ └── minimatch@1.0.0 
  │ ├─┬ ternary-stream@1.2.3 
  │ │ ├─┬ duplexer2@0.0.2 
  │ │ │ └── readable-stream@1.1.14 
  │ │ ├── fork-stream@0.0.4 
  │ │ └── through2@0.6.5 
  │ └── through2@0.6.5 
  ├─┬ gulp-imagemin@2.2.1 
  │ ├─┬ imagemin@3.2.2 
  │ │ ├─┬ buffer-to-vinyl@1.1.0 
  │ │ │ ├── file-type@3.9.0 
  │ │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ │ ├── isarray@1.0.0 
  │ │ │ │ └── string_decoder@1.0.3 
  │ │ │ └─┬ vinyl@1.2.0 
  │ │ │   └── clone@1.0.2 
  │ │ ├─┬ imagemin-gifsicle@4.2.0 
  │ │ │ ├── gifsicle@3.0.4 
  │ │ │ ├── is-gif@1.0.0 
  │ │ │ └── through2@0.6.5 
  │ │ ├─┬ imagemin-jpegtran@4.3.2 
  │ │ │ ├── is-jpg@1.0.0 
  │ │ │ ├── jpegtran-bin@3.2.0 
  │ │ │ └─┬ through2@2.0.3 
  │ │ │   └─┬ readable-stream@2.3.3 
  │ │ │     ├── isarray@1.0.0 
  │ │ │     └── string_decoder@1.0.3 
  │ │ ├─┬ imagemin-optipng@4.3.0 
  │ │ │ ├── exec-buffer@2.0.1 
  │ │ │ ├── optipng-bin@3.1.4 
  │ │ │ └── through2@0.6.5 
  │ │ ├─┬ imagemin-svgo@4.2.1 
  │ │ │ ├── is-svg@1.1.1 
  │ │ │ ├─┬ svgo@0.6.6 
  │ │ │ │ ├── coa@1.0.4 
  │ │ │ │ ├─┬ csso@2.0.0 
  │ │ │ │ │ ├─┬ clap@1.2.3 
  │ │ │ │ │ │ └─┬ chalk@1.1.3 
  │ │ │ │ │ │   ├─┬ has-ansi@2.0.0 
  │ │ │ │ │ │   │ └── ansi-regex@2.1.1 
  │ │ │ │ │ │   ├── strip-ansi@3.0.1 
  │ │ │ │ │ │   └── supports-color@2.0.0 
  │ │ │ │ │ └── source-map@0.5.7 
  │ │ │ │ ├─┬ js-yaml@3.6.1 
  │ │ │ │ │ └── esprima@2.7.3 
  │ │ │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ │ │ └── minimist@0.0.8 
  │ │ │ │ ├── sax@1.2.4 
  │ │ │ │ └── whet.extend@0.9.9 
  │ │ │ └─┬ through2@2.0.3 
  │ │ │   └─┬ readable-stream@2.3.3 
  │ │ │     ├── isarray@1.0.0 
  │ │ │     └── string_decoder@1.0.3 
  │ │ ├── optional@0.1.4 
  │ │ ├── path-exists@1.0.0 
  │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ ├── isarray@1.0.0 
  │ │ │ ├── process-nextick-args@1.0.7 
  │ │ │ ├── string_decoder@1.0.3 
  │ │ │ └── util-deprecate@1.0.2 
  │ │ ├─┬ stream-combiner2@1.1.1 
  │ │ │ ├── duplexer2@0.1.4 
  │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │   ├── isarray@1.0.0 
  │ │ │   └── string_decoder@1.0.3 
  │ │ └─┬ vinyl-fs@1.0.0 
  │ │   ├─┬ duplexify@3.5.1 
  │ │   │ ├─┬ readable-stream@2.3.3 
  │ │   │ │ ├── isarray@1.0.0 
  │ │   │ │ └── string_decoder@1.0.3 
  │ │   │ └── stream-shift@1.0.0 
  │ │   ├─┬ glob-stream@4.1.1 
  │ │   │ └─┬ unique-stream@2.2.1 
  │ │   │   └─┬ through2-filter@2.0.0 
  │ │   │     └─┬ through2@2.0.3 
  │ │   │       └─┬ readable-stream@2.3.3 
  │ │   │         ├── isarray@1.0.0 
  │ │   │         └── string_decoder@1.0.3 
  │ │   ├── glob-watcher@0.0.8 
  │ │   ├── strip-bom@1.0.0 
  │ │   └─┬ through2@0.6.5 
  │ │     └─┬ readable-stream@1.0.34 
  │ │       ├── isarray@0.0.1 
  │ │       └── string_decoder@0.10.31 
  │ ├── pretty-bytes@1.0.4 
  │ └─┬ through2-concurrent@0.3.1 
  │   └── through2@0.6.5 
  ├─┬ gulp-jscs@1.6.0 
  │ ├─┬ jscs@1.13.1 
  │ │ ├─┬ cli-table@0.3.1 
  │ │ │ └── colors@1.0.3 
  │ │ ├── commander@2.6.0 
  │ │ ├── esprima@1.2.5 
  │ │ ├── esprima-harmony-jscs@1.1.0-bin 
  │ │ ├── estraverse@1.9.3 
  │ │ ├── exit@0.1.2 
  │ │ ├── glob@5.0.15 
  │ │ ├─┬ lodash.assign@3.0.0 
  │ │ │ ├── lodash._baseassign@3.2.0 
  │ │ │ └─┬ lodash._createassigner@3.1.1 
  │ │ │   └── lodash._bindcallback@3.0.1 
  │ │ ├── pathval@0.1.1 
  │ │ ├─┬ prompt@0.2.14 
  │ │ │ ├── pkginfo@0.4.1 
  │ │ │ ├── revalidator@0.1.8 
  │ │ │ └─┬ winston@0.8.3 
  │ │ │   ├── colors@0.6.2 
  │ │ │   ├── cycle@1.0.3 
  │ │ │   ├── eyes@0.1.8 
  │ │ │   ├── pkginfo@0.3.1 
  │ │ │   └── stack-trace@0.0.10 
  │ │ ├── strip-json-comments@1.0.4 
  │ │ ├── vow@0.4.16 
  │ │ ├─┬ vow-fs@0.3.6 
  │ │ │ ├─┬ glob@7.1.2 
  │ │ │ │ ├── fs.realpath@1.0.0 
  │ │ │ │ └── minimatch@3.0.4 
  │ │ │ └── vow-queue@0.4.2 
  │ │ └─┬ xmlbuilder@2.6.5 
  │ │   └── lodash@3.10.1 
  │ └── through2@0.6.5 
  ├─┬ gulp-jshint@1.10.0 
  │ ├─┬ jshint@2.9.5 
  │ │ ├─┬ cli@1.0.1 
  │ │ │ └─┬ glob@7.1.2 
  │ │ │   └── minimatch@3.0.4 
  │ │ ├─┬ console-browserify@1.1.0 
  │ │ │ └── date-now@0.1.4 
  │ │ ├─┬ htmlparser2@3.8.3 
  │ │ │ ├── domelementtype@1.3.0 
  │ │ │ ├── domhandler@2.3.0 
  │ │ │ ├─┬ domutils@1.5.1 
  │ │ │ │ └─┬ dom-serializer@0.1.0 
  │ │ │ │   ├── domelementtype@1.1.3 
  │ │ │ │   └── entities@1.1.1 
  │ │ │ ├── entities@1.0.0 
  │ │ │ └── readable-stream@1.1.14 
  │ │ ├── lodash@3.7.0 
  │ │ ├── minimatch@3.0.4 
  │ │ ├── shelljs@0.3.0 
  │ │ └── strip-json-comments@1.0.4 
  │ ├── lodash@3.10.1 
  │ ├─┬ minimatch@2.0.10 
  │ │ └─┬ brace-expansion@1.1.8 
  │ │   ├── balanced-match@1.0.0 
  │ │   └── concat-map@0.0.1 
  │ ├─┬ rcloader@0.1.2 
  │ │ └─┬ rcfinder@0.1.9 
  │ │   └── lodash.clonedeep@4.5.0 
  │ └── through2@0.6.5 
  ├─┬ gulp-karma@0.0.4 
  │ ├─┬ event-stream@3.0.20 
  │ │ ├── duplexer@0.1.1 
  │ │ ├── from@0.1.7 
  │ │ ├── map-stream@0.0.7 
  │ │ ├── pause-stream@0.0.11 
  │ │ ├── split@0.2.10 
  │ │ └── stream-combiner@0.0.4 
  │ ├─┬ gulp-util@2.2.20 
  │ │ ├─┬ chalk@0.5.1 
  │ │ │ ├── ansi-styles@1.1.0 
  │ │ │ ├─┬ has-ansi@0.1.0 
  │ │ │ │ └── ansi-regex@0.2.1 
  │ │ │ ├── strip-ansi@0.3.0 
  │ │ │ └── supports-color@0.2.0 
  │ │ ├── lodash._reinterpolate@2.4.1 
  │ │ ├─┬ lodash.template@2.4.1 
  │ │ │ ├── lodash._escapestringchar@2.4.1 
  │ │ │ ├─┬ lodash.escape@2.4.1 
  │ │ │ │ ├─┬ lodash._escapehtmlchar@2.4.1 
  │ │ │ │ │ └── lodash._htmlescapes@2.4.1 
  │ │ │ │ └─┬ lodash._reunescapedhtml@2.4.1 
  │ │ │ │   └── lodash.keys@2.4.1 
  │ │ │ ├── lodash.keys@2.4.1 
  │ │ │ ├── lodash.templatesettings@2.4.1 
  │ │ │ └─┬ lodash.values@2.4.1 
  │ │ │   └── lodash.keys@2.4.1 
  │ │ ├── minimist@0.2.0 
  │ │ ├─┬ through2@0.5.1 
  │ │ │ └── xtend@3.0.0 
  │ │ └── vinyl@0.2.3 
  │ ├─┬ optimist@0.6.1 
  │ │ ├── minimist@0.0.10 
  │ │ └── wordwrap@0.0.3 
  │ └─┬ xtend@2.1.2 
  │   └── object-keys@0.4.0 
  ├─┬ gulp-less@3.0.3 
  │ ├─┬ accord@0.15.2 
  │ │ ├── convert-source-map@0.4.1 
  │ │ ├─┬ fobject@0.0.4 
  │ │ │ ├── graceful-fs@4.1.11 
  │ │ │ └── semver@5.4.1 
  │ │ ├── indx@0.2.3 
  │ │ ├── lodash@3.10.1 
  │ │ └── when@3.7.8 
  │ ├─┬ less@2.7.2 
  │ │ ├─┬ errno@0.1.4 
  │ │ │ └── prr@0.0.0 
  │ │ ├── graceful-fs@4.1.11 
  │ │ ├── image-size@0.5.5 
  │ │ ├─┬ promise@7.3.1 
  │ │ │ └── asap@2.0.6 
  │ │ ├─┬ request@2.82.0 
  │ │ │ ├── aws-sign2@0.7.0 
  │ │ │ ├── caseless@0.12.0 
  │ │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ │ └── delayed-stream@1.0.0 
  │ │ │ ├── forever-agent@0.6.1 
  │ │ │ ├── form-data@2.3.1 
  │ │ │ ├─┬ har-validator@5.0.3 
  │ │ │ │ ├─┬ ajv@5.2.2 
  │ │ │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ │ │ └── json-stable-stringify@1.0.1 
  │ │ │ │ └── har-schema@2.0.0 
  │ │ │ ├─┬ hawk@6.0.2 
  │ │ │ │ ├── boom@4.3.1 
  │ │ │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ │ │ └── boom@5.2.0 
  │ │ │ │ ├── hoek@4.2.0 
  │ │ │ │ └── sntp@2.0.2 
  │ │ │ ├─┬ http-signature@1.2.0 
  │ │ │ │ └── assert-plus@1.0.0 
  │ │ │ ├─┬ mime-types@2.1.17 
  │ │ │ │ └── mime-db@1.30.0 
  │ │ │ ├── oauth-sign@0.8.2 
  │ │ │ ├── performance-now@2.1.0 
  │ │ │ ├── qs@6.5.1 
  │ │ │ ├── tunnel-agent@0.6.0 
  │ │ │ └── uuid@3.1.0 
  │ │ └── source-map@0.5.7 
  │ └── through2@0.6.5 
  ├─┬ gulp-newer@0.5.0 
  │ └── kew@0.3.4 
  ├─┬ gulp-plumber@1.0.0 
  │ └── through2@0.6.5 
  ├─┬ gulp-recess@1.1.2 
  │ ├─┬ recess@1.1.9 
  │ │ ├── colors@1.1.2 
  │ │ ├─┬ less@1.3.3 
  │ │ │ └── ycssmin@1.0.1 
  │ │ ├── underscore@1.7.0 
  │ │ └─┬ watch@1.0.2 
  │ │   ├─┬ exec-sh@0.2.1 
  │ │   │ └── merge@1.2.0 
  │ │   └── minimist@1.2.0 
  │ └── through2@0.6.5 
  ├── gulp-rename@1.2.2 
  ├─┬ gulp-replace@0.5.3 
  │ ├─┬ istextorbinary@1.0.2 
  │ │ ├── binaryextensions@1.0.1 
  │ │ └── textextensions@1.0.2 
  │ ├── replacestream@2.0.0 
  │ └── through2@0.6.3 
  ├─┬ gulp-sourcemaps@1.5.2 
  │ ├── convert-source-map@1.5.0 
  │ ├─┬ strip-bom@1.0.0 
  │ │ ├── first-chunk-stream@1.0.0 
  │ │ └── is-utf8@0.2.1 
  │ ├── through2@0.6.5 
  │ └─┬ vinyl@0.4.6 
  │   ├── clone@0.2.0 
  │   └── clone-stats@0.0.1 
  ├─┬ gulp-util@3.0.4 
  │ ├── array-differ@1.0.0 
  │ ├── array-uniq@1.0.3 
  │ ├── beeper@1.1.1 
  │ ├── dateformat@1.0.12 
  │ ├── lodash._reescape@3.0.0 
  │ ├── lodash._reevaluate@3.0.0 
  │ ├── lodash._reinterpolate@3.0.0 
  │ ├─┬ lodash.template@3.6.2 
  │ │ ├── lodash._basecopy@3.0.1 
  │ │ ├── lodash._basetostring@3.0.1 
  │ │ ├── lodash._basevalues@3.0.0 
  │ │ ├── lodash._isiterateecall@3.0.9 
  │ │ ├─┬ lodash.escape@3.2.0 
  │ │ │ └── lodash._root@3.0.1 
  │ │ ├─┬ lodash.keys@3.1.2 
  │ │ │ ├── lodash.isarguments@3.1.0 
  │ │ │ └── lodash.isarray@3.0.4 
  │ │ ├── lodash.restparam@3.6.1 
  │ │ └── lodash.templatesettings@3.1.1 
  │ ├── multipipe@0.1.2 
  │ ├── replace-ext@0.0.1 
  │ └── through2@0.6.5 
  ├─┬ gulp-zip@3.0.2 
  │ ├─┬ concat-stream@1.6.0 
  │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ ├── isarray@1.0.0 
  │ │ │ └── string_decoder@1.0.3 
  │ │ └── typedarray@0.0.6 
  │ ├── through2@0.6.5 
  │ └─┬ yazl@2.4.2 
  │   └── buffer-crc32@0.2.13 
  ├─┬ imagemin-pngquant@4.1.0 
  │ ├── is-png@1.1.0 
  │ ├─┬ pngquant-bin@3.1.1 
  │ │ ├─┬ bin-build@2.2.0 
  │ │ │ ├── archive-type@3.2.0 
  │ │ │ ├─┬ decompress@3.0.0 
  │ │ │ │ ├─┬ decompress-tar@3.1.0 
  │ │ │ │ │ ├── is-tar@1.0.0 
  │ │ │ │ │ ├─┬ strip-dirs@1.1.1 
  │ │ │ │ │ │ ├─┬ is-absolute@0.1.7 
  │ │ │ │ │ │ │ └── is-relative@0.1.3 
  │ │ │ │ │ │ ├── is-natural-number@2.1.1 
  │ │ │ │ │ │ └── sum-up@1.0.3 
  │ │ │ │ │ └── through2@0.6.5 
  │ │ │ │ ├─┬ decompress-tarbz2@3.1.0 
  │ │ │ │ │ ├── is-bzip2@1.0.0 
  │ │ │ │ │ ├─┬ seek-bzip@1.0.5 
  │ │ │ │ │ │ └─┬ commander@2.8.1 
  │ │ │ │ │ │   └── graceful-readlink@1.0.1 
  │ │ │ │ │ └── through2@0.6.5 
  │ │ │ │ ├─┬ decompress-targz@3.1.0 
  │ │ │ │ │ ├── is-gzip@1.0.0 
  │ │ │ │ │ └── through2@0.6.5 
  │ │ │ │ ├─┬ decompress-unzip@3.4.0 
  │ │ │ │ │ ├── is-zip@1.0.0 
  │ │ │ │ │ ├── stat-mode@0.2.2 
  │ │ │ │ │ ├─┬ through2@2.0.3 
  │ │ │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │ │ │   ├── isarray@1.0.0 
  │ │ │ │ │ │   └── string_decoder@1.0.3 
  │ │ │ │ │ ├─┬ vinyl@1.2.0 
  │ │ │ │ │ │ └── clone@1.0.2 
  │ │ │ │ │ └── yauzl@2.8.0 
  │ │ │ │ ├─┬ vinyl-assign@1.2.1 
  │ │ │ │ │ ├── object-assign@4.1.1 
  │ │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │ │   ├── isarray@1.0.0 
  │ │ │ │ │   └── string_decoder@1.0.3 
  │ │ │ │ └─┬ vinyl-fs@2.4.4 
  │ │ │ │   ├─┬ glob-stream@5.3.5 
  │ │ │ │   │ ├── glob@5.0.15 
  │ │ │ │   │ ├─┬ glob-parent@3.1.0 
  │ │ │ │   │ │ ├─┬ is-glob@3.1.0 
  │ │ │ │   │ │ │ └── is-extglob@2.1.1 
  │ │ │ │   │ │ └── path-dirname@1.0.2 
  │ │ │ │   │ ├── ordered-read-streams@0.3.0 
  │ │ │ │   │ ├─┬ through2@0.6.5 
  │ │ │ │   │ │ └─┬ readable-stream@1.0.34 
  │ │ │ │   │ │   ├── isarray@0.0.1 
  │ │ │ │   │ │   └── string_decoder@0.10.31 
  │ │ │ │   │ ├─┬ to-absolute-glob@0.1.1 
  │ │ │ │   │ │ └── extend-shallow@2.0.1 
  │ │ │ │   │ └── unique-stream@2.2.1 
  │ │ │ │   ├── graceful-fs@4.1.11 
  │ │ │ │   ├── gulp-sourcemaps@1.6.0 
  │ │ │ │   ├── is-valid-glob@0.3.0 
  │ │ │ │   ├─┬ lazystream@1.0.0 
  │ │ │ │   │ └─┬ readable-stream@2.3.3 
  │ │ │ │   │   ├── isarray@1.0.0 
  │ │ │ │   │   └── string_decoder@1.0.3 
  │ │ │ │   ├── lodash.isequal@4.5.0 
  │ │ │ │   ├── merge-stream@1.0.1 
  │ │ │ │   ├── object-assign@4.1.1 
  │ │ │ │   ├─┬ readable-stream@2.3.3 
  │ │ │ │   │ ├── isarray@1.0.0 
  │ │ │ │   │ └── string_decoder@1.0.3 
  │ │ │ │   ├── strip-bom-stream@1.0.0 
  │ │ │ │   ├── through2@2.0.3 
  │ │ │ │   ├── vali-date@1.0.0 
  │ │ │ │   └─┬ vinyl@1.2.0 
  │ │ │ │     └── clone@1.0.2 
  │ │ │ ├─┬ download@4.4.3 
  │ │ │ │ ├─┬ caw@1.2.0 
  │ │ │ │ │ ├── get-proxy@1.1.0 
  │ │ │ │ │ ├── is-obj@1.0.1 
  │ │ │ │ │ └── object-assign@3.0.0 
  │ │ │ │ ├─┬ filenamify@1.2.1 
  │ │ │ │ │ ├── filename-reserved-regex@1.0.0 
  │ │ │ │ │ ├── strip-outer@1.0.0 
  │ │ │ │ │ └── trim-repeated@1.0.0 
  │ │ │ │ ├─┬ got@5.7.1 
  │ │ │ │ │ ├─┬ create-error-class@3.0.2 
  │ │ │ │ │ │ └── capture-stack-trace@1.0.0 
  │ │ │ │ │ ├── duplexer2@0.1.4 
  │ │ │ │ │ ├── is-retry-allowed@1.1.0 
  │ │ │ │ │ ├── node-status-codes@1.0.0 
  │ │ │ │ │ ├── timed-out@3.1.3 
  │ │ │ │ │ ├── unzip-response@1.0.2 
  │ │ │ │ │ └── url-parse-lax@1.0.0 
  │ │ │ │ ├─┬ gulp-decompress@1.2.0 
  │ │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │ │   ├── isarray@1.0.0 
  │ │ │ │ │   └── string_decoder@1.0.3 
  │ │ │ │ ├── is-url@1.2.2 
  │ │ │ │ ├── object-assign@4.1.1 
  │ │ │ │ ├─┬ read-all-stream@3.1.0 
  │ │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │ │   ├── isarray@1.0.0 
  │ │ │ │ │   └── string_decoder@1.0.3 
  │ │ │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ │ │ ├── isarray@1.0.0 
  │ │ │ │ │ └── string_decoder@1.0.3 
  │ │ │ │ ├─┬ vinyl@1.2.0 
  │ │ │ │ │ └── clone@1.0.2 
  │ │ │ │ ├─┬ vinyl-fs@2.4.4 
  │ │ │ │ │ ├─┬ glob-stream@5.3.5 
  │ │ │ │ │ │ ├── glob@5.0.15 
  │ │ │ │ │ │ ├─┬ glob-parent@3.1.0 
  │ │ │ │ │ │ │ └─┬ is-glob@3.1.0 
  │ │ │ │ │ │ │   └── is-extglob@2.1.1 
  │ │ │ │ │ │ ├── ordered-read-streams@0.3.0 
  │ │ │ │ │ │ ├─┬ through2@0.6.5 
  │ │ │ │ │ │ │ └─┬ readable-stream@1.0.34 
  │ │ │ │ │ │ │   ├── isarray@0.0.1 
  │ │ │ │ │ │ │   └── string_decoder@0.10.31 
  │ │ │ │ │ │ └── unique-stream@2.2.1 
  │ │ │ │ │ ├── graceful-fs@4.1.11 
  │ │ │ │ │ ├── gulp-sourcemaps@1.6.0 
  │ │ │ │ │ ├── merge-stream@1.0.1 
  │ │ │ │ │ └── through2@2.0.3 
  │ │ │ │ └─┬ ware@1.3.0 
  │ │ │ │   └─┬ wrap-fn@0.1.5 
  │ │ │ │     └── co@3.1.0 
  │ │ │ ├─┬ exec-series@1.0.3 
  │ │ │ │ ├── async-each-series@1.1.0 
  │ │ │ │ └── object-assign@4.1.1 
  │ │ │ ├── tempfile@1.1.1 
  │ │ │ └─┬ url-regex@3.2.0 
  │ │ │   └── ip-regex@1.0.3 
  │ │ ├─┬ bin-wrapper@3.0.2 
  │ │ │ ├─┬ bin-check@2.0.0 
  │ │ │ │ └── executable@1.1.0 
  │ │ │ ├─┬ bin-version-check@2.1.0 
  │ │ │ │ ├─┬ bin-version@1.0.4 
  │ │ │ │ │ └─┬ find-versions@1.2.1 
  │ │ │ │ │   └── semver-regex@1.0.0 
  │ │ │ │ ├── semver@4.3.6 
  │ │ │ │ └─┬ semver-truncate@1.1.2 
  │ │ │ │   └── semver@5.4.1 
  │ │ │ ├── lazy-req@1.1.0 
  │ │ │ └── os-filter-obj@1.0.3 
  │ │ └─┬ logalot@2.1.0 
  │ │   └─┬ squeak@1.3.0 
  │ │     ├── console-stream@0.1.1 
  │ │     └─┬ lpad-align@1.1.2 
  │ │       └── longest@1.0.1 
  │ └── through2@0.6.5 
  ├─┬ inquirer@0.8.2 
  │ ├── ansi-regex@1.1.1 
  │ ├── cli-width@1.1.1 
  │ ├─┬ figures@1.7.0 
  │ │ └── object-assign@4.1.1 
  │ ├── lodash@3.10.1 
  │ ├── readline2@0.1.1 
  │ ├── rx@2.5.3 
  │ └── through@2.3.8 
  ├── UNMET PEER DEPENDENCY jasmine-core@*
  ├─┬ jshint-stylish@1.0.1 
  │ ├── log-symbols@1.0.2 
  │ ├─┬ string-length@1.0.1 
  │ │ └─┬ strip-ansi@3.0.1 
  │ │   └── ansi-regex@2.1.1 
  │ └── text-table@0.2.0 
  ├─┬ json-stable-stringify@1.0.0 
  │ └── jsonify@0.0.0 
  ├─┬ karma@0.12.31 
  │ ├── colors@0.6.2 
  │ ├─┬ connect@2.26.6 
  │ │ ├── basic-auth-connect@1.0.0 
  │ │ ├─┬ body-parser@1.8.4 
  │ │ │ ├── depd@0.4.5 
  │ │ │ ├── iconv-lite@0.4.4 
  │ │ │ ├─┬ on-finished@2.1.0 
  │ │ │ │ └── ee-first@1.0.5 
  │ │ │ ├── qs@2.2.4 
  │ │ │ └── raw-body@1.3.0 
  │ │ ├── bytes@1.0.0 
  │ │ ├─┬ compression@1.1.2 
  │ │ │ ├─┬ accepts@1.1.4 
  │ │ │ │ ├── mime-types@2.0.14 
  │ │ │ │ └── negotiator@0.4.9 
  │ │ │ ├─┬ compressible@2.0.11 
  │ │ │ │ └── mime-db@1.30.0 
  │ │ │ ├─┬ debug@2.0.0 
  │ │ │ │ └── ms@0.6.2 
  │ │ │ └── vary@1.0.1 
  │ │ ├─┬ connect-timeout@1.3.0 
  │ │ │ ├── debug@2.0.0 
  │ │ │ └── ms@0.6.2 
  │ │ ├── cookie@0.1.2 
  │ │ ├─┬ cookie-parser@1.3.5 
  │ │ │ ├── cookie@0.1.3 
  │ │ │ └── cookie-signature@1.0.6 
  │ │ ├── cookie-signature@1.0.5 
  │ │ ├─┬ csurf@1.6.6 
  │ │ │ ├── cookie@0.1.2 
  │ │ │ ├─┬ csrf@2.0.7 
  │ │ │ │ ├── base64-url@1.2.1 
  │ │ │ │ ├── rndm@1.1.1 
  │ │ │ │ ├── scmp@1.0.0 
  │ │ │ │ └─┬ uid-safe@1.1.0 
  │ │ │ │   └── native-or-bluebird@1.1.2 
  │ │ │ └── http-errors@1.2.8 
  │ │ ├─┬ debug@2.0.0 
  │ │ │ └── ms@0.6.2 
  │ │ ├── depd@0.4.5 
  │ │ ├─┬ errorhandler@1.2.4 
  │ │ │ ├─┬ accepts@1.1.4 
  │ │ │ │ ├── mime-types@2.0.14 
  │ │ │ │ └── negotiator@0.4.9 
  │ │ │ └── escape-html@1.0.1 
  │ │ ├─┬ express-session@1.8.2 
  │ │ │ ├── cookie@0.1.2 
  │ │ │ ├── crc@3.0.0 
  │ │ │ ├─┬ debug@2.0.0 
  │ │ │ │ └── ms@0.6.2 
  │ │ │ ├── depd@0.4.5 
  │ │ │ ├─┬ uid-safe@1.0.1 
  │ │ │ │ └─┬ mz@1.3.0 
  │ │ │ │   ├─┬ thenify@3.3.0 
  │ │ │ │   │ └── any-promise@1.3.0 
  │ │ │ │   └── thenify-all@1.6.0 
  │ │ │ └── utils-merge@1.0.0 
  │ │ ├─┬ finalhandler@0.2.0 
  │ │ │ └── escape-html@1.0.1 
  │ │ ├── fresh@0.2.4 
  │ │ ├── media-typer@0.3.0 
  │ │ ├─┬ method-override@2.2.0 
  │ │ │ ├─┬ debug@2.0.0 
  │ │ │ │ └── ms@0.6.2 
  │ │ │ └── methods@1.1.0 
  │ │ ├─┬ morgan@1.3.2 
  │ │ │ ├── basic-auth@1.0.0 
  │ │ │ ├── depd@0.4.5 
  │ │ │ └─┬ on-finished@2.1.0 
  │ │ │   └── ee-first@1.0.5 
  │ │ ├─┬ multiparty@3.3.2 
  │ │ │ ├── readable-stream@1.1.14 
  │ │ │ └─┬ stream-counter@0.2.0 
  │ │ │   └── readable-stream@1.1.14 
  │ │ ├── on-headers@1.0.1 
  │ │ ├── pause@0.0.1 
  │ │ ├── qs@2.2.4 
  │ │ ├── response-time@2.0.1 
  │ │ ├─┬ serve-favicon@2.1.7 
  │ │ │ ├─┬ etag@1.5.1 
  │ │ │ │ └── crc@3.2.1 
  │ │ │ ├── fresh@0.2.4 
  │ │ │ └── ms@0.6.2 
  │ │ ├─┬ serve-index@1.2.1 
  │ │ │ ├─┬ accepts@1.1.4 
  │ │ │ │ ├── mime-types@2.0.14 
  │ │ │ │ └── negotiator@0.4.9 
  │ │ │ └── batch@0.5.1 
  │ │ ├─┬ serve-static@1.6.5 
  │ │ │ ├─┬ send@0.9.3 
  │ │ │ │ ├── destroy@1.0.3 
  │ │ │ │ ├── etag@1.4.0 
  │ │ │ │ ├─┬ on-finished@2.1.0 
  │ │ │ │ │ └── ee-first@1.0.5 
  │ │ │ │ └── range-parser@1.0.3 
  │ │ │ └── utils-merge@1.0.0 
  │ │ ├─┬ type-is@1.5.7 
  │ │ │ └── mime-types@2.0.14 
  │ │ └── vhost@3.0.2 
  │ ├── di@0.0.1 
  │ ├─┬ glob@3.2.11 
  │ │ └── minimatch@0.3.0 
  │ ├── graceful-fs@2.0.3 
  │ ├─┬ http-proxy@0.10.4 
  │ │ ├── pkginfo@0.3.1 
  │ │ └─┬ utile@0.2.1 
  │ │   ├── deep-equal@1.0.1 
  │ │   ├── i@0.3.5 
  │ │   └── ncp@0.4.2 
  │ ├── lodash@2.4.2 
  │ ├─┬ log4js@0.6.38 
  │ │ └── semver@4.3.6 
  │ ├── mime@1.2.11 
  │ ├─┬ minimatch@0.2.14 
  │ │ └── sigmund@1.0.1 
  │ ├── q@0.9.7 
  │ ├── rimraf@2.2.8 
  │ ├─┬ socket.io@0.9.16 
  │ │ ├── base64id@0.1.0 
  │ │ ├── policyfile@0.0.4 
  │ │ ├── redis@0.7.3 
  │ │ └─┬ socket.io-client@0.9.16 
  │ │   ├─┬ active-x-obfuscator@0.0.1 
  │ │   │ └── zeparser@0.0.5 
  │ │   ├── uglify-js@1.2.5 
  │ │   ├─┬ ws@0.4.32 
  │ │   │ ├── commander@2.1.0 
  │ │   │ ├── nan@1.0.0 
  │ │   │ └── tinycolor@0.0.1 
  │ │   └── xmlhttprequest@1.4.2 
  │ ├─┬ source-map@0.1.43 
  │ │ └── amdefine@1.0.1 
  │ └─┬ useragent@2.0.10 
  │   └── lru-cache@2.2.4 
  ├── karma-chrome-launcher@0.1.8 
  ├── karma-jasmine@0.3.5 
  ├─┬ karma-phantomjs-launcher@0.1.4 
  │ └─┬ phantomjs@1.9.20 
  │   ├─┬ extract-zip@1.5.0 
  │   │ ├─┬ concat-stream@1.5.0 
  │   │ │ └─┬ readable-stream@2.0.6 
  │   │ │   └── isarray@1.0.0 
  │   │ ├── debug@0.7.4 
  │   │ └─┬ yauzl@2.4.1 
  │   │   └─┬ fd-slicer@1.0.1 
  │   │     └── pend@1.2.0 
  │   ├─┬ fs-extra@0.26.7 
  │   │ ├── graceful-fs@4.1.11 
  │   │ ├─┬ jsonfile@2.4.0 
  │   │ │ └── graceful-fs@4.1.11 
  │   │ └─┬ klaw@1.3.1 
  │   │   └── graceful-fs@4.1.11 
  │   ├─┬ hasha@2.2.0 
  │   │ ├── is-stream@1.1.0 
  │   │ └─┬ pinkie-promise@2.0.1 
  │   │   └── pinkie@2.0.4 
  │   ├── kew@0.7.0 
  │   ├── progress@1.1.8 
  │   ├─┬ request@2.67.0 
  │   │ ├── aws-sign2@0.6.0 
  │   │ ├─┬ bl@1.0.3 
  │   │ │ └─┬ readable-stream@2.0.6 
  │   │ │   └── isarray@1.0.0 
  │   │ ├── caseless@0.11.0 
  │   │ ├─┬ combined-stream@1.0.5 
  │   │ │ └── delayed-stream@1.0.0 
  │   │ ├── forever-agent@0.6.1 
  │   │ ├─┬ form-data@1.0.1 
  │   │ │ └─┬ async@2.5.0 
  │   │ │   └── lodash@4.17.4 
  │   │ ├─┬ har-validator@2.0.6 
  │   │ │ ├─┬ chalk@1.1.3 
  │   │ │ │ ├─┬ has-ansi@2.0.0 
  │   │ │ │ │ └── ansi-regex@2.1.1 
  │   │ │ │ ├── strip-ansi@3.0.1 
  │   │ │ │ └── supports-color@2.0.0 
  │   │ │ └─┬ is-my-json-valid@2.16.1 
  │   │ │   ├── generate-function@2.0.0 
  │   │ │   ├─┬ generate-object-property@1.2.0 
  │   │ │   │ └── is-property@1.0.2 
  │   │ │   └── jsonpointer@4.0.1 
  │   │ ├─┬ hawk@3.1.3 
  │   │ │ ├── boom@2.10.1 
  │   │ │ ├── cryptiles@2.0.5 
  │   │ │ ├── hoek@2.16.3 
  │   │ │ └── sntp@1.0.9 
  │   │ ├─┬ http-signature@1.1.1 
  │   │ │ └── assert-plus@0.2.0 
  │   │ ├─┬ mime-types@2.1.17 
  │   │ │ └── mime-db@1.30.0 
  │   │ ├── oauth-sign@0.8.2 
  │   │ ├── qs@5.2.1 
  │   │ └── tough-cookie@2.2.2 
  │   ├─┬ request-progress@2.0.1 
  │   │ └── throttleit@1.0.0 
  │   └── which@1.2.14 
  ├── karma-requirejs@0.2.2 
  ├── lodash-node@3.7.0 
  ├─┬ markdown-it@4.2.0 
  │ ├─┬ argparse@1.0.9 
  │ │ └── sprintf-js@1.0.3 
  │ ├── entities@1.1.1 
  │ ├── linkify-it@1.1.1 
  │ ├── mdurl@1.0.1 
  │ └── uc.micro@1.0.3 
  ├── minimist@1.1.1 
  ├─┬ mkdirp@0.5.0 
  │ └── minimist@0.0.8 
  ├─┬ nunjucks@1.3.3 
  │ └─┬ chokidar@0.12.6 
  │   ├── async-each@0.1.6 
  │   └─┬ readdirp@1.3.0 
  │     ├── graceful-fs@2.0.3 
  │     └── minimatch@0.2.14 
  ├── q@1.2.0 
  ├── requirejs@2.1.17 
  ├── rimraf@2.3.2 
  ├── run-sequence@1.0.2 
  ├─┬ through2@1.1.1 
  │ ├─┬ readable-stream@1.1.14 
  │ │ ├── core-util-is@1.0.2 
  │ │ ├── isarray@0.0.1 
  │ │ └── string_decoder@0.10.31 
  │ └── xtend@4.0.1 
  └── wrench@1.5.8 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/front-end-guide/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 19% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 19% coverage ] ****** [2 done /0 queued / 1 running / 1 errors / 34% coverage ] ****** [2 done /0 queued / 1 running / 1 errors / 34% coverage ] ****** [3 done /0 queued / 1 running / 2 errors / 34% coverage ] ****** [3 done /0 queued / 1 running / 2 errors / 34% coverage ] ****** [4 done /0 queued / 1 running / 3 errors / 34% coverage ] ****** [4 done /0 queued / 1 running / 3 errors / 34% coverage ] ****** [5 done /0 queued / 1 running / 4 errors / 34% coverage ] ****** [5 done /0 queued / 1 running / 4 errors / 34% coverage ] ****** [6 done /1 queued / 1 running / 5 errors / 34% coverage ] ****** [6 done /0 queued / 2 running / 5 errors / 34% coverage ] ****** [6 done /0 queued / 2 running / 5 errors / 34% coverage ] ****** [7 done /1 queued / 2 running / 6 errors / 34% coverage ] ****** [7 done /0 queued / 3 running / 6 errors / 34% coverage ] ****** [7 done /0 queued / 3 running / 6 errors / 34% coverage ] ****** [8 done /0 queued / 2 running / 7 errors / 34% coverage ] ****** [9 done /1 queued / 2 running / 8 errors / 34% coverage ] ****** [9 done /0 queued / 3 running / 8 errors / 34% coverage ] ****** [9 done /0 queued / 3 running / 8 errors / 34% coverage ] ****** [10 done /2 queued / 3 running / 9 errors / 34% coverage ] ****** [10 done /1 queued / 4 running / 9 errors / 34% coverage ] ****** [10 done /0 queued / 5 running / 9 errors / 34% coverage ] ****** [10 done /0 queued / 5 running / 9 errors / 34% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","toString","apply","bound ","call","RegExp","ArrayBuffer","Float64Array","pow","WeakMap","max","parseInt","Array","bind","defineProperties","create","Set","join","isArray","sort","parseFloat"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0,"Switcher":false,"Target_Switch_Base":0} start 0.0409 took 5.4399s
*-- Test Case {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0} start 5.5682 took 97.9457s
*-- Errors occured in test {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #! /usr/bin/env node
"use strict";

/**
 * @module BrowserSync
 */
var pjson         = require("./package.json");
var BrowserSync   = require("./lib/browser-sync");
var publicUtils   = require("./lib/public/public-utils");
var utils         = require("./lib/utils");
var events        = require("events");
var logger        = require("eazy-logger").Logger({
    useLevelPrefixes: true
});

var singleton        = false;
var singletonPlugins = [];
var instances        = [];

/**
 * @type {boolean|EventEmitter}
 */
var singletonEmitter = false;

/**
 * @method browserSync
 * @param {Object} [config] This is the main configuration for your BrowserSync instance and can contain any of the [available options]({{site.links.options}})
 *  If you do not pass a config an argument for configuration, BrowserSync will still run; but it will be in the `snippet` mode
 * @param {Function} [cb] If you pass a callback function, it will be called when BrowserSync has completed all setup tasks and is ready to use. This
 * is useful when you need to wait for information (for example: urls, port etc) or perform other tasks synchronously.
 * @returns {BrowserSync}
 */
module.exports         = initSingleton;
module.exports.init    = initSingleton;

/**
 * Register a plugin. Must implement at least a 'plugin' method that returns a
 * callable function.
 *
 * @method use
 * @param {String} name The name of the plugin
 * @param {Object} module The object to be `required`.
 * @param {Function} [cb] A callback function that will return any errors.
 */
module.exports.use     = function () {
    var args = Array.prototype.slice.call(arguments);
    singletonPlugins.push({
        args: args
    });
};

/**
 * The `reload` method will inform all browsers about changed files and will either cause the browser to refresh, or inject the files where possible.
 *
 * @method reload
 * @param {String|Array|Object} [arg] The file or files to be reloaded.
 * @returns {*}
 */
module.exports.reload  = noop("reload");

/**
 * The `stream` method returns a transform stream and can act once or on many files.
 *
 * @method stream
 * @param {Object} [opts] Configuration for the stream method
 * @since 2.6.0
 * @returns {*}
 */
module.exports.stream  = noop("stream");

/**
 * Helper method for browser notifications
 *
 * @method notify
 * @param {String|HTML} msg Can be a simple message such as 'Connected' or HTML
 * @param {Number} [timeout] How long the message will remain in the browser. @since 1.3.0
 */
module.exports.notify  = noop("notify");

/**
 * This method will close any running server, stop file watching & exit the current process.
 *
 * @method exit
 */
module.exports.exit    = noop("exit");

/**
 * Stand alone file-watcher. Use this along with BrowserSync to create your own, minimal build system
 * @method watch
 * @param {string} patterns Glob patterns for files to watch
 * @param {object} [opts] Options to be passed to Chokidar - check what's available in [their docs](https://github.com/paulmillr/chokidar#getting-started)
 * @param {function} [fn] Callback function for each event.
 * @since 2.6.0
 */
module.exports.watch   = noop("watch");

/**
 * Method to pause file change events
 *
 * @method pause
 */
module.exports.pause   = noop("pause");

/**
 * Method to resume paused watchers
 *
 * @method resume
 */
module.exports.resume  = noop("resume");

/**
 * Add properties fo
 */
Object.defineProperties(module.exports, {
    /**
     * The internal Event Emitter used by the running BrowserSync instance (if there is one).
     * You can use this to emit your own events, such as changed files, logging etc.
     *
     * @property emitter
     */
    "emitter": {
        get: function () {
            if (!singletonEmitter) {
                singletonEmitter = newEmitter();
                return singletonEmitter;
            }
            return singletonEmitter;
        }
    },
    /**
     * A simple true/false flag that you can use to determine if there's a currently-running BrowserSync instance.
     *
     * @property active
     */
    "active": {
        get: getSingletonValue.bind(null, "active")
    },
    /**
     * A simple true/false flag to determine if the current instance is paused
     *
     * @property paused
     */
    "paused": {
        get: getSingletonValue.bind(null, "paused")
    }
});

/**
 * Event emitter factory
 * @returns {EventEmitter}
 */
function newEmitter() {
    var emitter       = new events.EventEmitter();
    emitter.setMaxListeners(20);
    return emitter;
}

/**
 * Get the singleton's emitter, or a new one.
 * @returns {EventEmitter}
 */
function getSingletonEmitter() {
    if (singletonEmitter) {
        return singletonEmitter;
    }
    singletonEmitter = newEmitter();
    return singletonEmitter;
}

/**
 * Helper to allow methods to be called on the module export
 * before there's a running instance
 * @param {String} name
 * @returns {Function}
 */
function noop(name) {
    return function () {
        var args = Array.prototype.slice.call(arguments);
        if (singleton) {
            return singleton[name].apply(singleton, args);
        } else {
            if (publicUtils.isStreamArg(name, args)) {
                return utils.noopStream();
            }
        }
    };
}

/**
 * Create a single instance when module export is used directly via browserSync({});
 * This is mostly for back-compatibility, for also for the nicer api.
 * This will never be removed to ensure we never break user-land, but
 * we should discourage it's use.
 * @returns {*}
 */
function initSingleton() {
    var instance;
    if (instances.length) {
        instance = instances.filter(function (item) {
            return item.name === "singleton";
        });
        if (instance.length) {
            logger.error("{yellow:You tried to start BrowserSync twice!} To create multiple instances, use {cyan:browserSync.create().init()");
            return instance;
        }
    }
    var args = Array.prototype.slice.call(arguments);
    singleton = create("singleton", getSingletonEmitter());

    if (singletonPlugins.length) {
        singletonPlugins.forEach(function (obj) {
            singleton.instance.registerPlugin.apply(singleton.instance, obj.args);
        });
    }

    singleton.init.apply(null, args);
    return singleton;
}

/**
 * @param {String} prop
 * @returns {Object|Boolean}
 */
function getSingletonValue(prop) {
    var single = getSingle("singleton");
    if (single) {
        return single[prop];
    }
    return false;
}

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
function getSingle(name) {
    if (instances.length) {
        var match = instances.filter(function (item) {
            return item.name === name;
        });
        if (match.length) {
            return match[0];
        }
    }
    return false;
}

/**
 * Create an instance of BrowserSync
 * @param {String} [name]
 * @param {EventEmitter} [emitter]
 * @returns {{init: *, exit: (exit|exports), notify: *, reload: *, cleanup: *, emitter: (BrowserSync.events|*), use: *}}
 */
function create(name, emitter) {

    name    = name    || new Date().getTime();
    emitter = emitter || newEmitter();

    var browserSync = new BrowserSync(emitter, name);

    var instance = {
        name:      name,
        instance:  browserSync,
        init:      require("./lib/public/init")(browserSync, name, pjson),
        exit:      require("./lib/public/exit")(browserSync),
        notify:    require("./lib/public/notify")(browserSync),
        pause:     require("./lib/public/pause")(browserSync),
        resume:    require("./lib/public/resume")(browserSync),
        reload:    require("./lib/public/reload")(emitter),
        stream:    require("./lib/public/stream")(emitter),
        cleanup:   browserSync.cleanup.bind(browserSync),
        use:       browserSync.registerPlugin.bind(browserSync),
        getOption: browserSync.getOption.bind(browserSync),
        emitter:   browserSync.events,
        watch:     require("./lib/file-watcher").watch
    };

    Object.defineProperty(instance, "active", {
        get: function () {
            return browserSync.active;
        }
    });

    Object.defineProperty(instance, "paused", {
        get: function () {
            return browserSync.paused;
        }
    });

    instances.push(instance);

    return instance;
}

/**
 * Reset the state of the module.
 * (should only be needed for test environments)
 */
module.exports.reset = function () {
    instances.forEach(function (item) {
        item.cleanup();
    });
    instances        = [];
    singletonPlugins = [];
    singletonEmitter = false;
    singleton        = false;
    process.removeAllListeners("SIGINT");
};

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
module.exports.get = function (name) {
    var instance = getSingle(name);
    if (instance) {
        return instance;
    }
    throw new Error("An instance with the name `%s` was not found.".replace("%s", name));
};

/**
 * @type {Array}
 */
module.exports.instances = instances;

/**
 * Create an instance of BrowserSync
 * @type {create}
 */
module.exports.create    = create;
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switch_Base":0,"_bound":1}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"_bound":2} start 104.5226 took 108.5514s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"_bound":2}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #! /usr/bin/env node
"use strict";

/**
 * @module BrowserSync
 */
var pjson         = require("./package.json");
var BrowserSync   = require("./lib/browser-sync");
var publicUtils   = require("./lib/public/public-utils");
var utils         = require("./lib/utils");
var events        = require("events");
var logger        = require("eazy-logger").Logger({
    useLevelPrefixes: true
});

var singleton        = false;
var singletonPlugins = [];
var instances        = [];

/**
 * @type {boolean|EventEmitter}
 */
var singletonEmitter = false;

/**
 * @method browserSync
 * @param {Object} [config] This is the main configuration for your BrowserSync instance and can contain any of the [available options]({{site.links.options}})
 *  If you do not pass a config an argument for configuration, BrowserSync will still run; but it will be in the `snippet` mode
 * @param {Function} [cb] If you pass a callback function, it will be called when BrowserSync has completed all setup tasks and is ready to use. This
 * is useful when you need to wait for information (for example: urls, port etc) or perform other tasks synchronously.
 * @returns {BrowserSync}
 */
module.exports         = initSingleton;
module.exports.init    = initSingleton;

/**
 * Register a plugin. Must implement at least a 'plugin' method that returns a
 * callable function.
 *
 * @method use
 * @param {String} name The name of the plugin
 * @param {Object} module The object to be `required`.
 * @param {Function} [cb] A callback function that will return any errors.
 */
module.exports.use     = function () {
    var args = Array.prototype.slice.call(arguments);
    singletonPlugins.push({
        args: args
    });
};

/**
 * The `reload` method will inform all browsers about changed files and will either cause the browser to refresh, or inject the files where possible.
 *
 * @method reload
 * @param {String|Array|Object} [arg] The file or files to be reloaded.
 * @returns {*}
 */
module.exports.reload  = noop("reload");

/**
 * The `stream` method returns a transform stream and can act once or on many files.
 *
 * @method stream
 * @param {Object} [opts] Configuration for the stream method
 * @since 2.6.0
 * @returns {*}
 */
module.exports.stream  = noop("stream");

/**
 * Helper method for browser notifications
 *
 * @method notify
 * @param {String|HTML} msg Can be a simple message such as 'Connected' or HTML
 * @param {Number} [timeout] How long the message will remain in the browser. @since 1.3.0
 */
module.exports.notify  = noop("notify");

/**
 * This method will close any running server, stop file watching & exit the current process.
 *
 * @method exit
 */
module.exports.exit    = noop("exit");

/**
 * Stand alone file-watcher. Use this along with BrowserSync to create your own, minimal build system
 * @method watch
 * @param {string} patterns Glob patterns for files to watch
 * @param {object} [opts] Options to be passed to Chokidar - check what's available in [their docs](https://github.com/paulmillr/chokidar#getting-started)
 * @param {function} [fn] Callback function for each event.
 * @since 2.6.0
 */
module.exports.watch   = noop("watch");

/**
 * Method to pause file change events
 *
 * @method pause
 */
module.exports.pause   = noop("pause");

/**
 * Method to resume paused watchers
 *
 * @method resume
 */
module.exports.resume  = noop("resume");

/**
 * Add properties fo
 */
Object.defineProperties(module.exports, {
    /**
     * The internal Event Emitter used by the running BrowserSync instance (if there is one).
     * You can use this to emit your own events, such as changed files, logging etc.
     *
     * @property emitter
     */
    "emitter": {
        get: function () {
            if (!singletonEmitter) {
                singletonEmitter = newEmitter();
                return singletonEmitter;
            }
            return singletonEmitter;
        }
    },
    /**
     * A simple true/false flag that you can use to determine if there's a currently-running BrowserSync instance.
     *
     * @property active
     */
    "active": {
        get: getSingletonValue.bind(null, "active")
    },
    /**
     * A simple true/false flag to determine if the current instance is paused
     *
     * @property paused
     */
    "paused": {
        get: getSingletonValue.bind(null, "paused")
    }
});

/**
 * Event emitter factory
 * @returns {EventEmitter}
 */
function newEmitter() {
    var emitter       = new events.EventEmitter();
    emitter.setMaxListeners(20);
    return emitter;
}

/**
 * Get the singleton's emitter, or a new one.
 * @returns {EventEmitter}
 */
function getSingletonEmitter() {
    if (singletonEmitter) {
        return singletonEmitter;
    }
    singletonEmitter = newEmitter();
    return singletonEmitter;
}

/**
 * Helper to allow methods to be called on the module export
 * before there's a running instance
 * @param {String} name
 * @returns {Function}
 */
function noop(name) {
    return function () {
        var args = Array.prototype.slice.call(arguments);
        if (singleton) {
            return singleton[name].apply(singleton, args);
        } else {
            if (publicUtils.isStreamArg(name, args)) {
                return utils.noopStream();
            }
        }
    };
}

/**
 * Create a single instance when module export is used directly via browserSync({});
 * This is mostly for back-compatibility, for also for the nicer api.
 * This will never be removed to ensure we never break user-land, but
 * we should discourage it's use.
 * @returns {*}
 */
function initSingleton() {
    var instance;
    if (instances.length) {
        instance = instances.filter(function (item) {
            return item.name === "singleton";
        });
        if (instance.length) {
            logger.error("{yellow:You tried to start BrowserSync twice!} To create multiple instances, use {cyan:browserSync.create().init()");
            return instance;
        }
    }
    var args = Array.prototype.slice.call(arguments);
    singleton = create("singleton", getSingletonEmitter());

    if (singletonPlugins.length) {
        singletonPlugins.forEach(function (obj) {
            singleton.instance.registerPlugin.apply(singleton.instance, obj.args);
        });
    }

    singleton.init.apply(null, args);
    return singleton;
}

/**
 * @param {String} prop
 * @returns {Object|Boolean}
 */
function getSingletonValue(prop) {
    var single = getSingle("singleton");
    if (single) {
        return single[prop];
    }
    return false;
}

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
function getSingle(name) {
    if (instances.length) {
        var match = instances.filter(function (item) {
            return item.name === name;
        });
        if (match.length) {
            return match[0];
        }
    }
    return false;
}

/**
 * Create an instance of BrowserSync
 * @param {String} [name]
 * @param {EventEmitter} [emitter]
 * @returns {{init: *, exit: (exit|exports), notify: *, reload: *, cleanup: *, emitter: (BrowserSync.events|*), use: *}}
 */
function create(name, emitter) {

    name    = name    || new Date().getTime();
    emitter = emitter || newEmitter();

    var browserSync = new BrowserSync(emitter, name);

    var instance = {
        name:      name,
        instance:  browserSync,
        init:      require("./lib/public/init")(browserSync, name, pjson),
        exit:      require("./lib/public/exit")(browserSync),
        notify:    require("./lib/public/notify")(browserSync),
        pause:     require("./lib/public/pause")(browserSync),
        resume:    require("./lib/public/resume")(browserSync),
        reload:    require("./lib/public/reload")(emitter),
        stream:    require("./lib/public/stream")(emitter),
        cleanup:   browserSync.cleanup.bind(browserSync),
        use:       browserSync.registerPlugin.bind(browserSync),
        getOption: browserSync.getOption.bind(browserSync),
        emitter:   browserSync.events,
        watch:     require("./lib/file-watcher").watch
    };

    Object.defineProperty(instance, "active", {
        get: function () {
            return browserSync.active;
        }
    });

    Object.defineProperty(instance, "paused", {
        get: function () {
            return browserSync.paused;
        }
    });

    instances.push(instance);

    return instance;
}

/**
 * Reset the state of the module.
 * (should only be needed for test environments)
 */
module.exports.reset = function () {
    instances.forEach(function (item) {
        item.cleanup();
    });
    instances        = [];
    singletonPlugins = [];
    singletonEmitter = false;
    singleton        = false;
    process.removeAllListeners("SIGINT");
};

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
module.exports.get = function (name) {
    var instance = getSingle(name);
    if (instance) {
        return instance;
    }
    throw new Error("An instance with the name `%s` was not found.".replace("%s", name));
};

/**
 * @type {Array}
 */
module.exports.instances = instances;

/**
 * Create an instance of BrowserSync
 * @type {create}
 */
module.exports.create    = create;
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"_bound":2}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"_bound":3,"ExpansionArg_int":0} start 213.7942 took 122.7108s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"_bound":3,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #! /usr/bin/env node
"use strict";

/**
 * @module BrowserSync
 */
var pjson         = require("./package.json");
var BrowserSync   = require("./lib/browser-sync");
var publicUtils   = require("./lib/public/public-utils");
var utils         = require("./lib/utils");
var events        = require("events");
var logger        = require("eazy-logger").Logger({
    useLevelPrefixes: true
});

var singleton        = false;
var singletonPlugins = [];
var instances        = [];

/**
 * @type {boolean|EventEmitter}
 */
var singletonEmitter = false;

/**
 * @method browserSync
 * @param {Object} [config] This is the main configuration for your BrowserSync instance and can contain any of the [available options]({{site.links.options}})
 *  If you do not pass a config an argument for configuration, BrowserSync will still run; but it will be in the `snippet` mode
 * @param {Function} [cb] If you pass a callback function, it will be called when BrowserSync has completed all setup tasks and is ready to use. This
 * is useful when you need to wait for information (for example: urls, port etc) or perform other tasks synchronously.
 * @returns {BrowserSync}
 */
module.exports         = initSingleton;
module.exports.init    = initSingleton;

/**
 * Register a plugin. Must implement at least a 'plugin' method that returns a
 * callable function.
 *
 * @method use
 * @param {String} name The name of the plugin
 * @param {Object} module The object to be `required`.
 * @param {Function} [cb] A callback function that will return any errors.
 */
module.exports.use     = function () {
    var args = Array.prototype.slice.call(arguments);
    singletonPlugins.push({
        args: args
    });
};

/**
 * The `reload` method will inform all browsers about changed files and will either cause the browser to refresh, or inject the files where possible.
 *
 * @method reload
 * @param {String|Array|Object} [arg] The file or files to be reloaded.
 * @returns {*}
 */
module.exports.reload  = noop("reload");

/**
 * The `stream` method returns a transform stream and can act once or on many files.
 *
 * @method stream
 * @param {Object} [opts] Configuration for the stream method
 * @since 2.6.0
 * @returns {*}
 */
module.exports.stream  = noop("stream");

/**
 * Helper method for browser notifications
 *
 * @method notify
 * @param {String|HTML} msg Can be a simple message such as 'Connected' or HTML
 * @param {Number} [timeout] How long the message will remain in the browser. @since 1.3.0
 */
module.exports.notify  = noop("notify");

/**
 * This method will close any running server, stop file watching & exit the current process.
 *
 * @method exit
 */
module.exports.exit    = noop("exit");

/**
 * Stand alone file-watcher. Use this along with BrowserSync to create your own, minimal build system
 * @method watch
 * @param {string} patterns Glob patterns for files to watch
 * @param {object} [opts] Options to be passed to Chokidar - check what's available in [their docs](https://github.com/paulmillr/chokidar#getting-started)
 * @param {function} [fn] Callback function for each event.
 * @since 2.6.0
 */
module.exports.watch   = noop("watch");

/**
 * Method to pause file change events
 *
 * @method pause
 */
module.exports.pause   = noop("pause");

/**
 * Method to resume paused watchers
 *
 * @method resume
 */
module.exports.resume  = noop("resume");

/**
 * Add properties fo
 */
Object.defineProperties(module.exports, {
    /**
     * The internal Event Emitter used by the running BrowserSync instance (if there is one).
     * You can use this to emit your own events, such as changed files, logging etc.
     *
     * @property emitter
     */
    "emitter": {
        get: function () {
            if (!singletonEmitter) {
                singletonEmitter = newEmitter();
                return singletonEmitter;
            }
            return singletonEmitter;
        }
    },
    /**
     * A simple true/false flag that you can use to determine if there's a currently-running BrowserSync instance.
     *
     * @property active
     */
    "active": {
        get: getSingletonValue.bind(null, "active")
    },
    /**
     * A simple true/false flag to determine if the current instance is paused
     *
     * @property paused
     */
    "paused": {
        get: getSingletonValue.bind(null, "paused")
    }
});

/**
 * Event emitter factory
 * @returns {EventEmitter}
 */
function newEmitter() {
    var emitter       = new events.EventEmitter();
    emitter.setMaxListeners(20);
    return emitter;
}

/**
 * Get the singleton's emitter, or a new one.
 * @returns {EventEmitter}
 */
function getSingletonEmitter() {
    if (singletonEmitter) {
        return singletonEmitter;
    }
    singletonEmitter = newEmitter();
    return singletonEmitter;
}

/**
 * Helper to allow methods to be called on the module export
 * before there's a running instance
 * @param {String} name
 * @returns {Function}
 */
function noop(name) {
    return function () {
        var args = Array.prototype.slice.call(arguments);
        if (singleton) {
            return singleton[name].apply(singleton, args);
        } else {
            if (publicUtils.isStreamArg(name, args)) {
                return utils.noopStream();
            }
        }
    };
}

/**
 * Create a single instance when module export is used directly via browserSync({});
 * This is mostly for back-compatibility, for also for the nicer api.
 * This will never be removed to ensure we never break user-land, but
 * we should discourage it's use.
 * @returns {*}
 */
function initSingleton() {
    var instance;
    if (instances.length) {
        instance = instances.filter(function (item) {
            return item.name === "singleton";
        });
        if (instance.length) {
            logger.error("{yellow:You tried to start BrowserSync twice!} To create multiple instances, use {cyan:browserSync.create().init()");
            return instance;
        }
    }
    var args = Array.prototype.slice.call(arguments);
    singleton = create("singleton", getSingletonEmitter());

    if (singletonPlugins.length) {
        singletonPlugins.forEach(function (obj) {
            singleton.instance.registerPlugin.apply(singleton.instance, obj.args);
        });
    }

    singleton.init.apply(null, args);
    return singleton;
}

/**
 * @param {String} prop
 * @returns {Object|Boolean}
 */
function getSingletonValue(prop) {
    var single = getSingle("singleton");
    if (single) {
        return single[prop];
    }
    return false;
}

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
function getSingle(name) {
    if (instances.length) {
        var match = instances.filter(function (item) {
            return item.name === name;
        });
        if (match.length) {
            return match[0];
        }
    }
    return false;
}

/**
 * Create an instance of BrowserSync
 * @param {String} [name]
 * @param {EventEmitter} [emitter]
 * @returns {{init: *, exit: (exit|exports), notify: *, reload: *, cleanup: *, emitter: (BrowserSync.events|*), use: *}}
 */
function create(name, emitter) {

    name    = name    || new Date().getTime();
    emitter = emitter || newEmitter();

    var browserSync = new BrowserSync(emitter, name);

    var instance = {
        name:      name,
        instance:  browserSync,
        init:      require("./lib/public/init")(browserSync, name, pjson),
        exit:      require("./lib/public/exit")(browserSync),
        notify:    require("./lib/public/notify")(browserSync),
        pause:     require("./lib/public/pause")(browserSync),
        resume:    require("./lib/public/resume")(browserSync),
        reload:    require("./lib/public/reload")(emitter),
        stream:    require("./lib/public/stream")(emitter),
        cleanup:   browserSync.cleanup.bind(browserSync),
        use:       browserSync.registerPlugin.bind(browserSync),
        getOption: browserSync.getOption.bind(browserSync),
        emitter:   browserSync.events,
        watch:     require("./lib/file-watcher").watch
    };

    Object.defineProperty(instance, "active", {
        get: function () {
            return browserSync.active;
        }
    });

    Object.defineProperty(instance, "paused", {
        get: function () {
            return browserSync.paused;
        }
    });

    instances.push(instance);

    return instance;
}

/**
 * Reset the state of the module.
 * (should only be needed for test environments)
 */
module.exports.reset = function () {
    instances.forEach(function (item) {
        item.cleanup();
    });
    instances        = [];
    singletonPlugins = [];
    singletonEmitter = false;
    singleton        = false;
    process.removeAllListeners("SIGINT");
};

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
module.exports.get = function (name) {
    var instance = getSingle(name);
    if (instance) {
        return instance;
    }
    throw new Error("An instance with the name `%s` was not found.".replace("%s", name));
};

/**
 * @type {Array}
 */
module.exports.instances = instances;

/**
 * Create an instance of BrowserSync
 * @type {create}
 */
module.exports.create    = create;
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"_bound":3}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":4,"ExpansionArg_string":"PureString"} start 337.1741 took 111.6368s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":4,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #! /usr/bin/env node
"use strict";

/**
 * @module BrowserSync
 */
var pjson         = require("./package.json");
var BrowserSync   = require("./lib/browser-sync");
var publicUtils   = require("./lib/public/public-utils");
var utils         = require("./lib/utils");
var events        = require("events");
var logger        = require("eazy-logger").Logger({
    useLevelPrefixes: true
});

var singleton        = false;
var singletonPlugins = [];
var instances        = [];

/**
 * @type {boolean|EventEmitter}
 */
var singletonEmitter = false;

/**
 * @method browserSync
 * @param {Object} [config] This is the main configuration for your BrowserSync instance and can contain any of the [available options]({{site.links.options}})
 *  If you do not pass a config an argument for configuration, BrowserSync will still run; but it will be in the `snippet` mode
 * @param {Function} [cb] If you pass a callback function, it will be called when BrowserSync has completed all setup tasks and is ready to use. This
 * is useful when you need to wait for information (for example: urls, port etc) or perform other tasks synchronously.
 * @returns {BrowserSync}
 */
module.exports         = initSingleton;
module.exports.init    = initSingleton;

/**
 * Register a plugin. Must implement at least a 'plugin' method that returns a
 * callable function.
 *
 * @method use
 * @param {String} name The name of the plugin
 * @param {Object} module The object to be `required`.
 * @param {Function} [cb] A callback function that will return any errors.
 */
module.exports.use     = function () {
    var args = Array.prototype.slice.call(arguments);
    singletonPlugins.push({
        args: args
    });
};

/**
 * The `reload` method will inform all browsers about changed files and will either cause the browser to refresh, or inject the files where possible.
 *
 * @method reload
 * @param {String|Array|Object} [arg] The file or files to be reloaded.
 * @returns {*}
 */
module.exports.reload  = noop("reload");

/**
 * The `stream` method returns a transform stream and can act once or on many files.
 *
 * @method stream
 * @param {Object} [opts] Configuration for the stream method
 * @since 2.6.0
 * @returns {*}
 */
module.exports.stream  = noop("stream");

/**
 * Helper method for browser notifications
 *
 * @method notify
 * @param {String|HTML} msg Can be a simple message such as 'Connected' or HTML
 * @param {Number} [timeout] How long the message will remain in the browser. @since 1.3.0
 */
module.exports.notify  = noop("notify");

/**
 * This method will close any running server, stop file watching & exit the current process.
 *
 * @method exit
 */
module.exports.exit    = noop("exit");

/**
 * Stand alone file-watcher. Use this along with BrowserSync to create your own, minimal build system
 * @method watch
 * @param {string} patterns Glob patterns for files to watch
 * @param {object} [opts] Options to be passed to Chokidar - check what's available in [their docs](https://github.com/paulmillr/chokidar#getting-started)
 * @param {function} [fn] Callback function for each event.
 * @since 2.6.0
 */
module.exports.watch   = noop("watch");

/**
 * Method to pause file change events
 *
 * @method pause
 */
module.exports.pause   = noop("pause");

/**
 * Method to resume paused watchers
 *
 * @method resume
 */
module.exports.resume  = noop("resume");

/**
 * Add properties fo
 */
Object.defineProperties(module.exports, {
    /**
     * The internal Event Emitter used by the running BrowserSync instance (if there is one).
     * You can use this to emit your own events, such as changed files, logging etc.
     *
     * @property emitter
     */
    "emitter": {
        get: function () {
            if (!singletonEmitter) {
                singletonEmitter = newEmitter();
                return singletonEmitter;
            }
            return singletonEmitter;
        }
    },
    /**
     * A simple true/false flag that you can use to determine if there's a currently-running BrowserSync instance.
     *
     * @property active
     */
    "active": {
        get: getSingletonValue.bind(null, "active")
    },
    /**
     * A simple true/false flag to determine if the current instance is paused
     *
     * @property paused
     */
    "paused": {
        get: getSingletonValue.bind(null, "paused")
    }
});

/**
 * Event emitter factory
 * @returns {EventEmitter}
 */
function newEmitter() {
    var emitter       = new events.EventEmitter();
    emitter.setMaxListeners(20);
    return emitter;
}

/**
 * Get the singleton's emitter, or a new one.
 * @returns {EventEmitter}
 */
function getSingletonEmitter() {
    if (singletonEmitter) {
        return singletonEmitter;
    }
    singletonEmitter = newEmitter();
    return singletonEmitter;
}

/**
 * Helper to allow methods to be called on the module export
 * before there's a running instance
 * @param {String} name
 * @returns {Function}
 */
function noop(name) {
    return function () {
        var args = Array.prototype.slice.call(arguments);
        if (singleton) {
            return singleton[name].apply(singleton, args);
        } else {
            if (publicUtils.isStreamArg(name, args)) {
                return utils.noopStream();
            }
        }
    };
}

/**
 * Create a single instance when module export is used directly via browserSync({});
 * This is mostly for back-compatibility, for also for the nicer api.
 * This will never be removed to ensure we never break user-land, but
 * we should discourage it's use.
 * @returns {*}
 */
function initSingleton() {
    var instance;
    if (instances.length) {
        instance = instances.filter(function (item) {
            return item.name === "singleton";
        });
        if (instance.length) {
            logger.error("{yellow:You tried to start BrowserSync twice!} To create multiple instances, use {cyan:browserSync.create().init()");
            return instance;
        }
    }
    var args = Array.prototype.slice.call(arguments);
    singleton = create("singleton", getSingletonEmitter());

    if (singletonPlugins.length) {
        singletonPlugins.forEach(function (obj) {
            singleton.instance.registerPlugin.apply(singleton.instance, obj.args);
        });
    }

    singleton.init.apply(null, args);
    return singleton;
}

/**
 * @param {String} prop
 * @returns {Object|Boolean}
 */
function getSingletonValue(prop) {
    var single = getSingle("singleton");
    if (single) {
        return single[prop];
    }
    return false;
}

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
function getSingle(name) {
    if (instances.length) {
        var match = instances.filter(function (item) {
            return item.name === name;
        });
        if (match.length) {
            return match[0];
        }
    }
    return false;
}

/**
 * Create an instance of BrowserSync
 * @param {String} [name]
 * @param {EventEmitter} [emitter]
 * @returns {{init: *, exit: (exit|exports), notify: *, reload: *, cleanup: *, emitter: (BrowserSync.events|*), use: *}}
 */
function create(name, emitter) {

    name    = name    || new Date().getTime();
    emitter = emitter || newEmitter();

    var browserSync = new BrowserSync(emitter, name);

    var instance = {
        name:      name,
        instance:  browserSync,
        init:      require("./lib/public/init")(browserSync, name, pjson),
        exit:      require("./lib/public/exit")(browserSync),
        notify:    require("./lib/public/notify")(browserSync),
        pause:     require("./lib/public/pause")(browserSync),
        resume:    require("./lib/public/resume")(browserSync),
        reload:    require("./lib/public/reload")(emitter),
        stream:    require("./lib/public/stream")(emitter),
        cleanup:   browserSync.cleanup.bind(browserSync),
        use:       browserSync.registerPlugin.bind(browserSync),
        getOption: browserSync.getOption.bind(browserSync),
        emitter:   browserSync.events,
        watch:     require("./lib/file-watcher").watch
    };

    Object.defineProperty(instance, "active", {
        get: function () {
            return browserSync.active;
        }
    });

    Object.defineProperty(instance, "paused", {
        get: function () {
            return browserSync.paused;
        }
    });

    instances.push(instance);

    return instance;
}

/**
 * Reset the state of the module.
 * (should only be needed for test environments)
 */
module.exports.reset = function () {
    instances.forEach(function (item) {
        item.cleanup();
    });
    instances        = [];
    singletonPlugins = [];
    singletonEmitter = false;
    singleton        = false;
    process.removeAllListeners("SIGINT");
};

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
module.exports.get = function (name) {
    var instance = getSingle(name);
    if (instance) {
        return instance;
    }
    throw new Error("An instance with the name `%s` was not found.".replace("%s", name));
};

/**
 * @type {Array}
 */
module.exports.instances = instances;

/**
 * Create an instance of BrowserSync
 * @type {create}
 */
module.exports.create    = create;
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":5,"ExpansionArg_array_length":0} start 449.5135 took 130.8938s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":5,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #! /usr/bin/env node
"use strict";

/**
 * @module BrowserSync
 */
var pjson         = require("./package.json");
var BrowserSync   = require("./lib/browser-sync");
var publicUtils   = require("./lib/public/public-utils");
var utils         = require("./lib/utils");
var events        = require("events");
var logger        = require("eazy-logger").Logger({
    useLevelPrefixes: true
});

var singleton        = false;
var singletonPlugins = [];
var instances        = [];

/**
 * @type {boolean|EventEmitter}
 */
var singletonEmitter = false;

/**
 * @method browserSync
 * @param {Object} [config] This is the main configuration for your BrowserSync instance and can contain any of the [available options]({{site.links.options}})
 *  If you do not pass a config an argument for configuration, BrowserSync will still run; but it will be in the `snippet` mode
 * @param {Function} [cb] If you pass a callback function, it will be called when BrowserSync has completed all setup tasks and is ready to use. This
 * is useful when you need to wait for information (for example: urls, port etc) or perform other tasks synchronously.
 * @returns {BrowserSync}
 */
module.exports         = initSingleton;
module.exports.init    = initSingleton;

/**
 * Register a plugin. Must implement at least a 'plugin' method that returns a
 * callable function.
 *
 * @method use
 * @param {String} name The name of the plugin
 * @param {Object} module The object to be `required`.
 * @param {Function} [cb] A callback function that will return any errors.
 */
module.exports.use     = function () {
    var args = Array.prototype.slice.call(arguments);
    singletonPlugins.push({
        args: args
    });
};

/**
 * The `reload` method will inform all browsers about changed files and will either cause the browser to refresh, or inject the files where possible.
 *
 * @method reload
 * @param {String|Array|Object} [arg] The file or files to be reloaded.
 * @returns {*}
 */
module.exports.reload  = noop("reload");

/**
 * The `stream` method returns a transform stream and can act once or on many files.
 *
 * @method stream
 * @param {Object} [opts] Configuration for the stream method
 * @since 2.6.0
 * @returns {*}
 */
module.exports.stream  = noop("stream");

/**
 * Helper method for browser notifications
 *
 * @method notify
 * @param {String|HTML} msg Can be a simple message such as 'Connected' or HTML
 * @param {Number} [timeout] How long the message will remain in the browser. @since 1.3.0
 */
module.exports.notify  = noop("notify");

/**
 * This method will close any running server, stop file watching & exit the current process.
 *
 * @method exit
 */
module.exports.exit    = noop("exit");

/**
 * Stand alone file-watcher. Use this along with BrowserSync to create your own, minimal build system
 * @method watch
 * @param {string} patterns Glob patterns for files to watch
 * @param {object} [opts] Options to be passed to Chokidar - check what's available in [their docs](https://github.com/paulmillr/chokidar#getting-started)
 * @param {function} [fn] Callback function for each event.
 * @since 2.6.0
 */
module.exports.watch   = noop("watch");

/**
 * Method to pause file change events
 *
 * @method pause
 */
module.exports.pause   = noop("pause");

/**
 * Method to resume paused watchers
 *
 * @method resume
 */
module.exports.resume  = noop("resume");

/**
 * Add properties fo
 */
Object.defineProperties(module.exports, {
    /**
     * The internal Event Emitter used by the running BrowserSync instance (if there is one).
     * You can use this to emit your own events, such as changed files, logging etc.
     *
     * @property emitter
     */
    "emitter": {
        get: function () {
            if (!singletonEmitter) {
                singletonEmitter = newEmitter();
                return singletonEmitter;
            }
            return singletonEmitter;
        }
    },
    /**
     * A simple true/false flag that you can use to determine if there's a currently-running BrowserSync instance.
     *
     * @property active
     */
    "active": {
        get: getSingletonValue.bind(null, "active")
    },
    /**
     * A simple true/false flag to determine if the current instance is paused
     *
     * @property paused
     */
    "paused": {
        get: getSingletonValue.bind(null, "paused")
    }
});

/**
 * Event emitter factory
 * @returns {EventEmitter}
 */
function newEmitter() {
    var emitter       = new events.EventEmitter();
    emitter.setMaxListeners(20);
    return emitter;
}

/**
 * Get the singleton's emitter, or a new one.
 * @returns {EventEmitter}
 */
function getSingletonEmitter() {
    if (singletonEmitter) {
        return singletonEmitter;
    }
    singletonEmitter = newEmitter();
    return singletonEmitter;
}

/**
 * Helper to allow methods to be called on the module export
 * before there's a running instance
 * @param {String} name
 * @returns {Function}
 */
function noop(name) {
    return function () {
        var args = Array.prototype.slice.call(arguments);
        if (singleton) {
            return singleton[name].apply(singleton, args);
        } else {
            if (publicUtils.isStreamArg(name, args)) {
                return utils.noopStream();
            }
        }
    };
}

/**
 * Create a single instance when module export is used directly via browserSync({});
 * This is mostly for back-compatibility, for also for the nicer api.
 * This will never be removed to ensure we never break user-land, but
 * we should discourage it's use.
 * @returns {*}
 */
function initSingleton() {
    var instance;
    if (instances.length) {
        instance = instances.filter(function (item) {
            return item.name === "singleton";
        });
        if (instance.length) {
            logger.error("{yellow:You tried to start BrowserSync twice!} To create multiple instances, use {cyan:browserSync.create().init()");
            return instance;
        }
    }
    var args = Array.prototype.slice.call(arguments);
    singleton = create("singleton", getSingletonEmitter());

    if (singletonPlugins.length) {
        singletonPlugins.forEach(function (obj) {
            singleton.instance.registerPlugin.apply(singleton.instance, obj.args);
        });
    }

    singleton.init.apply(null, args);
    return singleton;
}

/**
 * @param {String} prop
 * @returns {Object|Boolean}
 */
function getSingletonValue(prop) {
    var single = getSingle("singleton");
    if (single) {
        return single[prop];
    }
    return false;
}

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
function getSingle(name) {
    if (instances.length) {
        var match = instances.filter(function (item) {
            return item.name === name;
        });
        if (match.length) {
            return match[0];
        }
    }
    return false;
}

/**
 * Create an instance of BrowserSync
 * @param {String} [name]
 * @param {EventEmitter} [emitter]
 * @returns {{init: *, exit: (exit|exports), notify: *, reload: *, cleanup: *, emitter: (BrowserSync.events|*), use: *}}
 */
function create(name, emitter) {

    name    = name    || new Date().getTime();
    emitter = emitter || newEmitter();

    var browserSync = new BrowserSync(emitter, name);

    var instance = {
        name:      name,
        instance:  browserSync,
        init:      require("./lib/public/init")(browserSync, name, pjson),
        exit:      require("./lib/public/exit")(browserSync),
        notify:    require("./lib/public/notify")(browserSync),
        pause:     require("./lib/public/pause")(browserSync),
        resume:    require("./lib/public/resume")(browserSync),
        reload:    require("./lib/public/reload")(emitter),
        stream:    require("./lib/public/stream")(emitter),
        cleanup:   browserSync.cleanup.bind(browserSync),
        use:       browserSync.registerPlugin.bind(browserSync),
        getOption: browserSync.getOption.bind(browserSync),
        emitter:   browserSync.events,
        watch:     require("./lib/file-watcher").watch
    };

    Object.defineProperty(instance, "active", {
        get: function () {
            return browserSync.active;
        }
    });

    Object.defineProperty(instance, "paused", {
        get: function () {
            return browserSync.paused;
        }
    });

    instances.push(instance);

    return instance;
}

/**
 * Reset the state of the module.
 * (should only be needed for test environments)
 */
module.exports.reset = function () {
    instances.forEach(function (item) {
        item.cleanup();
    });
    instances        = [];
    singletonPlugins = [];
    singletonEmitter = false;
    singleton        = false;
    process.removeAllListeners("SIGINT");
};

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
module.exports.get = function (name) {
    var instance = getSingle(name);
    if (instance) {
        return instance;
    }
    throw new Error("An instance with the name `%s` was not found.".replace("%s", name));
};

/**
 * @type {Array}
 */
module.exports.instances = instances;

/**
 * Create an instance of BrowserSync
 * @type {create}
 */
module.exports.create    = create;
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":7,"ExpansionArg_array_element_0_type":0} start 581.4843 took 155.6986s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":7,"ExpansionArg_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #! /usr/bin/env node
"use strict";

/**
 * @module BrowserSync
 */
var pjson         = require("./package.json");
var BrowserSync   = require("./lib/browser-sync");
var publicUtils   = require("./lib/public/public-utils");
var utils         = require("./lib/utils");
var events        = require("events");
var logger        = require("eazy-logger").Logger({
    useLevelPrefixes: true
});

var singleton        = false;
var singletonPlugins = [];
var instances        = [];

/**
 * @type {boolean|EventEmitter}
 */
var singletonEmitter = false;

/**
 * @method browserSync
 * @param {Object} [config] This is the main configuration for your BrowserSync instance and can contain any of the [available options]({{site.links.options}})
 *  If you do not pass a config an argument for configuration, BrowserSync will still run; but it will be in the `snippet` mode
 * @param {Function} [cb] If you pass a callback function, it will be called when BrowserSync has completed all setup tasks and is ready to use. This
 * is useful when you need to wait for information (for example: urls, port etc) or perform other tasks synchronously.
 * @returns {BrowserSync}
 */
module.exports         = initSingleton;
module.exports.init    = initSingleton;

/**
 * Register a plugin. Must implement at least a 'plugin' method that returns a
 * callable function.
 *
 * @method use
 * @param {String} name The name of the plugin
 * @param {Object} module The object to be `required`.
 * @param {Function} [cb] A callback function that will return any errors.
 */
module.exports.use     = function () {
    var args = Array.prototype.slice.call(arguments);
    singletonPlugins.push({
        args: args
    });
};

/**
 * The `reload` method will inform all browsers about changed files and will either cause the browser to refresh, or inject the files where possible.
 *
 * @method reload
 * @param {String|Array|Object} [arg] The file or files to be reloaded.
 * @returns {*}
 */
module.exports.reload  = noop("reload");

/**
 * The `stream` method returns a transform stream and can act once or on many files.
 *
 * @method stream
 * @param {Object} [opts] Configuration for the stream method
 * @since 2.6.0
 * @returns {*}
 */
module.exports.stream  = noop("stream");

/**
 * Helper method for browser notifications
 *
 * @method notify
 * @param {String|HTML} msg Can be a simple message such as 'Connected' or HTML
 * @param {Number} [timeout] How long the message will remain in the browser. @since 1.3.0
 */
module.exports.notify  = noop("notify");

/**
 * This method will close any running server, stop file watching & exit the current process.
 *
 * @method exit
 */
module.exports.exit    = noop("exit");

/**
 * Stand alone file-watcher. Use this along with BrowserSync to create your own, minimal build system
 * @method watch
 * @param {string} patterns Glob patterns for files to watch
 * @param {object} [opts] Options to be passed to Chokidar - check what's available in [their docs](https://github.com/paulmillr/chokidar#getting-started)
 * @param {function} [fn] Callback function for each event.
 * @since 2.6.0
 */
module.exports.watch   = noop("watch");

/**
 * Method to pause file change events
 *
 * @method pause
 */
module.exports.pause   = noop("pause");

/**
 * Method to resume paused watchers
 *
 * @method resume
 */
module.exports.resume  = noop("resume");

/**
 * Add properties fo
 */
Object.defineProperties(module.exports, {
    /**
     * The internal Event Emitter used by the running BrowserSync instance (if there is one).
     * You can use this to emit your own events, such as changed files, logging etc.
     *
     * @property emitter
     */
    "emitter": {
        get: function () {
            if (!singletonEmitter) {
                singletonEmitter = newEmitter();
                return singletonEmitter;
            }
            return singletonEmitter;
        }
    },
    /**
     * A simple true/false flag that you can use to determine if there's a currently-running BrowserSync instance.
     *
     * @property active
     */
    "active": {
        get: getSingletonValue.bind(null, "active")
    },
    /**
     * A simple true/false flag to determine if the current instance is paused
     *
     * @property paused
     */
    "paused": {
        get: getSingletonValue.bind(null, "paused")
    }
});

/**
 * Event emitter factory
 * @returns {EventEmitter}
 */
function newEmitter() {
    var emitter       = new events.EventEmitter();
    emitter.setMaxListeners(20);
    return emitter;
}

/**
 * Get the singleton's emitter, or a new one.
 * @returns {EventEmitter}
 */
function getSingletonEmitter() {
    if (singletonEmitter) {
        return singletonEmitter;
    }
    singletonEmitter = newEmitter();
    return singletonEmitter;
}

/**
 * Helper to allow methods to be called on the module export
 * before there's a running instance
 * @param {String} name
 * @returns {Function}
 */
function noop(name) {
    return function () {
        var args = Array.prototype.slice.call(arguments);
        if (singleton) {
            return singleton[name].apply(singleton, args);
        } else {
            if (publicUtils.isStreamArg(name, args)) {
                return utils.noopStream();
            }
        }
    };
}

/**
 * Create a single instance when module export is used directly via browserSync({});
 * This is mostly for back-compatibility, for also for the nicer api.
 * This will never be removed to ensure we never break user-land, but
 * we should discourage it's use.
 * @returns {*}
 */
function initSingleton() {
    var instance;
    if (instances.length) {
        instance = instances.filter(function (item) {
            return item.name === "singleton";
        });
        if (instance.length) {
            logger.error("{yellow:You tried to start BrowserSync twice!} To create multiple instances, use {cyan:browserSync.create().init()");
            return instance;
        }
    }
    var args = Array.prototype.slice.call(arguments);
    singleton = create("singleton", getSingletonEmitter());

    if (singletonPlugins.length) {
        singletonPlugins.forEach(function (obj) {
            singleton.instance.registerPlugin.apply(singleton.instance, obj.args);
        });
    }

    singleton.init.apply(null, args);
    return singleton;
}

/**
 * @param {String} prop
 * @returns {Object|Boolean}
 */
function getSingletonValue(prop) {
    var single = getSingle("singleton");
    if (single) {
        return single[prop];
    }
    return false;
}

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
function getSingle(name) {
    if (instances.length) {
        var match = instances.filter(function (item) {
            return item.name === name;
        });
        if (match.length) {
            return match[0];
        }
    }
    return false;
}

/**
 * Create an instance of BrowserSync
 * @param {String} [name]
 * @param {EventEmitter} [emitter]
 * @returns {{init: *, exit: (exit|exports), notify: *, reload: *, cleanup: *, emitter: (BrowserSync.events|*), use: *}}
 */
function create(name, emitter) {

    name    = name    || new Date().getTime();
    emitter = emitter || newEmitter();

    var browserSync = new BrowserSync(emitter, name);

    var instance = {
        name:      name,
        instance:  browserSync,
        init:      require("./lib/public/init")(browserSync, name, pjson),
        exit:      require("./lib/public/exit")(browserSync),
        notify:    require("./lib/public/notify")(browserSync),
        pause:     require("./lib/public/pause")(browserSync),
        resume:    require("./lib/public/resume")(browserSync),
        reload:    require("./lib/public/reload")(emitter),
        stream:    require("./lib/public/stream")(emitter),
        cleanup:   browserSync.cleanup.bind(browserSync),
        use:       browserSync.registerPlugin.bind(browserSync),
        getOption: browserSync.getOption.bind(browserSync),
        emitter:   browserSync.events,
        watch:     require("./lib/file-watcher").watch
    };

    Object.defineProperty(instance, "active", {
        get: function () {
            return browserSync.active;
        }
    });

    Object.defineProperty(instance, "paused", {
        get: function () {
            return browserSync.paused;
        }
    });

    instances.push(instance);

    return instance;
}

/**
 * Reset the state of the module.
 * (should only be needed for test environments)
 */
module.exports.reset = function () {
    instances.forEach(function (item) {
        item.cleanup();
    });
    instances        = [];
    singletonPlugins = [];
    singletonEmitter = false;
    singleton        = false;
    process.removeAllListeners("SIGINT");
};

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
module.exports.get = function (name) {
    var instance = getSingle(name);
    if (instance) {
        return instance;
    }
    throw new Error("An instance with the name `%s` was not found.".replace("%s", name));
};

/**
 * @type {Array}
 */
module.exports.instances = instances;

/**
 * Create an instance of BrowserSync
 * @type {create}
 */
module.exports.create    = create;
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":7}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":6,"ExpansionArg_bool":false} start 581.9895 took 158.5874s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":6,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #! /usr/bin/env node
"use strict";

/**
 * @module BrowserSync
 */
var pjson         = require("./package.json");
var BrowserSync   = require("./lib/browser-sync");
var publicUtils   = require("./lib/public/public-utils");
var utils         = require("./lib/utils");
var events        = require("events");
var logger        = require("eazy-logger").Logger({
    useLevelPrefixes: true
});

var singleton        = false;
var singletonPlugins = [];
var instances        = [];

/**
 * @type {boolean|EventEmitter}
 */
var singletonEmitter = false;

/**
 * @method browserSync
 * @param {Object} [config] This is the main configuration for your BrowserSync instance and can contain any of the [available options]({{site.links.options}})
 *  If you do not pass a config an argument for configuration, BrowserSync will still run; but it will be in the `snippet` mode
 * @param {Function} [cb] If you pass a callback function, it will be called when BrowserSync has completed all setup tasks and is ready to use. This
 * is useful when you need to wait for information (for example: urls, port etc) or perform other tasks synchronously.
 * @returns {BrowserSync}
 */
module.exports         = initSingleton;
module.exports.init    = initSingleton;

/**
 * Register a plugin. Must implement at least a 'plugin' method that returns a
 * callable function.
 *
 * @method use
 * @param {String} name The name of the plugin
 * @param {Object} module The object to be `required`.
 * @param {Function} [cb] A callback function that will return any errors.
 */
module.exports.use     = function () {
    var args = Array.prototype.slice.call(arguments);
    singletonPlugins.push({
        args: args
    });
};

/**
 * The `reload` method will inform all browsers about changed files and will either cause the browser to refresh, or inject the files where possible.
 *
 * @method reload
 * @param {String|Array|Object} [arg] The file or files to be reloaded.
 * @returns {*}
 */
module.exports.reload  = noop("reload");

/**
 * The `stream` method returns a transform stream and can act once or on many files.
 *
 * @method stream
 * @param {Object} [opts] Configuration for the stream method
 * @since 2.6.0
 * @returns {*}
 */
module.exports.stream  = noop("stream");

/**
 * Helper method for browser notifications
 *
 * @method notify
 * @param {String|HTML} msg Can be a simple message such as 'Connected' or HTML
 * @param {Number} [timeout] How long the message will remain in the browser. @since 1.3.0
 */
module.exports.notify  = noop("notify");

/**
 * This method will close any running server, stop file watching & exit the current process.
 *
 * @method exit
 */
module.exports.exit    = noop("exit");

/**
 * Stand alone file-watcher. Use this along with BrowserSync to create your own, minimal build system
 * @method watch
 * @param {string} patterns Glob patterns for files to watch
 * @param {object} [opts] Options to be passed to Chokidar - check what's available in [their docs](https://github.com/paulmillr/chokidar#getting-started)
 * @param {function} [fn] Callback function for each event.
 * @since 2.6.0
 */
module.exports.watch   = noop("watch");

/**
 * Method to pause file change events
 *
 * @method pause
 */
module.exports.pause   = noop("pause");

/**
 * Method to resume paused watchers
 *
 * @method resume
 */
module.exports.resume  = noop("resume");

/**
 * Add properties fo
 */
Object.defineProperties(module.exports, {
    /**
     * The internal Event Emitter used by the running BrowserSync instance (if there is one).
     * You can use this to emit your own events, such as changed files, logging etc.
     *
     * @property emitter
     */
    "emitter": {
        get: function () {
            if (!singletonEmitter) {
                singletonEmitter = newEmitter();
                return singletonEmitter;
            }
            return singletonEmitter;
        }
    },
    /**
     * A simple true/false flag that you can use to determine if there's a currently-running BrowserSync instance.
     *
     * @property active
     */
    "active": {
        get: getSingletonValue.bind(null, "active")
    },
    /**
     * A simple true/false flag to determine if the current instance is paused
     *
     * @property paused
     */
    "paused": {
        get: getSingletonValue.bind(null, "paused")
    }
});

/**
 * Event emitter factory
 * @returns {EventEmitter}
 */
function newEmitter() {
    var emitter       = new events.EventEmitter();
    emitter.setMaxListeners(20);
    return emitter;
}

/**
 * Get the singleton's emitter, or a new one.
 * @returns {EventEmitter}
 */
function getSingletonEmitter() {
    if (singletonEmitter) {
        return singletonEmitter;
    }
    singletonEmitter = newEmitter();
    return singletonEmitter;
}

/**
 * Helper to allow methods to be called on the module export
 * before there's a running instance
 * @param {String} name
 * @returns {Function}
 */
function noop(name) {
    return function () {
        var args = Array.prototype.slice.call(arguments);
        if (singleton) {
            return singleton[name].apply(singleton, args);
        } else {
            if (publicUtils.isStreamArg(name, args)) {
                return utils.noopStream();
            }
        }
    };
}

/**
 * Create a single instance when module export is used directly via browserSync({});
 * This is mostly for back-compatibility, for also for the nicer api.
 * This will never be removed to ensure we never break user-land, but
 * we should discourage it's use.
 * @returns {*}
 */
function initSingleton() {
    var instance;
    if (instances.length) {
        instance = instances.filter(function (item) {
            return item.name === "singleton";
        });
        if (instance.length) {
            logger.error("{yellow:You tried to start BrowserSync twice!} To create multiple instances, use {cyan:browserSync.create().init()");
            return instance;
        }
    }
    var args = Array.prototype.slice.call(arguments);
    singleton = create("singleton", getSingletonEmitter());

    if (singletonPlugins.length) {
        singletonPlugins.forEach(function (obj) {
            singleton.instance.registerPlugin.apply(singleton.instance, obj.args);
        });
    }

    singleton.init.apply(null, args);
    return singleton;
}

/**
 * @param {String} prop
 * @returns {Object|Boolean}
 */
function getSingletonValue(prop) {
    var single = getSingle("singleton");
    if (single) {
        return single[prop];
    }
    return false;
}

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
function getSingle(name) {
    if (instances.length) {
        var match = instances.filter(function (item) {
            return item.name === name;
        });
        if (match.length) {
            return match[0];
        }
    }
    return false;
}

/**
 * Create an instance of BrowserSync
 * @param {String} [name]
 * @param {EventEmitter} [emitter]
 * @returns {{init: *, exit: (exit|exports), notify: *, reload: *, cleanup: *, emitter: (BrowserSync.events|*), use: *}}
 */
function create(name, emitter) {

    name    = name    || new Date().getTime();
    emitter = emitter || newEmitter();

    var browserSync = new BrowserSync(emitter, name);

    var instance = {
        name:      name,
        instance:  browserSync,
        init:      require("./lib/public/init")(browserSync, name, pjson),
        exit:      require("./lib/public/exit")(browserSync),
        notify:    require("./lib/public/notify")(browserSync),
        pause:     require("./lib/public/pause")(browserSync),
        resume:    require("./lib/public/resume")(browserSync),
        reload:    require("./lib/public/reload")(emitter),
        stream:    require("./lib/public/stream")(emitter),
        cleanup:   browserSync.cleanup.bind(browserSync),
        use:       browserSync.registerPlugin.bind(browserSync),
        getOption: browserSync.getOption.bind(browserSync),
        emitter:   browserSync.events,
        watch:     require("./lib/file-watcher").watch
    };

    Object.defineProperty(instance, "active", {
        get: function () {
            return browserSync.active;
        }
    });

    Object.defineProperty(instance, "paused", {
        get: function () {
            return browserSync.paused;
        }
    });

    instances.push(instance);

    return instance;
}

/**
 * Reset the state of the module.
 * (should only be needed for test environments)
 */
module.exports.reset = function () {
    instances.forEach(function (item) {
        item.cleanup();
    });
    instances        = [];
    singletonPlugins = [];
    singletonEmitter = false;
    singleton        = false;
    process.removeAllListeners("SIGINT");
};

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
module.exports.get = function (name) {
    var instance = getSingle(name);
    if (instance) {
        return instance;
    }
    throw new Error("An instance with the name `%s` was not found.".replace("%s", name));
};

/**
 * @type {Array}
 */
module.exports.instances = instances;

/**
 * Create an instance of BrowserSync
 * @type {create}
 */
module.exports.create    = create;
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":9,"ExpansionArg_array_element_1_type":0} start 738.1169 took 130.1637s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":9,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #! /usr/bin/env node
"use strict";

/**
 * @module BrowserSync
 */
var pjson         = require("./package.json");
var BrowserSync   = require("./lib/browser-sync");
var publicUtils   = require("./lib/public/public-utils");
var utils         = require("./lib/utils");
var events        = require("events");
var logger        = require("eazy-logger").Logger({
    useLevelPrefixes: true
});

var singleton        = false;
var singletonPlugins = [];
var instances        = [];

/**
 * @type {boolean|EventEmitter}
 */
var singletonEmitter = false;

/**
 * @method browserSync
 * @param {Object} [config] This is the main configuration for your BrowserSync instance and can contain any of the [available options]({{site.links.options}})
 *  If you do not pass a config an argument for configuration, BrowserSync will still run; but it will be in the `snippet` mode
 * @param {Function} [cb] If you pass a callback function, it will be called when BrowserSync has completed all setup tasks and is ready to use. This
 * is useful when you need to wait for information (for example: urls, port etc) or perform other tasks synchronously.
 * @returns {BrowserSync}
 */
module.exports         = initSingleton;
module.exports.init    = initSingleton;

/**
 * Register a plugin. Must implement at least a 'plugin' method that returns a
 * callable function.
 *
 * @method use
 * @param {String} name The name of the plugin
 * @param {Object} module The object to be `required`.
 * @param {Function} [cb] A callback function that will return any errors.
 */
module.exports.use     = function () {
    var args = Array.prototype.slice.call(arguments);
    singletonPlugins.push({
        args: args
    });
};

/**
 * The `reload` method will inform all browsers about changed files and will either cause the browser to refresh, or inject the files where possible.
 *
 * @method reload
 * @param {String|Array|Object} [arg] The file or files to be reloaded.
 * @returns {*}
 */
module.exports.reload  = noop("reload");

/**
 * The `stream` method returns a transform stream and can act once or on many files.
 *
 * @method stream
 * @param {Object} [opts] Configuration for the stream method
 * @since 2.6.0
 * @returns {*}
 */
module.exports.stream  = noop("stream");

/**
 * Helper method for browser notifications
 *
 * @method notify
 * @param {String|HTML} msg Can be a simple message such as 'Connected' or HTML
 * @param {Number} [timeout] How long the message will remain in the browser. @since 1.3.0
 */
module.exports.notify  = noop("notify");

/**
 * This method will close any running server, stop file watching & exit the current process.
 *
 * @method exit
 */
module.exports.exit    = noop("exit");

/**
 * Stand alone file-watcher. Use this along with BrowserSync to create your own, minimal build system
 * @method watch
 * @param {string} patterns Glob patterns for files to watch
 * @param {object} [opts] Options to be passed to Chokidar - check what's available in [their docs](https://github.com/paulmillr/chokidar#getting-started)
 * @param {function} [fn] Callback function for each event.
 * @since 2.6.0
 */
module.exports.watch   = noop("watch");

/**
 * Method to pause file change events
 *
 * @method pause
 */
module.exports.pause   = noop("pause");

/**
 * Method to resume paused watchers
 *
 * @method resume
 */
module.exports.resume  = noop("resume");

/**
 * Add properties fo
 */
Object.defineProperties(module.exports, {
    /**
     * The internal Event Emitter used by the running BrowserSync instance (if there is one).
     * You can use this to emit your own events, such as changed files, logging etc.
     *
     * @property emitter
     */
    "emitter": {
        get: function () {
            if (!singletonEmitter) {
                singletonEmitter = newEmitter();
                return singletonEmitter;
            }
            return singletonEmitter;
        }
    },
    /**
     * A simple true/false flag that you can use to determine if there's a currently-running BrowserSync instance.
     *
     * @property active
     */
    "active": {
        get: getSingletonValue.bind(null, "active")
    },
    /**
     * A simple true/false flag to determine if the current instance is paused
     *
     * @property paused
     */
    "paused": {
        get: getSingletonValue.bind(null, "paused")
    }
});

/**
 * Event emitter factory
 * @returns {EventEmitter}
 */
function newEmitter() {
    var emitter       = new events.EventEmitter();
    emitter.setMaxListeners(20);
    return emitter;
}

/**
 * Get the singleton's emitter, or a new one.
 * @returns {EventEmitter}
 */
function getSingletonEmitter() {
    if (singletonEmitter) {
        return singletonEmitter;
    }
    singletonEmitter = newEmitter();
    return singletonEmitter;
}

/**
 * Helper to allow methods to be called on the module export
 * before there's a running instance
 * @param {String} name
 * @returns {Function}
 */
function noop(name) {
    return function () {
        var args = Array.prototype.slice.call(arguments);
        if (singleton) {
            return singleton[name].apply(singleton, args);
        } else {
            if (publicUtils.isStreamArg(name, args)) {
                return utils.noopStream();
            }
        }
    };
}

/**
 * Create a single instance when module export is used directly via browserSync({});
 * This is mostly for back-compatibility, for also for the nicer api.
 * This will never be removed to ensure we never break user-land, but
 * we should discourage it's use.
 * @returns {*}
 */
function initSingleton() {
    var instance;
    if (instances.length) {
        instance = instances.filter(function (item) {
            return item.name === "singleton";
        });
        if (instance.length) {
            logger.error("{yellow:You tried to start BrowserSync twice!} To create multiple instances, use {cyan:browserSync.create().init()");
            return instance;
        }
    }
    var args = Array.prototype.slice.call(arguments);
    singleton = create("singleton", getSingletonEmitter());

    if (singletonPlugins.length) {
        singletonPlugins.forEach(function (obj) {
            singleton.instance.registerPlugin.apply(singleton.instance, obj.args);
        });
    }

    singleton.init.apply(null, args);
    return singleton;
}

/**
 * @param {String} prop
 * @returns {Object|Boolean}
 */
function getSingletonValue(prop) {
    var single = getSingle("singleton");
    if (single) {
        return single[prop];
    }
    return false;
}

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
function getSingle(name) {
    if (instances.length) {
        var match = instances.filter(function (item) {
            return item.name === name;
        });
        if (match.length) {
            return match[0];
        }
    }
    return false;
}

/**
 * Create an instance of BrowserSync
 * @param {String} [name]
 * @param {EventEmitter} [emitter]
 * @returns {{init: *, exit: (exit|exports), notify: *, reload: *, cleanup: *, emitter: (BrowserSync.events|*), use: *}}
 */
function create(name, emitter) {

    name    = name    || new Date().getTime();
    emitter = emitter || newEmitter();

    var browserSync = new BrowserSync(emitter, name);

    var instance = {
        name:      name,
        instance:  browserSync,
        init:      require("./lib/public/init")(browserSync, name, pjson),
        exit:      require("./lib/public/exit")(browserSync),
        notify:    require("./lib/public/notify")(browserSync),
        pause:     require("./lib/public/pause")(browserSync),
        resume:    require("./lib/public/resume")(browserSync),
        reload:    require("./lib/public/reload")(emitter),
        stream:    require("./lib/public/stream")(emitter),
        cleanup:   browserSync.cleanup.bind(browserSync),
        use:       browserSync.registerPlugin.bind(browserSync),
        getOption: browserSync.getOption.bind(browserSync),
        emitter:   browserSync.events,
        watch:     require("./lib/file-watcher").watch
    };

    Object.defineProperty(instance, "active", {
        get: function () {
            return browserSync.active;
        }
    });

    Object.defineProperty(instance, "paused", {
        get: function () {
            return browserSync.paused;
        }
    });

    instances.push(instance);

    return instance;
}

/**
 * Reset the state of the module.
 * (should only be needed for test environments)
 */
module.exports.reset = function () {
    instances.forEach(function (item) {
        item.cleanup();
    });
    instances        = [];
    singletonPlugins = [];
    singletonEmitter = false;
    singleton        = false;
    process.removeAllListeners("SIGINT");
};

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
module.exports.get = function (name) {
    var instance = getSingle(name);
    if (instance) {
        return instance;
    }
    throw new Error("An instance with the name `%s` was not found.".replace("%s", name));
};

/**
 * @type {Array}
 */
module.exports.instances = instances;

/**
 * Create an instance of BrowserSync
 * @type {create}
 */
module.exports.create    = create;
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":9}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":8,"ExpansionArg_array_element_0_int":0} start 738.4803 took 146.4975s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":8,"ExpansionArg_array_element_0_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #! /usr/bin/env node
"use strict";

/**
 * @module BrowserSync
 */
var pjson         = require("./package.json");
var BrowserSync   = require("./lib/browser-sync");
var publicUtils   = require("./lib/public/public-utils");
var utils         = require("./lib/utils");
var events        = require("events");
var logger        = require("eazy-logger").Logger({
    useLevelPrefixes: true
});

var singleton        = false;
var singletonPlugins = [];
var instances        = [];

/**
 * @type {boolean|EventEmitter}
 */
var singletonEmitter = false;

/**
 * @method browserSync
 * @param {Object} [config] This is the main configuration for your BrowserSync instance and can contain any of the [available options]({{site.links.options}})
 *  If you do not pass a config an argument for configuration, BrowserSync will still run; but it will be in the `snippet` mode
 * @param {Function} [cb] If you pass a callback function, it will be called when BrowserSync has completed all setup tasks and is ready to use. This
 * is useful when you need to wait for information (for example: urls, port etc) or perform other tasks synchronously.
 * @returns {BrowserSync}
 */
module.exports         = initSingleton;
module.exports.init    = initSingleton;

/**
 * Register a plugin. Must implement at least a 'plugin' method that returns a
 * callable function.
 *
 * @method use
 * @param {String} name The name of the plugin
 * @param {Object} module The object to be `required`.
 * @param {Function} [cb] A callback function that will return any errors.
 */
module.exports.use     = function () {
    var args = Array.prototype.slice.call(arguments);
    singletonPlugins.push({
        args: args
    });
};

/**
 * The `reload` method will inform all browsers about changed files and will either cause the browser to refresh, or inject the files where possible.
 *
 * @method reload
 * @param {String|Array|Object} [arg] The file or files to be reloaded.
 * @returns {*}
 */
module.exports.reload  = noop("reload");

/**
 * The `stream` method returns a transform stream and can act once or on many files.
 *
 * @method stream
 * @param {Object} [opts] Configuration for the stream method
 * @since 2.6.0
 * @returns {*}
 */
module.exports.stream  = noop("stream");

/**
 * Helper method for browser notifications
 *
 * @method notify
 * @param {String|HTML} msg Can be a simple message such as 'Connected' or HTML
 * @param {Number} [timeout] How long the message will remain in the browser. @since 1.3.0
 */
module.exports.notify  = noop("notify");

/**
 * This method will close any running server, stop file watching & exit the current process.
 *
 * @method exit
 */
module.exports.exit    = noop("exit");

/**
 * Stand alone file-watcher. Use this along with BrowserSync to create your own, minimal build system
 * @method watch
 * @param {string} patterns Glob patterns for files to watch
 * @param {object} [opts] Options to be passed to Chokidar - check what's available in [their docs](https://github.com/paulmillr/chokidar#getting-started)
 * @param {function} [fn] Callback function for each event.
 * @since 2.6.0
 */
module.exports.watch   = noop("watch");

/**
 * Method to pause file change events
 *
 * @method pause
 */
module.exports.pause   = noop("pause");

/**
 * Method to resume paused watchers
 *
 * @method resume
 */
module.exports.resume  = noop("resume");

/**
 * Add properties fo
 */
Object.defineProperties(module.exports, {
    /**
     * The internal Event Emitter used by the running BrowserSync instance (if there is one).
     * You can use this to emit your own events, such as changed files, logging etc.
     *
     * @property emitter
     */
    "emitter": {
        get: function () {
            if (!singletonEmitter) {
                singletonEmitter = newEmitter();
                return singletonEmitter;
            }
            return singletonEmitter;
        }
    },
    /**
     * A simple true/false flag that you can use to determine if there's a currently-running BrowserSync instance.
     *
     * @property active
     */
    "active": {
        get: getSingletonValue.bind(null, "active")
    },
    /**
     * A simple true/false flag to determine if the current instance is paused
     *
     * @property paused
     */
    "paused": {
        get: getSingletonValue.bind(null, "paused")
    }
});

/**
 * Event emitter factory
 * @returns {EventEmitter}
 */
function newEmitter() {
    var emitter       = new events.EventEmitter();
    emitter.setMaxListeners(20);
    return emitter;
}

/**
 * Get the singleton's emitter, or a new one.
 * @returns {EventEmitter}
 */
function getSingletonEmitter() {
    if (singletonEmitter) {
        return singletonEmitter;
    }
    singletonEmitter = newEmitter();
    return singletonEmitter;
}

/**
 * Helper to allow methods to be called on the module export
 * before there's a running instance
 * @param {String} name
 * @returns {Function}
 */
function noop(name) {
    return function () {
        var args = Array.prototype.slice.call(arguments);
        if (singleton) {
            return singleton[name].apply(singleton, args);
        } else {
            if (publicUtils.isStreamArg(name, args)) {
                return utils.noopStream();
            }
        }
    };
}

/**
 * Create a single instance when module export is used directly via browserSync({});
 * This is mostly for back-compatibility, for also for the nicer api.
 * This will never be removed to ensure we never break user-land, but
 * we should discourage it's use.
 * @returns {*}
 */
function initSingleton() {
    var instance;
    if (instances.length) {
        instance = instances.filter(function (item) {
            return item.name === "singleton";
        });
        if (instance.length) {
            logger.error("{yellow:You tried to start BrowserSync twice!} To create multiple instances, use {cyan:browserSync.create().init()");
            return instance;
        }
    }
    var args = Array.prototype.slice.call(arguments);
    singleton = create("singleton", getSingletonEmitter());

    if (singletonPlugins.length) {
        singletonPlugins.forEach(function (obj) {
            singleton.instance.registerPlugin.apply(singleton.instance, obj.args);
        });
    }

    singleton.init.apply(null, args);
    return singleton;
}

/**
 * @param {String} prop
 * @returns {Object|Boolean}
 */
function getSingletonValue(prop) {
    var single = getSingle("singleton");
    if (single) {
        return single[prop];
    }
    return false;
}

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
function getSingle(name) {
    if (instances.length) {
        var match = instances.filter(function (item) {
            return item.name === name;
        });
        if (match.length) {
            return match[0];
        }
    }
    return false;
}

/**
 * Create an instance of BrowserSync
 * @param {String} [name]
 * @param {EventEmitter} [emitter]
 * @returns {{init: *, exit: (exit|exports), notify: *, reload: *, cleanup: *, emitter: (BrowserSync.events|*), use: *}}
 */
function create(name, emitter) {

    name    = name    || new Date().getTime();
    emitter = emitter || newEmitter();

    var browserSync = new BrowserSync(emitter, name);

    var instance = {
        name:      name,
        instance:  browserSync,
        init:      require("./lib/public/init")(browserSync, name, pjson),
        exit:      require("./lib/public/exit")(browserSync),
        notify:    require("./lib/public/notify")(browserSync),
        pause:     require("./lib/public/pause")(browserSync),
        resume:    require("./lib/public/resume")(browserSync),
        reload:    require("./lib/public/reload")(emitter),
        stream:    require("./lib/public/stream")(emitter),
        cleanup:   browserSync.cleanup.bind(browserSync),
        use:       browserSync.registerPlugin.bind(browserSync),
        getOption: browserSync.getOption.bind(browserSync),
        emitter:   browserSync.events,
        watch:     require("./lib/file-watcher").watch
    };

    Object.defineProperty(instance, "active", {
        get: function () {
            return browserSync.active;
        }
    });

    Object.defineProperty(instance, "paused", {
        get: function () {
            return browserSync.paused;
        }
    });

    instances.push(instance);

    return instance;
}

/**
 * Reset the state of the module.
 * (should only be needed for test environments)
 */
module.exports.reset = function () {
    instances.forEach(function (item) {
        item.cleanup();
    });
    instances        = [];
    singletonPlugins = [];
    singletonEmitter = false;
    singleton        = false;
    process.removeAllListeners("SIGINT");
};

/**
 * Get a single instance by name
 * @param {String} name
 * @returns {Object|Boolean}
 */
module.exports.get = function (name) {
    var instance = getSingle(name);
    if (instance) {
        return instance;
    }
    throw new Error("An instance with the name `%s` was not found.".replace("%s", name));
};

/**
 * @type {Array}
 */
module.exports.instances = instances;

/**
 * Create an instance of BrowserSync
 * @type {create}
 */
module.exports.create    = create;
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":8}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 63% Coverage (LOC): 65%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 37% Coverage (LOC): 55%
*- File /root/Targets/front-end-guide/node_modules/front-end-guide/index.js. Coverage (Term): 8% Coverage (LOC): 14%
*- File /root/Targets/front-end-guide/node_modules/lodash-node/modern/index.js. Coverage (Term): 21% Coverage (LOC): 31%
*- File /root/Targets/front-end-guide/node_modules/gulp-autoprefixer/index.js. Coverage (Term): 28% Coverage (LOC): 29%
*- File /root/Targets/front-end-guide/node_modules/gulp-util/index.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/front-end-guide/node_modules/vinyl/index.js. Coverage (Term): 20% Coverage (LOC): 30%
*- File /root/Targets/front-end-guide/node_modules/clone/clone.js. Coverage (Term): 10% Coverage (LOC): 18%
*- File /root/Targets/front-end-guide/node_modules/clone-stats/index.js. Coverage (Term): 43% Coverage (LOC): 50%
*- File /root/Targets/front-end-guide/node_modules/vinyl/lib/cloneBuffer.js. Coverage (Term): 53% Coverage (LOC): 63%
*- File /root/Targets/front-end-guide/node_modules/vinyl/lib/isBuffer.js. Coverage (Term): 64% Coverage (LOC): 86%
*- File /root/Targets/front-end-guide/node_modules/vinyl/lib/isStream.js. Coverage (Term): 62% Coverage (LOC): 83%
*- File /root/Targets/front-end-guide/node_modules/vinyl/lib/isNull.js. Coverage (Term): 61% Coverage (LOC): 80%
*- File /root/Targets/front-end-guide/node_modules/vinyl/lib/inspectStream.js. Coverage (Term): 40% Coverage (LOC): 45%
*- File /root/Targets/front-end-guide/node_modules/replace-ext/index.js. Coverage (Term): 32% Coverage (LOC): 45%
*- File /root/Targets/front-end-guide/node_modules/chalk/index.js. Coverage (Term): 50% Coverage (LOC): 60%
*- File /root/Targets/front-end-guide/node_modules/escape-string-regexp/index.js. Coverage (Term): 85% Coverage (LOC): 90%
*- File /root/Targets/front-end-guide/node_modules/ansi-styles/index.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/front-end-guide/node_modules/strip-ansi/index.js. Coverage (Term): 57% Coverage (LOC): 86%
*- File /root/Targets/front-end-guide/node_modules/ansi-regex/index.js. Coverage (Term): 93% Coverage (LOC): 100%
*- File /root/Targets/front-end-guide/node_modules/has-ansi/index.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/front-end-guide/node_modules/supports-color/index.js. Coverage (Term): 66% Coverage (LOC): 48%
*- File /root/Targets/front-end-guide/node_modules/dateformat/lib/dateformat.js. Coverage (Term): 17% Coverage (LOC): 41%
*- File /root/Targets/front-end-guide/node_modules/gulp-util/lib/log.js. Coverage (Term): 40% Coverage (LOC): 55%
*- File /root/Targets/front-end-guide/node_modules/gulp-util/lib/template.js. Coverage (Term): 47% Coverage (LOC): 67%
*- File /root/Targets/front-end-guide/node_modules/lodash.template/index.js. Coverage (Term): 20% Coverage (LOC): 33%
*- File /root/Targets/front-end-guide/node_modules/lodash._basecopy/index.js. Coverage (Term): 29% Coverage (LOC): 36%
*- File /root/Targets/front-end-guide/node_modules/lodash._basetostring/index.js. Coverage (Term): 53% Coverage (LOC): 80%
*- File /root/Targets/front-end-guide/node_modules/lodash._basevalues/index.js. Coverage (Term): 31% Coverage (LOC): 44%
*- File /root/Targets/front-end-guide/node_modules/lodash._isiterateecall/index.js. Coverage (Term): 20% Coverage (LOC): 43%
*- File /root/Targets/front-end-guide/node_modules/lodash._reinterpolate/index.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/front-end-guide/node_modules/lodash.keys/index.js. Coverage (Term): 19% Coverage (LOC): 33%
*- File /root/Targets/front-end-guide/node_modules/lodash._getnative/index.js. Coverage (Term): 82% Coverage (LOC): 89%
*- File /root/Targets/front-end-guide/node_modules/lodash.isarguments/index.js. Coverage (Term): 30% Coverage (LOC): 64%
*- File /root/Targets/front-end-guide/node_modules/lodash.isarray/index.js. Coverage (Term): 69% Coverage (LOC): 86%
*- File /root/Targets/front-end-guide/node_modules/lodash.restparam/index.js. Coverage (Term): 29% Coverage (LOC): 34%
*- File /root/Targets/front-end-guide/node_modules/lodash.templatesettings/index.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/front-end-guide/node_modules/lodash.escape/index.js. Coverage (Term): 41% Coverage (LOC): 59%
*- File /root/Targets/front-end-guide/node_modules/lodash._root/index.js. Coverage (Term): 86% Coverage (LOC): 100%
*- File /root/Targets/front-end-guide/node_modules/lodash._reescape/index.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/front-end-guide/node_modules/lodash._reevaluate/index.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/front-end-guide/node_modules/gulp-util/lib/env.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/front-end-guide/node_modules/minimist/index.js. Coverage (Term): 23% Coverage (LOC): 36%
*- File /root/Targets/front-end-guide/node_modules/beeper/index.js. Coverage (Term): 13% Coverage (LOC): 17%
*- File /root/Targets/front-end-guide/node_modules/gulp-util/lib/noop.js. Coverage (Term): 70% Coverage (LOC): 83%
*- File /root/Targets/front-end-guide/node_modules/gulp-util/node_modules/through2/through2.js. Coverage (Term): 24% Coverage (LOC): 26%
*- File /root/Targets/front-end-guide/node_modules/readable-stream/transform.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/front-end-guide/node_modules/readable-stream/lib/_stream_transform.js. Coverage (Term): 15% Coverage (LOC): 23%
*- File /root/Targets/front-end-guide/node_modules/readable-stream/lib/_stream_duplex.js. Coverage (Term): 49% Coverage (LOC): 51%
*- File /root/Targets/front-end-guide/node_modules/core-util-is/lib/util.js. Coverage (Term): 33% Coverage (LOC): 64%
*- File /root/Targets/front-end-guide/node_modules/inherits/inherits.js. Coverage (Term): 74% Coverage (LOC): 88%
*- File /root/Targets/front-end-guide/node_modules/readable-stream/lib/_stream_readable.js. Coverage (Term): 6% Coverage (LOC): 10%
*- File /root/Targets/front-end-guide/node_modules/isarray/index.js. Coverage (Term): 53% Coverage (LOC): 80%
*- File /root/Targets/front-end-guide/node_modules/readable-stream/lib/_stream_writable.js. Coverage (Term): 9% Coverage (LOC): 17%
*- File /root/Targets/front-end-guide/node_modules/xtend/immutable.js. Coverage (Term): 32% Coverage (LOC): 33%
*- File /root/Targets/front-end-guide/node_modules/gulp-util/lib/isStream.js. Coverage (Term): 62% Coverage (LOC): 83%
*- File /root/Targets/front-end-guide/node_modules/gulp-util/lib/isBuffer.js. Coverage (Term): 64% Coverage (LOC): 86%
*- File /root/Targets/front-end-guide/node_modules/gulp-util/lib/isNull.js. Coverage (Term): 61% Coverage (LOC): 80%
*- File /root/Targets/front-end-guide/node_modules/gulp-util/lib/combine.js. Coverage (Term): 36% Coverage (LOC): 45%
*- File /root/Targets/front-end-guide/node_modules/multipipe/index.js. Coverage (Term): 19% Coverage (LOC): 20%
*- File /root/Targets/front-end-guide/node_modules/duplexer2/index.js. Coverage (Term): 20% Coverage (LOC): 24%
*- File /root/Targets/front-end-guide/node_modules/duplexer2/node_modules/readable-stream/readable.js. Coverage (Term): 90% Coverage (LOC): 92%
*- File /root/Targets/front-end-guide/node_modules/duplexer2/node_modules/readable-stream/lib/_stream_readable.js. Coverage (Term): 7% Coverage (LOC): 11%
*- File /root/Targets/front-end-guide/node_modules/duplexer2/node_modules/readable-stream/lib/_stream_writable.js. Coverage (Term): 9% Coverage (LOC): 16%
*- File /root/Targets/front-end-guide/node_modules/duplexer2/node_modules/readable-stream/lib/_stream_duplex.js. Coverage (Term): 49% Coverage (LOC): 51%
*- File /root/Targets/front-end-guide/node_modules/duplexer2/node_modules/readable-stream/lib/_stream_transform.js. Coverage (Term): 15% Coverage (LOC): 23%
*- File /root/Targets/front-end-guide/node_modules/duplexer2/node_modules/readable-stream/lib/_stream_passthrough.js. Coverage (Term): 58% Coverage (LOC): 71%
*- File /root/Targets/front-end-guide/node_modules/gulp-util/lib/buffer.js. Coverage (Term): 27% Coverage (LOC): 33%
*- File /root/Targets/front-end-guide/node_modules/gulp-util/lib/PluginError.js. Coverage (Term): 19% Coverage (LOC): 25%
*- File /root/Targets/front-end-guide/node_modules/array-differ/index.js. Coverage (Term): 32% Coverage (LOC): 56%
*- File /root/Targets/front-end-guide/node_modules/array-uniq/index.js. Coverage (Term): 36% Coverage (LOC): 44%
*- File /root/Targets/front-end-guide/node_modules/object-assign/index.js. Coverage (Term): 20% Coverage (LOC): 32%
*- File /root/Targets/front-end-guide/node_modules/gulp-autoprefixer/node_modules/through2/through2.js. Coverage (Term): 24% Coverage (LOC): 26%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/autoprefixer.js. Coverage (Term): 37% Coverage (LOC): 54%
*- File /root/Targets/front-end-guide/node_modules/browserslist/index.js. Coverage (Term): 24% Coverage (LOC): 36%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/postcss.js. Coverage (Term): 66% Coverage (LOC): 80%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/declaration.js. Coverage (Term): 51% Coverage (LOC): 62%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/node.js. Coverage (Term): 11% Coverage (LOC): 18%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/css-syntax-error.js. Coverage (Term): 26% Coverage (LOC): 39%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/warn-once.js. Coverage (Term): 53% Coverage (LOC): 62%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/processor.js. Coverage (Term): 30% Coverage (LOC): 40%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/lazy-result.js. Coverage (Term): 26% Coverage (LOC): 38%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/map-generator.js. Coverage (Term): 14% Coverage (LOC): 20%
*- File /root/Targets/front-end-guide/node_modules/js-base64/base64.js. Coverage (Term): 22% Coverage (LOC): 46%
*- File /root/Targets/front-end-guide/node_modules/postcss/node_modules/source-map/lib/source-map.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/front-end-guide/node_modules/postcss/node_modules/source-map/lib/source-map/source-map-generator.js. Coverage (Term): 10% Coverage (LOC): 13%
*- File /root/Targets/front-end-guide/node_modules/amdefine/amdefine.js. Coverage (Term): 49% Coverage (LOC): 54%
*- File /root/Targets/front-end-guide/node_modules/postcss/node_modules/source-map/lib/source-map/base64-vlq.js. Coverage (Term): 27% Coverage (LOC): 37%
*- File /root/Targets/front-end-guide/node_modules/postcss/node_modules/source-map/lib/source-map/base64.js. Coverage (Term): 27% Coverage (LOC): 29%
*- File /root/Targets/front-end-guide/node_modules/postcss/node_modules/source-map/lib/source-map/util.js. Coverage (Term): 12% Coverage (LOC): 15%
*- File /root/Targets/front-end-guide/node_modules/postcss/node_modules/source-map/lib/source-map/array-set.js. Coverage (Term): 29% Coverage (LOC): 48%
*- File /root/Targets/front-end-guide/node_modules/postcss/node_modules/source-map/lib/source-map/mapping-list.js. Coverage (Term): 32% Coverage (LOC): 43%
*- File /root/Targets/front-end-guide/node_modules/postcss/node_modules/source-map/lib/source-map/source-map-consumer.js. Coverage (Term): 10% Coverage (LOC): 16%
*- File /root/Targets/front-end-guide/node_modules/postcss/node_modules/source-map/lib/source-map/binary-search.js. Coverage (Term): 21% Coverage (LOC): 27%
*- File /root/Targets/front-end-guide/node_modules/postcss/node_modules/source-map/lib/source-map/quick-sort.js. Coverage (Term): 22% Coverage (LOC): 36%
*- File /root/Targets/front-end-guide/node_modules/postcss/node_modules/source-map/lib/source-map/source-node.js. Coverage (Term): 10% Coverage (LOC): 14%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/result.js. Coverage (Term): 51% Coverage (LOC): 65%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/warning.js. Coverage (Term): 33% Coverage (LOC): 43%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/parse.js. Coverage (Term): 65% Coverage (LOC): 72%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/parser.js. Coverage (Term): 9% Coverage (LOC): 13%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/tokenize.js. Coverage (Term): 13% Coverage (LOC): 12%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/comment.js. Coverage (Term): 55% Coverage (LOC): 69%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/at-rule.js. Coverage (Term): 37% Coverage (LOC): 52%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/container.js. Coverage (Term): 17% Coverage (LOC): 25%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/root.js. Coverage (Term): 32% Coverage (LOC): 44%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/rule.js. Coverage (Term): 66% Coverage (LOC): 81%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/list.js. Coverage (Term): 15% Coverage (LOC): 18%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/input.js. Coverage (Term): 25% Coverage (LOC): 29%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/previous-map.js. Coverage (Term): 24% Coverage (LOC): 35%
*- File /root/Targets/front-end-guide/node_modules/postcss/lib/vendor.js. Coverage (Term): 33% Coverage (LOC): 47%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/browsers.js. Coverage (Term): 22% Coverage (LOC): 34%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/utils.js. Coverage (Term): 16% Coverage (LOC): 28%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/prefixes.js. Coverage (Term): 22% Coverage (LOC): 26%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/declaration.js. Coverage (Term): 25% Coverage (LOC): 39%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/prefixer.js. Coverage (Term): 25% Coverage (LOC): 34%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/resolution.js. Coverage (Term): 28% Coverage (LOC): 40%
*- File /root/Targets/front-end-guide/node_modules/num2fraction/index.js. Coverage (Term): 21% Coverage (LOC): 33%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/processor.js. Coverage (Term): 7% Coverage (LOC): 11%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/value.js. Coverage (Term): 32% Coverage (LOC): 43%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/old-value.js. Coverage (Term): 40% Coverage (LOC): 50%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/supports.js. Coverage (Term): 18% Coverage (LOC): 26%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/selector.js. Coverage (Term): 33% Coverage (LOC): 43%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/old-selector.js. Coverage (Term): 15% Coverage (LOC): 19%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/at-rule.js. Coverage (Term): 46% Coverage (LOC): 55%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/fullscreen.js. Coverage (Term): 72% Coverage (LOC): 77%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/placeholder.js. Coverage (Term): 64% Coverage (LOC): 74%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/flex.js. Coverage (Term): 54% Coverage (LOC): 72%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/flex-spec.js. Coverage (Term): 35% Coverage (LOC): 42%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/order.js. Coverage (Term): 52% Coverage (LOC): 68%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/filter.js. Coverage (Term): 69% Coverage (LOC): 88%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/flex-flow.js. Coverage (Term): 65% Coverage (LOC): 77%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/flex-grow.js. Coverage (Term): 63% Coverage (LOC): 76%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/flex-wrap.js. Coverage (Term): 73% Coverage (LOC): 83%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/appearance.js. Coverage (Term): 80% Coverage (LOC): 92%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/align-self.js. Coverage (Term): 54% Coverage (LOC): 71%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/flex-basis.js. Coverage (Term): 56% Coverage (LOC): 74%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/align-items.js. Coverage (Term): 53% Coverage (LOC): 71%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/flex-shrink.js. Coverage (Term): 56% Coverage (LOC): 74%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/break-inside.js. Coverage (Term): 53% Coverage (LOC): 67%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/border-image.js. Coverage (Term): 74% Coverage (LOC): 88%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/align-content.js. Coverage (Term): 54% Coverage (LOC): 73%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/border-radius.js. Coverage (Term): 80% Coverage (LOC): 88%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/block-logical.js. Coverage (Term): 65% Coverage (LOC): 86%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/inline-logical.js. Coverage (Term): 75% Coverage (LOC): 93%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/transform-decl.js. Coverage (Term): 45% Coverage (LOC): 58%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/flex-direction.js. Coverage (Term): 35% Coverage (LOC): 47%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/image-rendering.js. Coverage (Term): 53% Coverage (LOC): 67%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/justify-content.js. Coverage (Term): 50% Coverage (LOC): 67%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/background-size.js. Coverage (Term): 63% Coverage (LOC): 79%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/gradient.js. Coverage (Term): 19% Coverage (LOC): 36%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/pixelated.js. Coverage (Term): 66% Coverage (LOC): 77%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/flex-values.js. Coverage (Term): 67% Coverage (LOC): 89%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/display-flex.js. Coverage (Term): 52% Coverage (LOC): 73%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/filter-value.js. Coverage (Term): 50% Coverage (LOC): 61%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/fill-available.js. Coverage (Term): 64% Coverage (LOC): 74%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/lib/hacks/transform-value.js. Coverage (Term): 75% Coverage (LOC): 82%
*- File /root/Targets/front-end-guide/node_modules/autoprefixer-core/data/prefixes.js. Coverage (Term): 96% Coverage (LOC): 100%
*- File /root/Targets/front-end-guide/node_modules/vinyl-sourcemaps-apply/index.js. Coverage (Term): 21% Coverage (LOC): 29%
*- File /root/Targets/front-end-guide/node_modules/source-map/lib/source-map.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/front-end-guide/node_modules/source-map/lib/source-map/source-map-generator.js. Coverage (Term): 10% Coverage (LOC): 13%
*- File /root/Targets/front-end-guide/node_modules/source-map/lib/source-map/base64-vlq.js. Coverage (Term): 28% Coverage (LOC): 38%
*- File /root/Targets/front-end-guide/node_modules/source-map/lib/source-map/base64.js. Coverage (Term): 61% Coverage (LOC): 68%
*- File /root/Targets/front-end-guide/node_modules/source-map/lib/source-map/util.js. Coverage (Term): 13% Coverage (LOC): 16%
*- File /root/Targets/front-end-guide/node_modules/source-map/lib/source-map/array-set.js. Coverage (Term): 29% Coverage (LOC): 47%
*- File /root/Targets/front-end-guide/node_modules/source-map/lib/source-map/mapping-list.js. Coverage (Term): 32% Coverage (LOC): 43%
*- File /root/Targets/front-end-guide/node_modules/source-map/lib/source-map/source-map-consumer.js. Coverage (Term): 12% Coverage (LOC): 17%
*- File /root/Targets/front-end-guide/node_modules/source-map/lib/source-map/binary-search.js. Coverage (Term): 27% Coverage (LOC): 36%
*- File /root/Targets/front-end-guide/node_modules/source-map/lib/source-map/source-node.js. Coverage (Term): 10% Coverage (LOC): 14%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 10 paths with 9 errors **
