
> bson@0.2.22 install /root/Targets/node-etoile/node_modules/bson
> (node-gyp rebuild 2> builderror.log) || (exit 0)

make: Entering directory '/root/Targets/node-etoile/node_modules/bson/build'
  CXX(target) Release/obj.target/bson/ext/bson.o
bson.target.mk:92: recipe for target 'Release/obj.target/bson/ext/bson.o' failed
make: Leaving directory '/root/Targets/node-etoile/node_modules/bson/build'

> kerberos@0.0.4 install /root/Targets/node-etoile/node_modules/kerberos
> (node-gyp rebuild 2> builderror.log) || (exit 0)

make: Entering directory '/root/Targets/node-etoile/node_modules/kerberos/build'
  SOLINK_MODULE(target) Release/obj.target/kerberos.node
  COPY Release/kerberos.node
make: Leaving directory '/root/Targets/node-etoile/node_modules/kerberos/build'

> dtrace-provider@0.8.5 install /root/Targets/node-etoile/node_modules/dtrace-provider
> node scripts/install.js


> uws@0.14.5 install /root/Targets/node-etoile/node_modules/uws
> node-gyp rebuild > build_log.txt 2>&1 || exit 0

/root/Targets/node-etoile
└─┬ node-etoile@0.0.30 
  ├─┬ amqp@0.2.6 
  │ └── lodash@4.17.4 
  ├─┬ bunyan@1.8.12 
  │ ├─┬ dtrace-provider@0.8.5 
  │ │ └── nan@2.7.0 
  │ ├── moment@2.18.1 
  │ ├─┬ mv@2.1.1 
  │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ └── minimist@0.0.8 
  │ │ ├── ncp@2.0.0 
  │ │ └─┬ rimraf@2.4.5 
  │ │   └─┬ glob@6.0.4 
  │ │     ├── inflight@1.0.6 
  │ │     ├─┬ minimatch@3.0.4 
  │ │     │ └─┬ brace-expansion@1.1.8 
  │ │     │   ├── balanced-match@1.0.0 
  │ │     │   └── concat-map@0.0.1 
  │ │     └── path-is-absolute@1.0.1 
  │ └── safe-json-stringify@1.0.4 
  ├─┬ connect@2.30.2 
  │ ├── basic-auth-connect@1.0.0 
  │ ├─┬ body-parser@1.13.3 
  │ │ ├── iconv-lite@0.4.11 
  │ │ ├─┬ on-finished@2.3.0 
  │ │ │ └── ee-first@1.1.1 
  │ │ └─┬ raw-body@2.1.7 
  │ │   ├── bytes@2.4.0 
  │ │   └── iconv-lite@0.4.13 
  │ ├── bytes@2.1.0 
  │ ├─┬ compression@1.5.2 
  │ │ ├─┬ accepts@1.2.13 
  │ │ │ └── negotiator@0.5.3 
  │ │ ├─┬ compressible@2.0.11 
  │ │ │ └── mime-db@1.30.0 
  │ │ └── vary@1.0.1 
  │ ├─┬ connect-timeout@1.6.2 
  │ │ └── ms@0.7.1 
  │ ├── content-type@1.0.4 
  │ ├── cookie@0.1.3 
  │ ├── cookie-parser@1.3.5 
  │ ├── cookie-signature@1.0.6 
  │ ├─┬ csurf@1.8.3 
  │ │ └─┬ csrf@3.0.6 
  │ │   ├── rndm@1.2.0 
  │ │   ├── tsscmp@1.0.5 
  │ │   └─┬ uid-safe@2.1.4 
  │ │     └── random-bytes@1.0.0 
  │ ├── debug@2.2.0 
  │ ├── depd@1.0.1 
  │ ├─┬ errorhandler@1.4.3 
  │ │ ├─┬ accepts@1.3.4 
  │ │ │ └── negotiator@0.6.1 
  │ │ └── escape-html@1.0.3 
  │ ├─┬ express-session@1.11.3 
  │ │ ├── crc@3.3.0 
  │ │ └─┬ uid-safe@2.0.0 
  │ │   └── base64-url@1.2.1 
  │ ├─┬ finalhandler@0.4.0 
  │ │ ├── escape-html@1.0.2 
  │ │ └── unpipe@1.0.0 
  │ ├── fresh@0.3.0 
  │ ├─┬ http-errors@1.3.1 
  │ │ ├── inherits@2.0.3 
  │ │ └── statuses@1.3.1 
  │ ├─┬ method-override@2.3.10 
  │ │ ├─┬ debug@2.6.9 
  │ │ │ └── ms@2.0.0 
  │ │ ├── methods@1.1.2 
  │ │ └── vary@1.1.2 
  │ ├─┬ morgan@1.6.1 
  │ │ └── basic-auth@1.0.4 
  │ ├─┬ multiparty@3.3.2 
  │ │ ├─┬ readable-stream@1.1.14 
  │ │ │ ├── core-util-is@1.0.2 
  │ │ │ ├── isarray@0.0.1 
  │ │ │ └── string_decoder@0.10.31 
  │ │ └── stream-counter@0.2.0 
  │ ├── on-headers@1.0.1 
  │ ├── parseurl@1.3.2 
  │ ├── pause@0.1.0 
  │ ├── qs@4.0.0 
  │ ├─┬ response-time@2.3.2 
  │ │ └── depd@1.1.1 
  │ ├─┬ serve-favicon@2.3.2 
  │ │ ├── etag@1.7.0 
  │ │ └── ms@0.7.2 
  │ ├─┬ serve-index@1.7.3 
  │ │ ├── batch@0.5.3 
  │ │ └── mime-types@2.1.17 
  │ ├─┬ serve-static@1.10.3 
  │ │ └─┬ send@0.13.2 
  │ │   ├── depd@1.1.1 
  │ │   ├── destroy@1.0.4 
  │ │   ├── mime@1.3.4 
  │ │   ├── range-parser@1.0.3 
  │ │   └── statuses@1.2.1 
  │ ├─┬ type-is@1.6.15 
  │ │ └── media-typer@0.3.0 
  │ ├── utils-merge@1.0.0 
  │ └── vhost@3.0.2 
  ├─┬ connect-rest@3.0.2 
  │ ├─┬ assign.js@2.7.6 
  │ │ └── isa.js@1.9.1 
  │ ├─┬ axios@0.16.2 
  │ │ ├─┬ follow-redirects@1.2.4 
  │ │ │ └─┬ debug@2.6.9 
  │ │ │   └── ms@2.0.0 
  │ │ └── is-buffer@1.1.5 
  │ ├── isa.js@2.0.0 
  │ ├─┬ pino@4.7.2 
  │ │ ├─┬ chalk@2.1.0 
  │ │ │ ├─┬ ansi-styles@3.2.0 
  │ │ │ │ └─┬ color-convert@1.9.0 
  │ │ │ │   └── color-name@1.1.3 
  │ │ │ ├── escape-string-regexp@1.0.5 
  │ │ │ └─┬ supports-color@4.4.0 
  │ │ │   └── has-flag@2.0.0 
  │ │ ├── fast-json-parse@1.0.3 
  │ │ ├── fast-safe-stringify@1.2.0 
  │ │ ├── flatstr@1.0.5 
  │ │ ├─┬ pump@1.0.2 
  │ │ │ ├── end-of-stream@1.4.0 
  │ │ │ └─┬ once@1.4.0 
  │ │ │   └── wrappy@1.0.2 
  │ │ ├── quick-format-unescaped@1.1.1 
  │ │ └─┬ split2@2.2.0 
  │ │   └─┬ through2@2.0.3 
  │ │     ├─┬ readable-stream@2.3.3 
  │ │     │ ├── isarray@1.0.0 
  │ │     │ └── string_decoder@1.0.3 
  │ │     └── xtend@4.0.1 
  │ ├── proback.js@2.1.3 
  │ └── semver@5.4.1 
  ├── jsonconfig@0.3.0 
  ├─┬ mongoose@3.9.7 
  │ ├── async@0.9.0 
  │ ├── hooks@0.3.2 
  │ ├── kareem@0.0.4 
  │ ├─┬ mongodb@1.4.12 
  │ │ ├─┬ bson@0.2.22 
  │ │ │ └── nan@1.8.4 
  │ │ ├── kerberos@0.0.4 
  │ │ └─┬ readable-stream@2.3.3 
  │ │   ├── isarray@1.0.0 
  │ │   ├── process-nextick-args@1.0.7 
  │ │   ├── safe-buffer@5.1.1 
  │ │   ├── string_decoder@1.0.3 
  │ │   └── util-deprecate@1.0.2 
  │ ├── mpath@0.1.1 
  │ ├── mpromise@0.5.4 
  │ ├─┬ mquery@1.0.0 
  │ │ └── debug@0.7.4 
  │ ├── ms@0.1.0 
  │ ├── muri@0.3.1 
  │ ├── regexp-clone@0.0.1 
  │ └── sliced@0.0.5 
  ├── mongoose-function@0.1.0 
  ├── puid@1.0.7 
  ├── semver@1.1.4 
  ├─┬ socket.io@2.0.3 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├─┬ engine.io@3.1.2 
  │ │ ├─┬ accepts@1.3.3 
  │ │ │ └── negotiator@0.6.1 
  │ │ ├── base64id@1.0.0 
  │ │ ├── cookie@0.3.1 
  │ │ ├─┬ debug@2.6.9 
  │ │ │ └── ms@2.0.0 
  │ │ ├─┬ engine.io-parser@2.1.1 
  │ │ │ ├── after@0.8.2 
  │ │ │ ├── arraybuffer.slice@0.0.6 
  │ │ │ └── blob@0.0.4 
  │ │ ├── uws@0.14.5 
  │ │ └─┬ ws@2.3.1 
  │ │   ├── safe-buffer@5.0.1 
  │ │   └── ultron@1.1.0 
  │ ├── object-assign@4.1.1 
  │ ├── socket.io-adapter@1.1.1 
  │ ├─┬ socket.io-client@2.0.3 
  │ │ ├── backo2@1.0.2 
  │ │ ├── base64-arraybuffer@0.1.5 
  │ │ ├── component-bind@1.0.0 
  │ │ ├── component-emitter@1.2.1 
  │ │ ├─┬ debug@2.6.9 
  │ │ │ └── ms@2.0.0 
  │ │ ├─┬ engine.io-client@3.1.2 
  │ │ │ ├── component-inherit@0.0.3 
  │ │ │ ├─┬ debug@2.6.9 
  │ │ │ │ └── ms@2.0.0 
  │ │ │ ├── xmlhttprequest-ssl@1.5.3 
  │ │ │ └── yeast@0.1.2 
  │ │ ├── has-cors@1.1.0 
  │ │ ├── indexof@0.0.1 
  │ │ ├── object-component@0.0.3 
  │ │ ├─┬ parseqs@0.0.5 
  │ │ │ └─┬ better-assert@1.0.2 
  │ │ │   └── callsite@1.0.0 
  │ │ ├── parseuri@0.0.5 
  │ │ └── to-array@0.1.4 
  │ └─┬ socket.io-parser@3.1.2 
  │   ├─┬ debug@2.6.9 
  │   │ └── ms@2.0.0 
  │   ├─┬ has-binary2@1.0.2 
  │   │ └── isarray@2.0.1 
  │   └── isarray@2.0.1 
  ├── underscore@1.8.3 
  └── underscore.string@2.4.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/node-etoile/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /2 queued / 1 running / 1 errors / 21% coverage ] ****** [1 done /1 queued / 2 running / 1 errors / 21% coverage ] ****** [1 done /0 queued / 3 running / 1 errors / 21% coverage ] ****** [1 done /0 queued / 3 running / 1 errors / 21% coverage ] ****** [2 done /4 queued / 3 running / 2 errors / 21% coverage ] ****** [2 done /3 queued / 4 running / 2 errors / 21% coverage ] ****** [2 done /2 queued / 5 running / 2 errors / 21% coverage ] ****** [2 done /1 queued / 6 running / 2 errors / 21% coverage ] ****** [2 done /0 queued / 7 running / 2 errors / 21% coverage ] ****** [2 done /0 queued / 7 running / 2 errors / 21% coverage ] ****** [3 done /0 queued / 7 running / 3 errors / 21% coverage ] ****** [3 done /0 queued / 7 running / 3 errors / 21% coverage ] ****** [4 done /1 queued / 7 running / 4 errors / 21% coverage ] ****** [4 done /0 queued / 8 running / 4 errors / 21% coverage ] ****** [4 done /0 queued / 8 running / 4 errors / 21% coverage ] ****** [5 done /1 queued / 8 running / 5 errors / 21% coverage ] ****** [5 done /0 queued / 9 running / 5 errors / 21% coverage ] ****** [5 done /0 queued / 9 running / 5 errors / 21% coverage ] ****** [6 done /0 queued / 9 running / 6 errors / 22% coverage ] ****** [6 done /0 queued / 9 running / 6 errors / 22% coverage ] ****** [7 done /5 queued / 9 running / 7 errors / 22% coverage ] ****** [7 done /4 queued / 10 running / 7 errors / 22% coverage ] ****** [7 done /3 queued / 11 running / 7 errors / 22% coverage ] ****** [7 done /2 queued / 12 running / 7 errors / 22% coverage ] ****** [7 done /1 queued / 13 running / 7 errors / 22% coverage ] ****** [7 done /0 queued / 14 running / 7 errors / 22% coverage ] ****** [7 done /0 queued / 14 running / 7 errors / 22% coverage ] ****** [8 done /2 queued / 14 running / 8 errors / 22% coverage ] ****** [8 done /1 queued / 15 running / 8 errors / 22% coverage ] ****** [8 done /0 queued / 16 running / 8 errors / 22% coverage ] ****** [8 done /0 queued / 16 running / 8 errors / 22% coverage ] ****** [9 done /3 queued / 16 running / 9 errors / 22% coverage ] ****** [9 done /3 queued / 16 running / 9 errors / 22% coverage ] ****** [10 done /3 queued / 16 running / 10 errors / 22% coverage ] ****** [10 done /3 queued / 16 running / 10 errors / 22% coverage ] ****** [11 done /2 queued / 16 running / 11 errors / 22% coverage ] ****** [11 done /2 queued / 16 running / 11 errors / 22% coverage ] ****** [12 done /1 queued / 16 running / 12 errors / 22% coverage ] ****** [12 done /1 queued / 16 running / 12 errors / 22% coverage ] ****** [13 done /0 queued / 16 running / 12 errors / 22% coverage ] ****** [13 done /0 queued / 16 running / 12 errors / 22% coverage ] ****** [14 done /1 queued / 16 running / 13 errors / 22% coverage ] ****** [14 done /1 queued / 16 running / 13 errors / 22% coverage ] ****** [15 done /4 queued / 16 running / 14 errors / 22% coverage ] ****** [15 done /4 queued / 16 running / 14 errors / 22% coverage ] ****** [16 done /8 queued / 16 running / 15 errors / 22% coverage ] ****** [16 done /8 queued / 16 running / 15 errors / 22% coverage ] ****** [17 done /12 queued / 16 running / 16 errors / 22% coverage ] ****** [17 done /12 queued / 16 running / 16 errors / 22% coverage ] ****** [18 done /14 queued / 16 running / 17 errors / 22% coverage ] ****** [18 done /14 queued / 16 running / 17 errors / 22% coverage ] ****** [19 done /19 queued / 16 running / 18 errors / 22% coverage ] ****** [19 done /19 queued / 16 running / 18 errors / 22% coverage ] ****** [20 done /19 queued / 16 running / 19 errors / 22% coverage ] ****** [20 done /19 queued / 16 running / 19 errors / 22% coverage ] ****** [21 done /21 queued / 16 running / 20 errors / 22% coverage ] ****** [21 done /21 queued / 16 running / 20 errors / 22% coverage ] ****** [22 done /23 queued / 16 running / 21 errors / 22% coverage ] ****** [22 done /23 queued / 16 running / 21 errors / 22% coverage ] ****** [23 done /23 queued / 16 running / 22 errors / 22% coverage ] ****** [23 done /23 queued / 16 running / 22 errors / 22% coverage ] ****** [24 done /24 queued / 16 running / 23 errors / 22% coverage ] ****** [24 done /24 queued / 16 running / 23 errors / 22% coverage ] ****** [25 done /25 queued / 16 running / 24 errors / 22% coverage ] ****** [25 done /25 queued / 16 running / 24 errors / 22% coverage ] ****** [26 done /26 queued / 16 running / 25 errors / 24% coverage ] ****** [26 done /26 queued / 16 running / 25 errors / 24% coverage ] ****** [27 done /28 queued / 16 running / 26 errors / 24% coverage ] ****** [27 done /28 queued / 16 running / 26 errors / 24% coverage ] ****** [28 done /29 queued / 16 running / 27 errors / 24% coverage ] ****** [28 done /29 queued / 16 running / 27 errors / 24% coverage ] ****** [29 done /32 queued / 16 running / 28 errors / 24% coverage ] ****** [29 done /32 queued / 16 running / 28 errors / 24% coverage ] ****** [30 done /34 queued / 16 running / 29 errors / 24% coverage ] ****** [30 done /34 queued / 16 running / 29 errors / 24% coverage ] ****** [31 done /33 queued / 16 running / 30 errors / 24% coverage ] ****** [31 done /33 queued / 16 running / 30 errors / 24% coverage ] ****** [32 done /37 queued / 16 running / 31 errors / 24% coverage ] ****** [32 done /37 queued / 16 running / 31 errors / 24% coverage ] ****** [33 done /39 queued / 16 running / 32 errors / 24% coverage ] ****** [33 done /39 queued / 16 running / 32 errors / 24% coverage ] ****** [34 done /39 queued / 16 running / 33 errors / 24% coverage ] ****** [34 done /39 queued / 16 running / 33 errors / 24% coverage ] ****** [35 done /38 queued / 16 running / 34 errors / 24% coverage ] ****** [35 done /38 queued / 16 running / 34 errors / 24% coverage ] ****** [36 done /39 queued / 16 running / 35 errors / 24% coverage ] ****** [36 done /39 queued / 16 running / 35 errors / 24% coverage ] ****** [37 done /40 queued / 16 running / 36 errors / 24% coverage ] ****** [37 done /40 queued / 16 running / 36 errors / 24% coverage ] ****** [38 done /39 queued / 16 running / 37 errors / 24% coverage ] ****** [38 done /39 queued / 16 running / 37 errors / 24% coverage ] ****** [39 done /39 queued / 16 running / 38 errors / 24% coverage ] ****** [39 done /39 queued / 16 running / 38 errors / 24% coverage ] ****** [40 done /38 queued / 16 running / 39 errors / 24% coverage ] ****** [40 done /38 queued / 16 running / 39 errors / 24% coverage ] ****** [41 done /37 queued / 16 running / 40 errors / 24% coverage ] ****** [41 done /37 queued / 16 running / 40 errors / 24% coverage ] ****** [42 done /38 queued / 16 running / 41 errors / 24% coverage ] ****** [42 done /38 queued / 16 running / 41 errors / 24% coverage ] ****** [43 done /38 queued / 16 running / 42 errors / 24% coverage ] ****** [43 done /38 queued / 16 running / 42 errors / 24% coverage ] ****** [44 done /37 queued / 16 running / 43 errors / 24% coverage ] ****** [44 done /37 queued / 16 running / 43 errors / 24% coverage ] ****** [45 done /40 queued / 16 running / 44 errors / 24% coverage ] ****** [45 done /40 queued / 16 running / 44 errors / 24% coverage ] ****** [46 done /42 queued / 16 running / 45 errors / 24% coverage ] ****** [46 done /42 queued / 16 running / 45 errors / 24% coverage ] ****** [47 done /43 queued / 16 running / 46 errors / 24% coverage ] ****** [47 done /43 queued / 16 running / 46 errors / 24% coverage ] ****** [48 done /45 queued / 16 running / 47 errors / 24% coverage ] ****** [48 done /45 queued / 16 running / 47 errors / 24% coverage ] ****** [49 done /48 queued / 16 running / 48 errors / 24% coverage ] ****** [49 done /48 queued / 16 running / 48 errors / 24% coverage ] ****** [50 done /47 queued / 16 running / 49 errors / 24% coverage ] ****** [50 done /47 queued / 16 running / 49 errors / 24% coverage ] ****** [51 done /47 queued / 16 running / 50 errors / 24% coverage ] ****** [51 done /47 queued / 16 running / 50 errors / 24% coverage ] ****** [52 done /51 queued / 16 running / 51 errors / 24% coverage ] ****** [52 done /51 queued / 16 running / 51 errors / 24% coverage ] ****** [53 done /50 queued / 16 running / 52 errors / 24% coverage ] ****** [53 done /50 queued / 16 running / 52 errors / 24% coverage ] ****** [54 done /54 queued / 16 running / 53 errors / 24% coverage ] ****** [54 done /54 queued / 16 running / 53 errors / 24% coverage ] ****** [55 done /57 queued / 16 running / 54 errors / 24% coverage ] ****** [55 done /57 queued / 16 running / 54 errors / 24% coverage ] ****** [56 done /56 queued / 16 running / 55 errors / 24% coverage ] ****** [56 done /56 queued / 16 running / 55 errors / 24% coverage ] ****** [57 done /58 queued / 16 running / 56 errors / 24% coverage ] ****** [57 done /58 queued / 16 running / 56 errors / 24% coverage ] ****** [58 done /60 queued / 16 running / 57 errors / 24% coverage ] ****** [58 done /60 queued / 16 running / 57 errors / 24% coverage ] ****** [59 done /61 queued / 16 running / 58 errors / 24% coverage ] ****** [59 done /61 queued / 16 running / 58 errors / 24% coverage ] ****** [60 done /64 queued / 16 running / 59 errors / 24% coverage ] ****** [60 done /64 queued / 16 running / 59 errors / 24% coverage ] ****** [61 done /65 queued / 16 running / 60 errors / 24% coverage ] ****** [61 done /65 queued / 16 running / 60 errors / 24% coverage ] ****** [62 done /67 queued / 16 running / 61 errors / 24% coverage ] ****** [62 done /67 queued / 16 running / 61 errors / 24% coverage ] ****** [63 done /68 queued / 16 running / 62 errors / 24% coverage ] ****** [63 done /68 queued / 16 running / 62 errors / 24% coverage ] ****** [64 done /69 queued / 16 running / 63 errors / 24% coverage ] ****** [64 done /69 queued / 16 running / 63 errors / 24% coverage ] ****** [65 done /71 queued / 16 running / 64 errors / 24% coverage ] ****** [65 done /71 queued / 16 running / 64 errors / 24% coverage ] ****** [66 done /70 queued / 16 running / 65 errors / 24% coverage ] ****** [66 done /70 queued / 16 running / 65 errors / 24% coverage ] ****** [67 done /69 queued / 16 running / 66 errors / 24% coverage ] ****** [67 done /69 queued / 16 running / 66 errors / 24% coverage ] ****** [68 done /71 queued / 16 running / 67 errors / 24% coverage ] ****** [68 done /71 queued / 16 running / 67 errors / 24% coverage ] ****** [69 done /73 queued / 16 running / 68 errors / 24% coverage ] ****** [69 done /73 queued / 16 running / 68 errors / 24% coverage ] ****** [70 done /74 queued / 16 running / 69 errors / 24% coverage ] ****** [70 done /74 queued / 16 running / 69 errors / 24% coverage ] ****** [71 done /73 queued / 16 running / 70 errors / 24% coverage ] ****** [71 done /73 queued / 16 running / 70 errors / 24% coverage ] ****** [72 done /73 queued / 16 running / 71 errors / 24% coverage ] ****** [72 done /73 queued / 16 running / 71 errors / 24% coverage ] ****** [73 done /73 queued / 16 running / 72 errors / 24% coverage ] ****** [73 done /73 queued / 16 running / 72 errors / 24% coverage ] ****** [74 done /73 queued / 16 running / 73 errors / 24% coverage ] ****** [74 done /73 queued / 16 running / 73 errors / 24% coverage ] ****** [75 done /72 queued / 16 running / 74 errors / 24% coverage ] ****** [75 done /72 queued / 16 running / 74 errors / 24% coverage ] ****** [76 done /71 queued / 16 running / 75 errors / 24% coverage ] ****** [76 done /71 queued / 16 running / 75 errors / 24% coverage ] ****** [77 done /70 queued / 16 running / 76 errors / 24% coverage ] ****** [77 done /70 queued / 16 running / 76 errors / 24% coverage ] ****** [78 done /69 queued / 16 running / 77 errors / 24% coverage ] ****** [78 done /69 queued / 16 running / 77 errors / 24% coverage ] ****** [79 done /72 queued / 16 running / 78 errors / 24% coverage ] ****** [79 done /72 queued / 16 running / 78 errors / 24% coverage ] ****** [80 done /76 queued / 16 running / 79 errors / 24% coverage ] ****** [80 done /76 queued / 16 running / 79 errors / 24% coverage ] ****** [81 done /80 queued / 16 running / 80 errors / 24% coverage ] ****** [81 done /80 queued / 16 running / 80 errors / 24% coverage ] ****** [82 done /81 queued / 16 running / 81 errors / 24% coverage ] ****** [82 done /81 queued / 16 running / 81 errors / 24% coverage ] ****** [83 done /80 queued / 16 running / 82 errors / 24% coverage ] ****** [83 done /80 queued / 16 running / 82 errors / 24% coverage ] ****** [84 done /87 queued / 16 running / 83 errors / 24% coverage ] ****** [84 done /87 queued / 16 running / 83 errors / 24% coverage ] ****** [85 done /89 queued / 16 running / 84 errors / 24% coverage ] ****** [85 done /89 queued / 16 running / 84 errors / 24% coverage ] ****** [86 done /90 queued / 16 running / 85 errors / 24% coverage ] ****** [86 done /90 queued / 16 running / 85 errors / 24% coverage ] ****** [87 done /90 queued / 16 running / 86 errors / 24% coverage ] ****** [87 done /90 queued / 16 running / 86 errors / 24% coverage ] ****** [88 done /89 queued / 16 running / 87 errors / 24% coverage ] ****** [88 done /89 queued / 16 running / 87 errors / 24% coverage ] ****** [89 done /89 queued / 16 running / 88 errors / 24% coverage ] ****** [89 done /89 queued / 16 running / 88 errors / 24% coverage ] ****** [90 done /91 queued / 16 running / 89 errors / 24% coverage ] ****** [90 done /91 queued / 16 running / 89 errors / 24% coverage ] ****** [91 done /90 queued / 16 running / 90 errors / 24% coverage ] ****** [91 done /90 queued / 16 running / 90 errors / 24% coverage ] ****** [92 done /89 queued / 16 running / 91 errors / 24% coverage ] ****** [92 done /89 queued / 16 running / 91 errors / 24% coverage ] ****** [93 done /93 queued / 16 running / 92 errors / 24% coverage ] ****** [93 done /93 queued / 16 running / 92 errors / 24% coverage ] ****** [94 done /96 queued / 16 running / 93 errors / 24% coverage ] ****** [94 done /96 queued / 16 running / 93 errors / 24% coverage ] ****** [95 done /95 queued / 16 running / 94 errors / 24% coverage ] ****** [95 done /95 queued / 16 running / 94 errors / 24% coverage ] ****** [96 done /94 queued / 16 running / 95 errors / 24% coverage ] ****** [96 done /94 queued / 16 running / 95 errors / 24% coverage ] ****** [97 done /93 queued / 16 running / 96 errors / 24% coverage ] ****** [97 done /93 queued / 16 running / 96 errors / 24% coverage ] ****** [98 done /95 queued / 16 running / 97 errors / 24% coverage ] ****** [98 done /95 queued / 16 running / 97 errors / 24% coverage ] ****** [99 done /94 queued / 16 running / 98 errors / 24% coverage ] ****** [99 done /94 queued / 16 running / 98 errors / 24% coverage ] ****** [100 done /96 queued / 16 running / 99 errors / 24% coverage ] ****** [100 done /96 queued / 16 running / 99 errors / 24% coverage ] ****** [101 done /97 queued / 16 running / 100 errors / 24% coverage ] ****** [101 done /97 queued / 16 running / 100 errors / 24% coverage ] ****** [102 done /99 queued / 16 running / 101 errors / 24% coverage ] ****** [102 done /99 queued / 16 running / 101 errors / 24% coverage ] ****** [103 done /104 queued / 16 running / 102 errors / 24% coverage ] ****** [103 done /104 queued / 16 running / 102 errors / 24% coverage ] ****** [104 done /103 queued / 16 running / 103 errors / 24% coverage ] ****** [104 done /103 queued / 16 running / 103 errors / 24% coverage ] ****** [105 done /102 queued / 16 running / 104 errors / 24% coverage ] ****** [105 done /102 queued / 16 running / 104 errors / 24% coverage ] ****** [106 done /103 queued / 16 running / 105 errors / 24% coverage ] ****** [106 done /103 queued / 16 running / 105 errors / 24% coverage ] ****** [107 done /105 queued / 16 running / 106 errors / 24% coverage ] ****** [107 done /105 queued / 16 running / 106 errors / 24% coverage ] ****** [108 done /104 queued / 16 running / 107 errors / 24% coverage ] ****** [108 done /104 queued / 16 running / 107 errors / 24% coverage ] ****** [109 done /103 queued / 16 running / 108 errors / 24% coverage ] ****** [109 done /103 queued / 16 running / 108 errors / 24% coverage ] ****** [110 done /102 queued / 16 running / 109 errors / 24% coverage ] ****** [110 done /102 queued / 16 running / 109 errors / 24% coverage ] ****** [111 done /106 queued / 16 running / 110 errors / 24% coverage ] ****** [111 done /106 queued / 16 running / 110 errors / 24% coverage ] ****** [112 done /108 queued / 16 running / 111 errors / 24% coverage ] ****** [112 done /108 queued / 16 running / 111 errors / 24% coverage ] ****** [113 done /113 queued / 16 running / 112 errors / 24% coverage ] ****** [113 done /113 queued / 16 running / 112 errors / 24% coverage ] ****** [114 done /119 queued / 16 running / 113 errors / 24% coverage ] ****** [114 done /119 queued / 16 running / 113 errors / 24% coverage ] ****** [115 done /120 queued / 16 running / 114 errors / 24% coverage ] ****** [115 done /120 queued / 16 running / 114 errors / 24% coverage ] ****** [116 done /121 queued / 16 running / 115 errors / 24% coverage ] ****** [116 done /121 queued / 16 running / 115 errors / 24% coverage ] ****** [117 done /122 queued / 16 running / 116 errors / 24% coverage ] ****** [117 done /122 queued / 16 running / 116 errors / 24% coverage ] ****** [118 done /122 queued / 16 running / 117 errors / 24% coverage ] ****** [118 done /122 queued / 16 running / 117 errors / 24% coverage ] ****** [119 done /122 queued / 16 running / 118 errors / 24% coverage ] ****** [119 done /122 queued / 16 running / 118 errors / 24% coverage ] ****** [120 done /122 queued / 16 running / 119 errors / 24% coverage ] ****** [120 done /122 queued / 16 running / 119 errors / 24% coverage ] ****** [121 done /122 queued / 16 running / 120 errors / 24% coverage ] ****** [121 done /122 queued / 16 running / 120 errors / 24% coverage ] ****** [122 done /126 queued / 16 running / 121 errors / 24% coverage ] ****** [122 done /126 queued / 16 running / 121 errors / 24% coverage ] ****** [123 done /125 queued / 16 running / 122 errors / 24% coverage ] ****** [123 done /125 queued / 16 running / 122 errors / 24% coverage ] ****** [124 done /124 queued / 16 running / 123 errors / 24% coverage ] ****** [124 done /124 queued / 16 running / 123 errors / 24% coverage ] ****** [125 done /123 queued / 16 running / 124 errors / 24% coverage ] ****** [125 done /123 queued / 16 running / 124 errors / 24% coverage ] ****** [126 done /125 queued / 16 running / 125 errors / 24% coverage ] ****** [126 done /125 queued / 16 running / 125 errors / 24% coverage ] ****** [127 done /126 queued / 16 running / 126 errors / 24% coverage ] ****** [127 done /126 queued / 16 running / 126 errors / 24% coverage ] ****** [128 done /125 queued / 16 running / 127 errors / 24% coverage ] ****** [128 done /125 queued / 16 running / 127 errors / 24% coverage ] ****** [129 done /125 queued / 16 running / 128 errors / 24% coverage ] ****** [129 done /125 queued / 16 running / 128 errors / 24% coverage ] ****** [130 done /125 queued / 16 running / 129 errors / 24% coverage ] ****** [130 done /125 queued / 16 running / 129 errors / 24% coverage ] ****** [131 done /124 queued / 16 running / 130 errors / 24% coverage ] ****** [131 done /124 queued / 16 running / 130 errors / 24% coverage ] ****** [132 done /124 queued / 16 running / 131 errors / 24% coverage ] ****** [132 done /124 queued / 16 running / 131 errors / 24% coverage ] ****** [133 done /124 queued / 16 running / 132 errors / 24% coverage ] ****** [133 done /124 queued / 16 running / 132 errors / 24% coverage ] ****** [134 done /125 queued / 16 running / 133 errors / 24% coverage ] ****** [134 done /125 queued / 16 running / 133 errors / 24% coverage ] ****** [135 done /125 queued / 16 running / 134 errors / 24% coverage ] ****** [135 done /125 queued / 16 running / 134 errors / 24% coverage ] ****** [136 done /126 queued / 16 running / 135 errors / 24% coverage ] ****** [136 done /126 queued / 16 running / 135 errors / 24% coverage ] ****** [137 done /128 queued / 16 running / 136 errors / 24% coverage ] ****** [137 done /128 queued / 16 running / 136 errors / 24% coverage ] ****** [138 done /131 queued / 16 running / 137 errors / 24% coverage ] ****** [138 done /131 queued / 16 running / 137 errors / 24% coverage ] ****** [139 done /132 queued / 16 running / 138 errors / 24% coverage ] ****** [139 done /132 queued / 16 running / 138 errors / 24% coverage ] ****** [140 done /135 queued / 16 running / 139 errors / 24% coverage ] ****** [140 done /135 queued / 16 running / 139 errors / 24% coverage ] ****** [141 done /135 queued / 16 running / 140 errors / 24% coverage ] ****** [141 done /135 queued / 16 running / 140 errors / 24% coverage ] ****** [142 done /134 queued / 16 running / 141 errors / 24% coverage ] ****** [142 done /134 queued / 16 running / 141 errors / 24% coverage ] ****** [143 done /133 queued / 16 running / 142 errors / 24% coverage ] ****** [143 done /133 queued / 16 running / 142 errors / 24% coverage ] ****** [144 done /132 queued / 16 running / 143 errors / 24% coverage ] ****** [144 done /132 queued / 16 running / 143 errors / 24% coverage ] ****** [145 done /138 queued / 16 running / 144 errors / 24% coverage ] ****** [145 done /138 queued / 16 running / 144 errors / 24% coverage ] ****** [146 done /143 queued / 16 running / 145 errors / 24% coverage ] ****** [146 done /143 queued / 16 running / 145 errors / 24% coverage ] ****** [147 done /142 queued / 16 running / 146 errors / 24% coverage ] ****** [147 done /142 queued / 16 running / 146 errors / 24% coverage ] ****** [148 done /141 queued / 16 running / 147 errors / 24% coverage ] ****** [148 done /141 queued / 16 running / 147 errors / 24% coverage ] ****** [149 done /143 queued / 16 running / 148 errors / 24% coverage ] ****** [149 done /143 queued / 16 running / 148 errors / 24% coverage ] ****** [150 done /144 queued / 16 running / 149 errors / 24% coverage ] ****** [150 done /144 queued / 16 running / 149 errors / 24% coverage ] ****** [151 done /149 queued / 16 running / 150 errors / 24% coverage ] ****** [151 done /149 queued / 16 running / 150 errors / 24% coverage ] ****** [152 done /150 queued / 16 running / 151 errors / 24% coverage ] ****** [152 done /150 queued / 16 running / 151 errors / 24% coverage ] ****** [153 done /150 queued / 16 running / 152 errors / 24% coverage ] ****** [153 done /150 queued / 16 running / 152 errors / 24% coverage ] ****** [154 done /151 queued / 16 running / 153 errors / 24% coverage ] ****** [154 done /151 queued / 16 running / 153 errors / 24% coverage ] ****** [155 done /153 queued / 16 running / 154 errors / 24% coverage ] ****** [155 done /153 queued / 16 running / 154 errors / 24% coverage ] ****** [156 done /154 queued / 16 running / 155 errors / 24% coverage ] ****** [156 done /154 queued / 16 running / 155 errors / 24% coverage ] ****** [157 done /155 queued / 16 running / 156 errors / 24% coverage ] ****** [157 done /155 queued / 16 running / 156 errors / 24% coverage ] ****** [158 done /154 queued / 16 running / 157 errors / 24% coverage ] ****** [158 done /154 queued / 16 running / 157 errors / 24% coverage ] ****** [159 done /155 queued / 16 running / 158 errors / 24% coverage ] ****** [159 done /155 queued / 16 running / 158 errors / 24% coverage ] ****** [160 done /159 queued / 16 running / 159 errors / 24% coverage ] ****** [160 done /159 queued / 16 running / 159 errors / 24% coverage ] ****** [161 done /160 queued / 16 running / 160 errors / 24% coverage ] ****** [161 done /160 queued / 16 running / 160 errors / 24% coverage ] ****** [162 done /160 queued / 16 running / 161 errors / 24% coverage ] ****** [162 done /160 queued / 16 running / 161 errors / 24% coverage ] ****** [163 done /161 queued / 16 running / 162 errors / 24% coverage ] ****** [163 done /161 queued / 16 running / 162 errors / 24% coverage ] ****** [164 done /161 queued / 16 running / 163 errors / 24% coverage ] ****** [164 done /161 queued / 16 running / 163 errors / 24% coverage ] ****** [165 done /161 queued / 16 running / 164 errors / 24% coverage ] ****** [165 done /161 queued / 16 running / 164 errors / 24% coverage ] ****** [166 done /160 queued / 16 running / 165 errors / 24% coverage ] ****** [166 done /160 queued / 16 running / 165 errors / 24% coverage ] ****** [167 done /160 queued / 16 running / 166 errors / 24% coverage ] ****** [167 done /160 queued / 16 running / 166 errors / 24% coverage ] ****** [168 done /159 queued / 16 running / 167 errors / 24% coverage ] ****** [168 done /159 queued / 16 running / 167 errors / 24% coverage ] ****** [169 done /159 queued / 16 running / 168 errors / 24% coverage ] ****** [169 done /159 queued / 16 running / 168 errors / 24% coverage ] ****** [170 done /161 queued / 16 running / 169 errors / 24% coverage ] ****** [170 done /161 queued / 16 running / 169 errors / 24% coverage ] ****** [171 done /164 queued / 16 running / 170 errors / 24% coverage ] ****** [171 done /164 queued / 16 running / 170 errors / 24% coverage ] ****** [172 done /164 queued / 16 running / 171 errors / 24% coverage ] ****** [172 done /164 queued / 16 running / 171 errors / 24% coverage ] ****** [173 done /165 queued / 16 running / 172 errors / 24% coverage ] ****** [173 done /165 queued / 16 running / 172 errors / 24% coverage ] ****** [174 done /167 queued / 16 running / 173 errors / 24% coverage ] ****** [174 done /167 queued / 16 running / 173 errors / 24% coverage ] ****** [175 done /167 queued / 16 running / 174 errors / 24% coverage ] ****** [175 done /167 queued / 16 running / 174 errors / 24% coverage ] ****** [176 done /168 queued / 16 running / 175 errors / 24% coverage ] ****** [176 done /168 queued / 16 running / 175 errors / 24% coverage ] ****** [177 done /172 queued / 16 running / 176 errors / 24% coverage ] ****** [177 done /172 queued / 16 running / 176 errors / 24% coverage ] ****** [178 done /172 queued / 16 running / 177 errors / 24% coverage ] ****** [178 done /172 queued / 16 running / 177 errors / 24% coverage ] ****** [179 done /175 queued / 16 running / 178 errors / 24% coverage ] ****** [179 done /175 queued / 16 running / 178 errors / 24% coverage ] ****** [180 done /175 queued / 16 running / 179 errors / 24% coverage ] ****** [180 done /175 queued / 16 running / 179 errors / 24% coverage ] ****** [181 done /174 queued / 16 running / 180 errors / 24% coverage ] ****** [181 done /174 queued / 16 running / 180 errors / 24% coverage ] ****** [182 done /173 queued / 16 running / 181 errors / 24% coverage ] ****** [182 done /173 queued / 16 running / 181 errors / 24% coverage ] ****** [183 done /175 queued / 16 running / 182 errors / 24% coverage ] ****** [183 done /175 queued / 16 running / 182 errors / 24% coverage ] ****** [184 done /176 queued / 16 running / 183 errors / 24% coverage ] ****** [184 done /176 queued / 16 running / 183 errors / 24% coverage ] ****** [185 done /176 queued / 16 running / 184 errors / 24% coverage ] ****** [185 done /176 queued / 16 running / 184 errors / 24% coverage ] ****** [186 done /177 queued / 16 running / 185 errors / 24% coverage ] ****** [186 done /177 queued / 16 running / 185 errors / 24% coverage ] ****** [187 done /179 queued / 16 running / 186 errors / 24% coverage ] ****** [187 done /179 queued / 16 running / 186 errors / 24% coverage ] ****** [188 done /184 queued / 16 running / 187 errors / 24% coverage ] ****** [188 done /184 queued / 16 running / 187 errors / 24% coverage ] ****** [189 done /183 queued / 16 running / 188 errors / 24% coverage ] ****** [189 done /183 queued / 16 running / 188 errors / 24% coverage ] ****** [190 done /182 queued / 16 running / 189 errors / 24% coverage ] ****** [190 done /182 queued / 16 running / 189 errors / 24% coverage ] ****** [191 done /182 queued / 16 running / 190 errors / 24% coverage ] ****** [191 done /182 queued / 16 running / 190 errors / 24% coverage ] ****** [192 done /183 queued / 16 running / 191 errors / 24% coverage ] ****** [192 done /183 queued / 16 running / 191 errors / 24% coverage ] ****** [193 done /182 queued / 16 running / 192 errors / 24% coverage ] ****** [193 done /182 queued / 16 running / 192 errors / 24% coverage ] ****** [194 done /181 queued / 16 running / 193 errors / 24% coverage ] ****** [194 done /181 queued / 16 running / 193 errors / 24% coverage ] ****** [195 done /184 queued / 16 running / 194 errors / 24% coverage ] ****** [195 done /184 queued / 16 running / 194 errors / 24% coverage ] ****** [196 done /183 queued / 16 running / 195 errors / 24% coverage ] ****** [196 done /183 queued / 16 running / 195 errors / 24% coverage ] ****** [197 done /182 queued / 16 running / 196 errors / 24% coverage ] ****** [197 done /182 queued / 16 running / 196 errors / 24% coverage ] ****** [198 done /181 queued / 16 running / 197 errors / 24% coverage ] ****** [198 done /181 queued / 16 running / 197 errors / 24% coverage ] ****** [199 done /180 queued / 16 running / 198 errors / 24% coverage ] ****** [199 done /180 queued / 16 running / 198 errors / 24% coverage ] ****** [200 done /179 queued / 16 running / 199 errors / 24% coverage ] ****** [200 done /179 queued / 16 running / 199 errors / 24% coverage ] ****** [201 done /178 queued / 16 running / 200 errors / 24% coverage ] ****** [201 done /178 queued / 16 running / 200 errors / 24% coverage ] ****** [202 done /179 queued / 16 running / 201 errors / 24% coverage ] ****** [202 done /179 queued / 16 running / 201 errors / 24% coverage ] ****** [203 done /180 queued / 16 running / 202 errors / 24% coverage ] ****** [203 done /180 queued / 16 running / 202 errors / 24% coverage ] ****** [204 done /182 queued / 16 running / 203 errors / 24% coverage ] ****** [204 done /182 queued / 16 running / 203 errors / 24% coverage ] ****** [205 done /181 queued / 16 running / 204 errors / 24% coverage ] ****** [205 done /181 queued / 16 running / 204 errors / 24% coverage ] ****** [206 done /182 queued / 16 running / 205 errors / 24% coverage ] ****** [206 done /182 queued / 16 running / 205 errors / 24% coverage ] ****** [207 done /183 queued / 16 running / 206 errors / 24% coverage ] ****** [207 done /183 queued / 16 running / 206 errors / 24% coverage ] ****** [208 done /182 queued / 16 running / 207 errors / 24% coverage ] ****** [208 done /182 queued / 16 running / 207 errors / 24% coverage ] ****** [209 done /186 queued / 16 running / 208 errors / 24% coverage ] ****** [209 done /186 queued / 16 running / 208 errors / 24% coverage ] ****** [210 done /185 queued / 16 running / 209 errors / 24% coverage ] ****** [210 done /185 queued / 16 running / 209 errors / 24% coverage ] ****** [211 done /185 queued / 16 running / 210 errors / 24% coverage ] ****** [211 done /185 queued / 16 running / 210 errors / 24% coverage ] ****** [212 done /184 queued / 16 running / 211 errors / 24% coverage ] ****** [212 done /184 queued / 16 running / 211 errors / 24% coverage ] ****** [213 done /186 queued / 16 running / 212 errors / 24% coverage ] ****** [213 done /186 queued / 16 running / 212 errors / 24% coverage ] ****** [214 done /190 queued / 16 running / 213 errors / 24% coverage ] ****** [214 done /190 queued / 16 running / 213 errors / 24% coverage ] ****** [215 done /191 queued / 16 running / 214 errors / 24% coverage ] ****** [215 done /191 queued / 16 running / 214 errors / 24% coverage ] ****** [216 done /192 queued / 16 running / 215 errors / 24% coverage ] ****** [216 done /192 queued / 16 running / 215 errors / 24% coverage ] ****** [217 done /194 queued / 16 running / 216 errors / 24% coverage ] ****** [217 done /194 queued / 16 running / 216 errors / 24% coverage ] ****** [218 done /193 queued / 16 running / 217 errors / 24% coverage ] ****** [218 done /193 queued / 16 running / 217 errors / 24% coverage ] ****** [219 done /192 queued / 16 running / 218 errors / 24% coverage ] ****** [219 done /192 queued / 16 running / 218 errors / 24% coverage ] ****** [220 done /193 queued / 16 running / 219 errors / 24% coverage ] ****** [220 done /193 queued / 16 running / 219 errors / 24% coverage ] ****** [221 done /195 queued / 16 running / 220 errors / 24% coverage ] ****** [221 done /195 queued / 16 running / 220 errors / 24% coverage ] ****** [222 done /194 queued / 16 running / 221 errors / 24% coverage ] ****** [222 done /194 queued / 16 running / 221 errors / 24% coverage ] ****** [223 done /194 queued / 16 running / 222 errors / 24% coverage ] ****** [223 done /194 queued / 16 running / 222 errors / 24% coverage ] ****** [224 done /197 queued / 16 running / 223 errors / 24% coverage ] ****** [224 done /197 queued / 16 running / 223 errors / 24% coverage ] ****** [225 done /197 queued / 16 running / 224 errors / 24% coverage ] ****** [225 done /197 queued / 16 running / 224 errors / 24% coverage ] ****** [226 done /197 queued / 16 running / 225 errors / 24% coverage ] ****** [226 done /197 queued / 16 running / 225 errors / 24% coverage ] ****** [227 done /198 queued / 16 running / 226 errors / 24% coverage ] ****** [227 done /198 queued / 16 running / 226 errors / 24% coverage ] ****** [228 done /197 queued / 16 running / 227 errors / 24% coverage ] ****** [228 done /197 queued / 16 running / 227 errors / 24% coverage ] ****** [229 done /201 queued / 16 running / 228 errors / 24% coverage ] ****** [229 done /201 queued / 16 running / 228 errors / 24% coverage ] ****** [230 done /200 queued / 16 running / 229 errors / 24% coverage ] ****** [230 done /200 queued / 16 running / 229 errors / 24% coverage ] ****** [231 done /199 queued / 16 running / 230 errors / 24% coverage ] ****** [231 done /199 queued / 16 running / 230 errors / 24% coverage ] ****** [232 done /198 queued / 16 running / 231 errors / 24% coverage ] ****** [232 done /198 queued / 16 running / 231 errors / 24% coverage ] ****** [233 done /198 queued / 16 running / 232 errors / 24% coverage ] ****** [233 done /198 queued / 16 running / 232 errors / 24% coverage ] ****** [234 done /200 queued / 16 running / 233 errors / 24% coverage ] ****** [234 done /200 queued / 16 running / 233 errors / 24% coverage ] ****** [235 done /199 queued / 16 running / 234 errors / 24% coverage ] ****** [235 done /199 queued / 16 running / 234 errors / 24% coverage ] ****** [236 done /198 queued / 16 running / 235 errors / 24% coverage ] ****** [236 done /198 queued / 16 running / 235 errors / 24% coverage ] ****** [237 done /198 queued / 16 running / 236 errors / 24% coverage ] ****** [237 done /198 queued / 16 running / 236 errors / 24% coverage ] ****** [238 done /201 queued / 16 running / 237 errors / 24% coverage ] ****** [238 done /201 queued / 16 running / 237 errors / 24% coverage ] ****** [239 done /203 queued / 16 running / 238 errors / 24% coverage ] ****** [239 done /203 queued / 16 running / 238 errors / 24% coverage ] ****** [240 done /202 queued / 16 running / 239 errors / 24% coverage ] ****** [240 done /202 queued / 16 running / 239 errors / 24% coverage ] ****** [241 done /202 queued / 16 running / 240 errors / 24% coverage ] ****** [241 done /202 queued / 16 running / 240 errors / 24% coverage ] ****** [242 done /201 queued / 16 running / 241 errors / 24% coverage ] ****** [242 done /201 queued / 16 running / 241 errors / 24% coverage ] ****** [243 done /200 queued / 16 running / 242 errors / 24% coverage ] ****** [243 done /200 queued / 16 running / 242 errors / 24% coverage ] ****** [244 done /201 queued / 16 running / 243 errors / 24% coverage ] ****** [244 done /201 queued / 16 running / 243 errors / 24% coverage ] ****** [245 done /204 queued / 16 running / 244 errors / 24% coverage ] ****** [245 done /204 queued / 16 running / 244 errors / 24% coverage ] ****** [246 done /203 queued / 16 running / 245 errors / 24% coverage ] ****** [246 done /203 queued / 16 running / 245 errors / 24% coverage ] ****** [247 done /206 queued / 16 running / 246 errors / 24% coverage ] ****** [247 done /206 queued / 16 running / 246 errors / 24% coverage ] ****** [248 done /205 queued / 16 running / 247 errors / 24% coverage ] ****** [248 done /205 queued / 16 running / 247 errors / 24% coverage ] ****** [249 done /204 queued / 16 running / 248 errors / 24% coverage ] ****** [249 done /204 queued / 16 running / 248 errors / 24% coverage ] ****** [250 done /205 queued / 16 running / 249 errors / 24% coverage ] ****** [250 done /205 queued / 16 running / 249 errors / 24% coverage ] ****** [251 done /205 queued / 16 running / 250 errors / 24% coverage ] ****** [251 done /205 queued / 16 running / 250 errors / 24% coverage ] ****** [252 done /205 queued / 16 running / 251 errors / 24% coverage ] ****** [252 done /205 queued / 16 running / 251 errors / 24% coverage ] ****** [253 done /206 queued / 16 running / 252 errors / 24% coverage ] ****** [253 done /206 queued / 16 running / 252 errors / 24% coverage ] ****** [254 done /208 queued / 16 running / 253 errors / 24% coverage ] ****** [254 done /208 queued / 16 running / 253 errors / 24% coverage ] ****** [255 done /212 queued / 16 running / 254 errors / 24% coverage ] ****** [255 done /212 queued / 16 running / 254 errors / 24% coverage ] ****** [256 done /212 queued / 16 running / 255 errors / 24% coverage ] ****** [256 done /212 queued / 16 running / 255 errors / 24% coverage ] ****** [257 done /211 queued / 16 running / 256 errors / 24% coverage ] ****** [257 done /211 queued / 16 running / 256 errors / 24% coverage ] ****** [258 done /214 queued / 16 running / 257 errors / 24% coverage ] ****** [258 done /214 queued / 16 running / 257 errors / 24% coverage ] ****** [259 done /217 queued / 16 running / 258 errors / 24% coverage ] ****** [259 done /217 queued / 16 running / 258 errors / 24% coverage ] ****** [260 done /221 queued / 16 running / 259 errors / 24% coverage ] ****** [260 done /221 queued / 16 running / 259 errors / 24% coverage ] ****** [261 done /220 queued / 16 running / 260 errors / 24% coverage ] ****** [261 done /220 queued / 16 running / 260 errors / 24% coverage ] ****** [262 done /222 queued / 16 running / 261 errors / 24% coverage ] ****** [262 done /222 queued / 16 running / 261 errors / 24% coverage ] ****** [263 done /223 queued / 16 running / 262 errors / 24% coverage ] ****** [263 done /223 queued / 16 running / 262 errors / 24% coverage ] ****** [264 done /226 queued / 16 running / 263 errors / 24% coverage ] ****** [264 done /226 queued / 16 running / 263 errors / 24% coverage ] ****** [265 done /229 queued / 16 running / 264 errors / 24% coverage ] ****** [265 done /229 queued / 16 running / 264 errors / 24% coverage ] ****** [266 done /230 queued / 16 running / 265 errors / 24% coverage ] ****** [266 done /230 queued / 16 running / 265 errors / 24% coverage ] ****** [267 done /232 queued / 16 running / 266 errors / 24% coverage ] ****** [267 done /232 queued / 16 running / 266 errors / 24% coverage ] ****** [268 done /232 queued / 16 running / 267 errors / 24% coverage ] ****** [268 done /232 queued / 16 running / 267 errors / 24% coverage ] ****** [269 done /233 queued / 16 running / 268 errors / 24% coverage ] ****** [269 done /233 queued / 16 running / 268 errors / 24% coverage ] ****** [270 done /235 queued / 16 running / 269 errors / 24% coverage ] ****** [270 done /235 queued / 16 running / 269 errors / 24% coverage ] ****** [271 done /234 queued / 16 running / 270 errors / 24% coverage ] ****** [271 done /234 queued / 16 running / 270 errors / 24% coverage ] ****** [272 done /233 queued / 16 running / 271 errors / 24% coverage ] ****** [272 done /233 queued / 16 running / 271 errors / 24% coverage ] ****** [273 done /233 queued / 16 running / 272 errors / 24% coverage ] ****** [273 done /233 queued / 16 running / 272 errors / 24% coverage ] ****** [274 done /234 queued / 16 running / 273 errors / 24% coverage ] ****** [274 done /234 queued / 16 running / 273 errors / 24% coverage ] ****** [275 done /233 queued / 16 running / 274 errors / 24% coverage ] ****** [275 done /233 queued / 16 running / 274 errors / 24% coverage ] ****** [276 done /233 queued / 16 running / 275 errors / 24% coverage ] ****** [276 done /233 queued / 16 running / 275 errors / 24% coverage ] ****** [277 done /233 queued / 16 running / 276 errors / 24% coverage ] ****** [277 done /233 queued / 16 running / 276 errors / 24% coverage ] ****** [278 done /235 queued / 16 running / 277 errors / 24% coverage ] ****** [278 done /235 queued / 16 running / 277 errors / 24% coverage ] ****** [279 done /235 queued / 16 running / 278 errors / 24% coverage ] ****** [279 done /235 queued / 16 running / 278 errors / 24% coverage ] ****** [280 done /237 queued / 16 running / 279 errors / 24% coverage ] ****** [280 done /237 queued / 16 running / 279 errors / 24% coverage ] ****** [281 done /238 queued / 16 running / 280 errors / 24% coverage ] ****** [281 done /238 queued / 16 running / 280 errors / 24% coverage ] ****** [282 done /237 queued / 16 running / 281 errors / 24% coverage ] ****** [282 done /237 queued / 16 running / 281 errors / 24% coverage ] ****** [283 done /238 queued / 16 running / 282 errors / 24% coverage ] ****** [283 done /238 queued / 16 running / 282 errors / 24% coverage ] ****** [284 done /238 queued / 16 running / 283 errors / 24% coverage ] ****** [284 done /238 queued / 16 running / 283 errors / 24% coverage ] ****** [285 done /237 queued / 16 running / 284 errors / 24% coverage ] ****** [285 done /237 queued / 16 running / 284 errors / 24% coverage ] ****** [286 done /236 queued / 16 running / 285 errors / 24% coverage ] ****** [286 done /236 queued / 16 running / 285 errors / 24% coverage ] ****** [287 done /241 queued / 16 running / 286 errors / 24% coverage ] ****** [287 done /241 queued / 16 running / 286 errors / 24% coverage ] ****** [288 done /240 queued / 16 running / 287 errors / 24% coverage ] ****** [288 done /240 queued / 16 running / 287 errors / 24% coverage ] ****** [289 done /240 queued / 16 running / 288 errors / 24% coverage ] ****** [289 done /240 queued / 16 running / 288 errors / 24% coverage ] ****** [290 done /242 queued / 16 running / 289 errors / 24% coverage ] ****** [290 done /242 queued / 16 running / 289 errors / 24% coverage ] ****** [291 done /242 queued / 16 running / 290 errors / 24% coverage ] ****** [291 done /242 queued / 16 running / 290 errors / 24% coverage ] ****** [292 done /244 queued / 16 running / 291 errors / 24% coverage ] ****** [292 done /244 queued / 16 running / 291 errors / 24% coverage ] ****** [293 done /245 queued / 16 running / 292 errors / 24% coverage ] ****** [293 done /245 queued / 16 running / 292 errors / 24% coverage ] ****** [294 done /245 queued / 16 running / 293 errors / 24% coverage ] ****** [294 done /245 queued / 16 running / 293 errors / 24% coverage ] ****** [295 done /244 queued / 16 running / 294 errors / 24% coverage ] ****** [295 done /244 queued / 16 running / 294 errors / 24% coverage ] ****** [296 done /250 queued / 16 running / 295 errors / 24% coverage ] ****** [296 done /250 queued / 16 running / 295 errors / 24% coverage ] ****** [297 done /249 queued / 16 running / 296 errors / 24% coverage ] ****** [297 done /249 queued / 16 running / 296 errors / 24% coverage ] ****** [298 done /251 queued / 16 running / 297 errors / 24% coverage ] ****** [298 done /251 queued / 16 running / 297 errors / 24% coverage ] ****** [299 done /252 queued / 16 running / 298 errors / 24% coverage ] ****** [299 done /252 queued / 16 running / 298 errors / 24% coverage ] ****** [300 done /251 queued / 16 running / 299 errors / 24% coverage ] ****** [300 done /251 queued / 16 running / 299 errors / 24% coverage ] ****** [301 done /255 queued / 16 running / 300 errors / 24% coverage ] ****** [301 done /255 queued / 16 running / 300 errors / 24% coverage ] ****** [302 done /257 queued / 16 running / 301 errors / 24% coverage ] ****** [302 done /257 queued / 16 running / 301 errors / 24% coverage ] ****** [303 done /258 queued / 16 running / 302 errors / 24% coverage ] ****** [303 done /258 queued / 16 running / 302 errors / 24% coverage ] ****** [304 done /259 queued / 16 running / 303 errors / 24% coverage ] ****** [304 done /259 queued / 16 running / 303 errors / 24% coverage ] ****** [305 done /259 queued / 16 running / 304 errors / 24% coverage ] ****** [305 done /259 queued / 16 running / 304 errors / 24% coverage ] ****** [306 done /261 queued / 16 running / 305 errors / 24% coverage ] ****** [306 done /261 queued / 16 running / 305 errors / 24% coverage ] ****** [307 done /262 queued / 16 running / 306 errors / 24% coverage ] ****** [307 done /262 queued / 16 running / 306 errors / 24% coverage ] ****** [308 done /261 queued / 16 running / 307 errors / 24% coverage ] ****** [308 done /261 queued / 16 running / 307 errors / 24% coverage ] ****** [309 done /264 queued / 16 running / 308 errors / 24% coverage ] ****** [309 done /264 queued / 16 running / 308 errors / 24% coverage ] ****** [310 done /266 queued / 16 running / 309 errors / 24% coverage ] ****** [310 done /266 queued / 16 running / 309 errors / 24% coverage ] ****** [311 done /270 queued / 16 running / 310 errors / 24% coverage ] ****** [311 done /270 queued / 16 running / 310 errors / 24% coverage ] ****** [312 done /272 queued / 16 running / 311 errors / 24% coverage ] ****** [312 done /272 queued / 16 running / 311 errors / 24% coverage ] ****** [313 done /275 queued / 16 running / 312 errors / 24% coverage ] ****** [313 done /275 queued / 16 running / 312 errors / 24% coverage ] ****** [314 done /277 queued / 16 running / 313 errors / 24% coverage ] ****** [314 done /277 queued / 16 running / 313 errors / 24% coverage ] ****** [315 done /279 queued / 16 running / 314 errors / 24% coverage ] ****** [315 done /279 queued / 16 running / 314 errors / 24% coverage ] ****** [316 done /281 queued / 16 running / 315 errors / 24% coverage ] ****** [316 done /281 queued / 16 running / 315 errors / 24% coverage ] ****** [317 done /280 queued / 16 running / 316 errors / 24% coverage ] ****** [317 done /280 queued / 16 running / 316 errors / 24% coverage ] ****** [318 done /281 queued / 16 running / 317 errors / 24% coverage ] ****** [318 done /281 queued / 16 running / 317 errors / 24% coverage ] ****** [319 done /282 queued / 16 running / 318 errors / 24% coverage ] ****** [319 done /282 queued / 16 running / 318 errors / 24% coverage ] ****** [320 done /282 queued / 16 running / 319 errors / 24% coverage ] ****** [320 done /282 queued / 16 running / 319 errors / 24% coverage ] ****** [321 done /283 queued / 16 running / 320 errors / 24% coverage ] ****** [321 done /283 queued / 16 running / 320 errors / 24% coverage ] ****** [322 done /282 queued / 16 running / 321 errors / 24% coverage ] ****** [322 done /282 queued / 16 running / 321 errors / 24% coverage ] ****** [323 done /286 queued / 16 running / 322 errors / 24% coverage ] ****** [323 done /286 queued / 16 running / 322 errors / 24% coverage ] ****** [324 done /286 queued / 16 running / 323 errors / 24% coverage ] ****** [324 done /286 queued / 16 running / 323 errors / 24% coverage ] ****** [325 done /287 queued / 16 running / 324 errors / 24% coverage ] ****** [325 done /287 queued / 16 running / 324 errors / 24% coverage ] ****** [326 done /288 queued / 16 running / 325 errors / 24% coverage ] ****** [326 done /288 queued / 16 running / 325 errors / 24% coverage ] ****** [327 done /288 queued / 16 running / 326 errors / 24% coverage ] ****** [327 done /288 queued / 16 running / 326 errors / 24% coverage ] ****** [328 done /290 queued / 16 running / 327 errors / 24% coverage ] ****** [328 done /290 queued / 16 running / 327 errors / 24% coverage ] ****** [329 done /290 queued / 16 running / 328 errors / 24% coverage ] ****** [329 done /290 queued / 16 running / 328 errors / 24% coverage ] ****** [330 done /295 queued / 16 running / 329 errors / 24% coverage ] ****** [330 done /295 queued / 16 running / 329 errors / 24% coverage ] ****** [331 done /295 queued / 16 running / 330 errors / 24% coverage ] ****** [331 done /295 queued / 16 running / 330 errors / 24% coverage ] ****** [332 done /299 queued / 16 running / 331 errors / 24% coverage ] ****** [332 done /299 queued / 16 running / 331 errors / 24% coverage ] ****** [333 done /301 queued / 16 running / 332 errors / 24% coverage ] ****** [333 done /301 queued / 16 running / 332 errors / 24% coverage ] ****** [334 done /305 queued / 16 running / 333 errors / 24% coverage ] ****** [334 done /305 queued / 16 running / 333 errors / 24% coverage ] ****** [335 done /306 queued / 16 running / 334 errors / 24% coverage ] ****** [335 done /306 queued / 16 running / 334 errors / 24% coverage ] ****** [336 done /307 queued / 16 running / 335 errors / 24% coverage ] ****** [336 done /307 queued / 16 running / 335 errors / 24% coverage ] ****** [337 done /307 queued / 16 running / 336 errors / 24% coverage ] ****** [337 done /307 queued / 16 running / 336 errors / 24% coverage ] ****** [338 done /309 queued / 16 running / 337 errors / 24% coverage ] ****** [338 done /309 queued / 16 running / 337 errors / 24% coverage ] ****** [339 done /309 queued / 16 running / 338 errors / 24% coverage ] ****** [339 done /309 queued / 16 running / 338 errors / 24% coverage ] ****** [340 done /310 queued / 16 running / 339 errors / 24% coverage ] ****** [340 done /310 queued / 16 running / 339 errors / 24% coverage ] ****** [341 done /311 queued / 16 running / 340 errors / 24% coverage ] ****** [341 done /311 queued / 16 running / 340 errors / 24% coverage ] ****** [342 done /311 queued / 16 running / 341 errors / 24% coverage ] ****** [342 done /311 queued / 16 running / 341 errors / 24% coverage ] ****** [343 done /313 queued / 16 running / 342 errors / 24% coverage ] ****** [343 done /313 queued / 16 running / 342 errors / 24% coverage ] ****** [344 done /312 queued / 16 running / 343 errors / 24% coverage ] ****** [344 done /312 queued / 16 running / 343 errors / 24% coverage ] ****** [345 done /311 queued / 16 running / 344 errors / 24% coverage ] ****** [345 done /311 queued / 16 running / 344 errors / 24% coverage ] ****** [346 done /314 queued / 16 running / 345 errors / 24% coverage ] ****** [346 done /314 queued / 16 running / 345 errors / 24% coverage ] ****** [347 done /319 queued / 16 running / 346 errors / 24% coverage ] ****** [347 done /319 queued / 16 running / 346 errors / 24% coverage ] ****** [348 done /322 queued / 16 running / 347 errors / 24% coverage ] ****** [348 done /322 queued / 16 running / 347 errors / 24% coverage ] ****** [349 done /326 queued / 16 running / 348 errors / 24% coverage ] ****** [349 done /326 queued / 16 running / 348 errors / 24% coverage ] ****** [350 done /327 queued / 16 running / 349 errors / 24% coverage ] ****** [350 done /327 queued / 16 running / 349 errors / 24% coverage ] ****** [351 done /326 queued / 16 running / 350 errors / 24% coverage ] ****** [351 done /326 queued / 16 running / 350 errors / 24% coverage ] ****** [352 done /326 queued / 16 running / 351 errors / 24% coverage ] ****** [352 done /326 queued / 16 running / 351 errors / 24% coverage ] ****** [353 done /327 queued / 16 running / 352 errors / 24% coverage ] ****** [353 done /327 queued / 16 running / 352 errors / 24% coverage ] ****** [354 done /327 queued / 16 running / 353 errors / 24% coverage ] ****** [354 done /327 queued / 16 running / 353 errors / 24% coverage ] ****** [355 done /326 queued / 16 running / 354 errors / 24% coverage ] ****** [355 done /326 queued / 16 running / 354 errors / 24% coverage ] ****** [356 done /326 queued / 16 running / 355 errors / 24% coverage ] ****** [356 done /326 queued / 16 running / 355 errors / 24% coverage ] ****** [357 done /325 queued / 16 running / 356 errors / 24% coverage ] ****** [357 done /325 queued / 16 running / 356 errors / 24% coverage ] ****** [358 done /328 queued / 16 running / 357 errors / 24% coverage ] ****** [358 done /328 queued / 16 running / 357 errors / 24% coverage ] ****** [359 done /330 queued / 16 running / 358 errors / 24% coverage ] ****** [359 done /330 queued / 16 running / 358 errors / 24% coverage ] ****** [360 done /329 queued / 16 running / 359 errors / 24% coverage ] ****** [360 done /329 queued / 16 running / 359 errors / 24% coverage ] ****** [361 done /330 queued / 16 running / 360 errors / 24% coverage ] ****** [361 done /330 queued / 16 running / 360 errors / 24% coverage ] ****** [362 done /329 queued / 16 running / 361 errors / 24% coverage ] ****** [362 done /329 queued / 16 running / 361 errors / 24% coverage ] ****** [363 done /331 queued / 16 running / 362 errors / 24% coverage ] ****** [363 done /331 queued / 16 running / 362 errors / 24% coverage ] ****** [364 done /331 queued / 16 running / 363 errors / 24% coverage ] ****** [364 done /331 queued / 16 running / 363 errors / 24% coverage ] ****** [365 done /332 queued / 16 running / 364 errors / 24% coverage ] ****** [365 done /332 queued / 16 running / 364 errors / 24% coverage ] ****** [366 done /333 queued / 16 running / 365 errors / 24% coverage ] ****** [366 done /333 queued / 16 running / 365 errors / 24% coverage ] ****** [367 done /333 queued / 16 running / 366 errors / 24% coverage ] ****** [367 done /333 queued / 16 running / 366 errors / 24% coverage ] ****** [368 done /337 queued / 16 running / 367 errors / 24% coverage ] ****** [368 done /337 queued / 16 running / 367 errors / 24% coverage ] ****** [369 done /338 queued / 16 running / 368 errors / 24% coverage ] ****** [369 done /338 queued / 16 running / 368 errors / 24% coverage ] ****** [370 done /337 queued / 16 running / 369 errors / 24% coverage ] ****** [370 done /337 queued / 16 running / 369 errors / 24% coverage ] ****** [371 done /336 queued / 16 running / 370 errors / 24% coverage ] ****** [371 done /336 queued / 16 running / 370 errors / 24% coverage ] ****** [372 done /339 queued / 16 running / 371 errors / 24% coverage ] ****** [372 done /339 queued / 16 running / 371 errors / 24% coverage ] ****** [373 done /343 queued / 16 running / 372 errors / 24% coverage ] ****** [373 done /343 queued / 16 running / 372 errors / 24% coverage ] ****** [374 done /342 queued / 16 running / 373 errors / 24% coverage ] ****** [374 done /342 queued / 16 running / 373 errors / 24% coverage ] ****** [375 done /341 queued / 16 running / 374 errors / 24% coverage ] ****** [375 done /341 queued / 16 running / 374 errors / 24% coverage ] ****** [376 done /342 queued / 16 running / 375 errors / 24% coverage ] ****** [376 done /342 queued / 16 running / 375 errors / 24% coverage ] ****** [377 done /345 queued / 16 running / 376 errors / 24% coverage ] ****** [377 done /345 queued / 16 running / 376 errors / 24% coverage ] ****** [378 done /344 queued / 16 running / 377 errors / 24% coverage ] ****** [378 done /344 queued / 16 running / 377 errors / 24% coverage ] ****** [379 done /347 queued / 16 running / 378 errors / 24% coverage ] ****** [379 done /347 queued / 16 running / 378 errors / 24% coverage ] ****** [380 done /346 queued / 16 running / 379 errors / 24% coverage ] ****** [380 done /346 queued / 16 running / 379 errors / 24% coverage ] ****** [381 done /349 queued / 16 running / 380 errors / 24% coverage ] ****** [381 done /349 queued / 16 running / 380 errors / 24% coverage ] ****** [382 done /350 queued / 16 running / 381 errors / 24% coverage ] ****** [382 done /350 queued / 16 running / 381 errors / 24% coverage ] ****** [383 done /350 queued / 16 running / 382 errors / 24% coverage ] ****** [383 done /350 queued / 16 running / 382 errors / 24% coverage ] ****** [384 done /354 queued / 16 running / 383 errors / 24% coverage ] ****** [384 done /354 queued / 16 running / 383 errors / 24% coverage ] ****** [385 done /353 queued / 16 running / 384 errors / 24% coverage ] ****** [385 done /353 queued / 16 running / 384 errors / 24% coverage ] ****** [386 done /358 queued / 16 running / 385 errors / 24% coverage ] ****** [386 done /358 queued / 16 running / 385 errors / 24% coverage ] ****** [387 done /360 queued / 16 running / 386 errors / 24% coverage ] ****** [387 done /360 queued / 16 running / 386 errors / 24% coverage ] ****** [388 done /361 queued / 16 running / 387 errors / 24% coverage ] ****** [388 done /361 queued / 16 running / 387 errors / 24% coverage ] ****** [389 done /361 queued / 16 running / 388 errors / 24% coverage ] ****** [389 done /361 queued / 16 running / 388 errors / 24% coverage ] ****** [390 done /361 queued / 16 running / 389 errors / 24% coverage ] ****** [390 done /361 queued / 16 running / 389 errors / 24% coverage ] ****** [391 done /364 queued / 16 running / 390 errors / 24% coverage ] ****** [391 done /364 queued / 16 running / 390 errors / 24% coverage ] ****** [392 done /363 queued / 16 running / 391 errors / 24% coverage ] ****** [392 done /363 queued / 16 running / 391 errors / 24% coverage ] ****** [393 done /363 queued / 16 running / 392 errors / 24% coverage ] ****** [393 done /363 queued / 16 running / 392 errors / 24% coverage ] ****** [394 done /364 queued / 16 running / 393 errors / 24% coverage ] ****** [394 done /364 queued / 16 running / 393 errors / 24% coverage ] ****** [395 done /365 queued / 16 running / 394 errors / 24% coverage ] ****** [395 done /365 queued / 16 running / 394 errors / 24% coverage ] ****** [396 done /365 queued / 16 running / 395 errors / 24% coverage ] ****** [396 done /365 queued / 16 running / 395 errors / 24% coverage ] ****** [397 done /365 queued / 16 running / 396 errors / 24% coverage ] ****** [397 done /365 queued / 16 running / 396 errors / 24% coverage ] ****** [398 done /368 queued / 16 running / 397 errors / 24% coverage ] ****** [398 done /368 queued / 16 running / 397 errors / 24% coverage ] ****** [399 done /367 queued / 16 running / 398 errors / 24% coverage ] ****** [399 done /367 queued / 16 running / 398 errors / 24% coverage ] ****** [400 done /370 queued / 16 running / 399 errors / 24% coverage ] ****** [400 done /370 queued / 16 running / 399 errors / 24% coverage ] ****** [401 done /370 queued / 16 running / 400 errors / 24% coverage ] ****** [401 done /370 queued / 16 running / 400 errors / 24% coverage ] ****** [402 done /372 queued / 16 running / 401 errors / 24% coverage ] ****** [402 done /372 queued / 16 running / 401 errors / 24% coverage ] ****** [403 done /372 queued / 16 running / 402 errors / 24% coverage ] ****** [403 done /372 queued / 16 running / 402 errors / 24% coverage ] ****** [404 done /373 queued / 16 running / 403 errors / 24% coverage ] ****** [404 done /373 queued / 16 running / 403 errors / 24% coverage ] ****** [405 done /374 queued / 16 running / 404 errors / 24% coverage ] ****** [405 done /374 queued / 16 running / 404 errors / 24% coverage ] ****** [406 done /373 queued / 16 running / 405 errors / 24% coverage ] ****** [406 done /373 queued / 16 running / 405 errors / 24% coverage ] ****** [407 done /377 queued / 16 running / 406 errors / 24% coverage ] ****** [407 done /377 queued / 16 running / 406 errors / 24% coverage ] ****** [408 done /376 queued / 16 running / 407 errors / 24% coverage ] ****** [408 done /376 queued / 16 running / 407 errors / 24% coverage ] ****** [409 done /379 queued / 16 running / 408 errors / 24% coverage ] ****** [409 done /379 queued / 16 running / 408 errors / 24% coverage ] ****** [410 done /378 queued / 16 running / 409 errors / 24% coverage ] ****** [410 done /378 queued / 16 running / 409 errors / 24% coverage ] ****** [411 done /379 queued / 16 running / 410 errors / 24% coverage ] ****** [411 done /379 queued / 16 running / 410 errors / 24% coverage ] ****** [412 done /380 queued / 16 running / 411 errors / 24% coverage ] ****** [412 done /380 queued / 16 running / 411 errors / 24% coverage ] ****** [413 done /382 queued / 16 running / 412 errors / 24% coverage ] ****** [413 done /382 queued / 16 running / 412 errors / 24% coverage ] ****** [414 done /383 queued / 16 running / 413 errors / 24% coverage ] ****** [414 done /383 queued / 16 running / 413 errors / 24% coverage ] ****** [415 done /383 queued / 16 running / 414 errors / 24% coverage ] ****** [415 done /383 queued / 16 running / 414 errors / 24% coverage ] ****** [416 done /386 queued / 16 running / 415 errors / 24% coverage ] ****** [416 done /386 queued / 16 running / 415 errors / 24% coverage ] ****** [417 done /386 queued / 16 running / 416 errors / 24% coverage ] ****** [417 done /386 queued / 16 running / 416 errors / 24% coverage ] ****** [418 done /387 queued / 16 running / 417 errors / 24% coverage ] ****** [418 done /387 queued / 16 running / 417 errors / 24% coverage ] ****** [419 done /386 queued / 16 running / 418 errors / 24% coverage ] ****** [419 done /386 queued / 16 running / 418 errors / 24% coverage ] ****** [420 done /387 queued / 16 running / 419 errors / 24% coverage ] ****** [420 done /387 queued / 16 running / 419 errors / 24% coverage ] ****** [421 done /386 queued / 16 running / 420 errors / 24% coverage ] ****** [421 done /386 queued / 16 running / 420 errors / 24% coverage ] ****** [422 done /390 queued / 16 running / 421 errors / 24% coverage ] ****** [422 done /390 queued / 16 running / 421 errors / 24% coverage ] ****** [423 done /392 queued / 16 running / 422 errors / 24% coverage ] ****** [423 done /392 queued / 16 running / 422 errors / 24% coverage ] ****** [424 done /393 queued / 16 running / 423 errors / 24% coverage ] ****** [424 done /393 queued / 16 running / 423 errors / 24% coverage ] ****** [425 done /395 queued / 16 running / 424 errors / 24% coverage ] ****** [425 done /395 queued / 16 running / 424 errors / 24% coverage ] ****** [426 done /396 queued / 16 running / 425 errors / 24% coverage ] ****** [426 done /396 queued / 16 running / 425 errors / 24% coverage ] ****** [427 done /395 queued / 16 running / 426 errors / 24% coverage ] ****** [427 done /395 queued / 16 running / 426 errors / 24% coverage ] ****** [428 done /397 queued / 16 running / 427 errors / 24% coverage ] ****** [428 done /397 queued / 16 running / 427 errors / 24% coverage ] ****** [429 done /398 queued / 16 running / 428 errors / 24% coverage ] ****** [429 done /398 queued / 16 running / 428 errors / 24% coverage ] ****** [430 done /401 queued / 16 running / 429 errors / 24% coverage ] ****** [430 done /401 queued / 16 running / 429 errors / 24% coverage ] ****** [431 done /403 queued / 16 running / 430 errors / 24% coverage ] ****** [431 done /403 queued / 16 running / 430 errors / 24% coverage ] ****** [432 done /405 queued / 16 running / 431 errors / 24% coverage ] ****** [432 done /405 queued / 16 running / 431 errors / 24% coverage ] ****** [433 done /407 queued / 16 running / 432 errors / 24% coverage ] ****** [433 done /407 queued / 16 running / 432 errors / 24% coverage ] ****** [434 done /406 queued / 16 running / 433 errors / 24% coverage ] ****** [434 done /406 queued / 16 running / 433 errors / 24% coverage ] ****** [435 done /405 queued / 16 running / 434 errors / 24% coverage ] ****** [435 done /405 queued / 16 running / 434 errors / 24% coverage ] ****** [436 done /405 queued / 16 running / 435 errors / 24% coverage ] ****** [436 done /405 queued / 16 running / 435 errors / 24% coverage ] ****** [437 done /404 queued / 16 running / 436 errors / 24% coverage ] ****** [437 done /404 queued / 16 running / 436 errors / 24% coverage ] ****** [438 done /405 queued / 16 running / 437 errors / 24% coverage ] ****** [438 done /405 queued / 16 running / 437 errors / 24% coverage ] ****** [439 done /405 queued / 16 running / 438 errors / 24% coverage ] ****** [439 done /405 queued / 16 running / 438 errors / 24% coverage ] ****** [440 done /405 queued / 16 running / 439 errors / 24% coverage ] ****** [440 done /405 queued / 16 running / 439 errors / 24% coverage ] ****** [441 done /407 queued / 16 running / 440 errors / 24% coverage ] ****** [441 done /407 queued / 16 running / 440 errors / 24% coverage ] ****** [442 done /406 queued / 16 running / 441 errors / 24% coverage ] ****** [442 done /406 queued / 16 running / 441 errors / 24% coverage ] ****** [443 done /407 queued / 16 running / 442 errors / 24% coverage ] ****** [443 done /407 queued / 16 running / 442 errors / 24% coverage ] ****** [444 done /407 queued / 16 running / 443 errors / 24% coverage ] ****** [444 done /407 queued / 16 running / 443 errors / 24% coverage ] ****** [445 done /411 queued / 16 running / 444 errors / 24% coverage ] ****** [445 done /411 queued / 16 running / 444 errors / 24% coverage ] ****** [446 done /413 queued / 16 running / 445 errors / 24% coverage ] ****** [446 done /413 queued / 16 running / 445 errors / 24% coverage ] ****** [447 done /414 queued / 16 running / 446 errors / 24% coverage ] ****** [447 done /414 queued / 16 running / 446 errors / 24% coverage ] ****** [448 done /413 queued / 16 running / 447 errors / 24% coverage ] ****** [448 done /413 queued / 16 running / 447 errors / 24% coverage ] ****** [449 done /413 queued / 16 running / 448 errors / 24% coverage ] ****** [449 done /413 queued / 16 running / 448 errors / 24% coverage ] ****** [450 done /412 queued / 16 running / 449 errors / 24% coverage ] ****** [450 done /412 queued / 16 running / 449 errors / 24% coverage ] ****** [451 done /416 queued / 16 running / 450 errors / 24% coverage ] ****** [451 done /416 queued / 16 running / 450 errors / 24% coverage ] ****** [452 done /416 queued / 16 running / 451 errors / 24% coverage ] ****** [452 done /416 queued / 16 running / 451 errors / 24% coverage ] ****** [453 done /419 queued / 16 running / 452 errors / 24% coverage ] ****** [453 done /419 queued / 16 running / 452 errors / 24% coverage ] ****** [454 done /420 queued / 16 running / 453 errors / 24% coverage ] ****** [454 done /420 queued / 16 running / 453 errors / 24% coverage ] ****** [455 done /419 queued / 16 running / 454 errors / 24% coverage ] ****** [455 done /419 queued / 16 running / 454 errors / 24% coverage ] ****** [456 done /423 queued / 16 running / 455 errors / 24% coverage ] ****** [456 done /423 queued / 16 running / 455 errors / 24% coverage ] ****** [457 done /422 queued / 16 running / 456 errors / 24% coverage ] ****** [457 done /422 queued / 16 running / 456 errors / 24% coverage ] ****** [458 done /423 queued / 16 running / 457 errors / 24% coverage ] ****** [458 done /423 queued / 16 running / 457 errors / 24% coverage ] ****** [459 done /422 queued / 16 running / 458 errors / 24% coverage ] ****** [459 done /422 queued / 16 running / 458 errors / 24% coverage ] ****** [460 done /425 queued / 16 running / 459 errors / 24% coverage ] ****** [460 done /425 queued / 16 running / 459 errors / 24% coverage ] ****** [461 done /426 queued / 16 running / 460 errors / 24% coverage ] ****** [461 done /426 queued / 16 running / 460 errors / 24% coverage ] ****** [462 done /426 queued / 16 running / 461 errors / 24% coverage ] ****** [462 done /426 queued / 16 running / 461 errors / 24% coverage ] ****** [463 done /428 queued / 16 running / 462 errors / 24% coverage ] ****** [463 done /428 queued / 16 running / 462 errors / 24% coverage ] ****** [464 done /429 queued / 16 running / 463 errors / 24% coverage ] ****** [464 done /429 queued / 16 running / 463 errors / 24% coverage ] ****** [465 done /430 queued / 16 running / 464 errors / 24% coverage ] ****** [465 done /430 queued / 16 running / 464 errors / 24% coverage ] ****** [466 done /431 queued / 16 running / 465 errors / 24% coverage ] ****** [466 done /431 queued / 16 running / 465 errors / 24% coverage ] ****** [467 done /434 queued / 16 running / 466 errors / 24% coverage ] ****** [467 done /434 queued / 16 running / 466 errors / 24% coverage ] ****** [468 done /439 queued / 16 running / 467 errors / 24% coverage ] ****** [468 done /439 queued / 16 running / 467 errors / 24% coverage ] ****** [469 done /438 queued / 16 running / 468 errors / 24% coverage ] ****** [469 done /438 queued / 16 running / 468 errors / 24% coverage ] ****** [470 done /439 queued / 16 running / 469 errors / 24% coverage ] ****** [470 done /439 queued / 16 running / 469 errors / 24% coverage ] ****** [471 done /438 queued / 16 running / 470 errors / 24% coverage ] ****** [471 done /438 queued / 16 running / 470 errors / 24% coverage ] ****** [472 done /437 queued / 16 running / 471 errors / 24% coverage ] ****** [472 done /437 queued / 16 running / 471 errors / 24% coverage ] ****** [473 done /437 queued / 16 running / 472 errors / 24% coverage ] ****** [473 done /437 queued / 16 running / 472 errors / 24% coverage ] ****** [474 done /436 queued / 16 running / 473 errors / 24% coverage ] ****** [474 done /436 queued / 16 running / 473 errors / 24% coverage ] ****** [475 done /440 queued / 16 running / 474 errors / 24% coverage ] ****** [475 done /440 queued / 16 running / 474 errors / 24% coverage ] ****** [476 done /440 queued / 16 running / 475 errors / 24% coverage ] ****** [476 done /440 queued / 16 running / 475 errors / 24% coverage ] ****** [477 done /440 queued / 16 running / 476 errors / 24% coverage ] ****** [477 done /440 queued / 16 running / 476 errors / 24% coverage ] ****** [478 done /442 queued / 16 running / 477 errors / 24% coverage ] ****** [478 done /442 queued / 16 running / 477 errors / 24% coverage ] ****** [479 done /444 queued / 16 running / 478 errors / 24% coverage ] ****** [479 done /444 queued / 16 running / 478 errors / 24% coverage ] ****** [480 done /448 queued / 16 running / 479 errors / 24% coverage ] ****** [480 done /448 queued / 16 running / 479 errors / 24% coverage ] ****** [481 done /449 queued / 16 running / 480 errors / 24% coverage ] ****** [481 done /449 queued / 16 running / 480 errors / 24% coverage ] ****** [482 done /451 queued / 16 running / 481 errors / 24% coverage ] ****** [482 done /451 queued / 16 running / 481 errors / 24% coverage ] ****** [483 done /452 queued / 16 running / 482 errors / 24% coverage ] ****** [483 done /452 queued / 16 running / 482 errors / 24% coverage ] ****** [484 done /453 queued / 16 running / 483 errors / 24% coverage ] ****** [484 done /453 queued / 16 running / 483 errors / 24% coverage ] ****** [485 done /454 queued / 16 running / 484 errors / 24% coverage ] ****** [485 done /454 queued / 16 running / 484 errors / 24% coverage ] ****** [486 done /456 queued / 16 running / 485 errors / 24% coverage ] ****** [486 done /456 queued / 16 running / 485 errors / 24% coverage ] ****** [487 done /457 queued / 16 running / 486 errors / 24% coverage ] ****** [487 done /457 queued / 16 running / 486 errors / 24% coverage ] ****** [488 done /460 queued / 16 running / 487 errors / 24% coverage ] ****** [488 done /460 queued / 16 running / 487 errors / 24% coverage ] ****** [489 done /460 queued / 16 running / 488 errors / 24% coverage ] ****** [489 done /460 queued / 16 running / 488 errors / 24% coverage ] ****** [490 done /461 queued / 16 running / 489 errors / 24% coverage ] ****** [490 done /461 queued / 16 running / 489 errors / 24% coverage ] ****** [491 done /462 queued / 16 running / 490 errors / 24% coverage ] ****** [491 done /462 queued / 16 running / 490 errors / 24% coverage ] ****** [492 done /464 queued / 16 running / 491 errors / 24% coverage ] ****** [492 done /464 queued / 16 running / 491 errors / 24% coverage ] ****** [493 done /464 queued / 16 running / 492 errors / 24% coverage ] ****** [493 done /464 queued / 16 running / 492 errors / 24% coverage ] ****** [494 done /464 queued / 16 running / 493 errors / 24% coverage ] ****** [494 done /464 queued / 16 running / 493 errors / 24% coverage ] ****** [495 done /464 queued / 16 running / 494 errors / 24% coverage ] ****** [495 done /464 queued / 16 running / 494 errors / 24% coverage ] ****** [496 done /464 queued / 16 running / 495 errors / 24% coverage ] ****** [496 done /464 queued / 16 running / 495 errors / 24% coverage ] ****** [497 done /464 queued / 16 running / 496 errors / 24% coverage ] ****** [497 done /464 queued / 16 running / 496 errors / 24% coverage ] ****** [498 done /465 queued / 16 running / 497 errors / 24% coverage ] ****** [498 done /465 queued / 16 running / 497 errors / 24% coverage ] ****** [499 done /465 queued / 16 running / 498 errors / 24% coverage ] ****** [499 done /465 queued / 16 running / 498 errors / 24% coverage ] ****** [500 done /466 queued / 16 running / 499 errors / 24% coverage ] ****** [500 done /466 queued / 16 running / 499 errors / 24% coverage ] ****** [501 done /468 queued / 16 running / 500 errors / 24% coverage ] ****** [501 done /468 queued / 16 running / 500 errors / 24% coverage ] ****** [502 done /467 queued / 16 running / 501 errors / 24% coverage ] ****** [502 done /467 queued / 16 running / 501 errors / 24% coverage ] ****** [503 done /468 queued / 16 running / 502 errors / 24% coverage ] ****** [503 done /468 queued / 16 running / 502 errors / 24% coverage ] ****** [504 done /467 queued / 16 running / 503 errors / 24% coverage ] ****** [504 done /467 queued / 16 running / 503 errors / 24% coverage ] ****** [505 done /470 queued / 16 running / 504 errors / 24% coverage ] ****** [505 done /470 queued / 16 running / 504 errors / 24% coverage ] ****** [506 done /474 queued / 16 running / 505 errors / 24% coverage ] ****** [506 done /474 queued / 16 running / 505 errors / 24% coverage ] ****** [507 done /473 queued / 16 running / 506 errors / 24% coverage ] ****** [507 done /473 queued / 16 running / 506 errors / 24% coverage ] ****** [508 done /473 queued / 16 running / 507 errors / 24% coverage ] ****** [508 done /473 queued / 16 running / 507 errors / 24% coverage ] ****** [509 done /474 queued / 16 running / 508 errors / 24% coverage ] ****** [509 done /474 queued / 16 running / 508 errors / 24% coverage ] ****** [510 done /473 queued / 16 running / 509 errors / 24% coverage ] ****** [510 done /473 queued / 16 running / 509 errors / 24% coverage ] ****** [511 done /474 queued / 16 running / 510 errors / 24% coverage ] ****** [511 done /474 queued / 16 running / 510 errors / 24% coverage ] ****** [512 done /473 queued / 16 running / 511 errors / 24% coverage ] ****** [512 done /473 queued / 16 running / 511 errors / 24% coverage ] ****** [513 done /477 queued / 16 running / 512 errors / 24% coverage ] ****** [513 done /477 queued / 16 running / 512 errors / 24% coverage ] ****** [514 done /476 queued / 16 running / 513 errors / 24% coverage ] ****** [514 done /476 queued / 16 running / 513 errors / 24% coverage ] ****** [515 done /475 queued / 16 running / 514 errors / 24% coverage ] ****** [515 done /475 queued / 16 running / 514 errors / 24% coverage ] ****** [516 done /477 queued / 16 running / 515 errors / 24% coverage ] ****** [516 done /477 queued / 16 running / 515 errors / 24% coverage ] ****** [517 done /479 queued / 16 running / 516 errors / 24% coverage ] ****** [517 done /479 queued / 16 running / 516 errors / 24% coverage ] ****** [518 done /478 queued / 16 running / 517 errors / 24% coverage ] ****** [518 done /478 queued / 16 running / 517 errors / 24% coverage ] ****** [519 done /477 queued / 16 running / 518 errors / 24% coverage ] ****** [519 done /477 queued / 16 running / 518 errors / 24% coverage ] ****** [520 done /476 queued / 16 running / 519 errors / 24% coverage ] ****** [520 done /476 queued / 16 running / 519 errors / 24% coverage ] ****** [521 done /479 queued / 16 running / 520 errors / 24% coverage ] ****** [521 done /479 queued / 16 running / 520 errors / 24% coverage ] ****** [522 done /482 queued / 16 running / 521 errors / 24% coverage ] ****** [522 done /482 queued / 16 running / 521 errors / 24% coverage ] ****** [523 done /482 queued / 16 running / 522 errors / 24% coverage ] ****** [523 done /482 queued / 16 running / 522 errors / 24% coverage ] ****** [524 done /481 queued / 16 running / 523 errors / 24% coverage ] ****** [524 done /481 queued / 16 running / 523 errors / 24% coverage ] ****** [525 done /480 queued / 16 running / 524 errors / 24% coverage ] ****** [525 done /480 queued / 16 running / 524 errors / 24% coverage ] ****** [526 done /480 queued / 16 running / 525 errors / 24% coverage ] ****** [526 done /480 queued / 16 running / 525 errors / 24% coverage ] ****** [527 done /481 queued / 16 running / 526 errors / 24% coverage ] ****** [527 done /481 queued / 16 running / 526 errors / 24% coverage ] ****** [528 done /480 queued / 16 running / 527 errors / 24% coverage ] ****** [528 done /480 queued / 16 running / 527 errors / 24% coverage ] ****** [529 done /482 queued / 16 running / 528 errors / 24% coverage ] ****** [529 done /482 queued / 16 running / 528 errors / 24% coverage ] ****** [530 done /481 queued / 16 running / 529 errors / 24% coverage ] ****** [530 done /481 queued / 16 running / 529 errors / 24% coverage ] ****** [531 done /487 queued / 16 running / 530 errors / 24% coverage ] ****** [531 done /487 queued / 16 running / 530 errors / 24% coverage ] ****** [532 done /489 queued / 16 running / 531 errors / 24% coverage ] ****** [532 done /489 queued / 16 running / 531 errors / 24% coverage ] ****** [533 done /493 queued / 16 running / 532 errors / 24% coverage ] ****** [533 done /493 queued / 16 running / 532 errors / 24% coverage ] ****** [534 done /496 queued / 16 running / 533 errors / 24% coverage ] ****** [534 done /496 queued / 16 running / 533 errors / 24% coverage ] ****** [535 done /495 queued / 16 running / 534 errors / 24% coverage ] ****** [535 done /495 queued / 16 running / 534 errors / 24% coverage ] ****** [536 done /497 queued / 16 running / 535 errors / 24% coverage ] ****** [536 done /497 queued / 16 running / 535 errors / 24% coverage ] ****** [537 done /500 queued / 16 running / 536 errors / 24% coverage ] ****** [537 done /500 queued / 16 running / 536 errors / 24% coverage ] ****** [538 done /503 queued / 16 running / 537 errors / 24% coverage ] ****** [538 done /503 queued / 16 running / 537 errors / 24% coverage ] ****** [539 done /505 queued / 16 running / 538 errors / 24% coverage ] ****** [539 done /505 queued / 16 running / 538 errors / 24% coverage ] ****** [540 done /507 queued / 16 running / 539 errors / 24% coverage ] ****** [540 done /507 queued / 16 running / 539 errors / 24% coverage ] ****** [541 done /506 queued / 16 running / 540 errors / 24% coverage ] ****** [541 done /506 queued / 16 running / 540 errors / 24% coverage ] ****** [542 done /506 queued / 16 running / 541 errors / 24% coverage ] ****** [542 done /506 queued / 16 running / 541 errors / 24% coverage ] ****** [543 done /505 queued / 16 running / 542 errors / 24% coverage ] ****** [543 done /505 queued / 16 running / 542 errors / 24% coverage ] ****** [544 done /506 queued / 16 running / 543 errors / 24% coverage ] ****** [544 done /506 queued / 16 running / 543 errors / 24% coverage ] ****** [545 done /505 queued / 16 running / 544 errors / 24% coverage ] ****** [545 done /505 queued / 16 running / 544 errors / 24% coverage ] ****** [546 done /508 queued / 16 running / 545 errors / 24% coverage ] ****** [546 done /508 queued / 16 running / 545 errors / 24% coverage ] ****** [547 done /514 queued / 16 running / 546 errors / 24% coverage ] ****** [547 done /514 queued / 16 running / 546 errors / 24% coverage ] ****** [548 done /518 queued / 16 running / 547 errors / 24% coverage ] ****** [548 done /518 queued / 16 running / 547 errors / 24% coverage ] ****** [549 done /521 queued / 16 running / 548 errors / 24% coverage ] ****** [549 done /521 queued / 16 running / 548 errors / 24% coverage ] ****** [550 done /523 queued / 16 running / 549 errors / 24% coverage ] ****** [550 done /523 queued / 16 running / 549 errors / 24% coverage ] ****** [551 done /524 queued / 16 running / 550 errors / 24% coverage ] ****** [551 done /524 queued / 16 running / 550 errors / 24% coverage ] ****** [552 done /527 queued / 16 running / 551 errors / 24% coverage ] ****** [552 done /527 queued / 16 running / 551 errors / 24% coverage ] ****** [553 done /528 queued / 16 running / 552 errors / 24% coverage ] ****** [553 done /528 queued / 16 running / 552 errors / 24% coverage ] ****** [554 done /528 queued / 16 running / 553 errors / 24% coverage ] ****** [554 done /528 queued / 16 running / 553 errors / 24% coverage ] ****** [555 done /527 queued / 16 running / 554 errors / 24% coverage ] ****** [555 done /527 queued / 16 running / 554 errors / 24% coverage ] ****** [556 done /527 queued / 16 running / 555 errors / 24% coverage ] ****** [556 done /527 queued / 16 running / 555 errors / 24% coverage ] ****** [557 done /527 queued / 16 running / 556 errors / 24% coverage ] ****** [557 done /527 queued / 16 running / 556 errors / 24% coverage ] ****** [558 done /526 queued / 16 running / 557 errors / 24% coverage ] ****** [558 done /526 queued / 16 running / 557 errors / 24% coverage ] ****** [559 done /526 queued / 16 running / 558 errors / 24% coverage ] ****** [559 done /526 queued / 16 running / 558 errors / 24% coverage ] ****** [560 done /527 queued / 16 running / 559 errors / 24% coverage ] ****** [560 done /527 queued / 16 running / 559 errors / 24% coverage ] ****** [561 done /532 queued / 16 running / 560 errors / 24% coverage ] ****** [561 done /532 queued / 16 running / 560 errors / 24% coverage ] ****** [562 done /535 queued / 16 running / 561 errors / 24% coverage ] ****** [562 done /535 queued / 16 running / 561 errors / 24% coverage ] ****** [563 done /537 queued / 16 running / 562 errors / 24% coverage ] ****** [563 done /537 queued / 16 running / 562 errors / 24% coverage ] ****** [564 done /540 queued / 16 running / 563 errors / 24% coverage ] ****** [564 done /540 queued / 16 running / 563 errors / 24% coverage ] ****** [565 done /544 queued / 16 running / 564 errors / 24% coverage ] ****** [565 done /544 queued / 16 running / 564 errors / 24% coverage ] ****** [566 done /546 queued / 16 running / 565 errors / 24% coverage ] ****** [566 done /546 queued / 16 running / 565 errors / 24% coverage ] ****** [567 done /545 queued / 16 running / 566 errors / 24% coverage ] ****** [567 done /545 queued / 16 running / 566 errors / 24% coverage ] ****** [568 done /549 queued / 16 running / 567 errors / 24% coverage ] ****** [568 done /549 queued / 16 running / 567 errors / 24% coverage ] ****** [569 done /553 queued / 16 running / 568 errors / 24% coverage ] ****** [569 done /553 queued / 16 running / 568 errors / 24% coverage ] ****** [570 done /557 queued / 16 running / 569 errors / 24% coverage ] ****** [570 done /557 queued / 16 running / 569 errors / 24% coverage ] ****** [571 done /560 queued / 16 running / 570 errors / 24% coverage ] ****** [571 done /560 queued / 16 running / 570 errors / 24% coverage ] ****** [572 done /561 queued / 16 running / 571 errors / 24% coverage ] ****** [572 done /561 queued / 16 running / 571 errors / 24% coverage ] ****** [573 done /561 queued / 16 running / 572 errors / 24% coverage ] ****** [573 done /561 queued / 16 running / 572 errors / 24% coverage ] ****** [574 done /565 queued / 16 running / 573 errors / 24% coverage ] ****** [574 done /565 queued / 16 running / 573 errors / 24% coverage ] ****** [575 done /564 queued / 16 running / 574 errors / 24% coverage ] ****** [575 done /564 queued / 16 running / 574 errors / 24% coverage ] ****** [576 done /565 queued / 16 running / 575 errors / 24% coverage ] ****** [576 done /565 queued / 16 running / 575 errors / 24% coverage ] ****** [577 done /566 queued / 16 running / 576 errors / 24% coverage ] ****** [577 done /566 queued / 16 running / 576 errors / 24% coverage ] ****** [578 done /567 queued / 16 running / 577 errors / 24% coverage ] ****** [578 done /567 queued / 16 running / 577 errors / 24% coverage ] ****** [579 done /569 queued / 16 running / 578 errors / 24% coverage ] ****** [579 done /569 queued / 16 running / 578 errors / 24% coverage ] ****** [580 done /571 queued / 16 running / 579 errors / 24% coverage ] ****** [580 done /571 queued / 16 running / 579 errors / 24% coverage ] ****** [581 done /571 queued / 16 running / 580 errors / 24% coverage ] ****** [581 done /571 queued / 16 running / 580 errors / 24% coverage ] ****** [582 done /572 queued / 16 running / 581 errors / 24% coverage ] ****** [582 done /572 queued / 16 running / 581 errors / 24% coverage ] ****** [583 done /573 queued / 16 running / 582 errors / 24% coverage ] ****** [583 done /573 queued / 16 running / 582 errors / 24% coverage ] ****** [584 done /574 queued / 16 running / 583 errors / 24% coverage ] ****** [584 done /574 queued / 16 running / 583 errors / 24% coverage ] ****** [585 done /578 queued / 16 running / 584 errors / 24% coverage ] ****** [585 done /578 queued / 16 running / 584 errors / 24% coverage ] ****** [586 done /578 queued / 16 running / 585 errors / 24% coverage ] ****** [586 done /578 queued / 16 running / 585 errors / 24% coverage ] ****** [587 done /580 queued / 16 running / 586 errors / 24% coverage ] ****** [587 done /580 queued / 16 running / 586 errors / 24% coverage ] ****** [588 done /580 queued / 16 running / 587 errors / 24% coverage ] ****** [588 done /580 queued / 16 running / 587 errors / 24% coverage ] ****** [589 done /580 queued / 16 running / 588 errors / 24% coverage ] ****** [589 done /580 queued / 16 running / 588 errors / 24% coverage ] ****** [590 done /581 queued / 16 running / 589 errors / 24% coverage ] ****** [590 done /581 queued / 16 running / 589 errors / 24% coverage ] ****** [591 done /581 queued / 16 running / 590 errors / 24% coverage ] ****** [591 done /581 queued / 16 running / 590 errors / 24% coverage ] ****** [592 done /581 queued / 16 running / 591 errors / 24% coverage ] ****** [592 done /581 queued / 16 running / 591 errors / 24% coverage ] ****** [593 done /582 queued / 16 running / 592 errors / 24% coverage ] ****** [593 done /582 queued / 16 running / 592 errors / 24% coverage ] ****** [594 done /584 queued / 16 running / 593 errors / 24% coverage ] ****** [594 done /584 queued / 16 running / 593 errors / 24% coverage ] ****** [595 done /585 queued / 16 running / 594 errors / 24% coverage ] ****** [595 done /585 queued / 16 running / 594 errors / 24% coverage ] ****** [596 done /585 queued / 16 running / 595 errors / 24% coverage ] ****** [596 done /585 queued / 16 running / 595 errors / 24% coverage ] ****** [597 done /586 queued / 16 running / 596 errors / 24% coverage ] ****** [597 done /586 queued / 16 running / 596 errors / 24% coverage ] ****** [598 done /588 queued / 16 running / 597 errors / 24% coverage ] ****** [598 done /588 queued / 16 running / 597 errors / 24% coverage ] ****** [599 done /589 queued / 16 running / 598 errors / 24% coverage ] ****** [599 done /589 queued / 16 running / 598 errors / 24% coverage ] ****** [600 done /591 queued / 16 running / 599 errors / 24% coverage ] ****** [600 done /591 queued / 16 running / 599 errors / 24% coverage ] ****** [601 done /590 queued / 16 running / 600 errors / 24% coverage ] ****** [601 done /590 queued / 16 running / 600 errors / 24% coverage ] ****** [602 done /592 queued / 16 running / 601 errors / 24% coverage ] ****** [602 done /592 queued / 16 running / 601 errors / 24% coverage ] ****** [603 done /594 queued / 16 running / 602 errors / 24% coverage ] ****** [603 done /594 queued / 16 running / 602 errors / 24% coverage ] ****** [604 done /593 queued / 16 running / 603 errors / 24% coverage ] ****** [604 done /593 queued / 16 running / 603 errors / 24% coverage ] ****** [605 done /595 queued / 16 running / 604 errors / 24% coverage ] ****** [605 done /595 queued / 16 running / 604 errors / 24% coverage ] ****** [606 done /596 queued / 16 running / 605 errors / 24% coverage ] ****** [606 done /596 queued / 16 running / 605 errors / 24% coverage ] ****** [607 done /598 queued / 16 running / 606 errors / 24% coverage ] ****** [607 done /598 queued / 16 running / 606 errors / 24% coverage ] ****** [608 done /597 queued / 16 running / 607 errors / 24% coverage ] ****** [608 done /597 queued / 16 running / 607 errors / 24% coverage ] ****** [609 done /596 queued / 16 running / 608 errors / 24% coverage ] ****** [609 done /596 queued / 16 running / 608 errors / 24% coverage ] ****** [610 done /595 queued / 16 running / 609 errors / 24% coverage ] ****** [610 done /595 queued / 16 running / 609 errors / 24% coverage ] ****** [611 done /596 queued / 16 running / 610 errors / 24% coverage ] ****** [611 done /596 queued / 16 running / 610 errors / 24% coverage ] ****** [612 done /596 queued / 16 running / 611 errors / 24% coverage ] ****** [612 done /596 queued / 16 running / 611 errors / 24% coverage ] ****** [613 done /597 queued / 16 running / 612 errors / 24% coverage ] ****** [613 done /597 queued / 16 running / 612 errors / 24% coverage ] ****** [614 done /596 queued / 16 running / 613 errors / 24% coverage ] ****** [614 done /596 queued / 16 running / 613 errors / 24% coverage ] ****** [615 done /597 queued / 16 running / 614 errors / 24% coverage ] ****** [615 done /597 queued / 16 running / 614 errors / 24% coverage ] ****** [616 done /596 queued / 16 running / 615 errors / 24% coverage ] ****** [616 done /596 queued / 16 running / 615 errors / 24% coverage ] ****** [617 done /597 queued / 16 running / 616 errors / 24% coverage ] ****** [617 done /597 queued / 16 running / 616 errors / 24% coverage ] ****** [618 done /599 queued / 16 running / 617 errors / 24% coverage ] ****** [618 done /599 queued / 16 running / 617 errors / 24% coverage ] ****** [619 done /598 queued / 16 running / 618 errors / 24% coverage ] ****** [619 done /598 queued / 16 running / 618 errors / 24% coverage ] ****** [620 done /602 queued / 16 running / 619 errors / 24% coverage ] ****** [620 done /602 queued / 16 running / 619 errors / 24% coverage ] ****** [621 done /601 queued / 16 running / 620 errors / 24% coverage ] ****** [621 done /601 queued / 16 running / 620 errors / 24% coverage ] ****** [622 done /606 queued / 16 running / 621 errors / 24% coverage ] ****** [622 done /606 queued / 16 running / 621 errors / 24% coverage ] ****** [623 done /605 queued / 16 running / 622 errors / 24% coverage ] ****** [623 done /605 queued / 16 running / 622 errors / 24% coverage ] ****** [624 done /607 queued / 16 running / 623 errors / 24% coverage ] ****** [624 done /607 queued / 16 running / 623 errors / 24% coverage ] ****** [625 done /606 queued / 16 running / 624 errors / 24% coverage ] ****** [625 done /606 queued / 16 running / 624 errors / 24% coverage ] ****** [626 done /609 queued / 16 running / 625 errors / 24% coverage ] ****** [626 done /609 queued / 16 running / 625 errors / 24% coverage ] ****** [627 done /609 queued / 16 running / 626 errors / 24% coverage ] ****** [627 done /609 queued / 16 running / 626 errors / 24% coverage ] ****** [628 done /610 queued / 16 running / 627 errors / 24% coverage ] ****** [628 done /610 queued / 16 running / 627 errors / 24% coverage ] ****** [629 done /612 queued / 16 running / 628 errors / 24% coverage ] ****** [629 done /612 queued / 16 running / 628 errors / 24% coverage ] ****** [630 done /613 queued / 16 running / 629 errors / 24% coverage ] ****** [630 done /613 queued / 16 running / 629 errors / 24% coverage ] ****** [631 done /616 queued / 16 running / 630 errors / 24% coverage ] ****** [631 done /616 queued / 16 running / 630 errors / 24% coverage ] ****** [632 done /619 queued / 16 running / 631 errors / 24% coverage ] ****** [632 done /619 queued / 16 running / 631 errors / 24% coverage ] ****** [633 done /618 queued / 16 running / 632 errors / 24% coverage ] ****** [633 done /618 queued / 16 running / 632 errors / 24% coverage ] ****** [634 done /617 queued / 16 running / 633 errors / 24% coverage ] ****** [634 done /617 queued / 16 running / 633 errors / 24% coverage ] ****** [635 done /616 queued / 16 running / 634 errors / 24% coverage ] ****** [635 done /616 queued / 16 running / 634 errors / 24% coverage ] ****** [636 done /618 queued / 16 running / 635 errors / 24% coverage ] ****** [636 done /618 queued / 16 running / 635 errors / 24% coverage ] ****** [637 done /620 queued / 16 running / 636 errors / 24% coverage ] ****** [637 done /620 queued / 16 running / 636 errors / 24% coverage ] ****** [638 done /621 queued / 16 running / 637 errors / 24% coverage ] ****** [638 done /621 queued / 16 running / 637 errors / 24% coverage ] ****** [639 done /624 queued / 16 running / 638 errors / 24% coverage ] ****** [639 done /624 queued / 16 running / 638 errors / 24% coverage ] ****** [640 done /623 queued / 16 running / 639 errors / 24% coverage ] ****** [640 done /623 queued / 16 running / 639 errors / 24% coverage ] ****** [641 done /622 queued / 16 running / 640 errors / 24% coverage ] ****** [641 done /622 queued / 16 running / 640 errors / 24% coverage ] ****** [642 done /621 queued / 16 running / 641 errors / 24% coverage ] ****** [642 done /621 queued / 16 running / 641 errors / 24% coverage ] ****** [643 done /624 queued / 16 running / 642 errors / 24% coverage ] ****** [643 done /624 queued / 16 running / 642 errors / 24% coverage ] ****** [644 done /625 queued / 16 running / 643 errors / 24% coverage ] ****** [644 done /625 queued / 16 running / 643 errors / 24% coverage ] ****** [645 done /625 queued / 16 running / 644 errors / 24% coverage ] ****** [645 done /625 queued / 16 running / 644 errors / 24% coverage ] ****** [646 done /624 queued / 16 running / 645 errors / 24% coverage ] ****** [646 done /624 queued / 16 running / 645 errors / 24% coverage ] ****** [647 done /625 queued / 16 running / 646 errors / 24% coverage ] ****** [647 done /625 queued / 16 running / 646 errors / 24% coverage ] ****** [648 done /624 queued / 16 running / 647 errors / 24% coverage ] ****** [648 done /624 queued / 16 running / 647 errors / 24% coverage ] ****** [649 done /623 queued / 16 running / 648 errors / 24% coverage ] ****** [649 done /623 queued / 16 running / 648 errors / 24% coverage ] ****** [650 done /623 queued / 16 running / 649 errors / 24% coverage ] ****** [650 done /623 queued / 16 running / 649 errors / 24% coverage ] ****** [651 done /622 queued / 16 running / 650 errors / 24% coverage ] ****** [651 done /622 queued / 16 running / 650 errors / 24% coverage ] ****** [652 done /624 queued / 16 running / 651 errors / 24% coverage ] ****** [652 done /624 queued / 16 running / 651 errors / 24% coverage ] ****** [653 done /626 queued / 16 running / 652 errors / 24% coverage ] ****** [653 done /626 queued / 16 running / 652 errors / 24% coverage ] ****** [654 done /627 queued / 16 running / 653 errors / 24% coverage ] ****** [654 done /627 queued / 16 running / 653 errors / 24% coverage ] ****** [655 done /630 queued / 16 running / 654 errors / 24% coverage ] ****** [655 done /630 queued / 16 running / 654 errors / 24% coverage ] ****** [656 done /632 queued / 16 running / 655 errors / 24% coverage ] ****** [656 done /632 queued / 16 running / 655 errors / 24% coverage ] ****** [657 done /636 queued / 16 running / 656 errors / 24% coverage ] ****** [657 done /636 queued / 16 running / 656 errors / 24% coverage ] ****** [658 done /641 queued / 16 running / 657 errors / 24% coverage ] ****** [658 done /641 queued / 16 running / 657 errors / 24% coverage ] ****** [659 done /640 queued / 16 running / 658 errors / 24% coverage ] ****** [659 done /640 queued / 16 running / 658 errors / 24% coverage ] ****** [660 done /642 queued / 16 running / 659 errors / 24% coverage ] ****** [660 done /642 queued / 16 running / 659 errors / 24% coverage ] ****** [661 done /643 queued / 16 running / 660 errors / 24% coverage ] ****** [661 done /643 queued / 16 running / 660 errors / 24% coverage ] ****** [662 done /644 queued / 16 running / 661 errors / 24% coverage ] ****** [662 done /644 queued / 16 running / 661 errors / 24% coverage ] ****** [663 done /650 queued / 16 running / 662 errors / 24% coverage ] ****** [663 done /650 queued / 16 running / 662 errors / 24% coverage ] ****** [664 done /653 queued / 16 running / 663 errors / 24% coverage ] ****** [664 done /653 queued / 16 running / 663 errors / 24% coverage ] ****** [665 done /656 queued / 16 running / 664 errors / 24% coverage ] ****** [665 done /656 queued / 16 running / 664 errors / 24% coverage ] ****** [666 done /659 queued / 16 running / 665 errors / 24% coverage ] ****** [666 done /659 queued / 16 running / 665 errors / 24% coverage ] ****** [667 done /664 queued / 16 running / 666 errors / 24% coverage ] ****** [667 done /664 queued / 16 running / 666 errors / 24% coverage ] ****** [668 done /663 queued / 16 running / 667 errors / 24% coverage ] ****** [668 done /663 queued / 16 running / 667 errors / 24% coverage ] ****** [669 done /663 queued / 16 running / 668 errors / 24% coverage ] ****** [669 done /663 queued / 16 running / 668 errors / 24% coverage ] ****** [670 done /663 queued / 16 running / 669 errors / 24% coverage ] ****** [670 done /663 queued / 16 running / 669 errors / 24% coverage ] ****** [671 done /662 queued / 16 running / 670 errors / 24% coverage ] ****** [671 done /662 queued / 16 running / 670 errors / 24% coverage ] ****** [672 done /665 queued / 16 running / 671 errors / 24% coverage ] ****** [672 done /665 queued / 16 running / 671 errors / 24% coverage ] ****** [673 done /665 queued / 16 running / 672 errors / 24% coverage ] ****** [673 done /665 queued / 16 running / 672 errors / 24% coverage ] ****** [674 done /666 queued / 16 running / 673 errors / 24% coverage ] ****** [674 done /666 queued / 16 running / 673 errors / 24% coverage ] ****** [675 done /666 queued / 16 running / 674 errors / 24% coverage ] ****** [675 done /666 queued / 16 running / 674 errors / 24% coverage ] ****** [676 done /667 queued / 16 running / 675 errors / 24% coverage ] ****** [676 done /667 queued / 16 running / 675 errors / 24% coverage ] ****** [677 done /669 queued / 16 running / 676 errors / 24% coverage ] ****** [677 done /669 queued / 16 running / 676 errors / 24% coverage ] ****** [678 done /669 queued / 16 running / 677 errors / 24% coverage ] ****** [678 done /669 queued / 16 running / 677 errors / 24% coverage ] ****** [679 done /670 queued / 16 running / 678 errors / 24% coverage ] ****** [679 done /670 queued / 16 running / 678 errors / 24% coverage ] ****** [680 done /671 queued / 16 running / 679 errors / 24% coverage ] ****** [680 done /671 queued / 16 running / 679 errors / 24% coverage ] ****** [681 done /672 queued / 16 running / 680 errors / 24% coverage ] ****** [681 done /672 queued / 16 running / 680 errors / 24% coverage ] ****** [682 done /672 queued / 16 running / 681 errors / 24% coverage ] ****** [682 done /672 queued / 16 running / 681 errors / 24% coverage ] ****** [683 done /673 queued / 16 running / 682 errors / 24% coverage ] ****** [683 done /673 queued / 16 running / 682 errors / 24% coverage ] ****** [684 done /674 queued / 16 running / 683 errors / 24% coverage ] ****** [684 done /674 queued / 16 running / 683 errors / 24% coverage ] ****** [685 done /674 queued / 16 running / 684 errors / 24% coverage ] ****** [685 done /674 queued / 16 running / 684 errors / 24% coverage ] ****** [686 done /675 queued / 16 running / 685 errors / 24% coverage ] ****** [686 done /675 queued / 16 running / 685 errors / 24% coverage ] ****** [687 done /679 queued / 16 running / 686 errors / 24% coverage ] ****** [687 done /679 queued / 16 running / 686 errors / 24% coverage ] ****** [688 done /678 queued / 16 running / 687 errors / 24% coverage ] ****** [688 done /678 queued / 16 running / 687 errors / 24% coverage ] ****** [689 done /678 queued / 16 running / 688 errors / 24% coverage ] ****** [689 done /678 queued / 16 running / 688 errors / 24% coverage ] ****** [690 done /680 queued / 16 running / 689 errors / 24% coverage ] ****** [690 done /680 queued / 16 running / 689 errors / 24% coverage ] ****** [691 done /680 queued / 16 running / 690 errors / 24% coverage ] ****** [691 done /680 queued / 16 running / 690 errors / 24% coverage ] ****** [692 done /681 queued / 16 running / 691 errors / 24% coverage ] ****** [692 done /681 queued / 16 running / 691 errors / 24% coverage ] ****** [693 done /683 queued / 16 running / 692 errors / 24% coverage ] ****** [693 done /683 queued / 16 running / 692 errors / 24% coverage ] ****** [694 done /684 queued / 16 running / 693 errors / 24% coverage ] ****** [694 done /684 queued / 16 running / 693 errors / 24% coverage ] ****** [695 done /684 queued / 16 running / 694 errors / 24% coverage ] ****** [695 done /684 queued / 16 running / 694 errors / 24% coverage ] ****** [696 done /686 queued / 16 running / 695 errors / 24% coverage ] ****** [696 done /686 queued / 16 running / 695 errors / 24% coverage ] ****** [697 done /686 queued / 16 running / 696 errors / 24% coverage ] ****** [697 done /686 queued / 16 running / 696 errors / 24% coverage ] ****** [698 done /690 queued / 16 running / 697 errors / 24% coverage ] ****** [698 done /690 queued / 16 running / 697 errors / 24% coverage ] ****** [699 done /693 queued / 16 running / 698 errors / 24% coverage ] ****** [699 done /693 queued / 16 running / 698 errors / 24% coverage ] ****** [700 done /692 queued / 16 running / 699 errors / 24% coverage ] ****** [700 done /692 queued / 16 running / 699 errors / 24% coverage ] ****** [701 done /693 queued / 16 running / 700 errors / 24% coverage ] ****** [701 done /693 queued / 16 running / 700 errors / 24% coverage ] ****** [702 done /693 queued / 16 running / 701 errors / 24% coverage ] ****** [702 done /693 queued / 16 running / 701 errors / 24% coverage ] ****** [703 done /694 queued / 16 running / 702 errors / 24% coverage ] ****** [703 done /694 queued / 16 running / 702 errors / 24% coverage ] ****** [704 done /695 queued / 16 running / 703 errors / 24% coverage ] ****** [704 done /695 queued / 16 running / 703 errors / 24% coverage ] ****** [705 done /696 queued / 16 running / 704 errors / 24% coverage ] ****** [705 done /696 queued / 16 running / 704 errors / 24% coverage ] ****** [706 done /695 queued / 16 running / 705 errors / 24% coverage ] ****** [706 done /695 queued / 16 running / 705 errors / 24% coverage ] ****** [707 done /695 queued / 16 running / 706 errors / 24% coverage ] ****** [707 done /695 queued / 16 running / 706 errors / 24% coverage ] ****** [708 done /697 queued / 16 running / 707 errors / 24% coverage ] ****** [708 done /697 queued / 16 running / 707 errors / 24% coverage ] ****** [709 done /700 queued / 16 running / 708 errors / 24% coverage ] ****** [709 done /700 queued / 16 running / 708 errors / 24% coverage ] ****** [710 done /700 queued / 16 running / 709 errors / 24% coverage ] ****** [710 done /700 queued / 16 running / 709 errors / 24% coverage ] ****** [711 done /699 queued / 16 running / 710 errors / 24% coverage ] ****** [711 done /699 queued / 16 running / 710 errors / 24% coverage ] ****** [712 done /701 queued / 16 running / 711 errors / 24% coverage ] ****** [712 done /701 queued / 16 running / 711 errors / 24% coverage ] ****** [713 done /704 queued / 16 running / 712 errors / 24% coverage ] ****** [713 done /704 queued / 16 running / 712 errors / 24% coverage ] ****** [714 done /703 queued / 16 running / 713 errors / 24% coverage ] ****** [714 done /703 queued / 16 running / 713 errors / 24% coverage ] ****** [715 done /704 queued / 16 running / 714 errors / 24% coverage ] ****** [715 done /704 queued / 16 running / 714 errors / 24% coverage ] ****** [716 done /703 queued / 16 running / 715 errors / 24% coverage ] ****** [716 done /703 queued / 16 running / 715 errors / 24% coverage ] ****** [717 done /705 queued / 16 running / 716 errors / 24% coverage ] ****** [717 done /705 queued / 16 running / 716 errors / 24% coverage ] ****** [718 done /707 queued / 16 running / 717 errors / 24% coverage ] ****** [718 done /707 queued / 16 running / 717 errors / 24% coverage ] ****** [719 done /706 queued / 16 running / 718 errors / 24% coverage ] ****** [719 done /706 queued / 16 running / 718 errors / 24% coverage ] ****** [720 done /708 queued / 16 running / 719 errors / 24% coverage ] ****** [720 done /708 queued / 16 running / 719 errors / 24% coverage ] ****** [721 done /711 queued / 16 running / 720 errors / 24% coverage ] ****** [721 done /711 queued / 16 running / 720 errors / 24% coverage ] ****** [722 done /716 queued / 16 running / 721 errors / 24% coverage ] ****** [722 done /716 queued / 16 running / 721 errors / 24% coverage ] ****** [723 done /715 queued / 16 running / 722 errors / 24% coverage ] ****** [723 done /715 queued / 16 running / 722 errors / 24% coverage ] ****** [724 done /716 queued / 16 running / 723 errors / 24% coverage ] ****** [724 done /716 queued / 16 running / 723 errors / 24% coverage ] ****** [725 done /716 queued / 16 running / 724 errors / 24% coverage ] ****** [725 done /716 queued / 16 running / 724 errors / 24% coverage ] ****** [726 done /716 queued / 16 running / 725 errors / 24% coverage ] ****** [726 done /716 queued / 16 running / 725 errors / 24% coverage ] ****** [727 done /717 queued / 16 running / 726 errors / 24% coverage ] ****** [727 done /717 queued / 16 running / 726 errors / 24% coverage ] ****** [728 done /716 queued / 16 running / 727 errors / 24% coverage ] ****** [728 done /716 queued / 16 running / 727 errors / 24% coverage ] ****** [729 done /715 queued / 16 running / 728 errors / 24% coverage ] ****** [729 done /715 queued / 16 running / 728 errors / 24% coverage ] ****** [730 done /719 queued / 16 running / 729 errors / 24% coverage ] ****** [730 done /719 queued / 16 running / 729 errors / 24% coverage ] ****** [731 done /723 queued / 16 running / 730 errors / 24% coverage ] ****** [731 done /723 queued / 16 running / 730 errors / 24% coverage ] ****** [732 done /722 queued / 16 running / 731 errors / 24% coverage ] ****** [732 done /722 queued / 16 running / 731 errors / 24% coverage ] ****** [733 done /724 queued / 16 running / 732 errors / 24% coverage ] ****** [733 done /724 queued / 16 running / 732 errors / 24% coverage ] ****** [734 done /724 queued / 16 running / 733 errors / 24% coverage ] ****** [734 done /724 queued / 16 running / 733 errors / 24% coverage ] ****** [735 done /728 queued / 16 running / 734 errors / 24% coverage ] ****** [735 done /728 queued / 16 running / 734 errors / 24% coverage ] ****** [736 done /731 queued / 16 running / 735 errors / 24% coverage ] ****** [736 done /731 queued / 16 running / 735 errors / 24% coverage ] ****** [737 done /733 queued / 16 running / 736 errors / 24% coverage ] ****** [737 done /733 queued / 16 running / 736 errors / 24% coverage ] ****** [738 done /738 queued / 16 running / 737 errors / 24% coverage ] ****** [738 done /738 queued / 16 running / 737 errors / 24% coverage ] ****** [739 done /739 queued / 16 running / 738 errors / 24% coverage ] ****** [739 done /739 queued / 16 running / 738 errors / 24% coverage ] ****** [740 done /740 queued / 16 running / 739 errors / 24% coverage ] ****** [740 done /740 queued / 16 running / 739 errors / 24% coverage ] ****** [741 done /739 queued / 16 running / 740 errors / 24% coverage ] ****** [741 done /739 queued / 16 running / 740 errors / 24% coverage ] ****** [742 done /742 queued / 16 running / 741 errors / 24% coverage ] ****** [742 done /742 queued / 16 running / 741 errors / 24% coverage ] ****** [743 done /746 queued / 16 running / 742 errors / 24% coverage ] ****** [743 done /746 queued / 16 running / 742 errors / 24% coverage ] ****** [744 done /749 queued / 16 running / 743 errors / 24% coverage ] ****** [744 done /749 queued / 16 running / 743 errors / 24% coverage ] ****** [745 done /751 queued / 16 running / 744 errors / 24% coverage ] ****** [745 done /751 queued / 16 running / 744 errors / 24% coverage ] ****** [746 done /752 queued / 16 running / 745 errors / 24% coverage ] ****** [746 done /752 queued / 16 running / 745 errors / 24% coverage ] ****** [747 done /753 queued / 16 running / 746 errors / 24% coverage ] ****** [747 done /753 queued / 16 running / 746 errors / 24% coverage ] ****** [748 done /753 queued / 16 running / 747 errors / 24% coverage ] ****** [748 done /753 queued / 16 running / 747 errors / 24% coverage ] ****** [749 done /753 queued / 16 running / 748 errors / 24% coverage ] ****** [749 done /753 queued / 16 running / 748 errors / 24% coverage ] ****** [750 done /754 queued / 16 running / 749 errors / 24% coverage ] ****** [750 done /754 queued / 16 running / 749 errors / 24% coverage ] ****** [751 done /754 queued / 16 running / 750 errors / 24% coverage ] ****** [751 done /754 queued / 16 running / 750 errors / 24% coverage ] ****** [752 done /754 queued / 16 running / 751 errors / 24% coverage ] ****** [752 done /754 queued / 16 running / 751 errors / 24% coverage ] ****** [753 done /754 queued / 16 running / 752 errors / 24% coverage ] ****** [753 done /754 queued / 16 running / 752 errors / 24% coverage ] ****** [754 done /758 queued / 16 running / 753 errors / 24% coverage ] ****** [754 done /758 queued / 16 running / 753 errors / 24% coverage ] ****** [755 done /759 queued / 16 running / 754 errors / 24% coverage ] ****** [755 done /759 queued / 16 running / 754 errors / 24% coverage ] ****** [756 done /760 queued / 16 running / 755 errors / 24% coverage ] ****** [756 done /760 queued / 16 running / 755 errors / 24% coverage ] ****** [757 done /760 queued / 16 running / 756 errors / 24% coverage ] ****** [757 done /760 queued / 16 running / 756 errors / 24% coverage ] ****** [758 done /760 queued / 16 running / 757 errors / 24% coverage ] ****** [758 done /760 queued / 16 running / 757 errors / 24% coverage ] ****** [759 done /759 queued / 16 running / 758 errors / 24% coverage ] ****** [759 done /759 queued / 16 running / 758 errors / 24% coverage ] ****** [760 done /762 queued / 16 running / 759 errors / 24% coverage ] ****** [760 done /762 queued / 16 running / 759 errors / 24% coverage ] ****** [761 done /765 queued / 16 running / 760 errors / 24% coverage ] ****** [761 done /765 queued / 16 running / 760 errors / 24% coverage ] ****** [762 done /765 queued / 16 running / 761 errors / 24% coverage ] ****** [762 done /765 queued / 16 running / 761 errors / 24% coverage ] ****** [763 done /764 queued / 16 running / 762 errors / 24% coverage ] ****** [763 done /764 queued / 16 running / 762 errors / 24% coverage ] ****** [764 done /766 queued / 16 running / 763 errors / 24% coverage ] ****** [764 done /766 queued / 16 running / 763 errors / 24% coverage ] ****** [765 done /765 queued / 16 running / 764 errors / 24% coverage ] ****** [765 done /765 queued / 16 running / 764 errors / 24% coverage ] ****** [766 done /764 queued / 16 running / 765 errors / 24% coverage ] ****** [766 done /764 queued / 16 running / 765 errors / 24% coverage ] ****** [767 done /763 queued / 16 running / 766 errors / 24% coverage ] ****** [767 done /763 queued / 16 running / 766 errors / 24% coverage ] ****** [768 done /762 queued / 16 running / 767 errors / 24% coverage ] ****** [768 done /762 queued / 16 running / 767 errors / 24% coverage ] ****** [769 done /766 queued / 16 running / 768 errors / 24% coverage ] ****** [769 done /766 queued / 16 running / 768 errors / 24% coverage ] ****** [770 done /765 queued / 16 running / 769 errors / 24% coverage ] ****** [770 done /765 queued / 16 running / 769 errors / 24% coverage ] ****** [771 done /767 queued / 16 running / 770 errors / 24% coverage ] ****** [771 done /767 queued / 16 running / 770 errors / 24% coverage ] ****** [772 done /769 queued / 16 running / 771 errors / 24% coverage ] ****** [772 done /769 queued / 16 running / 771 errors / 24% coverage ] ****** [773 done /770 queued / 16 running / 772 errors / 24% coverage ] ****** [773 done /770 queued / 16 running / 772 errors / 24% coverage ] ****** [774 done /769 queued / 16 running / 773 errors / 24% coverage ] ****** [774 done /769 queued / 16 running / 773 errors / 24% coverage ] ****** [775 done /773 queued / 16 running / 774 errors / 24% coverage ] ****** [775 done /773 queued / 16 running / 774 errors / 24% coverage ] ****** [776 done /772 queued / 16 running / 775 errors / 24% coverage ] ****** [776 done /772 queued / 16 running / 775 errors / 24% coverage ] ****** [777 done /778 queued / 16 running / 776 errors / 24% coverage ] ****** [777 done /778 queued / 16 running / 776 errors / 24% coverage ] ****** [778 done /782 queued / 16 running / 777 errors / 24% coverage ] ****** [778 done /782 queued / 16 running / 777 errors / 24% coverage ] ****** [779 done /783 queued / 16 running / 778 errors / 24% coverage ] ****** [779 done /783 queued / 16 running / 778 errors / 24% coverage ] ****** [780 done /782 queued / 16 running / 779 errors / 24% coverage ] ****** [780 done /782 queued / 16 running / 779 errors / 24% coverage ] ****** [781 done /787 queued / 16 running / 780 errors / 24% coverage ] ****** [781 done /787 queued / 16 running / 780 errors / 24% coverage ] ****** [782 done /786 queued / 16 running / 781 errors / 24% coverage ] ****** [782 done /786 queued / 16 running / 781 errors / 24% coverage ] ****** [783 done /785 queued / 16 running / 782 errors / 24% coverage ] ****** [783 done /785 queued / 16 running / 782 errors / 24% coverage ] ****** [784 done /788 queued / 16 running / 783 errors / 24% coverage ] ****** [784 done /788 queued / 16 running / 783 errors / 24% coverage ] ****** [785 done /790 queued / 16 running / 784 errors / 24% coverage ] ****** [785 done /790 queued / 16 running / 784 errors / 24% coverage ] ****** [786 done /793 queued / 16 running / 785 errors / 24% coverage ] ****** [786 done /793 queued / 16 running / 785 errors / 24% coverage ] ****** [787 done /793 queued / 16 running / 786 errors / 24% coverage ] ****** [787 done /793 queued / 16 running / 786 errors / 24% coverage ] ****** [788 done /795 queued / 16 running / 787 errors / 24% coverage ] ****** [788 done /795 queued / 16 running / 787 errors / 24% coverage ] ****** [789 done /798 queued / 16 running / 788 errors / 24% coverage ] ****** [789 done /798 queued / 16 running / 788 errors / 24% coverage ] ****** [790 done /802 queued / 16 running / 789 errors / 24% coverage ] ****** [790 done /802 queued / 16 running / 789 errors / 24% coverage ] ****** [791 done /804 queued / 16 running / 790 errors / 24% coverage ] ****** [791 done /804 queued / 16 running / 790 errors / 24% coverage ] ****** [792 done /805 queued / 16 running / 791 errors / 24% coverage ] ****** [792 done /805 queued / 16 running / 791 errors / 24% coverage ] ****** [793 done /808 queued / 16 running / 792 errors / 24% coverage ] ****** [793 done /808 queued / 16 running / 792 errors / 24% coverage ] ****** [794 done /811 queued / 16 running / 793 errors / 24% coverage ] ****** [794 done /811 queued / 16 running / 793 errors / 24% coverage ] ****** [795 done /812 queued / 16 running / 794 errors / 24% coverage ] ****** [795 done /812 queued / 16 running / 794 errors / 24% coverage ] ****** [796 done /813 queued / 16 running / 795 errors / 24% coverage ] ****** [796 done /813 queued / 16 running / 795 errors / 24% coverage ] ****** [797 done /817 queued / 16 running / 796 errors / 24% coverage ] ****** [797 done /817 queued / 16 running / 796 errors / 24% coverage ] ****** [798 done /819 queued / 16 running / 797 errors / 24% coverage ] ****** [798 done /819 queued / 16 running / 797 errors / 24% coverage ] ****** [799 done /820 queued / 16 running / 798 errors / 24% coverage ] ****** [799 done /820 queued / 16 running / 798 errors / 24% coverage ] ****** [800 done /820 queued / 16 running / 799 errors / 24% coverage ] ****** [800 done /820 queued / 16 running / 799 errors / 24% coverage ] ****** [801 done /821 queued / 16 running / 800 errors / 24% coverage ] ****** [801 done /821 queued / 16 running / 800 errors / 24% coverage ] ****** [802 done /820 queued / 16 running / 801 errors / 24% coverage ] ****** [802 done /820 queued / 16 running / 801 errors / 24% coverage ] ****** [803 done /821 queued / 16 running / 802 errors / 24% coverage ] ****** [803 done /821 queued / 16 running / 802 errors / 24% coverage ] ****** [804 done /821 queued / 16 running / 803 errors / 24% coverage ] ****** [804 done /821 queued / 16 running / 803 errors / 24% coverage ] ****** [805 done /824 queued / 16 running / 804 errors / 24% coverage ] ****** [805 done /824 queued / 16 running / 804 errors / 24% coverage ] ****** [806 done /824 queued / 16 running / 805 errors / 24% coverage ] ****** [806 done /824 queued / 16 running / 805 errors / 24% coverage ] ****** [807 done /826 queued / 16 running / 806 errors / 24% coverage ] ****** [807 done /826 queued / 16 running / 806 errors / 24% coverage ] ****** [808 done /827 queued / 16 running / 807 errors / 24% coverage ] ****** [808 done /827 queued / 16 running / 807 errors / 24% coverage ] ****** [809 done /827 queued / 16 running / 808 errors / 24% coverage ] ****** [809 done /827 queued / 16 running / 808 errors / 24% coverage ] ****** [810 done /826 queued / 16 running / 809 errors / 24% coverage ] ****** [810 done /826 queued / 16 running / 809 errors / 24% coverage ] ****** [811 done /825 queued / 16 running / 810 errors / 24% coverage ] ****** [811 done /825 queued / 16 running / 810 errors / 24% coverage ] ****** [812 done /825 queued / 16 running / 811 errors / 24% coverage ] ****** [812 done /825 queued / 16 running / 811 errors / 24% coverage ] ****** [813 done /825 queued / 16 running / 812 errors / 24% coverage ] ****** [813 done /825 queued / 16 running / 812 errors / 24% coverage ] ****** [814 done /825 queued / 16 running / 813 errors / 24% coverage ] ****** [814 done /825 queued / 16 running / 813 errors / 24% coverage ] ****** [815 done /829 queued / 16 running / 814 errors / 24% coverage ] ****** [815 done /829 queued / 16 running / 814 errors / 24% coverage ] ****** [816 done /831 queued / 16 running / 815 errors / 24% coverage ] ****** [816 done /831 queued / 16 running / 815 errors / 24% coverage ] ****** [817 done /832 queued / 16 running / 816 errors / 24% coverage ] ****** [817 done /832 queued / 16 running / 816 errors / 24% coverage ] ****** [818 done /834 queued / 16 running / 817 errors / 24% coverage ] ****** [818 done /834 queued / 16 running / 817 errors / 24% coverage ] ****** [819 done /834 queued / 16 running / 818 errors / 24% coverage ] ****** [819 done /834 queued / 16 running / 818 errors / 24% coverage ] ****** [820 done /835 queued / 16 running / 819 errors / 24% coverage ] ****** [820 done /835 queued / 16 running / 819 errors / 24% coverage ] ****** [821 done /835 queued / 16 running / 820 errors / 24% coverage ] ****** [821 done /835 queued / 16 running / 820 errors / 24% coverage ] ****** [822 done /835 queued / 16 running / 821 errors / 24% coverage ] ****** [822 done /835 queued / 16 running / 821 errors / 24% coverage ] ****** [823 done /834 queued / 16 running / 822 errors / 24% coverage ] ****** [823 done /834 queued / 16 running / 822 errors / 24% coverage ] ****** [824 done /838 queued / 16 running / 823 errors / 24% coverage ] ****** [824 done /838 queued / 16 running / 823 errors / 24% coverage ] ****** [825 done /841 queued / 16 running / 824 errors / 24% coverage ] ****** [825 done /841 queued / 16 running / 824 errors / 24% coverage ] ****** [826 done /844 queued / 16 running / 825 errors / 24% coverage ] ****** [826 done /844 queued / 16 running / 825 errors / 24% coverage ] ****** [827 done /843 queued / 16 running / 826 errors / 24% coverage ] ****** [827 done /843 queued / 16 running / 826 errors / 24% coverage ] ****** [828 done /844 queued / 16 running / 827 errors / 24% coverage ] ****** [828 done /844 queued / 16 running / 827 errors / 24% coverage ] ****** [829 done /847 queued / 16 running / 828 errors / 24% coverage ] ****** [829 done /847 queued / 16 running / 828 errors / 24% coverage ] ****** [830 done /848 queued / 16 running / 829 errors / 24% coverage ] ****** [830 done /848 queued / 16 running / 829 errors / 24% coverage ] ****** [831 done /850 queued / 16 running / 830 errors / 24% coverage ] ****** [831 done /850 queued / 16 running / 830 errors / 24% coverage ] ****** [832 done /853 queued / 16 running / 831 errors / 24% coverage ] ****** [832 done /853 queued / 16 running / 831 errors / 24% coverage ] ****** [833 done /852 queued / 16 running / 832 errors / 24% coverage ] ****** [833 done /852 queued / 16 running / 832 errors / 24% coverage ] ****** [834 done /851 queued / 16 running / 833 errors / 24% coverage ] ****** [834 done /851 queued / 16 running / 833 errors / 24% coverage ] ****** [835 done /850 queued / 16 running / 834 errors / 24% coverage ] ****** [835 done /850 queued / 16 running / 834 errors / 24% coverage ] ****** [836 done /851 queued / 16 running / 835 errors / 24% coverage ] ****** [836 done /851 queued / 16 running / 835 errors / 24% coverage ] ****** [837 done /856 queued / 16 running / 836 errors / 24% coverage ] ****** [837 done /856 queued / 16 running / 836 errors / 24% coverage ] ****** [838 done /861 queued / 16 running / 837 errors / 24% coverage ] ****** [838 done /861 queued / 16 running / 837 errors / 24% coverage ] ****** [839 done /863 queued / 16 running / 838 errors / 24% coverage ] ****** [839 done /863 queued / 16 running / 838 errors / 24% coverage ] ****** [840 done /864 queued / 16 running / 839 errors / 24% coverage ] ****** [840 done /864 queued / 16 running / 839 errors / 24% coverage ] ****** [841 done /864 queued / 16 running / 840 errors / 24% coverage ] ****** [841 done /864 queued / 16 running / 840 errors / 24% coverage ] ****** [842 done /863 queued / 16 running / 841 errors / 24% coverage ] ****** [842 done /863 queued / 16 running / 841 errors / 24% coverage ] ****** [843 done /863 queued / 16 running / 842 errors / 24% coverage ] ****** [843 done /863 queued / 16 running / 842 errors / 24% coverage ] ****** [844 done /863 queued / 16 running / 843 errors / 24% coverage ] ****** [844 done /863 queued / 16 running / 843 errors / 24% coverage ] ****** [845 done /865 queued / 16 running / 844 errors / 24% coverage ] ****** [845 done /865 queued / 16 running / 844 errors / 24% coverage ] ****** [846 done /864 queued / 16 running / 845 errors / 24% coverage ] ****** [846 done /864 queued / 16 running / 845 errors / 24% coverage ] ****** [847 done /863 queued / 16 running / 846 errors / 24% coverage ] ****** [847 done /863 queued / 16 running / 846 errors / 24% coverage ] ****** [848 done /864 queued / 16 running / 847 errors / 24% coverage ] ****** [848 done /864 queued / 16 running / 847 errors / 24% coverage ] ****** [849 done /864 queued / 16 running / 848 errors / 24% coverage ] ****** [849 done /864 queued / 16 running / 848 errors / 24% coverage ] ****** [850 done /865 queued / 16 running / 849 errors / 24% coverage ] ****** [850 done /865 queued / 16 running / 849 errors / 24% coverage ] ****** [851 done /864 queued / 16 running / 850 errors / 24% coverage ] ****** [851 done /864 queued / 16 running / 850 errors / 24% coverage ] ****** [852 done /864 queued / 16 running / 851 errors / 24% coverage ] ****** [852 done /864 queued / 16 running / 851 errors / 24% coverage ] ****** [853 done /864 queued / 16 running / 852 errors / 24% coverage ] ****** [853 done /864 queued / 16 running / 852 errors / 24% coverage ] ****** [854 done /866 queued / 16 running / 853 errors / 24% coverage ] ****** [854 done /866 queued / 16 running / 853 errors / 24% coverage ] ****** [855 done /866 queued / 16 running / 854 errors / 24% coverage ] ****** [855 done /866 queued / 16 running / 854 errors / 24% coverage ] ****** [856 done /868 queued / 16 running / 855 errors / 24% coverage ] ****** [856 done /868 queued / 16 running / 855 errors / 24% coverage ] ****** [857 done /871 queued / 16 running / 856 errors / 24% coverage ] ****** [857 done /871 queued / 16 running / 856 errors / 24% coverage ] ****** [858 done /871 queued / 16 running / 857 errors / 24% coverage ] ****** [858 done /871 queued / 16 running / 857 errors / 24% coverage ] ****** [859 done /870 queued / 16 running / 858 errors / 24% coverage ] ****** [859 done /870 queued / 16 running / 858 errors / 24% coverage ] ****** [860 done /870 queued / 16 running / 859 errors / 24% coverage ] ****** [860 done /870 queued / 16 running / 859 errors / 24% coverage ] ****** [861 done /869 queued / 16 running / 860 errors / 24% coverage ] ****** [861 done /869 queued / 16 running / 860 errors / 24% coverage ] ****** [862 done /869 queued / 16 running / 861 errors / 24% coverage ] ****** [862 done /869 queued / 16 running / 861 errors / 24% coverage ] ****** [863 done /868 queued / 16 running / 862 errors / 24% coverage ] ****** [863 done /868 queued / 16 running / 862 errors / 24% coverage ] ****** [864 done /867 queued / 16 running / 863 errors / 24% coverage ] ****** [864 done /867 queued / 16 running / 863 errors / 24% coverage ] ****** [865 done /870 queued / 16 running / 864 errors / 24% coverage ] ****** [865 done /870 queued / 16 running / 864 errors / 24% coverage ] ****** [866 done /871 queued / 16 running / 865 errors / 24% coverage ] ****** [866 done /871 queued / 16 running / 865 errors / 24% coverage ] ****** [867 done /874 queued / 16 running / 866 errors / 24% coverage ] ****** [867 done /874 queued / 16 running / 866 errors / 24% coverage ] ****** [868 done /877 queued / 16 running / 867 errors / 24% coverage ] ****** [868 done /877 queued / 16 running / 867 errors / 24% coverage ] ****** [869 done /882 queued / 16 running / 868 errors / 24% coverage ] ****** [869 done /882 queued / 16 running / 868 errors / 24% coverage ] ****** [870 done /885 queued / 16 running / 869 errors / 24% coverage ] ****** [870 done /885 queued / 16 running / 869 errors / 24% coverage ] ****** [871 done /889 queued / 16 running / 870 errors / 24% coverage ] ****** [871 done /889 queued / 16 running / 870 errors / 24% coverage ] ****** [872 done /892 queued / 16 running / 871 errors / 24% coverage ] ****** [872 done /892 queued / 16 running / 871 errors / 24% coverage ] ****** [873 done /891 queued / 16 running / 872 errors / 24% coverage ] ****** [873 done /891 queued / 16 running / 872 errors / 24% coverage ] ****** [874 done /891 queued / 16 running / 873 errors / 24% coverage ] ****** [874 done /891 queued / 16 running / 873 errors / 24% coverage ] ****** [875 done /895 queued / 16 running / 874 errors / 24% coverage ] ****** [875 done /895 queued / 16 running / 874 errors / 24% coverage ] ****** [876 done /898 queued / 16 running / 875 errors / 24% coverage ] ****** [876 done /898 queued / 16 running / 875 errors / 24% coverage ] ****** [877 done /897 queued / 16 running / 876 errors / 24% coverage ] ****** [877 done /897 queued / 16 running / 876 errors / 24% coverage ] ****** [878 done /899 queued / 16 running / 877 errors / 24% coverage ] ****** [878 done /899 queued / 16 running / 877 errors / 24% coverage ] ****** [879 done /898 queued / 16 running / 878 errors / 24% coverage ] ****** [879 done /898 queued / 16 running / 878 errors / 24% coverage ] ****** [880 done /902 queued / 16 running / 879 errors / 24% coverage ] ****** [880 done /902 queued / 16 running / 879 errors / 24% coverage ] ****** [881 done /904 queued / 16 running / 880 errors / 24% coverage ] ****** [881 done /904 queued / 16 running / 880 errors / 24% coverage ] ****** [882 done /905 queued / 16 running / 881 errors / 24% coverage ] ****** [882 done /905 queued / 16 running / 881 errors / 24% coverage ] ****** [883 done /906 queued / 16 running / 882 errors / 24% coverage ] ****** [883 done /906 queued / 16 running / 882 errors / 24% coverage ] ****** [884 done /905 queued / 16 running / 883 errors / 24% coverage ] ****** [884 done /905 queued / 16 running / 883 errors / 24% coverage ] ****** [885 done /905 queued / 16 running / 884 errors / 24% coverage ] ****** [885 done /905 queued / 16 running / 884 errors / 24% coverage ] ****** [886 done /905 queued / 16 running / 885 errors / 24% coverage ] ****** [886 done /905 queued / 16 running / 885 errors / 24% coverage ] ****** [887 done /905 queued / 16 running / 886 errors / 24% coverage ] ****** [887 done /905 queued / 16 running / 886 errors / 24% coverage ] ****** [888 done /905 queued / 16 running / 887 errors / 24% coverage ] ****** [888 done /905 queued / 16 running / 887 errors / 24% coverage ] ****** [889 done /904 queued / 16 running / 888 errors / 24% coverage ] ****** [889 done /904 queued / 16 running / 888 errors / 24% coverage ] ****** [890 done /904 queued / 16 running / 889 errors / 24% coverage ] ****** [890 done /904 queued / 16 running / 889 errors / 24% coverage ] ****** [891 done /903 queued / 16 running / 890 errors / 24% coverage ] ****** [891 done /903 queued / 16 running / 890 errors / 24% coverage ] ****** [892 done /902 queued / 16 running / 891 errors / 24% coverage ] ****** [892 done /902 queued / 16 running / 891 errors / 24% coverage ] ****** [893 done /901 queued / 16 running / 892 errors / 24% coverage ] ****** [893 done /901 queued / 16 running / 892 errors / 24% coverage ] ****** [894 done /900 queued / 16 running / 893 errors / 24% coverage ] ****** [894 done /900 queued / 16 running / 893 errors / 24% coverage ] ****** [895 done /901 queued / 16 running / 894 errors / 24% coverage ] ****** [895 done /901 queued / 16 running / 894 errors / 24% coverage ] ****** [896 done /900 queued / 16 running / 895 errors / 24% coverage ] ****** [896 done /900 queued / 16 running / 895 errors / 24% coverage ] ****** [897 done /899 queued / 16 running / 896 errors / 24% coverage ] ****** [897 done /899 queued / 16 running / 896 errors / 24% coverage ] ****** [898 done /898 queued / 16 running / 897 errors / 24% coverage ] ****** [898 done /898 queued / 16 running / 897 errors / 24% coverage ] ****** [899 done /903 queued / 16 running / 898 errors / 24% coverage ] ****** [899 done /903 queued / 16 running / 898 errors / 24% coverage ] ****** [900 done /904 queued / 16 running / 899 errors / 24% coverage ] ****** [900 done /904 queued / 16 running / 899 errors / 24% coverage ] ****** [901 done /903 queued / 16 running / 900 errors / 24% coverage ] ****** [901 done /903 queued / 16 running / 900 errors / 24% coverage ] ****** [902 done /902 queued / 16 running / 901 errors / 24% coverage ] ****** [902 done /902 queued / 16 running / 901 errors / 24% coverage ] ****** [903 done /904 queued / 16 running / 902 errors / 24% coverage ] ****** [903 done /904 queued / 16 running / 902 errors / 24% coverage ] ****** [904 done /905 queued / 16 running / 903 errors / 24% coverage ] ****** [904 done /905 queued / 16 running / 903 errors / 24% coverage ] ****** [905 done /904 queued / 16 running / 904 errors / 24% coverage ] ****** [905 done /904 queued / 16 running / 904 errors / 24% coverage ] ****** [906 done /903 queued / 16 running / 905 errors / 24% coverage ] ****** [906 done /903 queued / 16 running / 905 errors / 24% coverage ] ****** [907 done /902 queued / 16 running / 906 errors / 24% coverage ] ****** [907 done /902 queued / 16 running / 906 errors / 24% coverage ] ****** [908 done /906 queued / 16 running / 907 errors / 24% coverage ] ****** [908 done /906 queued / 16 running / 907 errors / 24% coverage ] ****** [909 done /905 queued / 16 running / 908 errors / 24% coverage ] ****** [909 done /905 queued / 16 running / 908 errors / 24% coverage ] ****** [910 done /904 queued / 16 running / 909 errors / 24% coverage ] ****** [910 done /904 queued / 16 running / 909 errors / 24% coverage ] ****** [911 done /905 queued / 16 running / 910 errors / 24% coverage ] ****** [911 done /905 queued / 16 running / 910 errors / 24% coverage ] ****** [912 done /905 queued / 16 running / 911 errors / 24% coverage ] ****** [912 done /905 queued / 16 running / 911 errors / 24% coverage ] ****** [913 done /908 queued / 16 running / 912 errors / 24% coverage ] ****** [913 done /908 queued / 16 running / 912 errors / 24% coverage ] ****** [914 done /908 queued / 16 running / 913 errors / 24% coverage ] ****** [914 done /908 queued / 16 running / 913 errors / 24% coverage ] ****** [915 done /908 queued / 16 running / 914 errors / 24% coverage ] ****** [915 done /908 queued / 16 running / 914 errors / 24% coverage ] ****** [916 done /908 queued / 16 running / 915 errors / 24% coverage ] ****** [916 done /908 queued / 16 running / 915 errors / 24% coverage ] ****** [917 done /908 queued / 16 running / 916 errors / 24% coverage ] ****** [917 done /908 queued / 16 running / 916 errors / 24% coverage ] ****** [918 done /910 queued / 16 running / 917 errors / 24% coverage ] ****** [918 done /910 queued / 16 running / 917 errors / 24% coverage ] ****** [919 done /909 queued / 16 running / 918 errors / 24% coverage ] ****** [919 done /909 queued / 16 running / 918 errors / 24% coverage ] ****** [920 done /909 queued / 16 running / 919 errors / 24% coverage ] ****** [920 done /909 queued / 16 running / 919 errors / 24% coverage ] ****** [921 done /910 queued / 16 running / 920 errors / 24% coverage ] ****** [921 done /910 queued / 16 running / 920 errors / 24% coverage ] ****** [922 done /909 queued / 16 running / 921 errors / 24% coverage ] ****** [922 done /909 queued / 16 running / 921 errors / 24% coverage ] ****** [923 done /908 queued / 16 running / 922 errors / 24% coverage ] ****** [923 done /908 queued / 16 running / 922 errors / 24% coverage ] ****** [924 done /907 queued / 16 running / 923 errors / 24% coverage ] ****** [924 done /907 queued / 16 running / 923 errors / 24% coverage ] ****** [925 done /906 queued / 16 running / 924 errors / 24% coverage ] ****** [925 done /906 queued / 16 running / 924 errors / 24% coverage ] ****** [926 done /907 queued / 16 running / 925 errors / 24% coverage ] ****** [926 done /907 queued / 16 running / 925 errors / 24% coverage ] ****** [927 done /906 queued / 16 running / 926 errors / 24% coverage ] ****** [927 done /906 queued / 16 running / 926 errors / 24% coverage ] ****** [928 done /907 queued / 16 running / 927 errors / 24% coverage ] ****** [928 done /907 queued / 16 running / 927 errors / 24% coverage ] ****** [929 done /906 queued / 16 running / 928 errors / 24% coverage ] ****** [929 done /906 queued / 16 running / 928 errors / 24% coverage ] ****** [930 done /905 queued / 16 running / 929 errors / 24% coverage ] ****** [930 done /905 queued / 16 running / 929 errors / 24% coverage ] ****** [931 done /904 queued / 16 running / 930 errors / 24% coverage ] ****** [931 done /904 queued / 16 running / 930 errors / 24% coverage ] ****** [932 done /905 queued / 16 running / 931 errors / 24% coverage ] ****** [932 done /905 queued / 16 running / 931 errors / 24% coverage ] ****** [933 done /907 queued / 16 running / 932 errors / 24% coverage ] ****** [933 done /907 queued / 16 running / 932 errors / 24% coverage ] ****** [934 done /909 queued / 16 running / 933 errors / 24% coverage ] ****** [934 done /909 queued / 16 running / 933 errors / 24% coverage ] ****** [935 done /912 queued / 16 running / 934 errors / 24% coverage ] ****** [935 done /912 queued / 16 running / 934 errors / 24% coverage ] ****** [936 done /912 queued / 16 running / 935 errors / 24% coverage ] ****** [936 done /912 queued / 16 running / 935 errors / 24% coverage ] ****** [937 done /914 queued / 16 running / 936 errors / 24% coverage ] ****** [937 done /914 queued / 16 running / 936 errors / 24% coverage ] ****** [938 done /913 queued / 16 running / 937 errors / 24% coverage ] ****** [938 done /913 queued / 16 running / 937 errors / 24% coverage ] ****** [939 done /913 queued / 16 running / 938 errors / 24% coverage ] ****** [939 done /913 queued / 16 running / 938 errors / 24% coverage ] ****** [940 done /912 queued / 16 running / 939 errors / 24% coverage ] ****** [940 done /912 queued / 16 running / 939 errors / 24% coverage ] ****** [941 done /917 queued / 16 running / 940 errors / 24% coverage ] ****** [941 done /917 queued / 16 running / 940 errors / 24% coverage ] ****** [942 done /916 queued / 16 running / 941 errors / 24% coverage ] ****** [942 done /916 queued / 16 running / 941 errors / 24% coverage ] ****** [943 done /921 queued / 16 running / 942 errors / 24% coverage ] ****** [943 done /921 queued / 16 running / 942 errors / 24% coverage ] ****** [944 done /920 queued / 16 running / 943 errors / 24% coverage ] ****** [944 done /920 queued / 16 running / 943 errors / 24% coverage ] ****** [945 done /919 queued / 16 running / 944 errors / 24% coverage ] ****** [945 done /919 queued / 16 running / 944 errors / 24% coverage ] ****** [946 done /921 queued / 16 running / 945 errors / 24% coverage ] ****** [946 done /921 queued / 16 running / 945 errors / 24% coverage ] ****** [947 done /922 queued / 16 running / 946 errors / 24% coverage ] ****** [947 done /922 queued / 16 running / 946 errors / 24% coverage ] ****** [948 done /923 queued / 16 running / 947 errors / 24% coverage ] ****** [948 done /923 queued / 16 running / 947 errors / 24% coverage ] ****** [949 done /926 queued / 16 running / 948 errors / 24% coverage ] ****** [949 done /926 queued / 16 running / 948 errors / 24% coverage ] ****** [950 done /926 queued / 16 running / 949 errors / 24% coverage ] ****** [950 done /926 queued / 16 running / 949 errors / 24% coverage ] ****** [951 done /926 queued / 16 running / 950 errors / 24% coverage ] ****** [951 done /926 queued / 16 running / 950 errors / 24% coverage ] ****** [952 done /927 queued / 16 running / 951 errors / 24% coverage ] ****** [952 done /927 queued / 16 running / 951 errors / 24% coverage ] ****** [953 done /927 queued / 16 running / 952 errors / 24% coverage ] ****** [953 done /927 queued / 16 running / 952 errors / 24% coverage ] ****** [954 done /928 queued / 16 running / 953 errors / 24% coverage ] ****** [954 done /928 queued / 16 running / 953 errors / 24% coverage ] ****** [955 done /931 queued / 16 running / 954 errors / 24% coverage ] ****** [955 done /931 queued / 16 running / 954 errors / 24% coverage ] ****** [956 done /934 queued / 16 running / 955 errors / 24% coverage ] ****** [956 done /934 queued / 16 running / 955 errors / 24% coverage ] ****** [957 done /937 queued / 16 running / 956 errors / 24% coverage ] ****** [957 done /937 queued / 16 running / 956 errors / 24% coverage ] ****** [958 done /937 queued / 16 running / 957 errors / 24% coverage ] ****** [958 done /937 queued / 16 running / 957 errors / 24% coverage ] ****** [959 done /942 queued / 16 running / 958 errors / 24% coverage ] ****** [959 done /942 queued / 16 running / 958 errors / 24% coverage ] ****** [960 done /942 queued / 16 running / 959 errors / 24% coverage ] ****** [960 done /942 queued / 16 running / 959 errors / 24% coverage ] ****** [961 done /942 queued / 16 running / 960 errors / 24% coverage ] ****** [961 done /942 queued / 16 running / 960 errors / 24% coverage ] ****** [962 done /941 queued / 16 running / 961 errors / 24% coverage ] ****** [962 done /941 queued / 16 running / 961 errors / 24% coverage ] ****** [963 done /942 queued / 16 running / 962 errors / 24% coverage ] ****** [963 done /942 queued / 16 running / 962 errors / 24% coverage ] ****** [964 done /946 queued / 16 running / 963 errors / 24% coverage ] ****** [964 done /946 queued / 16 running / 963 errors / 24% coverage ] ****** [965 done /946 queued / 16 running / 964 errors / 24% coverage ] ****** [965 done /946 queued / 16 running / 964 errors / 24% coverage ] ****** [966 done /945 queued / 16 running / 965 errors / 24% coverage ] ****** [966 done /945 queued / 16 running / 965 errors / 24% coverage ] ****** [967 done /944 queued / 16 running / 966 errors / 24% coverage ] ****** [967 done /944 queued / 16 running / 966 errors / 24% coverage ] ****** [968 done /943 queued / 16 running / 967 errors / 24% coverage ] ****** [968 done /943 queued / 16 running / 967 errors / 24% coverage ] ****** [969 done /945 queued / 16 running / 968 errors / 24% coverage ] ****** [969 done /945 queued / 16 running / 968 errors / 24% coverage ] ****** [970 done /944 queued / 16 running / 969 errors / 24% coverage ] ****** [970 done /944 queued / 16 running / 969 errors / 24% coverage ] ****** [971 done /944 queued / 16 running / 970 errors / 24% coverage ] ****** [971 done /944 queued / 16 running / 970 errors / 24% coverage ] ****** [972 done /943 queued / 16 running / 971 errors / 24% coverage ] ****** [972 done /943 queued / 16 running / 971 errors / 24% coverage ] ****** [973 done /943 queued / 16 running / 972 errors / 24% coverage ] ****** [973 done /943 queued / 16 running / 972 errors / 24% coverage ] ****** [974 done /946 queued / 16 running / 973 errors / 24% coverage ] ****** [974 done /946 queued / 16 running / 973 errors / 24% coverage ] ****** [975 done /950 queued / 16 running / 974 errors / 24% coverage ] ****** [975 done /950 queued / 16 running / 974 errors / 24% coverage ] ****** [976 done /952 queued / 16 running / 975 errors / 24% coverage ] ****** [976 done /952 queued / 16 running / 975 errors / 24% coverage ] ****** [977 done /953 queued / 16 running / 976 errors / 24% coverage ] ****** [977 done /953 queued / 16 running / 976 errors / 24% coverage ] ****** [978 done /956 queued / 16 running / 977 errors / 24% coverage ] ****** [978 done /956 queued / 16 running / 977 errors / 24% coverage ] ****** [979 done /957 queued / 16 running / 978 errors / 24% coverage ] ****** [979 done /957 queued / 16 running / 978 errors / 24% coverage ] ****** [980 done /957 queued / 16 running / 979 errors / 24% coverage ] ****** [980 done /957 queued / 16 running / 979 errors / 24% coverage ] ****** [981 done /957 queued / 16 running / 980 errors / 24% coverage ] ****** [981 done /957 queued / 16 running / 980 errors / 24% coverage ] ****** [982 done /960 queued / 16 running / 981 errors / 24% coverage ] ****** [982 done /960 queued / 16 running / 981 errors / 24% coverage ] ****** [983 done /960 queued / 16 running / 982 errors / 24% coverage ] ****** [983 done /960 queued / 16 running / 982 errors / 24% coverage ] ****** [984 done /959 queued / 16 running / 983 errors / 24% coverage ] ****** [984 done /959 queued / 16 running / 983 errors / 24% coverage ] ****** [985 done /959 queued / 16 running / 984 errors / 24% coverage ] ****** [985 done /959 queued / 16 running / 984 errors / 24% coverage ] ****** [986 done /960 queued / 16 running / 985 errors / 24% coverage ] ****** [986 done /960 queued / 16 running / 985 errors / 24% coverage ] ****** [987 done /964 queued / 16 running / 986 errors / 24% coverage ] ****** [987 done /964 queued / 16 running / 986 errors / 24% coverage ] ****** [988 done /969 queued / 16 running / 987 errors / 24% coverage ] ****** [988 done /969 queued / 16 running / 987 errors / 24% coverage ] ****** [989 done /973 queued / 16 running / 988 errors / 24% coverage ] ****** [989 done /973 queued / 16 running / 988 errors / 24% coverage ] ****** [990 done /977 queued / 16 running / 989 errors / 24% coverage ] ****** [990 done /977 queued / 16 running / 989 errors / 24% coverage ] ****** [991 done /976 queued / 16 running / 990 errors / 24% coverage ] ****** [991 done /976 queued / 16 running / 990 errors / 24% coverage ] ****** [992 done /977 queued / 16 running / 991 errors / 24% coverage ] ****** [992 done /977 queued / 16 running / 991 errors / 24% coverage ] ****** [993 done /976 queued / 16 running / 992 errors / 24% coverage ] ****** [993 done /976 queued / 16 running / 992 errors / 24% coverage ] ****** [994 done /976 queued / 16 running / 993 errors / 24% coverage ] ****** [994 done /976 queued / 16 running / 993 errors / 24% coverage ] ****** [995 done /979 queued / 16 running / 994 errors / 24% coverage ] ****** [995 done /979 queued / 16 running / 994 errors / 24% coverage ] ****** [996 done /982 queued / 16 running / 995 errors / 24% coverage ] ****** [996 done /982 queued / 16 running / 995 errors / 24% coverage ] ****** [997 done /985 queued / 16 running / 996 errors / 24% coverage ] ****** [997 done /985 queued / 16 running / 996 errors / 24% coverage ] ****** [998 done /986 queued / 16 running / 997 errors / 24% coverage ] ****** [998 done /986 queued / 16 running / 997 errors / 24% coverage ] ****** [999 done /985 queued / 16 running / 998 errors / 24% coverage ] ****** [999 done /985 queued / 16 running / 998 errors / 24% coverage ] ****** [1000 done /986 queued / 16 running / 999 errors / 24% coverage ] ****** [1000 done /986 queued / 16 running / 999 errors / 24% coverage ] ****** [1001 done /987 queued / 16 running / 1000 errors / 24% coverage ] ****** [1001 done /987 queued / 16 running / 1000 errors / 24% coverage ] ****** [1002 done /990 queued / 16 running / 1001 errors / 24% coverage ] ****** [1002 done /990 queued / 16 running / 1001 errors / 24% coverage ] ****** [1003 done /990 queued / 16 running / 1002 errors / 24% coverage ] ****** [1003 done /990 queued / 16 running / 1002 errors / 24% coverage ] ****** [1004 done /990 queued / 16 running / 1003 errors / 24% coverage ] ****** [1004 done /990 queued / 16 running / 1003 errors / 24% coverage ] ****** [1005 done /990 queued / 16 running / 1004 errors / 24% coverage ] ****** [1005 done /990 queued / 16 running / 1004 errors / 24% coverage ] ****** [1006 done /991 queued / 16 running / 1005 errors / 24% coverage ] ****** [1006 done /991 queued / 16 running / 1005 errors / 24% coverage ] ****** [1007 done /990 queued / 16 running / 1006 errors / 24% coverage ] ****** [1007 done /990 queued / 16 running / 1006 errors / 24% coverage ] ****** [1008 done /990 queued / 16 running / 1007 errors / 24% coverage ] ****** [1008 done /990 queued / 16 running / 1007 errors / 24% coverage ] ****** [1009 done /990 queued / 16 running / 1008 errors / 24% coverage ] ****** [1009 done /990 queued / 16 running / 1008 errors / 24% coverage ] ****** [1010 done /990 queued / 16 running / 1009 errors / 24% coverage ] ****** [1010 done /990 queued / 16 running / 1009 errors / 24% coverage ] ****** [1011 done /990 queued / 16 running / 1010 errors / 24% coverage ] ****** [1011 done /990 queued / 16 running / 1010 errors / 24% coverage ] ****** [1012 done /989 queued / 16 running / 1011 errors / 24% coverage ] ****** [1012 done /989 queued / 16 running / 1011 errors / 24% coverage ] ****** [1013 done /990 queued / 16 running / 1012 errors / 24% coverage ] ****** [1013 done /990 queued / 16 running / 1012 errors / 24% coverage ] ****** [1014 done /991 queued / 16 running / 1013 errors / 24% coverage ] ****** [1014 done /991 queued / 16 running / 1013 errors / 24% coverage ] ****** [1015 done /990 queued / 16 running / 1014 errors / 24% coverage ] ****** [1015 done /990 queued / 16 running / 1014 errors / 24% coverage ] ****** [1016 done /989 queued / 16 running / 1015 errors / 24% coverage ] ****** [1016 done /989 queued / 16 running / 1015 errors / 24% coverage ] ****** [1017 done /991 queued / 16 running / 1016 errors / 24% coverage ] ****** [1017 done /991 queued / 16 running / 1016 errors / 24% coverage ] ****** [1018 done /991 queued / 16 running / 1017 errors / 24% coverage ] ****** [1018 done /991 queued / 16 running / 1017 errors / 24% coverage ] ****** [1019 done /990 queued / 16 running / 1018 errors / 24% coverage ] ****** [1019 done /990 queued / 16 running / 1018 errors / 24% coverage ] ****** [1020 done /989 queued / 16 running / 1019 errors / 24% coverage ] ****** [1020 done /989 queued / 16 running / 1019 errors / 24% coverage ] ****** [1021 done /988 queued / 16 running / 1020 errors / 24% coverage ] ****** [1021 done /988 queued / 16 running / 1020 errors / 24% coverage ] ****** [1022 done /987 queued / 16 running / 1021 errors / 24% coverage ] ****** [1022 done /987 queued / 16 running / 1021 errors / 24% coverage ] ****** [1023 done /992 queued / 16 running / 1022 errors / 24% coverage ] ****** [1023 done /992 queued / 16 running / 1022 errors / 24% coverage ] ****** [1024 done /993 queued / 16 running / 1023 errors / 24% coverage ] ****** [1024 done /993 queued / 16 running / 1023 errors / 24% coverage ] ****** [1025 done /995 queued / 16 running / 1024 errors / 24% coverage ] ****** [1025 done /995 queued / 16 running / 1024 errors / 24% coverage ] ****** [1026 done /994 queued / 16 running / 1025 errors / 24% coverage ] ****** [1026 done /994 queued / 16 running / 1025 errors / 24% coverage ] ****** [1027 done /994 queued / 16 running / 1026 errors / 24% coverage ] ****** [1027 done /994 queued / 16 running / 1026 errors / 24% coverage ] ****** [1028 done /993 queued / 16 running / 1027 errors / 24% coverage ] ****** [1028 done /993 queued / 16 running / 1027 errors / 24% coverage ] ****** [1029 done /992 queued / 16 running / 1028 errors / 24% coverage ] ****** [1029 done /992 queued / 16 running / 1028 errors / 24% coverage ] ****** [1030 done /994 queued / 16 running / 1029 errors / 24% coverage ] ****** [1030 done /994 queued / 16 running / 1029 errors / 24% coverage ] ****** [1031 done /995 queued / 16 running / 1030 errors / 24% coverage ] ****** [1031 done /995 queued / 16 running / 1030 errors / 24% coverage ] ****** [1032 done /994 queued / 16 running / 1031 errors / 24% coverage ] ****** [1032 done /994 queued / 16 running / 1031 errors / 24% coverage ] ****** [1033 done /993 queued / 16 running / 1032 errors / 24% coverage ] ****** [1033 done /993 queued / 16 running / 1032 errors / 24% coverage ] ****** [1034 done /992 queued / 16 running / 1033 errors / 24% coverage ] ****** [1034 done /992 queued / 16 running / 1033 errors / 24% coverage ] ****** [1035 done /994 queued / 16 running / 1034 errors / 24% coverage ] ****** [1035 done /994 queued / 16 running / 1034 errors / 24% coverage ] ****** [1036 done /993 queued / 16 running / 1035 errors / 24% coverage ] ****** [1036 done /993 queued / 16 running / 1035 errors / 24% coverage ] ****** [1037 done /994 queued / 16 running / 1036 errors / 24% coverage ] ****** [1037 done /994 queued / 16 running / 1036 errors / 24% coverage ] ****** [1038 done /996 queued / 16 running / 1037 errors / 24% coverage ] ****** [1038 done /996 queued / 16 running / 1037 errors / 24% coverage ] ****** [1039 done /996 queued / 16 running / 1038 errors / 24% coverage ] ****** [1039 done /996 queued / 16 running / 1038 errors / 24% coverage ] ****** [1040 done /996 queued / 16 running / 1039 errors / 24% coverage ] ****** [1040 done /996 queued / 16 running / 1039 errors / 24% coverage ] ****** [1041 done /996 queued / 16 running / 1040 errors / 24% coverage ] ****** [1041 done /996 queued / 16 running / 1040 errors / 24% coverage ] ****** [1042 done /996 queued / 16 running / 1041 errors / 24% coverage ] ****** [1042 done /996 queued / 16 running / 1041 errors / 24% coverage ] ****** [1043 done /1000 queued / 16 running / 1042 errors / 24% coverage ] ****** [1043 done /1000 queued / 16 running / 1042 errors / 24% coverage ] ****** [1044 done /1002 queued / 16 running / 1043 errors / 24% coverage ] ****** [1044 done /1002 queued / 16 running / 1043 errors / 24% coverage ] ****** [1045 done /1004 queued / 16 running / 1044 errors / 24% coverage ] ****** [1045 done /1004 queued / 16 running / 1044 errors / 24% coverage ] ****** [1046 done /1004 queued / 16 running / 1045 errors / 24% coverage ] ****** [1046 done /1004 queued / 16 running / 1045 errors / 24% coverage ] ****** [1047 done /1006 queued / 16 running / 1046 errors / 24% coverage ] ****** [1047 done /1006 queued / 16 running / 1046 errors / 24% coverage ] ****** [1048 done /1005 queued / 16 running / 1047 errors / 24% coverage ] ****** [1048 done /1005 queued / 16 running / 1047 errors / 24% coverage ] ****** [1049 done /1004 queued / 16 running / 1048 errors / 24% coverage ] ****** [1049 done /1004 queued / 16 running / 1048 errors / 24% coverage ] ****** [1050 done /1006 queued / 16 running / 1049 errors / 24% coverage ] ****** [1050 done /1006 queued / 16 running / 1049 errors / 24% coverage ] ****** [1051 done /1008 queued / 16 running / 1050 errors / 24% coverage ] ****** [1051 done /1008 queued / 16 running / 1050 errors / 24% coverage ] ****** [1052 done /1010 queued / 16 running / 1051 errors / 24% coverage ] ****** [1052 done /1010 queued / 16 running / 1051 errors / 24% coverage ] ****** [1053 done /1012 queued / 16 running / 1052 errors / 24% coverage ] ****** [1053 done /1012 queued / 16 running / 1052 errors / 24% coverage ] ****** [1054 done /1011 queued / 16 running / 1053 errors / 24% coverage ] ****** [1054 done /1011 queued / 16 running / 1053 errors / 24% coverage ] ****** [1055 done /1015 queued / 16 running / 1054 errors / 24% coverage ] ****** [1055 done /1015 queued / 16 running / 1054 errors / 24% coverage ] ****** [1056 done /1018 queued / 16 running / 1055 errors / 24% coverage ] ****** [1056 done /1018 queued / 16 running / 1055 errors / 24% coverage ] ****** [1057 done /1020 queued / 16 running / 1056 errors / 24% coverage ] ****** [1057 done /1020 queued / 16 running / 1056 errors / 24% coverage ] ****** [1058 done /1019 queued / 16 running / 1057 errors / 24% coverage ] ****** [1058 done /1019 queued / 16 running / 1057 errors / 24% coverage ] ****** [1059 done /1019 queued / 16 running / 1058 errors / 24% coverage ] ****** [1059 done /1019 queued / 16 running / 1058 errors / 24% coverage ] ****** [1060 done /1021 queued / 16 running / 1059 errors / 24% coverage ] ****** [1060 done /1021 queued / 16 running / 1059 errors / 24% coverage ] ****** [1061 done /1022 queued / 16 running / 1060 errors / 24% coverage ] ****** [1061 done /1022 queued / 16 running / 1060 errors / 24% coverage ] ****** [1062 done /1023 queued / 16 running / 1061 errors / 24% coverage ] ****** [1062 done /1023 queued / 16 running / 1061 errors / 24% coverage ] ****** [1063 done /1022 queued / 16 running / 1062 errors / 24% coverage ] ****** [1063 done /1022 queued / 16 running / 1062 errors / 24% coverage ] ****** [1064 done /1021 queued / 16 running / 1063 errors / 24% coverage ] ****** [1064 done /1021 queued / 16 running / 1063 errors / 24% coverage ] ****** [1065 done /1022 queued / 16 running / 1064 errors / 24% coverage ] ****** [1065 done /1022 queued / 16 running / 1064 errors / 24% coverage ] ****** [1066 done /1021 queued / 16 running / 1065 errors / 24% coverage ] ****** [1066 done /1021 queued / 16 running / 1065 errors / 24% coverage ] ****** [1067 done /1020 queued / 16 running / 1066 errors / 24% coverage ] ****** [1067 done /1020 queued / 16 running / 1066 errors / 24% coverage ] ****** [1068 done /1019 queued / 16 running / 1067 errors / 24% coverage ] ****** [1068 done /1019 queued / 16 running / 1067 errors / 24% coverage ] ****** [1069 done /1019 queued / 16 running / 1068 errors / 24% coverage ] ****** [1069 done /1019 queued / 16 running / 1068 errors / 24% coverage ] ****** [1070 done /1018 queued / 16 running / 1069 errors / 24% coverage ] ****** [1070 done /1018 queued / 16 running / 1069 errors / 24% coverage ] ****** [1071 done /1019 queued / 16 running / 1070 errors / 24% coverage ] ****** [1071 done /1019 queued / 16 running / 1070 errors / 24% coverage ] ****** [1072 done /1019 queued / 16 running / 1071 errors / 24% coverage ] ****** [1072 done /1019 queued / 16 running / 1071 errors / 24% coverage ] ****** [1073 done /1018 queued / 16 running / 1072 errors / 24% coverage ] ****** [1073 done /1018 queued / 16 running / 1072 errors / 24% coverage ] ****** [1074 done /1018 queued / 16 running / 1073 errors / 24% coverage ] ****** [1074 done /1018 queued / 16 running / 1073 errors / 24% coverage ] ****** [1075 done /1018 queued / 16 running / 1074 errors / 24% coverage ] ****** [1075 done /1018 queued / 16 running / 1074 errors / 24% coverage ] ****** [1076 done /1018 queued / 16 running / 1075 errors / 24% coverage ] ****** [1076 done /1018 queued / 16 running / 1075 errors / 24% coverage ] ****** [1077 done /1017 queued / 16 running / 1076 errors / 24% coverage ] ****** [1077 done /1017 queued / 16 running / 1076 errors / 24% coverage ] ****** [1078 done /1019 queued / 16 running / 1077 errors / 24% coverage ] ****** [1078 done /1019 queued / 16 running / 1077 errors / 24% coverage ] ****** [1079 done /1018 queued / 16 running / 1078 errors / 24% coverage ] ****** [1079 done /1018 queued / 16 running / 1078 errors / 24% coverage ] ****** [1080 done /1017 queued / 16 running / 1079 errors / 24% coverage ] ****** [1080 done /1017 queued / 16 running / 1079 errors / 24% coverage ] ****** [1081 done /1018 queued / 16 running / 1080 errors / 24% coverage ] ****** [1081 done /1018 queued / 16 running / 1080 errors / 24% coverage ] ****** [1082 done /1017 queued / 16 running / 1081 errors / 24% coverage ] ****** [1082 done /1017 queued / 16 running / 1081 errors / 24% coverage ] ****** [1083 done /1020 queued / 16 running / 1082 errors / 24% coverage ] ****** [1083 done /1020 queued / 16 running / 1082 errors / 24% coverage ] ****** [1084 done /1019 queued / 16 running / 1083 errors / 24% coverage ] ****** [1084 done /1019 queued / 16 running / 1083 errors / 24% coverage ] ****** [1085 done /1019 queued / 16 running / 1084 errors / 24% coverage ] ****** [1085 done /1019 queued / 16 running / 1084 errors / 24% coverage ] ****** [1086 done /1021 queued / 16 running / 1085 errors / 24% coverage ] ****** [1086 done /1021 queued / 16 running / 1085 errors / 24% coverage ] ****** [1087 done /1020 queued / 16 running / 1086 errors / 24% coverage ] ****** [1087 done /1020 queued / 16 running / 1086 errors / 24% coverage ] ****** [1088 done /1022 queued / 16 running / 1087 errors / 24% coverage ] ****** [1088 done /1022 queued / 16 running / 1087 errors / 24% coverage ] ****** [1089 done /1026 queued / 16 running / 1088 errors / 24% coverage ] ****** [1089 done /1026 queued / 16 running / 1088 errors / 24% coverage ] ****** [1090 done /1025 queued / 16 running / 1089 errors / 24% coverage ] ****** [1090 done /1025 queued / 16 running / 1089 errors / 24% coverage ] ****** [1091 done /1028 queued / 16 running / 1090 errors / 24% coverage ] ****** [1091 done /1028 queued / 16 running / 1090 errors / 24% coverage ] ****** [1092 done /1027 queued / 16 running / 1091 errors / 24% coverage ] ****** [1092 done /1027 queued / 16 running / 1091 errors / 24% coverage ] ****** [1093 done /1029 queued / 16 running / 1092 errors / 24% coverage ] ****** [1093 done /1029 queued / 16 running / 1092 errors / 24% coverage ] ****** [1094 done /1030 queued / 16 running / 1093 errors / 24% coverage ] ****** [1094 done /1030 queued / 16 running / 1093 errors / 24% coverage ] ****** [1095 done /1034 queued / 16 running / 1094 errors / 24% coverage ] ****** [1095 done /1034 queued / 16 running / 1094 errors / 24% coverage ] ****** [1096 done /1036 queued / 16 running / 1095 errors / 24% coverage ] ****** [1096 done /1036 queued / 16 running / 1095 errors / 24% coverage ] ****** [1097 done /1035 queued / 16 running / 1096 errors / 24% coverage ] ****** [1097 done /1035 queued / 16 running / 1096 errors / 24% coverage ] ****** [1098 done /1034 queued / 16 running / 1097 errors / 24% coverage ] ****** [1098 done /1034 queued / 16 running / 1097 errors / 24% coverage ] ****** [1099 done /1033 queued / 16 running / 1098 errors / 24% coverage ] ****** [1099 done /1033 queued / 16 running / 1098 errors / 24% coverage ] ****** [1100 done /1032 queued / 16 running / 1099 errors / 24% coverage ] ****** [1100 done /1032 queued / 16 running / 1099 errors / 24% coverage ] ****** [1101 done /1031 queued / 16 running / 1100 errors / 24% coverage ] ****** [1101 done /1031 queued / 16 running / 1100 errors / 24% coverage ] ****** [1102 done /1031 queued / 16 running / 1101 errors / 24% coverage ] ****** [1102 done /1031 queued / 16 running / 1101 errors / 24% coverage ] ****** [1103 done /1032 queued / 16 running / 1102 errors / 24% coverage ] ****** [1103 done /1032 queued / 16 running / 1102 errors / 24% coverage ] ****** [1104 done /1035 queued / 16 running / 1103 errors / 24% coverage ] ****** [1104 done /1035 queued / 16 running / 1103 errors / 24% coverage ] ****** [1105 done /1035 queued / 16 running / 1104 errors / 24% coverage ] ****** [1105 done /1035 queued / 16 running / 1104 errors / 24% coverage ] ****** [1106 done /1035 queued / 16 running / 1105 errors / 24% coverage ] ****** [1106 done /1035 queued / 16 running / 1105 errors / 24% coverage ] ****** [1107 done /1035 queued / 16 running / 1106 errors / 24% coverage ] ****** [1107 done /1035 queued / 16 running / 1106 errors / 24% coverage ] ****** [1108 done /1034 queued / 16 running / 1107 errors / 24% coverage ] ****** [1108 done /1034 queued / 16 running / 1107 errors / 24% coverage ] ****** [1109 done /1033 queued / 16 running / 1108 errors / 24% coverage ] ****** [1109 done /1033 queued / 16 running / 1108 errors / 24% coverage ] ****** [1110 done /1034 queued / 16 running / 1109 errors / 24% coverage ] ****** [1110 done /1034 queued / 16 running / 1109 errors / 24% coverage ] ****** [1111 done /1035 queued / 16 running / 1110 errors / 24% coverage ] ****** [1111 done /1035 queued / 16 running / 1110 errors / 24% coverage ] ****** [1112 done /1036 queued / 16 running / 1111 errors / 24% coverage ] ****** [1112 done /1036 queued / 16 running / 1111 errors / 24% coverage ] ****** [1113 done /1036 queued / 16 running / 1112 errors / 24% coverage ] ****** [1113 done /1036 queued / 16 running / 1112 errors / 24% coverage ] ****** [1114 done /1036 queued / 16 running / 1113 errors / 24% coverage ] ****** [1114 done /1036 queued / 16 running / 1113 errors / 24% coverage ] ****** [1115 done /1035 queued / 16 running / 1114 errors / 24% coverage ] ****** [1115 done /1035 queued / 16 running / 1114 errors / 24% coverage ] ****** [1116 done /1041 queued / 16 running / 1115 errors / 24% coverage ] ****** [1116 done /1041 queued / 16 running / 1115 errors / 24% coverage ] ****** [1117 done /1043 queued / 16 running / 1116 errors / 24% coverage ] ****** [1117 done /1043 queued / 16 running / 1116 errors / 24% coverage ] ****** [1118 done /1042 queued / 16 running / 1117 errors / 24% coverage ] ****** [1118 done /1042 queued / 16 running / 1117 errors / 24% coverage ] ****** [1119 done /1042 queued / 16 running / 1118 errors / 24% coverage ] ****** [1119 done /1042 queued / 16 running / 1118 errors / 24% coverage ] ****** [1120 done /1042 queued / 16 running / 1119 errors / 24% coverage ] ****** [1120 done /1042 queued / 16 running / 1119 errors / 24% coverage ] ****** [1121 done /1041 queued / 16 running / 1120 errors / 24% coverage ] ****** [1121 done /1041 queued / 16 running / 1120 errors / 24% coverage ] ****** [1122 done /1040 queued / 16 running / 1121 errors / 24% coverage ] ****** [1122 done /1040 queued / 16 running / 1121 errors / 24% coverage ] ****** [1123 done /1041 queued / 16 running / 1122 errors / 24% coverage ] ****** [1123 done /1041 queued / 16 running / 1122 errors / 24% coverage ] ****** [1124 done /1045 queued / 16 running / 1123 errors / 24% coverage ] ****** [1124 done /1045 queued / 16 running / 1123 errors / 24% coverage ] ****** [1125 done /1044 queued / 16 running / 1124 errors / 24% coverage ] ****** [1125 done /1044 queued / 16 running / 1124 errors / 24% coverage ] ****** [1126 done /1043 queued / 16 running / 1125 errors / 24% coverage ] ****** [1126 done /1043 queued / 16 running / 1125 errors / 24% coverage ] ****** [1127 done /1042 queued / 16 running / 1126 errors / 24% coverage ] ****** [1127 done /1042 queued / 16 running / 1126 errors / 24% coverage ] ****** [1128 done /1044 queued / 16 running / 1127 errors / 24% coverage ] ****** [1128 done /1044 queued / 16 running / 1127 errors / 24% coverage ] ****** [1129 done /1046 queued / 16 running / 1128 errors / 24% coverage ] ****** [1129 done /1046 queued / 16 running / 1128 errors / 24% coverage ] ****** [1130 done /1045 queued / 16 running / 1129 errors / 24% coverage ] ****** [1130 done /1045 queued / 16 running / 1129 errors / 24% coverage ] ****** [1131 done /1046 queued / 16 running / 1130 errors / 24% coverage ] ****** [1131 done /1046 queued / 16 running / 1130 errors / 24% coverage ] ****** [1132 done /1048 queued / 16 running / 1131 errors / 24% coverage ] ****** [1132 done /1048 queued / 16 running / 1131 errors / 24% coverage ] ****** [1133 done /1050 queued / 16 running / 1132 errors / 24% coverage ] ****** [1133 done /1050 queued / 16 running / 1132 errors / 24% coverage ] ****** [1134 done /1052 queued / 16 running / 1133 errors / 24% coverage ] ****** [1134 done /1052 queued / 16 running / 1133 errors / 24% coverage ] ****** [1135 done /1055 queued / 16 running / 1134 errors / 24% coverage ] ****** [1135 done /1055 queued / 16 running / 1134 errors / 24% coverage ] ****** [1136 done /1056 queued / 16 running / 1135 errors / 24% coverage ] ****** [1136 done /1056 queued / 16 running / 1135 errors / 24% coverage ] ****** [1137 done /1058 queued / 16 running / 1136 errors / 24% coverage ] ****** [1137 done /1058 queued / 16 running / 1136 errors / 24% coverage ] ****** [1138 done /1057 queued / 16 running / 1137 errors / 24% coverage ] ****** [1138 done /1057 queued / 16 running / 1137 errors / 24% coverage ] ****** [1139 done /1056 queued / 16 running / 1138 errors / 24% coverage ] ****** [1139 done /1056 queued / 16 running / 1138 errors / 24% coverage ] ****** [1140 done /1055 queued / 16 running / 1139 errors / 24% coverage ] ****** [1140 done /1055 queued / 16 running / 1139 errors / 24% coverage ] ****** [1141 done /1054 queued / 16 running / 1140 errors / 24% coverage ] ****** [1141 done /1054 queued / 16 running / 1140 errors / 24% coverage ] ****** [1142 done /1053 queued / 16 running / 1141 errors / 24% coverage ] ****** [1142 done /1053 queued / 16 running / 1141 errors / 24% coverage ] ****** [1143 done /1052 queued / 16 running / 1142 errors / 24% coverage ] ****** [1143 done /1052 queued / 16 running / 1142 errors / 24% coverage ] ****** [1144 done /1053 queued / 16 running / 1143 errors / 24% coverage ] ****** [1144 done /1053 queued / 16 running / 1143 errors / 24% coverage ] ****** [1145 done /1053 queued / 16 running / 1144 errors / 24% coverage ] ****** [1145 done /1053 queued / 16 running / 1144 errors / 24% coverage ] ****** [1146 done /1053 queued / 16 running / 1145 errors / 24% coverage ] ****** [1146 done /1053 queued / 16 running / 1145 errors / 24% coverage ] ****** [1147 done /1052 queued / 16 running / 1146 errors / 24% coverage ] ****** [1147 done /1052 queued / 16 running / 1146 errors / 24% coverage ] ****** [1148 done /1054 queued / 16 running / 1147 errors / 24% coverage ] ****** [1148 done /1054 queued / 16 running / 1147 errors / 24% coverage ] ****** [1149 done /1053 queued / 16 running / 1148 errors / 24% coverage ] ****** [1149 done /1053 queued / 16 running / 1148 errors / 24% coverage ] ****** [1150 done /1054 queued / 16 running / 1149 errors / 24% coverage ] ****** [1150 done /1054 queued / 16 running / 1149 errors / 24% coverage ] ****** [1151 done /1055 queued / 16 running / 1150 errors / 24% coverage ] ****** [1151 done /1055 queued / 16 running / 1150 errors / 24% coverage ] ****** [1152 done /1054 queued / 16 running / 1151 errors / 24% coverage ] ****** [1152 done /1054 queued / 16 running / 1151 errors / 24% coverage ] ****** [1153 done /1053 queued / 16 running / 1152 errors / 24% coverage ] ****** [1153 done /1053 queued / 16 running / 1152 errors / 24% coverage ] ****** [1154 done /1053 queued / 16 running / 1153 errors / 24% coverage ] ****** [1154 done /1053 queued / 16 running / 1153 errors / 24% coverage ] ****** [1155 done /1054 queued / 16 running / 1154 errors / 24% coverage ] ****** [1155 done /1054 queued / 16 running / 1154 errors / 24% coverage ] ****** [1156 done /1053 queued / 16 running / 1155 errors / 24% coverage ] ****** [1156 done /1053 queued / 16 running / 1155 errors / 24% coverage ] ****** [1157 done /1057 queued / 16 running / 1156 errors / 24% coverage ] ****** [1157 done /1057 queued / 16 running / 1156 errors / 24% coverage ] ****** [1158 done /1058 queued / 16 running / 1157 errors / 24% coverage ] ****** [1158 done /1058 queued / 16 running / 1157 errors / 24% coverage ] ****** [1159 done /1058 queued / 16 running / 1158 errors / 24% coverage ] ****** [1159 done /1058 queued / 16 running / 1158 errors / 24% coverage ] ****** [1160 done /1062 queued / 16 running / 1159 errors / 24% coverage ] ****** [1160 done /1062 queued / 16 running / 1159 errors / 24% coverage ] ****** [1161 done /1064 queued / 16 running / 1160 errors / 24% coverage ] ****** [1161 done /1064 queued / 16 running / 1160 errors / 24% coverage ] ****** [1162 done /1065 queued / 16 running / 1161 errors / 24% coverage ] ****** [1162 done /1065 queued / 16 running / 1161 errors / 24% coverage ] ****** [1163 done /1065 queued / 16 running / 1162 errors / 24% coverage ] ****** [1163 done /1065 queued / 16 running / 1162 errors / 24% coverage ] ****** [1164 done /1066 queued / 16 running / 1163 errors / 24% coverage ] ****** [1164 done /1066 queued / 16 running / 1163 errors / 24% coverage ] ****** [1165 done /1066 queued / 16 running / 1164 errors / 24% coverage ] ****** [1165 done /1066 queued / 16 running / 1164 errors / 24% coverage ] ****** [1166 done /1066 queued / 16 running / 1165 errors / 24% coverage ] ****** [1166 done /1066 queued / 16 running / 1165 errors / 24% coverage ] ****** [1167 done /1071 queued / 16 running / 1166 errors / 24% coverage ] ****** [1167 done /1071 queued / 16 running / 1166 errors / 24% coverage ] ****** [1168 done /1070 queued / 16 running / 1167 errors / 24% coverage ] ****** [1168 done /1070 queued / 16 running / 1167 errors / 24% coverage ] ****** [1169 done /1071 queued / 16 running / 1168 errors / 24% coverage ] ****** [1169 done /1071 queued / 16 running / 1168 errors / 24% coverage ] ****** [1170 done /1071 queued / 16 running / 1169 errors / 24% coverage ] ****** [1170 done /1071 queued / 16 running / 1169 errors / 24% coverage ] ****** [1171 done /1074 queued / 16 running / 1170 errors / 24% coverage ] ****** [1171 done /1074 queued / 16 running / 1170 errors / 24% coverage ] ****** [1172 done /1075 queued / 16 running / 1171 errors / 24% coverage ] ****** [1172 done /1075 queued / 16 running / 1171 errors / 24% coverage ] ****** [1173 done /1076 queued / 16 running / 1172 errors / 24% coverage ] ****** [1173 done /1076 queued / 16 running / 1172 errors / 24% coverage ] ****** [1174 done /1077 queued / 16 running / 1173 errors / 24% coverage ] ****** [1174 done /1077 queued / 16 running / 1173 errors / 24% coverage ] ****** [1175 done /1078 queued / 16 running / 1174 errors / 24% coverage ] ****** [1175 done /1078 queued / 16 running / 1174 errors / 24% coverage ] ****** [1176 done /1078 queued / 16 running / 1175 errors / 24% coverage ] ****** [1176 done /1078 queued / 16 running / 1175 errors / 24% coverage ] ****** [1177 done /1078 queued / 16 running / 1176 errors / 24% coverage ] ****** [1177 done /1078 queued / 16 running / 1176 errors / 24% coverage ] ****** [1178 done /1078 queued / 16 running / 1177 errors / 24% coverage ] ****** [1178 done /1078 queued / 16 running / 1177 errors / 24% coverage ] ****** [1179 done /1079 queued / 16 running / 1178 errors / 24% coverage ] ****** [1179 done /1079 queued / 16 running / 1178 errors / 24% coverage ] ****** [1180 done /1081 queued / 16 running / 1179 errors / 24% coverage ] ****** [1180 done /1081 queued / 16 running / 1179 errors / 24% coverage ] ****** [1181 done /1082 queued / 16 running / 1180 errors / 24% coverage ] ****** [1181 done /1082 queued / 16 running / 1180 errors / 24% coverage ] ****** [1182 done /1083 queued / 16 running / 1181 errors / 24% coverage ] ****** [1182 done /1083 queued / 16 running / 1181 errors / 24% coverage ] ****** [1183 done /1085 queued / 16 running / 1182 errors / 24% coverage ] ****** [1183 done /1085 queued / 16 running / 1182 errors / 24% coverage ] ****** [1184 done /1086 queued / 16 running / 1183 errors / 24% coverage ] ****** [1184 done /1086 queued / 16 running / 1183 errors / 24% coverage ] ****** [1185 done /1087 queued / 16 running / 1184 errors / 24% coverage ] ****** [1185 done /1087 queued / 16 running / 1184 errors / 24% coverage ] ****** [1186 done /1087 queued / 16 running / 1185 errors / 24% coverage ] ****** [1186 done /1087 queued / 16 running / 1185 errors / 24% coverage ] ****** [1187 done /1086 queued / 16 running / 1186 errors / 24% coverage ] ****** [1187 done /1086 queued / 16 running / 1186 errors / 24% coverage ] ****** [1188 done /1086 queued / 16 running / 1187 errors / 24% coverage ] ****** [1188 done /1086 queued / 16 running / 1187 errors / 24% coverage ] ****** [1189 done /1085 queued / 16 running / 1188 errors / 24% coverage ] ****** [1189 done /1085 queued / 16 running / 1188 errors / 24% coverage ] ****** [1190 done /1084 queued / 16 running / 1189 errors / 24% coverage ] ****** [1190 done /1084 queued / 16 running / 1189 errors / 24% coverage ] ****** [1191 done /1083 queued / 16 running / 1190 errors / 24% coverage ] ****** [1191 done /1083 queued / 16 running / 1190 errors / 24% coverage ] ****** [1192 done /1083 queued / 16 running / 1191 errors / 24% coverage ] ****** [1192 done /1083 queued / 16 running / 1191 errors / 24% coverage ] ****** [1193 done /1082 queued / 16 running / 1192 errors / 24% coverage ] ****** [1193 done /1082 queued / 16 running / 1192 errors / 24% coverage ] ****** [1194 done /1083 queued / 16 running / 1193 errors / 24% coverage ] ****** [1194 done /1083 queued / 16 running / 1193 errors / 24% coverage ] ****** [1195 done /1084 queued / 16 running / 1194 errors / 24% coverage ] ****** [1195 done /1084 queued / 16 running / 1194 errors / 24% coverage ] ****** [1196 done /1083 queued / 16 running / 1195 errors / 24% coverage ] ****** [1196 done /1083 queued / 16 running / 1195 errors / 24% coverage ] ****** [1197 done /1083 queued / 16 running / 1196 errors / 24% coverage ] ****** [1197 done /1083 queued / 16 running / 1196 errors / 24% coverage ] ****** [1198 done /1082 queued / 16 running / 1197 errors / 24% coverage ] ****** [1198 done /1082 queued / 16 running / 1197 errors / 24% coverage ] ****** [1199 done /1083 queued / 16 running / 1198 errors / 24% coverage ] ****** [1199 done /1083 queued / 16 running / 1198 errors / 24% coverage ] ****** [1200 done /1085 queued / 16 running / 1199 errors / 24% coverage ] ****** [1200 done /1085 queued / 16 running / 1199 errors / 24% coverage ] ****** [1201 done /1087 queued / 16 running / 1200 errors / 24% coverage ] ****** [1201 done /1087 queued / 16 running / 1200 errors / 24% coverage ] ****** [1202 done /1086 queued / 16 running / 1201 errors / 24% coverage ] ****** [1202 done /1086 queued / 16 running / 1201 errors / 24% coverage ] ****** [1203 done /1089 queued / 16 running / 1202 errors / 24% coverage ] ****** [1203 done /1089 queued / 16 running / 1202 errors / 24% coverage ] ****** [1204 done /1092 queued / 16 running / 1203 errors / 24% coverage ] ****** [1204 done /1092 queued / 16 running / 1203 errors / 24% coverage ] ****** [1205 done /1091 queued / 16 running / 1204 errors / 24% coverage ] ****** [1205 done /1091 queued / 16 running / 1204 errors / 24% coverage ] ****** [1206 done /1092 queued / 16 running / 1205 errors / 24% coverage ] ****** [1206 done /1092 queued / 16 running / 1205 errors / 24% coverage ] ****** [1207 done /1094 queued / 16 running / 1206 errors / 24% coverage ] ****** [1207 done /1094 queued / 16 running / 1206 errors / 24% coverage ] ****** [1208 done /1093 queued / 16 running / 1207 errors / 24% coverage ] ****** [1208 done /1093 queued / 16 running / 1207 errors / 24% coverage ] ****** [1209 done /1094 queued / 16 running / 1208 errors / 24% coverage ] ****** [1209 done /1094 queued / 16 running / 1208 errors / 24% coverage ] ****** [1210 done /1093 queued / 16 running / 1209 errors / 24% coverage ] ****** [1210 done /1093 queued / 16 running / 1209 errors / 24% coverage ] ****** [1211 done /1095 queued / 16 running / 1210 errors / 24% coverage ] ****** [1211 done /1095 queued / 16 running / 1210 errors / 24% coverage ] ****** [1212 done /1097 queued / 16 running / 1211 errors / 24% coverage ] ****** [1212 done /1097 queued / 16 running / 1211 errors / 24% coverage ] ****** [1213 done /1098 queued / 16 running / 1212 errors / 24% coverage ] ****** [1213 done /1098 queued / 16 running / 1212 errors / 24% coverage ] ****** [1214 done /1101 queued / 16 running / 1213 errors / 24% coverage ] ****** [1214 done /1101 queued / 16 running / 1213 errors / 24% coverage ] ****** [1215 done /1100 queued / 16 running / 1214 errors / 24% coverage ] ****** [1215 done /1100 queued / 16 running / 1214 errors / 24% coverage ] ****** [1216 done /1101 queued / 16 running / 1215 errors / 24% coverage ] ****** [1216 done /1101 queued / 16 running / 1215 errors / 24% coverage ] ****** [1217 done /1100 queued / 16 running / 1216 errors / 24% coverage ] ****** [1217 done /1100 queued / 16 running / 1216 errors / 24% coverage ] ****** [1218 done /1100 queued / 16 running / 1217 errors / 24% coverage ] ****** [1218 done /1100 queued / 16 running / 1217 errors / 24% coverage ] ****** [1219 done /1099 queued / 16 running / 1218 errors / 24% coverage ] ****** [1219 done /1099 queued / 16 running / 1218 errors / 24% coverage ] ****** [1220 done /1100 queued / 16 running / 1219 errors / 24% coverage ] ****** [1220 done /1100 queued / 16 running / 1219 errors / 24% coverage ] ****** [1221 done /1101 queued / 16 running / 1220 errors / 24% coverage ] ****** [1221 done /1101 queued / 16 running / 1220 errors / 24% coverage ] ****** [1222 done /1101 queued / 16 running / 1221 errors / 24% coverage ] ****** [1222 done /1101 queued / 16 running / 1221 errors / 24% coverage ] ****** [1223 done /1102 queued / 16 running / 1222 errors / 24% coverage ] ****** [1223 done /1102 queued / 16 running / 1222 errors / 24% coverage ] ****** [1224 done /1102 queued / 16 running / 1223 errors / 24% coverage ] ****** [1224 done /1102 queued / 16 running / 1223 errors / 24% coverage ] ****** [1225 done /1101 queued / 16 running / 1224 errors / 24% coverage ] ****** [1225 done /1101 queued / 16 running / 1224 errors / 24% coverage ] ****** [1226 done /1104 queued / 16 running / 1225 errors / 24% coverage ] ****** [1226 done /1104 queued / 16 running / 1225 errors / 24% coverage ] ****** [1227 done /1103 queued / 16 running / 1226 errors / 24% coverage ] ****** [1227 done /1103 queued / 16 running / 1226 errors / 24% coverage ] ****** [1228 done /1102 queued / 16 running / 1227 errors / 24% coverage ] ****** [1228 done /1102 queued / 16 running / 1227 errors / 24% coverage ] ****** [1229 done /1102 queued / 16 running / 1228 errors / 24% coverage ] ****** [1229 done /1102 queued / 16 running / 1228 errors / 24% coverage ] ****** [1230 done /1101 queued / 16 running / 1229 errors / 24% coverage ] ****** [1230 done /1101 queued / 16 running / 1229 errors / 24% coverage ] ****** [1231 done /1101 queued / 16 running / 1230 errors / 24% coverage ] ****** [1231 done /1101 queued / 16 running / 1230 errors / 24% coverage ] ****** [1232 done /1101 queued / 16 running / 1231 errors / 24% coverage ] ****** [1232 done /1101 queued / 16 running / 1231 errors / 24% coverage ] ****** [1233 done /1100 queued / 16 running / 1232 errors / 24% coverage ] ****** [1233 done /1100 queued / 16 running / 1232 errors / 24% coverage ] ****** [1234 done /1099 queued / 16 running / 1233 errors / 24% coverage ] ****** [1234 done /1099 queued / 16 running / 1233 errors / 24% coverage ] ****** [1235 done /1098 queued / 16 running / 1234 errors / 24% coverage ] ****** [1235 done /1098 queued / 16 running / 1234 errors / 24% coverage ] ****** [1236 done /1100 queued / 16 running / 1235 errors / 24% coverage ] ****** [1236 done /1100 queued / 16 running / 1235 errors / 24% coverage ] ****** [1237 done /1101 queued / 16 running / 1236 errors / 24% coverage ] ****** [1237 done /1101 queued / 16 running / 1236 errors / 24% coverage ] ****** [1238 done /1103 queued / 16 running / 1237 errors / 24% coverage ] ****** [1238 done /1103 queued / 16 running / 1237 errors / 24% coverage ] ****** [1239 done /1104 queued / 16 running / 1238 errors / 24% coverage ] ****** [1239 done /1104 queued / 16 running / 1238 errors / 24% coverage ] ****** [1240 done /1103 queued / 16 running / 1239 errors / 24% coverage ] ****** [1240 done /1103 queued / 16 running / 1239 errors / 24% coverage ] ****** [1241 done /1104 queued / 16 running / 1240 errors / 24% coverage ] ****** [1241 done /1104 queued / 16 running / 1240 errors / 24% coverage ] ****** [1242 done /1103 queued / 16 running / 1241 errors / 24% coverage ] ****** [1242 done /1103 queued / 16 running / 1241 errors / 24% coverage ] ****** [1243 done /1103 queued / 16 running / 1242 errors / 24% coverage ] ****** [1243 done /1103 queued / 16 running / 1242 errors / 24% coverage ] ****** [1244 done /1104 queued / 16 running / 1243 errors / 24% coverage ] ****** [1244 done /1104 queued / 16 running / 1243 errors / 24% coverage ] ****** [1245 done /1106 queued / 16 running / 1244 errors / 24% coverage ] ****** [1245 done /1106 queued / 16 running / 1244 errors / 24% coverage ] ****** [1246 done /1105 queued / 16 running / 1245 errors / 24% coverage ] ****** [1246 done /1105 queued / 16 running / 1245 errors / 24% coverage ] ****** [1247 done /1106 queued / 16 running / 1246 errors / 24% coverage ] ****** [1247 done /1106 queued / 16 running / 1246 errors / 24% coverage ] ****** [1248 done /1109 queued / 16 running / 1247 errors / 24% coverage ] ****** [1248 done /1109 queued / 16 running / 1247 errors / 24% coverage ] ****** [1249 done /1109 queued / 16 running / 1248 errors / 24% coverage ] ****** [1249 done /1109 queued / 16 running / 1248 errors / 24% coverage ] ****** [1250 done /1108 queued / 16 running / 1249 errors / 24% coverage ] ****** [1250 done /1108 queued / 16 running / 1249 errors / 24% coverage ] ****** [1251 done /1113 queued / 16 running / 1250 errors / 24% coverage ] ****** [1251 done /1113 queued / 16 running / 1250 errors / 24% coverage ] ****** [1252 done /1112 queued / 16 running / 1251 errors / 24% coverage ] ****** [1252 done /1112 queued / 16 running / 1251 errors / 24% coverage ] ****** [1253 done /1113 queued / 16 running / 1252 errors / 24% coverage ] ****** [1253 done /1113 queued / 16 running / 1252 errors / 24% coverage ] ****** [1254 done /1113 queued / 16 running / 1253 errors / 24% coverage ] ****** [1254 done /1113 queued / 16 running / 1253 errors / 24% coverage ] ****** [1255 done /1113 queued / 16 running / 1254 errors / 24% coverage ] ****** [1255 done /1113 queued / 16 running / 1254 errors / 24% coverage ] ****** [1256 done /1112 queued / 16 running / 1255 errors / 24% coverage ] ****** [1256 done /1112 queued / 16 running / 1255 errors / 24% coverage ] ****** [1257 done /1113 queued / 16 running / 1256 errors / 24% coverage ] ****** [1257 done /1113 queued / 16 running / 1256 errors / 24% coverage ] ****** [1258 done /1115 queued / 16 running / 1257 errors / 24% coverage ] ****** [1258 done /1115 queued / 16 running / 1257 errors / 24% coverage ] ****** [1259 done /1117 queued / 16 running / 1258 errors / 24% coverage ] ****** [1259 done /1117 queued / 16 running / 1258 errors / 24% coverage ] ****** [1260 done /1117 queued / 16 running / 1259 errors / 24% coverage ] ****** [1260 done /1117 queued / 16 running / 1259 errors / 24% coverage ] ****** [1261 done /1116 queued / 16 running / 1260 errors / 24% coverage ] ****** [1261 done /1116 queued / 16 running / 1260 errors / 24% coverage ] ****** [1262 done /1119 queued / 16 running / 1261 errors / 24% coverage ] ****** [1262 done /1119 queued / 16 running / 1261 errors / 24% coverage ] ****** [1263 done /1118 queued / 16 running / 1262 errors / 24% coverage ] ****** [1263 done /1118 queued / 16 running / 1262 errors / 24% coverage ] ****** [1264 done /1118 queued / 16 running / 1263 errors / 24% coverage ] ****** [1264 done /1118 queued / 16 running / 1263 errors / 24% coverage ] ****** [1265 done /1117 queued / 16 running / 1264 errors / 24% coverage ] ****** [1265 done /1117 queued / 16 running / 1264 errors / 24% coverage ] ****** [1266 done /1118 queued / 16 running / 1265 errors / 24% coverage ] ****** [1266 done /1118 queued / 16 running / 1265 errors / 24% coverage ] ****** [1267 done /1122 queued / 16 running / 1266 errors / 24% coverage ] ****** [1267 done /1122 queued / 16 running / 1266 errors / 24% coverage ] ****** [1268 done /1125 queued / 16 running / 1267 errors / 24% coverage ] ****** [1268 done /1125 queued / 16 running / 1267 errors / 24% coverage ] ****** [1269 done /1127 queued / 16 running / 1268 errors / 24% coverage ] ****** [1269 done /1127 queued / 16 running / 1268 errors / 24% coverage ] ****** [1270 done /1127 queued / 16 running / 1269 errors / 24% coverage ] ****** [1270 done /1127 queued / 16 running / 1269 errors / 24% coverage ] ****** [1271 done /1130 queued / 16 running / 1270 errors / 24% coverage ] ****** [1271 done /1130 queued / 16 running / 1270 errors / 24% coverage ] ****** [1272 done /1133 queued / 16 running / 1271 errors / 24% coverage ] ****** [1272 done /1133 queued / 16 running / 1271 errors / 24% coverage ] ****** [1273 done /1133 queued / 16 running / 1272 errors / 24% coverage ] ****** [1273 done /1133 queued / 16 running / 1272 errors / 24% coverage ] ****** [1274 done /1133 queued / 16 running / 1273 errors / 24% coverage ] ****** [1274 done /1133 queued / 16 running / 1273 errors / 24% coverage ] ****** [1275 done /1133 queued / 16 running / 1274 errors / 24% coverage ] ****** [1275 done /1133 queued / 16 running / 1274 errors / 24% coverage ] ****** [1276 done /1132 queued / 16 running / 1275 errors / 24% coverage ] ****** [1276 done /1132 queued / 16 running / 1275 errors / 24% coverage ] ****** [1277 done /1132 queued / 16 running / 1276 errors / 24% coverage ] ****** [1277 done /1132 queued / 16 running / 1276 errors / 24% coverage ] ****** [1278 done /1131 queued / 16 running / 1277 errors / 24% coverage ] ****** [1278 done /1131 queued / 16 running / 1277 errors / 24% coverage ] ****** [1279 done /1132 queued / 16 running / 1278 errors / 24% coverage ] ****** [1279 done /1132 queued / 16 running / 1278 errors / 24% coverage ] ****** [1280 done /1131 queued / 16 running / 1279 errors / 24% coverage ] ****** [1280 done /1131 queued / 16 running / 1279 errors / 24% coverage ] ****** [1281 done /1134 queued / 16 running / 1280 errors / 24% coverage ] ****** [1281 done /1134 queued / 16 running / 1280 errors / 24% coverage ] ****** [1282 done /1138 queued / 16 running / 1281 errors / 24% coverage ] ****** [1282 done /1138 queued / 16 running / 1281 errors / 24% coverage ] ****** [1283 done /1137 queued / 16 running / 1282 errors / 24% coverage ] ****** [1283 done /1137 queued / 16 running / 1282 errors / 24% coverage ] ****** [1284 done /1140 queued / 16 running / 1283 errors / 24% coverage ] ****** [1284 done /1140 queued / 16 running / 1283 errors / 24% coverage ] ****** [1285 done /1140 queued / 16 running / 1284 errors / 24% coverage ] ****** [1285 done /1140 queued / 16 running / 1284 errors / 24% coverage ] ****** [1286 done /1142 queued / 16 running / 1285 errors / 24% coverage ] ****** [1286 done /1142 queued / 16 running / 1285 errors / 24% coverage ] ****** [1287 done /1143 queued / 16 running / 1286 errors / 24% coverage ] ****** [1287 done /1143 queued / 16 running / 1286 errors / 24% coverage ] ****** [1288 done /1145 queued / 16 running / 1287 errors / 24% coverage ] ****** [1288 done /1145 queued / 16 running / 1287 errors / 24% coverage ] ****** [1289 done /1144 queued / 16 running / 1288 errors / 24% coverage ] ****** [1289 done /1144 queued / 16 running / 1288 errors / 24% coverage ] ****** [1290 done /1145 queued / 16 running / 1289 errors / 24% coverage ] ****** [1290 done /1145 queued / 16 running / 1289 errors / 24% coverage ] ****** [1291 done /1145 queued / 16 running / 1290 errors / 24% coverage ] ****** [1291 done /1145 queued / 16 running / 1290 errors / 24% coverage ] ****** [1292 done /1148 queued / 16 running / 1291 errors / 24% coverage ] ****** [1292 done /1148 queued / 16 running / 1291 errors / 24% coverage ] ****** [1293 done /1149 queued / 16 running / 1292 errors / 24% coverage ] ****** [1293 done /1149 queued / 16 running / 1292 errors / 24% coverage ] ****** [1294 done /1150 queued / 16 running / 1293 errors / 24% coverage ] ****** [1294 done /1150 queued / 16 running / 1293 errors / 24% coverage ] ****** [1295 done /1151 queued / 16 running / 1294 errors / 24% coverage ] ****** [1295 done /1151 queued / 16 running / 1294 errors / 24% coverage ] ****** [1296 done /1150 queued / 16 running / 1295 errors / 24% coverage ] ****** [1296 done /1150 queued / 16 running / 1295 errors / 24% coverage ] ****** [1297 done /1152 queued / 16 running / 1296 errors / 24% coverage ] ****** [1297 done /1152 queued / 16 running / 1296 errors / 24% coverage ] ****** [1298 done /1156 queued / 16 running / 1297 errors / 24% coverage ] ****** [1298 done /1156 queued / 16 running / 1297 errors / 24% coverage ] ****** [1299 done /1155 queued / 16 running / 1298 errors / 24% coverage ] ****** [1299 done /1155 queued / 16 running / 1298 errors / 24% coverage ] ****** [1300 done /1155 queued / 16 running / 1299 errors / 24% coverage ] ****** [1300 done /1155 queued / 16 running / 1299 errors / 24% coverage ] ****** [1301 done /1154 queued / 16 running / 1300 errors / 24% coverage ] ****** [1301 done /1154 queued / 16 running / 1300 errors / 24% coverage ] ****** [1302 done /1153 queued / 16 running / 1301 errors / 24% coverage ] ****** [1302 done /1153 queued / 16 running / 1301 errors / 24% coverage ] ****** [1303 done /1153 queued / 16 running / 1302 errors / 24% coverage ] ****** [1303 done /1153 queued / 16 running / 1302 errors / 24% coverage ] ****** [1304 done /1155 queued / 16 running / 1303 errors / 24% coverage ] ****** [1304 done /1155 queued / 16 running / 1303 errors / 24% coverage ] ****** [1305 done /1154 queued / 16 running / 1304 errors / 24% coverage ] ****** [1305 done /1154 queued / 16 running / 1304 errors / 24% coverage ] ****** [1306 done /1155 queued / 16 running / 1305 errors / 24% coverage ] ****** [1306 done /1155 queued / 16 running / 1305 errors / 24% coverage ] ****** [1307 done /1157 queued / 16 running / 1306 errors / 24% coverage ] ****** [1307 done /1157 queued / 16 running / 1306 errors / 24% coverage ] ****** [1308 done /1159 queued / 16 running / 1307 errors / 24% coverage ] ****** [1308 done /1159 queued / 16 running / 1307 errors / 24% coverage ] ****** [1309 done /1160 queued / 16 running / 1308 errors / 24% coverage ] ****** [1309 done /1160 queued / 16 running / 1308 errors / 24% coverage ] ****** [1310 done /1160 queued / 16 running / 1309 errors / 24% coverage ] ****** [1310 done /1160 queued / 16 running / 1309 errors / 24% coverage ] ****** [1311 done /1162 queued / 16 running / 1310 errors / 24% coverage ] ****** [1311 done /1162 queued / 16 running / 1310 errors / 24% coverage ] ****** [1312 done /1161 queued / 16 running / 1311 errors / 24% coverage ] ****** [1312 done /1161 queued / 16 running / 1311 errors / 24% coverage ] ****** [1313 done /1165 queued / 16 running / 1312 errors / 24% coverage ] ****** [1313 done /1165 queued / 16 running / 1312 errors / 24% coverage ] ****** [1314 done /1164 queued / 16 running / 1313 errors / 24% coverage ] ****** [1314 done /1164 queued / 16 running / 1313 errors / 24% coverage ] ****** [1315 done /1166 queued / 16 running / 1314 errors / 24% coverage ] ****** [1315 done /1166 queued / 16 running / 1314 errors / 24% coverage ] ****** [1316 done /1167 queued / 16 running / 1315 errors / 24% coverage ] ****** [1316 done /1167 queued / 16 running / 1315 errors / 24% coverage ] ****** [1317 done /1166 queued / 16 running / 1316 errors / 24% coverage ] ****** [1317 done /1166 queued / 16 running / 1316 errors / 24% coverage ] ****** [1318 done /1168 queued / 16 running / 1317 errors / 24% coverage ] ****** [1318 done /1168 queued / 16 running / 1317 errors / 24% coverage ] ****** [1319 done /1170 queued / 16 running / 1318 errors / 24% coverage ] ****** [1319 done /1170 queued / 16 running / 1318 errors / 24% coverage ] ****** [1320 done /1173 queued / 16 running / 1319 errors / 24% coverage ] ****** [1320 done /1173 queued / 16 running / 1319 errors / 24% coverage ] ****** [1321 done /1172 queued / 16 running / 1320 errors / 24% coverage ] ****** [1321 done /1172 queued / 16 running / 1320 errors / 24% coverage ] ****** [1322 done /1171 queued / 16 running / 1321 errors / 24% coverage ] ****** [1322 done /1171 queued / 16 running / 1321 errors / 24% coverage ] ****** [1323 done /1173 queued / 16 running / 1322 errors / 24% coverage ] ****** [1323 done /1173 queued / 16 running / 1322 errors / 24% coverage ] ****** [1324 done /1172 queued / 16 running / 1323 errors / 24% coverage ] ****** [1324 done /1172 queued / 16 running / 1323 errors / 24% coverage ] ****** [1325 done /1176 queued / 16 running / 1324 errors / 24% coverage ] ****** [1325 done /1176 queued / 16 running / 1324 errors / 24% coverage ] ****** [1326 done /1176 queued / 16 running / 1325 errors / 24% coverage ] ****** [1326 done /1176 queued / 16 running / 1325 errors / 24% coverage ] ****** [1327 done /1175 queued / 16 running / 1326 errors / 24% coverage ] ****** [1327 done /1175 queued / 16 running / 1326 errors / 24% coverage ] ****** [1328 done /1178 queued / 16 running / 1327 errors / 24% coverage ] ****** [1328 done /1178 queued / 16 running / 1327 errors / 24% coverage ] ****** [1329 done /1180 queued / 16 running / 1328 errors / 24% coverage ] ****** [1329 done /1180 queued / 16 running / 1328 errors / 24% coverage ] ****** [1330 done /1182 queued / 16 running / 1329 errors / 24% coverage ] ****** [1330 done /1182 queued / 16 running / 1329 errors / 24% coverage ] ****** [1331 done /1186 queued / 16 running / 1330 errors / 24% coverage ] ****** [1331 done /1186 queued / 16 running / 1330 errors / 24% coverage ] ****** [1332 done /1190 queued / 16 running / 1331 errors / 24% coverage ] ****** [1332 done /1190 queued / 16 running / 1331 errors / 24% coverage ] ****** [1333 done /1192 queued / 16 running / 1332 errors / 24% coverage ] ****** [1333 done /1192 queued / 16 running / 1332 errors / 24% coverage ] ****** [1334 done /1192 queued / 16 running / 1333 errors / 24% coverage ] ****** [1334 done /1192 queued / 16 running / 1333 errors / 24% coverage ] ****** [1335 done /1191 queued / 16 running / 1334 errors / 24% coverage ] ****** [1335 done /1191 queued / 16 running / 1334 errors / 24% coverage ] ****** [1336 done /1192 queued / 16 running / 1335 errors / 24% coverage ] ****** [1336 done /1192 queued / 16 running / 1335 errors / 24% coverage ] ****** [1337 done /1191 queued / 16 running / 1336 errors / 24% coverage ] ****** [1337 done /1191 queued / 16 running / 1336 errors / 24% coverage ] ****** [1338 done /1191 queued / 16 running / 1337 errors / 24% coverage ] ****** [1338 done /1191 queued / 16 running / 1337 errors / 24% coverage ] ****** [1339 done /1191 queued / 16 running / 1338 errors / 24% coverage ] ****** [1339 done /1191 queued / 16 running / 1338 errors / 24% coverage ] ****** [1340 done /1193 queued / 16 running / 1339 errors / 24% coverage ] ****** [1340 done /1193 queued / 16 running / 1339 errors / 24% coverage ] ****** [1341 done /1193 queued / 16 running / 1340 errors / 24% coverage ] ****** [1341 done /1193 queued / 16 running / 1340 errors / 24% coverage ] ****** [1342 done /1192 queued / 16 running / 1341 errors / 24% coverage ] ****** [1342 done /1192 queued / 16 running / 1341 errors / 24% coverage ] ****** [1343 done /1195 queued / 16 running / 1342 errors / 24% coverage ] ****** [1343 done /1195 queued / 16 running / 1342 errors / 24% coverage ] ****** [1344 done /1195 queued / 16 running / 1343 errors / 24% coverage ] ****** [1344 done /1195 queued / 16 running / 1343 errors / 24% coverage ] ****** [1345 done /1202 queued / 16 running / 1344 errors / 24% coverage ] ****** [1345 done /1202 queued / 16 running / 1344 errors / 24% coverage ] ****** [1346 done /1203 queued / 16 running / 1345 errors / 24% coverage ] ****** [1346 done /1203 queued / 16 running / 1345 errors / 24% coverage ] ****** [1347 done /1208 queued / 16 running / 1346 errors / 24% coverage ] ****** [1347 done /1208 queued / 16 running / 1346 errors / 24% coverage ] ****** [1348 done /1211 queued / 16 running / 1347 errors / 24% coverage ] ****** [1348 done /1211 queued / 16 running / 1347 errors / 24% coverage ] ****** [1349 done /1211 queued / 16 running / 1348 errors / 24% coverage ] ****** [1349 done /1211 queued / 16 running / 1348 errors / 24% coverage ] ****** [1350 done /1211 queued / 16 running / 1349 errors / 24% coverage ] ****** [1350 done /1211 queued / 16 running / 1349 errors / 24% coverage ] ****** [1351 done /1211 queued / 16 running / 1350 errors / 24% coverage ] ****** [1351 done /1211 queued / 16 running / 1350 errors / 24% coverage ] ****** [1352 done /1212 queued / 16 running / 1351 errors / 24% coverage ] ****** [1352 done /1212 queued / 16 running / 1351 errors / 24% coverage ] ****** [1353 done /1214 queued / 16 running / 1352 errors / 24% coverage ] ****** [1353 done /1214 queued / 16 running / 1352 errors / 24% coverage ] ****** [1354 done /1215 queued / 16 running / 1353 errors / 24% coverage ] ****** [1354 done /1215 queued / 16 running / 1353 errors / 24% coverage ] ****** [1355 done /1215 queued / 16 running / 1354 errors / 24% coverage ] ****** [1355 done /1215 queued / 16 running / 1354 errors / 24% coverage ] ****** [1356 done /1215 queued / 16 running / 1355 errors / 24% coverage ] ****** [1356 done /1215 queued / 16 running / 1355 errors / 24% coverage ] ****** [1357 done /1216 queued / 16 running / 1356 errors / 24% coverage ] ****** [1357 done /1216 queued / 16 running / 1356 errors / 24% coverage ] ****** [1358 done /1219 queued / 16 running / 1357 errors / 24% coverage ] ****** [1358 done /1219 queued / 16 running / 1357 errors / 24% coverage ] ****** [1359 done /1222 queued / 16 running / 1358 errors / 24% coverage ] ****** [1359 done /1222 queued / 16 running / 1358 errors / 24% coverage ] ****** [1360 done /1225 queued / 16 running / 1359 errors / 24% coverage ] ****** [1360 done /1225 queued / 16 running / 1359 errors / 24% coverage ] ****** [1361 done /1228 queued / 16 running / 1360 errors / 24% coverage ] ****** [1361 done /1228 queued / 16 running / 1360 errors / 24% coverage ] ****** [1362 done /1229 queued / 16 running / 1361 errors / 24% coverage ] ****** [1362 done /1229 queued / 16 running / 1361 errors / 24% coverage ] ****** [1363 done /1233 queued / 16 running / 1362 errors / 24% coverage ] ****** [1363 done /1233 queued / 16 running / 1362 errors / 24% coverage ] ****** [1364 done /1236 queued / 16 running / 1363 errors / 24% coverage ] ****** [1364 done /1236 queued / 16 running / 1363 errors / 24% coverage ] ****** [1365 done /1239 queued / 16 running / 1364 errors / 24% coverage ] ****** [1365 done /1239 queued / 16 running / 1364 errors / 24% coverage ] ****** [1366 done /1240 queued / 16 running / 1365 errors / 24% coverage ] ****** [1366 done /1240 queued / 16 running / 1365 errors / 24% coverage ] ****** [1367 done /1242 queued / 16 running / 1366 errors / 24% coverage ] ****** [1367 done /1242 queued / 16 running / 1366 errors / 24% coverage ] ****** [1368 done /1243 queued / 16 running / 1367 errors / 24% coverage ] ****** [1368 done /1243 queued / 16 running / 1367 errors / 24% coverage ] ****** [1369 done /1247 queued / 16 running / 1368 errors / 24% coverage ] ****** [1369 done /1247 queued / 16 running / 1368 errors / 24% coverage ] ****** [1370 done /1246 queued / 16 running / 1369 errors / 24% coverage ] ****** [1370 done /1246 queued / 16 running / 1369 errors / 24% coverage ] ****** [1371 done /1245 queued / 16 running / 1370 errors / 24% coverage ] ****** [1371 done /1245 queued / 16 running / 1370 errors / 24% coverage ] ****** [1372 done /1244 queued / 16 running / 1371 errors / 24% coverage ] ****** [1372 done /1244 queued / 16 running / 1371 errors / 24% coverage ] ****** [1373 done /1243 queued / 16 running / 1372 errors / 24% coverage ] ****** [1373 done /1243 queued / 16 running / 1372 errors / 24% coverage ] ****** [1374 done /1244 queued / 16 running / 1373 errors / 24% coverage ] ****** [1374 done /1244 queued / 16 running / 1373 errors / 24% coverage ] ****** [1375 done /1243 queued / 16 running / 1374 errors / 24% coverage ] ****** [1375 done /1243 queued / 16 running / 1374 errors / 24% coverage ] ****** [1376 done /1242 queued / 16 running / 1375 errors / 24% coverage ] ****** [1376 done /1242 queued / 16 running / 1375 errors / 24% coverage ] ****** [1377 done /1242 queued / 16 running / 1376 errors / 24% coverage ] ****** [1377 done /1242 queued / 16 running / 1376 errors / 24% coverage ] ****** [1378 done /1241 queued / 16 running / 1377 errors / 24% coverage ] ****** [1378 done /1241 queued / 16 running / 1377 errors / 24% coverage ] ****** [1379 done /1245 queued / 16 running / 1378 errors / 24% coverage ] ****** [1379 done /1245 queued / 16 running / 1378 errors / 24% coverage ] ****** [1380 done /1244 queued / 16 running / 1379 errors / 24% coverage ] ****** [1380 done /1244 queued / 16 running / 1379 errors / 24% coverage ] ****** [1381 done /1245 queued / 16 running / 1380 errors / 24% coverage ] ****** [1381 done /1245 queued / 16 running / 1380 errors / 24% coverage ] ****** [1382 done /1251 queued / 16 running / 1381 errors / 24% coverage ] ****** [1382 done /1251 queued / 16 running / 1381 errors / 24% coverage ] ****** [1383 done /1253 queued / 16 running / 1382 errors / 24% coverage ] ****** [1383 done /1253 queued / 16 running / 1382 errors / 24% coverage ] ****** [1384 done /1256 queued / 16 running / 1383 errors / 24% coverage ] ****** [1384 done /1256 queued / 16 running / 1383 errors / 24% coverage ] ****** [1385 done /1260 queued / 16 running / 1384 errors / 24% coverage ] ****** [1385 done /1260 queued / 16 running / 1384 errors / 24% coverage ] ****** [1386 done /1264 queued / 16 running / 1385 errors / 24% coverage ] ****** [1386 done /1264 queued / 16 running / 1385 errors / 24% coverage ] ****** [1387 done /1266 queued / 16 running / 1386 errors / 24% coverage ] ****** [1387 done /1266 queued / 16 running / 1386 errors / 24% coverage ] ****** [1388 done /1268 queued / 16 running / 1387 errors / 24% coverage ] ****** [1388 done /1268 queued / 16 running / 1387 errors / 24% coverage ] ****** [1389 done /1267 queued / 16 running / 1388 errors / 24% coverage ] ****** [1389 done /1267 queued / 16 running / 1388 errors / 24% coverage ] ****** [1390 done /1267 queued / 16 running / 1389 errors / 24% coverage ] ****** [1390 done /1267 queued / 16 running / 1389 errors / 24% coverage ] ****** [1391 done /1266 queued / 16 running / 1390 errors / 24% coverage ] ****** [1391 done /1266 queued / 16 running / 1390 errors / 24% coverage ] ****** [1392 done /1265 queued / 16 running / 1391 errors / 24% coverage ] ****** [1392 done /1265 queued / 16 running / 1391 errors / 24% coverage ] ****** [1393 done /1268 queued / 16 running / 1392 errors / 24% coverage ] ****** [1393 done /1268 queued / 16 running / 1392 errors / 24% coverage ] ****** [1394 done /1269 queued / 16 running / 1393 errors / 24% coverage ] ****** [1394 done /1269 queued / 16 running / 1393 errors / 24% coverage ] ****** [1395 done /1273 queued / 16 running / 1394 errors / 24% coverage ] ****** [1395 done /1273 queued / 16 running / 1394 errors / 24% coverage ] ****** [1396 done /1272 queued / 16 running / 1395 errors / 24% coverage ] ****** [1396 done /1272 queued / 16 running / 1395 errors / 24% coverage ] ****** [1397 done /1274 queued / 16 running / 1396 errors / 24% coverage ] ****** [1397 done /1274 queued / 16 running / 1396 errors / 24% coverage ] ****** [1398 done /1276 queued / 16 running / 1397 errors / 24% coverage ] ****** [1398 done /1276 queued / 16 running / 1397 errors / 24% coverage ] ****** [1399 done /1279 queued / 16 running / 1398 errors / 24% coverage ] ****** [1399 done /1279 queued / 16 running / 1398 errors / 24% coverage ] ****** [1400 done /1281 queued / 16 running / 1399 errors / 24% coverage ] ****** [1400 done /1281 queued / 16 running / 1399 errors / 24% coverage ] ****** [1401 done /1281 queued / 16 running / 1400 errors / 24% coverage ] ****** [1401 done /1281 queued / 16 running / 1400 errors / 24% coverage ] ****** [1402 done /1283 queued / 16 running / 1401 errors / 24% coverage ] ****** [1402 done /1283 queued / 16 running / 1401 errors / 24% coverage ] ****** [1403 done /1285 queued / 16 running / 1402 errors / 24% coverage ] ****** [1403 done /1285 queued / 16 running / 1402 errors / 24% coverage ] ****** [1404 done /1285 queued / 16 running / 1403 errors / 24% coverage ] ****** [1404 done /1285 queued / 16 running / 1403 errors / 24% coverage ] ****** [1405 done /1286 queued / 16 running / 1404 errors / 24% coverage ] ****** [1405 done /1286 queued / 16 running / 1404 errors / 24% coverage ] ****** [1406 done /1286 queued / 16 running / 1405 errors / 24% coverage ] ****** [1406 done /1286 queued / 16 running / 1405 errors / 24% coverage ] ****** [1407 done /1287 queued / 16 running / 1406 errors / 24% coverage ] ****** [1407 done /1287 queued / 16 running / 1406 errors / 24% coverage ] ****** [1408 done /1287 queued / 16 running / 1407 errors / 24% coverage ] ****** [1408 done /1287 queued / 16 running / 1407 errors / 24% coverage ] ****** [1409 done /1287 queued / 16 running / 1408 errors / 24% coverage ] ****** [1409 done /1287 queued / 16 running / 1408 errors / 24% coverage ] ****** [1410 done /1288 queued / 16 running / 1409 errors / 24% coverage ] ****** [1410 done /1288 queued / 16 running / 1409 errors / 24% coverage ] ****** [1411 done /1290 queued / 16 running / 1410 errors / 24% coverage ] ****** [1411 done /1290 queued / 16 running / 1410 errors / 24% coverage ] ****** [1412 done /1293 queued / 16 running / 1411 errors / 24% coverage ] ****** [1412 done /1293 queued / 16 running / 1411 errors / 24% coverage ] ****** [1413 done /1295 queued / 16 running / 1412 errors / 24% coverage ] ****** [1413 done /1295 queued / 16 running / 1412 errors / 24% coverage ] ****** [1414 done /1296 queued / 16 running / 1413 errors / 24% coverage ] ****** [1414 done /1296 queued / 16 running / 1413 errors / 24% coverage ] ****** [1415 done /1299 queued / 16 running / 1414 errors / 24% coverage ] ****** [1415 done /1299 queued / 16 running / 1414 errors / 24% coverage ] ****** [1416 done /1298 queued / 16 running / 1415 errors / 24% coverage ] ****** [1416 done /1298 queued / 16 running / 1415 errors / 24% coverage ] ****** [1417 done /1299 queued / 16 running / 1416 errors / 24% coverage ] ****** [1417 done /1299 queued / 16 running / 1416 errors / 24% coverage ] ****** [1418 done /1301 queued / 16 running / 1417 errors / 24% coverage ] ****** [1418 done /1301 queued / 16 running / 1417 errors / 24% coverage ] ****** [1419 done /1301 queued / 16 running / 1418 errors / 24% coverage ] ****** [1419 done /1301 queued / 16 running / 1418 errors / 24% coverage ] ****** [1420 done /1300 queued / 16 running / 1419 errors / 24% coverage ] ****** [1420 done /1300 queued / 16 running / 1419 errors / 24% coverage ] ****** [1421 done /1300 queued / 16 running / 1420 errors / 24% coverage ] ****** [1421 done /1300 queued / 16 running / 1420 errors / 24% coverage ] ****** [1422 done /1301 queued / 16 running / 1421 errors / 24% coverage ] ****** [1422 done /1301 queued / 16 running / 1421 errors / 24% coverage ] ****** [1423 done /1302 queued / 16 running / 1422 errors / 24% coverage ] ****** [1423 done /1302 queued / 16 running / 1422 errors / 24% coverage ] ****** [1424 done /1301 queued / 16 running / 1423 errors / 24% coverage ] ****** [1424 done /1301 queued / 16 running / 1423 errors / 24% coverage ] ****** [1425 done /1300 queued / 16 running / 1424 errors / 24% coverage ] ****** [1425 done /1300 queued / 16 running / 1424 errors / 24% coverage ] ****** [1426 done /1300 queued / 16 running / 1425 errors / 24% coverage ] ****** [1426 done /1300 queued / 16 running / 1425 errors / 24% coverage ] ****** [1427 done /1303 queued / 16 running / 1426 errors / 24% coverage ] ****** [1427 done /1303 queued / 16 running / 1426 errors / 24% coverage ] ****** [1428 done /1305 queued / 16 running / 1427 errors / 24% coverage ] ****** [1428 done /1305 queued / 16 running / 1427 errors / 24% coverage ] ****** [1429 done /1309 queued / 16 running / 1428 errors / 24% coverage ] ****** [1429 done /1309 queued / 16 running / 1428 errors / 24% coverage ] ****** [1430 done /1311 queued / 16 running / 1429 errors / 24% coverage ] ****** [1430 done /1311 queued / 16 running / 1429 errors / 24% coverage ] ****** [1431 done /1312 queued / 16 running / 1430 errors / 24% coverage ] ****** [1431 done /1312 queued / 16 running / 1430 errors / 24% coverage ] ****** [1432 done /1311 queued / 16 running / 1431 errors / 24% coverage ] ****** [1432 done /1311 queued / 16 running / 1431 errors / 24% coverage ] ****** [1433 done /1311 queued / 16 running / 1432 errors / 24% coverage ] ****** [1433 done /1311 queued / 16 running / 1432 errors / 24% coverage ] ****** [1434 done /1313 queued / 16 running / 1433 errors / 24% coverage ] ****** [1434 done /1313 queued / 16 running / 1433 errors / 24% coverage ] ****** [1435 done /1317 queued / 16 running / 1434 errors / 24% coverage ] ****** [1435 done /1317 queued / 16 running / 1434 errors / 24% coverage ] ****** [1436 done /1316 queued / 16 running / 1435 errors / 24% coverage ] ****** [1436 done /1316 queued / 16 running / 1435 errors / 24% coverage ] ****** [1437 done /1319 queued / 16 running / 1436 errors / 24% coverage ] ****** [1437 done /1319 queued / 16 running / 1436 errors / 24% coverage ] ****** [1438 done /1323 queued / 16 running / 1437 errors / 24% coverage ] ****** [1438 done /1323 queued / 16 running / 1437 errors / 24% coverage ] ****** [1439 done /1327 queued / 16 running / 1438 errors / 24% coverage ] ****** [1439 done /1327 queued / 16 running / 1438 errors / 24% coverage ] ****** [1440 done /1326 queued / 16 running / 1439 errors / 24% coverage ] ****** [1440 done /1326 queued / 16 running / 1439 errors / 24% coverage ] ****** [1441 done /1325 queued / 16 running / 1440 errors / 24% coverage ] ****** [1441 done /1325 queued / 16 running / 1440 errors / 24% coverage ] ****** [1442 done /1326 queued / 16 running / 1441 errors / 24% coverage ] ****** [1442 done /1326 queued / 16 running / 1441 errors / 24% coverage ] ****** [1443 done /1325 queued / 16 running / 1442 errors / 24% coverage ] ****** [1443 done /1325 queued / 16 running / 1442 errors / 24% coverage ] ****** [1444 done /1324 queued / 16 running / 1443 errors / 24% coverage ] ****** [1444 done /1324 queued / 16 running / 1443 errors / 24% coverage ] ****** [1445 done /1328 queued / 16 running / 1444 errors / 24% coverage ] ****** [1445 done /1328 queued / 16 running / 1444 errors / 24% coverage ] ****** [1446 done /1331 queued / 16 running / 1445 errors / 24% coverage ] ****** [1446 done /1331 queued / 16 running / 1445 errors / 24% coverage ] ****** [1447 done /1332 queued / 16 running / 1446 errors / 24% coverage ] ****** [1447 done /1332 queued / 16 running / 1446 errors / 24% coverage ] ****** [1448 done /1331 queued / 16 running / 1447 errors / 24% coverage ] ****** [1448 done /1331 queued / 16 running / 1447 errors / 24% coverage ] ****** [1449 done /1330 queued / 16 running / 1448 errors / 24% coverage ] ****** [1449 done /1330 queued / 16 running / 1448 errors / 24% coverage ] ****** [1450 done /1331 queued / 16 running / 1449 errors / 24% coverage ] ****** [1450 done /1331 queued / 16 running / 1449 errors / 24% coverage ] ****** [1451 done /1330 queued / 16 running / 1450 errors / 24% coverage ] ****** [1451 done /1330 queued / 16 running / 1450 errors / 24% coverage ] ****** [1452 done /1329 queued / 16 running / 1451 errors / 24% coverage ] ****** [1452 done /1329 queued / 16 running / 1451 errors / 24% coverage ] ****** [1453 done /1331 queued / 16 running / 1452 errors / 24% coverage ] ****** [1453 done /1331 queued / 16 running / 1452 errors / 24% coverage ] ****** [1454 done /1331 queued / 16 running / 1453 errors / 24% coverage ] ****** [1454 done /1331 queued / 16 running / 1453 errors / 24% coverage ] ****** [1455 done /1330 queued / 16 running / 1454 errors / 24% coverage ] ****** [1455 done /1330 queued / 16 running / 1454 errors / 24% coverage ] ****** [1456 done /1330 queued / 16 running / 1455 errors / 24% coverage ] ****** [1456 done /1330 queued / 16 running / 1455 errors / 24% coverage ] ****** [1457 done /1330 queued / 16 running / 1456 errors / 24% coverage ] ****** [1457 done /1330 queued / 16 running / 1456 errors / 24% coverage ] ****** [1458 done /1329 queued / 16 running / 1457 errors / 24% coverage ] ****** [1458 done /1329 queued / 16 running / 1457 errors / 24% coverage ] ****** [1459 done /1329 queued / 16 running / 1458 errors / 24% coverage ] ****** [1459 done /1329 queued / 16 running / 1458 errors / 24% coverage ] ****** [1460 done /1330 queued / 16 running / 1459 errors / 24% coverage ] ****** [1460 done /1330 queued / 16 running / 1459 errors / 24% coverage ] ****** [1461 done /1332 queued / 16 running / 1460 errors / 24% coverage ] ****** [1461 done /1332 queued / 16 running / 1460 errors / 24% coverage ] ****** [1462 done /1331 queued / 16 running / 1461 errors / 24% coverage ] ****** [1462 done /1331 queued / 16 running / 1461 errors / 24% coverage ] ****** [1463 done /1335 queued / 16 running / 1462 errors / 24% coverage ] ****** [1463 done /1335 queued / 16 running / 1462 errors / 24% coverage ] ****** [1464 done /1335 queued / 16 running / 1463 errors / 24% coverage ] ****** [1464 done /1335 queued / 16 running / 1463 errors / 24% coverage ] ****** [1465 done /1336 queued / 16 running / 1464 errors / 24% coverage ] ****** [1465 done /1336 queued / 16 running / 1464 errors / 24% coverage ] ****** [1466 done /1340 queued / 16 running / 1465 errors / 24% coverage ] ****** [1466 done /1340 queued / 16 running / 1465 errors / 24% coverage ] ****** [1467 done /1345 queued / 16 running / 1466 errors / 24% coverage ] ****** [1467 done /1345 queued / 16 running / 1466 errors / 24% coverage ] ****** [1468 done /1346 queued / 16 running / 1467 errors / 24% coverage ] ****** [1468 done /1346 queued / 16 running / 1467 errors / 24% coverage ] ****** [1469 done /1348 queued / 16 running / 1468 errors / 24% coverage ] ****** [1469 done /1348 queued / 16 running / 1468 errors / 24% coverage ] ****** [1470 done /1352 queued / 16 running / 1469 errors / 24% coverage ] ****** [1470 done /1352 queued / 16 running / 1469 errors / 24% coverage ] ****** [1471 done /1357 queued / 16 running / 1470 errors / 24% coverage ] ****** [1471 done /1357 queued / 16 running / 1470 errors / 24% coverage ] ****** [1472 done /1360 queued / 16 running / 1471 errors / 24% coverage ] ****** [1472 done /1360 queued / 16 running / 1471 errors / 24% coverage ] ****** [1473 done /1359 queued / 16 running / 1472 errors / 24% coverage ] ****** [1473 done /1359 queued / 16 running / 1472 errors / 24% coverage ] ****** [1474 done /1361 queued / 16 running / 1473 errors / 24% coverage ] ****** [1474 done /1361 queued / 16 running / 1473 errors / 24% coverage ] ****** [1475 done /1360 queued / 16 running / 1474 errors / 24% coverage ] ****** [1475 done /1360 queued / 16 running / 1474 errors / 24% coverage ] ****** [1476 done /1359 queued / 16 running / 1475 errors / 24% coverage ] ****** [1476 done /1359 queued / 16 running / 1475 errors / 24% coverage ] ****** [1477 done /1360 queued / 16 running / 1476 errors / 24% coverage ] ****** [1477 done /1360 queued / 16 running / 1476 errors / 24% coverage ] ****** [1478 done /1360 queued / 16 running / 1477 errors / 24% coverage ] ****** [1478 done /1360 queued / 16 running / 1477 errors / 24% coverage ] ****** [1479 done /1362 queued / 16 running / 1478 errors / 24% coverage ] ****** [1479 done /1362 queued / 16 running / 1478 errors / 24% coverage ] ****** [1480 done /1362 queued / 16 running / 1479 errors / 24% coverage ] ****** [1480 done /1362 queued / 16 running / 1479 errors / 24% coverage ] ****** [1481 done /1366 queued / 16 running / 1480 errors / 24% coverage ] ****** [1481 done /1366 queued / 16 running / 1480 errors / 24% coverage ] ****** [1482 done /1365 queued / 16 running / 1481 errors / 24% coverage ] ****** [1482 done /1365 queued / 16 running / 1481 errors / 24% coverage ] ****** [1483 done /1366 queued / 16 running / 1482 errors / 24% coverage ] ****** [1483 done /1366 queued / 16 running / 1482 errors / 24% coverage ] ****** [1484 done /1368 queued / 16 running / 1483 errors / 24% coverage ] ****** [1484 done /1368 queued / 16 running / 1483 errors / 24% coverage ] ****** [1485 done /1368 queued / 16 running / 1484 errors / 24% coverage ] ****** [1485 done /1368 queued / 16 running / 1484 errors / 24% coverage ] ****** [1486 done /1369 queued / 16 running / 1485 errors / 24% coverage ] ****** [1486 done /1369 queued / 16 running / 1485 errors / 24% coverage ] ****** [1487 done /1371 queued / 16 running / 1486 errors / 24% coverage ] ****** [1487 done /1371 queued / 16 running / 1486 errors / 24% coverage ] ****** [1488 done /1372 queued / 16 running / 1487 errors / 24% coverage ] ****** [1488 done /1372 queued / 16 running / 1487 errors / 24% coverage ] ****** [1489 done /1373 queued / 16 running / 1488 errors / 24% coverage ] ****** [1489 done /1373 queued / 16 running / 1488 errors / 24% coverage ] ****** [1490 done /1375 queued / 16 running / 1489 errors / 24% coverage ] ****** [1490 done /1375 queued / 16 running / 1489 errors / 24% coverage ] ****** [1491 done /1375 queued / 16 running / 1490 errors / 24% coverage ] ****** [1491 done /1375 queued / 16 running / 1490 errors / 24% coverage ] ****** [1492 done /1376 queued / 16 running / 1491 errors / 24% coverage ] ****** [1492 done /1376 queued / 16 running / 1491 errors / 24% coverage ] ****** [1493 done /1376 queued / 16 running / 1492 errors / 24% coverage ] ****** [1493 done /1376 queued / 16 running / 1492 errors / 24% coverage ] ****** [1494 done /1375 queued / 16 running / 1493 errors / 24% coverage ] ****** [1494 done /1375 queued / 16 running / 1493 errors / 24% coverage ] ****** [1495 done /1375 queued / 16 running / 1494 errors / 24% coverage ] ****** [1495 done /1375 queued / 16 running / 1494 errors / 24% coverage ] ****** [1496 done /1376 queued / 16 running / 1495 errors / 24% coverage ] ****** [1496 done /1376 queued / 16 running / 1495 errors / 24% coverage ] ****** [1497 done /1377 queued / 16 running / 1496 errors / 24% coverage ] ****** [1497 done /1377 queued / 16 running / 1496 errors / 24% coverage ] ****** [1498 done /1378 queued / 16 running / 1497 errors / 24% coverage ] ****** [1498 done /1378 queued / 16 running / 1497 errors / 24% coverage ] ****** [1499 done /1378 queued / 16 running / 1498 errors / 24% coverage ] ****** [1499 done /1378 queued / 16 running / 1498 errors / 24% coverage ] ****** [1500 done /1379 queued / 16 running / 1499 errors / 24% coverage ] ****** [1500 done /1379 queued / 16 running / 1499 errors / 24% coverage ] ****** [1501 done /1379 queued / 16 running / 1500 errors / 24% coverage ] ****** [1501 done /1379 queued / 16 running / 1500 errors / 24% coverage ] ****** [1502 done /1383 queued / 16 running / 1501 errors / 24% coverage ] ****** [1502 done /1383 queued / 16 running / 1501 errors / 24% coverage ] ****** [1503 done /1387 queued / 16 running / 1502 errors / 24% coverage ] ****** [1503 done /1387 queued / 16 running / 1502 errors / 24% coverage ] ****** [1504 done /1390 queued / 16 running / 1503 errors / 24% coverage ] ****** [1504 done /1390 queued / 16 running / 1503 errors / 24% coverage ] ****** [1505 done /1395 queued / 16 running / 1504 errors / 24% coverage ] ****** [1505 done /1395 queued / 16 running / 1504 errors / 24% coverage ] ****** [1506 done /1395 queued / 16 running / 1505 errors / 24% coverage ] ****** [1506 done /1395 queued / 16 running / 1505 errors / 24% coverage ] ****** [1507 done /1396 queued / 16 running / 1506 errors / 24% coverage ] ****** [1507 done /1396 queued / 16 running / 1506 errors / 24% coverage ] ****** [1508 done /1398 queued / 16 running / 1507 errors / 24% coverage ] ****** [1508 done /1398 queued / 16 running / 1507 errors / 24% coverage ] ****** [1509 done /1397 queued / 16 running / 1508 errors / 24% coverage ] ****** [1509 done /1397 queued / 16 running / 1508 errors / 24% coverage ] ****** [1510 done /1397 queued / 16 running / 1509 errors / 24% coverage ] ****** [1510 done /1397 queued / 16 running / 1509 errors / 24% coverage ] ****** [1511 done /1396 queued / 16 running / 1510 errors / 24% coverage ] ****** [1511 done /1396 queued / 16 running / 1510 errors / 24% coverage ] ****** [1512 done /1395 queued / 16 running / 1511 errors / 24% coverage ] ****** [1512 done /1395 queued / 16 running / 1511 errors / 24% coverage ] ****** [1513 done /1396 queued / 16 running / 1512 errors / 24% coverage ] ****** [1513 done /1396 queued / 16 running / 1512 errors / 24% coverage ] ****** [1514 done /1397 queued / 16 running / 1513 errors / 24% coverage ] ****** [1514 done /1397 queued / 16 running / 1513 errors / 24% coverage ] ****** [1515 done /1396 queued / 16 running / 1514 errors / 24% coverage ] ****** [1515 done /1396 queued / 16 running / 1514 errors / 24% coverage ] ****** [1516 done /1397 queued / 16 running / 1515 errors / 24% coverage ] ****** [1516 done /1397 queued / 16 running / 1515 errors / 24% coverage ] ****** [1517 done /1401 queued / 16 running / 1516 errors / 24% coverage ] ****** [1517 done /1401 queued / 16 running / 1516 errors / 24% coverage ] ****** [1518 done /1405 queued / 16 running / 1517 errors / 24% coverage ] ****** [1518 done /1405 queued / 16 running / 1517 errors / 24% coverage ] ****** [1519 done /1406 queued / 16 running / 1518 errors / 24% coverage ] ****** [1519 done /1406 queued / 16 running / 1518 errors / 24% coverage ] ****** [1520 done /1406 queued / 16 running / 1519 errors / 24% coverage ] ****** [1520 done /1406 queued / 16 running / 1519 errors / 24% coverage ] ****** [1521 done /1406 queued / 16 running / 1520 errors / 24% coverage ] ****** [1521 done /1406 queued / 16 running / 1520 errors / 24% coverage ] ****** [1522 done /1406 queued / 16 running / 1521 errors / 24% coverage ] ****** [1522 done /1406 queued / 16 running / 1521 errors / 24% coverage ] ****** [1523 done /1406 queued / 16 running / 1522 errors / 24% coverage ] ****** [1523 done /1406 queued / 16 running / 1522 errors / 24% coverage ] ****** [1524 done /1405 queued / 16 running / 1523 errors / 24% coverage ] ****** [1524 done /1405 queued / 16 running / 1523 errors / 24% coverage ] ****** [1525 done /1406 queued / 16 running / 1524 errors / 24% coverage ] ****** [1525 done /1406 queued / 16 running / 1524 errors / 24% coverage ] ****** [1526 done /1405 queued / 16 running / 1525 errors / 24% coverage ] ****** [1526 done /1405 queued / 16 running / 1525 errors / 24% coverage ] ****** [1527 done /1409 queued / 16 running / 1526 errors / 24% coverage ] ****** [1527 done /1409 queued / 16 running / 1526 errors / 24% coverage ] ****** [1528 done /1409 queued / 16 running / 1527 errors / 24% coverage ] ****** [1528 done /1409 queued / 16 running / 1527 errors / 24% coverage ] ****** [1529 done /1411 queued / 16 running / 1528 errors / 24% coverage ] ****** [1529 done /1411 queued / 16 running / 1528 errors / 24% coverage ] ****** [1530 done /1412 queued / 16 running / 1529 errors / 24% coverage ] ****** [1530 done /1412 queued / 16 running / 1529 errors / 24% coverage ] ****** [1531 done /1413 queued / 16 running / 1530 errors / 24% coverage ] ****** [1531 done /1413 queued / 16 running / 1530 errors / 24% coverage ] ****** [1532 done /1414 queued / 16 running / 1531 errors / 24% coverage ] ****** [1532 done /1414 queued / 16 running / 1531 errors / 24% coverage ] ****** [1533 done /1414 queued / 16 running / 1532 errors / 24% coverage ] ****** [1533 done /1414 queued / 16 running / 1532 errors / 24% coverage ] ****** [1534 done /1414 queued / 16 running / 1533 errors / 24% coverage ] ****** [1534 done /1414 queued / 16 running / 1533 errors / 24% coverage ] ****** [1535 done /1414 queued / 16 running / 1534 errors / 24% coverage ] ****** [1535 done /1414 queued / 16 running / 1534 errors / 24% coverage ] ****** [1536 done /1417 queued / 16 running / 1535 errors / 24% coverage ] ****** [1536 done /1417 queued / 16 running / 1535 errors / 24% coverage ] ****** [1537 done /1418 queued / 16 running / 1536 errors / 24% coverage ] ****** [1537 done /1418 queued / 16 running / 1536 errors / 24% coverage ] ****** [1538 done /1417 queued / 16 running / 1537 errors / 24% coverage ] ****** [1538 done /1417 queued / 16 running / 1537 errors / 24% coverage ] ****** [1539 done /1417 queued / 16 running / 1538 errors / 24% coverage ] ****** [1539 done /1417 queued / 16 running / 1538 errors / 24% coverage ] ****** [1540 done /1419 queued / 16 running / 1539 errors / 24% coverage ] ****** [1540 done /1419 queued / 16 running / 1539 errors / 24% coverage ] ****** [1541 done /1423 queued / 16 running / 1540 errors / 24% coverage ] ****** [1541 done /1423 queued / 16 running / 1540 errors / 24% coverage ] ****** [1542 done /1423 queued / 16 running / 1541 errors / 24% coverage ] ****** [1542 done /1423 queued / 16 running / 1541 errors / 24% coverage ] ****** [1543 done /1425 queued / 16 running / 1542 errors / 24% coverage ] ****** [1543 done /1425 queued / 16 running / 1542 errors / 24% coverage ] ****** [1544 done /1424 queued / 16 running / 1543 errors / 24% coverage ] ****** [1544 done /1424 queued / 16 running / 1543 errors / 24% coverage ] ****** [1545 done /1423 queued / 16 running / 1544 errors / 24% coverage ] ****** [1545 done /1423 queued / 16 running / 1544 errors / 24% coverage ] ****** [1546 done /1423 queued / 16 running / 1545 errors / 24% coverage ] ****** [1546 done /1423 queued / 16 running / 1545 errors / 24% coverage ] ****** [1547 done /1424 queued / 16 running / 1546 errors / 24% coverage ] ****** [1547 done /1424 queued / 16 running / 1546 errors / 24% coverage ] ****** [1548 done /1424 queued / 16 running / 1547 errors / 24% coverage ] ****** [1548 done /1424 queued / 16 running / 1547 errors / 24% coverage ] ****** [1549 done /1424 queued / 16 running / 1548 errors / 24% coverage ] ****** [1549 done /1424 queued / 16 running / 1548 errors / 24% coverage ] ****** [1550 done /1423 queued / 16 running / 1549 errors / 24% coverage ] ****** [1550 done /1423 queued / 16 running / 1549 errors / 24% coverage ] ****** [1551 done /1422 queued / 16 running / 1550 errors / 24% coverage ] ****** [1551 done /1422 queued / 16 running / 1550 errors / 24% coverage ] ****** [1552 done /1422 queued / 16 running / 1551 errors / 24% coverage ] ****** [1552 done /1422 queued / 16 running / 1551 errors / 24% coverage ] ****** [1553 done /1423 queued / 16 running / 1552 errors / 24% coverage ] ****** [1553 done /1423 queued / 16 running / 1552 errors / 24% coverage ] ****** [1554 done /1423 queued / 16 running / 1553 errors / 24% coverage ] ****** [1554 done /1423 queued / 16 running / 1553 errors / 24% coverage ] ****** [1555 done /1424 queued / 16 running / 1554 errors / 24% coverage ] ****** [1555 done /1424 queued / 16 running / 1554 errors / 24% coverage ] ****** [1556 done /1423 queued / 16 running / 1555 errors / 24% coverage ] ****** [1556 done /1423 queued / 16 running / 1555 errors / 24% coverage ] ****** [1557 done /1423 queued / 16 running / 1556 errors / 24% coverage ] ****** [1557 done /1423 queued / 16 running / 1556 errors / 24% coverage ] ****** [1558 done /1424 queued / 16 running / 1557 errors / 24% coverage ] ****** [1558 done /1424 queued / 16 running / 1557 errors / 24% coverage ] ****** [1559 done /1424 queued / 16 running / 1558 errors / 24% coverage ] ****** [1559 done /1424 queued / 16 running / 1558 errors / 24% coverage ] ****** [1560 done /1424 queued / 16 running / 1559 errors / 24% coverage ] ****** [1560 done /1424 queued / 16 running / 1559 errors / 24% coverage ] ****** [1561 done /1429 queued / 16 running / 1560 errors / 24% coverage ] ****** [1561 done /1429 queued / 16 running / 1560 errors / 24% coverage ] ****** [1562 done /1432 queued / 16 running / 1561 errors / 24% coverage ] ****** [1562 done /1432 queued / 16 running / 1561 errors / 24% coverage ] ****** [1563 done /1433 queued / 16 running / 1562 errors / 24% coverage ] ****** [1563 done /1433 queued / 16 running / 1562 errors / 24% coverage ] ****** [1564 done /1438 queued / 16 running / 1563 errors / 24% coverage ] ****** [1564 done /1438 queued / 16 running / 1563 errors / 24% coverage ] ****** [1565 done /1438 queued / 16 running / 1564 errors / 24% coverage ] ****** [1565 done /1438 queued / 16 running / 1564 errors / 24% coverage ] ****** [1566 done /1437 queued / 16 running / 1565 errors / 24% coverage ] ****** [1566 done /1437 queued / 16 running / 1565 errors / 24% coverage ] ****** [1567 done /1440 queued / 16 running / 1566 errors / 24% coverage ] ****** [1567 done /1440 queued / 16 running / 1566 errors / 24% coverage ] ****** [1568 done /1439 queued / 16 running / 1567 errors / 24% coverage ] ****** [1568 done /1439 queued / 16 running / 1567 errors / 24% coverage ] ****** [1569 done /1440 queued / 16 running / 1568 errors / 24% coverage ] ****** [1569 done /1440 queued / 16 running / 1568 errors / 24% coverage ] ****** [1570 done /1439 queued / 16 running / 1569 errors / 24% coverage ] ****** [1570 done /1439 queued / 16 running / 1569 errors / 24% coverage ] ****** [1571 done /1439 queued / 16 running / 1570 errors / 24% coverage ] ****** [1571 done /1439 queued / 16 running / 1570 errors / 24% coverage ] ****** [1572 done /1438 queued / 16 running / 1571 errors / 24% coverage ] ****** [1572 done /1438 queued / 16 running / 1571 errors / 24% coverage ] ****** [1573 done /1442 queued / 16 running / 1572 errors / 24% coverage ] ****** [1573 done /1442 queued / 16 running / 1572 errors / 24% coverage ] ****** [1574 done /1441 queued / 16 running / 1573 errors / 24% coverage ] ****** [1574 done /1441 queued / 16 running / 1573 errors / 24% coverage ] ****** [1575 done /1442 queued / 16 running / 1574 errors / 24% coverage ] ****** [1575 done /1442 queued / 16 running / 1574 errors / 24% coverage ] ****** [1576 done /1443 queued / 16 running / 1575 errors / 24% coverage ] ****** [1576 done /1443 queued / 16 running / 1575 errors / 24% coverage ] ****** [1577 done /1445 queued / 16 running / 1576 errors / 24% coverage ] ****** [1577 done /1445 queued / 16 running / 1576 errors / 24% coverage ] ****** [1578 done /1447 queued / 16 running / 1577 errors / 24% coverage ] ****** [1578 done /1447 queued / 16 running / 1577 errors / 24% coverage ] ****** [1579 done /1452 queued / 16 running / 1578 errors / 24% coverage ] ****** [1579 done /1452 queued / 16 running / 1578 errors / 24% coverage ] ****** [1580 done /1453 queued / 16 running / 1579 errors / 24% coverage ] ****** [1580 done /1453 queued / 16 running / 1579 errors / 24% coverage ] ****** [1581 done /1454 queued / 16 running / 1580 errors / 24% coverage ] ****** [1581 done /1454 queued / 16 running / 1580 errors / 24% coverage ] ****** [1582 done /1455 queued / 16 running / 1581 errors / 24% coverage ] ****** [1582 done /1455 queued / 16 running / 1581 errors / 24% coverage ] ****** [1583 done /1459 queued / 16 running / 1582 errors / 24% coverage ] ****** [1583 done /1459 queued / 16 running / 1582 errors / 24% coverage ] ****** [1584 done /1458 queued / 16 running / 1583 errors / 24% coverage ] ****** [1584 done /1458 queued / 16 running / 1583 errors / 24% coverage ] ****** [1585 done /1463 queued / 16 running / 1584 errors / 24% coverage ] ****** [1585 done /1463 queued / 16 running / 1584 errors / 24% coverage ] ****** [1586 done /1465 queued / 16 running / 1585 errors / 24% coverage ] ****** [1586 done /1465 queued / 16 running / 1585 errors / 24% coverage ] ****** [1587 done /1465 queued / 16 running / 1586 errors / 24% coverage ] ****** [1587 done /1465 queued / 16 running / 1586 errors / 24% coverage ] ****** [1588 done /1469 queued / 16 running / 1587 errors / 24% coverage ] ****** [1588 done /1469 queued / 16 running / 1587 errors / 24% coverage ] ****** [1589 done /1469 queued / 16 running / 1588 errors / 24% coverage ] ****** [1589 done /1469 queued / 16 running / 1588 errors / 24% coverage ] ****** [1590 done /1470 queued / 16 running / 1589 errors / 24% coverage ] ****** [1590 done /1470 queued / 16 running / 1589 errors / 24% coverage ] ****** [1591 done /1469 queued / 16 running / 1590 errors / 24% coverage ] ****** [1591 done /1469 queued / 16 running / 1590 errors / 24% coverage ] ****** [1592 done /1469 queued / 16 running / 1591 errors / 24% coverage ] ****** [1592 done /1469 queued / 16 running / 1591 errors / 24% coverage ] ****** [1593 done /1469 queued / 16 running / 1592 errors / 24% coverage ] ****** [1593 done /1469 queued / 16 running / 1592 errors / 24% coverage ] ****** [1594 done /1471 queued / 16 running / 1593 errors / 24% coverage ] ****** [1594 done /1471 queued / 16 running / 1593 errors / 24% coverage ] ****** [1595 done /1472 queued / 16 running / 1594 errors / 24% coverage ] ****** [1595 done /1472 queued / 16 running / 1594 errors / 24% coverage ] ****** [1596 done /1473 queued / 16 running / 1595 errors / 24% coverage ] ****** [1596 done /1473 queued / 16 running / 1595 errors / 24% coverage ] ****** [1597 done /1475 queued / 16 running / 1596 errors / 24% coverage ] ****** [1597 done /1475 queued / 16 running / 1596 errors / 24% coverage ] ****** [1598 done /1476 queued / 16 running / 1597 errors / 24% coverage ] ****** [1598 done /1476 queued / 16 running / 1597 errors / 24% coverage ] ****** [1599 done /1478 queued / 16 running / 1598 errors / 24% coverage ] ****** [1599 done /1478 queued / 16 running / 1598 errors / 24% coverage ] ****** [1600 done /1479 queued / 16 running / 1599 errors / 24% coverage ] ****** [1600 done /1479 queued / 16 running / 1599 errors / 24% coverage ] ****** [1601 done /1483 queued / 16 running / 1600 errors / 24% coverage ] ****** [1601 done /1483 queued / 16 running / 1600 errors / 24% coverage ] ****** [1602 done /1485 queued / 16 running / 1601 errors / 24% coverage ] ****** [1602 done /1485 queued / 16 running / 1601 errors / 24% coverage ] ****** [1603 done /1485 queued / 16 running / 1602 errors / 24% coverage ] ****** [1603 done /1485 queued / 16 running / 1602 errors / 24% coverage ] ****** [1604 done /1486 queued / 16 running / 1603 errors / 24% coverage ] ****** [1604 done /1486 queued / 16 running / 1603 errors / 24% coverage ] ****** [1605 done /1487 queued / 16 running / 1604 errors / 24% coverage ] ****** [1605 done /1487 queued / 16 running / 1604 errors / 24% coverage ] ****** [1606 done /1488 queued / 16 running / 1605 errors / 24% coverage ] ****** [1606 done /1488 queued / 16 running / 1605 errors / 24% coverage ] ****** [1607 done /1488 queued / 16 running / 1606 errors / 24% coverage ] ****** [1607 done /1488 queued / 16 running / 1606 errors / 24% coverage ] ****** [1608 done /1487 queued / 16 running / 1607 errors / 24% coverage ] ****** [1608 done /1487 queued / 16 running / 1607 errors / 24% coverage ] ****** [1609 done /1489 queued / 16 running / 1608 errors / 24% coverage ] ****** [1609 done /1489 queued / 16 running / 1608 errors / 24% coverage ] ****** [1610 done /1489 queued / 16 running / 1609 errors / 24% coverage ] ****** [1610 done /1489 queued / 16 running / 1609 errors / 24% coverage ] ****** [1611 done /1489 queued / 16 running / 1610 errors / 24% coverage ] ****** [1611 done /1489 queued / 16 running / 1610 errors / 24% coverage ] ****** [1612 done /1493 queued / 16 running / 1611 errors / 24% coverage ] ****** [1612 done /1493 queued / 16 running / 1611 errors / 24% coverage ] ****** [1613 done /1492 queued / 16 running / 1612 errors / 24% coverage ] ****** [1613 done /1492 queued / 16 running / 1612 errors / 24% coverage ] ****** [1614 done /1492 queued / 16 running / 1613 errors / 24% coverage ] ****** [1614 done /1492 queued / 16 running / 1613 errors / 24% coverage ] ****** [1615 done /1493 queued / 16 running / 1614 errors / 24% coverage ] ****** [1615 done /1493 queued / 16 running / 1614 errors / 24% coverage ] ****** [1616 done /1493 queued / 16 running / 1615 errors / 24% coverage ] ****** [1616 done /1493 queued / 16 running / 1615 errors / 24% coverage ] ****** [1617 done /1495 queued / 16 running / 1616 errors / 24% coverage ] ****** [1617 done /1495 queued / 16 running / 1616 errors / 24% coverage ] ****** [1618 done /1495 queued / 16 running / 1617 errors / 24% coverage ] ****** [1618 done /1495 queued / 16 running / 1617 errors / 24% coverage ] ****** [1619 done /1496 queued / 16 running / 1618 errors / 24% coverage ] ****** [1619 done /1496 queued / 16 running / 1618 errors / 24% coverage ] ****** [1620 done /1495 queued / 16 running / 1619 errors / 24% coverage ] ****** [1620 done /1495 queued / 16 running / 1619 errors / 24% coverage ] ****** [1621 done /1496 queued / 16 running / 1620 errors / 24% coverage ] ****** [1621 done /1496 queued / 16 running / 1620 errors / 24% coverage ] ****** [1622 done /1497 queued / 16 running / 1621 errors / 24% coverage ] ****** [1622 done /1497 queued / 16 running / 1621 errors / 24% coverage ] ****** [1623 done /1500 queued / 16 running / 1622 errors / 24% coverage ] ****** [1623 done /1500 queued / 16 running / 1622 errors / 24% coverage ] ****** [1624 done /1502 queued / 16 running / 1623 errors / 24% coverage ] ****** [1624 done /1502 queued / 16 running / 1623 errors / 24% coverage ] ****** [1625 done /1503 queued / 16 running / 1624 errors / 24% coverage ] ****** [1625 done /1503 queued / 16 running / 1624 errors / 24% coverage ] ****** [1626 done /1503 queued / 16 running / 1625 errors / 24% coverage ] ****** [1626 done /1503 queued / 16 running / 1625 errors / 24% coverage ] ****** [1627 done /1504 queued / 16 running / 1626 errors / 24% coverage ] ****** [1627 done /1504 queued / 16 running / 1626 errors / 24% coverage ] ****** [1628 done /1509 queued / 16 running / 1627 errors / 24% coverage ] ****** [1628 done /1509 queued / 16 running / 1627 errors / 24% coverage ] ****** [1629 done /1510 queued / 16 running / 1628 errors / 24% coverage ] ****** [1629 done /1510 queued / 16 running / 1628 errors / 24% coverage ] ****** [1630 done /1510 queued / 16 running / 1629 errors / 24% coverage ] ****** [1630 done /1510 queued / 16 running / 1629 errors / 24% coverage ] ****** [1631 done /1510 queued / 16 running / 1630 errors / 24% coverage ] ****** [1631 done /1510 queued / 16 running / 1630 errors / 24% coverage ] ****** [1632 done /1514 queued / 16 running / 1631 errors / 24% coverage ] ****** [1632 done /1514 queued / 16 running / 1631 errors / 24% coverage ] ****** [1633 done /1513 queued / 16 running / 1632 errors / 24% coverage ] ****** [1633 done /1513 queued / 16 running / 1632 errors / 24% coverage ] ****** [1634 done /1512 queued / 16 running / 1633 errors / 24% coverage ] ****** [1634 done /1512 queued / 16 running / 1633 errors / 24% coverage ] ****** [1635 done /1511 queued / 16 running / 1634 errors / 24% coverage ] ****** [1635 done /1511 queued / 16 running / 1634 errors / 24% coverage ] ****** [1636 done /1512 queued / 16 running / 1635 errors / 24% coverage ] ****** [1636 done /1512 queued / 16 running / 1635 errors / 24% coverage ] ****** [1637 done /1515 queued / 16 running / 1636 errors / 24% coverage ] ****** [1637 done /1515 queued / 16 running / 1636 errors / 24% coverage ] ****** [1638 done /1514 queued / 16 running / 1637 errors / 24% coverage ] ****** [1638 done /1514 queued / 16 running / 1637 errors / 24% coverage ] ****** [1639 done /1513 queued / 16 running / 1638 errors / 24% coverage ] ****** [1639 done /1513 queued / 16 running / 1638 errors / 24% coverage ] ****** [1640 done /1512 queued / 16 running / 1639 errors / 24% coverage ] ****** [1640 done /1512 queued / 16 running / 1639 errors / 24% coverage ] ****** [1641 done /1512 queued / 16 running / 1640 errors / 24% coverage ] ****** [1641 done /1512 queued / 16 running / 1640 errors / 24% coverage ] ****** [1642 done /1513 queued / 16 running / 1641 errors / 24% coverage ] ****** [1642 done /1513 queued / 16 running / 1641 errors / 24% coverage ] ****** [1643 done /1512 queued / 16 running / 1642 errors / 24% coverage ] ****** [1643 done /1512 queued / 16 running / 1642 errors / 24% coverage ] ****** [1644 done /1512 queued / 16 running / 1643 errors / 24% coverage ] ****** [1644 done /1512 queued / 16 running / 1643 errors / 24% coverage ] ****** [1645 done /1513 queued / 16 running / 1644 errors / 24% coverage ] ****** [1645 done /1513 queued / 16 running / 1644 errors / 24% coverage ] ****** [1646 done /1513 queued / 16 running / 1645 errors / 24% coverage ] ****** [1646 done /1513 queued / 16 running / 1645 errors / 24% coverage ] ****** [1647 done /1514 queued / 16 running / 1646 errors / 24% coverage ] ****** [1647 done /1514 queued / 16 running / 1646 errors / 24% coverage ] ****** [1648 done /1515 queued / 16 running / 1647 errors / 24% coverage ] ****** [1648 done /1515 queued / 16 running / 1647 errors / 24% coverage ] ****** [1649 done /1515 queued / 16 running / 1648 errors / 24% coverage ] ****** [1649 done /1515 queued / 16 running / 1648 errors / 24% coverage ] ****** [1650 done /1517 queued / 16 running / 1649 errors / 24% coverage ] ****** [1650 done /1517 queued / 16 running / 1649 errors / 24% coverage ] ****** [1651 done /1516 queued / 16 running / 1650 errors / 24% coverage ] ****** [1651 done /1516 queued / 16 running / 1650 errors / 24% coverage ] ****** [1652 done /1517 queued / 16 running / 1651 errors / 24% coverage ] ****** [1652 done /1517 queued / 16 running / 1651 errors / 24% coverage ] ****** [1653 done /1516 queued / 16 running / 1652 errors / 24% coverage ] ****** [1653 done /1516 queued / 16 running / 1652 errors / 24% coverage ] ****** [1654 done /1516 queued / 16 running / 1653 errors / 24% coverage ] ****** [1654 done /1516 queued / 16 running / 1653 errors / 24% coverage ] ****** [1655 done /1517 queued / 16 running / 1654 errors / 24% coverage ] ****** [1655 done /1517 queued / 16 running / 1654 errors / 24% coverage ] ****** [1656 done /1517 queued / 16 running / 1655 errors / 24% coverage ] ****** [1656 done /1517 queued / 16 running / 1655 errors / 24% coverage ] ****** [1657 done /1516 queued / 16 running / 1656 errors / 24% coverage ] ****** [1657 done /1516 queued / 16 running / 1656 errors / 24% coverage ] ****** [1658 done /1519 queued / 16 running / 1657 errors / 24% coverage ] ****** [1658 done /1519 queued / 16 running / 1657 errors / 24% coverage ] ****** [1659 done /1521 queued / 16 running / 1658 errors / 24% coverage ] ****** [1659 done /1521 queued / 16 running / 1658 errors / 24% coverage ] ****** [1660 done /1520 queued / 16 running / 1659 errors / 24% coverage ] ****** [1660 done /1520 queued / 16 running / 1659 errors / 24% coverage ] ****** [1661 done /1520 queued / 16 running / 1660 errors / 24% coverage ] ****** [1661 done /1520 queued / 16 running / 1660 errors / 24% coverage ] ****** [1662 done /1519 queued / 16 running / 1661 errors / 24% coverage ] ****** [1662 done /1519 queued / 16 running / 1661 errors / 24% coverage ] ****** [1663 done /1520 queued / 16 running / 1662 errors / 24% coverage ] ****** [1663 done /1520 queued / 16 running / 1662 errors / 24% coverage ] ****** [1664 done /1524 queued / 16 running / 1663 errors / 24% coverage ] ****** [1664 done /1524 queued / 16 running / 1663 errors / 24% coverage ] ****** [1665 done /1523 queued / 16 running / 1664 errors / 24% coverage ] ****** [1665 done /1523 queued / 16 running / 1664 errors / 24% coverage ] ****** [1666 done /1523 queued / 16 running / 1665 errors / 24% coverage ] ****** [1666 done /1523 queued / 16 running / 1665 errors / 24% coverage ] ****** [1667 done /1525 queued / 16 running / 1666 errors / 24% coverage ] ****** [1667 done /1525 queued / 16 running / 1666 errors / 24% coverage ] ****** [1668 done /1525 queued / 16 running / 1667 errors / 24% coverage ] ****** [1668 done /1525 queued / 16 running / 1667 errors / 24% coverage ] ****** [1669 done /1527 queued / 16 running / 1668 errors / 24% coverage ] ****** [1669 done /1527 queued / 16 running / 1668 errors / 24% coverage ] ****** [1670 done /1529 queued / 16 running / 1669 errors / 24% coverage ] ****** [1670 done /1529 queued / 16 running / 1669 errors / 24% coverage ] ****** [1671 done /1534 queued / 16 running / 1670 errors / 24% coverage ] ****** [1671 done /1534 queued / 16 running / 1670 errors / 24% coverage ] ****** [1672 done /1537 queued / 16 running / 1671 errors / 24% coverage ] ****** [1672 done /1537 queued / 16 running / 1671 errors / 24% coverage ] ****** [1673 done /1538 queued / 16 running / 1672 errors / 24% coverage ] ****** [1673 done /1538 queued / 16 running / 1672 errors / 24% coverage ] ****** [1674 done /1538 queued / 16 running / 1673 errors / 24% coverage ] ****** [1674 done /1538 queued / 16 running / 1673 errors / 24% coverage ] ****** [1675 done /1538 queued / 16 running / 1674 errors / 24% coverage ] ****** [1675 done /1538 queued / 16 running / 1674 errors / 24% coverage ] ****** [1676 done /1537 queued / 16 running / 1675 errors / 24% coverage ] ****** [1676 done /1537 queued / 16 running / 1675 errors / 24% coverage ] ****** [1677 done /1537 queued / 16 running / 1676 errors / 24% coverage ] ****** [1677 done /1537 queued / 16 running / 1676 errors / 24% coverage ] ****** [1678 done /1537 queued / 16 running / 1677 errors / 24% coverage ] ****** [1678 done /1537 queued / 16 running / 1677 errors / 24% coverage ] ****** [1679 done /1539 queued / 16 running / 1678 errors / 24% coverage ] ****** [1679 done /1539 queued / 16 running / 1678 errors / 24% coverage ] ****** [1680 done /1540 queued / 16 running / 1679 errors / 24% coverage ] ****** [1680 done /1540 queued / 16 running / 1679 errors / 24% coverage ] ****** [1681 done /1541 queued / 16 running / 1680 errors / 24% coverage ] ****** [1681 done /1541 queued / 16 running / 1680 errors / 24% coverage ] ****** [1682 done /1542 queued / 16 running / 1681 errors / 24% coverage ] ****** [1682 done /1542 queued / 16 running / 1681 errors / 24% coverage ] ****** [1683 done /1543 queued / 16 running / 1682 errors / 24% coverage ] ****** [1683 done /1543 queued / 16 running / 1682 errors / 24% coverage ] ****** [1684 done /1542 queued / 16 running / 1683 errors / 24% coverage ] ****** [1684 done /1542 queued / 16 running / 1683 errors / 24% coverage ] ****** [1685 done /1544 queued / 16 running / 1684 errors / 24% coverage ] ****** [1685 done /1544 queued / 16 running / 1684 errors / 24% coverage ] ****** [1686 done /1544 queued / 16 running / 1685 errors / 24% coverage ] ****** [1686 done /1544 queued / 16 running / 1685 errors / 24% coverage ] ****** [1687 done /1546 queued / 16 running / 1686 errors / 24% coverage ] ****** [1687 done /1546 queued / 16 running / 1686 errors / 24% coverage ] ****** [1688 done /1547 queued / 16 running / 1687 errors / 24% coverage ] ****** [1688 done /1547 queued / 16 running / 1687 errors / 24% coverage ] ****** [1689 done /1547 queued / 16 running / 1688 errors / 24% coverage ] ****** [1689 done /1547 queued / 16 running / 1688 errors / 24% coverage ] ****** [1690 done /1548 queued / 16 running / 1689 errors / 24% coverage ] ****** [1690 done /1548 queued / 16 running / 1689 errors / 24% coverage ] ****** [1691 done /1549 queued / 16 running / 1690 errors / 24% coverage ] ****** [1691 done /1549 queued / 16 running / 1690 errors / 24% coverage ] ****** [1692 done /1548 queued / 16 running / 1691 errors / 24% coverage ] ****** [1692 done /1548 queued / 16 running / 1691 errors / 24% coverage ] ****** [1693 done /1547 queued / 16 running / 1692 errors / 24% coverage ] ****** [1693 done /1547 queued / 16 running / 1692 errors / 24% coverage ] ****** [1694 done /1547 queued / 16 running / 1693 errors / 24% coverage ] ****** [1694 done /1547 queued / 16 running / 1693 errors / 24% coverage ] ****** [1695 done /1549 queued / 16 running / 1694 errors / 24% coverage ] ****** [1695 done /1549 queued / 16 running / 1694 errors / 24% coverage ] ****** [1696 done /1556 queued / 16 running / 1695 errors / 24% coverage ] ****** [1696 done /1556 queued / 16 running / 1695 errors / 24% coverage ] ****** [1697 done /1555 queued / 16 running / 1696 errors / 24% coverage ] ****** [1697 done /1555 queued / 16 running / 1696 errors / 24% coverage ] ****** [1698 done /1554 queued / 16 running / 1697 errors / 24% coverage ] ****** [1698 done /1554 queued / 16 running / 1697 errors / 24% coverage ] ****** [1699 done /1553 queued / 16 running / 1698 errors / 24% coverage ] ****** [1699 done /1553 queued / 16 running / 1698 errors / 24% coverage ] ****** [1700 done /1555 queued / 16 running / 1699 errors / 24% coverage ] ****** [1700 done /1555 queued / 16 running / 1699 errors / 24% coverage ] ****** [1701 done /1554 queued / 16 running / 1700 errors / 24% coverage ] ****** [1701 done /1554 queued / 16 running / 1700 errors / 24% coverage ] ****** [1702 done /1558 queued / 16 running / 1701 errors / 24% coverage ] ****** [1702 done /1558 queued / 16 running / 1701 errors / 24% coverage ] ****** [1703 done /1557 queued / 16 running / 1702 errors / 24% coverage ] ****** [1703 done /1557 queued / 16 running / 1702 errors / 24% coverage ] ****** [1704 done /1559 queued / 16 running / 1703 errors / 24% coverage ] ****** [1704 done /1559 queued / 16 running / 1703 errors / 24% coverage ] ****** [1705 done /1560 queued / 16 running / 1704 errors / 24% coverage ] ****** [1705 done /1560 queued / 16 running / 1704 errors / 24% coverage ] ****** [1706 done /1563 queued / 16 running / 1705 errors / 24% coverage ] ****** [1706 done /1563 queued / 16 running / 1705 errors / 24% coverage ] ****** [1707 done /1566 queued / 16 running / 1706 errors / 24% coverage ] ****** [1707 done /1566 queued / 16 running / 1706 errors / 24% coverage ] ****** [1708 done /1569 queued / 16 running / 1707 errors / 24% coverage ] ****** [1708 done /1569 queued / 16 running / 1707 errors / 24% coverage ] ****** [1709 done /1568 queued / 16 running / 1708 errors / 24% coverage ] ****** [1709 done /1568 queued / 16 running / 1708 errors / 24% coverage ] ****** [1710 done /1573 queued / 16 running / 1709 errors / 24% coverage ] ****** [1710 done /1573 queued / 16 running / 1709 errors / 24% coverage ] ****** [1711 done /1576 queued / 16 running / 1710 errors / 24% coverage ] ****** [1711 done /1576 queued / 16 running / 1710 errors / 24% coverage ] ****** [1712 done /1580 queued / 16 running / 1711 errors / 24% coverage ] ****** [1712 done /1580 queued / 16 running / 1711 errors / 24% coverage ] ****** [1713 done /1579 queued / 16 running / 1712 errors / 24% coverage ] ****** [1713 done /1579 queued / 16 running / 1712 errors / 24% coverage ] ****** [1714 done /1582 queued / 16 running / 1713 errors / 24% coverage ] ****** [1714 done /1582 queued / 16 running / 1713 errors / 24% coverage ] ****** [1715 done /1585 queued / 16 running / 1714 errors / 24% coverage ] ****** [1715 done /1585 queued / 16 running / 1714 errors / 24% coverage ] ****** [1716 done /1586 queued / 16 running / 1715 errors / 24% coverage ] ****** [1716 done /1586 queued / 16 running / 1715 errors / 24% coverage ] ****** [1717 done /1586 queued / 16 running / 1716 errors / 24% coverage ] ****** [1717 done /1586 queued / 16 running / 1716 errors / 24% coverage ] ****** [1718 done /1587 queued / 16 running / 1717 errors / 24% coverage ] ****** [1718 done /1587 queued / 16 running / 1717 errors / 24% coverage ] ****** [1719 done /1586 queued / 16 running / 1718 errors / 24% coverage ] ****** [1719 done /1586 queued / 16 running / 1718 errors / 24% coverage ] ****** [1720 done /1586 queued / 16 running / 1719 errors / 24% coverage ] ****** [1720 done /1586 queued / 16 running / 1719 errors / 24% coverage ] ****** [1721 done /1585 queued / 16 running / 1720 errors / 24% coverage ] ****** [1721 done /1585 queued / 16 running / 1720 errors / 24% coverage ] ****** [1722 done /1584 queued / 16 running / 1721 errors / 24% coverage ] ****** [1722 done /1584 queued / 16 running / 1721 errors / 24% coverage ] ****** [1723 done /1584 queued / 16 running / 1722 errors / 24% coverage ] ****** [1723 done /1584 queued / 16 running / 1722 errors / 24% coverage ] ****** [1724 done /1583 queued / 16 running / 1723 errors / 24% coverage ] ****** [1724 done /1583 queued / 16 running / 1723 errors / 24% coverage ] ****** [1725 done /1584 queued / 16 running / 1724 errors / 24% coverage ] ****** [1725 done /1584 queued / 16 running / 1724 errors / 24% coverage ] ****** [1726 done /1584 queued / 16 running / 1725 errors / 24% coverage ] ****** [1726 done /1584 queued / 16 running / 1725 errors / 24% coverage ] ****** [1727 done /1583 queued / 16 running / 1726 errors / 24% coverage ] ****** [1727 done /1583 queued / 16 running / 1726 errors / 24% coverage ] ****** [1728 done /1583 queued / 16 running / 1727 errors / 24% coverage ] ****** [1728 done /1583 queued / 16 running / 1727 errors / 24% coverage ] ****** [1729 done /1585 queued / 16 running / 1728 errors / 24% coverage ] ****** [1729 done /1585 queued / 16 running / 1728 errors / 24% coverage ] ****** [1730 done /1587 queued / 16 running / 1729 errors / 24% coverage ] ****** [1730 done /1587 queued / 16 running / 1729 errors / 24% coverage ] ****** [1731 done /1589 queued / 16 running / 1730 errors / 24% coverage ] ****** [1731 done /1589 queued / 16 running / 1730 errors / 24% coverage ] ****** [1732 done /1591 queued / 16 running / 1731 errors / 24% coverage ] ****** [1732 done /1591 queued / 16 running / 1731 errors / 24% coverage ] ****** [1733 done /1594 queued / 16 running / 1732 errors / 24% coverage ] ****** [1733 done /1594 queued / 16 running / 1732 errors / 24% coverage ] ****** [1734 done /1593 queued / 16 running / 1733 errors / 24% coverage ] ****** [1734 done /1593 queued / 16 running / 1733 errors / 24% coverage ] ****** [1735 done /1592 queued / 16 running / 1734 errors / 24% coverage ] ****** [1735 done /1592 queued / 16 running / 1734 errors / 24% coverage ] ****** [1736 done /1593 queued / 16 running / 1735 errors / 24% coverage ] ****** [1736 done /1593 queued / 16 running / 1735 errors / 24% coverage ] ****** [1737 done /1594 queued / 16 running / 1736 errors / 24% coverage ] ****** [1737 done /1594 queued / 16 running / 1736 errors / 24% coverage ] ****** [1738 done /1597 queued / 16 running / 1737 errors / 24% coverage ] ****** [1738 done /1597 queued / 16 running / 1737 errors / 24% coverage ] ****** [1739 done /1599 queued / 16 running / 1738 errors / 24% coverage ] ****** [1739 done /1599 queued / 16 running / 1738 errors / 24% coverage ] ****** [1740 done /1603 queued / 16 running / 1739 errors / 24% coverage ] ****** [1740 done /1603 queued / 16 running / 1739 errors / 24% coverage ] ****** [1741 done /1602 queued / 16 running / 1740 errors / 24% coverage ] ****** [1741 done /1602 queued / 16 running / 1740 errors / 24% coverage ] ****** [1742 done /1601 queued / 16 running / 1741 errors / 24% coverage ] ****** [1742 done /1601 queued / 16 running / 1741 errors / 24% coverage ] ****** [1743 done /1600 queued / 16 running / 1742 errors / 24% coverage ] ****** [1743 done /1600 queued / 16 running / 1742 errors / 24% coverage ] ****** [1744 done /1599 queued / 16 running / 1743 errors / 24% coverage ] ****** [1744 done /1599 queued / 16 running / 1743 errors / 24% coverage ] ****** [1745 done /1601 queued / 16 running / 1744 errors / 24% coverage ] ****** [1745 done /1601 queued / 16 running / 1744 errors / 24% coverage ] ****** [1746 done /1603 queued / 16 running / 1745 errors / 24% coverage ] ****** [1746 done /1603 queued / 16 running / 1745 errors / 24% coverage ] ****** [1747 done /1603 queued / 16 running / 1746 errors / 24% coverage ] ****** [1747 done /1603 queued / 16 running / 1746 errors / 24% coverage ] ****** [1748 done /1607 queued / 16 running / 1747 errors / 24% coverage ] ****** [1748 done /1607 queued / 16 running / 1747 errors / 24% coverage ] ****** [1749 done /1608 queued / 16 running / 1748 errors / 24% coverage ] ****** [1749 done /1608 queued / 16 running / 1748 errors / 24% coverage ] ****** [1750 done /1611 queued / 16 running / 1749 errors / 24% coverage ] ****** [1750 done /1611 queued / 16 running / 1749 errors / 24% coverage ] ****** [1751 done /1610 queued / 16 running / 1750 errors / 24% coverage ] ****** [1751 done /1610 queued / 16 running / 1750 errors / 24% coverage ] ****** [1752 done /1609 queued / 16 running / 1751 errors / 24% coverage ] ****** [1752 done /1609 queued / 16 running / 1751 errors / 24% coverage ] ****** [1753 done /1608 queued / 16 running / 1752 errors / 24% coverage ] ****** [1753 done /1608 queued / 16 running / 1752 errors / 24% coverage ] ****** [1754 done /1608 queued / 16 running / 1753 errors / 24% coverage ] ****** [1754 done /1608 queued / 16 running / 1753 errors / 24% coverage ] ****** [1755 done /1608 queued / 16 running / 1754 errors / 24% coverage ] ****** [1755 done /1608 queued / 16 running / 1754 errors / 24% coverage ] ****** [1756 done /1607 queued / 16 running / 1755 errors / 24% coverage ] ****** [1756 done /1607 queued / 16 running / 1755 errors / 24% coverage ] ****** [1757 done /1608 queued / 16 running / 1756 errors / 24% coverage ] ****** [1757 done /1608 queued / 16 running / 1756 errors / 24% coverage ] ****** [1758 done /1609 queued / 16 running / 1757 errors / 24% coverage ] ****** [1758 done /1609 queued / 16 running / 1757 errors / 24% coverage ] ****** [1759 done /1609 queued / 16 running / 1758 errors / 24% coverage ] ****** [1759 done /1609 queued / 16 running / 1758 errors / 24% coverage ] ****** [1760 done /1609 queued / 16 running / 1759 errors / 24% coverage ] ****** [1760 done /1609 queued / 16 running / 1759 errors / 24% coverage ] ****** [1761 done /1610 queued / 16 running / 1760 errors / 24% coverage ] ****** [1761 done /1610 queued / 16 running / 1760 errors / 24% coverage ] ****** [1762 done /1609 queued / 16 running / 1761 errors / 24% coverage ] ****** [1762 done /1609 queued / 16 running / 1761 errors / 24% coverage ] ****** [1763 done /1609 queued / 16 running / 1762 errors / 24% coverage ] ****** [1763 done /1609 queued / 16 running / 1762 errors / 24% coverage ] ****** [1764 done /1609 queued / 16 running / 1763 errors / 24% coverage ] ****** [1764 done /1609 queued / 16 running / 1763 errors / 24% coverage ] ****** [1765 done /1609 queued / 16 running / 1764 errors / 24% coverage ] ****** [1765 done /1609 queued / 16 running / 1764 errors / 24% coverage ] ****** [1766 done /1609 queued / 16 running / 1765 errors / 24% coverage ] ****** [1766 done /1609 queued / 16 running / 1765 errors / 24% coverage ] ****** [1767 done /1608 queued / 16 running / 1766 errors / 24% coverage ] ****** [1767 done /1608 queued / 16 running / 1766 errors / 24% coverage ] ****** [1768 done /1609 queued / 16 running / 1767 errors / 24% coverage ] ****** [1768 done /1609 queued / 16 running / 1767 errors / 24% coverage ] ****** [1769 done /1609 queued / 16 running / 1768 errors / 24% coverage ] ****** [1769 done /1609 queued / 16 running / 1768 errors / 24% coverage ] ****** [1770 done /1610 queued / 16 running / 1769 errors / 24% coverage ] ****** [1770 done /1610 queued / 16 running / 1769 errors / 24% coverage ] ****** [1771 done /1609 queued / 16 running / 1770 errors / 24% coverage ] ****** [1771 done /1609 queued / 16 running / 1770 errors / 24% coverage ] ****** [1772 done /1608 queued / 16 running / 1771 errors / 24% coverage ] ****** [1772 done /1608 queued / 16 running / 1771 errors / 24% coverage ] ****** [1773 done /1611 queued / 16 running / 1772 errors / 24% coverage ] ****** [1773 done /1611 queued / 16 running / 1772 errors / 24% coverage ] ****** [1774 done /1610 queued / 16 running / 1773 errors / 24% coverage ] ****** [1774 done /1610 queued / 16 running / 1773 errors / 24% coverage ] ****** [1775 done /1612 queued / 16 running / 1774 errors / 24% coverage ] ****** [1775 done /1612 queued / 16 running / 1774 errors / 24% coverage ] ****** [1776 done /1612 queued / 16 running / 1775 errors / 24% coverage ] ****** [1776 done /1612 queued / 16 running / 1775 errors / 24% coverage ] ****** [1777 done /1613 queued / 16 running / 1776 errors / 24% coverage ] ****** [1777 done /1613 queued / 16 running / 1776 errors / 24% coverage ] ****** [1778 done /1614 queued / 16 running / 1777 errors / 24% coverage ] ****** [1778 done /1614 queued / 16 running / 1777 errors / 24% coverage ] ****** [1779 done /1618 queued / 16 running / 1778 errors / 24% coverage ] ****** [1779 done /1618 queued / 16 running / 1778 errors / 24% coverage ] ****** [1780 done /1621 queued / 16 running / 1779 errors / 24% coverage ] ****** [1780 done /1621 queued / 16 running / 1779 errors / 24% coverage ] ****** [1781 done /1624 queued / 16 running / 1780 errors / 24% coverage ] ****** [1781 done /1624 queued / 16 running / 1780 errors / 24% coverage ] ****** [1782 done /1625 queued / 16 running / 1781 errors / 24% coverage ] ****** [1782 done /1625 queued / 16 running / 1781 errors / 24% coverage ] ****** [1783 done /1628 queued / 16 running / 1782 errors / 24% coverage ] ****** [1783 done /1628 queued / 16 running / 1782 errors / 24% coverage ] ****** [1784 done /1629 queued / 16 running / 1783 errors / 24% coverage ] ****** [1784 done /1629 queued / 16 running / 1783 errors / 24% coverage ] ****** [1785 done /1631 queued / 16 running / 1784 errors / 24% coverage ] ****** [1785 done /1631 queued / 16 running / 1784 errors / 24% coverage ] ****** [1786 done /1630 queued / 16 running / 1785 errors / 24% coverage ] ****** [1786 done /1630 queued / 16 running / 1785 errors / 24% coverage ] ****** [1787 done /1629 queued / 16 running / 1786 errors / 24% coverage ] ****** [1787 done /1629 queued / 16 running / 1786 errors / 24% coverage ] ****** [1788 done /1631 queued / 16 running / 1787 errors / 24% coverage ] ****** [1788 done /1631 queued / 16 running / 1787 errors / 24% coverage ] ****** [1789 done /1632 queued / 16 running / 1788 errors / 24% coverage ] ****** [1789 done /1632 queued / 16 running / 1788 errors / 24% coverage ] ****** [1790 done /1631 queued / 16 running / 1789 errors / 24% coverage ] ****** [1790 done /1631 queued / 16 running / 1789 errors / 24% coverage ] ****** [1791 done /1632 queued / 16 running / 1790 errors / 24% coverage ] ****** [1791 done /1632 queued / 16 running / 1790 errors / 24% coverage ] ****** [1792 done /1631 queued / 16 running / 1791 errors / 24% coverage ] ****** [1792 done /1631 queued / 16 running / 1791 errors / 24% coverage ] ****** [1793 done /1630 queued / 16 running / 1792 errors / 24% coverage ] ****** [1793 done /1630 queued / 16 running / 1792 errors / 24% coverage ] ****** [1794 done /1631 queued / 16 running / 1793 errors / 24% coverage ] ****** [1794 done /1631 queued / 16 running / 1793 errors / 24% coverage ] ****** [1795 done /1632 queued / 16 running / 1794 errors / 24% coverage ] ****** [1795 done /1632 queued / 16 running / 1794 errors / 24% coverage ] ****** [1796 done /1631 queued / 16 running / 1795 errors / 24% coverage ] ****** [1796 done /1631 queued / 16 running / 1795 errors / 24% coverage ] ****** [1797 done /1631 queued / 16 running / 1796 errors / 24% coverage ] ****** [1797 done /1631 queued / 16 running / 1796 errors / 24% coverage ] ****** [1798 done /1630 queued / 16 running / 1797 errors / 24% coverage ] ****** [1798 done /1630 queued / 16 running / 1797 errors / 24% coverage ] ****** [1799 done /1629 queued / 16 running / 1798 errors / 24% coverage ] ****** [1799 done /1629 queued / 16 running / 1798 errors / 24% coverage ] ****** [1800 done /1629 queued / 16 running / 1799 errors / 24% coverage ] ****** [1800 done /1629 queued / 16 running / 1799 errors / 24% coverage ] ****** [1801 done /1629 queued / 16 running / 1800 errors / 24% coverage ] ****** [1801 done /1629 queued / 16 running / 1800 errors / 24% coverage ] ****** [1802 done /1629 queued / 16 running / 1801 errors / 24% coverage ] ****** [1802 done /1629 queued / 16 running / 1801 errors / 24% coverage ] ****** [1803 done /1629 queued / 16 running / 1802 errors / 24% coverage ] ****** [1803 done /1629 queued / 16 running / 1802 errors / 24% coverage ] ****** [1804 done /1628 queued / 16 running / 1803 errors / 24% coverage ] ****** [1804 done /1628 queued / 16 running / 1803 errors / 24% coverage ] ****** [1805 done /1627 queued / 16 running / 1804 errors / 24% coverage ] ****** [1805 done /1627 queued / 16 running / 1804 errors / 24% coverage ] ****** [1806 done /1632 queued / 16 running / 1805 errors / 24% coverage ] ****** [1806 done /1632 queued / 16 running / 1805 errors / 24% coverage ] ****** [1807 done /1634 queued / 16 running / 1806 errors / 24% coverage ] ****** [1807 done /1634 queued / 16 running / 1806 errors / 24% coverage ] ****** [1808 done /1634 queued / 16 running / 1807 errors / 24% coverage ] ****** [1808 done /1634 queued / 16 running / 1807 errors / 24% coverage ] ****** [1809 done /1633 queued / 16 running / 1808 errors / 24% coverage ] ****** [1809 done /1633 queued / 16 running / 1808 errors / 24% coverage ] ****** [1810 done /1636 queued / 16 running / 1809 errors / 24% coverage ] ****** [1810 done /1636 queued / 16 running / 1809 errors / 24% coverage ] ****** [1811 done /1639 queued / 16 running / 1810 errors / 24% coverage ] ****** [1811 done /1639 queued / 16 running / 1810 errors / 24% coverage ] ****** [1812 done /1640 queued / 16 running / 1811 errors / 24% coverage ] ****** [1812 done /1640 queued / 16 running / 1811 errors / 24% coverage ] ****** [1813 done /1639 queued / 16 running / 1812 errors / 24% coverage ] ****** [1813 done /1639 queued / 16 running / 1812 errors / 24% coverage ] ****** [1814 done /1640 queued / 16 running / 1813 errors / 24% coverage ] ****** [1814 done /1640 queued / 16 running / 1813 errors / 24% coverage ] ****** [1815 done /1639 queued / 16 running / 1814 errors / 24% coverage ] ****** [1815 done /1639 queued / 16 running / 1814 errors / 24% coverage ] ****** [1816 done /1638 queued / 16 running / 1815 errors / 24% coverage ] ****** [1816 done /1638 queued / 16 running / 1815 errors / 24% coverage ] ****** [1817 done /1640 queued / 16 running / 1816 errors / 24% coverage ] ****** [1817 done /1640 queued / 16 running / 1816 errors / 24% coverage ] ****** [1818 done /1639 queued / 16 running / 1817 errors / 24% coverage ] ****** [1818 done /1639 queued / 16 running / 1817 errors / 24% coverage ] ****** [1819 done /1641 queued / 16 running / 1818 errors / 24% coverage ] ****** [1819 done /1641 queued / 16 running / 1818 errors / 24% coverage ] ****** [1820 done /1641 queued / 16 running / 1819 errors / 24% coverage ] ****** [1820 done /1641 queued / 16 running / 1819 errors / 24% coverage ] ****** [1821 done /1643 queued / 16 running / 1820 errors / 24% coverage ] ****** [1821 done /1643 queued / 16 running / 1820 errors / 24% coverage ] ****** [1822 done /1645 queued / 16 running / 1821 errors / 24% coverage ] ****** [1822 done /1645 queued / 16 running / 1821 errors / 24% coverage ] ****** [1823 done /1648 queued / 16 running / 1822 errors / 24% coverage ] ****** [1823 done /1648 queued / 16 running / 1822 errors / 24% coverage ] ****** [1824 done /1649 queued / 16 running / 1823 errors / 24% coverage ] ****** [1824 done /1649 queued / 16 running / 1823 errors / 24% coverage ] ****** [1825 done /1650 queued / 16 running / 1824 errors / 24% coverage ] ****** [1825 done /1650 queued / 16 running / 1824 errors / 24% coverage ] ****** [1826 done /1651 queued / 16 running / 1825 errors / 24% coverage ] ****** [1826 done /1651 queued / 16 running / 1825 errors / 24% coverage ] ****** [1827 done /1651 queued / 16 running / 1826 errors / 24% coverage ] ****** [1827 done /1651 queued / 16 running / 1826 errors / 24% coverage ] ****** [1828 done /1650 queued / 16 running / 1827 errors / 24% coverage ] ****** [1828 done /1650 queued / 16 running / 1827 errors / 24% coverage ] ****** [1829 done /1650 queued / 16 running / 1828 errors / 24% coverage ] ****** [1829 done /1650 queued / 16 running / 1828 errors / 24% coverage ] ****** [1830 done /1650 queued / 16 running / 1829 errors / 24% coverage ] ****** [1830 done /1650 queued / 16 running / 1829 errors / 24% coverage ] ****** [1831 done /1649 queued / 16 running / 1830 errors / 24% coverage ] ****** [1831 done /1649 queued / 16 running / 1830 errors / 24% coverage ] ****** [1832 done /1648 queued / 16 running / 1831 errors / 24% coverage ] ****** [1832 done /1648 queued / 16 running / 1831 errors / 24% coverage ] ****** [1833 done /1649 queued / 16 running / 1832 errors / 24% coverage ] ****** [1833 done /1649 queued / 16 running / 1832 errors / 24% coverage ] ****** [1834 done /1651 queued / 16 running / 1833 errors / 24% coverage ] ****** [1834 done /1651 queued / 16 running / 1833 errors / 24% coverage ] ****** [1835 done /1653 queued / 16 running / 1834 errors / 24% coverage ] ****** [1835 done /1653 queued / 16 running / 1834 errors / 24% coverage ] ****** [1836 done /1653 queued / 16 running / 1835 errors / 24% coverage ] ****** [1836 done /1653 queued / 16 running / 1835 errors / 24% coverage ] ****** [1837 done /1653 queued / 16 running / 1836 errors / 24% coverage ] ****** [1837 done /1653 queued / 16 running / 1836 errors / 24% coverage ] ****** [1838 done /1652 queued / 16 running / 1837 errors / 24% coverage ] ****** [1838 done /1652 queued / 16 running / 1837 errors / 24% coverage ] ****** [1839 done /1651 queued / 16 running / 1838 errors / 24% coverage ] ****** [1839 done /1651 queued / 16 running / 1838 errors / 24% coverage ] ****** [1840 done /1650 queued / 16 running / 1839 errors / 24% coverage ] ****** [1840 done /1650 queued / 16 running / 1839 errors / 24% coverage ] ****** [1841 done /1650 queued / 16 running / 1840 errors / 24% coverage ] ****** [1841 done /1650 queued / 16 running / 1840 errors / 24% coverage ] ****** [1842 done /1651 queued / 16 running / 1841 errors / 24% coverage ] ****** [1842 done /1651 queued / 16 running / 1841 errors / 24% coverage ] ****** [1843 done /1653 queued / 16 running / 1842 errors / 24% coverage ] ****** [1843 done /1653 queued / 16 running / 1842 errors / 24% coverage ] ****** [1844 done /1652 queued / 16 running / 1843 errors / 24% coverage ] ****** [1844 done /1652 queued / 16 running / 1843 errors / 24% coverage ] ****** [1845 done /1654 queued / 16 running / 1844 errors / 24% coverage ] ****** [1845 done /1654 queued / 16 running / 1844 errors / 24% coverage ] ****** [1846 done /1656 queued / 16 running / 1845 errors / 24% coverage ] ****** [1846 done /1656 queued / 16 running / 1845 errors / 24% coverage ] ****** [1847 done /1660 queued / 16 running / 1846 errors / 24% coverage ] ****** [1847 done /1660 queued / 16 running / 1846 errors / 24% coverage ] ****** [1848 done /1660 queued / 16 running / 1847 errors / 24% coverage ] ****** [1848 done /1660 queued / 16 running / 1847 errors / 24% coverage ] ****** [1849 done /1663 queued / 16 running / 1848 errors / 24% coverage ] ****** [1849 done /1663 queued / 16 running / 1848 errors / 24% coverage ] ****** [1850 done /1667 queued / 16 running / 1849 errors / 24% coverage ] ****** [1850 done /1667 queued / 16 running / 1849 errors / 24% coverage ] ****** [1851 done /1667 queued / 16 running / 1850 errors / 24% coverage ] ****** [1851 done /1667 queued / 16 running / 1850 errors / 24% coverage ] ****** [1852 done /1666 queued / 16 running / 1851 errors / 24% coverage ] ****** [1852 done /1666 queued / 16 running / 1851 errors / 24% coverage ] ****** [1853 done /1670 queued / 16 running / 1852 errors / 24% coverage ] ****** [1853 done /1670 queued / 16 running / 1852 errors / 24% coverage ] ****** [1854 done /1669 queued / 16 running / 1853 errors / 24% coverage ] ****** [1854 done /1669 queued / 16 running / 1853 errors / 24% coverage ] ****** [1855 done /1670 queued / 16 running / 1854 errors / 24% coverage ] ****** [1855 done /1670 queued / 16 running / 1854 errors / 24% coverage ] ****** [1856 done /1673 queued / 16 running / 1855 errors / 24% coverage ] ****** [1856 done /1673 queued / 16 running / 1855 errors / 24% coverage ] ****** [1857 done /1675 queued / 16 running / 1856 errors / 24% coverage ] ****** [1857 done /1675 queued / 16 running / 1856 errors / 24% coverage ] ****** [1858 done /1674 queued / 16 running / 1857 errors / 24% coverage ] ****** [1858 done /1674 queued / 16 running / 1857 errors / 24% coverage ] ****** [1859 done /1674 queued / 16 running / 1858 errors / 24% coverage ] ****** [1859 done /1674 queued / 16 running / 1858 errors / 24% coverage ] ****** [1860 done /1676 queued / 16 running / 1859 errors / 24% coverage ] ****** [1860 done /1676 queued / 16 running / 1859 errors / 24% coverage ] ****** [1861 done /1676 queued / 16 running / 1860 errors / 24% coverage ] ****** [1861 done /1676 queued / 16 running / 1860 errors / 24% coverage ] ****** [1862 done /1676 queued / 16 running / 1861 errors / 24% coverage ] ****** [1862 done /1676 queued / 16 running / 1861 errors / 24% coverage ] ****** [1863 done /1676 queued / 16 running / 1862 errors / 24% coverage ] ****** [1863 done /1676 queued / 16 running / 1862 errors / 24% coverage ] ****** [1864 done /1676 queued / 16 running / 1863 errors / 24% coverage ] ****** [1864 done /1676 queued / 16 running / 1863 errors / 24% coverage ] ****** [1865 done /1678 queued / 16 running / 1864 errors / 24% coverage ] ****** [1865 done /1678 queued / 16 running / 1864 errors / 24% coverage ] ****** [1866 done /1679 queued / 16 running / 1865 errors / 24% coverage ] ****** [1866 done /1679 queued / 16 running / 1865 errors / 24% coverage ] ****** [1867 done /1680 queued / 16 running / 1866 errors / 24% coverage ] ****** [1867 done /1680 queued / 16 running / 1866 errors / 24% coverage ] ****** [1868 done /1681 queued / 16 running / 1867 errors / 24% coverage ] ****** [1868 done /1681 queued / 16 running / 1867 errors / 24% coverage ] ****** [1869 done /1681 queued / 16 running / 1868 errors / 24% coverage ] ****** [1869 done /1681 queued / 16 running / 1868 errors / 24% coverage ] ****** [1870 done /1681 queued / 16 running / 1869 errors / 24% coverage ] ****** [1870 done /1681 queued / 16 running / 1869 errors / 24% coverage ] ****** [1871 done /1680 queued / 16 running / 1870 errors / 24% coverage ] ****** [1871 done /1680 queued / 16 running / 1870 errors / 24% coverage ] ****** [1872 done /1681 queued / 16 running / 1871 errors / 24% coverage ] ****** [1872 done /1681 queued / 16 running / 1871 errors / 24% coverage ] ****** [1873 done /1681 queued / 16 running / 1872 errors / 24% coverage ] ****** [1873 done /1681 queued / 16 running / 1872 errors / 24% coverage ] ****** [1874 done /1681 queued / 16 running / 1873 errors / 24% coverage ] ****** [1874 done /1681 queued / 16 running / 1873 errors / 24% coverage ] ****** [1875 done /1680 queued / 16 running / 1874 errors / 24% coverage ] ****** [1875 done /1680 queued / 16 running / 1874 errors / 24% coverage ] ****** [1876 done /1683 queued / 16 running / 1875 errors / 24% coverage ] ****** [1876 done /1683 queued / 16 running / 1875 errors / 24% coverage ] ****** [1877 done /1687 queued / 16 running / 1876 errors / 24% coverage ] ****** [1877 done /1687 queued / 16 running / 1876 errors / 24% coverage ] ****** [1878 done /1689 queued / 16 running / 1877 errors / 24% coverage ] ****** [1878 done /1689 queued / 16 running / 1877 errors / 24% coverage ] ****** [1879 done /1688 queued / 16 running / 1878 errors / 24% coverage ] ****** [1879 done /1688 queued / 16 running / 1878 errors / 24% coverage ] ****** [1880 done /1689 queued / 16 running / 1879 errors / 24% coverage ] ****** [1880 done /1689 queued / 16 running / 1879 errors / 24% coverage ] ****** [1881 done /1691 queued / 16 running / 1880 errors / 24% coverage ] ****** [1881 done /1691 queued / 16 running / 1880 errors / 24% coverage ] ****** [1882 done /1690 queued / 16 running / 1881 errors / 24% coverage ] ****** [1882 done /1690 queued / 16 running / 1881 errors / 24% coverage ] ****** [1883 done /1693 queued / 16 running / 1882 errors / 24% coverage ] ****** [1883 done /1693 queued / 16 running / 1882 errors / 24% coverage ] ****** [1884 done /1692 queued / 16 running / 1883 errors / 24% coverage ] ****** [1884 done /1692 queued / 16 running / 1883 errors / 24% coverage ] ****** [1885 done /1693 queued / 16 running / 1884 errors / 24% coverage ] ****** [1885 done /1693 queued / 16 running / 1884 errors / 24% coverage ] ****** [1886 done /1692 queued / 16 running / 1885 errors / 24% coverage ] ****** [1886 done /1692 queued / 16 running / 1885 errors / 24% coverage ] ****** [1887 done /1691 queued / 16 running / 1886 errors / 24% coverage ] ****** [1887 done /1691 queued / 16 running / 1886 errors / 24% coverage ] ****** [1888 done /1691 queued / 16 running / 1887 errors / 24% coverage ] ****** [1888 done /1691 queued / 16 running / 1887 errors / 24% coverage ] ****** [1889 done /1691 queued / 16 running / 1888 errors / 24% coverage ] ****** [1889 done /1691 queued / 16 running / 1888 errors / 24% coverage ] ****** [1890 done /1690 queued / 16 running / 1889 errors / 24% coverage ] ****** [1890 done /1690 queued / 16 running / 1889 errors / 24% coverage ] ****** [1891 done /1690 queued / 16 running / 1890 errors / 24% coverage ] ****** [1891 done /1690 queued / 16 running / 1890 errors / 24% coverage ] ****** [1892 done /1693 queued / 16 running / 1891 errors / 24% coverage ] ****** [1892 done /1693 queued / 16 running / 1891 errors / 24% coverage ] ****** [1893 done /1694 queued / 16 running / 1892 errors / 24% coverage ] ****** [1893 done /1694 queued / 16 running / 1892 errors / 24% coverage ] ****** [1894 done /1694 queued / 16 running / 1893 errors / 24% coverage ] ****** [1894 done /1694 queued / 16 running / 1893 errors / 24% coverage ] ****** [1895 done /1694 queued / 16 running / 1894 errors / 24% coverage ] ****** [1895 done /1694 queued / 16 running / 1894 errors / 24% coverage ] ****** [1896 done /1695 queued / 16 running / 1895 errors / 24% coverage ] ****** [1896 done /1695 queued / 16 running / 1895 errors / 24% coverage ] ****** [1897 done /1695 queued / 16 running / 1896 errors / 24% coverage ] ****** [1897 done /1695 queued / 16 running / 1896 errors / 24% coverage ] ****** [1898 done /1695 queued / 16 running / 1897 errors / 24% coverage ] ****** [1898 done /1695 queued / 16 running / 1897 errors / 24% coverage ] ****** [1899 done /1696 queued / 16 running / 1898 errors / 24% coverage ] ****** [1899 done /1696 queued / 16 running / 1898 errors / 24% coverage ] ****** [1900 done /1699 queued / 16 running / 1899 errors / 24% coverage ] ****** [1900 done /1699 queued / 16 running / 1899 errors / 24% coverage ] ****** [1901 done /1700 queued / 16 running / 1900 errors / 24% coverage ] ****** [1901 done /1700 queued / 16 running / 1900 errors / 24% coverage ] ****** [1902 done /1699 queued / 16 running / 1901 errors / 24% coverage ] ****** [1902 done /1699 queued / 16 running / 1901 errors / 24% coverage ] ****** [1903 done /1699 queued / 16 running / 1902 errors / 24% coverage ] ****** [1903 done /1699 queued / 16 running / 1902 errors / 24% coverage ] ****** [1904 done /1699 queued / 16 running / 1903 errors / 24% coverage ] ****** [1904 done /1699 queued / 16 running / 1903 errors / 24% coverage ] ****** [1905 done /1700 queued / 16 running / 1904 errors / 24% coverage ] ****** [1905 done /1700 queued / 16 running / 1904 errors / 24% coverage ] ****** [1906 done /1703 queued / 16 running / 1905 errors / 24% coverage ] ****** [1906 done /1703 queued / 16 running / 1905 errors / 24% coverage ] ****** [1907 done /1703 queued / 16 running / 1906 errors / 24% coverage ] ****** [1907 done /1703 queued / 16 running / 1906 errors / 24% coverage ] ****** [1908 done /1706 queued / 16 running / 1907 errors / 24% coverage ] ****** [1908 done /1706 queued / 16 running / 1907 errors / 24% coverage ] ****** [1909 done /1709 queued / 16 running / 1908 errors / 24% coverage ] ****** [1909 done /1709 queued / 16 running / 1908 errors / 24% coverage ] ****** [1910 done /1708 queued / 16 running / 1909 errors / 24% coverage ] ****** [1910 done /1708 queued / 16 running / 1909 errors / 24% coverage ] ****** [1911 done /1713 queued / 16 running / 1910 errors / 24% coverage ] ****** [1911 done /1713 queued / 16 running / 1910 errors / 24% coverage ] ****** [1912 done /1714 queued / 16 running / 1911 errors / 24% coverage ] ****** [1912 done /1714 queued / 16 running / 1911 errors / 24% coverage ] ****** [1913 done /1719 queued / 16 running / 1912 errors / 24% coverage ] ****** [1913 done /1719 queued / 16 running / 1912 errors / 24% coverage ] ****** [1914 done /1721 queued / 16 running / 1913 errors / 24% coverage ] ****** [1914 done /1721 queued / 16 running / 1913 errors / 24% coverage ] ****** [1915 done /1720 queued / 16 running / 1914 errors / 24% coverage ] ****** [1915 done /1720 queued / 16 running / 1914 errors / 24% coverage ] ****** [1916 done /1721 queued / 16 running / 1915 errors / 24% coverage ] ****** [1916 done /1721 queued / 16 running / 1915 errors / 24% coverage ] ****** [1917 done /1722 queued / 16 running / 1916 errors / 24% coverage ] ****** [1917 done /1722 queued / 16 running / 1916 errors / 24% coverage ] ****** [1918 done /1722 queued / 16 running / 1917 errors / 24% coverage ] ****** [1918 done /1722 queued / 16 running / 1917 errors / 24% coverage ] ****** [1919 done /1722 queued / 16 running / 1918 errors / 24% coverage ] ****** [1919 done /1722 queued / 16 running / 1918 errors / 24% coverage ] ****** [1920 done /1722 queued / 16 running / 1919 errors / 24% coverage ] ****** [1920 done /1722 queued / 16 running / 1919 errors / 24% coverage ] ****** [1921 done /1727 queued / 16 running / 1920 errors / 24% coverage ] ****** [1921 done /1727 queued / 16 running / 1920 errors / 24% coverage ] ****** [1922 done /1726 queued / 16 running / 1921 errors / 24% coverage ] ****** [1922 done /1726 queued / 16 running / 1921 errors / 24% coverage ] ****** [1923 done /1728 queued / 16 running / 1922 errors / 24% coverage ] ****** [1923 done /1728 queued / 16 running / 1922 errors / 24% coverage ] ****** [1924 done /1732 queued / 16 running / 1923 errors / 24% coverage ] ****** [1924 done /1732 queued / 16 running / 1923 errors / 24% coverage ] ****** [1925 done /1731 queued / 16 running / 1924 errors / 24% coverage ] ****** [1925 done /1731 queued / 16 running / 1924 errors / 24% coverage ] ****** [1926 done /1731 queued / 16 running / 1925 errors / 24% coverage ] ****** [1926 done /1731 queued / 16 running / 1925 errors / 24% coverage ] ****** [1927 done /1732 queued / 16 running / 1926 errors / 24% coverage ] ****** [1927 done /1732 queued / 16 running / 1926 errors / 24% coverage ] ****** [1928 done /1733 queued / 16 running / 1927 errors / 24% coverage ] ****** [1928 done /1733 queued / 16 running / 1927 errors / 24% coverage ] ****** [1929 done /1732 queued / 16 running / 1928 errors / 24% coverage ] ****** [1929 done /1732 queued / 16 running / 1928 errors / 24% coverage ] ****** [1930 done /1732 queued / 16 running / 1929 errors / 24% coverage ] ****** [1930 done /1732 queued / 16 running / 1929 errors / 24% coverage ] ****** [1931 done /1732 queued / 16 running / 1930 errors / 24% coverage ] ****** [1931 done /1732 queued / 16 running / 1930 errors / 24% coverage ] ****** [1932 done /1732 queued / 16 running / 1931 errors / 24% coverage ] ****** [1932 done /1732 queued / 16 running / 1931 errors / 24% coverage ] ****** [1933 done /1734 queued / 16 running / 1932 errors / 24% coverage ] ****** [1933 done /1734 queued / 16 running / 1932 errors / 24% coverage ] ****** [1934 done /1735 queued / 16 running / 1933 errors / 24% coverage ] ****** [1934 done /1735 queued / 16 running / 1933 errors / 24% coverage ] ****** [1935 done /1734 queued / 16 running / 1934 errors / 24% coverage ] ****** [1935 done /1734 queued / 16 running / 1934 errors / 24% coverage ] ****** [1936 done /1734 queued / 16 running / 1935 errors / 24% coverage ] ****** [1936 done /1734 queued / 16 running / 1935 errors / 24% coverage ] ****** [1937 done /1736 queued / 16 running / 1936 errors / 24% coverage ] ****** [1937 done /1736 queued / 16 running / 1936 errors / 24% coverage ] ****** [1938 done /1737 queued / 16 running / 1937 errors / 24% coverage ] ****** [1938 done /1737 queued / 16 running / 1937 errors / 24% coverage ] ****** [1939 done /1737 queued / 16 running / 1938 errors / 24% coverage ] ****** [1939 done /1737 queued / 16 running / 1938 errors / 24% coverage ] ****** [1940 done /1738 queued / 16 running / 1939 errors / 24% coverage ] ****** [1940 done /1738 queued / 16 running / 1939 errors / 24% coverage ] ****** [1941 done /1739 queued / 16 running / 1940 errors / 24% coverage ] ****** [1941 done /1739 queued / 16 running / 1940 errors / 24% coverage ] ****** [1942 done /1739 queued / 16 running / 1941 errors / 24% coverage ] ****** [1942 done /1739 queued / 16 running / 1941 errors / 24% coverage ] ****** [1943 done /1739 queued / 16 running / 1942 errors / 24% coverage ] ****** [1943 done /1739 queued / 16 running / 1942 errors / 24% coverage ] ****** [1944 done /1742 queued / 16 running / 1943 errors / 24% coverage ] ****** [1944 done /1742 queued / 16 running / 1943 errors / 24% coverage ] ****** [1945 done /1742 queued / 16 running / 1944 errors / 24% coverage ] ****** [1945 done /1742 queued / 16 running / 1944 errors / 24% coverage ] ****** [1946 done /1744 queued / 16 running / 1945 errors / 24% coverage ] ****** [1946 done /1744 queued / 16 running / 1945 errors / 24% coverage ] ****** [1947 done /1745 queued / 16 running / 1946 errors / 24% coverage ] ****** [1947 done /1745 queued / 16 running / 1946 errors / 24% coverage ] ****** [1948 done /1748 queued / 16 running / 1947 errors / 24% coverage ] ****** [1948 done /1748 queued / 16 running / 1947 errors / 24% coverage ] ****** [1949 done /1750 queued / 16 running / 1948 errors / 24% coverage ] ****** [1949 done /1750 queued / 16 running / 1948 errors / 24% coverage ] ****** [1950 done /1751 queued / 16 running / 1949 errors / 24% coverage ] ****** [1950 done /1751 queued / 16 running / 1949 errors / 24% coverage ] ****** [1951 done /1750 queued / 16 running / 1950 errors / 24% coverage ] ****** [1951 done /1750 queued / 16 running / 1950 errors / 24% coverage ] ****** [1952 done /1752 queued / 16 running / 1951 errors / 24% coverage ] ****** [1952 done /1752 queued / 16 running / 1951 errors / 24% coverage ] ****** [1953 done /1754 queued / 16 running / 1952 errors / 24% coverage ] ****** [1953 done /1754 queued / 16 running / 1952 errors / 24% coverage ] ****** [1954 done /1756 queued / 16 running / 1953 errors / 24% coverage ] ****** [1954 done /1756 queued / 16 running / 1953 errors / 24% coverage ] ****** [1955 done /1759 queued / 16 running / 1954 errors / 24% coverage ] ****** [1955 done /1759 queued / 16 running / 1954 errors / 24% coverage ] ****** [1956 done /1760 queued / 16 running / 1955 errors / 24% coverage ] ****** [1956 done /1760 queued / 16 running / 1955 errors / 24% coverage ] ****** [1957 done /1759 queued / 16 running / 1956 errors / 24% coverage ] ****** [1957 done /1759 queued / 16 running / 1956 errors / 24% coverage ] ****** [1958 done /1758 queued / 16 running / 1957 errors / 24% coverage ] ****** [1958 done /1758 queued / 16 running / 1957 errors / 24% coverage ] ****** [1959 done /1757 queued / 16 running / 1958 errors / 24% coverage ] ****** [1959 done /1757 queued / 16 running / 1958 errors / 24% coverage ] ****** [1960 done /1758 queued / 16 running / 1959 errors / 24% coverage ] ****** [1960 done /1758 queued / 16 running / 1959 errors / 24% coverage ] ****** [1961 done /1758 queued / 16 running / 1960 errors / 24% coverage ] ****** [1961 done /1758 queued / 16 running / 1960 errors / 24% coverage ] ****** [1962 done /1758 queued / 16 running / 1961 errors / 24% coverage ] ****** [1962 done /1758 queued / 16 running / 1961 errors / 24% coverage ] ****** [1963 done /1761 queued / 16 running / 1962 errors / 24% coverage ] ****** [1963 done /1761 queued / 16 running / 1962 errors / 24% coverage ] ****** [1964 done /1764 queued / 16 running / 1963 errors / 24% coverage ] ****** [1964 done /1764 queued / 16 running / 1963 errors / 24% coverage ] ****** [1965 done /1767 queued / 16 running / 1964 errors / 24% coverage ] ****** [1965 done /1767 queued / 16 running / 1964 errors / 24% coverage ] ****** [1966 done /1768 queued / 16 running / 1965 errors / 24% coverage ] ****** [1966 done /1768 queued / 16 running / 1965 errors / 24% coverage ] ****** [1967 done /1769 queued / 16 running / 1966 errors / 24% coverage ] ****** [1967 done /1769 queued / 16 running / 1966 errors / 24% coverage ] ****** [1968 done /1770 queued / 16 running / 1967 errors / 24% coverage ] ****** [1968 done /1770 queued / 16 running / 1967 errors / 24% coverage ] ****** [1969 done /1770 queued / 16 running / 1968 errors / 24% coverage ] ****** [1969 done /1770 queued / 16 running / 1968 errors / 24% coverage ] ****** [1970 done /1771 queued / 16 running / 1969 errors / 24% coverage ] ****** [1970 done /1771 queued / 16 running / 1969 errors / 24% coverage ] ****** [1971 done /1772 queued / 16 running / 1970 errors / 24% coverage ] ****** [1971 done /1772 queued / 16 running / 1970 errors / 24% coverage ] ****** [1972 done /1775 queued / 16 running / 1971 errors / 24% coverage ] ****** [1972 done /1775 queued / 16 running / 1971 errors / 24% coverage ] ****** [1973 done /1775 queued / 16 running / 1972 errors / 24% coverage ] ****** [1973 done /1775 queued / 16 running / 1972 errors / 24% coverage ] ****** [1974 done /1779 queued / 16 running / 1973 errors / 24% coverage ] ****** [1974 done /1779 queued / 16 running / 1973 errors / 24% coverage ] ****** [1975 done /1778 queued / 16 running / 1974 errors / 24% coverage ] ****** [1975 done /1778 queued / 16 running / 1974 errors / 24% coverage ] ****** [1976 done /1779 queued / 16 running / 1975 errors / 24% coverage ] ****** [1976 done /1779 queued / 16 running / 1975 errors / 24% coverage ] ****** [1977 done /1778 queued / 16 running / 1976 errors / 24% coverage ] ****** [1977 done /1778 queued / 16 running / 1976 errors / 24% coverage ] ****** [1978 done /1777 queued / 16 running / 1977 errors / 24% coverage ] ****** [1978 done /1777 queued / 16 running / 1977 errors / 24% coverage ] ****** [1979 done /1780 queued / 16 running / 1978 errors / 24% coverage ] ****** [1979 done /1780 queued / 16 running / 1978 errors / 24% coverage ] ****** [1980 done /1782 queued / 16 running / 1979 errors / 24% coverage ] ****** [1980 done /1782 queued / 16 running / 1979 errors / 24% coverage ] ****** [1981 done /1783 queued / 16 running / 1980 errors / 24% coverage ] ****** [1981 done /1783 queued / 16 running / 1980 errors / 24% coverage ] ****** [1982 done /1783 queued / 16 running / 1981 errors / 24% coverage ] ****** [1982 done /1783 queued / 16 running / 1981 errors / 24% coverage ] ****** [1983 done /1782 queued / 16 running / 1982 errors / 24% coverage ] ****** [1983 done /1782 queued / 16 running / 1982 errors / 24% coverage ] ****** [1984 done /1782 queued / 16 running / 1983 errors / 24% coverage ] ****** [1984 done /1782 queued / 16 running / 1983 errors / 24% coverage ] ****** [1985 done /1783 queued / 16 running / 1984 errors / 24% coverage ] ****** [1985 done /1783 queued / 16 running / 1984 errors / 24% coverage ] ****** [1986 done /1784 queued / 16 running / 1985 errors / 24% coverage ] ****** [1986 done /1784 queued / 16 running / 1985 errors / 24% coverage ] ****** [1987 done /1784 queued / 16 running / 1986 errors / 24% coverage ] ****** [1987 done /1784 queued / 16 running / 1986 errors / 24% coverage ] ****** [1988 done /1785 queued / 16 running / 1987 errors / 24% coverage ] ****** [1988 done /1785 queued / 16 running / 1987 errors / 24% coverage ] ****** [1989 done /1786 queued / 16 running / 1988 errors / 24% coverage ] ****** [1989 done /1786 queued / 16 running / 1988 errors / 24% coverage ] ****** [1990 done /1788 queued / 16 running / 1989 errors / 24% coverage ] ****** [1990 done /1788 queued / 16 running / 1989 errors / 24% coverage ] ****** [1991 done /1790 queued / 16 running / 1990 errors / 24% coverage ] ****** [1991 done /1790 queued / 16 running / 1990 errors / 24% coverage ] ****** [1992 done /1793 queued / 16 running / 1991 errors / 24% coverage ] ****** [1992 done /1793 queued / 16 running / 1991 errors / 24% coverage ] ****** [1993 done /1795 queued / 16 running / 1992 errors / 24% coverage ] ****** [1993 done /1795 queued / 16 running / 1992 errors / 24% coverage ] ****** [1994 done /1795 queued / 16 running / 1993 errors / 24% coverage ] ****** [1994 done /1795 queued / 16 running / 1993 errors / 24% coverage ] ****** [1995 done /1799 queued / 16 running / 1994 errors / 24% coverage ] ****** [1995 done /1799 queued / 16 running / 1994 errors / 24% coverage ] ****** [1996 done /1800 queued / 16 running / 1995 errors / 24% coverage ] ****** [1996 done /1800 queued / 16 running / 1995 errors / 24% coverage ] ****** [1997 done /1802 queued / 16 running / 1996 errors / 24% coverage ] ****** [1997 done /1802 queued / 16 running / 1996 errors / 24% coverage ] ****** [1998 done /1802 queued / 16 running / 1997 errors / 24% coverage ] ****** [1998 done /1802 queued / 16 running / 1997 errors / 24% coverage ] ****** [1999 done /1801 queued / 16 running / 1998 errors / 24% coverage ] ****** [1999 done /1801 queued / 16 running / 1998 errors / 24% coverage ] ****** [2000 done /1802 queued / 16 running / 1999 errors / 24% coverage ] ****** [2000 done /1802 queued / 16 running / 1999 errors / 24% coverage ] ****** [2001 done /1803 queued / 16 running / 2000 errors / 24% coverage ] ****** [2001 done /1803 queued / 16 running / 2000 errors / 24% coverage ] ****** [2002 done /1803 queued / 16 running / 2001 errors / 24% coverage ] ****** [2002 done /1803 queued / 16 running / 2001 errors / 24% coverage ] ****** [2003 done /1805 queued / 16 running / 2002 errors / 24% coverage ] ****** [2003 done /1805 queued / 16 running / 2002 errors / 24% coverage ] ****** [2004 done /1809 queued / 16 running / 2003 errors / 24% coverage ] ****** [2004 done /1809 queued / 16 running / 2003 errors / 24% coverage ] ****** [2005 done /1813 queued / 16 running / 2004 errors / 24% coverage ] ****** [2005 done /1813 queued / 16 running / 2004 errors / 24% coverage ] ****** [2006 done /1812 queued / 16 running / 2005 errors / 24% coverage ] ****** [2006 done /1812 queued / 16 running / 2005 errors / 24% coverage ] ****** [2007 done /1811 queued / 16 running / 2006 errors / 24% coverage ] ****** [2007 done /1811 queued / 16 running / 2006 errors / 24% coverage ] ****** [2008 done /1812 queued / 16 running / 2007 errors / 24% coverage ] ****** [2008 done /1812 queued / 16 running / 2007 errors / 24% coverage ] ****** [2009 done /1814 queued / 16 running / 2008 errors / 24% coverage ] ****** [2009 done /1814 queued / 16 running / 2008 errors / 24% coverage ] ****** [2010 done /1814 queued / 16 running / 2009 errors / 24% coverage ] ****** [2010 done /1814 queued / 16 running / 2009 errors / 24% coverage ] ****** [2011 done /1814 queued / 16 running / 2010 errors / 24% coverage ] ****** [2011 done /1814 queued / 16 running / 2010 errors / 24% coverage ] ****** [2012 done /1814 queued / 16 running / 2011 errors / 24% coverage ] ****** [2012 done /1814 queued / 16 running / 2011 errors / 24% coverage ] ****** [2013 done /1814 queued / 16 running / 2012 errors / 24% coverage ] ****** [2013 done /1814 queued / 16 running / 2012 errors / 24% coverage ] ****** [2014 done /1814 queued / 16 running / 2013 errors / 24% coverage ] ****** [2014 done /1814 queued / 16 running / 2013 errors / 24% coverage ] ****** [2015 done /1816 queued / 16 running / 2014 errors / 24% coverage ] ****** [2015 done /1816 queued / 16 running / 2014 errors / 24% coverage ] ****** [2016 done /1815 queued / 16 running / 2015 errors / 24% coverage ] ****** [2016 done /1815 queued / 16 running / 2015 errors / 24% coverage ] ****** [2017 done /1815 queued / 16 running / 2016 errors / 24% coverage ] ****** [2017 done /1815 queued / 16 running / 2016 errors / 24% coverage ] ****** [2018 done /1816 queued / 16 running / 2017 errors / 24% coverage ] ****** [2018 done /1816 queued / 16 running / 2017 errors / 24% coverage ] ****** [2019 done /1816 queued / 16 running / 2018 errors / 24% coverage ] ****** [2019 done /1816 queued / 16 running / 2018 errors / 24% coverage ] ****** [2020 done /1819 queued / 16 running / 2019 errors / 24% coverage ] ****** [2020 done /1819 queued / 16 running / 2019 errors / 24% coverage ] ****** [2021 done /1819 queued / 16 running / 2020 errors / 24% coverage ] ****** [2021 done /1819 queued / 16 running / 2020 errors / 24% coverage ] ****** [2022 done /1820 queued / 16 running / 2021 errors / 24% coverage ] ****** [2022 done /1820 queued / 16 running / 2021 errors / 24% coverage ] ****** [2023 done /1820 queued / 16 running / 2022 errors / 24% coverage ] ****** [2023 done /1820 queued / 16 running / 2022 errors / 24% coverage ] ****** [2024 done /1820 queued / 16 running / 2023 errors / 24% coverage ] ****** [2024 done /1820 queued / 16 running / 2023 errors / 24% coverage ] ****** [2025 done /1820 queued / 16 running / 2024 errors / 24% coverage ] ****** [2025 done /1820 queued / 16 running / 2024 errors / 24% coverage ] ****** [2026 done /1820 queued / 16 running / 2025 errors / 24% coverage ] ****** [2026 done /1820 queued / 16 running / 2025 errors / 24% coverage ] ****** [2027 done /1820 queued / 16 running / 2026 errors / 24% coverage ] ****** [2027 done /1820 queued / 16 running / 2026 errors / 24% coverage ] ****** [2028 done /1819 queued / 16 running / 2027 errors / 24% coverage ] ****** [2028 done /1819 queued / 16 running / 2027 errors / 24% coverage ] ****** [2029 done /1820 queued / 16 running / 2028 errors / 24% coverage ] ****** [2029 done /1820 queued / 16 running / 2028 errors / 24% coverage ] ****** [2030 done /1822 queued / 16 running / 2029 errors / 24% coverage ] ****** [2030 done /1822 queued / 16 running / 2029 errors / 24% coverage ] ****** [2031 done /1821 queued / 16 running / 2030 errors / 24% coverage ] ****** [2031 done /1821 queued / 16 running / 2030 errors / 24% coverage ] ****** [2032 done /1823 queued / 16 running / 2031 errors / 24% coverage ] ****** [2032 done /1823 queued / 16 running / 2031 errors / 24% coverage ] ****** [2033 done /1825 queued / 16 running / 2032 errors / 24% coverage ] ****** [2033 done /1825 queued / 16 running / 2032 errors / 24% coverage ] ****** [2034 done /1825 queued / 16 running / 2033 errors / 24% coverage ] ****** [2034 done /1825 queued / 16 running / 2033 errors / 24% coverage ] ****** [2035 done /1825 queued / 16 running / 2034 errors / 24% coverage ] ****** [2035 done /1825 queued / 16 running / 2034 errors / 24% coverage ] ****** [2036 done /1826 queued / 16 running / 2035 errors / 24% coverage ] ****** [2036 done /1826 queued / 16 running / 2035 errors / 24% coverage ] ****** [2037 done /1829 queued / 16 running / 2036 errors / 24% coverage ] ****** [2037 done /1829 queued / 16 running / 2036 errors / 24% coverage ] ****** [2038 done /1829 queued / 16 running / 2037 errors / 24% coverage ] ****** [2038 done /1829 queued / 16 running / 2037 errors / 24% coverage ] ****** [2039 done /1833 queued / 16 running / 2038 errors / 24% coverage ] ****** [2039 done /1833 queued / 16 running / 2038 errors / 24% coverage ] ****** [2040 done /1834 queued / 16 running / 2039 errors / 24% coverage ] ****** [2040 done /1834 queued / 16 running / 2039 errors / 24% coverage ] ****** [2041 done /1833 queued / 16 running / 2040 errors / 24% coverage ] ****** [2041 done /1833 queued / 16 running / 2040 errors / 24% coverage ] ****** [2042 done /1836 queued / 16 running / 2041 errors / 24% coverage ] ****** [2042 done /1836 queued / 16 running / 2041 errors / 24% coverage ] ****** [2043 done /1838 queued / 16 running / 2042 errors / 24% coverage ] ****** [2043 done /1838 queued / 16 running / 2042 errors / 24% coverage ] ****** [2044 done /1840 queued / 16 running / 2043 errors / 24% coverage ] ****** [2044 done /1840 queued / 16 running / 2043 errors / 24% coverage ] ****** [2045 done /1844 queued / 16 running / 2044 errors / 24% coverage ] ****** [2045 done /1844 queued / 16 running / 2044 errors / 24% coverage ] ****** [2046 done /1848 queued / 16 running / 2045 errors / 24% coverage ] ****** [2046 done /1848 queued / 16 running / 2045 errors / 24% coverage ] ****** [2047 done /1852 queued / 16 running / 2046 errors / 24% coverage ] ****** [2047 done /1852 queued / 16 running / 2046 errors / 24% coverage ] ****** [2048 done /1855 queued / 16 running / 2047 errors / 24% coverage ] ****** [2048 done /1855 queued / 16 running / 2047 errors / 24% coverage ] ****** [2049 done /1854 queued / 16 running / 2048 errors / 24% coverage ] ****** [2049 done /1854 queued / 16 running / 2048 errors / 24% coverage ] ****** [2050 done /1855 queued / 16 running / 2049 errors / 24% coverage ] ****** [2050 done /1855 queued / 16 running / 2049 errors / 24% coverage ] ****** [2051 done /1854 queued / 16 running / 2050 errors / 24% coverage ] ****** [2051 done /1854 queued / 16 running / 2050 errors / 24% coverage ] ****** [2052 done /1853 queued / 16 running / 2051 errors / 24% coverage ] ****** [2052 done /1853 queued / 16 running / 2051 errors / 24% coverage ] ****** [2053 done /1857 queued / 16 running / 2052 errors / 24% coverage ] ****** [2053 done /1857 queued / 16 running / 2052 errors / 24% coverage ] ****** [2054 done /1857 queued / 16 running / 2053 errors / 24% coverage ] ****** [2054 done /1857 queued / 16 running / 2053 errors / 24% coverage ] ****** [2055 done /1857 queued / 16 running / 2054 errors / 24% coverage ] ****** [2055 done /1857 queued / 16 running / 2054 errors / 24% coverage ] ****** [2056 done /1857 queued / 16 running / 2055 errors / 24% coverage ] ****** [2056 done /1857 queued / 16 running / 2055 errors / 24% coverage ] ****** [2057 done /1856 queued / 16 running / 2056 errors / 24% coverage ] ****** [2057 done /1856 queued / 16 running / 2056 errors / 24% coverage ] ****** [2058 done /1856 queued / 16 running / 2057 errors / 24% coverage ] ****** [2058 done /1856 queued / 16 running / 2057 errors / 24% coverage ] ****** [2059 done /1857 queued / 16 running / 2058 errors / 24% coverage ] ****** [2059 done /1857 queued / 16 running / 2058 errors / 24% coverage ] ****** [2060 done /1858 queued / 16 running / 2059 errors / 24% coverage ] ****** [2060 done /1858 queued / 16 running / 2059 errors / 24% coverage ] ****** [2061 done /1861 queued / 16 running / 2060 errors / 24% coverage ] ****** [2061 done /1861 queued / 16 running / 2060 errors / 24% coverage ] ****** [2062 done /1860 queued / 16 running / 2061 errors / 24% coverage ] ****** [2062 done /1860 queued / 16 running / 2061 errors / 24% coverage ] ****** [2063 done /1859 queued / 16 running / 2062 errors / 24% coverage ] ****** [2063 done /1859 queued / 16 running / 2062 errors / 24% coverage ] ****** [2064 done /1859 queued / 16 running / 2063 errors / 24% coverage ] ****** [2064 done /1859 queued / 16 running / 2063 errors / 24% coverage ] ****** [2065 done /1862 queued / 16 running / 2064 errors / 24% coverage ] ****** [2065 done /1862 queued / 16 running / 2064 errors / 24% coverage ] ****** [2066 done /1866 queued / 16 running / 2065 errors / 24% coverage ] ****** [2066 done /1866 queued / 16 running / 2065 errors / 24% coverage ] ****** [2067 done /1870 queued / 16 running / 2066 errors / 24% coverage ] ****** [2067 done /1870 queued / 16 running / 2066 errors / 24% coverage ] ****** [2068 done /1872 queued / 16 running / 2067 errors / 24% coverage ] ****** [2068 done /1872 queued / 16 running / 2067 errors / 24% coverage ] ****** [2069 done /1871 queued / 16 running / 2068 errors / 24% coverage ] ****** [2069 done /1871 queued / 16 running / 2068 errors / 24% coverage ] ****** [2070 done /1873 queued / 16 running / 2069 errors / 24% coverage ] ****** [2070 done /1873 queued / 16 running / 2069 errors / 24% coverage ] ****** [2071 done /1874 queued / 16 running / 2070 errors / 24% coverage ] ****** [2071 done /1874 queued / 16 running / 2070 errors / 24% coverage ] ****** [2072 done /1877 queued / 16 running / 2071 errors / 24% coverage ] ****** [2072 done /1877 queued / 16 running / 2071 errors / 24% coverage ] ****** [2073 done /1880 queued / 16 running / 2072 errors / 24% coverage ] ****** [2073 done /1880 queued / 16 running / 2072 errors / 24% coverage ] ****** [2074 done /1883 queued / 16 running / 2073 errors / 24% coverage ] ****** [2074 done /1883 queued / 16 running / 2073 errors / 24% coverage ] ****** [2075 done /1882 queued / 16 running / 2074 errors / 24% coverage ] ****** [2075 done /1882 queued / 16 running / 2074 errors / 24% coverage ] ****** [2076 done /1883 queued / 16 running / 2075 errors / 24% coverage ] ****** [2076 done /1883 queued / 16 running / 2075 errors / 24% coverage ] ****** [2077 done /1882 queued / 16 running / 2076 errors / 24% coverage ] ****** [2077 done /1882 queued / 16 running / 2076 errors / 24% coverage ] ****** [2078 done /1885 queued / 16 running / 2077 errors / 24% coverage ] ****** [2078 done /1885 queued / 16 running / 2077 errors / 24% coverage ] ****** [2079 done /1884 queued / 16 running / 2078 errors / 24% coverage ] ****** [2079 done /1884 queued / 16 running / 2078 errors / 24% coverage ] ****** [2080 done /1883 queued / 16 running / 2079 errors / 24% coverage ] ****** [2080 done /1883 queued / 16 running / 2079 errors / 24% coverage ] ****** [2081 done /1882 queued / 16 running / 2080 errors / 24% coverage ] ****** [2081 done /1882 queued / 16 running / 2080 errors / 24% coverage ] ****** [2082 done /1884 queued / 16 running / 2081 errors / 24% coverage ] ****** [2082 done /1884 queued / 16 running / 2081 errors / 24% coverage ] ****** [2083 done /1884 queued / 16 running / 2082 errors / 24% coverage ] ****** [2083 done /1884 queued / 16 running / 2082 errors / 24% coverage ] ****** [2084 done /1885 queued / 16 running / 2083 errors / 24% coverage ] ****** [2084 done /1885 queued / 16 running / 2083 errors / 24% coverage ] ****** [2085 done /1885 queued / 16 running / 2084 errors / 24% coverage ] ****** [2085 done /1885 queued / 16 running / 2084 errors / 24% coverage ] ****** [2086 done /1886 queued / 16 running / 2085 errors / 24% coverage ] ****** [2086 done /1886 queued / 16 running / 2085 errors / 24% coverage ] ****** [2087 done /1886 queued / 16 running / 2086 errors / 24% coverage ] ****** [2087 done /1886 queued / 16 running / 2086 errors / 24% coverage ] ****** [2088 done /1886 queued / 16 running / 2087 errors / 24% coverage ] ****** [2088 done /1886 queued / 16 running / 2087 errors / 24% coverage ] ****** [2089 done /1886 queued / 16 running / 2088 errors / 24% coverage ] ****** [2089 done /1886 queued / 16 running / 2088 errors / 24% coverage ] ****** [2090 done /1886 queued / 16 running / 2089 errors / 24% coverage ] ****** [2090 done /1886 queued / 16 running / 2089 errors / 24% coverage ] ****** [2091 done /1887 queued / 16 running / 2090 errors / 24% coverage ] ****** [2091 done /1887 queued / 16 running / 2090 errors / 24% coverage ] ****** [2092 done /1887 queued / 16 running / 2091 errors / 24% coverage ] ****** [2092 done /1887 queued / 16 running / 2091 errors / 24% coverage ] ****** [2093 done /1887 queued / 16 running / 2092 errors / 24% coverage ] ****** [2093 done /1887 queued / 16 running / 2092 errors / 24% coverage ] ****** [2094 done /1890 queued / 16 running / 2093 errors / 24% coverage ] ****** [2094 done /1890 queued / 16 running / 2093 errors / 24% coverage ] ****** [2095 done /1889 queued / 16 running / 2094 errors / 24% coverage ] ****** [2095 done /1889 queued / 16 running / 2094 errors / 24% coverage ] ****** [2096 done /1890 queued / 16 running / 2095 errors / 24% coverage ] ****** [2096 done /1890 queued / 16 running / 2095 errors / 24% coverage ] ****** [2097 done /1890 queued / 16 running / 2096 errors / 24% coverage ] ****** [2097 done /1890 queued / 16 running / 2096 errors / 24% coverage ] ****** [2098 done /1891 queued / 16 running / 2097 errors / 24% coverage ] ****** [2098 done /1891 queued / 16 running / 2097 errors / 24% coverage ] ****** [2099 done /1892 queued / 16 running / 2098 errors / 24% coverage ] ****** [2099 done /1892 queued / 16 running / 2098 errors / 24% coverage ] ****** [2100 done /1892 queued / 16 running / 2099 errors / 24% coverage ] ****** [2100 done /1892 queued / 16 running / 2099 errors / 24% coverage ] ****** [2101 done /1896 queued / 16 running / 2100 errors / 24% coverage ] ****** [2101 done /1896 queued / 16 running / 2100 errors / 24% coverage ] ****** [2102 done /1896 queued / 16 running / 2101 errors / 24% coverage ] ****** [2102 done /1896 queued / 16 running / 2101 errors / 24% coverage ] ****** [2103 done /1895 queued / 16 running / 2102 errors / 24% coverage ] ****** [2103 done /1895 queued / 16 running / 2102 errors / 24% coverage ] ****** [2104 done /1896 queued / 16 running / 2103 errors / 24% coverage ] ****** [2104 done /1896 queued / 16 running / 2103 errors / 24% coverage ] ****** [2105 done /1899 queued / 16 running / 2104 errors / 24% coverage ] ****** [2105 done /1899 queued / 16 running / 2104 errors / 24% coverage ] ****** [2106 done /1900 queued / 16 running / 2105 errors / 24% coverage ] ****** [2106 done /1900 queued / 16 running / 2105 errors / 24% coverage ] ****** [2107 done /1903 queued / 16 running / 2106 errors / 24% coverage ] ****** [2107 done /1903 queued / 16 running / 2106 errors / 24% coverage ] ****** [2108 done /1908 queued / 16 running / 2107 errors / 24% coverage ] ****** [2108 done /1908 queued / 16 running / 2107 errors / 24% coverage ] ****** [2109 done /1909 queued / 16 running / 2108 errors / 24% coverage ] ****** [2109 done /1909 queued / 16 running / 2108 errors / 24% coverage ] ****** [2110 done /1910 queued / 16 running / 2109 errors / 24% coverage ] ****** [2110 done /1910 queued / 16 running / 2109 errors / 24% coverage ] ****** [2111 done /1911 queued / 16 running / 2110 errors / 24% coverage ] ****** [2111 done /1911 queued / 16 running / 2110 errors / 24% coverage ] ****** [2112 done /1910 queued / 16 running / 2111 errors / 24% coverage ] ****** [2112 done /1910 queued / 16 running / 2111 errors / 24% coverage ] ****** [2113 done /1911 queued / 16 running / 2112 errors / 24% coverage ] ****** [2113 done /1911 queued / 16 running / 2112 errors / 24% coverage ] ****** [2114 done /1916 queued / 16 running / 2113 errors / 24% coverage ] ****** [2114 done /1916 queued / 16 running / 2113 errors / 24% coverage ] ****** [2115 done /1916 queued / 16 running / 2114 errors / 24% coverage ] ****** [2115 done /1916 queued / 16 running / 2114 errors / 24% coverage ] ****** [2116 done /1915 queued / 16 running / 2115 errors / 24% coverage ] ****** [2116 done /1915 queued / 16 running / 2115 errors / 24% coverage ] ****** [2117 done /1915 queued / 16 running / 2116 errors / 24% coverage ] ****** [2117 done /1915 queued / 16 running / 2116 errors / 24% coverage ] ****** [2118 done /1916 queued / 16 running / 2117 errors / 24% coverage ] ****** [2118 done /1916 queued / 16 running / 2117 errors / 24% coverage ] ****** [2119 done /1916 queued / 16 running / 2118 errors / 24% coverage ] ****** [2119 done /1916 queued / 16 running / 2118 errors / 24% coverage ] ****** [2120 done /1916 queued / 16 running / 2119 errors / 24% coverage ] ****** [2120 done /1916 queued / 16 running / 2119 errors / 24% coverage ] ****** [2121 done /1915 queued / 16 running / 2120 errors / 24% coverage ] ****** [2121 done /1915 queued / 16 running / 2120 errors / 24% coverage ] ****** [2122 done /1915 queued / 16 running / 2121 errors / 24% coverage ] ****** [2122 done /1915 queued / 16 running / 2121 errors / 24% coverage ] ****** [2123 done /1916 queued / 16 running / 2122 errors / 24% coverage ] ****** [2123 done /1916 queued / 16 running / 2122 errors / 24% coverage ] ****** [2124 done /1918 queued / 16 running / 2123 errors / 24% coverage ] ****** [2124 done /1918 queued / 16 running / 2123 errors / 24% coverage ] ****** [2125 done /1917 queued / 16 running / 2124 errors / 24% coverage ] ****** [2125 done /1917 queued / 16 running / 2124 errors / 24% coverage ] ****** [2126 done /1916 queued / 16 running / 2125 errors / 24% coverage ] ****** [2126 done /1916 queued / 16 running / 2125 errors / 24% coverage ] ****** [2127 done /1915 queued / 16 running / 2126 errors / 24% coverage ] ****** [2127 done /1915 queued / 16 running / 2126 errors / 24% coverage ] ****** [2128 done /1917 queued / 16 running / 2127 errors / 24% coverage ] ****** [2128 done /1917 queued / 16 running / 2127 errors / 24% coverage ] ****** [2129 done /1921 queued / 16 running / 2128 errors / 24% coverage ] ****** [2129 done /1921 queued / 16 running / 2128 errors / 24% coverage ] ****** [2130 done /1922 queued / 16 running / 2129 errors / 24% coverage ] ****** [2130 done /1922 queued / 16 running / 2129 errors / 24% coverage ] ****** [2131 done /1924 queued / 16 running / 2130 errors / 24% coverage ] ****** [2131 done /1924 queued / 16 running / 2130 errors / 24% coverage ] ****** [2132 done /1926 queued / 16 running / 2131 errors / 24% coverage ] ****** [2132 done /1926 queued / 16 running / 2131 errors / 24% coverage ] ****** [2133 done /1925 queued / 16 running / 2132 errors / 24% coverage ] ****** [2133 done /1925 queued / 16 running / 2132 errors / 24% coverage ] ****** [2134 done /1926 queued / 16 running / 2133 errors / 24% coverage ] ****** [2134 done /1926 queued / 16 running / 2133 errors / 24% coverage ] ****** [2135 done /1927 queued / 16 running / 2134 errors / 24% coverage ] ****** [2135 done /1927 queued / 16 running / 2134 errors / 24% coverage ] ****** [2136 done /1928 queued / 16 running / 2135 errors / 24% coverage ] ****** [2136 done /1928 queued / 16 running / 2135 errors / 24% coverage ] ****** [2137 done /1930 queued / 16 running / 2136 errors / 24% coverage ] ****** [2137 done /1930 queued / 16 running / 2136 errors / 24% coverage ] ****** [2138 done /1931 queued / 16 running / 2137 errors / 24% coverage ] ****** [2138 done /1931 queued / 16 running / 2137 errors / 24% coverage ] ****** [2139 done /1932 queued / 16 running / 2138 errors / 24% coverage ] ****** [2139 done /1932 queued / 16 running / 2138 errors / 24% coverage ] ****** [2140 done /1934 queued / 16 running / 2139 errors / 24% coverage ] ****** [2140 done /1934 queued / 16 running / 2139 errors / 24% coverage ] ****** [2141 done /1935 queued / 16 running / 2140 errors / 24% coverage ] ****** [2141 done /1935 queued / 16 running / 2140 errors / 24% coverage ] ****** [2142 done /1934 queued / 16 running / 2141 errors / 24% coverage ] ****** [2142 done /1934 queued / 16 running / 2141 errors / 24% coverage ] ****** [2143 done /1933 queued / 16 running / 2142 errors / 24% coverage ] ****** [2143 done /1933 queued / 16 running / 2142 errors / 24% coverage ] ****** [2144 done /1934 queued / 16 running / 2143 errors / 24% coverage ] ****** [2144 done /1934 queued / 16 running / 2143 errors / 24% coverage ] ****** [2145 done /1939 queued / 16 running / 2144 errors / 24% coverage ] ****** [2145 done /1939 queued / 16 running / 2144 errors / 24% coverage ] ****** [2146 done /1941 queued / 16 running / 2145 errors / 24% coverage ] ****** [2146 done /1941 queued / 16 running / 2145 errors / 24% coverage ] ****** [2147 done /1940 queued / 16 running / 2146 errors / 24% coverage ] ****** [2147 done /1940 queued / 16 running / 2146 errors / 24% coverage ] ****** [2148 done /1939 queued / 16 running / 2147 errors / 24% coverage ] ****** [2148 done /1939 queued / 16 running / 2147 errors / 24% coverage ] ****** [2149 done /1938 queued / 16 running / 2148 errors / 24% coverage ] ****** [2149 done /1938 queued / 16 running / 2148 errors / 24% coverage ] ****** [2150 done /1940 queued / 16 running / 2149 errors / 24% coverage ] ****** [2150 done /1940 queued / 16 running / 2149 errors / 24% coverage ] ****** [2151 done /1940 queued / 16 running / 2150 errors / 24% coverage ] ****** [2151 done /1940 queued / 16 running / 2150 errors / 24% coverage ] ****** [2152 done /1940 queued / 16 running / 2151 errors / 24% coverage ] ****** [2152 done /1940 queued / 16 running / 2151 errors / 24% coverage ] ****** [2153 done /1939 queued / 16 running / 2152 errors / 24% coverage ] ****** [2153 done /1939 queued / 16 running / 2152 errors / 24% coverage ] ****** [2154 done /1939 queued / 16 running / 2153 errors / 24% coverage ] ****** [2154 done /1939 queued / 16 running / 2153 errors / 24% coverage ] ****** [2155 done /1938 queued / 16 running / 2154 errors / 24% coverage ] ****** [2155 done /1938 queued / 16 running / 2154 errors / 24% coverage ] ****** [2156 done /1940 queued / 16 running / 2155 errors / 24% coverage ] ****** [2156 done /1940 queued / 16 running / 2155 errors / 24% coverage ] ****** [2157 done /1939 queued / 16 running / 2156 errors / 24% coverage ] ****** [2157 done /1939 queued / 16 running / 2156 errors / 24% coverage ] ****** [2158 done /1938 queued / 16 running / 2157 errors / 24% coverage ] ****** [2158 done /1938 queued / 16 running / 2157 errors / 24% coverage ] ****** [2159 done /1940 queued / 16 running / 2158 errors / 24% coverage ] ****** [2159 done /1940 queued / 16 running / 2158 errors / 24% coverage ] ****** [2160 done /1940 queued / 16 running / 2159 errors / 24% coverage ] ****** [2160 done /1940 queued / 16 running / 2159 errors / 24% coverage ] ****** [2161 done /1941 queued / 16 running / 2160 errors / 24% coverage ] ****** [2161 done /1941 queued / 16 running / 2160 errors / 24% coverage ] ****** [2162 done /1945 queued / 16 running / 2161 errors / 24% coverage ] ****** [2162 done /1945 queued / 16 running / 2161 errors / 24% coverage ] ****** [2163 done /1946 queued / 16 running / 2162 errors / 24% coverage ] ****** [2163 done /1946 queued / 16 running / 2162 errors / 24% coverage ] ****** [2164 done /1947 queued / 16 running / 2163 errors / 24% coverage ] ****** [2164 done /1947 queued / 16 running / 2163 errors / 24% coverage ] ****** [2165 done /1950 queued / 16 running / 2164 errors / 24% coverage ] ****** [2165 done /1950 queued / 16 running / 2164 errors / 24% coverage ] ****** [2166 done /1950 queued / 16 running / 2165 errors / 24% coverage ] ****** [2166 done /1950 queued / 16 running / 2165 errors / 24% coverage ] ****** [2167 done /1950 queued / 16 running / 2166 errors / 24% coverage ] ****** [2167 done /1950 queued / 16 running / 2166 errors / 24% coverage ] ****** [2168 done /1950 queued / 16 running / 2167 errors / 24% coverage ] ****** [2168 done /1950 queued / 16 running / 2167 errors / 24% coverage ] ****** [2169 done /1949 queued / 16 running / 2168 errors / 24% coverage ] ****** [2169 done /1949 queued / 16 running / 2168 errors / 24% coverage ] ****** [2170 done /1948 queued / 16 running / 2169 errors / 24% coverage ] ****** [2170 done /1948 queued / 16 running / 2169 errors / 24% coverage ] ****** [2171 done /1948 queued / 16 running / 2170 errors / 24% coverage ] ****** [2171 done /1948 queued / 16 running / 2170 errors / 24% coverage ] ****** [2172 done /1947 queued / 16 running / 2171 errors / 24% coverage ] ****** [2172 done /1947 queued / 16 running / 2171 errors / 24% coverage ] ****** [2173 done /1947 queued / 16 running / 2172 errors / 24% coverage ] ****** [2173 done /1947 queued / 16 running / 2172 errors / 24% coverage ] ****** [2174 done /1946 queued / 16 running / 2173 errors / 24% coverage ] ****** [2174 done /1946 queued / 16 running / 2173 errors / 24% coverage ] ****** [2175 done /1947 queued / 16 running / 2174 errors / 24% coverage ] ****** [2175 done /1947 queued / 16 running / 2174 errors / 24% coverage ] ****** [2176 done /1946 queued / 16 running / 2175 errors / 24% coverage ] ****** [2176 done /1946 queued / 16 running / 2175 errors / 24% coverage ] ****** [2177 done /1947 queued / 16 running / 2176 errors / 24% coverage ] ****** [2177 done /1947 queued / 16 running / 2176 errors / 24% coverage ] ****** [2178 done /1947 queued / 16 running / 2177 errors / 24% coverage ] ****** [2178 done /1947 queued / 16 running / 2177 errors / 24% coverage ] ****** [2179 done /1947 queued / 16 running / 2178 errors / 24% coverage ] ****** [2179 done /1947 queued / 16 running / 2178 errors / 24% coverage ] ****** [2180 done /1949 queued / 16 running / 2179 errors / 24% coverage ] ****** [2180 done /1949 queued / 16 running / 2179 errors / 24% coverage ] ****** [2181 done /1949 queued / 16 running / 2180 errors / 24% coverage ] ****** [2181 done /1949 queued / 16 running / 2180 errors / 24% coverage ] ****** [2182 done /1949 queued / 16 running / 2181 errors / 24% coverage ] ****** [2182 done /1949 queued / 16 running / 2181 errors / 24% coverage ] ****** [2183 done /1948 queued / 16 running / 2182 errors / 24% coverage ] ****** [2183 done /1948 queued / 16 running / 2182 errors / 24% coverage ] ****** [2184 done /1948 queued / 16 running / 2183 errors / 24% coverage ] ****** [2184 done /1948 queued / 16 running / 2183 errors / 24% coverage ] ****** [2185 done /1952 queued / 16 running / 2184 errors / 24% coverage ] ****** [2185 done /1952 queued / 16 running / 2184 errors / 24% coverage ] ****** [2186 done /1954 queued / 16 running / 2185 errors / 24% coverage ] ****** [2186 done /1954 queued / 16 running / 2185 errors / 24% coverage ] ****** [2187 done /1959 queued / 16 running / 2186 errors / 24% coverage ] ****** [2187 done /1959 queued / 16 running / 2186 errors / 24% coverage ] ****** [2188 done /1959 queued / 16 running / 2187 errors / 24% coverage ] ****** [2188 done /1959 queued / 16 running / 2187 errors / 24% coverage ] ****** [2189 done /1959 queued / 16 running / 2188 errors / 24% coverage ] ****** [2189 done /1959 queued / 16 running / 2188 errors / 24% coverage ] ****** [2190 done /1962 queued / 16 running / 2189 errors / 24% coverage ] ****** [2190 done /1962 queued / 16 running / 2189 errors / 24% coverage ] ****** [2191 done /1965 queued / 16 running / 2190 errors / 24% coverage ] ****** [2191 done /1965 queued / 16 running / 2190 errors / 24% coverage ] ****** [2192 done /1966 queued / 16 running / 2191 errors / 24% coverage ] ****** [2192 done /1966 queued / 16 running / 2191 errors / 24% coverage ] ****** [2193 done /1968 queued / 16 running / 2192 errors / 24% coverage ] ****** [2193 done /1968 queued / 16 running / 2192 errors / 24% coverage ] ****** [2194 done /1967 queued / 16 running / 2193 errors / 24% coverage ] ****** [2194 done /1967 queued / 16 running / 2193 errors / 24% coverage ] ****** [2195 done /1969 queued / 16 running / 2194 errors / 24% coverage ] ****** [2195 done /1969 queued / 16 running / 2194 errors / 24% coverage ] ****** [2196 done /1971 queued / 16 running / 2195 errors / 24% coverage ] ****** [2196 done /1971 queued / 16 running / 2195 errors / 24% coverage ] ****** [2197 done /1970 queued / 16 running / 2196 errors / 24% coverage ] ****** [2197 done /1970 queued / 16 running / 2196 errors / 24% coverage ] ****** [2198 done /1971 queued / 16 running / 2197 errors / 24% coverage ] ****** [2198 done /1971 queued / 16 running / 2197 errors / 24% coverage ] ****** [2199 done /1975 queued / 16 running / 2198 errors / 24% coverage ] ****** [2199 done /1975 queued / 16 running / 2198 errors / 24% coverage ] ****** [2200 done /1978 queued / 16 running / 2199 errors / 24% coverage ] ****** [2200 done /1978 queued / 16 running / 2199 errors / 24% coverage ] ****** [2201 done /1978 queued / 16 running / 2200 errors / 24% coverage ] ****** [2201 done /1978 queued / 16 running / 2200 errors / 24% coverage ] ****** [2202 done /1977 queued / 16 running / 2201 errors / 24% coverage ] ****** [2202 done /1977 queued / 16 running / 2201 errors / 24% coverage ] ****** [2203 done /1977 queued / 16 running / 2202 errors / 24% coverage ] ****** [2203 done /1977 queued / 16 running / 2202 errors / 24% coverage ] ****** [2204 done /1977 queued / 16 running / 2203 errors / 24% coverage ] ****** [2204 done /1977 queued / 16 running / 2203 errors / 24% coverage ] ****** [2205 done /1977 queued / 16 running / 2204 errors / 24% coverage ] ****** [2205 done /1977 queued / 16 running / 2204 errors / 24% coverage ] ****** [2206 done /1977 queued / 16 running / 2205 errors / 24% coverage ] ****** [2206 done /1977 queued / 16 running / 2205 errors / 24% coverage ] ****** [2207 done /1977 queued / 16 running / 2206 errors / 24% coverage ] ****** [2207 done /1977 queued / 16 running / 2206 errors / 24% coverage ] ****** [2208 done /1978 queued / 16 running / 2207 errors / 24% coverage ] ****** [2208 done /1978 queued / 16 running / 2207 errors / 24% coverage ] ****** [2209 done /1980 queued / 16 running / 2208 errors / 24% coverage ] ****** [2209 done /1980 queued / 16 running / 2208 errors / 24% coverage ] ****** [2210 done /1981 queued / 16 running / 2209 errors / 24% coverage ] ****** [2210 done /1981 queued / 16 running / 2209 errors / 24% coverage ] ****** [2211 done /1980 queued / 16 running / 2210 errors / 24% coverage ] ****** [2211 done /1980 queued / 16 running / 2210 errors / 24% coverage ] ****** [2212 done /1982 queued / 16 running / 2211 errors / 24% coverage ] ****** [2212 done /1982 queued / 16 running / 2211 errors / 24% coverage ] ****** [2213 done /1986 queued / 16 running / 2212 errors / 24% coverage ] ****** [2213 done /1986 queued / 16 running / 2212 errors / 24% coverage ] ****** [2214 done /1988 queued / 16 running / 2213 errors / 24% coverage ] ****** [2214 done /1988 queued / 16 running / 2213 errors / 24% coverage ] ****** [2215 done /1987 queued / 16 running / 2214 errors / 24% coverage ] ****** [2215 done /1987 queued / 16 running / 2214 errors / 24% coverage ] ****** [2216 done /1989 queued / 16 running / 2215 errors / 24% coverage ] ****** [2216 done /1989 queued / 16 running / 2215 errors / 24% coverage ] ****** [2217 done /1990 queued / 16 running / 2216 errors / 24% coverage ] ****** [2217 done /1990 queued / 16 running / 2216 errors / 24% coverage ] ****** [2218 done /1989 queued / 16 running / 2217 errors / 24% coverage ] ****** [2218 done /1989 queued / 16 running / 2217 errors / 24% coverage ] ****** [2219 done /1991 queued / 16 running / 2218 errors / 24% coverage ] ****** [2219 done /1991 queued / 16 running / 2218 errors / 24% coverage ] ****** [2220 done /1992 queued / 16 running / 2219 errors / 24% coverage ] ****** [2220 done /1992 queued / 16 running / 2219 errors / 24% coverage ] ****** [2221 done /1993 queued / 16 running / 2220 errors / 24% coverage ] ****** [2221 done /1993 queued / 16 running / 2220 errors / 24% coverage ] ****** [2222 done /1998 queued / 16 running / 2221 errors / 24% coverage ] ****** [2222 done /1998 queued / 16 running / 2221 errors / 24% coverage ] ****** [2223 done /1999 queued / 16 running / 2222 errors / 24% coverage ] ****** [2223 done /1999 queued / 16 running / 2222 errors / 24% coverage ] ****** [2224 done /2001 queued / 16 running / 2223 errors / 24% coverage ] ****** [2224 done /2001 queued / 16 running / 2223 errors / 24% coverage ] ****** [2225 done /2005 queued / 16 running / 2224 errors / 24% coverage ] ****** [2225 done /2005 queued / 16 running / 2224 errors / 24% coverage ] ****** [2226 done /2006 queued / 16 running / 2225 errors / 24% coverage ] ****** [2226 done /2006 queued / 16 running / 2225 errors / 24% coverage ] ****** [2227 done /2009 queued / 16 running / 2226 errors / 24% coverage ] ****** [2227 done /2009 queued / 16 running / 2226 errors / 24% coverage ] ****** [2228 done /2010 queued / 16 running / 2227 errors / 24% coverage ] ****** [2228 done /2010 queued / 16 running / 2227 errors / 24% coverage ] ****** [2229 done /2010 queued / 16 running / 2228 errors / 24% coverage ] ****** [2229 done /2010 queued / 16 running / 2228 errors / 24% coverage ] ****** [2230 done /2009 queued / 16 running / 2229 errors / 24% coverage ] ****** [2230 done /2009 queued / 16 running / 2229 errors / 24% coverage ] ****** [2231 done /2011 queued / 16 running / 2230 errors / 24% coverage ] ****** [2231 done /2011 queued / 16 running / 2230 errors / 24% coverage ] ****** [2232 done /2013 queued / 16 running / 2231 errors / 24% coverage ] ****** [2232 done /2013 queued / 16 running / 2231 errors / 24% coverage ] ****** [2233 done /2012 queued / 16 running / 2232 errors / 24% coverage ] ****** [2233 done /2012 queued / 16 running / 2232 errors / 24% coverage ] ****** [2234 done /2016 queued / 16 running / 2233 errors / 24% coverage ] ****** [2234 done /2016 queued / 16 running / 2233 errors / 24% coverage ] ****** [2235 done /2020 queued / 16 running / 2234 errors / 24% coverage ] ****** [2235 done /2020 queued / 16 running / 2234 errors / 24% coverage ] ****** [2236 done /2023 queued / 16 running / 2235 errors / 24% coverage ] ****** [2236 done /2023 queued / 16 running / 2235 errors / 24% coverage ] ****** [2237 done /2026 queued / 16 running / 2236 errors / 24% coverage ] ****** [2237 done /2026 queued / 16 running / 2236 errors / 24% coverage ] ****** [2238 done /2030 queued / 16 running / 2237 errors / 24% coverage ] ****** [2238 done /2030 queued / 16 running / 2237 errors / 24% coverage ] ****** [2239 done /2029 queued / 16 running / 2238 errors / 24% coverage ] ****** [2239 done /2029 queued / 16 running / 2238 errors / 24% coverage ] ****** [2240 done /2029 queued / 16 running / 2239 errors / 24% coverage ] ****** [2240 done /2029 queued / 16 running / 2239 errors / 24% coverage ] ****** [2241 done /2028 queued / 16 running / 2240 errors / 24% coverage ] ****** [2241 done /2028 queued / 16 running / 2240 errors / 24% coverage ] ****** [2242 done /2029 queued / 16 running / 2241 errors / 24% coverage ] ****** [2242 done /2029 queued / 16 running / 2241 errors / 24% coverage ] ****** [2243 done /2029 queued / 16 running / 2242 errors / 24% coverage ] ****** [2243 done /2029 queued / 16 running / 2242 errors / 24% coverage ] ****** [2244 done /2029 queued / 16 running / 2243 errors / 24% coverage ] ****** [2244 done /2029 queued / 16 running / 2243 errors / 24% coverage ] ****** [2245 done /2028 queued / 16 running / 2244 errors / 24% coverage ] ****** [2245 done /2028 queued / 16 running / 2244 errors / 24% coverage ] ****** [2246 done /2029 queued / 16 running / 2245 errors / 24% coverage ] ****** [2246 done /2029 queued / 16 running / 2245 errors / 24% coverage ] ****** [2247 done /2031 queued / 16 running / 2246 errors / 24% coverage ] ****** [2247 done /2031 queued / 16 running / 2246 errors / 24% coverage ] ****** [2248 done /2032 queued / 16 running / 2247 errors / 24% coverage ] ****** [2248 done /2032 queued / 16 running / 2247 errors / 24% coverage ] ****** [2249 done /2032 queued / 16 running / 2248 errors / 24% coverage ] ****** [2249 done /2032 queued / 16 running / 2248 errors / 24% coverage ] ****** [2250 done /2033 queued / 16 running / 2249 errors / 24% coverage ] ****** [2250 done /2033 queued / 16 running / 2249 errors / 24% coverage ] ****** [2251 done /2035 queued / 16 running / 2250 errors / 24% coverage ] ****** [2251 done /2035 queued / 16 running / 2250 errors / 24% coverage ] ****** [2252 done /2035 queued / 16 running / 2251 errors / 24% coverage ] ****** [2252 done /2035 queued / 16 running / 2251 errors / 24% coverage ] ****** [2253 done /2035 queued / 16 running / 2252 errors / 24% coverage ] ****** [2253 done /2035 queued / 16 running / 2252 errors / 24% coverage ] ****** [2254 done /2035 queued / 16 running / 2253 errors / 24% coverage ] ****** [2254 done /2035 queued / 16 running / 2253 errors / 24% coverage ] ****** [2255 done /2035 queued / 16 running / 2254 errors / 24% coverage ] ****** [2255 done /2035 queued / 16 running / 2254 errors / 24% coverage ] ****** [2256 done /2036 queued / 16 running / 2255 errors / 24% coverage ] ****** [2256 done /2036 queued / 16 running / 2255 errors / 24% coverage ] ****** [2257 done /2038 queued / 16 running / 2256 errors / 24% coverage ] ****** [2257 done /2038 queued / 16 running / 2256 errors / 24% coverage ] ****** [2258 done /2039 queued / 16 running / 2257 errors / 24% coverage ] ****** [2258 done /2039 queued / 16 running / 2257 errors / 24% coverage ] ****** [2259 done /2039 queued / 16 running / 2258 errors / 24% coverage ] ****** [2259 done /2039 queued / 16 running / 2258 errors / 24% coverage ] ****** [2260 done /2039 queued / 16 running / 2259 errors / 24% coverage ] ****** [2260 done /2039 queued / 16 running / 2259 errors / 24% coverage ] ****** [2261 done /2043 queued / 16 running / 2260 errors / 24% coverage ] ****** [2261 done /2043 queued / 16 running / 2260 errors / 24% coverage ] ****** [2262 done /2044 queued / 16 running / 2261 errors / 24% coverage ] ****** [2262 done /2044 queued / 16 running / 2261 errors / 24% coverage ] ****** [2263 done /2047 queued / 16 running / 2262 errors / 24% coverage ] ****** [2263 done /2047 queued / 16 running / 2262 errors / 24% coverage ] ****** [2264 done /2047 queued / 16 running / 2263 errors / 24% coverage ] ****** [2264 done /2047 queued / 16 running / 2263 errors / 24% coverage ] ****** [2265 done /2046 queued / 16 running / 2264 errors / 24% coverage ] ****** [2265 done /2046 queued / 16 running / 2264 errors / 24% coverage ] ****** [2266 done /2045 queued / 16 running / 2265 errors / 24% coverage ] ****** [2266 done /2045 queued / 16 running / 2265 errors / 24% coverage ] ****** [2267 done /2047 queued / 16 running / 2266 errors / 24% coverage ] ****** [2267 done /2047 queued / 16 running / 2266 errors / 24% coverage ] ****** [2268 done /2050 queued / 16 running / 2267 errors / 24% coverage ] ****** [2268 done /2050 queued / 16 running / 2267 errors / 24% coverage ] ****** [2269 done /2054 queued / 16 running / 2268 errors / 24% coverage ] ****** [2269 done /2054 queued / 16 running / 2268 errors / 24% coverage ] ****** [2270 done /2053 queued / 16 running / 2269 errors / 24% coverage ] ****** [2270 done /2053 queued / 16 running / 2269 errors / 24% coverage ] ****** [2271 done /2053 queued / 16 running / 2270 errors / 24% coverage ] ****** [2271 done /2053 queued / 16 running / 2270 errors / 24% coverage ] ****** [2272 done /2053 queued / 16 running / 2271 errors / 24% coverage ] ****** [2272 done /2053 queued / 16 running / 2271 errors / 24% coverage ] ****** [2273 done /2053 queued / 16 running / 2272 errors / 24% coverage ] ****** [2273 done /2053 queued / 16 running / 2272 errors / 24% coverage ] ****** [2274 done /2053 queued / 16 running / 2273 errors / 24% coverage ] ****** [2274 done /2053 queued / 16 running / 2273 errors / 24% coverage ] ****** [2275 done /2057 queued / 16 running / 2274 errors / 24% coverage ] ****** [2275 done /2057 queued / 16 running / 2274 errors / 24% coverage ] ****** [2276 done /2061 queued / 16 running / 2275 errors / 24% coverage ] ****** [2276 done /2061 queued / 16 running / 2275 errors / 24% coverage ] ****** [2277 done /2063 queued / 16 running / 2276 errors / 24% coverage ] ****** [2277 done /2063 queued / 16 running / 2276 errors / 24% coverage ] ****** [2278 done /2065 queued / 16 running / 2277 errors / 24% coverage ] ****** [2278 done /2065 queued / 16 running / 2277 errors / 24% coverage ] ****** [2279 done /2065 queued / 16 running / 2278 errors / 24% coverage ] ****** [2279 done /2065 queued / 16 running / 2278 errors / 24% coverage ] ****** [2280 done /2066 queued / 16 running / 2279 errors / 24% coverage ] ****** [2280 done /2066 queued / 16 running / 2279 errors / 24% coverage ] ****** [2281 done /2065 queued / 16 running / 2280 errors / 24% coverage ] ****** [2281 done /2065 queued / 16 running / 2280 errors / 24% coverage ] ****** [2282 done /2065 queued / 16 running / 2281 errors / 24% coverage ] ****** [2282 done /2065 queued / 16 running / 2281 errors / 24% coverage ] ****** [2283 done /2069 queued / 16 running / 2282 errors / 24% coverage ] ****** [2283 done /2069 queued / 16 running / 2282 errors / 24% coverage ] ****** [2284 done /2073 queued / 16 running / 2283 errors / 24% coverage ] ****** [2284 done /2073 queued / 16 running / 2283 errors / 24% coverage ] ****** [2285 done /2072 queued / 16 running / 2284 errors / 24% coverage ] ****** [2285 done /2072 queued / 16 running / 2284 errors / 24% coverage ] ****** [2286 done /2075 queued / 16 running / 2285 errors / 24% coverage ] ****** [2286 done /2075 queued / 16 running / 2285 errors / 24% coverage ] ****** [2287 done /2074 queued / 16 running / 2286 errors / 24% coverage ] ****** [2287 done /2074 queued / 16 running / 2286 errors / 24% coverage ] ****** [2288 done /2073 queued / 16 running / 2287 errors / 24% coverage ] ****** [2288 done /2073 queued / 16 running / 2287 errors / 24% coverage ] ****** [2289 done /2075 queued / 16 running / 2288 errors / 24% coverage ] ****** [2289 done /2075 queued / 16 running / 2288 errors / 24% coverage ] ****** [2290 done /2079 queued / 16 running / 2289 errors / 24% coverage ] ****** [2290 done /2079 queued / 16 running / 2289 errors / 24% coverage ] ****** [2291 done /2079 queued / 16 running / 2290 errors / 24% coverage ] ****** [2291 done /2079 queued / 16 running / 2290 errors / 24% coverage ] ****** [2292 done /2080 queued / 16 running / 2291 errors / 24% coverage ] ****** [2292 done /2080 queued / 16 running / 2291 errors / 24% coverage ] ****** [2293 done /2080 queued / 16 running / 2292 errors / 24% coverage ] ****** [2293 done /2080 queued / 16 running / 2292 errors / 24% coverage ] ****** [2294 done /2080 queued / 16 running / 2293 errors / 24% coverage ] ****** [2294 done /2080 queued / 16 running / 2293 errors / 24% coverage ] ****** [2295 done /2080 queued / 16 running / 2294 errors / 24% coverage ] ****** [2295 done /2080 queued / 16 running / 2294 errors / 24% coverage ] ****** [2296 done /2084 queued / 16 running / 2295 errors / 24% coverage ] ****** [2296 done /2084 queued / 16 running / 2295 errors / 24% coverage ] ****** [2297 done /2086 queued / 16 running / 2296 errors / 24% coverage ] ****** [2297 done /2086 queued / 16 running / 2296 errors / 24% coverage ] ****** [2298 done /2085 queued / 16 running / 2297 errors / 24% coverage ] ****** [2298 done /2085 queued / 16 running / 2297 errors / 24% coverage ] ****** [2299 done /2085 queued / 16 running / 2298 errors / 24% coverage ] ****** [2299 done /2085 queued / 16 running / 2298 errors / 24% coverage ] ****** [2300 done /2085 queued / 16 running / 2299 errors / 24% coverage ] ****** [2300 done /2085 queued / 16 running / 2299 errors / 24% coverage ] ****** [2301 done /2085 queued / 16 running / 2300 errors / 24% coverage ] ****** [2301 done /2085 queued / 16 running / 2300 errors / 24% coverage ] ****** [2302 done /2085 queued / 16 running / 2301 errors / 24% coverage ] ****** [2302 done /2085 queued / 16 running / 2301 errors / 24% coverage ] ****** [2303 done /2085 queued / 16 running / 2302 errors / 24% coverage ] ****** [2303 done /2085 queued / 16 running / 2302 errors / 24% coverage ] ****** [2304 done /2085 queued / 16 running / 2303 errors / 24% coverage ] ****** [2304 done /2085 queued / 16 running / 2303 errors / 24% coverage ] ****** [2305 done /2086 queued / 16 running / 2304 errors / 24% coverage ] ****** [2305 done /2086 queued / 16 running / 2304 errors / 24% coverage ] ****** [2306 done /2086 queued / 16 running / 2305 errors / 24% coverage ] ****** [2306 done /2086 queued / 16 running / 2305 errors / 24% coverage ] ****** [2307 done /2085 queued / 16 running / 2306 errors / 24% coverage ] ****** [2307 done /2085 queued / 16 running / 2306 errors / 24% coverage ] ****** [2308 done /2086 queued / 16 running / 2307 errors / 24% coverage ] ****** [2308 done /2086 queued / 16 running / 2307 errors / 24% coverage ] ****** [2309 done /2089 queued / 16 running / 2308 errors / 24% coverage ] ****** [2309 done /2089 queued / 16 running / 2308 errors / 24% coverage ] ****** [2310 done /2088 queued / 16 running / 2309 errors / 24% coverage ] ****** [2310 done /2088 queued / 16 running / 2309 errors / 24% coverage ] ****** [2311 done /2089 queued / 16 running / 2310 errors / 24% coverage ] ****** [2311 done /2089 queued / 16 running / 2310 errors / 24% coverage ] ****** [2312 done /2089 queued / 16 running / 2311 errors / 24% coverage ] ****** [2312 done /2089 queued / 16 running / 2311 errors / 24% coverage ] ****** [2313 done /2089 queued / 16 running / 2312 errors / 24% coverage ] ****** [2313 done /2089 queued / 16 running / 2312 errors / 24% coverage ] ****** [2314 done /2091 queued / 16 running / 2313 errors / 24% coverage ] ****** [2314 done /2091 queued / 16 running / 2313 errors / 24% coverage ] ****** [2315 done /2090 queued / 16 running / 2314 errors / 24% coverage ] ****** [2315 done /2090 queued / 16 running / 2314 errors / 24% coverage ] ****** [2316 done /2090 queued / 16 running / 2315 errors / 24% coverage ] ****** [2316 done /2090 queued / 16 running / 2315 errors / 24% coverage ] ****** [2317 done /2094 queued / 16 running / 2316 errors / 24% coverage ] ****** [2317 done /2094 queued / 16 running / 2316 errors / 24% coverage ] ****** [2318 done /2093 queued / 16 running / 2317 errors / 24% coverage ] ****** [2318 done /2093 queued / 16 running / 2317 errors / 24% coverage ] ****** [2319 done /2096 queued / 16 running / 2318 errors / 24% coverage ] ****** [2319 done /2096 queued / 16 running / 2318 errors / 24% coverage ] ****** [2320 done /2095 queued / 16 running / 2319 errors / 24% coverage ] ****** [2320 done /2095 queued / 16 running / 2319 errors / 24% coverage ] ****** [2321 done /2094 queued / 16 running / 2320 errors / 24% coverage ] ****** [2321 done /2094 queued / 16 running / 2320 errors / 24% coverage ] ****** [2322 done /2098 queued / 16 running / 2321 errors / 24% coverage ] ****** [2322 done /2098 queued / 16 running / 2321 errors / 24% coverage ] ****** [2323 done /2101 queued / 16 running / 2322 errors / 24% coverage ] ****** [2323 done /2101 queued / 16 running / 2322 errors / 24% coverage ] ****** [2324 done /2107 queued / 16 running / 2323 errors / 24% coverage ] ****** [2324 done /2107 queued / 16 running / 2323 errors / 24% coverage ] ****** [2325 done /2109 queued / 16 running / 2324 errors / 24% coverage ] ****** [2325 done /2109 queued / 16 running / 2324 errors / 24% coverage ] ****** [2326 done /2111 queued / 16 running / 2325 errors / 24% coverage ] ****** [2326 done /2111 queued / 16 running / 2325 errors / 24% coverage ] ****** [2327 done /2110 queued / 16 running / 2326 errors / 24% coverage ] ****** [2327 done /2110 queued / 16 running / 2326 errors / 24% coverage ] ****** [2328 done /2112 queued / 16 running / 2327 errors / 24% coverage ] ****** [2328 done /2112 queued / 16 running / 2327 errors / 24% coverage ] ****** [2329 done /2115 queued / 16 running / 2328 errors / 24% coverage ] ****** [2329 done /2115 queued / 16 running / 2328 errors / 24% coverage ] ****** [2330 done /2119 queued / 16 running / 2329 errors / 24% coverage ] ****** [2330 done /2119 queued / 16 running / 2329 errors / 24% coverage ] ****** [2331 done /2118 queued / 16 running / 2330 errors / 24% coverage ] ****** [2331 done /2118 queued / 16 running / 2330 errors / 24% coverage ] ****** [2332 done /2121 queued / 16 running / 2331 errors / 24% coverage ] ****** [2332 done /2121 queued / 16 running / 2331 errors / 24% coverage ] ****** [2333 done /2122 queued / 16 running / 2332 errors / 24% coverage ] ****** [2333 done /2122 queued / 16 running / 2332 errors / 24% coverage ] ****** [2334 done /2122 queued / 16 running / 2333 errors / 24% coverage ] ****** [2334 done /2122 queued / 16 running / 2333 errors / 24% coverage ] ****** [2335 done /2121 queued / 16 running / 2334 errors / 24% coverage ] ****** [2335 done /2121 queued / 16 running / 2334 errors / 24% coverage ] ****** [2336 done /2121 queued / 16 running / 2335 errors / 24% coverage ] ****** [2336 done /2121 queued / 16 running / 2335 errors / 24% coverage ] ****** [2337 done /2120 queued / 16 running / 2336 errors / 24% coverage ] ****** [2337 done /2120 queued / 16 running / 2336 errors / 24% coverage ] ****** [2338 done /2120 queued / 16 running / 2337 errors / 24% coverage ] ****** [2338 done /2120 queued / 16 running / 2337 errors / 24% coverage ] ****** [2339 done /2120 queued / 16 running / 2338 errors / 24% coverage ] ****** [2339 done /2120 queued / 16 running / 2338 errors / 24% coverage ] ****** [2340 done /2123 queued / 16 running / 2339 errors / 24% coverage ] ****** [2340 done /2123 queued / 16 running / 2339 errors / 24% coverage ] ****** [2341 done /2123 queued / 16 running / 2340 errors / 24% coverage ] ****** [2341 done /2123 queued / 16 running / 2340 errors / 24% coverage ] ****** [2342 done /2125 queued / 16 running / 2341 errors / 24% coverage ] ****** [2342 done /2125 queued / 16 running / 2341 errors / 24% coverage ] ****** [2343 done /2126 queued / 16 running / 2342 errors / 24% coverage ] ****** [2343 done /2126 queued / 16 running / 2342 errors / 24% coverage ] ****** [2344 done /2128 queued / 16 running / 2343 errors / 24% coverage ] ****** [2344 done /2128 queued / 16 running / 2343 errors / 24% coverage ] ****** [2345 done /2127 queued / 16 running / 2344 errors / 24% coverage ] ****** [2345 done /2127 queued / 16 running / 2344 errors / 24% coverage ] ****** [2346 done /2127 queued / 16 running / 2345 errors / 24% coverage ] ****** [2346 done /2127 queued / 16 running / 2345 errors / 24% coverage ] ****** [2347 done /2126 queued / 16 running / 2346 errors / 24% coverage ] ****** [2347 done /2126 queued / 16 running / 2346 errors / 24% coverage ] ****** [2348 done /2126 queued / 16 running / 2347 errors / 24% coverage ] ****** [2348 done /2126 queued / 16 running / 2347 errors / 24% coverage ] ****** [2349 done /2128 queued / 16 running / 2348 errors / 24% coverage ] ****** [2349 done /2128 queued / 16 running / 2348 errors / 24% coverage ] ****** [2350 done /2127 queued / 16 running / 2349 errors / 24% coverage ] ****** [2350 done /2127 queued / 16 running / 2349 errors / 24% coverage ] ****** [2351 done /2126 queued / 16 running / 2350 errors / 24% coverage ] ****** [2351 done /2126 queued / 16 running / 2350 errors / 24% coverage ] ****** [2352 done /2130 queued / 16 running / 2351 errors / 24% coverage ] ****** [2352 done /2130 queued / 16 running / 2351 errors / 24% coverage ] ****** [2353 done /2134 queued / 16 running / 2352 errors / 24% coverage ] ****** [2353 done /2134 queued / 16 running / 2352 errors / 24% coverage ] ****** [2354 done /2136 queued / 16 running / 2353 errors / 24% coverage ] ****** [2354 done /2136 queued / 16 running / 2353 errors / 24% coverage ] ****** [2355 done /2135 queued / 16 running / 2354 errors / 24% coverage ] ****** [2355 done /2135 queued / 16 running / 2354 errors / 24% coverage ] ****** [2356 done /2139 queued / 16 running / 2355 errors / 24% coverage ] ****** [2356 done /2139 queued / 16 running / 2355 errors / 24% coverage ] ****** [2357 done /2138 queued / 16 running / 2356 errors / 24% coverage ] ****** [2357 done /2138 queued / 16 running / 2356 errors / 24% coverage ] ****** [2358 done /2137 queued / 16 running / 2357 errors / 24% coverage ] ****** [2358 done /2137 queued / 16 running / 2357 errors / 24% coverage ] ****** [2359 done /2138 queued / 16 running / 2358 errors / 24% coverage ] ****** [2359 done /2138 queued / 16 running / 2358 errors / 24% coverage ] ****** [2360 done /2140 queued / 16 running / 2359 errors / 24% coverage ] ****** [2360 done /2140 queued / 16 running / 2359 errors / 24% coverage ] ****** [2361 done /2145 queued / 16 running / 2360 errors / 24% coverage ] ****** [2361 done /2145 queued / 16 running / 2360 errors / 24% coverage ] ****** [2362 done /2147 queued / 16 running / 2361 errors / 24% coverage ] ****** [2362 done /2147 queued / 16 running / 2361 errors / 24% coverage ] ****** [2363 done /2149 queued / 16 running / 2362 errors / 24% coverage ] ****** [2363 done /2149 queued / 16 running / 2362 errors / 24% coverage ] ****** [2364 done /2148 queued / 16 running / 2363 errors / 24% coverage ] ****** [2364 done /2148 queued / 16 running / 2363 errors / 24% coverage ] ****** [2365 done /2151 queued / 16 running / 2364 errors / 24% coverage ] ****** [2365 done /2151 queued / 16 running / 2364 errors / 24% coverage ] ****** [2366 done /2150 queued / 16 running / 2365 errors / 24% coverage ] ****** [2366 done /2150 queued / 16 running / 2365 errors / 24% coverage ] ****** [2367 done /2153 queued / 16 running / 2366 errors / 24% coverage ] ****** [2367 done /2153 queued / 16 running / 2366 errors / 24% coverage ] ****** [2368 done /2154 queued / 16 running / 2367 errors / 24% coverage ] ****** [2368 done /2154 queued / 16 running / 2367 errors / 24% coverage ] ****** [2369 done /2154 queued / 16 running / 2368 errors / 24% coverage ] ****** [2369 done /2154 queued / 16 running / 2368 errors / 24% coverage ] ****** [2370 done /2154 queued / 16 running / 2369 errors / 24% coverage ] ****** [2370 done /2154 queued / 16 running / 2369 errors / 24% coverage ] ****** [2371 done /2154 queued / 16 running / 2370 errors / 24% coverage ] ****** [2371 done /2154 queued / 16 running / 2370 errors / 24% coverage ] ****** [2372 done /2155 queued / 16 running / 2371 errors / 24% coverage ] ****** [2372 done /2155 queued / 16 running / 2371 errors / 24% coverage ] ****** [2373 done /2156 queued / 16 running / 2372 errors / 24% coverage ] ****** [2373 done /2156 queued / 16 running / 2372 errors / 24% coverage ] ****** [2374 done /2156 queued / 16 running / 2373 errors / 24% coverage ] ****** [2374 done /2156 queued / 16 running / 2373 errors / 24% coverage ] ****** [2375 done /2156 queued / 16 running / 2374 errors / 24% coverage ] ****** [2375 done /2156 queued / 16 running / 2374 errors / 24% coverage ] ****** [2376 done /2155 queued / 16 running / 2375 errors / 24% coverage ] ****** [2376 done /2155 queued / 16 running / 2375 errors / 24% coverage ] ****** [2377 done /2155 queued / 16 running / 2376 errors / 24% coverage ] ****** [2377 done /2155 queued / 16 running / 2376 errors / 24% coverage ] ****** [2378 done /2156 queued / 16 running / 2377 errors / 24% coverage ] ****** [2378 done /2156 queued / 16 running / 2377 errors / 24% coverage ] ****** [2379 done /2155 queued / 16 running / 2378 errors / 24% coverage ] ****** [2379 done /2155 queued / 16 running / 2378 errors / 24% coverage ] ****** [2380 done /2155 queued / 16 running / 2379 errors / 24% coverage ] ****** [2380 done /2155 queued / 16 running / 2379 errors / 24% coverage ] ****** [2381 done /2155 queued / 16 running / 2380 errors / 24% coverage ] ****** [2381 done /2155 queued / 16 running / 2380 errors / 24% coverage ] ****** [2382 done /2157 queued / 16 running / 2381 errors / 24% coverage ] ****** [2382 done /2157 queued / 16 running / 2381 errors / 24% coverage ] ****** [2383 done /2157 queued / 16 running / 2382 errors / 24% coverage ] ****** [2383 done /2157 queued / 16 running / 2382 errors / 24% coverage ] ****** [2384 done /2156 queued / 16 running / 2383 errors / 24% coverage ] ****** [2384 done /2156 queued / 16 running / 2383 errors / 24% coverage ] ****** [2385 done /2155 queued / 16 running / 2384 errors / 24% coverage ] ****** [2385 done /2155 queued / 16 running / 2384 errors / 24% coverage ] ****** [2386 done /2154 queued / 16 running / 2385 errors / 24% coverage ] ****** [2386 done /2154 queued / 16 running / 2385 errors / 24% coverage ] ****** [2387 done /2154 queued / 16 running / 2386 errors / 24% coverage ] ****** [2387 done /2154 queued / 16 running / 2386 errors / 24% coverage ] ****** [2388 done /2153 queued / 16 running / 2387 errors / 24% coverage ] ****** [2388 done /2153 queued / 16 running / 2387 errors / 24% coverage ] ****** [2389 done /2152 queued / 16 running / 2388 errors / 24% coverage ] ****** [2389 done /2152 queued / 16 running / 2388 errors / 24% coverage ] ****** [2390 done /2151 queued / 16 running / 2389 errors / 24% coverage ] ****** [2390 done /2151 queued / 16 running / 2389 errors / 24% coverage ] ****** [2391 done /2150 queued / 16 running / 2390 errors / 24% coverage ] ****** [2391 done /2150 queued / 16 running / 2390 errors / 24% coverage ] ****** [2392 done /2149 queued / 16 running / 2391 errors / 24% coverage ] ****** [2392 done /2149 queued / 16 running / 2391 errors / 24% coverage ] ****** [2393 done /2151 queued / 16 running / 2392 errors / 24% coverage ] ****** [2393 done /2151 queued / 16 running / 2392 errors / 24% coverage ] ****** [2394 done /2150 queued / 16 running / 2393 errors / 24% coverage ] ****** [2394 done /2150 queued / 16 running / 2393 errors / 24% coverage ] ****** [2395 done /2154 queued / 16 running / 2394 errors / 24% coverage ] ****** [2395 done /2154 queued / 16 running / 2394 errors / 24% coverage ] ****** [2396 done /2154 queued / 16 running / 2395 errors / 24% coverage ] ****** [2396 done /2154 queued / 16 running / 2395 errors / 24% coverage ] ****** [2397 done /2156 queued / 16 running / 2396 errors / 24% coverage ] ****** [2397 done /2156 queued / 16 running / 2396 errors / 24% coverage ] ****** [2398 done /2157 queued / 16 running / 2397 errors / 24% coverage ] ****** [2398 done /2157 queued / 16 running / 2397 errors / 24% coverage ] ****** [2399 done /2156 queued / 16 running / 2398 errors / 24% coverage ] ****** [2399 done /2156 queued / 16 running / 2398 errors / 24% coverage ] ****** [2400 done /2158 queued / 16 running / 2399 errors / 24% coverage ] ****** [2400 done /2158 queued / 16 running / 2399 errors / 24% coverage ] ****** [2401 done /2161 queued / 16 running / 2400 errors / 24% coverage ] ****** [2401 done /2161 queued / 16 running / 2400 errors / 24% coverage ] ****** [2402 done /2162 queued / 16 running / 2401 errors / 24% coverage ] ****** [2402 done /2162 queued / 16 running / 2401 errors / 24% coverage ] ****** [2403 done /2161 queued / 16 running / 2402 errors / 24% coverage ] ****** [2403 done /2161 queued / 16 running / 2402 errors / 24% coverage ] ****** [2404 done /2161 queued / 16 running / 2403 errors / 24% coverage ] ****** [2404 done /2161 queued / 16 running / 2403 errors / 24% coverage ] ****** [2405 done /2162 queued / 16 running / 2404 errors / 24% coverage ] ****** [2405 done /2162 queued / 16 running / 2404 errors / 24% coverage ] ****** [2406 done /2161 queued / 16 running / 2405 errors / 24% coverage ] ****** [2406 done /2161 queued / 16 running / 2405 errors / 24% coverage ] ****** [2407 done /2164 queued / 16 running / 2406 errors / 24% coverage ] ****** [2407 done /2164 queued / 16 running / 2406 errors / 24% coverage ] ****** [2408 done /2163 queued / 16 running / 2407 errors / 24% coverage ] ****** [2408 done /2163 queued / 16 running / 2407 errors / 24% coverage ] ****** [2409 done /2169 queued / 16 running / 2408 errors / 24% coverage ] ****** [2409 done /2169 queued / 16 running / 2408 errors / 24% coverage ] ****** [2410 done /2168 queued / 16 running / 2409 errors / 24% coverage ] ****** [2410 done /2168 queued / 16 running / 2409 errors / 24% coverage ] ****** [2411 done /2170 queued / 16 running / 2410 errors / 24% coverage ] ****** [2411 done /2170 queued / 16 running / 2410 errors / 24% coverage ] ****** [2412 done /2173 queued / 16 running / 2411 errors / 24% coverage ] ****** [2412 done /2173 queued / 16 running / 2411 errors / 24% coverage ] ****** [2413 done /2176 queued / 16 running / 2412 errors / 24% coverage ] ****** [2413 done /2176 queued / 16 running / 2412 errors / 24% coverage ] ****** [2414 done /2175 queued / 16 running / 2413 errors / 24% coverage ] ****** [2414 done /2175 queued / 16 running / 2413 errors / 24% coverage ] ****** [2415 done /2174 queued / 16 running / 2414 errors / 24% coverage ] ****** [2415 done /2174 queued / 16 running / 2414 errors / 24% coverage ] ****** [2416 done /2175 queued / 16 running / 2415 errors / 24% coverage ] ****** [2416 done /2175 queued / 16 running / 2415 errors / 24% coverage ] ****** [2417 done /2175 queued / 16 running / 2416 errors / 24% coverage ] ****** [2417 done /2175 queued / 16 running / 2416 errors / 24% coverage ] ****** [2418 done /2176 queued / 16 running / 2417 errors / 24% coverage ] ****** [2418 done /2176 queued / 16 running / 2417 errors / 24% coverage ] ****** [2419 done /2175 queued / 16 running / 2418 errors / 24% coverage ] ****** [2419 done /2175 queued / 16 running / 2418 errors / 24% coverage ] ****** [2420 done /2179 queued / 16 running / 2419 errors / 24% coverage ] ****** [2420 done /2179 queued / 16 running / 2419 errors / 24% coverage ] ****** [2421 done /2179 queued / 16 running / 2420 errors / 24% coverage ] ****** [2421 done /2179 queued / 16 running / 2420 errors / 24% coverage ] ****** [2422 done /2180 queued / 16 running / 2421 errors / 24% coverage ] ****** [2422 done /2180 queued / 16 running / 2421 errors / 24% coverage ] ****** [2423 done /2183 queued / 16 running / 2422 errors / 24% coverage ] ****** [2423 done /2183 queued / 16 running / 2422 errors / 24% coverage ] ****** [2424 done /2187 queued / 16 running / 2423 errors / 24% coverage ] ****** [2424 done /2187 queued / 16 running / 2423 errors / 24% coverage ] ****** [2425 done /2190 queued / 16 running / 2424 errors / 24% coverage ] ****** [2425 done /2190 queued / 16 running / 2424 errors / 24% coverage ] ****** [2426 done /2193 queued / 16 running / 2425 errors / 24% coverage ] ****** [2426 done /2193 queued / 16 running / 2425 errors / 24% coverage ] ****** [2427 done /2193 queued / 16 running / 2426 errors / 24% coverage ] ****** [2427 done /2193 queued / 16 running / 2426 errors / 24% coverage ] ****** [2428 done /2192 queued / 16 running / 2427 errors / 24% coverage ] ****** [2428 done /2192 queued / 16 running / 2427 errors / 24% coverage ] ****** [2429 done /2195 queued / 16 running / 2428 errors / 24% coverage ] ****** [2429 done /2195 queued / 16 running / 2428 errors / 24% coverage ] ****** [2430 done /2195 queued / 16 running / 2429 errors / 24% coverage ] ****** [2430 done /2195 queued / 16 running / 2429 errors / 24% coverage ] ****** [2431 done /2196 queued / 16 running / 2430 errors / 24% coverage ] ****** [2431 done /2196 queued / 16 running / 2430 errors / 24% coverage ] ****** [2432 done /2196 queued / 16 running / 2431 errors / 24% coverage ] ****** [2432 done /2196 queued / 16 running / 2431 errors / 24% coverage ] ****** [2433 done /2195 queued / 16 running / 2432 errors / 24% coverage ] ****** [2433 done /2195 queued / 16 running / 2432 errors / 24% coverage ] ****** [2434 done /2195 queued / 16 running / 2433 errors / 24% coverage ] ****** [2434 done /2195 queued / 16 running / 2433 errors / 24% coverage ] ****** [2435 done /2197 queued / 16 running / 2434 errors / 24% coverage ] ****** [2435 done /2197 queued / 16 running / 2434 errors / 24% coverage ] ****** [2436 done /2196 queued / 16 running / 2435 errors / 24% coverage ] ****** [2436 done /2196 queued / 16 running / 2435 errors / 24% coverage ] ****** [2437 done /2195 queued / 16 running / 2436 errors / 24% coverage ] ****** [2437 done /2195 queued / 16 running / 2436 errors / 24% coverage ] ****** [2438 done /2194 queued / 16 running / 2437 errors / 24% coverage ] ****** [2438 done /2194 queued / 16 running / 2437 errors / 24% coverage ] ****** [2439 done /2195 queued / 16 running / 2438 errors / 24% coverage ] ****** [2439 done /2195 queued / 16 running / 2438 errors / 24% coverage ] ****** [2440 done /2195 queued / 16 running / 2439 errors / 24% coverage ] ****** [2440 done /2195 queued / 16 running / 2439 errors / 24% coverage ] ****** [2441 done /2199 queued / 16 running / 2440 errors / 24% coverage ] ****** [2441 done /2199 queued / 16 running / 2440 errors / 24% coverage ] ****** [2442 done /2200 queued / 16 running / 2441 errors / 24% coverage ] ****** [2442 done /2200 queued / 16 running / 2441 errors / 24% coverage ] ****** [2443 done /2200 queued / 16 running / 2442 errors / 24% coverage ] ****** [2443 done /2200 queued / 16 running / 2442 errors / 24% coverage ] ****** [2444 done /2200 queued / 16 running / 2443 errors / 24% coverage ] ****** [2444 done /2200 queued / 16 running / 2443 errors / 24% coverage ] ****** [2445 done /2199 queued / 16 running / 2444 errors / 24% coverage ] ****** [2445 done /2199 queued / 16 running / 2444 errors / 24% coverage ] ****** [2446 done /2200 queued / 16 running / 2445 errors / 24% coverage ] ****** [2446 done /2200 queued / 16 running / 2445 errors / 24% coverage ] ****** [2447 done /2202 queued / 16 running / 2446 errors / 24% coverage ] ****** [2447 done /2202 queued / 16 running / 2446 errors / 24% coverage ] ****** [2448 done /2201 queued / 16 running / 2447 errors / 24% coverage ] ****** [2448 done /2201 queued / 16 running / 2447 errors / 24% coverage ] ****** [2449 done /2202 queued / 16 running / 2448 errors / 24% coverage ] ****** [2449 done /2202 queued / 16 running / 2448 errors / 24% coverage ] ****** [2450 done /2206 queued / 16 running / 2449 errors / 24% coverage ] ****** [2450 done /2206 queued / 16 running / 2449 errors / 24% coverage ] ****** [2451 done /2208 queued / 16 running / 2450 errors / 24% coverage ] ****** [2451 done /2208 queued / 16 running / 2450 errors / 24% coverage ] ****** [2452 done /2209 queued / 16 running / 2451 errors / 24% coverage ] ****** [2452 done /2209 queued / 16 running / 2451 errors / 24% coverage ] ****** [2453 done /2210 queued / 16 running / 2452 errors / 24% coverage ] ****** [2453 done /2210 queued / 16 running / 2452 errors / 24% coverage ] ****** [2454 done /2209 queued / 16 running / 2453 errors / 24% coverage ] ****** [2454 done /2209 queued / 16 running / 2453 errors / 24% coverage ] ****** [2455 done /2211 queued / 16 running / 2454 errors / 24% coverage ] ****** [2455 done /2211 queued / 16 running / 2454 errors / 24% coverage ] ****** [2456 done /2215 queued / 16 running / 2455 errors / 24% coverage ] ****** [2456 done /2215 queued / 16 running / 2455 errors / 24% coverage ] ****** [2457 done /2216 queued / 16 running / 2456 errors / 24% coverage ] ****** [2457 done /2216 queued / 16 running / 2456 errors / 24% coverage ] ****** [2458 done /2217 queued / 16 running / 2457 errors / 24% coverage ] ****** [2458 done /2217 queued / 16 running / 2457 errors / 24% coverage ] ****** [2459 done /2217 queued / 16 running / 2458 errors / 24% coverage ] ****** [2459 done /2217 queued / 16 running / 2458 errors / 24% coverage ] ****** [2460 done /2216 queued / 16 running / 2459 errors / 24% coverage ] ****** [2460 done /2216 queued / 16 running / 2459 errors / 24% coverage ] ****** [2461 done /2215 queued / 16 running / 2460 errors / 24% coverage ] ****** [2461 done /2215 queued / 16 running / 2460 errors / 24% coverage ] ****** [2462 done /2218 queued / 16 running / 2461 errors / 24% coverage ] ****** [2462 done /2218 queued / 16 running / 2461 errors / 24% coverage ] ****** [2463 done /2220 queued / 16 running / 2462 errors / 24% coverage ] ****** [2463 done /2220 queued / 16 running / 2462 errors / 24% coverage ] ****** [2464 done /2222 queued / 16 running / 2463 errors / 24% coverage ] ****** [2464 done /2222 queued / 16 running / 2463 errors / 24% coverage ] ****** [2465 done /2223 queued / 16 running / 2464 errors / 24% coverage ] ****** [2465 done /2223 queued / 16 running / 2464 errors / 24% coverage ] ****** [2466 done /2227 queued / 16 running / 2465 errors / 24% coverage ] ****** [2466 done /2227 queued / 16 running / 2465 errors / 24% coverage ] ****** [2467 done /2229 queued / 16 running / 2466 errors / 24% coverage ] ****** [2467 done /2229 queued / 16 running / 2466 errors / 24% coverage ] ****** [2468 done /2230 queued / 16 running / 2467 errors / 24% coverage ] ****** [2468 done /2230 queued / 16 running / 2467 errors / 24% coverage ] ****** [2469 done /2231 queued / 16 running / 2468 errors / 24% coverage ] ****** [2469 done /2231 queued / 16 running / 2468 errors / 24% coverage ] ****** [2470 done /2234 queued / 16 running / 2469 errors / 24% coverage ] ****** [2470 done /2234 queued / 16 running / 2469 errors / 24% coverage ] ****** [2471 done /2236 queued / 16 running / 2470 errors / 24% coverage ] ****** [2471 done /2236 queued / 16 running / 2470 errors / 24% coverage ] ****** [2472 done /2235 queued / 16 running / 2471 errors / 24% coverage ] ****** [2472 done /2235 queued / 16 running / 2471 errors / 24% coverage ] ****** [2473 done /2236 queued / 16 running / 2472 errors / 24% coverage ] ****** [2473 done /2236 queued / 16 running / 2472 errors / 24% coverage ] ****** [2474 done /2236 queued / 16 running / 2473 errors / 24% coverage ] ****** [2474 done /2236 queued / 16 running / 2473 errors / 24% coverage ] ****** [2475 done /2235 queued / 16 running / 2474 errors / 24% coverage ] ****** [2475 done /2235 queued / 16 running / 2474 errors / 24% coverage ] ****** [2476 done /2235 queued / 16 running / 2475 errors / 24% coverage ] ****** [2476 done /2235 queued / 16 running / 2475 errors / 24% coverage ] ****** [2477 done /2238 queued / 16 running / 2476 errors / 24% coverage ] ****** [2477 done /2238 queued / 16 running / 2476 errors / 24% coverage ] ****** [2478 done /2237 queued / 16 running / 2477 errors / 24% coverage ] ****** [2478 done /2237 queued / 16 running / 2477 errors / 24% coverage ] ****** [2479 done /2236 queued / 16 running / 2478 errors / 24% coverage ] ****** [2479 done /2236 queued / 16 running / 2478 errors / 24% coverage ] ****** [2480 done /2237 queued / 16 running / 2479 errors / 24% coverage ] ****** [2480 done /2237 queued / 16 running / 2479 errors / 24% coverage ] ****** [2481 done /2237 queued / 16 running / 2480 errors / 24% coverage ] ****** [2481 done /2237 queued / 16 running / 2480 errors / 24% coverage ] ****** [2482 done /2239 queued / 16 running / 2481 errors / 24% coverage ] ****** [2482 done /2239 queued / 16 running / 2481 errors / 24% coverage ] ****** [2483 done /2242 queued / 16 running / 2482 errors / 24% coverage ] ****** [2483 done /2242 queued / 16 running / 2482 errors / 24% coverage ] ****** [2484 done /2245 queued / 16 running / 2483 errors / 24% coverage ] ****** [2484 done /2245 queued / 16 running / 2483 errors / 24% coverage ] ****** [2485 done /2247 queued / 16 running / 2484 errors / 24% coverage ] ****** [2485 done /2247 queued / 16 running / 2484 errors / 24% coverage ] ****** [2486 done /2251 queued / 16 running / 2485 errors / 24% coverage ] ****** [2486 done /2251 queued / 16 running / 2485 errors / 24% coverage ] ****** [2487 done /2250 queued / 16 running / 2486 errors / 24% coverage ] ****** [2487 done /2250 queued / 16 running / 2486 errors / 24% coverage ] ****** [2488 done /2252 queued / 16 running / 2487 errors / 24% coverage ] ****** [2488 done /2252 queued / 16 running / 2487 errors / 24% coverage ] ****** [2489 done /2254 queued / 16 running / 2488 errors / 24% coverage ] ****** [2489 done /2254 queued / 16 running / 2488 errors / 24% coverage ] ****** [2490 done /2253 queued / 16 running / 2489 errors / 24% coverage ] ****** [2490 done /2253 queued / 16 running / 2489 errors / 24% coverage ] ****** [2491 done /2253 queued / 16 running / 2490 errors / 24% coverage ] ****** [2491 done /2253 queued / 16 running / 2490 errors / 24% coverage ] ****** [2492 done /2254 queued / 16 running / 2491 errors / 24% coverage ] ****** [2492 done /2254 queued / 16 running / 2491 errors / 24% coverage ] ****** [2493 done /2256 queued / 16 running / 2492 errors / 24% coverage ] ****** [2493 done /2256 queued / 16 running / 2492 errors / 24% coverage ] ****** [2494 done /2257 queued / 16 running / 2493 errors / 24% coverage ] ****** [2494 done /2257 queued / 16 running / 2493 errors / 24% coverage ] ****** [2495 done /2256 queued / 16 running / 2494 errors / 24% coverage ] ****** [2495 done /2256 queued / 16 running / 2494 errors / 24% coverage ] ****** [2496 done /2255 queued / 16 running / 2495 errors / 24% coverage ] ****** [2496 done /2255 queued / 16 running / 2495 errors / 24% coverage ] ****** [2497 done /2254 queued / 16 running / 2496 errors / 24% coverage ] ****** [2497 done /2254 queued / 16 running / 2496 errors / 24% coverage ] ****** [2498 done /2257 queued / 16 running / 2497 errors / 24% coverage ] ****** [2498 done /2257 queued / 16 running / 2497 errors / 24% coverage ] ****** [2499 done /2260 queued / 16 running / 2498 errors / 24% coverage ] ****** [2499 done /2260 queued / 16 running / 2498 errors / 24% coverage ] ****** [2500 done /2261 queued / 16 running / 2499 errors / 24% coverage ] ****** [2500 done /2261 queued / 16 running / 2499 errors / 24% coverage ] ****** [2501 done /2260 queued / 16 running / 2500 errors / 24% coverage ] ****** [2501 done /2260 queued / 16 running / 2500 errors / 24% coverage ] ****** [2502 done /2264 queued / 16 running / 2501 errors / 24% coverage ] ****** [2502 done /2264 queued / 16 running / 2501 errors / 24% coverage ] ****** [2503 done /2264 queued / 16 running / 2502 errors / 24% coverage ] ****** [2503 done /2264 queued / 16 running / 2502 errors / 24% coverage ] ****** [2504 done /2264 queued / 16 running / 2503 errors / 24% coverage ] ****** [2504 done /2264 queued / 16 running / 2503 errors / 24% coverage ] ****** [2505 done /2264 queued / 16 running / 2504 errors / 24% coverage ] ****** [2505 done /2264 queued / 16 running / 2504 errors / 24% coverage ] ****** [2506 done /2267 queued / 16 running / 2505 errors / 24% coverage ] ****** [2506 done /2267 queued / 16 running / 2505 errors / 24% coverage ] ****** [2507 done /2266 queued / 16 running / 2506 errors / 24% coverage ] ****** [2507 done /2266 queued / 16 running / 2506 errors / 24% coverage ] ****** [2508 done /2265 queued / 16 running / 2507 errors / 24% coverage ] ****** [2508 done /2265 queued / 16 running / 2507 errors / 24% coverage ] ****** [2509 done /2265 queued / 16 running / 2508 errors / 24% coverage ] ****** [2509 done /2265 queued / 16 running / 2508 errors / 24% coverage ] ****** [2510 done /2266 queued / 16 running / 2509 errors / 24% coverage ] ****** [2510 done /2266 queued / 16 running / 2509 errors / 24% coverage ] ****** [2511 done /2266 queued / 16 running / 2510 errors / 24% coverage ] ****** [2511 done /2266 queued / 16 running / 2510 errors / 24% coverage ] ****** [2512 done /2266 queued / 16 running / 2511 errors / 24% coverage ] ****** [2512 done /2266 queued / 16 running / 2511 errors / 24% coverage ] ****** [2513 done /2269 queued / 16 running / 2512 errors / 24% coverage ] ****** [2513 done /2269 queued / 16 running / 2512 errors / 24% coverage ] ****** [2514 done /2268 queued / 16 running / 2513 errors / 24% coverage ] ****** [2514 done /2268 queued / 16 running / 2513 errors / 24% coverage ] ****** [2515 done /2273 queued / 16 running / 2514 errors / 24% coverage ] ****** [2515 done /2273 queued / 16 running / 2514 errors / 24% coverage ] ****** [2516 done /2277 queued / 16 running / 2515 errors / 24% coverage ] ****** [2516 done /2277 queued / 16 running / 2515 errors / 24% coverage ] ****** [2517 done /2280 queued / 16 running / 2516 errors / 24% coverage ] ****** [2517 done /2280 queued / 16 running / 2516 errors / 24% coverage ] ****** [2518 done /2285 queued / 16 running / 2517 errors / 24% coverage ] ****** [2518 done /2285 queued / 16 running / 2517 errors / 24% coverage ] ****** [2519 done /2287 queued / 16 running / 2518 errors / 24% coverage ] ****** [2519 done /2287 queued / 16 running / 2518 errors / 24% coverage ] ****** [2520 done /2286 queued / 16 running / 2519 errors / 24% coverage ] ****** [2520 done /2286 queued / 16 running / 2519 errors / 24% coverage ] ****** [2521 done /2287 queued / 16 running / 2520 errors / 24% coverage ] ****** [2521 done /2287 queued / 16 running / 2520 errors / 24% coverage ] ****** [2522 done /2290 queued / 16 running / 2521 errors / 24% coverage ] ****** [2522 done /2290 queued / 16 running / 2521 errors / 24% coverage ] ****** [2523 done /2289 queued / 16 running / 2522 errors / 24% coverage ] ****** [2523 done /2289 queued / 16 running / 2522 errors / 24% coverage ] ****** [2524 done /2292 queued / 16 running / 2523 errors / 24% coverage ] ****** [2524 done /2292 queued / 16 running / 2523 errors / 24% coverage ] ****** [2525 done /2292 queued / 16 running / 2524 errors / 24% coverage ] ****** [2525 done /2292 queued / 16 running / 2524 errors / 24% coverage ] ****** [2526 done /2293 queued / 16 running / 2525 errors / 24% coverage ] ****** [2526 done /2293 queued / 16 running / 2525 errors / 24% coverage ] ****** [2527 done /2297 queued / 16 running / 2526 errors / 24% coverage ] ****** [2527 done /2297 queued / 16 running / 2526 errors / 24% coverage ] ****** [2528 done /2297 queued / 16 running / 2527 errors / 24% coverage ] ****** [2528 done /2297 queued / 16 running / 2527 errors / 24% coverage ] ****** [2529 done /2300 queued / 16 running / 2528 errors / 24% coverage ] ****** [2529 done /2300 queued / 16 running / 2528 errors / 24% coverage ] ****** [2530 done /2299 queued / 16 running / 2529 errors / 24% coverage ] ****** [2530 done /2299 queued / 16 running / 2529 errors / 24% coverage ] ****** [2531 done /2298 queued / 16 running / 2530 errors / 24% coverage ] ****** [2531 done /2298 queued / 16 running / 2530 errors / 24% coverage ] ****** [2532 done /2299 queued / 16 running / 2531 errors / 24% coverage ] ****** [2532 done /2299 queued / 16 running / 2531 errors / 24% coverage ] ****** [2533 done /2299 queued / 16 running / 2532 errors / 24% coverage ] ****** [2533 done /2299 queued / 16 running / 2532 errors / 24% coverage ] ****** [2534 done /2298 queued / 16 running / 2533 errors / 24% coverage ] ****** [2534 done /2298 queued / 16 running / 2533 errors / 24% coverage ] ****** [2535 done /2297 queued / 16 running / 2534 errors / 24% coverage ] ****** [2535 done /2297 queued / 16 running / 2534 errors / 24% coverage ] ****** [2536 done /2297 queued / 16 running / 2535 errors / 24% coverage ] ****** [2536 done /2297 queued / 16 running / 2535 errors / 24% coverage ] ****** [2537 done /2299 queued / 16 running / 2536 errors / 24% coverage ] ****** [2537 done /2299 queued / 16 running / 2536 errors / 24% coverage ] ****** [2538 done /2298 queued / 16 running / 2537 errors / 24% coverage ] ****** [2538 done /2298 queued / 16 running / 2537 errors / 24% coverage ] ****** [2539 done /2299 queued / 16 running / 2538 errors / 24% coverage ] ****** [2539 done /2299 queued / 16 running / 2538 errors / 24% coverage ] ****** [2540 done /2300 queued / 16 running / 2539 errors / 24% coverage ] ****** [2540 done /2300 queued / 16 running / 2539 errors / 24% coverage ] ****** [2541 done /2300 queued / 16 running / 2540 errors / 24% coverage ] ****** [2541 done /2300 queued / 16 running / 2540 errors / 24% coverage ] ****** [2542 done /2300 queued / 16 running / 2541 errors / 24% coverage ] ****** [2542 done /2300 queued / 16 running / 2541 errors / 24% coverage ] ****** [2543 done /2301 queued / 16 running / 2542 errors / 24% coverage ] ****** [2543 done /2301 queued / 16 running / 2542 errors / 24% coverage ] ****** [2544 done /2301 queued / 16 running / 2543 errors / 24% coverage ] ****** [2544 done /2301 queued / 16 running / 2543 errors / 24% coverage ] ****** [2545 done /2300 queued / 16 running / 2544 errors / 24% coverage ] ****** [2545 done /2300 queued / 16 running / 2544 errors / 24% coverage ] ****** [2546 done /2300 queued / 16 running / 2545 errors / 24% coverage ] ****** [2546 done /2300 queued / 16 running / 2545 errors / 24% coverage ] ****** [2547 done /2301 queued / 16 running / 2546 errors / 24% coverage ] ****** [2547 done /2301 queued / 16 running / 2546 errors / 24% coverage ] ****** [2548 done /2301 queued / 16 running / 2547 errors / 24% coverage ] ****** [2548 done /2301 queued / 16 running / 2547 errors / 24% coverage ] ****** [2549 done /2301 queued / 16 running / 2548 errors / 24% coverage ] ****** [2549 done /2301 queued / 16 running / 2548 errors / 24% coverage ] ****** [2550 done /2301 queued / 16 running / 2549 errors / 24% coverage ] ****** [2550 done /2301 queued / 16 running / 2549 errors / 24% coverage ] ****** [2551 done /2300 queued / 16 running / 2550 errors / 24% coverage ] ****** [2551 done /2300 queued / 16 running / 2550 errors / 24% coverage ] ****** [2552 done /2299 queued / 16 running / 2551 errors / 24% coverage ] ****** [2552 done /2299 queued / 16 running / 2551 errors / 24% coverage ] ****** [2553 done /2298 queued / 16 running / 2552 errors / 24% coverage ] ****** [2553 done /2298 queued / 16 running / 2552 errors / 24% coverage ] ****** [2554 done /2297 queued / 16 running / 2553 errors / 24% coverage ] ****** [2554 done /2297 queued / 16 running / 2553 errors / 24% coverage ] ****** [2555 done /2296 queued / 16 running / 2554 errors / 24% coverage ] ****** [2555 done /2296 queued / 16 running / 2554 errors / 24% coverage ] ****** [2556 done /2295 queued / 16 running / 2555 errors / 24% coverage ] ****** [2556 done /2295 queued / 16 running / 2555 errors / 24% coverage ] ****** [2557 done /2296 queued / 16 running / 2556 errors / 24% coverage ] ****** [2557 done /2296 queued / 16 running / 2556 errors / 24% coverage ] ****** [2558 done /2295 queued / 16 running / 2557 errors / 24% coverage ] ****** [2558 done /2295 queued / 16 running / 2557 errors / 24% coverage ] ****** [2559 done /2295 queued / 16 running / 2558 errors / 24% coverage ] ****** [2559 done /2295 queued / 16 running / 2558 errors / 24% coverage ] ****** [2560 done /2294 queued / 16 running / 2559 errors / 24% coverage ] ****** [2560 done /2294 queued / 16 running / 2559 errors / 24% coverage ] ****** [2561 done /2297 queued / 16 running / 2560 errors / 24% coverage ] ****** [2561 done /2297 queued / 16 running / 2560 errors / 24% coverage ] ****** [2562 done /2296 queued / 16 running / 2561 errors / 24% coverage ] ****** [2562 done /2296 queued / 16 running / 2561 errors / 24% coverage ] ****** [2563 done /2301 queued / 16 running / 2562 errors / 24% coverage ] ****** [2563 done /2301 queued / 16 running / 2562 errors / 24% coverage ] ****** [2564 done /2300 queued / 16 running / 2563 errors / 24% coverage ] ****** [2564 done /2300 queued / 16 running / 2563 errors / 24% coverage ] ****** [2565 done /2299 queued / 16 running / 2564 errors / 24% coverage ] ****** [2565 done /2299 queued / 16 running / 2564 errors / 24% coverage ] ****** [2566 done /2298 queued / 16 running / 2565 errors / 24% coverage ] ****** [2566 done /2298 queued / 16 running / 2565 errors / 24% coverage ] ****** [2567 done /2300 queued / 16 running / 2566 errors / 24% coverage ] ****** [2567 done /2300 queued / 16 running / 2566 errors / 24% coverage ] ****** [2568 done /2306 queued / 16 running / 2567 errors / 24% coverage ] ****** [2568 done /2306 queued / 16 running / 2567 errors / 24% coverage ] ****** [2569 done /2310 queued / 16 running / 2568 errors / 24% coverage ] ****** [2569 done /2310 queued / 16 running / 2568 errors / 24% coverage ] ****** [2570 done /2311 queued / 16 running / 2569 errors / 24% coverage ] ****** [2570 done /2311 queued / 16 running / 2569 errors / 24% coverage ] ****** [2571 done /2315 queued / 16 running / 2570 errors / 24% coverage ] ****** [2571 done /2315 queued / 16 running / 2570 errors / 24% coverage ] ****** [2572 done /2314 queued / 16 running / 2571 errors / 24% coverage ] ****** [2572 done /2314 queued / 16 running / 2571 errors / 24% coverage ] ****** [2573 done /2315 queued / 16 running / 2572 errors / 24% coverage ] ****** [2573 done /2315 queued / 16 running / 2572 errors / 24% coverage ] ****** [2574 done /2319 queued / 16 running / 2573 errors / 24% coverage ] ****** [2574 done /2319 queued / 16 running / 2573 errors / 24% coverage ] ****** [2575 done /2321 queued / 16 running / 2574 errors / 24% coverage ] ****** [2575 done /2321 queued / 16 running / 2574 errors / 24% coverage ] ****** [2576 done /2323 queued / 16 running / 2575 errors / 24% coverage ] ****** [2576 done /2323 queued / 16 running / 2575 errors / 24% coverage ] ****** [2577 done /2325 queued / 16 running / 2576 errors / 24% coverage ] ****** [2577 done /2325 queued / 16 running / 2576 errors / 24% coverage ] ****** [2578 done /2326 queued / 16 running / 2577 errors / 24% coverage ] ****** [2578 done /2326 queued / 16 running / 2577 errors / 24% coverage ] ****** [2579 done /2325 queued / 16 running / 2578 errors / 24% coverage ] ****** [2579 done /2325 queued / 16 running / 2578 errors / 24% coverage ] ****** [2580 done /2326 queued / 16 running / 2579 errors / 24% coverage ] ****** [2580 done /2326 queued / 16 running / 2579 errors / 24% coverage ] ****** [2581 done /2327 queued / 16 running / 2580 errors / 24% coverage ] ****** [2581 done /2327 queued / 16 running / 2580 errors / 24% coverage ] ****** [2582 done /2328 queued / 16 running / 2581 errors / 24% coverage ] ****** [2582 done /2328 queued / 16 running / 2581 errors / 24% coverage ] ****** [2583 done /2331 queued / 16 running / 2582 errors / 24% coverage ] ****** [2583 done /2331 queued / 16 running / 2582 errors / 24% coverage ] ****** [2584 done /2332 queued / 16 running / 2583 errors / 24% coverage ] ****** [2584 done /2332 queued / 16 running / 2583 errors / 24% coverage ] ****** [2585 done /2334 queued / 16 running / 2584 errors / 24% coverage ] ****** [2585 done /2334 queued / 16 running / 2584 errors / 24% coverage ] ****** [2586 done /2335 queued / 16 running / 2585 errors / 24% coverage ] ****** [2586 done /2335 queued / 16 running / 2585 errors / 24% coverage ] ****** [2587 done /2337 queued / 16 running / 2586 errors / 24% coverage ] ****** [2587 done /2337 queued / 16 running / 2586 errors / 24% coverage ] ****** [2588 done /2337 queued / 16 running / 2587 errors / 24% coverage ] ****** [2588 done /2337 queued / 16 running / 2587 errors / 24% coverage ] ****** [2589 done /2337 queued / 16 running / 2588 errors / 24% coverage ] ****** [2589 done /2337 queued / 16 running / 2588 errors / 24% coverage ] ****** [2590 done /2337 queued / 16 running / 2589 errors / 24% coverage ] ****** [2590 done /2337 queued / 16 running / 2589 errors / 24% coverage ] ****** [2591 done /2339 queued / 16 running / 2590 errors / 24% coverage ] ****** [2591 done /2339 queued / 16 running / 2590 errors / 24% coverage ] ****** [2592 done /2340 queued / 16 running / 2591 errors / 24% coverage ] ****** [2592 done /2340 queued / 16 running / 2591 errors / 24% coverage ] ****** [2593 done /2340 queued / 16 running / 2592 errors / 24% coverage ] ****** [2593 done /2340 queued / 16 running / 2592 errors / 24% coverage ] ****** [2594 done /2341 queued / 16 running / 2593 errors / 24% coverage ] ****** [2594 done /2341 queued / 16 running / 2593 errors / 24% coverage ] ****** [2595 done /2341 queued / 16 running / 2594 errors / 24% coverage ] ****** [2595 done /2341 queued / 16 running / 2594 errors / 24% coverage ] ****** [2596 done /2345 queued / 16 running / 2595 errors / 24% coverage ] ****** [2596 done /2345 queued / 16 running / 2595 errors / 24% coverage ] ****** [2597 done /2345 queued / 16 running / 2596 errors / 24% coverage ] ****** [2597 done /2345 queued / 16 running / 2596 errors / 24% coverage ] ****** [2598 done /2344 queued / 16 running / 2597 errors / 24% coverage ] ****** [2598 done /2344 queued / 16 running / 2597 errors / 24% coverage ] ****** [2599 done /2346 queued / 16 running / 2598 errors / 24% coverage ] ****** [2599 done /2346 queued / 16 running / 2598 errors / 24% coverage ] ****** [2600 done /2349 queued / 16 running / 2599 errors / 24% coverage ] ****** [2600 done /2349 queued / 16 running / 2599 errors / 24% coverage ] ****** [2601 done /2348 queued / 16 running / 2600 errors / 24% coverage ] ****** [2601 done /2348 queued / 16 running / 2600 errors / 24% coverage ] ****** [2602 done /2351 queued / 16 running / 2601 errors / 24% coverage ] ****** [2602 done /2351 queued / 16 running / 2601 errors / 24% coverage ] ****** [2603 done /2355 queued / 16 running / 2602 errors / 24% coverage ] ****** [2603 done /2355 queued / 16 running / 2602 errors / 24% coverage ] ****** [2604 done /2357 queued / 16 running / 2603 errors / 24% coverage ] ****** [2604 done /2357 queued / 16 running / 2603 errors / 24% coverage ] ****** [2605 done /2356 queued / 16 running / 2604 errors / 24% coverage ] ****** [2605 done /2356 queued / 16 running / 2604 errors / 24% coverage ] ****** [2606 done /2359 queued / 16 running / 2605 errors / 24% coverage ] ****** [2606 done /2359 queued / 16 running / 2605 errors / 24% coverage ] ****** [2607 done /2361 queued / 16 running / 2606 errors / 24% coverage ] ****** [2607 done /2361 queued / 16 running / 2606 errors / 24% coverage ] ****** [2608 done /2360 queued / 16 running / 2607 errors / 24% coverage ] ****** [2608 done /2360 queued / 16 running / 2607 errors / 24% coverage ] ****** [2609 done /2359 queued / 16 running / 2608 errors / 24% coverage ] ****** [2609 done /2359 queued / 16 running / 2608 errors / 24% coverage ] ****** [2610 done /2359 queued / 16 running / 2609 errors / 24% coverage ] ****** [2610 done /2359 queued / 16 running / 2609 errors / 24% coverage ] ****** [2611 done /2364 queued / 16 running / 2610 errors / 24% coverage ] ****** [2611 done /2364 queued / 16 running / 2610 errors / 24% coverage ] ****** [2612 done /2365 queued / 16 running / 2611 errors / 24% coverage ] ****** [2612 done /2365 queued / 16 running / 2611 errors / 24% coverage ] ****** [2613 done /2365 queued / 16 running / 2612 errors / 24% coverage ] ****** [2613 done /2365 queued / 16 running / 2612 errors / 24% coverage ] ****** [2614 done /2366 queued / 16 running / 2613 errors / 24% coverage ] ****** [2614 done /2366 queued / 16 running / 2613 errors / 24% coverage ] ****** [2615 done /2366 queued / 16 running / 2614 errors / 24% coverage ] ****** [2615 done /2366 queued / 16 running / 2614 errors / 24% coverage ] ****** [2616 done /2365 queued / 16 running / 2615 errors / 24% coverage ] ****** [2616 done /2365 queued / 16 running / 2615 errors / 24% coverage ] ****** [2617 done /2364 queued / 16 running / 2616 errors / 24% coverage ] ****** [2617 done /2364 queued / 16 running / 2616 errors / 24% coverage ] ****** [2618 done /2365 queued / 16 running / 2617 errors / 24% coverage ] ****** [2618 done /2365 queued / 16 running / 2617 errors / 24% coverage ] ****** [2619 done /2365 queued / 16 running / 2618 errors / 24% coverage ] ****** [2619 done /2365 queued / 16 running / 2618 errors / 24% coverage ] ****** [2620 done /2365 queued / 16 running / 2619 errors / 24% coverage ] ****** [2620 done /2365 queued / 16 running / 2619 errors / 24% coverage ] ****** [2621 done /2364 queued / 16 running / 2620 errors / 24% coverage ] ****** [2621 done /2364 queued / 16 running / 2620 errors / 24% coverage ] ****** [2622 done /2363 queued / 16 running / 2621 errors / 24% coverage ] ****** [2622 done /2363 queued / 16 running / 2621 errors / 24% coverage ] ****** [2623 done /2362 queued / 16 running / 2622 errors / 24% coverage ] ****** [2623 done /2362 queued / 16 running / 2622 errors / 24% coverage ] ****** [2624 done /2362 queued / 16 running / 2623 errors / 24% coverage ] ****** [2624 done /2362 queued / 16 running / 2623 errors / 24% coverage ] ****** [2625 done /2361 queued / 16 running / 2624 errors / 24% coverage ] ****** [2625 done /2361 queued / 16 running / 2624 errors / 24% coverage ] ****** [2626 done /2360 queued / 16 running / 2625 errors / 24% coverage ] ****** [2626 done /2360 queued / 16 running / 2625 errors / 24% coverage ] ****** [2627 done /2359 queued / 16 running / 2626 errors / 24% coverage ] ****** [2627 done /2359 queued / 16 running / 2626 errors / 24% coverage ] ****** [2628 done /2360 queued / 16 running / 2627 errors / 24% coverage ] ****** [2628 done /2360 queued / 16 running / 2627 errors / 24% coverage ] ****** [2629 done /2361 queued / 16 running / 2628 errors / 24% coverage ] ****** [2629 done /2361 queued / 16 running / 2628 errors / 24% coverage ] ****** [2630 done /2363 queued / 16 running / 2629 errors / 24% coverage ] ****** [2630 done /2363 queued / 16 running / 2629 errors / 24% coverage ] ****** [2631 done /2365 queued / 16 running / 2630 errors / 24% coverage ] ****** [2631 done /2365 queued / 16 running / 2630 errors / 24% coverage ] ****** [2632 done /2364 queued / 16 running / 2631 errors / 24% coverage ] ****** [2632 done /2364 queued / 16 running / 2631 errors / 24% coverage ] ****** [2633 done /2365 queued / 16 running / 2632 errors / 24% coverage ] ****** [2633 done /2365 queued / 16 running / 2632 errors / 24% coverage ] ****** [2634 done /2366 queued / 16 running / 2633 errors / 24% coverage ] ****** [2634 done /2366 queued / 16 running / 2633 errors / 24% coverage ] ****** [2635 done /2365 queued / 16 running / 2634 errors / 24% coverage ] ****** [2635 done /2365 queued / 16 running / 2634 errors / 24% coverage ] ****** [2636 done /2369 queued / 16 running / 2635 errors / 24% coverage ] ****** [2636 done /2369 queued / 16 running / 2635 errors / 24% coverage ] ****** [2637 done /2368 queued / 16 running / 2636 errors / 24% coverage ] ****** [2637 done /2368 queued / 16 running / 2636 errors / 24% coverage ] ****** [2638 done /2367 queued / 16 running / 2637 errors / 24% coverage ] ****** [2638 done /2367 queued / 16 running / 2637 errors / 24% coverage ] ****** [2639 done /2368 queued / 16 running / 2638 errors / 24% coverage ] ****** [2639 done /2368 queued / 16 running / 2638 errors / 24% coverage ] ****** [2640 done /2371 queued / 16 running / 2639 errors / 24% coverage ] ****** [2640 done /2371 queued / 16 running / 2639 errors / 24% coverage ] ****** [2641 done /2374 queued / 16 running / 2640 errors / 24% coverage ] ****** [2641 done /2374 queued / 16 running / 2640 errors / 24% coverage ] ****** [2642 done /2375 queued / 16 running / 2641 errors / 24% coverage ] ****** [2642 done /2375 queued / 16 running / 2641 errors / 24% coverage ] ****** [2643 done /2379 queued / 16 running / 2642 errors / 24% coverage ] ****** [2643 done /2379 queued / 16 running / 2642 errors / 24% coverage ] ****** [2644 done /2380 queued / 16 running / 2643 errors / 24% coverage ] ****** [2644 done /2380 queued / 16 running / 2643 errors / 24% coverage ] ****** [2645 done /2379 queued / 16 running / 2644 errors / 24% coverage ] ****** [2645 done /2379 queued / 16 running / 2644 errors / 24% coverage ] ****** [2646 done /2382 queued / 16 running / 2645 errors / 24% coverage ] ****** [2646 done /2382 queued / 16 running / 2645 errors / 24% coverage ] ****** [2647 done /2381 queued / 16 running / 2646 errors / 24% coverage ] ****** [2647 done /2381 queued / 16 running / 2646 errors / 24% coverage ] ****** [2648 done /2380 queued / 16 running / 2647 errors / 24% coverage ] ****** [2648 done /2380 queued / 16 running / 2647 errors / 24% coverage ] ****** [2649 done /2382 queued / 16 running / 2648 errors / 24% coverage ] ****** [2649 done /2382 queued / 16 running / 2648 errors / 24% coverage ] ****** [2650 done /2384 queued / 16 running / 2649 errors / 24% coverage ] ****** [2650 done /2384 queued / 16 running / 2649 errors / 24% coverage ] ****** [2651 done /2389 queued / 16 running / 2650 errors / 24% coverage ] ****** [2651 done /2389 queued / 16 running / 2650 errors / 24% coverage ] ****** [2652 done /2390 queued / 16 running / 2651 errors / 24% coverage ] ****** [2652 done /2390 queued / 16 running / 2651 errors / 24% coverage ] ****** [2653 done /2392 queued / 16 running / 2652 errors / 24% coverage ] ****** [2653 done /2392 queued / 16 running / 2652 errors / 24% coverage ] ****** [2654 done /2393 queued / 16 running / 2653 errors / 24% coverage ] ****** [2654 done /2393 queued / 16 running / 2653 errors / 24% coverage ] ****** [2655 done /2392 queued / 16 running / 2654 errors / 24% coverage ] ****** [2655 done /2392 queued / 16 running / 2654 errors / 24% coverage ] ****** [2656 done /2391 queued / 16 running / 2655 errors / 24% coverage ] ****** [2656 done /2391 queued / 16 running / 2655 errors / 24% coverage ] ****** [2657 done /2391 queued / 16 running / 2656 errors / 24% coverage ] ****** [2657 done /2391 queued / 16 running / 2656 errors / 24% coverage ] ****** [2658 done /2396 queued / 16 running / 2657 errors / 24% coverage ] ****** [2658 done /2396 queued / 16 running / 2657 errors / 24% coverage ] ****** [2659 done /2396 queued / 16 running / 2658 errors / 24% coverage ] ****** [2659 done /2396 queued / 16 running / 2658 errors / 24% coverage ] ****** [2660 done /2397 queued / 16 running / 2659 errors / 24% coverage ] ****** [2660 done /2397 queued / 16 running / 2659 errors / 24% coverage ] ****** [2661 done /2398 queued / 16 running / 2660 errors / 24% coverage ] ****** [2661 done /2398 queued / 16 running / 2660 errors / 24% coverage ] ****** [2662 done /2398 queued / 16 running / 2661 errors / 24% coverage ] ****** [2662 done /2398 queued / 16 running / 2661 errors / 24% coverage ] ****** [2663 done /2398 queued / 16 running / 2662 errors / 24% coverage ] ****** [2663 done /2398 queued / 16 running / 2662 errors / 24% coverage ] ****** [2664 done /2398 queued / 16 running / 2663 errors / 24% coverage ] ****** [2664 done /2398 queued / 16 running / 2663 errors / 24% coverage ] ****** [2665 done /2397 queued / 16 running / 2664 errors / 24% coverage ] ****** [2665 done /2397 queued / 16 running / 2664 errors / 24% coverage ] ****** [2666 done /2399 queued / 16 running / 2665 errors / 24% coverage ] ****** [2666 done /2399 queued / 16 running / 2665 errors / 24% coverage ] ****** [2667 done /2398 queued / 16 running / 2666 errors / 24% coverage ] ****** [2667 done /2398 queued / 16 running / 2666 errors / 24% coverage ] ****** [2668 done /2398 queued / 16 running / 2667 errors / 24% coverage ] ****** [2668 done /2398 queued / 16 running / 2667 errors / 24% coverage ] ****** [2669 done /2399 queued / 16 running / 2668 errors / 24% coverage ] ****** [2669 done /2399 queued / 16 running / 2668 errors / 24% coverage ] ****** [2670 done /2398 queued / 16 running / 2669 errors / 24% coverage ] ****** [2670 done /2398 queued / 16 running / 2669 errors / 24% coverage ] ****** [2671 done /2398 queued / 16 running / 2670 errors / 24% coverage ] ****** [2671 done /2398 queued / 16 running / 2670 errors / 24% coverage ] ****** [2672 done /2400 queued / 16 running / 2671 errors / 24% coverage ] ****** [2672 done /2400 queued / 16 running / 2671 errors / 24% coverage ] ****** [2673 done /2401 queued / 16 running / 2672 errors / 24% coverage ] ****** [2673 done /2401 queued / 16 running / 2672 errors / 24% coverage ] ****** [2674 done /2403 queued / 16 running / 2673 errors / 24% coverage ] ****** [2674 done /2403 queued / 16 running / 2673 errors / 24% coverage ] ****** [2675 done /2402 queued / 16 running / 2674 errors / 24% coverage ] ****** [2675 done /2402 queued / 16 running / 2674 errors / 24% coverage ] ****** [2676 done /2405 queued / 16 running / 2675 errors / 24% coverage ] ****** [2676 done /2405 queued / 16 running / 2675 errors / 24% coverage ] ****** [2677 done /2406 queued / 16 running / 2676 errors / 24% coverage ] ****** [2677 done /2406 queued / 16 running / 2676 errors / 24% coverage ] ****** [2678 done /2406 queued / 16 running / 2677 errors / 24% coverage ] ****** [2678 done /2406 queued / 16 running / 2677 errors / 24% coverage ] ****** [2679 done /2407 queued / 16 running / 2678 errors / 24% coverage ] ****** [2679 done /2407 queued / 16 running / 2678 errors / 24% coverage ] ****** [2680 done /2408 queued / 16 running / 2679 errors / 24% coverage ] ****** [2680 done /2408 queued / 16 running / 2679 errors / 24% coverage ] ****** [2681 done /2409 queued / 16 running / 2680 errors / 24% coverage ] ****** [2681 done /2409 queued / 16 running / 2680 errors / 24% coverage ] ****** [2682 done /2410 queued / 16 running / 2681 errors / 24% coverage ] ****** [2682 done /2410 queued / 16 running / 2681 errors / 24% coverage ] ****** [2683 done /2412 queued / 16 running / 2682 errors / 24% coverage ] ****** [2683 done /2412 queued / 16 running / 2682 errors / 24% coverage ] ****** [2684 done /2413 queued / 16 running / 2683 errors / 24% coverage ] ****** [2684 done /2413 queued / 16 running / 2683 errors / 24% coverage ] ****** [2685 done /2417 queued / 16 running / 2684 errors / 24% coverage ] ****** [2685 done /2417 queued / 16 running / 2684 errors / 24% coverage ] ****** [2686 done /2418 queued / 16 running / 2685 errors / 24% coverage ] ****** [2686 done /2418 queued / 16 running / 2685 errors / 24% coverage ] ****** [2687 done /2418 queued / 16 running / 2686 errors / 24% coverage ] ****** [2687 done /2418 queued / 16 running / 2686 errors / 24% coverage ] ****** [2688 done /2421 queued / 16 running / 2687 errors / 24% coverage ] ****** [2688 done /2421 queued / 16 running / 2687 errors / 24% coverage ] ****** [2689 done /2420 queued / 16 running / 2688 errors / 24% coverage ] ****** [2689 done /2420 queued / 16 running / 2688 errors / 24% coverage ] ****** [2690 done /2419 queued / 16 running / 2689 errors / 24% coverage ] ****** [2690 done /2419 queued / 16 running / 2689 errors / 24% coverage ] ****** [2691 done /2420 queued / 16 running / 2690 errors / 24% coverage ] ****** [2691 done /2420 queued / 16 running / 2690 errors / 24% coverage ] ****** [2692 done /2421 queued / 16 running / 2691 errors / 24% coverage ] ****** [2692 done /2421 queued / 16 running / 2691 errors / 24% coverage ] ****** [2693 done /2420 queued / 16 running / 2692 errors / 24% coverage ] ****** [2693 done /2420 queued / 16 running / 2692 errors / 24% coverage ] ****** [2694 done /2419 queued / 16 running / 2693 errors / 24% coverage ] ****** [2694 done /2419 queued / 16 running / 2693 errors / 24% coverage ] ****** [2695 done /2419 queued / 16 running / 2694 errors / 24% coverage ] ****** [2695 done /2419 queued / 16 running / 2694 errors / 24% coverage ] ****** [2696 done /2419 queued / 16 running / 2695 errors / 24% coverage ] ****** [2696 done /2419 queued / 16 running / 2695 errors / 24% coverage ] ****** [2697 done /2418 queued / 16 running / 2696 errors / 24% coverage ] ****** [2697 done /2418 queued / 16 running / 2696 errors / 24% coverage ] ****** [2698 done /2420 queued / 16 running / 2697 errors / 24% coverage ] ****** [2698 done /2420 queued / 16 running / 2697 errors / 24% coverage ] ****** [2699 done /2424 queued / 16 running / 2698 errors / 24% coverage ] ****** [2699 done /2424 queued / 16 running / 2698 errors / 24% coverage ] ****** [2700 done /2423 queued / 16 running / 2699 errors / 24% coverage ] ****** [2700 done /2423 queued / 16 running / 2699 errors / 24% coverage ] ****** [2701 done /2423 queued / 16 running / 2700 errors / 24% coverage ] ****** [2701 done /2423 queued / 16 running / 2700 errors / 24% coverage ] ****** [2702 done /2423 queued / 16 running / 2701 errors / 24% coverage ] ****** [2702 done /2423 queued / 16 running / 2701 errors / 24% coverage ] ****** [2703 done /2426 queued / 16 running / 2702 errors / 24% coverage ] ****** [2703 done /2426 queued / 16 running / 2702 errors / 24% coverage ] ****** [2704 done /2427 queued / 16 running / 2703 errors / 24% coverage ] ****** [2704 done /2427 queued / 16 running / 2703 errors / 24% coverage ] ****** [2705 done /2431 queued / 16 running / 2704 errors / 24% coverage ] ****** [2705 done /2431 queued / 16 running / 2704 errors / 24% coverage ] ****** [2706 done /2434 queued / 16 running / 2705 errors / 24% coverage ] ****** [2706 done /2434 queued / 16 running / 2705 errors / 24% coverage ] ****** [2707 done /2436 queued / 16 running / 2706 errors / 24% coverage ] ****** [2707 done /2436 queued / 16 running / 2706 errors / 24% coverage ] ****** [2708 done /2436 queued / 16 running / 2707 errors / 24% coverage ] ****** [2708 done /2436 queued / 16 running / 2707 errors / 24% coverage ] ****** [2709 done /2435 queued / 16 running / 2708 errors / 24% coverage ] ****** [2709 done /2435 queued / 16 running / 2708 errors / 24% coverage ] ****** [2710 done /2436 queued / 16 running / 2709 errors / 24% coverage ] ****** [2710 done /2436 queued / 16 running / 2709 errors / 24% coverage ] ****** [2711 done /2435 queued / 16 running / 2710 errors / 24% coverage ] ****** [2711 done /2435 queued / 16 running / 2710 errors / 24% coverage ] ****** [2712 done /2437 queued / 16 running / 2711 errors / 24% coverage ] ****** [2712 done /2437 queued / 16 running / 2711 errors / 24% coverage ] ****** [2713 done /2441 queued / 16 running / 2712 errors / 24% coverage ] ****** [2713 done /2441 queued / 16 running / 2712 errors / 24% coverage ] ****** [2714 done /2440 queued / 16 running / 2713 errors / 24% coverage ] ****** [2714 done /2440 queued / 16 running / 2713 errors / 24% coverage ] ****** [2715 done /2441 queued / 16 running / 2714 errors / 24% coverage ] ****** [2715 done /2441 queued / 16 running / 2714 errors / 24% coverage ] ****** [2716 done /2442 queued / 16 running / 2715 errors / 24% coverage ] ****** [2716 done /2442 queued / 16 running / 2715 errors / 24% coverage ] ****** [2717 done /2444 queued / 16 running / 2716 errors / 24% coverage ] ****** [2717 done /2444 queued / 16 running / 2716 errors / 24% coverage ] ****** [2718 done /2445 queued / 16 running / 2717 errors / 24% coverage ] ****** [2718 done /2445 queued / 16 running / 2717 errors / 24% coverage ] ****** [2719 done /2445 queued / 16 running / 2718 errors / 24% coverage ] ****** [2719 done /2445 queued / 16 running / 2718 errors / 24% coverage ] ****** [2720 done /2445 queued / 16 running / 2719 errors / 24% coverage ] ****** [2720 done /2445 queued / 16 running / 2719 errors / 24% coverage ] ****** [2721 done /2446 queued / 16 running / 2720 errors / 24% coverage ] ****** [2721 done /2446 queued / 16 running / 2720 errors / 24% coverage ] ****** [2722 done /2445 queued / 16 running / 2721 errors / 24% coverage ] ****** [2722 done /2445 queued / 16 running / 2721 errors / 24% coverage ] ****** [2723 done /2444 queued / 16 running / 2722 errors / 24% coverage ] ****** [2723 done /2444 queued / 16 running / 2722 errors / 24% coverage ] ****** [2724 done /2445 queued / 16 running / 2723 errors / 24% coverage ] ****** [2724 done /2445 queued / 16 running / 2723 errors / 24% coverage ] ****** [2725 done /2445 queued / 16 running / 2724 errors / 24% coverage ] ****** [2725 done /2445 queued / 16 running / 2724 errors / 24% coverage ] ****** [2726 done /2445 queued / 16 running / 2725 errors / 24% coverage ] ****** [2726 done /2445 queued / 16 running / 2725 errors / 24% coverage ] ****** [2727 done /2445 queued / 16 running / 2726 errors / 24% coverage ] ****** [2727 done /2445 queued / 16 running / 2726 errors / 24% coverage ] ****** [2728 done /2444 queued / 16 running / 2727 errors / 24% coverage ] ****** [2728 done /2444 queued / 16 running / 2727 errors / 24% coverage ] ****** [2729 done /2443 queued / 16 running / 2728 errors / 24% coverage ] ****** [2729 done /2443 queued / 16 running / 2728 errors / 24% coverage ] ****** [2730 done /2443 queued / 16 running / 2729 errors / 24% coverage ] ****** [2730 done /2443 queued / 16 running / 2729 errors / 24% coverage ] ****** [2731 done /2442 queued / 16 running / 2730 errors / 24% coverage ] ****** [2731 done /2442 queued / 16 running / 2730 errors / 24% coverage ] ****** [2732 done /2442 queued / 16 running / 2731 errors / 24% coverage ] ****** [2732 done /2442 queued / 16 running / 2731 errors / 24% coverage ] ****** [2733 done /2441 queued / 16 running / 2732 errors / 24% coverage ] ****** [2733 done /2441 queued / 16 running / 2732 errors / 24% coverage ] ****** [2734 done /2443 queued / 16 running / 2733 errors / 24% coverage ] ****** [2734 done /2443 queued / 16 running / 2733 errors / 24% coverage ] ****** [2735 done /2444 queued / 16 running / 2734 errors / 24% coverage ] ****** [2735 done /2444 queued / 16 running / 2734 errors / 24% coverage ] ****** [2736 done /2445 queued / 16 running / 2735 errors / 24% coverage ] ****** [2736 done /2445 queued / 16 running / 2735 errors / 24% coverage ] ****** [2737 done /2446 queued / 16 running / 2736 errors / 24% coverage ] ****** [2737 done /2446 queued / 16 running / 2736 errors / 24% coverage ] ****** [2738 done /2447 queued / 16 running / 2737 errors / 24% coverage ] ****** [2738 done /2447 queued / 16 running / 2737 errors / 24% coverage ] ****** [2739 done /2449 queued / 16 running / 2738 errors / 24% coverage ] ****** [2739 done /2449 queued / 16 running / 2738 errors / 24% coverage ] ****** [2740 done /2451 queued / 16 running / 2739 errors / 24% coverage ] ****** [2740 done /2451 queued / 16 running / 2739 errors / 24% coverage ] ****** [2741 done /2454 queued / 16 running / 2740 errors / 24% coverage ] ****** [2741 done /2454 queued / 16 running / 2740 errors / 24% coverage ] ****** [2742 done /2457 queued / 16 running / 2741 errors / 24% coverage ] ****** [2742 done /2457 queued / 16 running / 2741 errors / 24% coverage ] ****** [2743 done /2456 queued / 16 running / 2742 errors / 24% coverage ] ****** [2743 done /2456 queued / 16 running / 2742 errors / 24% coverage ] ****** [2744 done /2459 queued / 16 running / 2743 errors / 24% coverage ] ****** [2744 done /2459 queued / 16 running / 2743 errors / 24% coverage ] ****** [2745 done /2458 queued / 16 running / 2744 errors / 24% coverage ] ****** [2745 done /2458 queued / 16 running / 2744 errors / 24% coverage ] ****** [2746 done /2457 queued / 16 running / 2745 errors / 24% coverage ] ****** [2746 done /2457 queued / 16 running / 2745 errors / 24% coverage ] ****** [2747 done /2457 queued / 16 running / 2746 errors / 24% coverage ] ****** [2747 done /2457 queued / 16 running / 2746 errors / 24% coverage ] ****** [2748 done /2459 queued / 16 running / 2747 errors / 24% coverage ] ****** [2748 done /2459 queued / 16 running / 2747 errors / 24% coverage ] ****** [2749 done /2458 queued / 16 running / 2748 errors / 24% coverage ] ****** [2749 done /2458 queued / 16 running / 2748 errors / 24% coverage ] ****** [2750 done /2457 queued / 16 running / 2749 errors / 24% coverage ] ****** [2750 done /2457 queued / 16 running / 2749 errors / 24% coverage ] ****** [2751 done /2458 queued / 16 running / 2750 errors / 24% coverage ] ****** [2751 done /2458 queued / 16 running / 2750 errors / 24% coverage ] ****** [2752 done /2457 queued / 16 running / 2751 errors / 24% coverage ] ****** [2752 done /2457 queued / 16 running / 2751 errors / 24% coverage ] ****** [2753 done /2457 queued / 16 running / 2752 errors / 24% coverage ] ****** [2753 done /2457 queued / 16 running / 2752 errors / 24% coverage ] ****** [2754 done /2459 queued / 16 running / 2753 errors / 24% coverage ] ****** [2754 done /2459 queued / 16 running / 2753 errors / 24% coverage ] ****** [2755 done /2458 queued / 16 running / 2754 errors / 24% coverage ] ****** [2755 done /2458 queued / 16 running / 2754 errors / 24% coverage ] ****** [2756 done /2458 queued / 16 running / 2755 errors / 24% coverage ] ****** [2756 done /2458 queued / 16 running / 2755 errors / 24% coverage ] ****** [2757 done /2459 queued / 16 running / 2756 errors / 24% coverage ] ****** [2757 done /2459 queued / 16 running / 2756 errors / 24% coverage ] ****** [2758 done /2460 queued / 16 running / 2757 errors / 24% coverage ] ****** [2758 done /2460 queued / 16 running / 2757 errors / 24% coverage ] ****** [2759 done /2460 queued / 16 running / 2758 errors / 24% coverage ] ****** [2759 done /2460 queued / 16 running / 2758 errors / 24% coverage ] ****** [2760 done /2460 queued / 16 running / 2759 errors / 24% coverage ] ****** [2760 done /2460 queued / 16 running / 2759 errors / 24% coverage ] ****** [2761 done /2461 queued / 16 running / 2760 errors / 24% coverage ] ****** [2761 done /2461 queued / 16 running / 2760 errors / 24% coverage ] ****** [2762 done /2461 queued / 16 running / 2761 errors / 24% coverage ] ****** [2762 done /2461 queued / 16 running / 2761 errors / 24% coverage ] ****** [2763 done /2461 queued / 16 running / 2762 errors / 24% coverage ] ****** [2763 done /2461 queued / 16 running / 2762 errors / 24% coverage ] ****** [2764 done /2461 queued / 16 running / 2763 errors / 24% coverage ] ****** [2764 done /2461 queued / 16 running / 2763 errors / 24% coverage ] ****** [2765 done /2461 queued / 16 running / 2764 errors / 24% coverage ] ****** [2765 done /2461 queued / 16 running / 2764 errors / 24% coverage ] ****** [2766 done /2460 queued / 16 running / 2765 errors / 24% coverage ] ****** [2766 done /2460 queued / 16 running / 2765 errors / 24% coverage ] ****** [2767 done /2459 queued / 16 running / 2766 errors / 24% coverage ] ****** [2767 done /2459 queued / 16 running / 2766 errors / 24% coverage ] ****** [2768 done /2458 queued / 16 running / 2767 errors / 24% coverage ] ****** [2768 done /2458 queued / 16 running / 2767 errors / 24% coverage ] ****** [2769 done /2462 queued / 16 running / 2768 errors / 24% coverage ] ****** [2769 done /2462 queued / 16 running / 2768 errors / 24% coverage ] ****** [2770 done /2461 queued / 16 running / 2769 errors / 24% coverage ] ****** [2770 done /2461 queued / 16 running / 2769 errors / 24% coverage ] ****** [2771 done /2460 queued / 16 running / 2770 errors / 24% coverage ] ****** [2771 done /2460 queued / 16 running / 2770 errors / 24% coverage ] ****** [2772 done /2460 queued / 16 running / 2771 errors / 24% coverage ] ****** [2772 done /2460 queued / 16 running / 2771 errors / 24% coverage ] ****** [2773 done /2461 queued / 16 running / 2772 errors / 24% coverage ] ****** [2773 done /2461 queued / 16 running / 2772 errors / 24% coverage ] ****** [2774 done /2460 queued / 16 running / 2773 errors / 24% coverage ] ****** [2774 done /2460 queued / 16 running / 2773 errors / 24% coverage ] ****** [2775 done /2461 queued / 16 running / 2774 errors / 24% coverage ] ****** [2775 done /2461 queued / 16 running / 2774 errors / 24% coverage ] ****** [2776 done /2461 queued / 16 running / 2775 errors / 24% coverage ] ****** [2776 done /2461 queued / 16 running / 2775 errors / 24% coverage ] ****** [2777 done /2461 queued / 16 running / 2776 errors / 24% coverage ] ****** [2777 done /2461 queued / 16 running / 2776 errors / 24% coverage ] ****** [2778 done /2462 queued / 16 running / 2777 errors / 24% coverage ] ****** [2778 done /2462 queued / 16 running / 2777 errors / 24% coverage ] ****** [2779 done /2462 queued / 16 running / 2778 errors / 24% coverage ] ****** [2779 done /2462 queued / 16 running / 2778 errors / 24% coverage ] ****** [2780 done /2464 queued / 16 running / 2779 errors / 24% coverage ] ****** [2780 done /2464 queued / 16 running / 2779 errors / 24% coverage ] ****** [2781 done /2467 queued / 16 running / 2780 errors / 24% coverage ] ****** [2781 done /2467 queued / 16 running / 2780 errors / 24% coverage ] ****** [2782 done /2471 queued / 16 running / 2781 errors / 24% coverage ] ****** [2782 done /2471 queued / 16 running / 2781 errors / 24% coverage ] ****** [2783 done /2470 queued / 16 running / 2782 errors / 24% coverage ] ****** [2783 done /2470 queued / 16 running / 2782 errors / 24% coverage ] ****** [2784 done /2469 queued / 16 running / 2783 errors / 24% coverage ] ****** [2784 done /2469 queued / 16 running / 2783 errors / 24% coverage ] ****** [2785 done /2468 queued / 16 running / 2784 errors / 24% coverage ] ****** [2785 done /2468 queued / 16 running / 2784 errors / 24% coverage ] ****** [2786 done /2469 queued / 16 running / 2785 errors / 24% coverage ] ****** [2786 done /2469 queued / 16 running / 2785 errors / 24% coverage ] ****** [2787 done /2469 queued / 16 running / 2786 errors / 24% coverage ] ****** [2787 done /2469 queued / 16 running / 2786 errors / 24% coverage ] ****** [2788 done /2471 queued / 16 running / 2787 errors / 24% coverage ] ****** [2788 done /2471 queued / 16 running / 2787 errors / 24% coverage ] ****** [2789 done /2472 queued / 16 running / 2788 errors / 24% coverage ] ****** [2789 done /2472 queued / 16 running / 2788 errors / 24% coverage ] ****** [2790 done /2476 queued / 16 running / 2789 errors / 24% coverage ] ****** [2790 done /2476 queued / 16 running / 2789 errors / 24% coverage ] ****** [2791 done /2479 queued / 16 running / 2790 errors / 24% coverage ] ****** [2791 done /2479 queued / 16 running / 2790 errors / 24% coverage ] ****** [2792 done /2479 queued / 16 running / 2791 errors / 24% coverage ] ****** [2792 done /2479 queued / 16 running / 2791 errors / 24% coverage ] ****** [2793 done /2480 queued / 16 running / 2792 errors / 24% coverage ] ****** [2793 done /2480 queued / 16 running / 2792 errors / 24% coverage ] ****** [2794 done /2479 queued / 16 running / 2793 errors / 24% coverage ] ****** [2794 done /2479 queued / 16 running / 2793 errors / 24% coverage ] ****** [2795 done /2478 queued / 16 running / 2794 errors / 24% coverage ] ****** [2795 done /2478 queued / 16 running / 2794 errors / 24% coverage ] ****** [2796 done /2477 queued / 16 running / 2795 errors / 24% coverage ] ****** [2796 done /2477 queued / 16 running / 2795 errors / 24% coverage ] ****** [2797 done /2476 queued / 16 running / 2796 errors / 24% coverage ] ****** [2797 done /2476 queued / 16 running / 2796 errors / 24% coverage ] ****** [2798 done /2476 queued / 16 running / 2797 errors / 24% coverage ] ****** [2798 done /2476 queued / 16 running / 2797 errors / 24% coverage ] ****** [2799 done /2475 queued / 16 running / 2798 errors / 24% coverage ] ****** [2799 done /2475 queued / 16 running / 2798 errors / 24% coverage ] ****** [2800 done /2479 queued / 16 running / 2799 errors / 24% coverage ] ****** [2800 done /2479 queued / 16 running / 2799 errors / 24% coverage ] ****** [2801 done /2482 queued / 16 running / 2800 errors / 24% coverage ] ****** [2801 done /2482 queued / 16 running / 2800 errors / 24% coverage ] ****** [2802 done /2481 queued / 16 running / 2801 errors / 24% coverage ] ****** [2802 done /2481 queued / 16 running / 2801 errors / 24% coverage ] ****** [2803 done /2480 queued / 16 running / 2802 errors / 24% coverage ] ****** [2803 done /2480 queued / 16 running / 2802 errors / 24% coverage ] ****** [2804 done /2485 queued / 16 running / 2803 errors / 24% coverage ] ****** [2804 done /2485 queued / 16 running / 2803 errors / 24% coverage ] ****** [2805 done /2488 queued / 16 running / 2804 errors / 24% coverage ] ****** [2805 done /2488 queued / 16 running / 2804 errors / 24% coverage ] ****** [2806 done /2489 queued / 16 running / 2805 errors / 24% coverage ] ****** [2806 done /2489 queued / 16 running / 2805 errors / 24% coverage ] ****** [2807 done /2490 queued / 16 running / 2806 errors / 24% coverage ] ****** [2807 done /2490 queued / 16 running / 2806 errors / 24% coverage ] ****** [2808 done /2490 queued / 16 running / 2807 errors / 24% coverage ] ****** [2808 done /2490 queued / 16 running / 2807 errors / 24% coverage ] ****** [2809 done /2489 queued / 16 running / 2808 errors / 24% coverage ] ****** [2809 done /2489 queued / 16 running / 2808 errors / 24% coverage ] ****** [2810 done /2488 queued / 16 running / 2809 errors / 24% coverage ] ****** [2810 done /2488 queued / 16 running / 2809 errors / 24% coverage ] ****** [2811 done /2490 queued / 16 running / 2810 errors / 24% coverage ] ****** [2811 done /2490 queued / 16 running / 2810 errors / 24% coverage ] ****** [2812 done /2489 queued / 16 running / 2811 errors / 24% coverage ] ****** [2812 done /2489 queued / 16 running / 2811 errors / 24% coverage ] ****** [2813 done /2489 queued / 16 running / 2812 errors / 24% coverage ] ****** [2813 done /2489 queued / 16 running / 2812 errors / 24% coverage ] ****** [2814 done /2492 queued / 16 running / 2813 errors / 24% coverage ] ****** [2814 done /2492 queued / 16 running / 2813 errors / 24% coverage ] ****** [2815 done /2492 queued / 16 running / 2814 errors / 24% coverage ] ****** [2815 done /2492 queued / 16 running / 2814 errors / 24% coverage ] ****** [2816 done /2496 queued / 16 running / 2815 errors / 24% coverage ] ****** [2816 done /2496 queued / 16 running / 2815 errors / 24% coverage ] ****** [2817 done /2497 queued / 16 running / 2816 errors / 24% coverage ] ****** [2817 done /2497 queued / 16 running / 2816 errors / 24% coverage ] ****** [2818 done /2497 queued / 16 running / 2817 errors / 24% coverage ] ****** [2818 done /2497 queued / 16 running / 2817 errors / 24% coverage ] ****** [2819 done /2497 queued / 16 running / 2818 errors / 24% coverage ] ****** [2819 done /2497 queued / 16 running / 2818 errors / 24% coverage ] ****** [2820 done /2497 queued / 16 running / 2819 errors / 24% coverage ] ****** [2820 done /2497 queued / 16 running / 2819 errors / 24% coverage ] ****** [2821 done /2501 queued / 16 running / 2820 errors / 24% coverage ] ****** [2821 done /2501 queued / 16 running / 2820 errors / 24% coverage ] ****** [2822 done /2500 queued / 16 running / 2821 errors / 24% coverage ] ****** [2822 done /2500 queued / 16 running / 2821 errors / 24% coverage ] ****** [2823 done /2500 queued / 16 running / 2822 errors / 24% coverage ] ****** [2823 done /2500 queued / 16 running / 2822 errors / 24% coverage ] ****** [2824 done /2501 queued / 16 running / 2823 errors / 24% coverage ] ****** [2824 done /2501 queued / 16 running / 2823 errors / 24% coverage ] ****** [2825 done /2503 queued / 16 running / 2824 errors / 24% coverage ] ****** [2825 done /2503 queued / 16 running / 2824 errors / 24% coverage ] ****** [2826 done /2505 queued / 16 running / 2825 errors / 24% coverage ] ****** [2826 done /2505 queued / 16 running / 2825 errors / 24% coverage ] ****** [2827 done /2504 queued / 16 running / 2826 errors / 24% coverage ] ****** [2827 done /2504 queued / 16 running / 2826 errors / 24% coverage ] ****** [2828 done /2508 queued / 16 running / 2827 errors / 24% coverage ] ****** [2828 done /2508 queued / 16 running / 2827 errors / 24% coverage ] ****** [2829 done /2510 queued / 16 running / 2828 errors / 24% coverage ] ****** [2829 done /2510 queued / 16 running / 2828 errors / 24% coverage ] ****** [2830 done /2511 queued / 16 running / 2829 errors / 24% coverage ] ****** [2830 done /2511 queued / 16 running / 2829 errors / 24% coverage ] ****** [2831 done /2511 queued / 16 running / 2830 errors / 24% coverage ] ****** [2831 done /2511 queued / 16 running / 2830 errors / 24% coverage ] ****** [2832 done /2511 queued / 16 running / 2831 errors / 24% coverage ] ****** [2832 done /2511 queued / 16 running / 2831 errors / 24% coverage ] ****** [2833 done /2512 queued / 16 running / 2832 errors / 24% coverage ] ****** [2833 done /2512 queued / 16 running / 2832 errors / 24% coverage ] ****** [2834 done /2513 queued / 16 running / 2833 errors / 24% coverage ] ****** [2834 done /2513 queued / 16 running / 2833 errors / 24% coverage ] ****** [2835 done /2515 queued / 16 running / 2834 errors / 24% coverage ] ****** [2835 done /2515 queued / 16 running / 2834 errors / 24% coverage ] ****** [2836 done /2517 queued / 16 running / 2835 errors / 24% coverage ] ****** [2836 done /2517 queued / 16 running / 2835 errors / 24% coverage ] ****** [2837 done /2518 queued / 16 running / 2836 errors / 24% coverage ] ****** [2837 done /2518 queued / 16 running / 2836 errors / 24% coverage ] ****** [2838 done /2519 queued / 16 running / 2837 errors / 24% coverage ] ****** [2838 done /2519 queued / 16 running / 2837 errors / 24% coverage ] ****** [2839 done /2518 queued / 16 running / 2838 errors / 24% coverage ] ****** [2839 done /2518 queued / 16 running / 2838 errors / 24% coverage ] ****** [2840 done /2517 queued / 16 running / 2839 errors / 24% coverage ] ****** [2840 done /2517 queued / 16 running / 2839 errors / 24% coverage ] ****** [2841 done /2521 queued / 16 running / 2840 errors / 24% coverage ] ****** [2841 done /2521 queued / 16 running / 2840 errors / 24% coverage ] ****** [2842 done /2524 queued / 16 running / 2841 errors / 24% coverage ] ****** [2842 done /2524 queued / 16 running / 2841 errors / 24% coverage ] ****** [2843 done /2527 queued / 16 running / 2842 errors / 24% coverage ] ****** [2843 done /2527 queued / 16 running / 2842 errors / 24% coverage ] ****** [2844 done /2528 queued / 16 running / 2843 errors / 24% coverage ] ****** [2844 done /2528 queued / 16 running / 2843 errors / 24% coverage ] ****** [2845 done /2530 queued / 16 running / 2844 errors / 24% coverage ] ****** [2845 done /2530 queued / 16 running / 2844 errors / 24% coverage ] ****** [2846 done /2531 queued / 16 running / 2845 errors / 24% coverage ] ****** [2846 done /2531 queued / 16 running / 2845 errors / 24% coverage ] ****** [2847 done /2534 queued / 16 running / 2846 errors / 24% coverage ] ****** [2847 done /2534 queued / 16 running / 2846 errors / 24% coverage ] ****** [2848 done /2535 queued / 16 running / 2847 errors / 24% coverage ] ****** [2848 done /2535 queued / 16 running / 2847 errors / 24% coverage ] ****** [2849 done /2539 queued / 16 running / 2848 errors / 24% coverage ] ****** [2849 done /2539 queued / 16 running / 2848 errors / 24% coverage ] ****** [2850 done /2538 queued / 16 running / 2849 errors / 24% coverage ] ****** [2850 done /2538 queued / 16 running / 2849 errors / 24% coverage ] ****** [2851 done /2540 queued / 16 running / 2850 errors / 24% coverage ] ****** [2851 done /2540 queued / 16 running / 2850 errors / 24% coverage ] ****** [2852 done /2542 queued / 16 running / 2851 errors / 24% coverage ] ****** [2852 done /2542 queued / 16 running / 2851 errors / 24% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","toString","apply","bound "]
*-- Stat Module Done --*
*-- Test Case {"_bound":0,"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":0} start 0.0593 took 8.6368s
*-- Errors occured in test {"_bound":0,"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (85:4) on program /**
 * Copyright (c) 2017 Trent Mick.
 * Copyright (c) 2017 Joyent Inc.
 *
 * The bunyan logging library for node.js.
 *
 * -*- mode: js -*-
 * vim: expandtab:ts=4:sw=4
 */

var VERSION = '1.8.12';

/*
 * Bunyan log format version. This becomes the 'v' field on all log records.
 * This will be incremented if there is any backward incompatible change to
 * the log record format. Details will be in 'CHANGES.md' (the change log).
 */
var LOG_VERSION = 0;


var xxx = function xxx(s) {     // internal dev/debug logging
    var args = ['XX' + 'X: '+s].concat(
        Array.prototype.slice.call(arguments, 1));
    console.error.apply(this, args);
};
var xxx = function xxx() {};  // comment out to turn on debug logging


/*
 * Runtime environment notes:
 *
 * Bunyan is intended to run in a number of runtime environments. Here are
 * some notes on differences for those envs and how the code copes.
 *
 * - node.js: The primary target environment.
 * - NW.js: http://nwjs.io/  An *app* environment that feels like both a
 *   node env -- it has node-like globals (`process`, `global`) and
 *   browser-like globals (`window`, `navigator`). My *understanding* is that
 *   bunyan can operate as if this is vanilla node.js.
 * - browser: Failing the above, we sniff using the `window` global
 *   <https://developer.mozilla.org/en-US/docs/Web/API/Window/window>.
 *      - browserify: http://browserify.org/  A browser-targetting bundler of
 *        node.js deps. The runtime is a browser env, so can't use fs access,
 *        etc. Browserify's build looks for `require(<single-string>)` imports
 *        to bundle. For some imports it won't be able to handle, we "hide"
 *        from browserify with `require('frobshizzle' + '')`.
 * - Other? Please open issues if things are broken.
 */
var runtimeEnv;
if (typeof (process) !== 'undefined' && process.versions) {
    if (process.versions.nw) {
        runtimeEnv = 'nw';
    } else if (process.versions.node) {
        runtimeEnv = 'node';
    }
}
if (!runtimeEnv && typeof (window) !== 'undefined' &&
    window.window === window) {
    runtimeEnv = 'browser';
}
if (!runtimeEnv) {
    throw new Error('unknown runtime environment');
}


var os, fs, dtrace;
if (runtimeEnv === 'browser') {
    os = {
        hostname: function () {
            return window.location.host;
        }
    };
    fs = {};
    dtrace = null;
} else {
    os = require('os');
    fs = require('fs');
    try {
        dtrace = require('dtrace-provider' + '');
    } catch (e) {
        dtrace = null;
    }
}
var util = require('util');
var assert = require('assert');
var EventEmitter = require('events').EventEmitter;
var stream = require('stream');

try {
    var safeJsonStringify = require('safe-json-stringify');
} catch (e) {
    safeJsonStringify = null;
}
if (process.env.BUNYAN_TEST_NO_SAFE_JSON_STRINGIFY) {
    safeJsonStringify = null;
}

// The 'mv' module is required for rotating-file stream support.
try {
    var mv = require('mv' + '');
} catch (e) {
    mv = null;
}

try {
    var sourceMapSupport = require('source-map-support' + '');
} catch (_) {
    sourceMapSupport = null;
}


//---- Internal support stuff

/**
 * A shallow copy of an object. Bunyan logging attempts to never cause
 * exceptions, so this function attempts to handle non-objects gracefully.
 */
function objCopy(obj) {
    if (obj == null) {  // null or undefined
        return obj;
    } else if (Array.isArray(obj)) {
        return obj.slice();
    } else if (typeof (obj) === 'object') {
        var copy = {};
        Object.keys(obj).forEach(function (k) {
            copy[k] = obj[k];
        });
        return copy;
    } else {
        return obj;
    }
}

var format = util.format;
if (!format) {
    // If node < 0.6, then use its `util.format`:
    // <https://github.com/joyent/node/blob/master/lib/util.js#L22>:
    var inspect = util.inspect;
    var formatRegExp = /%[sdj%]/g;
    format = function format(f) {
        if (typeof (f) !== 'string') {
            var objects = [];
            for (var i = 0; i < arguments.length; i++) {
                objects.push(inspect(arguments[i]));
            }
            return objects.join(' ');
        }

        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function (x) {
            if (i >= len)
                return x;
            switch (x) {
                case '%s': return String(args[i++]);
                case '%d': return Number(args[i++]);
                case '%j': return fastAndSafeJsonStringify(args[i++]);
                case '%%': return '%';
                default:
                    return x;
            }
        });
        for (var x = args[i]; i < len; x = args[++i]) {
            if (x === null || typeof (x) !== 'object') {
                str += ' ' + x;
            } else {
                str += ' ' + inspect(x);
            }
        }
        return str;
    };
}


/**
 * Gather some caller info 3 stack levels up.
 * See <http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi>.
 */
function getCaller3Info() {
    if (this === undefined) {
        // Cannot access caller info in 'strict' mode.
        return;
    }
    var obj = {};
    var saveLimit = Error.stackTraceLimit;
    var savePrepare = Error.prepareStackTrace;
    Error.stackTraceLimit = 3;

    Error.prepareStackTrace = function (_, stack) {
        var caller = stack[2];
        if (sourceMapSupport) {
            caller = sourceMapSupport.wrapCallSite(caller);
        }
        obj.file = caller.getFileName();
        obj.line = caller.getLineNumber();
        var func = caller.getFunctionName();
        if (func)
            obj.func = func;
    };
    Error.captureStackTrace(this, getCaller3Info);
    this.stack;

    Error.stackTraceLimit = saveLimit;
    Error.prepareStackTrace = savePrepare;
    return obj;
}


function _indent(s, indent) {
    if (!indent) indent = '    ';
    var lines = s.split(/\r?\n/g);
    return indent + lines.join('\n' + indent);
}


/**
 * Warn about an bunyan processing error.
 *
 * @param msg {String} Message with which to warn.
 * @param dedupKey {String} Optional. A short string key for this warning to
 *      have its warning only printed once.
 */
function _warn(msg, dedupKey) {
    assert.ok(msg);
    if (dedupKey) {
        if (_warned[dedupKey]) {
            return;
        }
        _warned[dedupKey] = true;
    }
    process.stderr.write(msg + '\n');
}
function _haveWarned(dedupKey) {
    return _warned[dedupKey];
}
var _warned = {};


function ConsoleRawStream() {}
ConsoleRawStream.prototype.write = function (rec) {
    if (rec.level < INFO) {
        console.log(rec);
    } else if (rec.level < WARN) {
        console.info(rec);
    } else if (rec.level < ERROR) {
        console.warn(rec);
    } else {
        console.error(rec);
    }
};


//---- Levels

var TRACE = 10;
var DEBUG = 20;
var INFO = 30;
var WARN = 40;
var ERROR = 50;
var FATAL = 60;

var levelFromName = {
    'trace': TRACE,
    'debug': DEBUG,
    'info': INFO,
    'warn': WARN,
    'error': ERROR,
    'fatal': FATAL
};
var nameFromLevel = {};
Object.keys(levelFromName).forEach(function (name) {
    nameFromLevel[levelFromName[name]] = name;
});

// Dtrace probes.
var dtp = undefined;
var probes = dtrace && {};

/**
 * Resolve a level number, name (upper or lowercase) to a level number value.
 *
 * @param nameOrNum {String|Number} A level name (case-insensitive) or positive
 *      integer level.
 * @api public
 */
function resolveLevel(nameOrNum) {
    var level;
    var type = typeof (nameOrNum);
    if (type === 'string') {
        level = levelFromName[nameOrNum.toLowerCase()];
        if (!level) {
            throw new Error(format('unknown level name: "%s"', nameOrNum));
        }
    } else if (type !== 'number') {
        throw new TypeError(format('cannot resolve level: invalid arg (%s):',
            type, nameOrNum));
    } else if (nameOrNum < 0 || Math.floor(nameOrNum) !== nameOrNum) {
        throw new TypeError(format('level is not a positive integer: %s',
            nameOrNum));
    } else {
        level = nameOrNum;
    }
    return level;
}


function isWritable(obj) {
    if (obj instanceof stream.Writable) {
        return true;
    }
    return typeof (obj.write) === 'function';
}


//---- Logger class

/**
 * Create a Logger instance.
 *
 * @param options {Object} See documentation for full details. At minimum
 *    this must include a 'name' string key. Configuration keys:
 *      - `streams`: specify the logger output streams. This is an array of
 *        objects with these fields:
 *          - `type`: The stream type. See README.md for full details.
 *            Often this is implied by the other fields. Examples are
 *            'file', 'stream' and "raw".
 *          - `level`: Defaults to 'info'.
 *          - `path` or `stream`: The specify the file path or writeable
 *            stream to which log records are written. E.g.
 *            `stream: process.stdout`.
 *          - `closeOnExit` (boolean): Optional. Default is true for a
 *            'file' stream when `path` is given, false otherwise.
 *        See README.md for full details.
 *      - `level`: set the level for a single output stream (cannot be used
 *        with `streams`)
 *      - `stream`: the output stream for a logger with just one, e.g.
 *        `process.stdout` (cannot be used with `streams`)
 *      - `serializers`: object mapping log record field names to
 *        serializing functions. See README.md for details.
 *      - `src`: Boolean (default false). Set true to enable 'src' automatic
 *        field with log call source info.
 *    All other keys are log record fields.
 *
 * An alternative *internal* call signature is used for creating a child:
 *    new Logger(<parent logger>, <child options>[, <child opts are simple>]);
 *
 * @param _childSimple (Boolean) An assertion that the given `_childOptions`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation.
 */
function Logger(options, _childOptions, _childSimple) {
    xxx('Logger start:', options)
    if (!(this instanceof Logger)) {
        return new Logger(options, _childOptions);
    }

    // Input arg validation.
    var parent;
    if (_childOptions !== undefined) {
        parent = options;
        options = _childOptions;
        if (!(parent instanceof Logger)) {
            throw new TypeError(
                'invalid Logger creation: do not pass a second arg');
        }
    }
    if (!options) {
        throw new TypeError('options (object) is required');
    }
    if (!parent) {
        if (!options.name) {
            throw new TypeError('options.name (string) is required');
        }
    } else {
        if (options.name) {
            throw new TypeError(
                'invalid options.name: child cannot set logger name');
        }
    }
    if (options.stream && options.streams) {
        throw new TypeError('cannot mix "streams" and "stream" options');
    }
    if (options.streams && !Array.isArray(options.streams)) {
        throw new TypeError('invalid options.streams: must be an array')
    }
    if (options.serializers && (typeof (options.serializers) !== 'object' ||
            Array.isArray(options.serializers))) {
        throw new TypeError('invalid options.serializers: must be an object')
    }

    EventEmitter.call(this);

    // Fast path for simple child creation.
    if (parent && _childSimple) {
        // `_isSimpleChild` is a signal to stream close handling that this child
        // owns none of its streams.
        this._isSimpleChild = true;

        this._level = parent._level;
        this.streams = parent.streams;
        this.serializers = parent.serializers;
        this.src = parent.src;
        var fields = this.fields = {};
        var parentFieldNames = Object.keys(parent.fields);
        for (var i = 0; i < parentFieldNames.length; i++) {
            var name = parentFieldNames[i];
            fields[name] = parent.fields[name];
        }
        var names = Object.keys(options);
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            fields[name] = options[name];
        }
        return;
    }

    // Start values.
    var self = this;
    if (parent) {
        this._level = parent._level;
        this.streams = [];
        for (var i = 0; i < parent.streams.length; i++) {
            var s = objCopy(parent.streams[i]);
            s.closeOnExit = false; // Don't own parent stream.
            this.streams.push(s);
        }
        this.serializers = objCopy(parent.serializers);
        this.src = parent.src;
        this.fields = objCopy(parent.fields);
        if (options.level) {
            this.level(options.level);
        }
    } else {
        this._level = Number.POSITIVE_INFINITY;
        this.streams = [];
        this.serializers = null;
        this.src = false;
        this.fields = {};
    }

    if (!dtp && dtrace) {
        dtp = dtrace.createDTraceProvider('bunyan');

        for (var level in levelFromName) {
            var probe;

            probes[levelFromName[level]] = probe =
                dtp.addProbe('log-' + level, 'char *');

            // Explicitly add a reference to dtp to prevent it from being GC'd
            probe.dtp = dtp;
        }

        dtp.enable();
    }

    // Handle *config* options (i.e. options that are not just plain data
    // for log records).
    if (options.stream) {
        self.addStream({
            type: 'stream',
            stream: options.stream,
            closeOnExit: false,
            level: options.level
        });
    } else if (options.streams) {
        options.streams.forEach(function (s) {
            self.addStream(s, options.level);
        });
    } else if (parent && options.level) {
        this.level(options.level);
    } else if (!parent) {
        if (runtimeEnv === 'browser') {
            /*
             * In the browser we'll be emitting to console.log by default.
             * Any console.log worth its salt these days can nicely render
             * and introspect objects (e.g. the Firefox and Chrome console)
             * so let's emit the raw log record. Are there browsers for which
             * that breaks things?
             */
            self.addStream({
                type: 'raw',
                stream: new ConsoleRawStream(),
                closeOnExit: false,
                level: options.level
            });
        } else {
            self.addStream({
                type: 'stream',
                stream: process.stdout,
                closeOnExit: false,
                level: options.level
            });
        }
    }
    if (options.serializers) {
        self.addSerializers(options.serializers);
    }
    if (options.src) {
        this.src = true;
    }
    xxx('Logger: ', self)

    // Fields.
    // These are the default fields for log records (minus the attributes
    // removed in this constructor). To allow storing raw log records
    // (unrendered), `this.fields` must never be mutated. Create a copy for
    // any changes.
    var fields = objCopy(options);
    delete fields.stream;
    delete fields.level;
    delete fields.streams;
    delete fields.serializers;
    delete fields.src;
    if (this.serializers) {
        this._applySerializers(fields);
    }
    if (!fields.hostname && !self.fields.hostname) {
        fields.hostname = os.hostname();
    }
    if (!fields.pid) {
        fields.pid = process.pid;
    }
    Object.keys(fields).forEach(function (k) {
        self.fields[k] = fields[k];
    });
}

util.inherits(Logger, EventEmitter);


/**
 * Add a stream
 *
 * @param stream {Object}. Object with these fields:
 *    - `type`: The stream type. See README.md for full details.
 *      Often this is implied by the other fields. Examples are
 *      'file', 'stream' and "raw".
 *    - `path` or `stream`: The specify the file path or writeable
 *      stream to which log records are written. E.g.
 *      `stream: process.stdout`.
 *    - `level`: Optional. Falls back to `defaultLevel`.
 *    - `closeOnExit` (boolean): Optional. Default is true for a
 *      'file' stream when `path` is given, false otherwise.
 *    See README.md for full details.
 * @param defaultLevel {Number|String} Optional. A level to use if
 *      `stream.level` is not set. If neither is given, this defaults to INFO.
 */
Logger.prototype.addStream = function addStream(s, defaultLevel) {
    var self = this;
    if (defaultLevel === null || defaultLevel === undefined) {
        defaultLevel = INFO;
    }

    s = objCopy(s);

    // Implicit 'type' from other args.
    if (!s.type) {
        if (s.stream) {
            s.type = 'stream';
        } else if (s.path) {
            s.type = 'file'
        }
    }
    s.raw = (s.type === 'raw');  // PERF: Allow for faster check in `_emit`.

    if (s.level !== undefined) {
        s.level = resolveLevel(s.level);
    } else {
        s.level = resolveLevel(defaultLevel);
    }
    if (s.level < self._level) {
        self._level = s.level;
    }

    switch (s.type) {
    case 'stream':
        assert.ok(isWritable(s.stream),
                  '"stream" stream is not writable: ' + util.inspect(s.stream));

        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    case 'file':
        if (s.reemitErrorEvents === undefined) {
            s.reemitErrorEvents = true;
        }
        if (!s.stream) {
            s.stream = fs.createWriteStream(s.path,
                                            {flags: 'a', encoding: 'utf8'});
            if (!s.closeOnExit) {
                s.closeOnExit = true;
            }
        } else {
            if (!s.closeOnExit) {
                s.closeOnExit = false;
            }
        }
        break;
    case 'rotating-file':
        assert.ok(!s.stream,
                  '"rotating-file" stream should not give a "stream"');
        assert.ok(s.path);
        assert.ok(mv, '"rotating-file" stream type is not supported: '
                      + 'missing "mv" module');
        s.stream = new RotatingFileStream(s);
        if (!s.closeOnExit) {
            s.closeOnExit = true;
        }
        break;
    case 'raw':
        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    default:
        throw new TypeError('unknown stream type "' + s.type + '"');
    }

    if (s.reemitErrorEvents && typeof (s.stream.on) === 'function') {
        // TODO: When we have `<logger>.close()`, it should remove event
        //      listeners to not leak Logger instances.
        s.stream.on('error', function onStreamError(err) {
            self.emit('error', err, s);
        });
    }

    self.streams.push(s);
    delete self.haveNonRawStreams;  // reset
}


/**
 * Add serializers
 *
 * @param serializers {Object} Optional. Object mapping log record field names
 *    to serializing functions. See README.md for details.
 */
Logger.prototype.addSerializers = function addSerializers(serializers) {
    var self = this;

    if (!self.serializers) {
        self.serializers = {};
    }
    Object.keys(serializers).forEach(function (field) {
        var serializer = serializers[field];
        if (typeof (serializer) !== 'function') {
            throw new TypeError(format(
                'invalid serializer for "%s" field: must be a function',
                field));
        } else {
            self.serializers[field] = serializer;
        }
    });
}



/**
 * Create a child logger, typically to add a few log record fields.
 *
 * This can be useful when passing a logger to a sub-component, e.g. a
 * 'wuzzle' component of your service:
 *
 *    var wuzzleLog = log.child({component: 'wuzzle'})
 *    var wuzzle = new Wuzzle({..., log: wuzzleLog})
 *
 * Then log records from the wuzzle code will have the same structure as
 * the app log, *plus the component='wuzzle' field*.
 *
 * @param options {Object} Optional. Set of options to apply to the child.
 *    All of the same options for a new Logger apply here. Notes:
 *      - The parent's streams are inherited and cannot be removed in this
 *        call. Any given `streams` are *added* to the set inherited from
 *        the parent.
 *      - The parent's serializers are inherited, though can effectively be
 *        overwritten by using duplicate keys.
 *      - Can use `level` to set the level of the streams inherited from
 *        the parent. The level for the parent is NOT affected.
 * @param simple {Boolean} Optional. Set to true to assert that `options`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation. See 'tools/timechild.js' for numbers.
 */
Logger.prototype.child = function (options, simple) {
    return new (this.constructor)(this, options || {}, simple);
}


/**
 * A convenience method to reopen 'file' streams on a logger. This can be
 * useful with external log rotation utilities that move and re-open log files
 * (e.g. logrotate on Linux, logadm on SmartOS/Illumos). Those utilities
 * typically have rotation options to copy-and-truncate the log file, but
 * you may not want to use that. An alternative is to do this in your
 * application:
 *
 *      var log = bunyan.createLogger(...);
 *      ...
 *      process.on('SIGUSR2', function () {
 *          log.reopenFileStreams();
 *      });
 *      ...
 *
 * See <https://github.com/trentm/node-bunyan/issues/104>.
 */
Logger.prototype.reopenFileStreams = function () {
    var self = this;
    self.streams.forEach(function (s) {
        if (s.type === 'file') {
            if (s.stream) {
                // Not sure if typically would want this, or more immediate
                // `s.stream.destroy()`.
                s.stream.end();
                s.stream.destroySoon();
                delete s.stream;
            }
            s.stream = fs.createWriteStream(s.path,
                {flags: 'a', encoding: 'utf8'});
            s.stream.on('error', function (err) {
                self.emit('error', err, s);
            });
        }
    });
};


/* BEGIN JSSTYLED */
/**
 * Close this logger.
 *
 * This closes streams (that it owns, as per 'endOnClose' attributes on
 * streams), etc. Typically you **don't** need to bother calling this.
Logger.prototype.close = function () {
    if (this._closed) {
        return;
    }
    if (!this._isSimpleChild) {
        self.streams.forEach(function (s) {
            if (s.endOnClose) {
                xxx('closing stream s:', s);
                s.stream.end();
                s.endOnClose = false;
            }
        });
    }
    this._closed = true;
}
 */
/* END JSSTYLED */


/**
 * Get/set the level of all streams on this logger.
 *
 * Get Usage:
 *    // Returns the current log level (lowest level of all its streams).
 *    log.level() -> INFO
 *
 * Set Usage:
 *    log.level(INFO)       // set all streams to level INFO
 *    log.level('info')     // can use 'info' et al aliases
 */
Logger.prototype.level = function level(value) {
    if (value === undefined) {
        return this._level;
    }
    var newLevel = resolveLevel(value);
    var len = this.streams.length;
    for (var i = 0; i < len; i++) {
        this.streams[i].level = newLevel;
    }
    this._level = newLevel;
}


/**
 * Get/set the level of a particular stream on this logger.
 *
 * Get Usage:
 *    // Returns an array of the levels of each stream.
 *    log.levels() -> [TRACE, INFO]
 *
 *    // Returns a level of the identified stream.
 *    log.levels(0) -> TRACE      // level of stream at index 0
 *    log.levels('foo')           // level of stream with name 'foo'
 *
 * Set Usage:
 *    log.levels(0, INFO)         // set level of stream 0 to INFO
 *    log.levels(0, 'info')       // can use 'info' et al aliases
 *    log.levels('foo', WARN)     // set stream named 'foo' to WARN
 *
 * Stream names: When streams are defined, they can optionally be given
 * a name. For example,
 *       log = new Logger({
 *         streams: [
 *           {
 *             name: 'foo',
 *             path: '/var/log/my-service/foo.log'
 *             level: 'trace'
 *           },
 *         ...
 *
 * @param name {String|Number} The stream index or name.
 * @param value {Number|String} The level value (INFO) or alias ('info').
 *    If not given, this is a 'get' operation.
 * @throws {Error} If there is no stream with the given name.
 */
Logger.prototype.levels = function levels(name, value) {
    if (name === undefined) {
        assert.equal(value, undefined);
        return this.streams.map(
            function (s) { return s.level });
    }
    var stream;
    if (typeof (name) === 'number') {
        stream = this.streams[name];
        if (stream === undefined) {
            throw new Error('invalid stream index: ' + name);
        }
    } else {
        var len = this.streams.length;
        for (var i = 0; i < len; i++) {
            var s = this.streams[i];
            if (s.name === name) {
                stream = s;
                break;
            }
        }
        if (!stream) {
            throw new Error(format('no stream with name "%s"', name));
        }
    }
    if (value === undefined) {
        return stream.level;
    } else {
        var newLevel = resolveLevel(value);
        stream.level = newLevel;
        if (newLevel < this._level) {
            this._level = newLevel;
        }
    }
}


/**
 * Apply registered serializers to the appropriate keys in the given fields.
 *
 * Pre-condition: This is only called if there is at least one serializer.
 *
 * @param fields (Object) The log record fields.
 * @param excludeFields (Object) Optional mapping of keys to `true` for
 *    keys to NOT apply a serializer.
 */
Logger.prototype._applySerializers = function (fields, excludeFields) {
    var self = this;

    xxx('_applySerializers: excludeFields', excludeFields);

    // Check each serializer against these (presuming number of serializers
    // is typically less than number of fields).
    Object.keys(this.serializers).forEach(function (name) {
        if (fields[name] === undefined ||
            (excludeFields && excludeFields[name]))
        {
            return;
        }
        xxx('_applySerializers; apply to "%s" key', name)
        try {
            fields[name] = self.serializers[name](fields[name]);
        } catch (err) {
            _warn(format('bunyan: ERROR: Exception thrown from the "%s" '
                + 'Bunyan serializer. This should never happen. This is a bug '
                + 'in that serializer function.\n%s',
                name, err.stack || err));
            fields[name] = format('(Error in Bunyan log "%s" serializer '
                + 'broke field. See stderr for details.)', name);
        }
    });
}


/**
 * Emit a log record.
 *
 * @param rec {log record}
 * @param noemit {Boolean} Optional. Set to true to skip emission
 *      and just return the JSON string.
 */
Logger.prototype._emit = function (rec, noemit) {
    var i;

    // Lazily determine if this Logger has non-'raw' streams. If there are
    // any, then we need to stringify the log record.
    if (this.haveNonRawStreams === undefined) {
        this.haveNonRawStreams = false;
        for (i = 0; i < this.streams.length; i++) {
            if (!this.streams[i].raw) {
                this.haveNonRawStreams = true;
                break;
            }
        }
    }

    // Stringify the object (creates a warning str on error).
    var str;
    if (noemit || this.haveNonRawStreams) {
        str = fastAndSafeJsonStringify(rec) + '\n';
    }

    if (noemit)
        return str;

    var level = rec.level;
    for (i = 0; i < this.streams.length; i++) {
        var s = this.streams[i];
        if (s.level <= level) {
            xxx('writing log rec "%s" to "%s" stream (%d <= %d): %j',
                rec.msg, s.type, s.level, level, rec);
            s.stream.write(s.raw ? rec : str);
        }
    };

    return str;
}


/**
 * Build a record object suitable for emitting from the arguments
 * provided to the a log emitter.
 */
function mkRecord(log, minLevel, args) {
    var excludeFields, fields, msgArgs;
    if (args[0] instanceof Error) {
        // `log.<level>(err, ...)`
        fields = {
            // Use this Logger's err serializer, if defined.
            err: (log.serializers && log.serializers.err
                ? log.serializers.err(args[0])
                : Logger.stdSerializers.err(args[0]))
        };
        excludeFields = {err: true};
        if (args.length === 1) {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    } else if (typeof (args[0]) !== 'object' || Array.isArray(args[0])) {
        // `log.<level>(msg, ...)`
        fields = null;
        msgArgs = args.slice();
    } else if (Buffer.isBuffer(args[0])) {  // `log.<level>(buf, ...)`
        // Almost certainly an error, show `inspect(buf)`. See bunyan
        // issue #35.
        fields = null;
        msgArgs = args.slice();
        msgArgs[0] = util.inspect(msgArgs[0]);
    } else {  // `log.<level>(fields, msg, ...)`
        fields = args[0];
        if (fields && args.length === 1 && fields.err &&
            fields.err instanceof Error)
        {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    }

    // Build up the record object.
    var rec = objCopy(log.fields);
    var level = rec.level = minLevel;
    var recFields = (fields ? objCopy(fields) : null);
    if (recFields) {
        if (log.serializers) {
            log._applySerializers(recFields, excludeFields);
        }
        Object.keys(recFields).forEach(function (k) {
            rec[k] = recFields[k];
        });
    }
    rec.msg = format.apply(log, msgArgs);
    if (!rec.time) {
        rec.time = (new Date());
    }
    // Get call source info
    if (log.src && !rec.src) {
        rec.src = getCaller3Info()
    }
    rec.v = LOG_VERSION;

    return rec;
};


/**
 * Build an array that dtrace-provider can use to fire a USDT probe. If we've
 * already built the appropriate string, we use it. Otherwise, build the
 * record object and stringify it.
 */
function mkProbeArgs(str, log, minLevel, msgArgs) {
    return [ str || log._emit(mkRecord(log, minLevel, msgArgs), true) ];
}


/**
 * Build a log emitter function for level minLevel. I.e. this is the
 * creator of `log.info`, `log.error`, etc.
 */
function mkLogEmitter(minLevel) {
    return function () {
        var log = this;
        var str = null;
        var rec = null;

        if (!this._emit) {
            /*
             * Show this invalid Bunyan usage warning *once*.
             *
             * See <https://github.com/trentm/node-bunyan/issues/100> for
             * an example of how this can happen.
             */
            var dedupKey = 'unbound';
            if (!_haveWarned[dedupKey]) {
                var caller = getCaller3Info();
                _warn(format('bunyan usage error: %s:%s: attempt to log '
                    + 'with an unbound log method: `this` is: %s',
                    caller.file, caller.line, util.inspect(this)),
                    dedupKey);
            }
            return;
        } else if (arguments.length === 0) {   // `log.<level>()`
            return (this._level <= minLevel);
        }

        var msgArgs = new Array(arguments.length);
        for (var i = 0; i < msgArgs.length; ++i) {
            msgArgs[i] = arguments[i];
        }

        if (this._level <= minLevel) {
            rec = mkRecord(log, minLevel, msgArgs);
            str = this._emit(rec);
        }

        if (probes) {
            probes[minLevel].fire(mkProbeArgs, str, log, minLevel, msgArgs);
        }
    }
}


/**
 * The functions below log a record at a specific level.
 *
 * Usages:
 *    log.<level>()  -> boolean is-trace-enabled
 *    log.<level>(<Error> err, [<string> msg, ...])
 *    log.<level>(<string> msg, ...)
 *    log.<level>(<object> fields, <string> msg, ...)
 *
 * where <level> is the lowercase version of the log level. E.g.:
 *
 *    log.info()
 *
 * @params fields {Object} Optional set of additional fields to log.
 * @params msg {String} Log message. This can be followed by additional
 *    arguments that are handled like
 *    [util.format](http://nodejs.org/docs/latest/api/all.html#util.format).
 */
Logger.prototype.trace = mkLogEmitter(TRACE);
Logger.prototype.debug = mkLogEmitter(DEBUG);
Logger.prototype.info = mkLogEmitter(INFO);
Logger.prototype.warn = mkLogEmitter(WARN);
Logger.prototype.error = mkLogEmitter(ERROR);
Logger.prototype.fatal = mkLogEmitter(FATAL);



//---- Standard serializers
// A serializer is a function that serializes a JavaScript object to a
// JSON representation for logging. There is a standard set of presumed
// interesting objects in node.js-land.

Logger.stdSerializers = {};

// Serialize an HTTP request.
Logger.stdSerializers.req = function (req) {
    if (!req || !req.connection)
        return req;
    return {
        method: req.method,
        url: req.url,
        headers: req.headers,
        remoteAddress: req.connection.remoteAddress,
        remotePort: req.connection.remotePort
    };
    // Trailers: Skipping for speed. If you need trailers in your app, then
    // make a custom serializer.
    //if (Object.keys(trailers).length > 0) {
    //  obj.trailers = req.trailers;
    //}
};

// Serialize an HTTP response.
Logger.stdSerializers.res = function (res) {
    if (!res || !res.statusCode)
        return res;
    return {
        statusCode: res.statusCode,
        header: res._header
    }
};


/*
 * This function dumps long stack traces for exceptions having a cause()
 * method. The error classes from
 * [verror](https://github.com/davepacheco/node-verror) and
 * [restify v2.0](https://github.com/mcavage/node-restify) are examples.
 *
 * Based on `dumpException` in
 * https://github.com/davepacheco/node-extsprintf/blob/master/lib/extsprintf.js
 */
function getFullErrorStack(ex)
{
    var ret = ex.stack || ex.toString();
    if (ex.cause && typeof (ex.cause) === 'function') {
        var cex = ex.cause();
        if (cex) {
            ret += '\nCaused by: ' + getFullErrorStack(cex);
        }
    }
    return (ret);
}

// Serialize an Error object
// (Core error properties are enumerable in node 0.4, not in 0.6).
var errSerializer = Logger.stdSerializers.err = function (err) {
    if (!err || !err.stack)
        return err;
    var obj = {
        message: err.message,
        name: err.name,
        stack: getFullErrorStack(err),
        code: err.code,
        signal: err.signal
    }
    return obj;
};


// A JSON stringifier that handles cycles safely - tracks seen values in a Set.
function safeCyclesSet() {
    var seen = new Set();
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.has(val)) {
            return '[Circular]';
        }
        seen.add(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely - tracks seen vals in an Array.
 *
 * Note: This approach has performance problems when dealing with large objects,
 * see trentm/node-bunyan#445, but since this is the only option for node 0.10
 * and earlier (as Set was introduced in Node 0.12), it's used as a fallback
 * when Set is not available.
 */
function safeCyclesArray() {
    var seen = [];
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.indexOf(val) !== -1) {
            return '[Circular]';
        }
        seen.push(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely.
 *
 * Usage: JSON.stringify(obj, safeCycles())
 *
 * Choose the best safe cycle function from what is available - see
 * trentm/node-bunyan#445.
 */
var safeCycles = typeof (Set) !== 'undefined' ? safeCyclesSet : safeCyclesArray;

/**
 * A fast JSON.stringify that handles cycles and getter exceptions (when
 * safeJsonStringify is installed).
 *
 * This function attempts to use the regular JSON.stringify for speed, but on
 * error (e.g. JSON cycle detection exception) it falls back to safe stringify
 * handlers that can deal with cycles and/or getter exceptions.
 */
function fastAndSafeJsonStringify(rec) {
    try {
        return JSON.stringify(rec);
    } catch (ex) {
        try {
            return JSON.stringify(rec, safeCycles());
        } catch (e) {
            if (safeJsonStringify) {
                return safeJsonStringify(rec);
            } else {
                var dedupKey = e.stack.split(/\n/g, 3).join('\n');
                _warn('bunyan: ERROR: Exception in '
                    + '`JSON.stringify(rec)`. You can install the '
                    + '"safe-json-stringify" module to have Bunyan fallback '
                    + 'to safer stringification. Record:\n'
                    + _indent(format('%s\n%s', util.inspect(rec), e.stack)),
                    dedupKey);
                return format('(Exception in JSON.stringify(rec): %j. '
                    + 'See stderr for details.)', e.message);
            }
        }
    }
}


var RotatingFileStream = null;
if (mv) {

RotatingFileStream = function RotatingFileStream(options) {
    this.path = options.path;

    this.count = (options.count == null ? 10 : options.count);
    assert.equal(typeof (this.count), 'number',
        format('rotating-file stream "count" is not a number: %j (%s) in %j',
            this.count, typeof (this.count), this));
    assert.ok(this.count >= 0,
        format('rotating-file stream "count" is not >= 0: %j in %j',
            this.count, this));

    // Parse `options.period`.
    if (options.period) {
        // <number><scope> where scope is:
        //    h   hours (at the start of the hour)
        //    d   days (at the start of the day, i.e. just after midnight)
        //    w   weeks (at the start of Sunday)
        //    m   months (on the first of the month)
        //    y   years (at the start of Jan 1st)
        // with special values 'hourly' (1h), 'daily' (1d), "weekly" (1w),
        // 'monthly' (1m) and 'yearly' (1y)
        var period = {
            'hourly': '1h',
            'daily': '1d',
            'weekly': '1w',
            'monthly': '1m',
            'yearly': '1y'
        }[options.period] || options.period;
        var m = /^([1-9][0-9]*)([hdwmy]|ms)$/.exec(period);
        if (!m) {
            throw new Error(format('invalid period: "%s"', options.period));
        }
        this.periodNum = Number(m[1]);
        this.periodScope = m[2];
    } else {
        this.periodNum = 1;
        this.periodScope = 'd';
    }

    var lastModified = null;
    try {
        var fileInfo = fs.statSync(this.path);
        lastModified = fileInfo.mtime.getTime();
    }
    catch (err) {
        // file doesn't exist
    }
    var rotateAfterOpen = false;
    if (lastModified) {
        var lastRotTime = this._calcRotTime(0);
        if (lastModified < lastRotTime) {
            rotateAfterOpen = true;
        }
    }

    // TODO: template support for backup files
    // template: <path to which to rotate>
    //      default is %P.%n
    //      '/var/log/archive/foo.log'  -> foo.log.%n
    //      '/var/log/archive/foo.log.%n'
    //      codes:
    //          XXX support strftime codes (per node version of those)
    //              or whatever module. Pick non-colliding for extra
    //              codes
    //          %P      `path` base value
    //          %n      integer number of rotated log (1,2,3,...)
    //          %d      datetime in YYYY-MM-DD_HH-MM-SS
    //                      XXX what should default date format be?
    //                          prior art? Want to avoid ':' in
    //                          filenames (illegal on Windows for one).

    this.stream = fs.createWriteStream(this.path,
        {flags: 'a', encoding: 'utf8'});

    this.rotQueue = [];
    this.rotating = false;
    if (rotateAfterOpen) {
        this._debug('rotateAfterOpen -> call rotate()');
        this.rotate();
    } else {
        this._setupNextRot();
    }
}

util.inherits(RotatingFileStream, EventEmitter);

RotatingFileStream.prototype._debug = function () {
    // Set this to `true` to add debug logging.
    if (false) {
        if (arguments.length === 0) {
            return true;
        }
        var args = Array.prototype.slice.call(arguments);
        args[0] = '[' + (new Date().toISOString()) + ', '
            + this.path + '] ' + args[0];
        console.log.apply(this, args);
    } else {
        return false;
    }
};

RotatingFileStream.prototype._setupNextRot = function () {
    this.rotAt = this._calcRotTime(1);
    this._setRotationTimer();
}

RotatingFileStream.prototype._setRotationTimer = function () {
    var self = this;
    var delay = this.rotAt - Date.now();
    // Cap timeout to Node's max setTimeout, see
    // <https://github.com/joyent/node/issues/8656>.
    var TIMEOUT_MAX = 2147483647; // 2^31-1
    if (delay > TIMEOUT_MAX) {
        delay = TIMEOUT_MAX;
    }
    this.timeout = setTimeout(
        function () {
            self._debug('_setRotationTimer timeout -> call rotate()');
            self.rotate();
        },
        delay);
    if (typeof (this.timeout.unref) === 'function') {
        this.timeout.unref();
    }
}

RotatingFileStream.prototype._calcRotTime =
function _calcRotTime(periodOffset) {
    this._debug('_calcRotTime: %s%s', this.periodNum, this.periodScope);
    var d = new Date();

    this._debug('  now local: %s', d);
    this._debug('    now utc: %s', d.toISOString());
    var rotAt;
    switch (this.periodScope) {
    case 'ms':
        // Hidden millisecond period for debugging.
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * periodOffset;
        } else {
            rotAt = Date.now() + this.periodNum * periodOffset;
        }
        break;
    case 'h':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 60 * 60 * 1000 * periodOffset;
        } else {
            // First time: top of the next hour.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate(), d.getUTCHours() + periodOffset);
        }
        break;
    case 'd':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: start of tomorrow (i.e. at the coming midnight) UTC.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + periodOffset);
        }
        break;
    case 'w':
        // Currently, always on Sunday morning at 00:00:00 (UTC).
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 7 * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: this coming Sunday.
            var dayOffset = (7 - d.getUTCDay());
            if (periodOffset < 1) {
                dayOffset = -d.getUTCDay();
            }
            if (periodOffset > 1 || periodOffset < -1) {
                dayOffset += 7 * periodOffset;
            }
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + dayOffset);
        }
        break;
    case 'm':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + this.periodNum * periodOffset, 1);
        } else {
            // First time: the start of the next month.
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + periodOffset, 1);
        }
        break;
    case 'y':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear() + this.periodNum * periodOffset,
                0, 1);
        } else {
            // First time: the start of the next year.
            rotAt = Date.UTC(d.getUTCFullYear() + periodOffset, 0, 1);
        }
        break;
    default:
        assert.fail(format('invalid period scope: "%s"', this.periodScope));
    }

    if (this._debug()) {
        this._debug('  **rotAt**: %s (utc: %s)', rotAt,
            new Date(rotAt).toUTCString());
        var now = Date.now();
        this._debug('        now: %s (%sms == %smin == %sh to go)',
            now,
            rotAt - now,
            (rotAt-now)/1000/60,
            (rotAt-now)/1000/60/60);
    }
    return rotAt;
};

RotatingFileStream.prototype.rotate = function rotate() {
    // XXX What about shutdown?
    var self = this;

    // If rotation period is > ~25 days, we have to break into multiple
    // setTimeout's. See <https://github.com/joyent/node/issues/8656>.
    if (self.rotAt && self.rotAt > Date.now()) {
        return self._setRotationTimer();
    }

    this._debug('rotate');
    if (self.rotating) {
        throw new TypeError('cannot start a rotation when already rotating');
    }
    self.rotating = true;

    self.stream.end();  // XXX can do moves sync after this? test at high rate

    function del() {
        var toDel = self.path + '.' + String(n - 1);
        if (n === 0) {
            toDel = self.path;
        }
        n -= 1;
        self._debug('  rm %s', toDel);
        fs.unlink(toDel, function (delErr) {
            //XXX handle err other than not exists
            moves();
        });
    }

    function moves() {
        if (self.count === 0 || n < 0) {
            return finish();
        }
        var before = self.path;
        var after = self.path + '.' + String(n);
        if (n > 0) {
            before += '.' + String(n - 1);
        }
        n -= 1;
        fs.exists(before, function (exists) {
            if (!exists) {
                moves();
            } else {
                self._debug('  mv %s %s', before, after);
                mv(before, after, function (mvErr) {
                    if (mvErr) {
                        self.emit('error', mvErr);
                        finish(); // XXX finish here?
                    } else {
                        moves();
                    }
                });
            }
        })
    }

    function finish() {
        self._debug('  open %s', self.path);
        self.stream = fs.createWriteStream(self.path,
            {flags: 'a', encoding: 'utf8'});
        var q = self.rotQueue, len = q.length;
        for (var i = 0; i < len; i++) {
            self.stream.write(q[i]);
        }
        self.rotQueue = [];
        self.rotating = false;
        self.emit('drain');
        self._setupNextRot();
    }

    var n = this.count;
    del();
};

RotatingFileStream.prototype.write = function write(s) {
    if (this.rotating) {
        this.rotQueue.push(s);
        return false;
    } else {
        return this.stream.write(s);
    }
};

RotatingFileStream.prototype.end = function end(s) {
    this.stream.end();
};

RotatingFileStream.prototype.destroy = function destroy(s) {
    this.stream.destroy();
};

RotatingFileStream.prototype.destroySoon = function destroySoon(s) {
    this.stream.destroySoon();
};

} /* if (mv) */



/**
 * RingBuffer is a Writable Stream that just stores the last N records in
 * memory.
 *
 * @param options {Object}, with the following fields:
 *
 *    - limit: number of records to keep in memory
 */
function RingBuffer(options) {
    this.limit = options && options.limit ? options.limit : 100;
    this.writable = true;
    this.records = [];
    EventEmitter.call(this);
}

util.inherits(RingBuffer, EventEmitter);

RingBuffer.prototype.write = function (record) {
    if (!this.writable)
        throw (new Error('RingBuffer has been ended already'));

    this.records.push(record);

    if (this.records.length > this.limit)
        this.records.shift();

    return (true);
};

RingBuffer.prototype.end = function () {
    if (arguments.length > 0)
        this.write.apply(this, Array.prototype.slice.call(arguments));
    this.writable = false;
};

RingBuffer.prototype.destroy = function () {
    this.writable = false;
    this.emit('close');
};

RingBuffer.prototype.destroySoon = function () {
    this.destroy();
};


//---- Exports

module.exports = Logger;

module.exports.TRACE = TRACE;
module.exports.DEBUG = DEBUG;
module.exports.INFO = INFO;
module.exports.WARN = WARN;
module.exports.ERROR = ERROR;
module.exports.FATAL = FATAL;
module.exports.resolveLevel = resolveLevel;
module.exports.levelFromName = levelFromName;
module.exports.nameFromLevel = nameFromLevel;

module.exports.VERSION = VERSION;
module.exports.LOG_VERSION = LOG_VERSION;

module.exports.createLogger = function createLogger(options) {
    return new Logger(options);
};

module.exports.RingBuffer = RingBuffer;
module.exports.RotatingFileStream = RotatingFileStream;

// Useful for custom `type == 'raw'` streams that may do JSON stringification
// of log records themselves. Usage:
//    var str = JSON.stringify(rec, bunyan.safeCycles());
module.exports.safeCycles = safeCycles;
 at SyntaxError: Unexpected token (85:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"_bound":1,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0} start 8.8779 took 4.7502s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"_bound":1,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"_bound":1}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"_bound":3} start 8.8458 took 8.3371s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"_bound":3}
* Error: Tropigate failed because SyntaxError: Unexpected token (85:4) on program /**
 * Copyright (c) 2017 Trent Mick.
 * Copyright (c) 2017 Joyent Inc.
 *
 * The bunyan logging library for node.js.
 *
 * -*- mode: js -*-
 * vim: expandtab:ts=4:sw=4
 */

var VERSION = '1.8.12';

/*
 * Bunyan log format version. This becomes the 'v' field on all log records.
 * This will be incremented if there is any backward incompatible change to
 * the log record format. Details will be in 'CHANGES.md' (the change log).
 */
var LOG_VERSION = 0;


var xxx = function xxx(s) {     // internal dev/debug logging
    var args = ['XX' + 'X: '+s].concat(
        Array.prototype.slice.call(arguments, 1));
    console.error.apply(this, args);
};
var xxx = function xxx() {};  // comment out to turn on debug logging


/*
 * Runtime environment notes:
 *
 * Bunyan is intended to run in a number of runtime environments. Here are
 * some notes on differences for those envs and how the code copes.
 *
 * - node.js: The primary target environment.
 * - NW.js: http://nwjs.io/  An *app* environment that feels like both a
 *   node env -- it has node-like globals (`process`, `global`) and
 *   browser-like globals (`window`, `navigator`). My *understanding* is that
 *   bunyan can operate as if this is vanilla node.js.
 * - browser: Failing the above, we sniff using the `window` global
 *   <https://developer.mozilla.org/en-US/docs/Web/API/Window/window>.
 *      - browserify: http://browserify.org/  A browser-targetting bundler of
 *        node.js deps. The runtime is a browser env, so can't use fs access,
 *        etc. Browserify's build looks for `require(<single-string>)` imports
 *        to bundle. For some imports it won't be able to handle, we "hide"
 *        from browserify with `require('frobshizzle' + '')`.
 * - Other? Please open issues if things are broken.
 */
var runtimeEnv;
if (typeof (process) !== 'undefined' && process.versions) {
    if (process.versions.nw) {
        runtimeEnv = 'nw';
    } else if (process.versions.node) {
        runtimeEnv = 'node';
    }
}
if (!runtimeEnv && typeof (window) !== 'undefined' &&
    window.window === window) {
    runtimeEnv = 'browser';
}
if (!runtimeEnv) {
    throw new Error('unknown runtime environment');
}


var os, fs, dtrace;
if (runtimeEnv === 'browser') {
    os = {
        hostname: function () {
            return window.location.host;
        }
    };
    fs = {};
    dtrace = null;
} else {
    os = require('os');
    fs = require('fs');
    try {
        dtrace = require('dtrace-provider' + '');
    } catch (e) {
        dtrace = null;
    }
}
var util = require('util');
var assert = require('assert');
var EventEmitter = require('events').EventEmitter;
var stream = require('stream');

try {
    var safeJsonStringify = require('safe-json-stringify');
} catch (e) {
    safeJsonStringify = null;
}
if (process.env.BUNYAN_TEST_NO_SAFE_JSON_STRINGIFY) {
    safeJsonStringify = null;
}

// The 'mv' module is required for rotating-file stream support.
try {
    var mv = require('mv' + '');
} catch (e) {
    mv = null;
}

try {
    var sourceMapSupport = require('source-map-support' + '');
} catch (_) {
    sourceMapSupport = null;
}


//---- Internal support stuff

/**
 * A shallow copy of an object. Bunyan logging attempts to never cause
 * exceptions, so this function attempts to handle non-objects gracefully.
 */
function objCopy(obj) {
    if (obj == null) {  // null or undefined
        return obj;
    } else if (Array.isArray(obj)) {
        return obj.slice();
    } else if (typeof (obj) === 'object') {
        var copy = {};
        Object.keys(obj).forEach(function (k) {
            copy[k] = obj[k];
        });
        return copy;
    } else {
        return obj;
    }
}

var format = util.format;
if (!format) {
    // If node < 0.6, then use its `util.format`:
    // <https://github.com/joyent/node/blob/master/lib/util.js#L22>:
    var inspect = util.inspect;
    var formatRegExp = /%[sdj%]/g;
    format = function format(f) {
        if (typeof (f) !== 'string') {
            var objects = [];
            for (var i = 0; i < arguments.length; i++) {
                objects.push(inspect(arguments[i]));
            }
            return objects.join(' ');
        }

        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function (x) {
            if (i >= len)
                return x;
            switch (x) {
                case '%s': return String(args[i++]);
                case '%d': return Number(args[i++]);
                case '%j': return fastAndSafeJsonStringify(args[i++]);
                case '%%': return '%';
                default:
                    return x;
            }
        });
        for (var x = args[i]; i < len; x = args[++i]) {
            if (x === null || typeof (x) !== 'object') {
                str += ' ' + x;
            } else {
                str += ' ' + inspect(x);
            }
        }
        return str;
    };
}


/**
 * Gather some caller info 3 stack levels up.
 * See <http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi>.
 */
function getCaller3Info() {
    if (this === undefined) {
        // Cannot access caller info in 'strict' mode.
        return;
    }
    var obj = {};
    var saveLimit = Error.stackTraceLimit;
    var savePrepare = Error.prepareStackTrace;
    Error.stackTraceLimit = 3;

    Error.prepareStackTrace = function (_, stack) {
        var caller = stack[2];
        if (sourceMapSupport) {
            caller = sourceMapSupport.wrapCallSite(caller);
        }
        obj.file = caller.getFileName();
        obj.line = caller.getLineNumber();
        var func = caller.getFunctionName();
        if (func)
            obj.func = func;
    };
    Error.captureStackTrace(this, getCaller3Info);
    this.stack;

    Error.stackTraceLimit = saveLimit;
    Error.prepareStackTrace = savePrepare;
    return obj;
}


function _indent(s, indent) {
    if (!indent) indent = '    ';
    var lines = s.split(/\r?\n/g);
    return indent + lines.join('\n' + indent);
}


/**
 * Warn about an bunyan processing error.
 *
 * @param msg {String} Message with which to warn.
 * @param dedupKey {String} Optional. A short string key for this warning to
 *      have its warning only printed once.
 */
function _warn(msg, dedupKey) {
    assert.ok(msg);
    if (dedupKey) {
        if (_warned[dedupKey]) {
            return;
        }
        _warned[dedupKey] = true;
    }
    process.stderr.write(msg + '\n');
}
function _haveWarned(dedupKey) {
    return _warned[dedupKey];
}
var _warned = {};


function ConsoleRawStream() {}
ConsoleRawStream.prototype.write = function (rec) {
    if (rec.level < INFO) {
        console.log(rec);
    } else if (rec.level < WARN) {
        console.info(rec);
    } else if (rec.level < ERROR) {
        console.warn(rec);
    } else {
        console.error(rec);
    }
};


//---- Levels

var TRACE = 10;
var DEBUG = 20;
var INFO = 30;
var WARN = 40;
var ERROR = 50;
var FATAL = 60;

var levelFromName = {
    'trace': TRACE,
    'debug': DEBUG,
    'info': INFO,
    'warn': WARN,
    'error': ERROR,
    'fatal': FATAL
};
var nameFromLevel = {};
Object.keys(levelFromName).forEach(function (name) {
    nameFromLevel[levelFromName[name]] = name;
});

// Dtrace probes.
var dtp = undefined;
var probes = dtrace && {};

/**
 * Resolve a level number, name (upper or lowercase) to a level number value.
 *
 * @param nameOrNum {String|Number} A level name (case-insensitive) or positive
 *      integer level.
 * @api public
 */
function resolveLevel(nameOrNum) {
    var level;
    var type = typeof (nameOrNum);
    if (type === 'string') {
        level = levelFromName[nameOrNum.toLowerCase()];
        if (!level) {
            throw new Error(format('unknown level name: "%s"', nameOrNum));
        }
    } else if (type !== 'number') {
        throw new TypeError(format('cannot resolve level: invalid arg (%s):',
            type, nameOrNum));
    } else if (nameOrNum < 0 || Math.floor(nameOrNum) !== nameOrNum) {
        throw new TypeError(format('level is not a positive integer: %s',
            nameOrNum));
    } else {
        level = nameOrNum;
    }
    return level;
}


function isWritable(obj) {
    if (obj instanceof stream.Writable) {
        return true;
    }
    return typeof (obj.write) === 'function';
}


//---- Logger class

/**
 * Create a Logger instance.
 *
 * @param options {Object} See documentation for full details. At minimum
 *    this must include a 'name' string key. Configuration keys:
 *      - `streams`: specify the logger output streams. This is an array of
 *        objects with these fields:
 *          - `type`: The stream type. See README.md for full details.
 *            Often this is implied by the other fields. Examples are
 *            'file', 'stream' and "raw".
 *          - `level`: Defaults to 'info'.
 *          - `path` or `stream`: The specify the file path or writeable
 *            stream to which log records are written. E.g.
 *            `stream: process.stdout`.
 *          - `closeOnExit` (boolean): Optional. Default is true for a
 *            'file' stream when `path` is given, false otherwise.
 *        See README.md for full details.
 *      - `level`: set the level for a single output stream (cannot be used
 *        with `streams`)
 *      - `stream`: the output stream for a logger with just one, e.g.
 *        `process.stdout` (cannot be used with `streams`)
 *      - `serializers`: object mapping log record field names to
 *        serializing functions. See README.md for details.
 *      - `src`: Boolean (default false). Set true to enable 'src' automatic
 *        field with log call source info.
 *    All other keys are log record fields.
 *
 * An alternative *internal* call signature is used for creating a child:
 *    new Logger(<parent logger>, <child options>[, <child opts are simple>]);
 *
 * @param _childSimple (Boolean) An assertion that the given `_childOptions`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation.
 */
function Logger(options, _childOptions, _childSimple) {
    xxx('Logger start:', options)
    if (!(this instanceof Logger)) {
        return new Logger(options, _childOptions);
    }

    // Input arg validation.
    var parent;
    if (_childOptions !== undefined) {
        parent = options;
        options = _childOptions;
        if (!(parent instanceof Logger)) {
            throw new TypeError(
                'invalid Logger creation: do not pass a second arg');
        }
    }
    if (!options) {
        throw new TypeError('options (object) is required');
    }
    if (!parent) {
        if (!options.name) {
            throw new TypeError('options.name (string) is required');
        }
    } else {
        if (options.name) {
            throw new TypeError(
                'invalid options.name: child cannot set logger name');
        }
    }
    if (options.stream && options.streams) {
        throw new TypeError('cannot mix "streams" and "stream" options');
    }
    if (options.streams && !Array.isArray(options.streams)) {
        throw new TypeError('invalid options.streams: must be an array')
    }
    if (options.serializers && (typeof (options.serializers) !== 'object' ||
            Array.isArray(options.serializers))) {
        throw new TypeError('invalid options.serializers: must be an object')
    }

    EventEmitter.call(this);

    // Fast path for simple child creation.
    if (parent && _childSimple) {
        // `_isSimpleChild` is a signal to stream close handling that this child
        // owns none of its streams.
        this._isSimpleChild = true;

        this._level = parent._level;
        this.streams = parent.streams;
        this.serializers = parent.serializers;
        this.src = parent.src;
        var fields = this.fields = {};
        var parentFieldNames = Object.keys(parent.fields);
        for (var i = 0; i < parentFieldNames.length; i++) {
            var name = parentFieldNames[i];
            fields[name] = parent.fields[name];
        }
        var names = Object.keys(options);
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            fields[name] = options[name];
        }
        return;
    }

    // Start values.
    var self = this;
    if (parent) {
        this._level = parent._level;
        this.streams = [];
        for (var i = 0; i < parent.streams.length; i++) {
            var s = objCopy(parent.streams[i]);
            s.closeOnExit = false; // Don't own parent stream.
            this.streams.push(s);
        }
        this.serializers = objCopy(parent.serializers);
        this.src = parent.src;
        this.fields = objCopy(parent.fields);
        if (options.level) {
            this.level(options.level);
        }
    } else {
        this._level = Number.POSITIVE_INFINITY;
        this.streams = [];
        this.serializers = null;
        this.src = false;
        this.fields = {};
    }

    if (!dtp && dtrace) {
        dtp = dtrace.createDTraceProvider('bunyan');

        for (var level in levelFromName) {
            var probe;

            probes[levelFromName[level]] = probe =
                dtp.addProbe('log-' + level, 'char *');

            // Explicitly add a reference to dtp to prevent it from being GC'd
            probe.dtp = dtp;
        }

        dtp.enable();
    }

    // Handle *config* options (i.e. options that are not just plain data
    // for log records).
    if (options.stream) {
        self.addStream({
            type: 'stream',
            stream: options.stream,
            closeOnExit: false,
            level: options.level
        });
    } else if (options.streams) {
        options.streams.forEach(function (s) {
            self.addStream(s, options.level);
        });
    } else if (parent && options.level) {
        this.level(options.level);
    } else if (!parent) {
        if (runtimeEnv === 'browser') {
            /*
             * In the browser we'll be emitting to console.log by default.
             * Any console.log worth its salt these days can nicely render
             * and introspect objects (e.g. the Firefox and Chrome console)
             * so let's emit the raw log record. Are there browsers for which
             * that breaks things?
             */
            self.addStream({
                type: 'raw',
                stream: new ConsoleRawStream(),
                closeOnExit: false,
                level: options.level
            });
        } else {
            self.addStream({
                type: 'stream',
                stream: process.stdout,
                closeOnExit: false,
                level: options.level
            });
        }
    }
    if (options.serializers) {
        self.addSerializers(options.serializers);
    }
    if (options.src) {
        this.src = true;
    }
    xxx('Logger: ', self)

    // Fields.
    // These are the default fields for log records (minus the attributes
    // removed in this constructor). To allow storing raw log records
    // (unrendered), `this.fields` must never be mutated. Create a copy for
    // any changes.
    var fields = objCopy(options);
    delete fields.stream;
    delete fields.level;
    delete fields.streams;
    delete fields.serializers;
    delete fields.src;
    if (this.serializers) {
        this._applySerializers(fields);
    }
    if (!fields.hostname && !self.fields.hostname) {
        fields.hostname = os.hostname();
    }
    if (!fields.pid) {
        fields.pid = process.pid;
    }
    Object.keys(fields).forEach(function (k) {
        self.fields[k] = fields[k];
    });
}

util.inherits(Logger, EventEmitter);


/**
 * Add a stream
 *
 * @param stream {Object}. Object with these fields:
 *    - `type`: The stream type. See README.md for full details.
 *      Often this is implied by the other fields. Examples are
 *      'file', 'stream' and "raw".
 *    - `path` or `stream`: The specify the file path or writeable
 *      stream to which log records are written. E.g.
 *      `stream: process.stdout`.
 *    - `level`: Optional. Falls back to `defaultLevel`.
 *    - `closeOnExit` (boolean): Optional. Default is true for a
 *      'file' stream when `path` is given, false otherwise.
 *    See README.md for full details.
 * @param defaultLevel {Number|String} Optional. A level to use if
 *      `stream.level` is not set. If neither is given, this defaults to INFO.
 */
Logger.prototype.addStream = function addStream(s, defaultLevel) {
    var self = this;
    if (defaultLevel === null || defaultLevel === undefined) {
        defaultLevel = INFO;
    }

    s = objCopy(s);

    // Implicit 'type' from other args.
    if (!s.type) {
        if (s.stream) {
            s.type = 'stream';
        } else if (s.path) {
            s.type = 'file'
        }
    }
    s.raw = (s.type === 'raw');  // PERF: Allow for faster check in `_emit`.

    if (s.level !== undefined) {
        s.level = resolveLevel(s.level);
    } else {
        s.level = resolveLevel(defaultLevel);
    }
    if (s.level < self._level) {
        self._level = s.level;
    }

    switch (s.type) {
    case 'stream':
        assert.ok(isWritable(s.stream),
                  '"stream" stream is not writable: ' + util.inspect(s.stream));

        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    case 'file':
        if (s.reemitErrorEvents === undefined) {
            s.reemitErrorEvents = true;
        }
        if (!s.stream) {
            s.stream = fs.createWriteStream(s.path,
                                            {flags: 'a', encoding: 'utf8'});
            if (!s.closeOnExit) {
                s.closeOnExit = true;
            }
        } else {
            if (!s.closeOnExit) {
                s.closeOnExit = false;
            }
        }
        break;
    case 'rotating-file':
        assert.ok(!s.stream,
                  '"rotating-file" stream should not give a "stream"');
        assert.ok(s.path);
        assert.ok(mv, '"rotating-file" stream type is not supported: '
                      + 'missing "mv" module');
        s.stream = new RotatingFileStream(s);
        if (!s.closeOnExit) {
            s.closeOnExit = true;
        }
        break;
    case 'raw':
        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    default:
        throw new TypeError('unknown stream type "' + s.type + '"');
    }

    if (s.reemitErrorEvents && typeof (s.stream.on) === 'function') {
        // TODO: When we have `<logger>.close()`, it should remove event
        //      listeners to not leak Logger instances.
        s.stream.on('error', function onStreamError(err) {
            self.emit('error', err, s);
        });
    }

    self.streams.push(s);
    delete self.haveNonRawStreams;  // reset
}


/**
 * Add serializers
 *
 * @param serializers {Object} Optional. Object mapping log record field names
 *    to serializing functions. See README.md for details.
 */
Logger.prototype.addSerializers = function addSerializers(serializers) {
    var self = this;

    if (!self.serializers) {
        self.serializers = {};
    }
    Object.keys(serializers).forEach(function (field) {
        var serializer = serializers[field];
        if (typeof (serializer) !== 'function') {
            throw new TypeError(format(
                'invalid serializer for "%s" field: must be a function',
                field));
        } else {
            self.serializers[field] = serializer;
        }
    });
}



/**
 * Create a child logger, typically to add a few log record fields.
 *
 * This can be useful when passing a logger to a sub-component, e.g. a
 * 'wuzzle' component of your service:
 *
 *    var wuzzleLog = log.child({component: 'wuzzle'})
 *    var wuzzle = new Wuzzle({..., log: wuzzleLog})
 *
 * Then log records from the wuzzle code will have the same structure as
 * the app log, *plus the component='wuzzle' field*.
 *
 * @param options {Object} Optional. Set of options to apply to the child.
 *    All of the same options for a new Logger apply here. Notes:
 *      - The parent's streams are inherited and cannot be removed in this
 *        call. Any given `streams` are *added* to the set inherited from
 *        the parent.
 *      - The parent's serializers are inherited, though can effectively be
 *        overwritten by using duplicate keys.
 *      - Can use `level` to set the level of the streams inherited from
 *        the parent. The level for the parent is NOT affected.
 * @param simple {Boolean} Optional. Set to true to assert that `options`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation. See 'tools/timechild.js' for numbers.
 */
Logger.prototype.child = function (options, simple) {
    return new (this.constructor)(this, options || {}, simple);
}


/**
 * A convenience method to reopen 'file' streams on a logger. This can be
 * useful with external log rotation utilities that move and re-open log files
 * (e.g. logrotate on Linux, logadm on SmartOS/Illumos). Those utilities
 * typically have rotation options to copy-and-truncate the log file, but
 * you may not want to use that. An alternative is to do this in your
 * application:
 *
 *      var log = bunyan.createLogger(...);
 *      ...
 *      process.on('SIGUSR2', function () {
 *          log.reopenFileStreams();
 *      });
 *      ...
 *
 * See <https://github.com/trentm/node-bunyan/issues/104>.
 */
Logger.prototype.reopenFileStreams = function () {
    var self = this;
    self.streams.forEach(function (s) {
        if (s.type === 'file') {
            if (s.stream) {
                // Not sure if typically would want this, or more immediate
                // `s.stream.destroy()`.
                s.stream.end();
                s.stream.destroySoon();
                delete s.stream;
            }
            s.stream = fs.createWriteStream(s.path,
                {flags: 'a', encoding: 'utf8'});
            s.stream.on('error', function (err) {
                self.emit('error', err, s);
            });
        }
    });
};


/* BEGIN JSSTYLED */
/**
 * Close this logger.
 *
 * This closes streams (that it owns, as per 'endOnClose' attributes on
 * streams), etc. Typically you **don't** need to bother calling this.
Logger.prototype.close = function () {
    if (this._closed) {
        return;
    }
    if (!this._isSimpleChild) {
        self.streams.forEach(function (s) {
            if (s.endOnClose) {
                xxx('closing stream s:', s);
                s.stream.end();
                s.endOnClose = false;
            }
        });
    }
    this._closed = true;
}
 */
/* END JSSTYLED */


/**
 * Get/set the level of all streams on this logger.
 *
 * Get Usage:
 *    // Returns the current log level (lowest level of all its streams).
 *    log.level() -> INFO
 *
 * Set Usage:
 *    log.level(INFO)       // set all streams to level INFO
 *    log.level('info')     // can use 'info' et al aliases
 */
Logger.prototype.level = function level(value) {
    if (value === undefined) {
        return this._level;
    }
    var newLevel = resolveLevel(value);
    var len = this.streams.length;
    for (var i = 0; i < len; i++) {
        this.streams[i].level = newLevel;
    }
    this._level = newLevel;
}


/**
 * Get/set the level of a particular stream on this logger.
 *
 * Get Usage:
 *    // Returns an array of the levels of each stream.
 *    log.levels() -> [TRACE, INFO]
 *
 *    // Returns a level of the identified stream.
 *    log.levels(0) -> TRACE      // level of stream at index 0
 *    log.levels('foo')           // level of stream with name 'foo'
 *
 * Set Usage:
 *    log.levels(0, INFO)         // set level of stream 0 to INFO
 *    log.levels(0, 'info')       // can use 'info' et al aliases
 *    log.levels('foo', WARN)     // set stream named 'foo' to WARN
 *
 * Stream names: When streams are defined, they can optionally be given
 * a name. For example,
 *       log = new Logger({
 *         streams: [
 *           {
 *             name: 'foo',
 *             path: '/var/log/my-service/foo.log'
 *             level: 'trace'
 *           },
 *         ...
 *
 * @param name {String|Number} The stream index or name.
 * @param value {Number|String} The level value (INFO) or alias ('info').
 *    If not given, this is a 'get' operation.
 * @throws {Error} If there is no stream with the given name.
 */
Logger.prototype.levels = function levels(name, value) {
    if (name === undefined) {
        assert.equal(value, undefined);
        return this.streams.map(
            function (s) { return s.level });
    }
    var stream;
    if (typeof (name) === 'number') {
        stream = this.streams[name];
        if (stream === undefined) {
            throw new Error('invalid stream index: ' + name);
        }
    } else {
        var len = this.streams.length;
        for (var i = 0; i < len; i++) {
            var s = this.streams[i];
            if (s.name === name) {
                stream = s;
                break;
            }
        }
        if (!stream) {
            throw new Error(format('no stream with name "%s"', name));
        }
    }
    if (value === undefined) {
        return stream.level;
    } else {
        var newLevel = resolveLevel(value);
        stream.level = newLevel;
        if (newLevel < this._level) {
            this._level = newLevel;
        }
    }
}


/**
 * Apply registered serializers to the appropriate keys in the given fields.
 *
 * Pre-condition: This is only called if there is at least one serializer.
 *
 * @param fields (Object) The log record fields.
 * @param excludeFields (Object) Optional mapping of keys to `true` for
 *    keys to NOT apply a serializer.
 */
Logger.prototype._applySerializers = function (fields, excludeFields) {
    var self = this;

    xxx('_applySerializers: excludeFields', excludeFields);

    // Check each serializer against these (presuming number of serializers
    // is typically less than number of fields).
    Object.keys(this.serializers).forEach(function (name) {
        if (fields[name] === undefined ||
            (excludeFields && excludeFields[name]))
        {
            return;
        }
        xxx('_applySerializers; apply to "%s" key', name)
        try {
            fields[name] = self.serializers[name](fields[name]);
        } catch (err) {
            _warn(format('bunyan: ERROR: Exception thrown from the "%s" '
                + 'Bunyan serializer. This should never happen. This is a bug '
                + 'in that serializer function.\n%s',
                name, err.stack || err));
            fields[name] = format('(Error in Bunyan log "%s" serializer '
                + 'broke field. See stderr for details.)', name);
        }
    });
}


/**
 * Emit a log record.
 *
 * @param rec {log record}
 * @param noemit {Boolean} Optional. Set to true to skip emission
 *      and just return the JSON string.
 */
Logger.prototype._emit = function (rec, noemit) {
    var i;

    // Lazily determine if this Logger has non-'raw' streams. If there are
    // any, then we need to stringify the log record.
    if (this.haveNonRawStreams === undefined) {
        this.haveNonRawStreams = false;
        for (i = 0; i < this.streams.length; i++) {
            if (!this.streams[i].raw) {
                this.haveNonRawStreams = true;
                break;
            }
        }
    }

    // Stringify the object (creates a warning str on error).
    var str;
    if (noemit || this.haveNonRawStreams) {
        str = fastAndSafeJsonStringify(rec) + '\n';
    }

    if (noemit)
        return str;

    var level = rec.level;
    for (i = 0; i < this.streams.length; i++) {
        var s = this.streams[i];
        if (s.level <= level) {
            xxx('writing log rec "%s" to "%s" stream (%d <= %d): %j',
                rec.msg, s.type, s.level, level, rec);
            s.stream.write(s.raw ? rec : str);
        }
    };

    return str;
}


/**
 * Build a record object suitable for emitting from the arguments
 * provided to the a log emitter.
 */
function mkRecord(log, minLevel, args) {
    var excludeFields, fields, msgArgs;
    if (args[0] instanceof Error) {
        // `log.<level>(err, ...)`
        fields = {
            // Use this Logger's err serializer, if defined.
            err: (log.serializers && log.serializers.err
                ? log.serializers.err(args[0])
                : Logger.stdSerializers.err(args[0]))
        };
        excludeFields = {err: true};
        if (args.length === 1) {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    } else if (typeof (args[0]) !== 'object' || Array.isArray(args[0])) {
        // `log.<level>(msg, ...)`
        fields = null;
        msgArgs = args.slice();
    } else if (Buffer.isBuffer(args[0])) {  // `log.<level>(buf, ...)`
        // Almost certainly an error, show `inspect(buf)`. See bunyan
        // issue #35.
        fields = null;
        msgArgs = args.slice();
        msgArgs[0] = util.inspect(msgArgs[0]);
    } else {  // `log.<level>(fields, msg, ...)`
        fields = args[0];
        if (fields && args.length === 1 && fields.err &&
            fields.err instanceof Error)
        {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    }

    // Build up the record object.
    var rec = objCopy(log.fields);
    var level = rec.level = minLevel;
    var recFields = (fields ? objCopy(fields) : null);
    if (recFields) {
        if (log.serializers) {
            log._applySerializers(recFields, excludeFields);
        }
        Object.keys(recFields).forEach(function (k) {
            rec[k] = recFields[k];
        });
    }
    rec.msg = format.apply(log, msgArgs);
    if (!rec.time) {
        rec.time = (new Date());
    }
    // Get call source info
    if (log.src && !rec.src) {
        rec.src = getCaller3Info()
    }
    rec.v = LOG_VERSION;

    return rec;
};


/**
 * Build an array that dtrace-provider can use to fire a USDT probe. If we've
 * already built the appropriate string, we use it. Otherwise, build the
 * record object and stringify it.
 */
function mkProbeArgs(str, log, minLevel, msgArgs) {
    return [ str || log._emit(mkRecord(log, minLevel, msgArgs), true) ];
}


/**
 * Build a log emitter function for level minLevel. I.e. this is the
 * creator of `log.info`, `log.error`, etc.
 */
function mkLogEmitter(minLevel) {
    return function () {
        var log = this;
        var str = null;
        var rec = null;

        if (!this._emit) {
            /*
             * Show this invalid Bunyan usage warning *once*.
             *
             * See <https://github.com/trentm/node-bunyan/issues/100> for
             * an example of how this can happen.
             */
            var dedupKey = 'unbound';
            if (!_haveWarned[dedupKey]) {
                var caller = getCaller3Info();
                _warn(format('bunyan usage error: %s:%s: attempt to log '
                    + 'with an unbound log method: `this` is: %s',
                    caller.file, caller.line, util.inspect(this)),
                    dedupKey);
            }
            return;
        } else if (arguments.length === 0) {   // `log.<level>()`
            return (this._level <= minLevel);
        }

        var msgArgs = new Array(arguments.length);
        for (var i = 0; i < msgArgs.length; ++i) {
            msgArgs[i] = arguments[i];
        }

        if (this._level <= minLevel) {
            rec = mkRecord(log, minLevel, msgArgs);
            str = this._emit(rec);
        }

        if (probes) {
            probes[minLevel].fire(mkProbeArgs, str, log, minLevel, msgArgs);
        }
    }
}


/**
 * The functions below log a record at a specific level.
 *
 * Usages:
 *    log.<level>()  -> boolean is-trace-enabled
 *    log.<level>(<Error> err, [<string> msg, ...])
 *    log.<level>(<string> msg, ...)
 *    log.<level>(<object> fields, <string> msg, ...)
 *
 * where <level> is the lowercase version of the log level. E.g.:
 *
 *    log.info()
 *
 * @params fields {Object} Optional set of additional fields to log.
 * @params msg {String} Log message. This can be followed by additional
 *    arguments that are handled like
 *    [util.format](http://nodejs.org/docs/latest/api/all.html#util.format).
 */
Logger.prototype.trace = mkLogEmitter(TRACE);
Logger.prototype.debug = mkLogEmitter(DEBUG);
Logger.prototype.info = mkLogEmitter(INFO);
Logger.prototype.warn = mkLogEmitter(WARN);
Logger.prototype.error = mkLogEmitter(ERROR);
Logger.prototype.fatal = mkLogEmitter(FATAL);



//---- Standard serializers
// A serializer is a function that serializes a JavaScript object to a
// JSON representation for logging. There is a standard set of presumed
// interesting objects in node.js-land.

Logger.stdSerializers = {};

// Serialize an HTTP request.
Logger.stdSerializers.req = function (req) {
    if (!req || !req.connection)
        return req;
    return {
        method: req.method,
        url: req.url,
        headers: req.headers,
        remoteAddress: req.connection.remoteAddress,
        remotePort: req.connection.remotePort
    };
    // Trailers: Skipping for speed. If you need trailers in your app, then
    // make a custom serializer.
    //if (Object.keys(trailers).length > 0) {
    //  obj.trailers = req.trailers;
    //}
};

// Serialize an HTTP response.
Logger.stdSerializers.res = function (res) {
    if (!res || !res.statusCode)
        return res;
    return {
        statusCode: res.statusCode,
        header: res._header
    }
};


/*
 * This function dumps long stack traces for exceptions having a cause()
 * method. The error classes from
 * [verror](https://github.com/davepacheco/node-verror) and
 * [restify v2.0](https://github.com/mcavage/node-restify) are examples.
 *
 * Based on `dumpException` in
 * https://github.com/davepacheco/node-extsprintf/blob/master/lib/extsprintf.js
 */
function getFullErrorStack(ex)
{
    var ret = ex.stack || ex.toString();
    if (ex.cause && typeof (ex.cause) === 'function') {
        var cex = ex.cause();
        if (cex) {
            ret += '\nCaused by: ' + getFullErrorStack(cex);
        }
    }
    return (ret);
}

// Serialize an Error object
// (Core error properties are enumerable in node 0.4, not in 0.6).
var errSerializer = Logger.stdSerializers.err = function (err) {
    if (!err || !err.stack)
        return err;
    var obj = {
        message: err.message,
        name: err.name,
        stack: getFullErrorStack(err),
        code: err.code,
        signal: err.signal
    }
    return obj;
};


// A JSON stringifier that handles cycles safely - tracks seen values in a Set.
function safeCyclesSet() {
    var seen = new Set();
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.has(val)) {
            return '[Circular]';
        }
        seen.add(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely - tracks seen vals in an Array.
 *
 * Note: This approach has performance problems when dealing with large objects,
 * see trentm/node-bunyan#445, but since this is the only option for node 0.10
 * and earlier (as Set was introduced in Node 0.12), it's used as a fallback
 * when Set is not available.
 */
function safeCyclesArray() {
    var seen = [];
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.indexOf(val) !== -1) {
            return '[Circular]';
        }
        seen.push(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely.
 *
 * Usage: JSON.stringify(obj, safeCycles())
 *
 * Choose the best safe cycle function from what is available - see
 * trentm/node-bunyan#445.
 */
var safeCycles = typeof (Set) !== 'undefined' ? safeCyclesSet : safeCyclesArray;

/**
 * A fast JSON.stringify that handles cycles and getter exceptions (when
 * safeJsonStringify is installed).
 *
 * This function attempts to use the regular JSON.stringify for speed, but on
 * error (e.g. JSON cycle detection exception) it falls back to safe stringify
 * handlers that can deal with cycles and/or getter exceptions.
 */
function fastAndSafeJsonStringify(rec) {
    try {
        return JSON.stringify(rec);
    } catch (ex) {
        try {
            return JSON.stringify(rec, safeCycles());
        } catch (e) {
            if (safeJsonStringify) {
                return safeJsonStringify(rec);
            } else {
                var dedupKey = e.stack.split(/\n/g, 3).join('\n');
                _warn('bunyan: ERROR: Exception in '
                    + '`JSON.stringify(rec)`. You can install the '
                    + '"safe-json-stringify" module to have Bunyan fallback '
                    + 'to safer stringification. Record:\n'
                    + _indent(format('%s\n%s', util.inspect(rec), e.stack)),
                    dedupKey);
                return format('(Exception in JSON.stringify(rec): %j. '
                    + 'See stderr for details.)', e.message);
            }
        }
    }
}


var RotatingFileStream = null;
if (mv) {

RotatingFileStream = function RotatingFileStream(options) {
    this.path = options.path;

    this.count = (options.count == null ? 10 : options.count);
    assert.equal(typeof (this.count), 'number',
        format('rotating-file stream "count" is not a number: %j (%s) in %j',
            this.count, typeof (this.count), this));
    assert.ok(this.count >= 0,
        format('rotating-file stream "count" is not >= 0: %j in %j',
            this.count, this));

    // Parse `options.period`.
    if (options.period) {
        // <number><scope> where scope is:
        //    h   hours (at the start of the hour)
        //    d   days (at the start of the day, i.e. just after midnight)
        //    w   weeks (at the start of Sunday)
        //    m   months (on the first of the month)
        //    y   years (at the start of Jan 1st)
        // with special values 'hourly' (1h), 'daily' (1d), "weekly" (1w),
        // 'monthly' (1m) and 'yearly' (1y)
        var period = {
            'hourly': '1h',
            'daily': '1d',
            'weekly': '1w',
            'monthly': '1m',
            'yearly': '1y'
        }[options.period] || options.period;
        var m = /^([1-9][0-9]*)([hdwmy]|ms)$/.exec(period);
        if (!m) {
            throw new Error(format('invalid period: "%s"', options.period));
        }
        this.periodNum = Number(m[1]);
        this.periodScope = m[2];
    } else {
        this.periodNum = 1;
        this.periodScope = 'd';
    }

    var lastModified = null;
    try {
        var fileInfo = fs.statSync(this.path);
        lastModified = fileInfo.mtime.getTime();
    }
    catch (err) {
        // file doesn't exist
    }
    var rotateAfterOpen = false;
    if (lastModified) {
        var lastRotTime = this._calcRotTime(0);
        if (lastModified < lastRotTime) {
            rotateAfterOpen = true;
        }
    }

    // TODO: template support for backup files
    // template: <path to which to rotate>
    //      default is %P.%n
    //      '/var/log/archive/foo.log'  -> foo.log.%n
    //      '/var/log/archive/foo.log.%n'
    //      codes:
    //          XXX support strftime codes (per node version of those)
    //              or whatever module. Pick non-colliding for extra
    //              codes
    //          %P      `path` base value
    //          %n      integer number of rotated log (1,2,3,...)
    //          %d      datetime in YYYY-MM-DD_HH-MM-SS
    //                      XXX what should default date format be?
    //                          prior art? Want to avoid ':' in
    //                          filenames (illegal on Windows for one).

    this.stream = fs.createWriteStream(this.path,
        {flags: 'a', encoding: 'utf8'});

    this.rotQueue = [];
    this.rotating = false;
    if (rotateAfterOpen) {
        this._debug('rotateAfterOpen -> call rotate()');
        this.rotate();
    } else {
        this._setupNextRot();
    }
}

util.inherits(RotatingFileStream, EventEmitter);

RotatingFileStream.prototype._debug = function () {
    // Set this to `true` to add debug logging.
    if (false) {
        if (arguments.length === 0) {
            return true;
        }
        var args = Array.prototype.slice.call(arguments);
        args[0] = '[' + (new Date().toISOString()) + ', '
            + this.path + '] ' + args[0];
        console.log.apply(this, args);
    } else {
        return false;
    }
};

RotatingFileStream.prototype._setupNextRot = function () {
    this.rotAt = this._calcRotTime(1);
    this._setRotationTimer();
}

RotatingFileStream.prototype._setRotationTimer = function () {
    var self = this;
    var delay = this.rotAt - Date.now();
    // Cap timeout to Node's max setTimeout, see
    // <https://github.com/joyent/node/issues/8656>.
    var TIMEOUT_MAX = 2147483647; // 2^31-1
    if (delay > TIMEOUT_MAX) {
        delay = TIMEOUT_MAX;
    }
    this.timeout = setTimeout(
        function () {
            self._debug('_setRotationTimer timeout -> call rotate()');
            self.rotate();
        },
        delay);
    if (typeof (this.timeout.unref) === 'function') {
        this.timeout.unref();
    }
}

RotatingFileStream.prototype._calcRotTime =
function _calcRotTime(periodOffset) {
    this._debug('_calcRotTime: %s%s', this.periodNum, this.periodScope);
    var d = new Date();

    this._debug('  now local: %s', d);
    this._debug('    now utc: %s', d.toISOString());
    var rotAt;
    switch (this.periodScope) {
    case 'ms':
        // Hidden millisecond period for debugging.
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * periodOffset;
        } else {
            rotAt = Date.now() + this.periodNum * periodOffset;
        }
        break;
    case 'h':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 60 * 60 * 1000 * periodOffset;
        } else {
            // First time: top of the next hour.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate(), d.getUTCHours() + periodOffset);
        }
        break;
    case 'd':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: start of tomorrow (i.e. at the coming midnight) UTC.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + periodOffset);
        }
        break;
    case 'w':
        // Currently, always on Sunday morning at 00:00:00 (UTC).
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 7 * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: this coming Sunday.
            var dayOffset = (7 - d.getUTCDay());
            if (periodOffset < 1) {
                dayOffset = -d.getUTCDay();
            }
            if (periodOffset > 1 || periodOffset < -1) {
                dayOffset += 7 * periodOffset;
            }
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + dayOffset);
        }
        break;
    case 'm':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + this.periodNum * periodOffset, 1);
        } else {
            // First time: the start of the next month.
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + periodOffset, 1);
        }
        break;
    case 'y':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear() + this.periodNum * periodOffset,
                0, 1);
        } else {
            // First time: the start of the next year.
            rotAt = Date.UTC(d.getUTCFullYear() + periodOffset, 0, 1);
        }
        break;
    default:
        assert.fail(format('invalid period scope: "%s"', this.periodScope));
    }

    if (this._debug()) {
        this._debug('  **rotAt**: %s (utc: %s)', rotAt,
            new Date(rotAt).toUTCString());
        var now = Date.now();
        this._debug('        now: %s (%sms == %smin == %sh to go)',
            now,
            rotAt - now,
            (rotAt-now)/1000/60,
            (rotAt-now)/1000/60/60);
    }
    return rotAt;
};

RotatingFileStream.prototype.rotate = function rotate() {
    // XXX What about shutdown?
    var self = this;

    // If rotation period is > ~25 days, we have to break into multiple
    // setTimeout's. See <https://github.com/joyent/node/issues/8656>.
    if (self.rotAt && self.rotAt > Date.now()) {
        return self._setRotationTimer();
    }

    this._debug('rotate');
    if (self.rotating) {
        throw new TypeError('cannot start a rotation when already rotating');
    }
    self.rotating = true;

    self.stream.end();  // XXX can do moves sync after this? test at high rate

    function del() {
        var toDel = self.path + '.' + String(n - 1);
        if (n === 0) {
            toDel = self.path;
        }
        n -= 1;
        self._debug('  rm %s', toDel);
        fs.unlink(toDel, function (delErr) {
            //XXX handle err other than not exists
            moves();
        });
    }

    function moves() {
        if (self.count === 0 || n < 0) {
            return finish();
        }
        var before = self.path;
        var after = self.path + '.' + String(n);
        if (n > 0) {
            before += '.' + String(n - 1);
        }
        n -= 1;
        fs.exists(before, function (exists) {
            if (!exists) {
                moves();
            } else {
                self._debug('  mv %s %s', before, after);
                mv(before, after, function (mvErr) {
                    if (mvErr) {
                        self.emit('error', mvErr);
                        finish(); // XXX finish here?
                    } else {
                        moves();
                    }
                });
            }
        })
    }

    function finish() {
        self._debug('  open %s', self.path);
        self.stream = fs.createWriteStream(self.path,
            {flags: 'a', encoding: 'utf8'});
        var q = self.rotQueue, len = q.length;
        for (var i = 0; i < len; i++) {
            self.stream.write(q[i]);
        }
        self.rotQueue = [];
        self.rotating = false;
        self.emit('drain');
        self._setupNextRot();
    }

    var n = this.count;
    del();
};

RotatingFileStream.prototype.write = function write(s) {
    if (this.rotating) {
        this.rotQueue.push(s);
        return false;
    } else {
        return this.stream.write(s);
    }
};

RotatingFileStream.prototype.end = function end(s) {
    this.stream.end();
};

RotatingFileStream.prototype.destroy = function destroy(s) {
    this.stream.destroy();
};

RotatingFileStream.prototype.destroySoon = function destroySoon(s) {
    this.stream.destroySoon();
};

} /* if (mv) */



/**
 * RingBuffer is a Writable Stream that just stores the last N records in
 * memory.
 *
 * @param options {Object}, with the following fields:
 *
 *    - limit: number of records to keep in memory
 */
function RingBuffer(options) {
    this.limit = options && options.limit ? options.limit : 100;
    this.writable = true;
    this.records = [];
    EventEmitter.call(this);
}

util.inherits(RingBuffer, EventEmitter);

RingBuffer.prototype.write = function (record) {
    if (!this.writable)
        throw (new Error('RingBuffer has been ended already'));

    this.records.push(record);

    if (this.records.length > this.limit)
        this.records.shift();

    return (true);
};

RingBuffer.prototype.end = function () {
    if (arguments.length > 0)
        this.write.apply(this, Array.prototype.slice.call(arguments));
    this.writable = false;
};

RingBuffer.prototype.destroy = function () {
    this.writable = false;
    this.emit('close');
};

RingBuffer.prototype.destroySoon = function () {
    this.destroy();
};


//---- Exports

module.exports = Logger;

module.exports.TRACE = TRACE;
module.exports.DEBUG = DEBUG;
module.exports.INFO = INFO;
module.exports.WARN = WARN;
module.exports.ERROR = ERROR;
module.exports.FATAL = FATAL;
module.exports.resolveLevel = resolveLevel;
module.exports.levelFromName = levelFromName;
module.exports.nameFromLevel = nameFromLevel;

module.exports.VERSION = VERSION;
module.exports.LOG_VERSION = LOG_VERSION;

module.exports.createLogger = function createLogger(options) {
    return new Logger(options);
};

module.exports.RingBuffer = RingBuffer;
module.exports.RotatingFileStream = RotatingFileStream;

// Useful for custom `type == 'raw'` streams that may do JSON stringification
// of log records themselves. Usage:
//    var str = JSON.stringify(rec, bunyan.safeCycles());
module.exports.safeCycles = safeCycles;
 at SyntaxError: Unexpected token (85:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"_bound":3}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"_bound":2} start 8.8107 took 8.9825s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"_bound":2}
* Error: Tropigate failed because SyntaxError: Unexpected token (85:4) on program /**
 * Copyright (c) 2017 Trent Mick.
 * Copyright (c) 2017 Joyent Inc.
 *
 * The bunyan logging library for node.js.
 *
 * -*- mode: js -*-
 * vim: expandtab:ts=4:sw=4
 */

var VERSION = '1.8.12';

/*
 * Bunyan log format version. This becomes the 'v' field on all log records.
 * This will be incremented if there is any backward incompatible change to
 * the log record format. Details will be in 'CHANGES.md' (the change log).
 */
var LOG_VERSION = 0;


var xxx = function xxx(s) {     // internal dev/debug logging
    var args = ['XX' + 'X: '+s].concat(
        Array.prototype.slice.call(arguments, 1));
    console.error.apply(this, args);
};
var xxx = function xxx() {};  // comment out to turn on debug logging


/*
 * Runtime environment notes:
 *
 * Bunyan is intended to run in a number of runtime environments. Here are
 * some notes on differences for those envs and how the code copes.
 *
 * - node.js: The primary target environment.
 * - NW.js: http://nwjs.io/  An *app* environment that feels like both a
 *   node env -- it has node-like globals (`process`, `global`) and
 *   browser-like globals (`window`, `navigator`). My *understanding* is that
 *   bunyan can operate as if this is vanilla node.js.
 * - browser: Failing the above, we sniff using the `window` global
 *   <https://developer.mozilla.org/en-US/docs/Web/API/Window/window>.
 *      - browserify: http://browserify.org/  A browser-targetting bundler of
 *        node.js deps. The runtime is a browser env, so can't use fs access,
 *        etc. Browserify's build looks for `require(<single-string>)` imports
 *        to bundle. For some imports it won't be able to handle, we "hide"
 *        from browserify with `require('frobshizzle' + '')`.
 * - Other? Please open issues if things are broken.
 */
var runtimeEnv;
if (typeof (process) !== 'undefined' && process.versions) {
    if (process.versions.nw) {
        runtimeEnv = 'nw';
    } else if (process.versions.node) {
        runtimeEnv = 'node';
    }
}
if (!runtimeEnv && typeof (window) !== 'undefined' &&
    window.window === window) {
    runtimeEnv = 'browser';
}
if (!runtimeEnv) {
    throw new Error('unknown runtime environment');
}


var os, fs, dtrace;
if (runtimeEnv === 'browser') {
    os = {
        hostname: function () {
            return window.location.host;
        }
    };
    fs = {};
    dtrace = null;
} else {
    os = require('os');
    fs = require('fs');
    try {
        dtrace = require('dtrace-provider' + '');
    } catch (e) {
        dtrace = null;
    }
}
var util = require('util');
var assert = require('assert');
var EventEmitter = require('events').EventEmitter;
var stream = require('stream');

try {
    var safeJsonStringify = require('safe-json-stringify');
} catch (e) {
    safeJsonStringify = null;
}
if (process.env.BUNYAN_TEST_NO_SAFE_JSON_STRINGIFY) {
    safeJsonStringify = null;
}

// The 'mv' module is required for rotating-file stream support.
try {
    var mv = require('mv' + '');
} catch (e) {
    mv = null;
}

try {
    var sourceMapSupport = require('source-map-support' + '');
} catch (_) {
    sourceMapSupport = null;
}


//---- Internal support stuff

/**
 * A shallow copy of an object. Bunyan logging attempts to never cause
 * exceptions, so this function attempts to handle non-objects gracefully.
 */
function objCopy(obj) {
    if (obj == null) {  // null or undefined
        return obj;
    } else if (Array.isArray(obj)) {
        return obj.slice();
    } else if (typeof (obj) === 'object') {
        var copy = {};
        Object.keys(obj).forEach(function (k) {
            copy[k] = obj[k];
        });
        return copy;
    } else {
        return obj;
    }
}

var format = util.format;
if (!format) {
    // If node < 0.6, then use its `util.format`:
    // <https://github.com/joyent/node/blob/master/lib/util.js#L22>:
    var inspect = util.inspect;
    var formatRegExp = /%[sdj%]/g;
    format = function format(f) {
        if (typeof (f) !== 'string') {
            var objects = [];
            for (var i = 0; i < arguments.length; i++) {
                objects.push(inspect(arguments[i]));
            }
            return objects.join(' ');
        }

        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function (x) {
            if (i >= len)
                return x;
            switch (x) {
                case '%s': return String(args[i++]);
                case '%d': return Number(args[i++]);
                case '%j': return fastAndSafeJsonStringify(args[i++]);
                case '%%': return '%';
                default:
                    return x;
            }
        });
        for (var x = args[i]; i < len; x = args[++i]) {
            if (x === null || typeof (x) !== 'object') {
                str += ' ' + x;
            } else {
                str += ' ' + inspect(x);
            }
        }
        return str;
    };
}


/**
 * Gather some caller info 3 stack levels up.
 * See <http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi>.
 */
function getCaller3Info() {
    if (this === undefined) {
        // Cannot access caller info in 'strict' mode.
        return;
    }
    var obj = {};
    var saveLimit = Error.stackTraceLimit;
    var savePrepare = Error.prepareStackTrace;
    Error.stackTraceLimit = 3;

    Error.prepareStackTrace = function (_, stack) {
        var caller = stack[2];
        if (sourceMapSupport) {
            caller = sourceMapSupport.wrapCallSite(caller);
        }
        obj.file = caller.getFileName();
        obj.line = caller.getLineNumber();
        var func = caller.getFunctionName();
        if (func)
            obj.func = func;
    };
    Error.captureStackTrace(this, getCaller3Info);
    this.stack;

    Error.stackTraceLimit = saveLimit;
    Error.prepareStackTrace = savePrepare;
    return obj;
}


function _indent(s, indent) {
    if (!indent) indent = '    ';
    var lines = s.split(/\r?\n/g);
    return indent + lines.join('\n' + indent);
}


/**
 * Warn about an bunyan processing error.
 *
 * @param msg {String} Message with which to warn.
 * @param dedupKey {String} Optional. A short string key for this warning to
 *      have its warning only printed once.
 */
function _warn(msg, dedupKey) {
    assert.ok(msg);
    if (dedupKey) {
        if (_warned[dedupKey]) {
            return;
        }
        _warned[dedupKey] = true;
    }
    process.stderr.write(msg + '\n');
}
function _haveWarned(dedupKey) {
    return _warned[dedupKey];
}
var _warned = {};


function ConsoleRawStream() {}
ConsoleRawStream.prototype.write = function (rec) {
    if (rec.level < INFO) {
        console.log(rec);
    } else if (rec.level < WARN) {
        console.info(rec);
    } else if (rec.level < ERROR) {
        console.warn(rec);
    } else {
        console.error(rec);
    }
};


//---- Levels

var TRACE = 10;
var DEBUG = 20;
var INFO = 30;
var WARN = 40;
var ERROR = 50;
var FATAL = 60;

var levelFromName = {
    'trace': TRACE,
    'debug': DEBUG,
    'info': INFO,
    'warn': WARN,
    'error': ERROR,
    'fatal': FATAL
};
var nameFromLevel = {};
Object.keys(levelFromName).forEach(function (name) {
    nameFromLevel[levelFromName[name]] = name;
});

// Dtrace probes.
var dtp = undefined;
var probes = dtrace && {};

/**
 * Resolve a level number, name (upper or lowercase) to a level number value.
 *
 * @param nameOrNum {String|Number} A level name (case-insensitive) or positive
 *      integer level.
 * @api public
 */
function resolveLevel(nameOrNum) {
    var level;
    var type = typeof (nameOrNum);
    if (type === 'string') {
        level = levelFromName[nameOrNum.toLowerCase()];
        if (!level) {
            throw new Error(format('unknown level name: "%s"', nameOrNum));
        }
    } else if (type !== 'number') {
        throw new TypeError(format('cannot resolve level: invalid arg (%s):',
            type, nameOrNum));
    } else if (nameOrNum < 0 || Math.floor(nameOrNum) !== nameOrNum) {
        throw new TypeError(format('level is not a positive integer: %s',
            nameOrNum));
    } else {
        level = nameOrNum;
    }
    return level;
}


function isWritable(obj) {
    if (obj instanceof stream.Writable) {
        return true;
    }
    return typeof (obj.write) === 'function';
}


//---- Logger class

/**
 * Create a Logger instance.
 *
 * @param options {Object} See documentation for full details. At minimum
 *    this must include a 'name' string key. Configuration keys:
 *      - `streams`: specify the logger output streams. This is an array of
 *        objects with these fields:
 *          - `type`: The stream type. See README.md for full details.
 *            Often this is implied by the other fields. Examples are
 *            'file', 'stream' and "raw".
 *          - `level`: Defaults to 'info'.
 *          - `path` or `stream`: The specify the file path or writeable
 *            stream to which log records are written. E.g.
 *            `stream: process.stdout`.
 *          - `closeOnExit` (boolean): Optional. Default is true for a
 *            'file' stream when `path` is given, false otherwise.
 *        See README.md for full details.
 *      - `level`: set the level for a single output stream (cannot be used
 *        with `streams`)
 *      - `stream`: the output stream for a logger with just one, e.g.
 *        `process.stdout` (cannot be used with `streams`)
 *      - `serializers`: object mapping log record field names to
 *        serializing functions. See README.md for details.
 *      - `src`: Boolean (default false). Set true to enable 'src' automatic
 *        field with log call source info.
 *    All other keys are log record fields.
 *
 * An alternative *internal* call signature is used for creating a child:
 *    new Logger(<parent logger>, <child options>[, <child opts are simple>]);
 *
 * @param _childSimple (Boolean) An assertion that the given `_childOptions`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation.
 */
function Logger(options, _childOptions, _childSimple) {
    xxx('Logger start:', options)
    if (!(this instanceof Logger)) {
        return new Logger(options, _childOptions);
    }

    // Input arg validation.
    var parent;
    if (_childOptions !== undefined) {
        parent = options;
        options = _childOptions;
        if (!(parent instanceof Logger)) {
            throw new TypeError(
                'invalid Logger creation: do not pass a second arg');
        }
    }
    if (!options) {
        throw new TypeError('options (object) is required');
    }
    if (!parent) {
        if (!options.name) {
            throw new TypeError('options.name (string) is required');
        }
    } else {
        if (options.name) {
            throw new TypeError(
                'invalid options.name: child cannot set logger name');
        }
    }
    if (options.stream && options.streams) {
        throw new TypeError('cannot mix "streams" and "stream" options');
    }
    if (options.streams && !Array.isArray(options.streams)) {
        throw new TypeError('invalid options.streams: must be an array')
    }
    if (options.serializers && (typeof (options.serializers) !== 'object' ||
            Array.isArray(options.serializers))) {
        throw new TypeError('invalid options.serializers: must be an object')
    }

    EventEmitter.call(this);

    // Fast path for simple child creation.
    if (parent && _childSimple) {
        // `_isSimpleChild` is a signal to stream close handling that this child
        // owns none of its streams.
        this._isSimpleChild = true;

        this._level = parent._level;
        this.streams = parent.streams;
        this.serializers = parent.serializers;
        this.src = parent.src;
        var fields = this.fields = {};
        var parentFieldNames = Object.keys(parent.fields);
        for (var i = 0; i < parentFieldNames.length; i++) {
            var name = parentFieldNames[i];
            fields[name] = parent.fields[name];
        }
        var names = Object.keys(options);
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            fields[name] = options[name];
        }
        return;
    }

    // Start values.
    var self = this;
    if (parent) {
        this._level = parent._level;
        this.streams = [];
        for (var i = 0; i < parent.streams.length; i++) {
            var s = objCopy(parent.streams[i]);
            s.closeOnExit = false; // Don't own parent stream.
            this.streams.push(s);
        }
        this.serializers = objCopy(parent.serializers);
        this.src = parent.src;
        this.fields = objCopy(parent.fields);
        if (options.level) {
            this.level(options.level);
        }
    } else {
        this._level = Number.POSITIVE_INFINITY;
        this.streams = [];
        this.serializers = null;
        this.src = false;
        this.fields = {};
    }

    if (!dtp && dtrace) {
        dtp = dtrace.createDTraceProvider('bunyan');

        for (var level in levelFromName) {
            var probe;

            probes[levelFromName[level]] = probe =
                dtp.addProbe('log-' + level, 'char *');

            // Explicitly add a reference to dtp to prevent it from being GC'd
            probe.dtp = dtp;
        }

        dtp.enable();
    }

    // Handle *config* options (i.e. options that are not just plain data
    // for log records).
    if (options.stream) {
        self.addStream({
            type: 'stream',
            stream: options.stream,
            closeOnExit: false,
            level: options.level
        });
    } else if (options.streams) {
        options.streams.forEach(function (s) {
            self.addStream(s, options.level);
        });
    } else if (parent && options.level) {
        this.level(options.level);
    } else if (!parent) {
        if (runtimeEnv === 'browser') {
            /*
             * In the browser we'll be emitting to console.log by default.
             * Any console.log worth its salt these days can nicely render
             * and introspect objects (e.g. the Firefox and Chrome console)
             * so let's emit the raw log record. Are there browsers for which
             * that breaks things?
             */
            self.addStream({
                type: 'raw',
                stream: new ConsoleRawStream(),
                closeOnExit: false,
                level: options.level
            });
        } else {
            self.addStream({
                type: 'stream',
                stream: process.stdout,
                closeOnExit: false,
                level: options.level
            });
        }
    }
    if (options.serializers) {
        self.addSerializers(options.serializers);
    }
    if (options.src) {
        this.src = true;
    }
    xxx('Logger: ', self)

    // Fields.
    // These are the default fields for log records (minus the attributes
    // removed in this constructor). To allow storing raw log records
    // (unrendered), `this.fields` must never be mutated. Create a copy for
    // any changes.
    var fields = objCopy(options);
    delete fields.stream;
    delete fields.level;
    delete fields.streams;
    delete fields.serializers;
    delete fields.src;
    if (this.serializers) {
        this._applySerializers(fields);
    }
    if (!fields.hostname && !self.fields.hostname) {
        fields.hostname = os.hostname();
    }
    if (!fields.pid) {
        fields.pid = process.pid;
    }
    Object.keys(fields).forEach(function (k) {
        self.fields[k] = fields[k];
    });
}

util.inherits(Logger, EventEmitter);


/**
 * Add a stream
 *
 * @param stream {Object}. Object with these fields:
 *    - `type`: The stream type. See README.md for full details.
 *      Often this is implied by the other fields. Examples are
 *      'file', 'stream' and "raw".
 *    - `path` or `stream`: The specify the file path or writeable
 *      stream to which log records are written. E.g.
 *      `stream: process.stdout`.
 *    - `level`: Optional. Falls back to `defaultLevel`.
 *    - `closeOnExit` (boolean): Optional. Default is true for a
 *      'file' stream when `path` is given, false otherwise.
 *    See README.md for full details.
 * @param defaultLevel {Number|String} Optional. A level to use if
 *      `stream.level` is not set. If neither is given, this defaults to INFO.
 */
Logger.prototype.addStream = function addStream(s, defaultLevel) {
    var self = this;
    if (defaultLevel === null || defaultLevel === undefined) {
        defaultLevel = INFO;
    }

    s = objCopy(s);

    // Implicit 'type' from other args.
    if (!s.type) {
        if (s.stream) {
            s.type = 'stream';
        } else if (s.path) {
            s.type = 'file'
        }
    }
    s.raw = (s.type === 'raw');  // PERF: Allow for faster check in `_emit`.

    if (s.level !== undefined) {
        s.level = resolveLevel(s.level);
    } else {
        s.level = resolveLevel(defaultLevel);
    }
    if (s.level < self._level) {
        self._level = s.level;
    }

    switch (s.type) {
    case 'stream':
        assert.ok(isWritable(s.stream),
                  '"stream" stream is not writable: ' + util.inspect(s.stream));

        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    case 'file':
        if (s.reemitErrorEvents === undefined) {
            s.reemitErrorEvents = true;
        }
        if (!s.stream) {
            s.stream = fs.createWriteStream(s.path,
                                            {flags: 'a', encoding: 'utf8'});
            if (!s.closeOnExit) {
                s.closeOnExit = true;
            }
        } else {
            if (!s.closeOnExit) {
                s.closeOnExit = false;
            }
        }
        break;
    case 'rotating-file':
        assert.ok(!s.stream,
                  '"rotating-file" stream should not give a "stream"');
        assert.ok(s.path);
        assert.ok(mv, '"rotating-file" stream type is not supported: '
                      + 'missing "mv" module');
        s.stream = new RotatingFileStream(s);
        if (!s.closeOnExit) {
            s.closeOnExit = true;
        }
        break;
    case 'raw':
        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    default:
        throw new TypeError('unknown stream type "' + s.type + '"');
    }

    if (s.reemitErrorEvents && typeof (s.stream.on) === 'function') {
        // TODO: When we have `<logger>.close()`, it should remove event
        //      listeners to not leak Logger instances.
        s.stream.on('error', function onStreamError(err) {
            self.emit('error', err, s);
        });
    }

    self.streams.push(s);
    delete self.haveNonRawStreams;  // reset
}


/**
 * Add serializers
 *
 * @param serializers {Object} Optional. Object mapping log record field names
 *    to serializing functions. See README.md for details.
 */
Logger.prototype.addSerializers = function addSerializers(serializers) {
    var self = this;

    if (!self.serializers) {
        self.serializers = {};
    }
    Object.keys(serializers).forEach(function (field) {
        var serializer = serializers[field];
        if (typeof (serializer) !== 'function') {
            throw new TypeError(format(
                'invalid serializer for "%s" field: must be a function',
                field));
        } else {
            self.serializers[field] = serializer;
        }
    });
}



/**
 * Create a child logger, typically to add a few log record fields.
 *
 * This can be useful when passing a logger to a sub-component, e.g. a
 * 'wuzzle' component of your service:
 *
 *    var wuzzleLog = log.child({component: 'wuzzle'})
 *    var wuzzle = new Wuzzle({..., log: wuzzleLog})
 *
 * Then log records from the wuzzle code will have the same structure as
 * the app log, *plus the component='wuzzle' field*.
 *
 * @param options {Object} Optional. Set of options to apply to the child.
 *    All of the same options for a new Logger apply here. Notes:
 *      - The parent's streams are inherited and cannot be removed in this
 *        call. Any given `streams` are *added* to the set inherited from
 *        the parent.
 *      - The parent's serializers are inherited, though can effectively be
 *        overwritten by using duplicate keys.
 *      - Can use `level` to set the level of the streams inherited from
 *        the parent. The level for the parent is NOT affected.
 * @param simple {Boolean} Optional. Set to true to assert that `options`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation. See 'tools/timechild.js' for numbers.
 */
Logger.prototype.child = function (options, simple) {
    return new (this.constructor)(this, options || {}, simple);
}


/**
 * A convenience method to reopen 'file' streams on a logger. This can be
 * useful with external log rotation utilities that move and re-open log files
 * (e.g. logrotate on Linux, logadm on SmartOS/Illumos). Those utilities
 * typically have rotation options to copy-and-truncate the log file, but
 * you may not want to use that. An alternative is to do this in your
 * application:
 *
 *      var log = bunyan.createLogger(...);
 *      ...
 *      process.on('SIGUSR2', function () {
 *          log.reopenFileStreams();
 *      });
 *      ...
 *
 * See <https://github.com/trentm/node-bunyan/issues/104>.
 */
Logger.prototype.reopenFileStreams = function () {
    var self = this;
    self.streams.forEach(function (s) {
        if (s.type === 'file') {
            if (s.stream) {
                // Not sure if typically would want this, or more immediate
                // `s.stream.destroy()`.
                s.stream.end();
                s.stream.destroySoon();
                delete s.stream;
            }
            s.stream = fs.createWriteStream(s.path,
                {flags: 'a', encoding: 'utf8'});
            s.stream.on('error', function (err) {
                self.emit('error', err, s);
            });
        }
    });
};


/* BEGIN JSSTYLED */
/**
 * Close this logger.
 *
 * This closes streams (that it owns, as per 'endOnClose' attributes on
 * streams), etc. Typically you **don't** need to bother calling this.
Logger.prototype.close = function () {
    if (this._closed) {
        return;
    }
    if (!this._isSimpleChild) {
        self.streams.forEach(function (s) {
            if (s.endOnClose) {
                xxx('closing stream s:', s);
                s.stream.end();
                s.endOnClose = false;
            }
        });
    }
    this._closed = true;
}
 */
/* END JSSTYLED */


/**
 * Get/set the level of all streams on this logger.
 *
 * Get Usage:
 *    // Returns the current log level (lowest level of all its streams).
 *    log.level() -> INFO
 *
 * Set Usage:
 *    log.level(INFO)       // set all streams to level INFO
 *    log.level('info')     // can use 'info' et al aliases
 */
Logger.prototype.level = function level(value) {
    if (value === undefined) {
        return this._level;
    }
    var newLevel = resolveLevel(value);
    var len = this.streams.length;
    for (var i = 0; i < len; i++) {
        this.streams[i].level = newLevel;
    }
    this._level = newLevel;
}


/**
 * Get/set the level of a particular stream on this logger.
 *
 * Get Usage:
 *    // Returns an array of the levels of each stream.
 *    log.levels() -> [TRACE, INFO]
 *
 *    // Returns a level of the identified stream.
 *    log.levels(0) -> TRACE      // level of stream at index 0
 *    log.levels('foo')           // level of stream with name 'foo'
 *
 * Set Usage:
 *    log.levels(0, INFO)         // set level of stream 0 to INFO
 *    log.levels(0, 'info')       // can use 'info' et al aliases
 *    log.levels('foo', WARN)     // set stream named 'foo' to WARN
 *
 * Stream names: When streams are defined, they can optionally be given
 * a name. For example,
 *       log = new Logger({
 *         streams: [
 *           {
 *             name: 'foo',
 *             path: '/var/log/my-service/foo.log'
 *             level: 'trace'
 *           },
 *         ...
 *
 * @param name {String|Number} The stream index or name.
 * @param value {Number|String} The level value (INFO) or alias ('info').
 *    If not given, this is a 'get' operation.
 * @throws {Error} If there is no stream with the given name.
 */
Logger.prototype.levels = function levels(name, value) {
    if (name === undefined) {
        assert.equal(value, undefined);
        return this.streams.map(
            function (s) { return s.level });
    }
    var stream;
    if (typeof (name) === 'number') {
        stream = this.streams[name];
        if (stream === undefined) {
            throw new Error('invalid stream index: ' + name);
        }
    } else {
        var len = this.streams.length;
        for (var i = 0; i < len; i++) {
            var s = this.streams[i];
            if (s.name === name) {
                stream = s;
                break;
            }
        }
        if (!stream) {
            throw new Error(format('no stream with name "%s"', name));
        }
    }
    if (value === undefined) {
        return stream.level;
    } else {
        var newLevel = resolveLevel(value);
        stream.level = newLevel;
        if (newLevel < this._level) {
            this._level = newLevel;
        }
    }
}


/**
 * Apply registered serializers to the appropriate keys in the given fields.
 *
 * Pre-condition: This is only called if there is at least one serializer.
 *
 * @param fields (Object) The log record fields.
 * @param excludeFields (Object) Optional mapping of keys to `true` for
 *    keys to NOT apply a serializer.
 */
Logger.prototype._applySerializers = function (fields, excludeFields) {
    var self = this;

    xxx('_applySerializers: excludeFields', excludeFields);

    // Check each serializer against these (presuming number of serializers
    // is typically less than number of fields).
    Object.keys(this.serializers).forEach(function (name) {
        if (fields[name] === undefined ||
            (excludeFields && excludeFields[name]))
        {
            return;
        }
        xxx('_applySerializers; apply to "%s" key', name)
        try {
            fields[name] = self.serializers[name](fields[name]);
        } catch (err) {
            _warn(format('bunyan: ERROR: Exception thrown from the "%s" '
                + 'Bunyan serializer. This should never happen. This is a bug '
                + 'in that serializer function.\n%s',
                name, err.stack || err));
            fields[name] = format('(Error in Bunyan log "%s" serializer '
                + 'broke field. See stderr for details.)', name);
        }
    });
}


/**
 * Emit a log record.
 *
 * @param rec {log record}
 * @param noemit {Boolean} Optional. Set to true to skip emission
 *      and just return the JSON string.
 */
Logger.prototype._emit = function (rec, noemit) {
    var i;

    // Lazily determine if this Logger has non-'raw' streams. If there are
    // any, then we need to stringify the log record.
    if (this.haveNonRawStreams === undefined) {
        this.haveNonRawStreams = false;
        for (i = 0; i < this.streams.length; i++) {
            if (!this.streams[i].raw) {
                this.haveNonRawStreams = true;
                break;
            }
        }
    }

    // Stringify the object (creates a warning str on error).
    var str;
    if (noemit || this.haveNonRawStreams) {
        str = fastAndSafeJsonStringify(rec) + '\n';
    }

    if (noemit)
        return str;

    var level = rec.level;
    for (i = 0; i < this.streams.length; i++) {
        var s = this.streams[i];
        if (s.level <= level) {
            xxx('writing log rec "%s" to "%s" stream (%d <= %d): %j',
                rec.msg, s.type, s.level, level, rec);
            s.stream.write(s.raw ? rec : str);
        }
    };

    return str;
}


/**
 * Build a record object suitable for emitting from the arguments
 * provided to the a log emitter.
 */
function mkRecord(log, minLevel, args) {
    var excludeFields, fields, msgArgs;
    if (args[0] instanceof Error) {
        // `log.<level>(err, ...)`
        fields = {
            // Use this Logger's err serializer, if defined.
            err: (log.serializers && log.serializers.err
                ? log.serializers.err(args[0])
                : Logger.stdSerializers.err(args[0]))
        };
        excludeFields = {err: true};
        if (args.length === 1) {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    } else if (typeof (args[0]) !== 'object' || Array.isArray(args[0])) {
        // `log.<level>(msg, ...)`
        fields = null;
        msgArgs = args.slice();
    } else if (Buffer.isBuffer(args[0])) {  // `log.<level>(buf, ...)`
        // Almost certainly an error, show `inspect(buf)`. See bunyan
        // issue #35.
        fields = null;
        msgArgs = args.slice();
        msgArgs[0] = util.inspect(msgArgs[0]);
    } else {  // `log.<level>(fields, msg, ...)`
        fields = args[0];
        if (fields && args.length === 1 && fields.err &&
            fields.err instanceof Error)
        {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    }

    // Build up the record object.
    var rec = objCopy(log.fields);
    var level = rec.level = minLevel;
    var recFields = (fields ? objCopy(fields) : null);
    if (recFields) {
        if (log.serializers) {
            log._applySerializers(recFields, excludeFields);
        }
        Object.keys(recFields).forEach(function (k) {
            rec[k] = recFields[k];
        });
    }
    rec.msg = format.apply(log, msgArgs);
    if (!rec.time) {
        rec.time = (new Date());
    }
    // Get call source info
    if (log.src && !rec.src) {
        rec.src = getCaller3Info()
    }
    rec.v = LOG_VERSION;

    return rec;
};


/**
 * Build an array that dtrace-provider can use to fire a USDT probe. If we've
 * already built the appropriate string, we use it. Otherwise, build the
 * record object and stringify it.
 */
function mkProbeArgs(str, log, minLevel, msgArgs) {
    return [ str || log._emit(mkRecord(log, minLevel, msgArgs), true) ];
}


/**
 * Build a log emitter function for level minLevel. I.e. this is the
 * creator of `log.info`, `log.error`, etc.
 */
function mkLogEmitter(minLevel) {
    return function () {
        var log = this;
        var str = null;
        var rec = null;

        if (!this._emit) {
            /*
             * Show this invalid Bunyan usage warning *once*.
             *
             * See <https://github.com/trentm/node-bunyan/issues/100> for
             * an example of how this can happen.
             */
            var dedupKey = 'unbound';
            if (!_haveWarned[dedupKey]) {
                var caller = getCaller3Info();
                _warn(format('bunyan usage error: %s:%s: attempt to log '
                    + 'with an unbound log method: `this` is: %s',
                    caller.file, caller.line, util.inspect(this)),
                    dedupKey);
            }
            return;
        } else if (arguments.length === 0) {   // `log.<level>()`
            return (this._level <= minLevel);
        }

        var msgArgs = new Array(arguments.length);
        for (var i = 0; i < msgArgs.length; ++i) {
            msgArgs[i] = arguments[i];
        }

        if (this._level <= minLevel) {
            rec = mkRecord(log, minLevel, msgArgs);
            str = this._emit(rec);
        }

        if (probes) {
            probes[minLevel].fire(mkProbeArgs, str, log, minLevel, msgArgs);
        }
    }
}


/**
 * The functions below log a record at a specific level.
 *
 * Usages:
 *    log.<level>()  -> boolean is-trace-enabled
 *    log.<level>(<Error> err, [<string> msg, ...])
 *    log.<level>(<string> msg, ...)
 *    log.<level>(<object> fields, <string> msg, ...)
 *
 * where <level> is the lowercase version of the log level. E.g.:
 *
 *    log.info()
 *
 * @params fields {Object} Optional set of additional fields to log.
 * @params msg {String} Log message. This can be followed by additional
 *    arguments that are handled like
 *    [util.format](http://nodejs.org/docs/latest/api/all.html#util.format).
 */
Logger.prototype.trace = mkLogEmitter(TRACE);
Logger.prototype.debug = mkLogEmitter(DEBUG);
Logger.prototype.info = mkLogEmitter(INFO);
Logger.prototype.warn = mkLogEmitter(WARN);
Logger.prototype.error = mkLogEmitter(ERROR);
Logger.prototype.fatal = mkLogEmitter(FATAL);



//---- Standard serializers
// A serializer is a function that serializes a JavaScript object to a
// JSON representation for logging. There is a standard set of presumed
// interesting objects in node.js-land.

Logger.stdSerializers = {};

// Serialize an HTTP request.
Logger.stdSerializers.req = function (req) {
    if (!req || !req.connection)
        return req;
    return {
        method: req.method,
        url: req.url,
        headers: req.headers,
        remoteAddress: req.connection.remoteAddress,
        remotePort: req.connection.remotePort
    };
    // Trailers: Skipping for speed. If you need trailers in your app, then
    // make a custom serializer.
    //if (Object.keys(trailers).length > 0) {
    //  obj.trailers = req.trailers;
    //}
};

// Serialize an HTTP response.
Logger.stdSerializers.res = function (res) {
    if (!res || !res.statusCode)
        return res;
    return {
        statusCode: res.statusCode,
        header: res._header
    }
};


/*
 * This function dumps long stack traces for exceptions having a cause()
 * method. The error classes from
 * [verror](https://github.com/davepacheco/node-verror) and
 * [restify v2.0](https://github.com/mcavage/node-restify) are examples.
 *
 * Based on `dumpException` in
 * https://github.com/davepacheco/node-extsprintf/blob/master/lib/extsprintf.js
 */
function getFullErrorStack(ex)
{
    var ret = ex.stack || ex.toString();
    if (ex.cause && typeof (ex.cause) === 'function') {
        var cex = ex.cause();
        if (cex) {
            ret += '\nCaused by: ' + getFullErrorStack(cex);
        }
    }
    return (ret);
}

// Serialize an Error object
// (Core error properties are enumerable in node 0.4, not in 0.6).
var errSerializer = Logger.stdSerializers.err = function (err) {
    if (!err || !err.stack)
        return err;
    var obj = {
        message: err.message,
        name: err.name,
        stack: getFullErrorStack(err),
        code: err.code,
        signal: err.signal
    }
    return obj;
};


// A JSON stringifier that handles cycles safely - tracks seen values in a Set.
function safeCyclesSet() {
    var seen = new Set();
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.has(val)) {
            return '[Circular]';
        }
        seen.add(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely - tracks seen vals in an Array.
 *
 * Note: This approach has performance problems when dealing with large objects,
 * see trentm/node-bunyan#445, but since this is the only option for node 0.10
 * and earlier (as Set was introduced in Node 0.12), it's used as a fallback
 * when Set is not available.
 */
function safeCyclesArray() {
    var seen = [];
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.indexOf(val) !== -1) {
            return '[Circular]';
        }
        seen.push(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely.
 *
 * Usage: JSON.stringify(obj, safeCycles())
 *
 * Choose the best safe cycle function from what is available - see
 * trentm/node-bunyan#445.
 */
var safeCycles = typeof (Set) !== 'undefined' ? safeCyclesSet : safeCyclesArray;

/**
 * A fast JSON.stringify that handles cycles and getter exceptions (when
 * safeJsonStringify is installed).
 *
 * This function attempts to use the regular JSON.stringify for speed, but on
 * error (e.g. JSON cycle detection exception) it falls back to safe stringify
 * handlers that can deal with cycles and/or getter exceptions.
 */
function fastAndSafeJsonStringify(rec) {
    try {
        return JSON.stringify(rec);
    } catch (ex) {
        try {
            return JSON.stringify(rec, safeCycles());
        } catch (e) {
            if (safeJsonStringify) {
                return safeJsonStringify(rec);
            } else {
                var dedupKey = e.stack.split(/\n/g, 3).join('\n');
                _warn('bunyan: ERROR: Exception in '
                    + '`JSON.stringify(rec)`. You can install the '
                    + '"safe-json-stringify" module to have Bunyan fallback '
                    + 'to safer stringification. Record:\n'
                    + _indent(format('%s\n%s', util.inspect(rec), e.stack)),
                    dedupKey);
                return format('(Exception in JSON.stringify(rec): %j. '
                    + 'See stderr for details.)', e.message);
            }
        }
    }
}


var RotatingFileStream = null;
if (mv) {

RotatingFileStream = function RotatingFileStream(options) {
    this.path = options.path;

    this.count = (options.count == null ? 10 : options.count);
    assert.equal(typeof (this.count), 'number',
        format('rotating-file stream "count" is not a number: %j (%s) in %j',
            this.count, typeof (this.count), this));
    assert.ok(this.count >= 0,
        format('rotating-file stream "count" is not >= 0: %j in %j',
            this.count, this));

    // Parse `options.period`.
    if (options.period) {
        // <number><scope> where scope is:
        //    h   hours (at the start of the hour)
        //    d   days (at the start of the day, i.e. just after midnight)
        //    w   weeks (at the start of Sunday)
        //    m   months (on the first of the month)
        //    y   years (at the start of Jan 1st)
        // with special values 'hourly' (1h), 'daily' (1d), "weekly" (1w),
        // 'monthly' (1m) and 'yearly' (1y)
        var period = {
            'hourly': '1h',
            'daily': '1d',
            'weekly': '1w',
            'monthly': '1m',
            'yearly': '1y'
        }[options.period] || options.period;
        var m = /^([1-9][0-9]*)([hdwmy]|ms)$/.exec(period);
        if (!m) {
            throw new Error(format('invalid period: "%s"', options.period));
        }
        this.periodNum = Number(m[1]);
        this.periodScope = m[2];
    } else {
        this.periodNum = 1;
        this.periodScope = 'd';
    }

    var lastModified = null;
    try {
        var fileInfo = fs.statSync(this.path);
        lastModified = fileInfo.mtime.getTime();
    }
    catch (err) {
        // file doesn't exist
    }
    var rotateAfterOpen = false;
    if (lastModified) {
        var lastRotTime = this._calcRotTime(0);
        if (lastModified < lastRotTime) {
            rotateAfterOpen = true;
        }
    }

    // TODO: template support for backup files
    // template: <path to which to rotate>
    //      default is %P.%n
    //      '/var/log/archive/foo.log'  -> foo.log.%n
    //      '/var/log/archive/foo.log.%n'
    //      codes:
    //          XXX support strftime codes (per node version of those)
    //              or whatever module. Pick non-colliding for extra
    //              codes
    //          %P      `path` base value
    //          %n      integer number of rotated log (1,2,3,...)
    //          %d      datetime in YYYY-MM-DD_HH-MM-SS
    //                      XXX what should default date format be?
    //                          prior art? Want to avoid ':' in
    //                          filenames (illegal on Windows for one).

    this.stream = fs.createWriteStream(this.path,
        {flags: 'a', encoding: 'utf8'});

    this.rotQueue = [];
    this.rotating = false;
    if (rotateAfterOpen) {
        this._debug('rotateAfterOpen -> call rotate()');
        this.rotate();
    } else {
        this._setupNextRot();
    }
}

util.inherits(RotatingFileStream, EventEmitter);

RotatingFileStream.prototype._debug = function () {
    // Set this to `true` to add debug logging.
    if (false) {
        if (arguments.length === 0) {
            return true;
        }
        var args = Array.prototype.slice.call(arguments);
        args[0] = '[' + (new Date().toISOString()) + ', '
            + this.path + '] ' + args[0];
        console.log.apply(this, args);
    } else {
        return false;
    }
};

RotatingFileStream.prototype._setupNextRot = function () {
    this.rotAt = this._calcRotTime(1);
    this._setRotationTimer();
}

RotatingFileStream.prototype._setRotationTimer = function () {
    var self = this;
    var delay = this.rotAt - Date.now();
    // Cap timeout to Node's max setTimeout, see
    // <https://github.com/joyent/node/issues/8656>.
    var TIMEOUT_MAX = 2147483647; // 2^31-1
    if (delay > TIMEOUT_MAX) {
        delay = TIMEOUT_MAX;
    }
    this.timeout = setTimeout(
        function () {
            self._debug('_setRotationTimer timeout -> call rotate()');
            self.rotate();
        },
        delay);
    if (typeof (this.timeout.unref) === 'function') {
        this.timeout.unref();
    }
}

RotatingFileStream.prototype._calcRotTime =
function _calcRotTime(periodOffset) {
    this._debug('_calcRotTime: %s%s', this.periodNum, this.periodScope);
    var d = new Date();

    this._debug('  now local: %s', d);
    this._debug('    now utc: %s', d.toISOString());
    var rotAt;
    switch (this.periodScope) {
    case 'ms':
        // Hidden millisecond period for debugging.
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * periodOffset;
        } else {
            rotAt = Date.now() + this.periodNum * periodOffset;
        }
        break;
    case 'h':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 60 * 60 * 1000 * periodOffset;
        } else {
            // First time: top of the next hour.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate(), d.getUTCHours() + periodOffset);
        }
        break;
    case 'd':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: start of tomorrow (i.e. at the coming midnight) UTC.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + periodOffset);
        }
        break;
    case 'w':
        // Currently, always on Sunday morning at 00:00:00 (UTC).
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 7 * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: this coming Sunday.
            var dayOffset = (7 - d.getUTCDay());
            if (periodOffset < 1) {
                dayOffset = -d.getUTCDay();
            }
            if (periodOffset > 1 || periodOffset < -1) {
                dayOffset += 7 * periodOffset;
            }
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + dayOffset);
        }
        break;
    case 'm':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + this.periodNum * periodOffset, 1);
        } else {
            // First time: the start of the next month.
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + periodOffset, 1);
        }
        break;
    case 'y':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear() + this.periodNum * periodOffset,
                0, 1);
        } else {
            // First time: the start of the next year.
            rotAt = Date.UTC(d.getUTCFullYear() + periodOffset, 0, 1);
        }
        break;
    default:
        assert.fail(format('invalid period scope: "%s"', this.periodScope));
    }

    if (this._debug()) {
        this._debug('  **rotAt**: %s (utc: %s)', rotAt,
            new Date(rotAt).toUTCString());
        var now = Date.now();
        this._debug('        now: %s (%sms == %smin == %sh to go)',
            now,
            rotAt - now,
            (rotAt-now)/1000/60,
            (rotAt-now)/1000/60/60);
    }
    return rotAt;
};

RotatingFileStream.prototype.rotate = function rotate() {
    // XXX What about shutdown?
    var self = this;

    // If rotation period is > ~25 days, we have to break into multiple
    // setTimeout's. See <https://github.com/joyent/node/issues/8656>.
    if (self.rotAt && self.rotAt > Date.now()) {
        return self._setRotationTimer();
    }

    this._debug('rotate');
    if (self.rotating) {
        throw new TypeError('cannot start a rotation when already rotating');
    }
    self.rotating = true;

    self.stream.end();  // XXX can do moves sync after this? test at high rate

    function del() {
        var toDel = self.path + '.' + String(n - 1);
        if (n === 0) {
            toDel = self.path;
        }
        n -= 1;
        self._debug('  rm %s', toDel);
        fs.unlink(toDel, function (delErr) {
            //XXX handle err other than not exists
            moves();
        });
    }

    function moves() {
        if (self.count === 0 || n < 0) {
            return finish();
        }
        var before = self.path;
        var after = self.path + '.' + String(n);
        if (n > 0) {
            before += '.' + String(n - 1);
        }
        n -= 1;
        fs.exists(before, function (exists) {
            if (!exists) {
                moves();
            } else {
                self._debug('  mv %s %s', before, after);
                mv(before, after, function (mvErr) {
                    if (mvErr) {
                        self.emit('error', mvErr);
                        finish(); // XXX finish here?
                    } else {
                        moves();
                    }
                });
            }
        })
    }

    function finish() {
        self._debug('  open %s', self.path);
        self.stream = fs.createWriteStream(self.path,
            {flags: 'a', encoding: 'utf8'});
        var q = self.rotQueue, len = q.length;
        for (var i = 0; i < len; i++) {
            self.stream.write(q[i]);
        }
        self.rotQueue = [];
        self.rotating = false;
        self.emit('drain');
        self._setupNextRot();
    }

    var n = this.count;
    del();
};

RotatingFileStream.prototype.write = function write(s) {
    if (this.rotating) {
        this.rotQueue.push(s);
        return false;
    } else {
        return this.stream.write(s);
    }
};

RotatingFileStream.prototype.end = function end(s) {
    this.stream.end();
};

RotatingFileStream.prototype.destroy = function destroy(s) {
    this.stream.destroy();
};

RotatingFileStream.prototype.destroySoon = function destroySoon(s) {
    this.stream.destroySoon();
};

} /* if (mv) */



/**
 * RingBuffer is a Writable Stream that just stores the last N records in
 * memory.
 *
 * @param options {Object}, with the following fields:
 *
 *    - limit: number of records to keep in memory
 */
function RingBuffer(options) {
    this.limit = options && options.limit ? options.limit : 100;
    this.writable = true;
    this.records = [];
    EventEmitter.call(this);
}

util.inherits(RingBuffer, EventEmitter);

RingBuffer.prototype.write = function (record) {
    if (!this.writable)
        throw (new Error('RingBuffer has been ended already'));

    this.records.push(record);

    if (this.records.length > this.limit)
        this.records.shift();

    return (true);
};

RingBuffer.prototype.end = function () {
    if (arguments.length > 0)
        this.write.apply(this, Array.prototype.slice.call(arguments));
    this.writable = false;
};

RingBuffer.prototype.destroy = function () {
    this.writable = false;
    this.emit('close');
};

RingBuffer.prototype.destroySoon = function () {
    this.destroy();
};


//---- Exports

module.exports = Logger;

module.exports.TRACE = TRACE;
module.exports.DEBUG = DEBUG;
module.exports.INFO = INFO;
module.exports.WARN = WARN;
module.exports.ERROR = ERROR;
module.exports.FATAL = FATAL;
module.exports.resolveLevel = resolveLevel;
module.exports.levelFromName = levelFromName;
module.exports.nameFromLevel = nameFromLevel;

module.exports.VERSION = VERSION;
module.exports.LOG_VERSION = LOG_VERSION;

module.exports.createLogger = function createLogger(options) {
    return new Logger(options);
};

module.exports.RingBuffer = RingBuffer;
module.exports.RotatingFileStream = RotatingFileStream;

// Useful for custom `type == 'raw'` streams that may do JSON stringification
// of log records themselves. Usage:
//    var str = JSON.stringify(rec, bunyan.safeCycles());
module.exports.safeCycles = safeCycles;
 at SyntaxError: Unexpected token (85:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"_bound":2}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":2,"_bound":6,"ExpansionArg_int":0} start 13.8104 took 4.5415s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":2,"_bound":6,"ExpansionArg_int":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":2,"_bound":6}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":2,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":2} start 13.7795 took 4.6392s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":2,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":2}
* Error: TypeError: Cannot read property 'logger' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":2,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":2}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":3,"ExpansionArg_int":0} start 13.6708 took 4.748s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":3,"ExpansionArg_int":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":3}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_type_4":0,"_bound":5,"ExpansionArg_int":0} start 13.7327 took 4.9691s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_type_4":0,"_bound":5,"ExpansionArg_int":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_type_4":0,"_bound":5}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":4,"ExpansionArg_int":0} start 13.7025 took 5.3707s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":4,"ExpansionArg_int":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":4}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":3,"ExpansionArg_int":0,"_bound":8,"ExpansionArg_string":"PureString"} start 18.3887 took 5.0343s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":3,"ExpansionArg_int":0,"_bound":8,"ExpansionArg_string":"PureString"}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":3,"ExpansionArg_int":0,"_bound":8}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":9} start 18.5398 took 5.0432s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":9}
* Error: TypeError: Cannot set property 'chronicler' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":9}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":1,"ExpansionArg_int":0,"_bound":7} start 18.41 took 5.2282s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":1,"ExpansionArg_int":0,"_bound":7}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":1,"ExpansionArg_int":0,"_bound":7}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":3,"_bound":3} start 18.4593 took 5.2807s
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":3,"ExpansionArg_int":0,"ExpansionArg_type_4":0,"_bound":7,"ExpansionArg_string":"PureString"} start 18.7832 took 5.1277s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":3,"ExpansionArg_int":0,"ExpansionArg_type_4":0,"_bound":7,"ExpansionArg_string":"PureString"}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":3,"ExpansionArg_int":0,"ExpansionArg_type_4":0,"_bound":7}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":3,"_bound":8,"ExpansionArg_string":"PureString"} start 18.6485 took 5.314s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":3,"_bound":8,"ExpansionArg_string":"PureString"}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":3,"_bound":8}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":3,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":5,"ExpansionArg_string":"PureString"} start 18.5662 took 5.4719s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":3,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":5,"ExpansionArg_string":"PureString"}
* Error: TypeError: Cannot set property 'chronicler' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":3,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":5}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":3,"ExpansionArg_type_4":0,"_bound":7,"ExpansionArg_string":"PureString"} start 18.6825 took 5.3558s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":3,"ExpansionArg_type_4":0,"_bound":7,"ExpansionArg_string":"PureString"}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":3,"ExpansionArg_type_4":0,"_bound":7}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":1,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":4} start 18.595 took 5.4434s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":1,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":4}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":1,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":4}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":3,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":6,"ExpansionArg_string":"PureString"} start 18.6183 took 5.6876s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":3,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":6,"ExpansionArg_string":"PureString"}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":3,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":6}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"ExpansionArg_int":0,"ExpansionArg_type_4":0,"_bound":6} start 18.8268 took 5.4814s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"ExpansionArg_int":0,"ExpansionArg_type_4":0,"_bound":6}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"ExpansionArg_int":0,"ExpansionArg_type_4":0,"_bound":6}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int":0,"ExpansionArg_type_4":3,"_bound":8,"ExpansionArg_string":"PureString"} start 18.8892 took 5.4191s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int":0,"ExpansionArg_type_4":3,"_bound":8,"ExpansionArg_string":"PureString"}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int":0,"ExpansionArg_type_4":3,"_bound":8}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":6,"ExpansionArg_string":"PureString"} start 19.1343 took 5.4251s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":6,"ExpansionArg_string":"PureString"}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":6}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"_bound":4,"ExpansionArg_int":0} start 17.218 took 9.1423s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"_bound":4,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (85:4) on program /**
 * Copyright (c) 2017 Trent Mick.
 * Copyright (c) 2017 Joyent Inc.
 *
 * The bunyan logging library for node.js.
 *
 * -*- mode: js -*-
 * vim: expandtab:ts=4:sw=4
 */

var VERSION = '1.8.12';

/*
 * Bunyan log format version. This becomes the 'v' field on all log records.
 * This will be incremented if there is any backward incompatible change to
 * the log record format. Details will be in 'CHANGES.md' (the change log).
 */
var LOG_VERSION = 0;


var xxx = function xxx(s) {     // internal dev/debug logging
    var args = ['XX' + 'X: '+s].concat(
        Array.prototype.slice.call(arguments, 1));
    console.error.apply(this, args);
};
var xxx = function xxx() {};  // comment out to turn on debug logging


/*
 * Runtime environment notes:
 *
 * Bunyan is intended to run in a number of runtime environments. Here are
 * some notes on differences for those envs and how the code copes.
 *
 * - node.js: The primary target environment.
 * - NW.js: http://nwjs.io/  An *app* environment that feels like both a
 *   node env -- it has node-like globals (`process`, `global`) and
 *   browser-like globals (`window`, `navigator`). My *understanding* is that
 *   bunyan can operate as if this is vanilla node.js.
 * - browser: Failing the above, we sniff using the `window` global
 *   <https://developer.mozilla.org/en-US/docs/Web/API/Window/window>.
 *      - browserify: http://browserify.org/  A browser-targetting bundler of
 *        node.js deps. The runtime is a browser env, so can't use fs access,
 *        etc. Browserify's build looks for `require(<single-string>)` imports
 *        to bundle. For some imports it won't be able to handle, we "hide"
 *        from browserify with `require('frobshizzle' + '')`.
 * - Other? Please open issues if things are broken.
 */
var runtimeEnv;
if (typeof (process) !== 'undefined' && process.versions) {
    if (process.versions.nw) {
        runtimeEnv = 'nw';
    } else if (process.versions.node) {
        runtimeEnv = 'node';
    }
}
if (!runtimeEnv && typeof (window) !== 'undefined' &&
    window.window === window) {
    runtimeEnv = 'browser';
}
if (!runtimeEnv) {
    throw new Error('unknown runtime environment');
}


var os, fs, dtrace;
if (runtimeEnv === 'browser') {
    os = {
        hostname: function () {
            return window.location.host;
        }
    };
    fs = {};
    dtrace = null;
} else {
    os = require('os');
    fs = require('fs');
    try {
        dtrace = require('dtrace-provider' + '');
    } catch (e) {
        dtrace = null;
    }
}
var util = require('util');
var assert = require('assert');
var EventEmitter = require('events').EventEmitter;
var stream = require('stream');

try {
    var safeJsonStringify = require('safe-json-stringify');
} catch (e) {
    safeJsonStringify = null;
}
if (process.env.BUNYAN_TEST_NO_SAFE_JSON_STRINGIFY) {
    safeJsonStringify = null;
}

// The 'mv' module is required for rotating-file stream support.
try {
    var mv = require('mv' + '');
} catch (e) {
    mv = null;
}

try {
    var sourceMapSupport = require('source-map-support' + '');
} catch (_) {
    sourceMapSupport = null;
}


//---- Internal support stuff

/**
 * A shallow copy of an object. Bunyan logging attempts to never cause
 * exceptions, so this function attempts to handle non-objects gracefully.
 */
function objCopy(obj) {
    if (obj == null) {  // null or undefined
        return obj;
    } else if (Array.isArray(obj)) {
        return obj.slice();
    } else if (typeof (obj) === 'object') {
        var copy = {};
        Object.keys(obj).forEach(function (k) {
            copy[k] = obj[k];
        });
        return copy;
    } else {
        return obj;
    }
}

var format = util.format;
if (!format) {
    // If node < 0.6, then use its `util.format`:
    // <https://github.com/joyent/node/blob/master/lib/util.js#L22>:
    var inspect = util.inspect;
    var formatRegExp = /%[sdj%]/g;
    format = function format(f) {
        if (typeof (f) !== 'string') {
            var objects = [];
            for (var i = 0; i < arguments.length; i++) {
                objects.push(inspect(arguments[i]));
            }
            return objects.join(' ');
        }

        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function (x) {
            if (i >= len)
                return x;
            switch (x) {
                case '%s': return String(args[i++]);
                case '%d': return Number(args[i++]);
                case '%j': return fastAndSafeJsonStringify(args[i++]);
                case '%%': return '%';
                default:
                    return x;
            }
        });
        for (var x = args[i]; i < len; x = args[++i]) {
            if (x === null || typeof (x) !== 'object') {
                str += ' ' + x;
            } else {
                str += ' ' + inspect(x);
            }
        }
        return str;
    };
}


/**
 * Gather some caller info 3 stack levels up.
 * See <http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi>.
 */
function getCaller3Info() {
    if (this === undefined) {
        // Cannot access caller info in 'strict' mode.
        return;
    }
    var obj = {};
    var saveLimit = Error.stackTraceLimit;
    var savePrepare = Error.prepareStackTrace;
    Error.stackTraceLimit = 3;

    Error.prepareStackTrace = function (_, stack) {
        var caller = stack[2];
        if (sourceMapSupport) {
            caller = sourceMapSupport.wrapCallSite(caller);
        }
        obj.file = caller.getFileName();
        obj.line = caller.getLineNumber();
        var func = caller.getFunctionName();
        if (func)
            obj.func = func;
    };
    Error.captureStackTrace(this, getCaller3Info);
    this.stack;

    Error.stackTraceLimit = saveLimit;
    Error.prepareStackTrace = savePrepare;
    return obj;
}


function _indent(s, indent) {
    if (!indent) indent = '    ';
    var lines = s.split(/\r?\n/g);
    return indent + lines.join('\n' + indent);
}


/**
 * Warn about an bunyan processing error.
 *
 * @param msg {String} Message with which to warn.
 * @param dedupKey {String} Optional. A short string key for this warning to
 *      have its warning only printed once.
 */
function _warn(msg, dedupKey) {
    assert.ok(msg);
    if (dedupKey) {
        if (_warned[dedupKey]) {
            return;
        }
        _warned[dedupKey] = true;
    }
    process.stderr.write(msg + '\n');
}
function _haveWarned(dedupKey) {
    return _warned[dedupKey];
}
var _warned = {};


function ConsoleRawStream() {}
ConsoleRawStream.prototype.write = function (rec) {
    if (rec.level < INFO) {
        console.log(rec);
    } else if (rec.level < WARN) {
        console.info(rec);
    } else if (rec.level < ERROR) {
        console.warn(rec);
    } else {
        console.error(rec);
    }
};


//---- Levels

var TRACE = 10;
var DEBUG = 20;
var INFO = 30;
var WARN = 40;
var ERROR = 50;
var FATAL = 60;

var levelFromName = {
    'trace': TRACE,
    'debug': DEBUG,
    'info': INFO,
    'warn': WARN,
    'error': ERROR,
    'fatal': FATAL
};
var nameFromLevel = {};
Object.keys(levelFromName).forEach(function (name) {
    nameFromLevel[levelFromName[name]] = name;
});

// Dtrace probes.
var dtp = undefined;
var probes = dtrace && {};

/**
 * Resolve a level number, name (upper or lowercase) to a level number value.
 *
 * @param nameOrNum {String|Number} A level name (case-insensitive) or positive
 *      integer level.
 * @api public
 */
function resolveLevel(nameOrNum) {
    var level;
    var type = typeof (nameOrNum);
    if (type === 'string') {
        level = levelFromName[nameOrNum.toLowerCase()];
        if (!level) {
            throw new Error(format('unknown level name: "%s"', nameOrNum));
        }
    } else if (type !== 'number') {
        throw new TypeError(format('cannot resolve level: invalid arg (%s):',
            type, nameOrNum));
    } else if (nameOrNum < 0 || Math.floor(nameOrNum) !== nameOrNum) {
        throw new TypeError(format('level is not a positive integer: %s',
            nameOrNum));
    } else {
        level = nameOrNum;
    }
    return level;
}


function isWritable(obj) {
    if (obj instanceof stream.Writable) {
        return true;
    }
    return typeof (obj.write) === 'function';
}


//---- Logger class

/**
 * Create a Logger instance.
 *
 * @param options {Object} See documentation for full details. At minimum
 *    this must include a 'name' string key. Configuration keys:
 *      - `streams`: specify the logger output streams. This is an array of
 *        objects with these fields:
 *          - `type`: The stream type. See README.md for full details.
 *            Often this is implied by the other fields. Examples are
 *            'file', 'stream' and "raw".
 *          - `level`: Defaults to 'info'.
 *          - `path` or `stream`: The specify the file path or writeable
 *            stream to which log records are written. E.g.
 *            `stream: process.stdout`.
 *          - `closeOnExit` (boolean): Optional. Default is true for a
 *            'file' stream when `path` is given, false otherwise.
 *        See README.md for full details.
 *      - `level`: set the level for a single output stream (cannot be used
 *        with `streams`)
 *      - `stream`: the output stream for a logger with just one, e.g.
 *        `process.stdout` (cannot be used with `streams`)
 *      - `serializers`: object mapping log record field names to
 *        serializing functions. See README.md for details.
 *      - `src`: Boolean (default false). Set true to enable 'src' automatic
 *        field with log call source info.
 *    All other keys are log record fields.
 *
 * An alternative *internal* call signature is used for creating a child:
 *    new Logger(<parent logger>, <child options>[, <child opts are simple>]);
 *
 * @param _childSimple (Boolean) An assertion that the given `_childOptions`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation.
 */
function Logger(options, _childOptions, _childSimple) {
    xxx('Logger start:', options)
    if (!(this instanceof Logger)) {
        return new Logger(options, _childOptions);
    }

    // Input arg validation.
    var parent;
    if (_childOptions !== undefined) {
        parent = options;
        options = _childOptions;
        if (!(parent instanceof Logger)) {
            throw new TypeError(
                'invalid Logger creation: do not pass a second arg');
        }
    }
    if (!options) {
        throw new TypeError('options (object) is required');
    }
    if (!parent) {
        if (!options.name) {
            throw new TypeError('options.name (string) is required');
        }
    } else {
        if (options.name) {
            throw new TypeError(
                'invalid options.name: child cannot set logger name');
        }
    }
    if (options.stream && options.streams) {
        throw new TypeError('cannot mix "streams" and "stream" options');
    }
    if (options.streams && !Array.isArray(options.streams)) {
        throw new TypeError('invalid options.streams: must be an array')
    }
    if (options.serializers && (typeof (options.serializers) !== 'object' ||
            Array.isArray(options.serializers))) {
        throw new TypeError('invalid options.serializers: must be an object')
    }

    EventEmitter.call(this);

    // Fast path for simple child creation.
    if (parent && _childSimple) {
        // `_isSimpleChild` is a signal to stream close handling that this child
        // owns none of its streams.
        this._isSimpleChild = true;

        this._level = parent._level;
        this.streams = parent.streams;
        this.serializers = parent.serializers;
        this.src = parent.src;
        var fields = this.fields = {};
        var parentFieldNames = Object.keys(parent.fields);
        for (var i = 0; i < parentFieldNames.length; i++) {
            var name = parentFieldNames[i];
            fields[name] = parent.fields[name];
        }
        var names = Object.keys(options);
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            fields[name] = options[name];
        }
        return;
    }

    // Start values.
    var self = this;
    if (parent) {
        this._level = parent._level;
        this.streams = [];
        for (var i = 0; i < parent.streams.length; i++) {
            var s = objCopy(parent.streams[i]);
            s.closeOnExit = false; // Don't own parent stream.
            this.streams.push(s);
        }
        this.serializers = objCopy(parent.serializers);
        this.src = parent.src;
        this.fields = objCopy(parent.fields);
        if (options.level) {
            this.level(options.level);
        }
    } else {
        this._level = Number.POSITIVE_INFINITY;
        this.streams = [];
        this.serializers = null;
        this.src = false;
        this.fields = {};
    }

    if (!dtp && dtrace) {
        dtp = dtrace.createDTraceProvider('bunyan');

        for (var level in levelFromName) {
            var probe;

            probes[levelFromName[level]] = probe =
                dtp.addProbe('log-' + level, 'char *');

            // Explicitly add a reference to dtp to prevent it from being GC'd
            probe.dtp = dtp;
        }

        dtp.enable();
    }

    // Handle *config* options (i.e. options that are not just plain data
    // for log records).
    if (options.stream) {
        self.addStream({
            type: 'stream',
            stream: options.stream,
            closeOnExit: false,
            level: options.level
        });
    } else if (options.streams) {
        options.streams.forEach(function (s) {
            self.addStream(s, options.level);
        });
    } else if (parent && options.level) {
        this.level(options.level);
    } else if (!parent) {
        if (runtimeEnv === 'browser') {
            /*
             * In the browser we'll be emitting to console.log by default.
             * Any console.log worth its salt these days can nicely render
             * and introspect objects (e.g. the Firefox and Chrome console)
             * so let's emit the raw log record. Are there browsers for which
             * that breaks things?
             */
            self.addStream({
                type: 'raw',
                stream: new ConsoleRawStream(),
                closeOnExit: false,
                level: options.level
            });
        } else {
            self.addStream({
                type: 'stream',
                stream: process.stdout,
                closeOnExit: false,
                level: options.level
            });
        }
    }
    if (options.serializers) {
        self.addSerializers(options.serializers);
    }
    if (options.src) {
        this.src = true;
    }
    xxx('Logger: ', self)

    // Fields.
    // These are the default fields for log records (minus the attributes
    // removed in this constructor). To allow storing raw log records
    // (unrendered), `this.fields` must never be mutated. Create a copy for
    // any changes.
    var fields = objCopy(options);
    delete fields.stream;
    delete fields.level;
    delete fields.streams;
    delete fields.serializers;
    delete fields.src;
    if (this.serializers) {
        this._applySerializers(fields);
    }
    if (!fields.hostname && !self.fields.hostname) {
        fields.hostname = os.hostname();
    }
    if (!fields.pid) {
        fields.pid = process.pid;
    }
    Object.keys(fields).forEach(function (k) {
        self.fields[k] = fields[k];
    });
}

util.inherits(Logger, EventEmitter);


/**
 * Add a stream
 *
 * @param stream {Object}. Object with these fields:
 *    - `type`: The stream type. See README.md for full details.
 *      Often this is implied by the other fields. Examples are
 *      'file', 'stream' and "raw".
 *    - `path` or `stream`: The specify the file path or writeable
 *      stream to which log records are written. E.g.
 *      `stream: process.stdout`.
 *    - `level`: Optional. Falls back to `defaultLevel`.
 *    - `closeOnExit` (boolean): Optional. Default is true for a
 *      'file' stream when `path` is given, false otherwise.
 *    See README.md for full details.
 * @param defaultLevel {Number|String} Optional. A level to use if
 *      `stream.level` is not set. If neither is given, this defaults to INFO.
 */
Logger.prototype.addStream = function addStream(s, defaultLevel) {
    var self = this;
    if (defaultLevel === null || defaultLevel === undefined) {
        defaultLevel = INFO;
    }

    s = objCopy(s);

    // Implicit 'type' from other args.
    if (!s.type) {
        if (s.stream) {
            s.type = 'stream';
        } else if (s.path) {
            s.type = 'file'
        }
    }
    s.raw = (s.type === 'raw');  // PERF: Allow for faster check in `_emit`.

    if (s.level !== undefined) {
        s.level = resolveLevel(s.level);
    } else {
        s.level = resolveLevel(defaultLevel);
    }
    if (s.level < self._level) {
        self._level = s.level;
    }

    switch (s.type) {
    case 'stream':
        assert.ok(isWritable(s.stream),
                  '"stream" stream is not writable: ' + util.inspect(s.stream));

        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    case 'file':
        if (s.reemitErrorEvents === undefined) {
            s.reemitErrorEvents = true;
        }
        if (!s.stream) {
            s.stream = fs.createWriteStream(s.path,
                                            {flags: 'a', encoding: 'utf8'});
            if (!s.closeOnExit) {
                s.closeOnExit = true;
            }
        } else {
            if (!s.closeOnExit) {
                s.closeOnExit = false;
            }
        }
        break;
    case 'rotating-file':
        assert.ok(!s.stream,
                  '"rotating-file" stream should not give a "stream"');
        assert.ok(s.path);
        assert.ok(mv, '"rotating-file" stream type is not supported: '
                      + 'missing "mv" module');
        s.stream = new RotatingFileStream(s);
        if (!s.closeOnExit) {
            s.closeOnExit = true;
        }
        break;
    case 'raw':
        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    default:
        throw new TypeError('unknown stream type "' + s.type + '"');
    }

    if (s.reemitErrorEvents && typeof (s.stream.on) === 'function') {
        // TODO: When we have `<logger>.close()`, it should remove event
        //      listeners to not leak Logger instances.
        s.stream.on('error', function onStreamError(err) {
            self.emit('error', err, s);
        });
    }

    self.streams.push(s);
    delete self.haveNonRawStreams;  // reset
}


/**
 * Add serializers
 *
 * @param serializers {Object} Optional. Object mapping log record field names
 *    to serializing functions. See README.md for details.
 */
Logger.prototype.addSerializers = function addSerializers(serializers) {
    var self = this;

    if (!self.serializers) {
        self.serializers = {};
    }
    Object.keys(serializers).forEach(function (field) {
        var serializer = serializers[field];
        if (typeof (serializer) !== 'function') {
            throw new TypeError(format(
                'invalid serializer for "%s" field: must be a function',
                field));
        } else {
            self.serializers[field] = serializer;
        }
    });
}



/**
 * Create a child logger, typically to add a few log record fields.
 *
 * This can be useful when passing a logger to a sub-component, e.g. a
 * 'wuzzle' component of your service:
 *
 *    var wuzzleLog = log.child({component: 'wuzzle'})
 *    var wuzzle = new Wuzzle({..., log: wuzzleLog})
 *
 * Then log records from the wuzzle code will have the same structure as
 * the app log, *plus the component='wuzzle' field*.
 *
 * @param options {Object} Optional. Set of options to apply to the child.
 *    All of the same options for a new Logger apply here. Notes:
 *      - The parent's streams are inherited and cannot be removed in this
 *        call. Any given `streams` are *added* to the set inherited from
 *        the parent.
 *      - The parent's serializers are inherited, though can effectively be
 *        overwritten by using duplicate keys.
 *      - Can use `level` to set the level of the streams inherited from
 *        the parent. The level for the parent is NOT affected.
 * @param simple {Boolean} Optional. Set to true to assert that `options`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation. See 'tools/timechild.js' for numbers.
 */
Logger.prototype.child = function (options, simple) {
    return new (this.constructor)(this, options || {}, simple);
}


/**
 * A convenience method to reopen 'file' streams on a logger. This can be
 * useful with external log rotation utilities that move and re-open log files
 * (e.g. logrotate on Linux, logadm on SmartOS/Illumos). Those utilities
 * typically have rotation options to copy-and-truncate the log file, but
 * you may not want to use that. An alternative is to do this in your
 * application:
 *
 *      var log = bunyan.createLogger(...);
 *      ...
 *      process.on('SIGUSR2', function () {
 *          log.reopenFileStreams();
 *      });
 *      ...
 *
 * See <https://github.com/trentm/node-bunyan/issues/104>.
 */
Logger.prototype.reopenFileStreams = function () {
    var self = this;
    self.streams.forEach(function (s) {
        if (s.type === 'file') {
            if (s.stream) {
                // Not sure if typically would want this, or more immediate
                // `s.stream.destroy()`.
                s.stream.end();
                s.stream.destroySoon();
                delete s.stream;
            }
            s.stream = fs.createWriteStream(s.path,
                {flags: 'a', encoding: 'utf8'});
            s.stream.on('error', function (err) {
                self.emit('error', err, s);
            });
        }
    });
};


/* BEGIN JSSTYLED */
/**
 * Close this logger.
 *
 * This closes streams (that it owns, as per 'endOnClose' attributes on
 * streams), etc. Typically you **don't** need to bother calling this.
Logger.prototype.close = function () {
    if (this._closed) {
        return;
    }
    if (!this._isSimpleChild) {
        self.streams.forEach(function (s) {
            if (s.endOnClose) {
                xxx('closing stream s:', s);
                s.stream.end();
                s.endOnClose = false;
            }
        });
    }
    this._closed = true;
}
 */
/* END JSSTYLED */


/**
 * Get/set the level of all streams on this logger.
 *
 * Get Usage:
 *    // Returns the current log level (lowest level of all its streams).
 *    log.level() -> INFO
 *
 * Set Usage:
 *    log.level(INFO)       // set all streams to level INFO
 *    log.level('info')     // can use 'info' et al aliases
 */
Logger.prototype.level = function level(value) {
    if (value === undefined) {
        return this._level;
    }
    var newLevel = resolveLevel(value);
    var len = this.streams.length;
    for (var i = 0; i < len; i++) {
        this.streams[i].level = newLevel;
    }
    this._level = newLevel;
}


/**
 * Get/set the level of a particular stream on this logger.
 *
 * Get Usage:
 *    // Returns an array of the levels of each stream.
 *    log.levels() -> [TRACE, INFO]
 *
 *    // Returns a level of the identified stream.
 *    log.levels(0) -> TRACE      // level of stream at index 0
 *    log.levels('foo')           // level of stream with name 'foo'
 *
 * Set Usage:
 *    log.levels(0, INFO)         // set level of stream 0 to INFO
 *    log.levels(0, 'info')       // can use 'info' et al aliases
 *    log.levels('foo', WARN)     // set stream named 'foo' to WARN
 *
 * Stream names: When streams are defined, they can optionally be given
 * a name. For example,
 *       log = new Logger({
 *         streams: [
 *           {
 *             name: 'foo',
 *             path: '/var/log/my-service/foo.log'
 *             level: 'trace'
 *           },
 *         ...
 *
 * @param name {String|Number} The stream index or name.
 * @param value {Number|String} The level value (INFO) or alias ('info').
 *    If not given, this is a 'get' operation.
 * @throws {Error} If there is no stream with the given name.
 */
Logger.prototype.levels = function levels(name, value) {
    if (name === undefined) {
        assert.equal(value, undefined);
        return this.streams.map(
            function (s) { return s.level });
    }
    var stream;
    if (typeof (name) === 'number') {
        stream = this.streams[name];
        if (stream === undefined) {
            throw new Error('invalid stream index: ' + name);
        }
    } else {
        var len = this.streams.length;
        for (var i = 0; i < len; i++) {
            var s = this.streams[i];
            if (s.name === name) {
                stream = s;
                break;
            }
        }
        if (!stream) {
            throw new Error(format('no stream with name "%s"', name));
        }
    }
    if (value === undefined) {
        return stream.level;
    } else {
        var newLevel = resolveLevel(value);
        stream.level = newLevel;
        if (newLevel < this._level) {
            this._level = newLevel;
        }
    }
}


/**
 * Apply registered serializers to the appropriate keys in the given fields.
 *
 * Pre-condition: This is only called if there is at least one serializer.
 *
 * @param fields (Object) The log record fields.
 * @param excludeFields (Object) Optional mapping of keys to `true` for
 *    keys to NOT apply a serializer.
 */
Logger.prototype._applySerializers = function (fields, excludeFields) {
    var self = this;

    xxx('_applySerializers: excludeFields', excludeFields);

    // Check each serializer against these (presuming number of serializers
    // is typically less than number of fields).
    Object.keys(this.serializers).forEach(function (name) {
        if (fields[name] === undefined ||
            (excludeFields && excludeFields[name]))
        {
            return;
        }
        xxx('_applySerializers; apply to "%s" key', name)
        try {
            fields[name] = self.serializers[name](fields[name]);
        } catch (err) {
            _warn(format('bunyan: ERROR: Exception thrown from the "%s" '
                + 'Bunyan serializer. This should never happen. This is a bug '
                + 'in that serializer function.\n%s',
                name, err.stack || err));
            fields[name] = format('(Error in Bunyan log "%s" serializer '
                + 'broke field. See stderr for details.)', name);
        }
    });
}


/**
 * Emit a log record.
 *
 * @param rec {log record}
 * @param noemit {Boolean} Optional. Set to true to skip emission
 *      and just return the JSON string.
 */
Logger.prototype._emit = function (rec, noemit) {
    var i;

    // Lazily determine if this Logger has non-'raw' streams. If there are
    // any, then we need to stringify the log record.
    if (this.haveNonRawStreams === undefined) {
        this.haveNonRawStreams = false;
        for (i = 0; i < this.streams.length; i++) {
            if (!this.streams[i].raw) {
                this.haveNonRawStreams = true;
                break;
            }
        }
    }

    // Stringify the object (creates a warning str on error).
    var str;
    if (noemit || this.haveNonRawStreams) {
        str = fastAndSafeJsonStringify(rec) + '\n';
    }

    if (noemit)
        return str;

    var level = rec.level;
    for (i = 0; i < this.streams.length; i++) {
        var s = this.streams[i];
        if (s.level <= level) {
            xxx('writing log rec "%s" to "%s" stream (%d <= %d): %j',
                rec.msg, s.type, s.level, level, rec);
            s.stream.write(s.raw ? rec : str);
        }
    };

    return str;
}


/**
 * Build a record object suitable for emitting from the arguments
 * provided to the a log emitter.
 */
function mkRecord(log, minLevel, args) {
    var excludeFields, fields, msgArgs;
    if (args[0] instanceof Error) {
        // `log.<level>(err, ...)`
        fields = {
            // Use this Logger's err serializer, if defined.
            err: (log.serializers && log.serializers.err
                ? log.serializers.err(args[0])
                : Logger.stdSerializers.err(args[0]))
        };
        excludeFields = {err: true};
        if (args.length === 1) {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    } else if (typeof (args[0]) !== 'object' || Array.isArray(args[0])) {
        // `log.<level>(msg, ...)`
        fields = null;
        msgArgs = args.slice();
    } else if (Buffer.isBuffer(args[0])) {  // `log.<level>(buf, ...)`
        // Almost certainly an error, show `inspect(buf)`. See bunyan
        // issue #35.
        fields = null;
        msgArgs = args.slice();
        msgArgs[0] = util.inspect(msgArgs[0]);
    } else {  // `log.<level>(fields, msg, ...)`
        fields = args[0];
        if (fields && args.length === 1 && fields.err &&
            fields.err instanceof Error)
        {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    }

    // Build up the record object.
    var rec = objCopy(log.fields);
    var level = rec.level = minLevel;
    var recFields = (fields ? objCopy(fields) : null);
    if (recFields) {
        if (log.serializers) {
            log._applySerializers(recFields, excludeFields);
        }
        Object.keys(recFields).forEach(function (k) {
            rec[k] = recFields[k];
        });
    }
    rec.msg = format.apply(log, msgArgs);
    if (!rec.time) {
        rec.time = (new Date());
    }
    // Get call source info
    if (log.src && !rec.src) {
        rec.src = getCaller3Info()
    }
    rec.v = LOG_VERSION;

    return rec;
};


/**
 * Build an array that dtrace-provider can use to fire a USDT probe. If we've
 * already built the appropriate string, we use it. Otherwise, build the
 * record object and stringify it.
 */
function mkProbeArgs(str, log, minLevel, msgArgs) {
    return [ str || log._emit(mkRecord(log, minLevel, msgArgs), true) ];
}


/**
 * Build a log emitter function for level minLevel. I.e. this is the
 * creator of `log.info`, `log.error`, etc.
 */
function mkLogEmitter(minLevel) {
    return function () {
        var log = this;
        var str = null;
        var rec = null;

        if (!this._emit) {
            /*
             * Show this invalid Bunyan usage warning *once*.
             *
             * See <https://github.com/trentm/node-bunyan/issues/100> for
             * an example of how this can happen.
             */
            var dedupKey = 'unbound';
            if (!_haveWarned[dedupKey]) {
                var caller = getCaller3Info();
                _warn(format('bunyan usage error: %s:%s: attempt to log '
                    + 'with an unbound log method: `this` is: %s',
                    caller.file, caller.line, util.inspect(this)),
                    dedupKey);
            }
            return;
        } else if (arguments.length === 0) {   // `log.<level>()`
            return (this._level <= minLevel);
        }

        var msgArgs = new Array(arguments.length);
        for (var i = 0; i < msgArgs.length; ++i) {
            msgArgs[i] = arguments[i];
        }

        if (this._level <= minLevel) {
            rec = mkRecord(log, minLevel, msgArgs);
            str = this._emit(rec);
        }

        if (probes) {
            probes[minLevel].fire(mkProbeArgs, str, log, minLevel, msgArgs);
        }
    }
}


/**
 * The functions below log a record at a specific level.
 *
 * Usages:
 *    log.<level>()  -> boolean is-trace-enabled
 *    log.<level>(<Error> err, [<string> msg, ...])
 *    log.<level>(<string> msg, ...)
 *    log.<level>(<object> fields, <string> msg, ...)
 *
 * where <level> is the lowercase version of the log level. E.g.:
 *
 *    log.info()
 *
 * @params fields {Object} Optional set of additional fields to log.
 * @params msg {String} Log message. This can be followed by additional
 *    arguments that are handled like
 *    [util.format](http://nodejs.org/docs/latest/api/all.html#util.format).
 */
Logger.prototype.trace = mkLogEmitter(TRACE);
Logger.prototype.debug = mkLogEmitter(DEBUG);
Logger.prototype.info = mkLogEmitter(INFO);
Logger.prototype.warn = mkLogEmitter(WARN);
Logger.prototype.error = mkLogEmitter(ERROR);
Logger.prototype.fatal = mkLogEmitter(FATAL);



//---- Standard serializers
// A serializer is a function that serializes a JavaScript object to a
// JSON representation for logging. There is a standard set of presumed
// interesting objects in node.js-land.

Logger.stdSerializers = {};

// Serialize an HTTP request.
Logger.stdSerializers.req = function (req) {
    if (!req || !req.connection)
        return req;
    return {
        method: req.method,
        url: req.url,
        headers: req.headers,
        remoteAddress: req.connection.remoteAddress,
        remotePort: req.connection.remotePort
    };
    // Trailers: Skipping for speed. If you need trailers in your app, then
    // make a custom serializer.
    //if (Object.keys(trailers).length > 0) {
    //  obj.trailers = req.trailers;
    //}
};

// Serialize an HTTP response.
Logger.stdSerializers.res = function (res) {
    if (!res || !res.statusCode)
        return res;
    return {
        statusCode: res.statusCode,
        header: res._header
    }
};


/*
 * This function dumps long stack traces for exceptions having a cause()
 * method. The error classes from
 * [verror](https://github.com/davepacheco/node-verror) and
 * [restify v2.0](https://github.com/mcavage/node-restify) are examples.
 *
 * Based on `dumpException` in
 * https://github.com/davepacheco/node-extsprintf/blob/master/lib/extsprintf.js
 */
function getFullErrorStack(ex)
{
    var ret = ex.stack || ex.toString();
    if (ex.cause && typeof (ex.cause) === 'function') {
        var cex = ex.cause();
        if (cex) {
            ret += '\nCaused by: ' + getFullErrorStack(cex);
        }
    }
    return (ret);
}

// Serialize an Error object
// (Core error properties are enumerable in node 0.4, not in 0.6).
var errSerializer = Logger.stdSerializers.err = function (err) {
    if (!err || !err.stack)
        return err;
    var obj = {
        message: err.message,
        name: err.name,
        stack: getFullErrorStack(err),
        code: err.code,
        signal: err.signal
    }
    return obj;
};


// A JSON stringifier that handles cycles safely - tracks seen values in a Set.
function safeCyclesSet() {
    var seen = new Set();
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.has(val)) {
            return '[Circular]';
        }
        seen.add(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely - tracks seen vals in an Array.
 *
 * Note: This approach has performance problems when dealing with large objects,
 * see trentm/node-bunyan#445, but since this is the only option for node 0.10
 * and earlier (as Set was introduced in Node 0.12), it's used as a fallback
 * when Set is not available.
 */
function safeCyclesArray() {
    var seen = [];
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.indexOf(val) !== -1) {
            return '[Circular]';
        }
        seen.push(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely.
 *
 * Usage: JSON.stringify(obj, safeCycles())
 *
 * Choose the best safe cycle function from what is available - see
 * trentm/node-bunyan#445.
 */
var safeCycles = typeof (Set) !== 'undefined' ? safeCyclesSet : safeCyclesArray;

/**
 * A fast JSON.stringify that handles cycles and getter exceptions (when
 * safeJsonStringify is installed).
 *
 * This function attempts to use the regular JSON.stringify for speed, but on
 * error (e.g. JSON cycle detection exception) it falls back to safe stringify
 * handlers that can deal with cycles and/or getter exceptions.
 */
function fastAndSafeJsonStringify(rec) {
    try {
        return JSON.stringify(rec);
    } catch (ex) {
        try {
            return JSON.stringify(rec, safeCycles());
        } catch (e) {
            if (safeJsonStringify) {
                return safeJsonStringify(rec);
            } else {
                var dedupKey = e.stack.split(/\n/g, 3).join('\n');
                _warn('bunyan: ERROR: Exception in '
                    + '`JSON.stringify(rec)`. You can install the '
                    + '"safe-json-stringify" module to have Bunyan fallback '
                    + 'to safer stringification. Record:\n'
                    + _indent(format('%s\n%s', util.inspect(rec), e.stack)),
                    dedupKey);
                return format('(Exception in JSON.stringify(rec): %j. '
                    + 'See stderr for details.)', e.message);
            }
        }
    }
}


var RotatingFileStream = null;
if (mv) {

RotatingFileStream = function RotatingFileStream(options) {
    this.path = options.path;

    this.count = (options.count == null ? 10 : options.count);
    assert.equal(typeof (this.count), 'number',
        format('rotating-file stream "count" is not a number: %j (%s) in %j',
            this.count, typeof (this.count), this));
    assert.ok(this.count >= 0,
        format('rotating-file stream "count" is not >= 0: %j in %j',
            this.count, this));

    // Parse `options.period`.
    if (options.period) {
        // <number><scope> where scope is:
        //    h   hours (at the start of the hour)
        //    d   days (at the start of the day, i.e. just after midnight)
        //    w   weeks (at the start of Sunday)
        //    m   months (on the first of the month)
        //    y   years (at the start of Jan 1st)
        // with special values 'hourly' (1h), 'daily' (1d), "weekly" (1w),
        // 'monthly' (1m) and 'yearly' (1y)
        var period = {
            'hourly': '1h',
            'daily': '1d',
            'weekly': '1w',
            'monthly': '1m',
            'yearly': '1y'
        }[options.period] || options.period;
        var m = /^([1-9][0-9]*)([hdwmy]|ms)$/.exec(period);
        if (!m) {
            throw new Error(format('invalid period: "%s"', options.period));
        }
        this.periodNum = Number(m[1]);
        this.periodScope = m[2];
    } else {
        this.periodNum = 1;
        this.periodScope = 'd';
    }

    var lastModified = null;
    try {
        var fileInfo = fs.statSync(this.path);
        lastModified = fileInfo.mtime.getTime();
    }
    catch (err) {
        // file doesn't exist
    }
    var rotateAfterOpen = false;
    if (lastModified) {
        var lastRotTime = this._calcRotTime(0);
        if (lastModified < lastRotTime) {
            rotateAfterOpen = true;
        }
    }

    // TODO: template support for backup files
    // template: <path to which to rotate>
    //      default is %P.%n
    //      '/var/log/archive/foo.log'  -> foo.log.%n
    //      '/var/log/archive/foo.log.%n'
    //      codes:
    //          XXX support strftime codes (per node version of those)
    //              or whatever module. Pick non-colliding for extra
    //              codes
    //          %P      `path` base value
    //          %n      integer number of rotated log (1,2,3,...)
    //          %d      datetime in YYYY-MM-DD_HH-MM-SS
    //                      XXX what should default date format be?
    //                          prior art? Want to avoid ':' in
    //                          filenames (illegal on Windows for one).

    this.stream = fs.createWriteStream(this.path,
        {flags: 'a', encoding: 'utf8'});

    this.rotQueue = [];
    this.rotating = false;
    if (rotateAfterOpen) {
        this._debug('rotateAfterOpen -> call rotate()');
        this.rotate();
    } else {
        this._setupNextRot();
    }
}

util.inherits(RotatingFileStream, EventEmitter);

RotatingFileStream.prototype._debug = function () {
    // Set this to `true` to add debug logging.
    if (false) {
        if (arguments.length === 0) {
            return true;
        }
        var args = Array.prototype.slice.call(arguments);
        args[0] = '[' + (new Date().toISOString()) + ', '
            + this.path + '] ' + args[0];
        console.log.apply(this, args);
    } else {
        return false;
    }
};

RotatingFileStream.prototype._setupNextRot = function () {
    this.rotAt = this._calcRotTime(1);
    this._setRotationTimer();
}

RotatingFileStream.prototype._setRotationTimer = function () {
    var self = this;
    var delay = this.rotAt - Date.now();
    // Cap timeout to Node's max setTimeout, see
    // <https://github.com/joyent/node/issues/8656>.
    var TIMEOUT_MAX = 2147483647; // 2^31-1
    if (delay > TIMEOUT_MAX) {
        delay = TIMEOUT_MAX;
    }
    this.timeout = setTimeout(
        function () {
            self._debug('_setRotationTimer timeout -> call rotate()');
            self.rotate();
        },
        delay);
    if (typeof (this.timeout.unref) === 'function') {
        this.timeout.unref();
    }
}

RotatingFileStream.prototype._calcRotTime =
function _calcRotTime(periodOffset) {
    this._debug('_calcRotTime: %s%s', this.periodNum, this.periodScope);
    var d = new Date();

    this._debug('  now local: %s', d);
    this._debug('    now utc: %s', d.toISOString());
    var rotAt;
    switch (this.periodScope) {
    case 'ms':
        // Hidden millisecond period for debugging.
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * periodOffset;
        } else {
            rotAt = Date.now() + this.periodNum * periodOffset;
        }
        break;
    case 'h':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 60 * 60 * 1000 * periodOffset;
        } else {
            // First time: top of the next hour.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate(), d.getUTCHours() + periodOffset);
        }
        break;
    case 'd':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: start of tomorrow (i.e. at the coming midnight) UTC.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + periodOffset);
        }
        break;
    case 'w':
        // Currently, always on Sunday morning at 00:00:00 (UTC).
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 7 * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: this coming Sunday.
            var dayOffset = (7 - d.getUTCDay());
            if (periodOffset < 1) {
                dayOffset = -d.getUTCDay();
            }
            if (periodOffset > 1 || periodOffset < -1) {
                dayOffset += 7 * periodOffset;
            }
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + dayOffset);
        }
        break;
    case 'm':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + this.periodNum * periodOffset, 1);
        } else {
            // First time: the start of the next month.
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + periodOffset, 1);
        }
        break;
    case 'y':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear() + this.periodNum * periodOffset,
                0, 1);
        } else {
            // First time: the start of the next year.
            rotAt = Date.UTC(d.getUTCFullYear() + periodOffset, 0, 1);
        }
        break;
    default:
        assert.fail(format('invalid period scope: "%s"', this.periodScope));
    }

    if (this._debug()) {
        this._debug('  **rotAt**: %s (utc: %s)', rotAt,
            new Date(rotAt).toUTCString());
        var now = Date.now();
        this._debug('        now: %s (%sms == %smin == %sh to go)',
            now,
            rotAt - now,
            (rotAt-now)/1000/60,
            (rotAt-now)/1000/60/60);
    }
    return rotAt;
};

RotatingFileStream.prototype.rotate = function rotate() {
    // XXX What about shutdown?
    var self = this;

    // If rotation period is > ~25 days, we have to break into multiple
    // setTimeout's. See <https://github.com/joyent/node/issues/8656>.
    if (self.rotAt && self.rotAt > Date.now()) {
        return self._setRotationTimer();
    }

    this._debug('rotate');
    if (self.rotating) {
        throw new TypeError('cannot start a rotation when already rotating');
    }
    self.rotating = true;

    self.stream.end();  // XXX can do moves sync after this? test at high rate

    function del() {
        var toDel = self.path + '.' + String(n - 1);
        if (n === 0) {
            toDel = self.path;
        }
        n -= 1;
        self._debug('  rm %s', toDel);
        fs.unlink(toDel, function (delErr) {
            //XXX handle err other than not exists
            moves();
        });
    }

    function moves() {
        if (self.count === 0 || n < 0) {
            return finish();
        }
        var before = self.path;
        var after = self.path + '.' + String(n);
        if (n > 0) {
            before += '.' + String(n - 1);
        }
        n -= 1;
        fs.exists(before, function (exists) {
            if (!exists) {
                moves();
            } else {
                self._debug('  mv %s %s', before, after);
                mv(before, after, function (mvErr) {
                    if (mvErr) {
                        self.emit('error', mvErr);
                        finish(); // XXX finish here?
                    } else {
                        moves();
                    }
                });
            }
        })
    }

    function finish() {
        self._debug('  open %s', self.path);
        self.stream = fs.createWriteStream(self.path,
            {flags: 'a', encoding: 'utf8'});
        var q = self.rotQueue, len = q.length;
        for (var i = 0; i < len; i++) {
            self.stream.write(q[i]);
        }
        self.rotQueue = [];
        self.rotating = false;
        self.emit('drain');
        self._setupNextRot();
    }

    var n = this.count;
    del();
};

RotatingFileStream.prototype.write = function write(s) {
    if (this.rotating) {
        this.rotQueue.push(s);
        return false;
    } else {
        return this.stream.write(s);
    }
};

RotatingFileStream.prototype.end = function end(s) {
    this.stream.end();
};

RotatingFileStream.prototype.destroy = function destroy(s) {
    this.stream.destroy();
};

RotatingFileStream.prototype.destroySoon = function destroySoon(s) {
    this.stream.destroySoon();
};

} /* if (mv) */



/**
 * RingBuffer is a Writable Stream that just stores the last N records in
 * memory.
 *
 * @param options {Object}, with the following fields:
 *
 *    - limit: number of records to keep in memory
 */
function RingBuffer(options) {
    this.limit = options && options.limit ? options.limit : 100;
    this.writable = true;
    this.records = [];
    EventEmitter.call(this);
}

util.inherits(RingBuffer, EventEmitter);

RingBuffer.prototype.write = function (record) {
    if (!this.writable)
        throw (new Error('RingBuffer has been ended already'));

    this.records.push(record);

    if (this.records.length > this.limit)
        this.records.shift();

    return (true);
};

RingBuffer.prototype.end = function () {
    if (arguments.length > 0)
        this.write.apply(this, Array.prototype.slice.call(arguments));
    this.writable = false;
};

RingBuffer.prototype.destroy = function () {
    this.writable = false;
    this.emit('close');
};

RingBuffer.prototype.destroySoon = function () {
    this.destroy();
};


//---- Exports

module.exports = Logger;

module.exports.TRACE = TRACE;
module.exports.DEBUG = DEBUG;
module.exports.INFO = INFO;
module.exports.WARN = WARN;
module.exports.ERROR = ERROR;
module.exports.FATAL = FATAL;
module.exports.resolveLevel = resolveLevel;
module.exports.levelFromName = levelFromName;
module.exports.nameFromLevel = nameFromLevel;

module.exports.VERSION = VERSION;
module.exports.LOG_VERSION = LOG_VERSION;

module.exports.createLogger = function createLogger(options) {
    return new Logger(options);
};

module.exports.RingBuffer = RingBuffer;
module.exports.RotatingFileStream = RotatingFileStream;

// Useful for custom `type == 'raw'` streams that may do JSON stringification
// of log records themselves. Usage:
//    var str = JSON.stringify(rec, bunyan.safeCycles());
module.exports.safeCycles = safeCycles;
 at SyntaxError: Unexpected token (85:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"_bound":4}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"_bound":3,"ExpansionArg_int":0} start 17.835 took 9.5804s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"_bound":3,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (85:4) on program /**
 * Copyright (c) 2017 Trent Mick.
 * Copyright (c) 2017 Joyent Inc.
 *
 * The bunyan logging library for node.js.
 *
 * -*- mode: js -*-
 * vim: expandtab:ts=4:sw=4
 */

var VERSION = '1.8.12';

/*
 * Bunyan log format version. This becomes the 'v' field on all log records.
 * This will be incremented if there is any backward incompatible change to
 * the log record format. Details will be in 'CHANGES.md' (the change log).
 */
var LOG_VERSION = 0;


var xxx = function xxx(s) {     // internal dev/debug logging
    var args = ['XX' + 'X: '+s].concat(
        Array.prototype.slice.call(arguments, 1));
    console.error.apply(this, args);
};
var xxx = function xxx() {};  // comment out to turn on debug logging


/*
 * Runtime environment notes:
 *
 * Bunyan is intended to run in a number of runtime environments. Here are
 * some notes on differences for those envs and how the code copes.
 *
 * - node.js: The primary target environment.
 * - NW.js: http://nwjs.io/  An *app* environment that feels like both a
 *   node env -- it has node-like globals (`process`, `global`) and
 *   browser-like globals (`window`, `navigator`). My *understanding* is that
 *   bunyan can operate as if this is vanilla node.js.
 * - browser: Failing the above, we sniff using the `window` global
 *   <https://developer.mozilla.org/en-US/docs/Web/API/Window/window>.
 *      - browserify: http://browserify.org/  A browser-targetting bundler of
 *        node.js deps. The runtime is a browser env, so can't use fs access,
 *        etc. Browserify's build looks for `require(<single-string>)` imports
 *        to bundle. For some imports it won't be able to handle, we "hide"
 *        from browserify with `require('frobshizzle' + '')`.
 * - Other? Please open issues if things are broken.
 */
var runtimeEnv;
if (typeof (process) !== 'undefined' && process.versions) {
    if (process.versions.nw) {
        runtimeEnv = 'nw';
    } else if (process.versions.node) {
        runtimeEnv = 'node';
    }
}
if (!runtimeEnv && typeof (window) !== 'undefined' &&
    window.window === window) {
    runtimeEnv = 'browser';
}
if (!runtimeEnv) {
    throw new Error('unknown runtime environment');
}


var os, fs, dtrace;
if (runtimeEnv === 'browser') {
    os = {
        hostname: function () {
            return window.location.host;
        }
    };
    fs = {};
    dtrace = null;
} else {
    os = require('os');
    fs = require('fs');
    try {
        dtrace = require('dtrace-provider' + '');
    } catch (e) {
        dtrace = null;
    }
}
var util = require('util');
var assert = require('assert');
var EventEmitter = require('events').EventEmitter;
var stream = require('stream');

try {
    var safeJsonStringify = require('safe-json-stringify');
} catch (e) {
    safeJsonStringify = null;
}
if (process.env.BUNYAN_TEST_NO_SAFE_JSON_STRINGIFY) {
    safeJsonStringify = null;
}

// The 'mv' module is required for rotating-file stream support.
try {
    var mv = require('mv' + '');
} catch (e) {
    mv = null;
}

try {
    var sourceMapSupport = require('source-map-support' + '');
} catch (_) {
    sourceMapSupport = null;
}


//---- Internal support stuff

/**
 * A shallow copy of an object. Bunyan logging attempts to never cause
 * exceptions, so this function attempts to handle non-objects gracefully.
 */
function objCopy(obj) {
    if (obj == null) {  // null or undefined
        return obj;
    } else if (Array.isArray(obj)) {
        return obj.slice();
    } else if (typeof (obj) === 'object') {
        var copy = {};
        Object.keys(obj).forEach(function (k) {
            copy[k] = obj[k];
        });
        return copy;
    } else {
        return obj;
    }
}

var format = util.format;
if (!format) {
    // If node < 0.6, then use its `util.format`:
    // <https://github.com/joyent/node/blob/master/lib/util.js#L22>:
    var inspect = util.inspect;
    var formatRegExp = /%[sdj%]/g;
    format = function format(f) {
        if (typeof (f) !== 'string') {
            var objects = [];
            for (var i = 0; i < arguments.length; i++) {
                objects.push(inspect(arguments[i]));
            }
            return objects.join(' ');
        }

        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function (x) {
            if (i >= len)
                return x;
            switch (x) {
                case '%s': return String(args[i++]);
                case '%d': return Number(args[i++]);
                case '%j': return fastAndSafeJsonStringify(args[i++]);
                case '%%': return '%';
                default:
                    return x;
            }
        });
        for (var x = args[i]; i < len; x = args[++i]) {
            if (x === null || typeof (x) !== 'object') {
                str += ' ' + x;
            } else {
                str += ' ' + inspect(x);
            }
        }
        return str;
    };
}


/**
 * Gather some caller info 3 stack levels up.
 * See <http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi>.
 */
function getCaller3Info() {
    if (this === undefined) {
        // Cannot access caller info in 'strict' mode.
        return;
    }
    var obj = {};
    var saveLimit = Error.stackTraceLimit;
    var savePrepare = Error.prepareStackTrace;
    Error.stackTraceLimit = 3;

    Error.prepareStackTrace = function (_, stack) {
        var caller = stack[2];
        if (sourceMapSupport) {
            caller = sourceMapSupport.wrapCallSite(caller);
        }
        obj.file = caller.getFileName();
        obj.line = caller.getLineNumber();
        var func = caller.getFunctionName();
        if (func)
            obj.func = func;
    };
    Error.captureStackTrace(this, getCaller3Info);
    this.stack;

    Error.stackTraceLimit = saveLimit;
    Error.prepareStackTrace = savePrepare;
    return obj;
}


function _indent(s, indent) {
    if (!indent) indent = '    ';
    var lines = s.split(/\r?\n/g);
    return indent + lines.join('\n' + indent);
}


/**
 * Warn about an bunyan processing error.
 *
 * @param msg {String} Message with which to warn.
 * @param dedupKey {String} Optional. A short string key for this warning to
 *      have its warning only printed once.
 */
function _warn(msg, dedupKey) {
    assert.ok(msg);
    if (dedupKey) {
        if (_warned[dedupKey]) {
            return;
        }
        _warned[dedupKey] = true;
    }
    process.stderr.write(msg + '\n');
}
function _haveWarned(dedupKey) {
    return _warned[dedupKey];
}
var _warned = {};


function ConsoleRawStream() {}
ConsoleRawStream.prototype.write = function (rec) {
    if (rec.level < INFO) {
        console.log(rec);
    } else if (rec.level < WARN) {
        console.info(rec);
    } else if (rec.level < ERROR) {
        console.warn(rec);
    } else {
        console.error(rec);
    }
};


//---- Levels

var TRACE = 10;
var DEBUG = 20;
var INFO = 30;
var WARN = 40;
var ERROR = 50;
var FATAL = 60;

var levelFromName = {
    'trace': TRACE,
    'debug': DEBUG,
    'info': INFO,
    'warn': WARN,
    'error': ERROR,
    'fatal': FATAL
};
var nameFromLevel = {};
Object.keys(levelFromName).forEach(function (name) {
    nameFromLevel[levelFromName[name]] = name;
});

// Dtrace probes.
var dtp = undefined;
var probes = dtrace && {};

/**
 * Resolve a level number, name (upper or lowercase) to a level number value.
 *
 * @param nameOrNum {String|Number} A level name (case-insensitive) or positive
 *      integer level.
 * @api public
 */
function resolveLevel(nameOrNum) {
    var level;
    var type = typeof (nameOrNum);
    if (type === 'string') {
        level = levelFromName[nameOrNum.toLowerCase()];
        if (!level) {
            throw new Error(format('unknown level name: "%s"', nameOrNum));
        }
    } else if (type !== 'number') {
        throw new TypeError(format('cannot resolve level: invalid arg (%s):',
            type, nameOrNum));
    } else if (nameOrNum < 0 || Math.floor(nameOrNum) !== nameOrNum) {
        throw new TypeError(format('level is not a positive integer: %s',
            nameOrNum));
    } else {
        level = nameOrNum;
    }
    return level;
}


function isWritable(obj) {
    if (obj instanceof stream.Writable) {
        return true;
    }
    return typeof (obj.write) === 'function';
}


//---- Logger class

/**
 * Create a Logger instance.
 *
 * @param options {Object} See documentation for full details. At minimum
 *    this must include a 'name' string key. Configuration keys:
 *      - `streams`: specify the logger output streams. This is an array of
 *        objects with these fields:
 *          - `type`: The stream type. See README.md for full details.
 *            Often this is implied by the other fields. Examples are
 *            'file', 'stream' and "raw".
 *          - `level`: Defaults to 'info'.
 *          - `path` or `stream`: The specify the file path or writeable
 *            stream to which log records are written. E.g.
 *            `stream: process.stdout`.
 *          - `closeOnExit` (boolean): Optional. Default is true for a
 *            'file' stream when `path` is given, false otherwise.
 *        See README.md for full details.
 *      - `level`: set the level for a single output stream (cannot be used
 *        with `streams`)
 *      - `stream`: the output stream for a logger with just one, e.g.
 *        `process.stdout` (cannot be used with `streams`)
 *      - `serializers`: object mapping log record field names to
 *        serializing functions. See README.md for details.
 *      - `src`: Boolean (default false). Set true to enable 'src' automatic
 *        field with log call source info.
 *    All other keys are log record fields.
 *
 * An alternative *internal* call signature is used for creating a child:
 *    new Logger(<parent logger>, <child options>[, <child opts are simple>]);
 *
 * @param _childSimple (Boolean) An assertion that the given `_childOptions`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation.
 */
function Logger(options, _childOptions, _childSimple) {
    xxx('Logger start:', options)
    if (!(this instanceof Logger)) {
        return new Logger(options, _childOptions);
    }

    // Input arg validation.
    var parent;
    if (_childOptions !== undefined) {
        parent = options;
        options = _childOptions;
        if (!(parent instanceof Logger)) {
            throw new TypeError(
                'invalid Logger creation: do not pass a second arg');
        }
    }
    if (!options) {
        throw new TypeError('options (object) is required');
    }
    if (!parent) {
        if (!options.name) {
            throw new TypeError('options.name (string) is required');
        }
    } else {
        if (options.name) {
            throw new TypeError(
                'invalid options.name: child cannot set logger name');
        }
    }
    if (options.stream && options.streams) {
        throw new TypeError('cannot mix "streams" and "stream" options');
    }
    if (options.streams && !Array.isArray(options.streams)) {
        throw new TypeError('invalid options.streams: must be an array')
    }
    if (options.serializers && (typeof (options.serializers) !== 'object' ||
            Array.isArray(options.serializers))) {
        throw new TypeError('invalid options.serializers: must be an object')
    }

    EventEmitter.call(this);

    // Fast path for simple child creation.
    if (parent && _childSimple) {
        // `_isSimpleChild` is a signal to stream close handling that this child
        // owns none of its streams.
        this._isSimpleChild = true;

        this._level = parent._level;
        this.streams = parent.streams;
        this.serializers = parent.serializers;
        this.src = parent.src;
        var fields = this.fields = {};
        var parentFieldNames = Object.keys(parent.fields);
        for (var i = 0; i < parentFieldNames.length; i++) {
            var name = parentFieldNames[i];
            fields[name] = parent.fields[name];
        }
        var names = Object.keys(options);
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            fields[name] = options[name];
        }
        return;
    }

    // Start values.
    var self = this;
    if (parent) {
        this._level = parent._level;
        this.streams = [];
        for (var i = 0; i < parent.streams.length; i++) {
            var s = objCopy(parent.streams[i]);
            s.closeOnExit = false; // Don't own parent stream.
            this.streams.push(s);
        }
        this.serializers = objCopy(parent.serializers);
        this.src = parent.src;
        this.fields = objCopy(parent.fields);
        if (options.level) {
            this.level(options.level);
        }
    } else {
        this._level = Number.POSITIVE_INFINITY;
        this.streams = [];
        this.serializers = null;
        this.src = false;
        this.fields = {};
    }

    if (!dtp && dtrace) {
        dtp = dtrace.createDTraceProvider('bunyan');

        for (var level in levelFromName) {
            var probe;

            probes[levelFromName[level]] = probe =
                dtp.addProbe('log-' + level, 'char *');

            // Explicitly add a reference to dtp to prevent it from being GC'd
            probe.dtp = dtp;
        }

        dtp.enable();
    }

    // Handle *config* options (i.e. options that are not just plain data
    // for log records).
    if (options.stream) {
        self.addStream({
            type: 'stream',
            stream: options.stream,
            closeOnExit: false,
            level: options.level
        });
    } else if (options.streams) {
        options.streams.forEach(function (s) {
            self.addStream(s, options.level);
        });
    } else if (parent && options.level) {
        this.level(options.level);
    } else if (!parent) {
        if (runtimeEnv === 'browser') {
            /*
             * In the browser we'll be emitting to console.log by default.
             * Any console.log worth its salt these days can nicely render
             * and introspect objects (e.g. the Firefox and Chrome console)
             * so let's emit the raw log record. Are there browsers for which
             * that breaks things?
             */
            self.addStream({
                type: 'raw',
                stream: new ConsoleRawStream(),
                closeOnExit: false,
                level: options.level
            });
        } else {
            self.addStream({
                type: 'stream',
                stream: process.stdout,
                closeOnExit: false,
                level: options.level
            });
        }
    }
    if (options.serializers) {
        self.addSerializers(options.serializers);
    }
    if (options.src) {
        this.src = true;
    }
    xxx('Logger: ', self)

    // Fields.
    // These are the default fields for log records (minus the attributes
    // removed in this constructor). To allow storing raw log records
    // (unrendered), `this.fields` must never be mutated. Create a copy for
    // any changes.
    var fields = objCopy(options);
    delete fields.stream;
    delete fields.level;
    delete fields.streams;
    delete fields.serializers;
    delete fields.src;
    if (this.serializers) {
        this._applySerializers(fields);
    }
    if (!fields.hostname && !self.fields.hostname) {
        fields.hostname = os.hostname();
    }
    if (!fields.pid) {
        fields.pid = process.pid;
    }
    Object.keys(fields).forEach(function (k) {
        self.fields[k] = fields[k];
    });
}

util.inherits(Logger, EventEmitter);


/**
 * Add a stream
 *
 * @param stream {Object}. Object with these fields:
 *    - `type`: The stream type. See README.md for full details.
 *      Often this is implied by the other fields. Examples are
 *      'file', 'stream' and "raw".
 *    - `path` or `stream`: The specify the file path or writeable
 *      stream to which log records are written. E.g.
 *      `stream: process.stdout`.
 *    - `level`: Optional. Falls back to `defaultLevel`.
 *    - `closeOnExit` (boolean): Optional. Default is true for a
 *      'file' stream when `path` is given, false otherwise.
 *    See README.md for full details.
 * @param defaultLevel {Number|String} Optional. A level to use if
 *      `stream.level` is not set. If neither is given, this defaults to INFO.
 */
Logger.prototype.addStream = function addStream(s, defaultLevel) {
    var self = this;
    if (defaultLevel === null || defaultLevel === undefined) {
        defaultLevel = INFO;
    }

    s = objCopy(s);

    // Implicit 'type' from other args.
    if (!s.type) {
        if (s.stream) {
            s.type = 'stream';
        } else if (s.path) {
            s.type = 'file'
        }
    }
    s.raw = (s.type === 'raw');  // PERF: Allow for faster check in `_emit`.

    if (s.level !== undefined) {
        s.level = resolveLevel(s.level);
    } else {
        s.level = resolveLevel(defaultLevel);
    }
    if (s.level < self._level) {
        self._level = s.level;
    }

    switch (s.type) {
    case 'stream':
        assert.ok(isWritable(s.stream),
                  '"stream" stream is not writable: ' + util.inspect(s.stream));

        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    case 'file':
        if (s.reemitErrorEvents === undefined) {
            s.reemitErrorEvents = true;
        }
        if (!s.stream) {
            s.stream = fs.createWriteStream(s.path,
                                            {flags: 'a', encoding: 'utf8'});
            if (!s.closeOnExit) {
                s.closeOnExit = true;
            }
        } else {
            if (!s.closeOnExit) {
                s.closeOnExit = false;
            }
        }
        break;
    case 'rotating-file':
        assert.ok(!s.stream,
                  '"rotating-file" stream should not give a "stream"');
        assert.ok(s.path);
        assert.ok(mv, '"rotating-file" stream type is not supported: '
                      + 'missing "mv" module');
        s.stream = new RotatingFileStream(s);
        if (!s.closeOnExit) {
            s.closeOnExit = true;
        }
        break;
    case 'raw':
        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    default:
        throw new TypeError('unknown stream type "' + s.type + '"');
    }

    if (s.reemitErrorEvents && typeof (s.stream.on) === 'function') {
        // TODO: When we have `<logger>.close()`, it should remove event
        //      listeners to not leak Logger instances.
        s.stream.on('error', function onStreamError(err) {
            self.emit('error', err, s);
        });
    }

    self.streams.push(s);
    delete self.haveNonRawStreams;  // reset
}


/**
 * Add serializers
 *
 * @param serializers {Object} Optional. Object mapping log record field names
 *    to serializing functions. See README.md for details.
 */
Logger.prototype.addSerializers = function addSerializers(serializers) {
    var self = this;

    if (!self.serializers) {
        self.serializers = {};
    }
    Object.keys(serializers).forEach(function (field) {
        var serializer = serializers[field];
        if (typeof (serializer) !== 'function') {
            throw new TypeError(format(
                'invalid serializer for "%s" field: must be a function',
                field));
        } else {
            self.serializers[field] = serializer;
        }
    });
}



/**
 * Create a child logger, typically to add a few log record fields.
 *
 * This can be useful when passing a logger to a sub-component, e.g. a
 * 'wuzzle' component of your service:
 *
 *    var wuzzleLog = log.child({component: 'wuzzle'})
 *    var wuzzle = new Wuzzle({..., log: wuzzleLog})
 *
 * Then log records from the wuzzle code will have the same structure as
 * the app log, *plus the component='wuzzle' field*.
 *
 * @param options {Object} Optional. Set of options to apply to the child.
 *    All of the same options for a new Logger apply here. Notes:
 *      - The parent's streams are inherited and cannot be removed in this
 *        call. Any given `streams` are *added* to the set inherited from
 *        the parent.
 *      - The parent's serializers are inherited, though can effectively be
 *        overwritten by using duplicate keys.
 *      - Can use `level` to set the level of the streams inherited from
 *        the parent. The level for the parent is NOT affected.
 * @param simple {Boolean} Optional. Set to true to assert that `options`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation. See 'tools/timechild.js' for numbers.
 */
Logger.prototype.child = function (options, simple) {
    return new (this.constructor)(this, options || {}, simple);
}


/**
 * A convenience method to reopen 'file' streams on a logger. This can be
 * useful with external log rotation utilities that move and re-open log files
 * (e.g. logrotate on Linux, logadm on SmartOS/Illumos). Those utilities
 * typically have rotation options to copy-and-truncate the log file, but
 * you may not want to use that. An alternative is to do this in your
 * application:
 *
 *      var log = bunyan.createLogger(...);
 *      ...
 *      process.on('SIGUSR2', function () {
 *          log.reopenFileStreams();
 *      });
 *      ...
 *
 * See <https://github.com/trentm/node-bunyan/issues/104>.
 */
Logger.prototype.reopenFileStreams = function () {
    var self = this;
    self.streams.forEach(function (s) {
        if (s.type === 'file') {
            if (s.stream) {
                // Not sure if typically would want this, or more immediate
                // `s.stream.destroy()`.
                s.stream.end();
                s.stream.destroySoon();
                delete s.stream;
            }
            s.stream = fs.createWriteStream(s.path,
                {flags: 'a', encoding: 'utf8'});
            s.stream.on('error', function (err) {
                self.emit('error', err, s);
            });
        }
    });
};


/* BEGIN JSSTYLED */
/**
 * Close this logger.
 *
 * This closes streams (that it owns, as per 'endOnClose' attributes on
 * streams), etc. Typically you **don't** need to bother calling this.
Logger.prototype.close = function () {
    if (this._closed) {
        return;
    }
    if (!this._isSimpleChild) {
        self.streams.forEach(function (s) {
            if (s.endOnClose) {
                xxx('closing stream s:', s);
                s.stream.end();
                s.endOnClose = false;
            }
        });
    }
    this._closed = true;
}
 */
/* END JSSTYLED */


/**
 * Get/set the level of all streams on this logger.
 *
 * Get Usage:
 *    // Returns the current log level (lowest level of all its streams).
 *    log.level() -> INFO
 *
 * Set Usage:
 *    log.level(INFO)       // set all streams to level INFO
 *    log.level('info')     // can use 'info' et al aliases
 */
Logger.prototype.level = function level(value) {
    if (value === undefined) {
        return this._level;
    }
    var newLevel = resolveLevel(value);
    var len = this.streams.length;
    for (var i = 0; i < len; i++) {
        this.streams[i].level = newLevel;
    }
    this._level = newLevel;
}


/**
 * Get/set the level of a particular stream on this logger.
 *
 * Get Usage:
 *    // Returns an array of the levels of each stream.
 *    log.levels() -> [TRACE, INFO]
 *
 *    // Returns a level of the identified stream.
 *    log.levels(0) -> TRACE      // level of stream at index 0
 *    log.levels('foo')           // level of stream with name 'foo'
 *
 * Set Usage:
 *    log.levels(0, INFO)         // set level of stream 0 to INFO
 *    log.levels(0, 'info')       // can use 'info' et al aliases
 *    log.levels('foo', WARN)     // set stream named 'foo' to WARN
 *
 * Stream names: When streams are defined, they can optionally be given
 * a name. For example,
 *       log = new Logger({
 *         streams: [
 *           {
 *             name: 'foo',
 *             path: '/var/log/my-service/foo.log'
 *             level: 'trace'
 *           },
 *         ...
 *
 * @param name {String|Number} The stream index or name.
 * @param value {Number|String} The level value (INFO) or alias ('info').
 *    If not given, this is a 'get' operation.
 * @throws {Error} If there is no stream with the given name.
 */
Logger.prototype.levels = function levels(name, value) {
    if (name === undefined) {
        assert.equal(value, undefined);
        return this.streams.map(
            function (s) { return s.level });
    }
    var stream;
    if (typeof (name) === 'number') {
        stream = this.streams[name];
        if (stream === undefined) {
            throw new Error('invalid stream index: ' + name);
        }
    } else {
        var len = this.streams.length;
        for (var i = 0; i < len; i++) {
            var s = this.streams[i];
            if (s.name === name) {
                stream = s;
                break;
            }
        }
        if (!stream) {
            throw new Error(format('no stream with name "%s"', name));
        }
    }
    if (value === undefined) {
        return stream.level;
    } else {
        var newLevel = resolveLevel(value);
        stream.level = newLevel;
        if (newLevel < this._level) {
            this._level = newLevel;
        }
    }
}


/**
 * Apply registered serializers to the appropriate keys in the given fields.
 *
 * Pre-condition: This is only called if there is at least one serializer.
 *
 * @param fields (Object) The log record fields.
 * @param excludeFields (Object) Optional mapping of keys to `true` for
 *    keys to NOT apply a serializer.
 */
Logger.prototype._applySerializers = function (fields, excludeFields) {
    var self = this;

    xxx('_applySerializers: excludeFields', excludeFields);

    // Check each serializer against these (presuming number of serializers
    // is typically less than number of fields).
    Object.keys(this.serializers).forEach(function (name) {
        if (fields[name] === undefined ||
            (excludeFields && excludeFields[name]))
        {
            return;
        }
        xxx('_applySerializers; apply to "%s" key', name)
        try {
            fields[name] = self.serializers[name](fields[name]);
        } catch (err) {
            _warn(format('bunyan: ERROR: Exception thrown from the "%s" '
                + 'Bunyan serializer. This should never happen. This is a bug '
                + 'in that serializer function.\n%s',
                name, err.stack || err));
            fields[name] = format('(Error in Bunyan log "%s" serializer '
                + 'broke field. See stderr for details.)', name);
        }
    });
}


/**
 * Emit a log record.
 *
 * @param rec {log record}
 * @param noemit {Boolean} Optional. Set to true to skip emission
 *      and just return the JSON string.
 */
Logger.prototype._emit = function (rec, noemit) {
    var i;

    // Lazily determine if this Logger has non-'raw' streams. If there are
    // any, then we need to stringify the log record.
    if (this.haveNonRawStreams === undefined) {
        this.haveNonRawStreams = false;
        for (i = 0; i < this.streams.length; i++) {
            if (!this.streams[i].raw) {
                this.haveNonRawStreams = true;
                break;
            }
        }
    }

    // Stringify the object (creates a warning str on error).
    var str;
    if (noemit || this.haveNonRawStreams) {
        str = fastAndSafeJsonStringify(rec) + '\n';
    }

    if (noemit)
        return str;

    var level = rec.level;
    for (i = 0; i < this.streams.length; i++) {
        var s = this.streams[i];
        if (s.level <= level) {
            xxx('writing log rec "%s" to "%s" stream (%d <= %d): %j',
                rec.msg, s.type, s.level, level, rec);
            s.stream.write(s.raw ? rec : str);
        }
    };

    return str;
}


/**
 * Build a record object suitable for emitting from the arguments
 * provided to the a log emitter.
 */
function mkRecord(log, minLevel, args) {
    var excludeFields, fields, msgArgs;
    if (args[0] instanceof Error) {
        // `log.<level>(err, ...)`
        fields = {
            // Use this Logger's err serializer, if defined.
            err: (log.serializers && log.serializers.err
                ? log.serializers.err(args[0])
                : Logger.stdSerializers.err(args[0]))
        };
        excludeFields = {err: true};
        if (args.length === 1) {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    } else if (typeof (args[0]) !== 'object' || Array.isArray(args[0])) {
        // `log.<level>(msg, ...)`
        fields = null;
        msgArgs = args.slice();
    } else if (Buffer.isBuffer(args[0])) {  // `log.<level>(buf, ...)`
        // Almost certainly an error, show `inspect(buf)`. See bunyan
        // issue #35.
        fields = null;
        msgArgs = args.slice();
        msgArgs[0] = util.inspect(msgArgs[0]);
    } else {  // `log.<level>(fields, msg, ...)`
        fields = args[0];
        if (fields && args.length === 1 && fields.err &&
            fields.err instanceof Error)
        {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    }

    // Build up the record object.
    var rec = objCopy(log.fields);
    var level = rec.level = minLevel;
    var recFields = (fields ? objCopy(fields) : null);
    if (recFields) {
        if (log.serializers) {
            log._applySerializers(recFields, excludeFields);
        }
        Object.keys(recFields).forEach(function (k) {
            rec[k] = recFields[k];
        });
    }
    rec.msg = format.apply(log, msgArgs);
    if (!rec.time) {
        rec.time = (new Date());
    }
    // Get call source info
    if (log.src && !rec.src) {
        rec.src = getCaller3Info()
    }
    rec.v = LOG_VERSION;

    return rec;
};


/**
 * Build an array that dtrace-provider can use to fire a USDT probe. If we've
 * already built the appropriate string, we use it. Otherwise, build the
 * record object and stringify it.
 */
function mkProbeArgs(str, log, minLevel, msgArgs) {
    return [ str || log._emit(mkRecord(log, minLevel, msgArgs), true) ];
}


/**
 * Build a log emitter function for level minLevel. I.e. this is the
 * creator of `log.info`, `log.error`, etc.
 */
function mkLogEmitter(minLevel) {
    return function () {
        var log = this;
        var str = null;
        var rec = null;

        if (!this._emit) {
            /*
             * Show this invalid Bunyan usage warning *once*.
             *
             * See <https://github.com/trentm/node-bunyan/issues/100> for
             * an example of how this can happen.
             */
            var dedupKey = 'unbound';
            if (!_haveWarned[dedupKey]) {
                var caller = getCaller3Info();
                _warn(format('bunyan usage error: %s:%s: attempt to log '
                    + 'with an unbound log method: `this` is: %s',
                    caller.file, caller.line, util.inspect(this)),
                    dedupKey);
            }
            return;
        } else if (arguments.length === 0) {   // `log.<level>()`
            return (this._level <= minLevel);
        }

        var msgArgs = new Array(arguments.length);
        for (var i = 0; i < msgArgs.length; ++i) {
            msgArgs[i] = arguments[i];
        }

        if (this._level <= minLevel) {
            rec = mkRecord(log, minLevel, msgArgs);
            str = this._emit(rec);
        }

        if (probes) {
            probes[minLevel].fire(mkProbeArgs, str, log, minLevel, msgArgs);
        }
    }
}


/**
 * The functions below log a record at a specific level.
 *
 * Usages:
 *    log.<level>()  -> boolean is-trace-enabled
 *    log.<level>(<Error> err, [<string> msg, ...])
 *    log.<level>(<string> msg, ...)
 *    log.<level>(<object> fields, <string> msg, ...)
 *
 * where <level> is the lowercase version of the log level. E.g.:
 *
 *    log.info()
 *
 * @params fields {Object} Optional set of additional fields to log.
 * @params msg {String} Log message. This can be followed by additional
 *    arguments that are handled like
 *    [util.format](http://nodejs.org/docs/latest/api/all.html#util.format).
 */
Logger.prototype.trace = mkLogEmitter(TRACE);
Logger.prototype.debug = mkLogEmitter(DEBUG);
Logger.prototype.info = mkLogEmitter(INFO);
Logger.prototype.warn = mkLogEmitter(WARN);
Logger.prototype.error = mkLogEmitter(ERROR);
Logger.prototype.fatal = mkLogEmitter(FATAL);



//---- Standard serializers
// A serializer is a function that serializes a JavaScript object to a
// JSON representation for logging. There is a standard set of presumed
// interesting objects in node.js-land.

Logger.stdSerializers = {};

// Serialize an HTTP request.
Logger.stdSerializers.req = function (req) {
    if (!req || !req.connection)
        return req;
    return {
        method: req.method,
        url: req.url,
        headers: req.headers,
        remoteAddress: req.connection.remoteAddress,
        remotePort: req.connection.remotePort
    };
    // Trailers: Skipping for speed. If you need trailers in your app, then
    // make a custom serializer.
    //if (Object.keys(trailers).length > 0) {
    //  obj.trailers = req.trailers;
    //}
};

// Serialize an HTTP response.
Logger.stdSerializers.res = function (res) {
    if (!res || !res.statusCode)
        return res;
    return {
        statusCode: res.statusCode,
        header: res._header
    }
};


/*
 * This function dumps long stack traces for exceptions having a cause()
 * method. The error classes from
 * [verror](https://github.com/davepacheco/node-verror) and
 * [restify v2.0](https://github.com/mcavage/node-restify) are examples.
 *
 * Based on `dumpException` in
 * https://github.com/davepacheco/node-extsprintf/blob/master/lib/extsprintf.js
 */
function getFullErrorStack(ex)
{
    var ret = ex.stack || ex.toString();
    if (ex.cause && typeof (ex.cause) === 'function') {
        var cex = ex.cause();
        if (cex) {
            ret += '\nCaused by: ' + getFullErrorStack(cex);
        }
    }
    return (ret);
}

// Serialize an Error object
// (Core error properties are enumerable in node 0.4, not in 0.6).
var errSerializer = Logger.stdSerializers.err = function (err) {
    if (!err || !err.stack)
        return err;
    var obj = {
        message: err.message,
        name: err.name,
        stack: getFullErrorStack(err),
        code: err.code,
        signal: err.signal
    }
    return obj;
};


// A JSON stringifier that handles cycles safely - tracks seen values in a Set.
function safeCyclesSet() {
    var seen = new Set();
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.has(val)) {
            return '[Circular]';
        }
        seen.add(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely - tracks seen vals in an Array.
 *
 * Note: This approach has performance problems when dealing with large objects,
 * see trentm/node-bunyan#445, but since this is the only option for node 0.10
 * and earlier (as Set was introduced in Node 0.12), it's used as a fallback
 * when Set is not available.
 */
function safeCyclesArray() {
    var seen = [];
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.indexOf(val) !== -1) {
            return '[Circular]';
        }
        seen.push(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely.
 *
 * Usage: JSON.stringify(obj, safeCycles())
 *
 * Choose the best safe cycle function from what is available - see
 * trentm/node-bunyan#445.
 */
var safeCycles = typeof (Set) !== 'undefined' ? safeCyclesSet : safeCyclesArray;

/**
 * A fast JSON.stringify that handles cycles and getter exceptions (when
 * safeJsonStringify is installed).
 *
 * This function attempts to use the regular JSON.stringify for speed, but on
 * error (e.g. JSON cycle detection exception) it falls back to safe stringify
 * handlers that can deal with cycles and/or getter exceptions.
 */
function fastAndSafeJsonStringify(rec) {
    try {
        return JSON.stringify(rec);
    } catch (ex) {
        try {
            return JSON.stringify(rec, safeCycles());
        } catch (e) {
            if (safeJsonStringify) {
                return safeJsonStringify(rec);
            } else {
                var dedupKey = e.stack.split(/\n/g, 3).join('\n');
                _warn('bunyan: ERROR: Exception in '
                    + '`JSON.stringify(rec)`. You can install the '
                    + '"safe-json-stringify" module to have Bunyan fallback '
                    + 'to safer stringification. Record:\n'
                    + _indent(format('%s\n%s', util.inspect(rec), e.stack)),
                    dedupKey);
                return format('(Exception in JSON.stringify(rec): %j. '
                    + 'See stderr for details.)', e.message);
            }
        }
    }
}


var RotatingFileStream = null;
if (mv) {

RotatingFileStream = function RotatingFileStream(options) {
    this.path = options.path;

    this.count = (options.count == null ? 10 : options.count);
    assert.equal(typeof (this.count), 'number',
        format('rotating-file stream "count" is not a number: %j (%s) in %j',
            this.count, typeof (this.count), this));
    assert.ok(this.count >= 0,
        format('rotating-file stream "count" is not >= 0: %j in %j',
            this.count, this));

    // Parse `options.period`.
    if (options.period) {
        // <number><scope> where scope is:
        //    h   hours (at the start of the hour)
        //    d   days (at the start of the day, i.e. just after midnight)
        //    w   weeks (at the start of Sunday)
        //    m   months (on the first of the month)
        //    y   years (at the start of Jan 1st)
        // with special values 'hourly' (1h), 'daily' (1d), "weekly" (1w),
        // 'monthly' (1m) and 'yearly' (1y)
        var period = {
            'hourly': '1h',
            'daily': '1d',
            'weekly': '1w',
            'monthly': '1m',
            'yearly': '1y'
        }[options.period] || options.period;
        var m = /^([1-9][0-9]*)([hdwmy]|ms)$/.exec(period);
        if (!m) {
            throw new Error(format('invalid period: "%s"', options.period));
        }
        this.periodNum = Number(m[1]);
        this.periodScope = m[2];
    } else {
        this.periodNum = 1;
        this.periodScope = 'd';
    }

    var lastModified = null;
    try {
        var fileInfo = fs.statSync(this.path);
        lastModified = fileInfo.mtime.getTime();
    }
    catch (err) {
        // file doesn't exist
    }
    var rotateAfterOpen = false;
    if (lastModified) {
        var lastRotTime = this._calcRotTime(0);
        if (lastModified < lastRotTime) {
            rotateAfterOpen = true;
        }
    }

    // TODO: template support for backup files
    // template: <path to which to rotate>
    //      default is %P.%n
    //      '/var/log/archive/foo.log'  -> foo.log.%n
    //      '/var/log/archive/foo.log.%n'
    //      codes:
    //          XXX support strftime codes (per node version of those)
    //              or whatever module. Pick non-colliding for extra
    //              codes
    //          %P      `path` base value
    //          %n      integer number of rotated log (1,2,3,...)
    //          %d      datetime in YYYY-MM-DD_HH-MM-SS
    //                      XXX what should default date format be?
    //                          prior art? Want to avoid ':' in
    //                          filenames (illegal on Windows for one).

    this.stream = fs.createWriteStream(this.path,
        {flags: 'a', encoding: 'utf8'});

    this.rotQueue = [];
    this.rotating = false;
    if (rotateAfterOpen) {
        this._debug('rotateAfterOpen -> call rotate()');
        this.rotate();
    } else {
        this._setupNextRot();
    }
}

util.inherits(RotatingFileStream, EventEmitter);

RotatingFileStream.prototype._debug = function () {
    // Set this to `true` to add debug logging.
    if (false) {
        if (arguments.length === 0) {
            return true;
        }
        var args = Array.prototype.slice.call(arguments);
        args[0] = '[' + (new Date().toISOString()) + ', '
            + this.path + '] ' + args[0];
        console.log.apply(this, args);
    } else {
        return false;
    }
};

RotatingFileStream.prototype._setupNextRot = function () {
    this.rotAt = this._calcRotTime(1);
    this._setRotationTimer();
}

RotatingFileStream.prototype._setRotationTimer = function () {
    var self = this;
    var delay = this.rotAt - Date.now();
    // Cap timeout to Node's max setTimeout, see
    // <https://github.com/joyent/node/issues/8656>.
    var TIMEOUT_MAX = 2147483647; // 2^31-1
    if (delay > TIMEOUT_MAX) {
        delay = TIMEOUT_MAX;
    }
    this.timeout = setTimeout(
        function () {
            self._debug('_setRotationTimer timeout -> call rotate()');
            self.rotate();
        },
        delay);
    if (typeof (this.timeout.unref) === 'function') {
        this.timeout.unref();
    }
}

RotatingFileStream.prototype._calcRotTime =
function _calcRotTime(periodOffset) {
    this._debug('_calcRotTime: %s%s', this.periodNum, this.periodScope);
    var d = new Date();

    this._debug('  now local: %s', d);
    this._debug('    now utc: %s', d.toISOString());
    var rotAt;
    switch (this.periodScope) {
    case 'ms':
        // Hidden millisecond period for debugging.
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * periodOffset;
        } else {
            rotAt = Date.now() + this.periodNum * periodOffset;
        }
        break;
    case 'h':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 60 * 60 * 1000 * periodOffset;
        } else {
            // First time: top of the next hour.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate(), d.getUTCHours() + periodOffset);
        }
        break;
    case 'd':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: start of tomorrow (i.e. at the coming midnight) UTC.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + periodOffset);
        }
        break;
    case 'w':
        // Currently, always on Sunday morning at 00:00:00 (UTC).
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 7 * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: this coming Sunday.
            var dayOffset = (7 - d.getUTCDay());
            if (periodOffset < 1) {
                dayOffset = -d.getUTCDay();
            }
            if (periodOffset > 1 || periodOffset < -1) {
                dayOffset += 7 * periodOffset;
            }
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + dayOffset);
        }
        break;
    case 'm':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + this.periodNum * periodOffset, 1);
        } else {
            // First time: the start of the next month.
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + periodOffset, 1);
        }
        break;
    case 'y':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear() + this.periodNum * periodOffset,
                0, 1);
        } else {
            // First time: the start of the next year.
            rotAt = Date.UTC(d.getUTCFullYear() + periodOffset, 0, 1);
        }
        break;
    default:
        assert.fail(format('invalid period scope: "%s"', this.periodScope));
    }

    if (this._debug()) {
        this._debug('  **rotAt**: %s (utc: %s)', rotAt,
            new Date(rotAt).toUTCString());
        var now = Date.now();
        this._debug('        now: %s (%sms == %smin == %sh to go)',
            now,
            rotAt - now,
            (rotAt-now)/1000/60,
            (rotAt-now)/1000/60/60);
    }
    return rotAt;
};

RotatingFileStream.prototype.rotate = function rotate() {
    // XXX What about shutdown?
    var self = this;

    // If rotation period is > ~25 days, we have to break into multiple
    // setTimeout's. See <https://github.com/joyent/node/issues/8656>.
    if (self.rotAt && self.rotAt > Date.now()) {
        return self._setRotationTimer();
    }

    this._debug('rotate');
    if (self.rotating) {
        throw new TypeError('cannot start a rotation when already rotating');
    }
    self.rotating = true;

    self.stream.end();  // XXX can do moves sync after this? test at high rate

    function del() {
        var toDel = self.path + '.' + String(n - 1);
        if (n === 0) {
            toDel = self.path;
        }
        n -= 1;
        self._debug('  rm %s', toDel);
        fs.unlink(toDel, function (delErr) {
            //XXX handle err other than not exists
            moves();
        });
    }

    function moves() {
        if (self.count === 0 || n < 0) {
            return finish();
        }
        var before = self.path;
        var after = self.path + '.' + String(n);
        if (n > 0) {
            before += '.' + String(n - 1);
        }
        n -= 1;
        fs.exists(before, function (exists) {
            if (!exists) {
                moves();
            } else {
                self._debug('  mv %s %s', before, after);
                mv(before, after, function (mvErr) {
                    if (mvErr) {
                        self.emit('error', mvErr);
                        finish(); // XXX finish here?
                    } else {
                        moves();
                    }
                });
            }
        })
    }

    function finish() {
        self._debug('  open %s', self.path);
        self.stream = fs.createWriteStream(self.path,
            {flags: 'a', encoding: 'utf8'});
        var q = self.rotQueue, len = q.length;
        for (var i = 0; i < len; i++) {
            self.stream.write(q[i]);
        }
        self.rotQueue = [];
        self.rotating = false;
        self.emit('drain');
        self._setupNextRot();
    }

    var n = this.count;
    del();
};

RotatingFileStream.prototype.write = function write(s) {
    if (this.rotating) {
        this.rotQueue.push(s);
        return false;
    } else {
        return this.stream.write(s);
    }
};

RotatingFileStream.prototype.end = function end(s) {
    this.stream.end();
};

RotatingFileStream.prototype.destroy = function destroy(s) {
    this.stream.destroy();
};

RotatingFileStream.prototype.destroySoon = function destroySoon(s) {
    this.stream.destroySoon();
};

} /* if (mv) */



/**
 * RingBuffer is a Writable Stream that just stores the last N records in
 * memory.
 *
 * @param options {Object}, with the following fields:
 *
 *    - limit: number of records to keep in memory
 */
function RingBuffer(options) {
    this.limit = options && options.limit ? options.limit : 100;
    this.writable = true;
    this.records = [];
    EventEmitter.call(this);
}

util.inherits(RingBuffer, EventEmitter);

RingBuffer.prototype.write = function (record) {
    if (!this.writable)
        throw (new Error('RingBuffer has been ended already'));

    this.records.push(record);

    if (this.records.length > this.limit)
        this.records.shift();

    return (true);
};

RingBuffer.prototype.end = function () {
    if (arguments.length > 0)
        this.write.apply(this, Array.prototype.slice.call(arguments));
    this.writable = false;
};

RingBuffer.prototype.destroy = function () {
    this.writable = false;
    this.emit('close');
};

RingBuffer.prototype.destroySoon = function () {
    this.destroy();
};


//---- Exports

module.exports = Logger;

module.exports.TRACE = TRACE;
module.exports.DEBUG = DEBUG;
module.exports.INFO = INFO;
module.exports.WARN = WARN;
module.exports.ERROR = ERROR;
module.exports.FATAL = FATAL;
module.exports.resolveLevel = resolveLevel;
module.exports.levelFromName = levelFromName;
module.exports.nameFromLevel = nameFromLevel;

module.exports.VERSION = VERSION;
module.exports.LOG_VERSION = LOG_VERSION;

module.exports.createLogger = function createLogger(options) {
    return new Logger(options);
};

module.exports.RingBuffer = RingBuffer;
module.exports.RotatingFileStream = RotatingFileStream;

// Useful for custom `type == 'raw'` streams that may do JSON stringification
// of log records themselves. Usage:
//    var str = JSON.stringify(rec, bunyan.safeCycles());
module.exports.safeCycles = safeCycles;
 at SyntaxError: Unexpected token (85:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"_bound":3}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"_bound":4,"ExpansionArg_int":0} start 17.8621 took 9.6472s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"_bound":4,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (85:4) on program /**
 * Copyright (c) 2017 Trent Mick.
 * Copyright (c) 2017 Joyent Inc.
 *
 * The bunyan logging library for node.js.
 *
 * -*- mode: js -*-
 * vim: expandtab:ts=4:sw=4
 */

var VERSION = '1.8.12';

/*
 * Bunyan log format version. This becomes the 'v' field on all log records.
 * This will be incremented if there is any backward incompatible change to
 * the log record format. Details will be in 'CHANGES.md' (the change log).
 */
var LOG_VERSION = 0;


var xxx = function xxx(s) {     // internal dev/debug logging
    var args = ['XX' + 'X: '+s].concat(
        Array.prototype.slice.call(arguments, 1));
    console.error.apply(this, args);
};
var xxx = function xxx() {};  // comment out to turn on debug logging


/*
 * Runtime environment notes:
 *
 * Bunyan is intended to run in a number of runtime environments. Here are
 * some notes on differences for those envs and how the code copes.
 *
 * - node.js: The primary target environment.
 * - NW.js: http://nwjs.io/  An *app* environment that feels like both a
 *   node env -- it has node-like globals (`process`, `global`) and
 *   browser-like globals (`window`, `navigator`). My *understanding* is that
 *   bunyan can operate as if this is vanilla node.js.
 * - browser: Failing the above, we sniff using the `window` global
 *   <https://developer.mozilla.org/en-US/docs/Web/API/Window/window>.
 *      - browserify: http://browserify.org/  A browser-targetting bundler of
 *        node.js deps. The runtime is a browser env, so can't use fs access,
 *        etc. Browserify's build looks for `require(<single-string>)` imports
 *        to bundle. For some imports it won't be able to handle, we "hide"
 *        from browserify with `require('frobshizzle' + '')`.
 * - Other? Please open issues if things are broken.
 */
var runtimeEnv;
if (typeof (process) !== 'undefined' && process.versions) {
    if (process.versions.nw) {
        runtimeEnv = 'nw';
    } else if (process.versions.node) {
        runtimeEnv = 'node';
    }
}
if (!runtimeEnv && typeof (window) !== 'undefined' &&
    window.window === window) {
    runtimeEnv = 'browser';
}
if (!runtimeEnv) {
    throw new Error('unknown runtime environment');
}


var os, fs, dtrace;
if (runtimeEnv === 'browser') {
    os = {
        hostname: function () {
            return window.location.host;
        }
    };
    fs = {};
    dtrace = null;
} else {
    os = require('os');
    fs = require('fs');
    try {
        dtrace = require('dtrace-provider' + '');
    } catch (e) {
        dtrace = null;
    }
}
var util = require('util');
var assert = require('assert');
var EventEmitter = require('events').EventEmitter;
var stream = require('stream');

try {
    var safeJsonStringify = require('safe-json-stringify');
} catch (e) {
    safeJsonStringify = null;
}
if (process.env.BUNYAN_TEST_NO_SAFE_JSON_STRINGIFY) {
    safeJsonStringify = null;
}

// The 'mv' module is required for rotating-file stream support.
try {
    var mv = require('mv' + '');
} catch (e) {
    mv = null;
}

try {
    var sourceMapSupport = require('source-map-support' + '');
} catch (_) {
    sourceMapSupport = null;
}


//---- Internal support stuff

/**
 * A shallow copy of an object. Bunyan logging attempts to never cause
 * exceptions, so this function attempts to handle non-objects gracefully.
 */
function objCopy(obj) {
    if (obj == null) {  // null or undefined
        return obj;
    } else if (Array.isArray(obj)) {
        return obj.slice();
    } else if (typeof (obj) === 'object') {
        var copy = {};
        Object.keys(obj).forEach(function (k) {
            copy[k] = obj[k];
        });
        return copy;
    } else {
        return obj;
    }
}

var format = util.format;
if (!format) {
    // If node < 0.6, then use its `util.format`:
    // <https://github.com/joyent/node/blob/master/lib/util.js#L22>:
    var inspect = util.inspect;
    var formatRegExp = /%[sdj%]/g;
    format = function format(f) {
        if (typeof (f) !== 'string') {
            var objects = [];
            for (var i = 0; i < arguments.length; i++) {
                objects.push(inspect(arguments[i]));
            }
            return objects.join(' ');
        }

        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function (x) {
            if (i >= len)
                return x;
            switch (x) {
                case '%s': return String(args[i++]);
                case '%d': return Number(args[i++]);
                case '%j': return fastAndSafeJsonStringify(args[i++]);
                case '%%': return '%';
                default:
                    return x;
            }
        });
        for (var x = args[i]; i < len; x = args[++i]) {
            if (x === null || typeof (x) !== 'object') {
                str += ' ' + x;
            } else {
                str += ' ' + inspect(x);
            }
        }
        return str;
    };
}


/**
 * Gather some caller info 3 stack levels up.
 * See <http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi>.
 */
function getCaller3Info() {
    if (this === undefined) {
        // Cannot access caller info in 'strict' mode.
        return;
    }
    var obj = {};
    var saveLimit = Error.stackTraceLimit;
    var savePrepare = Error.prepareStackTrace;
    Error.stackTraceLimit = 3;

    Error.prepareStackTrace = function (_, stack) {
        var caller = stack[2];
        if (sourceMapSupport) {
            caller = sourceMapSupport.wrapCallSite(caller);
        }
        obj.file = caller.getFileName();
        obj.line = caller.getLineNumber();
        var func = caller.getFunctionName();
        if (func)
            obj.func = func;
    };
    Error.captureStackTrace(this, getCaller3Info);
    this.stack;

    Error.stackTraceLimit = saveLimit;
    Error.prepareStackTrace = savePrepare;
    return obj;
}


function _indent(s, indent) {
    if (!indent) indent = '    ';
    var lines = s.split(/\r?\n/g);
    return indent + lines.join('\n' + indent);
}


/**
 * Warn about an bunyan processing error.
 *
 * @param msg {String} Message with which to warn.
 * @param dedupKey {String} Optional. A short string key for this warning to
 *      have its warning only printed once.
 */
function _warn(msg, dedupKey) {
    assert.ok(msg);
    if (dedupKey) {
        if (_warned[dedupKey]) {
            return;
        }
        _warned[dedupKey] = true;
    }
    process.stderr.write(msg + '\n');
}
function _haveWarned(dedupKey) {
    return _warned[dedupKey];
}
var _warned = {};


function ConsoleRawStream() {}
ConsoleRawStream.prototype.write = function (rec) {
    if (rec.level < INFO) {
        console.log(rec);
    } else if (rec.level < WARN) {
        console.info(rec);
    } else if (rec.level < ERROR) {
        console.warn(rec);
    } else {
        console.error(rec);
    }
};


//---- Levels

var TRACE = 10;
var DEBUG = 20;
var INFO = 30;
var WARN = 40;
var ERROR = 50;
var FATAL = 60;

var levelFromName = {
    'trace': TRACE,
    'debug': DEBUG,
    'info': INFO,
    'warn': WARN,
    'error': ERROR,
    'fatal': FATAL
};
var nameFromLevel = {};
Object.keys(levelFromName).forEach(function (name) {
    nameFromLevel[levelFromName[name]] = name;
});

// Dtrace probes.
var dtp = undefined;
var probes = dtrace && {};

/**
 * Resolve a level number, name (upper or lowercase) to a level number value.
 *
 * @param nameOrNum {String|Number} A level name (case-insensitive) or positive
 *      integer level.
 * @api public
 */
function resolveLevel(nameOrNum) {
    var level;
    var type = typeof (nameOrNum);
    if (type === 'string') {
        level = levelFromName[nameOrNum.toLowerCase()];
        if (!level) {
            throw new Error(format('unknown level name: "%s"', nameOrNum));
        }
    } else if (type !== 'number') {
        throw new TypeError(format('cannot resolve level: invalid arg (%s):',
            type, nameOrNum));
    } else if (nameOrNum < 0 || Math.floor(nameOrNum) !== nameOrNum) {
        throw new TypeError(format('level is not a positive integer: %s',
            nameOrNum));
    } else {
        level = nameOrNum;
    }
    return level;
}


function isWritable(obj) {
    if (obj instanceof stream.Writable) {
        return true;
    }
    return typeof (obj.write) === 'function';
}


//---- Logger class

/**
 * Create a Logger instance.
 *
 * @param options {Object} See documentation for full details. At minimum
 *    this must include a 'name' string key. Configuration keys:
 *      - `streams`: specify the logger output streams. This is an array of
 *        objects with these fields:
 *          - `type`: The stream type. See README.md for full details.
 *            Often this is implied by the other fields. Examples are
 *            'file', 'stream' and "raw".
 *          - `level`: Defaults to 'info'.
 *          - `path` or `stream`: The specify the file path or writeable
 *            stream to which log records are written. E.g.
 *            `stream: process.stdout`.
 *          - `closeOnExit` (boolean): Optional. Default is true for a
 *            'file' stream when `path` is given, false otherwise.
 *        See README.md for full details.
 *      - `level`: set the level for a single output stream (cannot be used
 *        with `streams`)
 *      - `stream`: the output stream for a logger with just one, e.g.
 *        `process.stdout` (cannot be used with `streams`)
 *      - `serializers`: object mapping log record field names to
 *        serializing functions. See README.md for details.
 *      - `src`: Boolean (default false). Set true to enable 'src' automatic
 *        field with log call source info.
 *    All other keys are log record fields.
 *
 * An alternative *internal* call signature is used for creating a child:
 *    new Logger(<parent logger>, <child options>[, <child opts are simple>]);
 *
 * @param _childSimple (Boolean) An assertion that the given `_childOptions`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation.
 */
function Logger(options, _childOptions, _childSimple) {
    xxx('Logger start:', options)
    if (!(this instanceof Logger)) {
        return new Logger(options, _childOptions);
    }

    // Input arg validation.
    var parent;
    if (_childOptions !== undefined) {
        parent = options;
        options = _childOptions;
        if (!(parent instanceof Logger)) {
            throw new TypeError(
                'invalid Logger creation: do not pass a second arg');
        }
    }
    if (!options) {
        throw new TypeError('options (object) is required');
    }
    if (!parent) {
        if (!options.name) {
            throw new TypeError('options.name (string) is required');
        }
    } else {
        if (options.name) {
            throw new TypeError(
                'invalid options.name: child cannot set logger name');
        }
    }
    if (options.stream && options.streams) {
        throw new TypeError('cannot mix "streams" and "stream" options');
    }
    if (options.streams && !Array.isArray(options.streams)) {
        throw new TypeError('invalid options.streams: must be an array')
    }
    if (options.serializers && (typeof (options.serializers) !== 'object' ||
            Array.isArray(options.serializers))) {
        throw new TypeError('invalid options.serializers: must be an object')
    }

    EventEmitter.call(this);

    // Fast path for simple child creation.
    if (parent && _childSimple) {
        // `_isSimpleChild` is a signal to stream close handling that this child
        // owns none of its streams.
        this._isSimpleChild = true;

        this._level = parent._level;
        this.streams = parent.streams;
        this.serializers = parent.serializers;
        this.src = parent.src;
        var fields = this.fields = {};
        var parentFieldNames = Object.keys(parent.fields);
        for (var i = 0; i < parentFieldNames.length; i++) {
            var name = parentFieldNames[i];
            fields[name] = parent.fields[name];
        }
        var names = Object.keys(options);
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            fields[name] = options[name];
        }
        return;
    }

    // Start values.
    var self = this;
    if (parent) {
        this._level = parent._level;
        this.streams = [];
        for (var i = 0; i < parent.streams.length; i++) {
            var s = objCopy(parent.streams[i]);
            s.closeOnExit = false; // Don't own parent stream.
            this.streams.push(s);
        }
        this.serializers = objCopy(parent.serializers);
        this.src = parent.src;
        this.fields = objCopy(parent.fields);
        if (options.level) {
            this.level(options.level);
        }
    } else {
        this._level = Number.POSITIVE_INFINITY;
        this.streams = [];
        this.serializers = null;
        this.src = false;
        this.fields = {};
    }

    if (!dtp && dtrace) {
        dtp = dtrace.createDTraceProvider('bunyan');

        for (var level in levelFromName) {
            var probe;

            probes[levelFromName[level]] = probe =
                dtp.addProbe('log-' + level, 'char *');

            // Explicitly add a reference to dtp to prevent it from being GC'd
            probe.dtp = dtp;
        }

        dtp.enable();
    }

    // Handle *config* options (i.e. options that are not just plain data
    // for log records).
    if (options.stream) {
        self.addStream({
            type: 'stream',
            stream: options.stream,
            closeOnExit: false,
            level: options.level
        });
    } else if (options.streams) {
        options.streams.forEach(function (s) {
            self.addStream(s, options.level);
        });
    } else if (parent && options.level) {
        this.level(options.level);
    } else if (!parent) {
        if (runtimeEnv === 'browser') {
            /*
             * In the browser we'll be emitting to console.log by default.
             * Any console.log worth its salt these days can nicely render
             * and introspect objects (e.g. the Firefox and Chrome console)
             * so let's emit the raw log record. Are there browsers for which
             * that breaks things?
             */
            self.addStream({
                type: 'raw',
                stream: new ConsoleRawStream(),
                closeOnExit: false,
                level: options.level
            });
        } else {
            self.addStream({
                type: 'stream',
                stream: process.stdout,
                closeOnExit: false,
                level: options.level
            });
        }
    }
    if (options.serializers) {
        self.addSerializers(options.serializers);
    }
    if (options.src) {
        this.src = true;
    }
    xxx('Logger: ', self)

    // Fields.
    // These are the default fields for log records (minus the attributes
    // removed in this constructor). To allow storing raw log records
    // (unrendered), `this.fields` must never be mutated. Create a copy for
    // any changes.
    var fields = objCopy(options);
    delete fields.stream;
    delete fields.level;
    delete fields.streams;
    delete fields.serializers;
    delete fields.src;
    if (this.serializers) {
        this._applySerializers(fields);
    }
    if (!fields.hostname && !self.fields.hostname) {
        fields.hostname = os.hostname();
    }
    if (!fields.pid) {
        fields.pid = process.pid;
    }
    Object.keys(fields).forEach(function (k) {
        self.fields[k] = fields[k];
    });
}

util.inherits(Logger, EventEmitter);


/**
 * Add a stream
 *
 * @param stream {Object}. Object with these fields:
 *    - `type`: The stream type. See README.md for full details.
 *      Often this is implied by the other fields. Examples are
 *      'file', 'stream' and "raw".
 *    - `path` or `stream`: The specify the file path or writeable
 *      stream to which log records are written. E.g.
 *      `stream: process.stdout`.
 *    - `level`: Optional. Falls back to `defaultLevel`.
 *    - `closeOnExit` (boolean): Optional. Default is true for a
 *      'file' stream when `path` is given, false otherwise.
 *    See README.md for full details.
 * @param defaultLevel {Number|String} Optional. A level to use if
 *      `stream.level` is not set. If neither is given, this defaults to INFO.
 */
Logger.prototype.addStream = function addStream(s, defaultLevel) {
    var self = this;
    if (defaultLevel === null || defaultLevel === undefined) {
        defaultLevel = INFO;
    }

    s = objCopy(s);

    // Implicit 'type' from other args.
    if (!s.type) {
        if (s.stream) {
            s.type = 'stream';
        } else if (s.path) {
            s.type = 'file'
        }
    }
    s.raw = (s.type === 'raw');  // PERF: Allow for faster check in `_emit`.

    if (s.level !== undefined) {
        s.level = resolveLevel(s.level);
    } else {
        s.level = resolveLevel(defaultLevel);
    }
    if (s.level < self._level) {
        self._level = s.level;
    }

    switch (s.type) {
    case 'stream':
        assert.ok(isWritable(s.stream),
                  '"stream" stream is not writable: ' + util.inspect(s.stream));

        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    case 'file':
        if (s.reemitErrorEvents === undefined) {
            s.reemitErrorEvents = true;
        }
        if (!s.stream) {
            s.stream = fs.createWriteStream(s.path,
                                            {flags: 'a', encoding: 'utf8'});
            if (!s.closeOnExit) {
                s.closeOnExit = true;
            }
        } else {
            if (!s.closeOnExit) {
                s.closeOnExit = false;
            }
        }
        break;
    case 'rotating-file':
        assert.ok(!s.stream,
                  '"rotating-file" stream should not give a "stream"');
        assert.ok(s.path);
        assert.ok(mv, '"rotating-file" stream type is not supported: '
                      + 'missing "mv" module');
        s.stream = new RotatingFileStream(s);
        if (!s.closeOnExit) {
            s.closeOnExit = true;
        }
        break;
    case 'raw':
        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    default:
        throw new TypeError('unknown stream type "' + s.type + '"');
    }

    if (s.reemitErrorEvents && typeof (s.stream.on) === 'function') {
        // TODO: When we have `<logger>.close()`, it should remove event
        //      listeners to not leak Logger instances.
        s.stream.on('error', function onStreamError(err) {
            self.emit('error', err, s);
        });
    }

    self.streams.push(s);
    delete self.haveNonRawStreams;  // reset
}


/**
 * Add serializers
 *
 * @param serializers {Object} Optional. Object mapping log record field names
 *    to serializing functions. See README.md for details.
 */
Logger.prototype.addSerializers = function addSerializers(serializers) {
    var self = this;

    if (!self.serializers) {
        self.serializers = {};
    }
    Object.keys(serializers).forEach(function (field) {
        var serializer = serializers[field];
        if (typeof (serializer) !== 'function') {
            throw new TypeError(format(
                'invalid serializer for "%s" field: must be a function',
                field));
        } else {
            self.serializers[field] = serializer;
        }
    });
}



/**
 * Create a child logger, typically to add a few log record fields.
 *
 * This can be useful when passing a logger to a sub-component, e.g. a
 * 'wuzzle' component of your service:
 *
 *    var wuzzleLog = log.child({component: 'wuzzle'})
 *    var wuzzle = new Wuzzle({..., log: wuzzleLog})
 *
 * Then log records from the wuzzle code will have the same structure as
 * the app log, *plus the component='wuzzle' field*.
 *
 * @param options {Object} Optional. Set of options to apply to the child.
 *    All of the same options for a new Logger apply here. Notes:
 *      - The parent's streams are inherited and cannot be removed in this
 *        call. Any given `streams` are *added* to the set inherited from
 *        the parent.
 *      - The parent's serializers are inherited, though can effectively be
 *        overwritten by using duplicate keys.
 *      - Can use `level` to set the level of the streams inherited from
 *        the parent. The level for the parent is NOT affected.
 * @param simple {Boolean} Optional. Set to true to assert that `options`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation. See 'tools/timechild.js' for numbers.
 */
Logger.prototype.child = function (options, simple) {
    return new (this.constructor)(this, options || {}, simple);
}


/**
 * A convenience method to reopen 'file' streams on a logger. This can be
 * useful with external log rotation utilities that move and re-open log files
 * (e.g. logrotate on Linux, logadm on SmartOS/Illumos). Those utilities
 * typically have rotation options to copy-and-truncate the log file, but
 * you may not want to use that. An alternative is to do this in your
 * application:
 *
 *      var log = bunyan.createLogger(...);
 *      ...
 *      process.on('SIGUSR2', function () {
 *          log.reopenFileStreams();
 *      });
 *      ...
 *
 * See <https://github.com/trentm/node-bunyan/issues/104>.
 */
Logger.prototype.reopenFileStreams = function () {
    var self = this;
    self.streams.forEach(function (s) {
        if (s.type === 'file') {
            if (s.stream) {
                // Not sure if typically would want this, or more immediate
                // `s.stream.destroy()`.
                s.stream.end();
                s.stream.destroySoon();
                delete s.stream;
            }
            s.stream = fs.createWriteStream(s.path,
                {flags: 'a', encoding: 'utf8'});
            s.stream.on('error', function (err) {
                self.emit('error', err, s);
            });
        }
    });
};


/* BEGIN JSSTYLED */
/**
 * Close this logger.
 *
 * This closes streams (that it owns, as per 'endOnClose' attributes on
 * streams), etc. Typically you **don't** need to bother calling this.
Logger.prototype.close = function () {
    if (this._closed) {
        return;
    }
    if (!this._isSimpleChild) {
        self.streams.forEach(function (s) {
            if (s.endOnClose) {
                xxx('closing stream s:', s);
                s.stream.end();
                s.endOnClose = false;
            }
        });
    }
    this._closed = true;
}
 */
/* END JSSTYLED */


/**
 * Get/set the level of all streams on this logger.
 *
 * Get Usage:
 *    // Returns the current log level (lowest level of all its streams).
 *    log.level() -> INFO
 *
 * Set Usage:
 *    log.level(INFO)       // set all streams to level INFO
 *    log.level('info')     // can use 'info' et al aliases
 */
Logger.prototype.level = function level(value) {
    if (value === undefined) {
        return this._level;
    }
    var newLevel = resolveLevel(value);
    var len = this.streams.length;
    for (var i = 0; i < len; i++) {
        this.streams[i].level = newLevel;
    }
    this._level = newLevel;
}


/**
 * Get/set the level of a particular stream on this logger.
 *
 * Get Usage:
 *    // Returns an array of the levels of each stream.
 *    log.levels() -> [TRACE, INFO]
 *
 *    // Returns a level of the identified stream.
 *    log.levels(0) -> TRACE      // level of stream at index 0
 *    log.levels('foo')           // level of stream with name 'foo'
 *
 * Set Usage:
 *    log.levels(0, INFO)         // set level of stream 0 to INFO
 *    log.levels(0, 'info')       // can use 'info' et al aliases
 *    log.levels('foo', WARN)     // set stream named 'foo' to WARN
 *
 * Stream names: When streams are defined, they can optionally be given
 * a name. For example,
 *       log = new Logger({
 *         streams: [
 *           {
 *             name: 'foo',
 *             path: '/var/log/my-service/foo.log'
 *             level: 'trace'
 *           },
 *         ...
 *
 * @param name {String|Number} The stream index or name.
 * @param value {Number|String} The level value (INFO) or alias ('info').
 *    If not given, this is a 'get' operation.
 * @throws {Error} If there is no stream with the given name.
 */
Logger.prototype.levels = function levels(name, value) {
    if (name === undefined) {
        assert.equal(value, undefined);
        return this.streams.map(
            function (s) { return s.level });
    }
    var stream;
    if (typeof (name) === 'number') {
        stream = this.streams[name];
        if (stream === undefined) {
            throw new Error('invalid stream index: ' + name);
        }
    } else {
        var len = this.streams.length;
        for (var i = 0; i < len; i++) {
            var s = this.streams[i];
            if (s.name === name) {
                stream = s;
                break;
            }
        }
        if (!stream) {
            throw new Error(format('no stream with name "%s"', name));
        }
    }
    if (value === undefined) {
        return stream.level;
    } else {
        var newLevel = resolveLevel(value);
        stream.level = newLevel;
        if (newLevel < this._level) {
            this._level = newLevel;
        }
    }
}


/**
 * Apply registered serializers to the appropriate keys in the given fields.
 *
 * Pre-condition: This is only called if there is at least one serializer.
 *
 * @param fields (Object) The log record fields.
 * @param excludeFields (Object) Optional mapping of keys to `true` for
 *    keys to NOT apply a serializer.
 */
Logger.prototype._applySerializers = function (fields, excludeFields) {
    var self = this;

    xxx('_applySerializers: excludeFields', excludeFields);

    // Check each serializer against these (presuming number of serializers
    // is typically less than number of fields).
    Object.keys(this.serializers).forEach(function (name) {
        if (fields[name] === undefined ||
            (excludeFields && excludeFields[name]))
        {
            return;
        }
        xxx('_applySerializers; apply to "%s" key', name)
        try {
            fields[name] = self.serializers[name](fields[name]);
        } catch (err) {
            _warn(format('bunyan: ERROR: Exception thrown from the "%s" '
                + 'Bunyan serializer. This should never happen. This is a bug '
                + 'in that serializer function.\n%s',
                name, err.stack || err));
            fields[name] = format('(Error in Bunyan log "%s" serializer '
                + 'broke field. See stderr for details.)', name);
        }
    });
}


/**
 * Emit a log record.
 *
 * @param rec {log record}
 * @param noemit {Boolean} Optional. Set to true to skip emission
 *      and just return the JSON string.
 */
Logger.prototype._emit = function (rec, noemit) {
    var i;

    // Lazily determine if this Logger has non-'raw' streams. If there are
    // any, then we need to stringify the log record.
    if (this.haveNonRawStreams === undefined) {
        this.haveNonRawStreams = false;
        for (i = 0; i < this.streams.length; i++) {
            if (!this.streams[i].raw) {
                this.haveNonRawStreams = true;
                break;
            }
        }
    }

    // Stringify the object (creates a warning str on error).
    var str;
    if (noemit || this.haveNonRawStreams) {
        str = fastAndSafeJsonStringify(rec) + '\n';
    }

    if (noemit)
        return str;

    var level = rec.level;
    for (i = 0; i < this.streams.length; i++) {
        var s = this.streams[i];
        if (s.level <= level) {
            xxx('writing log rec "%s" to "%s" stream (%d <= %d): %j',
                rec.msg, s.type, s.level, level, rec);
            s.stream.write(s.raw ? rec : str);
        }
    };

    return str;
}


/**
 * Build a record object suitable for emitting from the arguments
 * provided to the a log emitter.
 */
function mkRecord(log, minLevel, args) {
    var excludeFields, fields, msgArgs;
    if (args[0] instanceof Error) {
        // `log.<level>(err, ...)`
        fields = {
            // Use this Logger's err serializer, if defined.
            err: (log.serializers && log.serializers.err
                ? log.serializers.err(args[0])
                : Logger.stdSerializers.err(args[0]))
        };
        excludeFields = {err: true};
        if (args.length === 1) {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    } else if (typeof (args[0]) !== 'object' || Array.isArray(args[0])) {
        // `log.<level>(msg, ...)`
        fields = null;
        msgArgs = args.slice();
    } else if (Buffer.isBuffer(args[0])) {  // `log.<level>(buf, ...)`
        // Almost certainly an error, show `inspect(buf)`. See bunyan
        // issue #35.
        fields = null;
        msgArgs = args.slice();
        msgArgs[0] = util.inspect(msgArgs[0]);
    } else {  // `log.<level>(fields, msg, ...)`
        fields = args[0];
        if (fields && args.length === 1 && fields.err &&
            fields.err instanceof Error)
        {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    }

    // Build up the record object.
    var rec = objCopy(log.fields);
    var level = rec.level = minLevel;
    var recFields = (fields ? objCopy(fields) : null);
    if (recFields) {
        if (log.serializers) {
            log._applySerializers(recFields, excludeFields);
        }
        Object.keys(recFields).forEach(function (k) {
            rec[k] = recFields[k];
        });
    }
    rec.msg = format.apply(log, msgArgs);
    if (!rec.time) {
        rec.time = (new Date());
    }
    // Get call source info
    if (log.src && !rec.src) {
        rec.src = getCaller3Info()
    }
    rec.v = LOG_VERSION;

    return rec;
};


/**
 * Build an array that dtrace-provider can use to fire a USDT probe. If we've
 * already built the appropriate string, we use it. Otherwise, build the
 * record object and stringify it.
 */
function mkProbeArgs(str, log, minLevel, msgArgs) {
    return [ str || log._emit(mkRecord(log, minLevel, msgArgs), true) ];
}


/**
 * Build a log emitter function for level minLevel. I.e. this is the
 * creator of `log.info`, `log.error`, etc.
 */
function mkLogEmitter(minLevel) {
    return function () {
        var log = this;
        var str = null;
        var rec = null;

        if (!this._emit) {
            /*
             * Show this invalid Bunyan usage warning *once*.
             *
             * See <https://github.com/trentm/node-bunyan/issues/100> for
             * an example of how this can happen.
             */
            var dedupKey = 'unbound';
            if (!_haveWarned[dedupKey]) {
                var caller = getCaller3Info();
                _warn(format('bunyan usage error: %s:%s: attempt to log '
                    + 'with an unbound log method: `this` is: %s',
                    caller.file, caller.line, util.inspect(this)),
                    dedupKey);
            }
            return;
        } else if (arguments.length === 0) {   // `log.<level>()`
            return (this._level <= minLevel);
        }

        var msgArgs = new Array(arguments.length);
        for (var i = 0; i < msgArgs.length; ++i) {
            msgArgs[i] = arguments[i];
        }

        if (this._level <= minLevel) {
            rec = mkRecord(log, minLevel, msgArgs);
            str = this._emit(rec);
        }

        if (probes) {
            probes[minLevel].fire(mkProbeArgs, str, log, minLevel, msgArgs);
        }
    }
}


/**
 * The functions below log a record at a specific level.
 *
 * Usages:
 *    log.<level>()  -> boolean is-trace-enabled
 *    log.<level>(<Error> err, [<string> msg, ...])
 *    log.<level>(<string> msg, ...)
 *    log.<level>(<object> fields, <string> msg, ...)
 *
 * where <level> is the lowercase version of the log level. E.g.:
 *
 *    log.info()
 *
 * @params fields {Object} Optional set of additional fields to log.
 * @params msg {String} Log message. This can be followed by additional
 *    arguments that are handled like
 *    [util.format](http://nodejs.org/docs/latest/api/all.html#util.format).
 */
Logger.prototype.trace = mkLogEmitter(TRACE);
Logger.prototype.debug = mkLogEmitter(DEBUG);
Logger.prototype.info = mkLogEmitter(INFO);
Logger.prototype.warn = mkLogEmitter(WARN);
Logger.prototype.error = mkLogEmitter(ERROR);
Logger.prototype.fatal = mkLogEmitter(FATAL);



//---- Standard serializers
// A serializer is a function that serializes a JavaScript object to a
// JSON representation for logging. There is a standard set of presumed
// interesting objects in node.js-land.

Logger.stdSerializers = {};

// Serialize an HTTP request.
Logger.stdSerializers.req = function (req) {
    if (!req || !req.connection)
        return req;
    return {
        method: req.method,
        url: req.url,
        headers: req.headers,
        remoteAddress: req.connection.remoteAddress,
        remotePort: req.connection.remotePort
    };
    // Trailers: Skipping for speed. If you need trailers in your app, then
    // make a custom serializer.
    //if (Object.keys(trailers).length > 0) {
    //  obj.trailers = req.trailers;
    //}
};

// Serialize an HTTP response.
Logger.stdSerializers.res = function (res) {
    if (!res || !res.statusCode)
        return res;
    return {
        statusCode: res.statusCode,
        header: res._header
    }
};


/*
 * This function dumps long stack traces for exceptions having a cause()
 * method. The error classes from
 * [verror](https://github.com/davepacheco/node-verror) and
 * [restify v2.0](https://github.com/mcavage/node-restify) are examples.
 *
 * Based on `dumpException` in
 * https://github.com/davepacheco/node-extsprintf/blob/master/lib/extsprintf.js
 */
function getFullErrorStack(ex)
{
    var ret = ex.stack || ex.toString();
    if (ex.cause && typeof (ex.cause) === 'function') {
        var cex = ex.cause();
        if (cex) {
            ret += '\nCaused by: ' + getFullErrorStack(cex);
        }
    }
    return (ret);
}

// Serialize an Error object
// (Core error properties are enumerable in node 0.4, not in 0.6).
var errSerializer = Logger.stdSerializers.err = function (err) {
    if (!err || !err.stack)
        return err;
    var obj = {
        message: err.message,
        name: err.name,
        stack: getFullErrorStack(err),
        code: err.code,
        signal: err.signal
    }
    return obj;
};


// A JSON stringifier that handles cycles safely - tracks seen values in a Set.
function safeCyclesSet() {
    var seen = new Set();
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.has(val)) {
            return '[Circular]';
        }
        seen.add(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely - tracks seen vals in an Array.
 *
 * Note: This approach has performance problems when dealing with large objects,
 * see trentm/node-bunyan#445, but since this is the only option for node 0.10
 * and earlier (as Set was introduced in Node 0.12), it's used as a fallback
 * when Set is not available.
 */
function safeCyclesArray() {
    var seen = [];
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.indexOf(val) !== -1) {
            return '[Circular]';
        }
        seen.push(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely.
 *
 * Usage: JSON.stringify(obj, safeCycles())
 *
 * Choose the best safe cycle function from what is available - see
 * trentm/node-bunyan#445.
 */
var safeCycles = typeof (Set) !== 'undefined' ? safeCyclesSet : safeCyclesArray;

/**
 * A fast JSON.stringify that handles cycles and getter exceptions (when
 * safeJsonStringify is installed).
 *
 * This function attempts to use the regular JSON.stringify for speed, but on
 * error (e.g. JSON cycle detection exception) it falls back to safe stringify
 * handlers that can deal with cycles and/or getter exceptions.
 */
function fastAndSafeJsonStringify(rec) {
    try {
        return JSON.stringify(rec);
    } catch (ex) {
        try {
            return JSON.stringify(rec, safeCycles());
        } catch (e) {
            if (safeJsonStringify) {
                return safeJsonStringify(rec);
            } else {
                var dedupKey = e.stack.split(/\n/g, 3).join('\n');
                _warn('bunyan: ERROR: Exception in '
                    + '`JSON.stringify(rec)`. You can install the '
                    + '"safe-json-stringify" module to have Bunyan fallback '
                    + 'to safer stringification. Record:\n'
                    + _indent(format('%s\n%s', util.inspect(rec), e.stack)),
                    dedupKey);
                return format('(Exception in JSON.stringify(rec): %j. '
                    + 'See stderr for details.)', e.message);
            }
        }
    }
}


var RotatingFileStream = null;
if (mv) {

RotatingFileStream = function RotatingFileStream(options) {
    this.path = options.path;

    this.count = (options.count == null ? 10 : options.count);
    assert.equal(typeof (this.count), 'number',
        format('rotating-file stream "count" is not a number: %j (%s) in %j',
            this.count, typeof (this.count), this));
    assert.ok(this.count >= 0,
        format('rotating-file stream "count" is not >= 0: %j in %j',
            this.count, this));

    // Parse `options.period`.
    if (options.period) {
        // <number><scope> where scope is:
        //    h   hours (at the start of the hour)
        //    d   days (at the start of the day, i.e. just after midnight)
        //    w   weeks (at the start of Sunday)
        //    m   months (on the first of the month)
        //    y   years (at the start of Jan 1st)
        // with special values 'hourly' (1h), 'daily' (1d), "weekly" (1w),
        // 'monthly' (1m) and 'yearly' (1y)
        var period = {
            'hourly': '1h',
            'daily': '1d',
            'weekly': '1w',
            'monthly': '1m',
            'yearly': '1y'
        }[options.period] || options.period;
        var m = /^([1-9][0-9]*)([hdwmy]|ms)$/.exec(period);
        if (!m) {
            throw new Error(format('invalid period: "%s"', options.period));
        }
        this.periodNum = Number(m[1]);
        this.periodScope = m[2];
    } else {
        this.periodNum = 1;
        this.periodScope = 'd';
    }

    var lastModified = null;
    try {
        var fileInfo = fs.statSync(this.path);
        lastModified = fileInfo.mtime.getTime();
    }
    catch (err) {
        // file doesn't exist
    }
    var rotateAfterOpen = false;
    if (lastModified) {
        var lastRotTime = this._calcRotTime(0);
        if (lastModified < lastRotTime) {
            rotateAfterOpen = true;
        }
    }

    // TODO: template support for backup files
    // template: <path to which to rotate>
    //      default is %P.%n
    //      '/var/log/archive/foo.log'  -> foo.log.%n
    //      '/var/log/archive/foo.log.%n'
    //      codes:
    //          XXX support strftime codes (per node version of those)
    //              or whatever module. Pick non-colliding for extra
    //              codes
    //          %P      `path` base value
    //          %n      integer number of rotated log (1,2,3,...)
    //          %d      datetime in YYYY-MM-DD_HH-MM-SS
    //                      XXX what should default date format be?
    //                          prior art? Want to avoid ':' in
    //                          filenames (illegal on Windows for one).

    this.stream = fs.createWriteStream(this.path,
        {flags: 'a', encoding: 'utf8'});

    this.rotQueue = [];
    this.rotating = false;
    if (rotateAfterOpen) {
        this._debug('rotateAfterOpen -> call rotate()');
        this.rotate();
    } else {
        this._setupNextRot();
    }
}

util.inherits(RotatingFileStream, EventEmitter);

RotatingFileStream.prototype._debug = function () {
    // Set this to `true` to add debug logging.
    if (false) {
        if (arguments.length === 0) {
            return true;
        }
        var args = Array.prototype.slice.call(arguments);
        args[0] = '[' + (new Date().toISOString()) + ', '
            + this.path + '] ' + args[0];
        console.log.apply(this, args);
    } else {
        return false;
    }
};

RotatingFileStream.prototype._setupNextRot = function () {
    this.rotAt = this._calcRotTime(1);
    this._setRotationTimer();
}

RotatingFileStream.prototype._setRotationTimer = function () {
    var self = this;
    var delay = this.rotAt - Date.now();
    // Cap timeout to Node's max setTimeout, see
    // <https://github.com/joyent/node/issues/8656>.
    var TIMEOUT_MAX = 2147483647; // 2^31-1
    if (delay > TIMEOUT_MAX) {
        delay = TIMEOUT_MAX;
    }
    this.timeout = setTimeout(
        function () {
            self._debug('_setRotationTimer timeout -> call rotate()');
            self.rotate();
        },
        delay);
    if (typeof (this.timeout.unref) === 'function') {
        this.timeout.unref();
    }
}

RotatingFileStream.prototype._calcRotTime =
function _calcRotTime(periodOffset) {
    this._debug('_calcRotTime: %s%s', this.periodNum, this.periodScope);
    var d = new Date();

    this._debug('  now local: %s', d);
    this._debug('    now utc: %s', d.toISOString());
    var rotAt;
    switch (this.periodScope) {
    case 'ms':
        // Hidden millisecond period for debugging.
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * periodOffset;
        } else {
            rotAt = Date.now() + this.periodNum * periodOffset;
        }
        break;
    case 'h':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 60 * 60 * 1000 * periodOffset;
        } else {
            // First time: top of the next hour.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate(), d.getUTCHours() + periodOffset);
        }
        break;
    case 'd':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: start of tomorrow (i.e. at the coming midnight) UTC.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + periodOffset);
        }
        break;
    case 'w':
        // Currently, always on Sunday morning at 00:00:00 (UTC).
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 7 * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: this coming Sunday.
            var dayOffset = (7 - d.getUTCDay());
            if (periodOffset < 1) {
                dayOffset = -d.getUTCDay();
            }
            if (periodOffset > 1 || periodOffset < -1) {
                dayOffset += 7 * periodOffset;
            }
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + dayOffset);
        }
        break;
    case 'm':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + this.periodNum * periodOffset, 1);
        } else {
            // First time: the start of the next month.
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + periodOffset, 1);
        }
        break;
    case 'y':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear() + this.periodNum * periodOffset,
                0, 1);
        } else {
            // First time: the start of the next year.
            rotAt = Date.UTC(d.getUTCFullYear() + periodOffset, 0, 1);
        }
        break;
    default:
        assert.fail(format('invalid period scope: "%s"', this.periodScope));
    }

    if (this._debug()) {
        this._debug('  **rotAt**: %s (utc: %s)', rotAt,
            new Date(rotAt).toUTCString());
        var now = Date.now();
        this._debug('        now: %s (%sms == %smin == %sh to go)',
            now,
            rotAt - now,
            (rotAt-now)/1000/60,
            (rotAt-now)/1000/60/60);
    }
    return rotAt;
};

RotatingFileStream.prototype.rotate = function rotate() {
    // XXX What about shutdown?
    var self = this;

    // If rotation period is > ~25 days, we have to break into multiple
    // setTimeout's. See <https://github.com/joyent/node/issues/8656>.
    if (self.rotAt && self.rotAt > Date.now()) {
        return self._setRotationTimer();
    }

    this._debug('rotate');
    if (self.rotating) {
        throw new TypeError('cannot start a rotation when already rotating');
    }
    self.rotating = true;

    self.stream.end();  // XXX can do moves sync after this? test at high rate

    function del() {
        var toDel = self.path + '.' + String(n - 1);
        if (n === 0) {
            toDel = self.path;
        }
        n -= 1;
        self._debug('  rm %s', toDel);
        fs.unlink(toDel, function (delErr) {
            //XXX handle err other than not exists
            moves();
        });
    }

    function moves() {
        if (self.count === 0 || n < 0) {
            return finish();
        }
        var before = self.path;
        var after = self.path + '.' + String(n);
        if (n > 0) {
            before += '.' + String(n - 1);
        }
        n -= 1;
        fs.exists(before, function (exists) {
            if (!exists) {
                moves();
            } else {
                self._debug('  mv %s %s', before, after);
                mv(before, after, function (mvErr) {
                    if (mvErr) {
                        self.emit('error', mvErr);
                        finish(); // XXX finish here?
                    } else {
                        moves();
                    }
                });
            }
        })
    }

    function finish() {
        self._debug('  open %s', self.path);
        self.stream = fs.createWriteStream(self.path,
            {flags: 'a', encoding: 'utf8'});
        var q = self.rotQueue, len = q.length;
        for (var i = 0; i < len; i++) {
            self.stream.write(q[i]);
        }
        self.rotQueue = [];
        self.rotating = false;
        self.emit('drain');
        self._setupNextRot();
    }

    var n = this.count;
    del();
};

RotatingFileStream.prototype.write = function write(s) {
    if (this.rotating) {
        this.rotQueue.push(s);
        return false;
    } else {
        return this.stream.write(s);
    }
};

RotatingFileStream.prototype.end = function end(s) {
    this.stream.end();
};

RotatingFileStream.prototype.destroy = function destroy(s) {
    this.stream.destroy();
};

RotatingFileStream.prototype.destroySoon = function destroySoon(s) {
    this.stream.destroySoon();
};

} /* if (mv) */



/**
 * RingBuffer is a Writable Stream that just stores the last N records in
 * memory.
 *
 * @param options {Object}, with the following fields:
 *
 *    - limit: number of records to keep in memory
 */
function RingBuffer(options) {
    this.limit = options && options.limit ? options.limit : 100;
    this.writable = true;
    this.records = [];
    EventEmitter.call(this);
}

util.inherits(RingBuffer, EventEmitter);

RingBuffer.prototype.write = function (record) {
    if (!this.writable)
        throw (new Error('RingBuffer has been ended already'));

    this.records.push(record);

    if (this.records.length > this.limit)
        this.records.shift();

    return (true);
};

RingBuffer.prototype.end = function () {
    if (arguments.length > 0)
        this.write.apply(this, Array.prototype.slice.call(arguments));
    this.writable = false;
};

RingBuffer.prototype.destroy = function () {
    this.writable = false;
    this.emit('close');
};

RingBuffer.prototype.destroySoon = function () {
    this.destroy();
};


//---- Exports

module.exports = Logger;

module.exports.TRACE = TRACE;
module.exports.DEBUG = DEBUG;
module.exports.INFO = INFO;
module.exports.WARN = WARN;
module.exports.ERROR = ERROR;
module.exports.FATAL = FATAL;
module.exports.resolveLevel = resolveLevel;
module.exports.levelFromName = levelFromName;
module.exports.nameFromLevel = nameFromLevel;

module.exports.VERSION = VERSION;
module.exports.LOG_VERSION = LOG_VERSION;

module.exports.createLogger = function createLogger(options) {
    return new Logger(options);
};

module.exports.RingBuffer = RingBuffer;
module.exports.RotatingFileStream = RotatingFileStream;

// Useful for custom `type == 'raw'` streams that may do JSON stringification
// of log records themselves. Usage:
//    var str = JSON.stringify(rec, bunyan.safeCycles());
module.exports.safeCycles = safeCycles;
 at SyntaxError: Unexpected token (85:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"_bound":4}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_string":"","_bound":9,"ExpansionArg_array_length":0} start 23.4478 took 5.2721s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_string":"","_bound":9,"ExpansionArg_array_length":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_string":"","_bound":9}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":8,"ExpansionArg_array_length":0} start 23.9388 took 5.079s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":8,"ExpansionArg_array_length":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":8}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":5} start 23.5976 took 5.4802s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":5}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":5}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":3,"ExpansionArg_type_4":0,"_bound":7,"ExpansionArg_string":"PureString"} start 23.671 took 5.4178s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":3,"ExpansionArg_type_4":0,"_bound":7,"ExpansionArg_string":"PureString"}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":3,"ExpansionArg_type_4":0,"_bound":7}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":3,"_bound":8,"ExpansionArg_string":"PureString"} start 23.7867 took 5.3026s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":3,"_bound":8,"ExpansionArg_string":"PureString"}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":3,"_bound":8}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":4,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":3,"ExpansionArg_string":"","_bound":12} start 24.0138 took 5.2594s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":4,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":3,"ExpansionArg_string":"","_bound":12}
* Error: TypeError: Cannot set property 'chronicler' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":4,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":3,"ExpansionArg_string":"","_bound":12}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":4,"ExpansionArg_string":"","ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":6,"ExpansionArg_array_length":0} start 24.088 took 5.5113s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":4,"ExpansionArg_string":"","ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":6,"ExpansionArg_array_length":0}
* Error: TypeError: Cannot set property 'chronicler' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":4,"ExpansionArg_string":"","ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":6}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_string":"","_bound":11,"ExpansionArg_array_length":0} start 24.2684 took 5.3694s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_string":"","_bound":11,"ExpansionArg_array_length":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_string":"","_bound":11}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":2,"ExpansionArg_string":"","_bound":10,"ExpansionArg_int_2":0} start 24.4864 took 5.2333s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":2,"ExpansionArg_string":"","_bound":10,"ExpansionArg_int_2":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":2,"ExpansionArg_string":"","_bound":10}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":10} start 24.1602 took 5.5645s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":10}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":10}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":9,"ExpansionArg_int_2":0} start 24.4069 took 5.4655s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":9,"ExpansionArg_int_2":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":9}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":8} start 24.6029 took 5.2696s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":8}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":8}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":4,"ExpansionArg_type_2":3,"ExpansionArg_string":"","ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":12} start 24.5394 took 5.5375s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":4,"ExpansionArg_type_2":3,"ExpansionArg_string":"","ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":12}
* Error: TypeError: Cannot set property 'chronicler' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":4,"ExpansionArg_type_2":3,"ExpansionArg_string":"","ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":12}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":1,"ExpansionArg_string":"","_bound":9} start 26.3893 took 5.2766s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":1,"ExpansionArg_string":"","_bound":9}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":1,"ExpansionArg_string":"","_bound":9}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int":0,"ExpansionArg_type_4":2,"ExpansionArg_string":"","_bound":10,"ExpansionArg_int_2":0} start 27.5327 took 5.0506s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int":0,"ExpansionArg_type_4":2,"ExpansionArg_string":"","_bound":10,"ExpansionArg_int_2":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int":0,"ExpansionArg_type_4":2,"ExpansionArg_string":"","_bound":10}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":4,"ExpansionArg_type_2":0,"ExpansionArg_type_3":3,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":12} start 27.4656 took 5.2935s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":4,"ExpansionArg_type_2":0,"ExpansionArg_type_3":3,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":12}
* Error: TypeError: Cannot set property 'chronicler' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":4,"ExpansionArg_type_2":0,"ExpansionArg_type_3":3,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":12}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":1,"_bound":11,"ExpansionArg_array_element_0_type":0} start 28.7547 took 5.3491s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":1,"_bound":11,"ExpansionArg_array_element_0_type":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":1,"_bound":11}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":5,"ExpansionArg_array_length":0,"ExpansionArg_type_4":0,"_bound":9,"ExpansionArg_bool":false} start 29.0595 took 5.0827s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":5,"ExpansionArg_array_length":0,"ExpansionArg_type_4":0,"_bound":9,"ExpansionArg_bool":false}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":5,"ExpansionArg_array_length":0,"ExpansionArg_type_4":0,"_bound":9}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":5,"ExpansionArg_array_length":0,"_bound":10,"ExpansionArg_bool":false} start 29.1174 took 5.0844s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":5,"ExpansionArg_array_length":0,"_bound":10,"ExpansionArg_bool":false}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":5,"ExpansionArg_array_length":0,"_bound":10}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":10,"ExpansionArg_array_length":0} start 29.2294 took 5.2236s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":10,"ExpansionArg_array_length":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":10}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":1,"ExpansionArg_type_4":0,"_bound":10,"ExpansionArg_array_element_0_type":0} start 29.1865 took 5.4295s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":1,"ExpansionArg_type_4":0,"_bound":10,"ExpansionArg_array_element_0_type":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":1,"ExpansionArg_type_4":0,"_bound":10}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_string":"","_bound":11,"ExpansionArg_array_length":0} start 29.3312 took 5.4465s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_string":"","_bound":11,"ExpansionArg_array_length":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_string":"","_bound":11}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":1,"_bound":13,"ExpansionArg_array_element_0_type":0} start 29.6696 took 5.203s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":1,"_bound":13,"ExpansionArg_array_element_0_type":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":1,"_bound":13}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":7,"ExpansionArg_bool":false} start 29.8423 took 5.1357s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":7,"ExpansionArg_bool":false}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":7}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":5,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":0,"_bound":14} start 29.9504 took 5.1496s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":5,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":0,"_bound":14}
* Error: TypeError: Cannot set property 'chronicler' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":5,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":0,"_bound":14}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":5,"ExpansionArg_array_length":0,"_bound":12,"ExpansionArg_bool":false} start 29.7745 took 5.4493s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":5,"ExpansionArg_array_length":0,"_bound":12,"ExpansionArg_bool":false}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":5,"ExpansionArg_array_length":0,"_bound":12}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":8,"ExpansionArg_array_element_0_type":0} start 29.6197 took 5.6638s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":8,"ExpansionArg_array_element_0_type":0}
* Error: TypeError: Cannot set property 'chronicler' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":8}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":2,"ExpansionArg_int_2":0,"_bound":11} start 30.0187 took 5.344s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":2,"ExpansionArg_int_2":0,"_bound":11}
* Error: TypeError: Cannot set property 'chronicler' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":2,"ExpansionArg_int_2":0,"_bound":11}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":9,"ExpansionArg_array_length":0} start 30.1664 took 5.523s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":9,"ExpansionArg_array_length":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":9}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":7,"ExpansionArg_array_length":0} start 31.6962 took 5.0342s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":7,"ExpansionArg_array_length":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":7}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int_2":0,"ExpansionArg_type_4":0,"_bound":11} start 32.7913 took 5.0165s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int_2":0,"ExpansionArg_type_4":0,"_bound":11}
* Error: TypeError: Cannot set property 'chronicler' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int_2":0,"ExpansionArg_type_4":0,"_bound":11}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":8,"ExpansionArg_int_2":0} start 32.6114 took 5.2368s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":8,"ExpansionArg_int_2":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":8}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":4,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":10,"ExpansionArg_array_length":0} start 34.2635 took 5.1324s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":4,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":10,"ExpansionArg_array_length":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":4,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":10}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":13,"ExpansionArg_array_element_1_type":0} start 34.1322 took 5.317s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":13,"ExpansionArg_array_element_1_type":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":13}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":1,"ExpansionArg_type_4":0,"_bound":12,"ExpansionArg_array_element_0_type":0} start 34.4894 took 5.2184s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":1,"ExpansionArg_type_4":0,"_bound":12,"ExpansionArg_array_element_0_type":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":1,"ExpansionArg_type_4":0,"_bound":12}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":1,"_bound":13,"ExpansionArg_array_element_0_type":0} start 34.8206 took 5.0267s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":1,"_bound":13,"ExpansionArg_array_element_0_type":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":1,"_bound":13}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_4":0,"_bound":12,"ExpansionArg_array_element_1_type":0} start 35.0358 took 5.0601s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_4":0,"_bound":12,"ExpansionArg_array_element_1_type":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_4":0,"_bound":12}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":5,"ExpansionArg_array_length":0,"ExpansionArg_type_4":0,"_bound":11,"ExpansionArg_bool":false} start 34.6585 took 5.474s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":5,"ExpansionArg_array_length":0,"ExpansionArg_type_4":0,"_bound":11,"ExpansionArg_bool":false}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":5,"ExpansionArg_array_length":0,"ExpansionArg_type_4":0,"_bound":11}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int":0,"ExpansionArg_type_4":4,"ExpansionArg_string":"","_bound":11,"ExpansionArg_array_length":0} start 34.1737 took 6.0895s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int":0,"ExpansionArg_type_4":4,"ExpansionArg_string":"","_bound":11,"ExpansionArg_array_length":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int":0,"ExpansionArg_type_4":4,"ExpansionArg_string":"","_bound":11}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":15,"ExpansionArg_array_element_1_type":0} start 35.1439 took 5.1739s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":15,"ExpansionArg_array_element_1_type":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":15}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":5,"ExpansionArg_array_length":0,"_bound":12,"ExpansionArg_bool":false} start 34.9187 took 5.6418s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":5,"ExpansionArg_array_length":0,"_bound":12,"ExpansionArg_bool":false}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":5,"ExpansionArg_array_length":0,"_bound":12}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":5,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":0,"ExpansionArg_type_4":0,"_bound":14} start 35.2505 took 5.41s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":5,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":0,"ExpansionArg_type_4":0,"_bound":14}
* Error: TypeError: Cannot set property 'chronicler' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":5,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":0,"ExpansionArg_type_4":0,"_bound":14}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":1,"ExpansionArg_string":"","ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":7} start 35.3229 took 5.9422s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":1,"ExpansionArg_string":"","ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":7}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":1,"ExpansionArg_string":"","ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":7}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":10,"ExpansionArg_bool":false} start 35.7253 took 5.5831s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":10,"ExpansionArg_bool":false}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":10}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":8,"ExpansionArg_bool":false} start 36.7744 took 5.0593s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":8,"ExpansionArg_bool":false}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":5,"ExpansionArg_array_length":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":8}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":1,"ExpansionArg_string":"","_bound":9} start 37.8394 took 5.1262s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":1,"ExpansionArg_string":"","_bound":9}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":1,"ExpansionArg_string":"","_bound":9}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":2,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":9,"ExpansionArg_int_2":0} start 37.8861 took 5.1509s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":2,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":9,"ExpansionArg_int_2":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":2,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":9}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":5,"ExpansionArg_array_length":0,"ExpansionArg_type_4":0,"_bound":11,"ExpansionArg_bool":false} start 39.4152 took 5.1172s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":5,"ExpansionArg_array_length":0,"ExpansionArg_type_4":0,"_bound":11,"ExpansionArg_bool":false}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":5,"ExpansionArg_array_length":0,"ExpansionArg_type_4":0,"_bound":11}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":5,"ExpansionArg_string":"PureString"} start 35.3803 took 9.3433s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":5,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (85:4) on program /**
 * Copyright (c) 2017 Trent Mick.
 * Copyright (c) 2017 Joyent Inc.
 *
 * The bunyan logging library for node.js.
 *
 * -*- mode: js -*-
 * vim: expandtab:ts=4:sw=4
 */

var VERSION = '1.8.12';

/*
 * Bunyan log format version. This becomes the 'v' field on all log records.
 * This will be incremented if there is any backward incompatible change to
 * the log record format. Details will be in 'CHANGES.md' (the change log).
 */
var LOG_VERSION = 0;


var xxx = function xxx(s) {     // internal dev/debug logging
    var args = ['XX' + 'X: '+s].concat(
        Array.prototype.slice.call(arguments, 1));
    console.error.apply(this, args);
};
var xxx = function xxx() {};  // comment out to turn on debug logging


/*
 * Runtime environment notes:
 *
 * Bunyan is intended to run in a number of runtime environments. Here are
 * some notes on differences for those envs and how the code copes.
 *
 * - node.js: The primary target environment.
 * - NW.js: http://nwjs.io/  An *app* environment that feels like both a
 *   node env -- it has node-like globals (`process`, `global`) and
 *   browser-like globals (`window`, `navigator`). My *understanding* is that
 *   bunyan can operate as if this is vanilla node.js.
 * - browser: Failing the above, we sniff using the `window` global
 *   <https://developer.mozilla.org/en-US/docs/Web/API/Window/window>.
 *      - browserify: http://browserify.org/  A browser-targetting bundler of
 *        node.js deps. The runtime is a browser env, so can't use fs access,
 *        etc. Browserify's build looks for `require(<single-string>)` imports
 *        to bundle. For some imports it won't be able to handle, we "hide"
 *        from browserify with `require('frobshizzle' + '')`.
 * - Other? Please open issues if things are broken.
 */
var runtimeEnv;
if (typeof (process) !== 'undefined' && process.versions) {
    if (process.versions.nw) {
        runtimeEnv = 'nw';
    } else if (process.versions.node) {
        runtimeEnv = 'node';
    }
}
if (!runtimeEnv && typeof (window) !== 'undefined' &&
    window.window === window) {
    runtimeEnv = 'browser';
}
if (!runtimeEnv) {
    throw new Error('unknown runtime environment');
}


var os, fs, dtrace;
if (runtimeEnv === 'browser') {
    os = {
        hostname: function () {
            return window.location.host;
        }
    };
    fs = {};
    dtrace = null;
} else {
    os = require('os');
    fs = require('fs');
    try {
        dtrace = require('dtrace-provider' + '');
    } catch (e) {
        dtrace = null;
    }
}
var util = require('util');
var assert = require('assert');
var EventEmitter = require('events').EventEmitter;
var stream = require('stream');

try {
    var safeJsonStringify = require('safe-json-stringify');
} catch (e) {
    safeJsonStringify = null;
}
if (process.env.BUNYAN_TEST_NO_SAFE_JSON_STRINGIFY) {
    safeJsonStringify = null;
}

// The 'mv' module is required for rotating-file stream support.
try {
    var mv = require('mv' + '');
} catch (e) {
    mv = null;
}

try {
    var sourceMapSupport = require('source-map-support' + '');
} catch (_) {
    sourceMapSupport = null;
}


//---- Internal support stuff

/**
 * A shallow copy of an object. Bunyan logging attempts to never cause
 * exceptions, so this function attempts to handle non-objects gracefully.
 */
function objCopy(obj) {
    if (obj == null) {  // null or undefined
        return obj;
    } else if (Array.isArray(obj)) {
        return obj.slice();
    } else if (typeof (obj) === 'object') {
        var copy = {};
        Object.keys(obj).forEach(function (k) {
            copy[k] = obj[k];
        });
        return copy;
    } else {
        return obj;
    }
}

var format = util.format;
if (!format) {
    // If node < 0.6, then use its `util.format`:
    // <https://github.com/joyent/node/blob/master/lib/util.js#L22>:
    var inspect = util.inspect;
    var formatRegExp = /%[sdj%]/g;
    format = function format(f) {
        if (typeof (f) !== 'string') {
            var objects = [];
            for (var i = 0; i < arguments.length; i++) {
                objects.push(inspect(arguments[i]));
            }
            return objects.join(' ');
        }

        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function (x) {
            if (i >= len)
                return x;
            switch (x) {
                case '%s': return String(args[i++]);
                case '%d': return Number(args[i++]);
                case '%j': return fastAndSafeJsonStringify(args[i++]);
                case '%%': return '%';
                default:
                    return x;
            }
        });
        for (var x = args[i]; i < len; x = args[++i]) {
            if (x === null || typeof (x) !== 'object') {
                str += ' ' + x;
            } else {
                str += ' ' + inspect(x);
            }
        }
        return str;
    };
}


/**
 * Gather some caller info 3 stack levels up.
 * See <http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi>.
 */
function getCaller3Info() {
    if (this === undefined) {
        // Cannot access caller info in 'strict' mode.
        return;
    }
    var obj = {};
    var saveLimit = Error.stackTraceLimit;
    var savePrepare = Error.prepareStackTrace;
    Error.stackTraceLimit = 3;

    Error.prepareStackTrace = function (_, stack) {
        var caller = stack[2];
        if (sourceMapSupport) {
            caller = sourceMapSupport.wrapCallSite(caller);
        }
        obj.file = caller.getFileName();
        obj.line = caller.getLineNumber();
        var func = caller.getFunctionName();
        if (func)
            obj.func = func;
    };
    Error.captureStackTrace(this, getCaller3Info);
    this.stack;

    Error.stackTraceLimit = saveLimit;
    Error.prepareStackTrace = savePrepare;
    return obj;
}


function _indent(s, indent) {
    if (!indent) indent = '    ';
    var lines = s.split(/\r?\n/g);
    return indent + lines.join('\n' + indent);
}


/**
 * Warn about an bunyan processing error.
 *
 * @param msg {String} Message with which to warn.
 * @param dedupKey {String} Optional. A short string key for this warning to
 *      have its warning only printed once.
 */
function _warn(msg, dedupKey) {
    assert.ok(msg);
    if (dedupKey) {
        if (_warned[dedupKey]) {
            return;
        }
        _warned[dedupKey] = true;
    }
    process.stderr.write(msg + '\n');
}
function _haveWarned(dedupKey) {
    return _warned[dedupKey];
}
var _warned = {};


function ConsoleRawStream() {}
ConsoleRawStream.prototype.write = function (rec) {
    if (rec.level < INFO) {
        console.log(rec);
    } else if (rec.level < WARN) {
        console.info(rec);
    } else if (rec.level < ERROR) {
        console.warn(rec);
    } else {
        console.error(rec);
    }
};


//---- Levels

var TRACE = 10;
var DEBUG = 20;
var INFO = 30;
var WARN = 40;
var ERROR = 50;
var FATAL = 60;

var levelFromName = {
    'trace': TRACE,
    'debug': DEBUG,
    'info': INFO,
    'warn': WARN,
    'error': ERROR,
    'fatal': FATAL
};
var nameFromLevel = {};
Object.keys(levelFromName).forEach(function (name) {
    nameFromLevel[levelFromName[name]] = name;
});

// Dtrace probes.
var dtp = undefined;
var probes = dtrace && {};

/**
 * Resolve a level number, name (upper or lowercase) to a level number value.
 *
 * @param nameOrNum {String|Number} A level name (case-insensitive) or positive
 *      integer level.
 * @api public
 */
function resolveLevel(nameOrNum) {
    var level;
    var type = typeof (nameOrNum);
    if (type === 'string') {
        level = levelFromName[nameOrNum.toLowerCase()];
        if (!level) {
            throw new Error(format('unknown level name: "%s"', nameOrNum));
        }
    } else if (type !== 'number') {
        throw new TypeError(format('cannot resolve level: invalid arg (%s):',
            type, nameOrNum));
    } else if (nameOrNum < 0 || Math.floor(nameOrNum) !== nameOrNum) {
        throw new TypeError(format('level is not a positive integer: %s',
            nameOrNum));
    } else {
        level = nameOrNum;
    }
    return level;
}


function isWritable(obj) {
    if (obj instanceof stream.Writable) {
        return true;
    }
    return typeof (obj.write) === 'function';
}


//---- Logger class

/**
 * Create a Logger instance.
 *
 * @param options {Object} See documentation for full details. At minimum
 *    this must include a 'name' string key. Configuration keys:
 *      - `streams`: specify the logger output streams. This is an array of
 *        objects with these fields:
 *          - `type`: The stream type. See README.md for full details.
 *            Often this is implied by the other fields. Examples are
 *            'file', 'stream' and "raw".
 *          - `level`: Defaults to 'info'.
 *          - `path` or `stream`: The specify the file path or writeable
 *            stream to which log records are written. E.g.
 *            `stream: process.stdout`.
 *          - `closeOnExit` (boolean): Optional. Default is true for a
 *            'file' stream when `path` is given, false otherwise.
 *        See README.md for full details.
 *      - `level`: set the level for a single output stream (cannot be used
 *        with `streams`)
 *      - `stream`: the output stream for a logger with just one, e.g.
 *        `process.stdout` (cannot be used with `streams`)
 *      - `serializers`: object mapping log record field names to
 *        serializing functions. See README.md for details.
 *      - `src`: Boolean (default false). Set true to enable 'src' automatic
 *        field with log call source info.
 *    All other keys are log record fields.
 *
 * An alternative *internal* call signature is used for creating a child:
 *    new Logger(<parent logger>, <child options>[, <child opts are simple>]);
 *
 * @param _childSimple (Boolean) An assertion that the given `_childOptions`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation.
 */
function Logger(options, _childOptions, _childSimple) {
    xxx('Logger start:', options)
    if (!(this instanceof Logger)) {
        return new Logger(options, _childOptions);
    }

    // Input arg validation.
    var parent;
    if (_childOptions !== undefined) {
        parent = options;
        options = _childOptions;
        if (!(parent instanceof Logger)) {
            throw new TypeError(
                'invalid Logger creation: do not pass a second arg');
        }
    }
    if (!options) {
        throw new TypeError('options (object) is required');
    }
    if (!parent) {
        if (!options.name) {
            throw new TypeError('options.name (string) is required');
        }
    } else {
        if (options.name) {
            throw new TypeError(
                'invalid options.name: child cannot set logger name');
        }
    }
    if (options.stream && options.streams) {
        throw new TypeError('cannot mix "streams" and "stream" options');
    }
    if (options.streams && !Array.isArray(options.streams)) {
        throw new TypeError('invalid options.streams: must be an array')
    }
    if (options.serializers && (typeof (options.serializers) !== 'object' ||
            Array.isArray(options.serializers))) {
        throw new TypeError('invalid options.serializers: must be an object')
    }

    EventEmitter.call(this);

    // Fast path for simple child creation.
    if (parent && _childSimple) {
        // `_isSimpleChild` is a signal to stream close handling that this child
        // owns none of its streams.
        this._isSimpleChild = true;

        this._level = parent._level;
        this.streams = parent.streams;
        this.serializers = parent.serializers;
        this.src = parent.src;
        var fields = this.fields = {};
        var parentFieldNames = Object.keys(parent.fields);
        for (var i = 0; i < parentFieldNames.length; i++) {
            var name = parentFieldNames[i];
            fields[name] = parent.fields[name];
        }
        var names = Object.keys(options);
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            fields[name] = options[name];
        }
        return;
    }

    // Start values.
    var self = this;
    if (parent) {
        this._level = parent._level;
        this.streams = [];
        for (var i = 0; i < parent.streams.length; i++) {
            var s = objCopy(parent.streams[i]);
            s.closeOnExit = false; // Don't own parent stream.
            this.streams.push(s);
        }
        this.serializers = objCopy(parent.serializers);
        this.src = parent.src;
        this.fields = objCopy(parent.fields);
        if (options.level) {
            this.level(options.level);
        }
    } else {
        this._level = Number.POSITIVE_INFINITY;
        this.streams = [];
        this.serializers = null;
        this.src = false;
        this.fields = {};
    }

    if (!dtp && dtrace) {
        dtp = dtrace.createDTraceProvider('bunyan');

        for (var level in levelFromName) {
            var probe;

            probes[levelFromName[level]] = probe =
                dtp.addProbe('log-' + level, 'char *');

            // Explicitly add a reference to dtp to prevent it from being GC'd
            probe.dtp = dtp;
        }

        dtp.enable();
    }

    // Handle *config* options (i.e. options that are not just plain data
    // for log records).
    if (options.stream) {
        self.addStream({
            type: 'stream',
            stream: options.stream,
            closeOnExit: false,
            level: options.level
        });
    } else if (options.streams) {
        options.streams.forEach(function (s) {
            self.addStream(s, options.level);
        });
    } else if (parent && options.level) {
        this.level(options.level);
    } else if (!parent) {
        if (runtimeEnv === 'browser') {
            /*
             * In the browser we'll be emitting to console.log by default.
             * Any console.log worth its salt these days can nicely render
             * and introspect objects (e.g. the Firefox and Chrome console)
             * so let's emit the raw log record. Are there browsers for which
             * that breaks things?
             */
            self.addStream({
                type: 'raw',
                stream: new ConsoleRawStream(),
                closeOnExit: false,
                level: options.level
            });
        } else {
            self.addStream({
                type: 'stream',
                stream: process.stdout,
                closeOnExit: false,
                level: options.level
            });
        }
    }
    if (options.serializers) {
        self.addSerializers(options.serializers);
    }
    if (options.src) {
        this.src = true;
    }
    xxx('Logger: ', self)

    // Fields.
    // These are the default fields for log records (minus the attributes
    // removed in this constructor). To allow storing raw log records
    // (unrendered), `this.fields` must never be mutated. Create a copy for
    // any changes.
    var fields = objCopy(options);
    delete fields.stream;
    delete fields.level;
    delete fields.streams;
    delete fields.serializers;
    delete fields.src;
    if (this.serializers) {
        this._applySerializers(fields);
    }
    if (!fields.hostname && !self.fields.hostname) {
        fields.hostname = os.hostname();
    }
    if (!fields.pid) {
        fields.pid = process.pid;
    }
    Object.keys(fields).forEach(function (k) {
        self.fields[k] = fields[k];
    });
}

util.inherits(Logger, EventEmitter);


/**
 * Add a stream
 *
 * @param stream {Object}. Object with these fields:
 *    - `type`: The stream type. See README.md for full details.
 *      Often this is implied by the other fields. Examples are
 *      'file', 'stream' and "raw".
 *    - `path` or `stream`: The specify the file path or writeable
 *      stream to which log records are written. E.g.
 *      `stream: process.stdout`.
 *    - `level`: Optional. Falls back to `defaultLevel`.
 *    - `closeOnExit` (boolean): Optional. Default is true for a
 *      'file' stream when `path` is given, false otherwise.
 *    See README.md for full details.
 * @param defaultLevel {Number|String} Optional. A level to use if
 *      `stream.level` is not set. If neither is given, this defaults to INFO.
 */
Logger.prototype.addStream = function addStream(s, defaultLevel) {
    var self = this;
    if (defaultLevel === null || defaultLevel === undefined) {
        defaultLevel = INFO;
    }

    s = objCopy(s);

    // Implicit 'type' from other args.
    if (!s.type) {
        if (s.stream) {
            s.type = 'stream';
        } else if (s.path) {
            s.type = 'file'
        }
    }
    s.raw = (s.type === 'raw');  // PERF: Allow for faster check in `_emit`.

    if (s.level !== undefined) {
        s.level = resolveLevel(s.level);
    } else {
        s.level = resolveLevel(defaultLevel);
    }
    if (s.level < self._level) {
        self._level = s.level;
    }

    switch (s.type) {
    case 'stream':
        assert.ok(isWritable(s.stream),
                  '"stream" stream is not writable: ' + util.inspect(s.stream));

        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    case 'file':
        if (s.reemitErrorEvents === undefined) {
            s.reemitErrorEvents = true;
        }
        if (!s.stream) {
            s.stream = fs.createWriteStream(s.path,
                                            {flags: 'a', encoding: 'utf8'});
            if (!s.closeOnExit) {
                s.closeOnExit = true;
            }
        } else {
            if (!s.closeOnExit) {
                s.closeOnExit = false;
            }
        }
        break;
    case 'rotating-file':
        assert.ok(!s.stream,
                  '"rotating-file" stream should not give a "stream"');
        assert.ok(s.path);
        assert.ok(mv, '"rotating-file" stream type is not supported: '
                      + 'missing "mv" module');
        s.stream = new RotatingFileStream(s);
        if (!s.closeOnExit) {
            s.closeOnExit = true;
        }
        break;
    case 'raw':
        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    default:
        throw new TypeError('unknown stream type "' + s.type + '"');
    }

    if (s.reemitErrorEvents && typeof (s.stream.on) === 'function') {
        // TODO: When we have `<logger>.close()`, it should remove event
        //      listeners to not leak Logger instances.
        s.stream.on('error', function onStreamError(err) {
            self.emit('error', err, s);
        });
    }

    self.streams.push(s);
    delete self.haveNonRawStreams;  // reset
}


/**
 * Add serializers
 *
 * @param serializers {Object} Optional. Object mapping log record field names
 *    to serializing functions. See README.md for details.
 */
Logger.prototype.addSerializers = function addSerializers(serializers) {
    var self = this;

    if (!self.serializers) {
        self.serializers = {};
    }
    Object.keys(serializers).forEach(function (field) {
        var serializer = serializers[field];
        if (typeof (serializer) !== 'function') {
            throw new TypeError(format(
                'invalid serializer for "%s" field: must be a function',
                field));
        } else {
            self.serializers[field] = serializer;
        }
    });
}



/**
 * Create a child logger, typically to add a few log record fields.
 *
 * This can be useful when passing a logger to a sub-component, e.g. a
 * 'wuzzle' component of your service:
 *
 *    var wuzzleLog = log.child({component: 'wuzzle'})
 *    var wuzzle = new Wuzzle({..., log: wuzzleLog})
 *
 * Then log records from the wuzzle code will have the same structure as
 * the app log, *plus the component='wuzzle' field*.
 *
 * @param options {Object} Optional. Set of options to apply to the child.
 *    All of the same options for a new Logger apply here. Notes:
 *      - The parent's streams are inherited and cannot be removed in this
 *        call. Any given `streams` are *added* to the set inherited from
 *        the parent.
 *      - The parent's serializers are inherited, though can effectively be
 *        overwritten by using duplicate keys.
 *      - Can use `level` to set the level of the streams inherited from
 *        the parent. The level for the parent is NOT affected.
 * @param simple {Boolean} Optional. Set to true to assert that `options`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation. See 'tools/timechild.js' for numbers.
 */
Logger.prototype.child = function (options, simple) {
    return new (this.constructor)(this, options || {}, simple);
}


/**
 * A convenience method to reopen 'file' streams on a logger. This can be
 * useful with external log rotation utilities that move and re-open log files
 * (e.g. logrotate on Linux, logadm on SmartOS/Illumos). Those utilities
 * typically have rotation options to copy-and-truncate the log file, but
 * you may not want to use that. An alternative is to do this in your
 * application:
 *
 *      var log = bunyan.createLogger(...);
 *      ...
 *      process.on('SIGUSR2', function () {
 *          log.reopenFileStreams();
 *      });
 *      ...
 *
 * See <https://github.com/trentm/node-bunyan/issues/104>.
 */
Logger.prototype.reopenFileStreams = function () {
    var self = this;
    self.streams.forEach(function (s) {
        if (s.type === 'file') {
            if (s.stream) {
                // Not sure if typically would want this, or more immediate
                // `s.stream.destroy()`.
                s.stream.end();
                s.stream.destroySoon();
                delete s.stream;
            }
            s.stream = fs.createWriteStream(s.path,
                {flags: 'a', encoding: 'utf8'});
            s.stream.on('error', function (err) {
                self.emit('error', err, s);
            });
        }
    });
};


/* BEGIN JSSTYLED */
/**
 * Close this logger.
 *
 * This closes streams (that it owns, as per 'endOnClose' attributes on
 * streams), etc. Typically you **don't** need to bother calling this.
Logger.prototype.close = function () {
    if (this._closed) {
        return;
    }
    if (!this._isSimpleChild) {
        self.streams.forEach(function (s) {
            if (s.endOnClose) {
                xxx('closing stream s:', s);
                s.stream.end();
                s.endOnClose = false;
            }
        });
    }
    this._closed = true;
}
 */
/* END JSSTYLED */


/**
 * Get/set the level of all streams on this logger.
 *
 * Get Usage:
 *    // Returns the current log level (lowest level of all its streams).
 *    log.level() -> INFO
 *
 * Set Usage:
 *    log.level(INFO)       // set all streams to level INFO
 *    log.level('info')     // can use 'info' et al aliases
 */
Logger.prototype.level = function level(value) {
    if (value === undefined) {
        return this._level;
    }
    var newLevel = resolveLevel(value);
    var len = this.streams.length;
    for (var i = 0; i < len; i++) {
        this.streams[i].level = newLevel;
    }
    this._level = newLevel;
}


/**
 * Get/set the level of a particular stream on this logger.
 *
 * Get Usage:
 *    // Returns an array of the levels of each stream.
 *    log.levels() -> [TRACE, INFO]
 *
 *    // Returns a level of the identified stream.
 *    log.levels(0) -> TRACE      // level of stream at index 0
 *    log.levels('foo')           // level of stream with name 'foo'
 *
 * Set Usage:
 *    log.levels(0, INFO)         // set level of stream 0 to INFO
 *    log.levels(0, 'info')       // can use 'info' et al aliases
 *    log.levels('foo', WARN)     // set stream named 'foo' to WARN
 *
 * Stream names: When streams are defined, they can optionally be given
 * a name. For example,
 *       log = new Logger({
 *         streams: [
 *           {
 *             name: 'foo',
 *             path: '/var/log/my-service/foo.log'
 *             level: 'trace'
 *           },
 *         ...
 *
 * @param name {String|Number} The stream index or name.
 * @param value {Number|String} The level value (INFO) or alias ('info').
 *    If not given, this is a 'get' operation.
 * @throws {Error} If there is no stream with the given name.
 */
Logger.prototype.levels = function levels(name, value) {
    if (name === undefined) {
        assert.equal(value, undefined);
        return this.streams.map(
            function (s) { return s.level });
    }
    var stream;
    if (typeof (name) === 'number') {
        stream = this.streams[name];
        if (stream === undefined) {
            throw new Error('invalid stream index: ' + name);
        }
    } else {
        var len = this.streams.length;
        for (var i = 0; i < len; i++) {
            var s = this.streams[i];
            if (s.name === name) {
                stream = s;
                break;
            }
        }
        if (!stream) {
            throw new Error(format('no stream with name "%s"', name));
        }
    }
    if (value === undefined) {
        return stream.level;
    } else {
        var newLevel = resolveLevel(value);
        stream.level = newLevel;
        if (newLevel < this._level) {
            this._level = newLevel;
        }
    }
}


/**
 * Apply registered serializers to the appropriate keys in the given fields.
 *
 * Pre-condition: This is only called if there is at least one serializer.
 *
 * @param fields (Object) The log record fields.
 * @param excludeFields (Object) Optional mapping of keys to `true` for
 *    keys to NOT apply a serializer.
 */
Logger.prototype._applySerializers = function (fields, excludeFields) {
    var self = this;

    xxx('_applySerializers: excludeFields', excludeFields);

    // Check each serializer against these (presuming number of serializers
    // is typically less than number of fields).
    Object.keys(this.serializers).forEach(function (name) {
        if (fields[name] === undefined ||
            (excludeFields && excludeFields[name]))
        {
            return;
        }
        xxx('_applySerializers; apply to "%s" key', name)
        try {
            fields[name] = self.serializers[name](fields[name]);
        } catch (err) {
            _warn(format('bunyan: ERROR: Exception thrown from the "%s" '
                + 'Bunyan serializer. This should never happen. This is a bug '
                + 'in that serializer function.\n%s',
                name, err.stack || err));
            fields[name] = format('(Error in Bunyan log "%s" serializer '
                + 'broke field. See stderr for details.)', name);
        }
    });
}


/**
 * Emit a log record.
 *
 * @param rec {log record}
 * @param noemit {Boolean} Optional. Set to true to skip emission
 *      and just return the JSON string.
 */
Logger.prototype._emit = function (rec, noemit) {
    var i;

    // Lazily determine if this Logger has non-'raw' streams. If there are
    // any, then we need to stringify the log record.
    if (this.haveNonRawStreams === undefined) {
        this.haveNonRawStreams = false;
        for (i = 0; i < this.streams.length; i++) {
            if (!this.streams[i].raw) {
                this.haveNonRawStreams = true;
                break;
            }
        }
    }

    // Stringify the object (creates a warning str on error).
    var str;
    if (noemit || this.haveNonRawStreams) {
        str = fastAndSafeJsonStringify(rec) + '\n';
    }

    if (noemit)
        return str;

    var level = rec.level;
    for (i = 0; i < this.streams.length; i++) {
        var s = this.streams[i];
        if (s.level <= level) {
            xxx('writing log rec "%s" to "%s" stream (%d <= %d): %j',
                rec.msg, s.type, s.level, level, rec);
            s.stream.write(s.raw ? rec : str);
        }
    };

    return str;
}


/**
 * Build a record object suitable for emitting from the arguments
 * provided to the a log emitter.
 */
function mkRecord(log, minLevel, args) {
    var excludeFields, fields, msgArgs;
    if (args[0] instanceof Error) {
        // `log.<level>(err, ...)`
        fields = {
            // Use this Logger's err serializer, if defined.
            err: (log.serializers && log.serializers.err
                ? log.serializers.err(args[0])
                : Logger.stdSerializers.err(args[0]))
        };
        excludeFields = {err: true};
        if (args.length === 1) {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    } else if (typeof (args[0]) !== 'object' || Array.isArray(args[0])) {
        // `log.<level>(msg, ...)`
        fields = null;
        msgArgs = args.slice();
    } else if (Buffer.isBuffer(args[0])) {  // `log.<level>(buf, ...)`
        // Almost certainly an error, show `inspect(buf)`. See bunyan
        // issue #35.
        fields = null;
        msgArgs = args.slice();
        msgArgs[0] = util.inspect(msgArgs[0]);
    } else {  // `log.<level>(fields, msg, ...)`
        fields = args[0];
        if (fields && args.length === 1 && fields.err &&
            fields.err instanceof Error)
        {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    }

    // Build up the record object.
    var rec = objCopy(log.fields);
    var level = rec.level = minLevel;
    var recFields = (fields ? objCopy(fields) : null);
    if (recFields) {
        if (log.serializers) {
            log._applySerializers(recFields, excludeFields);
        }
        Object.keys(recFields).forEach(function (k) {
            rec[k] = recFields[k];
        });
    }
    rec.msg = format.apply(log, msgArgs);
    if (!rec.time) {
        rec.time = (new Date());
    }
    // Get call source info
    if (log.src && !rec.src) {
        rec.src = getCaller3Info()
    }
    rec.v = LOG_VERSION;

    return rec;
};


/**
 * Build an array that dtrace-provider can use to fire a USDT probe. If we've
 * already built the appropriate string, we use it. Otherwise, build the
 * record object and stringify it.
 */
function mkProbeArgs(str, log, minLevel, msgArgs) {
    return [ str || log._emit(mkRecord(log, minLevel, msgArgs), true) ];
}


/**
 * Build a log emitter function for level minLevel. I.e. this is the
 * creator of `log.info`, `log.error`, etc.
 */
function mkLogEmitter(minLevel) {
    return function () {
        var log = this;
        var str = null;
        var rec = null;

        if (!this._emit) {
            /*
             * Show this invalid Bunyan usage warning *once*.
             *
             * See <https://github.com/trentm/node-bunyan/issues/100> for
             * an example of how this can happen.
             */
            var dedupKey = 'unbound';
            if (!_haveWarned[dedupKey]) {
                var caller = getCaller3Info();
                _warn(format('bunyan usage error: %s:%s: attempt to log '
                    + 'with an unbound log method: `this` is: %s',
                    caller.file, caller.line, util.inspect(this)),
                    dedupKey);
            }
            return;
        } else if (arguments.length === 0) {   // `log.<level>()`
            return (this._level <= minLevel);
        }

        var msgArgs = new Array(arguments.length);
        for (var i = 0; i < msgArgs.length; ++i) {
            msgArgs[i] = arguments[i];
        }

        if (this._level <= minLevel) {
            rec = mkRecord(log, minLevel, msgArgs);
            str = this._emit(rec);
        }

        if (probes) {
            probes[minLevel].fire(mkProbeArgs, str, log, minLevel, msgArgs);
        }
    }
}


/**
 * The functions below log a record at a specific level.
 *
 * Usages:
 *    log.<level>()  -> boolean is-trace-enabled
 *    log.<level>(<Error> err, [<string> msg, ...])
 *    log.<level>(<string> msg, ...)
 *    log.<level>(<object> fields, <string> msg, ...)
 *
 * where <level> is the lowercase version of the log level. E.g.:
 *
 *    log.info()
 *
 * @params fields {Object} Optional set of additional fields to log.
 * @params msg {String} Log message. This can be followed by additional
 *    arguments that are handled like
 *    [util.format](http://nodejs.org/docs/latest/api/all.html#util.format).
 */
Logger.prototype.trace = mkLogEmitter(TRACE);
Logger.prototype.debug = mkLogEmitter(DEBUG);
Logger.prototype.info = mkLogEmitter(INFO);
Logger.prototype.warn = mkLogEmitter(WARN);
Logger.prototype.error = mkLogEmitter(ERROR);
Logger.prototype.fatal = mkLogEmitter(FATAL);



//---- Standard serializers
// A serializer is a function that serializes a JavaScript object to a
// JSON representation for logging. There is a standard set of presumed
// interesting objects in node.js-land.

Logger.stdSerializers = {};

// Serialize an HTTP request.
Logger.stdSerializers.req = function (req) {
    if (!req || !req.connection)
        return req;
    return {
        method: req.method,
        url: req.url,
        headers: req.headers,
        remoteAddress: req.connection.remoteAddress,
        remotePort: req.connection.remotePort
    };
    // Trailers: Skipping for speed. If you need trailers in your app, then
    // make a custom serializer.
    //if (Object.keys(trailers).length > 0) {
    //  obj.trailers = req.trailers;
    //}
};

// Serialize an HTTP response.
Logger.stdSerializers.res = function (res) {
    if (!res || !res.statusCode)
        return res;
    return {
        statusCode: res.statusCode,
        header: res._header
    }
};


/*
 * This function dumps long stack traces for exceptions having a cause()
 * method. The error classes from
 * [verror](https://github.com/davepacheco/node-verror) and
 * [restify v2.0](https://github.com/mcavage/node-restify) are examples.
 *
 * Based on `dumpException` in
 * https://github.com/davepacheco/node-extsprintf/blob/master/lib/extsprintf.js
 */
function getFullErrorStack(ex)
{
    var ret = ex.stack || ex.toString();
    if (ex.cause && typeof (ex.cause) === 'function') {
        var cex = ex.cause();
        if (cex) {
            ret += '\nCaused by: ' + getFullErrorStack(cex);
        }
    }
    return (ret);
}

// Serialize an Error object
// (Core error properties are enumerable in node 0.4, not in 0.6).
var errSerializer = Logger.stdSerializers.err = function (err) {
    if (!err || !err.stack)
        return err;
    var obj = {
        message: err.message,
        name: err.name,
        stack: getFullErrorStack(err),
        code: err.code,
        signal: err.signal
    }
    return obj;
};


// A JSON stringifier that handles cycles safely - tracks seen values in a Set.
function safeCyclesSet() {
    var seen = new Set();
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.has(val)) {
            return '[Circular]';
        }
        seen.add(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely - tracks seen vals in an Array.
 *
 * Note: This approach has performance problems when dealing with large objects,
 * see trentm/node-bunyan#445, but since this is the only option for node 0.10
 * and earlier (as Set was introduced in Node 0.12), it's used as a fallback
 * when Set is not available.
 */
function safeCyclesArray() {
    var seen = [];
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.indexOf(val) !== -1) {
            return '[Circular]';
        }
        seen.push(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely.
 *
 * Usage: JSON.stringify(obj, safeCycles())
 *
 * Choose the best safe cycle function from what is available - see
 * trentm/node-bunyan#445.
 */
var safeCycles = typeof (Set) !== 'undefined' ? safeCyclesSet : safeCyclesArray;

/**
 * A fast JSON.stringify that handles cycles and getter exceptions (when
 * safeJsonStringify is installed).
 *
 * This function attempts to use the regular JSON.stringify for speed, but on
 * error (e.g. JSON cycle detection exception) it falls back to safe stringify
 * handlers that can deal with cycles and/or getter exceptions.
 */
function fastAndSafeJsonStringify(rec) {
    try {
        return JSON.stringify(rec);
    } catch (ex) {
        try {
            return JSON.stringify(rec, safeCycles());
        } catch (e) {
            if (safeJsonStringify) {
                return safeJsonStringify(rec);
            } else {
                var dedupKey = e.stack.split(/\n/g, 3).join('\n');
                _warn('bunyan: ERROR: Exception in '
                    + '`JSON.stringify(rec)`. You can install the '
                    + '"safe-json-stringify" module to have Bunyan fallback '
                    + 'to safer stringification. Record:\n'
                    + _indent(format('%s\n%s', util.inspect(rec), e.stack)),
                    dedupKey);
                return format('(Exception in JSON.stringify(rec): %j. '
                    + 'See stderr for details.)', e.message);
            }
        }
    }
}


var RotatingFileStream = null;
if (mv) {

RotatingFileStream = function RotatingFileStream(options) {
    this.path = options.path;

    this.count = (options.count == null ? 10 : options.count);
    assert.equal(typeof (this.count), 'number',
        format('rotating-file stream "count" is not a number: %j (%s) in %j',
            this.count, typeof (this.count), this));
    assert.ok(this.count >= 0,
        format('rotating-file stream "count" is not >= 0: %j in %j',
            this.count, this));

    // Parse `options.period`.
    if (options.period) {
        // <number><scope> where scope is:
        //    h   hours (at the start of the hour)
        //    d   days (at the start of the day, i.e. just after midnight)
        //    w   weeks (at the start of Sunday)
        //    m   months (on the first of the month)
        //    y   years (at the start of Jan 1st)
        // with special values 'hourly' (1h), 'daily' (1d), "weekly" (1w),
        // 'monthly' (1m) and 'yearly' (1y)
        var period = {
            'hourly': '1h',
            'daily': '1d',
            'weekly': '1w',
            'monthly': '1m',
            'yearly': '1y'
        }[options.period] || options.period;
        var m = /^([1-9][0-9]*)([hdwmy]|ms)$/.exec(period);
        if (!m) {
            throw new Error(format('invalid period: "%s"', options.period));
        }
        this.periodNum = Number(m[1]);
        this.periodScope = m[2];
    } else {
        this.periodNum = 1;
        this.periodScope = 'd';
    }

    var lastModified = null;
    try {
        var fileInfo = fs.statSync(this.path);
        lastModified = fileInfo.mtime.getTime();
    }
    catch (err) {
        // file doesn't exist
    }
    var rotateAfterOpen = false;
    if (lastModified) {
        var lastRotTime = this._calcRotTime(0);
        if (lastModified < lastRotTime) {
            rotateAfterOpen = true;
        }
    }

    // TODO: template support for backup files
    // template: <path to which to rotate>
    //      default is %P.%n
    //      '/var/log/archive/foo.log'  -> foo.log.%n
    //      '/var/log/archive/foo.log.%n'
    //      codes:
    //          XXX support strftime codes (per node version of those)
    //              or whatever module. Pick non-colliding for extra
    //              codes
    //          %P      `path` base value
    //          %n      integer number of rotated log (1,2,3,...)
    //          %d      datetime in YYYY-MM-DD_HH-MM-SS
    //                      XXX what should default date format be?
    //                          prior art? Want to avoid ':' in
    //                          filenames (illegal on Windows for one).

    this.stream = fs.createWriteStream(this.path,
        {flags: 'a', encoding: 'utf8'});

    this.rotQueue = [];
    this.rotating = false;
    if (rotateAfterOpen) {
        this._debug('rotateAfterOpen -> call rotate()');
        this.rotate();
    } else {
        this._setupNextRot();
    }
}

util.inherits(RotatingFileStream, EventEmitter);

RotatingFileStream.prototype._debug = function () {
    // Set this to `true` to add debug logging.
    if (false) {
        if (arguments.length === 0) {
            return true;
        }
        var args = Array.prototype.slice.call(arguments);
        args[0] = '[' + (new Date().toISOString()) + ', '
            + this.path + '] ' + args[0];
        console.log.apply(this, args);
    } else {
        return false;
    }
};

RotatingFileStream.prototype._setupNextRot = function () {
    this.rotAt = this._calcRotTime(1);
    this._setRotationTimer();
}

RotatingFileStream.prototype._setRotationTimer = function () {
    var self = this;
    var delay = this.rotAt - Date.now();
    // Cap timeout to Node's max setTimeout, see
    // <https://github.com/joyent/node/issues/8656>.
    var TIMEOUT_MAX = 2147483647; // 2^31-1
    if (delay > TIMEOUT_MAX) {
        delay = TIMEOUT_MAX;
    }
    this.timeout = setTimeout(
        function () {
            self._debug('_setRotationTimer timeout -> call rotate()');
            self.rotate();
        },
        delay);
    if (typeof (this.timeout.unref) === 'function') {
        this.timeout.unref();
    }
}

RotatingFileStream.prototype._calcRotTime =
function _calcRotTime(periodOffset) {
    this._debug('_calcRotTime: %s%s', this.periodNum, this.periodScope);
    var d = new Date();

    this._debug('  now local: %s', d);
    this._debug('    now utc: %s', d.toISOString());
    var rotAt;
    switch (this.periodScope) {
    case 'ms':
        // Hidden millisecond period for debugging.
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * periodOffset;
        } else {
            rotAt = Date.now() + this.periodNum * periodOffset;
        }
        break;
    case 'h':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 60 * 60 * 1000 * periodOffset;
        } else {
            // First time: top of the next hour.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate(), d.getUTCHours() + periodOffset);
        }
        break;
    case 'd':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: start of tomorrow (i.e. at the coming midnight) UTC.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + periodOffset);
        }
        break;
    case 'w':
        // Currently, always on Sunday morning at 00:00:00 (UTC).
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 7 * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: this coming Sunday.
            var dayOffset = (7 - d.getUTCDay());
            if (periodOffset < 1) {
                dayOffset = -d.getUTCDay();
            }
            if (periodOffset > 1 || periodOffset < -1) {
                dayOffset += 7 * periodOffset;
            }
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + dayOffset);
        }
        break;
    case 'm':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + this.periodNum * periodOffset, 1);
        } else {
            // First time: the start of the next month.
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + periodOffset, 1);
        }
        break;
    case 'y':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear() + this.periodNum * periodOffset,
                0, 1);
        } else {
            // First time: the start of the next year.
            rotAt = Date.UTC(d.getUTCFullYear() + periodOffset, 0, 1);
        }
        break;
    default:
        assert.fail(format('invalid period scope: "%s"', this.periodScope));
    }

    if (this._debug()) {
        this._debug('  **rotAt**: %s (utc: %s)', rotAt,
            new Date(rotAt).toUTCString());
        var now = Date.now();
        this._debug('        now: %s (%sms == %smin == %sh to go)',
            now,
            rotAt - now,
            (rotAt-now)/1000/60,
            (rotAt-now)/1000/60/60);
    }
    return rotAt;
};

RotatingFileStream.prototype.rotate = function rotate() {
    // XXX What about shutdown?
    var self = this;

    // If rotation period is > ~25 days, we have to break into multiple
    // setTimeout's. See <https://github.com/joyent/node/issues/8656>.
    if (self.rotAt && self.rotAt > Date.now()) {
        return self._setRotationTimer();
    }

    this._debug('rotate');
    if (self.rotating) {
        throw new TypeError('cannot start a rotation when already rotating');
    }
    self.rotating = true;

    self.stream.end();  // XXX can do moves sync after this? test at high rate

    function del() {
        var toDel = self.path + '.' + String(n - 1);
        if (n === 0) {
            toDel = self.path;
        }
        n -= 1;
        self._debug('  rm %s', toDel);
        fs.unlink(toDel, function (delErr) {
            //XXX handle err other than not exists
            moves();
        });
    }

    function moves() {
        if (self.count === 0 || n < 0) {
            return finish();
        }
        var before = self.path;
        var after = self.path + '.' + String(n);
        if (n > 0) {
            before += '.' + String(n - 1);
        }
        n -= 1;
        fs.exists(before, function (exists) {
            if (!exists) {
                moves();
            } else {
                self._debug('  mv %s %s', before, after);
                mv(before, after, function (mvErr) {
                    if (mvErr) {
                        self.emit('error', mvErr);
                        finish(); // XXX finish here?
                    } else {
                        moves();
                    }
                });
            }
        })
    }

    function finish() {
        self._debug('  open %s', self.path);
        self.stream = fs.createWriteStream(self.path,
            {flags: 'a', encoding: 'utf8'});
        var q = self.rotQueue, len = q.length;
        for (var i = 0; i < len; i++) {
            self.stream.write(q[i]);
        }
        self.rotQueue = [];
        self.rotating = false;
        self.emit('drain');
        self._setupNextRot();
    }

    var n = this.count;
    del();
};

RotatingFileStream.prototype.write = function write(s) {
    if (this.rotating) {
        this.rotQueue.push(s);
        return false;
    } else {
        return this.stream.write(s);
    }
};

RotatingFileStream.prototype.end = function end(s) {
    this.stream.end();
};

RotatingFileStream.prototype.destroy = function destroy(s) {
    this.stream.destroy();
};

RotatingFileStream.prototype.destroySoon = function destroySoon(s) {
    this.stream.destroySoon();
};

} /* if (mv) */



/**
 * RingBuffer is a Writable Stream that just stores the last N records in
 * memory.
 *
 * @param options {Object}, with the following fields:
 *
 *    - limit: number of records to keep in memory
 */
function RingBuffer(options) {
    this.limit = options && options.limit ? options.limit : 100;
    this.writable = true;
    this.records = [];
    EventEmitter.call(this);
}

util.inherits(RingBuffer, EventEmitter);

RingBuffer.prototype.write = function (record) {
    if (!this.writable)
        throw (new Error('RingBuffer has been ended already'));

    this.records.push(record);

    if (this.records.length > this.limit)
        this.records.shift();

    return (true);
};

RingBuffer.prototype.end = function () {
    if (arguments.length > 0)
        this.write.apply(this, Array.prototype.slice.call(arguments));
    this.writable = false;
};

RingBuffer.prototype.destroy = function () {
    this.writable = false;
    this.emit('close');
};

RingBuffer.prototype.destroySoon = function () {
    this.destroy();
};


//---- Exports

module.exports = Logger;

module.exports.TRACE = TRACE;
module.exports.DEBUG = DEBUG;
module.exports.INFO = INFO;
module.exports.WARN = WARN;
module.exports.ERROR = ERROR;
module.exports.FATAL = FATAL;
module.exports.resolveLevel = resolveLevel;
module.exports.levelFromName = levelFromName;
module.exports.nameFromLevel = nameFromLevel;

module.exports.VERSION = VERSION;
module.exports.LOG_VERSION = LOG_VERSION;

module.exports.createLogger = function createLogger(options) {
    return new Logger(options);
};

module.exports.RingBuffer = RingBuffer;
module.exports.RotatingFileStream = RotatingFileStream;

// Useful for custom `type == 'raw'` streams that may do JSON stringification
// of log records themselves. Usage:
//    var str = JSON.stringify(rec, bunyan.safeCycles());
module.exports.safeCycles = safeCycles;
 at SyntaxError: Unexpected token (85:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":5}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int":0,"ExpansionArg_type_4":1,"ExpansionArg_string":"","_bound":9} start 39.7362 took 5.2476s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int":0,"ExpansionArg_type_4":1,"ExpansionArg_string":"","_bound":9}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int":0,"ExpansionArg_type_4":1,"ExpansionArg_string":"","_bound":9}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int":0,"ExpansionArg_type_4":5,"ExpansionArg_array_length":0,"_bound":12,"ExpansionArg_bool":false} start 40.3849 took 4.8095s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int":0,"ExpansionArg_type_4":5,"ExpansionArg_array_length":0,"_bound":12,"ExpansionArg_bool":false}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"ExpansionArg_int":0,"ExpansionArg_type_4":5,"ExpansionArg_array_length":0,"_bound":12}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":1,"_bound":10} start 39.8943 took 5.416s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":1,"_bound":10}
* Error: TypeError: Cannot set property 'chronicler' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":1,"_bound":10}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"ExpansionArg_type_4":0,"_bound":10} start 40.1238 took 5.2952s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"ExpansionArg_type_4":0,"_bound":10}
* Error: TypeError: Cannot set property 'chronicler' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"ExpansionArg_type_4":0,"_bound":10}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":9,"ExpansionArg_array_element_0_type":0} start 40.1969 took 5.3531s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":9,"ExpansionArg_array_element_0_type":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":9}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":10,"ExpansionArg_array_element_1_type":0} start 40.2851 took 5.53s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":10,"ExpansionArg_array_element_1_type":0}
* Error: TypeError: Cannot set property 'chronicler' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":10}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":11,"ExpansionArg_array_element_0_type":0} start 41.2999 took 5.3319s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":11,"ExpansionArg_array_element_0_type":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_array_length":1,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":11}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":15,"ExpansionArg_array_element_2_type":0} start 41.3624 took 5.3616s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":15,"ExpansionArg_array_element_2_type":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":15}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":5,"ExpansionArg_type_2":4,"ExpansionArg_array_length":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":14} start 43.1071 took 5.1496s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":5,"ExpansionArg_type_2":4,"ExpansionArg_array_length":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":14}
* Error: TypeError: Cannot set property 'chronicler' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":5,"ExpansionArg_type_2":4,"ExpansionArg_array_length":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":14}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":7,"ExpansionArg_array_length":0} start 41.877 took 6.4187s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":7,"ExpansionArg_array_length":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":7}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":1,"ExpansionArg_type_4":0,"_bound":12,"ExpansionArg_array_element_0_type":0} start 43.02 took 5.3854s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":1,"ExpansionArg_type_4":0,"_bound":12,"ExpansionArg_array_element_0_type":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":1,"ExpansionArg_type_4":0,"_bound":12}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":3,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"_bound":4,"ExpansionArg_string":"PureString"} start 39.487 took 9.5636s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":3,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"_bound":4,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (85:4) on program /**
 * Copyright (c) 2017 Trent Mick.
 * Copyright (c) 2017 Joyent Inc.
 *
 * The bunyan logging library for node.js.
 *
 * -*- mode: js -*-
 * vim: expandtab:ts=4:sw=4
 */

var VERSION = '1.8.12';

/*
 * Bunyan log format version. This becomes the 'v' field on all log records.
 * This will be incremented if there is any backward incompatible change to
 * the log record format. Details will be in 'CHANGES.md' (the change log).
 */
var LOG_VERSION = 0;


var xxx = function xxx(s) {     // internal dev/debug logging
    var args = ['XX' + 'X: '+s].concat(
        Array.prototype.slice.call(arguments, 1));
    console.error.apply(this, args);
};
var xxx = function xxx() {};  // comment out to turn on debug logging


/*
 * Runtime environment notes:
 *
 * Bunyan is intended to run in a number of runtime environments. Here are
 * some notes on differences for those envs and how the code copes.
 *
 * - node.js: The primary target environment.
 * - NW.js: http://nwjs.io/  An *app* environment that feels like both a
 *   node env -- it has node-like globals (`process`, `global`) and
 *   browser-like globals (`window`, `navigator`). My *understanding* is that
 *   bunyan can operate as if this is vanilla node.js.
 * - browser: Failing the above, we sniff using the `window` global
 *   <https://developer.mozilla.org/en-US/docs/Web/API/Window/window>.
 *      - browserify: http://browserify.org/  A browser-targetting bundler of
 *        node.js deps. The runtime is a browser env, so can't use fs access,
 *        etc. Browserify's build looks for `require(<single-string>)` imports
 *        to bundle. For some imports it won't be able to handle, we "hide"
 *        from browserify with `require('frobshizzle' + '')`.
 * - Other? Please open issues if things are broken.
 */
var runtimeEnv;
if (typeof (process) !== 'undefined' && process.versions) {
    if (process.versions.nw) {
        runtimeEnv = 'nw';
    } else if (process.versions.node) {
        runtimeEnv = 'node';
    }
}
if (!runtimeEnv && typeof (window) !== 'undefined' &&
    window.window === window) {
    runtimeEnv = 'browser';
}
if (!runtimeEnv) {
    throw new Error('unknown runtime environment');
}


var os, fs, dtrace;
if (runtimeEnv === 'browser') {
    os = {
        hostname: function () {
            return window.location.host;
        }
    };
    fs = {};
    dtrace = null;
} else {
    os = require('os');
    fs = require('fs');
    try {
        dtrace = require('dtrace-provider' + '');
    } catch (e) {
        dtrace = null;
    }
}
var util = require('util');
var assert = require('assert');
var EventEmitter = require('events').EventEmitter;
var stream = require('stream');

try {
    var safeJsonStringify = require('safe-json-stringify');
} catch (e) {
    safeJsonStringify = null;
}
if (process.env.BUNYAN_TEST_NO_SAFE_JSON_STRINGIFY) {
    safeJsonStringify = null;
}

// The 'mv' module is required for rotating-file stream support.
try {
    var mv = require('mv' + '');
} catch (e) {
    mv = null;
}

try {
    var sourceMapSupport = require('source-map-support' + '');
} catch (_) {
    sourceMapSupport = null;
}


//---- Internal support stuff

/**
 * A shallow copy of an object. Bunyan logging attempts to never cause
 * exceptions, so this function attempts to handle non-objects gracefully.
 */
function objCopy(obj) {
    if (obj == null) {  // null or undefined
        return obj;
    } else if (Array.isArray(obj)) {
        return obj.slice();
    } else if (typeof (obj) === 'object') {
        var copy = {};
        Object.keys(obj).forEach(function (k) {
            copy[k] = obj[k];
        });
        return copy;
    } else {
        return obj;
    }
}

var format = util.format;
if (!format) {
    // If node < 0.6, then use its `util.format`:
    // <https://github.com/joyent/node/blob/master/lib/util.js#L22>:
    var inspect = util.inspect;
    var formatRegExp = /%[sdj%]/g;
    format = function format(f) {
        if (typeof (f) !== 'string') {
            var objects = [];
            for (var i = 0; i < arguments.length; i++) {
                objects.push(inspect(arguments[i]));
            }
            return objects.join(' ');
        }

        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function (x) {
            if (i >= len)
                return x;
            switch (x) {
                case '%s': return String(args[i++]);
                case '%d': return Number(args[i++]);
                case '%j': return fastAndSafeJsonStringify(args[i++]);
                case '%%': return '%';
                default:
                    return x;
            }
        });
        for (var x = args[i]; i < len; x = args[++i]) {
            if (x === null || typeof (x) !== 'object') {
                str += ' ' + x;
            } else {
                str += ' ' + inspect(x);
            }
        }
        return str;
    };
}


/**
 * Gather some caller info 3 stack levels up.
 * See <http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi>.
 */
function getCaller3Info() {
    if (this === undefined) {
        // Cannot access caller info in 'strict' mode.
        return;
    }
    var obj = {};
    var saveLimit = Error.stackTraceLimit;
    var savePrepare = Error.prepareStackTrace;
    Error.stackTraceLimit = 3;

    Error.prepareStackTrace = function (_, stack) {
        var caller = stack[2];
        if (sourceMapSupport) {
            caller = sourceMapSupport.wrapCallSite(caller);
        }
        obj.file = caller.getFileName();
        obj.line = caller.getLineNumber();
        var func = caller.getFunctionName();
        if (func)
            obj.func = func;
    };
    Error.captureStackTrace(this, getCaller3Info);
    this.stack;

    Error.stackTraceLimit = saveLimit;
    Error.prepareStackTrace = savePrepare;
    return obj;
}


function _indent(s, indent) {
    if (!indent) indent = '    ';
    var lines = s.split(/\r?\n/g);
    return indent + lines.join('\n' + indent);
}


/**
 * Warn about an bunyan processing error.
 *
 * @param msg {String} Message with which to warn.
 * @param dedupKey {String} Optional. A short string key for this warning to
 *      have its warning only printed once.
 */
function _warn(msg, dedupKey) {
    assert.ok(msg);
    if (dedupKey) {
        if (_warned[dedupKey]) {
            return;
        }
        _warned[dedupKey] = true;
    }
    process.stderr.write(msg + '\n');
}
function _haveWarned(dedupKey) {
    return _warned[dedupKey];
}
var _warned = {};


function ConsoleRawStream() {}
ConsoleRawStream.prototype.write = function (rec) {
    if (rec.level < INFO) {
        console.log(rec);
    } else if (rec.level < WARN) {
        console.info(rec);
    } else if (rec.level < ERROR) {
        console.warn(rec);
    } else {
        console.error(rec);
    }
};


//---- Levels

var TRACE = 10;
var DEBUG = 20;
var INFO = 30;
var WARN = 40;
var ERROR = 50;
var FATAL = 60;

var levelFromName = {
    'trace': TRACE,
    'debug': DEBUG,
    'info': INFO,
    'warn': WARN,
    'error': ERROR,
    'fatal': FATAL
};
var nameFromLevel = {};
Object.keys(levelFromName).forEach(function (name) {
    nameFromLevel[levelFromName[name]] = name;
});

// Dtrace probes.
var dtp = undefined;
var probes = dtrace && {};

/**
 * Resolve a level number, name (upper or lowercase) to a level number value.
 *
 * @param nameOrNum {String|Number} A level name (case-insensitive) or positive
 *      integer level.
 * @api public
 */
function resolveLevel(nameOrNum) {
    var level;
    var type = typeof (nameOrNum);
    if (type === 'string') {
        level = levelFromName[nameOrNum.toLowerCase()];
        if (!level) {
            throw new Error(format('unknown level name: "%s"', nameOrNum));
        }
    } else if (type !== 'number') {
        throw new TypeError(format('cannot resolve level: invalid arg (%s):',
            type, nameOrNum));
    } else if (nameOrNum < 0 || Math.floor(nameOrNum) !== nameOrNum) {
        throw new TypeError(format('level is not a positive integer: %s',
            nameOrNum));
    } else {
        level = nameOrNum;
    }
    return level;
}


function isWritable(obj) {
    if (obj instanceof stream.Writable) {
        return true;
    }
    return typeof (obj.write) === 'function';
}


//---- Logger class

/**
 * Create a Logger instance.
 *
 * @param options {Object} See documentation for full details. At minimum
 *    this must include a 'name' string key. Configuration keys:
 *      - `streams`: specify the logger output streams. This is an array of
 *        objects with these fields:
 *          - `type`: The stream type. See README.md for full details.
 *            Often this is implied by the other fields. Examples are
 *            'file', 'stream' and "raw".
 *          - `level`: Defaults to 'info'.
 *          - `path` or `stream`: The specify the file path or writeable
 *            stream to which log records are written. E.g.
 *            `stream: process.stdout`.
 *          - `closeOnExit` (boolean): Optional. Default is true for a
 *            'file' stream when `path` is given, false otherwise.
 *        See README.md for full details.
 *      - `level`: set the level for a single output stream (cannot be used
 *        with `streams`)
 *      - `stream`: the output stream for a logger with just one, e.g.
 *        `process.stdout` (cannot be used with `streams`)
 *      - `serializers`: object mapping log record field names to
 *        serializing functions. See README.md for details.
 *      - `src`: Boolean (default false). Set true to enable 'src' automatic
 *        field with log call source info.
 *    All other keys are log record fields.
 *
 * An alternative *internal* call signature is used for creating a child:
 *    new Logger(<parent logger>, <child options>[, <child opts are simple>]);
 *
 * @param _childSimple (Boolean) An assertion that the given `_childOptions`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation.
 */
function Logger(options, _childOptions, _childSimple) {
    xxx('Logger start:', options)
    if (!(this instanceof Logger)) {
        return new Logger(options, _childOptions);
    }

    // Input arg validation.
    var parent;
    if (_childOptions !== undefined) {
        parent = options;
        options = _childOptions;
        if (!(parent instanceof Logger)) {
            throw new TypeError(
                'invalid Logger creation: do not pass a second arg');
        }
    }
    if (!options) {
        throw new TypeError('options (object) is required');
    }
    if (!parent) {
        if (!options.name) {
            throw new TypeError('options.name (string) is required');
        }
    } else {
        if (options.name) {
            throw new TypeError(
                'invalid options.name: child cannot set logger name');
        }
    }
    if (options.stream && options.streams) {
        throw new TypeError('cannot mix "streams" and "stream" options');
    }
    if (options.streams && !Array.isArray(options.streams)) {
        throw new TypeError('invalid options.streams: must be an array')
    }
    if (options.serializers && (typeof (options.serializers) !== 'object' ||
            Array.isArray(options.serializers))) {
        throw new TypeError('invalid options.serializers: must be an object')
    }

    EventEmitter.call(this);

    // Fast path for simple child creation.
    if (parent && _childSimple) {
        // `_isSimpleChild` is a signal to stream close handling that this child
        // owns none of its streams.
        this._isSimpleChild = true;

        this._level = parent._level;
        this.streams = parent.streams;
        this.serializers = parent.serializers;
        this.src = parent.src;
        var fields = this.fields = {};
        var parentFieldNames = Object.keys(parent.fields);
        for (var i = 0; i < parentFieldNames.length; i++) {
            var name = parentFieldNames[i];
            fields[name] = parent.fields[name];
        }
        var names = Object.keys(options);
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            fields[name] = options[name];
        }
        return;
    }

    // Start values.
    var self = this;
    if (parent) {
        this._level = parent._level;
        this.streams = [];
        for (var i = 0; i < parent.streams.length; i++) {
            var s = objCopy(parent.streams[i]);
            s.closeOnExit = false; // Don't own parent stream.
            this.streams.push(s);
        }
        this.serializers = objCopy(parent.serializers);
        this.src = parent.src;
        this.fields = objCopy(parent.fields);
        if (options.level) {
            this.level(options.level);
        }
    } else {
        this._level = Number.POSITIVE_INFINITY;
        this.streams = [];
        this.serializers = null;
        this.src = false;
        this.fields = {};
    }

    if (!dtp && dtrace) {
        dtp = dtrace.createDTraceProvider('bunyan');

        for (var level in levelFromName) {
            var probe;

            probes[levelFromName[level]] = probe =
                dtp.addProbe('log-' + level, 'char *');

            // Explicitly add a reference to dtp to prevent it from being GC'd
            probe.dtp = dtp;
        }

        dtp.enable();
    }

    // Handle *config* options (i.e. options that are not just plain data
    // for log records).
    if (options.stream) {
        self.addStream({
            type: 'stream',
            stream: options.stream,
            closeOnExit: false,
            level: options.level
        });
    } else if (options.streams) {
        options.streams.forEach(function (s) {
            self.addStream(s, options.level);
        });
    } else if (parent && options.level) {
        this.level(options.level);
    } else if (!parent) {
        if (runtimeEnv === 'browser') {
            /*
             * In the browser we'll be emitting to console.log by default.
             * Any console.log worth its salt these days can nicely render
             * and introspect objects (e.g. the Firefox and Chrome console)
             * so let's emit the raw log record. Are there browsers for which
             * that breaks things?
             */
            self.addStream({
                type: 'raw',
                stream: new ConsoleRawStream(),
                closeOnExit: false,
                level: options.level
            });
        } else {
            self.addStream({
                type: 'stream',
                stream: process.stdout,
                closeOnExit: false,
                level: options.level
            });
        }
    }
    if (options.serializers) {
        self.addSerializers(options.serializers);
    }
    if (options.src) {
        this.src = true;
    }
    xxx('Logger: ', self)

    // Fields.
    // These are the default fields for log records (minus the attributes
    // removed in this constructor). To allow storing raw log records
    // (unrendered), `this.fields` must never be mutated. Create a copy for
    // any changes.
    var fields = objCopy(options);
    delete fields.stream;
    delete fields.level;
    delete fields.streams;
    delete fields.serializers;
    delete fields.src;
    if (this.serializers) {
        this._applySerializers(fields);
    }
    if (!fields.hostname && !self.fields.hostname) {
        fields.hostname = os.hostname();
    }
    if (!fields.pid) {
        fields.pid = process.pid;
    }
    Object.keys(fields).forEach(function (k) {
        self.fields[k] = fields[k];
    });
}

util.inherits(Logger, EventEmitter);


/**
 * Add a stream
 *
 * @param stream {Object}. Object with these fields:
 *    - `type`: The stream type. See README.md for full details.
 *      Often this is implied by the other fields. Examples are
 *      'file', 'stream' and "raw".
 *    - `path` or `stream`: The specify the file path or writeable
 *      stream to which log records are written. E.g.
 *      `stream: process.stdout`.
 *    - `level`: Optional. Falls back to `defaultLevel`.
 *    - `closeOnExit` (boolean): Optional. Default is true for a
 *      'file' stream when `path` is given, false otherwise.
 *    See README.md for full details.
 * @param defaultLevel {Number|String} Optional. A level to use if
 *      `stream.level` is not set. If neither is given, this defaults to INFO.
 */
Logger.prototype.addStream = function addStream(s, defaultLevel) {
    var self = this;
    if (defaultLevel === null || defaultLevel === undefined) {
        defaultLevel = INFO;
    }

    s = objCopy(s);

    // Implicit 'type' from other args.
    if (!s.type) {
        if (s.stream) {
            s.type = 'stream';
        } else if (s.path) {
            s.type = 'file'
        }
    }
    s.raw = (s.type === 'raw');  // PERF: Allow for faster check in `_emit`.

    if (s.level !== undefined) {
        s.level = resolveLevel(s.level);
    } else {
        s.level = resolveLevel(defaultLevel);
    }
    if (s.level < self._level) {
        self._level = s.level;
    }

    switch (s.type) {
    case 'stream':
        assert.ok(isWritable(s.stream),
                  '"stream" stream is not writable: ' + util.inspect(s.stream));

        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    case 'file':
        if (s.reemitErrorEvents === undefined) {
            s.reemitErrorEvents = true;
        }
        if (!s.stream) {
            s.stream = fs.createWriteStream(s.path,
                                            {flags: 'a', encoding: 'utf8'});
            if (!s.closeOnExit) {
                s.closeOnExit = true;
            }
        } else {
            if (!s.closeOnExit) {
                s.closeOnExit = false;
            }
        }
        break;
    case 'rotating-file':
        assert.ok(!s.stream,
                  '"rotating-file" stream should not give a "stream"');
        assert.ok(s.path);
        assert.ok(mv, '"rotating-file" stream type is not supported: '
                      + 'missing "mv" module');
        s.stream = new RotatingFileStream(s);
        if (!s.closeOnExit) {
            s.closeOnExit = true;
        }
        break;
    case 'raw':
        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    default:
        throw new TypeError('unknown stream type "' + s.type + '"');
    }

    if (s.reemitErrorEvents && typeof (s.stream.on) === 'function') {
        // TODO: When we have `<logger>.close()`, it should remove event
        //      listeners to not leak Logger instances.
        s.stream.on('error', function onStreamError(err) {
            self.emit('error', err, s);
        });
    }

    self.streams.push(s);
    delete self.haveNonRawStreams;  // reset
}


/**
 * Add serializers
 *
 * @param serializers {Object} Optional. Object mapping log record field names
 *    to serializing functions. See README.md for details.
 */
Logger.prototype.addSerializers = function addSerializers(serializers) {
    var self = this;

    if (!self.serializers) {
        self.serializers = {};
    }
    Object.keys(serializers).forEach(function (field) {
        var serializer = serializers[field];
        if (typeof (serializer) !== 'function') {
            throw new TypeError(format(
                'invalid serializer for "%s" field: must be a function',
                field));
        } else {
            self.serializers[field] = serializer;
        }
    });
}



/**
 * Create a child logger, typically to add a few log record fields.
 *
 * This can be useful when passing a logger to a sub-component, e.g. a
 * 'wuzzle' component of your service:
 *
 *    var wuzzleLog = log.child({component: 'wuzzle'})
 *    var wuzzle = new Wuzzle({..., log: wuzzleLog})
 *
 * Then log records from the wuzzle code will have the same structure as
 * the app log, *plus the component='wuzzle' field*.
 *
 * @param options {Object} Optional. Set of options to apply to the child.
 *    All of the same options for a new Logger apply here. Notes:
 *      - The parent's streams are inherited and cannot be removed in this
 *        call. Any given `streams` are *added* to the set inherited from
 *        the parent.
 *      - The parent's serializers are inherited, though can effectively be
 *        overwritten by using duplicate keys.
 *      - Can use `level` to set the level of the streams inherited from
 *        the parent. The level for the parent is NOT affected.
 * @param simple {Boolean} Optional. Set to true to assert that `options`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation. See 'tools/timechild.js' for numbers.
 */
Logger.prototype.child = function (options, simple) {
    return new (this.constructor)(this, options || {}, simple);
}


/**
 * A convenience method to reopen 'file' streams on a logger. This can be
 * useful with external log rotation utilities that move and re-open log files
 * (e.g. logrotate on Linux, logadm on SmartOS/Illumos). Those utilities
 * typically have rotation options to copy-and-truncate the log file, but
 * you may not want to use that. An alternative is to do this in your
 * application:
 *
 *      var log = bunyan.createLogger(...);
 *      ...
 *      process.on('SIGUSR2', function () {
 *          log.reopenFileStreams();
 *      });
 *      ...
 *
 * See <https://github.com/trentm/node-bunyan/issues/104>.
 */
Logger.prototype.reopenFileStreams = function () {
    var self = this;
    self.streams.forEach(function (s) {
        if (s.type === 'file') {
            if (s.stream) {
                // Not sure if typically would want this, or more immediate
                // `s.stream.destroy()`.
                s.stream.end();
                s.stream.destroySoon();
                delete s.stream;
            }
            s.stream = fs.createWriteStream(s.path,
                {flags: 'a', encoding: 'utf8'});
            s.stream.on('error', function (err) {
                self.emit('error', err, s);
            });
        }
    });
};


/* BEGIN JSSTYLED */
/**
 * Close this logger.
 *
 * This closes streams (that it owns, as per 'endOnClose' attributes on
 * streams), etc. Typically you **don't** need to bother calling this.
Logger.prototype.close = function () {
    if (this._closed) {
        return;
    }
    if (!this._isSimpleChild) {
        self.streams.forEach(function (s) {
            if (s.endOnClose) {
                xxx('closing stream s:', s);
                s.stream.end();
                s.endOnClose = false;
            }
        });
    }
    this._closed = true;
}
 */
/* END JSSTYLED */


/**
 * Get/set the level of all streams on this logger.
 *
 * Get Usage:
 *    // Returns the current log level (lowest level of all its streams).
 *    log.level() -> INFO
 *
 * Set Usage:
 *    log.level(INFO)       // set all streams to level INFO
 *    log.level('info')     // can use 'info' et al aliases
 */
Logger.prototype.level = function level(value) {
    if (value === undefined) {
        return this._level;
    }
    var newLevel = resolveLevel(value);
    var len = this.streams.length;
    for (var i = 0; i < len; i++) {
        this.streams[i].level = newLevel;
    }
    this._level = newLevel;
}


/**
 * Get/set the level of a particular stream on this logger.
 *
 * Get Usage:
 *    // Returns an array of the levels of each stream.
 *    log.levels() -> [TRACE, INFO]
 *
 *    // Returns a level of the identified stream.
 *    log.levels(0) -> TRACE      // level of stream at index 0
 *    log.levels('foo')           // level of stream with name 'foo'
 *
 * Set Usage:
 *    log.levels(0, INFO)         // set level of stream 0 to INFO
 *    log.levels(0, 'info')       // can use 'info' et al aliases
 *    log.levels('foo', WARN)     // set stream named 'foo' to WARN
 *
 * Stream names: When streams are defined, they can optionally be given
 * a name. For example,
 *       log = new Logger({
 *         streams: [
 *           {
 *             name: 'foo',
 *             path: '/var/log/my-service/foo.log'
 *             level: 'trace'
 *           },
 *         ...
 *
 * @param name {String|Number} The stream index or name.
 * @param value {Number|String} The level value (INFO) or alias ('info').
 *    If not given, this is a 'get' operation.
 * @throws {Error} If there is no stream with the given name.
 */
Logger.prototype.levels = function levels(name, value) {
    if (name === undefined) {
        assert.equal(value, undefined);
        return this.streams.map(
            function (s) { return s.level });
    }
    var stream;
    if (typeof (name) === 'number') {
        stream = this.streams[name];
        if (stream === undefined) {
            throw new Error('invalid stream index: ' + name);
        }
    } else {
        var len = this.streams.length;
        for (var i = 0; i < len; i++) {
            var s = this.streams[i];
            if (s.name === name) {
                stream = s;
                break;
            }
        }
        if (!stream) {
            throw new Error(format('no stream with name "%s"', name));
        }
    }
    if (value === undefined) {
        return stream.level;
    } else {
        var newLevel = resolveLevel(value);
        stream.level = newLevel;
        if (newLevel < this._level) {
            this._level = newLevel;
        }
    }
}


/**
 * Apply registered serializers to the appropriate keys in the given fields.
 *
 * Pre-condition: This is only called if there is at least one serializer.
 *
 * @param fields (Object) The log record fields.
 * @param excludeFields (Object) Optional mapping of keys to `true` for
 *    keys to NOT apply a serializer.
 */
Logger.prototype._applySerializers = function (fields, excludeFields) {
    var self = this;

    xxx('_applySerializers: excludeFields', excludeFields);

    // Check each serializer against these (presuming number of serializers
    // is typically less than number of fields).
    Object.keys(this.serializers).forEach(function (name) {
        if (fields[name] === undefined ||
            (excludeFields && excludeFields[name]))
        {
            return;
        }
        xxx('_applySerializers; apply to "%s" key', name)
        try {
            fields[name] = self.serializers[name](fields[name]);
        } catch (err) {
            _warn(format('bunyan: ERROR: Exception thrown from the "%s" '
                + 'Bunyan serializer. This should never happen. This is a bug '
                + 'in that serializer function.\n%s',
                name, err.stack || err));
            fields[name] = format('(Error in Bunyan log "%s" serializer '
                + 'broke field. See stderr for details.)', name);
        }
    });
}


/**
 * Emit a log record.
 *
 * @param rec {log record}
 * @param noemit {Boolean} Optional. Set to true to skip emission
 *      and just return the JSON string.
 */
Logger.prototype._emit = function (rec, noemit) {
    var i;

    // Lazily determine if this Logger has non-'raw' streams. If there are
    // any, then we need to stringify the log record.
    if (this.haveNonRawStreams === undefined) {
        this.haveNonRawStreams = false;
        for (i = 0; i < this.streams.length; i++) {
            if (!this.streams[i].raw) {
                this.haveNonRawStreams = true;
                break;
            }
        }
    }

    // Stringify the object (creates a warning str on error).
    var str;
    if (noemit || this.haveNonRawStreams) {
        str = fastAndSafeJsonStringify(rec) + '\n';
    }

    if (noemit)
        return str;

    var level = rec.level;
    for (i = 0; i < this.streams.length; i++) {
        var s = this.streams[i];
        if (s.level <= level) {
            xxx('writing log rec "%s" to "%s" stream (%d <= %d): %j',
                rec.msg, s.type, s.level, level, rec);
            s.stream.write(s.raw ? rec : str);
        }
    };

    return str;
}


/**
 * Build a record object suitable for emitting from the arguments
 * provided to the a log emitter.
 */
function mkRecord(log, minLevel, args) {
    var excludeFields, fields, msgArgs;
    if (args[0] instanceof Error) {
        // `log.<level>(err, ...)`
        fields = {
            // Use this Logger's err serializer, if defined.
            err: (log.serializers && log.serializers.err
                ? log.serializers.err(args[0])
                : Logger.stdSerializers.err(args[0]))
        };
        excludeFields = {err: true};
        if (args.length === 1) {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    } else if (typeof (args[0]) !== 'object' || Array.isArray(args[0])) {
        // `log.<level>(msg, ...)`
        fields = null;
        msgArgs = args.slice();
    } else if (Buffer.isBuffer(args[0])) {  // `log.<level>(buf, ...)`
        // Almost certainly an error, show `inspect(buf)`. See bunyan
        // issue #35.
        fields = null;
        msgArgs = args.slice();
        msgArgs[0] = util.inspect(msgArgs[0]);
    } else {  // `log.<level>(fields, msg, ...)`
        fields = args[0];
        if (fields && args.length === 1 && fields.err &&
            fields.err instanceof Error)
        {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    }

    // Build up the record object.
    var rec = objCopy(log.fields);
    var level = rec.level = minLevel;
    var recFields = (fields ? objCopy(fields) : null);
    if (recFields) {
        if (log.serializers) {
            log._applySerializers(recFields, excludeFields);
        }
        Object.keys(recFields).forEach(function (k) {
            rec[k] = recFields[k];
        });
    }
    rec.msg = format.apply(log, msgArgs);
    if (!rec.time) {
        rec.time = (new Date());
    }
    // Get call source info
    if (log.src && !rec.src) {
        rec.src = getCaller3Info()
    }
    rec.v = LOG_VERSION;

    return rec;
};


/**
 * Build an array that dtrace-provider can use to fire a USDT probe. If we've
 * already built the appropriate string, we use it. Otherwise, build the
 * record object and stringify it.
 */
function mkProbeArgs(str, log, minLevel, msgArgs) {
    return [ str || log._emit(mkRecord(log, minLevel, msgArgs), true) ];
}


/**
 * Build a log emitter function for level minLevel. I.e. this is the
 * creator of `log.info`, `log.error`, etc.
 */
function mkLogEmitter(minLevel) {
    return function () {
        var log = this;
        var str = null;
        var rec = null;

        if (!this._emit) {
            /*
             * Show this invalid Bunyan usage warning *once*.
             *
             * See <https://github.com/trentm/node-bunyan/issues/100> for
             * an example of how this can happen.
             */
            var dedupKey = 'unbound';
            if (!_haveWarned[dedupKey]) {
                var caller = getCaller3Info();
                _warn(format('bunyan usage error: %s:%s: attempt to log '
                    + 'with an unbound log method: `this` is: %s',
                    caller.file, caller.line, util.inspect(this)),
                    dedupKey);
            }
            return;
        } else if (arguments.length === 0) {   // `log.<level>()`
            return (this._level <= minLevel);
        }

        var msgArgs = new Array(arguments.length);
        for (var i = 0; i < msgArgs.length; ++i) {
            msgArgs[i] = arguments[i];
        }

        if (this._level <= minLevel) {
            rec = mkRecord(log, minLevel, msgArgs);
            str = this._emit(rec);
        }

        if (probes) {
            probes[minLevel].fire(mkProbeArgs, str, log, minLevel, msgArgs);
        }
    }
}


/**
 * The functions below log a record at a specific level.
 *
 * Usages:
 *    log.<level>()  -> boolean is-trace-enabled
 *    log.<level>(<Error> err, [<string> msg, ...])
 *    log.<level>(<string> msg, ...)
 *    log.<level>(<object> fields, <string> msg, ...)
 *
 * where <level> is the lowercase version of the log level. E.g.:
 *
 *    log.info()
 *
 * @params fields {Object} Optional set of additional fields to log.
 * @params msg {String} Log message. This can be followed by additional
 *    arguments that are handled like
 *    [util.format](http://nodejs.org/docs/latest/api/all.html#util.format).
 */
Logger.prototype.trace = mkLogEmitter(TRACE);
Logger.prototype.debug = mkLogEmitter(DEBUG);
Logger.prototype.info = mkLogEmitter(INFO);
Logger.prototype.warn = mkLogEmitter(WARN);
Logger.prototype.error = mkLogEmitter(ERROR);
Logger.prototype.fatal = mkLogEmitter(FATAL);



//---- Standard serializers
// A serializer is a function that serializes a JavaScript object to a
// JSON representation for logging. There is a standard set of presumed
// interesting objects in node.js-land.

Logger.stdSerializers = {};

// Serialize an HTTP request.
Logger.stdSerializers.req = function (req) {
    if (!req || !req.connection)
        return req;
    return {
        method: req.method,
        url: req.url,
        headers: req.headers,
        remoteAddress: req.connection.remoteAddress,
        remotePort: req.connection.remotePort
    };
    // Trailers: Skipping for speed. If you need trailers in your app, then
    // make a custom serializer.
    //if (Object.keys(trailers).length > 0) {
    //  obj.trailers = req.trailers;
    //}
};

// Serialize an HTTP response.
Logger.stdSerializers.res = function (res) {
    if (!res || !res.statusCode)
        return res;
    return {
        statusCode: res.statusCode,
        header: res._header
    }
};


/*
 * This function dumps long stack traces for exceptions having a cause()
 * method. The error classes from
 * [verror](https://github.com/davepacheco/node-verror) and
 * [restify v2.0](https://github.com/mcavage/node-restify) are examples.
 *
 * Based on `dumpException` in
 * https://github.com/davepacheco/node-extsprintf/blob/master/lib/extsprintf.js
 */
function getFullErrorStack(ex)
{
    var ret = ex.stack || ex.toString();
    if (ex.cause && typeof (ex.cause) === 'function') {
        var cex = ex.cause();
        if (cex) {
            ret += '\nCaused by: ' + getFullErrorStack(cex);
        }
    }
    return (ret);
}

// Serialize an Error object
// (Core error properties are enumerable in node 0.4, not in 0.6).
var errSerializer = Logger.stdSerializers.err = function (err) {
    if (!err || !err.stack)
        return err;
    var obj = {
        message: err.message,
        name: err.name,
        stack: getFullErrorStack(err),
        code: err.code,
        signal: err.signal
    }
    return obj;
};


// A JSON stringifier that handles cycles safely - tracks seen values in a Set.
function safeCyclesSet() {
    var seen = new Set();
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.has(val)) {
            return '[Circular]';
        }
        seen.add(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely - tracks seen vals in an Array.
 *
 * Note: This approach has performance problems when dealing with large objects,
 * see trentm/node-bunyan#445, but since this is the only option for node 0.10
 * and earlier (as Set was introduced in Node 0.12), it's used as a fallback
 * when Set is not available.
 */
function safeCyclesArray() {
    var seen = [];
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.indexOf(val) !== -1) {
            return '[Circular]';
        }
        seen.push(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely.
 *
 * Usage: JSON.stringify(obj, safeCycles())
 *
 * Choose the best safe cycle function from what is available - see
 * trentm/node-bunyan#445.
 */
var safeCycles = typeof (Set) !== 'undefined' ? safeCyclesSet : safeCyclesArray;

/**
 * A fast JSON.stringify that handles cycles and getter exceptions (when
 * safeJsonStringify is installed).
 *
 * This function attempts to use the regular JSON.stringify for speed, but on
 * error (e.g. JSON cycle detection exception) it falls back to safe stringify
 * handlers that can deal with cycles and/or getter exceptions.
 */
function fastAndSafeJsonStringify(rec) {
    try {
        return JSON.stringify(rec);
    } catch (ex) {
        try {
            return JSON.stringify(rec, safeCycles());
        } catch (e) {
            if (safeJsonStringify) {
                return safeJsonStringify(rec);
            } else {
                var dedupKey = e.stack.split(/\n/g, 3).join('\n');
                _warn('bunyan: ERROR: Exception in '
                    + '`JSON.stringify(rec)`. You can install the '
                    + '"safe-json-stringify" module to have Bunyan fallback '
                    + 'to safer stringification. Record:\n'
                    + _indent(format('%s\n%s', util.inspect(rec), e.stack)),
                    dedupKey);
                return format('(Exception in JSON.stringify(rec): %j. '
                    + 'See stderr for details.)', e.message);
            }
        }
    }
}


var RotatingFileStream = null;
if (mv) {

RotatingFileStream = function RotatingFileStream(options) {
    this.path = options.path;

    this.count = (options.count == null ? 10 : options.count);
    assert.equal(typeof (this.count), 'number',
        format('rotating-file stream "count" is not a number: %j (%s) in %j',
            this.count, typeof (this.count), this));
    assert.ok(this.count >= 0,
        format('rotating-file stream "count" is not >= 0: %j in %j',
            this.count, this));

    // Parse `options.period`.
    if (options.period) {
        // <number><scope> where scope is:
        //    h   hours (at the start of the hour)
        //    d   days (at the start of the day, i.e. just after midnight)
        //    w   weeks (at the start of Sunday)
        //    m   months (on the first of the month)
        //    y   years (at the start of Jan 1st)
        // with special values 'hourly' (1h), 'daily' (1d), "weekly" (1w),
        // 'monthly' (1m) and 'yearly' (1y)
        var period = {
            'hourly': '1h',
            'daily': '1d',
            'weekly': '1w',
            'monthly': '1m',
            'yearly': '1y'
        }[options.period] || options.period;
        var m = /^([1-9][0-9]*)([hdwmy]|ms)$/.exec(period);
        if (!m) {
            throw new Error(format('invalid period: "%s"', options.period));
        }
        this.periodNum = Number(m[1]);
        this.periodScope = m[2];
    } else {
        this.periodNum = 1;
        this.periodScope = 'd';
    }

    var lastModified = null;
    try {
        var fileInfo = fs.statSync(this.path);
        lastModified = fileInfo.mtime.getTime();
    }
    catch (err) {
        // file doesn't exist
    }
    var rotateAfterOpen = false;
    if (lastModified) {
        var lastRotTime = this._calcRotTime(0);
        if (lastModified < lastRotTime) {
            rotateAfterOpen = true;
        }
    }

    // TODO: template support for backup files
    // template: <path to which to rotate>
    //      default is %P.%n
    //      '/var/log/archive/foo.log'  -> foo.log.%n
    //      '/var/log/archive/foo.log.%n'
    //      codes:
    //          XXX support strftime codes (per node version of those)
    //              or whatever module. Pick non-colliding for extra
    //              codes
    //          %P      `path` base value
    //          %n      integer number of rotated log (1,2,3,...)
    //          %d      datetime in YYYY-MM-DD_HH-MM-SS
    //                      XXX what should default date format be?
    //                          prior art? Want to avoid ':' in
    //                          filenames (illegal on Windows for one).

    this.stream = fs.createWriteStream(this.path,
        {flags: 'a', encoding: 'utf8'});

    this.rotQueue = [];
    this.rotating = false;
    if (rotateAfterOpen) {
        this._debug('rotateAfterOpen -> call rotate()');
        this.rotate();
    } else {
        this._setupNextRot();
    }
}

util.inherits(RotatingFileStream, EventEmitter);

RotatingFileStream.prototype._debug = function () {
    // Set this to `true` to add debug logging.
    if (false) {
        if (arguments.length === 0) {
            return true;
        }
        var args = Array.prototype.slice.call(arguments);
        args[0] = '[' + (new Date().toISOString()) + ', '
            + this.path + '] ' + args[0];
        console.log.apply(this, args);
    } else {
        return false;
    }
};

RotatingFileStream.prototype._setupNextRot = function () {
    this.rotAt = this._calcRotTime(1);
    this._setRotationTimer();
}

RotatingFileStream.prototype._setRotationTimer = function () {
    var self = this;
    var delay = this.rotAt - Date.now();
    // Cap timeout to Node's max setTimeout, see
    // <https://github.com/joyent/node/issues/8656>.
    var TIMEOUT_MAX = 2147483647; // 2^31-1
    if (delay > TIMEOUT_MAX) {
        delay = TIMEOUT_MAX;
    }
    this.timeout = setTimeout(
        function () {
            self._debug('_setRotationTimer timeout -> call rotate()');
            self.rotate();
        },
        delay);
    if (typeof (this.timeout.unref) === 'function') {
        this.timeout.unref();
    }
}

RotatingFileStream.prototype._calcRotTime =
function _calcRotTime(periodOffset) {
    this._debug('_calcRotTime: %s%s', this.periodNum, this.periodScope);
    var d = new Date();

    this._debug('  now local: %s', d);
    this._debug('    now utc: %s', d.toISOString());
    var rotAt;
    switch (this.periodScope) {
    case 'ms':
        // Hidden millisecond period for debugging.
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * periodOffset;
        } else {
            rotAt = Date.now() + this.periodNum * periodOffset;
        }
        break;
    case 'h':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 60 * 60 * 1000 * periodOffset;
        } else {
            // First time: top of the next hour.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate(), d.getUTCHours() + periodOffset);
        }
        break;
    case 'd':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: start of tomorrow (i.e. at the coming midnight) UTC.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + periodOffset);
        }
        break;
    case 'w':
        // Currently, always on Sunday morning at 00:00:00 (UTC).
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 7 * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: this coming Sunday.
            var dayOffset = (7 - d.getUTCDay());
            if (periodOffset < 1) {
                dayOffset = -d.getUTCDay();
            }
            if (periodOffset > 1 || periodOffset < -1) {
                dayOffset += 7 * periodOffset;
            }
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + dayOffset);
        }
        break;
    case 'm':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + this.periodNum * periodOffset, 1);
        } else {
            // First time: the start of the next month.
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + periodOffset, 1);
        }
        break;
    case 'y':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear() + this.periodNum * periodOffset,
                0, 1);
        } else {
            // First time: the start of the next year.
            rotAt = Date.UTC(d.getUTCFullYear() + periodOffset, 0, 1);
        }
        break;
    default:
        assert.fail(format('invalid period scope: "%s"', this.periodScope));
    }

    if (this._debug()) {
        this._debug('  **rotAt**: %s (utc: %s)', rotAt,
            new Date(rotAt).toUTCString());
        var now = Date.now();
        this._debug('        now: %s (%sms == %smin == %sh to go)',
            now,
            rotAt - now,
            (rotAt-now)/1000/60,
            (rotAt-now)/1000/60/60);
    }
    return rotAt;
};

RotatingFileStream.prototype.rotate = function rotate() {
    // XXX What about shutdown?
    var self = this;

    // If rotation period is > ~25 days, we have to break into multiple
    // setTimeout's. See <https://github.com/joyent/node/issues/8656>.
    if (self.rotAt && self.rotAt > Date.now()) {
        return self._setRotationTimer();
    }

    this._debug('rotate');
    if (self.rotating) {
        throw new TypeError('cannot start a rotation when already rotating');
    }
    self.rotating = true;

    self.stream.end();  // XXX can do moves sync after this? test at high rate

    function del() {
        var toDel = self.path + '.' + String(n - 1);
        if (n === 0) {
            toDel = self.path;
        }
        n -= 1;
        self._debug('  rm %s', toDel);
        fs.unlink(toDel, function (delErr) {
            //XXX handle err other than not exists
            moves();
        });
    }

    function moves() {
        if (self.count === 0 || n < 0) {
            return finish();
        }
        var before = self.path;
        var after = self.path + '.' + String(n);
        if (n > 0) {
            before += '.' + String(n - 1);
        }
        n -= 1;
        fs.exists(before, function (exists) {
            if (!exists) {
                moves();
            } else {
                self._debug('  mv %s %s', before, after);
                mv(before, after, function (mvErr) {
                    if (mvErr) {
                        self.emit('error', mvErr);
                        finish(); // XXX finish here?
                    } else {
                        moves();
                    }
                });
            }
        })
    }

    function finish() {
        self._debug('  open %s', self.path);
        self.stream = fs.createWriteStream(self.path,
            {flags: 'a', encoding: 'utf8'});
        var q = self.rotQueue, len = q.length;
        for (var i = 0; i < len; i++) {
            self.stream.write(q[i]);
        }
        self.rotQueue = [];
        self.rotating = false;
        self.emit('drain');
        self._setupNextRot();
    }

    var n = this.count;
    del();
};

RotatingFileStream.prototype.write = function write(s) {
    if (this.rotating) {
        this.rotQueue.push(s);
        return false;
    } else {
        return this.stream.write(s);
    }
};

RotatingFileStream.prototype.end = function end(s) {
    this.stream.end();
};

RotatingFileStream.prototype.destroy = function destroy(s) {
    this.stream.destroy();
};

RotatingFileStream.prototype.destroySoon = function destroySoon(s) {
    this.stream.destroySoon();
};

} /* if (mv) */



/**
 * RingBuffer is a Writable Stream that just stores the last N records in
 * memory.
 *
 * @param options {Object}, with the following fields:
 *
 *    - limit: number of records to keep in memory
 */
function RingBuffer(options) {
    this.limit = options && options.limit ? options.limit : 100;
    this.writable = true;
    this.records = [];
    EventEmitter.call(this);
}

util.inherits(RingBuffer, EventEmitter);

RingBuffer.prototype.write = function (record) {
    if (!this.writable)
        throw (new Error('RingBuffer has been ended already'));

    this.records.push(record);

    if (this.records.length > this.limit)
        this.records.shift();

    return (true);
};

RingBuffer.prototype.end = function () {
    if (arguments.length > 0)
        this.write.apply(this, Array.prototype.slice.call(arguments));
    this.writable = false;
};

RingBuffer.prototype.destroy = function () {
    this.writable = false;
    this.emit('close');
};

RingBuffer.prototype.destroySoon = function () {
    this.destroy();
};


//---- Exports

module.exports = Logger;

module.exports.TRACE = TRACE;
module.exports.DEBUG = DEBUG;
module.exports.INFO = INFO;
module.exports.WARN = WARN;
module.exports.ERROR = ERROR;
module.exports.FATAL = FATAL;
module.exports.resolveLevel = resolveLevel;
module.exports.levelFromName = levelFromName;
module.exports.nameFromLevel = nameFromLevel;

module.exports.VERSION = VERSION;
module.exports.LOG_VERSION = LOG_VERSION;

module.exports.createLogger = function createLogger(options) {
    return new Logger(options);
};

module.exports.RingBuffer = RingBuffer;
module.exports.RotatingFileStream = RotatingFileStream;

// Useful for custom `type == 'raw'` streams that may do JSON stringification
// of log records themselves. Usage:
//    var str = JSON.stringify(rec, bunyan.safeCycles());
module.exports.safeCycles = safeCycles;
 at SyntaxError: Unexpected token (85:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":3,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"_bound":4}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":1,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":8} start 44.5654 took 5.3219s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":1,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":8}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":1,"ExpansionArg_string":"","ExpansionArg_type_4":0,"_bound":8}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":5} start 40.5942 took 9.57s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":5}
* Error: Tropigate failed because SyntaxError: Unexpected token (85:4) on program /**
 * Copyright (c) 2017 Trent Mick.
 * Copyright (c) 2017 Joyent Inc.
 *
 * The bunyan logging library for node.js.
 *
 * -*- mode: js -*-
 * vim: expandtab:ts=4:sw=4
 */

var VERSION = '1.8.12';

/*
 * Bunyan log format version. This becomes the 'v' field on all log records.
 * This will be incremented if there is any backward incompatible change to
 * the log record format. Details will be in 'CHANGES.md' (the change log).
 */
var LOG_VERSION = 0;


var xxx = function xxx(s) {     // internal dev/debug logging
    var args = ['XX' + 'X: '+s].concat(
        Array.prototype.slice.call(arguments, 1));
    console.error.apply(this, args);
};
var xxx = function xxx() {};  // comment out to turn on debug logging


/*
 * Runtime environment notes:
 *
 * Bunyan is intended to run in a number of runtime environments. Here are
 * some notes on differences for those envs and how the code copes.
 *
 * - node.js: The primary target environment.
 * - NW.js: http://nwjs.io/  An *app* environment that feels like both a
 *   node env -- it has node-like globals (`process`, `global`) and
 *   browser-like globals (`window`, `navigator`). My *understanding* is that
 *   bunyan can operate as if this is vanilla node.js.
 * - browser: Failing the above, we sniff using the `window` global
 *   <https://developer.mozilla.org/en-US/docs/Web/API/Window/window>.
 *      - browserify: http://browserify.org/  A browser-targetting bundler of
 *        node.js deps. The runtime is a browser env, so can't use fs access,
 *        etc. Browserify's build looks for `require(<single-string>)` imports
 *        to bundle. For some imports it won't be able to handle, we "hide"
 *        from browserify with `require('frobshizzle' + '')`.
 * - Other? Please open issues if things are broken.
 */
var runtimeEnv;
if (typeof (process) !== 'undefined' && process.versions) {
    if (process.versions.nw) {
        runtimeEnv = 'nw';
    } else if (process.versions.node) {
        runtimeEnv = 'node';
    }
}
if (!runtimeEnv && typeof (window) !== 'undefined' &&
    window.window === window) {
    runtimeEnv = 'browser';
}
if (!runtimeEnv) {
    throw new Error('unknown runtime environment');
}


var os, fs, dtrace;
if (runtimeEnv === 'browser') {
    os = {
        hostname: function () {
            return window.location.host;
        }
    };
    fs = {};
    dtrace = null;
} else {
    os = require('os');
    fs = require('fs');
    try {
        dtrace = require('dtrace-provider' + '');
    } catch (e) {
        dtrace = null;
    }
}
var util = require('util');
var assert = require('assert');
var EventEmitter = require('events').EventEmitter;
var stream = require('stream');

try {
    var safeJsonStringify = require('safe-json-stringify');
} catch (e) {
    safeJsonStringify = null;
}
if (process.env.BUNYAN_TEST_NO_SAFE_JSON_STRINGIFY) {
    safeJsonStringify = null;
}

// The 'mv' module is required for rotating-file stream support.
try {
    var mv = require('mv' + '');
} catch (e) {
    mv = null;
}

try {
    var sourceMapSupport = require('source-map-support' + '');
} catch (_) {
    sourceMapSupport = null;
}


//---- Internal support stuff

/**
 * A shallow copy of an object. Bunyan logging attempts to never cause
 * exceptions, so this function attempts to handle non-objects gracefully.
 */
function objCopy(obj) {
    if (obj == null) {  // null or undefined
        return obj;
    } else if (Array.isArray(obj)) {
        return obj.slice();
    } else if (typeof (obj) === 'object') {
        var copy = {};
        Object.keys(obj).forEach(function (k) {
            copy[k] = obj[k];
        });
        return copy;
    } else {
        return obj;
    }
}

var format = util.format;
if (!format) {
    // If node < 0.6, then use its `util.format`:
    // <https://github.com/joyent/node/blob/master/lib/util.js#L22>:
    var inspect = util.inspect;
    var formatRegExp = /%[sdj%]/g;
    format = function format(f) {
        if (typeof (f) !== 'string') {
            var objects = [];
            for (var i = 0; i < arguments.length; i++) {
                objects.push(inspect(arguments[i]));
            }
            return objects.join(' ');
        }

        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function (x) {
            if (i >= len)
                return x;
            switch (x) {
                case '%s': return String(args[i++]);
                case '%d': return Number(args[i++]);
                case '%j': return fastAndSafeJsonStringify(args[i++]);
                case '%%': return '%';
                default:
                    return x;
            }
        });
        for (var x = args[i]; i < len; x = args[++i]) {
            if (x === null || typeof (x) !== 'object') {
                str += ' ' + x;
            } else {
                str += ' ' + inspect(x);
            }
        }
        return str;
    };
}


/**
 * Gather some caller info 3 stack levels up.
 * See <http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi>.
 */
function getCaller3Info() {
    if (this === undefined) {
        // Cannot access caller info in 'strict' mode.
        return;
    }
    var obj = {};
    var saveLimit = Error.stackTraceLimit;
    var savePrepare = Error.prepareStackTrace;
    Error.stackTraceLimit = 3;

    Error.prepareStackTrace = function (_, stack) {
        var caller = stack[2];
        if (sourceMapSupport) {
            caller = sourceMapSupport.wrapCallSite(caller);
        }
        obj.file = caller.getFileName();
        obj.line = caller.getLineNumber();
        var func = caller.getFunctionName();
        if (func)
            obj.func = func;
    };
    Error.captureStackTrace(this, getCaller3Info);
    this.stack;

    Error.stackTraceLimit = saveLimit;
    Error.prepareStackTrace = savePrepare;
    return obj;
}


function _indent(s, indent) {
    if (!indent) indent = '    ';
    var lines = s.split(/\r?\n/g);
    return indent + lines.join('\n' + indent);
}


/**
 * Warn about an bunyan processing error.
 *
 * @param msg {String} Message with which to warn.
 * @param dedupKey {String} Optional. A short string key for this warning to
 *      have its warning only printed once.
 */
function _warn(msg, dedupKey) {
    assert.ok(msg);
    if (dedupKey) {
        if (_warned[dedupKey]) {
            return;
        }
        _warned[dedupKey] = true;
    }
    process.stderr.write(msg + '\n');
}
function _haveWarned(dedupKey) {
    return _warned[dedupKey];
}
var _warned = {};


function ConsoleRawStream() {}
ConsoleRawStream.prototype.write = function (rec) {
    if (rec.level < INFO) {
        console.log(rec);
    } else if (rec.level < WARN) {
        console.info(rec);
    } else if (rec.level < ERROR) {
        console.warn(rec);
    } else {
        console.error(rec);
    }
};


//---- Levels

var TRACE = 10;
var DEBUG = 20;
var INFO = 30;
var WARN = 40;
var ERROR = 50;
var FATAL = 60;

var levelFromName = {
    'trace': TRACE,
    'debug': DEBUG,
    'info': INFO,
    'warn': WARN,
    'error': ERROR,
    'fatal': FATAL
};
var nameFromLevel = {};
Object.keys(levelFromName).forEach(function (name) {
    nameFromLevel[levelFromName[name]] = name;
});

// Dtrace probes.
var dtp = undefined;
var probes = dtrace && {};

/**
 * Resolve a level number, name (upper or lowercase) to a level number value.
 *
 * @param nameOrNum {String|Number} A level name (case-insensitive) or positive
 *      integer level.
 * @api public
 */
function resolveLevel(nameOrNum) {
    var level;
    var type = typeof (nameOrNum);
    if (type === 'string') {
        level = levelFromName[nameOrNum.toLowerCase()];
        if (!level) {
            throw new Error(format('unknown level name: "%s"', nameOrNum));
        }
    } else if (type !== 'number') {
        throw new TypeError(format('cannot resolve level: invalid arg (%s):',
            type, nameOrNum));
    } else if (nameOrNum < 0 || Math.floor(nameOrNum) !== nameOrNum) {
        throw new TypeError(format('level is not a positive integer: %s',
            nameOrNum));
    } else {
        level = nameOrNum;
    }
    return level;
}


function isWritable(obj) {
    if (obj instanceof stream.Writable) {
        return true;
    }
    return typeof (obj.write) === 'function';
}


//---- Logger class

/**
 * Create a Logger instance.
 *
 * @param options {Object} See documentation for full details. At minimum
 *    this must include a 'name' string key. Configuration keys:
 *      - `streams`: specify the logger output streams. This is an array of
 *        objects with these fields:
 *          - `type`: The stream type. See README.md for full details.
 *            Often this is implied by the other fields. Examples are
 *            'file', 'stream' and "raw".
 *          - `level`: Defaults to 'info'.
 *          - `path` or `stream`: The specify the file path or writeable
 *            stream to which log records are written. E.g.
 *            `stream: process.stdout`.
 *          - `closeOnExit` (boolean): Optional. Default is true for a
 *            'file' stream when `path` is given, false otherwise.
 *        See README.md for full details.
 *      - `level`: set the level for a single output stream (cannot be used
 *        with `streams`)
 *      - `stream`: the output stream for a logger with just one, e.g.
 *        `process.stdout` (cannot be used with `streams`)
 *      - `serializers`: object mapping log record field names to
 *        serializing functions. See README.md for details.
 *      - `src`: Boolean (default false). Set true to enable 'src' automatic
 *        field with log call source info.
 *    All other keys are log record fields.
 *
 * An alternative *internal* call signature is used for creating a child:
 *    new Logger(<parent logger>, <child options>[, <child opts are simple>]);
 *
 * @param _childSimple (Boolean) An assertion that the given `_childOptions`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation.
 */
function Logger(options, _childOptions, _childSimple) {
    xxx('Logger start:', options)
    if (!(this instanceof Logger)) {
        return new Logger(options, _childOptions);
    }

    // Input arg validation.
    var parent;
    if (_childOptions !== undefined) {
        parent = options;
        options = _childOptions;
        if (!(parent instanceof Logger)) {
            throw new TypeError(
                'invalid Logger creation: do not pass a second arg');
        }
    }
    if (!options) {
        throw new TypeError('options (object) is required');
    }
    if (!parent) {
        if (!options.name) {
            throw new TypeError('options.name (string) is required');
        }
    } else {
        if (options.name) {
            throw new TypeError(
                'invalid options.name: child cannot set logger name');
        }
    }
    if (options.stream && options.streams) {
        throw new TypeError('cannot mix "streams" and "stream" options');
    }
    if (options.streams && !Array.isArray(options.streams)) {
        throw new TypeError('invalid options.streams: must be an array')
    }
    if (options.serializers && (typeof (options.serializers) !== 'object' ||
            Array.isArray(options.serializers))) {
        throw new TypeError('invalid options.serializers: must be an object')
    }

    EventEmitter.call(this);

    // Fast path for simple child creation.
    if (parent && _childSimple) {
        // `_isSimpleChild` is a signal to stream close handling that this child
        // owns none of its streams.
        this._isSimpleChild = true;

        this._level = parent._level;
        this.streams = parent.streams;
        this.serializers = parent.serializers;
        this.src = parent.src;
        var fields = this.fields = {};
        var parentFieldNames = Object.keys(parent.fields);
        for (var i = 0; i < parentFieldNames.length; i++) {
            var name = parentFieldNames[i];
            fields[name] = parent.fields[name];
        }
        var names = Object.keys(options);
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            fields[name] = options[name];
        }
        return;
    }

    // Start values.
    var self = this;
    if (parent) {
        this._level = parent._level;
        this.streams = [];
        for (var i = 0; i < parent.streams.length; i++) {
            var s = objCopy(parent.streams[i]);
            s.closeOnExit = false; // Don't own parent stream.
            this.streams.push(s);
        }
        this.serializers = objCopy(parent.serializers);
        this.src = parent.src;
        this.fields = objCopy(parent.fields);
        if (options.level) {
            this.level(options.level);
        }
    } else {
        this._level = Number.POSITIVE_INFINITY;
        this.streams = [];
        this.serializers = null;
        this.src = false;
        this.fields = {};
    }

    if (!dtp && dtrace) {
        dtp = dtrace.createDTraceProvider('bunyan');

        for (var level in levelFromName) {
            var probe;

            probes[levelFromName[level]] = probe =
                dtp.addProbe('log-' + level, 'char *');

            // Explicitly add a reference to dtp to prevent it from being GC'd
            probe.dtp = dtp;
        }

        dtp.enable();
    }

    // Handle *config* options (i.e. options that are not just plain data
    // for log records).
    if (options.stream) {
        self.addStream({
            type: 'stream',
            stream: options.stream,
            closeOnExit: false,
            level: options.level
        });
    } else if (options.streams) {
        options.streams.forEach(function (s) {
            self.addStream(s, options.level);
        });
    } else if (parent && options.level) {
        this.level(options.level);
    } else if (!parent) {
        if (runtimeEnv === 'browser') {
            /*
             * In the browser we'll be emitting to console.log by default.
             * Any console.log worth its salt these days can nicely render
             * and introspect objects (e.g. the Firefox and Chrome console)
             * so let's emit the raw log record. Are there browsers for which
             * that breaks things?
             */
            self.addStream({
                type: 'raw',
                stream: new ConsoleRawStream(),
                closeOnExit: false,
                level: options.level
            });
        } else {
            self.addStream({
                type: 'stream',
                stream: process.stdout,
                closeOnExit: false,
                level: options.level
            });
        }
    }
    if (options.serializers) {
        self.addSerializers(options.serializers);
    }
    if (options.src) {
        this.src = true;
    }
    xxx('Logger: ', self)

    // Fields.
    // These are the default fields for log records (minus the attributes
    // removed in this constructor). To allow storing raw log records
    // (unrendered), `this.fields` must never be mutated. Create a copy for
    // any changes.
    var fields = objCopy(options);
    delete fields.stream;
    delete fields.level;
    delete fields.streams;
    delete fields.serializers;
    delete fields.src;
    if (this.serializers) {
        this._applySerializers(fields);
    }
    if (!fields.hostname && !self.fields.hostname) {
        fields.hostname = os.hostname();
    }
    if (!fields.pid) {
        fields.pid = process.pid;
    }
    Object.keys(fields).forEach(function (k) {
        self.fields[k] = fields[k];
    });
}

util.inherits(Logger, EventEmitter);


/**
 * Add a stream
 *
 * @param stream {Object}. Object with these fields:
 *    - `type`: The stream type. See README.md for full details.
 *      Often this is implied by the other fields. Examples are
 *      'file', 'stream' and "raw".
 *    - `path` or `stream`: The specify the file path or writeable
 *      stream to which log records are written. E.g.
 *      `stream: process.stdout`.
 *    - `level`: Optional. Falls back to `defaultLevel`.
 *    - `closeOnExit` (boolean): Optional. Default is true for a
 *      'file' stream when `path` is given, false otherwise.
 *    See README.md for full details.
 * @param defaultLevel {Number|String} Optional. A level to use if
 *      `stream.level` is not set. If neither is given, this defaults to INFO.
 */
Logger.prototype.addStream = function addStream(s, defaultLevel) {
    var self = this;
    if (defaultLevel === null || defaultLevel === undefined) {
        defaultLevel = INFO;
    }

    s = objCopy(s);

    // Implicit 'type' from other args.
    if (!s.type) {
        if (s.stream) {
            s.type = 'stream';
        } else if (s.path) {
            s.type = 'file'
        }
    }
    s.raw = (s.type === 'raw');  // PERF: Allow for faster check in `_emit`.

    if (s.level !== undefined) {
        s.level = resolveLevel(s.level);
    } else {
        s.level = resolveLevel(defaultLevel);
    }
    if (s.level < self._level) {
        self._level = s.level;
    }

    switch (s.type) {
    case 'stream':
        assert.ok(isWritable(s.stream),
                  '"stream" stream is not writable: ' + util.inspect(s.stream));

        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    case 'file':
        if (s.reemitErrorEvents === undefined) {
            s.reemitErrorEvents = true;
        }
        if (!s.stream) {
            s.stream = fs.createWriteStream(s.path,
                                            {flags: 'a', encoding: 'utf8'});
            if (!s.closeOnExit) {
                s.closeOnExit = true;
            }
        } else {
            if (!s.closeOnExit) {
                s.closeOnExit = false;
            }
        }
        break;
    case 'rotating-file':
        assert.ok(!s.stream,
                  '"rotating-file" stream should not give a "stream"');
        assert.ok(s.path);
        assert.ok(mv, '"rotating-file" stream type is not supported: '
                      + 'missing "mv" module');
        s.stream = new RotatingFileStream(s);
        if (!s.closeOnExit) {
            s.closeOnExit = true;
        }
        break;
    case 'raw':
        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    default:
        throw new TypeError('unknown stream type "' + s.type + '"');
    }

    if (s.reemitErrorEvents && typeof (s.stream.on) === 'function') {
        // TODO: When we have `<logger>.close()`, it should remove event
        //      listeners to not leak Logger instances.
        s.stream.on('error', function onStreamError(err) {
            self.emit('error', err, s);
        });
    }

    self.streams.push(s);
    delete self.haveNonRawStreams;  // reset
}


/**
 * Add serializers
 *
 * @param serializers {Object} Optional. Object mapping log record field names
 *    to serializing functions. See README.md for details.
 */
Logger.prototype.addSerializers = function addSerializers(serializers) {
    var self = this;

    if (!self.serializers) {
        self.serializers = {};
    }
    Object.keys(serializers).forEach(function (field) {
        var serializer = serializers[field];
        if (typeof (serializer) !== 'function') {
            throw new TypeError(format(
                'invalid serializer for "%s" field: must be a function',
                field));
        } else {
            self.serializers[field] = serializer;
        }
    });
}



/**
 * Create a child logger, typically to add a few log record fields.
 *
 * This can be useful when passing a logger to a sub-component, e.g. a
 * 'wuzzle' component of your service:
 *
 *    var wuzzleLog = log.child({component: 'wuzzle'})
 *    var wuzzle = new Wuzzle({..., log: wuzzleLog})
 *
 * Then log records from the wuzzle code will have the same structure as
 * the app log, *plus the component='wuzzle' field*.
 *
 * @param options {Object} Optional. Set of options to apply to the child.
 *    All of the same options for a new Logger apply here. Notes:
 *      - The parent's streams are inherited and cannot be removed in this
 *        call. Any given `streams` are *added* to the set inherited from
 *        the parent.
 *      - The parent's serializers are inherited, though can effectively be
 *        overwritten by using duplicate keys.
 *      - Can use `level` to set the level of the streams inherited from
 *        the parent. The level for the parent is NOT affected.
 * @param simple {Boolean} Optional. Set to true to assert that `options`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation. See 'tools/timechild.js' for numbers.
 */
Logger.prototype.child = function (options, simple) {
    return new (this.constructor)(this, options || {}, simple);
}


/**
 * A convenience method to reopen 'file' streams on a logger. This can be
 * useful with external log rotation utilities that move and re-open log files
 * (e.g. logrotate on Linux, logadm on SmartOS/Illumos). Those utilities
 * typically have rotation options to copy-and-truncate the log file, but
 * you may not want to use that. An alternative is to do this in your
 * application:
 *
 *      var log = bunyan.createLogger(...);
 *      ...
 *      process.on('SIGUSR2', function () {
 *          log.reopenFileStreams();
 *      });
 *      ...
 *
 * See <https://github.com/trentm/node-bunyan/issues/104>.
 */
Logger.prototype.reopenFileStreams = function () {
    var self = this;
    self.streams.forEach(function (s) {
        if (s.type === 'file') {
            if (s.stream) {
                // Not sure if typically would want this, or more immediate
                // `s.stream.destroy()`.
                s.stream.end();
                s.stream.destroySoon();
                delete s.stream;
            }
            s.stream = fs.createWriteStream(s.path,
                {flags: 'a', encoding: 'utf8'});
            s.stream.on('error', function (err) {
                self.emit('error', err, s);
            });
        }
    });
};


/* BEGIN JSSTYLED */
/**
 * Close this logger.
 *
 * This closes streams (that it owns, as per 'endOnClose' attributes on
 * streams), etc. Typically you **don't** need to bother calling this.
Logger.prototype.close = function () {
    if (this._closed) {
        return;
    }
    if (!this._isSimpleChild) {
        self.streams.forEach(function (s) {
            if (s.endOnClose) {
                xxx('closing stream s:', s);
                s.stream.end();
                s.endOnClose = false;
            }
        });
    }
    this._closed = true;
}
 */
/* END JSSTYLED */


/**
 * Get/set the level of all streams on this logger.
 *
 * Get Usage:
 *    // Returns the current log level (lowest level of all its streams).
 *    log.level() -> INFO
 *
 * Set Usage:
 *    log.level(INFO)       // set all streams to level INFO
 *    log.level('info')     // can use 'info' et al aliases
 */
Logger.prototype.level = function level(value) {
    if (value === undefined) {
        return this._level;
    }
    var newLevel = resolveLevel(value);
    var len = this.streams.length;
    for (var i = 0; i < len; i++) {
        this.streams[i].level = newLevel;
    }
    this._level = newLevel;
}


/**
 * Get/set the level of a particular stream on this logger.
 *
 * Get Usage:
 *    // Returns an array of the levels of each stream.
 *    log.levels() -> [TRACE, INFO]
 *
 *    // Returns a level of the identified stream.
 *    log.levels(0) -> TRACE      // level of stream at index 0
 *    log.levels('foo')           // level of stream with name 'foo'
 *
 * Set Usage:
 *    log.levels(0, INFO)         // set level of stream 0 to INFO
 *    log.levels(0, 'info')       // can use 'info' et al aliases
 *    log.levels('foo', WARN)     // set stream named 'foo' to WARN
 *
 * Stream names: When streams are defined, they can optionally be given
 * a name. For example,
 *       log = new Logger({
 *         streams: [
 *           {
 *             name: 'foo',
 *             path: '/var/log/my-service/foo.log'
 *             level: 'trace'
 *           },
 *         ...
 *
 * @param name {String|Number} The stream index or name.
 * @param value {Number|String} The level value (INFO) or alias ('info').
 *    If not given, this is a 'get' operation.
 * @throws {Error} If there is no stream with the given name.
 */
Logger.prototype.levels = function levels(name, value) {
    if (name === undefined) {
        assert.equal(value, undefined);
        return this.streams.map(
            function (s) { return s.level });
    }
    var stream;
    if (typeof (name) === 'number') {
        stream = this.streams[name];
        if (stream === undefined) {
            throw new Error('invalid stream index: ' + name);
        }
    } else {
        var len = this.streams.length;
        for (var i = 0; i < len; i++) {
            var s = this.streams[i];
            if (s.name === name) {
                stream = s;
                break;
            }
        }
        if (!stream) {
            throw new Error(format('no stream with name "%s"', name));
        }
    }
    if (value === undefined) {
        return stream.level;
    } else {
        var newLevel = resolveLevel(value);
        stream.level = newLevel;
        if (newLevel < this._level) {
            this._level = newLevel;
        }
    }
}


/**
 * Apply registered serializers to the appropriate keys in the given fields.
 *
 * Pre-condition: This is only called if there is at least one serializer.
 *
 * @param fields (Object) The log record fields.
 * @param excludeFields (Object) Optional mapping of keys to `true` for
 *    keys to NOT apply a serializer.
 */
Logger.prototype._applySerializers = function (fields, excludeFields) {
    var self = this;

    xxx('_applySerializers: excludeFields', excludeFields);

    // Check each serializer against these (presuming number of serializers
    // is typically less than number of fields).
    Object.keys(this.serializers).forEach(function (name) {
        if (fields[name] === undefined ||
            (excludeFields && excludeFields[name]))
        {
            return;
        }
        xxx('_applySerializers; apply to "%s" key', name)
        try {
            fields[name] = self.serializers[name](fields[name]);
        } catch (err) {
            _warn(format('bunyan: ERROR: Exception thrown from the "%s" '
                + 'Bunyan serializer. This should never happen. This is a bug '
                + 'in that serializer function.\n%s',
                name, err.stack || err));
            fields[name] = format('(Error in Bunyan log "%s" serializer '
                + 'broke field. See stderr for details.)', name);
        }
    });
}


/**
 * Emit a log record.
 *
 * @param rec {log record}
 * @param noemit {Boolean} Optional. Set to true to skip emission
 *      and just return the JSON string.
 */
Logger.prototype._emit = function (rec, noemit) {
    var i;

    // Lazily determine if this Logger has non-'raw' streams. If there are
    // any, then we need to stringify the log record.
    if (this.haveNonRawStreams === undefined) {
        this.haveNonRawStreams = false;
        for (i = 0; i < this.streams.length; i++) {
            if (!this.streams[i].raw) {
                this.haveNonRawStreams = true;
                break;
            }
        }
    }

    // Stringify the object (creates a warning str on error).
    var str;
    if (noemit || this.haveNonRawStreams) {
        str = fastAndSafeJsonStringify(rec) + '\n';
    }

    if (noemit)
        return str;

    var level = rec.level;
    for (i = 0; i < this.streams.length; i++) {
        var s = this.streams[i];
        if (s.level <= level) {
            xxx('writing log rec "%s" to "%s" stream (%d <= %d): %j',
                rec.msg, s.type, s.level, level, rec);
            s.stream.write(s.raw ? rec : str);
        }
    };

    return str;
}


/**
 * Build a record object suitable for emitting from the arguments
 * provided to the a log emitter.
 */
function mkRecord(log, minLevel, args) {
    var excludeFields, fields, msgArgs;
    if (args[0] instanceof Error) {
        // `log.<level>(err, ...)`
        fields = {
            // Use this Logger's err serializer, if defined.
            err: (log.serializers && log.serializers.err
                ? log.serializers.err(args[0])
                : Logger.stdSerializers.err(args[0]))
        };
        excludeFields = {err: true};
        if (args.length === 1) {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    } else if (typeof (args[0]) !== 'object' || Array.isArray(args[0])) {
        // `log.<level>(msg, ...)`
        fields = null;
        msgArgs = args.slice();
    } else if (Buffer.isBuffer(args[0])) {  // `log.<level>(buf, ...)`
        // Almost certainly an error, show `inspect(buf)`. See bunyan
        // issue #35.
        fields = null;
        msgArgs = args.slice();
        msgArgs[0] = util.inspect(msgArgs[0]);
    } else {  // `log.<level>(fields, msg, ...)`
        fields = args[0];
        if (fields && args.length === 1 && fields.err &&
            fields.err instanceof Error)
        {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    }

    // Build up the record object.
    var rec = objCopy(log.fields);
    var level = rec.level = minLevel;
    var recFields = (fields ? objCopy(fields) : null);
    if (recFields) {
        if (log.serializers) {
            log._applySerializers(recFields, excludeFields);
        }
        Object.keys(recFields).forEach(function (k) {
            rec[k] = recFields[k];
        });
    }
    rec.msg = format.apply(log, msgArgs);
    if (!rec.time) {
        rec.time = (new Date());
    }
    // Get call source info
    if (log.src && !rec.src) {
        rec.src = getCaller3Info()
    }
    rec.v = LOG_VERSION;

    return rec;
};


/**
 * Build an array that dtrace-provider can use to fire a USDT probe. If we've
 * already built the appropriate string, we use it. Otherwise, build the
 * record object and stringify it.
 */
function mkProbeArgs(str, log, minLevel, msgArgs) {
    return [ str || log._emit(mkRecord(log, minLevel, msgArgs), true) ];
}


/**
 * Build a log emitter function for level minLevel. I.e. this is the
 * creator of `log.info`, `log.error`, etc.
 */
function mkLogEmitter(minLevel) {
    return function () {
        var log = this;
        var str = null;
        var rec = null;

        if (!this._emit) {
            /*
             * Show this invalid Bunyan usage warning *once*.
             *
             * See <https://github.com/trentm/node-bunyan/issues/100> for
             * an example of how this can happen.
             */
            var dedupKey = 'unbound';
            if (!_haveWarned[dedupKey]) {
                var caller = getCaller3Info();
                _warn(format('bunyan usage error: %s:%s: attempt to log '
                    + 'with an unbound log method: `this` is: %s',
                    caller.file, caller.line, util.inspect(this)),
                    dedupKey);
            }
            return;
        } else if (arguments.length === 0) {   // `log.<level>()`
            return (this._level <= minLevel);
        }

        var msgArgs = new Array(arguments.length);
        for (var i = 0; i < msgArgs.length; ++i) {
            msgArgs[i] = arguments[i];
        }

        if (this._level <= minLevel) {
            rec = mkRecord(log, minLevel, msgArgs);
            str = this._emit(rec);
        }

        if (probes) {
            probes[minLevel].fire(mkProbeArgs, str, log, minLevel, msgArgs);
        }
    }
}


/**
 * The functions below log a record at a specific level.
 *
 * Usages:
 *    log.<level>()  -> boolean is-trace-enabled
 *    log.<level>(<Error> err, [<string> msg, ...])
 *    log.<level>(<string> msg, ...)
 *    log.<level>(<object> fields, <string> msg, ...)
 *
 * where <level> is the lowercase version of the log level. E.g.:
 *
 *    log.info()
 *
 * @params fields {Object} Optional set of additional fields to log.
 * @params msg {String} Log message. This can be followed by additional
 *    arguments that are handled like
 *    [util.format](http://nodejs.org/docs/latest/api/all.html#util.format).
 */
Logger.prototype.trace = mkLogEmitter(TRACE);
Logger.prototype.debug = mkLogEmitter(DEBUG);
Logger.prototype.info = mkLogEmitter(INFO);
Logger.prototype.warn = mkLogEmitter(WARN);
Logger.prototype.error = mkLogEmitter(ERROR);
Logger.prototype.fatal = mkLogEmitter(FATAL);



//---- Standard serializers
// A serializer is a function that serializes a JavaScript object to a
// JSON representation for logging. There is a standard set of presumed
// interesting objects in node.js-land.

Logger.stdSerializers = {};

// Serialize an HTTP request.
Logger.stdSerializers.req = function (req) {
    if (!req || !req.connection)
        return req;
    return {
        method: req.method,
        url: req.url,
        headers: req.headers,
        remoteAddress: req.connection.remoteAddress,
        remotePort: req.connection.remotePort
    };
    // Trailers: Skipping for speed. If you need trailers in your app, then
    // make a custom serializer.
    //if (Object.keys(trailers).length > 0) {
    //  obj.trailers = req.trailers;
    //}
};

// Serialize an HTTP response.
Logger.stdSerializers.res = function (res) {
    if (!res || !res.statusCode)
        return res;
    return {
        statusCode: res.statusCode,
        header: res._header
    }
};


/*
 * This function dumps long stack traces for exceptions having a cause()
 * method. The error classes from
 * [verror](https://github.com/davepacheco/node-verror) and
 * [restify v2.0](https://github.com/mcavage/node-restify) are examples.
 *
 * Based on `dumpException` in
 * https://github.com/davepacheco/node-extsprintf/blob/master/lib/extsprintf.js
 */
function getFullErrorStack(ex)
{
    var ret = ex.stack || ex.toString();
    if (ex.cause && typeof (ex.cause) === 'function') {
        var cex = ex.cause();
        if (cex) {
            ret += '\nCaused by: ' + getFullErrorStack(cex);
        }
    }
    return (ret);
}

// Serialize an Error object
// (Core error properties are enumerable in node 0.4, not in 0.6).
var errSerializer = Logger.stdSerializers.err = function (err) {
    if (!err || !err.stack)
        return err;
    var obj = {
        message: err.message,
        name: err.name,
        stack: getFullErrorStack(err),
        code: err.code,
        signal: err.signal
    }
    return obj;
};


// A JSON stringifier that handles cycles safely - tracks seen values in a Set.
function safeCyclesSet() {
    var seen = new Set();
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.has(val)) {
            return '[Circular]';
        }
        seen.add(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely - tracks seen vals in an Array.
 *
 * Note: This approach has performance problems when dealing with large objects,
 * see trentm/node-bunyan#445, but since this is the only option for node 0.10
 * and earlier (as Set was introduced in Node 0.12), it's used as a fallback
 * when Set is not available.
 */
function safeCyclesArray() {
    var seen = [];
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.indexOf(val) !== -1) {
            return '[Circular]';
        }
        seen.push(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely.
 *
 * Usage: JSON.stringify(obj, safeCycles())
 *
 * Choose the best safe cycle function from what is available - see
 * trentm/node-bunyan#445.
 */
var safeCycles = typeof (Set) !== 'undefined' ? safeCyclesSet : safeCyclesArray;

/**
 * A fast JSON.stringify that handles cycles and getter exceptions (when
 * safeJsonStringify is installed).
 *
 * This function attempts to use the regular JSON.stringify for speed, but on
 * error (e.g. JSON cycle detection exception) it falls back to safe stringify
 * handlers that can deal with cycles and/or getter exceptions.
 */
function fastAndSafeJsonStringify(rec) {
    try {
        return JSON.stringify(rec);
    } catch (ex) {
        try {
            return JSON.stringify(rec, safeCycles());
        } catch (e) {
            if (safeJsonStringify) {
                return safeJsonStringify(rec);
            } else {
                var dedupKey = e.stack.split(/\n/g, 3).join('\n');
                _warn('bunyan: ERROR: Exception in '
                    + '`JSON.stringify(rec)`. You can install the '
                    + '"safe-json-stringify" module to have Bunyan fallback '
                    + 'to safer stringification. Record:\n'
                    + _indent(format('%s\n%s', util.inspect(rec), e.stack)),
                    dedupKey);
                return format('(Exception in JSON.stringify(rec): %j. '
                    + 'See stderr for details.)', e.message);
            }
        }
    }
}


var RotatingFileStream = null;
if (mv) {

RotatingFileStream = function RotatingFileStream(options) {
    this.path = options.path;

    this.count = (options.count == null ? 10 : options.count);
    assert.equal(typeof (this.count), 'number',
        format('rotating-file stream "count" is not a number: %j (%s) in %j',
            this.count, typeof (this.count), this));
    assert.ok(this.count >= 0,
        format('rotating-file stream "count" is not >= 0: %j in %j',
            this.count, this));

    // Parse `options.period`.
    if (options.period) {
        // <number><scope> where scope is:
        //    h   hours (at the start of the hour)
        //    d   days (at the start of the day, i.e. just after midnight)
        //    w   weeks (at the start of Sunday)
        //    m   months (on the first of the month)
        //    y   years (at the start of Jan 1st)
        // with special values 'hourly' (1h), 'daily' (1d), "weekly" (1w),
        // 'monthly' (1m) and 'yearly' (1y)
        var period = {
            'hourly': '1h',
            'daily': '1d',
            'weekly': '1w',
            'monthly': '1m',
            'yearly': '1y'
        }[options.period] || options.period;
        var m = /^([1-9][0-9]*)([hdwmy]|ms)$/.exec(period);
        if (!m) {
            throw new Error(format('invalid period: "%s"', options.period));
        }
        this.periodNum = Number(m[1]);
        this.periodScope = m[2];
    } else {
        this.periodNum = 1;
        this.periodScope = 'd';
    }

    var lastModified = null;
    try {
        var fileInfo = fs.statSync(this.path);
        lastModified = fileInfo.mtime.getTime();
    }
    catch (err) {
        // file doesn't exist
    }
    var rotateAfterOpen = false;
    if (lastModified) {
        var lastRotTime = this._calcRotTime(0);
        if (lastModified < lastRotTime) {
            rotateAfterOpen = true;
        }
    }

    // TODO: template support for backup files
    // template: <path to which to rotate>
    //      default is %P.%n
    //      '/var/log/archive/foo.log'  -> foo.log.%n
    //      '/var/log/archive/foo.log.%n'
    //      codes:
    //          XXX support strftime codes (per node version of those)
    //              or whatever module. Pick non-colliding for extra
    //              codes
    //          %P      `path` base value
    //          %n      integer number of rotated log (1,2,3,...)
    //          %d      datetime in YYYY-MM-DD_HH-MM-SS
    //                      XXX what should default date format be?
    //                          prior art? Want to avoid ':' in
    //                          filenames (illegal on Windows for one).

    this.stream = fs.createWriteStream(this.path,
        {flags: 'a', encoding: 'utf8'});

    this.rotQueue = [];
    this.rotating = false;
    if (rotateAfterOpen) {
        this._debug('rotateAfterOpen -> call rotate()');
        this.rotate();
    } else {
        this._setupNextRot();
    }
}

util.inherits(RotatingFileStream, EventEmitter);

RotatingFileStream.prototype._debug = function () {
    // Set this to `true` to add debug logging.
    if (false) {
        if (arguments.length === 0) {
            return true;
        }
        var args = Array.prototype.slice.call(arguments);
        args[0] = '[' + (new Date().toISOString()) + ', '
            + this.path + '] ' + args[0];
        console.log.apply(this, args);
    } else {
        return false;
    }
};

RotatingFileStream.prototype._setupNextRot = function () {
    this.rotAt = this._calcRotTime(1);
    this._setRotationTimer();
}

RotatingFileStream.prototype._setRotationTimer = function () {
    var self = this;
    var delay = this.rotAt - Date.now();
    // Cap timeout to Node's max setTimeout, see
    // <https://github.com/joyent/node/issues/8656>.
    var TIMEOUT_MAX = 2147483647; // 2^31-1
    if (delay > TIMEOUT_MAX) {
        delay = TIMEOUT_MAX;
    }
    this.timeout = setTimeout(
        function () {
            self._debug('_setRotationTimer timeout -> call rotate()');
            self.rotate();
        },
        delay);
    if (typeof (this.timeout.unref) === 'function') {
        this.timeout.unref();
    }
}

RotatingFileStream.prototype._calcRotTime =
function _calcRotTime(periodOffset) {
    this._debug('_calcRotTime: %s%s', this.periodNum, this.periodScope);
    var d = new Date();

    this._debug('  now local: %s', d);
    this._debug('    now utc: %s', d.toISOString());
    var rotAt;
    switch (this.periodScope) {
    case 'ms':
        // Hidden millisecond period for debugging.
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * periodOffset;
        } else {
            rotAt = Date.now() + this.periodNum * periodOffset;
        }
        break;
    case 'h':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 60 * 60 * 1000 * periodOffset;
        } else {
            // First time: top of the next hour.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate(), d.getUTCHours() + periodOffset);
        }
        break;
    case 'd':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: start of tomorrow (i.e. at the coming midnight) UTC.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + periodOffset);
        }
        break;
    case 'w':
        // Currently, always on Sunday morning at 00:00:00 (UTC).
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 7 * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: this coming Sunday.
            var dayOffset = (7 - d.getUTCDay());
            if (periodOffset < 1) {
                dayOffset = -d.getUTCDay();
            }
            if (periodOffset > 1 || periodOffset < -1) {
                dayOffset += 7 * periodOffset;
            }
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + dayOffset);
        }
        break;
    case 'm':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + this.periodNum * periodOffset, 1);
        } else {
            // First time: the start of the next month.
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + periodOffset, 1);
        }
        break;
    case 'y':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear() + this.periodNum * periodOffset,
                0, 1);
        } else {
            // First time: the start of the next year.
            rotAt = Date.UTC(d.getUTCFullYear() + periodOffset, 0, 1);
        }
        break;
    default:
        assert.fail(format('invalid period scope: "%s"', this.periodScope));
    }

    if (this._debug()) {
        this._debug('  **rotAt**: %s (utc: %s)', rotAt,
            new Date(rotAt).toUTCString());
        var now = Date.now();
        this._debug('        now: %s (%sms == %smin == %sh to go)',
            now,
            rotAt - now,
            (rotAt-now)/1000/60,
            (rotAt-now)/1000/60/60);
    }
    return rotAt;
};

RotatingFileStream.prototype.rotate = function rotate() {
    // XXX What about shutdown?
    var self = this;

    // If rotation period is > ~25 days, we have to break into multiple
    // setTimeout's. See <https://github.com/joyent/node/issues/8656>.
    if (self.rotAt && self.rotAt > Date.now()) {
        return self._setRotationTimer();
    }

    this._debug('rotate');
    if (self.rotating) {
        throw new TypeError('cannot start a rotation when already rotating');
    }
    self.rotating = true;

    self.stream.end();  // XXX can do moves sync after this? test at high rate

    function del() {
        var toDel = self.path + '.' + String(n - 1);
        if (n === 0) {
            toDel = self.path;
        }
        n -= 1;
        self._debug('  rm %s', toDel);
        fs.unlink(toDel, function (delErr) {
            //XXX handle err other than not exists
            moves();
        });
    }

    function moves() {
        if (self.count === 0 || n < 0) {
            return finish();
        }
        var before = self.path;
        var after = self.path + '.' + String(n);
        if (n > 0) {
            before += '.' + String(n - 1);
        }
        n -= 1;
        fs.exists(before, function (exists) {
            if (!exists) {
                moves();
            } else {
                self._debug('  mv %s %s', before, after);
                mv(before, after, function (mvErr) {
                    if (mvErr) {
                        self.emit('error', mvErr);
                        finish(); // XXX finish here?
                    } else {
                        moves();
                    }
                });
            }
        })
    }

    function finish() {
        self._debug('  open %s', self.path);
        self.stream = fs.createWriteStream(self.path,
            {flags: 'a', encoding: 'utf8'});
        var q = self.rotQueue, len = q.length;
        for (var i = 0; i < len; i++) {
            self.stream.write(q[i]);
        }
        self.rotQueue = [];
        self.rotating = false;
        self.emit('drain');
        self._setupNextRot();
    }

    var n = this.count;
    del();
};

RotatingFileStream.prototype.write = function write(s) {
    if (this.rotating) {
        this.rotQueue.push(s);
        return false;
    } else {
        return this.stream.write(s);
    }
};

RotatingFileStream.prototype.end = function end(s) {
    this.stream.end();
};

RotatingFileStream.prototype.destroy = function destroy(s) {
    this.stream.destroy();
};

RotatingFileStream.prototype.destroySoon = function destroySoon(s) {
    this.stream.destroySoon();
};

} /* if (mv) */



/**
 * RingBuffer is a Writable Stream that just stores the last N records in
 * memory.
 *
 * @param options {Object}, with the following fields:
 *
 *    - limit: number of records to keep in memory
 */
function RingBuffer(options) {
    this.limit = options && options.limit ? options.limit : 100;
    this.writable = true;
    this.records = [];
    EventEmitter.call(this);
}

util.inherits(RingBuffer, EventEmitter);

RingBuffer.prototype.write = function (record) {
    if (!this.writable)
        throw (new Error('RingBuffer has been ended already'));

    this.records.push(record);

    if (this.records.length > this.limit)
        this.records.shift();

    return (true);
};

RingBuffer.prototype.end = function () {
    if (arguments.length > 0)
        this.write.apply(this, Array.prototype.slice.call(arguments));
    this.writable = false;
};

RingBuffer.prototype.destroy = function () {
    this.writable = false;
    this.emit('close');
};

RingBuffer.prototype.destroySoon = function () {
    this.destroy();
};


//---- Exports

module.exports = Logger;

module.exports.TRACE = TRACE;
module.exports.DEBUG = DEBUG;
module.exports.INFO = INFO;
module.exports.WARN = WARN;
module.exports.ERROR = ERROR;
module.exports.FATAL = FATAL;
module.exports.resolveLevel = resolveLevel;
module.exports.levelFromName = levelFromName;
module.exports.nameFromLevel = nameFromLevel;

module.exports.VERSION = VERSION;
module.exports.LOG_VERSION = LOG_VERSION;

module.exports.createLogger = function createLogger(options) {
    return new Logger(options);
};

module.exports.RingBuffer = RingBuffer;
module.exports.RotatingFileStream = RotatingFileStream;

// Useful for custom `type == 'raw'` streams that may do JSON stringification
// of log records themselves. Usage:
//    var str = JSON.stringify(rec, bunyan.safeCycles());
module.exports.safeCycles = safeCycles;
 at SyntaxError: Unexpected token (85:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":5}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":6,"ExpansionArg_string":"PureString"} start 40.6948 took 9.5502s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":6,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (85:4) on program /**
 * Copyright (c) 2017 Trent Mick.
 * Copyright (c) 2017 Joyent Inc.
 *
 * The bunyan logging library for node.js.
 *
 * -*- mode: js -*-
 * vim: expandtab:ts=4:sw=4
 */

var VERSION = '1.8.12';

/*
 * Bunyan log format version. This becomes the 'v' field on all log records.
 * This will be incremented if there is any backward incompatible change to
 * the log record format. Details will be in 'CHANGES.md' (the change log).
 */
var LOG_VERSION = 0;


var xxx = function xxx(s) {     // internal dev/debug logging
    var args = ['XX' + 'X: '+s].concat(
        Array.prototype.slice.call(arguments, 1));
    console.error.apply(this, args);
};
var xxx = function xxx() {};  // comment out to turn on debug logging


/*
 * Runtime environment notes:
 *
 * Bunyan is intended to run in a number of runtime environments. Here are
 * some notes on differences for those envs and how the code copes.
 *
 * - node.js: The primary target environment.
 * - NW.js: http://nwjs.io/  An *app* environment that feels like both a
 *   node env -- it has node-like globals (`process`, `global`) and
 *   browser-like globals (`window`, `navigator`). My *understanding* is that
 *   bunyan can operate as if this is vanilla node.js.
 * - browser: Failing the above, we sniff using the `window` global
 *   <https://developer.mozilla.org/en-US/docs/Web/API/Window/window>.
 *      - browserify: http://browserify.org/  A browser-targetting bundler of
 *        node.js deps. The runtime is a browser env, so can't use fs access,
 *        etc. Browserify's build looks for `require(<single-string>)` imports
 *        to bundle. For some imports it won't be able to handle, we "hide"
 *        from browserify with `require('frobshizzle' + '')`.
 * - Other? Please open issues if things are broken.
 */
var runtimeEnv;
if (typeof (process) !== 'undefined' && process.versions) {
    if (process.versions.nw) {
        runtimeEnv = 'nw';
    } else if (process.versions.node) {
        runtimeEnv = 'node';
    }
}
if (!runtimeEnv && typeof (window) !== 'undefined' &&
    window.window === window) {
    runtimeEnv = 'browser';
}
if (!runtimeEnv) {
    throw new Error('unknown runtime environment');
}


var os, fs, dtrace;
if (runtimeEnv === 'browser') {
    os = {
        hostname: function () {
            return window.location.host;
        }
    };
    fs = {};
    dtrace = null;
} else {
    os = require('os');
    fs = require('fs');
    try {
        dtrace = require('dtrace-provider' + '');
    } catch (e) {
        dtrace = null;
    }
}
var util = require('util');
var assert = require('assert');
var EventEmitter = require('events').EventEmitter;
var stream = require('stream');

try {
    var safeJsonStringify = require('safe-json-stringify');
} catch (e) {
    safeJsonStringify = null;
}
if (process.env.BUNYAN_TEST_NO_SAFE_JSON_STRINGIFY) {
    safeJsonStringify = null;
}

// The 'mv' module is required for rotating-file stream support.
try {
    var mv = require('mv' + '');
} catch (e) {
    mv = null;
}

try {
    var sourceMapSupport = require('source-map-support' + '');
} catch (_) {
    sourceMapSupport = null;
}


//---- Internal support stuff

/**
 * A shallow copy of an object. Bunyan logging attempts to never cause
 * exceptions, so this function attempts to handle non-objects gracefully.
 */
function objCopy(obj) {
    if (obj == null) {  // null or undefined
        return obj;
    } else if (Array.isArray(obj)) {
        return obj.slice();
    } else if (typeof (obj) === 'object') {
        var copy = {};
        Object.keys(obj).forEach(function (k) {
            copy[k] = obj[k];
        });
        return copy;
    } else {
        return obj;
    }
}

var format = util.format;
if (!format) {
    // If node < 0.6, then use its `util.format`:
    // <https://github.com/joyent/node/blob/master/lib/util.js#L22>:
    var inspect = util.inspect;
    var formatRegExp = /%[sdj%]/g;
    format = function format(f) {
        if (typeof (f) !== 'string') {
            var objects = [];
            for (var i = 0; i < arguments.length; i++) {
                objects.push(inspect(arguments[i]));
            }
            return objects.join(' ');
        }

        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function (x) {
            if (i >= len)
                return x;
            switch (x) {
                case '%s': return String(args[i++]);
                case '%d': return Number(args[i++]);
                case '%j': return fastAndSafeJsonStringify(args[i++]);
                case '%%': return '%';
                default:
                    return x;
            }
        });
        for (var x = args[i]; i < len; x = args[++i]) {
            if (x === null || typeof (x) !== 'object') {
                str += ' ' + x;
            } else {
                str += ' ' + inspect(x);
            }
        }
        return str;
    };
}


/**
 * Gather some caller info 3 stack levels up.
 * See <http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi>.
 */
function getCaller3Info() {
    if (this === undefined) {
        // Cannot access caller info in 'strict' mode.
        return;
    }
    var obj = {};
    var saveLimit = Error.stackTraceLimit;
    var savePrepare = Error.prepareStackTrace;
    Error.stackTraceLimit = 3;

    Error.prepareStackTrace = function (_, stack) {
        var caller = stack[2];
        if (sourceMapSupport) {
            caller = sourceMapSupport.wrapCallSite(caller);
        }
        obj.file = caller.getFileName();
        obj.line = caller.getLineNumber();
        var func = caller.getFunctionName();
        if (func)
            obj.func = func;
    };
    Error.captureStackTrace(this, getCaller3Info);
    this.stack;

    Error.stackTraceLimit = saveLimit;
    Error.prepareStackTrace = savePrepare;
    return obj;
}


function _indent(s, indent) {
    if (!indent) indent = '    ';
    var lines = s.split(/\r?\n/g);
    return indent + lines.join('\n' + indent);
}


/**
 * Warn about an bunyan processing error.
 *
 * @param msg {String} Message with which to warn.
 * @param dedupKey {String} Optional. A short string key for this warning to
 *      have its warning only printed once.
 */
function _warn(msg, dedupKey) {
    assert.ok(msg);
    if (dedupKey) {
        if (_warned[dedupKey]) {
            return;
        }
        _warned[dedupKey] = true;
    }
    process.stderr.write(msg + '\n');
}
function _haveWarned(dedupKey) {
    return _warned[dedupKey];
}
var _warned = {};


function ConsoleRawStream() {}
ConsoleRawStream.prototype.write = function (rec) {
    if (rec.level < INFO) {
        console.log(rec);
    } else if (rec.level < WARN) {
        console.info(rec);
    } else if (rec.level < ERROR) {
        console.warn(rec);
    } else {
        console.error(rec);
    }
};


//---- Levels

var TRACE = 10;
var DEBUG = 20;
var INFO = 30;
var WARN = 40;
var ERROR = 50;
var FATAL = 60;

var levelFromName = {
    'trace': TRACE,
    'debug': DEBUG,
    'info': INFO,
    'warn': WARN,
    'error': ERROR,
    'fatal': FATAL
};
var nameFromLevel = {};
Object.keys(levelFromName).forEach(function (name) {
    nameFromLevel[levelFromName[name]] = name;
});

// Dtrace probes.
var dtp = undefined;
var probes = dtrace && {};

/**
 * Resolve a level number, name (upper or lowercase) to a level number value.
 *
 * @param nameOrNum {String|Number} A level name (case-insensitive) or positive
 *      integer level.
 * @api public
 */
function resolveLevel(nameOrNum) {
    var level;
    var type = typeof (nameOrNum);
    if (type === 'string') {
        level = levelFromName[nameOrNum.toLowerCase()];
        if (!level) {
            throw new Error(format('unknown level name: "%s"', nameOrNum));
        }
    } else if (type !== 'number') {
        throw new TypeError(format('cannot resolve level: invalid arg (%s):',
            type, nameOrNum));
    } else if (nameOrNum < 0 || Math.floor(nameOrNum) !== nameOrNum) {
        throw new TypeError(format('level is not a positive integer: %s',
            nameOrNum));
    } else {
        level = nameOrNum;
    }
    return level;
}


function isWritable(obj) {
    if (obj instanceof stream.Writable) {
        return true;
    }
    return typeof (obj.write) === 'function';
}


//---- Logger class

/**
 * Create a Logger instance.
 *
 * @param options {Object} See documentation for full details. At minimum
 *    this must include a 'name' string key. Configuration keys:
 *      - `streams`: specify the logger output streams. This is an array of
 *        objects with these fields:
 *          - `type`: The stream type. See README.md for full details.
 *            Often this is implied by the other fields. Examples are
 *            'file', 'stream' and "raw".
 *          - `level`: Defaults to 'info'.
 *          - `path` or `stream`: The specify the file path or writeable
 *            stream to which log records are written. E.g.
 *            `stream: process.stdout`.
 *          - `closeOnExit` (boolean): Optional. Default is true for a
 *            'file' stream when `path` is given, false otherwise.
 *        See README.md for full details.
 *      - `level`: set the level for a single output stream (cannot be used
 *        with `streams`)
 *      - `stream`: the output stream for a logger with just one, e.g.
 *        `process.stdout` (cannot be used with `streams`)
 *      - `serializers`: object mapping log record field names to
 *        serializing functions. See README.md for details.
 *      - `src`: Boolean (default false). Set true to enable 'src' automatic
 *        field with log call source info.
 *    All other keys are log record fields.
 *
 * An alternative *internal* call signature is used for creating a child:
 *    new Logger(<parent logger>, <child options>[, <child opts are simple>]);
 *
 * @param _childSimple (Boolean) An assertion that the given `_childOptions`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation.
 */
function Logger(options, _childOptions, _childSimple) {
    xxx('Logger start:', options)
    if (!(this instanceof Logger)) {
        return new Logger(options, _childOptions);
    }

    // Input arg validation.
    var parent;
    if (_childOptions !== undefined) {
        parent = options;
        options = _childOptions;
        if (!(parent instanceof Logger)) {
            throw new TypeError(
                'invalid Logger creation: do not pass a second arg');
        }
    }
    if (!options) {
        throw new TypeError('options (object) is required');
    }
    if (!parent) {
        if (!options.name) {
            throw new TypeError('options.name (string) is required');
        }
    } else {
        if (options.name) {
            throw new TypeError(
                'invalid options.name: child cannot set logger name');
        }
    }
    if (options.stream && options.streams) {
        throw new TypeError('cannot mix "streams" and "stream" options');
    }
    if (options.streams && !Array.isArray(options.streams)) {
        throw new TypeError('invalid options.streams: must be an array')
    }
    if (options.serializers && (typeof (options.serializers) !== 'object' ||
            Array.isArray(options.serializers))) {
        throw new TypeError('invalid options.serializers: must be an object')
    }

    EventEmitter.call(this);

    // Fast path for simple child creation.
    if (parent && _childSimple) {
        // `_isSimpleChild` is a signal to stream close handling that this child
        // owns none of its streams.
        this._isSimpleChild = true;

        this._level = parent._level;
        this.streams = parent.streams;
        this.serializers = parent.serializers;
        this.src = parent.src;
        var fields = this.fields = {};
        var parentFieldNames = Object.keys(parent.fields);
        for (var i = 0; i < parentFieldNames.length; i++) {
            var name = parentFieldNames[i];
            fields[name] = parent.fields[name];
        }
        var names = Object.keys(options);
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            fields[name] = options[name];
        }
        return;
    }

    // Start values.
    var self = this;
    if (parent) {
        this._level = parent._level;
        this.streams = [];
        for (var i = 0; i < parent.streams.length; i++) {
            var s = objCopy(parent.streams[i]);
            s.closeOnExit = false; // Don't own parent stream.
            this.streams.push(s);
        }
        this.serializers = objCopy(parent.serializers);
        this.src = parent.src;
        this.fields = objCopy(parent.fields);
        if (options.level) {
            this.level(options.level);
        }
    } else {
        this._level = Number.POSITIVE_INFINITY;
        this.streams = [];
        this.serializers = null;
        this.src = false;
        this.fields = {};
    }

    if (!dtp && dtrace) {
        dtp = dtrace.createDTraceProvider('bunyan');

        for (var level in levelFromName) {
            var probe;

            probes[levelFromName[level]] = probe =
                dtp.addProbe('log-' + level, 'char *');

            // Explicitly add a reference to dtp to prevent it from being GC'd
            probe.dtp = dtp;
        }

        dtp.enable();
    }

    // Handle *config* options (i.e. options that are not just plain data
    // for log records).
    if (options.stream) {
        self.addStream({
            type: 'stream',
            stream: options.stream,
            closeOnExit: false,
            level: options.level
        });
    } else if (options.streams) {
        options.streams.forEach(function (s) {
            self.addStream(s, options.level);
        });
    } else if (parent && options.level) {
        this.level(options.level);
    } else if (!parent) {
        if (runtimeEnv === 'browser') {
            /*
             * In the browser we'll be emitting to console.log by default.
             * Any console.log worth its salt these days can nicely render
             * and introspect objects (e.g. the Firefox and Chrome console)
             * so let's emit the raw log record. Are there browsers for which
             * that breaks things?
             */
            self.addStream({
                type: 'raw',
                stream: new ConsoleRawStream(),
                closeOnExit: false,
                level: options.level
            });
        } else {
            self.addStream({
                type: 'stream',
                stream: process.stdout,
                closeOnExit: false,
                level: options.level
            });
        }
    }
    if (options.serializers) {
        self.addSerializers(options.serializers);
    }
    if (options.src) {
        this.src = true;
    }
    xxx('Logger: ', self)

    // Fields.
    // These are the default fields for log records (minus the attributes
    // removed in this constructor). To allow storing raw log records
    // (unrendered), `this.fields` must never be mutated. Create a copy for
    // any changes.
    var fields = objCopy(options);
    delete fields.stream;
    delete fields.level;
    delete fields.streams;
    delete fields.serializers;
    delete fields.src;
    if (this.serializers) {
        this._applySerializers(fields);
    }
    if (!fields.hostname && !self.fields.hostname) {
        fields.hostname = os.hostname();
    }
    if (!fields.pid) {
        fields.pid = process.pid;
    }
    Object.keys(fields).forEach(function (k) {
        self.fields[k] = fields[k];
    });
}

util.inherits(Logger, EventEmitter);


/**
 * Add a stream
 *
 * @param stream {Object}. Object with these fields:
 *    - `type`: The stream type. See README.md for full details.
 *      Often this is implied by the other fields. Examples are
 *      'file', 'stream' and "raw".
 *    - `path` or `stream`: The specify the file path or writeable
 *      stream to which log records are written. E.g.
 *      `stream: process.stdout`.
 *    - `level`: Optional. Falls back to `defaultLevel`.
 *    - `closeOnExit` (boolean): Optional. Default is true for a
 *      'file' stream when `path` is given, false otherwise.
 *    See README.md for full details.
 * @param defaultLevel {Number|String} Optional. A level to use if
 *      `stream.level` is not set. If neither is given, this defaults to INFO.
 */
Logger.prototype.addStream = function addStream(s, defaultLevel) {
    var self = this;
    if (defaultLevel === null || defaultLevel === undefined) {
        defaultLevel = INFO;
    }

    s = objCopy(s);

    // Implicit 'type' from other args.
    if (!s.type) {
        if (s.stream) {
            s.type = 'stream';
        } else if (s.path) {
            s.type = 'file'
        }
    }
    s.raw = (s.type === 'raw');  // PERF: Allow for faster check in `_emit`.

    if (s.level !== undefined) {
        s.level = resolveLevel(s.level);
    } else {
        s.level = resolveLevel(defaultLevel);
    }
    if (s.level < self._level) {
        self._level = s.level;
    }

    switch (s.type) {
    case 'stream':
        assert.ok(isWritable(s.stream),
                  '"stream" stream is not writable: ' + util.inspect(s.stream));

        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    case 'file':
        if (s.reemitErrorEvents === undefined) {
            s.reemitErrorEvents = true;
        }
        if (!s.stream) {
            s.stream = fs.createWriteStream(s.path,
                                            {flags: 'a', encoding: 'utf8'});
            if (!s.closeOnExit) {
                s.closeOnExit = true;
            }
        } else {
            if (!s.closeOnExit) {
                s.closeOnExit = false;
            }
        }
        break;
    case 'rotating-file':
        assert.ok(!s.stream,
                  '"rotating-file" stream should not give a "stream"');
        assert.ok(s.path);
        assert.ok(mv, '"rotating-file" stream type is not supported: '
                      + 'missing "mv" module');
        s.stream = new RotatingFileStream(s);
        if (!s.closeOnExit) {
            s.closeOnExit = true;
        }
        break;
    case 'raw':
        if (!s.closeOnExit) {
            s.closeOnExit = false;
        }
        break;
    default:
        throw new TypeError('unknown stream type "' + s.type + '"');
    }

    if (s.reemitErrorEvents && typeof (s.stream.on) === 'function') {
        // TODO: When we have `<logger>.close()`, it should remove event
        //      listeners to not leak Logger instances.
        s.stream.on('error', function onStreamError(err) {
            self.emit('error', err, s);
        });
    }

    self.streams.push(s);
    delete self.haveNonRawStreams;  // reset
}


/**
 * Add serializers
 *
 * @param serializers {Object} Optional. Object mapping log record field names
 *    to serializing functions. See README.md for details.
 */
Logger.prototype.addSerializers = function addSerializers(serializers) {
    var self = this;

    if (!self.serializers) {
        self.serializers = {};
    }
    Object.keys(serializers).forEach(function (field) {
        var serializer = serializers[field];
        if (typeof (serializer) !== 'function') {
            throw new TypeError(format(
                'invalid serializer for "%s" field: must be a function',
                field));
        } else {
            self.serializers[field] = serializer;
        }
    });
}



/**
 * Create a child logger, typically to add a few log record fields.
 *
 * This can be useful when passing a logger to a sub-component, e.g. a
 * 'wuzzle' component of your service:
 *
 *    var wuzzleLog = log.child({component: 'wuzzle'})
 *    var wuzzle = new Wuzzle({..., log: wuzzleLog})
 *
 * Then log records from the wuzzle code will have the same structure as
 * the app log, *plus the component='wuzzle' field*.
 *
 * @param options {Object} Optional. Set of options to apply to the child.
 *    All of the same options for a new Logger apply here. Notes:
 *      - The parent's streams are inherited and cannot be removed in this
 *        call. Any given `streams` are *added* to the set inherited from
 *        the parent.
 *      - The parent's serializers are inherited, though can effectively be
 *        overwritten by using duplicate keys.
 *      - Can use `level` to set the level of the streams inherited from
 *        the parent. The level for the parent is NOT affected.
 * @param simple {Boolean} Optional. Set to true to assert that `options`
 *    (a) only add fields (no config) and (b) no serialization handling is
 *    required for them. IOW, this is a fast path for frequent child
 *    creation. See 'tools/timechild.js' for numbers.
 */
Logger.prototype.child = function (options, simple) {
    return new (this.constructor)(this, options || {}, simple);
}


/**
 * A convenience method to reopen 'file' streams on a logger. This can be
 * useful with external log rotation utilities that move and re-open log files
 * (e.g. logrotate on Linux, logadm on SmartOS/Illumos). Those utilities
 * typically have rotation options to copy-and-truncate the log file, but
 * you may not want to use that. An alternative is to do this in your
 * application:
 *
 *      var log = bunyan.createLogger(...);
 *      ...
 *      process.on('SIGUSR2', function () {
 *          log.reopenFileStreams();
 *      });
 *      ...
 *
 * See <https://github.com/trentm/node-bunyan/issues/104>.
 */
Logger.prototype.reopenFileStreams = function () {
    var self = this;
    self.streams.forEach(function (s) {
        if (s.type === 'file') {
            if (s.stream) {
                // Not sure if typically would want this, or more immediate
                // `s.stream.destroy()`.
                s.stream.end();
                s.stream.destroySoon();
                delete s.stream;
            }
            s.stream = fs.createWriteStream(s.path,
                {flags: 'a', encoding: 'utf8'});
            s.stream.on('error', function (err) {
                self.emit('error', err, s);
            });
        }
    });
};


/* BEGIN JSSTYLED */
/**
 * Close this logger.
 *
 * This closes streams (that it owns, as per 'endOnClose' attributes on
 * streams), etc. Typically you **don't** need to bother calling this.
Logger.prototype.close = function () {
    if (this._closed) {
        return;
    }
    if (!this._isSimpleChild) {
        self.streams.forEach(function (s) {
            if (s.endOnClose) {
                xxx('closing stream s:', s);
                s.stream.end();
                s.endOnClose = false;
            }
        });
    }
    this._closed = true;
}
 */
/* END JSSTYLED */


/**
 * Get/set the level of all streams on this logger.
 *
 * Get Usage:
 *    // Returns the current log level (lowest level of all its streams).
 *    log.level() -> INFO
 *
 * Set Usage:
 *    log.level(INFO)       // set all streams to level INFO
 *    log.level('info')     // can use 'info' et al aliases
 */
Logger.prototype.level = function level(value) {
    if (value === undefined) {
        return this._level;
    }
    var newLevel = resolveLevel(value);
    var len = this.streams.length;
    for (var i = 0; i < len; i++) {
        this.streams[i].level = newLevel;
    }
    this._level = newLevel;
}


/**
 * Get/set the level of a particular stream on this logger.
 *
 * Get Usage:
 *    // Returns an array of the levels of each stream.
 *    log.levels() -> [TRACE, INFO]
 *
 *    // Returns a level of the identified stream.
 *    log.levels(0) -> TRACE      // level of stream at index 0
 *    log.levels('foo')           // level of stream with name 'foo'
 *
 * Set Usage:
 *    log.levels(0, INFO)         // set level of stream 0 to INFO
 *    log.levels(0, 'info')       // can use 'info' et al aliases
 *    log.levels('foo', WARN)     // set stream named 'foo' to WARN
 *
 * Stream names: When streams are defined, they can optionally be given
 * a name. For example,
 *       log = new Logger({
 *         streams: [
 *           {
 *             name: 'foo',
 *             path: '/var/log/my-service/foo.log'
 *             level: 'trace'
 *           },
 *         ...
 *
 * @param name {String|Number} The stream index or name.
 * @param value {Number|String} The level value (INFO) or alias ('info').
 *    If not given, this is a 'get' operation.
 * @throws {Error} If there is no stream with the given name.
 */
Logger.prototype.levels = function levels(name, value) {
    if (name === undefined) {
        assert.equal(value, undefined);
        return this.streams.map(
            function (s) { return s.level });
    }
    var stream;
    if (typeof (name) === 'number') {
        stream = this.streams[name];
        if (stream === undefined) {
            throw new Error('invalid stream index: ' + name);
        }
    } else {
        var len = this.streams.length;
        for (var i = 0; i < len; i++) {
            var s = this.streams[i];
            if (s.name === name) {
                stream = s;
                break;
            }
        }
        if (!stream) {
            throw new Error(format('no stream with name "%s"', name));
        }
    }
    if (value === undefined) {
        return stream.level;
    } else {
        var newLevel = resolveLevel(value);
        stream.level = newLevel;
        if (newLevel < this._level) {
            this._level = newLevel;
        }
    }
}


/**
 * Apply registered serializers to the appropriate keys in the given fields.
 *
 * Pre-condition: This is only called if there is at least one serializer.
 *
 * @param fields (Object) The log record fields.
 * @param excludeFields (Object) Optional mapping of keys to `true` for
 *    keys to NOT apply a serializer.
 */
Logger.prototype._applySerializers = function (fields, excludeFields) {
    var self = this;

    xxx('_applySerializers: excludeFields', excludeFields);

    // Check each serializer against these (presuming number of serializers
    // is typically less than number of fields).
    Object.keys(this.serializers).forEach(function (name) {
        if (fields[name] === undefined ||
            (excludeFields && excludeFields[name]))
        {
            return;
        }
        xxx('_applySerializers; apply to "%s" key', name)
        try {
            fields[name] = self.serializers[name](fields[name]);
        } catch (err) {
            _warn(format('bunyan: ERROR: Exception thrown from the "%s" '
                + 'Bunyan serializer. This should never happen. This is a bug '
                + 'in that serializer function.\n%s',
                name, err.stack || err));
            fields[name] = format('(Error in Bunyan log "%s" serializer '
                + 'broke field. See stderr for details.)', name);
        }
    });
}


/**
 * Emit a log record.
 *
 * @param rec {log record}
 * @param noemit {Boolean} Optional. Set to true to skip emission
 *      and just return the JSON string.
 */
Logger.prototype._emit = function (rec, noemit) {
    var i;

    // Lazily determine if this Logger has non-'raw' streams. If there are
    // any, then we need to stringify the log record.
    if (this.haveNonRawStreams === undefined) {
        this.haveNonRawStreams = false;
        for (i = 0; i < this.streams.length; i++) {
            if (!this.streams[i].raw) {
                this.haveNonRawStreams = true;
                break;
            }
        }
    }

    // Stringify the object (creates a warning str on error).
    var str;
    if (noemit || this.haveNonRawStreams) {
        str = fastAndSafeJsonStringify(rec) + '\n';
    }

    if (noemit)
        return str;

    var level = rec.level;
    for (i = 0; i < this.streams.length; i++) {
        var s = this.streams[i];
        if (s.level <= level) {
            xxx('writing log rec "%s" to "%s" stream (%d <= %d): %j',
                rec.msg, s.type, s.level, level, rec);
            s.stream.write(s.raw ? rec : str);
        }
    };

    return str;
}


/**
 * Build a record object suitable for emitting from the arguments
 * provided to the a log emitter.
 */
function mkRecord(log, minLevel, args) {
    var excludeFields, fields, msgArgs;
    if (args[0] instanceof Error) {
        // `log.<level>(err, ...)`
        fields = {
            // Use this Logger's err serializer, if defined.
            err: (log.serializers && log.serializers.err
                ? log.serializers.err(args[0])
                : Logger.stdSerializers.err(args[0]))
        };
        excludeFields = {err: true};
        if (args.length === 1) {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    } else if (typeof (args[0]) !== 'object' || Array.isArray(args[0])) {
        // `log.<level>(msg, ...)`
        fields = null;
        msgArgs = args.slice();
    } else if (Buffer.isBuffer(args[0])) {  // `log.<level>(buf, ...)`
        // Almost certainly an error, show `inspect(buf)`. See bunyan
        // issue #35.
        fields = null;
        msgArgs = args.slice();
        msgArgs[0] = util.inspect(msgArgs[0]);
    } else {  // `log.<level>(fields, msg, ...)`
        fields = args[0];
        if (fields && args.length === 1 && fields.err &&
            fields.err instanceof Error)
        {
            msgArgs = [fields.err.message];
        } else {
            msgArgs = args.slice(1);
        }
    }

    // Build up the record object.
    var rec = objCopy(log.fields);
    var level = rec.level = minLevel;
    var recFields = (fields ? objCopy(fields) : null);
    if (recFields) {
        if (log.serializers) {
            log._applySerializers(recFields, excludeFields);
        }
        Object.keys(recFields).forEach(function (k) {
            rec[k] = recFields[k];
        });
    }
    rec.msg = format.apply(log, msgArgs);
    if (!rec.time) {
        rec.time = (new Date());
    }
    // Get call source info
    if (log.src && !rec.src) {
        rec.src = getCaller3Info()
    }
    rec.v = LOG_VERSION;

    return rec;
};


/**
 * Build an array that dtrace-provider can use to fire a USDT probe. If we've
 * already built the appropriate string, we use it. Otherwise, build the
 * record object and stringify it.
 */
function mkProbeArgs(str, log, minLevel, msgArgs) {
    return [ str || log._emit(mkRecord(log, minLevel, msgArgs), true) ];
}


/**
 * Build a log emitter function for level minLevel. I.e. this is the
 * creator of `log.info`, `log.error`, etc.
 */
function mkLogEmitter(minLevel) {
    return function () {
        var log = this;
        var str = null;
        var rec = null;

        if (!this._emit) {
            /*
             * Show this invalid Bunyan usage warning *once*.
             *
             * See <https://github.com/trentm/node-bunyan/issues/100> for
             * an example of how this can happen.
             */
            var dedupKey = 'unbound';
            if (!_haveWarned[dedupKey]) {
                var caller = getCaller3Info();
                _warn(format('bunyan usage error: %s:%s: attempt to log '
                    + 'with an unbound log method: `this` is: %s',
                    caller.file, caller.line, util.inspect(this)),
                    dedupKey);
            }
            return;
        } else if (arguments.length === 0) {   // `log.<level>()`
            return (this._level <= minLevel);
        }

        var msgArgs = new Array(arguments.length);
        for (var i = 0; i < msgArgs.length; ++i) {
            msgArgs[i] = arguments[i];
        }

        if (this._level <= minLevel) {
            rec = mkRecord(log, minLevel, msgArgs);
            str = this._emit(rec);
        }

        if (probes) {
            probes[minLevel].fire(mkProbeArgs, str, log, minLevel, msgArgs);
        }
    }
}


/**
 * The functions below log a record at a specific level.
 *
 * Usages:
 *    log.<level>()  -> boolean is-trace-enabled
 *    log.<level>(<Error> err, [<string> msg, ...])
 *    log.<level>(<string> msg, ...)
 *    log.<level>(<object> fields, <string> msg, ...)
 *
 * where <level> is the lowercase version of the log level. E.g.:
 *
 *    log.info()
 *
 * @params fields {Object} Optional set of additional fields to log.
 * @params msg {String} Log message. This can be followed by additional
 *    arguments that are handled like
 *    [util.format](http://nodejs.org/docs/latest/api/all.html#util.format).
 */
Logger.prototype.trace = mkLogEmitter(TRACE);
Logger.prototype.debug = mkLogEmitter(DEBUG);
Logger.prototype.info = mkLogEmitter(INFO);
Logger.prototype.warn = mkLogEmitter(WARN);
Logger.prototype.error = mkLogEmitter(ERROR);
Logger.prototype.fatal = mkLogEmitter(FATAL);



//---- Standard serializers
// A serializer is a function that serializes a JavaScript object to a
// JSON representation for logging. There is a standard set of presumed
// interesting objects in node.js-land.

Logger.stdSerializers = {};

// Serialize an HTTP request.
Logger.stdSerializers.req = function (req) {
    if (!req || !req.connection)
        return req;
    return {
        method: req.method,
        url: req.url,
        headers: req.headers,
        remoteAddress: req.connection.remoteAddress,
        remotePort: req.connection.remotePort
    };
    // Trailers: Skipping for speed. If you need trailers in your app, then
    // make a custom serializer.
    //if (Object.keys(trailers).length > 0) {
    //  obj.trailers = req.trailers;
    //}
};

// Serialize an HTTP response.
Logger.stdSerializers.res = function (res) {
    if (!res || !res.statusCode)
        return res;
    return {
        statusCode: res.statusCode,
        header: res._header
    }
};


/*
 * This function dumps long stack traces for exceptions having a cause()
 * method. The error classes from
 * [verror](https://github.com/davepacheco/node-verror) and
 * [restify v2.0](https://github.com/mcavage/node-restify) are examples.
 *
 * Based on `dumpException` in
 * https://github.com/davepacheco/node-extsprintf/blob/master/lib/extsprintf.js
 */
function getFullErrorStack(ex)
{
    var ret = ex.stack || ex.toString();
    if (ex.cause && typeof (ex.cause) === 'function') {
        var cex = ex.cause();
        if (cex) {
            ret += '\nCaused by: ' + getFullErrorStack(cex);
        }
    }
    return (ret);
}

// Serialize an Error object
// (Core error properties are enumerable in node 0.4, not in 0.6).
var errSerializer = Logger.stdSerializers.err = function (err) {
    if (!err || !err.stack)
        return err;
    var obj = {
        message: err.message,
        name: err.name,
        stack: getFullErrorStack(err),
        code: err.code,
        signal: err.signal
    }
    return obj;
};


// A JSON stringifier that handles cycles safely - tracks seen values in a Set.
function safeCyclesSet() {
    var seen = new Set();
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.has(val)) {
            return '[Circular]';
        }
        seen.add(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely - tracks seen vals in an Array.
 *
 * Note: This approach has performance problems when dealing with large objects,
 * see trentm/node-bunyan#445, but since this is the only option for node 0.10
 * and earlier (as Set was introduced in Node 0.12), it's used as a fallback
 * when Set is not available.
 */
function safeCyclesArray() {
    var seen = [];
    return function (key, val) {
        if (!val || typeof (val) !== 'object') {
            return val;
        }
        if (seen.indexOf(val) !== -1) {
            return '[Circular]';
        }
        seen.push(val);
        return val;
    };
}

/**
 * A JSON stringifier that handles cycles safely.
 *
 * Usage: JSON.stringify(obj, safeCycles())
 *
 * Choose the best safe cycle function from what is available - see
 * trentm/node-bunyan#445.
 */
var safeCycles = typeof (Set) !== 'undefined' ? safeCyclesSet : safeCyclesArray;

/**
 * A fast JSON.stringify that handles cycles and getter exceptions (when
 * safeJsonStringify is installed).
 *
 * This function attempts to use the regular JSON.stringify for speed, but on
 * error (e.g. JSON cycle detection exception) it falls back to safe stringify
 * handlers that can deal with cycles and/or getter exceptions.
 */
function fastAndSafeJsonStringify(rec) {
    try {
        return JSON.stringify(rec);
    } catch (ex) {
        try {
            return JSON.stringify(rec, safeCycles());
        } catch (e) {
            if (safeJsonStringify) {
                return safeJsonStringify(rec);
            } else {
                var dedupKey = e.stack.split(/\n/g, 3).join('\n');
                _warn('bunyan: ERROR: Exception in '
                    + '`JSON.stringify(rec)`. You can install the '
                    + '"safe-json-stringify" module to have Bunyan fallback '
                    + 'to safer stringification. Record:\n'
                    + _indent(format('%s\n%s', util.inspect(rec), e.stack)),
                    dedupKey);
                return format('(Exception in JSON.stringify(rec): %j. '
                    + 'See stderr for details.)', e.message);
            }
        }
    }
}


var RotatingFileStream = null;
if (mv) {

RotatingFileStream = function RotatingFileStream(options) {
    this.path = options.path;

    this.count = (options.count == null ? 10 : options.count);
    assert.equal(typeof (this.count), 'number',
        format('rotating-file stream "count" is not a number: %j (%s) in %j',
            this.count, typeof (this.count), this));
    assert.ok(this.count >= 0,
        format('rotating-file stream "count" is not >= 0: %j in %j',
            this.count, this));

    // Parse `options.period`.
    if (options.period) {
        // <number><scope> where scope is:
        //    h   hours (at the start of the hour)
        //    d   days (at the start of the day, i.e. just after midnight)
        //    w   weeks (at the start of Sunday)
        //    m   months (on the first of the month)
        //    y   years (at the start of Jan 1st)
        // with special values 'hourly' (1h), 'daily' (1d), "weekly" (1w),
        // 'monthly' (1m) and 'yearly' (1y)
        var period = {
            'hourly': '1h',
            'daily': '1d',
            'weekly': '1w',
            'monthly': '1m',
            'yearly': '1y'
        }[options.period] || options.period;
        var m = /^([1-9][0-9]*)([hdwmy]|ms)$/.exec(period);
        if (!m) {
            throw new Error(format('invalid period: "%s"', options.period));
        }
        this.periodNum = Number(m[1]);
        this.periodScope = m[2];
    } else {
        this.periodNum = 1;
        this.periodScope = 'd';
    }

    var lastModified = null;
    try {
        var fileInfo = fs.statSync(this.path);
        lastModified = fileInfo.mtime.getTime();
    }
    catch (err) {
        // file doesn't exist
    }
    var rotateAfterOpen = false;
    if (lastModified) {
        var lastRotTime = this._calcRotTime(0);
        if (lastModified < lastRotTime) {
            rotateAfterOpen = true;
        }
    }

    // TODO: template support for backup files
    // template: <path to which to rotate>
    //      default is %P.%n
    //      '/var/log/archive/foo.log'  -> foo.log.%n
    //      '/var/log/archive/foo.log.%n'
    //      codes:
    //          XXX support strftime codes (per node version of those)
    //              or whatever module. Pick non-colliding for extra
    //              codes
    //          %P      `path` base value
    //          %n      integer number of rotated log (1,2,3,...)
    //          %d      datetime in YYYY-MM-DD_HH-MM-SS
    //                      XXX what should default date format be?
    //                          prior art? Want to avoid ':' in
    //                          filenames (illegal on Windows for one).

    this.stream = fs.createWriteStream(this.path,
        {flags: 'a', encoding: 'utf8'});

    this.rotQueue = [];
    this.rotating = false;
    if (rotateAfterOpen) {
        this._debug('rotateAfterOpen -> call rotate()');
        this.rotate();
    } else {
        this._setupNextRot();
    }
}

util.inherits(RotatingFileStream, EventEmitter);

RotatingFileStream.prototype._debug = function () {
    // Set this to `true` to add debug logging.
    if (false) {
        if (arguments.length === 0) {
            return true;
        }
        var args = Array.prototype.slice.call(arguments);
        args[0] = '[' + (new Date().toISOString()) + ', '
            + this.path + '] ' + args[0];
        console.log.apply(this, args);
    } else {
        return false;
    }
};

RotatingFileStream.prototype._setupNextRot = function () {
    this.rotAt = this._calcRotTime(1);
    this._setRotationTimer();
}

RotatingFileStream.prototype._setRotationTimer = function () {
    var self = this;
    var delay = this.rotAt - Date.now();
    // Cap timeout to Node's max setTimeout, see
    // <https://github.com/joyent/node/issues/8656>.
    var TIMEOUT_MAX = 2147483647; // 2^31-1
    if (delay > TIMEOUT_MAX) {
        delay = TIMEOUT_MAX;
    }
    this.timeout = setTimeout(
        function () {
            self._debug('_setRotationTimer timeout -> call rotate()');
            self.rotate();
        },
        delay);
    if (typeof (this.timeout.unref) === 'function') {
        this.timeout.unref();
    }
}

RotatingFileStream.prototype._calcRotTime =
function _calcRotTime(periodOffset) {
    this._debug('_calcRotTime: %s%s', this.periodNum, this.periodScope);
    var d = new Date();

    this._debug('  now local: %s', d);
    this._debug('    now utc: %s', d.toISOString());
    var rotAt;
    switch (this.periodScope) {
    case 'ms':
        // Hidden millisecond period for debugging.
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * periodOffset;
        } else {
            rotAt = Date.now() + this.periodNum * periodOffset;
        }
        break;
    case 'h':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 60 * 60 * 1000 * periodOffset;
        } else {
            // First time: top of the next hour.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate(), d.getUTCHours() + periodOffset);
        }
        break;
    case 'd':
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: start of tomorrow (i.e. at the coming midnight) UTC.
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + periodOffset);
        }
        break;
    case 'w':
        // Currently, always on Sunday morning at 00:00:00 (UTC).
        if (this.rotAt) {
            rotAt = this.rotAt + this.periodNum * 7 * 24 * 60 * 60 * 1000
                * periodOffset;
        } else {
            // First time: this coming Sunday.
            var dayOffset = (7 - d.getUTCDay());
            if (periodOffset < 1) {
                dayOffset = -d.getUTCDay();
            }
            if (periodOffset > 1 || periodOffset < -1) {
                dayOffset += 7 * periodOffset;
            }
            rotAt = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate() + dayOffset);
        }
        break;
    case 'm':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + this.periodNum * periodOffset, 1);
        } else {
            // First time: the start of the next month.
            rotAt = Date.UTC(d.getUTCFullYear(),
                d.getUTCMonth() + periodOffset, 1);
        }
        break;
    case 'y':
        if (this.rotAt) {
            rotAt = Date.UTC(d.getUTCFullYear() + this.periodNum * periodOffset,
                0, 1);
        } else {
            // First time: the start of the next year.
            rotAt = Date.UTC(d.getUTCFullYear() + periodOffset, 0, 1);
        }
        break;
    default:
        assert.fail(format('invalid period scope: "%s"', this.periodScope));
    }

    if (this._debug()) {
        this._debug('  **rotAt**: %s (utc: %s)', rotAt,
            new Date(rotAt).toUTCString());
        var now = Date.now();
        this._debug('        now: %s (%sms == %smin == %sh to go)',
            now,
            rotAt - now,
            (rotAt-now)/1000/60,
            (rotAt-now)/1000/60/60);
    }
    return rotAt;
};

RotatingFileStream.prototype.rotate = function rotate() {
    // XXX What about shutdown?
    var self = this;

    // If rotation period is > ~25 days, we have to break into multiple
    // setTimeout's. See <https://github.com/joyent/node/issues/8656>.
    if (self.rotAt && self.rotAt > Date.now()) {
        return self._setRotationTimer();
    }

    this._debug('rotate');
    if (self.rotating) {
        throw new TypeError('cannot start a rotation when already rotating');
    }
    self.rotating = true;

    self.stream.end();  // XXX can do moves sync after this? test at high rate

    function del() {
        var toDel = self.path + '.' + String(n - 1);
        if (n === 0) {
            toDel = self.path;
        }
        n -= 1;
        self._debug('  rm %s', toDel);
        fs.unlink(toDel, function (delErr) {
            //XXX handle err other than not exists
            moves();
        });
    }

    function moves() {
        if (self.count === 0 || n < 0) {
            return finish();
        }
        var before = self.path;
        var after = self.path + '.' + String(n);
        if (n > 0) {
            before += '.' + String(n - 1);
        }
        n -= 1;
        fs.exists(before, function (exists) {
            if (!exists) {
                moves();
            } else {
                self._debug('  mv %s %s', before, after);
                mv(before, after, function (mvErr) {
                    if (mvErr) {
                        self.emit('error', mvErr);
                        finish(); // XXX finish here?
                    } else {
                        moves();
                    }
                });
            }
        })
    }

    function finish() {
        self._debug('  open %s', self.path);
        self.stream = fs.createWriteStream(self.path,
            {flags: 'a', encoding: 'utf8'});
        var q = self.rotQueue, len = q.length;
        for (var i = 0; i < len; i++) {
            self.stream.write(q[i]);
        }
        self.rotQueue = [];
        self.rotating = false;
        self.emit('drain');
        self._setupNextRot();
    }

    var n = this.count;
    del();
};

RotatingFileStream.prototype.write = function write(s) {
    if (this.rotating) {
        this.rotQueue.push(s);
        return false;
    } else {
        return this.stream.write(s);
    }
};

RotatingFileStream.prototype.end = function end(s) {
    this.stream.end();
};

RotatingFileStream.prototype.destroy = function destroy(s) {
    this.stream.destroy();
};

RotatingFileStream.prototype.destroySoon = function destroySoon(s) {
    this.stream.destroySoon();
};

} /* if (mv) */



/**
 * RingBuffer is a Writable Stream that just stores the last N records in
 * memory.
 *
 * @param options {Object}, with the following fields:
 *
 *    - limit: number of records to keep in memory
 */
function RingBuffer(options) {
    this.limit = options && options.limit ? options.limit : 100;
    this.writable = true;
    this.records = [];
    EventEmitter.call(this);
}

util.inherits(RingBuffer, EventEmitter);

RingBuffer.prototype.write = function (record) {
    if (!this.writable)
        throw (new Error('RingBuffer has been ended already'));

    this.records.push(record);

    if (this.records.length > this.limit)
        this.records.shift();

    return (true);
};

RingBuffer.prototype.end = function () {
    if (arguments.length > 0)
        this.write.apply(this, Array.prototype.slice.call(arguments));
    this.writable = false;
};

RingBuffer.prototype.destroy = function () {
    this.writable = false;
    this.emit('close');
};

RingBuffer.prototype.destroySoon = function () {
    this.destroy();
};


//---- Exports

module.exports = Logger;

module.exports.TRACE = TRACE;
module.exports.DEBUG = DEBUG;
module.exports.INFO = INFO;
module.exports.WARN = WARN;
module.exports.ERROR = ERROR;
module.exports.FATAL = FATAL;
module.exports.resolveLevel = resolveLevel;
module.exports.levelFromName = levelFromName;
module.exports.nameFromLevel = nameFromLevel;

module.exports.VERSION = VERSION;
module.exports.LOG_VERSION = LOG_VERSION;

module.exports.createLogger = function createLogger(options) {
    return new Logger(options);
};

module.exports.RingBuffer = RingBuffer;
module.exports.RotatingFileStream = RotatingFileStream;

// Useful for custom `type == 'raw'` streams that may do JSON stringification
// of log records themselves. Usage:
//    var str = JSON.stringify(rec, bunyan.safeCycles());
module.exports.safeCycles = safeCycles;
 at SyntaxError: Unexpected token (85:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":6}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_4":0,"_bound":14,"ExpansionArg_array_element_2_type":0} start 45.2188 took 5.1604s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_4":0,"_bound":14,"ExpansionArg_array_element_2_type":0}
* Error: TypeError: Cannot read property 'prototypes' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_type_4":0,"_bound":14}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"_bound":16} start 45.0191 took 5.5136s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"_bound":16}
* Error: TypeError: Cannot set property 'chronicler' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":0,"_bound":16}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":5,"ExpansionArg_bool":true,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":11} start 45.3433 took 5.3265s
