/root/Targets/ezpack
└─┬ ezpack@0.4.1 
  ├─┬ babel-core@6.26.0 
  │ ├─┬ babel-code-frame@6.26.0 
  │ │ ├─┬ chalk@1.1.3 
  │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ ├── escape-string-regexp@1.0.5 
  │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ └── ansi-regex@2.1.1 
  │ │ │ ├── strip-ansi@3.0.1 
  │ │ │ └── supports-color@2.0.0 
  │ │ ├── esutils@2.0.2 
  │ │ └── js-tokens@3.0.2 
  │ ├─┬ babel-generator@6.26.0 
  │ │ ├─┬ detect-indent@4.0.0 
  │ │ │ └─┬ repeating@2.0.1 
  │ │ │   └─┬ is-finite@1.0.2 
  │ │ │     └── number-is-nan@1.0.1 
  │ │ ├── jsesc@1.3.0 
  │ │ └── trim-right@1.0.1 
  │ ├── babel-helpers@6.24.1 
  │ ├── babel-messages@6.23.0 
  │ ├─┬ babel-register@6.26.0 
  │ │ ├── core-js@2.5.1 
  │ │ ├─┬ home-or-tmp@2.0.0 
  │ │ │ ├── os-homedir@1.0.2 
  │ │ │ └── os-tmpdir@1.0.2 
  │ │ ├── mkdirp@0.5.1 
  │ │ └── source-map-support@0.4.18 
  │ ├─┬ babel-runtime@6.26.0 
  │ │ └── regenerator-runtime@0.11.0 
  │ ├── babel-template@6.26.0 
  │ ├─┬ babel-traverse@6.26.0 
  │ │ ├── globals@9.18.0 
  │ │ └─┬ invariant@2.2.2 
  │ │   └── loose-envify@1.3.1 
  │ ├─┬ babel-types@6.26.0 
  │ │ └── to-fast-properties@1.0.3 
  │ ├── babylon@6.18.0 
  │ ├── convert-source-map@1.5.0 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├── json5@0.5.1 
  │ ├── lodash@4.17.4 
  │ ├─┬ minimatch@3.0.4 
  │ │ └─┬ brace-expansion@1.1.8 
  │ │   ├── balanced-match@1.0.0 
  │ │   └── concat-map@0.0.1 
  │ ├── path-is-absolute@1.0.1 
  │ ├── private@0.1.7 
  │ ├── slash@1.0.0 
  │ └── source-map@0.5.7 
  ├─┬ babel-preset-es2015@6.24.1 
  │ ├── babel-plugin-check-es2015-constants@6.22.0 
  │ ├── babel-plugin-transform-es2015-arrow-functions@6.22.0 
  │ ├── babel-plugin-transform-es2015-block-scoped-functions@6.22.0 
  │ ├── babel-plugin-transform-es2015-block-scoping@6.26.0 
  │ ├─┬ babel-plugin-transform-es2015-classes@6.24.1 
  │ │ ├── babel-helper-define-map@6.26.0 
  │ │ ├── babel-helper-function-name@6.24.1 
  │ │ ├── babel-helper-optimise-call-expression@6.24.1 
  │ │ └── babel-helper-replace-supers@6.24.1 
  │ ├── babel-plugin-transform-es2015-computed-properties@6.24.1 
  │ ├── babel-plugin-transform-es2015-destructuring@6.23.0 
  │ ├── babel-plugin-transform-es2015-duplicate-keys@6.24.1 
  │ ├── babel-plugin-transform-es2015-for-of@6.23.0 
  │ ├── babel-plugin-transform-es2015-function-name@6.24.1 
  │ ├── babel-plugin-transform-es2015-literals@6.22.0 
  │ ├── babel-plugin-transform-es2015-modules-amd@6.24.1 
  │ ├─┬ babel-plugin-transform-es2015-modules-commonjs@6.26.0 
  │ │ └── babel-plugin-transform-strict-mode@6.24.1 
  │ ├─┬ babel-plugin-transform-es2015-modules-systemjs@6.24.1 
  │ │ └── babel-helper-hoist-variables@6.24.1 
  │ ├── babel-plugin-transform-es2015-modules-umd@6.24.1 
  │ ├── babel-plugin-transform-es2015-object-super@6.24.1 
  │ ├─┬ babel-plugin-transform-es2015-parameters@6.24.1 
  │ │ ├── babel-helper-call-delegate@6.24.1 
  │ │ └── babel-helper-get-function-arity@6.24.1 
  │ ├── babel-plugin-transform-es2015-shorthand-properties@6.24.1 
  │ ├── babel-plugin-transform-es2015-spread@6.22.0 
  │ ├─┬ babel-plugin-transform-es2015-sticky-regex@6.24.1 
  │ │ └── babel-helper-regex@6.26.0 
  │ ├── babel-plugin-transform-es2015-template-literals@6.22.0 
  │ ├── babel-plugin-transform-es2015-typeof-symbol@6.23.0 
  │ ├─┬ babel-plugin-transform-es2015-unicode-regex@6.24.1 
  │ │ └─┬ regexpu-core@2.0.0 
  │ │   ├── regenerate@1.3.3 
  │ │   ├── regjsgen@0.2.0 
  │ │   └─┬ regjsparser@0.1.5 
  │ │     └── jsesc@0.5.0 
  │ └─┬ babel-plugin-transform-regenerator@6.26.0 
  │   └── regenerator-transform@0.10.1 
  ├── babel-preset-es2015-script@1.1.0 
  ├── byline@4.2.1 
  ├── colors@1.1.2 
  ├─┬ commander@2.8.1 
  │ └── graceful-readlink@1.0.1 
  ├─┬ console-stamp@0.2.0 
  │ ├─┬ dateformat@1.0.12 
  │ │ ├── get-stdin@4.0.1 
  │ │ └─┬ meow@3.7.0 
  │ │   ├─┬ camelcase-keys@2.1.0 
  │ │   │ └── camelcase@2.1.1 
  │ │   ├─┬ loud-rejection@1.6.0 
  │ │   │ ├─┬ currently-unhandled@0.4.1 
  │ │   │ │ └── array-find-index@1.0.2 
  │ │   │ └── signal-exit@3.0.2 
  │ │   ├── map-obj@1.0.1 
  │ │   ├── minimist@1.2.0 
  │ │   ├─┬ normalize-package-data@2.4.0 
  │ │   │ ├── hosted-git-info@2.5.0 
  │ │   │ ├─┬ is-builtin-module@1.0.0 
  │ │   │ │ └── builtin-modules@1.1.1 
  │ │   │ └─┬ validate-npm-package-license@3.0.1 
  │ │   │   ├─┬ spdx-correct@1.0.2 
  │ │   │   │ └── spdx-license-ids@1.2.2 
  │ │   │   └── spdx-expression-parse@1.0.4 
  │ │   ├── object-assign@4.1.1 
  │ │   ├─┬ read-pkg-up@1.0.1 
  │ │   │ ├─┬ find-up@1.1.2 
  │ │   │ │ └── path-exists@2.1.0 
  │ │   │ └─┬ read-pkg@1.1.0 
  │ │   │   ├─┬ load-json-file@1.1.0 
  │ │   │   │ ├─┬ parse-json@2.2.0 
  │ │   │   │ │ └─┬ error-ex@1.3.1 
  │ │   │   │ │   └── is-arrayish@0.2.1 
  │ │   │   │ ├── pify@2.3.0 
  │ │   │   │ └─┬ strip-bom@2.0.0 
  │ │   │   │   └── is-utf8@0.2.1 
  │ │   │   └── path-type@1.1.0 
  │ │   ├─┬ redent@1.0.0 
  │ │   │ ├── indent-string@2.1.0 
  │ │   │ └── strip-indent@1.0.1 
  │ │   └── trim-newlines@1.0.0 
  │ └── merge@1.2.0 
  ├── cssbeautify@0.3.1 
  ├── cssmin@0.4.3 
  ├─┬ cssurl@1.3.0 
  │ └── parserlib@0.2.5 
  ├─┬ express@4.16.1 
  │ ├─┬ accepts@1.3.4 
  │ │ └── negotiator@0.6.1 
  │ ├── array-flatten@1.1.1 
  │ ├─┬ body-parser@1.18.2 
  │ │ ├── bytes@3.0.0 
  │ │ ├─┬ http-errors@1.6.2 
  │ │ │ └── setprototypeof@1.0.3 
  │ │ ├── iconv-lite@0.4.19 
  │ │ └── raw-body@2.3.2 
  │ ├── content-disposition@0.5.2 
  │ ├── content-type@1.0.4 
  │ ├── cookie@0.3.1 
  │ ├── cookie-signature@1.0.6 
  │ ├── depd@1.1.1 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├─┬ finalhandler@1.1.0 
  │ │ └── unpipe@1.0.0 
  │ ├── fresh@0.5.2 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@2.0.2 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.5.2 
  │ ├── qs@6.5.1 
  │ ├── range-parser@1.2.0 
  │ ├── safe-buffer@5.1.1 
  │ ├─┬ send@0.16.1 
  │ │ ├── destroy@1.0.4 
  │ │ └── mime@1.4.1 
  │ ├── serve-static@1.13.1 
  │ ├── setprototypeof@1.1.0 
  │ ├── statuses@1.3.1 
  │ ├─┬ type-is@1.6.15 
  │ │ └── media-typer@0.3.0 
  │ ├── utils-merge@1.0.1 
  │ └── vary@1.1.2 
  ├── jsonfile@2.2.2 
  ├── log-prefix@0.0.0 
  ├── log-timestamp@0.1.2 
  ├─┬ log4js@2.3.4 
  │ ├─┬ axios@0.15.3 
  │ │ └── follow-redirects@1.0.0 
  │ ├── date-format@1.1.0 
  │ ├── hipchat-notifier@1.1.0 
  │ ├─┬ loggly@1.1.1 
  │ │ ├─┬ request@2.75.0 
  │ │ │ ├── aws-sign2@0.6.0 
  │ │ │ ├── aws4@1.6.0 
  │ │ │ ├── bl@1.1.2 
  │ │ │ ├── form-data@2.0.0 
  │ │ │ ├─┬ har-validator@2.0.6 
  │ │ │ │ ├── commander@2.11.0 
  │ │ │ │ └─┬ pinkie-promise@2.0.1 
  │ │ │ │   └── pinkie@2.0.4 
  │ │ │ ├─┬ http-signature@1.1.1 
  │ │ │ │ ├── assert-plus@0.2.0 
  │ │ │ │ ├─┬ jsprim@1.4.1 
  │ │ │ │ │ ├── assert-plus@1.0.0 
  │ │ │ │ │ ├── extsprintf@1.3.0 
  │ │ │ │ │ ├── json-schema@0.2.3 
  │ │ │ │ │ └─┬ verror@1.10.0 
  │ │ │ │ │   └── assert-plus@1.0.0 
  │ │ │ │ └─┬ sshpk@1.13.1 
  │ │ │ │   ├── asn1@0.2.3 
  │ │ │ │   ├── assert-plus@1.0.0 
  │ │ │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │ │   ├─┬ dashdash@1.14.1 
  │ │ │ │   │ └── assert-plus@1.0.0 
  │ │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │ │   ├─┬ getpass@0.1.7 
  │ │ │ │   │ └── assert-plus@1.0.0 
  │ │ │ │   ├── jsbn@0.1.1 
  │ │ │ │   └── tweetnacl@0.14.5 
  │ │ │ ├── is-typedarray@1.0.0 
  │ │ │ └── qs@6.2.3 
  │ │ └── timespan@2.3.0 
  │ ├─┬ mailgun-js@0.7.15 
  │ │ ├── async@2.1.5 
  │ │ ├─┬ debug@2.2.0 
  │ │ │ └── ms@0.7.1 
  │ │ ├─┬ form-data@2.1.4 
  │ │ │ └── asynckit@0.4.0 
  │ │ ├── inflection@1.10.0 
  │ │ ├── is-stream@1.1.0 
  │ │ ├─┬ path-proxy@1.0.0 
  │ │ │ └── inflection@1.3.8 
  │ │ ├─┬ proxy-agent@2.0.0 
  │ │ │ ├─┬ agent-base@2.1.1 
  │ │ │ │ └── semver@5.0.3 
  │ │ │ ├── http-proxy-agent@1.0.0 
  │ │ │ ├── https-proxy-agent@1.0.0 
  │ │ │ ├── lru-cache@2.6.5 
  │ │ │ ├─┬ pac-proxy-agent@1.1.0 
  │ │ │ │ ├─┬ get-uri@2.0.1 
  │ │ │ │ │ ├── data-uri-to-buffer@1.2.0 
  │ │ │ │ │ ├── file-uri-to-path@1.0.0 
  │ │ │ │ │ └─┬ ftp@0.3.10 
  │ │ │ │ │   ├─┬ readable-stream@1.1.14 
  │ │ │ │ │   │ └── isarray@0.0.1 
  │ │ │ │ │   └── xregexp@2.0.0 
  │ │ │ │ └─┬ pac-resolver@2.0.0 
  │ │ │ │   ├── co@3.0.6 
  │ │ │ │   ├─┬ degenerator@1.0.4 
  │ │ │ │   │ ├── ast-types@0.9.13 
  │ │ │ │   │ ├─┬ escodegen@1.9.0 
  │ │ │ │   │ │ ├── estraverse@4.2.0 
  │ │ │ │   │ │ └─┬ optionator@0.8.2 
  │ │ │ │   │ │   ├── deep-is@0.1.3 
  │ │ │ │   │ │   ├── fast-levenshtein@2.0.6 
  │ │ │ │   │ │   ├── levn@0.3.0 
  │ │ │ │   │ │   ├── prelude-ls@1.1.2 
  │ │ │ │   │ │   ├── type-check@0.3.2 
  │ │ │ │   │ │   └── wordwrap@1.0.0 
  │ │ │ │   │ └── esprima@3.1.3 
  │ │ │ │   ├── ip@1.0.1 
  │ │ │ │   ├── netmask@1.0.6 
  │ │ │ │   └── thunkify@2.1.2 
  │ │ │ └─┬ socks-proxy-agent@2.1.1 
  │ │ │   └─┬ socks@1.1.10 
  │ │ │     └── ip@1.1.5 
  │ │ ├── q@1.4.1 
  │ │ └── tsscmp@1.0.5 
  │ ├─┬ nodemailer@2.7.2 
  │ │ ├─┬ libmime@3.0.0 
  │ │ │ ├── iconv-lite@0.4.15 
  │ │ │ ├── libbase64@0.1.0 
  │ │ │ └── libqp@1.1.0 
  │ │ ├─┬ mailcomposer@4.0.1 
  │ │ │ └─┬ buildmail@4.0.1 
  │ │ │   └── addressparser@1.0.1 
  │ │ ├─┬ nodemailer-direct-transport@3.3.2 
  │ │ │ └─┬ smtp-connection@2.12.0 
  │ │ │   └─┬ httpntlm@1.6.1 
  │ │ │     ├── httpreq@0.4.24 
  │ │ │     └── underscore@1.7.0 
  │ │ ├─┬ nodemailer-shared@1.1.0 
  │ │ │ └── nodemailer-fetch@1.6.0 
  │ │ ├─┬ nodemailer-smtp-pool@2.8.2 
  │ │ │ └── nodemailer-wellknown@0.1.10 
  │ │ ├── nodemailer-smtp-transport@2.7.2 
  │ │ └─┬ socks@1.1.9 
  │ │   ├── ip@1.1.5 
  │ │   └── smart-buffer@1.1.15 
  │ ├─┬ redis@2.8.0 
  │ │ ├── double-ended-queue@2.1.0-0 
  │ │ ├── redis-commands@1.3.1 
  │ │ └── redis-parser@2.6.0 
  │ ├── semver@5.4.1 
  │ ├─┬ slack-node@0.2.0 
  │ │ └─┬ requestretry@1.12.2 
  │ │   ├─┬ request@2.83.0 
  │ │   │ ├── aws-sign2@0.7.0 
  │ │   │ ├── caseless@0.12.0 
  │ │   │ ├── form-data@2.3.1 
  │ │   │ ├─┬ har-validator@5.0.3 
  │ │   │ │ ├─┬ ajv@5.2.3 
  │ │   │ │ │ ├── co@4.6.0 
  │ │   │ │ │ ├── fast-deep-equal@1.0.0 
  │ │   │ │ │ ├── json-schema-traverse@0.3.1 
  │ │   │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │   │ │ │   └── jsonify@0.0.0 
  │ │   │ │ └── har-schema@2.0.0 
  │ │   │ ├─┬ hawk@6.0.2 
  │ │   │ │ ├── boom@4.3.1 
  │ │   │ │ ├─┬ cryptiles@3.1.2 
  │ │   │ │ │ └── boom@5.2.0 
  │ │   │ │ ├── hoek@4.2.0 
  │ │   │ │ └── sntp@2.0.2 
  │ │   │ ├─┬ http-signature@1.2.0 
  │ │   │ │ └── assert-plus@1.0.0 
  │ │   │ ├── performance-now@2.1.0 
  │ │   │ ├── tunnel-agent@0.6.0 
  │ │   │ └── uuid@3.1.0 
  │ │   └── when@3.7.8 
  │ └─┬ streamroller@0.5.2 
  │   └─┬ readable-stream@2.3.3 
  │     └── string_decoder@1.0.3 
  ├── node-watch@0.4.0 
  ├─┬ optimist@0.6.0 
  │ ├── minimist@0.0.8 
  │ └── wordwrap@0.0.3 
  ├─┬ read-json-sync@1.1.1 
  │ └── graceful-fs@4.1.11 
  ├─┬ request@2.62.0 
  │ ├── aws-sign2@0.5.0 
  │ ├─┬ bl@1.0.3 
  │ │ └─┬ readable-stream@2.0.6 
  │ │   └── string_decoder@0.10.31 
  │ ├── caseless@0.11.0 
  │ ├─┬ combined-stream@1.0.5 
  │ │ └── delayed-stream@1.0.0 
  │ ├── extend@3.0.1 
  │ ├── forever-agent@0.6.1 
  │ ├─┬ form-data@1.0.1 
  │ │ └── async@2.5.0 
  │ ├─┬ har-validator@1.8.0 
  │ │ ├── bluebird@2.11.0 
  │ │ └─┬ is-my-json-valid@2.16.1 
  │ │   ├── generate-function@2.0.0 
  │ │   ├─┬ generate-object-property@1.2.0 
  │ │   │ └── is-property@1.0.2 
  │ │   └── jsonpointer@4.0.1 
  │ ├─┬ hawk@3.1.3 
  │ │ ├── boom@2.10.1 
  │ │ ├── cryptiles@2.0.5 
  │ │ ├── hoek@2.16.3 
  │ │ └── sntp@1.0.9 
  │ ├─┬ http-signature@0.11.0 
  │ │ ├── asn1@0.1.11 
  │ │ ├── assert-plus@0.1.5 
  │ │ └── ctype@0.5.3 
  │ ├── isstream@0.1.2 
  │ ├── json-stringify-safe@5.0.1 
  │ ├─┬ mime-types@2.1.17 
  │ │ └── mime-db@1.30.0 
  │ ├── node-uuid@1.4.8 
  │ ├── oauth-sign@0.8.2 
  │ ├── qs@5.1.0 
  │ ├── stringstream@0.0.5 
  │ ├─┬ tough-cookie@2.3.3 
  │ │ └── punycode@1.4.1 
  │ └── tunnel-agent@0.4.3 
  ├── sass.js@0.9.2 
  ├─┬ svn-interface@0.4.6 
  │ └─┬ xml2js@0.4.19 
  │   ├── sax@1.2.4 
  │   └── xmlbuilder@9.0.4 
  ├─┬ through2@2.0.3 
  │ ├─┬ readable-stream@2.3.3 
  │ │ ├── core-util-is@1.0.2 
  │ │ ├── inherits@2.0.3 
  │ │ ├── isarray@1.0.0 
  │ │ ├── process-nextick-args@1.0.7 
  │ │ ├── string_decoder@1.0.3 
  │ │ └── util-deprecate@1.0.2 
  │ └── xtend@4.0.1 
  └─┬ uglify-js@2.4.24 
    ├── async@0.2.10 
    ├─┬ source-map@0.1.34 
    │ └── amdefine@1.0.1 
    ├── uglify-to-browserify@1.0.2 
    └─┬ yargs@3.5.4 
      ├── camelcase@1.2.1 
      ├── decamelize@1.2.0 
      ├── window-size@0.1.0 
      └── wordwrap@0.0.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/ezpack/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0684 took 5.246s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (7:4) on program /**
 * @author xiaojue[designsor@gmail.com]
 * @fileoverview combine file
 */
var utils = require('./utils');
var path = require('path');
var assert = require('assert');
var fs = require('fs');
var cssmin = require('cssmin');
var URLRewriteStream = require('cssurl').URLRewriteStream;
var byline = require('byline').LineStream;
var request = require('request');
var combineTarget = require('./combineTarget');
var svn = require('svn-interface');
var through2 = require('through2');
var Readable = require('stream').Readable;
var uglify = require('uglify-js');
var cwd = process.cwd();
var sass = require('sass.js');
var cssbeautify = require('cssbeautify');
var babel = require('babel-core');
var nodelog = require('log-timestamp');
var log4js = require('log4js');
var syncClinet = require('../wapModuleClient');
var colors = require('colors'); 
var CONST_prtlprefix="window.prtl.prefix"; 
var CONST_http_config_url = ['svn:https://svn1.intra.sina.com.cn/wapcms/js/wap_dev/public/https/httpsjson.js','https://svn1.intra.sina.com.cn/wapcms/js/wap_dev/public/https/httpsjson.js'];
var CONST_http_protocol_url =  ['svn:https://svn1.intra.sina.com.cn/wapcms/js/wap_dev/public/push/branch/push/js/httpsSupport.js','https://svn1.intra.sina.com.cn/wapcms/js/wap_dev/public/push/branch/push/js/httpsSupport.js'];
var CONST_console_word_url = ['svn:https://svn1.intra.sina.com.cn/wapcms/js/wap_dev/public/ezpack/cs_word.js','https://svn1.intra.sina.com.cn/wapcms/js/wap_dev/public/ezpack/cs_word.js']
var CONST_http_config_json;
var CONST_console_word_str;//单独输出的console.log
var logprefix = require('log-prefix');
var sourceMap = {};
var logger = log4js.getLogger(path.basename(__filename));
var readline = require('readline');
var watch = require('node-watch');
var watchPathArr = [];
function combine(svninfo) {
  this.svninfo = svninfo;
  this.deps = [];
}

function urlRewrite(filepath, cnf) {
  cnf = cnf || {};
  cnf.exts = cnf.exts || ['.css'];
  cnf.online = cnf.online || /http(s?)/i;
  cnf.replacer = cnf.replacer || path.dirname(filepath);
  //cnf.replacers = cnf.replacers.split('/');

  var urlRewriteIns = new URLRewriteStream(function(url){
    console.log('find '+ url + ' for rewrite!');
    if(!cnf.online.test(url)){
       url = cnf.replacer + '/' + url;
       return url += (url.indexOf('?') === -1 ? '?' : '&') + 't='+Date.now();
    }
    return url;
  });
  return cnf.exts.indexOf(path.extname(filepath)) !== -1 ? urlRewriteIns : through2(function(chunk, enc, cb){this.push(chunk);cb()});
}

function sassOrEsOrEs66(ext, es6, toSass) {
  function transform(chunk, enc, cb) {
    if (!this.source) {
      this.source = '';
    }
    this.source += chunk;
    cb();
  }
  var transformEnd;
  if (ext === '.css') {
    transformEnd = function(cb) {
      var self = this;
      console.log('beautify css...');
      var css = cssbeautify(this.source);
      if (toSass) {
        console.log('compile css for sass...');
        sass.compile(css, function(result) {
          if (result.text) {
            self.push(result.text);
            cb();
          } else {
            cb(result);
          }
        });
      } else {
        this.push(css);
        cb();
      }
    };
  } else if (ext === '.js') {
    transformEnd = function(cb) {
      if (es6) {
        this.push(this.source);
      } else {
        this.push(this.source);
      }
      cb();
    };
  }
  return through2(transform, transformEnd);
}

utils.definePublicPros(combine.prototype, {
  concat: function(filepath, keyword, ext, es6, toSass,enableHttp,enableNotConsole) {
    var line = new byline();
    this.deps = [];
    //var extraCnf = this.__cnf;
    var params = {
      svninfo: this.svninfo,
      deps: this.deps,
      keyword: keyword,
      ext: ext,
      es6:es6,
      isWriteResult:true,
      isChangeHttp:true,
      enableHttp:enableHttp,
      enableNotConsole:enableNotConsole,
      filepath: filepath,
      //extraCnf: extraCnf
    };
    var stream = fs.createReadStream(filepath, {
        encoding: 'utf-8'
      })
      .pipe(line)    
      .pipe(combineStream(params))
      .pipe(sassOrEsOrEs66(ext, es6, toSass))
      .on('error', function(e) {
        console.error(e);
      });
    return stream;
  }
});

combine.build = function(filepath, config, output, beautify, es6, toSass, enableMap,enableDebug,enableHttp,enableNotConsole) {
  var ext = path.extname(filepath),
    target;
  var uglifyOptions = {
    fromString: true,
    compress: {
      drop_console: false
    }
  };
  var filestream = new combine({
    username: config.svninfo.username,
    password: config.svninfo.password,
    command: config.svninfo.command
  }).concat(filepath, config.keywords[ext], ext, es6, toSass,enableHttp,enableNotConsole);
  if (beautify) {
    target = path.resolve(cwd, beautify);
    filestream.pipe(fs.createWriteStream(target)).on('finish', function() {
      console.info('beautify success: ' + target);
    });
  }
  if (output) {
    target = path.resolve(cwd, output);
    filestream.pipe(through2(function(chunk, enc, cb) {
      if (!this.code) {
        this.code = '';
      }
      this.code += chunk;
      cb();
    }, function(cb) {
      var result;
      var addConsoleWord;
      if (ext === '.js') {
        console.log('minify js by uglify...');
        if(enableNotConsole){//需要去掉console
          uglifyOptions.compress.drop_console = true;
          addConsoleWord = CONST_console_word_str;     
        }else{
          addConsoleWord = '';
        }
        enableMap && (uglifyOptions.outSourceMap=(path.basename(target) + '.map'));
        if (sourceMap.babel) {
          uglifyOptions.inSourceMap = sourceMap.babel;
        }
        var js 
        if(enableDebug){
          result = this.code;
        }else{
          result = this.code;
          js= uglify.minify(result, uglifyOptions);
          result = js.code;
        }
        result = result + addConsoleWord;
        if(enableMap&&!enableDebug){
          js.map = JSON.parse(js.map);
          js.map.file  = 'unknown';
          js.map.sources[0] = 'unknown';
          if(!js.map.sourcesContent){
            js.map.sourcesContent = [this.code];
          }
          fs.writeFileSync(target + '.map', JSON.stringify(js.map));
        }
      } else if (ext === '.css') {
        console.log('min css by cssmin...');
        result = cssmin(this.code);
      }
      this.push(result);
      cb();
    })).pipe(fs.createWriteStream(target)).on('finish', function() {
      console.info('build output: ' + target);
    });
  }
};
// combine.watch = function(filepath,config, output, beautify, es6, toSass, enableMap,enableDebug,enableHttp,enableNotConsole){
//   var rl = readline.createInterface({
//     input: fs.createReadStream(filepath,{
//       enconding:'utf8'
//     }),
//     output: null
//   });
//   rl.on('line',function(line){
//     watchFile(filepath,line);
//   });
//   rl.on('close',function(){
//     if(watchPathArr.length > 0){
//       watch(watchPathArr, function(file) {
//         console.log('the file changed');
//         combine.build(filepath, config, output, beautify, es6, toSass, enableMap,enableDebug,enableHttp,enableNotConsole);
//       });
//     }
//   });
// }
// function watchFile(filepath,line){

//   var type,requirePath;
//     var reg = new RegExp('^\\s*@require\\s*\\(\\s*([\'|\"])([\\w\\-\\.\\/\\_\\:\\?\\=\\&]*)\\1\\s*\\)\\s*;?', 'gi');
//     var matches = reg.exec(line);
   
//     if(matches && matches[2]){
//       requirePath = matches[2];
//       type = utils.getRquireType(requirePath);
//       if(type === 'local'){
//          watchPathArr.push(path.resolve(path.dirname(requirePath), requirePath));
//       }
//     };
// }

function pipeFile(file, params) {
  var line = new byline(),
    target = new combineTarget();
  file.pipe(line)
    .pipe(combineStream(params))
    .pipe(target)
    .on('finish', function() {
      var ext = params.ext;
      var domainlist ;
      if (ext === '.js'&&this.file!='') {
        if(params.enableNotConsole&&params.errorFile == 'cs_word.js'){
          //需要输出所以单独添加
          params.isWriteResult = false;
          CONST_console_word_str = uglify.minify(this.file, {fromString: true,}).code;
        }
        if(params.enableHttp&&params.errorFile != 'httpsSupport.js'&&params.errorFile != 'httpsjson.js'&&params.errorFile != 'cs_word.js'&&params.isChangeHttp){
          domainlist = getReplacedDomainList.apply(this);
          //处理https
          this.file =  dealHttp(this.file,domainlist);
        }   
        if(params.isWriteResult == true){
          this.file = '\r\ntry{' + this.file + '}catch(e){console.error(e, "'+params.errorFile+'");}\r\n';
        }else{
          this.file = '';
        }
      } else if (ext === '.css') {
        this.file = this.file + '/*' + params.errorFile + '*/ \r\n';
      }
      console.log('finish dispose ' + params.errorFile + '...');
      // params.cb(null, this.file);
      if(params.es6){
      	 var js = babel.transform(this.file, {

          filename:__filename,
          presets:[['es2015',{loose:true,modules: false,strict:false}]],
          plugins:[["transform-es2015-modules-commonjs", { allowTopLevelThis:true,strict:false}]],
	        sourceMaps: true,
	        compact: false
	      });

	      params.cb(null, js.code);
      }
      else{
	      params.cb(null, this.file);
      }
      
    });
}

function loopRequire(requireNames, params, done){
  if(requireNames instanceof Array){
    var requireName = requireNames.shift();
    if(requireName){
      loopRequire(requireName, params);
    }else{
      done && done(null, params.totalContent);
    }
  }else{
    var requireName = requireNames;
    var filePath = requireName;
    requireName = requireName.split('@')[0];
    var extname = path.extname(requireName);
    // if (extname === params.ext) {//当js后面有？时判断不成立
      //先放入堆栈，有重复的不放，忽略，算循环引用，结束之后剔除堆栈
      var type = utils.getRquireType(requireName);
      var isChangeHttp = true;
      if(!utils.getIfHttPType(requireName)){
        //false说明该file不转换，且有n-h标识,
        isChangeHttp = false;
        filePath = filePath.replace(/^n-h\:/, '');
      }
      if (type === 'local' || type === 'svn' || type === 'http') {
        if (params.deps.indexOf(requireName) === -1) {
          params.deps.push(requireName);
          getRequireString({
            extraCnf: params.extraCnf,
            svninfo: params.svninfo,
            deps: params.deps,
            keyword: params.keyword,
            ext: params.ext,
            type: type,
            es6:params.es6,
            enableNotConsole:params.enableNotConsole,
            enableHttp:params.enableHttp,
            isWriteResult:true,
            isChangeHttp:isChangeHttp,
            filepath: type === 'local' ? path.resolve(path.dirname(params.filepath), filePath) : filePath,
            errorFile: path.basename(requireName),
            cb: params.cb
          });
        } else {
          params.cb();
        }
      } else {
        params.cb(new Error('type is illegal ' + type + ' , ' + requireName));
      }
    // } else {
    //   params.cb(new Error('extname is illegal ' + requireName));
    // }
  }
}

function getRs(result) {
  var rs = new Readable;
  rs.push(result);
  rs.push(null);
  return rs;
}
function getRequireString(params) {
  console.log('start get ' + params.filepath + '...');
  if (params.type === 'local') {
    pipeFile(fs.createReadStream(params.filepath, {
      encoding: 'utf-8'
    }), params);
  } else if (params.type === 'http') {
    pipeFile(request(params.filepath).on('response', function(res) {
    }).pipe(urlRewrite(params.filepath)), params);
  } 
  else if (params.type === 'svn') {
    svn._setCommand(params.svninfo.command || 'svn');
    var filepath = params.filepath.replace(/^svn\:/, '');
    svn.cat(filepath, {
      username: params.svninfo.username,
      password: params.svninfo.password
      }, function(err, result) {
      if (err) {
        throw new Error(err);
      }else{
        var rs;
        if(filepath == CONST_http_config_url[1]){
          CONST_http_config_json = JSON.parse(result);
          result = 'window.httpsjson='+result;
          rs = getRs(result);
        }else{
          rs = getRs(result);
        }
        pipeFile(rs, params);
      }
    })
  }
}
var isenableConsoleBool = false;//保证console_word只输入一次
var isenableHttpBool = false;//保证http两个文件只输入一次
function combineStream(params) {
  return through2(function(line, enc, cb) {
    
    var reg = new RegExp('^\\s*' + params.keyword + '\\s*\\(\\s*([\'|\"])([\\w\\-\\.\\/\\_\\:\\?\\=\\&]*)\\1\\s*\\)\\s*;?', 'gi');

    line = line.toString();
    var lineParts = line.split(';');
    var requireNames = [];
    if(!isenableHttpBool&&params.enableHttp){
      isenableHttpBool = true;
      requireNames = [CONST_http_protocol_url[0],CONST_http_config_url[0]];
    }
    if(!isenableConsoleBool&&params.enableNotConsole){
      isenableConsoleBool = true;
      requireNames.push(CONST_console_word_url[0]);
    }
    lineParts.forEach((part) => {
      var matches = reg.exec(part);
      // var matchArr = part.match(reg);
      matches && requireNames.push(matches[2]);
    });
    line += '\r\n';
    if(requireNames.length){
      var newParams = {
        totalContent: '',
        requireNames: requireNames,
        extraCnf: params.extraCnf,
        svninfo: params.svninfo,
        deps: params.deps,
        es6:params.es6,
        enableHttp:params.enableHttp,
        enableNotConsole:params.enableNotConsole,
        keyword: params.keyword,
        ext: params.ext,
        filepath: params.filepath,
        cb: function(err, content){
          assert.equal(err, null);
          if(typeof(content) == 'undefined'){
            content = '';
          }
          newParams.totalContent+=content;
          loopRequire(newParams.requireNames, newParams, cb);
        }
      };
      loopRequire(newParams.requireNames, newParams, cb);
    }else{
      line += '\r\n';
      cb(null, line);
    }
  });
}
function getReplacedDomainList(){
    var me =this;
    if(CONST_http_config_json.prtldomain.length>0){
      return CONST_http_config_json.prtldomain;
    }else{
      return []
    }
};
function dealHttp(fileString,domainlist){
  var result;
  // var regstr = /["'](http):\/\/([^'"/:]+)/gi;
  // var regstr = /["'](http):\/\/([^/:]+)(:\d*)?([^# ][^\\\r\n]*)/g;//该正则只适配http url地址;
  var regstr = /(["'])(?:\1\1|(?!\1)[^\r\n])*\1/gi;//直接匹配字符串
  var isdeal = false;
  content=fileString.replace(regstr,function(a,b){
      //获取http的前面的引号类型。
      var refIcon = ['"',"'"];
      var patref = refIcon.indexOf(a[0]);
      if(patref!=-1){
          // ''+window.prtl.prefix+''+(window.prtl.type=='http'?'mjs.sinaimg.cn':'mjss.sinaimg.cn')+'/wap/online/public/images/addToHome/sina_114x114_v1.png';
          //判断是否重复执行。。目前重复执行的存在于上一行代码中现象。判断逻辑》》》》
          //处理http和https
          // if(a.indexOf("http://")>=0){//未知用途
          //     isdeal=true;
          // }
          if(a.indexOf('http://')>=0){          
            console.log('**http****:'+a);
            a = a.replace("http://",refIcon[patref]+"+"+CONST_prtlprefix+"+"+refIcon[patref]);
            domainlist.forEach(function(element) {
                if(a.indexOf("'"+element.http+"'")==-1&&a.indexOf(element.http)>=0){
                    // isdeal=true;
                    a=a.replace(element.http,function(a,b){
                        return refIcon[patref]+"+(window.prtl.type=='http'?'"+element.http+"':'"+element.https+"')+"+refIcon[patref]
                    })
                }
                if(a.indexOf("'"+element.https+"'")==-1&&a.indexOf(element.https)>=0){
                    // isdeal=true;
                    a=a.replace(element.https,function(a,b){
                        return refIcon[patref]+"+(window.prtl.type=='http'?'"+element.http+"':'"+element.https+"')+"+refIcon[patref]
                    })
                }
            }, this);
            return a;
          }
          //处理domain
      }
      else{
          //解析错误
      }
      
      return a;
  });

    return content;
}
function dealConsole(str){
  var reg = /console.log\([\s\S][^}\\\r\n]*\)(;*)/gi;
  var str = str||'';
  str = str.replace(reg,function(word){
    console.log('*****'+word+'*******已被空格替换');
    return "void(0)";
  });
  return str;
}

function patch(fn) {
  logprefix(fn || timestamp);
}
patch();
function timestamp() {
  return ('[' + new Date().toISOString() + ']').yellow;
}
module.exports = getReplacedDomainList;
module.exports = patch;
module.exports = combine;

 at SyntaxError: Unexpected token (7:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/ezpack/node_modules/ezpack/src/index.js. Coverage (Term): 32% Coverage (LOC): 33%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
