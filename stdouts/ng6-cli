/root/Targets/ng6-cli
└─┬ ng6-cli@0.6.6 
  ├── acorn@3.0.4 
  ├── bluebird@3.5.0 
  ├── case@1.5.3 
  ├─┬ chalk@1.1.3 
  │ ├── ansi-styles@2.2.1 
  │ ├── escape-string-regexp@1.0.5 
  │ ├─┬ has-ansi@2.0.0 
  │ │ └── ansi-regex@2.1.1 
  │ ├── strip-ansi@3.0.1 
  │ └── supports-color@2.0.0 
  ├─┬ columnify@1.5.4 
  │ └─┬ wcwidth@1.0.1 
  │   └─┬ defaults@1.0.3 
  │     └── clone@1.0.2 
  ├─┬ cross-spawn@5.1.0 
  │ ├─┬ lru-cache@4.1.1 
  │ │ ├── pseudomap@1.0.2 
  │ │ └── yallist@2.1.2 
  │ ├─┬ shebang-command@1.2.0 
  │ │ └── shebang-regex@1.0.0 
  │ └─┬ which@1.3.0 
  │   └── isexe@2.0.0 
  ├── deepmerge@0.2.10 
  ├─┬ detect-port@1.2.1 
  │ ├── address@1.0.3 
  │ └─┬ debug@2.6.9 
  │   └── ms@2.0.0 
  ├── ejs@2.4.2 
  ├─┬ gulp@3.9.1 
  │ ├── archy@1.0.0 
  │ ├── deprecated@0.0.1 
  │ ├─┬ gulp-util@3.0.8 
  │ │ ├── array-differ@1.0.0 
  │ │ ├── array-uniq@1.0.3 
  │ │ ├── beeper@1.1.1 
  │ │ ├── dateformat@2.2.0 
  │ │ ├─┬ fancy-log@1.3.0 
  │ │ │ └── time-stamp@1.1.0 
  │ │ ├─┬ gulplog@1.0.0 
  │ │ │ └── glogg@1.0.0 
  │ │ ├─┬ has-gulplog@0.1.0 
  │ │ │ └── sparkles@1.0.0 
  │ │ ├── lodash._reescape@3.0.0 
  │ │ ├── lodash._reevaluate@3.0.0 
  │ │ ├── lodash._reinterpolate@3.0.0 
  │ │ ├─┬ lodash.template@3.6.2 
  │ │ │ ├── lodash._basecopy@3.0.1 
  │ │ │ ├── lodash._basetostring@3.0.1 
  │ │ │ ├── lodash._basevalues@3.0.0 
  │ │ │ ├── lodash._isiterateecall@3.0.9 
  │ │ │ ├─┬ lodash.escape@3.2.0 
  │ │ │ │ └── lodash._root@3.0.1 
  │ │ │ ├── lodash.restparam@3.6.1 
  │ │ │ └── lodash.templatesettings@3.1.1 
  │ │ ├─┬ multipipe@0.1.2 
  │ │ │ └─┬ duplexer2@0.0.2 
  │ │ │   └── readable-stream@1.1.14 
  │ │ ├── object-assign@3.0.0 
  │ │ ├── replace-ext@0.0.1 
  │ │ ├─┬ through2@2.0.3 
  │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │   ├── isarray@1.0.0 
  │ │ │   ├── safe-buffer@5.1.1 
  │ │ │   └── string_decoder@1.0.3 
  │ │ └─┬ vinyl@0.5.3 
  │ │   └── clone-stats@0.0.1 
  │ ├── interpret@1.0.4 
  │ ├─┬ liftoff@2.3.0 
  │ │ ├── extend@3.0.1 
  │ │ ├─┬ findup-sync@0.4.3 
  │ │ │ ├─┬ detect-file@0.1.0 
  │ │ │ │ └── fs-exists-sync@0.1.0 
  │ │ │ ├─┬ is-glob@2.0.1 
  │ │ │ │ └── is-extglob@1.0.0 
  │ │ │ ├─┬ micromatch@2.3.11 
  │ │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ │ ├── array-unique@0.2.1 
  │ │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │ │   ├─┬ isobject@2.1.0 
  │ │ │ │ │ │   │ └── isarray@1.0.0 
  │ │ │ │ │ │   ├─┬ randomatic@1.1.7 
  │ │ │ │ │ │   │ ├─┬ is-number@3.0.0 
  │ │ │ │ │ │   │ │ └── kind-of@3.2.2 
  │ │ │ │ │ │   │ └── kind-of@4.0.0 
  │ │ │ │ │ │   └── repeat-string@1.6.1 
  │ │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ │ ├── extglob@0.3.2 
  │ │ │ │ ├── filename-regex@2.0.1 
  │ │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ │ ├─┬ normalize-path@2.1.1 
  │ │ │ │ │ └── remove-trailing-separator@1.1.0 
  │ │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ │ ├── for-own@0.1.5 
  │ │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ │ ├─┬ glob-base@0.3.0 
  │ │ │ │ │ │ └── glob-parent@2.0.0 
  │ │ │ │ │ └── is-dotfile@1.0.3 
  │ │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │ │     └── is-primitive@2.0.0 
  │ │ │ └─┬ resolve-dir@0.1.1 
  │ │ │   ├── expand-tilde@1.2.2 
  │ │ │   └─┬ global-modules@0.2.3 
  │ │ │     ├─┬ global-prefix@0.1.5 
  │ │ │     │ └── ini@1.3.4 
  │ │ │     └── is-windows@0.2.0 
  │ │ ├─┬ fined@1.1.0 
  │ │ │ ├─┬ expand-tilde@2.0.2 
  │ │ │ │ └─┬ homedir-polyfill@1.0.1 
  │ │ │ │   └── parse-passwd@1.0.0 
  │ │ │ ├─┬ is-plain-object@2.0.4 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ ├─┬ object.defaults@1.1.0 
  │ │ │ │ ├── array-each@1.0.1 
  │ │ │ │ ├── array-slice@1.0.0 
  │ │ │ │ ├─┬ for-own@1.0.0 
  │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ ├─┬ object.pick@1.3.0 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ └─┬ parse-filepath@1.0.1 
  │ │ │   ├─┬ is-absolute@0.2.6 
  │ │ │   │ └─┬ is-relative@0.2.1 
  │ │ │   │   └─┬ is-unc-path@0.1.2 
  │ │ │   │     └── unc-path-regex@0.1.2 
  │ │ │   ├── map-cache@0.2.2 
  │ │ │   └─┬ path-root@0.1.1 
  │ │ │     └── path-root-regex@0.1.2 
  │ │ ├── flagged-respawn@0.3.2 
  │ │ ├── lodash.isplainobject@4.0.6 
  │ │ ├── lodash.isstring@4.0.1 
  │ │ ├── lodash.mapvalues@4.6.0 
  │ │ ├── rechoir@0.6.2 
  │ │ └─┬ resolve@1.4.0 
  │ │   └── path-parse@1.0.5 
  │ ├── minimist@1.2.0 
  │ ├─┬ orchestrator@0.3.8 
  │ │ ├─┬ end-of-stream@0.1.5 
  │ │ │ └─┬ once@1.3.3 
  │ │ │   └── wrappy@1.0.2 
  │ │ ├── sequencify@0.0.7 
  │ │ └── stream-consume@0.1.0 
  │ ├── pretty-hrtime@1.0.3 
  │ ├── semver@4.3.6 
  │ ├─┬ tildify@1.2.0 
  │ │ └── os-homedir@1.0.2 
  │ ├─┬ v8flags@2.1.1 
  │ │ └── user-home@1.1.1 
  │ └─┬ vinyl-fs@0.3.14 
  │   ├─┬ glob-stream@3.1.18 
  │   │ ├─┬ glob@4.5.3 
  │   │ │ └── inflight@1.0.6 
  │   │ ├─┬ glob2base@0.0.12 
  │   │ │ └── find-index@0.1.1 
  │   │ ├── minimatch@2.0.10 
  │   │ ├── ordered-read-streams@0.1.0 
  │   │ ├─┬ through2@0.6.5 
  │   │ │ └── readable-stream@1.0.34 
  │   │ └── unique-stream@1.0.0 
  │   ├─┬ glob-watcher@0.0.6 
  │   │ └─┬ gaze@0.5.2 
  │   │   └─┬ globule@0.1.0 
  │   │     ├─┬ glob@3.1.21 
  │   │     │ ├── graceful-fs@1.2.3 
  │   │     │ └── inherits@1.0.2 
  │   │     ├── lodash@1.0.2 
  │   │     └─┬ minimatch@0.2.14 
  │   │       ├── lru-cache@2.7.3 
  │   │       └── sigmund@1.0.1 
  │   ├─┬ graceful-fs@3.0.11 
  │   │ └── natives@1.1.0 
  │   ├─┬ mkdirp@0.5.1 
  │   │ └── minimist@0.0.8 
  │   ├─┬ strip-bom@1.0.0 
  │   │ ├── first-chunk-stream@1.0.0 
  │   │ └── is-utf8@0.2.1 
  │   ├─┬ through2@0.6.5 
  │   │ └─┬ readable-stream@1.0.34 
  │   │   └── isarray@0.0.1 
  │   └─┬ vinyl@0.4.6 
  │     └── clone@0.2.0 
  ├─┬ gulp-batch-replace@0.0.0 
  │ └─┬ event-stream@3.3.4 
  │   ├── duplexer@0.1.1 
  │   ├── from@0.1.7 
  │   ├── map-stream@0.1.0 
  │   ├── pause-stream@0.0.11 
  │   ├── split@0.3.3 
  │   └── stream-combiner@0.0.4 
  ├─┬ gulp-ejs@2.1.2 
  │ ├─┬ gulp-util@3.0.7 
  │ │ └─┬ dateformat@1.0.12 
  │ │   ├── get-stdin@4.0.1 
  │ │   └─┬ meow@3.7.0 
  │ │     ├── camelcase-keys@2.1.0 
  │ │     ├─┬ loud-rejection@1.6.0 
  │ │     │ └─┬ currently-unhandled@0.4.1 
  │ │     │   └── array-find-index@1.0.2 
  │ │     ├── map-obj@1.0.1 
  │ │     ├── object-assign@4.1.1 
  │ │     ├─┬ redent@1.0.0 
  │ │     │ ├─┬ indent-string@2.1.0 
  │ │     │ │ └─┬ repeating@2.0.1 
  │ │     │ │   └── is-finite@1.0.2 
  │ │     │ └── strip-indent@1.0.1 
  │ │     └── trim-newlines@1.0.0 
  │ └─┬ through2@2.0.1 
  │   ├─┬ readable-stream@2.0.6 
  │   │ ├── core-util-is@1.0.2 
  │   │ ├── isarray@1.0.0 
  │   │ ├── process-nextick-args@1.0.7 
  │   │ ├── string_decoder@0.10.31 
  │   │ └── util-deprecate@1.0.2 
  │   └── xtend@4.0.1 
  ├── gulp-rename@1.2.2 
  ├── homedir@0.6.0 
  ├─┬ inquirer@1.0.0 
  │ ├── ansi-escapes@1.4.0 
  │ ├─┬ cli-cursor@1.0.2 
  │ │ └─┬ restore-cursor@1.0.1 
  │ │   ├── exit-hook@1.1.1 
  │ │   └── onetime@1.1.0 
  │ ├── cli-width@2.2.0 
  │ ├─┬ figures@1.7.0 
  │ │ └── object-assign@4.1.1 
  │ ├─┬ pinkie-promise@2.0.1 
  │ │ └── pinkie@2.0.4 
  │ ├─┬ readline2@1.0.1 
  │ │ ├── code-point-at@1.1.0 
  │ │ ├─┬ is-fullwidth-code-point@1.0.0 
  │ │ │ └── number-is-nan@1.0.1 
  │ │ └── mute-stream@0.0.5 
  │ ├─┬ run-async@2.3.0 
  │ │ └── is-promise@2.1.0 
  │ ├── rx@4.1.0 
  │ ├── string-width@1.0.2 
  │ └── through@2.3.8 
  ├── lodash@4.17.4 
  ├── marked@0.3.6 
  ├─┬ marked-terminal@1.6.1 
  │ ├─┬ cardinal@0.5.0 
  │ │ ├── ansicolors@0.2.1 
  │ │ └─┬ redeyed@0.5.0 
  │ │   └── esprima-fb@12001.1.0-dev-harmony-fb 
  │ ├─┬ cli-table@0.3.1 
  │ │ └── colors@1.0.3 
  │ ├─┬ lodash.assign@3.2.0 
  │ │ ├── lodash._baseassign@3.2.0 
  │ │ ├─┬ lodash._createassigner@3.1.1 
  │ │ │ └── lodash._bindcallback@3.0.1 
  │ │ └─┬ lodash.keys@3.1.2 
  │ │   ├── lodash._getnative@3.9.1 
  │ │   ├── lodash.isarguments@3.1.0 
  │ │   └── lodash.isarray@3.0.4 
  │ └── node-emoji@0.1.0 
  ├─┬ ora@1.3.0 
  │ ├─┬ cli-cursor@2.1.0 
  │ │ └─┬ restore-cursor@2.0.0 
  │ │   ├─┬ onetime@2.0.1 
  │ │   │ └── mimic-fn@1.1.0 
  │ │   └── signal-exit@3.0.2 
  │ ├── cli-spinners@1.0.1 
  │ └── log-symbols@1.0.2 
  ├── ouro-base@0.9.0 
  ├─┬ react-dev-utils@0.5.2 
  │ ├── ansi-html@0.0.5 
  │ ├── filesize@3.3.0 
  │ ├── gzip-size@3.0.0 
  │ ├── html-entities@1.2.0 
  │ ├─┬ opn@4.0.2 
  │ │ └── object-assign@4.1.1 
  │ ├─┬ recursive-readdir@2.1.1 
  │ │ └─┬ minimatch@3.0.3 
  │ │   └─┬ brace-expansion@1.1.8 
  │ │     ├── balanced-match@1.0.0 
  │ │     └── concat-map@0.0.1 
  │ └─┬ sockjs-client@1.0.1 
  │   ├─┬ eventsource@0.1.6 
  │   │ └─┬ original@1.0.0 
  │   │   └─┬ url-parse@1.0.5 
  │   │     └── querystringify@0.0.4 
  │   ├─┬ faye-websocket@0.7.3 
  │   │ └─┬ websocket-driver@0.7.0 
  │   │   ├── http-parser-js@0.4.8 
  │   │   └── websocket-extensions@0.1.2 
  │   ├── inherits@2.0.3 
  │   ├── json3@3.3.2 
  │   └─┬ url-parse@1.1.9 
  │     ├── querystringify@1.0.0 
  │     └── requires-port@1.0.0 
  ├── shelljs@0.6.0 
  ├── word-wrap@1.2.3 
  └─┬ yargs@4.4.0 
    ├── camelcase@2.1.1 
    ├─┬ cliui@3.2.0 
    │ └── wrap-ansi@2.1.0 
    ├── decamelize@1.2.0 
    ├── lodash.assign@4.2.0 
    ├─┬ os-locale@1.4.0 
    │ └─┬ lcid@1.0.0 
    │   └── invert-kv@1.0.0 
    ├─┬ pkg-conf@1.1.3 
    │ ├─┬ find-up@1.1.2 
    │ │ └── path-exists@2.1.0 
    │ ├─┬ load-json-file@1.1.0 
    │ │ ├── graceful-fs@4.1.11 
    │ │ ├─┬ parse-json@2.2.0 
    │ │ │ └─┬ error-ex@1.3.1 
    │ │ │   └── is-arrayish@0.2.1 
    │ │ ├── pify@2.3.0 
    │ │ └── strip-bom@2.0.0 
    │ ├── object-assign@4.1.1 
    │ └── symbol@0.2.3 
    ├─┬ read-pkg-up@1.0.1 
    │ └─┬ read-pkg@1.1.0 
    │   ├─┬ normalize-package-data@2.4.0 
    │   │ ├── hosted-git-info@2.5.0 
    │   │ ├─┬ is-builtin-module@1.0.0 
    │   │ │ └── builtin-modules@1.1.1 
    │   │ └─┬ validate-npm-package-license@3.0.1 
    │   │   ├─┬ spdx-correct@1.0.2 
    │   │   │ └── spdx-license-ids@1.2.2 
    │   │   └── spdx-expression-parse@1.0.4 
    │   └─┬ path-type@1.1.0 
    │     └── graceful-fs@4.1.11 
    ├── require-main-filename@1.0.1 
    ├── window-size@0.2.0 
    ├── y18n@3.2.1 
    └─┬ yargs-parser@2.4.1 
      ├── camelcase@3.0.0 
      └── lodash.assign@4.2.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/ng6-cli/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 48% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","RegExp","bind","defineProperties"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0736 took 7.4738s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:82) on program var assert = require('assert')
var assign = require('lodash.assign')
var Command = require('./lib/command')
var Completion = require('./lib/completion')
var Parser = require('yargs-parser')
var path = require('path')
var Usage = require('./lib/usage')
var Validation = require('./lib/validation')
var Y18n = require('y18n')
var readPkgUp = require('read-pkg-up')
var pkgConf = require('pkg-conf')
var requireMainFilename = require('require-main-filename')
var objFilter = require('./lib/obj-filter')

var exports = module.exports = Yargs
function Yargs (processArgs, cwd, parentRequire) {
  processArgs = processArgs || [] // handle calling yargs().

  var self = {}
  var command = null
  var completion = null
  var groups = {}
  var preservedGroups = {}
  var usage = null
  var validation = null
  var y18n = Y18n({
    directory: path.resolve(__dirname, './locales'),
    updateFiles: false
  })

  if (!cwd) cwd = process.cwd()

  self.$0 = process.argv
    .slice(0, 2)
    .map(function (x, i) {
      // ignore the node bin, specify this in your
      // bin file with #!/usr/bin/env node
      if (i === 0 && /\b(node|iojs)$/.test(x)) return
      var b = rebase(cwd, x)
      return x.match(/^\//) && b.length < x.length ? b : x
    })
    .join(' ').trim()

  if (process.env._ !== undefined && process.argv[1] === process.env._) {
    self.$0 = process.env._.replace(
      path.dirname(process.execPath) + '/', ''
    )
  }

  // use context object to keep track of resets, subcommand execution, etc
  // submodules should modify and check the state of context as necessary
  var context = { resets: -1, commands: [] }
  self.getContext = function () {
    return context
  }

  // puts yargs back into an initial state. any keys
  // that have been set to "global" will not be reset
  // by this action.
  var options
  self.resetOptions = self.reset = function (aliases) {
    context.resets++
    aliases = aliases || {}
    options = options || {}
    // put yargs back into an initial state, this
    // logic is used to build a nested command
    // hierarchy.
    var tmpOptions = {}
    tmpOptions.global = options.global ? options.global : []

    // if a key has been set as a global, we
    // do not want to reset it or its aliases.
    var globalLookup = {}
    tmpOptions.global.forEach(function (g) {
      globalLookup[g] = true
      ;(aliases[g] || []).forEach(function (a) {
        globalLookup[a] = true
      })
    })

    // preserve groups containing global keys
    preservedGroups = Object.keys(groups).reduce(function (acc, groupName) {
      var keys = groups[groupName].filter(function (key) {
        return key in globalLookup
      })
      if (keys.length > 0) {
        acc[groupName] = keys
      }
      return acc
    }, {})
    // groups can now be reset
    groups = {}

    var arrayOptions = [
      'array', 'boolean', 'string', 'requiresArg',
      'count', 'normalize', 'number'
    ]

    var objectOptions = [
      'narg', 'key', 'alias', 'default', 'defaultDescription',
      'config', 'choices', 'demanded'
    ]

    arrayOptions.forEach(function (k) {
      tmpOptions[k] = (options[k] || []).filter(function (k) {
        return globalLookup[k]
      })
    })

    objectOptions.forEach(function (k) {
      tmpOptions[k] = objFilter(options[k], function (k, v) {
        return globalLookup[k]
      })
    })

    tmpOptions.envPrefix = undefined
    options = tmpOptions

    // if this is the first time being executed, create
    // instances of all our helpers -- otherwise just reset.
    usage = usage ? usage.reset(globalLookup) : Usage(self, y18n)
    validation = validation ? validation.reset(globalLookup) : Validation(self, usage, y18n)
    command = command ? command.reset() : Command(self, usage, validation)
    if (!completion) completion = Completion(self, usage, command)

    exitProcess = true
    strict = false
    completionCommand = null
    self.parsed = false

    return self
  }
  self.resetOptions()

  self.boolean = function (bools) {
    options.boolean.push.apply(options.boolean, [].concat(bools))
    return self
  }

  self.array = function (arrays) {
    options.array.push.apply(options.array, [].concat(arrays))
    return self
  }

  self.nargs = function (key, n) {
    if (typeof key === 'object') {
      Object.keys(key).forEach(function (k) {
        self.nargs(k, key[k])
      })
    } else {
      options.narg[key] = n
    }
    return self
  }

  self.number = function (numbers) {
    options.number.push.apply(options.number, [].concat(numbers))
    return self
  }

  self.choices = function (key, values) {
    if (typeof key === 'object') {
      Object.keys(key).forEach(function (k) {
        self.choices(k, key[k])
      })
    } else {
      options.choices[key] = (options.choices[key] || []).concat(values)
    }
    return self
  }

  self.normalize = function (strings) {
    options.normalize.push.apply(options.normalize, [].concat(strings))
    return self
  }

  self.config = function (key, msg, parseFn) {
    if (typeof msg === 'function') {
      parseFn = msg
      msg = null
    }
    self.describe(key, msg || usage.deferY18nLookup('Path to JSON config file'))
    ;(Array.isArray(key) ? key : [key]).forEach(function (k) {
      options.config[k] = parseFn || true
    })
    return self
  }

  self.example = function (cmd, description) {
    usage.example(cmd, description)
    return self
  }

  self.command = function (cmd, description, builder, handler) {
    command.addHandler(cmd, description, builder, handler)
    return self
  }

  self.string = function (strings) {
    options.string.push.apply(options.string, [].concat(strings))
    return self
  }

  self.default = function (key, value, defaultDescription) {
    if (typeof key === 'object') {
      Object.keys(key).forEach(function (k) {
        self.default(k, key[k])
      })
    } else {
      if (defaultDescription) options.defaultDescription[key] = defaultDescription
      if (typeof value === 'function') {
        if (!options.defaultDescription[key]) options.defaultDescription[key] = usage.functionDescription(value)
        value = value.call()
      }
      options.default[key] = value
    }
    return self
  }

  self.alias = function (x, y) {
    if (typeof x === 'object') {
      Object.keys(x).forEach(function (key) {
        self.alias(key, x[key])
      })
    } else {
      options.alias[x] = (options.alias[x] || []).concat(y)
    }
    return self
  }

  self.count = function (counts) {
    options.count.push.apply(options.count, [].concat(counts))
    return self
  }

  self.demand = self.required = self.require = function (keys, max, msg) {
    // you can optionally provide a 'max' key,
    // which will raise an exception if too many '_'
    // options are provided.

    if (Array.isArray(max)) {
      max.forEach(function (key) {
        self.demand(key, msg)
      })
      max = Infinity
    } else if (typeof max !== 'number') {
      msg = max
      max = Infinity
    }

    if (typeof keys === 'number') {
      if (!options.demanded._) options.demanded._ = { count: 0, msg: null, max: max }
      options.demanded._.count = keys
      options.demanded._.msg = msg
    } else if (Array.isArray(keys)) {
      keys.forEach(function (key) {
        self.demand(key, msg)
      })
    } else {
      if (typeof msg === 'string') {
        options.demanded[keys] = { msg: msg }
      } else if (msg === true || typeof msg === 'undefined') {
        options.demanded[keys] = { msg: undefined }
      }
    }

    return self
  }

  self.getDemanded = function () {
    return options.demanded
  }

  self.requiresArg = function (requiresArgs) {
    options.requiresArg.push.apply(options.requiresArg, [].concat(requiresArgs))
    return self
  }

  self.implies = function (key, value) {
    validation.implies(key, value)
    return self
  }

  self.usage = function (msg, opts) {
    if (!opts && typeof msg === 'object') {
      opts = msg
      msg = null
    }

    usage.usage(msg)

    if (opts) self.options(opts)

    return self
  }

  self.epilogue = self.epilog = function (msg) {
    usage.epilog(msg)
    return self
  }

  self.fail = function (f) {
    usage.failFn(f)
    return self
  }

  self.check = function (f) {
    validation.check(f)
    return self
  }

  self.defaults = self.default

  self.describe = function (key, desc) {
    options.key[key] = true
    usage.describe(key, desc)
    return self
  }

  self.global = function (globals) {
    options.global.push.apply(options.global, [].concat(globals))
    return self
  }

  self.pkgConf = function (key, path) {
    var conf = null

    var obj = readPkgUp.sync({
      cwd: path || requireMainFilename(parentRequire || require)
    })

    if (obj.pkg && obj.pkg[key] && typeof obj.pkg[key] === 'object') {
      conf = obj.pkg[key]
      Object.keys(conf).forEach(function (k) {
        self.default(k, conf[k])
      })
    }

    return self
  }

  self.parse = function (args) {
    return parseArgs(args)
  }

  self.option = self.options = function (key, opt) {
    if (typeof key === 'object') {
      Object.keys(key).forEach(function (k) {
        self.options(k, key[k])
      })
    } else {
      assert(typeof opt === 'object', 'second argument to option must be an object')

      options.key[key] = true // track manually set keys.

      if (opt.alias) self.alias(key, opt.alias)

      var demand = opt.demand || opt.required || opt.require

      if (demand) {
        self.demand(key, demand)
      } if ('config' in opt) {
        self.config(key, opt.configParser)
      } if ('default' in opt) {
        self.default(key, opt.default)
      } if ('nargs' in opt) {
        self.nargs(key, opt.nargs)
      } if ('normalize' in opt) {
        self.normalize(key)
      } if ('choices' in opt) {
        self.choices(key, opt.choices)
      } if ('group' in opt) {
        self.group(key, opt.group)
      } if (opt.global) {
        self.global(key)
      } if (opt.boolean || opt.type === 'boolean') {
        self.boolean(key)
        if (opt.alias) self.boolean(opt.alias)
      } if (opt.array || opt.type === 'array') {
        self.array(key)
        if (opt.alias) self.array(opt.alias)
      } if (opt.number || opt.type === 'number') {
        self.number(key)
        if (opt.alias) self.number(opt.alias)
      } if (opt.string || opt.type === 'string') {
        self.string(key)
        if (opt.alias) self.string(opt.alias)
      } if (opt.count || opt.type === 'count') {
        self.count(key)
      } if (opt.defaultDescription) {
        options.defaultDescription[key] = opt.defaultDescription
      }

      var desc = opt.describe || opt.description || opt.desc
      if (desc) {
        self.describe(key, desc)
      }

      if (opt.requiresArg) {
        self.requiresArg(key)
      }
    }

    return self
  }
  self.getOptions = function () {
    return options
  }

  self.group = function (opts, groupName) {
    var existing = preservedGroups[groupName] || groups[groupName]
    if (preservedGroups[groupName]) {
      // the preserved group will be moved to the set of explicitly declared
      // groups
      delete preservedGroups[groupName]
    }

    var seen = {}
    groups[groupName] = (existing || []).concat(opts).filter(function (key) {
      if (seen[key]) return false
      return (seen[key] = true)
    })
    return self
  }
  self.getGroups = function () {
    // combine explicit and preserved groups. explicit groups should be first
    return assign({}, groups, preservedGroups)
  }

  // as long as options.envPrefix is not undefined,
  // parser will apply env vars matching prefix to argv
  self.env = function (prefix) {
    if (prefix === false) options.envPrefix = undefined
    else options.envPrefix = prefix || ''
    return self
  }

  self.wrap = function (cols) {
    usage.wrap(cols)
    return self
  }

  var strict = false
  self.strict = function () {
    strict = true
    return self
  }
  self.getStrict = function () {
    return strict
  }

  self.showHelp = function (level) {
    if (!self.parsed) parseArgs(processArgs) // run parser, if it has not already been executed.
    usage.showHelp(level)
    return self
  }

  var versionOpt = null
  self.version = function (opt, msg, ver) {
    if (arguments.length === 0) {
      ver = guessVersion()
      opt = 'version'
    } else if (arguments.length === 1) {
      ver = opt
      opt = 'version'
    } else if (arguments.length === 2) {
      ver = msg
    }

    versionOpt = opt
    msg = msg || usage.deferY18nLookup('Show version number')

    usage.version(ver || undefined)
    self.boolean(versionOpt)
    self.global(versionOpt)
    self.describe(versionOpt, msg)
    return self
  }

  function guessVersion () {
    var obj = readPkgUp.sync({
      cwd: requireMainFilename(parentRequire || require)
    })

    return obj.pkg ? obj.pkg.version : 'unknown'
  }

  var helpOpt = null
  self.addHelpOpt = self.help = function (opt, msg) {
    opt = opt || 'help'
    helpOpt = opt
    self.boolean(opt)
    self.global(opt)
    self.describe(opt, msg || usage.deferY18nLookup('Show help'))
    return self
  }

  self.showHelpOnFail = function (enabled, message) {
    usage.showHelpOnFail(enabled, message)
    return self
  }

  var exitProcess = true
  self.exitProcess = function (enabled) {
    if (typeof enabled !== 'boolean') {
      enabled = true
    }
    exitProcess = enabled
    return self
  }
  self.getExitProcess = function () {
    return exitProcess
  }

  var completionCommand = null
  self.completion = function (cmd, desc, fn) {
    // a function to execute when generating
    // completions can be provided as the second
    // or third argument to completion.
    if (typeof desc === 'function') {
      fn = desc
      desc = null
    }

    // register the completion command.
    completionCommand = cmd || 'completion'
    if (!desc && desc !== false) {
      desc = 'generate bash completion script'
    }
    self.command(completionCommand, desc)

    // a function can be provided
    if (fn) completion.registerFunction(fn)

    return self
  }

  self.showCompletionScript = function ($0) {
    $0 = $0 || self.$0
    console.log(completion.generateCompletionScript($0))
    return self
  }

  self.locale = function (locale) {
    if (arguments.length === 0) {
      guessLocale()
      return y18n.getLocale()
    }
    detectLocale = false
    y18n.setLocale(locale)
    return self
  }

  self.updateStrings = self.updateLocale = function (obj) {
    detectLocale = false
    y18n.updateLocale(obj)
    return self
  }

  var detectLocale = true
  self.detectLocale = function (detect) {
    detectLocale = detect
    return self
  }
  self.getDetectLocale = function () {
    return detectLocale
  }

  self.getUsageInstance = function () {
    return usage
  }

  self.getValidationInstance = function () {
    return validation
  }

  self.getCommandInstance = function () {
    return command
  }

  self.terminalWidth = function () {
    return require('window-size').width
  }

  Object.defineProperty(self, 'argv', {
    get: function () {
      var args = null

      try {
        args = parseArgs(processArgs)
      } catch (err) {
        usage.fail(err.message, err)
      }

      return args
    },
    enumerable: true
  })

  function parseArgs (args) {
    options.__ = y18n.__
    options.configuration = pkgConf.sync('yargs', {
      defaults: {},
      cwd: requireMainFilename(require)
    })
    var parsed = Parser.detailed(args, options)
    var argv = parsed.argv
    var aliases = parsed.aliases

    argv.$0 = self.$0
    self.parsed = parsed

    guessLocale() // guess locale lazily, so that it can be turned off in chain.

    // while building up the argv object, there
    // are two passes through the parser. If completion
    // is being performed short-circuit on the first pass.
    if (completionCommand &&
      (process.argv.join(' ')).indexOf(completion.completionKey) !== -1 &&
      !argv[completion.completionKey]) {
      return argv
    }

    // if there's a handler associated with a
    // command defer processing to it.
    var handlerKeys = command.getCommands()
    for (var i = 0, cmd; (cmd = handlerKeys[i]) !== undefined; i++) {
      if (~argv._.indexOf(cmd) && cmd !== completionCommand) {
        setPlaceholderKeys(argv)
        return command.runCommand(cmd, self, parsed)
      }
    }

    // generate a completion script for adding to ~/.bashrc.
    if (completionCommand && ~argv._.indexOf(completionCommand) && !argv[completion.completionKey]) {
      self.showCompletionScript()
      if (exitProcess) {
        process.exit(0)
      }
    }

    // we must run completions first, a user might
    // want to complete the --help or --version option.
    if (completion.completionKey in argv) {
      // we allow for asynchronous completions,
      // e.g., loading in a list of commands from an API.
      completion.getCompletion(function (completions) {
        ;(completions || []).forEach(function (completion) {
          console.log(completion)
        })

        if (exitProcess) {
          process.exit(0)
        }
      })
      return
    }

    var helpOrVersion = false
    Object.keys(argv).forEach(function (key) {
      if (key === helpOpt && argv[key]) {
        helpOrVersion = true
        self.showHelp('log')
        if (exitProcess) {
          process.exit(0)
        }
      } else if (key === versionOpt && argv[key]) {
        helpOrVersion = true
        usage.showVersion()
        if (exitProcess) {
          process.exit(0)
        }
      }
    })

    // If the help or version options where used and exitProcess is false,
    // we won't run validations
    if (!helpOrVersion) {
      if (parsed.error) throw parsed.error

      // if we're executed via bash completion, don't
      // bother with validation.
      if (!argv[completion.completionKey]) {
        validation.nonOptionCount(argv)
        validation.missingArgumentValue(argv)
        validation.requiredArguments(argv)
        if (strict) validation.unknownArguments(argv, aliases)
        validation.customChecks(argv, aliases)
        validation.limitedChoices(argv)
        validation.implications(argv)
      }
    }

    setPlaceholderKeys(argv)

    return argv
  }

  function guessLocale () {
    if (!detectLocale) return

    try {
      var osLocale = require('os-locale')
      self.locale(osLocale.sync({ spawn: false }))
    } catch (err) {
      // if we explode looking up locale just noop
      // we'll keep using the default language 'en'.
    }
  }

  function setPlaceholderKeys (argv) {
    Object.keys(options.key).forEach(function (key) {
      // don't set placeholder keys for dot
      // notation options 'foo.bar'.
      if (~key.indexOf('.')) return
      if (typeof argv[key] === 'undefined') argv[key] = undefined
    })
  }

  return self
}

// rebase an absolute path to a relative one with respect to a base directory
// exported for tests
exports.rebase = rebase
function rebase (base, dir) {
  return path.relative(base, dir)
}
 at SyntaxError: Unexpected token (1:82)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/ng6-cli/node_modules/ng6-cli/index.js. Coverage (Term): 49% Coverage (LOC): 71%
*- File /root/Targets/ng6-cli/node_modules/ouro-base/index.js. Coverage (Term): 47% Coverage (LOC): 57%
*- File /root/Targets/ng6-cli/node_modules/ng6-cli/lib/cli.js. Coverage (Term): 10% Coverage (LOC): 12%
*- File /root/Targets/ng6-cli/node_modules/chalk/index.js. Coverage (Term): 46% Coverage (LOC): 56%
*- File /root/Targets/ng6-cli/node_modules/escape-string-regexp/index.js. Coverage (Term): 85% Coverage (LOC): 90%
*- File /root/Targets/ng6-cli/node_modules/ansi-styles/index.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/ng6-cli/node_modules/strip-ansi/index.js. Coverage (Term): 57% Coverage (LOC): 86%
*- File /root/Targets/ng6-cli/node_modules/ansi-regex/index.js. Coverage (Term): 93% Coverage (LOC): 100%
*- File /root/Targets/ng6-cli/node_modules/has-ansi/index.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/ng6-cli/node_modules/supports-color/index.js. Coverage (Term): 63% Coverage (LOC): 56%
*- File /root/Targets/ng6-cli/node_modules/ng6-cli/lib/config.js. Coverage (Term): 37% Coverage (LOC): 58%
*- File /root/Targets/ng6-cli/node_modules/deepmerge/index.js. Coverage (Term): 20% Coverage (LOC): 21%
*- File /root/Targets/ng6-cli/node_modules/ng6-cli/lib/request.js. Coverage (Term): 14% Coverage (LOC): 16%
*- File /root/Targets/ng6-cli/node_modules/yargs/index.js. Coverage (Term): 18% Coverage (LOC): 31%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
