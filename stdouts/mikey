
> spawn-sync@1.0.15 postinstall /root/Targets/mikey/node_modules/spawn-sync
> node postinstall

/root/Targets/mikey
└─┬ mikey@3.9.7 
  ├── colors@1.1.2 
  ├── commander@2.11.0 
  ├─┬ fs-extra@0.28.0 
  │ ├── graceful-fs@4.1.11 
  │ ├── jsonfile@2.4.0 
  │ ├── klaw@1.3.1 
  │ ├── path-is-absolute@1.0.1 
  │ └── rimraf@2.6.2 
  ├─┬ inquirer@1.2.3 
  │ ├── ansi-escapes@1.4.0 
  │ ├─┬ chalk@1.1.3 
  │ │ ├── ansi-styles@2.2.1 
  │ │ ├── escape-string-regexp@1.0.5 
  │ │ ├── has-ansi@2.0.0 
  │ │ └── supports-color@2.0.0 
  │ ├─┬ cli-cursor@1.0.2 
  │ │ └─┬ restore-cursor@1.0.1 
  │ │   ├── exit-hook@1.1.1 
  │ │   └── onetime@1.1.0 
  │ ├── cli-width@2.2.0 
  │ ├─┬ external-editor@1.1.1 
  │ │ ├── extend@3.0.1 
  │ │ ├─┬ spawn-sync@1.0.15 
  │ │ │ ├─┬ concat-stream@1.6.0 
  │ │ │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ │ │ ├── core-util-is@1.0.2 
  │ │ │ │ │ ├── isarray@1.0.0 
  │ │ │ │ │ ├── process-nextick-args@1.0.7 
  │ │ │ │ │ ├── safe-buffer@5.1.1 
  │ │ │ │ │ ├── string_decoder@1.0.3 
  │ │ │ │ │ └── util-deprecate@1.0.2 
  │ │ │ │ └── typedarray@0.0.6 
  │ │ │ └── os-shim@0.1.3 
  │ │ └── tmp@0.0.29 
  │ ├─┬ figures@1.7.0 
  │ │ └── object-assign@4.1.1 
  │ ├── mute-stream@0.0.6 
  │ ├─┬ pinkie-promise@2.0.1 
  │ │ └── pinkie@2.0.4 
  │ ├─┬ run-async@2.3.0 
  │ │ └── is-promise@2.1.0 
  │ ├── rx@4.1.0 
  │ ├─┬ string-width@1.0.2 
  │ │ ├── code-point-at@1.1.0 
  │ │ └─┬ is-fullwidth-code-point@1.0.0 
  │ │   └── number-is-nan@1.0.1 
  │ ├─┬ strip-ansi@3.0.1 
  │ │ └── ansi-regex@2.1.1 
  │ └── through@2.3.8 
  ├── lodash@4.17.4 
  ├─┬ node-find-folder@0.1.32 
  │ ├─┬ glob@7.1.2 
  │ │ ├── fs.realpath@1.0.0 
  │ │ ├─┬ inflight@1.0.6 
  │ │ │ └── wrappy@1.0.2 
  │ │ ├── inherits@2.0.3 
  │ │ ├─┬ minimatch@3.0.4 
  │ │ │ └─┬ brace-expansion@1.1.8 
  │ │ │   ├── balanced-match@1.0.0 
  │ │ │   └── concat-map@0.0.1 
  │ │ └── once@1.4.0 
  │ ├── is-directory@0.3.1 
  │ └── is-file@1.0.0 
  └─┬ prepend-file@1.3.1 
    └─┬ tmp@0.0.31 
      └── os-tmpdir@1.0.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/mikey/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0567 took 4.1027s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
// Project Dependencies
var program = require('commander');
var colors = require('colors');
var inquirer = require('inquirer');
var _ = require('lodash');

// Mikey Files
var generatePath = require('./generators/pathGen.js');
var generateProject = require('./generators/projectGen.js');
var generateFile = require('./generators/fileGen.js');
var generateCustomFile = require('./generators/customGen.js');
var eraseDefaults = require('./defaults/eraseDefaults.js');
var listDefaults = require('./defaults/listDefaults.js');
var saveTemplate = require('./custom_templates/saveTemplate.js');
var deleteTemplate = require('./custom_templates/deleteTemplate.js');
var listTemplates = require('./custom_templates/listTemplates.js');
var mikeyJsonGenerator = require('./generators/mikeyGen.js');

function collect(val, memo) {
  memo.push(val);
  return memo;
}

program
  .version('3.9.7')
  .option('new <projectName>', 'Generate New Mikey Project: react/redux/universal/electron', /^(react|redux|universal|electron)$/i)
  .option('g <fileType>', 'Generate New React File: container/component/action/reducer/helper/custom', /^(container|component|action|reducer|helper|custom)$/i)
  .option('-i, import [importName]', '(Optional) Add imports on file generation.', collect, [])
  .option('-d, defaults [Y/n]', '(Optional) Import default dependencies (n, Y).', /^(Y|n)$/i, 'n')
  .option('-l, list [choice]', 'List defaults(plural): all/actions/containers/components/reducers/helpers', /^(actions|components|containers|reducers|helpers|all)$/i, 'undefined')
  .option('-e, erase [choice]', 'Erase defaults(plural): all/actions/containers/components/reducers/helpers', /^(actions|components|containers|reducers|helpers|all)$/i, 'undefined')
  .option('save_template [fileType]', 'Save file in current project as custom template.(singular)', /^(action|component|container|reducer|helper)$/i)
  .option('delete_template [fileType]', 'Delete saved custom template.(singular)', /^(action|component|container|reducer|helper)$/i)
  .option('list_templates [fileType]', 'List saved custom templates for file type.(singular)', /^(action|component|container|reducer|helper)$/i)
  .parse(process.argv);

// Directory for Mikey
var directory = __dirname;
// Imports
var inpm = program.import;
// Defaults
var defaults = program.defaults;
// Current Working Directory
var currentWDir = process.cwd();

// Automated Help
if (!process.argv.slice(2).length) {
  program.outputHelp();
}

// Project Generation
if (typeof program.new !== 'undefined') {
  if (program.new === 'react' || program.new === 'redux' || program.new === 'universal' || program.new === 'electron') {
    setTimeout(function() {
      var projectQuestion = '';
      if (program.new === 'universal') {
        projectQuestion = [
          {
            type: 'input',
            name: 'api',
            message: 'Universal App with API? (Y/n):'
          },
          {
            type: 'input',
            name: 'name',
            message: 'Enter Project Name:'
          }
        ];
      } else {
        projectQuestion = [
          {
            type: 'input',
            name: 'name',
            message: 'Enter Project Name:'
          }
        ];
      }
      inquirer.prompt(projectQuestion).then(function (answer) {
        var api = answer.api;
        if (api === 'Y' || api === 'y') {
          api = true;
        } else {
          api = false;
        }
        var projectType = program.new;
        var projectName = answer.name;
        if (projectName.length >= 1) {
          if (api === true || api === 'Y' || api === 'y') {
            console.log(colors.bold(`Generating New ${_.upperFirst(projectType)} Mikey Project with API: `) + colors.yellow(projectName.toString()) + colors.bold(' in ') + colors.yellow(currentWDir.toString()));
          } else {
            console.log(colors.bold(`Generating New ${_.upperFirst(projectType)} Mikey Project: `) + colors.yellow(projectName.toString()) + colors.bold(' in ') + colors.yellow(currentWDir.toString()));
          }
          generateProject(projectName, currentWDir, directory, projectType, api);
        } else {
          console.log(colors.red('Project name cannot be blank!'));
        }
      });
    }, 100);
  } else {
    console.log(colors.red('Project type did not match and/or cannot be blank!'));
  }
}

// File Generation
if (typeof program.g !== 'undefined') {
  if (program.g === 'container' || program.g === 'component' || program.g === 'action' || program.g === 'reducer' || program.g === 'helper' || program.g === 'custom') {
    mikeyJsonGenerator(currentWDir);
    var fileType = _.lowerFirst(program.g);
    var filePathToFileType = '';

    if (fileType === 'custom') {
      filePathToFileType = directory + '/custom_templates/' + fileType;
      listTemplates(fileType, filePathToFileType);
      setTimeout(function() {
        var questions = [
          {
            type: 'input',
            name: 'templateName',
            message: 'Enter Saved Template Name(no extension):'
          },
          {
            type: 'input',
            name: 'fileNameAnswer',
            message: 'Enter Desired File Name(no extension / default: Template Name):'
          }];
        inquirer.prompt(questions).then(function (answer) {
          var templateName = answer.templateName;
          var fileName = answer.fileNameAnswer;
          if (fileName.length <= 1 || templateName.length <= 1) {
            console.log(colors.red('File name or Template name cannot be blank!'));
          } else {
            var folderPath = generatePath(fileType + 's', currentWDir);
            console.log(colors.green('Generating ') + fileName + ' as ' + _.capitalize(fileType));
            generateCustomFile(folderPath, fileType, templateName, fileName, inpm, directory);
          }
        });
      }, 100);
    } else {
      filePathToFileType = directory + '/custom_templates/' + fileType;
      setTimeout(function() {
        var questions = [
          {
            type: 'input',
            name: 'fileNameAnswer',
            message: 'Enter Desired File Name(no extension):'
          }
        ];
        inquirer.prompt(questions).then(function (answer) {
          var fileName = '';
          if (fileType === 'component' || fileType === 'container') {
            fileName =  _.upperFirst(answer.fileNameAnswer);
          } else {
            fileName =  _.camelCase(answer.fileNameAnswer);
          }
          if (fileName.length <= 1) {
            console.log(colors.red('Filename cannot be blank!'));
          } else {
            var folderPath = generatePath(fileType + 's', currentWDir);
            console.log(colors.green('Generating ') + fileName + ' as ' + _.capitalize(fileType));
            generateFile(folderPath, fileType, fileName, inpm, directory, defaults, currentWDir);
          }
        });
      }, 100);
    }
  } else {
    console.log(colors.red('File type did not match and/or cannot be blank!'));
  }
}

// Erase Defaults
if (typeof program.erase !== 'undefined') {
  eraseDefaults(program.erase, directory);
}
// List Defaults
if (typeof program.list !== 'undefined') {
  listDefaults(program.list, directory);
}

// Save Custom Template
if (typeof program.save_template !== 'undefined') {
  // Prompt Questions
  var question = [
    {
      type: 'input',
      name: 'saveFile',
      message: 'Enter Project ' + _.capitalize(program.save_template) + ' File Name To Save(no extension):'
    }
  ];
  var fileType = _.lowerFirst(program.save_template);
  var filePath = generatePath(fileType + 's', currentWDir);
  listTemplates(fileType, filePath);
  setTimeout(function() {
    inquirer.prompt(question).then(function (answer) {
      var templateName = answer.saveFile;
      // Save File
      saveTemplate(filePath, fileType, templateName, directory);
    });
  }, 100);
}

// Delete Custom Template
if (typeof program.delete_template !== 'undefined') {
  var fileType = _.lowerFirst(program.delete_template);
  var filePathToFileType = directory + '/custom_templates/' + fileType;
  listTemplates(fileType, filePathToFileType);
  setTimeout(function() {
    // Prompt Questions
    var question = [
      {
        type: 'input',
        name: 'deleteFile',
        message: 'Enter ' + _.capitalize(program.delete_template) + ' Template Name To Delete(no extension):'
      }
    ];
    inquirer.prompt(question).then(function (answer) {
      var templateName = answer.deleteFile;
      // Delete File
      deleteTemplate(fileType, templateName, directory);
    })
  }, 100);
}

// List Files
if (typeof program.list_templates !== 'undefined') {
  var fileType = _.lowerFirst(program.list_templates);
  var filePathToFileType = directory + '/custom_templates/' + fileType;
  listTemplates(fileType, filePathToFileType);
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
