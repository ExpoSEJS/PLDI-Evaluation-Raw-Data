/root/Targets/antdcom
└─┬ antdcom@0.3.2 
  ├─┬ antd@1.11.6 
  │ ├── array-tree-filter@1.0.1 
  │ ├── classnames@2.2.5 
  │ ├─┬ css-animation@1.4.1 
  │ │ ├─┬ babel-runtime@6.26.0 
  │ │ │ ├── core-js@2.5.1 
  │ │ │ └── regenerator-runtime@0.11.0 
  │ │ └─┬ component-classes@1.2.6 
  │ │   └── component-indexof@0.0.3 
  │ ├── gregorian-calendar@4.1.6 
  │ ├─┬ gregorian-calendar-format@4.1.3 
  │ │ └── warning@2.1.0 
  │ ├─┬ object.omit@2.0.1 
  │ │ ├─┬ for-own@0.1.5 
  │ │ │ └── for-in@1.0.2 
  │ │ └── is-extendable@0.1.1 
  │ ├── rc-animate@2.3.6 
  │ ├─┬ rc-calendar@5.6.2 
  │ │ └─┬ rc-trigger@1.11.4 
  │ │   ├─┬ rc-align@2.3.4 
  │ │   │ ├── dom-align@1.6.5 
  │ │   │ └── rc-util@4.1.0 
  │ │   └── rc-util@4.1.0 
  │ ├── rc-cascader@0.10.4 
  │ ├─┬ rc-checkbox@1.4.4 
  │ │ └── rc-util@4.1.0 
  │ ├── rc-collapse@1.6.12 
  │ ├── rc-dialog@6.1.1 
  │ ├── rc-dropdown@1.4.12 
  │ ├─┬ rc-form@0.17.2 
  │ │ ├── async-validator@1.8.1 
  │ │ └── dom-scroll-into-view@1.2.1 
  │ ├── rc-input-number@2.6.3 
  │ ├── rc-menu@4.13.0 
  │ ├── rc-notification@1.3.6 
  │ ├── rc-pagination@1.5.5 
  │ ├── rc-progress@1.0.4 
  │ ├─┬ rc-queue-anim@0.12.6 
  │ │ └─┬ velocity-animate@1.2.3 
  │ │   └── jquery@3.2.1 
  │ ├── rc-radio@2.0.1 
  │ ├── rc-rate@1.1.2 
  │ ├─┬ rc-select@6.4.8 
  │ │ └── warning@2.1.0 
  │ ├── rc-slider@4.0.1 
  │ ├── rc-steps@2.1.5 
  │ ├── rc-switch@1.4.4 
  │ ├─┬ rc-table@4.6.0 
  │ │ └── object-path@0.11.4 
  │ ├── rc-tabs@5.9.3 
  │ ├── rc-time-picker@1.1.6 
  │ ├── rc-tooltip@3.4.9 
  │ ├── rc-tree@1.3.10 
  │ ├─┬ rc-tree-select@1.8.8 
  │ │ └─┬ rc-tree@1.4.8 
  │ │   └── rc-util@4.1.0 
  │ ├─┬ rc-upload@2.0.4 
  │ │ └── warning@2.1.0 
  │ ├─┬ rc-util@3.3.0 
  │ │ └── add-dom-event-listener@1.0.2 
  │ ├── react-addons-pure-render-mixin@15.6.2 
  │ ├─┬ react-slick@0.13.6 
  │ │ ├─┬ json2mq@0.2.0 
  │ │ │ └── string-convert@0.2.1 
  │ │ ├─┬ react-responsive-mixin@0.4.0 
  │ │ │ ├── can-use-dom@0.1.0 
  │ │ │ └── enquire.js@2.1.6 
  │ │ └── slick-carousel@1.7.1 
  │ ├─┬ shallowequal@0.2.2 
  │ │ └─┬ lodash.keys@3.1.2 
  │ │   ├── lodash._getnative@3.9.1 
  │ │   ├── lodash.isarguments@3.1.0 
  │ │   └── lodash.isarray@3.0.4 
  │ └── warning@3.0.0 
  ├── normalize.css@4.2.0 
  ├── object-assign@4.1.1 
  ├─┬ react@15.6.2 
  │ ├── create-react-class@15.6.2 
  │ ├─┬ fbjs@0.8.16 
  │ │ ├── core-js@1.2.7 
  │ │ ├─┬ isomorphic-fetch@2.2.1 
  │ │ │ ├─┬ node-fetch@1.7.3 
  │ │ │ │ ├─┬ encoding@0.1.12 
  │ │ │ │ │ └── iconv-lite@0.4.19 
  │ │ │ │ └── is-stream@1.1.0 
  │ │ │ └── whatwg-fetch@2.0.3 
  │ │ ├─┬ promise@7.3.1 
  │ │ │ └── asap@2.0.6 
  │ │ ├── setimmediate@1.0.5 
  │ │ └── ua-parser-js@0.7.14 
  │ ├─┬ loose-envify@1.3.1 
  │ │ └── js-tokens@3.0.2 
  │ └── prop-types@15.6.0 
  ├── react-dom@15.6.2 
  └─┬ react-router@2.8.1 
    ├─┬ history@2.1.2 
    │ ├── deep-equal@1.0.1 
    │ ├─┬ query-string@3.0.3 
    │ │ └── strict-uri-encode@1.1.0 
    │ └── warning@2.1.0 
    ├── hoist-non-react-statics@1.2.0 
    └── invariant@2.2.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/antdcom/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0463 took 2.4224s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (161:5) on program /**
 * @description 组件的汇聚类， 输入，输出
 * @params
 */
import React from 'react';
import DCom from './dcom.jsx';
import 'normalize.css';
import './index.less';
import Ajax from './ajax.jsx';
import url from './url.jsx';
export default class App extends React.Component {
	constructor (props) {
		super(props);	
		this.state = {
			data: null,
			count: null
		};
	}

	fmt (number) {
		number += ''; 
		var length = number.length;
		var end = number.indexOf('.');
		var suffix = '';
		if (end != -1) {
		   suffix = number.substring(end); 
		}
		end = end == -1 ? length : end; 
		var n = number.substring(0, end);
		length = n.length;
		var rs = [];
		for (var i = length - 1, j = 1; i >= 0; i--) {
			rs.push(n[i]);
			if (j % 3 == 0 & j < length) {
				rs.push(','); 
			} 
			j++;
		}
		return rs.reverse().join('') + suffix;
	}
	//根据圈子Id获取对应的选中标签数据
	queryValue(crowdId, callback) {
		Ajax({
			url: url('crowdTagInfo.json'),
			data:  {
				crowdId: crowdId 
			},
			success: function (data) {
				callback && callback(data);
			}
		});
	}
	init () {
		let option = this.props.option;
		let data = {
			functionId: option.functionId
		};
		option.categoryIds.map(function (item, index) {
			data['categoryIds[' + index + ']'] = item;	
		});
		Ajax({
			url: url('getTagList.json'),	
			//初始化参数
			data: data,
			/*
			data: {
				functionId: option.functionId,
				categoryIds: option.categoryIds.join()
			},
			*/
			success: function (res) {
				this.setState({
					hasRequest: true,
					data: res			
				});	
			}.bind(this),
			error: function () {
				this.setState({
					hasRequest: true,
					data: null			
				});	
			}.bind(this)
		});
	}
	//空方法 做筛选人数
	filter () {
		Ajax({
			url: url('calculateCrowdCount.json'),
			type: 'POST',
			data:  {
				functionId: this.props.option.functionId,	
				ruleJsonText: this.getRuleJsonText(),
			},
			success: function (data) {
				if (typeof data == 'number' || typeof data == 'string') {
					this.setState({
						count: data
					});
				}
			}.bind(this)
		});
	}
	//获取值
	getRawValue () {
		let children = this.children || [];
		let values = [];
		children.map(function (item) {
			if (item && item.getRawValue) {
				let v = item.getRawValue();
				if (v) {
					values.push(v);	
				}
			}
		});
		return values;
	}
	getRuleJsonText () {
		let children = this.children || [];
		let values = [];
		children.map(function (item) {
			if (item && item.getValue) {
				let v = item.getValue();
				if (v) {
					values.push(v);	
				}
			}
		});
		let params = {
			"childrenRules": [],
			"relForChildren": "AND",
			"relForSelf": "AND",
			"relForSelfAndChildren": "AND",
			"selfItems": []
		};
		params.childrenRules = values;
		return JSON.stringify(params);
	}
	//保存
	save (callback) {
		let ruleJsonText = this.getRuleJsonText();
		let value = this.getRawValue();
		Ajax({
			url: url('saveCrowdDefinition.json'),
			type: 'POST',
			data:  {
				functionId: this.props.option.functionId,	
				ruleJsonText: ruleJsonText,
				value: JSON.stringify(value)
			},
			success: function (data) {
				callback && callback(data);
			}
		});
	}
	renderCom (data) {
		let child = null;			
		child = data.map(function (item, index) {
			let child = null;
			if (item.children) {
				child = (
					<div className="category-item">
						<h3>{item.name}</h3>
						{this.renderCom(item.children)}
					</div>			
				);
			} else {
				if (!item.configInfo) {
					item.configInfo = {};	
				}
				child = (
					<DCom ref={(c) => this.children.push(c)} 
						filter={this.filter.bind(this)} 
						params={this.props.option}
						option={item}>
					</DCom>
				);			
			}	
			return (
				<li key={item.id + '-' + item.name}>
					{child}
				</li>			
			);
		}.bind(this));
		return (
			<ul className="category">
				{child}
			</ul>			
		);
	}
	render () {
		let data = this.state.data;
		this.children = [];
		let child = null;
		if (data) {
			child = this.renderCom(data);
		} else {
			if (!this.state.hasRequest) {
				this.init();
				child = null;
			} else {
				child = <p className="center">没有数据</p>;
			}
		}
		return (
			<div className="app">
				{child}
				{(this.state.count == null) ? null : (
					<div className="number-desc">
						<span>预计人群: </span>
						<span className="number">{this.fmt(this.state.count)}</span>
					</div>
				)}
			</div>			
		);
	}
}
 at SyntaxError: Unexpected token (161:5)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseParenAndDistinguishExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1861:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
