/root/Targets/plonetheme-webpack-plugin
└─┬ plonetheme-webpack-plugin@1.0.3 
  ├─┬ copy-webpack-plugin@4.1.0 
  │ ├── bluebird@2.11.0 
  │ ├─┬ fs-extra@0.26.7 
  │ │ ├── graceful-fs@4.1.11 
  │ │ ├── jsonfile@2.4.0 
  │ │ ├── klaw@1.3.1 
  │ │ └── rimraf@2.6.2 
  │ ├── glob@6.0.4 
  │ ├─┬ is-glob@3.1.0 
  │ │ └── is-extglob@2.1.1 
  │ ├─┬ loader-utils@0.2.17 
  │ │ ├── big.js@3.2.0 
  │ │ ├── emojis-list@2.1.0 
  │ │ └── object-assign@4.1.1 
  │ ├── lodash@4.17.4 
  │ ├─┬ minimatch@3.0.4 
  │ │ └─┬ brace-expansion@1.1.8 
  │ │   ├── balanced-match@1.0.0 
  │ │   └── concat-map@0.0.1 
  │ └── node-dir@0.1.17 
  ├── extend@3.0.1 
  ├─┬ extract-text-webpack-plugin@2.1.2 
  │ ├── async@2.5.0 
  │ ├── loader-utils@1.1.0 
  │ ├─┬ schema-utils@0.3.0 
  │ │ └─┬ ajv@5.2.3 
  │ │   ├── fast-deep-equal@1.0.0 
  │ │   └── json-schema-traverse@0.3.1 
  │ └─┬ webpack-sources@1.0.1 
  │   └── source-list-map@2.0.0 
  ├─┬ glob@7.1.2 
  │ ├── fs.realpath@1.0.0 
  │ ├─┬ inflight@1.0.6 
  │ │ └── wrappy@1.0.2 
  │ ├── inherits@2.0.3 
  │ ├── once@1.4.0 
  │ └── path-is-absolute@1.0.1 
  ├─┬ html-webpack-plugin@2.30.1 
  │ ├── bluebird@3.5.0 
  │ ├─┬ html-minifier@3.5.5 
  │ │ ├─┬ camel-case@3.0.0 
  │ │ │ ├─┬ no-case@2.3.2 
  │ │ │ │ └── lower-case@1.1.4 
  │ │ │ └── upper-case@1.1.3 
  │ │ ├── clean-css@4.1.9 
  │ │ ├── commander@2.11.0 
  │ │ ├── he@1.1.1 
  │ │ ├─┬ ncname@1.0.0 
  │ │ │ └── xml-char-classes@1.0.0 
  │ │ ├── param-case@2.1.1 
  │ │ ├── relateurl@0.2.7 
  │ │ └── uglify-js@3.1.3 
  │ ├─┬ pretty-error@2.1.1 
  │ │ ├─┬ renderkid@2.0.1 
  │ │ │ ├─┬ css-select@1.2.0 
  │ │ │ │ ├── boolbase@1.0.0 
  │ │ │ │ ├── css-what@2.1.0 
  │ │ │ │ ├─┬ domutils@1.5.1 
  │ │ │ │ │ └─┬ dom-serializer@0.1.0 
  │ │ │ │ │   ├── domelementtype@1.1.3 
  │ │ │ │ │   └── entities@1.1.1 
  │ │ │ │ └── nth-check@1.0.1 
  │ │ │ ├─┬ dom-converter@0.1.4 
  │ │ │ │ └── utila@0.3.3 
  │ │ │ ├─┬ htmlparser2@3.3.0 
  │ │ │ │ ├── domelementtype@1.3.0 
  │ │ │ │ ├── domhandler@2.1.0 
  │ │ │ │ ├── domutils@1.1.6 
  │ │ │ │ └─┬ readable-stream@1.0.34 
  │ │ │ │   └── isarray@0.0.1 
  │ │ │ └── utila@0.3.3 
  │ │ └── utila@0.4.0 
  │ └── toposort@1.0.6 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  ├─┬ sync-request@4.1.0 
  │ ├── command-exists@1.2.2 
  │ ├─┬ concat-stream@1.6.0 
  │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ ├── core-util-is@1.0.2 
  │ │ │ ├── isarray@1.0.0 
  │ │ │ ├── process-nextick-args@1.0.7 
  │ │ │ ├── safe-buffer@5.1.1 
  │ │ │ ├── string_decoder@1.0.3 
  │ │ │ └── util-deprecate@1.0.2 
  │ │ └── typedarray@0.0.6 
  │ ├── get-port@3.2.0 
  │ ├── http-response-object@1.1.0 
  │ └─┬ then-request@2.2.0 
  │   ├── caseless@0.11.0 
  │   ├── http-basic@2.5.1 
  │   ├─┬ promise@7.3.1 
  │   │ └── asap@2.0.6 
  │   └── qs@6.5.1 
  ├── virtual-module-webpack-plugin@0.2.2 
  ├─┬ webpack@2.7.0 
  │ ├── acorn@5.1.2 
  │ ├─┬ acorn-dynamic-import@2.0.2 
  │ │ └── acorn@4.0.13 
  │ ├─┬ ajv@4.11.8 
  │ │ ├── co@4.6.0 
  │ │ └─┬ json-stable-stringify@1.0.1 
  │ │   └── jsonify@0.0.0 
  │ ├── ajv-keywords@1.5.1 
  │ ├── enhanced-resolve@3.4.1 
  │ ├── interpret@1.0.4 
  │ ├── json-loader@0.5.7 
  │ ├── json5@0.5.1 
  │ ├── loader-runner@2.3.0 
  │ ├─┬ memory-fs@0.4.1 
  │ │ ├─┬ errno@0.1.4 
  │ │ │ └── prr@0.0.0 
  │ │ └─┬ readable-stream@2.3.3 
  │ │   ├── isarray@1.0.0 
  │ │   └── string_decoder@1.0.3 
  │ ├─┬ node-libs-browser@2.0.0 
  │ │ ├── assert@1.4.1 
  │ │ ├─┬ browserify-zlib@0.1.4 
  │ │ │ └── pako@0.2.9 
  │ │ ├─┬ buffer@4.9.1 
  │ │ │ ├── base64-js@1.2.1 
  │ │ │ ├── ieee754@1.1.8 
  │ │ │ └── isarray@1.0.0 
  │ │ ├─┬ console-browserify@1.1.0 
  │ │ │ └── date-now@0.1.4 
  │ │ ├── constants-browserify@1.0.0 
  │ │ ├─┬ crypto-browserify@3.11.1 
  │ │ │ ├─┬ browserify-cipher@1.0.0 
  │ │ │ │ ├─┬ browserify-aes@1.0.8 
  │ │ │ │ │ └── buffer-xor@1.0.3 
  │ │ │ │ ├─┬ browserify-des@1.0.0 
  │ │ │ │ │ └── des.js@1.0.0 
  │ │ │ │ └─┬ evp_bytestokey@1.0.3 
  │ │ │ │   └─┬ md5.js@1.3.4 
  │ │ │ │     └── hash-base@3.0.4 
  │ │ │ ├─┬ browserify-sign@4.0.4 
  │ │ │ │ ├── bn.js@4.11.8 
  │ │ │ │ ├── browserify-rsa@4.0.1 
  │ │ │ │ ├─┬ elliptic@6.4.0 
  │ │ │ │ │ ├── brorand@1.1.0 
  │ │ │ │ │ ├── hash.js@1.1.3 
  │ │ │ │ │ ├── hmac-drbg@1.0.1 
  │ │ │ │ │ ├── minimalistic-assert@1.0.0 
  │ │ │ │ │ └── minimalistic-crypto-utils@1.0.1 
  │ │ │ │ └─┬ parse-asn1@5.1.0 
  │ │ │ │   └── asn1.js@4.9.1 
  │ │ │ ├── create-ecdh@4.0.0 
  │ │ │ ├─┬ create-hash@1.1.3 
  │ │ │ │ ├── cipher-base@1.0.4 
  │ │ │ │ ├─┬ ripemd160@2.0.1 
  │ │ │ │ │ └── hash-base@2.0.2 
  │ │ │ │ └── sha.js@2.4.9 
  │ │ │ ├── create-hmac@1.1.6 
  │ │ │ ├─┬ diffie-hellman@5.0.2 
  │ │ │ │ └── miller-rabin@4.0.1 
  │ │ │ ├── pbkdf2@3.0.14 
  │ │ │ ├── public-encrypt@4.0.0 
  │ │ │ └── randombytes@2.0.5 
  │ │ ├── domain-browser@1.1.7 
  │ │ ├── events@1.1.1 
  │ │ ├── https-browserify@0.0.1 
  │ │ ├── os-browserify@0.2.1 
  │ │ ├── path-browserify@0.0.0 
  │ │ ├── process@0.11.10 
  │ │ ├── punycode@1.4.1 
  │ │ ├── querystring-es3@0.2.1 
  │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ ├── isarray@1.0.0 
  │ │ │ └── string_decoder@1.0.3 
  │ │ ├─┬ stream-browserify@2.0.1 
  │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │   ├── isarray@1.0.0 
  │ │ │   └── string_decoder@1.0.3 
  │ │ ├─┬ stream-http@2.7.2 
  │ │ │ ├── builtin-status-codes@3.0.0 
  │ │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ │ ├── isarray@1.0.0 
  │ │ │ │ └── string_decoder@1.0.3 
  │ │ │ ├── to-arraybuffer@1.0.1 
  │ │ │ └── xtend@4.0.1 
  │ │ ├── string_decoder@0.10.31 
  │ │ ├─┬ timers-browserify@2.0.4 
  │ │ │ └── setimmediate@1.0.5 
  │ │ ├── tty-browserify@0.0.0 
  │ │ ├─┬ url@0.11.0 
  │ │ │ ├── punycode@1.3.2 
  │ │ │ └── querystring@0.2.0 
  │ │ ├─┬ util@0.10.3 
  │ │ │ └── inherits@2.0.1 
  │ │ └─┬ vm-browserify@0.0.4 
  │ │   └── indexof@0.0.1 
  │ ├── source-map@0.5.7 
  │ ├─┬ supports-color@3.2.3 
  │ │ └── has-flag@1.0.0 
  │ ├── tapable@0.2.8 
  │ ├─┬ uglify-js@2.8.29 
  │ │ ├── uglify-to-browserify@1.0.2 
  │ │ └─┬ yargs@3.10.0 
  │ │   ├── camelcase@1.2.1 
  │ │   ├─┬ cliui@2.1.0 
  │ │   │ ├─┬ center-align@0.1.3 
  │ │   │ │ ├─┬ align-text@0.1.4 
  │ │   │ │ │ ├── longest@1.0.1 
  │ │   │ │ │ └── repeat-string@1.6.1 
  │ │   │ │ └── lazy-cache@1.0.4 
  │ │   │ ├── right-align@0.1.3 
  │ │   │ └── wordwrap@0.0.2 
  │ │   └── window-size@0.1.0 
  │ ├─┬ watchpack@1.4.0 
  │ │ └─┬ chokidar@1.7.0 
  │ │   ├─┬ anymatch@1.3.2 
  │ │   │ ├─┬ micromatch@2.3.11 
  │ │   │ │ ├─┬ arr-diff@2.0.0 
  │ │   │ │ │ └── arr-flatten@1.1.0 
  │ │   │ │ ├── array-unique@0.2.1 
  │ │   │ │ ├─┬ braces@1.8.5 
  │ │   │ │ │ ├─┬ expand-range@1.8.2 
  │ │   │ │ │ │ └─┬ fill-range@2.2.3 
  │ │   │ │ │ │   ├── is-number@2.1.0 
  │ │   │ │ │ │   ├─┬ isobject@2.1.0 
  │ │   │ │ │ │   │ └── isarray@1.0.0 
  │ │   │ │ │ │   └─┬ randomatic@1.1.7 
  │ │   │ │ │ │     ├─┬ is-number@3.0.0 
  │ │   │ │ │ │     │ └── kind-of@3.2.2 
  │ │   │ │ │ │     └── kind-of@4.0.0 
  │ │   │ │ │ ├── preserve@0.2.0 
  │ │   │ │ │ └── repeat-element@1.1.2 
  │ │   │ │ ├─┬ expand-brackets@0.1.5 
  │ │   │ │ │ └── is-posix-bracket@0.1.1 
  │ │   │ │ ├─┬ extglob@0.3.2 
  │ │   │ │ │ └── is-extglob@1.0.0 
  │ │   │ │ ├── filename-regex@2.0.1 
  │ │   │ │ ├── is-extglob@1.0.0 
  │ │   │ │ ├── is-glob@2.0.1 
  │ │   │ │ ├─┬ kind-of@3.2.2 
  │ │   │ │ │ └── is-buffer@1.1.5 
  │ │   │ │ ├─┬ object.omit@2.0.1 
  │ │   │ │ │ ├─┬ for-own@0.1.5 
  │ │   │ │ │ │ └── for-in@1.0.2 
  │ │   │ │ │ └── is-extendable@0.1.1 
  │ │   │ │ ├─┬ parse-glob@3.0.4 
  │ │   │ │ │ ├─┬ glob-base@0.3.0 
  │ │   │ │ │ │ └─┬ is-glob@2.0.1 
  │ │   │ │ │ │   └── is-extglob@1.0.0 
  │ │   │ │ │ ├── is-dotfile@1.0.3 
  │ │   │ │ │ ├── is-extglob@1.0.0 
  │ │   │ │ │ └── is-glob@2.0.1 
  │ │   │ │ └─┬ regex-cache@0.4.4 
  │ │   │ │   └─┬ is-equal-shallow@0.1.3 
  │ │   │ │     └── is-primitive@2.0.0 
  │ │   │ └─┬ normalize-path@2.1.1 
  │ │   │   └── remove-trailing-separator@1.1.0 
  │ │   ├── async-each@1.0.1 
  │ │   ├─┬ glob-parent@2.0.0 
  │ │   │ └─┬ is-glob@2.0.1 
  │ │   │   └── is-extglob@1.0.0 
  │ │   ├─┬ is-binary-path@1.0.1 
  │ │   │ └── binary-extensions@1.10.0 
  │ │   ├─┬ is-glob@2.0.1 
  │ │   │ └── is-extglob@1.0.0 
  │ │   └─┬ readdirp@2.1.0 
  │ │     ├─┬ readable-stream@2.3.3 
  │ │     │ ├── isarray@1.0.0 
  │ │     │ └── string_decoder@1.0.3 
  │ │     └── set-immediate-shim@1.0.1 
  │ └─┬ yargs@6.6.0 
  │   ├── camelcase@3.0.0 
  │   ├─┬ cliui@3.2.0 
  │   │ └── wrap-ansi@2.1.0 
  │   ├── decamelize@1.2.0 
  │   ├── get-caller-file@1.0.2 
  │   ├─┬ os-locale@1.4.0 
  │   │ └─┬ lcid@1.0.0 
  │   │   └── invert-kv@1.0.0 
  │   ├─┬ read-pkg-up@1.0.1 
  │   │ ├─┬ find-up@1.1.2 
  │   │ │ ├── path-exists@2.1.0 
  │   │ │ └─┬ pinkie-promise@2.0.1 
  │   │ │   └── pinkie@2.0.4 
  │   │ └─┬ read-pkg@1.1.0 
  │   │   ├─┬ load-json-file@1.1.0 
  │   │   │ ├─┬ parse-json@2.2.0 
  │   │   │ │ └─┬ error-ex@1.3.1 
  │   │   │ │   └── is-arrayish@0.2.1 
  │   │   │ ├── pify@2.3.0 
  │   │   │ └─┬ strip-bom@2.0.0 
  │   │   │   └── is-utf8@0.2.1 
  │   │   ├─┬ normalize-package-data@2.4.0 
  │   │   │ ├── hosted-git-info@2.5.0 
  │   │   │ ├─┬ is-builtin-module@1.0.0 
  │   │   │ │ └── builtin-modules@1.1.1 
  │   │   │ ├── semver@5.4.1 
  │   │   │ └─┬ validate-npm-package-license@3.0.1 
  │   │   │   ├─┬ spdx-correct@1.0.2 
  │   │   │   │ └── spdx-license-ids@1.2.2 
  │   │   │   └── spdx-expression-parse@1.0.4 
  │   │   └── path-type@1.1.0 
  │   ├── require-directory@2.1.1 
  │   ├── require-main-filename@1.0.1 
  │   ├── set-blocking@2.0.0 
  │   ├─┬ string-width@1.0.2 
  │   │ ├── code-point-at@1.1.0 
  │   │ └─┬ is-fullwidth-code-point@1.0.0 
  │   │   └── number-is-nan@1.0.1 
  │   ├── which-module@1.0.0 
  │   ├── y18n@3.2.1 
  │   └─┬ yargs-parser@4.2.1 
  │     └── camelcase@3.0.0 
  ├── webpack-merge@4.1.0 
  └─┬ write-file-webpack-plugin@4.2.0 
    ├─┬ chalk@1.1.3 
    │ ├── ansi-styles@2.2.1 
    │ ├── escape-string-regexp@1.0.5 
    │ ├─┬ has-ansi@2.0.0 
    │ │ └── ansi-regex@2.1.1 
    │ ├── strip-ansi@3.0.1 
    │ └── supports-color@2.0.0 
    ├─┬ debug@2.6.9 
    │ └── ms@2.0.0 
    ├── filesize@3.5.10 
    └── moment@2.18.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/plonetheme-webpack-plugin/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0343 took 2.8938s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:84) on program const assert = require('assert');
const extend = require('extend');
const fetch = require('sync-request');
const fs = require('fs');
const glob = require('glob');
const merge = require('webpack-merge');
const mkdirp = require('mkdirp');
const path = require('path');
const process = require('process');
const url = require('url');
const vm = require('vm');
const webpack = require('webpack');

const CopyWebpackPlugin = require('copy-webpack-plugin');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const WriteFileWebpackPlugin = require('write-file-webpack-plugin');


/**
 * Webpack context injection plugin to manage dynamic requires
 * http://stackoverflow.com/questions/30065018/dynamically-require-an-aliased-module-using-webpack
 */
class AddToContextPlugin {

  /**
   * @constructor
   * @param condition RegExp condition
   * @param extras List of available modules modules
   */
  constructor(condition, extras) {
    this.condition = condition;
    this.extras = extras || [];
  }

  //noinspection JSUnusedGlobalSymbols
  /**
   * @param compiler Webpack compiler instance
   */
  apply(compiler) {
    const condition = this.condition;
    const extras = this.extras;
    let newContext = false;
    compiler.plugin('context-module-factory', (cmf) => {
      cmf.plugin('after-resolve', (items, callback) => {
        newContext = true;
        return callback(null, items);
      });
      // this method is called for every path in the ctx
      // we just add our extras the first call
      cmf.plugin('alternatives', (items, callback) => {
        if (newContext && items[0].context.match(condition)) {
          newContext = false;
          const alternatives = extras.map((extra) => {
            return {
              context: items[0].context,
              request: extra
            };
          });
          items.push.apply(items, alternatives);
        }
        return callback(null, items);
      });
    });
  }
}


/**
 * const PLONE = new PlonePlugin({
 *     portalUrl: 'http://localhost:8080/' + SITENAME,
 *     publicPath: PUBLICPATH,
 *     sourcePath: PATHS.src,
 *     debug: true
 * });
 */
class PlonePlugin {
  constructor(options) {
    if (options.portalUrl) {
      // Remove trailing slash from portalUrl
      options.portalUrl = options.portalUrl.replace(/[/]+$/, '');
    }

    let config = this.config = extend({}, {
      debug: false,
      portalUrl: 'http://localhost:8080/Plone',
      sourcePath: null
    }, options);

    extend(config, {
      cachePath: path.join(process.cwd(), '.plone'),
      portalPath: url.parse(config.portalUrl).pathname,
      publicPath: '/Plone/++theme++webpack/',
      resolveExtensions: [
        '',
        '.js'
      ],
      ignore: config.sourcePath
        ? [ path.join(path.basename(config.sourcePath), '?(*.js|*.jsx|*.css|*.less|*.scss)') ]
        : [],
      templates: config.sourcePath
        ? glob.sync(path.join(config.sourcePath, '**', '?(*.html|manifest.cfg)'))
        : []
    }, options, {
      // ensure empty before merge
      momentLocales: [],
      resolveMatches: []
    });

    config = this.config = merge(config, {
      portalBase: config.portalUrl.substr(
        0, config.portalUrl.length - config.portalPath.length),
      resolveAlias: this.parseRequireJsPaths(),
      resolveMatches: [
        /([+]{2}\w+[+]{2}[^+]*)$/,
        /(collective\.js\.jqueryui\.custom\.min.*)/
      ],
      variables: this.parseLessVariables()
    }, options);

    // Dynamically add templates into ignore globs
    if (config.sourcePath) {
      extend(config, {
        'ignore': config.ignore.concat(
            config.templates.map((filename) => {
              return filename.substring(
                config.sourcePath.length -
                path.basename(config.sourcePath).length);
            })
        )
      });
    }

    // Preload Moment JS locales
    const self = this;
    config.momentLocales.map((locale) => {
      self.get('++plone++static/components/moment/locale/' + locale + '.js');
    });

    if (config.debug) { console.log(config); }

    // Pre-configure loaders
    this.rules = {

      url: {
        test: /\.(png|gif|jpg|otf|eot|svg|ttf|woff|woff2)(\?.*)?$/,
        use: [
          {
            loader: 'url-loader',
            options: { limit: 8192 }
          }
        ]
      },

      extract: {
        css: {
          test: /\.css$/i,
          use: ExtractTextPlugin.extract({
            fallback: 'style-loader',
            use: [
              'css-loader'
            ]
          })
        },
        less: {
          test: /\.less$/i,
          use: ExtractTextPlugin.extract({
            fallback: 'style-loader',
            use: [
              {
                loader: 'css-loader'
              },
              {
                loader: 'less-loader',
                options: {
                  globalVars: config.variables
                }
              }
            ]
          })
        },
        scss: {
          test: /\.scss$/i,
          use: ExtractTextPlugin.extract({
            fallback: 'style-loader',
            use: [
              'css-loader',
              'fast-sass-loader'
            ]
          })
        },
      },

      css: {
        test: /\.css$/i,
        use: [
          'style-loader',
          'css-loader'
        ]
      },

      less: {
        test: /\.less$/i,
        use: [
          {
            loader: 'style-loader'
          },
          {
            loader: 'css-loader',
            options: {
              sourceMap: true
            }
          },
          {
            loader: 'less-loader',
            options: {
              globalVars: config.variables
            }
          },
        ]
      },

      scss: {
        test: /\.scss$/i,
        use: [
          'style-loader',
          'css-loader?sourceMap',
          'fast-sass-loader'
        ]
      },

      shim: {

        ace: {
          test: /mockup[\\/]texteditor[\\/]pattern(.js)?$/,
          use: [
            'imports-loader?ace=ace,_a=ace/mode/javascript,_b=ace/mode/text,_c=ace/mode/css,_d=ace/mode/html,_e=ace/mode/xml,_f=ace/mode/less,_g=ace/mode/python,_h=ace/mode/xml,_i=ace/mode/ini'
          ]
        },

        backbone: {
          test: /backbone\.paginator(.js)?$/,
          use: [
            'imports-loader?jQuery=jquery,_=underscore,Backbone=backbone'
          ]
        },

        bootstraptransition : {
          test: /bootstrap[\\/]js[\\/]transition(.js)?$/,
          use: [
            'imports-loader?jQuery=jquery',
            'exports-loader?window.jQuery.support.transition'
          ]
        },

        bootstrapcollapse: {
          test: /bootstrap[\\/]js[\\/]collapse(.js)?$/,
          use: [
            'imports-loader?jQuery=jquery'
          ]
        },

        bootstraptooltip: {
          test: /bootstrap[\\/]js[\\/]tooltip(.js)?$/,
          use: [
            'imports-loader?jQuery=jquery'
          ]
        },

        bootstrapdropdown : {
          test: /bootstrap[\\/]js[\\/]dropdown(.js)?$/,
          use: [
            'imports-loader?jQuery=jquery'
          ]
        },

        bootstrapalert : {
          test: /bootstrap[\\/]js[\\/]alert(.js)?$/,
          use: [
            'imports-loader?jQuery=jquery'
          ]
        },

        jqtree: {
          test: /jqtree[\\/](tree\.jquery|node|lib[\\/].*)(.js)?$/,
          use: [
            'imports-loader?jQuery=jquery,$=jquery,this=>{jQuery:$}'
          ]
        },

        jqtreecontextmenu: {
          test: /jqTreeContextMenu(.js)?$/,
          use: [
            'imports-loader?jQuery=jquery,$=jquery,this=>{jQuery:$},jqtree'
          ]
        },

        recurrenceinput: {
          test: /jquery\.recurrenceinput(.js)?$/,
          use: [
            'imports-loader?jQuery=jquery,tmpl=jquery.tmpl,_overlay=resource-plone-app-jquerytools-js,_dateinput=resource-plone-app-jquerytools-dateinput-js'
          ]
        },

        tinymce: {
          test: /tinymce(.js)?$/,
          use: [
            'imports-loader?document=>window.document,this=>window',
            'exports-loader?window.tinymce'
          ]
        },

        tinymceplugins: {
          test: /tinymce[\\/](themes|plugins)[\\/]/,
          use: [
            'imports-loader?tinymce,this=>{tinymce:tinymce}'
          ]
        },

        jqueryeventdrop: {
          test: /jquery\.event\.drop(.js)?$/,
          use: [
            'imports-loader?jQuery=jquery',
            'exports-loader?jQuery.drop'
          ]
        },

        jqueryeventdrag: {
          test: /jquery\.event\.drag(.js)?$/,
          use: [
            'imports-loader?jQuery=jquery',
            'exports-loader?jQuery.drag'
          ]
        },

        jquerytmpl: {
          test: /jquery\.tmpl(.js)?$/,
          use: [
            'imports-loader?jQuery=jquery,$=jquery',
            'exports-loader?jQuery.tmpl'
          ]
        },

        jquerycookie: {
          test: /jquery\.cookie(.js)?$/,
          use: [
            'imports-loader?jQuery=jquery,$=jquery',
            'exports-loader?jQuery.cookie'
          ]
        },

        mockuputils: {
          test: /mockupjs[\\/]utils/,
          use: [
            'imports-loader?jQuery=jquery,$=jquery'
          ]
        },

        structure: {
          test: /structure[\\/]js[\\/]/,
          use: [
            'imports-loader?$=jquery'
          ]
        },

        // Hack to work around webpack confusing fallback jquery define
        plone: {
          test: /\+\+resource\+\+plone(.js)?$/,
          use: [
            'imports-loader?__WEBPACK_LOCAL_MODULE_0__=jquery'
          ]
        },

        jquerytools: {
          test: /jquery\.tools\.overlay(.js)?$/,
          use: [
            'imports-loader?jQuery=jquery,$=jquery',
            'exports-loader?$.tabs'
          ]
        },

        select2: {
          test: /select2[\\/]select2(.min)?(.js)?$/,
          use: [
            'imports-loader?jQuery=jquery'
          ]
        },

        ploneformgen: {
          test: /pfgquickedit[\\/]quickedit(.js)?$/,
          use: [
            'imports-loader?requirejs=>define,_tabs=resource-plone-app-jquerytools-js'
          ]
        },

        patternslib: {
          test: /patternslib[\\/]src[\\/]core[\\/]utils(.js)?$/,
          use: [
            'imports-loader?_=underscore'
          ]
        }
      }
    };

    // Pre-configure plugins
    this.plugins = {

      plone: this,

      hrm: new webpack.HotModuleReplacementPlugin(),

      extract: new ExtractTextPlugin({
        filename: '[name].[chunkhash].css',
        allChunks: true
      }),

      uglify: new webpack.optimize.UglifyJsPlugin(),

      defineproduction: new webpack.DefinePlugin({
        'process.env.NODE_ENV': JSON.stringify('production')
      }),

      commonschunk: new webpack.optimize.CommonsChunkPlugin(
        'commons.' + (new Date()).getTime() + '.js'
      ),

      // Plone defaults to moment built with locales
      moment: config.momentLocales.length
         ? new webpack.ContextReplacementPlugin(
             /moment[\\/]locale$/,
             new RegExp('^\\.\\/(' + config.momentLocales.join('|') + ')$'))
         : new webpack.IgnorePlugin(/^\.[\\/]locale$/, /moment$/),

      jqtree: new webpack.NormalModuleReplacementPlugin(
        /^\.[\\/]jqtree-circle\.png$/, (ob) => {
          ob.request = '++plone++static/components/jqtree/jqtree-circle.png';
        }
      ),

      brokenrelativeresource: new webpack.NormalModuleReplacementPlugin(
        new RegExp('^\\.\\.[\\\\/][^+]*\\+\\+resource\\+\\+'), (ob) => {
          ob.request = ob.request.replace(/^[.\/]+/, '');
        }
      ),

      // Fix dynamic requires in structure pattern
      // https://github.com/plone/mockup/commit/89de866dff89a455bd4102c84a3fa8f9a0bcc34b
      structurecontextreplacement: new webpack.ContextReplacementPlugin(
        /^\.$|mockup[\\/]structure|mockup[\\/]patterns[\\/]structure/, (ob) => {
          ob.regExp = /^\.[\\/].*$|^mockup-patterns-structure-url[\\/].*$/;
        }
      ),
      structureaddtocontext: new AddToContextPlugin(
        /mockup[\\/]structure|mockup[\\/]patterns[\\/]structure/, [
          'mockup-patterns-structure-url/js/actions',
          'mockup-patterns-structure-url/js/actionmenu',
          'mockup-patterns-structure-url/js/navigation',
          'mockup-patterns-structure-url/js/collections/result'
        ]
      ),

      // Write templates
      write: new WriteFileWebpackPlugin(),

      copy: config.sourcePath
        ? new CopyWebpackPlugin(
            [ { from: path.join(config.sourcePath, '..'), to: '..' } ],
            { ignore: config.ignore })
        : undefined,

      templates: config.sourcePath
        ? config.templates.map(function(name) {
            return new HtmlWebpackPlugin({
              filename: name.substring(config.sourcePath.replace(/\/*$/, '/').length),
              template: name,
              chunksSortMode: function(a, b) {
                return a.names[0].match(/^commons/) ? -1
                  : b.names[0].match(/^commons/) ? 1
                  : a.names[0] > b.names[0] ? 1 : -1;
              },
              inject: false
            })
          })
        : undefined,

      watchignore: new webpack.WatchIgnorePlugin([ config.cachePath ])
    };

    this.alias = merge(config.resolveAlias, {
      'ace': 'brace',
      'moment': '++plone++static/components/moment/moment'
    });

    this.development = {
      devtool: 'eval',
      resolve: {
        alias: this.alias
      },
      resolveLoader: {
        alias: {
          text: 'text-loader'
        }
      },
      module: {
        rules: [
          this.rules.url,
          this.rules.css,
          this.rules.less,
          this.rules.scss,
          this.rules.shim.ace,
          this.rules.shim.backbone,
          this.rules.shim.bootstrapalert,
          this.rules.shim.bootstrapcollapse,
          this.rules.shim.bootstrapdropdown,
          this.rules.shim.bootstraptooltip,
          this.rules.shim.bootstraptransition,
          this.rules.shim.jqtree,
          this.rules.shim.jqtreecontextmenu,
          this.rules.shim.jquerycookie,
          this.rules.shim.jqueryeventdrag,
          this.rules.shim.jqueryeventdrop,
          this.rules.shim.jquerytmpl,
          this.rules.shim.jquerytools,
          this.rules.shim.mockuputils,
          this.rules.shim.structure,
          this.rules.shim.select2,
          this.rules.shim.patternslib,
          this.rules.shim.plone,
          this.rules.shim.ploneformgen,
          this.rules.shim.recurrenceinput,
          this.rules.shim.tinymce,
          this.rules.shim.tinymceplugins
        ]
      },
      devServer: {
        hot: true,
        inline: true,
        stats: 'errors-only',
        host: 'localhost',
        port: '9000'
      },
      output: {
        pathinfo: true,
        filename: 'bundle.js',
        publicPath: config.publicPath
      },
      plugins: [
        this.plugins.brokenrelativeresource,
        this.plugins.hrm,
        this.plugins.jqtree,
        this.plugins.moment,
        this.plugins.plone,
        this.plugins.structureaddtocontext,
        this.plugins.structurecontextreplacement,
        this.plugins.watchignore
      ]
    };
    if (config.sourcePath) {
      this.development.plugins = this.development.plugins.concat(
        this.plugins.templates.concat([
          this.plugins.copy,
          this.plugins.write
        ])
      );
    }

    this.production = {
      resolve: {
        alias: this.alias
      },
      resolveLoader: {
        alias: {
          text: 'text-loader'
        }
      },
      module: {
        exprContextCritical: false,
        rules: [
          this.rules.url,
          this.rules.extract.css,
          this.rules.extract.less,
          this.rules.extract.scss,
          this.rules.shim.ace,
          this.rules.shim.backbone,
          this.rules.shim.bootstrapalert,
          this.rules.shim.bootstrapcollapse,
          this.rules.shim.bootstrapdropdown,
          this.rules.shim.bootstraptooltip,
          this.rules.shim.bootstraptransition,
          this.rules.shim.jqtree,
          this.rules.shim.jqtreecontextmenu,
          this.rules.shim.jquerycookie,
          this.rules.shim.jqueryeventdrag,
          this.rules.shim.jqueryeventdrop,
          this.rules.shim.jquerytmpl,
          this.rules.shim.jquerytools,
          this.rules.shim.mockuputils,
          this.rules.shim.structure,
          this.rules.shim.select2,
          this.rules.shim.patternslib,
          this.rules.shim.plone,
          this.rules.shim.ploneformgen,
          this.rules.shim.recurrenceinput,
          this.rules.shim.tinymce,
          this.rules.shim.tinymceplugins
        ]
      },
      output: {
        filename: '[name].[chunkhash].js',
        chunkFilename: '[chunkhash].js',
        publicPath: config.publicPath
      },
      plugins: [
        this.plugins.brokenrelativeresource,
        this.plugins.commonschunk,
        this.plugins.defineproduction,
        this.plugins.extract,
        this.plugins.jqtree,
        this.plugins.moment,
        this.plugins.plone,
        this.plugins.structureaddtocontext,
        this.plugins.structurecontextreplacement,
        this.plugins.uglify
      ]
    };
    if (config.sourcePath) {
      this.production.plugins = this.production.plugins.concat(
        this.plugins.templates.concat([
          this.plugins.copy
        ])
      );
    }
  }

  parseRequireJsPaths() {
    const mockup = {};

    mockup.window = mockup;
    mockup.requirejs = {
      config: (config) => {
        mockup.requirejs.config = config;
      }
    };

    let body, context, filename, script;

    filename = this.get('config.js');
    body = fs.readFileSync(filename, { encoding: 'utf-8' });
    body = body.replace('PORTAL_URL', "'" + this.config.portalUrl + "'");

    context = vm.createContext(mockup);
    script = new vm.Script(body);
    script.runInContext(context);

    return mockup.requirejs.config.paths;
  }

  parseLessVariables() {
    const mockup = {};

    mockup.window = mockup;

    let body, context, filename, script;

    filename = this.get('less-variables.js');
    body = fs.readFileSync(filename, { encoding: 'utf-8' });

    // normalize " escaping to ' fix issue where passing LESS variables
    // in less-loader query failed
    body = body.replace(
      /'"/gm,   '"\'').replace(   // '"  => "'
      /"',/gm,  '\'",').replace(  // "', => '",
      /\\"/gm, '\''); //          // \"  => '

    // remove baseUrl from URLs
    body = body.replace(new RegExp(this.config.portalUrl + '/', 'g'), '');

    context = vm.createContext(mockup);
    script = new vm.Script(body);
    script.runInContext(context);

    return mockup.less.globalVars;
  };

  match(path_) {
    if (path_) {
      for (let i = 0; i < this.config.resolveMatches.length; i++) {
        let match = path_.match(this.config.resolveMatches[i]);
        if (match) {
          return match[1];
        }
      }
    }
  }

  get(path_, force=false) {
    const url_ = this.config.portalUrl + '/' + path_.replace(/^[./]+/, '');

    let filename = path.join(
      this.config.cachePath,
      path.join.apply(null, path_.split('/'))
    );

    if (!force) {
      for (let i = 0; i < this.config.resolveExtensions.length; i++) {
        let extension = this.config.resolveExtensions[i];
        if (fs.existsSync(filename + extension)) {
          filename = filename + extension;
          if (this.config.debug) { console.log('Found: ' + filename); }
          return filename;
        }
      }
    }

    for (let i = 0; i < this.config.resolveExtensions.length; i++) {
      let extension = this.config.resolveExtensions[i];
      let response = fetch('GET', url_ + extension);
      if (response.statusCode === 200) {
        let data = response.getBody();
        filename = filename + extension;
        mkdirp.sync(path.dirname(filename));
        fs.writeFileSync(filename, data, { encoding: null });
        if (this.config.debug) { console.log('Plone: ' + url_); }
        if (this.config.debug) { console.log('Saved: ' + filename); }
        return filename;
      }
    }
  }

  apply(compiler) {
    const self = this;
    const seen = [];
    const resolved = {};

    compiler.plugin('compilation', function (compilation) {

      // Resolve files from Plone
      compilation.resolvers.normal.plugin('file', function (data, callback) {
        if (data.__plone) { return callback(); }

        // Match against PlonePlugin resolveMatches
        let match = self.match(data.path) || self.match(data.request);

        // XXX: query.recurrenceinput.css, bundled with CMFPlone, references
        // missing files next.gif, prev.gif and pb_close.png
        if (['next.gif', 'prev.gif', 'pb_close.png']
            .indexOf(path.basename(data.path)) >= 0) {
          match = path.basename(data.path);
          resolved[match] = path.join(__dirname, 'static', match);
        }

        // Download matches from Plone
        if (match && !resolved[match]) {
          if (seen.indexOf(data.path) === -1) {
            seen.push(data.path);
            resolved[match] = self.get(match);
          }
        }

        // Report downloads resolved
        if (match && resolved[match]) {
          return this.doResolve('resolved', extend(data, {
            path: resolved[match],
            __plone: true
          }), 'Plone:' + match, callback, true);
        }

        // Fallback to default resolvers
        return callback();
      });

      // Resolve JS modules from Plone
      compiler.resolvers.normal.plugin('module', function(data, callback) {
        if (data.__plone) { return callback(); }

        // Match against PlonePlugin resolveMatches
        let match = self.match(data.request);

        // Download matches from Plone
        if (match && !resolved[match]) {
          if (seen.indexOf(data.path) === -1) {
            seen.push(data.path);
            resolved[match] = self.get(match);
          }
        }

        // Report downloads resolved
        if (match && resolved[match]) {
          return this.doResolve('resolved', extend(data, {
            path: resolved[match],
            __plone: true
          }), 'Plone:' + match, callback, true);
        }

        // Fallback to default resolvers
        return callback();
      });
    });
  }
}

module.exports = PlonePlugin;
 at SyntaxError: Unexpected token (1:84)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
