/root/Targets/restaculous
└─┬ restaculous@0.7.4 
  ├─┬ chalk@1.1.3 
  │ ├── ansi-styles@2.2.1 
  │ ├── escape-string-regexp@1.0.5 
  │ ├─┬ has-ansi@2.0.0 
  │ │ └── ansi-regex@2.1.1 
  │ ├── strip-ansi@3.0.1 
  │ └── supports-color@2.0.0 
  ├── clone@2.1.1 
  ├─┬ debug@2.6.9 
  │ └── ms@2.0.0 
  ├─┬ fs-extra@2.1.2 
  │ ├── graceful-fs@4.1.11 
  │ └── jsonfile@2.4.0 
  └── pluralize@4.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/restaculous/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0519 took 5.8881s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

/*
 *  Load Module dependencies
 */
var events = require('events');
var fs = require('fs-extra');
var chalk = require('chalk');

// Load config file
var config = require('./config');

//  Set file options
var opts = {
    encoding: 'utf8'
};

/*
 *  Load generators
 */
var structureGenerator = require('./generators/structure');
var modelGenerator = require('./generators/model');
var dalGenerator = require('./generators/dal');
var controllerGenerator = require('./generators/controller');
var routeGenerator = require('./generators/route');
var testGenerator = require('./generators/test');
var baseGenerator = require('./generators/base');

/*
 *  Generator high-level flow
 *
 *  1. Read settings from file
 *  2. Copy App Structure
 *  3. Generate Models
 *  4. Generate DALs
 *  5. Generate Controllers
 *  6. Generate Routes
 *  7. Generate Tests
 *  8. Generate Configuration
 *  9. Generate API Docs
 *  10. Generate Codebase Docs
 */
var workflow = new events.EventEmitter();
var settings = {};

/*
 *  readSettings
 *
 *  @desc Reads the `settings.json` file where models and configuration entries are set.
 */
workflow.on('readSettings', function readSettings() {
    // Get settings file path from the command prompt
    var filePath = process.argv[2];

    if(filePath){
        fs.readFile(getSettingsFilePath(filePath), opts, function rf(err, data) {
            if (err) {
                // Error handling
                console.log(chalk.red(config.SINGS.error + " " + err.message));
                return false;
            }

            // Convert the settings file into an object
            settings = JSON.parse(data);

            workflow.emit('generateStructure');
        });
    } else {
        // Prompt user to supply setting.json file path
        console.log(chalk.yellow('%s Warning: settings.json file not provided!'), config.SINGS.warning);
    }
});

/*
 *  generateStructure
 *
 *  @desc Copies the boilerplate applications structure
 *
 *  @param {Object} settings - the settings object read from file
 */
workflow.on('generateStructure', function generateStructure(){
    structureGenerator.generate(settings, function (err) {
        if (err) {
            // Output Error to console
            console.log(err);
        }

        console.log(chalk.green("%s Done Generating App Structure"), config.SINGS.success);
        workflow.emit('generateModels');
    });
});


/*
 *  generateModels
 *
 *  @desc Uses the model generator to create model files in the new application structure.
 */
workflow.on('generateModels', function generateModels() {
    modelGenerator.generate(settings, function (err) {
        if (err) {
            // Output Error to console
            console.log(err);
        }

        console.log(chalk.green("%s Done Generating Models"), config.SINGS.success);
        workflow.emit('generateDals');
    });
});


/*
 *  generateDals
 *
 *  @desc Uses the dal generator to create dal files in the new application structure.
 */
workflow.on('generateDals', function generateDals() {
    dalGenerator.generate(settings, function (err) {
        if (err) {
            // Output Error to console
            console.log(err);
        }

        console.log(chalk.green("%s Done Generating Dals"), config.SINGS.success);
        workflow.emit('generateControllers');
    });
});


/*
 *  generateControllers
 *
 *  @desc Uses the dal generator to create dal files in the new application structure.
 */
workflow.on('generateControllers', function generateControllers() {
    controllerGenerator.generate(settings, function (err) {
        if (err) {
            // Output Error to console
            console.log(err);
        }


        console.log(chalk.green("%s Done Generating Controllers"), config.SINGS.success);
        workflow.emit('generateRoutes');
    });
});

/*
 *  generateRoutes
 *
 *  @desc Uses the dal generator to create dal files in the new application structure.
 */
workflow.on('generateRoutes', function generateRoutes() {
    routeGenerator.generate(settings, function (err) {
        if (err) {
            // Output Error to console
            console.log(err);
        }

        console.log(chalk.green("%s Done Generating Routes"), config.SINGS.success);
        workflow.emit('generateTests');
    });
});

/*
 *  generateTests
 *
 *  @desc Uses the test generator to create test files in the new application structure.
 */
workflow.on('generateTests', function generateTest() {
    testGenerator.generate(settings, function (err) {
        if (err) {
            // Output Error to console
            console.log(err);
        }

        console.log(chalk.green("%s Done Generating Tests"), config.SINGS.success);
        workflow.emit('generateBase');
    });
});

/*
 *  generateBase
 *
 *  @desc Uses the base generator to create config/index.js and routes/index.js files in the new application structure.
 */
workflow.on('generateBase', function generateBase() {
    baseGenerator.generate(settings, function (err) {
        if (err) {
            // Output Error to console
            console.log(err);
        }

        console.log(chalk.green("%s Done Generating config/index.js, routes/index.js and package.json"), config.SINGS.success);
    });
});


/*
 *  getSettingsFilePath
 *
 *  @desc Figures out the actual system path to the settings.json file
 *
 *  @parma {String} filePath - the file path provided by the user
 */
function getSettingsFilePath(filePath){
    if(filePath.indexOf("/") < 0){
        return "./" + filePath;
    } else {
        return filePath;
    }
}

workflow.emit("readSettings");
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
