
> dtrace-provider@0.8.5 install /root/Targets/kang/node_modules/bunyan/node_modules/dtrace-provider
> node scripts/install.js


> dtrace-provider@0.6.0 install /root/Targets/kang/node_modules/dtrace-provider
> node scripts/install.js

/root/Targets/kang
└─┬ kang@1.2.0 
  ├─┬ jsprim@1.4.1 
  │ ├── assert-plus@1.0.0 
  │ ├── extsprintf@1.3.0 
  │ └── json-schema@0.2.3 
  ├── posix-getopt@1.2.0 
  ├─┬ restify@4.1.1 
  │ ├── assert-plus@0.1.5 
  │ ├─┬ backoff@2.5.0 
  │ │ └── precond@0.2.3 
  │ ├─┬ bunyan@1.8.12 
  │ │ ├── dtrace-provider@0.8.5 
  │ │ ├── moment@2.18.1 
  │ │ ├─┬ mv@2.1.1 
  │ │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ │ └── minimist@0.0.8 
  │ │ │ ├── ncp@2.0.0 
  │ │ │ └─┬ rimraf@2.4.5 
  │ │ │   └─┬ glob@6.0.4 
  │ │ │     ├── inflight@1.0.6 
  │ │ │     ├─┬ minimatch@3.0.4 
  │ │ │     │ └─┬ brace-expansion@1.1.8 
  │ │ │     │   ├── balanced-match@1.0.0 
  │ │ │     │   └── concat-map@0.0.1 
  │ │ │     └── path-is-absolute@1.0.1 
  │ │ └── safe-json-stringify@1.0.4 
  │ ├─┬ csv@0.4.6 
  │ │ ├── csv-generate@0.0.6 
  │ │ ├── csv-parse@1.2.2 
  │ │ ├── csv-stringify@0.0.8 
  │ │ └── stream-transform@0.1.2 
  │ ├─┬ dtrace-provider@0.6.0 
  │ │ └── nan@2.7.0 
  │ ├── escape-regexp-component@1.0.2 
  │ ├── formidable@1.1.1 
  │ ├─┬ http-signature@0.11.0 
  │ │ ├── asn1@0.1.11 
  │ │ ├── assert-plus@0.1.5 
  │ │ └── ctype@0.5.3 
  │ ├── keep-alive-agent@0.0.1 
  │ ├─┬ lru-cache@4.1.1 
  │ │ ├── pseudomap@1.0.2 
  │ │ └── yallist@2.1.2 
  │ ├── mime@1.4.0 
  │ ├── negotiator@0.6.1 
  │ ├── node-uuid@1.4.8 
  │ ├─┬ once@1.4.0 
  │ │ └── wrappy@1.0.2 
  │ ├── qs@3.1.0 
  │ ├── semver@4.3.6 
  │ ├─┬ spdy@3.4.7 
  │ │ ├─┬ debug@2.6.8 
  │ │ │ └── ms@2.0.0 
  │ │ ├── handle-thing@1.2.5 
  │ │ ├── http-deceiver@1.2.7 
  │ │ ├── safe-buffer@5.1.1 
  │ │ ├── select-hose@2.0.0 
  │ │ └─┬ spdy-transport@2.0.20 
  │ │   ├── detect-node@2.0.3 
  │ │   ├─┬ hpack.js@2.1.6 
  │ │   │ └── inherits@2.0.3 
  │ │   ├── obuf@1.1.1 
  │ │   ├─┬ readable-stream@2.3.3 
  │ │   │ ├── isarray@1.0.0 
  │ │   │ ├── process-nextick-args@1.0.7 
  │ │   │ ├── string_decoder@1.0.3 
  │ │   │ └── util-deprecate@1.0.2 
  │ │   └─┬ wbuf@1.7.2 
  │ │     └── minimalistic-assert@1.0.0 
  │ ├── tunnel-agent@0.4.3 
  │ └─┬ vasync@1.6.3 
  │   └─┬ verror@1.6.0 
  │     └── extsprintf@1.2.0 
  ├─┬ restify-clients@1.1.1 
  │ ├── assert-plus@0.1.5 
  │ ├── lodash@3.10.1 
  │ ├── lru-cache@2.7.3 
  │ ├─┬ restify-errors@3.1.0 
  │ │ └── assert-plus@0.2.0 
  │ └── semver@5.4.1 
  ├── strsplit@1.0.0 
  ├─┬ vasync@1.6.4 
  │ └─┬ verror@1.6.0 
  │   └── extsprintf@1.2.0 
  └─┬ verror@1.10.0 
    └── core-util-is@1.0.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/kang/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 13% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0305 took 11.3607s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program // Copyright (c) 2012, Mark Cavage. All rights reserved.
// Copyright 2015 Joyent, Inc.

var assert = require('assert');
var Stream = require('stream').Stream;
var util = require('util');


///--- Globals

/* JSSTYLED */
var UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;


///--- Internal

function _capitalize(str) {
    return (str.charAt(0).toUpperCase() + str.slice(1));
}

function _toss(name, expected, oper, arg, actual) {
    throw new assert.AssertionError({
        message: util.format('%s (%s) is required', name, expected),
        actual: (actual === undefined) ? typeof (arg) : actual(arg),
        expected: expected,
        operator: oper || '===',
        stackStartFunction: _toss.caller
    });
}

function _getClass(arg) {
    return (Object.prototype.toString.call(arg).slice(8, -1));
}

function noop() {
    // Why even bother with asserts?
}


///--- Exports

var types = {
    bool: {
        check: function (arg) { return typeof (arg) === 'boolean'; }
    },
    func: {
        check: function (arg) { return typeof (arg) === 'function'; }
    },
    string: {
        check: function (arg) { return typeof (arg) === 'string'; }
    },
    object: {
        check: function (arg) {
            return typeof (arg) === 'object' && arg !== null;
        }
    },
    number: {
        check: function (arg) {
            return typeof (arg) === 'number' && !isNaN(arg);
        }
    },
    finite: {
        check: function (arg) {
            return typeof (arg) === 'number' && !isNaN(arg) && isFinite(arg);
        }
    },
    buffer: {
        check: function (arg) { return Buffer.isBuffer(arg); },
        operator: 'Buffer.isBuffer'
    },
    array: {
        check: function (arg) { return Array.isArray(arg); },
        operator: 'Array.isArray'
    },
    stream: {
        check: function (arg) { return arg instanceof Stream; },
        operator: 'instanceof',
        actual: _getClass
    },
    date: {
        check: function (arg) { return arg instanceof Date; },
        operator: 'instanceof',
        actual: _getClass
    },
    regexp: {
        check: function (arg) { return arg instanceof RegExp; },
        operator: 'instanceof',
        actual: _getClass
    },
    uuid: {
        check: function (arg) {
            return typeof (arg) === 'string' && UUID_REGEXP.test(arg);
        },
        operator: 'isUUID'
    }
};

function _setExports(ndebug) {
    var keys = Object.keys(types);
    var out;

    /* re-export standard assert */
    if (process.env.NODE_NDEBUG) {
        out = noop;
    } else {
        out = function (arg, msg) {
            if (!arg) {
                _toss(msg, 'true', arg);
            }
        };
    }

    /* standard checks */
    keys.forEach(function (k) {
        if (ndebug) {
            out[k] = noop;
            return;
        }
        var type = types[k];
        out[k] = function (arg, msg) {
            if (!type.check(arg)) {
                _toss(msg, k, type.operator, arg, type.actual);
            }
        };
    });

    /* optional checks */
    keys.forEach(function (k) {
        var name = 'optional' + _capitalize(k);
        if (ndebug) {
            out[name] = noop;
            return;
        }
        var type = types[k];
        out[name] = function (arg, msg) {
            if (arg === undefined || arg === null) {
                return;
            }
            if (!type.check(arg)) {
                _toss(msg, k, type.operator, arg, type.actual);
            }
        };
    });

    /* arrayOf checks */
    keys.forEach(function (k) {
        var name = 'arrayOf' + _capitalize(k);
        if (ndebug) {
            out[name] = noop;
            return;
        }
        var type = types[k];
        var expected = '[' + k + ']';
        out[name] = function (arg, msg) {
            if (!Array.isArray(arg)) {
                _toss(msg, expected, type.operator, arg, type.actual);
            }
            var i;
            for (i = 0; i < arg.length; i++) {
                if (!type.check(arg[i])) {
                    _toss(msg, expected, type.operator, arg, type.actual);
                }
            }
        };
    });

    /* optionalArrayOf checks */
    keys.forEach(function (k) {
        var name = 'optionalArrayOf' + _capitalize(k);
        if (ndebug) {
            out[name] = noop;
            return;
        }
        var type = types[k];
        var expected = '[' + k + ']';
        out[name] = function (arg, msg) {
            if (arg === undefined || arg === null) {
                return;
            }
            if (!Array.isArray(arg)) {
                _toss(msg, expected, type.operator, arg, type.actual);
            }
            var i;
            for (i = 0; i < arg.length; i++) {
                if (!type.check(arg[i])) {
                    _toss(msg, expected, type.operator, arg, type.actual);
                }
            }
        };
    });

    /* re-export built-in assertions */
    Object.keys(assert).forEach(function (k) {
        if (k === 'AssertionError') {
            out[k] = assert[k];
            return;
        }
        if (ndebug) {
            out[k] = noop;
            return;
        }
        out[k] = assert[k];
    });

    /* export ourselves (for unit tests _only_) */
    out._setExports = _setExports;

    return out;
}

module.exports = _setExports(process.env.NODE_NDEBUG);
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/kang/node_modules/kang/lib/kang.js. Coverage (Term): 4% Coverage (LOC): 6%
*- File /root/Targets/kang/node_modules/jsprim/lib/jsprim.js. Coverage (Term): 5% Coverage (LOC): 9%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
