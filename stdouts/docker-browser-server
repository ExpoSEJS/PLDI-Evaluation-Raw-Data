/root/Targets/docker-browser-server
└─┬ docker-browser-server@3.1.3 
  ├─┬ cors@2.8.4 
  │ ├── object-assign@4.1.1 
  │ └── vary@1.1.2 
  ├─┬ debug@3.1.0 
  │ └── ms@2.0.0 
  ├─┬ debug-stream@3.0.1 
  │ ├── debug@2.6.9 
  │ └── through2@2.0.3 
  ├─┬ docker-browser-console@6.0.0 
  │ ├─┬ brfs@1.4.3 
  │ │ ├─┬ quote-stream@1.0.2 
  │ │ │ └── buffer-equal@0.0.1 
  │ │ ├─┬ resolve@1.4.0 
  │ │ │ └── path-parse@1.0.5 
  │ │ └─┬ static-module@1.5.0 
  │ │   ├─┬ concat-stream@1.6.0 
  │ │   │ └── typedarray@0.0.6 
  │ │   ├─┬ duplexer2@0.0.2 
  │ │   │ └─┬ readable-stream@1.1.14 
  │ │   │   ├── isarray@0.0.1 
  │ │   │   └── string_decoder@0.10.31 
  │ │   ├─┬ escodegen@1.3.3 
  │ │   │ ├── esprima@1.1.1 
  │ │   │ ├── estraverse@1.5.1 
  │ │   │ ├── esutils@1.0.0 
  │ │   │ └─┬ source-map@0.1.43 
  │ │   │   └── amdefine@1.0.1 
  │ │   ├─┬ falafel@2.1.0 
  │ │   │ ├── acorn@5.1.2 
  │ │   │ ├── foreach@2.0.5 
  │ │   │ ├── isarray@0.0.1 
  │ │   │ └── object-keys@1.0.11 
  │ │   ├─┬ has@1.0.1 
  │ │   │ └── function-bind@1.1.1 
  │ │   ├── object-inspect@0.4.0 
  │ │   ├─┬ quote-stream@0.0.0 
  │ │   │ └── minimist@0.0.8 
  │ │   ├─┬ readable-stream@1.0.34 
  │ │   │ ├── isarray@0.0.1 
  │ │   │ └── string_decoder@0.10.31 
  │ │   ├── shallow-copy@0.0.1 
  │ │   ├─┬ static-eval@0.2.4 
  │ │   │ └─┬ escodegen@0.0.28 
  │ │   │   ├── esprima@1.0.4 
  │ │   │   └── estraverse@1.3.2 
  │ │   └─┬ through2@0.4.2 
  │ │     └─┬ xtend@2.1.2 
  │ │       └── object-keys@0.4.0 
  │ ├── computed-style@0.1.4 
  │ ├── defaultcss@0.0.2 
  │ ├─┬ docker-run@3.1.0 
  │ │ ├── debug@1.0.5 
  │ │ ├─┬ docker-raw-stream@1.3.1 
  │ │ │ └─┬ through2@0.5.1 
  │ │ │   ├─┬ readable-stream@1.0.34 
  │ │ │   │ ├── isarray@0.0.1 
  │ │ │   │ └── string_decoder@0.10.31 
  │ │ │   └── xtend@3.0.0 
  │ │ ├─┬ docker-remote-api@4.4.1 
  │ │ │ ├── docker-host@3.1.0 
  │ │ │ └── xtend@3.0.0 
  │ │ └─┬ through2@0.6.5 
  │ │   └─┬ readable-stream@1.0.34 
  │ │     ├── isarray@0.0.1 
  │ │     └── string_decoder@0.10.31 
  │ ├─┬ duplexify@3.5.1 
  │ │ └── stream-shift@1.0.0 
  │ ├─┬ ndjson@1.5.0 
  │ │ └── split2@2.2.0 
  │ ├── term.js@0.0.4 
  │ └── xtend@4.0.1 
  ├── freeport@1.0.5 
  ├── minimist@1.2.0 
  ├─┬ pump@1.0.2 
  │ ├── end-of-stream@1.4.0 
  │ └─┬ once@1.4.0 
  │   └── wrappy@1.0.2 
  ├─┬ request@2.83.0 
  │ ├── aws-sign2@0.7.0 
  │ ├── aws4@1.6.0 
  │ ├── caseless@0.12.0 
  │ ├─┬ combined-stream@1.0.5 
  │ │ └── delayed-stream@1.0.0 
  │ ├── extend@3.0.1 
  │ ├── forever-agent@0.6.1 
  │ ├─┬ form-data@2.3.1 
  │ │ └── asynckit@0.4.0 
  │ ├─┬ har-validator@5.0.3 
  │ │ ├─┬ ajv@5.2.3 
  │ │ │ ├── co@4.6.0 
  │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │   └── jsonify@0.0.0 
  │ │ └── har-schema@2.0.0 
  │ ├─┬ hawk@6.0.2 
  │ │ ├── boom@4.3.1 
  │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ └── boom@5.2.0 
  │ │ ├── hoek@4.2.0 
  │ │ └── sntp@2.0.2 
  │ ├─┬ http-signature@1.2.0 
  │ │ ├── assert-plus@1.0.0 
  │ │ ├─┬ jsprim@1.4.1 
  │ │ │ ├── extsprintf@1.3.0 
  │ │ │ ├── json-schema@0.2.3 
  │ │ │ └── verror@1.10.0 
  │ │ └─┬ sshpk@1.13.1 
  │ │   ├── asn1@0.2.3 
  │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │   ├── dashdash@1.14.1 
  │ │   ├── ecc-jsbn@0.1.1 
  │ │   ├── getpass@0.1.7 
  │ │   ├── jsbn@0.1.1 
  │ │   └── tweetnacl@0.14.5 
  │ ├── is-typedarray@1.0.0 
  │ ├── isstream@0.1.2 
  │ ├── json-stringify-safe@5.0.1 
  │ ├─┬ mime-types@2.1.17 
  │ │ └── mime-db@1.30.0 
  │ ├── oauth-sign@0.8.2 
  │ ├── performance-now@2.1.0 
  │ ├── qs@6.5.1 
  │ ├── safe-buffer@5.1.1 
  │ ├── stringstream@0.0.5 
  │ ├─┬ tough-cookie@2.3.3 
  │ │ └── punycode@1.4.1 
  │ ├── tunnel-agent@0.6.0 
  │ └── uuid@3.1.0 
  ├─┬ root@2.0.0 
  │ ├── murl@0.4.1 
  │ ├── network-address@0.0.5 
  │ └── protein@0.5.0 
  ├─┬ send@0.10.1 
  │ ├─┬ debug@2.1.3 
  │ │ └── ms@0.7.0 
  │ ├── depd@1.0.1 
  │ ├── destroy@1.0.3 
  │ ├── escape-html@1.0.1 
  │ ├─┬ etag@1.5.1 
  │ │ └── crc@3.2.1 
  │ ├── fresh@0.2.4 
  │ ├── mime@1.2.11 
  │ ├── ms@0.6.2 
  │ ├─┬ on-finished@2.1.1 
  │ │ └── ee-first@1.1.0 
  │ └── range-parser@1.0.3 
  ├─┬ websocket-stream@5.0.1 
  │ ├── inherits@2.0.3 
  │ └─┬ readable-stream@2.3.3 
  │   ├── core-util-is@1.0.2 
  │   ├── isarray@1.0.0 
  │   ├── process-nextick-args@1.0.7 
  │   ├── string_decoder@1.0.3 
  │   └── util-deprecate@1.0.2 
  └─┬ ws@3.2.0 
    ├── async-limiter@1.0.0 
    └── ultron@1.1.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/docker-browser-server/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0563 took 4.3572s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var WebSocketServer = require('ws').Server
var freeport = require('freeport')
var request = require('request')
var websocket = require('websocket-stream')
var docker = require('docker-browser-console')
var root = require('root')
var url = require('url')
var send = require('send')
var path = require('path')
var pump = require('pump')
var cors = require('cors')
var net = require('net')
var debug = require('debug')('docker-browser-server')
var debugStream = require('debug-stream')('docker-browser-server-stream')

module.exports = function(image, opts) {
  if (!opts) opts = {}

  var DOCKER_HOST = opts.docker || (process.env.DOCKER_HOST || '127.0.0.1').replace(/^.+:\/\//, '').replace(/:\d+$/, '').replace(/^\/.+$/, '127.0.0.1')

  var server = root()
  var wss = new WebSocketServer({server: server})
  var containers = {}

  wss.on('connection', function (connection, req) {
    var url = req.url.slice(1)
    var persist = opts.persist && !!url
    var id = url || Math.random().toString(36).slice(2)
    var stream = websocket(connection)
    debug('socket start', id, +new Date())

    var startProxy = function(httpPort, cb) {
      if (!opts.offline) return cb(null, id+'.c.'+req.headers.host)

      var proxy = net.createServer(function(socket) {
        pump(socket, net.connect(httpPort, DOCKER_HOST), socket)
      })

      proxy.once('error', cb)
      proxy.listen(0, function() {
        var port = proxy.address().port
        var subdomain = req.headers.host.split(':')[0]+':'+port
        debug('started proxy', subdomain)
        cb(null, subdomain, proxy)
      })
    }

    freeport(function(err, filesPort) {
      if (err) return connection.destroy()
      freeport(function(err, dockerHostPort) {
        if (err) return connection.destroy()
        freeport(function(err, httpPort) {
            if (err) return connection.destroy()
            startProxy(httpPort, function(err, subdomain, proxy) {
              if (err) return connection.destroy()

              var container = containers[id] = {
                id: id,
                host: 'http://' + subdomain,
                ports: {http: httpPort, fs: filesPort, docker: dockerHostPort}
              }

              server.emit('spawn', container)

              var ports = {}
              var dockercontainerport = opts.dockerport || 9000
              ports[httpPort] = 80
              ports[filesPort] = 8441
              ports[dockerHostPort] = dockercontainerport

              var envs = {}
              envs['CONTAINER_ID'] = container.id
              envs['HOST'] = container.host
              envs['PORT_80'] = httpPort
              envs['PORT_8441'] = filesPort
              envs['PORT_' + dockercontainerport] = dockerHostPort
              if (opts.envs) {
                Object.keys(opts.envs).forEach(function(name) {
                  envs[name] = opts.envs[name]
                })
              }

              var dopts = {
                tty: opts.tty === undefined ? true : opts.tty,
                env: envs,
                ports: ports,
                volumes: opts.volumes || {},
                beforeCreate: opts.beforeCreate
              }

              if (persist) dopts.volumes['/tmp/'+id] = '/root'
              if (opts.trusted) dopts.volumes['/var/run/docker.sock'] = '/var/run/docker.sock'

              stream.on('close', function () {
                debug('socket close', id, +new Date())
              })

              pump(stream, docker(image, dopts), debugStream(), stream, function(err) {
                if (proxy) proxy.close()
                server.emit('kill', container)
                delete containers[id]
              })
            })
          })
      })
    })
  })

  server.all(cors())

  server.all(function(req, res, next) {
    var host = req.headers.host || ''
    var i = host.indexOf('.c.')

    if (i > -1) {
      var id = host.slice(0, i)
      var container = containers.hasOwnProperty(id) && containers[id]
      if (container) return pump(req, request('http://'+DOCKER_HOST+':'+container.ports.http+req.url), res)
      return res.error(404, 'Could not find container')
    }

    next()
  })

  server.get('/-/*', function(req, res) {
    send(req, req.params.glob, {root:path.join(__dirname, 'web')}).pipe(res)
  })

  server.get('/containers/{id}', function(req, res) {
    var id = req.params.id
    var container = containers.hasOwnProperty(id) && containers[id]
    if (!container) return res.error(404, 'Could not find container')
    res.send(container)
  })

  server.all('/http/{id}/*', function(req, res) {
    var id = req.params.id
    var url = req.url.slice(('/http/'+id).length)
    var container = containers.hasOwnProperty(id) && containers[id]
    if (!container) return res.error(404, 'Could not find container')
    pump(req, request('http://'+DOCKER_HOST+':'+container.ports.http+url), res)
  })

  server.all('/files/{id}/*', function(req, res) {
    var id = req.params.id
    var url = req.url.slice(('/files/'+id).length)
    var container = containers.hasOwnProperty(id) && containers[id]
    if (!container) return res.error(404, 'Could not find container')
    pump(req, request('http://'+DOCKER_HOST+':'+container.ports.fs+url), res)
  })

  server.all(function(req, res, next) {
    if (!opts.offline) return next()
    var id = req.connection.address().address
    var container = containers.hasOwnProperty(id) && containers[id]
    if (container) return pump(req, request('http://'+DOCKER_HOST+':'+container.ports.http+req.url), res)
    next()
  })

  server.get('/bundle.js', '/-/bundle.js')
  server.get('/index.html', '/-/index.html')
  server.get('/', '/-/index.html')

  return server
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
