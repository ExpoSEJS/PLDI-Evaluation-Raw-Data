/root/Targets/pergament
└─┬ pergament@0.2.77 
  └── send@0.1.4  (git://github.com/ybogdanov/send.git#b0bcecb24e99736841b85c0ee36c72ceb3144e9b)

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/pergament/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0576 took 3.6151s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Invalid number (339:36) on program 
var argv = require('yargs')
  .alias('h', 'host')
  .alias('p', 'port')
  .alias('c', 'config')
  .alias('e', 'env')
  .alias('d', 'assets_dev')
  .alias('a', 'assets_build')
  .alias('b', 'branch')
  .alias('f', 'force')
  .alias('o', 'override')
  .alias('v', 'version')
  .alias('l', 'long')
  .argv

var _ = require('lodash'),
    fs = require('fs'),
    express = require('express'),
    http = require('http'),
    path = require('path'),
    glob = require('glob'),
    Config = require('./config'),
    utils = require('./utils'),
    assets = require('./assets'),
    staticPlugin = require('./static'),
    build = require('./build'),
    githooks = require('./githooks'),
    source_proxy = require('./source_proxy'),
    pages = require('./pages'),
    S3 = require('./s3'),
    Git = require('./git'),
    Snockets = require('./snockets'),
    colors = require('colors'),
    cors = require('express-cors'),

    pergamentRoot = path.dirname(__dirname),
    pergamentPublic = pergamentRoot + '/public'

function pergament(options) {
  var root = process.cwd()
  var defaults = {
    root: root,
    name: path.basename(root),
    env: 'dev',
    host: '0.0.0.0',
    port: 5555,
    githooks_host: '0.0.0.0',
    githooks_port: 5556,
    githooks_build_dir: root + '/build',
    source_proxy_host: '0.0.0.0',
    source_proxy_port: 5557,
    local_s3: false,
    local_index: false,
    colors: true,
    cache_built_assets: true,
    js_dir: 'js',
    styl_dir: 'styl',
    partial_dir: 'partial',
    page_dir: 'page',
    cache_dir: root + '/.cache',
    use_ngmin: false
  }

  // init first set of options from defaults through given arguments
  // extending with argv
  options = utils.deepExtend({}, defaults, options, argv)

  // extract options from env
  var envOpts = _.transform(process.env, function(result, value, key) {
    if (key.indexOf('PG_') !== 0) {
      return
    }
    // PG_aws_key -> aws_key
    // PG_PUBLIC__foo -> PUBLIC.foo
    key = key.substr(3).split('__')
    root = result
    for (var i = 0; i < key.length; i++) {
      root[key[i]] = i < key.length - 1 ? {} : value
      root = root[key[i]]
    }
  })

  utils.deepExtend(options, envOpts, argv)

  // read config file
  options.config = options.config || options.root + '/config.js'
  var fullConfig = Config(options.config)

  // determine current env by branch
  if (options.branch && !argv.branch) {
    if (_.isBoolean(options.branch) || options.branch === 'true') {
      argv.branch = Git.branch(options.root)
    }
  }

  // validate branch value
  // if origin/master" is given, turn it into just "master"
  options.branch = validateBranch(options.branch)

  if (options.build && !envOpts.env && !argv.env) {
    options.env = getBranchEnv(options.branch)
  }
  
  var config = fullConfig[options.env] || fullConfig._

  // 3rd phase, merge with config
  var defaults2 = {
    publicDir: options.root + '/public',
    views: options.root + '/public'
  }

  options = utils.deepExtend({}, defaults2, config, options, envOpts, argv)

  // validate branch again
  options.branch = validateBranch(options.branch)

  
  // configure colors
  if (!options.colors) {
    colors.mode = 'none'
  }

  // read application's package.json
  var packageFile = options.root + '/package.json'
  try {
    options.package = JSON.parse(fs.readFileSync(packageFile).toString())
  }
  catch (e) {}

  if (_.isBoolean(argv.version)) {
    var version = options.package.version
    if (argv.long) {
      version += '-' + options.branch
    }
    console.log(version)
    process.exit(0)
  }
  else if (_.isString(argv.version)) {
    options.package.version = argv.version
  }

  options.release_version = options.package.version + '-' + options.branch

  // expose `env` value to process ENV
  process.env.NODE_ENV = options.env

  // create application and configure it with options
  var app = express()
  app.pergament = true

  for (var k in options) {
    if (k == '$0' || k == '_') continue
    app.set(k.replace(/ /g, ' '), options[k])
  }

  app.set('config', options)
  app.set('full_config', fullConfig)
  app.set('argv', argv)
  app.set('view engine', 'hbs')

  // Lazy initializers
  var init = {
    s3: function() {
      return S3({
        bucket: options.s3_bucket,
        seed: options.s3_seed,
        aws_key: options.aws_key,
        aws_secret: options.aws_secret,
        aws_region: options.aws_region,
        cf_domains: options.cf_domains,
        force: options.force,
        dry: options.dry,
        local: options.local_s3,
        local_index: options.local_index,
        cache_file: options.cache_dir + '/s3',
        concurrency: options.concurrency,
        static_url: options.static_url
      })
    }
  }

  // override default get() to have lazy initialization
  // yeah, we override set() instead, see express source for reason
  var setOrig = app.set.bind(app)
  app.set = function(prop) {
    if (arguments.length > 1) {
      return setOrig.apply(this, arguments)
    }
    var value = setOrig(prop)
    if (!value && init[prop]) {
      value = init[prop]()
      app.set(prop, value)
    }
    return value
  }

  // configurator function which will be called only in dev or withing a build
  app.dev = function(fn) {
    if (options.env == 'dev' || options.build || options.assets_dev) {
      fn()
    }
  }

  // configurator function which will be called only in prod and not in a build
  app.prod = function(fn) {
    if (options.env != 'dev' && !options.build) {
      fn()
    }
  }

  // expose starting server function
  app.startServer = function(port, callback) {
    if (arguments.length < 2) {
      callback = port
    }

    callback = callback || function(){}

    port = typeof port == 'undefined' ? app.get('port') : port

    var server = http.createServer(app)

    server.listen(port, app.get('host'), function () {
      var address = server.address(),
          pergament = '[PERGAMENT]'.yellow
      console.log('%s %s [env:%s] [version:%s] is listening on %s:%d',
          pergament, options.name, options.env, options.package.version, address.address, address.port)

      if (app.onStart) {
        app.onStart(callback)
        if (!app.onStart.length) return callback()
      }
      else {
        callback()
      }
    })
    return server
  }

  // use cors
  if (options.cors_origins) {
    app.use(cors({
      allowedOrigins: options.cors_origins,
      maxAge: options.cors_max_age
    }))  
  }

  var publicDirs = _.union([
    options.publicDir,
    pergamentPublic
  ], options.publicDirs)

  // for each public dir also add 'bower_components' dir if exists
  var possibleBowerDirs = [
    options.root,
    pergamentRoot
  ]

  possibleBowerDirs.forEach(function(dir){
    dir += '/bower_components'
    try {
      fs.statSync(dir)
      publicDirs.push(dir)
    }
    catch(e) {}
  })

  // also add dependent pergament project public dirs
  glob(options.root + '/{node_modules,bower_components}/*/{public,dist}', {sync: true}).forEach(function(modulePublicDir){
    publicDirs.push(modulePublicDir)
  })

  // add "js" and "styl" dirs to public dirs
  var subdirs = [options.js_dir, options.styl_dir],
      extraDirs = []
  subdirs.forEach(function(subdir){
    publicDirs.forEach(function(publicDir){
      extraDirs.push(publicDir + '/' + subdir)
    })
  })
  publicDirs = publicDirs.concat(extraDirs)

  // add pergament vendor js dir
  publicDirs.push(pergamentPublic + '/js/vendor')

  app.set('public dirs', publicDirs)

  app.dev(function(){
    app.use(staticPlugin(publicDirs))
  })

  app.prod(function(){
    if (!options.local_s3) return
    app.use(staticPlugin([options.local_s3]))
  })

  app.configure('dev', function(){
    app.use(express.logger('dev'))
  })

  // initialize snockets api
  app.snockets = new Snockets({
    paths: app.get('public dirs')
  })

  // initialize asset helpers
  assets.mixin(app)

  if (options.beforeRouter) {
    options.beforeRouter(app)
  }
  
  app.use(app.router)

  app.configure('dev', function(){
    app.use(express.errorHandler())  
  })

  // initialize builder
  app.build = build(app)

  // initialize githooks server
  app.githooks = githooks(app)

  // initialize source_proxy server
  app.source_proxy = source_proxy(app)

  // expose other stuff
  app.getBranchEnv = getBranchEnv

  // expose pages generator
  app.pages = pages(app)

  // create cache directory
  try {
    fs.statSync(options.cache_dir)
  }
  catch (e) {
    fs.mkdirSync(options.cache_dir, 0755)
  }

  return app

  // stuff

  function getBranchEnv(branch) {
    var branchMap = options.branchMap || {
      qa: /^qa/,
      prod: /^prod/,
      staging: /.*/
    }

    if (fullConfig[branch]) {
      return branch
    }

    for (var env in branchMap) {
      if (branchMap[env].test(branch)) {
        return env
      }
    }

    return 'dev'
  }
}

pergament.express = express
pergament.S3 = S3
pergament.AWS = require('aws-sdk')
pergament.lodash = _
pergament.async = require('async')
pergament.request = require('request')
pergament.utils = utils

// some middleware helpers  
pergament.chain = function() {
  var chain = _.toArray(arguments)

  return function(req, res, next) {
    var i = 0

    function nextMiddleware() {
      if (!chain[i]) return next()

      chain[i++].call(null, req, res, function(err){
        if (err) return next(err)
        nextMiddleware()
      })
    }

    return nextMiddleware()
  }
}

pergament.pass = function(req, res, next) {
  return next()
}

function validateBranch(branch) {
  // validate branch value
  // if origin/master" is given, turn it into just "master"
  if (branch && branch.indexOf('/')) {
    branch = branch.replace(/^.+\//, '')
  }
  return branch
}

module.exports = pergament
 at SyntaxError: Invalid number (339:36)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.expect (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:597:10)
    at Parser.pp$3.parseExprList (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2152:16)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
