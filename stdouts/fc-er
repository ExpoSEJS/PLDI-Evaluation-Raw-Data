/root/Targets/fc-er
└─┬ fc-er@1.2.9 
  ├── amdefine@1.0.1 
  ├── eoo@0.1.3 
  └── fc-mini-event@1.1.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/fc-er/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 30% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","isArray","apply","join"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0521 took 4.9206s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (19:8) on program var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}

define(function (require) {
    'use strict';

    var URL = require('./URL');
    var config = require('./config');
    var util = require('./util');
    var assert = require('./assert');
    var EventTarget = require('fc-mini-event/EventTarget');
    var Permission = require('./permission').Permission;
    var router = require('./router');
    var canUseDOM = require('./ExecutionEnvironment').canUseDOM;

    var removeChildAction = function removeChildAction(controller, container, targetContext) {
        var info = controller.childActionMapping[container.id];
        if (!info) {
            return;
        }

        controller.childActionMapping[container.id] = undefined;
        if (info.hijack) {
            if (container.removeEventListener) {
                container.removeEventListener('click', info.hijack, false);
            } else {
                container.detachEvent('onclick', info.hijack);
            }
        }

        if (info.action) {
            targetContext = targetContext || {
                url: null,
                referrer: info.url,
                container: container.id,
                isChildAction: true
            };
            var eventBus = controller.getEventBus();
            eventBus && eventBus.fire('leaveaction', {
                controller: controller,
                action: info.action,
                to: targetContext
            });
        }

        if (typeof info.action.leave === 'function') {
            info.action.leave();
        }
    };

    var addChildAction = function addChildAction(controller, container, action, hijack, context) {
        removeChildAction(controller, container, context);

        if (container.addEventListener) {
            container.addEventListener('click', hijack, false);
        } else {
            container.attachEvent('onclick', hijack);
        }

        controller.childActionMapping[container.id] = {
            url: context.url,
            container: container.id,
            action: action,
            hijack: hijack
        };

        if (action instanceof EventTarget) {
            // 在Action销毁的时候要取消掉
            action.on('leave', function () {
                removeChildAction(controller, container);
            });
        }
    };

    var Controller = function (_EventTarget) {
        _inherits(Controller, _EventTarget);

        function Controller() {
            _classCallCheck(this, Controller);

            var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Controller).call(this));

            _this.childActionMapping = {};
            _this.currentURL = null;
            _this.currentAction = null;
            _this.globalActionLoader = null;
            _this.childActionLoaders = {};
            return _this;
        }

        _createClass(Controller, [{
            key: 'registerAction',
            value: function registerAction(actionConfigs) {
                var main = require('./main');
                main.registerAction(actionConfigs);
            }
        }, {
            key: 'getDefaultTitle',
            value: function getDefaultTitle() {
                return this.defaultTitle;
            }
        }, {
            key: 'setDefaultTitle',
            value: function setDefaultTitle(title) {
                this.defaultTitle = title;
            }
        }, {
            key: 'setErContext',
            value: function setErContext(erContext) {
                this.erContext = erContext;
            }
        }, {
            key: 'getErContext',
            value: function getErContext() {
                return this.erContext;
            }
        }, {
            key: 'getRouter',
            value: function getRouter() {
                return this.erContext && this.erContext.getRouter();
            }
        }, {
            key: 'setRouter',
            value: function setRouter(router) {
                this.erContext && this.erContext.setRouter(router);
            }
        }, {
            key: 'getLocator',
            value: function getLocator() {
                return this.erContext && this.erContext.getLocator();
            }
        }, {
            key: 'setLocator',
            value: function setLocator(locator) {
                this.erContext && this.erContext.setLocator(locator);
            }
        }, {
            key: 'getEventBus',
            value: function getEventBus() {
                return this.erContext && this.erContext.getEventBus();
            }
        }, {
            key: 'setEventBus',
            value: function setEventBus(eventBus) {
                this.erContext && this.erContext.setEventBus(eventBus);
            }
        }, {
            key: 'getPermissionProvider',
            value: function getPermissionProvider() {
                return this.erContext && this.erContext.getPermissionProvider();
            }
        }, {
            key: 'setPermissionProvider',
            value: function setPermissionProvider(permissionProvider) {
                this.erContext && this.erContext.setPermissionProvider(permissionProvider);
            }
        }, {
            key: 'getMainContainer',
            value: function getMainContainer() {
                return this.mainContainer || config.mainElement;
            }
        }, {
            key: 'setMainContainer',
            value: function setMainContainer(mainContainer) {
                this.mainContainer = mainContainer;
            }
        }, {
            key: 'getNoAuthorityLocation',
            value: function getNoAuthorityLocation() {
                return this.noAuthorityLocation || config.noAuthorityLocation;
            }
        }, {
            key: 'setNoAuthorityLocation',
            value: function setNoAuthorityLocation(noAuthorityLocation) {
                this.noAuthorityLocation = noAuthorityLocation;
            }
        }, {
            key: 'getNotFoundLocation',
            value: function getNotFoundLocation() {
                return this.notFoundLocation || config.notFoundLocation;
            }
        }, {
            key: 'setNotFoundLocation',
            value: function setNotFoundLocation(notFoundLocation) {
                this.notFoundLocation = notFoundLocation;
            }
        }, {
            key: 'start',
            value: function start() {
                if (canUseDOM && !this.getDefaultTitle()) {
                    this.setDefaultTitle(config.systemName || global.document.title);
                }

                var router = this.getRouter();
                router && router.setBackup(util.bind(this.renderAction, this));
            }
        }, {
            key: 'findActionConfig',
            value: function findActionConfig(actionContext) {
                var main = require('./main');
                return main.findActionConfig(actionContext);
            }
        }, {
            key: 'resolveActionConfig',
            value: function resolveActionConfig(actionConfig, actionContext) {
                return actionConfig;
            }
        }, {
            key: 'checkAuthority',
            value: function checkAuthority(actionConfig, actionContext) {
                var authority = actionConfig.authority;
                if (!authority) {
                    return true;
                }

                var permissionProvider = this.getPermissionProvider();
                if (!permissionProvider) {
                    return true;
                }

                if (typeof authority === 'function') {
                    return authority(actionContext, actionConfig, permissionProvider);
                }

                if (typeof authority === 'string') {
                    authority = authority.split('|');
                }

                for (var i = 0; i < authority.length; i++) {
                    if (permissionProvider.isAllow(util.trim(authority[i]))) {
                        return true;
                    }
                }

                return false;
            }
        }, {
            key: 'findEligibleActionConfig',
            value: function findEligibleActionConfig(actionContext) {
                var actionConfig = this.findActionConfig(actionContext);
                var eventBus = this.getEventBus();

                if (actionConfig && actionConfig.movedTo) {
                    eventBus && eventBus.fire('actionmoved', {
                        controller: this,
                        url: actionContext.url,
                        config: actionConfig,
                        movedTo: actionConfig.movedTo
                    });
                    actionContext.originalURL = actionContext.url;
                    actionContext.url = URL.parse(actionConfig.movedTo);

                    return this.findEligibleActionConfig(actionContext);
                }

                if (actionConfig && actionConfig.childActionOnly && !actionContext.isChildAction) {
                    actionConfig = null;
                }

                if (!actionConfig) {
                    eventBus && eventBus.fire('actionnotfound', util.mix({
                        controller: this,
                        failType: 'NotFound',
                        reason: 'Not found'
                    }, actionContext));

                    actionContext.originalURL = actionContext.url;
                    actionContext.url = URL.parse(this.getNotFoundLocation());

                    if (!this.findActionConfig(actionContext)) {
                        return null;
                    }

                    return this.findEligibleActionConfig(actionContext);
                }

                var hasAuthority = this.checkAuthority(actionConfig, actionContext);
                if (!hasAuthority) {
                    eventBus && eventBus.fire('permissiondenied', util.mix({
                        controller: this,
                        failType: 'PermissionDenied',
                        reason: 'Permission denied',
                        config: actionConfig
                    }, actionContext));

                    var location = actionConfig.noAuthorityLocation || this.getNoAuthorityLocation();
                    actionContext.originalURL = actionContext.url;
                    actionContext.url = URL.parse(location);
                    return this.findEligibleActionConfig(actionContext);
                }

                return actionConfig;
            }
        }, {
            key: 'loadAction',
            value: function loadAction(actionContext) {
                var _this2 = this;

                var actionConfig = this.findEligibleActionConfig(actionContext);
                actionConfig = this.resolveActionConfig(actionConfig, actionContext);
                var eventBus = this.getEventBus();

                if (!actionConfig) {
                    var failed = new Promise(function (resolve, reject) {
                        reject('no action configured for url ' + actionContext.url.getPath());
                    });

                    return failed;
                }

                if (actionConfig.title) {
                    actionContext.title = actionConfig.title;
                    actionContext.args.title = actionConfig.title;
                }

                if (actionConfig.documentTitle) {
                    actionContext.documentTitle = actionConfig.documentTitle;
                    actionContext.args.documentTitle = actionConfig.documentTitle;
                }

                if (actionConfig.args) {
                    for (var name in actionConfig.args) {
                        if (actionConfig.args.hasOwnProperty(name)) {
                            if (!actionContext.args.hasOwnProperty(name)) {
                                actionContext.args[name] = actionConfig.args[name];
                            }
                            if (!actionContext.hasOwnProperty(name)) {
                                actionContext[name] = actionConfig.args[name];
                            }
                        }
                    }
                }

                var loading = {};
                var loader = new Promise(function (resolve, reject) {
                    loading.resolve = resolve;
                    loading.reject = reject;
                });

                var aborted = false;
                loader.abort = function () {
                    if (!aborted) {
                        aborted = true;
                        eventBus && eventBus.fire('actionabort', util.mix({
                            controller: _this2
                        }, actionContext));
                    }
                };

                if (!actionContext.isChildAction) {
                    this.currentURL = actionContext.url;
                }

                var callback = function callback(SpecificAction) {
                    if (aborted) {
                        return;
                    }

                    if (!SpecificAction) {
                        var reason = 'No action implement for ' + actionConfig.type;
                        var error = util.mix({
                            controller: _this2,
                            failType: 'NoModule',
                            config: actionConfig,
                            reason: reason
                        }, actionContext);

                        eventBus && eventBus.fire('actionfail', error);
                        eventBus && eventBus.notifyError(error);
                        loading.reject(reason);
                        return;
                    }

                    eventBus && eventBus.fire('actionloaded', {
                        controller: _this2,
                        url: actionContext.url,
                        config: actionConfig,
                        action: SpecificAction
                    });

                    if (typeof SpecificAction === 'function') {
                        loading.resolve({
                            action: new SpecificAction(),
                            actionContext: actionContext
                        });
                    } else if (typeof SpecificAction.createRuntimeAction === 'function') {
                        var resolveActionInstance = function resolveActionInstance(args) {
                            var action = args.action;

                            if (!action) {
                                var _reason = 'Action factory returns non-action';
                                var _error = util.mix({
                                    controller: _this2,
                                    failType: 'InvalidFactory',
                                    config: actionConfig,
                                    reason: _reason,
                                    action: action
                                }, actionContext);
                                eventBus && eventBus.fire('actionfail', _error);
                                eventBus && eventBus.notifyError(_error);

                                loading.reject(_reason);
                            } else {
                                loading.resolve({ action: action, actionContext: actionContext });
                            }
                        };
                        var actionFactoryProduct = SpecificAction.createRuntimeAction(actionContext);
                        Promise.resolve(actionFactoryProduct).then(resolveActionInstance);
                    } else {
                        loading.resolve({
                            action: SpecificAction,
                            actionContext: actionContext
                        });
                    }
                };

                if (typeof actionConfig.type === 'string') {
                    Controller.getRequire()([actionConfig.type], callback);
                } else {
                    callback(actionConfig.type);
                }

                return loader;
            }
        }, {
            key: 'enterAction',
            value: function enterAction(action, actionContext) {
                var _this3 = this;

                var eventBus = this.getEventBus();

                if (!actionContext.isChildAction) {
                    if (actionContext.url !== this.currentURL) {
                        return;
                    }

                    if (this.currentAction) {
                        eventBus && eventBus.fire('leaveaction', {
                            controller: this,
                            action: this.currentAction,
                            to: util.mix({}, actionContext)
                        });

                        if (typeof this.currentAction.leave === 'function') {
                            this.currentAction.leave();
                        }
                    }
                    this.currentAction = action;

                    if (global.document) {
                        global.document.title = actionContext.title || actionContext.documentTitle || this.getDefaultTitle();
                    }
                }

                eventBus && eventBus.fire('enteraction', util.mix({
                    controller: this,
                    action: action
                }, actionContext));

                var notifyEnterComplete = function notifyEnterComplete() {
                    eventBus && eventBus.fire('enteractioncomplete', util.mix({
                        controller: _this3,
                        action: action
                    }, actionContext));
                };

                var notifyEnterFail = function notifyEnterFail(reason) {
                    var message = '';
                    if (!reason) {
                        message = 'Invoke action.enter() causes error';
                    } else if (reason.message) {
                        message = reason.message;
                        if (reason.stack) {
                            message += '\n' + reason.stack;
                        }
                    } else if (JSON && typeof JSON.stringify === 'function') {
                        try {
                            message = JSON.stringify(reason);
                        } catch (parseJSONError) {
                            message = reason;
                        }
                    } else {
                        message = reason;
                    }

                    var error = util.mix({
                        failType: 'EnterFail',
                        reason: message
                    }, actionContext);

                    eventBus && eventBus.fire('enteractionfail', error);
                    eventBus && eventBus.notifyError(error);
                };

                var entering = action.enter(actionContext);
                entering.then(notifyEnterComplete, notifyEnterFail);

                return entering;
            }
        }, {
            key: 'forward',
            value: function forward(url, container, options, isChildAction) {
                var actionContext = {
                    url: url,
                    container: container,
                    isChildAction: !!isChildAction
                };
                var eventBus = this.getEventBus();

                if (isChildAction) {
                    var referrerInfo = this.childActionMapping[container];
                    actionContext.referrer = referrerInfo ? referrerInfo.url : null;
                } else {
                    actionContext.referrer = this.currentURL;
                }

                util.mix(actionContext, options);

                actionContext.args = util.mix({}, actionContext);
                util.mix(actionContext.args, url.getQuery());

                if (!isChildAction && this.rehydratedCurrentURL && this.rehydratedCurrentURL.getPath() === url.getPath()) {
                    actionContext.rehydratedModel = this.rehydratedModel;
                    this.rehydratedCurrentURL = null;
                    this.rehydratedModel = null;
                }
                actionContext.erContext = this.getErContext();

                eventBus && eventBus.fire('forwardaction', util.mix({ controller: this }, actionContext));
                var loader = this.loadAction(actionContext);
                assert.has(loader, 'loadAction should always return a Promise');

                return loader;
            }
        }, {
            key: 'renderAction',
            value: function renderAction(url) {
                var _this4 = this;

                if (typeof url === 'string') {
                    url = URL.parse(url);
                }
                if (this.globalActionLoader && typeof this.globalActionLoader.abort === 'function') {
                    this.globalActionLoader.abort();
                }

                if (this.currentAction && typeof this.currentAction.filterRedirect === 'function' && this.currentAction.filterRedirect(url) === false) {
                    return Promise.reject('Redirect aborted by previous action');
                }

                this.globalActionLoader = this.forward(url, this.getMainContainer(), null, false);
                var eventBus = this.getEventBus();

                return this.globalActionLoader.then(function (args) {
                    return _this4.enterAction.call(_this4, args.action, args.actionContext);
                }).then(null, function (error) {
                    eventBus && eventBus.notifyError(error);
                    throw error;
                });
            }
        }, {
            key: 'enterChildAction',
            value: function enterChildAction(action, actionContext) {
                this.childActionLoaders[actionContext.container] = null;

                var container = void 0;
                if (global.document && global.document.getElementById) {
                    container = global.document.getElementById(actionContext.container);
                }
                if (!container) {
                    return;
                }

                var locator = this.getLocator();
                var currentController = this;

                var redirect = function redirect(url, options, extra) {
                    options = options || {};
                    url = locator.resolveURL(url, options);

                    if (options.global) {
                        var globalRedirectPerformed = locator.redirect(url, options);
                        if (globalRedirectPerformed && container) {
                            removeChildAction(currentController, container);
                        }
                        return globalRedirectPerformed;
                    }

                    var childActionInfo = currentController.childActionMapping[actionContext.container];
                    var changed = url.toString() !== childActionInfo.url.toString();
                    var shouldPerformRedirect = changed || options.force;
                    if (shouldPerformRedirect) {
                        if (options.silent) {
                            childActionInfo.url = url;
                        } else {
                            currentController.renderChildAction(url, childActionInfo.container, extra);
                        }
                    }

                    return shouldPerformRedirect;
                };

                var isChildActionRedirected = function isChildActionRedirected(e) {
                    // 除低版本IE外，其它浏览器是可以在事件对象上加自定义属性的，IE每次都生成新的事件对象所以保留不了这些属性，
                    // 在这里优先用自定义属性控制，避免对DOM树无意义的遍历，只有在没有属性的时候，才向后兼容至DOM树的遍历
                    if (e.isChildActionRedirected) {
                        return true;
                    }

                    var innermostContainer = e.target || e.srcElement;
                    while (innermostContainer) {
                        // 是Action容器的元素肯定符合以下条件：
                        //
                        // - 有个`id`，因为没有`id`不能渲染子Action
                        // - 这个`id`在`childActionMapping`里是有对应的值的
                        if (innermostContainer.id && currentController.childActionMapping[innermostContainer.id]) {
                            break;
                        }

                        innermostContainer = innermostContainer.parentNode;
                    }
                    // 如果最接近被点击的链接的Action容器是不是当前的这个容器，就说明在当前容器和链接之间还有一层以上的子Action，
                    // 那么这个子Action肯定会处理掉这个链接的跳转，不需要这里处理了
                    if (innermostContainer.id !== actionContext.container) {
                        e.isChildActionRedirected = true;
                        return true;
                    }

                    return false;
                };

                // 需要把`container`上的链接点击全部拦截下来，如果是hash跳转，则转到controller上来
                var hijack = function hijack(e) {
                    // 下面两行是以主流浏览器为主，兼容IE的事件属性操作
                    e = e || global.window && global.window.event;
                    var target = e.target || e.srcElement;

                    // 担心有人在`<span>`之类的上面放`href`属性，还是判断一下标签
                    if (target.nodeName.toLowerCase() !== 'a') {
                        return;
                    }

                    // `<a>`元素也可能没有`href`属性
                    var href = target.getAttribute('href', 2) || '';
                    // 是hash跳转的链接就取消掉默认的跳转行为
                    if (href.charAt(0) !== '#') {
                        return;
                    }
                    // 如果有下面的子Action处理了跳转，那这里就啥也不干了
                    if (isChildActionRedirected(e)) {
                        return;
                    }

                    if (e.preventDefault) {
                        e.preventDefault();
                    } else {
                        e.returnValue = false;
                    }

                    // 转到`renderChildAction`上
                    var url = href.substring(1);

                    // 直接使用专供子Action上的`redirect`方法，
                    // 会自动处理`hijack`的解绑定、URL比对、进入子Action等事，
                    // 为免Action重写`redirect`方法，这里用闭包内的这个
                    var redirectAttributes = (target.getAttribute('data-redirect') || '').split(/[,\s]/);
                    var redirectOptions = {};
                    for (var i = 0; i < redirectAttributes.length; i++) {
                        var redirectAttributeName = util.trim(redirectAttributes[i]);
                        redirectOptions[redirectAttributeName] = true;
                    }
                    redirect(url, redirectOptions);
                };

                action.redirect = redirect;

                action.reload = function (extra) {
                    this.redirect(actionContext.url, { force: true }, extra);
                };

                action.back = function (defaultURL, extra) {
                    var referrer = this.context && this.context.referrer;
                    var url = referrer || defaultURL;
                    this.redirect(url, null, extra);
                };
                addChildAction(this, container, action, hijack, actionContext);

                return this.enterAction(action, actionContext);
            }
        }, {
            key: 'renderChildAction',
            value: function renderChildAction(url, container, options) {
                var _this5 = this;

                assert.has(container);

                if (typeof url === 'string') {
                    url = URL.parse(url);
                }

                var previousLoader = this.childActionLoaders[container];
                if (previousLoader && typeof previousLoader.abort === 'function') {
                    previousLoader.abort();
                }

                var actionInfo = this.childActionMapping[container];
                var previousAction = actionInfo && actionInfo.action;
                if (previousAction && typeof previousAction.filterRedirect === 'function' && previousAction.filterRedirect(url) === false) {
                    return Promise.reject('Redirect aborted by previous action');
                }

                var loader = this.forward(url, container, options, true);
                var events = this.getEventBus();
                var loadingChildAction = loader.then(function (args) {
                    return _this5.enterChildAction.call(_this5, args.action, args.actionContext);
                }).then(null, util.bind(events.notifyError, events));
                // `then`方法会返回一个新的`Promise`，但原来的`loader`上有个`abort`方法，要把这个方法留下来
                loadingChildAction.abort = loader.abort;
                this.childActionLoaders[container] = loadingChildAction;
                return loadingChildAction;
            }
        }, {
            key: 'rehydrate',
            value: function rehydrate(rehydratedState) {
                if (rehydratedState && rehydratedState.currentURL) {
                    this.rehydratedCurrentURL = URL.parse(rehydratedState.currentURL);
                    this.rehydratedModel = util.mix({}, rehydratedState.model, { url: this.rehydratedCurrentURL });
                }
            }
        }], [{
            key: 'getRequire',
            value: function getRequire() {
                return Controller.require || require;
            }
        }, {
            key: 'setRequire',
            value: function setRequire(require) {
                Controller.require = require;
            }
        }]);

        return Controller;
    }(EventTarget);

    var instance = new Controller();
    instance.Controller = Controller;

    return instance;
});
//# sourceMappingURL=data:application/json;base64, at SyntaxError: Unexpected token (19:8)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/fc-er/node_modules/fc-er/main.js. Coverage (Term): 15% Coverage (LOC): 14%
*- File /root/Targets/fc-er/node_modules/amdefine/amdefine.js. Coverage (Term): 48% Coverage (LOC): 53%
*- File /root/Targets/fc-er/node_modules/fc-er/ErContext.js. Coverage (Term): 7% Coverage (LOC): 8%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
