/root/Targets/itsa-react-multiselect
├─┬ itsa-react-multiselect@16.0.3 
│ ├─┬ itsa-jsext@1.4.0 
│ │ └── itsa-utils@1.4.0 
│ ├─┬ itsa-react-select@16.0.4 
│ │ ├── itsa-dom@1.2.0 
│ │ ├── itsa-react-button@16.0.2 
│ │ ├── itsa-react-clone-props@1.1.0 
│ │ ├─┬ itsa-react-focuscontainer@16.0.3 
│ │ │ └─┬ itsa-event@1.1.10 
│ │ │   └── itsa-classes@1.0.3 
│ │ └── UNMET PEER DEPENDENCY react@>=15
│ ├─┬ prop-types@15.6.0 
│ │ ├─┬ fbjs@0.8.16 
│ │ │ ├── core-js@1.2.7 
│ │ │ ├─┬ isomorphic-fetch@2.2.1 
│ │ │ │ ├─┬ node-fetch@1.7.3 
│ │ │ │ │ ├─┬ encoding@0.1.12 
│ │ │ │ │ │ └── iconv-lite@0.4.19 
│ │ │ │ │ └── is-stream@1.1.0 
│ │ │ │ └── whatwg-fetch@2.0.3 
│ │ │ ├─┬ promise@7.3.1 
│ │ │ │ └── asap@2.0.6 
│ │ │ ├── setimmediate@1.0.5 
│ │ │ └── ua-parser-js@0.7.14 
│ │ ├─┬ loose-envify@1.3.1 
│ │ │ └── js-tokens@3.0.2 
│ │ └── object-assign@4.1.1 
│ └── UNMET PEER DEPENDENCY react@^15.0.1
└── UNMET PEER DEPENDENCY react@>=15

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/itsa-react-multiselect/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0704 took 2.6845s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (76:12) on program "use strict";

/**
 * Description here
 *
 *
 *
 * <i>Copyright (c) 2016 ItsAsbreuk - http://itsasbreuk.nl</i><br>
 * New BSD License - http://choosealicense.com/licenses/bsd-3-clause/
 *
 *
 * @module component.jsx
 * @class Component
 * @since 15.0.0
*/

require("itsa-jsext");

const React = require("react"),
    PropTypes = require("prop-types"),
    Select = require("itsa-react-select");

const sortFn = (a, b) => {
    const aInt = parseInt(a, 10),
        bInt = parseInt(b, 10);
    if (aInt<bInt) {
        return -1;
    }
    if (bInt<aInt) {
        return 1;
    }
    return 0;
};

class MultiSelect extends React.Component {
    constructor(props) {
        super(props);
        const instance = this;
        instance.btnRenderer = instance.btnRenderer.bind(instance);
        instance.selectedItemRenderer = instance.selectedItemRenderer.bind(instance);
    }

    btnRenderer() {
        // only return something if there are items selected
        let selected = this.props.selected;
        if (typeof selected==='number') {
            selected = [selected];
        }
        if (selected && (selected.length>0)) {
            selected = selected.itsa_deepClone().sort(sortFn);
            return selected.map(this.selectedItemRenderer).join(' ');
        }
    }

    selectedItemRenderer(item) {
        return '<span class="multiselect-selected-item">'+this.props.items[item]+'</span>';
    }

    /**
     * React render-method --> renderes the Component.
     *
     * @method render
     * @return ReactComponent
     * @since 15.0.0
     */
    render() {
        let className = 'itsa-multiselect';
        const props = this.props,
            propsClassName = props.className,
            selected = props.selected;
        propsClassName && (className+=' ' + propsClassName);
        if ((typeof selected==='number') || (Array.isArray(selected) && (selected.length>0))) {
            className += ' has-items';
        }
        return (
            <Select {...props} btnRenderer={this.btnRenderer} className={className} multiSelect={true} />
        );
    }
}

MultiSelect.propTypes = {
    /**
     * Whether to close the select-list when an item is clicked
     *
     * @property closeOnClick
     * @type Boolean
     * @default false
     * @since 15.2.0
    */
    closeOnClick: PropTypes.bool,
};

MultiSelect.defaultProps = {
    closeOnClick: false
};

module.exports = MultiSelect;
 at SyntaxError: Unexpected token (76:12)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseParenAndDistinguishExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1861:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
