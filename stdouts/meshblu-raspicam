/root/Targets/meshblu-raspicam
└─┬ meshblu-raspicam@1.0.0 
  ├─┬ base64-img@1.0.3 
  │ ├─┬ ajax-request@1.2.3 
  │ │ └── utils-extend@1.0.8 
  │ └─┬ file-system@2.2.2 
  │   └── file-match@1.0.2 
  ├─┬ debug@2.6.8 
  │ └── ms@2.0.0 
  ├─┬ fstream@1.0.8 
  │ ├── graceful-fs@4.1.2 
  │ ├── inherits@2.0.1 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ └─┬ rimraf@2.5.0 
  │   └─┬ glob@6.0.3 
  │     ├─┬ inflight@1.0.4 
  │     │ └── wrappy@1.0.1 
  │     ├─┬ minimatch@3.0.0 
  │     │ └─┬ brace-expansion@1.1.2 
  │     │   ├── balanced-match@0.3.0 
  │     │   └── concat-map@0.0.1 
  │     ├── once@1.3.3 
  │     └── path-is-absolute@1.0.0 
  ├── lodash@3.10.1 
  ├─┬ meshblu@1.34.1 
  │ ├── backo@1.1.0 
  │ ├─┬ fstream@1.0.9 
  │ │ ├── graceful-fs@4.1.4 
  │ │ ├── inherits@2.0.1 
  │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ └── minimist@0.0.8 
  │ │ └─┬ rimraf@2.5.2 
  │ │   └─┬ glob@7.0.3 
  │ │     ├─┬ inflight@1.0.5 
  │ │     │ └── wrappy@1.0.2 
  │ │     ├─┬ minimatch@3.0.0 
  │ │     │ └─┬ brace-expansion@1.1.4 
  │ │     │   ├── balanced-match@0.4.1 
  │ │     │   └── concat-map@0.0.1 
  │ │     ├── once@1.3.3 
  │ │     └── path-is-absolute@1.0.0 
  │ ├─┬ json-stable-stringify@1.0.1 
  │ │ └── jsonify@0.0.0 
  │ ├─┬ node-rsa@0.2.30 
  │ │ ├── asn1@0.2.3 
  │ │ └── lodash@3.3.0 
  │ ├─┬ request@2.72.0 
  │ │ ├── aws-sign2@0.6.0 
  │ │ ├── aws4@1.4.1 
  │ │ ├─┬ bl@1.1.2 
  │ │ │ └─┬ readable-stream@2.0.6 
  │ │ │   ├── core-util-is@1.0.2 
  │ │ │   ├── isarray@1.0.0 
  │ │ │   ├── process-nextick-args@1.0.7 
  │ │ │   ├── string_decoder@0.10.31 
  │ │ │   └── util-deprecate@1.0.2 
  │ │ ├── caseless@0.11.0 
  │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ └── delayed-stream@1.0.0 
  │ │ ├── extend@3.0.0 
  │ │ ├── forever-agent@0.6.1 
  │ │ ├─┬ form-data@1.0.0-rc4 
  │ │ │ └── async@1.5.2 
  │ │ ├─┬ har-validator@2.0.6 
  │ │ │ ├─┬ chalk@1.1.3 
  │ │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ │ ├── escape-string-regexp@1.0.5 
  │ │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ │ └── ansi-regex@2.0.0 
  │ │ │ │ ├── strip-ansi@3.0.1 
  │ │ │ │ └── supports-color@2.0.0 
  │ │ │ ├─┬ commander@2.9.0 
  │ │ │ │ └── graceful-readlink@1.0.1 
  │ │ │ ├─┬ is-my-json-valid@2.13.1 
  │ │ │ │ ├── generate-function@2.0.0 
  │ │ │ │ ├─┬ generate-object-property@1.2.0 
  │ │ │ │ │ └── is-property@1.0.2 
  │ │ │ │ ├── jsonpointer@2.0.0 
  │ │ │ │ └── xtend@4.0.1 
  │ │ │ └─┬ pinkie-promise@2.0.1 
  │ │ │   └── pinkie@2.0.4 
  │ │ ├─┬ hawk@3.1.3 
  │ │ │ ├── boom@2.10.1 
  │ │ │ ├── cryptiles@2.0.5 
  │ │ │ ├── hoek@2.16.3 
  │ │ │ └── sntp@1.0.9 
  │ │ ├─┬ http-signature@1.1.1 
  │ │ │ ├── assert-plus@0.2.0 
  │ │ │ ├─┬ jsprim@1.2.2 
  │ │ │ │ ├── extsprintf@1.0.2 
  │ │ │ │ ├── json-schema@0.2.2 
  │ │ │ │ └── verror@1.3.6 
  │ │ │ └─┬ sshpk@1.8.3 
  │ │ │   ├── asn1@0.2.3 
  │ │ │   ├── assert-plus@1.0.0 
  │ │ │   ├─┬ dashdash@1.14.0 
  │ │ │   │ └── assert-plus@1.0.0 
  │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │   ├─┬ getpass@0.1.6 
  │ │ │   │ └── assert-plus@1.0.0 
  │ │ │   ├── jodid25519@1.0.2 
  │ │ │   ├── jsbn@0.1.0 
  │ │ │   └── tweetnacl@0.13.3 
  │ │ ├── is-typedarray@1.0.0 
  │ │ ├── isstream@0.1.2 
  │ │ ├── json-stringify-safe@5.0.1 
  │ │ ├─┬ mime-types@2.1.11 
  │ │ │ └── mime-db@1.23.0 
  │ │ ├── node-uuid@1.4.7 
  │ │ ├── oauth-sign@0.8.2 
  │ │ ├── qs@6.1.0 
  │ │ ├── stringstream@0.0.5 
  │ │ ├── tough-cookie@2.2.2 
  │ │ └── tunnel-agent@0.4.3 
  │ ├─┬ socket.io-client@1.7.4 
  │ │ ├── backo2@1.0.2 
  │ │ ├── component-bind@1.0.0 
  │ │ ├── component-emitter@1.2.1 
  │ │ ├─┬ debug@2.3.3 
  │ │ │ └── ms@0.7.2 
  │ │ ├─┬ engine.io-client@1.8.4 
  │ │ │ ├── component-inherit@0.0.3 
  │ │ │ ├─┬ debug@2.3.3 
  │ │ │ │ └── ms@0.7.2 
  │ │ │ ├─┬ engine.io-parser@1.3.2 
  │ │ │ │ ├── after@0.8.2 
  │ │ │ │ ├── arraybuffer.slice@0.0.6 
  │ │ │ │ ├── base64-arraybuffer@0.1.5 
  │ │ │ │ ├── blob@0.0.4 
  │ │ │ │ └── wtf-8@1.0.0 
  │ │ │ ├── has-cors@1.1.0 
  │ │ │ ├── parsejson@0.0.3 
  │ │ │ ├── parseqs@0.0.5 
  │ │ │ ├─┬ ws@1.1.2 
  │ │ │ │ ├── options@0.0.6 
  │ │ │ │ └── ultron@1.0.2 
  │ │ │ ├── xmlhttprequest-ssl@1.5.3 
  │ │ │ └── yeast@0.1.2 
  │ │ ├─┬ has-binary@0.1.7 
  │ │ │ └── isarray@0.0.1 
  │ │ ├── indexof@0.0.1 
  │ │ ├── object-component@0.0.3 
  │ │ ├─┬ parseuri@0.0.5 
  │ │ │ └─┬ better-assert@1.0.2 
  │ │ │   └── callsite@1.0.0 
  │ │ ├─┬ socket.io-parser@2.3.1 
  │ │ │ ├── component-emitter@1.1.2 
  │ │ │ ├─┬ debug@2.2.0 
  │ │ │ │ └── ms@0.7.1 
  │ │ │ └── json3@3.3.2 
  │ │ └── to-array@0.1.4 
  │ ├─┬ tar@2.2.1 
  │ │ └── block-stream@0.0.9 
  │ └─┬ url@0.10.3 
  │   ├── punycode@1.3.2 
  │   └── querystring@0.2.0 
  ├─┬ meshblu-config@3.2.0 
  │ └── coffee-script@1.12.7 
  ├── raspicam@0.2.14 
  ├─┬ request@2.67.0 
  │ ├── aws-sign2@0.6.0 
  │ ├─┬ bl@1.0.0 
  │ │ └─┬ readable-stream@2.0.5 
  │ │   ├── core-util-is@1.0.2 
  │ │   ├── isarray@0.0.1 
  │ │   ├── process-nextick-args@1.0.6 
  │ │   ├── string_decoder@0.10.31 
  │ │   └── util-deprecate@1.0.2 
  │ ├── caseless@0.11.0 
  │ ├─┬ combined-stream@1.0.5 
  │ │ └── delayed-stream@1.0.0 
  │ ├── extend@3.0.0 
  │ ├── forever-agent@0.6.1 
  │ ├─┬ form-data@1.0.0-rc3 
  │ │ └── async@1.5.1 
  │ ├─┬ har-validator@2.0.3 
  │ │ ├─┬ chalk@1.1.1 
  │ │ │ ├── ansi-styles@2.1.0 
  │ │ │ ├── escape-string-regexp@1.0.4 
  │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ └── ansi-regex@2.0.0 
  │ │ │ ├── strip-ansi@3.0.0 
  │ │ │ └── supports-color@2.0.0 
  │ │ ├─┬ commander@2.9.0 
  │ │ │ └── graceful-readlink@1.0.1 
  │ │ ├─┬ is-my-json-valid@2.12.3 
  │ │ │ ├── generate-function@2.0.0 
  │ │ │ ├─┬ generate-object-property@1.2.0 
  │ │ │ │ └── is-property@1.0.2 
  │ │ │ ├── jsonpointer@2.0.0 
  │ │ │ └── xtend@4.0.1 
  │ │ └─┬ pinkie-promise@2.0.0 
  │ │   └── pinkie@2.0.1 
  │ ├─┬ hawk@3.1.2 
  │ │ ├── boom@2.10.1 
  │ │ ├── cryptiles@2.0.5 
  │ │ ├── hoek@2.16.3 
  │ │ └── sntp@1.0.9 
  │ ├─┬ http-signature@1.1.0 
  │ │ ├── assert-plus@0.1.5 
  │ │ ├─┬ jsprim@1.2.2 
  │ │ │ ├── extsprintf@1.0.2 
  │ │ │ ├── json-schema@0.2.2 
  │ │ │ └── verror@1.3.6 
  │ │ └─┬ sshpk@1.7.2 
  │ │   ├── asn1@0.2.3 
  │ │   ├── assert-plus@0.2.0 
  │ │   ├── dashdash@1.11.0 
  │ │   ├── ecc-jsbn@0.1.1 
  │ │   ├── jodid25519@1.0.2 
  │ │   ├── jsbn@0.1.0 
  │ │   └── tweetnacl@0.13.2 
  │ ├── is-typedarray@1.0.0 
  │ ├── isstream@0.1.2 
  │ ├── json-stringify-safe@5.0.1 
  │ ├─┬ mime-types@2.1.8 
  │ │ └── mime-db@1.20.0 
  │ ├── node-uuid@1.4.7 
  │ ├── oauth-sign@0.8.0 
  │ ├── qs@5.2.0 
  │ ├── stringstream@0.0.5 
  │ ├── tough-cookie@2.2.1 
  │ └── tunnel-agent@0.4.2 
  └─┬ tar@2.2.1 
    └── block-stream@0.0.8 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/meshblu-raspicam/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 26% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","reduce","parseInt","charCodeAt","abs"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.074 took 8.6399s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Invalid number (173:33) on program var events = require('events'),
    spawn = require("child_process").spawn,
    util = require("util"),
    fs = require("fs"),
    _ = require("lodash"),
    __ = require("../lib/fn.js"),
    parameters = require("../options").parameters,
    flags = require("../options").flags;


// maximum timeout allowed by raspicam command
var INFINITY_MS = 999999999;

// flat to tell if a process is running
var PROCESS_RUNNING_FLAG = false;

// commands
var PHOTO_CMD = '/opt/vc/bin/raspistill';
var TIMELAPSE_CMD = '/opt/vc/bin/raspistill';
var VIDEO_CMD = '/opt/vc/bin/raspivid';

// the process id of the process spawned to take photos/video
var child_process = null;


// Exit strategy to kill child process
// (eg. for timelapse) on parent process exit
process.on('exit', function() {
  if(PROCESS_RUNNING_FLAG){
    child_process.kill();
  }
});


/**
 * RaspiCam
 * @constructor
 *
 * @description Raspberry Pi camera controller object
 *
 * @param {Object} opts Options: mode, freq, delay, width, height, quality, encoding, filepath, filename, timeout
 */
function RaspiCam( opts ) {
  
  if ( !(this instanceof RaspiCam) ) {
    return new RaspiCam( opts );
  }

  // Ensure opts is an object
  opts = opts || {};

  if(typeof opts.mode === "undefined" || typeof opts.output === "undefined"){
    console.log("Error: RaspiCam: must define mode and output");
    return false;
  }

  // Initialize this Board instance with
  // param specified properties.
  this.opts = {};
  _.assign( this.opts, opts );

  // If any opts use the abbreviation, convert to
  // the full word (eg. from opts.w to opts.width)
  this.hashOpts( opts );

  // Set up opts defaults
  this.defaultOpts( );

  // Create derivative opts
  this.derivativeOpts( );

  // If this.filepath doesn't exist, make it
  this.createFilepath( );
  
  //child process
  this.child_process = null;

  //directory watcher
  this.watcher = null;

  //events.EventEmitter.call(this);
}

// Inherit event api
util.inherits( RaspiCam, events.EventEmitter );

/**
*
* hashOpts()
*
* Converts any abbreviated opts to their full word equivalent 
* and assigns to this.
* 
**/
RaspiCam.prototype.hashOpts = function(opts){
  for(var opt in opts){
    if(opt.length <= 3){

      // if this opt is in the parameters hash
      if(typeof parameters[opt] !== "undefined"){

        // reassign it to the full word
        this.opts[parameters[opt]] = opts[opt];
        delete this.opts[opt];
      }

      // if this opt is in the flags hash
      if(typeof flags[opt] !== "undefined"){

        // reassign it to the full word
        this.opts[flags[opt]] = opts[opt];
        delete this.opts[opt];
      }
    }
  }
};


/**
*
* defaultOpts()
*
* Parses the opts to set defaults.
*
**/
RaspiCam.prototype.defaultOpts = function(){

  this.opts.mode = this.opts.mode || 'photo';//photo, timelapse or video

  this.opts.width = this.opts.width || 640;
  this.opts.height = this.opts.height || 480;

  this.opts.log = typeof this.opts.log === 'function' ? this.opts.log : console.log;

  // Limit timeout to the maximum value
  // supported by the Raspberry Pi camera,
  // determined by testing.
  if(typeof this.opts.timeout !== "undefined"){
    this.opts.timeout = Math.min( this.opts.timeout, INFINITY_MS );
  }

};


/**
*
* derivativeOpts()
*
* Create any derivative opts, such as filepath and filename
* 
**/
RaspiCam.prototype.derivativeOpts = function(){

  this.filename = this.opts.output.substr( this.opts.output.lastIndexOf("/") + 1 );

  this.filepath = this.opts.output.substr(0, this.opts.output.lastIndexOf("/") + 1 ) || "./";
};


/**
*
* createFilepath()
*
* Create the filepath if it doesn't already exist.
* 
**/
RaspiCam.prototype.createFilepath = function(){
  fs.existsSync = fs.existsSync || require('path').existsSync;
  if( !fs.existsSync( this.filepath )){
    fs.mkdirSync( this.filepath );

    // set write permissions
    fs.chmodSync( this.filepath, 0755 );
  }
};



RaspiCam.prototype.watchDirectory = function( ) {
  //alias to pass to callbacks
  var self = this;

  //close previous directory watcher if any
  if(this.watcher !== null){
    this.watcher.close();
  }

  //start watching the directory where the images will be stored to emit signals on each new photo saved
  this.watcher = fs.watch(this.filepath, function(event, filename){
    //rename is called once, change is called 3 times, so check for rename to elimate duplicates
    if(event === "rename"){
      self.opts.log('raspicam::watcher::event ' + event);

      // only emit read event if it is not a temporary file
      if (filename.indexOf('~') === -1) {
        self.emit( "read", null, new Date().getTime(), filename );
      }
    }else{
      self.opts.log('raspicam::watcher::event ' + event);
      self.emit( event, null, new Date().getTime(), filename );
    }
  });
};

/**
 * start Take a snapshot or start a timelapse or video recording
 * @param  {Number} mode Sensor pin mode value
 * @return {Object} instance
 */
RaspiCam.prototype.start = function( ) {

  if(PROCESS_RUNNING_FLAG){
    return false;
  }

  this.watchDirectory();

  // build the arguments
  var args = [];

  for(var opt in this.opts){
    if(opt !== "mode" && opt !== "log"){
      args.push("--" + opt);
      //don't add value for true flags
      if( this.opts[opt].toString() != "true" && this.opts[opt].toString() != "false"){
        args.push(this.opts[opt].toString());
      }
    }
  }

  var cmd;

  switch(this.opts.mode){
    case 'photo':
      cmd = PHOTO_CMD;
      break;
    case 'timelapse':
      cmd = TIMELAPSE_CMD;

      // if no timelapse frequency provided, return false
      if(typeof this.opts.timelapse === "undefined"){
        this.emit("start", "Error: must specify timelapse frequency option", new Date().getTime() );
        return false;
      }
      // if not timeout provided, set to longest possible
      if(typeof this.opts.timeout === "undefined"){
        this.opts.timeout = INFINITY_MS;
      }
      break;
    case 'video':
      cmd = VIDEO_CMD;
      break;
    default:
      this.emit("start", "Error: mode must be photo, timelapse or video", new Date().getTime() );
      return false;
  }

  //start child process
  this.opts.log('calling....');
  this.opts.log(cmd + ' ' + args.join(" "));
  this.child_process = spawn(cmd, args);
  child_process = this.child_process;
  PROCESS_RUNNING_FLAG = true;

  //set up listeners for stdout, stderr and process exit
  this.addChildProcessListeners();

  this.emit("start", null, new Date().getTime() );
   

  return true;
  
};

// stop the child process
// return true if process was running, false if no process to kill
RaspiCam.prototype.stop = function( ) {

  //close previous directory watcher if any
  if(this.watcher !== null){
    this.watcher.close();
  }

  if(PROCESS_RUNNING_FLAG){
    this.child_process.kill();
    child_process = null;
    PROCESS_RUNNING_FLAG = false;

    this.emit("stop", null, new Date().getTime() );
    return true;
  }else{
    this.emit("stop", "Error: no process was running", new Date().getTime());
    return false;
  }
};


/**
*
* addChildProcessListeners()
* 
* Adds listeners to the child process spawned to take pictures
* or record video (raspistill or raspivideo).
*
**/
RaspiCam.prototype.addChildProcessListeners = function(){
  var self = this;
  var dout, derr;

  this.child_process.stdout.on('data', function (data) {
    self.opts.log('stdout: ' + data);
    dout = data;
  });

  this.child_process.stderr.on('data', function (data) {
    self.opts.log('stderr: ' + data);
    derr = data;
  });

  this.child_process.on('close', function (code) {    
    //emit exit signal for process chaining over time
    self.emit( "exit", new Date().getTime() );

    PROCESS_RUNNING_FLAG = false;
    self.child_process = null;
    child_process = null;
    self.watcher.close();//remove the file watcher
    self.watcher = null;
  });

};


/**
*
* getter
*
**/
RaspiCam.prototype.get = function(opt){
  return this.opts[opt];
};


/**
*
* setter
*
**/
RaspiCam.prototype.set = function(opt, value){
  this.opts[opt] = value;
  if(opt == "output"){
    //regenerate filepath, etc, with new output value
    this.derivativeOpts();
  }
};

module.exports = RaspiCam;

 at SyntaxError: Invalid number (173:33)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.expect (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:597:10)
    at Parser.pp$3.parseExprList (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2152:16)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/meshblu-raspicam/node_modules/meshblu-raspicam/connector.js. Coverage (Term): 5% Coverage (LOC): 5%
*- File /root/Targets/meshblu-raspicam/node_modules/meshblu-raspicam/index.js. Coverage (Term): 14% Coverage (LOC): 7%
*- File /root/Targets/meshblu-raspicam/node_modules/debug/src/index.js. Coverage (Term): 81% Coverage (LOC): 83%
*- File /root/Targets/meshblu-raspicam/node_modules/debug/src/node.js. Coverage (Term): 35% Coverage (LOC): 44%
*- File /root/Targets/meshblu-raspicam/node_modules/debug/src/debug.js. Coverage (Term): 44% Coverage (LOC): 48%
*- File /root/Targets/meshblu-raspicam/node_modules/ms/index.js. Coverage (Term): 12% Coverage (LOC): 15%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
