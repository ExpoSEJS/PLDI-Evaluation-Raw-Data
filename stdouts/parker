/root/Targets/parker
└─┬ parker@0.0.10 
  ├── async@0.2.10 
  ├─┬ cli-color@1.2.0 
  │ ├── ansi-regex@2.1.1 
  │ ├── d@1.0.0 
  │ ├─┬ es5-ext@0.10.30 
  │ │ └── es6-symbol@3.1.1 
  │ ├── es6-iterator@2.0.1 
  │ ├─┬ memoizee@0.4.11 
  │ │ ├── es6-weak-map@2.0.2 
  │ │ ├── event-emitter@0.3.5 
  │ │ ├── is-promise@2.1.0 
  │ │ ├── lru-queue@0.1.0 
  │ │ └── next-tick@1.0.0 
  │ └── timers-ext@0.1.2 
  ├─┬ graceful-fs@3.0.11 
  │ └── natives@1.1.0 
  ├── lodash@3.10.1 
  └── minimist@0.0.7 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/parker/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0389 took 5.1055s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

/*! csstool v0.0.0 - MIT license */

'use strict';

/**
 * Module dependencies
 */

var _ = require('lodash'),
    Parker = require('./lib/Parker'),
    CliController = require('./lib/CliController'),
    metrics = require('./metrics/All'),
    formatters = require('./lib/Formatters'),
    argv = require('minimist')(process.argv.slice(2)),
    fs = require('graceful-fs'),
    async = require('async'),
    path = require('path'),
    info = require('./lib/Info');

var cliController = new CliController();

cliController.on('runPaths', function (filePaths) {
    var stylesheets = [];
    async.each(filePaths, function (filePath, onAllLoad) {
        var onFileLoad = function (err, data) {
            stylesheets.push(data);
        };

        if (!fileIsStylesheet(filePath)) {
            readDirectory(filePath, onFileLoad, onAllLoad);
        }
        else {
            readFile(filePath, function (err, data) { onFileLoad(err, data); onAllLoad();});
        }

    }, function (err) {
        runReport(stylesheets, metrics);
    });
});

cliController.on('runStdin', function () {
    process.stdin.resume();
    process.stdin.setEncoding('utf8');
    var stdinData = '';

    process.stdin.on('data', function(chunk) {
        stdinData += chunk;
    });

    process.stdin.on('end', function() {
        runReport(stdinData, metrics);
    });
});

cliController.on('showVersion', function () {
    info.version();
    process.exit();
});

cliController.on('showHelp', function () {
    info.help();
    process.exit();
});

cliController.on('setFormat', function (format) {
    formatter = formatters[format];

    if (!formatter) {
        console.error('Unknown output format: %s', argv.format);
        console.error('  available: ' + Object.keys(formatters).join(' '));
        process.exit(1);
    }
});

cliController.on('showNumericOnly', function () {
    metrics = _.filter(metrics, function (metric) {
        return metric.format == 'number';
    });
});

var readDirectory = function (directoryPath, onFileLoad, onAllLoad) {
    fs.readdir(directoryPath, function (err, files) {
        async.each(files, function (file, fileDone) {
            if (!fileIsStylesheet(file)) {
                return fileDone();
            }

            readFile(path.join(directoryPath, file), function(err, fileData) {
                onFileLoad(err, fileData);
                fileDone();
            });
        }, onAllLoad);
    });
};

var readFile = function (filePath, onLoad) {
    fs.readFile(filePath, {encoding: 'utf8'}, function (err, fileData) {
        onLoad(err, fileData);
    });
};

var fileIsStylesheet = function (filePath) {
    return filePath.indexOf('.css') !== -1;
};

var runReport = function (stylesheets, metrics) {
    var results = parker.run(stylesheets);
    console.log(formatter(metrics, results));
};

if (module.parent) {
    module.exports = Parker;
} else {
    var parker = new Parker(metrics),
    formatter = formatters['human'];
    cliController.dispatch(argv);
} at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
