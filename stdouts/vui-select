/root/Targets/vui-select
└── vui-select@1.0.8 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/vui-select/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0722 took 5.317s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:78) on program <style scoped>
  /**
   * wrapper
   */
  .vui-select-wrapper {
    display: inline-block;
    font-size: 16px;
    min-height: 48px;
    width: 256px;
    position: relative;
    color: rgba(0,0,0,.54);
    margin-bottom: 8px;
  }
  .vui-select-wrapper * {
    box-sizing: border-box;
  }
  .vui-select-wrapper.full-width {
    width: 100%;
  }
  .vui-select-wrapper.focus-state {
    color: #03a9f4;
  }
  .vui-select-wrapper.has-label {
    min-height: 72px;
  }
  /**
   * content
   */
  .vui-select-content {
    display: block;
    cursor: pointer;
    height: 100%;

    padding-bottom: 8px;
    padding-top: 8px;
  }
  .disabled .vui-select-label {
    cursor: not-allowed;
  }
  .vui-select-wrapper.has-label > .vui-select-content {
    padding-top: 28px;
    padding-bottom: 12px;
  }
  /**
   *  label
   */
  .vui-select-label {
    line-height: 20px;
    transition: all .45s cubic-bezier(.23,1,.32,1);
    z-index: 1;
    cursor: text;
    transform: translateZ(0) scale(.75);
    transform-origin: left top;
    user-select: none;
    pointer-events: none;
    backface-visibility: hidden;
  }
  .disabled .vui-select-label{
    color: rgba(0,0,0,.38);
    cursor: not-allowed;
  }
  .vui-select-wrapper.has-label .vui-select-label {
    top: 8px;
    position: absolute;
  }
  .vui-select-wrapper.has-label .vui-select-label.float {
    -webkit-transform: translate3d(0,28px,0) scale(1);
    transform: translate3d(0,28px,0) scale(1);
    color: rgba(0,0,0,.38);
  }
  /**
   *  list
   */
  .vui-select-input-wrapper {
    display: block;
    min-height: 32px;
    font-size: 15px;
    position: relative;
    transition: all .45s cubic-bezier(.23,1,.32,1);
    cursor: pointer;
    overflow: hidden;
    padding-right: 25px;
  }
  .vui-select-icon {
    position: absolute;
    right: 0;
    bottom: 4px;
    color: rgba(0,0,0,.12);
    fill: currentColor;
    display: inline-block;
    width: 24px;
    height: 24px;
    user-select: none;
  }
  .vui-select-list-wrapper {
    padding: 16px 0;
    user-select: none;
    overflow-y: auto;
    background: #fff;
    border-radius: 2px;
    max-height: 100%;
    box-shadow: 0 1px 6px rgba(0,0,0,.117647),0 1px 4px rgba(0,0,0,.117647);
    transform-origin: center top;
    max-height: 220px;
    position: absolute;
    width: 100%;
  }
  .vui-select-item {
    height: 32px;
    line-height: 32px;
    font-size: 15px;
    padding: 0 24px;
    color: rgba(0,0,0,.87);
  }
  .vui-select-item:hover,
  .vui-select-item.active,
  .vui-select-item.highlight {
    background-color: rgba(0,0,0,.1);
  }


  .vui-text-input {
    border: 0;
    margin: 0;
    padding: 0;
    width: auto;
    height: 100%;
    display: block;
    outline: 0;
    font-size: inherit;
    line-height: 1;
    background-color: inherit;
    float: left;
    min-height: 32px;
    padding: 0 4px 4px 0;
  }

  /**
   *  line
   */
  .vui-select-field-line {
    margin: 0;
    height: 1px;
    border: none;
    background-color: rgba(0,0,0,.12);
    left: 0;
    right: 0;
    position: absolute;
  }
  .disabled .vui-select-field-line {
    height: auto;
    background-color: transparent;
    border-bottom: 2px dotted rgba(0,0,0,.38);
  }
  .vui-select-field-focus-line {
    margin: 0;
    height: 2px;
    border: none;
    background-color: #03a9f4;
    position: absolute;
    left: 0;
    right: 0;
    margin-top: -1px;
    transform: scaleX(0);
    transition: -webkit-transform .45s cubic-bezier(.23,1,.32,1);
    transition: transform .45s cubic-bezier(.23,1,.32,1);
    transition: transform .45s cubic-bezier(.23,1,.32,1),-webkit-transform .45s cubic-bezier(.23,1,.32,1);
  }
  .vui-select-field-focus-line.error, 
  .vui-select-field-focus-line.focus {
    -webkit-transform: scaleX(1);
    transform: scaleX(1);
  }

  /**
   *  selected
   */
  .vui-selected {
    cursor: text;
  }
  .disabled .vui-selected {
    color: rgba(0,0,0,.38);
    cursor: not-allowed;
  }
  .multiple .vui-selected-item {
    border: 1px solid #ccc;
  }
  .vui-selected-item {
    border-radius: 4px;
    padding: 0 .25em;
    float: left;
    line-height: 1.7em;
    margin: 0 4px 4px 0;
    user-select: none;
    cursor: pointer;
  }
  .vui-selected-close .svg-icon {
    width: 10px;
    height: 10px;
  }
  /**
   *  public
   */
  .clear:after {
    height: 0;
    content: "";
    clear: both;
    display: block;
    visibility: hidden;
    zoom: 1;
  }

</style>
<template>
  <div class="vui-select-wrapper has-label"
       :class="{'full-width':fullWidth,'multiple':multiple, 'disabled':disabled}"
  >
    <!-- 控件主体 -->
    <div class="vui-select-content">
      <div ref="textLabel" 
           class="vui-select-label float">
        {{placeholder}}
      </div>
      <label class="vui-select-input-wrapper clear">
        <svg class="vui-select-icon" viewBox="0 0 24 24">
          <path d="M7 10l5 5 5-5z"></path>
        </svg>
        <div class="vui-selected clear">
          <span class="vui-selected-item"
            v-for="(option,index) in handleResult">
            {{ getOpitonLabel(option) }}
            <span class="vui-selected-close"
              @click="removeSelected(index)"
              v-show="!disabled"
            >
              <svg class="svg-icon" viewBox="0 0 24 24" >
                  <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                  <path d="M0 0h24v24H0z" fill="none"/>
              </svg>
            </span>
          </span>
          <input type="text" 
                 class="vui-text-input"
                 ref="input"
                 @focus="handleInputFocus"
                 @input="handleInputChange"
                 @keydown.up.prevent="aheadUp"
                 @keydown.down.prevent="aheadDown"
                 @keydown.delete="maybeDeleteValue"
                 v-model="textInput"
                 v-show="!disabled"
          >
        </div>
      </label>
      <div>
        <hr class="vui-select-field-line">
        <hr class="vui-select-field-focus-line" ref="focusLine">
      </div>
      <ul class="vui-select-list-wrapper" 
           v-show="modal.menuList"
           ref="dropdownMenu"
      >
        <li class="vui-select-item" 
             v-for="(option, index) in filteredOptionList"
             :class="{highlight: index == aheadPointer, active: isOptionSelected(option) }"
             @mousedown.prevent="select(option)"
        >
          <div class="vui-select-item-label">
            {{ getOpitonLabel(option) }}
          </div>
        </li>
      </ul>
    </div>
    <!-- 控件错误信息 -->
  </div>
</template>
<script>
  export default {
    props: {
      // 提示文字
      value: {
        type: '',
      },
      placeholder: {
        type: String
      },
      label: {
        type: String
      },
      // 是否可以多选
      multiple: {
        type: Boolean,
        default: false
      },
      disabled: {
        type: Boolean,
        default: false,
      },
      options: {
        type: Array
      },
      fullWidth: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        textInput: '',
        modal: {
          menuList: false
        },
        optionsModel: {
          filter: [],
          backup: [],
        },
        search: '',
        inputEvent: {
          lastTime: 0,
          timeout: null,
        },
        aheadPointer: 0,
        result: [],
      }
    },
    computed: {
      filteredOptionList(){
        return this.optionsModel.filter;
      },
      handleResult(){
        if( this.multiple ){
          return this.result;
        }else{
          if( this.result ){
            if( typeof this.result == 'string' ){
              let obj = {}
              obj[this.label] = this.result;
              return [obj]
            }else if( typeof this.result == 'object'){
              return [this.result]
            }
          }else{
            return [];
          }
        }
      },
    },
    mounted(){
      let self = this;

      if( self.options && self.options.length > 0 ){
        let tempArr = self.options.slice(0);
        self.optionsModel.filter = tempArr;
        self.optionsModel.backup = tempArr;
      }
      
      let time;
      self.__addEvent(document, 'mouseup', function(e){
        if( e.button != 2 && e.button != 3 ){
          // 鼠标左键
          time = setTimeout(function(){
            
            self.handleInputBlur();
          },50);
        }
      })
      self.__addEvent( self.$el, 'click', function( e ){
        window.clearTimeout( time );
      })

      self.handleDefaultValue();
    },
    methods: {
      handleDefaultValue(){
        if( this.multiple ){
          this.result = [];
        }else{
          this.result = '';
        }
        if( this.value && this.value.length > 0  ){
          this.handleDefaultValueFocus();
          if( this.multiple ){
            if( Object.prototype.toString.call(this.value) === "[object Array]" ){
              this.result = this.result.concat( this.value );
            }
          }else{
            this.result = this.value;
          }
        }
      },
      handleDefaultValueFocus(){
        this.removeClass( this.$refs.textLabel, 'float');
      },
      handleInputFocus(){
        this.addClass( this.$el, 'focus-state' );
        this.addClass( this.$refs.focusLine, 'focus' );
        this.removeClass( this.$refs.textLabel, 'float');
        this.modal.menuList = true;
      },
      handleInputBlur(){
        if( this.modal.menuList ){
          this.removeClass( this.$el, 'focus-state' );
          this.removeClass( this.$refs.focusLine, 'focus' );
          this.modal.menuList = false;

          if( this.textInput || this.textInput.length > 0 ){
            
          }else{
            if( this.result || this.result.length > 0 ){

            }else{
              this.addClass( this.$refs.textLabel, 'float') ;
            }
          }
          
        }
      },
      handleInputChange(e){
        let self = this;
        if( self.inputEvent.timeout ){
          window.clearTimeout( self.inputEvent.timeout )
        }
        self.inputEvent.timeout = window.setTimeout(function(){
            self.search = e.target.value;
            let resultArray = self.grep(self.optionsModel.backup,self.filterRule);
            self.optionsModel.filter = resultArray;
        },300);
      },
      isOptionSelected(option) {
        if (this.multiple && this.result) {
          let selected = false
          this.result.forEach(opt => {
            if (typeof opt === 'object' && opt[this.label] === option[this.label]) {
              selected = true
            } else if (opt === option) {
              selected = true
            }
          })
          return selected
        }
        return this.result === option
      },
      getOpitonLabel(option){
        if( this.label ){
          return option[this.label]
        }else{
          return option;
        }
      },
      aheadUp(){
        if( this.aheadPointer > 0 ){
          this.aheadPointer--;
          this.maybeAdjustScroll();
        }
      },
      aheadDown(){
        if( this.aheadPointer < this.optionsModel.filter.length-1 ){
          this.aheadPointer++;
          this.maybeAdjustScroll();
        }
      },
      maybeDeleteValue(){
        if( this.$refs.input.value.length == 0 ){
          if( this.multiple ){
            this.result.pop();
          }else{
            this.result = '';
          }
        }
        this.syncData();
      },
      // 添加class
      addClass( element, className ) {
        if( element ){
          if( element.className.indexOf(' '+className) < 0 ){
            element.className += ` ${className}`;
          }
        }
      },
      // 去除两边空格
      trim( _str ) {
        return _str.replace(/(^[ \t\n\r]+)|([ \t\n\r]+$)/g, '');
      },
      // 移除class
      removeClass( element, className ){
        let self = this;
        let reg = new RegExp(`(?:^|\\s)${className}(?:\\s|$)`);
        if( element ){
          element.className = self.trim( element.className.replace( reg, ' ') );
        }
      },
      filterRule(option){
        let value;
        if( typeof option == 'object' ){
          let label = this.label || 'value';
          value = option[label];
        }else if( typeof option == 'string' ){
          value = option
        }
        value = value.toLowerCase();
        let searchValue = this.search.toLowerCase();
        let searchValueArr = this.search ? this.search.split(''): [];
        let valueArr = value ? value.split(''): [];
        if( searchValueArr.length <= valueArr.length ){
          let fromindex = 0;
          for (var i = 0; i < searchValueArr.length; i++) {
            let index = value.indexOf(searchValueArr[i],fromindex);
            if( index >= 0 ){
              fromindex = index;
            }else{
              return false;
            }
          }
          return true;
        }
        return false;
      },

      grep(array,callback,invert = false){
        let resultArry = [];
        if( array && array.length > 0 ){
          for (var i = 0; i < array.length; i++) {
            if( callback && typeof callback == 'function'){
              let flag = callback( array[i]);
              if( flag == !invert ){
                resultArry.push( array[i] )
              }
            }
          }
        }
        return resultArry;
      },

      __addEvent( _element, _type, __handler ) {
        if( _element.addEventListener ){
          _element.addEventListener(_type,__handler,false);
        }else if( _element.attachEvent ){
          _element.attachEvent('on'+_type,__handler);
        }else{
          _element['on'+_type]=__handler;
        }
      },

      select(option){
        if( !this.isOptionSelected(option) ){
          let index = this.getOptionIndex(option);
          if( index >= 0 ){
            this.aheadPointer = index;
          }
          if( this.multiple ){
            this.result.push(option);
          }else{
            this.result = option;
          }
        }else{
          let index = this.getResultOptionIndex(option);
          if( index >= 0 ){
            this.removeSelected(index)
          }
        }
        this.syncData();
      },

      handleEnterClick(){},

      getOptionIndex(option){
        for (var i = 0; i < this.optionsModel.filter.length; i++) {
          let opt = this.optionsModel.filter[i];
          if (typeof opt === 'object' && opt[this.label] === option[this.label]) {
            return i;
          }
        }
        return -1;
      },

      getResultOptionIndex(option){
        for (var i = 0; i < this.result.length; i++) {
          let opt = this.result[i];
          if (typeof opt === 'object' && opt[this.label] === option[this.label]) {
            return i;
          }
        }
        return -1;
      },

      removeSelected( index ){
        if( this.multiple ){
          this.result.splice(index,1);
        }else{
          this.result = '';
        }
        
        this.syncData();
      },

      // ajust scroll 
      maybeAdjustScroll() {
        let pixelsToPointerTop = this.pixelsToPointerTop()
        let pixelsToPointerBottom = this.pixelsToPointerBottom()
        if ( pixelsToPointerTop <= this.viewport().top) {
          return this.scrollTo( pixelsToPointerTop )
        } else if (pixelsToPointerBottom >= this.viewport().bottom) {
          return this.scrollTo( this.viewport().top + this.pointerHeight() )
        }
      },

      pixelsToPointerTop() {
        let pixelsToPointerTop = 0
        for (let i = 0; i < this.aheadPointer; i++) {
          pixelsToPointerTop += this.$refs.dropdownMenu.children[i].offsetHeight
        }
        return pixelsToPointerTop
      },

      pixelsToPointerBottom() {
        return this.pixelsToPointerTop() + this.pointerHeight()
      },

      pointerHeight() {
        let element = this.$refs.dropdownMenu.children[this.aheadPointer]
        return element ? element.offsetHeight : 0
      },

      viewport() {
        return {
          top: this.$refs.dropdownMenu.scrollTop,
          bottom: this.$refs.dropdownMenu.offsetHeight + this.$refs.dropdownMenu.scrollTop
        }
      },

      scrollTo(position) {
        return this.$refs.dropdownMenu.scrollTop = position
      },

      syncData(){
        this.$emit('input', this.result );
      },
    }
  }
</script> at SyntaxError: Unexpected token (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
