/root/Targets/chai-properties
├── UNMET PEER DEPENDENCY chai@>=1 <4
└─┬ chai-properties@1.2.1 
  └── lodash@3.10.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/chai-properties/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0453 took 2.1076s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (109:6) on program (function (plugin) {
  'use strict';

  if (typeof require === 'function' &&
      typeof exports === 'object' &&
      typeof module === 'object') {
    // NodeJS
    module.exports = plugin;
  } else if (typeof define === 'function' && define.amd) {
    // AMD
    define(function () {
      return plugin;
    });
  } else {
    // Other environment (usually <script> tag): plug in to global chai instance directly.
    chai.use(plugin);
  }
}(function (chai, utils) {
  'use strict';

  var _;

  if (typeof window === 'object' &&
      typeof window._ === 'function') {
    // browser-side
    _ = window._;
  } else {
    // server-side
    _ = require('lodash');
  }

  var flag = utils.flag;
  var inspect = utils.inspect;

  chai.Assertion.addMethod('properties', function(expected) {
    var obj = flag(this, 'object');

    if (flag(this, 'negate')) {
      throw new Error('Not implemented yet.');
    }

    function check(testDescr, testVal) {
      try {
        return _.every(testDescr, function (val, attr) {
          if (!(attr in testVal)) {
            throw new Error('No ' + attr + ' in ' + inspect(testVal));
          }

          if (typeof val !== typeof testVal[attr]) {
            throw new Error('Types are incompatible (' + (typeof val) + ' vs ' + (typeof testVal[attr]) + ')');
          }

          if (_.isArray(val)) {
            if (_.size(val) !== _.size(testVal[attr])) {
              throw new Error('Array sizes are incompatible (' + _.size(val) + ' vs ' + _.size(testVal[attr]) + ')');
            }

            return check(val, testVal[attr]);
          }

          if (_.isObject(val)) {
            return check(val, testVal[attr]);
          }

          if (val !== testVal[attr]) {
            throw new Error('Values are incompatible (' + inspect(val) + ' vs ' + inspect(testVal[attr]) + ')');
          }

          return true;
        });
      } catch (e) {
        return false;
      }
    }

    function diffFn(testDescr, testVal) {
      return _.transform(testVal, function (result, val, key) {
        if (!_.has(testDescr, key)) {
          return;
        }

        if (_.isObject(val)) {
          var innerDiff = diffFn(testDescr[key], val);
          if (_.size(innerDiff)) {
            result[key] = innerDiff;
          }
          return;
        }

        result[key] = val;
      }, {});
    }

    //var diff = _.pick(obj, _.keys(expected));
    var diff = diffFn(expected, obj);
    var moreMessage = _.size(diff) ? ', but found ' + inspect(diff) : '';

    this.assert(
      check(expected, obj),
      'expected ' + inspect(obj) + ' to have properties ' + inspect(expected) + moreMessage,
      'expected ' + inspect(obj) + ' to not have properties ' + inspect(expected) + moreMessage,
      expected,
      obj,
      true
    );
  });

  //export tdd style
  var assert = chai.assert;
  assert.haveProperties = function (val, exp, msg) {
    new chai.Assertion(val, msg).to.have.properties(exp);
  };
}));
 at SyntaxError: Unexpected token (109:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
