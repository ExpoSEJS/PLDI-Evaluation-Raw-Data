/root/Targets/slabjs
└─┬ slabjs@0.2.3 
  ├── child-exec@1.0.0 
  ├── cli-spinner@0.2.6 
  ├── commander@2.11.0 
  ├─┬ fs-extra@0.16.5 
  │ ├─┬ graceful-fs@3.0.11 
  │ │ └── natives@1.1.0 
  │ ├─┬ jsonfile@2.4.0 
  │ │ └── graceful-fs@4.1.11 
  │ └─┬ rimraf@2.6.2 
  │   └─┬ glob@7.1.2 
  │     ├── fs.realpath@1.0.0 
  │     ├─┬ inflight@1.0.6 
  │     │ └── wrappy@1.0.2 
  │     ├── inherits@2.0.3 
  │     ├─┬ minimatch@3.0.4 
  │     │ └─┬ brace-expansion@1.1.8 
  │     │   ├── balanced-match@1.0.0 
  │     │   └── concat-map@0.0.1 
  │     ├── once@1.4.0 
  │     └── path-is-absolute@1.0.1 
  ├─┬ gulp@3.9.1 
  │ ├── archy@1.0.0 
  │ ├─┬ chalk@1.1.3 
  │ │ ├── ansi-styles@2.2.1 
  │ │ ├── escape-string-regexp@1.0.5 
  │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ └── ansi-regex@2.1.1 
  │ │ ├── strip-ansi@3.0.1 
  │ │ └── supports-color@2.0.0 
  │ ├── deprecated@0.0.1 
  │ ├─┬ gulp-util@3.0.8 
  │ │ ├── array-differ@1.0.0 
  │ │ ├── array-uniq@1.0.3 
  │ │ ├── beeper@1.1.1 
  │ │ ├── dateformat@2.2.0 
  │ │ ├─┬ fancy-log@1.3.0 
  │ │ │ └── time-stamp@1.1.0 
  │ │ ├─┬ gulplog@1.0.0 
  │ │ │ └── glogg@1.0.0 
  │ │ ├─┬ has-gulplog@0.1.0 
  │ │ │ └── sparkles@1.0.0 
  │ │ ├── lodash._reescape@3.0.0 
  │ │ ├── lodash._reevaluate@3.0.0 
  │ │ ├── lodash._reinterpolate@3.0.0 
  │ │ ├─┬ lodash.template@3.6.2 
  │ │ │ ├── lodash._basecopy@3.0.1 
  │ │ │ ├── lodash._basetostring@3.0.1 
  │ │ │ ├── lodash._basevalues@3.0.0 
  │ │ │ ├── lodash._isiterateecall@3.0.9 
  │ │ │ ├─┬ lodash.escape@3.2.0 
  │ │ │ │ └── lodash._root@3.0.1 
  │ │ │ ├─┬ lodash.keys@3.1.2 
  │ │ │ │ ├── lodash._getnative@3.9.1 
  │ │ │ │ ├── lodash.isarguments@3.1.0 
  │ │ │ │ └── lodash.isarray@3.0.4 
  │ │ │ ├── lodash.restparam@3.6.1 
  │ │ │ └── lodash.templatesettings@3.1.1 
  │ │ ├─┬ multipipe@0.1.2 
  │ │ │ └─┬ duplexer2@0.0.2 
  │ │ │   └── readable-stream@1.1.14 
  │ │ ├── object-assign@3.0.0 
  │ │ ├── replace-ext@0.0.1 
  │ │ ├─┬ through2@2.0.3 
  │ │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ │ ├── core-util-is@1.0.2 
  │ │ │ │ ├── isarray@1.0.0 
  │ │ │ │ ├── process-nextick-args@1.0.7 
  │ │ │ │ ├── safe-buffer@5.1.1 
  │ │ │ │ ├── string_decoder@1.0.3 
  │ │ │ │ └── util-deprecate@1.0.2 
  │ │ │ └── xtend@4.0.1 
  │ │ └─┬ vinyl@0.5.3 
  │ │   ├── clone@1.0.2 
  │ │   └── clone-stats@0.0.1 
  │ ├── interpret@1.0.4 
  │ ├─┬ liftoff@2.3.0 
  │ │ ├── extend@3.0.1 
  │ │ ├─┬ findup-sync@0.4.3 
  │ │ │ ├─┬ detect-file@0.1.0 
  │ │ │ │ └── fs-exists-sync@0.1.0 
  │ │ │ ├─┬ is-glob@2.0.1 
  │ │ │ │ └── is-extglob@1.0.0 
  │ │ │ ├─┬ micromatch@2.3.11 
  │ │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ │ ├── array-unique@0.2.1 
  │ │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │ │   ├─┬ isobject@2.1.0 
  │ │ │ │ │ │   │ └── isarray@1.0.0 
  │ │ │ │ │ │   ├─┬ randomatic@1.1.7 
  │ │ │ │ │ │   │ ├─┬ is-number@3.0.0 
  │ │ │ │ │ │   │ │ └── kind-of@3.2.2 
  │ │ │ │ │ │   │ └── kind-of@4.0.0 
  │ │ │ │ │ │   └── repeat-string@1.6.1 
  │ │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ │ ├── extglob@0.3.2 
  │ │ │ │ ├── filename-regex@2.0.1 
  │ │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ │ ├─┬ normalize-path@2.1.1 
  │ │ │ │ │ └── remove-trailing-separator@1.1.0 
  │ │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ │ ├── for-own@0.1.5 
  │ │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ │ ├─┬ glob-base@0.3.0 
  │ │ │ │ │ │ └── glob-parent@2.0.0 
  │ │ │ │ │ └── is-dotfile@1.0.3 
  │ │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │ │     └── is-primitive@2.0.0 
  │ │ │ └─┬ resolve-dir@0.1.1 
  │ │ │   ├── expand-tilde@1.2.2 
  │ │ │   └─┬ global-modules@0.2.3 
  │ │ │     ├─┬ global-prefix@0.1.5 
  │ │ │     │ ├── ini@1.3.4 
  │ │ │     │ └─┬ which@1.3.0 
  │ │ │     │   └── isexe@2.0.0 
  │ │ │     └── is-windows@0.2.0 
  │ │ ├─┬ fined@1.1.0 
  │ │ │ ├─┬ expand-tilde@2.0.2 
  │ │ │ │ └─┬ homedir-polyfill@1.0.1 
  │ │ │ │   └── parse-passwd@1.0.0 
  │ │ │ ├─┬ is-plain-object@2.0.4 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ ├─┬ object.defaults@1.1.0 
  │ │ │ │ ├── array-each@1.0.1 
  │ │ │ │ ├── array-slice@1.0.0 
  │ │ │ │ ├─┬ for-own@1.0.0 
  │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ ├─┬ object.pick@1.3.0 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ └─┬ parse-filepath@1.0.1 
  │ │ │   ├─┬ is-absolute@0.2.6 
  │ │ │   │ └─┬ is-relative@0.2.1 
  │ │ │   │   └─┬ is-unc-path@0.1.2 
  │ │ │   │     └── unc-path-regex@0.1.2 
  │ │ │   ├── map-cache@0.2.2 
  │ │ │   └─┬ path-root@0.1.1 
  │ │ │     └── path-root-regex@0.1.2 
  │ │ ├── flagged-respawn@0.3.2 
  │ │ ├── lodash.isplainobject@4.0.6 
  │ │ ├── lodash.isstring@4.0.1 
  │ │ ├── lodash.mapvalues@4.6.0 
  │ │ ├── rechoir@0.6.2 
  │ │ └─┬ resolve@1.4.0 
  │ │   └── path-parse@1.0.5 
  │ ├── minimist@1.2.0 
  │ ├─┬ orchestrator@0.3.8 
  │ │ ├─┬ end-of-stream@0.1.5 
  │ │ │ └── once@1.3.3 
  │ │ ├── sequencify@0.0.7 
  │ │ └── stream-consume@0.1.0 
  │ ├── pretty-hrtime@1.0.3 
  │ ├── semver@4.3.6 
  │ ├─┬ tildify@1.2.0 
  │ │ └── os-homedir@1.0.2 
  │ ├─┬ v8flags@2.1.1 
  │ │ └── user-home@1.1.1 
  │ └─┬ vinyl-fs@0.3.14 
  │   ├── defaults@1.0.3 
  │   ├─┬ glob-stream@3.1.18 
  │   │ ├── glob@4.5.3 
  │   │ ├─┬ glob2base@0.0.12 
  │   │ │ └── find-index@0.1.1 
  │   │ ├── minimatch@2.0.10 
  │   │ ├── ordered-read-streams@0.1.0 
  │   │ ├─┬ through2@0.6.5 
  │   │ │ └── readable-stream@1.0.34 
  │   │ └── unique-stream@1.0.0 
  │   ├─┬ glob-watcher@0.0.6 
  │   │ └─┬ gaze@0.5.2 
  │   │   └─┬ globule@0.1.0 
  │   │     ├─┬ glob@3.1.21 
  │   │     │ ├── graceful-fs@1.2.3 
  │   │     │ └── inherits@1.0.2 
  │   │     ├── lodash@1.0.2 
  │   │     └── minimatch@0.2.14 
  │   ├─┬ mkdirp@0.5.1 
  │   │ └── minimist@0.0.8 
  │   ├─┬ strip-bom@1.0.0 
  │   │ ├── first-chunk-stream@1.0.0 
  │   │ └── is-utf8@0.2.1 
  │   ├─┬ through2@0.6.5 
  │   │ └─┬ readable-stream@1.0.34 
  │   │   ├── isarray@0.0.1 
  │   │   └── string_decoder@0.10.31 
  │   └─┬ vinyl@0.4.6 
  │     └── clone@0.2.0 
  ├─┬ prompt@0.2.14 
  │ ├── pkginfo@0.4.1 
  │ ├─┬ read@1.0.7 
  │ │ └── mute-stream@0.0.7 
  │ ├── revalidator@0.1.8 
  │ ├─┬ utile@0.2.1 
  │ │ ├── async@0.2.10 
  │ │ ├── deep-equal@1.0.1 
  │ │ ├── i@0.3.5 
  │ │ └── ncp@0.4.2 
  │ └─┬ winston@0.8.3 
  │   ├── colors@0.6.2 
  │   ├── cycle@1.0.3 
  │   ├── eyes@0.1.8 
  │   ├── isstream@0.1.2 
  │   ├── pkginfo@0.3.1 
  │   └── stack-trace@0.0.10 
  └─┬ replace@0.3.0 
    ├── colors@0.5.1 
    ├─┬ minimatch@0.2.14 
    │ ├── lru-cache@2.7.3 
    │ └── sigmund@1.0.1 
    └─┬ nomnom@1.6.2 
      ├── colors@0.5.1 
      └── underscore@1.4.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/slabjs/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.044 took 3.8914s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #! /usr/bin/env node

var program = require('commander');
var fs = require('fs-extra');
var path = require('path');
var exec = require('child_process').exec;
var spawn = require('child_process').spawn;
var prompt = require('prompt');
var replace = require('replace');
var gulp_cli = './node_modules/.bin/gulp';
var Spinner = require('cli-spinner').Spinner;
var anon_data = '';

program
	.version('0.2.3')
	
program
	.command('create [name]')
	.description('create a new slabjs app')
	.action(function(name, options){
		var name = name || SlabJS_App
		console.log();
		console.log();
		fs.exists(name + '/', function(exists){
			if(exists) {
				console.error('Error: "%s" already exists. Pick a folder that doesn\'t exists so I can make your app.', name);
			} else {
				
				console.log();
				console.log('Answer the following configuration questions:')
				console.log();
				
				prompt.start();
				
				prompt.message = 'Configuration:';
				prompt.delimiter = ' ';
				
				prompt.get({
					properties: {
						
						anon_data: {
							description: 'Will you allow us to collect anonymous data to help improve this app? (yes)'
						},
						app_name: {
							description: 'What is the name of your web app? (' + name + ')'
						},
						app_description: {
							description: 'What best describes your web app?'
						}
						
					}
				},
				function(err, results){
					if(err) return console.log(err);
					
					anon_data = results.anon_data || 'yes';
					var app_name = results.app_name || name;
					var app_description = results.app_description || 'App made from SlabJS';
					var app_repo = '{\r\n\t"name": "slabjs-app",\r\n\t"version": "0.0.1",\r\n\t"private": true\r\n}';
					
					//Let you know what's happening
					console.log();
					console.log('===== Creating with following configuration: =====');
					console.log();
					console.log('Collect Anon? ' + anon_data);
					console.log('App Name: ' + app_name);
					console.log('App Description: ' + app_description);
					console.log();
					console.log('==================================================');
					console.log();
 					
					console.log('I may look unresponsive while i\'m unpacking, but I assure you, I\'m working! Please be patient...');
					
					var spinner = new Spinner('Building... %s');
					spinner.setSpinnerString('|/-\\');
					spinner.start();
					
					//Build it
					var dist = path.resolve(__dirname, '../dist/');
					
					setTimeout(function(){
						
						fs.copy(dist, name, '-r', function(err){
							if(err) console.log(err);
							process.chdir(path.resolve(name));
							setTimeout(function(){
								
								//Edit Package JSON
								replace({
									regex: "{{app.name}}",
									replacement: app_name,
									paths: ['package.json'],
									recursive: true,
									silent: true,
								});

								replace({
									regex: "{{app.description}}",
									replacement: app_description,
									paths: ['package.json'],
									recursive: true,
									silent: true,
								});

								replace({
									regex: "{{app.repo}}",
									replacement: app_repo,
									paths: ['package.json'],
									recursive: true,
									silent: true,
								});
								
								setTimeout(function(){
									var npm_install = spawn('npm', ['install']);
									npm_install.stdout.on('data', function (data) {
										//var the_data = '' + data;
										//console.log(the_data);
									});
									npm_install.stderr.on('data', function (data) {
										var the_data = '' + data;
										console.log('Error unpacking: ' + the_data)
									});
									npm_install.on('close', function (code) {

										spinner.stop(true);
										console.log();
										console.log('Success! Your app "%s" is ready to go! cd into your app and run "slab launch"', name);
										console.log();

									});
								}, 1000);
								
							}, 1000);
						}); 
					}, 1000);
					
				});
				
				
			}
		});
	});

program
	.command('launch')
	.description('launch virtual environment at http://localhost:3000')
	.option('-e, --env [environment]', 'Specify what to build for: "dev", "production". Default: "dev"')
	.action(function(options){
		var env = options.env || 'dev';
		
		console.log();
		console.log();
		console.log();
	    console.log("    @@@@@@@@@@    Launching!");
		console.log("    @@@    @@@");
		console.log("    @@@@@@@@@@    Environment: " + env);
		console.log();
		console.log();
		process.chdir(path.resolve());
		
		setTimeout(function(){
			if(env == 'dev') {
				var launch = spawn(gulp_cli, ['--silent']);
				launch.stdout.on('data', function (data) {
					var the_data = '' + data;
					if(the_data.indexOf('[BS]') != -1) {
						the_data = the_data.split('[BS] ').join('');
						console.log(the_data);
					}
				});
				launch.stderr.on('data', function (data) {
					var the_data = '' + data;
					if(the_data.indexOf('EADDRINUSE') != -1) {
						console.error("[ERR0AR]: Oh snap! Looks like you're already using that port. Change your port in ./config/project.js");
					} else {
						console.error(the_data)
					}
				});
			} else {
				var launch = spawn(gulp_cli, ['production', '--silent']);
				launch.stdout.on('data', function (data) {
					var the_data = '' + data;
					if(the_data.indexOf('[BS]') != -1) {
						the_data = the_data.split('[BS] ').join('');
						console.log(the_data);
					}
				});
				launch.stderr.on('data', function (data) {
					var the_data = '' + data;
					if(the_data.indexOf('EADDRINUSE') != -1) {
						console.error("[ERR0AR]: Oh snap! Looks like you're already using that port. Change your port in ./config/project.js");
					} else {
						console.error(the_data);
					}
				});
			}
		}, 200);
	});

program
	.command('generate [generator]')
	.description('Generate various things with utilities!')
	.action(function(generator, options){
		process.chdir(path.resolve());
		switch(generator) {
			case 'icons':
				console.log('Generating!');
				var icons = spawn(gulp_cli, ['iconFont', '--silent']);
				icons.stderr.on('data', function (data) {
					console.log('Error generating icons: ' + data)
				});
				icons.on('close', function (code) {
					console.log('SVG Icons created!');
				});
				break;
			case 'fontawesome':
				console.log('Generating!');
				var fa = spawn('npm', ['install', 'font-awesome']);
				fa.on('close', function (code) {
					var rollout = spawn(gulp_cli, ['fontAwesome', '--silent']);
					rollout.on('close', function (code) {
						console.log('Font Awesome updated to latest!');
					});
				});
				break;
			default:
				console.log('Error: Unknown Generator!');
				process.exit();
		}
		
	});

program.parse(process.argv); at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
