/root/Targets/easydbi-repl
└─┬ easydbi-repl@0.1.0 
  ├─┬ coffee-bean@0.4.0 
  │ ├── chai@1.4.2 
  │ ├── coffee-script@1.9.2 
  │ ├─┬ js-yaml@3.2.2 
  │ │ ├─┬ argparse@0.1.16 
  │ │ │ └── underscore.string@2.4.0 
  │ │ └── esprima@1.0.4 
  │ ├─┬ optimist@0.3.1 
  │ │ └── wordwrap@0.0.3 
  │ └── underscore@1.3.1 
  ├─┬ coffee-script@1.8.0 
  │ └── mkdirp@0.3.5 
  ├─┬ easydbi@0.2.9 
  │ ├── bluebird@3.5.0 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├── errorlet@0.2.2 
  │ ├─┬ knex@0.12.9 
  │ │ ├─┬ babel-runtime@6.26.0 
  │ │ │ ├── core-js@2.5.1 
  │ │ │ └── regenerator-runtime@0.11.0 
  │ │ ├─┬ chalk@1.1.3 
  │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ ├── escape-string-regexp@1.0.5 
  │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ └── ansi-regex@2.1.1 
  │ │ │ ├── strip-ansi@3.0.1 
  │ │ │ └── supports-color@2.0.0 
  │ │ ├── commander@2.11.0 
  │ │ ├── generic-pool@2.5.4 
  │ │ ├── inherits@2.0.3 
  │ │ ├── interpret@0.6.6 
  │ │ ├─┬ liftoff@2.2.5 
  │ │ │ ├── extend@3.0.1 
  │ │ │ ├─┬ findup-sync@0.4.3 
  │ │ │ │ ├─┬ detect-file@0.1.0 
  │ │ │ │ │ └── fs-exists-sync@0.1.0 
  │ │ │ │ ├─┬ is-glob@2.0.1 
  │ │ │ │ │ └── is-extglob@1.0.0 
  │ │ │ │ ├─┬ micromatch@2.3.11 
  │ │ │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ │ │ ├── array-unique@0.2.1 
  │ │ │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │ │ │   ├─┬ isobject@2.1.0 
  │ │ │ │ │ │ │   │ └── isarray@1.0.0 
  │ │ │ │ │ │ │   ├─┬ randomatic@1.1.7 
  │ │ │ │ │ │ │   │ ├─┬ is-number@3.0.0 
  │ │ │ │ │ │ │   │ │ └── kind-of@3.2.2 
  │ │ │ │ │ │ │   │ └── kind-of@4.0.0 
  │ │ │ │ │ │ │   └── repeat-string@1.6.1 
  │ │ │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ │ │ ├── extglob@0.3.2 
  │ │ │ │ │ ├── filename-regex@2.0.1 
  │ │ │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ │ │ ├─┬ normalize-path@2.1.1 
  │ │ │ │ │ │ └── remove-trailing-separator@1.1.0 
  │ │ │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ │ │ ├─┬ for-own@0.1.5 
  │ │ │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ │ │ ├─┬ glob-base@0.3.0 
  │ │ │ │ │ │ │ └── glob-parent@2.0.0 
  │ │ │ │ │ │ └── is-dotfile@1.0.3 
  │ │ │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │ │ │     └── is-primitive@2.0.0 
  │ │ │ │ └─┬ resolve-dir@0.1.1 
  │ │ │ │   ├─┬ expand-tilde@1.2.2 
  │ │ │ │   │ └── os-homedir@1.0.2 
  │ │ │ │   └─┬ global-modules@0.2.3 
  │ │ │ │     ├─┬ global-prefix@0.1.5 
  │ │ │ │     │ ├─┬ homedir-polyfill@1.0.1 
  │ │ │ │     │ │ └── parse-passwd@1.0.0 
  │ │ │ │     │ ├── ini@1.3.4 
  │ │ │ │     │ └─┬ which@1.3.0 
  │ │ │ │     │   └── isexe@2.0.0 
  │ │ │ │     └── is-windows@0.2.0 
  │ │ │ ├── flagged-respawn@0.3.2 
  │ │ │ ├── rechoir@0.6.2 
  │ │ │ └─┬ resolve@1.4.0 
  │ │ │   └── path-parse@1.0.5 
  │ │ ├── minimist@1.1.3 
  │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ └── minimist@0.0.8 
  │ │ ├── pg-connection-string@0.1.3 
  │ │ ├─┬ readable-stream@1.1.14 
  │ │ │ ├── core-util-is@1.0.2 
  │ │ │ ├── isarray@0.0.1 
  │ │ │ └── string_decoder@0.10.31 
  │ │ ├── safe-buffer@5.1.1 
  │ │ ├─┬ tildify@1.0.0 
  │ │ │ └── user-home@1.1.1 
  │ │ ├── uuid@3.1.0 
  │ │ └── v8flags@2.1.1 
  │ ├── lodash@4.17.4 
  │ ├── node-uuid@1.4.8 
  │ └── schemalet@0.1.2 
  ├─┬ easydbi-pg@0.1.6 
  │ └─┬ pg@4.5.7 
  │   ├── buffer-writer@1.0.1 
  │   ├── generic-pool@2.4.2 
  │   ├── js-string-escape@1.0.1 
  │   ├── packet-reader@0.2.0 
  │   ├─┬ pg-types@1.12.1 
  │   │ ├── postgres-array@1.0.2 
  │   │ ├── postgres-bytea@1.0.0 
  │   │ ├── postgres-date@1.0.3 
  │   │ └─┬ postgres-interval@1.1.1 
  │   │   └── xtend@4.0.1 
  │   └─┬ pgpass@0.0.3 
  │     └─┬ split@0.3.3 
  │       └── through@2.3.8 
  ├─┬ filelet@0.1.3 
  │ ├─┬ glob@4.2.1 
  │ │ ├─┬ inflight@1.0.6 
  │ │ │ └── wrappy@1.0.2 
  │ │ ├─┬ minimatch@1.0.0 
  │ │ │ ├── lru-cache@2.7.3 
  │ │ │ └── sigmund@1.0.1 
  │ │ └── once@1.4.0 
  │ ├─┬ mkdirp@0.5.0 
  │ │ └── minimist@0.0.8 
  │ ├── ncp@1.0.1 
  │ └─┬ vinyl@0.4.5 
  │   ├── clone@0.1.19 
  │   └── clone-stats@0.0.1 
  ├─┬ funclet@0.1.2 
  │ ├── async@0.9.0 
  │ └── coffee-script@1.7.1 
  ├── loglet@0.2.0 
  ├── pegjs@0.8.0 
  ├── semver@4.1.0 
  ├── underscore@1.7.0 
  └── yargs@1.3.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/easydbi-repl/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 78% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","RegExp","getFunction","isNative","isEval","getFileName","getLineNumber","getColumnNumber","getFunctionName","isConstructor","isToplevel","getMethodName","getTypeName","toString","join"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.1077 took 48.3584s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (49:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require("fs")
var minimatch = require("minimatch")
var Minimatch = minimatch.Minimatch
var inherits = require("inherits")
var EE = require("events").EventEmitter
var path = require("path")
var assert = require("assert")
var globSync = require("./sync.js")
var common = require("./common.js")
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var isAbsolute = common.isAbsolute
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require("inflight")
var util = require("util")

var once = require("once")

function glob (pattern, options, cb) {
  if (typeof options === "function") cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

glob.hasMagic = function (pattern, options_) {
  var options = util._extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set
  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === "function") {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === "function") {
    cb = once(cb)
    this.on("error", cb)
    this.on("end", function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  var n = this.minimatch.set.length
  this._processing = 0
  this.matches = new Array(n)

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }

  function done () {
    --self._processing
    if (self._processing <= 0)
      self._finish()
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  //console.error('FINISH', this.matches)
  common.finish(this)
  this.emit("end", this.found)
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit("abort")
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit("pause")
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit("resume")
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error("PROCESS %d", this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === "string") {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's "absolute" like /foo/bar,
      // or "relative" like "../baz"
      prefix = pattern.slice(0, n).join("/")
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = "."
  else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = "/" + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}


Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === "."

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== "." || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== "/")
          e = prefix + "/" + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === "/" && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== "/")
        e = prefix + "/" + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (!this.matches[index][e]) {
    if (this.paused) {
      this._emitQueue.push([index, e])
      return
    }

    if (this.nodir) {
      var c = this.cache[this._makeAbs(e)]
      if (c === 'DIR' || Array.isArray(c))
        return
    }

    this.matches[index][e] = true
    if (!this.stat && !this.mark)
      return this.emit("match", e)

    var self = this
    this._stat(this._makeAbs(e), function (er, c, st) {
      self.emit("stat", e, st)
      self.emit("match", e)
    })
  }
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  var lstatkey = "lstat\0" + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er)
      return cb()

    var isSym = lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight("readdir\0"+abs+"\0"+inGlobStar, cb)
  if (!cb)
    return

  //console.error("RD %j %j", +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === "/")
        e = abs + e
      else
        e = abs + "/" + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case "ENOTDIR": // totally normal. means it *does* exist.
      this.cache[f] = 'FILE'
      break

    case "ENOENT": // not terribly unusual
    case "ELOOP":
    case "ENAMETOOLONG":
    case "UNKNOWN":
      this.cache[f] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) return this.emit("error", er)
      if (!this.silent) console.error("glob error", er)
      break
  }
  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error("pgs2", prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === "." && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error("ps2", prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    if (prefix.charAt(0) === "/") {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
    }
  }

  if (process.platform === "win32")
    prefix = prefix.replace(/\\/g, "/")

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = f
  if (f.charAt(0) === "/")
    abs = path.join(this.root, f)
  else if (this.changedCwd)
    abs = path.resolve(this.cwd, f)


  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, f)) {
    var c = this.cache[f]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but not how we need it
    if (abs.slice(-1) === "/" && c !== 'DIR')
      return cb()

    return cb(null, c)
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else
      return cb(null, stat.isDirectory() ? 'DIR' : 'FILE', stat)
  }

  var self = this
  var statcb = inflight("stat\0" + abs, statcb_)
  if (statcb)
    fs.stat(abs, statcb)

  function statcb_ (er, stat) {
    self._stat2(f, abs, er, stat, cb)
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er) {
    this.statCache[abs] = false
    return cb()
  }

  this.statCache[abs] = stat

  if (abs.slice(-1) === "/" && !stat.isDirectory())
    return cb(null, false, stat)

  var c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[f] = this.cache[f] || c
  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (49:4)
  at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
  at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
  at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
  at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
  at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
  at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
  at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
  at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
  at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
  at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
  at Parser.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:516:17)
  at Object.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:3098:39)
  at convert (/root/ExpoSE/lib/Tropigate/bin/main.js:50:18)
  at SymbolicExecution.instrumentCodePre (/root/ExpoSE/Analyser/bin/bundle.js:1474:24)
  at Object.instrumentCode (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/instrument/esnstrument.js:1928:37)
  at Object.Module._extensions..js (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/commands/jalangi.js:97:30)
  at Module.load (module.js:488:32)
  at tryModuleLoad (module.js:447:12)
  at Function.Module._load (module.js:439:3)
  at Module.require (module.js:498:17)
  at require (internal/module.js:20:19)
  at callFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:196:51)
  at invokeFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:217:22)
  at /root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:233:41
  at Object.<anonymous> (/root/Targets/easydbi-repl/node_modules/filelet/lib/helper.js:43:111)
  at callFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:196:51)
  at invokeFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:217:22)
  at /root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:242:41
  at Object.<anonymous> (/root/Targets/easydbi-repl/node_modules/filelet/lib/helper.js:1097:44)
  at Module._compile (module.js:571:32)
  at Object.Module._extensions..js (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/commands/jalangi.js:109:12)
  at Module.load (module.js:488:32)
  at tryModuleLoad (module.js:447:12)
  at Function.Module._load (module.js:439:3)
  at Module.require (module.js:498:17)
  at require (internal/module.js:20:19)
  at callFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:196:51)
  at invokeFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:217:22)
  at /root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:233:41
  at Object.<anonymous> (/root/Targets/easydbi-repl/node_modules/filelet/lib/main.js:22:113)
  at callFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:196:51)
  at invokeFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:217:22)
  at /root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:242:41
  at Object.<anonymous> (/root/Targets/easydbi-repl/node_modules/filelet/lib/main.js:62:43)
  at Module._compile (module.js:571:32)
  at Object.Module._extensions..js (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/commands/jalangi.js:109:12)
  at Module.load (module.js:488:32)
  at tryModuleLoad (module.js:447:12)
  at Function.Module._load (module.js:439:3)
  at Module.require (module.js:498:17)
  at require (internal/module.js:20:19)
  at callFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:196:51)
  at invokeFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:217:22)
  at /root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:233:41
  at Object.<anonymous> (/root/Targets/easydbi-repl/node_modules/easydbi-repl/lib/runtime.js:30:117)
  at callFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:196:51)
  at invokeFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:217:22)
  at /root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:242:41
  at Object.<anonymous> (/root/Targets/easydbi-repl/node_modules/easydbi-repl/lib/runtime.js:1088:44)
  at Module._compile (module.js:571:32)
  at Object.Module._extensions..js (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/commands/jalangi.js:109:12)
  at Module.load (module.js:488:32)
  at tryModuleLoad (module.js:447:12)
  at Function.Module._load (module.js:439:3)
  at Module.require (module.js:498:17)
  at require (internal/module.js:20:19)
  at callFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:196:51)
  at invokeFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:217:22)
  at /root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:233:41
  at Object.<anonymous> (/root/Targets/easydbi-repl/node_modules/easydbi-repl/lib/main.js:43:117)
  at callFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:196:51)
  at invokeFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:217:22)
  at /root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:242:41
  at Object.<anonymous> (/root/Targets/easydbi-repl/node_modules/easydbi-repl/lib/main.js:586:44)
  at Module._compile (module.js:571:32)
  at Object.Module._extensions..js (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/commands/jalangi.js:109:12)
  at Module.load (module.js:488:32)
  at tryModuleLoad (module.js:447:12)
  at Function.Module._load (module.js:439:3)
  at Module.require (module.js:498:17)
  at require (internal/module.js:20:19)
  at callFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:196:51)
  at invokeFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:217:22)
  at /root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:233:41
  at Object.<anonymous> (/root/ExpoSE/lib/Harness/src/harness.js:91:103)
  at Module._compile (module.js:571:32)
  at Object.Module._extensions..js (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/commands/jalangi.js:109:12)
  at Module.load (module.js:488:32)
  at tryModuleLoad (module.js:447:12)
  at Function.Module._load (module.js:439:3)
  at Function.Module.runMain (module.js:605:10)
  at startProgram (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/commands/jalangi.js:121:19)
  at SymbolicExecution.onReady (/root/ExpoSE/Analyser/bin/bundle.js:1500:13)
  at Object.<anonymous> (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/commands/jalangi.js:125:17)
  at Module._compile (module.js:571:32)
  at Object.Module._extensions..js (module.js:580:10)
  at Module.load (module.js:488:32)
  at tryModuleLoad (module.js:447:12)
  at Function.Module._load (module.js:439:3)
  at Module.runMain (module.js:605:10)
  at run (bootstrap_node.js:418:7)
  at startup (bootstrap_node.js:139:9)
  at bootstrap_node.js:533:3

*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/easydbi-repl/node_modules/easydbi-repl/lib/main.js. Coverage (Term): 10% Coverage (LOC): 8%
*- File /root/Targets/easydbi-repl/node_modules/loglet/lib/logger.js. Coverage (Term): 25% Coverage (LOC): 41%
*- File /root/Targets/easydbi-repl/node_modules/errorlet/lib/index.js. Coverage (Term): 37% Coverage (LOC): 40%
*- File /root/Targets/easydbi-repl/node_modules/funclet/lib/funclet.js. Coverage (Term): 19% Coverage (LOC): 39%
*- File /root/Targets/easydbi-repl/node_modules/async/lib/async.js. Coverage (Term): 10% Coverage (LOC): 14%
*- File /root/Targets/easydbi-repl/node_modules/coffee-script/lib/coffee-script/coffee-script.js. Coverage (Term): 34% Coverage (LOC): 38%
*- File /root/Targets/easydbi-repl/node_modules/coffee-script/lib/coffee-script/lexer.js. Coverage (Term): 14% Coverage (LOC): 28%
*- File /root/Targets/easydbi-repl/node_modules/coffee-script/lib/coffee-script/rewriter.js. Coverage (Term): 11% Coverage (LOC): 29%
*- File /root/Targets/easydbi-repl/node_modules/coffee-script/lib/coffee-script/helpers.js. Coverage (Term): 11% Coverage (LOC): 22%
*- File /root/Targets/easydbi-repl/node_modules/coffee-script/lib/coffee-script/parser.js. Coverage (Term): 81% Coverage (LOC): 98%
*- File /root/Targets/easydbi-repl/node_modules/coffee-script/lib/coffee-script/sourcemap.js. Coverage (Term): 17% Coverage (LOC): 22%
*- File /root/Targets/easydbi-repl/node_modules/coffee-script/lib/coffee-script/nodes.js. Coverage (Term): 14% Coverage (LOC): 26%
*- File /root/Targets/easydbi-repl/node_modules/coffee-script/lib/coffee-script/scope.js. Coverage (Term): 18% Coverage (LOC): 28%
*- File /root/Targets/easydbi-repl/node_modules/easydbi-repl/lib/command.js. Coverage (Term): 1% Coverage (LOC): 1%
*- File /root/Targets/easydbi-repl/node_modules/easydbi-repl/lib/runtime.js. Coverage (Term): 3% Coverage (LOC): 3%
*- File /root/Targets/easydbi-repl/node_modules/filelet/lib/main.js. Coverage (Term): 35% Coverage (LOC): 29%
*- File /root/Targets/easydbi-repl/node_modules/filelet/lib/helper.js. Coverage (Term): 5% Coverage (LOC): 3%
*- File /root/Targets/easydbi-repl/node_modules/vinyl/index.js. Coverage (Term): 20% Coverage (LOC): 30%
*- File /root/Targets/easydbi-repl/node_modules/clone/clone.js. Coverage (Term): 10% Coverage (LOC): 18%
*- File /root/Targets/easydbi-repl/node_modules/clone-stats/index.js. Coverage (Term): 43% Coverage (LOC): 50%
*- File /root/Targets/easydbi-repl/node_modules/vinyl/lib/cloneBuffer.js. Coverage (Term): 53% Coverage (LOC): 63%
*- File /root/Targets/easydbi-repl/node_modules/vinyl/lib/isBuffer.js. Coverage (Term): 64% Coverage (LOC): 86%
*- File /root/Targets/easydbi-repl/node_modules/vinyl/lib/isStream.js. Coverage (Term): 62% Coverage (LOC): 83%
*- File /root/Targets/easydbi-repl/node_modules/vinyl/lib/isNull.js. Coverage (Term): 61% Coverage (LOC): 80%
*- File /root/Targets/easydbi-repl/node_modules/vinyl/lib/inspectStream.js. Coverage (Term): 40% Coverage (LOC): 45%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
