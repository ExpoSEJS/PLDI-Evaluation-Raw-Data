/root/Targets/json-meta-marked
└─┬ json-meta-marked@1.5.1 
  ├─┬ exemethod@1.3.1 
  │ └─┬ babelify@6.4.0 
  │   ├─┬ babel-core@5.8.38 
  │   │ ├── babel-plugin-constant-folding@1.0.1 
  │   │ ├── babel-plugin-dead-code-elimination@1.0.2 
  │   │ ├── babel-plugin-eval@1.0.1 
  │   │ ├── babel-plugin-inline-environment-variables@1.0.1 
  │   │ ├── babel-plugin-jscript@1.0.4 
  │   │ ├── babel-plugin-member-expression-literals@1.0.1 
  │   │ ├── babel-plugin-property-literals@1.0.1 
  │   │ ├── babel-plugin-proto-to-assign@1.0.4 
  │   │ ├── babel-plugin-react-constant-elements@1.0.3 
  │   │ ├── babel-plugin-react-display-name@1.0.3 
  │   │ ├── babel-plugin-remove-console@1.0.1 
  │   │ ├── babel-plugin-remove-debugger@1.0.1 
  │   │ ├── babel-plugin-runtime@1.0.7 
  │   │ ├─┬ babel-plugin-undeclared-variables-check@1.0.2 
  │   │ │ └── leven@1.0.2 
  │   │ ├── babel-plugin-undefined-to-void@1.1.6 
  │   │ ├── babylon@5.8.38 
  │   │ ├── bluebird@2.11.0 
  │   │ ├─┬ chalk@1.1.3 
  │   │ │ ├── ansi-styles@2.2.1 
  │   │ │ ├── escape-string-regexp@1.0.5 
  │   │ │ ├─┬ has-ansi@2.0.0 
  │   │ │ │ └── ansi-regex@2.1.1 
  │   │ │ ├── strip-ansi@3.0.1 
  │   │ │ └── supports-color@2.0.0 
  │   │ ├── convert-source-map@1.5.0 
  │   │ ├── core-js@1.2.7 
  │   │ ├─┬ debug@2.6.9 
  │   │ │ └── ms@2.0.0 
  │   │ ├─┬ detect-indent@3.0.1 
  │   │ │ ├── get-stdin@4.0.1 
  │   │ │ └── minimist@1.2.0 
  │   │ ├── esutils@2.0.2 
  │   │ ├── fs-readdir-recursive@0.1.2 
  │   │ ├── globals@6.4.1 
  │   │ ├─┬ home-or-tmp@1.0.0 
  │   │ │ ├── os-tmpdir@1.0.2 
  │   │ │ └── user-home@1.1.1 
  │   │ ├─┬ is-integer@1.0.7 
  │   │ │ └─┬ is-finite@1.0.2 
  │   │ │   └── number-is-nan@1.0.1 
  │   │ ├── js-tokens@1.0.1 
  │   │ ├── json5@0.4.0 
  │   │ ├── lodash@3.10.1 
  │   │ ├─┬ minimatch@2.0.10 
  │   │ │ └─┬ brace-expansion@1.1.8 
  │   │ │   ├── balanced-match@1.0.0 
  │   │ │   └── concat-map@0.0.1 
  │   │ ├─┬ output-file-sync@1.1.2 
  │   │ │ ├── graceful-fs@4.1.11 
  │   │ │ └─┬ mkdirp@0.5.1 
  │   │ │   └── minimist@0.0.8 
  │   │ ├── path-exists@1.0.0 
  │   │ ├── path-is-absolute@1.0.1 
  │   │ ├── private@0.1.7 
  │   │ ├─┬ regenerator@0.8.40 
  │   │ │ ├─┬ commoner@0.10.8 
  │   │ │ │ ├── commander@2.11.0 
  │   │ │ │ ├─┬ detective@4.5.0 
  │   │ │ │ │ ├── acorn@4.0.13 
  │   │ │ │ │ └── defined@1.0.0 
  │   │ │ │ ├─┬ glob@5.0.15 
  │   │ │ │ │ ├─┬ inflight@1.0.6 
  │   │ │ │ │ │ └── wrappy@1.0.2 
  │   │ │ │ │ ├── inherits@2.0.3 
  │   │ │ │ │ └── once@1.4.0 
  │   │ │ │ ├── iconv-lite@0.4.19 
  │   │ │ │ ├── q@1.5.0 
  │   │ │ │ └─┬ recast@0.11.23 
  │   │ │ │   ├── ast-types@0.9.6 
  │   │ │ │   └── esprima@3.1.3 
  │   │ │ ├─┬ defs@1.1.1 
  │   │ │ │ ├─┬ alter@0.2.0 
  │   │ │ │ │ └── stable@0.1.6 
  │   │ │ │ ├── ast-traverse@0.1.1 
  │   │ │ │ ├── breakable@1.0.0 
  │   │ │ │ ├── simple-fmt@0.1.0 
  │   │ │ │ ├── simple-is@0.2.0 
  │   │ │ │ ├── stringmap@0.2.2 
  │   │ │ │ ├── stringset@0.2.1 
  │   │ │ │ ├── tryor@0.1.2 
  │   │ │ │ └─┬ yargs@3.27.0 
  │   │ │ │   ├── camelcase@1.2.1 
  │   │ │ │   ├─┬ cliui@2.1.0 
  │   │ │ │   │ ├─┬ center-align@0.1.3 
  │   │ │ │   │ │ ├─┬ align-text@0.1.4 
  │   │ │ │   │ │ │ ├─┬ kind-of@3.2.2 
  │   │ │ │   │ │ │ │ └── is-buffer@1.1.5 
  │   │ │ │   │ │ │ ├── longest@1.0.1 
  │   │ │ │   │ │ │ └── repeat-string@1.6.1 
  │   │ │ │   │ │ └── lazy-cache@1.0.4 
  │   │ │ │   │ ├── right-align@0.1.3 
  │   │ │ │   │ └── wordwrap@0.0.2 
  │   │ │ │   ├── decamelize@1.2.0 
  │   │ │ │   ├─┬ os-locale@1.4.0 
  │   │ │ │   │ └─┬ lcid@1.0.0 
  │   │ │ │   │   └── invert-kv@1.0.0 
  │   │ │ │   ├── window-size@0.1.4 
  │   │ │ │   └── y18n@3.2.1 
  │   │ │ ├── esprima-fb@15001.1001.0-dev-harmony-fb 
  │   │ │ ├─┬ recast@0.10.33 
  │   │ │ │ └── ast-types@0.8.12 
  │   │ │ └── through@2.3.8 
  │   │ ├─┬ regexpu@1.3.0 
  │   │ │ ├── esprima@2.7.3 
  │   │ │ ├── regenerate@1.3.3 
  │   │ │ ├── regjsgen@0.2.0 
  │   │ │ └─┬ regjsparser@0.1.5 
  │   │ │   └── jsesc@0.5.0 
  │   │ ├── repeating@1.1.3 
  │   │ ├─┬ resolve@1.4.0 
  │   │ │ └── path-parse@1.0.5 
  │   │ ├── shebang-regex@1.0.0 
  │   │ ├── slash@1.0.0 
  │   │ ├── source-map@0.5.7 
  │   │ ├─┬ source-map-support@0.2.10 
  │   │ │ └─┬ source-map@0.1.32 
  │   │ │   └── amdefine@1.0.1 
  │   │ ├── to-fast-properties@1.0.3 
  │   │ ├── trim-right@1.0.1 
  │   │ └── try-resolve@1.0.1 
  │   └── object-assign@4.1.1 
  ├── html2markdown@1.1.0 
  ├── json-matter@1.0.2 
  └── marked@0.3.6 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/json-meta-marked/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0527 took 2.9575s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
'use strict'
/******************************************************************************
  DEPENDENCIES = CUSTOM SDK [Custom Software Development Kit]
******************************************************************************/
var jsonmatter    = require('json-matter')
var marked        = require('marked')
var html2markdown = require('html2markdown')
var method        = require('exemethod')(function(a,b){return b})
var fs            = require('fs')
var os            = require('os')
/******************************************************************************
  PARAMETER = ARGUMENT + [Sanitize & Validate]
******************************************************************************/
var args          = process.argv.slice(2)
function setInput (error, mode, string, filename) {
  if (error) { throw error }
  var $mode       = mode
  var $string     = string
  var $filename   = filename
}
/******************************************************************************
  EXPORT
******************************************************************************/
// REQUIRED MODULE
if ({'required':true,'browserify':true,'browser':true}[method]) {
  module.exports =  {
    parse           : parse,
    serialize       : serialize
  };
} else if({'npm':true,'script':true,'globalcli':true,'localcli':true}[method]) {
  // $ node -p -e 'process.stdin.isTTY' // => true
  if (process.stdin.isTTY) {
    // SERVER $> cli --server
    if (args[0] === '--server') {
      console.log('SERVER with REPL')
      console.log('To abort press: CTRL+D or CTRL+C')
      setInput(null, args[0], null, null)
      startDeamon()
    // CLI $> cli --serialize filename
    } else {
      console.log('NORMAL CLI EXECUTION')
      throw new Error('@TODO: serialize/parse from cli not implemented yet!')
      if (args[1]) { // CLI + 2 args
        setInput(null, args[0], null, args[1])
      } else if (args[0]) { // CLI + 1 arg
        setInput(null, '--parse', null, args[0])
      } else { // CLI + no args
        setInput(new Error('@TODO: add --help option & show when given no args'))
      }
    }
  // $ echo 'foo' | node -p -e 'process.stdin.isTTY' // => undefined
  // @TODO: !!!! Maybe "method='npm'" will not count as normal cli execution !!!! !!!!!!!!!
  } else if (args[0] === '--server') {
    setInput(new Error('@TODO: add stream into server deamon process'));
  // PIPED
  } else if (args[0]) {
    var $mode = args[0]
    startStream()
    startDeamon()
  } else if (!args.length) {
    var $mode     = '--parse'
    startStream()
    startDeamon()
  } else {
    throw new Error('@TODO: whats wrong here???')
  }
} else {
  throw new Error('@TODO: unsupported method: '+method)
}
/******************************************************************************
  PIPE STREAM
******************************************************************************/
function startStream () {
  process.stdin.setEncoding('utf8')
  process.stdin.on('data', function(data) {
    return {
      "--parse"     : function (string) {
        var result = parse(string)
        process.stdout.write(JSON.stringify(result, null, 2))
      },
      "--serialize" : function (string) {
        var result = serialize(JSON.parse(string))
        process.stdout.write(result)
      }
    }[$mode](data)
  })
}
/******************************************************************************
  UNIX SIGNALS
******************************************************************************/
function startDeamon () {
  // ps aux | grep yourscript
  // kill -s SIGINT [process_id]
  process.stdin.resume()
  process.on('SIGINT', function (err) {
    // An easy way to send the SIGINT signal is with Control-C in most terminal programs.
    // Note:
    //   SIGUSR1 is reserved by node.js to start the debugger. It's possible to install a listener but that won't stop the debugger from starting.
    //   SIGTERM and SIGINT have default handlers on non-Windows platforms that resets the terminal mode before exiting with code 128 + signal number. If one of these signals has a listener installed, its default behaviour will be removed (node will no longer exit).
    //   SIGPIPE is ignored by default, it can have a listener installed.
    //   SIGHUP is generated on Windows when the console window is closed, and on other platforms under various similar conditions, see signal(7). It can have a listener installed, however node will be unconditionally terminated by Windows about 10 seconds later. On non-Windows platforms, the default behaviour of SIGHUP is to terminate node, but once a listener has been installed its default behaviour will be removed.
    //   SIGTERM is not supported on Windows, it can be listened on.
    //   SIGINT from the terminal is supported on all platforms, and can usually be generated with CTRL+C (though this may be configurable). It is not generated when terminal raw mode is enabled.
    //   SIGBREAK is delivered on Windows when CTRL+BREAK is pressed, on non-Windows platforms it can be listened on, but there is no way to send or generate it.
    //   SIGWINCH is delivered when the console has been resized. On Windows, this will only happen on write to the console when the cursor is being moved, or when a readable tty is used in raw mode.
    //   SIGKILL cannot have a listener installed, it will unconditionally terminate node on all platforms.
    //   SIGSTOP cannot have a listener installed.
    //   Note that Windows does not support sending Signals, but node offers some emulation with process.kill(), and child_process.kill(): - Sending signal 0 can be used to search for the existence of a process - Sending SIGINT, SIGTERM, and SIGKILL cause the unconditional exit of the target process.
    console.log('Got a SIGINT. Goodbye cruel world.')
    if (err) {
      process.exit(1)
    } else {
      process.exit(0)
    }
  });
}
/******************************************************************************
  MODULE INTERNALS & HELPERS
******************************************************************************/
function parse (string) {
  var result = jsonmatter.parse(string, {
    regex: /^[\s\t\n\r]*---{1}[\s\t\n\r]*(\{[\s\S]*\}[\s\t\n\r]*)(---{1})/
  })
  var markdown        = result.__content__
  var html            = marked(markdown).replace(/\r?\n|\r/g, "")
  result.__content__  = patch(html, result.custom)
  return result
}
function serialize (object) {
  var html    = object.__content__
  html        = unpatch(html, object.custom)
  object.__content__  = html2markdown(html)
  var result  = jsonmatter.serialize(object, {
    delimiter: os.EOL+'---'+os.EOL+os.EOL
  })
  return '---' + os.EOL + result
}
function unpatch (html, custom) {
  // for (var key in custom) {
  //   var htmlstring = custom[key];
  //   for (var old; old != html;){
  //     old = html;
  //     html = html.replace(
  //       htmlstring,
  //       '<a href="('+key+')">{{'+key.substr(2,key.length)+'}}</a>'
  //     );
  //   }
  // }
  if (custom) {
    throw new Error('@TODO: html2markdown parser is too smart - so not yet implemented - open an issue if you need it to be solved')
  }
  // return html;
}
function patch (html, custom) {
  for (var key in custom) {
    var regx = new RegExp('<a href="{{(' + key + ')}}">[^<>]*<\/a>', 'g')
    html = html.replace(regx, function (match, contents, offset, s) {
      return custom[key]
    })
    var regx = new RegExp('{{' + key + '}}', 'g')
    html = html.replace(regx, function (match, contents, offset, s) {
      return custom[key]
    })
  }
  return html
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
