/root/Targets/jils
└─┬ jils@0.7.4 
  └─┬ optimist@0.6.1 
    ├── minimist@0.0.10 
    └── wordwrap@0.0.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/jils/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0685 took 5.5246s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Octal literal in strict mode (46:9) on program // Jils
// ====
//
// The jils repl and the command line
// loader, provides a facility to
// test and run jils code.
//
// __node.js dependencies__
var rl = require('readline'),
	opt = require('optimist'),
	fs = require('fs'),
    sys = require('sys');

// __requires__
var env = require('./lib/env'),
	global = require('./lib/global'),
	extensions = require('./lib/ext').ext,
	parse = require('./lib/parse').parse;
	
// __extensions__
require.extensions['.jils'] = 
	extensions['.jils'](global);
	
// __argv__
var argv = opt.boolean('i').argv;

// If there is filenames as
// arguments, do parse them.
if (argv._.length){
	argv._.forEach(function(file){
		parse('(begin '
			+fs.readFileSync(process.env.PWD+'/'+file, 'utf-8')
				+')', global);
	});
}

// If -i flag is set, start
// the repl interactive mode.
if (argv.i) {
	var repl = rl.createInterface(
		process.stdin, 
		process.stdout, null);

	var prompt = 'jils> ',
		colors = {
			pre: "\033[1;34m", 
			post: "\033[m"
		};

	var issue = fs.readFileSync('./issue.txt');
	console.log(issue.toString());	
	
	repl.question(prompt, function next(input){
		if (!input) return repl.question(prompt, next);
		switch (input.split(' ')[0]){
			case ':q': process.exit(0);
		} 
		var result = parse(input, global),
			output = colors.pre + result + colors.post;
		console.log('\n',output);
		repl.question(prompt, next);
	});
}
 at SyntaxError: Octal literal in strict mode (46:9)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readEscapedChar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:3023:16)
    at Parser.pp$7.readString (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2935:23)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2724:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp$3.parsePropertyValue (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1997:14)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
