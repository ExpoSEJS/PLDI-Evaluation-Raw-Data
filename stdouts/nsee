/root/Targets/nsee
└─┬ nsee@1.0.2 
  ├── commander@2.11.0 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  └── sorted-object@1.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/nsee/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0315 took 6.2796s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var path = require('path');
var readline = require('readline');
var sortedObject = require('sorted-object');

var _exit = process.exit;
var eol = os.EOL;
var pkg = require('../package.json');

var version = pkg.version;

program
    .version(version)
    .usage('[options] [dir]')
    .option('-s, --single', 'add single page app')
    .parse(process.argv);


main()
function main(){
    // Path
    var destinationPath = program.args.shift() || '.';
    // App name
    var appName = path.basename(path.resolve(destinationPath));

    console.log(destinationPath,appName)
    createApplication(appName, destinationPath)
}

/**
 *
 * @param app_name
 * @param path
 */

function createApplication(app_name, path) {
    var wait = 5;

    console.log();
    function complete() {
        if (--wait) return;
        var prompt = launchedFromCmd() ? '>' : '$';

        console.log();
        console.log('   install dependencies:');
        console.log('     %s cd %s && npm install', prompt, path);
        console.log();
        console.log('   run the app:');

        if (launchedFromCmd()) {
            console.log('     %s SET DEBUG=%s:* & npm start', prompt, app_name);
        } else {
            console.log('     %s DEBUG=%s:* npm start', prompt, app_name);
        }

        console.log();
    }

    if (program.single){
        createSinglePage(path,function(){
            complete()
        })
    }


}

function createSinglePage(path,cb){
    mkdir(path, function(){
        write(path + '/package.json', createSinglePkg(path) );
        mkdir(path + '/build/less',function(){
            copy_template('less/reset.less', path + '/build/less/reset.less');
        });
        mkdir(path + '/build/js',function(){
            copy_template('js/zepto.min.js', path + '/build/js/zepto.min.js');
        });
        mkdir(path + '/dist/js');
        mkdir(path + '/dist/images');
        mkdir(path + '/dist/css', cb);
    });
}

/**
 * create package.json
 * @param app_name
 */

function createSinglePkg(app_name){
    // package.json
    var pkg = {
        "name": app_name,
        "version": "1.0.0",
        "devDependencies": {
            "gulp": "^3.9.1",
            "gulp-concat": "^2.6.0",
            "gulp-jsmin": "^0.1.5",
            "gulp-less": "^3.0.5",
            "gulp-minify-css": "^1.2.3"
        }
    }
    return JSON.stringify(pkg, null, 2)
}



/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
    fs.writeFileSync(path, str, { mode: mode || 0666 });
    console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Determine if launched from cmd.exe
 */

function launchedFromCmd() {
    return process.platform === 'win32'
        && process.env._ === undefined;
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
    mkdirp(path, 0755, function(err){
        if (err) throw err;
        console.log('   \033[36mcreate\033[0m : ' + path);
        fn && fn();
    });
}

function copy_template(from, to) {
    from = path.join(__dirname, '..', 'src', from);
    write(to, fs.readFileSync(from, 'utf-8'));
}


 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
