/root/Targets/pochani
└─┬ pochani@1.1.3 
  └── marked@0.3.6 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/pochani/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0372 took 2.1869s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
var markdown = require('marked');
var fs = require('fs');
var path = require('path');
var options = process.argv.slice(2);
//markdown file
//added for node 12.x compatibility
function find(arr,str){
	var found = undefined;
	for(i=0;i<arr.length;i++){
		if(arr[i].match(str)){
			found=arr[i];
			break;
		}
	}
	return found;
}
function copyFile(oldf,newf){
	var oldFile = fs.createReadStream(oldf);
	var newFile = fs.createWriteStream(newf);
	oldFile.pipe(newFile);
	console.log("Copied "+newf);
}

var filename = find(options,/.md$/) || find(options,/.markdown$/);
if(!filename){
	console.log("No Markdown file was specified, please use either .md or .markdown format file");
	process.exit();
}
else{
	fs.access(filename,fs.R_OK,function(error){
		if(error){
			console.log("Markdown file doesn't exist. Exiting...");
			process.exit();
		}
		else{
			render();
		}
	});
}
//custom css file
function copyStyle(){
	var style = find(options,'.css');;
	if(style){
		fs.access(path.join(process.cwd(),style),fs.R_OK,function(error){
			if(!error){
				copyFile(path.join(process.cwd(),style),path.join(process.cwd(),'res/template.css'));
			}
			else{
				console.log('template file not found. using default template..');
				copyFile(path.join(__dirname,'/resources/template.css'),path.join(process.cwd(),'res/template.css'));
			}
		});
	}
	else{
		copyFile(path.join(__dirname,'/resources/template.css'),path.join(process.cwd(),'res/template.css'));
	}
}
//custom css
function render(){
	var contents = fs.readFileSync(filename,'utf-8');
	var pages = contents.split(/\-\-SLIDE\-\-$/gm);
	//get rid of the empty page
	if(pages[0]==''){
		pages.splice(0,1);
	}
	var starting = '<div class="slidecontainer">';
	var itemTemplate = '<div class="slide">{{{{{slidecontent}}}}}</div>';
	var ending = '</div>';
	//start output
	var output = starting;
	//add pages
	console.log('Compiling Markdown...');
	pages.forEach(function(page){
		output+=itemTemplate.replace('{{{{{slidecontent}}}}}',markdown(page));
	});
	//end output
	output+=ending;
	// console.log(output);
	//read the template
	var template = fs.readFileSync(path.join(__dirname,'resources/template.html'),'utf-8');
	var finalResult = template.replace('{{{{{pochani}}}}}',output);
	//generate file
	//copy libraries
	try{
		console.log('Making resource directory...');
		fs.mkdirSync(path.join(process.cwd(),'./res'));
	}catch(e){
		console.log('Directory Exists, using the existing one..');
	}
	copyFile(path.join(__dirname,'/resources/style.css'),path.join(process.cwd(),'res/style.css'));
	copyFile(path.join(__dirname,'resources/pochaslider.min.js'),path.join(process.cwd(),'res/pochaslider.min.js'));
	copyFile(path.join(__dirname,'/resources/functions.min.js'),path.join(process.cwd(),'res/functions.min.js'));
	copyFile(path.join(__dirname,'/resources/jquery.js'),path.join(process.cwd(),'res/jquery.js'));
	copyFile(path.join(__dirname,'/resources/touch.js'),path.join(process.cwd(),'res/touch.js'));
	copyStyle();
	fs.writeFileSync(filename+".html",finalResult,'utf-8');
} at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
