/root/Targets/broccoli-fast-browserify
└─┬ broccoli-fast-browserify@0.2.12 
  ├─┬ broccoli-kitchen-sink-helpers@0.2.9 
  │ └─┬ glob@5.0.15 
  │   ├── minimatch@3.0.4 
  │   └── path-is-absolute@1.0.1 
  ├─┬ browserify@10.2.4 
  │ ├── assert@1.3.0 
  │ ├─┬ browser-pack@5.0.1 
  │ │ ├─┬ combine-source-map@0.6.1 
  │ │ │ ├── convert-source-map@1.1.3 
  │ │ │ ├── inline-source-map@0.5.0 
  │ │ │ ├── lodash.memoize@3.0.4 
  │ │ │ └─┬ source-map@0.4.4 
  │ │ │   └── amdefine@1.0.1 
  │ │ ├── through2@1.1.1 
  │ │ └── umd@3.0.1 
  │ ├─┬ browser-resolve@1.11.2 
  │ │ └── resolve@1.1.7 
  │ ├─┬ browserify-zlib@0.1.4 
  │ │ └── pako@0.2.9 
  │ ├─┬ buffer@3.6.0 
  │ │ ├── base64-js@0.0.8 
  │ │ ├── ieee754@1.1.8 
  │ │ └── isarray@1.0.0 
  │ ├── builtins@0.0.7 
  │ ├── commondir@0.0.1 
  │ ├─┬ concat-stream@1.4.10 
  │ │ └── typedarray@0.0.6 
  │ ├─┬ console-browserify@1.1.0 
  │ │ └── date-now@0.1.4 
  │ ├── constants-browserify@0.0.1 
  │ ├─┬ crypto-browserify@3.11.1 
  │ │ ├─┬ browserify-cipher@1.0.0 
  │ │ │ ├─┬ browserify-aes@1.0.8 
  │ │ │ │ └── buffer-xor@1.0.3 
  │ │ │ ├─┬ browserify-des@1.0.0 
  │ │ │ │ └── des.js@1.0.0 
  │ │ │ └─┬ evp_bytestokey@1.0.3 
  │ │ │   └─┬ md5.js@1.3.4 
  │ │ │     └── hash-base@3.0.4 
  │ │ ├─┬ browserify-sign@4.0.4 
  │ │ │ ├── bn.js@4.11.8 
  │ │ │ ├── browserify-rsa@4.0.1 
  │ │ │ ├─┬ elliptic@6.4.0 
  │ │ │ │ ├── brorand@1.1.0 
  │ │ │ │ ├── hash.js@1.1.3 
  │ │ │ │ ├── hmac-drbg@1.0.1 
  │ │ │ │ ├── minimalistic-assert@1.0.0 
  │ │ │ │ └── minimalistic-crypto-utils@1.0.1 
  │ │ │ └─┬ parse-asn1@5.1.0 
  │ │ │   └── asn1.js@4.9.1 
  │ │ ├── create-ecdh@4.0.0 
  │ │ ├─┬ create-hash@1.1.3 
  │ │ │ ├── cipher-base@1.0.4 
  │ │ │ └─┬ ripemd160@2.0.1 
  │ │ │   └── hash-base@2.0.2 
  │ │ ├─┬ create-hmac@1.1.6 
  │ │ │ └── safe-buffer@5.1.1 
  │ │ ├─┬ diffie-hellman@5.0.2 
  │ │ │ └── miller-rabin@4.0.1 
  │ │ ├── pbkdf2@3.0.14 
  │ │ ├── public-encrypt@4.0.0 
  │ │ └── randombytes@2.0.5 
  │ ├── defined@1.0.0 
  │ ├─┬ deps-sort@1.3.9 
  │ │ └── through2@1.1.1 
  │ ├── domain-browser@1.1.7 
  │ ├── duplexer2@0.0.2 
  │ ├── events@1.0.2 
  │ ├─┬ has@1.0.1 
  │ │ └── function-bind@1.1.1 
  │ ├── htmlescape@1.1.1 
  │ ├─┬ http-browserify@1.7.0 
  │ │ └── Base64@0.2.1 
  │ ├── https-browserify@0.0.1 
  │ ├── inherits@2.0.3 
  │ ├─┬ insert-module-globals@6.6.3 
  │ │ ├── is-buffer@1.1.5 
  │ │ ├─┬ lexical-scope@1.2.0 
  │ │ │ └── astw@2.2.0 
  │ │ └── through2@1.1.1 
  │ ├── isarray@0.0.1 
  │ ├─┬ JSONStream@1.3.1 
  │ │ ├── jsonparse@1.3.1 
  │ │ └── through@2.3.8 
  │ ├─┬ labeled-stream-splicer@1.0.2 
  │ │ └─┬ stream-splicer@1.3.2 
  │ │   └── through2@1.1.1 
  │ ├─┬ module-deps@3.9.1 
  │ │ ├── detective@4.5.0 
  │ │ ├─┬ stream-combiner2@1.0.2 
  │ │ │ └─┬ through2@0.5.1 
  │ │ │   ├── readable-stream@1.0.34 
  │ │ │   └── xtend@3.0.0 
  │ │ └── through2@1.1.1 
  │ ├── os-browserify@0.1.2 
  │ ├─┬ parents@1.0.1 
  │ │ └── path-platform@0.11.15 
  │ ├── path-browserify@0.0.0 
  │ ├── process@0.11.10 
  │ ├── punycode@1.4.1 
  │ ├── querystring-es3@0.2.1 
  │ ├─┬ read-only-stream@1.1.1 
  │ │ └── readable-wrap@1.0.0 
  │ ├─┬ readable-stream@1.1.14 
  │ │ └── core-util-is@1.0.2 
  │ ├─┬ resolve@1.4.0 
  │ │ └── path-parse@1.0.5 
  │ ├─┬ shasum@1.0.2 
  │ │ ├─┬ json-stable-stringify@0.0.1 
  │ │ │ └── jsonify@0.0.0 
  │ │ └── sha.js@2.4.9 
  │ ├── shell-quote@0.0.1 
  │ ├── stream-browserify@1.0.0 
  │ ├── string_decoder@0.10.31 
  │ ├─┬ subarg@1.0.0 
  │ │ └── minimist@1.2.0 
  │ ├─┬ syntax-error@1.3.0 
  │ │ └── acorn@4.0.13 
  │ ├── through2@1.1.1 
  │ ├── timers-browserify@1.4.2 
  │ ├── tty-browserify@0.0.0 
  │ ├─┬ url@0.10.3 
  │ │ ├── punycode@1.3.2 
  │ │ └── querystring@0.2.0 
  │ ├─┬ util@0.10.3 
  │ │ └── inherits@2.0.1 
  │ └─┬ vm-browserify@0.0.4 
  │   └── indexof@0.0.1 
  ├─┬ glob@4.5.3 
  │ ├─┬ inflight@1.0.6 
  │ │ └── wrappy@1.0.2 
  │ ├─┬ minimatch@2.0.10 
  │ │ └─┬ brace-expansion@1.1.8 
  │ │   ├── balanced-match@1.0.0 
  │ │   └── concat-map@0.0.1 
  │ └── once@1.4.0 
  ├── lodash@2.4.2 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  ├─┬ quick-temp@0.1.8 
  │ ├── mktemp@0.4.0 
  │ ├─┬ rimraf@2.6.2 
  │ │ └─┬ glob@7.1.2 
  │ │   └── fs.realpath@1.0.0 
  │ └─┬ underscore.string@3.3.4 
  │   ├── sprintf-js@1.1.1 
  │   └── util-deprecate@1.0.2 
  ├── rsvp@3.6.2 
  ├─┬ through2@0.6.5 
  │ └── readable-stream@1.0.34 
  ├── walk-sync@0.1.3 
  └── xtend@4.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/broccoli-fast-browserify/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 26% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","Date","RegExp","join","parseInt","sort","now","create","setPrototypeOf","Array","isArray"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0482 took 20.9659s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require("assert")
var path = require("path")
var fs = require("fs")
var glob = require("glob")
var _0666 = parseInt('666', 8)

var defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
var timeout = 0

var isWindows = (process.platform === "win32")

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function(m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0
  var errState = null
  var n = 0

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, function (er, stat) {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

  function next (er) {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  function afterGlob (er, results) {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(function (p) {
      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            var time = busyTries * 100
            // try again, with the same exact callback as this one.
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, time)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(function () {
              rimraf_(p, options, CB)
            }, timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      })
    })
  }
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er)
    assert(er instanceof Error)

  options.chmod(p, _0666, function (er2) {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, function(er3, stats) {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er)
    assert(er instanceof Error)

  try {
    options.chmodSync(p, _0666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

function rmkids(p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er)
      return cb(er)
    var n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  var results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (var i = 0; i < results.length; i++) {
    var p = results[i]

    try {
      var st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr)
    assert(originalEr instanceof Error)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  var retries = isWindows ? 100 : 1
  var i = 0
  do {
    var threw = true
    try {
      var ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/broccoli-fast-browserify/node_modules/broccoli-fast-browserify/index.js. Coverage (Term): 3% Coverage (LOC): 3%
*- File /root/Targets/broccoli-fast-browserify/node_modules/lodash/dist/lodash.js. Coverage (Term): 19% Coverage (LOC): 27%
*- File /root/Targets/broccoli-fast-browserify/node_modules/rsvp/dist/rsvp.js. Coverage (Term): 20% Coverage (LOC): 30%
*- File /root/Targets/broccoli-fast-browserify/node_modules/quick-temp/index.js. Coverage (Term): 15% Coverage (LOC): 25%
*- File /root/Targets/broccoli-fast-browserify/node_modules/mktemp/index.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/broccoli-fast-browserify/node_modules/mktemp/lib/mktemp.js. Coverage (Term): 11% Coverage (LOC): 15%
*- File /root/Targets/broccoli-fast-browserify/node_modules/mktemp/lib/randomstring.js. Coverage (Term): 24% Coverage (LOC): 31%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
