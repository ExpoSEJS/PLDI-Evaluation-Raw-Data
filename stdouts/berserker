
> websocket@1.0.8 install /root/Targets/berserker/node_modules/websocket
> node install.js

[websocket v1.0.8] Attempting to compile native extensions.
[websocket v1.0.8]
    Native code compile failed!!
    Please note that this module DOES NOT REQUIRE the native components
    and will still work without them, though not quite as efficiently.

    On Windows, native extensions require Visual Studio and Python.
    On Unix, native extensions require Python, make and a C++ compiler.
    Start npm with --websocket:verbose to show compilation output (if any).
/root/Targets/berserker
└─┬ berserker@0.4.5-1 
  ├── mime@1.2.9 
  ├── mkdirp@0.3.5 
  ├── router@0.6.2 
  └── websocket@1.0.8 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/berserker/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 31% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.1824 took 4.4673s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Invalid number (9:22) on program var util = require('./util'),
        settings = require('./settings.json'),
        mkdirp = require('mkdirp'),
        fs = require('fs');

//Init config file in user's home folder.
var path = process.env.HOME + '/.berserker';
try {
    mkdirp.sync(path, 0700);
    var settingsFile = path + '/settings.json';
    if (fs.existsSync(settingsFile)) {
        settings = require(settingsFile);
    }
    else {
        saveSettings();
    }
}
catch (err) {
    console.warn('WARNING: Cannot create folder "%s". Settings changes will not persist across runs.', path);
}

//Replace {ENV} placeholders with their actual values.
util.traverse(settings, function(obj, key, value) {
    if (typeof value === 'string') {
        obj[key] = value.replace(/\{[^\{\}]+\}/g, function(v) {
            return process.env[v.replace(/[\{\}]/g, '')];
        });
    }
});

//Check if config values are kosher.
var dirs = [settings.aria2c['save-session'], settings.aria2c['input-file'], settings.aria2c.log];
for (var i = 0; i < dirs.length; ++i) {
    if (typeof dirs[i] === 'string') {
        dirs[i] = dirs[i].substring(0, dirs[i].lastIndexOf('/'));
    }
}
dirs.push(settings.aria2c.dir);
for (var i = 0; i < dirs.length; ++i) {
    try {
        mkdirp.sync(dirs[i], 0700);
    }
    catch (err) {
        console.error('ERROR: Cannot create folder "%s".', dirs[i]);
        process.exit(1);
    }
}

var files = [settings.aria2c['save-session'], settings.aria2c['input-file'], settings.aria2c.log];
for (var i = 0; i < files.length; ++i) {
    try {
        var fd = fs.openSync(files[i], 'a');
        fs.close(fd);
    }
    catch (err) {
        console.error('ERROR: The file "%s" cannot be opened for writing.', files[i]);
        process.exit(1);
    }
}

//Register listener for config save.
util.eventEmitter.on('aria2.changeGlobalOption', function(options) {
    if (options) {
        for (var key in options[0]) {
            settings.aria2c[key] = options[0][key];
        }
        saveSettings();
    }
});

function saveSettings(path) {
    path = path || process.env.HOME + '/.berserker/settings.json';
    fs.writeFile(path, JSON.stringify(settings, null, 4),
            function(err) {
                if (err) {
                    console.error('ERROR: Cannot write to settings file "%s"',
                            err.path);
                }
                else {
                    console.log("INFO: Settings saved.");
                }
            });
}

module.exports = settings; at SyntaxError: Invalid number (9:22)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.expect (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:597:10)
    at Parser.pp$3.parseExprList (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2152:16)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/berserker/node_modules/berserker/node/berserker.js. Coverage (Term): 14% Coverage (LOC): 13%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
