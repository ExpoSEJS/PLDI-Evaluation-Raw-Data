
> abstract-socket@1.1.0 install /root/Targets/dbus-native-windows/node_modules/abstract-socket
> node-gyp rebuild

make: Entering directory '/root/Targets/dbus-native-windows/node_modules/abstract-socket/build'
  CXX(target) Release/obj.target/abstract_socket/src/abstract_socket.o
  SOLINK_MODULE(target) Release/obj.target/abstract_socket.node
  COPY Release/abstract_socket.node
make: Leaving directory '/root/Targets/dbus-native-windows/node_modules/abstract-socket/build'
/root/Targets/dbus-native-windows
└─┬ dbus-native-windows@0.2.1 
  ├─┬ abstract-socket@1.1.0 
  │ ├── bindings@1.3.0 
  │ └── nan@2.7.0 
  ├─┬ event-stream@3.3.4 
  │ ├── duplexer@0.1.1 
  │ ├── from@0.1.7 
  │ ├── map-stream@0.1.0 
  │ ├── pause-stream@0.0.11 
  │ ├── split@0.3.3 
  │ ├── stream-combiner@0.0.4 
  │ └── through@2.3.8 
  ├── put@0.0.6 
  └─┬ xml2js@0.1.14 
    └── sax@1.2.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/dbus-native-windows/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 27% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0233 took 4.3448s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:82) on program var assert = require('assert');

var parseSignature = require('./signature');
var put = require('put');
var Marshallers = require('./marshallers');
var align = require('./align').align;

var marshall = module.exports = function(signature, data, offset) {
  if (typeof(offset) == 'undefined') offset = 0;
  var tree = parseSignature(signature);
  if (!Array.isArray(data) || data.length !== tree.length) {
    //console.log([tree, data]);
    throw new Error('message body does not match message signature. Body:' + JSON.stringify(data) + ", signature:" + signature);
  }
  var putstream = put();
  putstream._offset = offset;
  var buf = writeStruct(putstream, tree, data).buffer();
  //console.log(buf, buf.toString('hex'));
  return buf;
};

// TODO: serialise JS objects as a{sv}
//function writeHash(ps, treeKey, treeVal, data) {
//
//}

function writeStruct(ps, tree, data) {
  if (tree.length !== data.length) {
    throw new Error("Invalid struct data");
  }
  for (var i = 0; i < tree.length; ++i) {
    write(ps, tree[i], data[i]);
  }
  return ps;
}

function write(ps, ele, data) {
  switch (ele.type) {
    case '(':
    case '{':
      align(ps, 8);
      //writeHash(ps, ele.child[0], ele.child[1], data);
      writeStruct(ps, ele.child, data);
      break;
    case 'a':

      // array serialisation:
      // length of array body aligned at 4 byte boundary
      // (optional 4 bytes to align first body element on 8-byte boundary if element
      // body
      var arrPut = put();
      arrPut._offset = ps._offset;
      var _offset = arrPut._offset;
      writeSimple(arrPut, 'u', 0); // array length placeholder
      var lengthOffset = arrPut._offset - 4 - _offset;
      // we need to alighn here because alignment is not included in array length
      if (['x', 't', 'd', '{', '('].indexOf(ele.child[0].type) !== -1) align(arrPut, 8);
      var startOffset = arrPut._offset;
      for (var i = 0; i < data.length; ++i)
      write(arrPut, ele.child[0], data[i]);
      var arrBuff = arrPut.buffer();
      var length = arrPut._offset - startOffset;
      // lengthOffset in the range 0 to 3 depending on number of align bytes padded _before_ arrayLength
      arrBuff.writeUInt32LE(length, lengthOffset);
      ps.put(arrBuff);
      ps._offset += arrBuff.length;

      //console.log('=========================');
      //console.error(require('./hexy').hexy(arrBuff, {prefix: '======= '}));
      //console.log('=========================');
      break;
    case 'v':
      // TODO: allow serialisation of simple types as variants, e. g 123 -> ['u', 123], true -> ['b', 1], 'abc' -> ['s', 'abc']
      assert.equal(data.length, 2, "variant data should be [signature, data]");
      var signatureEle = {
        type: 'g',
        child: []
      };
      write(ps, signatureEle, data[0]);
      if (data[0].length == 1) {
        var variantEle = {
          type: data[0],
          child: []
        };
        write(ps, variantEle, data[1]);
      } else {
        var tree = parseSignature(data[0]);
        writeStruct(ps, tree, data[1]);
      }
      break;
    default:
      return writeSimple(ps, ele.type, data);
  }
}


var intTypes = ['y', 'n', 'q', 'i', 'u', 'x', 't'];
var stringTypes = ['g', 'o', 's'];

function writeSimple(ps, type, data) {
  if (typeof(data) === 'undefined') throw new Error('Serialisation of JS \'undefined\' type is not supported by d-bus');
  if (data === null) throw new Error('Serialisation of null value is not supported by d-bus');

  if (Buffer.isBuffer(data)) data = buffer.toString(); // encoding?
  if (stringTypes.indexOf(type) != -1 && typeof(data) !== 'string') {
      throw new Error('Expected string or buffer argument, got ' + JSON.stringify(data) + ' of type \'' + type + '\'');
  }

  var buff;

  var simpleMarshaller = Marshallers.MakeSimpleMarshaller(type);
  simpleMarshaller.marshall(ps, data);
  return ps;
}
 at SyntaxError: Unexpected token (1:82)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/dbus-native-windows/node_modules/dbus-native-windows/index.js. Coverage (Term): 6% Coverage (LOC): 7%
*- File /root/Targets/dbus-native-windows/node_modules/dbus-native-windows/lib/constants.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/dbus-native-windows/node_modules/dbus-native-windows/lib/message.js. Coverage (Term): 5% Coverage (LOC): 5%
*- File /root/Targets/dbus-native-windows/node_modules/dbus-native-windows/lib/unmarshall.js. Coverage (Term): 29% Coverage (LOC): 47%
*- File /root/Targets/dbus-native-windows/node_modules/dbus-native-windows/lib/dbuffer.js. Coverage (Term): 14% Coverage (LOC): 25%
*- File /root/Targets/dbus-native-windows/node_modules/dbus-native-windows/lib/signature.js. Coverage (Term): 16% Coverage (LOC): 22%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
