/root/Targets/css-combo
└─┬ css-combo@0.5.5 
  ├── async@0.9.2 
  ├── iconv-lite@0.4.19 
  ├── lodash@3.10.1 
  └─┬ request@2.83.0 
    ├── aws-sign2@0.7.0 
    ├── aws4@1.6.0 
    ├── caseless@0.12.0 
    ├─┬ combined-stream@1.0.5 
    │ └── delayed-stream@1.0.0 
    ├── extend@3.0.1 
    ├── forever-agent@0.6.1 
    ├─┬ form-data@2.3.1 
    │ └── asynckit@0.4.0 
    ├─┬ har-validator@5.0.3 
    │ ├─┬ ajv@5.2.3 
    │ │ ├── co@4.6.0 
    │ │ ├── fast-deep-equal@1.0.0 
    │ │ ├── json-schema-traverse@0.3.1 
    │ │ └─┬ json-stable-stringify@1.0.1 
    │ │   └── jsonify@0.0.0 
    │ └── har-schema@2.0.0 
    ├─┬ hawk@6.0.2 
    │ ├── boom@4.3.1 
    │ ├─┬ cryptiles@3.1.2 
    │ │ └── boom@5.2.0 
    │ ├── hoek@4.2.0 
    │ └── sntp@2.0.2 
    ├─┬ http-signature@1.2.0 
    │ ├── assert-plus@1.0.0 
    │ ├─┬ jsprim@1.4.1 
    │ │ ├── extsprintf@1.3.0 
    │ │ ├── json-schema@0.2.3 
    │ │ └─┬ verror@1.10.0 
    │ │   └── core-util-is@1.0.2 
    │ └─┬ sshpk@1.13.1 
    │   ├── asn1@0.2.3 
    │   ├── bcrypt-pbkdf@1.0.1 
    │   ├── dashdash@1.14.1 
    │   ├── ecc-jsbn@0.1.1 
    │   ├── getpass@0.1.7 
    │   ├── jsbn@0.1.1 
    │   └── tweetnacl@0.14.5 
    ├── is-typedarray@1.0.0 
    ├── isstream@0.1.2 
    ├── json-stringify-safe@5.0.1 
    ├─┬ mime-types@2.1.17 
    │ └── mime-db@1.30.0 
    ├── oauth-sign@0.8.2 
    ├── performance-now@2.1.0 
    ├── qs@6.5.1 
    ├── safe-buffer@5.1.1 
    ├── stringstream@0.0.5 
    ├─┬ tough-cookie@2.3.3 
    │ └── punycode@1.4.1 
    ├── tunnel-agent@0.6.0 
    └── uuid@3.1.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/css-combo/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 28.000000000000004% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","RegExp","WeakMap","max","Array"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0876 took 32.2284s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Octal literal in strict mode (17:20) on program var fs = require('fs');
var url = require('url');
var path = require('path');
var http = require('http');
var request = require('request');

var ZNMAP = {

	'\\534E\\6587\\7EC6\\9ED1': ['STHeiti Light [STXihei]', 'STXiheii'],
	'\\534E\\6587\\9ED1\\4F53': 'STHeiti',
	'\\4E3D\\9ED1 Pro': 'LiHei Pro Medium',
	'\\4E3D\\5B8B Pro': 'LiSong Pro Light',
	'\\6807\\6977\\4F53': ["DFKai-SB","BiauKai"],
	'\\82F9\\679C\\4E3D\\4E2D\\9ED1': 'Apple LiGothic Medium',
	'\\82F9\\679C\\4E3D\\7EC6\\5B8B': 'Apple LiSung Light',

	'\\65B0\\7EC6\\660E\4F53': 'PMingLiU',
	'\\7EC6\\660E\\4F53': 'MingLiU',
	'\\9ED1\\4F53': 'SimHei',
	'\\5B8B\\4F53': 'SimSun',
	'\\65B0\\5B8B\\4F53': 'NSimSun',
	'\\4EFF\\5B8B': 'FangSong',
	'\\6977\\4F53': 'KaiTi',
	'\\4EFF\\5B8B_GB2312': 'FangSong_GB2312',
	'\\6977\\4F53_GB2312': 'KaiTi_GB2312',
	'\\5FAE\\x8F6F\\6B63\\9ED1\\4F53': 'Microsoft JhengHei',
	'\\5FAE\\8F6F\\96C5\\9ED1': 'Microsoft YaHei',

	'\\96B6\\4E66': 'LiSu',
	'\\5E7C\\5706': 'YouYuan',
	'\\534E\\6587\\6977\\4F53': 'STKaiti',
	'\\534E\\6587\\5B8B\\4F53': 'STSong',
	'\\534E\\6587\\4E2D\\5B8B': 'STZhongsong',
	'\\534E\\6587\\4EFF\\5B8B': 'STFangsong',
	'\\65B9\\6B63\\8212\\4F53': 'FZShuTi',
	'\\65B9\\6B63\\59DA\\4F53': 'FZYaoti',
	'\\534E\\6587\\5F69\\4E91': 'STCaiyun',
	'\\534E\\6587\\7425\\73C0': 'STHupo',
	'\\534E\\6587\\96B6\\4E66': 'STLiti',
	'\\534E\\6587\\884C\\6977': 'STXingkai',
	'\\534E\\6587\\65B0\\9B4F': 'STXinwei'
};

module.exports = {
	debug: false,
	log: function(msg, type) {
		var self = this;
		type = type ? type: 'info';
		if (msg && (self.debug || (!self.debug && type != 'debug'))) {
			console.log((type ? '[' + type.toUpperCase() + '] ': '') + msg);
		}
	},
	/**
     * analyze @charset first.
     * @example:
     * 1. @charset 'gbk';
     * 2. @charset "gbk";
     * @link: https://developer.mozilla.org/en/CSS/@charset
     */
	detectCharset: function(input) {
		var result = /@charset\s+['|"](\w*)["|'];/.exec(input),
		charset = 'UTF-8';
		if (result && result[1]) {
			charset = result[1];
		}
		//        else{
		//            var detect = jschardet.detect(input);
		//            if(detect && detect.confidence > 0.9){
		//                charset = detect.encoding;
		//            }
		//        }
		return charset;
	},
	mkdirSync: function(dirpath, mode) {
		var self = this;
		if (!fs.existsSync(dirpath)) {
			// try to create parent dir first.
			self.mkdirSync(path.dirname(dirpath), mode);
			fs.mkdirSync(dirpath, mode);
		}
	},
	getRemoteFile: function(filePath, callback) {
		var self = this;
		if(filePath.substr(0, 2) === '//'){
			// TODO this is just a patch. It need to consider more complex situations such as https only.
			filePath = 'http:' + filePath;
		}
		request({
			url: filePath,
			headers: {
				'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.93 Safari/537.36'
			}
		}, function (error, response, body) {
			if (!error && response.statusCode == 200) {
				var charset = 'utf-8';
				if (typeof response.headers['content-type'] !== 'undefined') {
					var regResult = response.headers['content-type'].match(/;charset=(\S+)/);
					if (regResult !== null && regResult[1]) {
						charset = regResult[1];
						self.log('The charset of url ' + filePath + ' is: ' + charset, 'debug');
					}
				}
				callback && callback(body, charset);
			}else{
				self.log('request for ' + filePath + ' error: ' + error);
			}
		});
	},
	//中文转unicode
	a2u: function(text) {
		text = escape(text.toString()).replace(/\+/g, "%2B");
		var matches = text.match(/(%([0-9A-F]{2}))/gi);
		if (matches) {
			for (var matchid = 0; matchid < matches.length; matchid++) {
				var code = matches[matchid].substring(1, 3);
				if (parseInt(code, 16) >= 128) {
					text = text.replace(matches[matchid], '%u00' + code);
				}
			}
		}
		text = text.replace('%25', '%u0025');

		return text;
	},
	unicode2En: function(code) {
        if(ZNMAP.hasOwnProperty(code)){
            return ZNMAP[code];
        }
        return code;
	} 
};

 at SyntaxError: Octal literal in strict mode (17:20)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readEscapedChar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:3023:16)
    at Parser.pp$7.readString (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2935:23)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2724:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.expect (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:597:10)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/css-combo/node_modules/css-combo/lib/index.js. Coverage (Term): 12% Coverage (LOC): 8%
*- File /root/Targets/css-combo/node_modules/lodash/index.js. Coverage (Term): 20% Coverage (LOC): 31%
*- File /root/Targets/css-combo/node_modules/async/lib/async.js. Coverage (Term): 10% Coverage (LOC): 14%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
