/root/Targets/kickoff
└─┬ kickoff@0.7.0 
  ├── async@0.9.2 
  ├── commander@2.0.0 
  ├── extend@2.0.1 
  ├─┬ gulp@3.9.1 
  │ ├── archy@1.0.0 
  │ ├─┬ chalk@1.1.3 
  │ │ ├── ansi-styles@2.2.1 
  │ │ ├── escape-string-regexp@1.0.5 
  │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ └── ansi-regex@2.1.1 
  │ │ ├── strip-ansi@3.0.1 
  │ │ └── supports-color@2.0.0 
  │ ├── deprecated@0.0.1 
  │ ├─┬ gulp-util@3.0.8 
  │ │ ├── array-differ@1.0.0 
  │ │ ├── array-uniq@1.0.3 
  │ │ ├── beeper@1.1.1 
  │ │ ├── dateformat@2.2.0 
  │ │ ├─┬ fancy-log@1.3.0 
  │ │ │ └── time-stamp@1.1.0 
  │ │ ├─┬ gulplog@1.0.0 
  │ │ │ └── glogg@1.0.0 
  │ │ ├─┬ has-gulplog@0.1.0 
  │ │ │ └── sparkles@1.0.0 
  │ │ ├── lodash._reescape@3.0.0 
  │ │ ├── lodash._reevaluate@3.0.0 
  │ │ ├── lodash._reinterpolate@3.0.0 
  │ │ ├─┬ lodash.template@3.6.2 
  │ │ │ ├── lodash._basecopy@3.0.1 
  │ │ │ ├── lodash._basetostring@3.0.1 
  │ │ │ ├── lodash._basevalues@3.0.0 
  │ │ │ ├── lodash._isiterateecall@3.0.9 
  │ │ │ ├─┬ lodash.escape@3.2.0 
  │ │ │ │ └── lodash._root@3.0.1 
  │ │ │ ├─┬ lodash.keys@3.1.2 
  │ │ │ │ ├── lodash._getnative@3.9.1 
  │ │ │ │ ├── lodash.isarguments@3.1.0 
  │ │ │ │ └── lodash.isarray@3.0.4 
  │ │ │ ├── lodash.restparam@3.6.1 
  │ │ │ └── lodash.templatesettings@3.1.1 
  │ │ ├─┬ multipipe@0.1.2 
  │ │ │ └── duplexer2@0.0.2 
  │ │ ├── object-assign@3.0.0 
  │ │ ├── replace-ext@0.0.1 
  │ │ ├─┬ through2@2.0.3 
  │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │   ├── isarray@1.0.0 
  │ │ │   └── string_decoder@1.0.3 
  │ │ └─┬ vinyl@0.5.3 
  │ │   └── clone@1.0.2 
  │ ├── interpret@1.0.4 
  │ ├─┬ liftoff@2.3.0 
  │ │ ├── extend@3.0.1 
  │ │ ├─┬ findup-sync@0.4.3 
  │ │ │ ├─┬ detect-file@0.1.0 
  │ │ │ │ └── fs-exists-sync@0.1.0 
  │ │ │ ├─┬ is-glob@2.0.1 
  │ │ │ │ └── is-extglob@1.0.0 
  │ │ │ ├─┬ micromatch@2.3.11 
  │ │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ │ ├── array-unique@0.2.1 
  │ │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │ │   ├─┬ isobject@2.1.0 
  │ │ │ │ │ │   │ └── isarray@1.0.0 
  │ │ │ │ │ │   ├─┬ randomatic@1.1.7 
  │ │ │ │ │ │   │ ├─┬ is-number@3.0.0 
  │ │ │ │ │ │   │ │ └── kind-of@3.2.2 
  │ │ │ │ │ │   │ └── kind-of@4.0.0 
  │ │ │ │ │ │   └── repeat-string@1.6.1 
  │ │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ │ ├── extglob@0.3.2 
  │ │ │ │ ├── filename-regex@2.0.1 
  │ │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ │ ├─┬ normalize-path@2.1.1 
  │ │ │ │ │ └── remove-trailing-separator@1.1.0 
  │ │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ │ ├── for-own@0.1.5 
  │ │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ │ ├─┬ glob-base@0.3.0 
  │ │ │ │ │ │ └── glob-parent@2.0.0 
  │ │ │ │ │ └── is-dotfile@1.0.3 
  │ │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │ │     └── is-primitive@2.0.0 
  │ │ │ └─┬ resolve-dir@0.1.1 
  │ │ │   ├── expand-tilde@1.2.2 
  │ │ │   └─┬ global-modules@0.2.3 
  │ │ │     ├─┬ global-prefix@0.1.5 
  │ │ │     │ ├── ini@1.3.4 
  │ │ │     │ └─┬ which@1.3.0 
  │ │ │     │   └── isexe@2.0.0 
  │ │ │     └── is-windows@0.2.0 
  │ │ ├─┬ fined@1.1.0 
  │ │ │ ├─┬ expand-tilde@2.0.2 
  │ │ │ │ └─┬ homedir-polyfill@1.0.1 
  │ │ │ │   └── parse-passwd@1.0.0 
  │ │ │ ├─┬ is-plain-object@2.0.4 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ ├─┬ object.defaults@1.1.0 
  │ │ │ │ ├── array-each@1.0.1 
  │ │ │ │ ├── array-slice@1.0.0 
  │ │ │ │ ├─┬ for-own@1.0.0 
  │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ ├─┬ object.pick@1.3.0 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ └─┬ parse-filepath@1.0.1 
  │ │ │   ├─┬ is-absolute@0.2.6 
  │ │ │   │ └─┬ is-relative@0.2.1 
  │ │ │   │   └─┬ is-unc-path@0.1.2 
  │ │ │   │     └── unc-path-regex@0.1.2 
  │ │ │   ├── map-cache@0.2.2 
  │ │ │   └─┬ path-root@0.1.1 
  │ │ │     └── path-root-regex@0.1.2 
  │ │ ├── flagged-respawn@0.3.2 
  │ │ ├── lodash.isplainobject@4.0.6 
  │ │ ├── lodash.isstring@4.0.1 
  │ │ ├── lodash.mapvalues@4.6.0 
  │ │ ├── rechoir@0.6.2 
  │ │ └─┬ resolve@1.4.0 
  │ │   └── path-parse@1.0.5 
  │ ├── minimist@1.2.0 
  │ ├─┬ orchestrator@0.3.8 
  │ │ ├─┬ end-of-stream@0.1.5 
  │ │ │ └─┬ once@1.3.3 
  │ │ │   └── wrappy@1.0.2 
  │ │ ├── sequencify@0.0.7 
  │ │ └── stream-consume@0.1.0 
  │ ├── pretty-hrtime@1.0.3 
  │ ├── semver@4.3.6 
  │ ├─┬ tildify@1.2.0 
  │ │ └── os-homedir@1.0.2 
  │ ├─┬ v8flags@2.1.1 
  │ │ └── user-home@1.1.1 
  │ └─┬ vinyl-fs@0.3.14 
  │   ├── defaults@1.0.3 
  │   ├─┬ glob-stream@3.1.18 
  │   │ ├─┬ glob@4.5.3 
  │   │ │ └── inflight@1.0.6 
  │   │ ├─┬ glob2base@0.0.12 
  │   │ │ └── find-index@0.1.1 
  │   │ ├─┬ minimatch@2.0.10 
  │   │ │ └─┬ brace-expansion@1.1.8 
  │   │ │   ├── balanced-match@1.0.0 
  │   │ │   └── concat-map@0.0.1 
  │   │ ├── ordered-read-streams@0.1.0 
  │   │ ├─┬ through2@0.6.5 
  │   │ │ └── readable-stream@1.0.34 
  │   │ └── unique-stream@1.0.0 
  │   ├─┬ glob-watcher@0.0.6 
  │   │ └─┬ gaze@0.5.2 
  │   │   └─┬ globule@0.1.0 
  │   │     ├─┬ glob@3.1.21 
  │   │     │ ├── graceful-fs@1.2.3 
  │   │     │ └── inherits@1.0.2 
  │   │     ├── lodash@1.0.2 
  │   │     └── minimatch@0.2.14 
  │   ├─┬ graceful-fs@3.0.11 
  │   │ └── natives@1.1.0 
  │   ├─┬ mkdirp@0.5.1 
  │   │ └── minimist@0.0.8 
  │   ├─┬ strip-bom@1.0.0 
  │   │ ├── first-chunk-stream@1.0.0 
  │   │ └── is-utf8@0.2.1 
  │   ├─┬ through2@0.6.5 
  │   │ └── readable-stream@1.0.34 
  │   └─┬ vinyl@0.4.6 
  │     └── clone@0.2.0 
  ├─┬ gulp-debug@1.0.1 
  │ ├─┬ chalk@0.5.1 
  │ │ ├── ansi-styles@1.1.0 
  │ │ ├─┬ has-ansi@0.1.0 
  │ │ │ └── ansi-regex@0.2.1 
  │ │ ├── strip-ansi@0.3.0 
  │ │ └── supports-color@0.2.0 
  │ ├─┬ date-time@1.1.0 
  │ │ └── time-zone@0.1.0 
  │ ├── stringify-object@1.0.1 
  │ └─┬ through2@0.6.5 
  │   └── readable-stream@1.0.34 
  ├─┬ gulp-filter@1.0.2 
  │ ├─┬ multimatch@0.3.0 
  │ │ ├── array-differ@0.1.0 
  │ │ ├─┬ array-union@0.1.0 
  │ │ │ └── array-uniq@0.1.1 
  │ │ └─┬ minimatch@0.3.0 
  │ │   ├── lru-cache@2.7.3 
  │ │   └── sigmund@1.0.1 
  │ └─┬ through2@0.6.5 
  │   └── readable-stream@1.0.34 
  ├─┬ gulp-handlebars@3.0.1 
  │ └─┬ through2@0.6.5 
  │   └── readable-stream@1.0.34 
  ├─┬ gulp-mustache@1.1.2 
  │ ├─┬ gulp-util@3.0.6 
  │ │ └─┬ dateformat@1.0.12 
  │ │   ├── get-stdin@4.0.1 
  │ │   └─┬ meow@3.7.0 
  │ │     ├─┬ camelcase-keys@2.1.0 
  │ │     │ └── camelcase@2.1.1 
  │ │     ├── decamelize@1.2.0 
  │ │     ├─┬ loud-rejection@1.6.0 
  │ │     │ ├─┬ currently-unhandled@0.4.1 
  │ │     │ │ └── array-find-index@1.0.2 
  │ │     │ └── signal-exit@3.0.2 
  │ │     ├── map-obj@1.0.1 
  │ │     ├─┬ normalize-package-data@2.4.0 
  │ │     │ ├── hosted-git-info@2.5.0 
  │ │     │ ├─┬ is-builtin-module@1.0.0 
  │ │     │ │ └── builtin-modules@1.1.1 
  │ │     │ └─┬ validate-npm-package-license@3.0.1 
  │ │     │   ├─┬ spdx-correct@1.0.2 
  │ │     │   │ └── spdx-license-ids@1.2.2 
  │ │     │   └── spdx-expression-parse@1.0.4 
  │ │     ├── object-assign@4.1.1 
  │ │     ├─┬ read-pkg-up@1.0.1 
  │ │     │ ├─┬ find-up@1.1.2 
  │ │     │ │ ├── path-exists@2.1.0 
  │ │     │ │ └─┬ pinkie-promise@2.0.1 
  │ │     │ │   └── pinkie@2.0.4 
  │ │     │ └─┬ read-pkg@1.1.0 
  │ │     │   ├─┬ load-json-file@1.1.0 
  │ │     │   │ ├── graceful-fs@4.1.11 
  │ │     │   │ ├─┬ parse-json@2.2.0 
  │ │     │   │ │ └─┬ error-ex@1.3.1 
  │ │     │   │ │   └── is-arrayish@0.2.1 
  │ │     │   │ ├── pify@2.3.0 
  │ │     │   │ └── strip-bom@2.0.0 
  │ │     │   └─┬ path-type@1.1.0 
  │ │     │     └── graceful-fs@4.1.11 
  │ │     ├─┬ redent@1.0.0 
  │ │     │ ├─┬ indent-string@2.1.0 
  │ │     │ │ └─┬ repeating@2.0.1 
  │ │     │ │   └─┬ is-finite@1.0.2 
  │ │     │ │     └── number-is-nan@1.0.1 
  │ │     │ └── strip-indent@1.0.1 
  │ │     └── trim-newlines@1.0.0 
  │ ├── mustache@2.1.3 
  │ └─┬ through2@2.0.0 
  │   └─┬ readable-stream@2.0.6 
  │     ├── isarray@1.0.0 
  │     ├── process-nextick-args@1.0.7 
  │     └── util-deprecate@1.0.2 
  ├─┬ gulp-through@0.3.2 
  │ ├── bluebird@2.11.0 
  │ ├─┬ chalk@0.5.1 
  │ │ ├── ansi-styles@1.1.0 
  │ │ ├─┬ has-ansi@0.1.0 
  │ │ │ └── ansi-regex@0.2.1 
  │ │ ├── strip-ansi@0.3.0 
  │ │ └── supports-color@0.2.0 
  │ ├─┬ through2@0.6.5 
  │ │ └── readable-stream@1.0.34 
  │ └── xtend@4.0.1 
  ├─┬ handlebars@2.0.0 
  │ ├─┬ optimist@0.3.7 
  │ │ └── wordwrap@0.0.3 
  │ └─┬ uglify-js@2.3.6 
  │   ├── async@0.2.10 
  │   └─┬ source-map@0.1.43 
  │     └── amdefine@1.0.1 
  ├─┬ inquirer@0.8.5 
  │ ├── ansi-regex@1.1.1 
  │ ├── cli-width@1.1.1 
  │ ├─┬ figures@1.7.0 
  │ │ └── object-assign@4.1.1 
  │ ├── lodash@3.10.1 
  │ ├─┬ readline2@0.1.1 
  │ │ ├── mute-stream@0.0.4 
  │ │ └─┬ strip-ansi@2.0.1 
  │ │   └── ansi-regex@1.1.1 
  │ ├── rx@2.5.3 
  │ └── through@2.3.8 
  ├─┬ js-yaml@3.10.0 
  │ ├─┬ argparse@1.0.9 
  │ │ └── sprintf-js@1.0.3 
  │ └── esprima@4.0.0 
  ├── mustache@0.8.2 
  ├── underscore@1.8.3 
  ├─┬ vinyl-buffer@1.0.0 
  │ ├─┬ bl@0.9.5 
  │ │ └── readable-stream@1.0.34 
  │ └─┬ through2@0.6.5 
  │   └── readable-stream@1.0.34 
  └─┬ vinyl-github-src@0.1.1 
    ├─┬ readable-stream@1.1.14 
    │ ├── core-util-is@1.0.2 
    │ ├── inherits@2.0.3 
    │ ├── isarray@0.0.1 
    │ └── string_decoder@0.10.31 
    ├─┬ request@2.83.0 
    │ ├── aws-sign2@0.7.0 
    │ ├── aws4@1.6.0 
    │ ├── caseless@0.12.0 
    │ ├─┬ combined-stream@1.0.5 
    │ │ └── delayed-stream@1.0.0 
    │ ├── extend@3.0.1 
    │ ├── forever-agent@0.6.1 
    │ ├─┬ form-data@2.3.1 
    │ │ └── asynckit@0.4.0 
    │ ├─┬ har-validator@5.0.3 
    │ │ ├─┬ ajv@5.2.3 
    │ │ │ ├── co@4.6.0 
    │ │ │ ├── fast-deep-equal@1.0.0 
    │ │ │ ├── json-schema-traverse@0.3.1 
    │ │ │ └─┬ json-stable-stringify@1.0.1 
    │ │ │   └── jsonify@0.0.0 
    │ │ └── har-schema@2.0.0 
    │ ├─┬ hawk@6.0.2 
    │ │ ├── boom@4.3.1 
    │ │ ├─┬ cryptiles@3.1.2 
    │ │ │ └── boom@5.2.0 
    │ │ ├── hoek@4.2.0 
    │ │ └── sntp@2.0.2 
    │ ├─┬ http-signature@1.2.0 
    │ │ ├── assert-plus@1.0.0 
    │ │ ├─┬ jsprim@1.4.1 
    │ │ │ ├── extsprintf@1.3.0 
    │ │ │ ├── json-schema@0.2.3 
    │ │ │ └── verror@1.10.0 
    │ │ └─┬ sshpk@1.13.1 
    │ │   ├── asn1@0.2.3 
    │ │   ├── bcrypt-pbkdf@1.0.1 
    │ │   ├── dashdash@1.14.1 
    │ │   ├── ecc-jsbn@0.1.1 
    │ │   ├── getpass@0.1.7 
    │ │   ├── jsbn@0.1.1 
    │ │   └── tweetnacl@0.14.5 
    │ ├── is-typedarray@1.0.0 
    │ ├── isstream@0.1.2 
    │ ├── json-stringify-safe@5.0.1 
    │ ├─┬ mime-types@2.1.17 
    │ │ └── mime-db@1.30.0 
    │ ├── oauth-sign@0.8.2 
    │ ├── performance-now@2.1.0 
    │ ├── qs@6.5.1 
    │ ├── safe-buffer@5.1.1 
    │ ├── stringstream@0.0.5 
    │ ├─┬ tough-cookie@2.3.3 
    │ │ └── punycode@1.4.1 
    │ ├── tunnel-agent@0.6.0 
    │ └── uuid@3.1.0 
    ├─┬ tar-stream@0.4.7 
    │ └─┬ end-of-stream@1.4.0 
    │   └── once@1.4.0 
    └─┬ vinyl@0.2.3 
      └── clone-stats@0.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/kickoff/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0435 took 2.7576s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
/*jshint node: true */
'use strict';

var gulp = require('gulp');
var githubSrc = require('vinyl-github-src');
var buffer = require('vinyl-buffer');
var debug = require('gulp-debug');
var through = require('gulp-through');
var mustache = require('mustache');
var gulpMustache = require('gulp-handlebars');
var handlebars = require('handlebars');
var gulpFilter = require('gulp-filter');
var jsyaml = require('js-yaml');
var inquirer = require('inquirer');
var path = require('path');
var async = require('async');
var fs = require('fs');
var extend = require('extend');
var _ = require('underscore');

var verbose = false;

var defaultKickoff = {
    description: '',
    welcome: '',
    postscript: '',
    converters: {
        mustaches: [],
        handlebars: [],
        plugins: []
    },
    questions: [],
    fileNames: []
};

var templateFuncs = {
    "_toUpperCase": function() {
        return function(text, render) {
            return render(text).toUpperCase()
        }
    },
    "_toLowerCase": function() {
        return function(text, render) {
            return render(text).toLowerCase()
        }
    },
    "_firstCharToUpperCase": function() {
        return function(text, render) {
            var renderedText = render(text)
            return renderedText[0].toUpperCase() + renderedText.substring(1)
        }
    },
    "_firstCharToLowerCase": function() {
        return function(text, render) {
            var renderedText = render(text)
            return renderedText[0].toLowerCase() + renderedText.substring(1)
        }
    }
};

var getInquery = function(ctx, callback) {
    ctx.srcStream()
        .pipe(buffer())
        .pipe(gulpFilter(['.kickoff.yml'], {dot: true}))
        .pipe(through('parseKickoff', function(file, config) {
            if (file.path.match(/\.kickoff.yml$/)) {
                ctx.kickoff = extend(defaultKickoff, jsyaml.safeLoad(file.contents.toString()));
                callback(null, ctx);
            } else {
                callback({ msg: 'Did not find .kickoff.yml'});
            }
        }, {})());
};

var setDataDefaults = function(origData, questions) {

    var defaults = {};
    questions.forEach(function(question) {
        if (! defaults.hasOwnProperty(question.name)) {
            defaults[question.name] = question.default;
        }
    });

    var data = extend(true, {}, defaults, origData, templateFuncs);
    return data;
};

var getData = function(ctx, callback) {

    console.log(ctx.kickoff.welcome || '');
    if (ctx.dataFile===null) {
        inquirer.prompt(ctx.kickoff.questions, function(res) {
            ctx.data = extend(true, {}, res, templateFuncs);
            //ctx.data = res;
            console.log('ctx.data: ', ctx.data);
            callback(null, ctx);
        });
    } else {
        console.log('Loading data from %s instead of querying...', ctx.dataFile);
        var data = jsyaml.safeLoad(fs.readFileSync(ctx.dataFile, 'utf8'));
        ctx.data = setDataDefaults(data, ctx.kickoff.questions);
        console.log('ctx.data: ', ctx.data);
        callback(null, ctx);
    }
};

var prepareFilenames = function(ctx, callback) {
    ctx.fileRename = {};
    ctx.kickoff.fileNames.forEach(function(filename) {
        filename.to = mustache.render(filename.to, ctx.data);
        console.log('Will replace filename "%s" with "%s".', filename.from, filename.to);
        ctx.fileRename[filename.from] = filename.to;
    });
    callback(null, ctx);
};

var converter = function(ctx) {
    return function(file, config) {
        var fileName = file.path.match(new RegExp("^(" + ctx.base + ")(.*)"))[2].replace(new RegExp("^\\" + path.sep),'');

        // console.log('converter: %s | %s >> %s', file.path, ctx.base, fileName);
        // console.log('converters: ', ctx.kickoff.converters);

        if (_.indexOf(ctx.kickoff.converters.handlebars, fileName) >= 0) {
            console.log('Converting %s as Handlebars template', fileName);
            file.contents = new Buffer(handlebars.compile(String(file.contents))(ctx.data));
        } else if (_.indexOf(ctx.kickoff.converters.mustache, fileName) >= 0) {
            console.log('Converting %s as Mustache template', fileName);
            file.contents = new Buffer(mustache.render(String(file.contents), ctx.data));
        } else if (_.indexOf(ctx.kickoff.converters.plugin, fileName) >= 0) {
            console.log('Converting %s as a JavaScript plugin', fileName);
            file.contents = new Buffer(require(file.path)(String(file.contents), ctx.data));
        }
    };
};

var fileRename = function(ctx) {
    return function(file, config) {
        var fileName = file.path.split(file.base)[1].replace(new RegExp("^\\" + path.sep),'');
        var newName = ctx.fileRename[fileName];
        if (newName && newName.length > 0) {
            file.path = file.base + '/' + newName;
        }
    };
};

var processFiles = function(ctx, callback) {
    var allFilter = gulpFilter(['**', '!.kickoff.yml'], {dot: true});
    ctx.srcStream()
        .pipe(buffer())
        .pipe(allFilter)
        .pipe(through('converter', converter(ctx), {})())
        .pipe(through('rmBase', function(file, config) {
            file.base = ctx.base;
        }, {})())
        .pipe(through('renameFile', fileRename(ctx), {})())
        .pipe(gulp.dest(path.resolve(ctx.dest)))
        .on('finish', function() {
                console.log(ctx.kickoff.postscript || 'Succesfully finished.');
                callback(null, {});
            });
};

var execute = function(ctx, srcStream) {
    ctx.srcStream = srcStream;

    async.waterfall([
            function(callback) { callback(null, ctx); },
            getInquery,
            getData,
            prepareFilenames,
            processFiles
        ], function(err, result) {
            if (err) {
                console.log('ERROR: ', err);
            }
    });
};

exports.executeFromGit = function(config) {
    verbose = config.verbose;

    config.base = '/';
    return execute( config, function() {
            return githubSrc(config.src);
        });
};

exports.executeFromFolder = function(config) {
    verbose = config.verbose;
    var src = path.resolve(config.src);
    config.base = src;

    return execute(config, function() {
        return gulp.src([
            src + '/**',
            '!' + src + '/.git/',
            '!' + src + '/.git/**' ],
            {
                base: src,
                dot: true
            });
        });
};
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/kickoff/node_modules/kickoff/index.js. Coverage (Term): 81% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
