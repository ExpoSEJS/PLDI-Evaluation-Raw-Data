/root/Targets/react-gallery
└─┬ react-gallery@0.1.0 
  ├── classnames@2.2.5 
  ├─┬ lodash.assign@3.2.0 
  │ ├─┬ lodash._baseassign@3.2.0 
  │ │ └── lodash._basecopy@3.0.1 
  │ ├─┬ lodash._createassigner@3.1.1 
  │ │ ├── lodash._bindcallback@3.0.1 
  │ │ ├── lodash._isiterateecall@3.0.9 
  │ │ └── lodash.restparam@3.6.1 
  │ └─┬ lodash.keys@3.1.2 
  │   ├── lodash._getnative@3.9.1 
  │   ├── lodash.isarguments@3.1.0 
  │   └── lodash.isarray@3.0.4 
  └─┬ react@0.14.9 
    ├─┬ envify@3.4.1 
    │ ├─┬ jstransform@11.0.3 
    │ │ ├── base62@1.2.0 
    │ │ ├─┬ commoner@0.10.8 
    │ │ │ ├── commander@2.11.0 
    │ │ │ ├─┬ detective@4.5.0 
    │ │ │ │ ├── acorn@4.0.13 
    │ │ │ │ └── defined@1.0.0 
    │ │ │ ├─┬ glob@5.0.15 
    │ │ │ │ ├─┬ inflight@1.0.6 
    │ │ │ │ │ └── wrappy@1.0.2 
    │ │ │ │ ├── inherits@2.0.3 
    │ │ │ │ ├─┬ minimatch@3.0.4 
    │ │ │ │ │ └─┬ brace-expansion@1.1.8 
    │ │ │ │ │   ├── balanced-match@1.0.0 
    │ │ │ │ │   └── concat-map@0.0.1 
    │ │ │ │ ├── once@1.4.0 
    │ │ │ │ └── path-is-absolute@1.0.1 
    │ │ │ ├── graceful-fs@4.1.11 
    │ │ │ ├── iconv-lite@0.4.19 
    │ │ │ ├─┬ mkdirp@0.5.1 
    │ │ │ │ └── minimist@0.0.8 
    │ │ │ ├── private@0.1.7 
    │ │ │ ├── q@1.5.0 
    │ │ │ └─┬ recast@0.11.23 
    │ │ │   ├── ast-types@0.9.6 
    │ │ │   ├── esprima@3.1.3 
    │ │ │   └── source-map@0.5.7 
    │ │ ├── esprima-fb@15001.1.0-dev-harmony-fb 
    │ │ ├── object-assign@2.1.1 
    │ │ └─┬ source-map@0.4.4 
    │ │   └── amdefine@1.0.1 
    │ └── through@2.3.8 
    └─┬ fbjs@0.6.1 
      ├── core-js@1.2.7 
      ├─┬ loose-envify@1.3.1 
      │ └── js-tokens@3.0.2 
      ├─┬ promise@7.3.1 
      │ └── asap@2.0.6 
      ├── ua-parser-js@0.7.14 
      └── whatwg-fetch@0.9.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/react-gallery/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.039 took 2.5445s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (150:20) on program require("./styles.less")

import classnames from 'classnames'
import React, {Component} from 'react'
import Icon from './icons/icon'
import Assign from 'lodash.assign';


class Gallery extends Component {
    constructor(props) {
        super(props);
        this.state = {
            currentImg: 0
        }

        this.getAnimateClasses();
        this.handleKeyboardInput = (e) => {
            if (e.keyCode === 37) {
                this.handleLeftClick();
            } else if (e.keyCode === 39) {
                this.handleRightClick();
            } else {
                return false;
            }
        }
    }

    componentDidMount() {
        var el = this.refs.itemList;
        el.addEventListener('touchstart', this.onSwipeStart.bind(this));
        el.addEventListener('touchmove', this.onSwipeMove.bind(this));
        el.addEventListener('touchend', this.onSwipeEnd.bind(this));
        window.addEventListener('keydown', this.handleKeyboardInput);
    }

    componentWillUnmount() {
        window.removeEventListener('keydown', this.handleKeyboardInput);
    }

    galleryLength() {
        return this.props.children.length
    }

    hasPrevItem() {
        return this.state.currentImg > 0
    }

    handleLeftClick () {
        if ( this.hasPrevItem() ) {
            this.setState({
                currentImg: this.state.currentImg - 1
            })
        } else {
            if ( this.props.loop ) {
                this.setState({ currentImg: this.galleryLength() - 1 })
            }
        }
    }

    hasNextItem() {
        return this.state.currentImg < this.galleryLength() - 1
    }

    handleRightClick () {
        if ( this.hasNextItem() ) {
            this.setState({ currentImg: this.state.currentImg + 1 })
        } else {
            // has hit the upper limit
            if ( this.props.loop ) {
                // go back to first image
                this.setState({ currentImg: 0})
            }
        }
    }

    isActive(i) {
        if ( i == this.state.currentImg ) {
            return true
        } else {
            return false
        }
    }

    isNext(i) {
        if ( i == this.state.currentImg ) {
            return false;
        }

        if ( i == this.state.currentImg + 1 ) {
            return true
        } else if (this.props.loop && this.state.currentImg == this.galleryLength() -1 && i == 0) {
            return true
        } else {
            return false
        }
    }

    isPrev(i) {
        // false if current item
        if ( i == this.state.currentImg ) {
            return false;
        }

        if ( i == this.state.currentImg - 1 ) {
            return true
        } else if (this.props.loop && this.state.currentImg == 0 && i == this.galleryLength() - 1)  {
            return true
        } else {
            return false
        }
    }

    onSwipeStart (e) {
        this.setState({
            touchStart: e.touches[0].pageX,
            swiping: true
        })
    }

    onSwipeMove (e) {
        e.preventDefault()
        var delta = e.touches[0].pageX - this.state.touchStart;
        var swipeThreshold = 10
        if (this.state.swiping) {
            if ( delta < -swipeThreshold) {
                // slide to Next
                this.setState({ swiping: false })
                this.handleRightClick()
            } else if ( delta > swipeThreshold ) {
                //slide to Prev
                this.setState({ swiping: false })
                this.handleLeftClick()
            }
        }

    }

    onSwipeEnd (e) {
        this.setState({
            touchStart: null,
            swiping: false
        })
    }

    renderNav() {
        if (this.props.renderNav) {
            var self = this
            if (this.props.animate == 'slideUD') {
                return (
                    <div className='gallery__nav'>
                        <button onClick={self.handleLeftClick.bind(self)} className='gallery__navIcon gallery__navIcon--prev-up'>
                          <Icon type="angleUp"/>
                        </button>
                        <button onClick={self.handleRightClick.bind(self)} className='gallery__navIcon gallery__navIcon--next-down'>
                          <Icon type="angleDown"/>
                        </button>
                    </div>
                )
            } else {
                return (
                    <div className='gallery__nav'>
                        <button onClick={self.handleLeftClick.bind(self)} className='gallery__navIcon gallery__navIcon--prev'>
                          <Icon type="angleLeft"/>
                        </button>
                        <button onClick={self.handleRightClick.bind(self)} className='gallery__navIcon gallery__navIcon--next'>
                          <Icon type="angleRight"/>
                        </button>
                    </div>
                )
            };
        } else {
            return null
        }
    }

    getAnimateClasses() {
        switch (this.props.animate) {
            case  'slideLR':
                this.animateClasses = (item) => {
                    return {
                        'gallery__item--hide': 'true',
                        'gallery__item--active': this.isActive(item),
                        'gallery__item--next': this.isNext(item),
                        'gallery__item--prev': this.isPrev(item)
                    }
                };
                break;
            case  'slideUD':
                this.animateClasses = (item) => {
                    return {
                        'gallery__item--hide': 'true',
                        'gallery__item--active': this.isActive(item),
                        'gallery__item--next-up': this.isNext(item),
                        'gallery__item--prev-down': this.isPrev(item)
                    }
                };
                break;
            case 'fade':
                this.animateClasses = (item) => {
                    return {
                        'gallery__item--fade-in': this.isActive(item),
                        'gallery__item--fade-out': !this.isActive(item)
                    }
                };
                break;
            default:
                this.animateClasses = (item) => {
                    return {
                        'gallery__item--show': this.isActive(item),
                        'gallery__item--hide': !this.isActive(item)
                    }
                };
        }
    }

    render() {
        var self = this
        var items = []

        this.props.children.forEach( (item, i) => {
            var classArg = {}

            var itemClasses = classnames(
                Assign({}, {'gallery__item': true},
                self.animateClasses(i))
            )

            items.push(
                <li key={i} className={itemClasses}>
                   {item}
                </li>
            )
        })

        return (
            <div className='gallery'>
                <ul className='gallery__items' ref="itemList">{ items }</ul>
                {this.renderNav()}
            </div>
        )
    }
}

Gallery.propTypes = {
    loop: React.PropTypes.bool,
    renderNav: React.PropTypes.bool,
    animate: React.PropTypes.string,
    children: React.PropTypes.array.isRequired
}

Gallery.defaultProps = {
    loop: false,
    animate: null,
    renderNav: true
}

module.exports = Gallery
 at SyntaxError: Unexpected token (150:20)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseParenAndDistinguishExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1861:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
