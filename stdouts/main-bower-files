/root/Targets/main-bower-files
└─┬ main-bower-files@2.13.1 
  ├─┬ chalk@1.1.3 
  │ ├── ansi-styles@2.2.1 
  │ ├── escape-string-regexp@1.0.5 
  │ ├─┬ has-ansi@2.0.0 
  │ │ └── ansi-regex@2.1.1 
  │ ├── strip-ansi@3.0.1 
  │ └── supports-color@2.0.0 
  ├── extend@2.0.1 
  ├─┬ globby@2.1.0 
  │ ├─┬ array-union@1.0.2 
  │ │ └── array-uniq@1.0.3 
  │ ├── async@1.5.2 
  │ ├─┬ glob@5.0.15 
  │ │ ├─┬ inflight@1.0.6 
  │ │ │ └── wrappy@1.0.2 
  │ │ ├── inherits@2.0.3 
  │ │ ├── once@1.4.0 
  │ │ └── path-is-absolute@1.0.1 
  │ └── object-assign@3.0.0 
  ├─┬ multimatch@2.1.0 
  │ ├── array-differ@1.0.0 
  │ ├── arrify@1.0.1 
  │ └─┬ minimatch@3.0.4 
  │   └─┬ brace-expansion@1.1.8 
  │     ├── balanced-match@1.0.0 
  │     └── concat-map@0.0.1 
  ├── path-exists@1.0.0 
  ├── strip-json-comments@1.0.4 
  └─┬ vinyl-fs@2.4.4 
    ├─┬ duplexify@3.5.1 
    │ ├── end-of-stream@1.4.0 
    │ └── stream-shift@1.0.0 
    ├─┬ glob-stream@5.3.5 
    │ ├── extend@3.0.1 
    │ ├─┬ glob-parent@3.1.0 
    │ │ ├─┬ is-glob@3.1.0 
    │ │ │ └── is-extglob@2.1.1 
    │ │ └── path-dirname@1.0.2 
    │ ├─┬ micromatch@2.3.11 
    │ │ ├─┬ arr-diff@2.0.0 
    │ │ │ └── arr-flatten@1.1.0 
    │ │ ├── array-unique@0.2.1 
    │ │ ├─┬ braces@1.8.5 
    │ │ │ ├─┬ expand-range@1.8.2 
    │ │ │ │ └─┬ fill-range@2.2.3 
    │ │ │ │   ├── is-number@2.1.0 
    │ │ │ │   ├── isobject@2.1.0 
    │ │ │ │   ├─┬ randomatic@1.1.7 
    │ │ │ │   │ ├─┬ is-number@3.0.0 
    │ │ │ │   │ │ └── kind-of@3.2.2 
    │ │ │ │   │ └── kind-of@4.0.0 
    │ │ │ │   └── repeat-string@1.6.1 
    │ │ │ ├── preserve@0.2.0 
    │ │ │ └── repeat-element@1.1.2 
    │ │ ├─┬ expand-brackets@0.1.5 
    │ │ │ └── is-posix-bracket@0.1.1 
    │ │ ├─┬ extglob@0.3.2 
    │ │ │ └── is-extglob@1.0.0 
    │ │ ├── filename-regex@2.0.1 
    │ │ ├── is-extglob@1.0.0 
    │ │ ├── is-glob@2.0.1 
    │ │ ├─┬ kind-of@3.2.2 
    │ │ │ └── is-buffer@1.1.5 
    │ │ ├─┬ normalize-path@2.1.1 
    │ │ │ └── remove-trailing-separator@1.1.0 
    │ │ ├─┬ object.omit@2.0.1 
    │ │ │ ├─┬ for-own@0.1.5 
    │ │ │ │ └── for-in@1.0.2 
    │ │ │ └── is-extendable@0.1.1 
    │ │ ├─┬ parse-glob@3.0.4 
    │ │ │ ├─┬ glob-base@0.3.0 
    │ │ │ │ ├── glob-parent@2.0.0 
    │ │ │ │ └─┬ is-glob@2.0.1 
    │ │ │ │   └── is-extglob@1.0.0 
    │ │ │ ├── is-dotfile@1.0.3 
    │ │ │ ├── is-extglob@1.0.0 
    │ │ │ └── is-glob@2.0.1 
    │ │ └─┬ regex-cache@0.4.4 
    │ │   └─┬ is-equal-shallow@0.1.3 
    │ │     └── is-primitive@2.0.0 
    │ ├─┬ ordered-read-streams@0.3.0 
    │ │ └── is-stream@1.1.0 
    │ ├─┬ through2@0.6.5 
    │ │ └─┬ readable-stream@1.0.34 
    │ │   ├── isarray@0.0.1 
    │ │   └── string_decoder@0.10.31 
    │ ├─┬ to-absolute-glob@0.1.1 
    │ │ └── extend-shallow@2.0.1 
    │ └─┬ unique-stream@2.2.1 
    │   └─┬ json-stable-stringify@1.0.1 
    │     └── jsonify@0.0.0 
    ├── graceful-fs@4.1.11 
    ├─┬ gulp-sourcemaps@1.6.0 
    │ └── convert-source-map@1.5.0 
    ├── is-valid-glob@0.3.0 
    ├── lazystream@1.0.0 
    ├── lodash.isequal@4.5.0 
    ├── merge-stream@1.0.1 
    ├─┬ mkdirp@0.5.1 
    │ └── minimist@0.0.8 
    ├── object-assign@4.1.1 
    ├─┬ readable-stream@2.3.3 
    │ ├── core-util-is@1.0.2 
    │ ├── isarray@1.0.0 
    │ ├── process-nextick-args@1.0.7 
    │ ├── safe-buffer@5.1.1 
    │ ├── string_decoder@1.0.3 
    │ └── util-deprecate@1.0.2 
    ├─┬ strip-bom@2.0.0 
    │ └── is-utf8@0.2.1 
    ├─┬ strip-bom-stream@1.0.0 
    │ └── first-chunk-stream@1.0.0 
    ├─┬ through2@2.0.3 
    │ └── xtend@4.0.1 
    ├── through2-filter@2.0.0 
    ├── vali-date@1.0.0 
    └─┬ vinyl@1.2.0 
      ├── clone@1.0.2 
      ├── clone-stats@0.0.1 
      └── replace-ext@0.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/main-bower-files/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 21% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","random","reduce","Set"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0468 took 8.3372s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: The keyword 'package' is reserved (207:31) on program var path                = require('path'),
    readFile            = require('fs').readFileSync,
    exists              = require('path-exists').sync,
    stripJsonComments   = require('strip-json-comments'),
    extend              = require('extend'),
    Package             = require('./package'),
    logger              = require('./logger');

/**
 * Collection for bower packages
 *
 * @class PackageCollection
 */

/**
 * @constructor
 * @param {Object} opts
 */
function PackageCollection(opts) {
    this.opts               = opts;
    this.opts.main          = opts.main || null;
    this.opts.env           = opts.env || process.env.NODE_ENV;
    this.debugging          = opts.debugging || false;
    this.overrides          = opts.overrides || {};
    this._queue             = [];
    this._lastQueueLength   = 0;
    this._packages          = {};
    this._processed         = {};

    this.collectPackages();
};

PackageCollection.prototype = {
    /**
     * Adds a package to the collection
     *
     * @param {String} name Name of the package
     * @param {String} path Path to the package files
     */
    add: function(name, path, main) {
        if (this._packages[name]) {
            return;
        }

        if (this.debugging) {
            logger('PackageCollection', 'add', name, path);
        }

        this._packages[name] = true;

        var opts = this.overrides[name] || {};
        opts.name = name;
        opts.path = path;
        if (path.indexOf(this.opts.paths.bowerDirectory) === -1) {
            opts.main = main || name;
        }
        opts.path = path;

        this._packages[name] = new Package(opts, this);
    },

    /**
     * Collects all packages
     */
    collectPackages: function() {
        if (!exists(this.opts.paths.bowerJson)) {
            throw new Error('bower.json does not exist at: ' + this.opts.paths.bowerJson);
        }

        var name,
            group = this.opts.group || null,
            includeDev = this.opts.includeDev || false,
            includeSelf = this.opts.includeSelf || false,
            bowerJson = JSON.parse(stripJsonComments(readFile(this.opts.paths.bowerJson, 'utf8'))),
            devDependencies = bowerJson.devDependencies || {},
            dependencies = bowerJson.dependencies || {},
            main = bowerJson.main || {};

        includeDev = includeDev === true ? 'inclusive' : includeDev;

        this.overrides = extend(bowerJson.overrides || {}, this.overrides);

        this.checkGroupExists(group, bowerJson, function (missingGroup) {
            throw new Error('group "' + missingGroup + '" does not exists in bower.json');
        });

        if (includeDev !== 'exclusive') {
            this.addDependencies(dependencies, group, bowerJson);
        }

        if (includeDev !== false) {
            this.addDependencies(devDependencies, group, bowerJson);
        }

        if (includeSelf !== false) {
            this.add(bowerJson.name || 'self', path.dirname(this.opts.paths.bowerJson), main);
        }
    },

    /**
     * Adds all dependencies from list filtered by group
     *
     */
    addDependencies: function (dependencies, group, bowerJson) {
        if (typeof dependencies !== "string") {
            var deps = (!!group) ? this.filterByGroup(dependencies, group, bowerJson) : dependencies;

            for (var name in deps) {
                this.add(name, path.join(this.opts.paths.bowerDirectory, path.sep, name));
            }
        } else {
            this.add(dependencies, path.join(path.dirname(this.opts.paths.bowerJson)));
        }
    },

    /**
     * Filters dependencies by group
     *
     * @return {Object}
     */
    filterByGroup: function (deps, group, bowerJson) {
        var filtered = {};

        if (typeof group === "string") {
            var isExludingGroup = (group && bowerJson.group && group.charAt(0) === "!" && bowerJson.group[group.slice(1)].length > 0);

            for (var dep in deps) {
                if (isExludingGroup && bowerJson.group[group.slice(1)].indexOf(dep) === -1) {
                    filtered[dep] = deps[dep];
                }
                if (!isExludingGroup && bowerJson.group[group].indexOf(dep) >= 0) {
                    filtered[dep] = deps[dep];
                }
            }

            return filtered;
        }

        if (typeof group === "object") {
            for (var i = 0; i < group.length; i++) {
                filtered = extend(filtered, this.filterByGroup(deps, group[i], bowerJson));
            }
        }

        return filtered;
    },

    /**
     * Calls error method if group doesn't exist
     */
    checkGroupExists: function (group, bowerJson, error) {
        if(!group || !bowerJson.group) {
            return;
        }

        if (typeof group === "string") {
            var isExludingGroup = (group && bowerJson.group && group.charAt(0) === "!" && bowerJson.group[group.slice(1)].length > 0);

            if(!bowerJson.group[group] && !isExludingGroup) {
                error(group);

                return;
            }

            return bowerJson.group[group];
        }

        if (typeof group === "object") {
            for (var i = 0; i < group.length; i++) {
                this.checkGroupExists(group[i], bowerJson, error);
            }
        }
    },

    /**
     * Get srcs of all packages
     *
     * @return {Array}
     */
    getFiles: function() {
        for (var name in this._packages) {
            this._queue.push(this._packages[name]);
        }

        return this.process();
    },

    /**
     * processes the queue and returns the srcs of all packages
     *
     * @private
     * @return {Array}
     */
    process: function() {
        var queue = this._queue,
            srcs = [],
            force = false;

        if (this._lastQueueLength === queue.length) {
            force = true;
        }

        this._lastQueueLength = queue.length;

        this._queue = [];

        queue.forEach(function(package) {
            var packageSrcs = package.getFiles(force);

            if (packageSrcs === false) {
                return this._queue.push(package);
            }

            srcs.push.apply(srcs, packageSrcs);
            this._processed[package.name] = true;
        }, this);

        if (this._queue.length) {
            srcs.push.apply(srcs, this.process());
        }

        return srcs;
    }
};

module.exports = PackageCollection;
 at SyntaxError: The keyword 'package' is reserved (207:31)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$3.parseIdent (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2182:14)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:41:34)
    at Parser.pp$2.parseMaybeDefault (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1455:25)
    at Parser.pp$2.parseBindingList (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1440:27)
    at Parser.pp$1.parseFunctionParams (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1072:24)
    at Parser.parseFunctionParams (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:24:19)
    at Parser.pp$1.parseFunction (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1064:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1810:19)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/main-bower-files/node_modules/main-bower-files/index.js. Coverage (Term): 75% Coverage (LOC): 100%
*- File /root/Targets/main-bower-files/node_modules/main-bower-files/lib/index.js. Coverage (Term): 9% Coverage (LOC): 5%
*- File /root/Targets/main-bower-files/node_modules/path-exists/index.js. Coverage (Term): 31% Coverage (LOC): 47%
*- File /root/Targets/main-bower-files/node_modules/multimatch/index.js. Coverage (Term): 35% Coverage (LOC): 39%
*- File /root/Targets/main-bower-files/node_modules/minimatch/minimatch.js. Coverage (Term): 8% Coverage (LOC): 13%
*- File /root/Targets/main-bower-files/node_modules/brace-expansion/index.js. Coverage (Term): 12% Coverage (LOC): 17%
*- File /root/Targets/main-bower-files/node_modules/concat-map/index.js. Coverage (Term): 24% Coverage (LOC): 40%
*- File /root/Targets/main-bower-files/node_modules/balanced-match/index.js. Coverage (Term): 11% Coverage (LOC): 15%
*- File /root/Targets/main-bower-files/node_modules/array-union/index.js. Coverage (Term): 63% Coverage (LOC): 86%
*- File /root/Targets/main-bower-files/node_modules/array-uniq/index.js. Coverage (Term): 36% Coverage (LOC): 44%
*- File /root/Targets/main-bower-files/node_modules/array-differ/index.js. Coverage (Term): 32% Coverage (LOC): 56%
*- File /root/Targets/main-bower-files/node_modules/arrify/index.js. Coverage (Term): 40% Coverage (LOC): 56%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
