/root/Targets/critical-path
└─┬ critical-path@0.0.10 
  └── lodash@3.10.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/critical-path/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 34% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0618 took 5.3705s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:82) on program var assert = require("assert");
var _ = require("lodash");

/**
 * Creates a Task object
 *
 * @constructor
 * @param {Object} options options describing the Task
 * @param {number} options.cost the task's cost. must be positive
 * @param {Array|Object} [options.completeBefore] either a single Task object or
 * an array of Task objects which this task must be completed before working on
 * @param {Array|Object} [options.depends] either a single Task object or an
 * array of Task objects which this task depends on
 * @param {string} [options.name] a name for the task
 */
function Task(options) {
  this.depends = [];
  this.name = options.name || null;
  this.cost = options.cost;
  this.completeBefore = [].concat(options.completeBefore || []);
  this.completeBefore.forEach(function(task) {
    task.addDependency(this);
  }.bind(this));
  this.depends = [].concat(options.depends || []);
  this.depends.forEach(function(task) {
    task.addCompleteBefore(this);
  }.bind(this));

  assert(this.cost >= 0, "`options.cost` must be a positive number");
}

/**
 * Checks whether this task needs to be completed by another task
 *
 * @param {Task} other another task object
 * @returns {boolean} true if this task must be completed before the other task
 */
Task.prototype.neededBy = function(other) {
  if (this.completeBefore.indexOf(other) !== -1) {
    return true;
  }
  for (var i = 0; i < this.completeBefore.length; i++) {
    if (this.completeBefore[i].neededBy(other)) {
      return true;
    }
  }
  return false;
};

/**
 * Checks whether this task depends on another task
 *
 * @param {Task} other another task object
 * @returns {boolean} true if this task depends on the other task
 */
Task.prototype.dependsOn = function(other) {
  return other.neededBy(this);
};

/**
 * Add a dependency
 *
 * @param {Task} other another task object
 */
Task.prototype.addDependency = function(other) {
  assert(!other.dependsOn(this), "cannot define circular dependencies");
  if (this.depends.indexOf(other) === -1) {
    this.depends.push(other);
  }
  if (other.completeBefore.indexOf(this) === -1) {
    other.addCompleteBefore(this);
  }
};

/**
 * Add a task that needs to be completed by this
 *
 * @param {Task} other another task object
 */
Task.prototype.addCompleteBefore = function(other) {
  assert(!other.neededBy(this), "cannot define circular dependencies");
  if (this.completeBefore.indexOf(other) === -1) {
    this.completeBefore.push(other);
  }
  if (other.depends.indexOf(this) === -1) {
    other.addDependency(this);
  }
};

/**
 * This is equal to the tasks cost plus the maximum of the critical cost of its
 * direct dependencies.
 *
 * @name Task#criticalCost
 * @property {number} criticalCost the critical cost of the task
 */
Object.defineProperty(Task.prototype, "criticalCost", {
  get: function() {
    if (this.completeBefore.length === 0) {
      return this.cost;
    } else {
      var critical = _.chain(this.completeBefore)
        .pluck("criticalCost")
        .max()
        .value();
      return this.cost + critical;
    }
  },
  enumerable: true
});

module.exports = Task;
 at SyntaxError: Unexpected token (1:82)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/critical-path/node_modules/critical-path/index.js. Coverage (Term): 59% Coverage (LOC): 71%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
