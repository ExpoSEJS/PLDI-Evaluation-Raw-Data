/root/Targets/react-horizontal-bar-chart
└─┬ react-horizontal-bar-chart@0.3.2 
  ├─┬ d3@4.10.2 
  │ ├── d3-array@1.2.0 
  │ ├── d3-axis@1.0.8 
  │ ├── d3-brush@1.0.4 
  │ ├── d3-chord@1.0.4 
  │ ├── d3-collection@1.0.4 
  │ ├── d3-color@1.0.3 
  │ ├── d3-dispatch@1.0.3 
  │ ├── d3-drag@1.1.1 
  │ ├─┬ d3-dsv@1.0.7 
  │ │ ├── commander@2.11.0 
  │ │ ├── iconv-lite@0.4.19 
  │ │ └── rw@1.3.3 
  │ ├── d3-ease@1.0.3 
  │ ├── d3-force@1.0.6 
  │ ├── d3-format@1.2.0 
  │ ├── d3-geo@1.6.4 
  │ ├── d3-hierarchy@1.1.5 
  │ ├── d3-interpolate@1.1.5 
  │ ├── d3-path@1.0.5 
  │ ├── d3-polygon@1.0.3 
  │ ├── d3-quadtree@1.0.3 
  │ ├── d3-queue@3.0.7 
  │ ├── d3-random@1.1.0 
  │ ├─┬ d3-request@1.0.6 
  │ │ └── xmlhttprequest@1.8.0 
  │ ├── d3-scale@1.0.6 
  │ ├── d3-selection@1.1.0 
  │ ├── d3-shape@1.2.0 
  │ ├── d3-time@1.0.7 
  │ ├── d3-time-format@2.0.5 
  │ ├── d3-timer@1.0.7 
  │ ├── d3-transition@1.1.0 
  │ ├── d3-voronoi@1.1.2 
  │ └── d3-zoom@1.5.0 
  ├── frmttr@0.0.1  (git://github.com/laem/frmttr.git#952ce37667b6f2b3ff3dfa0f41b978954f461e1f)
  └─┬ react@0.11.2 
    └─┬ envify@2.0.1 
      ├── esprima-fb@3001.1.0-dev-harmony-fb 
      ├─┬ jstransform@3.0.0 
      │ ├── base62@0.1.1 
      │ └─┬ source-map@0.1.31 
      │   └── amdefine@1.0.1 
      ├── through@2.3.8 
      └─┬ xtend@2.1.2 
        └── object-keys@0.4.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/react-horizontal-bar-chart/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0266 took 3.1655s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (22:6) on program /**
 * @jsx React.DOM
 */

'use strict';

var React = require('react/addons');
require('../../styles/HBar.css');
require('d3')

var Bar = React.createClass({
  getDefaultProps: function() {
    return {
      width: 0,
      height: 0,
      offset: 0
    }
  },

  render: function() {
    return (
      <rect
        className={this.props.focused ? 'focused' : ''}
        width={this.props.width} height={this.props.height}
        y={this.props.offset} x={0}
        onMouseOver={this.props.over}
        onMouseOut={this.props.out}
      />
    );
  }
});

var HBar = React.createClass({
  getDefaultProps: function() {
    return {
      width: 230,
      height: 300,
      data: [
        {v: 30, label: 'Salut'},
        {v: 10, label: 'Mon'},
        {v: 5, label: 'Pote'}
      ]
    }
  },

  getInitialState: function(){
    return {
      focus: this.props.focus
    }
  },

  render: function() {
    var props = this.props;
    var hbar = this


    hbar.scales()

    var data = this.props.data;

    if (this.props.sort === 'ascending') data.sort(function(p, q){return p.v > q.v});
    if (this.props.sort === 'descending') data.sort(function(p, q){return p.v < q.v});

    var bars = data.map(function(point, i) {
      return (
        <Bar  key={i}
              width={hbar.xScale(point.v)} height={hbar.yScale.rangeBand()}
              offset={hbar.yScale(i)}
              over={hbar.over.bind(hbar, i)}
              out={hbar.out}
              focused={hbar.state.focus == i}
        />
      )
    });

    return (
      <svg className="HBar" width={this.props.width} height={this.props.height}>
        <g>{bars}</g>
        <line className="axis"
              x1="0" y1="0" x2="0" y2={this.yScale.rangeExtent()[1]}
              style={{
                strokeWidth: (this.props.width * 0.005) + 'px',
                visibility: this.props.axis ? 'visible' : 'hidden'
              }}
        />
        {this.focus()}
      </svg>

    );
  },

  focus: function(){
    if (this.state.focus == undefined) return;

    var i = this.state.focus,
        point = this.props.data[i];

    var v = point.v

    /* Format the point if an input formatting function is available */
    if (this.props.formatter){
      v = this.props.formatter(v)
    }

    var x = this.xScale(point.v),
        y = this.yScale(i) + this.yScale.rangeBand() / 2

    var wide = x > this.props.width / 2 //the bar is wide, the point label will go inside

    var margin = this.props.width * 0.03
    var style = {fontSize: this.yScale.rangeBand() * 0.6 + 'px'}

    return (
      <g className="focus" style={style}>
        <text className="inside"
              y={y}
              x={x - margin}
              textAnchor="end"
        >
          {wide ? point.label : ''}
        </text>
        <text className="outside"
              y={y}
              x={x + margin}
              textAnchor="start"
        >
          {wide ? v : point.label + ', ' + v}
        </text>
      </g>
    )
  },

  over: function(i){
    this.setState({
      focus: i
    })
  },

  out: function(){
    this.setState({
      focus: null
    })
  },

  scales: function(){
    var w = this.props.width
    this.xScale = d3.scale.linear()
      .domain([0, d3.max(this.props.data, function(p){return p.v})])
      // leave some space in the container to displat bar values
      .range([0, w * 0.8]);

    this.yScale = d3.scale.ordinal()
      .domain(d3.range(this.props.data.length))
      .rangeBands([0, this.props.height], 1/3, 1/2);
  }


});

module.exports = HBar;
 at SyntaxError: Unexpected token (22:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseParenAndDistinguishExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1861:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
