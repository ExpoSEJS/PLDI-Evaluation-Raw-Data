/root/Targets/grunt-blanket-mocha-server
├── UNMET PEER DEPENDENCY grunt@~0.4.0
├── UNMET PEER DEPENDENCY grunt-blanket-mocha@*
└─┬ grunt-blanket-mocha-server@0.0.1 
  ├── UNMET PEER DEPENDENCY grunt@~0.4.0
  └─┬ grunt-contrib-connect@0.5.0 
    ├─┬ connect@2.7.11 
    │ ├── buffer-crc32@0.2.1 
    │ ├── bytes@0.2.0 
    │ ├── cookie@0.0.5 
    │ ├── cookie-signature@1.0.1 
    │ ├─┬ debug@3.1.0 
    │ │ └── ms@2.0.0 
    │ ├── formidable@1.0.14 
    │ ├── fresh@0.1.0 
    │ ├── pause@0.0.1 
    │ ├── qs@0.6.5 
    │ └─┬ send@0.1.1 
    │   ├── mime@1.2.11 
    │   └── range-parser@0.0.4 
    ├── connect-livereload@0.2.0 
    └── open@0.0.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/grunt-blanket-mocha-server/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0626 took 3.3448s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program ##
# grunt-blanket-mocha-server
#
# Copyright (c) 2013 Stu Salsbury
# Licensed under the MIT license.
#

"use strict"
###*
 * @module
 * @param  {Object} grunt grunt process object
###
module.exports = (grunt) ->

  require('matchdep').filterDev('grunt-*').forEach grunt.loadNpmTasks

  grunt.loadTasks './tasks'

  grunt.initConfig {

    pkg: grunt.file.readJSON('package.json')

    ##
    # demo config
    #
    blanket_mocha_server:
      demo:
        options:
          port: 3001
          htmlFile: 'demo/test-runner.html'
          sutFiles: [ 'demo/src/**/*.js' ]
          testFiles: [ 'demo/test/**/*.spec.js' ]
          blanketOptions: {
            'data-cover-only': '//demo\/src\//'
          }

    blanket_mocha:
      demo:
        options:
          urls: [ 'http://localhost:3001/demo/test-runner.html' ]
          reporter: 'Nyan'
          threshold: 80


    ##
    # test config
    #
    mochaTest:
      test:
        options:
          reporter: 'nyan'
          require: [
            'coffee-script'
            './test/blanket.js'
          ]
        src: [ 'test/**/*.spec.coffee' ]
      'mocha-lcov':
          options:
            reporter: 'mocha-lcov-reporter'
            quiet: true
            captureFile: 'test/coverage.log'
          src: [ 'test/**/*.spec.coffee' ]
      'html-cov':
          options:
            reporter: 'html-cov'
            quiet: true
            captureFile: 'test/coverage.html'
          src: [ 'test/**/*.spec.coffee' ]
      'travis-cov':
        options:
          reporter: 'travis-cov'
        src: [ 'test/**/*.spec.coffee' ]

    ##
    # repository management config
    #
    readme_generator:
      readme:
        options:
          readme_folder: './docs/readme'
          output: 'README.md'
          table_of_contents: true
          toc_extra_links: []
          banner: 'banner.md'
          generate_footer: true
          generate_title: false
          h1: '#'
          h2: '##'
          informative: false
        order:
          'introduction.md': 'Introduction'
          'overview.md': 'Overview'
          'getting-started.md': 'Getting Started'
          'options.md': 'Options'
          '../../CONTRIBUTING.md': 'Contributing'
          'faq.md': 'FAQ'
          'release-history.md': 'Release History'
          'license.md': 'License'

    changelog: {}

    watch: {}
  }

  # send coverage info to coveralls
  grunt.registerTask 'cov-to-coveralls',
      'Run node-coveralls with an lcov file',
      () ->

        lcovLogPath = 'test/coverage.log'
        coverallsPath = './node_modules/coveralls/bin/coveralls.js'

        coveralls = require('child_process').spawn coverallsPath,
            [],
            stdio: ['pipe', process.stdout, process.stderr]
        done = @async()
        coveralls.on 'exit', (code) ->
          done(code == 0)
        coveralls.stdin.end require('fs').readFileSync(lcovLogPath , 'utf8')

  # generate documentation
  grunt.registerTask 'docs', ['readme_generator']

  # basic demonstration
  grunt.registerTask 'demo', ['blanket_mocha_server:demo', 'blanket_mocha:demo']

  # for testing on workstation(s)
  grunt.registerTask 'test', [
    'mochaTest:test'
    'mochaTest:html-cov'
    'mochaTest:travis-cov'
  ]

  # to be run on travis -- lcov instead of html, report to coveralls
  grunt.registerTask 'test-travis', [
    'mochaTest:test'
    'mochaTest:mocha-lcov'
    'mochaTest:travis-cov'
    'cov-to-coveralls'
  ]
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
