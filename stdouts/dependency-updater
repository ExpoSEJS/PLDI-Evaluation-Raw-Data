/root/Targets/dependency-updater
└── dependency-updater@1.2.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/dependency-updater/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0653 took 2.6528s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
"use strict";

/*eslint-disable no-console*/

let path = require("path");
let _ = require("underscore");

let yargs = require("yargs")
    .usage(
        "Usage: dependency-updater [options] repository1 [repository2] [...]"+
        "\n\n" +
        "Repositories are of the format \"username/repository\" or \"organisation/repository\"."
    )
    .strict()
    .describe("username", "Github username. Can also be provided via GITHUB_USERNAME")
    .describe("password", "Github password. Can also be provided via GITHUB_PASSWORD")
    .describe("token", "Github oauth token. Can also be provided via GITHUB_TOKEN")
    .describe("client-id", "Github client id. Can also be provided via GITHUB_CLIENT_ID")
    .describe("secret", "Github secret. Can also be provided via GITHUB_SECRET")
    .describe("logbook", "A file to keep track of already opened pull requests. Defaults to ~/.dependency-updater-logbook.json")
    .requiresArg(["username", "password", "oauth-token", "client-id", "secret", "logbook"])
    .demand(1);

let argv = _.defaults(yargs.argv, {
    username: process.env.GITHUB_USERNAME,
    password: process.env.GITHUB_PASSWORD,
    token: process.env.GITHUB_TOKEN,
    "client-id": process.env.GITHUB_CLIENT_ID,
    secret: process.env.GITHUB_SECRET,
    logbook: path.join(process.env.HOME || process.env.USERPROFILE, ".dependency-updater-logbook.json")
});

// Determine method of authentication
let githubAuth = {};
if (argv.token) {
    githubAuth.type = "oauth";
    githubAuth.token = argv.token;
} else if (argv["client-id"] && argv.secret) {
    githubAuth.type = "oauth";
    githubAuth.key = argv["client-id"];
    githubAuth.secret = argv.secret;
} else if(argv.username && argv.password) {
    githubAuth.type = "basic";
    githubAuth.username = argv.username;
    githubAuth.password = argv.password;
} else {
    console.error("ERROR: Please provide at least one method of authentication:");
    console.error("- username and password");
    console.error("- oauth token");
    console.error("- client id and secret");
    process.exit(1);
}

// Process
let Logbook = require("./lib/logbook");
let processRepository = require("./lib/process_repository");
let GithubRepositoryApi = require("./lib/github_repository_api");
let NpmApi = require("./lib/npm_api");
let PullRequest = require("./lib/pull_request");
let logger = console;

let logbook = new Logbook(argv.logbook);

logbook.load()
.then(() => {
    return Promise.all(
        argv._.map(repositoryName => {
            let githubRepositoryApi = new GithubRepositoryApi(githubAuth, repositoryName);
            let npmApi = new NpmApi();
            return processRepository(repositoryName, githubAuth, logbook, logger, githubRepositoryApi, npmApi, PullRequest);
        })
    )
})
.then(() => logbook.save(), err => { logbook.save(); throw err; })
.catch(err => {
    console.error("ERROR:");
    console.error(err.stack || err);
    process.exit(1);
});

/*eslint-enable no-console*/
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
