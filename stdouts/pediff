/root/Targets/pediff
└─┬ pediff@2.4.1 
  ├── async@1.5.2 
  ├─┬ custom-logger@0.3.1  (git://github.com/noodny/custom-logger.git#3b670237f9dd01630386710b896cd41b075b6705)
  │ ├── colors@1.1.2 
  │ └── dateformat@1.0.2-1.2.3 
  ├── get-port@1.0.0 
  ├─┬ gulp-sequence@0.4.6 
  │ ├─┬ gulp-util@3.0.8 
  │ │ ├── array-differ@1.0.0 
  │ │ ├── array-uniq@1.0.3 
  │ │ ├── beeper@1.1.1 
  │ │ ├─┬ chalk@1.1.3 
  │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ ├── escape-string-regexp@1.0.5 
  │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ └── ansi-regex@2.1.1 
  │ │ │ ├── strip-ansi@3.0.1 
  │ │ │ └── supports-color@2.0.0 
  │ │ ├── dateformat@2.0.0 
  │ │ ├─┬ fancy-log@1.3.0 
  │ │ │ └── time-stamp@1.1.0 
  │ │ ├─┬ gulplog@1.0.0 
  │ │ │ └── glogg@1.0.0 
  │ │ ├─┬ has-gulplog@0.1.0 
  │ │ │ └── sparkles@1.0.0 
  │ │ ├── lodash._reescape@3.0.0 
  │ │ ├── lodash._reevaluate@3.0.0 
  │ │ ├── lodash._reinterpolate@3.0.0 
  │ │ ├─┬ lodash.template@3.6.2 
  │ │ │ ├── lodash._basecopy@3.0.1 
  │ │ │ ├── lodash._basetostring@3.0.1 
  │ │ │ ├── lodash._basevalues@3.0.0 
  │ │ │ ├── lodash._isiterateecall@3.0.9 
  │ │ │ ├─┬ lodash.escape@3.2.0 
  │ │ │ │ └── lodash._root@3.0.1 
  │ │ │ ├─┬ lodash.keys@3.1.2 
  │ │ │ │ ├── lodash._getnative@3.9.1 
  │ │ │ │ ├── lodash.isarguments@3.1.0 
  │ │ │ │ └── lodash.isarray@3.0.4 
  │ │ │ ├── lodash.restparam@3.6.1 
  │ │ │ └── lodash.templatesettings@3.1.1 
  │ │ ├─┬ multipipe@0.1.2 
  │ │ │ └─┬ duplexer2@0.0.2 
  │ │ │   └── readable-stream@1.1.14 
  │ │ ├── object-assign@3.0.0 
  │ │ ├── replace-ext@0.0.1 
  │ │ ├─┬ through2@2.0.3 
  │ │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ │ ├── isarray@1.0.0 
  │ │ │ │ ├── process-nextick-args@1.0.7 
  │ │ │ │ ├── safe-buffer@5.1.1 
  │ │ │ │ ├── string_decoder@1.0.3 
  │ │ │ │ └── util-deprecate@1.0.2 
  │ │ │ └── xtend@4.0.1 
  │ │ └─┬ vinyl@0.5.3 
  │ │   ├── clone@1.0.2 
  │ │   └── clone-stats@0.0.1 
  │ └── thunks@4.8.1 
  ├── lodash@3.10.1 
  ├─┬ meow@3.7.0 
  │ ├─┬ camelcase-keys@2.1.0 
  │ │ └── camelcase@2.1.1 
  │ ├── decamelize@1.2.0 
  │ ├─┬ loud-rejection@1.6.0 
  │ │ ├─┬ currently-unhandled@0.4.1 
  │ │ │ └── array-find-index@1.0.2 
  │ │ └── signal-exit@3.0.2 
  │ ├── map-obj@1.0.1 
  │ ├── minimist@1.2.0 
  │ ├─┬ normalize-package-data@2.4.0 
  │ │ ├── hosted-git-info@2.5.0 
  │ │ ├─┬ is-builtin-module@1.0.0 
  │ │ │ └── builtin-modules@1.1.1 
  │ │ ├── semver@5.4.1 
  │ │ └─┬ validate-npm-package-license@3.0.1 
  │ │   ├─┬ spdx-correct@1.0.2 
  │ │   │ └── spdx-license-ids@1.2.2 
  │ │   └── spdx-expression-parse@1.0.4 
  │ ├── object-assign@4.1.1 
  │ ├─┬ read-pkg-up@1.0.1 
  │ │ ├─┬ find-up@1.1.2 
  │ │ │ ├── path-exists@2.1.0 
  │ │ │ └─┬ pinkie-promise@2.0.1 
  │ │ │   └── pinkie@2.0.4 
  │ │ └─┬ read-pkg@1.1.0 
  │ │   ├─┬ load-json-file@1.1.0 
  │ │   │ ├── graceful-fs@4.1.11 
  │ │   │ ├─┬ parse-json@2.2.0 
  │ │   │ │ └─┬ error-ex@1.3.1 
  │ │   │ │   └── is-arrayish@0.2.1 
  │ │   │ ├── pify@2.3.0 
  │ │   │ └─┬ strip-bom@2.0.0 
  │ │   │   └── is-utf8@0.2.1 
  │ │   └── path-type@1.1.0 
  │ ├─┬ redent@1.0.0 
  │ │ ├─┬ indent-string@2.1.0 
  │ │ │ └─┬ repeating@2.0.1 
  │ │ │   └─┬ is-finite@1.0.2 
  │ │ │     └── number-is-nan@1.0.1 
  │ │ └─┬ strip-indent@1.0.1 
  │ │   └── get-stdin@4.0.1 
  │ └── trim-newlines@1.0.0 
  ├─┬ node-static@0.7.10 
  │ ├── mime@1.4.0 
  │ └─┬ optimist@0.6.1 
  │   ├── minimist@0.0.10 
  │   └── wordwrap@0.0.3 
  ├─┬ png-crop@0.0.0 
  │ ├── pngjs@0.4.0 
  │ └── streamifier@0.1.1 
  ├─┬ png-differ@0.0.2  (git://github.com/noodny/png-diff.git#943cd7528123bd42acba987cc32d57a106f08787)
  │ └── pngjs2@1.2.0 
  ├─┬ png-jpg@0.0.2 
  │ ├─┬ color-transform@1.0.1 
  │ │ ├─┬ bl@0.9.5 
  │ │ │ └── readable-stream@1.0.34 
  │ │ └─┬ pixel-stream@1.0.3 
  │ │   └── shallow-copy@0.0.1 
  │ ├─┬ jpg-stream@1.1.2 
  │ │ └── exif-reader@1.0.2 
  │ └─┬ png-stream@1.0.5 
  │   ├── buffer-crc32@0.2.13 
  │   └── buffer-equal@0.0.1 
  ├─┬ recursive-copy@1.0.10 
  │ ├─┬ del@1.2.1 
  │ │ ├─┬ each-async@1.1.1 
  │ │ │ ├── onetime@1.1.0 
  │ │ │ └── set-immediate-shim@1.0.1 
  │ │ ├─┬ globby@2.1.0 
  │ │ │ ├── array-union@1.0.2 
  │ │ │ └─┬ glob@5.0.15 
  │ │ │   ├─┬ inflight@1.0.6 
  │ │ │   │ └── wrappy@1.0.2 
  │ │ │   ├── once@1.4.0 
  │ │ │   └── path-is-absolute@1.0.1 
  │ │ ├── is-path-cwd@1.0.0 
  │ │ ├─┬ is-path-in-cwd@1.0.0 
  │ │ │ └─┬ is-path-inside@1.0.0 
  │ │ │   └── path-is-inside@1.0.2 
  │ │ └─┬ rimraf@2.6.2 
  │ │   └─┬ glob@7.1.2 
  │ │     ├── fs.realpath@1.0.0 
  │ │     └── minimatch@3.0.4 
  │ ├── emitter-mixin@0.0.3 
  │ ├─┬ errno@0.1.4 
  │ │ └── prr@0.0.0 
  │ ├── extend@2.0.1 
  │ ├─┬ graceful-fs@3.0.11 
  │ │ └── natives@1.1.0 
  │ ├── junk@1.0.3 
  │ ├─┬ minimatch@2.0.10 
  │ │ └─┬ brace-expansion@1.1.8 
  │ │   ├── balanced-match@1.0.0 
  │ │   └── concat-map@0.0.1 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ └─┬ promise@7.3.1 
  │   └── asap@2.0.6 
  ├── rmdir-recursive@0.0.1 
  ├─┬ socket.io@1.7.4 
  │ ├─┬ debug@2.3.3 
  │ │ └── ms@0.7.2 
  │ ├─┬ engine.io@1.8.4 
  │ │ ├─┬ accepts@1.3.3 
  │ │ │ ├─┬ mime-types@2.1.17 
  │ │ │ │ └── mime-db@1.30.0 
  │ │ │ └── negotiator@0.6.1 
  │ │ ├── base64id@1.0.0 
  │ │ ├── cookie@0.3.1 
  │ │ ├─┬ engine.io-parser@1.3.2 
  │ │ │ ├── after@0.8.2 
  │ │ │ ├── arraybuffer.slice@0.0.6 
  │ │ │ ├── base64-arraybuffer@0.1.5 
  │ │ │ ├── blob@0.0.4 
  │ │ │ └── wtf-8@1.0.0 
  │ │ └─┬ ws@1.1.4 
  │ │   ├── options@0.0.6 
  │ │   └── ultron@1.0.2 
  │ ├─┬ has-binary@0.1.7 
  │ │ └── isarray@0.0.1 
  │ ├── object-assign@4.1.0 
  │ ├── socket.io-adapter@0.5.0 
  │ ├─┬ socket.io-client@1.7.4 
  │ │ ├── backo2@1.0.2 
  │ │ ├── component-bind@1.0.0 
  │ │ ├── component-emitter@1.2.1 
  │ │ ├─┬ engine.io-client@1.8.4 
  │ │ │ ├── component-emitter@1.2.1 
  │ │ │ ├── component-inherit@0.0.3 
  │ │ │ ├── has-cors@1.1.0 
  │ │ │ ├── parsejson@0.0.3 
  │ │ │ ├── parseqs@0.0.5 
  │ │ │ ├── ws@1.1.2 
  │ │ │ ├── xmlhttprequest-ssl@1.5.3 
  │ │ │ └── yeast@0.1.2 
  │ │ ├── indexof@0.0.1 
  │ │ ├── object-component@0.0.3 
  │ │ ├─┬ parseuri@0.0.5 
  │ │ │ └─┬ better-assert@1.0.2 
  │ │ │   └── callsite@1.0.0 
  │ │ └── to-array@0.1.4 
  │ └─┬ socket.io-parser@2.3.1 
  │   ├── component-emitter@1.1.2 
  │   ├─┬ debug@2.2.0 
  │   │ └── ms@0.7.1 
  │   └── json3@3.3.2 
  └─┬ spooky@0.2.5  (git://github.com/noodny/SpookyJS.git#2afae6d3c54917dd2ba50bf5805f287eedd019bf)
    ├── async@0.1.22 
    ├── carrier@0.1.14 
    ├── duplexer@0.0.4 
    ├─┬ readable-stream@1.0.34 
    │ ├── core-util-is@1.0.2 
    │ ├── inherits@2.0.3 
    │ └── string_decoder@0.10.31 
    ├── tiny-jsonrpc@0.2.1 
    └── underscore@1.3.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/pediff/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0484 took 3.7909s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var Pediff = require('./lib/pediff.js'),
    Server = require('./lib/server.js'),
    Proxy = require('./lib/proxy.js'),
    parseConfig = require('./lib/config.js'),
    meow = require('meow'),
    path = require('path'),
    fs = require('fs'),
    os = require('os'),
    rmdir = require('rmdir-recursive'),
    copy = require('recursive-copy'),
    config,
    instance;

var defaults = {
    specDir: path.join(process.cwd(), 'spec/'),
    resultsDir: path.join(process.cwd(), 'results/'),
    parallelLimit: os.cpus().length * 3,
    live: false
};

var cli = meow({
    help: [
        'Usage',
        '  pediff run all [options]',
        '  pediff run <spec>[ <spec2> <spec...> ] [options]',
        '',
        'Options',
        '  --config <path> - tells pediff where to look for a configuration file (by default it\'s pediff.js in root directory)',
        '  --report        - generate a static report, viewable without running an http server',
        //'  --live          - runs a webserver for dynamic testing',
        '  --no-color      - disable output coloring',
        '  --debug         - outputs additional information'
    ]
});

if(!cli.input.length && !cli.flags.live || cli.input[0] !== 'run' || !cli.input[1]) {
    cli.showHelp();
    process.exit(0);
}

try {
    if(cli.flags.config) {
        config = require(path.join(process.cwd(), cli.flags.config));
    } else {
        config = require(path.join(process.cwd(), 'pediff.js'));
    }
} catch (e) {
    if(cli.flags.config) {
        console.error('  Configuration file ' + cli.flags.config + ' not found.');
    } else {
        console.error('  Configuration file pediff.js not found.\n  Please create this file in the root directory, or tell us where to find it with the --config option.');
    }
    process.exit(0);
}

config = parseConfig(config, defaults);

config.debug = !!cli.flags.debug;

if(cli.flags.report) {
    config.reportDir = config.resultsDir;
    config.resultsDir = path.join(config.resultsDir, 'results/');

    rmdir.sync(config.reportDir);
}

instance = new Pediff(config);

if(cli.flags.live) {
    new Server(config, instance);
} else {
    if(cli.input[1] === 'all') {
        instance.runAll();
    } else {
        var specs = cli.input.splice(1, cli.input.length - 1);
        instance.runBundle(specs);
    }

    if(cli.flags.report) {
        Proxy.once('bundle:finished', function(data) {
            var report = JSON.stringify(data.results),
                script = '<script type="text/javascript">window.report=' + report + '</script>';

            copy(__dirname + '/public/', config.reportDir, {
                filter: [
                    '!css/scss',
                    '!templates',
                    '!js/vendor/require*',
                    '!js/{collections,models,utils,views}',
                    '!js/{almond,application,bootstrap,globals,router,socket,utils}.js'
                ]
            }, function(err) {
                if(err) {
                    throw new Error(err);
                } else {
                    var src = path.join(config.reportDir, 'index.html');
                    var file = fs.readFileSync(src, {
                        encoding: 'utf-8'
                    });

                    file = file.replace('</main>', '</main>' + script)
                        .replace('js/vendor/require.js', 'js/bootstrap.min.js')
                        .replace('<!-- production', '')
                        .replace('production -->', '');

                    fs.writeFileSync(src, file, {
                        encoding: 'utf-8'
                    });
                    process.exit(0);
                }
            });
        });
    }
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
