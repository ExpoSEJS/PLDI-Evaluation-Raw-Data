/root/Targets/nunjucks-brunch
└─┬ nunjucks-brunch@0.3.3 
  ├── lodash@3.3.1 
  ├─┬ mkdirp@0.5.0 
  │ └── minimist@0.0.8 
  └─┬ nunjucks@1.3.4 
    ├─┬ chokidar@0.12.6 
    │ ├── async-each@0.1.6 
    │ └─┬ readdirp@1.3.0 
    │   ├── graceful-fs@2.0.3 
    │   ├─┬ minimatch@0.2.14 
    │   │ ├── lru-cache@2.7.3 
    │   │ └── sigmund@1.0.1 
    │   └─┬ readable-stream@1.0.34 
    │     ├── core-util-is@1.0.2 
    │     ├── inherits@2.0.3 
    │     ├── isarray@0.0.1 
    │     └── string_decoder@0.10.31 
    └─┬ optimist@0.6.1 
      └── wordwrap@0.0.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/nunjucks-brunch/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.1023 took 4.1455s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:97) on program nunjucks = require 'nunjucks'
fs = require 'fs'
path = require 'path'
mkdirp = require 'mkdirp'
_ = require 'lodash'

module.exports = class nunjucksBrunchPlugin
  brunchPlugin: yes
  type: 'template'
  extension: 'html'
  nunjucksOptions: {}

  publicPath: 'public'
  templatePath: 'app/views'
  projectPath: path.resolve process.cwd()

  filePatterns: /^app(\/|\\)views(\/|\\).*.html$/

  constructor: ( @config ) ->
    @configure()

  configure: ->
    if @config.plugins?.nunjucks?
      options = @config?.plugins?.nunjucks or @config.plugins.nunjucks
    else
      options = {}

    if options.filePatterns?
      @filePatterns = options.filePatterns

    if options.templatePath?
      @templatePath = options.templatePath

    if options.path?
      @publicPath = options.path

    @nunjucksOptions = _.omit options, 'filePatterns', 'path'

  templateFactory: ( templatePath, options, callback ) ->
    try
      env = new nunjucks.Environment( new nunjucks.FileSystemLoader ( path.dirname templatePath ) )
      template = env.render options.filename, options
    catch e
      error = e

    callback error, template

  compile: ( data, originalPath, callback ) ->
    # I am avoiding the use of the data variable. Using the file path
    # lets the template compile correctly when referencing other templates.
    templatePath = path.resolve originalPath
    relativePath = path.relative @projectPath, templatePath

    options = _.extend {}, @nunjucksOptions
    options.filename ?= path.basename relativePath

    successHandler = ( error, template ) =>
      if error?
        callback error
        return

      if relativePath.length
        publicPath = path.join @projectPath, @publicPath
        outputPath = relativePath.replace @templatePath, ''
        outputPath = path.join publicPath, outputPath
        outputDirectory = path.dirname outputPath

        # TODO: Save this block from an eternity in callback hell.
        mkdirp outputDirectory, ( err ) ->
          if err
            callback err, null
          else
            fs.writeFile outputPath, template, ( err, written, buffer ) ->
              if err
                callback err, null
              else
                callback()

      else
        callback null, "module.exports = #{template};"

    @templateFactory templatePath, options, successHandler
 at SyntaxError: Unexpected token (1:97)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:61)
    at Parser.pp$1.parseExpressionStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:966:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:730:24)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
    at Parser.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:516:17)
    at Object.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:3098:39)
    at convert (/root/ExpoSE/lib/Tropigate/bin/main.js:50:18)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
