/root/Targets/fuzzcat
└─┬ fuzzcat@0.8.0 
  ├─┬ body-parser@1.18.2 
  │ ├── bytes@3.0.0 
  │ ├── content-type@1.0.4 
  │ ├── depd@1.1.1 
  │ ├─┬ http-errors@1.6.2 
  │ │ └── inherits@2.0.3 
  │ ├── iconv-lite@0.4.19 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── qs@6.5.1 
  │ ├─┬ raw-body@2.3.2 
  │ │ └── unpipe@1.0.0 
  │ └─┬ type-is@1.6.15 
  │   ├── media-typer@0.3.0 
  │   └─┬ mime-types@2.1.17 
  │     └── mime-db@1.30.0 
  ├─┬ cookie-parser@1.4.3 
  │ ├── cookie@0.3.1 
  │ └── cookie-signature@1.0.6 
  ├─┬ debug@2.6.9 
  │ └── ms@2.0.0 
  ├── ejs@1.0.0 
  ├─┬ express@4.15.5 
  │ ├─┬ accepts@1.3.4 
  │ │ └── negotiator@0.6.1 
  │ ├── array-flatten@1.1.1 
  │ ├── content-disposition@0.5.2 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├── finalhandler@1.0.6 
  │ ├── fresh@0.5.2 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@1.1.5 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.4.0 
  │ ├── qs@6.5.0 
  │ ├── range-parser@1.2.0 
  │ ├─┬ send@0.15.6 
  │ │ ├── destroy@1.0.4 
  │ │ └── mime@1.3.4 
  │ ├── serve-static@1.12.6 
  │ ├── setprototypeof@1.0.3 
  │ ├── statuses@1.3.1 
  │ ├── utils-merge@1.0.0 
  │ └── vary@1.1.2 
  ├─┬ morgan@1.8.2 
  │ ├── basic-auth@1.1.0 
  │ ├── debug@2.6.8 
  │ └── on-headers@1.0.1 
  ├─┬ node-radamsa@0.3.0 
  │ └─┬ node-xstream@0.0.2 
  │   └── through@2.3.8 
  ├─┬ should@4.6.5 
  │ ├── should-equal@0.3.1 
  │ ├── should-format@0.0.7 
  │ └── should-type@0.0.4 
  ├─┬ socket.io@1.7.4 
  │ ├─┬ debug@2.3.3 
  │ │ └── ms@0.7.2 
  │ ├─┬ engine.io@1.8.4 
  │ │ ├── accepts@1.3.3 
  │ │ ├── base64id@1.0.0 
  │ │ ├─┬ debug@2.3.3 
  │ │ │ └── ms@0.7.2 
  │ │ ├─┬ engine.io-parser@1.3.2 
  │ │ │ ├── after@0.8.2 
  │ │ │ ├── arraybuffer.slice@0.0.6 
  │ │ │ ├── base64-arraybuffer@0.1.5 
  │ │ │ ├── blob@0.0.4 
  │ │ │ └── wtf-8@1.0.0 
  │ │ └─┬ ws@1.1.4 
  │ │   ├── options@0.0.6 
  │ │   └── ultron@1.0.2 
  │ ├─┬ has-binary@0.1.7 
  │ │ └── isarray@0.0.1 
  │ ├── object-assign@4.1.0 
  │ ├─┬ socket.io-adapter@0.5.0 
  │ │ └─┬ debug@2.3.3 
  │ │   └── ms@0.7.2 
  │ ├─┬ socket.io-client@1.7.4 
  │ │ ├── backo2@1.0.2 
  │ │ ├── component-bind@1.0.0 
  │ │ ├── component-emitter@1.2.1 
  │ │ ├─┬ debug@2.3.3 
  │ │ │ └── ms@0.7.2 
  │ │ ├─┬ engine.io-client@1.8.4 
  │ │ │ ├── component-emitter@1.2.1 
  │ │ │ ├── component-inherit@0.0.3 
  │ │ │ ├─┬ debug@2.3.3 
  │ │ │ │ └── ms@0.7.2 
  │ │ │ ├── has-cors@1.1.0 
  │ │ │ ├── parsejson@0.0.3 
  │ │ │ ├── parseqs@0.0.5 
  │ │ │ ├── ws@1.1.2 
  │ │ │ ├── xmlhttprequest-ssl@1.5.3 
  │ │ │ └── yeast@0.1.2 
  │ │ ├── indexof@0.0.1 
  │ │ ├── object-component@0.0.3 
  │ │ ├─┬ parseuri@0.0.5 
  │ │ │ └─┬ better-assert@1.0.2 
  │ │ │   └── callsite@1.0.0 
  │ │ └── to-array@0.1.4 
  │ └─┬ socket.io-parser@2.3.1 
  │   ├─┬ debug@2.2.0 
  │   │ └── ms@0.7.1 
  │   └── json3@3.3.2 
  ├── static-favicon@2.0.0-alpha 
  ├─┬ superagent@0.18.2 
  │ ├── component-emitter@1.1.2 
  │ ├── cookiejar@2.0.1 
  │ ├── debug@1.0.5 
  │ ├── extend@1.2.1 
  │ ├─┬ form-data@0.1.3 
  │ │ ├── async@0.9.2 
  │ │ ├─┬ combined-stream@0.0.7 
  │ │ │ └── delayed-stream@0.0.5 
  │ │ └── mime@1.2.11 
  │ ├── formidable@1.0.14 
  │ ├── methods@1.0.1 
  │ ├── mime@1.2.11 
  │ ├── qs@0.6.6 
  │ ├─┬ readable-stream@1.0.27-1 
  │ │ ├── core-util-is@1.0.2 
  │ │ └── string_decoder@0.10.31 
  │ └── reduce-component@1.0.1 
  └── tlsecho@0.3.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/fuzzcat/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0495 took 1.4525s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program var radamsa = require('node-radamsa');
var tls = require('tls');
var net = require('net');
var fs = require('fs');
var assert = require('assert');
var debug = require('debug')('fuzzcat');
var appServer = require('./server');
var events = require('events');
var util = require('util');

function Fuzzer(options){

  // parse and init options
  options = options || {};
  this.host = options.host || '127.0.0.1';
  this.port = options.port || 443;
  this.enableSSL = options.enableSSL || false;
  this.clientKey = options.clientKey || null;
  this.clientCert = options.clientCert || null;
  this.ca = options.ca || null;

  this.logFuzz = function(){
    debug = console.log;
  return this;
  }

  this.connectOptions = {};
  this.connectOptions.host = this.host;
  this.connectOptions.port = this.port;
  if(this.clientKey)  this.connectOptions.key = fs.readFileSync(this.clientKey);
  if(this.clientCert)  this.connectOptions.cert = fs.readFileSync(this.clientCert);
  if(this.ca) this.connectOptions.ca = fs.readFileSync(this.ca);
  this.connectOptions.rejectUnauthorized = false;


  this.payloads = [];
  this.fuzzedPackets = 0;
  this.socket = '';

  this.fuzzOptions = {};
  this.fuzzOptions.delay = 1000;


  this.dataStream = '';

  if(this.enableSSL){
    this.socket = tls;
  } else {
    this.socket = net;
  }

}

util.inherits(Fuzzer, events.EventEmitter);

Fuzzer.prototype.setOption = function(name, value){
  assert(name, null);
  assert(value, null);
  this.connectOptions[name] = value;
  this.fuzzOptions[name] = value;
return this;
}


// TODO: Support relative paths. Only supports, actual path for now.
// If its a string, then consider it as a file path and Buffer it.
// If its a buffer, then just, well - add the buffer.
Fuzzer.prototype.addPayload = function(data){
  if(typeof data === 'string')
    this.payloads.push(fs.readFileSync(data));
  if(data instanceof Buffer)
    this.payloads.push(data);

return this;
}

Fuzzer.prototype.radamsaFuzz = function(sock, payload, delay, no_repeat, _global){
  var fuzz = radamsa.fromBuffer(payload);
  delay = delay || 10;
  if(no_repeat !== undefined && no_repeat !== null){
    fuzz.once('data', function(data){
      debug('fuzz data:', data);
      sock.write(new Buffer(data), function(){
        _global.emit('packetSent', data)
      });
      _global.fuzzedPackets++;
    })
  } else {
    var repeat = setInterval(function(){
      Fuzzer.prototype.radamsaFuzz(sock, payload, null, true, _global);
    }, delay);
    sock.on('end', function(data){
      debug('end', 'closing radamsa fuzz socket');
      clearInterval(repeat);
      // Fuzz again
      //Fuzzer.prototype.radamsaFuzz(sock, payload, delay, null, _global);
    });

    sock.on('error', function(data){
      debug('error', data);
      clearInterval(repeat);
      // Fuzz again
      // Fuzzer.prototype.radamsaFuzz(sock, payload, delay, null, _global);
    });

    sock.on('data', function(data){
      debug('data', data.toString());
    });
  }


return this;
}


Fuzzer.prototype.start = function(){

  //var sock = this.socket.connect(this.connectOptions);
  //this.dataStream = sock;

  for(var i=0; i<this.payloads.length; i++){
    // socket, payload, delay, no_repeat, _global
    //this.radamsaFuzz(sock, this.payloads[i], this.fuzzOptions.delay, null, this);
    this.customFuzz(this.payloads[i], this.fuzzOptions.delay, this);
  }


}


// General fuzzing loop
// 1. For the given payload keep passing the fuzz function and repeat
// 2.


Fuzzer.prototype.customFuzz = function(payload, delay, _global){

  var timer = setInterval(function(){
    var fuzz = radamsa.fromBuffer(payload);
    fuzz.once('data', function(payload){
      Fuzzer.prototype.sendPacket(payload, _global);
    });
  }, delay);

}

Fuzzer.prototype.sendPacket = function(payload, _global){
  var sock = _global.socket.connect(_global.connectOptions);
  sock.write(payload, function(){
    _global.emit('packetSent', payload);
    console.log(payload);
  })

  sock.on('end', function(data){
    //debug('end', 'closing radamsa fuzz socket');
  });

  sock.on('error', function(data){
    debug('error', data);
  });

  sock.on('data', function(data){
    debug('data recieved', data.toString());
  });

}


Fuzzer.prototype.serve = function(port){
  var that = this;
  appServer
    .start(port, this)
    .on('start', function(){
      that.emit('serverStarted');
    })
return this;
}



exports.Fuzzer = Fuzzer;
 at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
