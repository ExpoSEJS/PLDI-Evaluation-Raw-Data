/root/Targets/vue-pattern-input
└─┬ vue-pattern-input@2.0.0 
  └── vue@2.4.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/vue-pattern-input/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0532 took 2.5857s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:78) on program <template>
    <input :value="value"
           @input="updateValue($event.target.value)"
           @change="emitChange"
           v-model="val"
           ref="input">
</template>

<script type="text/ecmascript-6">
    export default {
        mounted() {
            this.updateValue(this.value);
        },
        name: 'vue-pattern-input',
        props: {
            value: {
                required: true,
                type: [Number, String]
            },
            // Using for: String.prototype.replace(regexp, replacement)
            regExp: {
                type: RegExp,
                default: null
            },
            // Using for: String.prototype.replace(regexp, replacement)
            replacement: {
                type: String,
                default: ''
            }
        },
        data() {
            return {
                val: ''
            };
        },
        methods: {
            // format the value of input
            formatValue(val) {
                const formattedValue = val.toString().replace(this.regExp, this.replacement);

                return formattedValue;
            },

            // update the value of input
            updateValue(val) {
                const formattedValue = this.formatValue(val);

                this.val = formattedValue;
                this.emitInput(formattedValue);
            },

            // emit input event
            emitInput(val) {
                this.$emit('input', val);
            },

            // emit change event
            emitChange() {
                this.$emit('change', this.val);
            }
        },
        watch: {
            // watch value prop
            value(val) {
                this.updateValue(val);
            }
        }
    }
</script>

<style>
</style> at SyntaxError: Unexpected token (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
