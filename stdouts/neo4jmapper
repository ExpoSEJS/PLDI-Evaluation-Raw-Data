/root/Targets/neo4jmapper
└── neo4jmapper@1.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/neo4jmapper/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /2 queued / 1 running / 1 errors / 18% coverage ] ****** [1 done /1 queued / 2 running / 1 errors / 18% coverage ] ****** [1 done /0 queued / 3 running / 1 errors / 18% coverage ] ****** [1 done /0 queued / 3 running / 1 errors / 18% coverage ] ****** [2 done /0 queued / 2 running / 1 errors / 18% coverage ] ****** [3 done /0 queued / 2 running / 2 errors / 18% coverage ] ****** [3 done /0 queued / 2 running / 2 errors / 18% coverage ] ****** [4 done /0 queued / 2 running / 3 errors / 18% coverage ] ****** [4 done /0 queued / 2 running / 3 errors / 18% coverage ] ****** [5 done /0 queued / 2 running / 4 errors / 18% coverage ] ****** [5 done /0 queued / 2 running / 4 errors / 18% coverage ] ****** [6 done /0 queued / 2 running / 5 errors / 18% coverage ] ****** [6 done /0 queued / 2 running / 5 errors / 18% coverage ] ****** [7 done /0 queued / 2 running / 6 errors / 18% coverage ] ****** [7 done /0 queued / 2 running / 6 errors / 18% coverage ] ****** [8 done /0 queued / 2 running / 7 errors / 18% coverage ] ****** [8 done /0 queued / 2 running / 7 errors / 18% coverage ] ****** [9 done /0 queued / 2 running / 8 errors / 18% coverage ] ****** [9 done /0 queued / 2 running / 8 errors / 18% coverage ] ****** [10 done /1 queued / 2 running / 9 errors / 19% coverage ] ****** [10 done /0 queued / 3 running / 9 errors / 19% coverage ] ****** [10 done /0 queued / 3 running / 9 errors / 19% coverage ] ****** [11 done /1 queued / 3 running / 10 errors / 19% coverage ] ****** [11 done /0 queued / 4 running / 10 errors / 19% coverage ] ****** [11 done /0 queued / 4 running / 10 errors / 19% coverage ] ****** [12 done /0 queued / 3 running / 11 errors / 19% coverage ] ****** [13 done /0 queued / 2 running / 12 errors / 19% coverage ] ****** [14 done /1 queued / 2 running / 13 errors / 19% coverage ] ****** [14 done /0 queued / 3 running / 13 errors / 19% coverage ] ****** [14 done /0 queued / 3 running / 13 errors / 19% coverage ] ****** [15 done /1 queued / 3 running / 14 errors / 19% coverage ] ****** [15 done /0 queued / 4 running / 14 errors / 19% coverage ] ****** [15 done /0 queued / 4 running / 14 errors / 19% coverage ] ****** [16 done /1 queued / 4 running / 15 errors / 19% coverage ] ****** [16 done /0 queued / 5 running / 15 errors / 19% coverage ] ****** [16 done /0 queued / 5 running / 15 errors / 19% coverage ] ****** [17 done /2 queued / 5 running / 16 errors / 19% coverage ] ****** [17 done /1 queued / 6 running / 16 errors / 19% coverage ] ****** [17 done /0 queued / 7 running / 16 errors / 19% coverage ] ****** [17 done /0 queued / 7 running / 16 errors / 19% coverage ] ****** [18 done /2 queued / 7 running / 17 errors / 19% coverage ] ****** [18 done /1 queued / 8 running / 17 errors / 19% coverage ] ****** [18 done /0 queued / 9 running / 17 errors / 19% coverage ] ****** [18 done /0 queued / 9 running / 17 errors / 19% coverage ] ****** [19 done /1 queued / 9 running / 18 errors / 19% coverage ] ****** [19 done /0 queued / 10 running / 18 errors / 19% coverage ] ****** [19 done /0 queued / 10 running / 18 errors / 19% coverage ] ****** [20 done /1 queued / 10 running / 19 errors / 19% coverage ] ****** [20 done /0 queued / 11 running / 19 errors / 19% coverage ] ****** [20 done /0 queued / 11 running / 19 errors / 19% coverage ] ****** [21 done /1 queued / 11 running / 20 errors / 19% coverage ] ****** [21 done /0 queued / 12 running / 20 errors / 19% coverage ] ****** [21 done /0 queued / 12 running / 20 errors / 19% coverage ] ****** [22 done /1 queued / 12 running / 21 errors / 19% coverage ] ****** [22 done /0 queued / 13 running / 21 errors / 19% coverage ] ****** [22 done /0 queued / 13 running / 21 errors / 19% coverage ] ****** [23 done /1 queued / 13 running / 22 errors / 19% coverage ] ****** [23 done /0 queued / 14 running / 22 errors / 19% coverage ] ****** [23 done /0 queued / 14 running / 22 errors / 19% coverage ] ****** [24 done /0 queued / 14 running / 23 errors / 19% coverage ] ****** [24 done /0 queued / 14 running / 23 errors / 19% coverage ] ****** [25 done /0 queued / 14 running / 24 errors / 19% coverage ] ****** [25 done /0 queued / 14 running / 24 errors / 19% coverage ] ****** [26 done /1 queued / 14 running / 25 errors / 19% coverage ] ****** [26 done /0 queued / 15 running / 25 errors / 19% coverage ] ****** [26 done /0 queued / 15 running / 25 errors / 19% coverage ] ****** [27 done /1 queued / 15 running / 26 errors / 19% coverage ] ****** [27 done /0 queued / 16 running / 26 errors / 19% coverage ] ****** [27 done /0 queued / 16 running / 26 errors / 19% coverage ] ****** [28 done /1 queued / 16 running / 27 errors / 19% coverage ] ****** [28 done /1 queued / 16 running / 27 errors / 19% coverage ] ****** [29 done /2 queued / 16 running / 28 errors / 19% coverage ] ****** [29 done /2 queued / 16 running / 28 errors / 19% coverage ] ****** [30 done /3 queued / 16 running / 29 errors / 19% coverage ] ****** [30 done /3 queued / 16 running / 29 errors / 19% coverage ] ****** [31 done /4 queued / 16 running / 30 errors / 19% coverage ] ****** [31 done /4 queued / 16 running / 30 errors / 19% coverage ] ****** [32 done /5 queued / 16 running / 31 errors / 19% coverage ] ****** [32 done /5 queued / 16 running / 31 errors / 19% coverage ] ****** [33 done /6 queued / 16 running / 32 errors / 19% coverage ] ****** [33 done /6 queued / 16 running / 32 errors / 19% coverage ] ****** [34 done /7 queued / 16 running / 33 errors / 19% coverage ] ****** [34 done /7 queued / 16 running / 33 errors / 19% coverage ] ****** [35 done /9 queued / 16 running / 34 errors / 19% coverage ] ****** [35 done /9 queued / 16 running / 34 errors / 19% coverage ] ****** [36 done /10 queued / 16 running / 35 errors / 19% coverage ] ****** [36 done /10 queued / 16 running / 35 errors / 19% coverage ] ****** [37 done /11 queued / 16 running / 36 errors / 19% coverage ] ****** [37 done /11 queued / 16 running / 36 errors / 19% coverage ] ****** [38 done /13 queued / 16 running / 37 errors / 19% coverage ] ****** [38 done /13 queued / 16 running / 37 errors / 19% coverage ] ****** [39 done /14 queued / 16 running / 38 errors / 19% coverage ] ****** [39 done /14 queued / 16 running / 38 errors / 19% coverage ] ****** [40 done /15 queued / 16 running / 39 errors / 19% coverage ] ****** [40 done /15 queued / 16 running / 39 errors / 19% coverage ] ****** [41 done /16 queued / 16 running / 40 errors / 19% coverage ] ****** [41 done /16 queued / 16 running / 40 errors / 19% coverage ] ****** [42 done /18 queued / 16 running / 41 errors / 19% coverage ] ****** [42 done /18 queued / 16 running / 41 errors / 19% coverage ] ****** [43 done /19 queued / 16 running / 42 errors / 19% coverage ] ****** [43 done /19 queued / 16 running / 42 errors / 19% coverage ] ****** [44 done /20 queued / 16 running / 43 errors / 19% coverage ] ****** [44 done /20 queued / 16 running / 43 errors / 19% coverage ] ****** [45 done /21 queued / 16 running / 44 errors / 19% coverage ] ****** [45 done /21 queued / 16 running / 44 errors / 19% coverage ] ****** [46 done /22 queued / 16 running / 45 errors / 19% coverage ] ****** [46 done /22 queued / 16 running / 45 errors / 19% coverage ] ****** [47 done /23 queued / 16 running / 46 errors / 19% coverage ] ****** [47 done /23 queued / 16 running / 46 errors / 19% coverage ] ****** [48 done /24 queued / 16 running / 47 errors / 19% coverage ] ****** [48 done /24 queued / 16 running / 47 errors / 19% coverage ] ****** [49 done /26 queued / 16 running / 48 errors / 19% coverage ] ****** [49 done /26 queued / 16 running / 48 errors / 19% coverage ] ****** [50 done /26 queued / 16 running / 49 errors / 19% coverage ] ****** [50 done /26 queued / 16 running / 49 errors / 19% coverage ] ****** [51 done /27 queued / 16 running / 50 errors / 19% coverage ] ****** [51 done /27 queued / 16 running / 50 errors / 19% coverage ] ****** [52 done /27 queued / 16 running / 51 errors / 19% coverage ] ****** [52 done /27 queued / 16 running / 51 errors / 19% coverage ] ****** [53 done /28 queued / 16 running / 52 errors / 19% coverage ] ****** [53 done /28 queued / 16 running / 52 errors / 19% coverage ] ****** [54 done /29 queued / 16 running / 53 errors / 19% coverage ] ****** [54 done /29 queued / 16 running / 53 errors / 19% coverage ] ****** [55 done /31 queued / 16 running / 54 errors / 19% coverage ] ****** [55 done /31 queued / 16 running / 54 errors / 19% coverage ] ****** [56 done /32 queued / 16 running / 55 errors / 19% coverage ] ****** [56 done /32 queued / 16 running / 55 errors / 19% coverage ] ****** [57 done /32 queued / 16 running / 56 errors / 19% coverage ] ****** [57 done /32 queued / 16 running / 56 errors / 19% coverage ] ****** [58 done /34 queued / 16 running / 57 errors / 19% coverage ] ****** [58 done /34 queued / 16 running / 57 errors / 19% coverage ] ****** [59 done /35 queued / 16 running / 58 errors / 19% coverage ] ****** [59 done /35 queued / 16 running / 58 errors / 19% coverage ] ****** [60 done /36 queued / 16 running / 59 errors / 19% coverage ] ****** [60 done /36 queued / 16 running / 59 errors / 19% coverage ] ****** [61 done /37 queued / 16 running / 60 errors / 19% coverage ] ****** [61 done /37 queued / 16 running / 60 errors / 19% coverage ] ****** [62 done /38 queued / 16 running / 61 errors / 19% coverage ] ****** [62 done /38 queued / 16 running / 61 errors / 19% coverage ] ****** [63 done /41 queued / 16 running / 62 errors / 19% coverage ] ****** [63 done /41 queued / 16 running / 62 errors / 19% coverage ] ****** [64 done /43 queued / 16 running / 63 errors / 19% coverage ] ****** [64 done /43 queued / 16 running / 63 errors / 19% coverage ] ****** [65 done /44 queued / 16 running / 64 errors / 19% coverage ] ****** [65 done /44 queued / 16 running / 64 errors / 19% coverage ] ****** [66 done /47 queued / 16 running / 65 errors / 19% coverage ] ****** [66 done /47 queued / 16 running / 65 errors / 19% coverage ] ****** [67 done /49 queued / 16 running / 66 errors / 19% coverage ] ****** [67 done /49 queued / 16 running / 66 errors / 19% coverage ] ****** [68 done /49 queued / 16 running / 67 errors / 19% coverage ] ****** [68 done /49 queued / 16 running / 67 errors / 19% coverage ] ****** [69 done /50 queued / 16 running / 68 errors / 19% coverage ] ****** [69 done /50 queued / 16 running / 68 errors / 19% coverage ] ****** [70 done /51 queued / 16 running / 69 errors / 19% coverage ] ****** [70 done /51 queued / 16 running / 69 errors / 19% coverage ] ****** [71 done /52 queued / 16 running / 70 errors / 19% coverage ] ****** [71 done /52 queued / 16 running / 70 errors / 19% coverage ] ****** [72 done /53 queued / 16 running / 71 errors / 19% coverage ] ****** [72 done /53 queued / 16 running / 71 errors / 19% coverage ] ****** [73 done /55 queued / 16 running / 72 errors / 19% coverage ] ****** [73 done /55 queued / 16 running / 72 errors / 19% coverage ] ****** [74 done /58 queued / 16 running / 73 errors / 19% coverage ] ****** [74 done /58 queued / 16 running / 73 errors / 19% coverage ] ****** [75 done /58 queued / 16 running / 74 errors / 19% coverage ] ****** [75 done /58 queued / 16 running / 74 errors / 19% coverage ] ****** [76 done /59 queued / 16 running / 75 errors / 19% coverage ] ****** [76 done /59 queued / 16 running / 75 errors / 19% coverage ] ****** [77 done /60 queued / 16 running / 76 errors / 19% coverage ] ****** [77 done /60 queued / 16 running / 76 errors / 19% coverage ] ****** [78 done /60 queued / 16 running / 77 errors / 19% coverage ] ****** [78 done /60 queued / 16 running / 77 errors / 19% coverage ] ****** [79 done /61 queued / 16 running / 78 errors / 19% coverage ] ****** [79 done /61 queued / 16 running / 78 errors / 19% coverage ] ****** [80 done /62 queued / 16 running / 79 errors / 19% coverage ] ****** [80 done /62 queued / 16 running / 79 errors / 19% coverage ] ****** [81 done /62 queued / 16 running / 80 errors / 19% coverage ] ****** [81 done /62 queued / 16 running / 80 errors / 19% coverage ] ****** [82 done /63 queued / 16 running / 81 errors / 19% coverage ] ****** [82 done /63 queued / 16 running / 81 errors / 19% coverage ] ****** [83 done /63 queued / 16 running / 82 errors / 19% coverage ] ****** [83 done /63 queued / 16 running / 82 errors / 19% coverage ] ****** [84 done /64 queued / 16 running / 83 errors / 19% coverage ] ****** [84 done /64 queued / 16 running / 83 errors / 19% coverage ] ****** [85 done /64 queued / 16 running / 84 errors / 19% coverage ] ****** [85 done /64 queued / 16 running / 84 errors / 19% coverage ] ****** [86 done /65 queued / 16 running / 85 errors / 19% coverage ] ****** [86 done /65 queued / 16 running / 85 errors / 19% coverage ] ****** [87 done /65 queued / 16 running / 86 errors / 19% coverage ] ****** [87 done /65 queued / 16 running / 86 errors / 19% coverage ] ****** [88 done /65 queued / 16 running / 87 errors / 19% coverage ] ****** [88 done /65 queued / 16 running / 87 errors / 19% coverage ] ****** [89 done /66 queued / 16 running / 88 errors / 19% coverage ] ****** [89 done /66 queued / 16 running / 88 errors / 19% coverage ] ****** [90 done /66 queued / 16 running / 89 errors / 19% coverage ] ****** [90 done /66 queued / 16 running / 89 errors / 19% coverage ] ****** [91 done /66 queued / 16 running / 90 errors / 19% coverage ] ****** [91 done /66 queued / 16 running / 90 errors / 19% coverage ] ****** [92 done /67 queued / 16 running / 91 errors / 19% coverage ] ****** [92 done /67 queued / 16 running / 91 errors / 19% coverage ] ****** [93 done /68 queued / 16 running / 92 errors / 19% coverage ] ****** [93 done /68 queued / 16 running / 92 errors / 19% coverage ] ****** [94 done /69 queued / 16 running / 93 errors / 19% coverage ] ****** [94 done /69 queued / 16 running / 93 errors / 19% coverage ] ****** [95 done /70 queued / 16 running / 94 errors / 19% coverage ] ****** [95 done /70 queued / 16 running / 94 errors / 19% coverage ] ****** [96 done /70 queued / 16 running / 95 errors / 19% coverage ] ****** [96 done /70 queued / 16 running / 95 errors / 19% coverage ] ****** [97 done /73 queued / 16 running / 96 errors / 19% coverage ] ****** [97 done /73 queued / 16 running / 96 errors / 19% coverage ] ****** [98 done /73 queued / 16 running / 97 errors / 19% coverage ] ****** [98 done /73 queued / 16 running / 97 errors / 19% coverage ] ****** [99 done /74 queued / 16 running / 98 errors / 19% coverage ] ****** [99 done /74 queued / 16 running / 98 errors / 19% coverage ] ****** [100 done /75 queued / 16 running / 99 errors / 19% coverage ] ****** [100 done /75 queued / 16 running / 99 errors / 19% coverage ] ****** [101 done /78 queued / 16 running / 100 errors / 19% coverage ] ****** [101 done /78 queued / 16 running / 100 errors / 19% coverage ] ****** [102 done /79 queued / 16 running / 101 errors / 19% coverage ] ****** [102 done /79 queued / 16 running / 101 errors / 19% coverage ] ****** [103 done /80 queued / 16 running / 102 errors / 19% coverage ] ****** [103 done /80 queued / 16 running / 102 errors / 19% coverage ] ****** [104 done /81 queued / 16 running / 103 errors / 19% coverage ] ****** [104 done /81 queued / 16 running / 103 errors / 19% coverage ] ****** [105 done /82 queued / 16 running / 104 errors / 19% coverage ] ****** [105 done /82 queued / 16 running / 104 errors / 19% coverage ] ****** [106 done /83 queued / 16 running / 105 errors / 19% coverage ] ****** [106 done /83 queued / 16 running / 105 errors / 19% coverage ] ****** [107 done /84 queued / 16 running / 106 errors / 19% coverage ] ****** [107 done /84 queued / 16 running / 106 errors / 19% coverage ] ****** [108 done /85 queued / 16 running / 107 errors / 19% coverage ] ****** [108 done /85 queued / 16 running / 107 errors / 19% coverage ] ****** [109 done /85 queued / 16 running / 108 errors / 19% coverage ] ****** [109 done /85 queued / 16 running / 108 errors / 19% coverage ] ****** [110 done /86 queued / 16 running / 109 errors / 19% coverage ] ****** [110 done /86 queued / 16 running / 109 errors / 19% coverage ] ****** [111 done /87 queued / 16 running / 110 errors / 19% coverage ] ****** [111 done /87 queued / 16 running / 110 errors / 19% coverage ] ****** [112 done /88 queued / 16 running / 111 errors / 19% coverage ] ****** [112 done /88 queued / 16 running / 111 errors / 19% coverage ] ****** [113 done /89 queued / 16 running / 112 errors / 19% coverage ] ****** [113 done /89 queued / 16 running / 112 errors / 19% coverage ] ****** [114 done /90 queued / 16 running / 113 errors / 19% coverage ] ****** [114 done /90 queued / 16 running / 113 errors / 19% coverage ] ****** [115 done /91 queued / 16 running / 114 errors / 19% coverage ] ****** [115 done /91 queued / 16 running / 114 errors / 19% coverage ] ****** [116 done /92 queued / 16 running / 115 errors / 19% coverage ] ****** [116 done /92 queued / 16 running / 115 errors / 19% coverage ] ****** [117 done /93 queued / 16 running / 116 errors / 19% coverage ] ****** [117 done /93 queued / 16 running / 116 errors / 19% coverage ] ****** [118 done /93 queued / 16 running / 117 errors / 19% coverage ] ****** [118 done /93 queued / 16 running / 117 errors / 19% coverage ] ****** [119 done /94 queued / 16 running / 118 errors / 19% coverage ] ****** [119 done /94 queued / 16 running / 118 errors / 19% coverage ] ****** [120 done /95 queued / 16 running / 119 errors / 19% coverage ] ****** [120 done /95 queued / 16 running / 119 errors / 19% coverage ] ****** [121 done /95 queued / 16 running / 120 errors / 19% coverage ] ****** [121 done /95 queued / 16 running / 120 errors / 19% coverage ] ****** [122 done /97 queued / 16 running / 121 errors / 19% coverage ] ****** [122 done /97 queued / 16 running / 121 errors / 19% coverage ] ****** [123 done /97 queued / 16 running / 122 errors / 19% coverage ] ****** [123 done /97 queued / 16 running / 122 errors / 19% coverage ] ****** [124 done /98 queued / 16 running / 123 errors / 19% coverage ] ****** [124 done /98 queued / 16 running / 123 errors / 19% coverage ] ****** [125 done /99 queued / 16 running / 124 errors / 19% coverage ] ****** [125 done /99 queued / 16 running / 124 errors / 19% coverage ] ****** [126 done /103 queued / 16 running / 125 errors / 19% coverage ] ****** [126 done /103 queued / 16 running / 125 errors / 19% coverage ] ****** [127 done /106 queued / 16 running / 126 errors / 19% coverage ] ****** [127 done /106 queued / 16 running / 126 errors / 19% coverage ] ****** [128 done /108 queued / 16 running / 127 errors / 19% coverage ] ****** [128 done /108 queued / 16 running / 127 errors / 19% coverage ] ****** [129 done /112 queued / 16 running / 128 errors / 19% coverage ] ****** [129 done /112 queued / 16 running / 128 errors / 19% coverage ] ****** [130 done /113 queued / 16 running / 129 errors / 19% coverage ] ****** [130 done /113 queued / 16 running / 129 errors / 19% coverage ] ****** [131 done /114 queued / 16 running / 130 errors / 19% coverage ] ****** [131 done /114 queued / 16 running / 130 errors / 19% coverage ] ****** [132 done /115 queued / 16 running / 131 errors / 19% coverage ] ****** [132 done /115 queued / 16 running / 131 errors / 19% coverage ] ****** [133 done /115 queued / 16 running / 132 errors / 19% coverage ] ****** [133 done /115 queued / 16 running / 132 errors / 19% coverage ] ****** [134 done /116 queued / 16 running / 133 errors / 19% coverage ] ****** [134 done /116 queued / 16 running / 133 errors / 19% coverage ] ****** [135 done /118 queued / 16 running / 134 errors / 19% coverage ] ****** [135 done /118 queued / 16 running / 134 errors / 19% coverage ] ****** [136 done /120 queued / 16 running / 135 errors / 19% coverage ] ****** [136 done /120 queued / 16 running / 135 errors / 19% coverage ] ****** [137 done /121 queued / 16 running / 136 errors / 19% coverage ] ****** [137 done /121 queued / 16 running / 136 errors / 19% coverage ] ****** [138 done /122 queued / 16 running / 137 errors / 19% coverage ] ****** [138 done /122 queued / 16 running / 137 errors / 19% coverage ] ****** [139 done /122 queued / 16 running / 138 errors / 19% coverage ] ****** [139 done /122 queued / 16 running / 138 errors / 19% coverage ] ****** [140 done /122 queued / 16 running / 139 errors / 19% coverage ] ****** [140 done /122 queued / 16 running / 139 errors / 19% coverage ] ****** [141 done /123 queued / 16 running / 140 errors / 19% coverage ] ****** [141 done /123 queued / 16 running / 140 errors / 19% coverage ] ****** [142 done /125 queued / 16 running / 141 errors / 19% coverage ] ****** [142 done /125 queued / 16 running / 141 errors / 19% coverage ] ****** [143 done /126 queued / 16 running / 142 errors / 19% coverage ] ****** [143 done /126 queued / 16 running / 142 errors / 19% coverage ] ****** [144 done /126 queued / 16 running / 143 errors / 19% coverage ] ****** [144 done /126 queued / 16 running / 143 errors / 19% coverage ] ****** [145 done /126 queued / 16 running / 144 errors / 19% coverage ] ****** [145 done /126 queued / 16 running / 144 errors / 19% coverage ] ****** [146 done /127 queued / 16 running / 145 errors / 19% coverage ] ****** [146 done /127 queued / 16 running / 145 errors / 19% coverage ] ****** [147 done /128 queued / 16 running / 146 errors / 19% coverage ] ****** [147 done /128 queued / 16 running / 146 errors / 19% coverage ] ****** [148 done /128 queued / 16 running / 147 errors / 19% coverage ] ****** [148 done /128 queued / 16 running / 147 errors / 19% coverage ] ****** [149 done /129 queued / 16 running / 148 errors / 19% coverage ] ****** [149 done /129 queued / 16 running / 148 errors / 19% coverage ] ****** [150 done /131 queued / 16 running / 149 errors / 19% coverage ] ****** [150 done /131 queued / 16 running / 149 errors / 19% coverage ] ****** [151 done /131 queued / 16 running / 150 errors / 19% coverage ] ****** [151 done /131 queued / 16 running / 150 errors / 19% coverage ] ****** [152 done /132 queued / 16 running / 151 errors / 19% coverage ] ****** [152 done /132 queued / 16 running / 151 errors / 19% coverage ] ****** [153 done /132 queued / 16 running / 152 errors / 19% coverage ] ****** [153 done /132 queued / 16 running / 152 errors / 19% coverage ] ****** [154 done /132 queued / 16 running / 153 errors / 19% coverage ] ****** [154 done /132 queued / 16 running / 153 errors / 19% coverage ] ****** [155 done /133 queued / 16 running / 154 errors / 19% coverage ] ****** [155 done /133 queued / 16 running / 154 errors / 19% coverage ] ****** [156 done /133 queued / 16 running / 155 errors / 19% coverage ] ****** [156 done /133 queued / 16 running / 155 errors / 19% coverage ] ****** [157 done /133 queued / 16 running / 156 errors / 19% coverage ] ****** [157 done /133 queued / 16 running / 156 errors / 19% coverage ] ****** [158 done /133 queued / 16 running / 157 errors / 19% coverage ] ****** [158 done /133 queued / 16 running / 157 errors / 19% coverage ] ****** [159 done /135 queued / 16 running / 158 errors / 19% coverage ] ****** [159 done /135 queued / 16 running / 158 errors / 19% coverage ] ****** [160 done /136 queued / 16 running / 159 errors / 19% coverage ] ****** [160 done /136 queued / 16 running / 159 errors / 19% coverage ] ****** [161 done /137 queued / 16 running / 160 errors / 19% coverage ] ****** [161 done /137 queued / 16 running / 160 errors / 19% coverage ] ****** [162 done /141 queued / 16 running / 161 errors / 19% coverage ] ****** [162 done /141 queued / 16 running / 161 errors / 19% coverage ] ****** [163 done /142 queued / 16 running / 162 errors / 19% coverage ] ****** [163 done /142 queued / 16 running / 162 errors / 19% coverage ] ****** [164 done /142 queued / 16 running / 163 errors / 19% coverage ] ****** [164 done /142 queued / 16 running / 163 errors / 19% coverage ] ****** [165 done /143 queued / 16 running / 164 errors / 19% coverage ] ****** [165 done /143 queued / 16 running / 164 errors / 19% coverage ] ****** [166 done /143 queued / 16 running / 165 errors / 19% coverage ] ****** [166 done /143 queued / 16 running / 165 errors / 19% coverage ] ****** [167 done /144 queued / 16 running / 166 errors / 19% coverage ] ****** [167 done /144 queued / 16 running / 166 errors / 19% coverage ] ****** [168 done /145 queued / 16 running / 167 errors / 19% coverage ] ****** [168 done /145 queued / 16 running / 167 errors / 19% coverage ] ****** [169 done /147 queued / 16 running / 168 errors / 19% coverage ] ****** [169 done /147 queued / 16 running / 168 errors / 19% coverage ] ****** [170 done /148 queued / 16 running / 169 errors / 19% coverage ] ****** [170 done /148 queued / 16 running / 169 errors / 19% coverage ] ****** [171 done /149 queued / 16 running / 170 errors / 19% coverage ] ****** [171 done /149 queued / 16 running / 170 errors / 19% coverage ] ****** [172 done /149 queued / 16 running / 171 errors / 19% coverage ] ****** [172 done /149 queued / 16 running / 171 errors / 19% coverage ] ****** [173 done /152 queued / 16 running / 172 errors / 19% coverage ] ****** [173 done /152 queued / 16 running / 172 errors / 19% coverage ] ****** [174 done /153 queued / 16 running / 173 errors / 19% coverage ] ****** [174 done /153 queued / 16 running / 173 errors / 19% coverage ] ****** [175 done /154 queued / 16 running / 174 errors / 19% coverage ] ****** [175 done /154 queued / 16 running / 174 errors / 19% coverage ] ****** [176 done /155 queued / 16 running / 175 errors / 19% coverage ] ****** [176 done /155 queued / 16 running / 175 errors / 19% coverage ] ****** [177 done /155 queued / 16 running / 176 errors / 19% coverage ] ****** [177 done /155 queued / 16 running / 176 errors / 19% coverage ] ****** [178 done /156 queued / 16 running / 177 errors / 19% coverage ] ****** [178 done /156 queued / 16 running / 177 errors / 19% coverage ] ****** [179 done /157 queued / 16 running / 178 errors / 19% coverage ] ****** [179 done /157 queued / 16 running / 178 errors / 19% coverage ] ****** [180 done /157 queued / 16 running / 179 errors / 19% coverage ] ****** [180 done /157 queued / 16 running / 179 errors / 19% coverage ] ****** [181 done /158 queued / 16 running / 180 errors / 19% coverage ] ****** [181 done /158 queued / 16 running / 180 errors / 19% coverage ] ****** [182 done /159 queued / 16 running / 181 errors / 19% coverage ] ****** [182 done /159 queued / 16 running / 181 errors / 19% coverage ] ****** [183 done /159 queued / 16 running / 182 errors / 19% coverage ] ****** [183 done /159 queued / 16 running / 182 errors / 19% coverage ] ****** [184 done /160 queued / 16 running / 183 errors / 19% coverage ] ****** [184 done /160 queued / 16 running / 183 errors / 19% coverage ] ****** [185 done /162 queued / 16 running / 184 errors / 19% coverage ] ****** [185 done /162 queued / 16 running / 184 errors / 19% coverage ] ****** [186 done /163 queued / 16 running / 185 errors / 19% coverage ] ****** [186 done /163 queued / 16 running / 185 errors / 19% coverage ] ****** [187 done /164 queued / 16 running / 186 errors / 19% coverage ] ****** [187 done /164 queued / 16 running / 186 errors / 19% coverage ] ****** [188 done /165 queued / 16 running / 187 errors / 19% coverage ] ****** [188 done /165 queued / 16 running / 187 errors / 19% coverage ] ****** [189 done /165 queued / 16 running / 188 errors / 19% coverage ] ****** [189 done /165 queued / 16 running / 188 errors / 19% coverage ] ****** [190 done /165 queued / 16 running / 189 errors / 19% coverage ] ****** [190 done /165 queued / 16 running / 189 errors / 19% coverage ] ****** [191 done /166 queued / 16 running / 190 errors / 19% coverage ] ****** [191 done /166 queued / 16 running / 190 errors / 19% coverage ] ****** [192 done /167 queued / 16 running / 191 errors / 19% coverage ] ****** [192 done /167 queued / 16 running / 191 errors / 19% coverage ] ****** [193 done /168 queued / 16 running / 192 errors / 19% coverage ] ****** [193 done /168 queued / 16 running / 192 errors / 19% coverage ] ****** [194 done /168 queued / 16 running / 193 errors / 19% coverage ] ****** [194 done /168 queued / 16 running / 193 errors / 19% coverage ] ****** [195 done /169 queued / 16 running / 194 errors / 19% coverage ] ****** [195 done /169 queued / 16 running / 194 errors / 19% coverage ] ****** [196 done /170 queued / 16 running / 195 errors / 19% coverage ] ****** [196 done /170 queued / 16 running / 195 errors / 19% coverage ] ****** [197 done /171 queued / 16 running / 196 errors / 19% coverage ] ****** [197 done /171 queued / 16 running / 196 errors / 19% coverage ] ****** [198 done /172 queued / 16 running / 197 errors / 19% coverage ] ****** [198 done /172 queued / 16 running / 197 errors / 19% coverage ] ****** [199 done /173 queued / 16 running / 198 errors / 19% coverage ] ****** [199 done /173 queued / 16 running / 198 errors / 19% coverage ] ****** [200 done /175 queued / 16 running / 199 errors / 19% coverage ] ****** [200 done /175 queued / 16 running / 199 errors / 19% coverage ] ****** [201 done /179 queued / 16 running / 200 errors / 19% coverage ] ****** [201 done /179 queued / 16 running / 200 errors / 19% coverage ] ****** [202 done /180 queued / 16 running / 201 errors / 19% coverage ] ****** [202 done /180 queued / 16 running / 201 errors / 19% coverage ] ****** [203 done /181 queued / 16 running / 202 errors / 19% coverage ] ****** [203 done /181 queued / 16 running / 202 errors / 19% coverage ] ****** [204 done /182 queued / 16 running / 203 errors / 19% coverage ] ****** [204 done /182 queued / 16 running / 203 errors / 19% coverage ] ****** [205 done /184 queued / 16 running / 204 errors / 19% coverage ] ****** [205 done /184 queued / 16 running / 204 errors / 19% coverage ] ****** [206 done /186 queued / 16 running / 205 errors / 19% coverage ] ****** [206 done /186 queued / 16 running / 205 errors / 19% coverage ] ****** [207 done /187 queued / 16 running / 206 errors / 19% coverage ] ****** [207 done /187 queued / 16 running / 206 errors / 19% coverage ] ****** [208 done /189 queued / 16 running / 207 errors / 19% coverage ] ****** [208 done /189 queued / 16 running / 207 errors / 19% coverage ] ****** [209 done /189 queued / 16 running / 208 errors / 19% coverage ] ****** [209 done /189 queued / 16 running / 208 errors / 19% coverage ] ****** [210 done /192 queued / 16 running / 209 errors / 19% coverage ] ****** [210 done /192 queued / 16 running / 209 errors / 19% coverage ] ****** [211 done /194 queued / 16 running / 210 errors / 19% coverage ] ****** [211 done /194 queued / 16 running / 210 errors / 19% coverage ] ****** [212 done /195 queued / 16 running / 211 errors / 19% coverage ] ****** [212 done /195 queued / 16 running / 211 errors / 19% coverage ] ****** [213 done /197 queued / 16 running / 212 errors / 19% coverage ] ****** [213 done /197 queued / 16 running / 212 errors / 19% coverage ] ****** [214 done /199 queued / 16 running / 213 errors / 19% coverage ] ****** [214 done /199 queued / 16 running / 213 errors / 19% coverage ] ****** [215 done /200 queued / 16 running / 214 errors / 19% coverage ] ****** [215 done /200 queued / 16 running / 214 errors / 19% coverage ] ****** [216 done /200 queued / 16 running / 215 errors / 19% coverage ] ****** [216 done /200 queued / 16 running / 215 errors / 19% coverage ] ****** [217 done /200 queued / 16 running / 216 errors / 19% coverage ] ****** [217 done /200 queued / 16 running / 216 errors / 19% coverage ] ****** [218 done /201 queued / 16 running / 217 errors / 19% coverage ] ****** [218 done /201 queued / 16 running / 217 errors / 19% coverage ] ****** [219 done /202 queued / 16 running / 218 errors / 19% coverage ] ****** [219 done /202 queued / 16 running / 218 errors / 19% coverage ] ****** [220 done /203 queued / 16 running / 219 errors / 19% coverage ] ****** [220 done /203 queued / 16 running / 219 errors / 19% coverage ] ****** [221 done /203 queued / 16 running / 220 errors / 19% coverage ] ****** [221 done /203 queued / 16 running / 220 errors / 19% coverage ] ****** [222 done /203 queued / 16 running / 221 errors / 19% coverage ] ****** [222 done /203 queued / 16 running / 221 errors / 19% coverage ] ****** [223 done /204 queued / 16 running / 222 errors / 19% coverage ] ****** [223 done /204 queued / 16 running / 222 errors / 19% coverage ] ****** [224 done /205 queued / 16 running / 223 errors / 19% coverage ] ****** [224 done /205 queued / 16 running / 223 errors / 19% coverage ] ****** [225 done /205 queued / 16 running / 224 errors / 19% coverage ] ****** [225 done /205 queued / 16 running / 224 errors / 19% coverage ] ****** [226 done /205 queued / 16 running / 225 errors / 19% coverage ] ****** [226 done /205 queued / 16 running / 225 errors / 19% coverage ] ****** [227 done /206 queued / 16 running / 226 errors / 19% coverage ] ****** [227 done /206 queued / 16 running / 226 errors / 19% coverage ] ****** [228 done /207 queued / 16 running / 227 errors / 19% coverage ] ****** [228 done /207 queued / 16 running / 227 errors / 19% coverage ] ****** [229 done /207 queued / 16 running / 228 errors / 19% coverage ] ****** [229 done /207 queued / 16 running / 228 errors / 19% coverage ] ****** [230 done /207 queued / 16 running / 229 errors / 19% coverage ] ****** [230 done /207 queued / 16 running / 229 errors / 19% coverage ] ****** [231 done /207 queued / 16 running / 230 errors / 19% coverage ] ****** [231 done /207 queued / 16 running / 230 errors / 19% coverage ] ****** [232 done /207 queued / 16 running / 231 errors / 19% coverage ] ****** [232 done /207 queued / 16 running / 231 errors / 19% coverage ] ****** [233 done /209 queued / 16 running / 232 errors / 19% coverage ] ****** [233 done /209 queued / 16 running / 232 errors / 19% coverage ] ****** [234 done /210 queued / 16 running / 233 errors / 19% coverage ] ****** [234 done /210 queued / 16 running / 233 errors / 19% coverage ] ****** [235 done /211 queued / 16 running / 234 errors / 19% coverage ] ****** [235 done /211 queued / 16 running / 234 errors / 19% coverage ] ****** [236 done /212 queued / 16 running / 235 errors / 19% coverage ] ****** [236 done /212 queued / 16 running / 235 errors / 19% coverage ] ****** [237 done /212 queued / 16 running / 236 errors / 19% coverage ] ****** [237 done /212 queued / 16 running / 236 errors / 19% coverage ] ****** [238 done /214 queued / 16 running / 237 errors / 19% coverage ] ****** [238 done /214 queued / 16 running / 237 errors / 19% coverage ] ****** [239 done /215 queued / 16 running / 238 errors / 19% coverage ] ****** [239 done /215 queued / 16 running / 238 errors / 19% coverage ] ****** [240 done /216 queued / 16 running / 239 errors / 19% coverage ] ****** [240 done /216 queued / 16 running / 239 errors / 19% coverage ] ****** [241 done /217 queued / 16 running / 240 errors / 19% coverage ] ****** [241 done /217 queued / 16 running / 240 errors / 19% coverage ] ****** [242 done /220 queued / 16 running / 241 errors / 19% coverage ] ****** [242 done /220 queued / 16 running / 241 errors / 19% coverage ] ****** [243 done /221 queued / 16 running / 242 errors / 19% coverage ] ****** [243 done /221 queued / 16 running / 242 errors / 19% coverage ] ****** [244 done /222 queued / 16 running / 243 errors / 19% coverage ] ****** [244 done /222 queued / 16 running / 243 errors / 19% coverage ] ****** [245 done /223 queued / 16 running / 244 errors / 19% coverage ] ****** [245 done /223 queued / 16 running / 244 errors / 19% coverage ] ****** [246 done /224 queued / 16 running / 245 errors / 19% coverage ] ****** [246 done /224 queued / 16 running / 245 errors / 19% coverage ] ****** [247 done /224 queued / 16 running / 246 errors / 19% coverage ] ****** [247 done /224 queued / 16 running / 246 errors / 19% coverage ] ****** [248 done /226 queued / 16 running / 247 errors / 19% coverage ] ****** [248 done /226 queued / 16 running / 247 errors / 19% coverage ] ****** [249 done /227 queued / 16 running / 248 errors / 19% coverage ] ****** [249 done /227 queued / 16 running / 248 errors / 19% coverage ] ****** [250 done /228 queued / 16 running / 249 errors / 19% coverage ] ****** [250 done /228 queued / 16 running / 249 errors / 19% coverage ] ****** [251 done /229 queued / 16 running / 250 errors / 19% coverage ] ****** [251 done /229 queued / 16 running / 250 errors / 19% coverage ] ****** [252 done /230 queued / 16 running / 251 errors / 19% coverage ] ****** [252 done /230 queued / 16 running / 251 errors / 19% coverage ] ****** [253 done /231 queued / 16 running / 252 errors / 19% coverage ] ****** [253 done /231 queued / 16 running / 252 errors / 19% coverage ] ****** [254 done /234 queued / 16 running / 253 errors / 19% coverage ] ****** [254 done /234 queued / 16 running / 253 errors / 19% coverage ] ****** [255 done /235 queued / 16 running / 254 errors / 19% coverage ] ****** [255 done /235 queued / 16 running / 254 errors / 19% coverage ] ****** [256 done /235 queued / 16 running / 255 errors / 19% coverage ] ****** [256 done /235 queued / 16 running / 255 errors / 19% coverage ] ****** [257 done /236 queued / 16 running / 256 errors / 19% coverage ] ****** [257 done /236 queued / 16 running / 256 errors / 19% coverage ] ****** [258 done /237 queued / 16 running / 257 errors / 19% coverage ] ****** [258 done /237 queued / 16 running / 257 errors / 19% coverage ] ****** [259 done /238 queued / 16 running / 258 errors / 19% coverage ] ****** [259 done /238 queued / 16 running / 258 errors / 19% coverage ] ****** [260 done /242 queued / 16 running / 259 errors / 19% coverage ] ****** [260 done /242 queued / 16 running / 259 errors / 19% coverage ] ****** [261 done /244 queued / 16 running / 260 errors / 19% coverage ] ****** [261 done /244 queued / 16 running / 260 errors / 19% coverage ] ****** [262 done /247 queued / 16 running / 261 errors / 19% coverage ] ****** [262 done /247 queued / 16 running / 261 errors / 19% coverage ] ****** [263 done /250 queued / 16 running / 262 errors / 19% coverage ] ****** [263 done /250 queued / 16 running / 262 errors / 19% coverage ] ****** [264 done /251 queued / 16 running / 263 errors / 19% coverage ] ****** [264 done /251 queued / 16 running / 263 errors / 19% coverage ] ****** [265 done /252 queued / 16 running / 264 errors / 19% coverage ] ****** [265 done /252 queued / 16 running / 264 errors / 19% coverage ] ****** [266 done /252 queued / 16 running / 265 errors / 19% coverage ] ****** [266 done /252 queued / 16 running / 265 errors / 19% coverage ] ****** [267 done /253 queued / 16 running / 266 errors / 19% coverage ] ****** [267 done /253 queued / 16 running / 266 errors / 19% coverage ] ****** [268 done /257 queued / 16 running / 267 errors / 19% coverage ] ****** [268 done /257 queued / 16 running / 267 errors / 19% coverage ] ****** [269 done /258 queued / 16 running / 268 errors / 19% coverage ] ****** [269 done /258 queued / 16 running / 268 errors / 19% coverage ] ****** [270 done /259 queued / 16 running / 269 errors / 19% coverage ] ****** [270 done /259 queued / 16 running / 269 errors / 19% coverage ] ****** [271 done /260 queued / 16 running / 270 errors / 19% coverage ] ****** [271 done /260 queued / 16 running / 270 errors / 19% coverage ] ****** [272 done /262 queued / 16 running / 271 errors / 19% coverage ] ****** [272 done /262 queued / 16 running / 271 errors / 19% coverage ] ****** [273 done /262 queued / 16 running / 272 errors / 19% coverage ] ****** [273 done /262 queued / 16 running / 272 errors / 19% coverage ] ****** [274 done /263 queued / 16 running / 273 errors / 19% coverage ] ****** [274 done /263 queued / 16 running / 273 errors / 19% coverage ] ****** [275 done /263 queued / 16 running / 274 errors / 19% coverage ] ****** [275 done /263 queued / 16 running / 274 errors / 19% coverage ] ****** [276 done /265 queued / 16 running / 275 errors / 19% coverage ] ****** [276 done /265 queued / 16 running / 275 errors / 19% coverage ] ****** [277 done /266 queued / 16 running / 276 errors / 19% coverage ] ****** [277 done /266 queued / 16 running / 276 errors / 19% coverage ] ****** [278 done /267 queued / 16 running / 277 errors / 19% coverage ] ****** [278 done /267 queued / 16 running / 277 errors / 19% coverage ] ****** [279 done /267 queued / 16 running / 278 errors / 19% coverage ] ****** [279 done /267 queued / 16 running / 278 errors / 19% coverage ] ****** [280 done /267 queued / 16 running / 279 errors / 19% coverage ] ****** [280 done /267 queued / 16 running / 279 errors / 19% coverage ] ****** [281 done /268 queued / 16 running / 280 errors / 19% coverage ] ****** [281 done /268 queued / 16 running / 280 errors / 19% coverage ] ****** [282 done /268 queued / 16 running / 281 errors / 19% coverage ] ****** [282 done /268 queued / 16 running / 281 errors / 19% coverage ] ****** [283 done /270 queued / 16 running / 282 errors / 19% coverage ] ****** [283 done /270 queued / 16 running / 282 errors / 19% coverage ] ****** [284 done /271 queued / 16 running / 283 errors / 19% coverage ] ****** [284 done /271 queued / 16 running / 283 errors / 19% coverage ] ****** [285 done /271 queued / 16 running / 284 errors / 19% coverage ] ****** [285 done /271 queued / 16 running / 284 errors / 19% coverage ] ****** [286 done /272 queued / 16 running / 285 errors / 19% coverage ] ****** [286 done /272 queued / 16 running / 285 errors / 19% coverage ] ****** [287 done /272 queued / 16 running / 286 errors / 19% coverage ] ****** [287 done /272 queued / 16 running / 286 errors / 19% coverage ] ****** [288 done /272 queued / 16 running / 287 errors / 19% coverage ] ****** [288 done /272 queued / 16 running / 287 errors / 19% coverage ] ****** [289 done /273 queued / 16 running / 288 errors / 19% coverage ] ****** [289 done /273 queued / 16 running / 288 errors / 19% coverage ] ****** [290 done /273 queued / 16 running / 289 errors / 19% coverage ] ****** [290 done /273 queued / 16 running / 289 errors / 19% coverage ] ****** [291 done /273 queued / 16 running / 290 errors / 19% coverage ] ****** [291 done /273 queued / 16 running / 290 errors / 19% coverage ] ****** [292 done /275 queued / 16 running / 291 errors / 19% coverage ] ****** [292 done /275 queued / 16 running / 291 errors / 19% coverage ] ****** [293 done /276 queued / 16 running / 292 errors / 19% coverage ] ****** [293 done /276 queued / 16 running / 292 errors / 19% coverage ] ****** [294 done /277 queued / 16 running / 293 errors / 19% coverage ] ****** [294 done /277 queued / 16 running / 293 errors / 19% coverage ] ****** [295 done /280 queued / 16 running / 294 errors / 19% coverage ] ****** [295 done /280 queued / 16 running / 294 errors / 19% coverage ] ****** [296 done /281 queued / 16 running / 295 errors / 19% coverage ] ****** [296 done /281 queued / 16 running / 295 errors / 19% coverage ] ****** [297 done /283 queued / 16 running / 296 errors / 19% coverage ] ****** [297 done /283 queued / 16 running / 296 errors / 19% coverage ] ****** [298 done /284 queued / 16 running / 297 errors / 19% coverage ] ****** [298 done /284 queued / 16 running / 297 errors / 19% coverage ] ****** [299 done /285 queued / 16 running / 298 errors / 19% coverage ] ****** [299 done /285 queued / 16 running / 298 errors / 19% coverage ] ****** [300 done /288 queued / 16 running / 299 errors / 19% coverage ] ****** [300 done /288 queued / 16 running / 299 errors / 19% coverage ] ****** [301 done /289 queued / 16 running / 300 errors / 19% coverage ] ****** [301 done /289 queued / 16 running / 300 errors / 19% coverage ] ****** [302 done /289 queued / 16 running / 301 errors / 19% coverage ] ****** [302 done /289 queued / 16 running / 301 errors / 19% coverage ] ****** [303 done /291 queued / 16 running / 302 errors / 19% coverage ] ****** [303 done /291 queued / 16 running / 302 errors / 19% coverage ] ****** [304 done /292 queued / 16 running / 303 errors / 19% coverage ] ****** [304 done /292 queued / 16 running / 303 errors / 19% coverage ] ****** [305 done /293 queued / 16 running / 304 errors / 19% coverage ] ****** [305 done /293 queued / 16 running / 304 errors / 19% coverage ] ****** [306 done /294 queued / 16 running / 305 errors / 19% coverage ] ****** [306 done /294 queued / 16 running / 305 errors / 19% coverage ] ****** [307 done /295 queued / 16 running / 306 errors / 19% coverage ] ****** [307 done /295 queued / 16 running / 306 errors / 19% coverage ] ****** [308 done /296 queued / 16 running / 307 errors / 19% coverage ] ****** [308 done /296 queued / 16 running / 307 errors / 19% coverage ] ****** [309 done /300 queued / 16 running / 308 errors / 19% coverage ] ****** [309 done /300 queued / 16 running / 308 errors / 19% coverage ] ****** [310 done /301 queued / 16 running / 309 errors / 19% coverage ] ****** [310 done /301 queued / 16 running / 309 errors / 19% coverage ] ****** [311 done /301 queued / 16 running / 310 errors / 19% coverage ] ****** [311 done /301 queued / 16 running / 310 errors / 19% coverage ] ****** [312 done /303 queued / 16 running / 311 errors / 19% coverage ] ****** [312 done /303 queued / 16 running / 311 errors / 19% coverage ] ****** [313 done /303 queued / 16 running / 312 errors / 19% coverage ] ****** [313 done /303 queued / 16 running / 312 errors / 19% coverage ] ****** [314 done /304 queued / 16 running / 313 errors / 19% coverage ] ****** [314 done /304 queued / 16 running / 313 errors / 19% coverage ] ****** [315 done /308 queued / 16 running / 314 errors / 19% coverage ] ****** [315 done /308 queued / 16 running / 314 errors / 19% coverage ] ****** [316 done /308 queued / 16 running / 315 errors / 19% coverage ] ****** [316 done /308 queued / 16 running / 315 errors / 19% coverage ] ****** [317 done /309 queued / 16 running / 316 errors / 19% coverage ] ****** [317 done /309 queued / 16 running / 316 errors / 19% coverage ] ****** [318 done /310 queued / 16 running / 317 errors / 19% coverage ] ****** [318 done /310 queued / 16 running / 317 errors / 19% coverage ] ****** [319 done /311 queued / 16 running / 318 errors / 19% coverage ] ****** [319 done /311 queued / 16 running / 318 errors / 19% coverage ] ****** [320 done /315 queued / 16 running / 319 errors / 19% coverage ] ****** [320 done /315 queued / 16 running / 319 errors / 19% coverage ] ****** [321 done /316 queued / 16 running / 320 errors / 19% coverage ] ****** [321 done /316 queued / 16 running / 320 errors / 19% coverage ] ****** [322 done /318 queued / 16 running / 321 errors / 19% coverage ] ****** [322 done /318 queued / 16 running / 321 errors / 19% coverage ] ****** [323 done /318 queued / 16 running / 322 errors / 19% coverage ] ****** [323 done /318 queued / 16 running / 322 errors / 19% coverage ] ****** [324 done /321 queued / 16 running / 323 errors / 19% coverage ] ****** [324 done /321 queued / 16 running / 323 errors / 19% coverage ] ****** [325 done /321 queued / 16 running / 324 errors / 19% coverage ] ****** [325 done /321 queued / 16 running / 324 errors / 19% coverage ] ****** [326 done /324 queued / 16 running / 325 errors / 19% coverage ] ****** [326 done /324 queued / 16 running / 325 errors / 19% coverage ] ****** [327 done /324 queued / 16 running / 326 errors / 19% coverage ] ****** [327 done /324 queued / 16 running / 326 errors / 19% coverage ] ****** [328 done /325 queued / 16 running / 327 errors / 19% coverage ] ****** [328 done /325 queued / 16 running / 327 errors / 19% coverage ] ****** [329 done /327 queued / 16 running / 328 errors / 19% coverage ] ****** [329 done /327 queued / 16 running / 328 errors / 19% coverage ] ****** [330 done /327 queued / 16 running / 329 errors / 19% coverage ] ****** [330 done /327 queued / 16 running / 329 errors / 19% coverage ] ****** [331 done /327 queued / 16 running / 330 errors / 19% coverage ] ****** [331 done /327 queued / 16 running / 330 errors / 19% coverage ] ****** [332 done /327 queued / 16 running / 331 errors / 19% coverage ] ****** [332 done /327 queued / 16 running / 331 errors / 19% coverage ] ****** [333 done /328 queued / 16 running / 332 errors / 19% coverage ] ****** [333 done /328 queued / 16 running / 332 errors / 19% coverage ] ****** [334 done /328 queued / 16 running / 333 errors / 19% coverage ] ****** [334 done /328 queued / 16 running / 333 errors / 19% coverage ] ****** [335 done /328 queued / 16 running / 334 errors / 19% coverage ] ****** [335 done /328 queued / 16 running / 334 errors / 19% coverage ] ****** [336 done /329 queued / 16 running / 335 errors / 19% coverage ] ****** [336 done /329 queued / 16 running / 335 errors / 19% coverage ] ****** [337 done /330 queued / 16 running / 336 errors / 19% coverage ] ****** [337 done /330 queued / 16 running / 336 errors / 19% coverage ] ****** [338 done /330 queued / 16 running / 337 errors / 19% coverage ] ****** [338 done /330 queued / 16 running / 337 errors / 19% coverage ] ****** [339 done /331 queued / 16 running / 338 errors / 19% coverage ] ****** [339 done /331 queued / 16 running / 338 errors / 19% coverage ] ****** [340 done /331 queued / 16 running / 339 errors / 19% coverage ] ****** [340 done /331 queued / 16 running / 339 errors / 19% coverage ] ****** [341 done /331 queued / 16 running / 340 errors / 19% coverage ] ****** [341 done /331 queued / 16 running / 340 errors / 19% coverage ] ****** [342 done /331 queued / 16 running / 341 errors / 19% coverage ] ****** [342 done /331 queued / 16 running / 341 errors / 19% coverage ] ****** [343 done /334 queued / 16 running / 342 errors / 19% coverage ] ****** [343 done /334 queued / 16 running / 342 errors / 19% coverage ] ****** [344 done /334 queued / 16 running / 343 errors / 19% coverage ] ****** [344 done /334 queued / 16 running / 343 errors / 19% coverage ] ****** [345 done /334 queued / 16 running / 344 errors / 19% coverage ] ****** [345 done /334 queued / 16 running / 344 errors / 19% coverage ] ****** [346 done /334 queued / 16 running / 345 errors / 19% coverage ] ****** [346 done /334 queued / 16 running / 345 errors / 19% coverage ] ****** [347 done /336 queued / 16 running / 346 errors / 19% coverage ] ****** [347 done /336 queued / 16 running / 346 errors / 19% coverage ] ****** [348 done /337 queued / 16 running / 347 errors / 19% coverage ] ****** [348 done /337 queued / 16 running / 347 errors / 19% coverage ] ****** [349 done /338 queued / 16 running / 348 errors / 19% coverage ] ****** [349 done /338 queued / 16 running / 348 errors / 19% coverage ] ****** [350 done /338 queued / 16 running / 349 errors / 19% coverage ] ****** [350 done /338 queued / 16 running / 349 errors / 19% coverage ] ****** [351 done /339 queued / 16 running / 350 errors / 19% coverage ] ****** [351 done /339 queued / 16 running / 350 errors / 19% coverage ] ****** [352 done /340 queued / 16 running / 351 errors / 19% coverage ] ****** [352 done /340 queued / 16 running / 351 errors / 19% coverage ] ****** [353 done /341 queued / 16 running / 352 errors / 19% coverage ] ****** [353 done /341 queued / 16 running / 352 errors / 19% coverage ] ****** [354 done /345 queued / 16 running / 353 errors / 19% coverage ] ****** [354 done /345 queued / 16 running / 353 errors / 19% coverage ] ****** [355 done /346 queued / 16 running / 354 errors / 19% coverage ] ****** [355 done /346 queued / 16 running / 354 errors / 19% coverage ] ****** [356 done /347 queued / 16 running / 355 errors / 19% coverage ] ****** [356 done /347 queued / 16 running / 355 errors / 19% coverage ] ****** [357 done /348 queued / 16 running / 356 errors / 19% coverage ] ****** [357 done /348 queued / 16 running / 356 errors / 19% coverage ] ****** [358 done /348 queued / 16 running / 357 errors / 19% coverage ] ****** [358 done /348 queued / 16 running / 357 errors / 19% coverage ] ****** [359 done /349 queued / 16 running / 358 errors / 19% coverage ] ****** [359 done /349 queued / 16 running / 358 errors / 19% coverage ] ****** [360 done /351 queued / 16 running / 359 errors / 19% coverage ] ****** [360 done /351 queued / 16 running / 359 errors / 19% coverage ] ****** [361 done /352 queued / 16 running / 360 errors / 19% coverage ] ****** [361 done /352 queued / 16 running / 360 errors / 19% coverage ] ****** [362 done /352 queued / 16 running / 361 errors / 19% coverage ] ****** [362 done /352 queued / 16 running / 361 errors / 19% coverage ] ****** [363 done /353 queued / 16 running / 362 errors / 19% coverage ] ****** [363 done /353 queued / 16 running / 362 errors / 19% coverage ] ****** [364 done /354 queued / 16 running / 363 errors / 19% coverage ] ****** [364 done /354 queued / 16 running / 363 errors / 19% coverage ] ****** [365 done /356 queued / 16 running / 364 errors / 19% coverage ] ****** [365 done /356 queued / 16 running / 364 errors / 19% coverage ] ****** [366 done /360 queued / 16 running / 365 errors / 19% coverage ] ****** [366 done /360 queued / 16 running / 365 errors / 19% coverage ] ****** [367 done /362 queued / 16 running / 366 errors / 19% coverage ] ****** [367 done /362 queued / 16 running / 366 errors / 19% coverage ] ****** [368 done /362 queued / 16 running / 367 errors / 19% coverage ] ****** [368 done /362 queued / 16 running / 367 errors / 19% coverage ] ****** [369 done /364 queued / 16 running / 368 errors / 19% coverage ] ****** [369 done /364 queued / 16 running / 368 errors / 19% coverage ] ****** [370 done /364 queued / 16 running / 369 errors / 19% coverage ] ****** [370 done /364 queued / 16 running / 369 errors / 19% coverage ] ****** [371 done /365 queued / 16 running / 370 errors / 19% coverage ] ****** [371 done /365 queued / 16 running / 370 errors / 19% coverage ] ****** [372 done /365 queued / 16 running / 371 errors / 19% coverage ] ****** [372 done /365 queued / 16 running / 371 errors / 19% coverage ] ****** [373 done /365 queued / 16 running / 372 errors / 19% coverage ] ****** [373 done /365 queued / 16 running / 372 errors / 19% coverage ] ****** [374 done /366 queued / 16 running / 373 errors / 19% coverage ] ****** [374 done /366 queued / 16 running / 373 errors / 19% coverage ] ****** [375 done /370 queued / 16 running / 374 errors / 19% coverage ] ****** [375 done /370 queued / 16 running / 374 errors / 19% coverage ] ****** [376 done /372 queued / 16 running / 375 errors / 19% coverage ] ****** [376 done /372 queued / 16 running / 375 errors / 19% coverage ] ****** [377 done /375 queued / 16 running / 376 errors / 19% coverage ] ****** [377 done /375 queued / 16 running / 376 errors / 19% coverage ] ****** [378 done /379 queued / 16 running / 377 errors / 19% coverage ] ****** [378 done /379 queued / 16 running / 377 errors / 19% coverage ] ****** [379 done /380 queued / 16 running / 378 errors / 19% coverage ] ****** [379 done /380 queued / 16 running / 378 errors / 19% coverage ] ****** [380 done /382 queued / 16 running / 379 errors / 19% coverage ] ****** [380 done /382 queued / 16 running / 379 errors / 19% coverage ] ****** [381 done /383 queued / 16 running / 380 errors / 19% coverage ] ****** [381 done /383 queued / 16 running / 380 errors / 19% coverage ] ****** [382 done /383 queued / 16 running / 381 errors / 19% coverage ] ****** [382 done /383 queued / 16 running / 381 errors / 19% coverage ] ****** [383 done /384 queued / 16 running / 382 errors / 19% coverage ] ****** [383 done /384 queued / 16 running / 382 errors / 19% coverage ] ****** [384 done /386 queued / 16 running / 383 errors / 19% coverage ] ****** [384 done /386 queued / 16 running / 383 errors / 19% coverage ] ****** [385 done /388 queued / 16 running / 384 errors / 19% coverage ] ****** [385 done /388 queued / 16 running / 384 errors / 19% coverage ] ****** [386 done /388 queued / 16 running / 385 errors / 19% coverage ] ****** [386 done /388 queued / 16 running / 385 errors / 19% coverage ] ****** [387 done /388 queued / 16 running / 386 errors / 19% coverage ] ****** [387 done /388 queued / 16 running / 386 errors / 19% coverage ] ****** [388 done /389 queued / 16 running / 387 errors / 19% coverage ] ****** [388 done /389 queued / 16 running / 387 errors / 19% coverage ] ****** [389 done /389 queued / 16 running / 388 errors / 19% coverage ] ****** [389 done /389 queued / 16 running / 388 errors / 19% coverage ] ****** [390 done /389 queued / 16 running / 389 errors / 19% coverage ] ****** [390 done /389 queued / 16 running / 389 errors / 19% coverage ] ****** [391 done /390 queued / 16 running / 390 errors / 19% coverage ] ****** [391 done /390 queued / 16 running / 390 errors / 19% coverage ] ****** [392 done /391 queued / 16 running / 391 errors / 19% coverage ] ****** [392 done /391 queued / 16 running / 391 errors / 19% coverage ] ****** [393 done /391 queued / 16 running / 392 errors / 19% coverage ] ****** [393 done /391 queued / 16 running / 392 errors / 19% coverage ] ****** [394 done /394 queued / 16 running / 393 errors / 19% coverage ] ****** [394 done /394 queued / 16 running / 393 errors / 19% coverage ] ****** [395 done /394 queued / 16 running / 394 errors / 19% coverage ] ****** [395 done /394 queued / 16 running / 394 errors / 19% coverage ] ****** [396 done /394 queued / 16 running / 395 errors / 19% coverage ] ****** [396 done /394 queued / 16 running / 395 errors / 19% coverage ] ****** [397 done /394 queued / 16 running / 396 errors / 19% coverage ] ****** [397 done /394 queued / 16 running / 396 errors / 19% coverage ] ****** [398 done /394 queued / 16 running / 397 errors / 19% coverage ] ****** [398 done /394 queued / 16 running / 397 errors / 19% coverage ] ****** [399 done /394 queued / 16 running / 398 errors / 19% coverage ] ****** [399 done /394 queued / 16 running / 398 errors / 19% coverage ] ****** [400 done /394 queued / 16 running / 399 errors / 19% coverage ] ****** [400 done /394 queued / 16 running / 399 errors / 19% coverage ] ****** [401 done /395 queued / 16 running / 400 errors / 19% coverage ] ****** [401 done /395 queued / 16 running / 400 errors / 19% coverage ] ****** [402 done /397 queued / 16 running / 401 errors / 19% coverage ] ****** [402 done /397 queued / 16 running / 401 errors / 19% coverage ] ****** [403 done /398 queued / 16 running / 402 errors / 19% coverage ] ****** [403 done /398 queued / 16 running / 402 errors / 19% coverage ] ****** [404 done /399 queued / 16 running / 403 errors / 19% coverage ] ****** [404 done /399 queued / 16 running / 403 errors / 19% coverage ] ****** [405 done /399 queued / 16 running / 404 errors / 19% coverage ] ****** [405 done /399 queued / 16 running / 404 errors / 19% coverage ] ****** [406 done /401 queued / 16 running / 405 errors / 19% coverage ] ****** [406 done /401 queued / 16 running / 405 errors / 19% coverage ] ****** [407 done /402 queued / 16 running / 406 errors / 19% coverage ] ****** [407 done /402 queued / 16 running / 406 errors / 19% coverage ] ****** [408 done /402 queued / 16 running / 407 errors / 19% coverage ] ****** [408 done /402 queued / 16 running / 407 errors / 19% coverage ] ****** [409 done /403 queued / 16 running / 408 errors / 19% coverage ] ****** [409 done /403 queued / 16 running / 408 errors / 19% coverage ] ****** [410 done /404 queued / 16 running / 409 errors / 19% coverage ] ****** [410 done /404 queued / 16 running / 409 errors / 19% coverage ] ****** [411 done /406 queued / 16 running / 410 errors / 19% coverage ] ****** [411 done /406 queued / 16 running / 410 errors / 19% coverage ] ****** [412 done /408 queued / 16 running / 411 errors / 19% coverage ] ****** [412 done /408 queued / 16 running / 411 errors / 19% coverage ] ****** [413 done /409 queued / 16 running / 412 errors / 19% coverage ] ****** [413 done /409 queued / 16 running / 412 errors / 19% coverage ] ****** [414 done /410 queued / 16 running / 413 errors / 19% coverage ] ****** [414 done /410 queued / 16 running / 413 errors / 19% coverage ] ****** [415 done /410 queued / 16 running / 414 errors / 19% coverage ] ****** [415 done /410 queued / 16 running / 414 errors / 19% coverage ] ****** [416 done /415 queued / 16 running / 415 errors / 19% coverage ] ****** [416 done /415 queued / 16 running / 415 errors / 19% coverage ] ****** [417 done /416 queued / 16 running / 416 errors / 19% coverage ] ****** [417 done /416 queued / 16 running / 416 errors / 19% coverage ] ****** [418 done /418 queued / 16 running / 417 errors / 19% coverage ] ****** [418 done /418 queued / 16 running / 417 errors / 19% coverage ] ****** [419 done /418 queued / 16 running / 418 errors / 19% coverage ] ****** [419 done /418 queued / 16 running / 418 errors / 19% coverage ] ****** [420 done /419 queued / 16 running / 419 errors / 19% coverage ] ****** [420 done /419 queued / 16 running / 419 errors / 19% coverage ] ****** [421 done /420 queued / 16 running / 420 errors / 19% coverage ] ****** [421 done /420 queued / 16 running / 420 errors / 19% coverage ] ****** [422 done /421 queued / 16 running / 421 errors / 19% coverage ] ****** [422 done /421 queued / 16 running / 421 errors / 19% coverage ] ****** [423 done /425 queued / 16 running / 422 errors / 19% coverage ] ****** [423 done /425 queued / 16 running / 422 errors / 19% coverage ] ****** [424 done /426 queued / 16 running / 423 errors / 19% coverage ] ****** [424 done /426 queued / 16 running / 423 errors / 19% coverage ] ****** [425 done /427 queued / 16 running / 424 errors / 19% coverage ] ****** [425 done /427 queued / 16 running / 424 errors / 19% coverage ] ****** [426 done /428 queued / 16 running / 425 errors / 19% coverage ] ****** [426 done /428 queued / 16 running / 425 errors / 19% coverage ] ****** [427 done /429 queued / 16 running / 426 errors / 19% coverage ] ****** [427 done /429 queued / 16 running / 426 errors / 19% coverage ] ****** [428 done /432 queued / 16 running / 427 errors / 19% coverage ] ****** [428 done /432 queued / 16 running / 427 errors / 19% coverage ] ****** [429 done /433 queued / 16 running / 428 errors / 19% coverage ] ****** [429 done /433 queued / 16 running / 428 errors / 19% coverage ] ****** [430 done /434 queued / 16 running / 429 errors / 19% coverage ] ****** [430 done /434 queued / 16 running / 429 errors / 19% coverage ] ****** [431 done /435 queued / 16 running / 430 errors / 19% coverage ] ****** [431 done /435 queued / 16 running / 430 errors / 19% coverage ] ****** [432 done /437 queued / 16 running / 431 errors / 19% coverage ] ****** [432 done /437 queued / 16 running / 431 errors / 19% coverage ] ****** [433 done /438 queued / 16 running / 432 errors / 19% coverage ] ****** [433 done /438 queued / 16 running / 432 errors / 19% coverage ] ****** [434 done /439 queued / 16 running / 433 errors / 19% coverage ] ****** [434 done /439 queued / 16 running / 433 errors / 19% coverage ] ****** [435 done /443 queued / 16 running / 434 errors / 19% coverage ] ****** [435 done /443 queued / 16 running / 434 errors / 19% coverage ] ****** [436 done /445 queued / 16 running / 435 errors / 19% coverage ] ****** [436 done /445 queued / 16 running / 435 errors / 19% coverage ] ****** [437 done /446 queued / 16 running / 436 errors / 19% coverage ] ****** [437 done /446 queued / 16 running / 436 errors / 19% coverage ] ****** [438 done /447 queued / 16 running / 437 errors / 19% coverage ] ****** [438 done /447 queued / 16 running / 437 errors / 19% coverage ] ****** [439 done /448 queued / 16 running / 438 errors / 19% coverage ] ****** [439 done /448 queued / 16 running / 438 errors / 19% coverage ] ****** [440 done /449 queued / 16 running / 439 errors / 19% coverage ] ****** [440 done /449 queued / 16 running / 439 errors / 19% coverage ] ****** [441 done /450 queued / 16 running / 440 errors / 19% coverage ] ****** [441 done /450 queued / 16 running / 440 errors / 19% coverage ] ****** [442 done /452 queued / 16 running / 441 errors / 19% coverage ] ****** [442 done /452 queued / 16 running / 441 errors / 19% coverage ] ****** [443 done /453 queued / 16 running / 442 errors / 19% coverage ] ****** [443 done /453 queued / 16 running / 442 errors / 19% coverage ] ****** [444 done /456 queued / 16 running / 443 errors / 19% coverage ] ****** [444 done /456 queued / 16 running / 443 errors / 19% coverage ] ****** [445 done /459 queued / 16 running / 444 errors / 19% coverage ] ****** [445 done /459 queued / 16 running / 444 errors / 19% coverage ] ****** [446 done /460 queued / 16 running / 445 errors / 19% coverage ] ****** [446 done /460 queued / 16 running / 445 errors / 19% coverage ] ****** [447 done /461 queued / 16 running / 446 errors / 19% coverage ] ****** [447 done /461 queued / 16 running / 446 errors / 19% coverage ] ****** [448 done /463 queued / 16 running / 447 errors / 19% coverage ] ****** [448 done /463 queued / 16 running / 447 errors / 19% coverage ] ****** [449 done /465 queued / 16 running / 448 errors / 19% coverage ] ****** [449 done /465 queued / 16 running / 448 errors / 19% coverage ] ****** [450 done /466 queued / 16 running / 449 errors / 19% coverage ] ****** [450 done /466 queued / 16 running / 449 errors / 19% coverage ] ****** [451 done /467 queued / 16 running / 450 errors / 19% coverage ] ****** [451 done /467 queued / 16 running / 450 errors / 19% coverage ] ****** [452 done /468 queued / 16 running / 451 errors / 19% coverage ] ****** [452 done /468 queued / 16 running / 451 errors / 19% coverage ] ****** [453 done /469 queued / 16 running / 452 errors / 19% coverage ] ****** [453 done /469 queued / 16 running / 452 errors / 19% coverage ] ****** [454 done /470 queued / 16 running / 453 errors / 19% coverage ] ****** [454 done /470 queued / 16 running / 453 errors / 19% coverage ] ****** [455 done /471 queued / 16 running / 454 errors / 19% coverage ] ****** [455 done /471 queued / 16 running / 454 errors / 19% coverage ] ****** [456 done /471 queued / 16 running / 455 errors / 19% coverage ] ****** [456 done /471 queued / 16 running / 455 errors / 19% coverage ] ****** [457 done /474 queued / 16 running / 456 errors / 19% coverage ] ****** [457 done /474 queued / 16 running / 456 errors / 19% coverage ] ****** [458 done /478 queued / 16 running / 457 errors / 19% coverage ] ****** [458 done /478 queued / 16 running / 457 errors / 19% coverage ] ****** [459 done /480 queued / 16 running / 458 errors / 19% coverage ] ****** [459 done /480 queued / 16 running / 458 errors / 19% coverage ] ****** [460 done /482 queued / 16 running / 459 errors / 19% coverage ] ****** [460 done /482 queued / 16 running / 459 errors / 19% coverage ] ****** [461 done /483 queued / 16 running / 460 errors / 19% coverage ] ****** [461 done /483 queued / 16 running / 460 errors / 19% coverage ] ****** [462 done /485 queued / 16 running / 461 errors / 19% coverage ] ****** [462 done /485 queued / 16 running / 461 errors / 19% coverage ] ****** [463 done /486 queued / 16 running / 462 errors / 19% coverage ] ****** [463 done /486 queued / 16 running / 462 errors / 19% coverage ] ****** [464 done /487 queued / 16 running / 463 errors / 19% coverage ] ****** [464 done /487 queued / 16 running / 463 errors / 19% coverage ] ****** [465 done /488 queued / 16 running / 464 errors / 19% coverage ] ****** [465 done /488 queued / 16 running / 464 errors / 19% coverage ] ****** [466 done /488 queued / 16 running / 465 errors / 19% coverage ] ****** [466 done /488 queued / 16 running / 465 errors / 19% coverage ] ****** [467 done /488 queued / 16 running / 466 errors / 19% coverage ] ****** [467 done /488 queued / 16 running / 466 errors / 19% coverage ] ****** [468 done /489 queued / 16 running / 467 errors / 19% coverage ] ****** [468 done /489 queued / 16 running / 467 errors / 19% coverage ] ****** [469 done /491 queued / 16 running / 468 errors / 19% coverage ] ****** [469 done /491 queued / 16 running / 468 errors / 19% coverage ] ****** [470 done /495 queued / 16 running / 469 errors / 19% coverage ] ****** [470 done /495 queued / 16 running / 469 errors / 19% coverage ] ****** [471 done /496 queued / 16 running / 470 errors / 19% coverage ] ****** [471 done /496 queued / 16 running / 470 errors / 19% coverage ] ****** [472 done /497 queued / 16 running / 471 errors / 19% coverage ] ****** [472 done /497 queued / 16 running / 471 errors / 19% coverage ] ****** [473 done /498 queued / 16 running / 472 errors / 19% coverage ] ****** [473 done /498 queued / 16 running / 472 errors / 19% coverage ] ****** [474 done /499 queued / 16 running / 473 errors / 19% coverage ] ****** [474 done /499 queued / 16 running / 473 errors / 19% coverage ] ****** [475 done /500 queued / 16 running / 474 errors / 19% coverage ] ****** [475 done /500 queued / 16 running / 474 errors / 19% coverage ] ****** [476 done /502 queued / 16 running / 475 errors / 19% coverage ] ****** [476 done /502 queued / 16 running / 475 errors / 19% coverage ] ****** [477 done /503 queued / 16 running / 476 errors / 19% coverage ] ****** [477 done /503 queued / 16 running / 476 errors / 19% coverage ] ****** [478 done /504 queued / 16 running / 477 errors / 19% coverage ] ****** [478 done /504 queued / 16 running / 477 errors / 19% coverage ] ****** [479 done /504 queued / 16 running / 478 errors / 19% coverage ] ****** [479 done /504 queued / 16 running / 478 errors / 19% coverage ] ****** [480 done /504 queued / 16 running / 479 errors / 19% coverage ] ****** [480 done /504 queued / 16 running / 479 errors / 19% coverage ] ****** [481 done /505 queued / 16 running / 480 errors / 19% coverage ] ****** [481 done /505 queued / 16 running / 480 errors / 19% coverage ] ****** [482 done /506 queued / 16 running / 481 errors / 19% coverage ] ****** [482 done /506 queued / 16 running / 481 errors / 19% coverage ] ****** [483 done /507 queued / 16 running / 482 errors / 19% coverage ] ****** [483 done /507 queued / 16 running / 482 errors / 19% coverage ] ****** [484 done /509 queued / 16 running / 483 errors / 19% coverage ] ****** [484 done /509 queued / 16 running / 483 errors / 19% coverage ] ****** [485 done /510 queued / 16 running / 484 errors / 19% coverage ] ****** [485 done /510 queued / 16 running / 484 errors / 19% coverage ] ****** [486 done /510 queued / 16 running / 485 errors / 19% coverage ] ****** [486 done /510 queued / 16 running / 485 errors / 19% coverage ] ****** [487 done /510 queued / 16 running / 486 errors / 19% coverage ] ****** [487 done /510 queued / 16 running / 486 errors / 19% coverage ] ****** [488 done /511 queued / 16 running / 487 errors / 19% coverage ] ****** [488 done /511 queued / 16 running / 487 errors / 19% coverage ] ****** [489 done /511 queued / 16 running / 488 errors / 19% coverage ] ****** [489 done /511 queued / 16 running / 488 errors / 19% coverage ] ****** [490 done /511 queued / 16 running / 489 errors / 19% coverage ] ****** [490 done /511 queued / 16 running / 489 errors / 19% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","toString","apply","bound ","call","join","RegExp","sort","bound Neo4jMapper"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0,"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0} start 0.0271 took 24.2752s
*-- Errors occured in test {"_bound":0,"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};



///--- Specific Errors

function HttpSignatureError(message, caller) {
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, caller || HttpSignatureError);

  this.message = message;
  this.name = caller.name;
}
util.inherits(HttpSignatureError, Error);

function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);



///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "content-md5"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }

    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    if (!Algorithms[parsed.params.algorithm])
      throw new InvalidParamsError(parsed.params.algorithm +
                                   ' is not supported');

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h !== 'request-line') {
        var value = request.headers[h];
        if (!value)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      } else {
        parsed.signingString +=
          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"_bound":2} start 24.6455 took 3.085s
*-- Test Case {"Switcher":true,"Target_Switch_Base":0,"ExpansionArg_type":0,"_bound":1} start 24.5104 took 17.9123s
*-- Errors occured in test {"Switcher":true,"Target_Switch_Base":0,"ExpansionArg_type":0,"_bound":1}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};



///--- Specific Errors

function HttpSignatureError(message, caller) {
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, caller || HttpSignatureError);

  this.message = message;
  this.name = caller.name;
}
util.inherits(HttpSignatureError, Error);

function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);



///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "content-md5"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }

    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    if (!Algorithms[parsed.params.algorithm])
      throw new InvalidParamsError(parsed.params.algorithm +
                                   ' is not supported');

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h !== 'request-line') {
        var value = request.headers[h];
        if (!value)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      } else {
        parsed.signingString +=
          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switch_Base":0,"ExpansionArg_type":0,"_bound":1}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"_bound":3} start 24.5648 took 23.588s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"_bound":3}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};



///--- Specific Errors

function HttpSignatureError(message, caller) {
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, caller || HttpSignatureError);

  this.message = message;
  this.name = caller.name;
}
util.inherits(HttpSignatureError, Error);

function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);



///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "content-md5"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }

    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    if (!Algorithms[parsed.params.algorithm])
      throw new InvalidParamsError(parsed.params.algorithm +
                                   ' is not supported');

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h !== 'request-line') {
        var value = request.headers[h];
        if (!value)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      } else {
        parsed.signingString +=
          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"_bound":3}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"_bound":2} start 42.5351 took 18.0784s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"_bound":2}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};



///--- Specific Errors

function HttpSignatureError(message, caller) {
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, caller || HttpSignatureError);

  this.message = message;
  this.name = caller.name;
}
util.inherits(HttpSignatureError, Error);

function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);



///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "content-md5"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }

    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    if (!Algorithms[parsed.params.algorithm])
      throw new InvalidParamsError(parsed.params.algorithm +
                                   ' is not supported');

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h !== 'request-line') {
        var value = request.headers[h];
        if (!value)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      } else {
        parsed.signingString +=
          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"_bound":2}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":2,"_bound":4,"ExpansionArg_int":0} start 48.2694 took 16.0897s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":2,"_bound":4,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};



///--- Specific Errors

function HttpSignatureError(message, caller) {
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, caller || HttpSignatureError);

  this.message = message;
  this.name = caller.name;
}
util.inherits(HttpSignatureError, Error);

function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);



///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "content-md5"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }

    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    if (!Algorithms[parsed.params.algorithm])
      throw new InvalidParamsError(parsed.params.algorithm +
                                   ' is not supported');

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h !== 'request-line') {
        var value = request.headers[h];
        if (!value)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      } else {
        parsed.signingString +=
          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":2,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"_bound":3,"ExpansionArg_int":0} start 60.817 took 18.2767s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"_bound":3,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};



///--- Specific Errors

function HttpSignatureError(message, caller) {
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, caller || HttpSignatureError);

  this.message = message;
  this.name = caller.name;
}
util.inherits(HttpSignatureError, Error);

function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);



///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "content-md5"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }

    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    if (!Algorithms[parsed.params.algorithm])
      throw new InvalidParamsError(parsed.params.algorithm +
                                   ' is not supported');

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h !== 'request-line') {
        var value = request.headers[h];
        if (!value)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      } else {
        parsed.signingString +=
          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"_bound":3}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":5,"ExpansionArg_string":"PureString"} start 64.449 took 25.5638s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":5,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};



///--- Specific Errors

function HttpSignatureError(message, caller) {
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, caller || HttpSignatureError);

  this.message = message;
  this.name = caller.name;
}
util.inherits(HttpSignatureError, Error);

function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);



///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "content-md5"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }

    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    if (!Algorithms[parsed.params.algorithm])
      throw new InvalidParamsError(parsed.params.algorithm +
                                   ' is not supported');

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h !== 'request-line') {
        var value = request.headers[h];
        if (!value)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      } else {
        parsed.signingString +=
          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":4,"ExpansionArg_string":"PureString"} start 79.2163 took 17.941s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":4,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};



///--- Specific Errors

function HttpSignatureError(message, caller) {
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, caller || HttpSignatureError);

  this.message = message;
  this.name = caller.name;
}
util.inherits(HttpSignatureError, Error);

function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);



///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "content-md5"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }

    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    if (!Algorithms[parsed.params.algorithm])
      throw new InvalidParamsError(parsed.params.algorithm +
                                   ' is not supported');

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h !== 'request-line') {
        var value = request.headers[h];
        if (!value)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      } else {
        parsed.signingString +=
          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":4}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":6,"ExpansionArg_array_length":0} start 90.213 took 13.9803s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":6,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};



///--- Specific Errors

function HttpSignatureError(message, caller) {
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, caller || HttpSignatureError);

  this.message = message;
  this.name = caller.name;
}
util.inherits(HttpSignatureError, Error);

function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);



///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "content-md5"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }

    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    if (!Algorithms[parsed.params.algorithm])
      throw new InvalidParamsError(parsed.params.algorithm +
                                   ' is not supported');

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h !== 'request-line') {
        var value = request.headers[h];
        if (!value)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      } else {
        parsed.signingString +=
          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":5,"ExpansionArg_array_length":0} start 97.2611 took 15.5782s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":5,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};



///--- Specific Errors

function HttpSignatureError(message, caller) {
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, caller || HttpSignatureError);

  this.message = message;
  this.name = caller.name;
}
util.inherits(HttpSignatureError, Error);

function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);



///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "content-md5"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }

    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    if (!Algorithms[parsed.params.algorithm])
      throw new InvalidParamsError(parsed.params.algorithm +
                                   ' is not supported');

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h !== 'request-line') {
        var value = request.headers[h];
        if (!value)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      } else {
        parsed.signingString +=
          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":5}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":7,"ExpansionArg_bool":false} start 104.4091 took 16.9931s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":7,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};



///--- Specific Errors

function HttpSignatureError(message, caller) {
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, caller || HttpSignatureError);

  this.message = message;
  this.name = caller.name;
}
util.inherits(HttpSignatureError, Error);

function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);



///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "content-md5"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }

    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    if (!Algorithms[parsed.params.algorithm])
      throw new InvalidParamsError(parsed.params.algorithm +
                                   ' is not supported');

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h !== 'request-line') {
        var value = request.headers[h];
        if (!value)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      } else {
        parsed.signingString +=
          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":7}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":6,"ExpansionArg_bool":false} start 112.9758 took 15.7328s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":6,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};



///--- Specific Errors

function HttpSignatureError(message, caller) {
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, caller || HttpSignatureError);

  this.message = message;
  this.name = caller.name;
}
util.inherits(HttpSignatureError, Error);

function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);



///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "content-md5"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }

    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    if (!Algorithms[parsed.params.algorithm])
      throw new InvalidParamsError(parsed.params.algorithm +
                                   ' is not supported');

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h !== 'request-line') {
        var value = request.headers[h];
        if (!value)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      } else {
        parsed.signingString +=
          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":6}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":8,"ExpansionArg_array_element_0_type":0} start 104.3151 took 25.3575s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":8,"ExpansionArg_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};



///--- Specific Errors

function HttpSignatureError(message, caller) {
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, caller || HttpSignatureError);

  this.message = message;
  this.name = caller.name;
}
util.inherits(HttpSignatureError, Error);

function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);



///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "content-md5"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }

    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    if (!Algorithms[parsed.params.algorithm])
      throw new InvalidParamsError(parsed.params.algorithm +
                                   ' is not supported');

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h !== 'request-line') {
        var value = request.headers[h];
        if (!value)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      } else {
        parsed.signingString +=
          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":8}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":7,"ExpansionArg_array_element_0_type":0} start 112.929 took 24.6055s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":7,"ExpansionArg_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};



///--- Specific Errors

function HttpSignatureError(message, caller) {
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, caller || HttpSignatureError);

  this.message = message;
  this.name = caller.name;
}
util.inherits(HttpSignatureError, Error);

function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);



///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "content-md5"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }

    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    if (!Algorithms[parsed.params.algorithm])
      throw new InvalidParamsError(parsed.params.algorithm +
                                   ' is not supported');

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h !== 'request-line') {
        var value = request.headers[h];
        if (!value)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      } else {
        parsed.signingString +=
          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":7}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":10,"ExpansionArg_array_element_1_type":0} start 129.7733 took 17.481s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":10,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};



///--- Specific Errors

function HttpSignatureError(message, caller) {
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, caller || HttpSignatureError);

  this.message = message;
  this.name = caller.name;
}
util.inherits(HttpSignatureError, Error);

function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);



///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "content-md5"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }

    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    if (!Algorithms[parsed.params.algorithm])
      throw new InvalidParamsError(parsed.params.algorithm +
                                   ' is not supported');

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h !== 'request-line') {
        var value = request.headers[h];
        if (!value)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      } else {
        parsed.signingString +=
          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
