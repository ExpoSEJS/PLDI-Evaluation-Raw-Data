/root/Targets/cx-cli
└─┬ cx-cli@17.6.2 
  ├── commander@2.11.0 
  ├─┬ copy-dir@0.3.0 
  │ └── mkdir-p@0.0.7 
  └─┬ cross-spawn@5.1.0 
    ├─┬ lru-cache@4.1.1 
    │ ├── pseudomap@1.0.2 
    │ └── yallist@2.1.2 
    ├─┬ shebang-command@1.2.0 
    │ └── shebang-regex@1.0.0 
    └─┬ which@1.3.0 
      └── isexe@2.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/cx-cli/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0322 took 2.4377s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #! /usr/bin/env node

var program = require('commander'),
   pkg = require('../package.json'),
   path = require('path'),
   fs = require('fs'),
   spawn = require('cross-spawn'),
   copydir = require('copy-dir');


program
   .version(pkg.version)
   .option('-i, install', 'Install necessary packages')
   .option('scaffold', 'Scaffold application structure')
   .option('-s, start', 'Start the development server')
   .option('-b, build', 'Make a new production build')
   .option('--yarn', 'Use yarn instead of npm')
   .option('add, route', 'Add new route folder')
   .parse(process.argv);

if (program.version) {
   console.log('Cx CLI - ' + pkg.version);
}

var appPath = process.cwd(),
   appPackagePath = path.join(appPath, 'package.json'),
   tplPath = path.join(__dirname, '../tpl/'),
   tplPackagePath = path.join(tplPath, 'package.json');

if (!fs.existsSync(appPackagePath)) {
   console.warn('package.json could not be found in the current directory.');
   return -1;
}

if (program.scaffold) {

   var files = fs.readdirSync(appPath);
   var test = ["index.js", "index.html", "index.scss"];
   for (var i = 0; i < test.length; i++) {
      if (files.indexOf(test[i]) != -1) {
         console.error('App files detected. Aborting to prevent overwrites...');
         return -1;
      }
   }

   var err = copydir.sync(tplPath, appPath, function(stat, filepath, filename){
      //skip package.json and _template folder
      if (filepath.indexOf('_template') != -1 || filename == 'package.json')
         return false;
      return true; 
   });

   if (err) {
      console.error('Copy error.', err);
   }
}

if (program.install || program.scaffold) {
   console.log('Installing necessary packages using ' + (program.yarn ? 'yarn' : 'npm') + '.');

   var appPkg = require(appPackagePath);
   var tplPkg = require(tplPackagePath);

   if (tplPkg.scripts) {
      if (!appPkg.scripts)
         appPkg.scripts = {};

      for (var name in tplPkg.scripts) {
         if (appPkg.scripts[name]) {
            console.warn('Script ' + name + ' skipped as it is already in package.json.');
         } else {
            appPkg.scripts[name] = tplPkg.scripts[name];
         }
      }
   }

   if (tplPkg.dependencies) {
      if (!appPkg.dependencies)
         appPkg.dependencies = {};

      for (var name in tplPkg.dependencies) {
         if (appPkg.dependencies[name]) {
            console.warn('Dependency ' + name + ' skipped as it is already in package.json.');
         } else {
            appPkg.dependencies[name] = tplPkg.dependencies[name];
         }
      }
   }

   if (tplPkg.devDependencies) {
      if (!appPkg.devDependencies)
         appPkg.devDependencies = {};

      for (var name in tplPkg.devDependencies) {
         if (appPkg.devDependencies[name]) {
            console.warn('Dev-dependency ' + name + ' skipped as it is already in package.json.');
         } else {
            appPkg.devDependencies[name] = tplPkg.devDependencies[name];
         }
      }
   }

   fs.writeFileSync(appPackagePath, JSON.stringify(appPkg, null, 2));

   console.log('Scripts and dependencies added to package.json! Installing...');

   if (program.yarn) {
      return spawn.sync('yarn', [], {stdio: 'inherit'});
   } else {
      return spawn.sync('npm', ['install'], {stdio: 'inherit'});
   }
}

if (program.start || program.open) {
   console.log('npm start');
   return spawn.sync('npm', ['start'], {stdio: 'inherit'});
}

if (program.build) {
   console.log('npm run build');
   return spawn.sync('npm', ['run', 'build'], {stdio: 'inherit'});
}

if (program.route) {
   var newRoute = program.args[0].split('/');
   console.log();
   if (!newRoute){
      console.log("Syntax error: missing route name. Correct syntax: cx add route route_name");
      return;
   }
   var tplDir = path.join(tplPath, './app/routes/_template');
   
   // initial route parent folder
   var parentDir = path.join(appPath, './app/routes/');

   // loop through newRoute sub dirs array
      // for each sub, check if it exists and create it if it doesn't
   newRoute.reduce(function(parentDir, route, i){
      var newRouteDir = path.join(parentDir, route);
      // if last element in the route array, copy template files
      // otherwise just check if the sub folder exists and create it
      if (i === newRoute.length-1){
         if (!fs.existsSync(newRouteDir)) {
            fs.mkdirSync(newRouteDir);
            var err = copydir.sync(tplDir, newRouteDir);
            if (err) {
               console.error('Copy error.', err);
            } else {
               console.log("New route folder 'app/routes/" + newRoute.join('/') + "' created.");
            }
         } else {
            console.error("Folder 'app/routes/" + newRoute.join('/') + "' already exists.");
         }
      } else {
         if (!fs.existsSync(newRouteDir))
            fs.mkdirSync(newRouteDir);
      }
      return newRouteDir;
   }, parentDir);
} at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
