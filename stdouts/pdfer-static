
> bson@0.2.22 install /root/Targets/pdfer-static/node_modules/bson
> (node-gyp rebuild 2> builderror.log) || (exit 0)

make: Entering directory '/root/Targets/pdfer-static/node_modules/bson/build'
  CXX(target) Release/obj.target/bson/ext/bson.o
bson.target.mk:92: recipe for target 'Release/obj.target/bson/ext/bson.o' failed
make: Leaving directory '/root/Targets/pdfer-static/node_modules/bson/build'

> kerberos@0.0.11 install /root/Targets/pdfer-static/node_modules/kerberos
> (node-gyp rebuild 2> builderror.log) || (exit 0)

make: Entering directory '/root/Targets/pdfer-static/node_modules/kerberos/build'
  CXX(target) Release/obj.target/kerberos/lib/kerberos.o
kerberos.target.mk:98: recipe for target 'Release/obj.target/kerberos/lib/kerberos.o' failed
make: Leaving directory '/root/Targets/pdfer-static/node_modules/kerberos/build'
/root/Targets/pdfer-static
└─┬ pdfer-static@1.0.0 
  ├─┬ docparse-config@1.0.1 
  │ ├─┬ nconf@0.6.9 
  │ │ ├── async@0.2.9 
  │ │ ├── ini@1.3.4 
  │ │ └─┬ optimist@0.6.0 
  │ │   └── minimist@0.0.10 
  │ └─┬ temp@0.5.1 
  │   └─┬ rimraf@2.1.4 
  │     └── graceful-fs@1.2.3 
  ├─┬ docparse-logger@1.0.1 
  │ ├─┬ winston@0.6.2 
  │ │ ├── async@0.1.22 
  │ │ ├── colors@0.6.2 
  │ │ ├── cycle@1.0.3 
  │ │ ├── eyes@0.1.8 
  │ │ ├── pkginfo@0.2.3 
  │ │ ├── request@2.9.203 
  │ │ └── stack-trace@0.0.10 
  │ └─┬ winston-mongodb@0.4.7 
  │   ├─┬ mongodb@1.4.40 
  │   │ ├─┬ bson@0.2.22 
  │   │ │ └── nan@1.8.4 
  │   │ ├── kerberos@0.0.11 
  │   │ └─┬ readable-stream@2.3.3 
  │   │   ├── core-util-is@1.0.2 
  │   │   ├── inherits@2.0.3 
  │   │   ├── isarray@1.0.0 
  │   │   ├── process-nextick-args@1.0.7 
  │   │   ├── safe-buffer@5.1.1 
  │   │   ├── string_decoder@1.0.3 
  │   │   └── util-deprecate@1.0.2 
  │   └── muri@0.3.1 
  ├─┬ ecstatic@0.4.13 
  │ ├── ent@0.0.7 
  │ └── mime@1.2.11 
  ├─┬ optimist@0.3.7 
  │ └── wordwrap@0.0.3 
  └─┬ seaport@1.3.0 
    ├─┬ crdt@3.4.2 
    │ ├── between@0.1.3 
    │ └─┬ scuttlebutt@5.5.20 
    │   ├── duplex@1.0.0 
    │   ├── iterate@0.1.0 
    │   ├── monotonic-timestamp@0.0.9 
    │   └── stream-serializer@1.0.0 
    ├── inherits@1.0.2 
    ├── semver@1.1.4 
    └── through@1.1.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/pdfer-static/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 25% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","RegExp","getOwnPropertyNames","sort","join","getOwnPropertyDescriptor","create"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0451 took 11.3758s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #! /usr/bin/env node

var path = require('path'),
    fs = require('fs'),
    url = require('url'),
    mime = require('mime'),
    showDir = require('./ecstatic/showdir'),
    version = JSON.parse(
      fs.readFileSync(__dirname + '/../package.json').toString()
    ).version,
    status = require('./ecstatic/status-handlers'),
    etag = require('./ecstatic/etag'),
    optsParser = require('./ecstatic/opts');

var ecstatic = module.exports = function (dir, options) {
  if (typeof dir !== 'string') {
    options = dir;
    dir = options.root;
  }

  var root = path.join(path.resolve(dir), '/'),
      opts = optsParser(options),
      cache = opts.cache,
      autoIndex = opts.autoIndex,
      baseDir = opts.baseDir,
      defaultExt = opts.defaultExt,
      handleError = opts.handleError;

  opts.root = dir;

  return function middleware (req, res, next) {

    // Strip any null bytes from the url
    while(req.url.indexOf('%00') !== -1) {
      req.url = req.url.replace(/\%00/g, '');
    }
    // Figure out the path for the file from the given url
    var parsed = url.parse(req.url);
    try {
      decodeURI(req.url); // check validity of url
      var pathname = decodeURI(parsed.pathname);
    }
    catch (err) {
      return status[400](res, next, { error: err });
    }

    var file = path.normalize(
          path.join(root,
            path.relative(
              path.join('/', baseDir),
              pathname
            )
          )
        ),
        gzipped = file + '.gz';

    // Set common headers.
    res.setHeader('server', 'ecstatic-'+version);

    // TODO: This check is broken, which causes the 403 on the
    // expected 404.
    if (file.slice(0, root.length) !== root) {
      return status[403](res, next);
    }

    if (req.method && (req.method !== 'GET' && req.method !== 'HEAD' )) {
      return status[405](res, next);
    }

    // Look for a gzipped file if this is turned on
    if (opts.gzip && shouldCompress(req)) {
      fs.stat(gzipped, function (err, stat) {
        if (!err && stat.isFile()) {
          file = gzipped;
          return serve(stat);
        }
      });
    }

    fs.stat(file, function (err, stat) {
      if (err && err.code === 'ENOENT') {
        if (req.statusCode == 404) {
          // This means we're already trying ./404.html
          status[404](res, next);
        }
        else if (defaultExt && !path.extname(parsed.pathname).length) {
          //
          // If no file extension is specified and there is a default extension
          // try that before rendering 404.html.
          //
          middleware({
            url: parsed.pathname + '.' + defaultExt + ((parsed.search)? parsed.search:'')
          }, res, next);
        }
        else {
          // Try for ./404.html
          middleware({
            url: (handleError ? ('/' + path.join(baseDir, '404.html')) : req.url),
            statusCode: 404 // Override the response status code
          }, res, next);
        }
      }
      else if (err) {
        status[500](res, next, { error: err });
      }
      else if (stat.isDirectory()) {
        // 302 to / if necessary
        if (!parsed.pathname.match(/\/$/)) {
          res.statusCode = 302;
          res.setHeader('location', parsed.pathname + '/' +
            (parsed.query? ('?' + parsed.query):'')
          );
          return res.end();
        }

        if (autoIndex) {
          return middleware({
            url: path.join(pathname, '/index.html')
          }, res, function (err) {
            if (err) {
              return status[500](res, next, { error: err });
            }
            if (opts.showDir) {
              return showDir(opts, stat)(req, res);
            }

            return status[403](res, next);
          });
        }

        if (opts.showDir) {
          return showDir(opts, stat)(req, res);
        }

        status[404](res, next);

      }
      else {
        serve(stat);
      }
    });

    function serve(stat) {

      // TODO: Helper for this, with default headers.
      res.setHeader('etag', etag(stat));
      res.setHeader('last-modified', (new Date(stat.mtime)).toUTCString());
      res.setHeader('cache-control', cache);

      // Return a 304 if necessary
      if ( req.headers
        && (
          (req.headers['if-none-match'] === etag(stat))
          || (new Date(Date.parse(req.headers['if-modified-since'])) >= stat.mtime)
        )
      ) {
        return status[304](res, next);
      }

      res.setHeader('content-length', stat.size);

      // Do a MIME lookup, fall back to octet-stream and handle gzip
      // special case.
      var contentType = mime.lookup(file), charSet;

      if (contentType) {
        charSet = mime.charsets.lookup(contentType);
        if (charSet) {
          contentType += '; charset=' + charSet;
        }
      }

      if (path.extname(file) === '.gz') {
        res.setHeader('Content-Encoding', 'gzip');

        // strip gz ending and lookup mime type
        contentType = mime.lookup(path.basename(file, ".gz"));
      }

      res.setHeader('content-type', contentType || 'application/octet-stream');

      if (req.method === "HEAD") {
        res.statusCode = req.statusCode || 200; // overridden for 404's
        return res.end();
      }

      var stream = fs.createReadStream(file);

      stream.pipe(res);
      stream.on('error', function (err) {
        status['500'](res, next, { error: err });
      });

      stream.on('end', function () {
        res.statusCode = 200;
        res.end();
      });
    }
  };
};

ecstatic.version = version;
ecstatic.showDir = showDir;

// Check to see if we should try to compress a file with gzip.
function shouldCompress(req) {
  var headers = req.headers;

  return headers && headers['accept-encoding'] &&
    headers['accept-encoding']
      .split(",")
      .some(function (el) {
        return ['*','compress', 'gzip', 'deflate'].indexOf(el) != -1;
      })
    ;
}

if(!module.parent) {
  var http = require('http'),
      opts = require('optimist').argv,
      port = opts.port || opts.p || 8000,
      dir = opts.root || opts._[0] || process.cwd();

  if(opts.help || opts.h) {
    var u = console.error;
    u('usage: ecstatic [dir] {options} --port PORT');
    u('see https://npm.im/ecstatic for more docs');
    return;
  }

  http.createServer(ecstatic(dir, opts))
    .listen(port, function () {
      console.log('ecstatic serving ' + dir + ' on port ' + port);
    });
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/pdfer-static/node_modules/pdfer-static/index.js. Coverage (Term): 25% Coverage (LOC): 33%
*- File /root/Targets/pdfer-static/node_modules/seaport/index.js. Coverage (Term): 11% Coverage (LOC): 14%
*- File /root/Targets/pdfer-static/node_modules/seaport/lib/seaport.js. Coverage (Term): 8% Coverage (LOC): 12%
*- File /root/Targets/pdfer-static/node_modules/seaport/node_modules/inherits/inherits.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/pdfer-static/node_modules/through/index.js. Coverage (Term): 9% Coverage (LOC): 8%
*- File /root/Targets/pdfer-static/node_modules/semver/semver.js. Coverage (Term): 18% Coverage (LOC): 28%
*- File /root/Targets/pdfer-static/node_modules/crdt/index.js. Coverage (Term): 63% Coverage (LOC): 78%
*- File /root/Targets/pdfer-static/node_modules/crdt/doc.js. Coverage (Term): 15% Coverage (LOC): 24%
*- File /root/Targets/pdfer-static/node_modules/crdt/row.js. Coverage (Term): 31% Coverage (LOC): 42%
*- File /root/Targets/pdfer-static/node_modules/between/index.js. Coverage (Term): 36% Coverage (LOC): 50%
*- File /root/Targets/pdfer-static/node_modules/crdt/set.js. Coverage (Term): 16% Coverage (LOC): 22%
*- File /root/Targets/pdfer-static/node_modules/crdt/seq.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/pdfer-static/node_modules/scuttlebutt/index.js. Coverage (Term): 14% Coverage (LOC): 20%
*- File /root/Targets/pdfer-static/node_modules/iterate/index.js. Coverage (Term): 12% Coverage (LOC): 24%
*- File /root/Targets/pdfer-static/node_modules/duplex/index.js. Coverage (Term): 5% Coverage (LOC): 4%
*- File /root/Targets/pdfer-static/node_modules/stream-serializer/index.js. Coverage (Term): 15% Coverage (LOC): 20%
*- File /root/Targets/pdfer-static/node_modules/scuttlebutt/util.js. Coverage (Term): 17% Coverage (LOC): 41%
*- File /root/Targets/pdfer-static/node_modules/monotonic-timestamp/index.js. Coverage (Term): 39% Coverage (LOC): 42%
*- File /root/Targets/pdfer-static/node_modules/seaport/lib/id.js. Coverage (Term): 33% Coverage (LOC): 40%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
