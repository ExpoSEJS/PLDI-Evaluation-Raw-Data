/root/Targets/react-custom-grid
└─┬ react-custom-grid@1.0.3 
  └─┬ sd-builder@4.0.1
    └─┬ gulp-cssnano@2.1.2
      └─┬ cssnano@3.10.0
        └─┬ postcss-svgo@2.1.6
          └─┬ svgo@0.7.2
            └─┬ csso@2.3.2
              └── clap@1.2.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/react-custom-grid/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0596 took 4.6642s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (16:4) on program /*eslint-disable no-unused-vars*/
import React from "react";
import ReactBsTable from "react-bootstrap-table";
/*eslint-enable no-unused-vars*/

export default class CustomGrid extends React.Component{

	constructor(props){
		super(props);
	}

	_getColumns(){
		return this.props.columns.map(function(elem){

			return (
				<TableHeaderColumn dataField = {elem.column}  
									dataSort = {elem.isSortable} 
									key = {elem.column} 
									isKey = {elem.isKey}
									hidden = {elem.hidden}
									autoValue={ true }
									width={elem.width}
									dataAlign = {elem.dataAlign}
									dataFormat = {elem.dataFormat}
									filter = {elem.filter}
									sortFunc = {elem.sortFunc}> 
									{elem.label} 
				</TableHeaderColumn>
			);
		});
	}


	updateRender(x, y){
		this.refs.table.forceUpdate();
	}

	render(){
		var renderColumns = this._getColumns();

		var htmlTitle = "";
		if(this.props.title){
			htmlTitle = (<h3>{this.props.title}</h3>);
		}

		var selectRowProp = {};

		if(this.props.onSelectRow){
			selectRowProp = {
				mode: this.props.rowSelection,
				clickToSelect: true,
				bgColor: "rgb(238, 193, 213)",
				onSelect: this.props.onSelectRow
			};
		}

		var options = {
			defaultSortName: this.props.defaultSortField, 
			defaultSortOrder: this.props.defaultSortOrder,
			onSortChange: this.updateRender.bind(this),
			sizePerPageList: this.props.sizePerPageList,
      		sizePerPage: 5,
      		page:this.props.pageToShow,
      		onPageChange : this.props.onPageChange
		};

		var dataTotalSize = this.props.data.length;
		if(this.props.remote){
			dataTotalSize = this.props.dataTotalSize;
		}

		return (
			<div>
				{htmlTitle}
				<div style={this.props.style}>
					<div id="custom-grid" className="table-responsive" style={this.props.style}>
						<BootstrapTable data = {this.props.data} 
										striped = {true}
										condensed={true} 
										pagination = {this.props.pagination}
										fetchInfo={ { dataTotalSize: dataTotalSize} }
										search = {this.props.search}
										searchPlaceholder = {"Filtra su tutti i campi"}
										selectRow = {selectRowProp}
										options = {options}
										remote = {this.props.remote}
										ref="table">
							{renderColumns}
						</BootstrapTable>
					</div>
				</div>
			</div>
		);
	}
}

CustomGrid.propTypes = {
	columns: React.PropTypes.array.isRequired,
	data: React.PropTypes.array.isRequired,
	onSelectRow: React.PropTypes.func,
	style: React.PropTypes.object,
	defaultSortField: React.PropTypes.string,
	defaultSortOrder: React.PropTypes.string,
	search: React.PropTypes.bool,
	pagination:React.PropTypes.bool,
	remote: React.PropTypes.bool,
	onPageChange: React.PropTypes.func,
	dataTotalSize: React.PropTypes.number,
	pageToShow: React.PropTypes.number,
	sizePerPageList: React.PropTypes.array
};

CustomGrid.defaultProps = {
    remote: false,
    pageToShow: 1,
    sizePerPageList: [5,10, 15, 25, 50]
};

module.exports = CustomGrid; at SyntaxError: Unexpected token (16:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseParenAndDistinguishExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1861:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
