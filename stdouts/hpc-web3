
> keccak@1.3.0 install /root/Targets/hpc-web3/node_modules/keccak
> prebuild-install || node-gyp rebuild || echo "Keccak bindings compilation fail. Pure JS implementation will be used."


> secp256k1@3.3.0 install /root/Targets/hpc-web3/node_modules/secp256k1
> prebuild-install || node-gyp rebuild || echo "Secp256k1 bindings compilation fail. Pure JS implementation will be used."

/root/Targets/hpc-web3
└─┬ hpc-web3@0.1.29-alpha 
  ├── bignumber.js@2.0.7  (git+https://github.com/debris/bignumber.js.git#94d7146671b9719e00a09c29b01a691bc85048c2)
  ├── crypto-js@3.1.8 
  ├─┬ ethereumjs-util@5.1.2 
  │ ├─┬ babel-preset-es2015@6.24.1 
  │ │ ├─┬ babel-plugin-check-es2015-constants@6.22.0 
  │ │ │ └─┬ babel-runtime@6.26.0 
  │ │ │   ├── core-js@2.5.1 
  │ │ │   └── regenerator-runtime@0.11.0 
  │ │ ├── babel-plugin-transform-es2015-arrow-functions@6.22.0 
  │ │ ├── babel-plugin-transform-es2015-block-scoped-functions@6.22.0 
  │ │ ├─┬ babel-plugin-transform-es2015-block-scoping@6.26.0 
  │ │ │ ├── babel-template@6.26.0 
  │ │ │ ├─┬ babel-traverse@6.26.0 
  │ │ │ │ ├── globals@9.18.0 
  │ │ │ │ └─┬ invariant@2.2.2 
  │ │ │ │   └── loose-envify@1.3.1 
  │ │ │ ├─┬ babel-types@6.26.0 
  │ │ │ │ ├── esutils@2.0.2 
  │ │ │ │ └── to-fast-properties@1.0.3 
  │ │ │ └── lodash@4.17.4 
  │ │ ├─┬ babel-plugin-transform-es2015-classes@6.24.1 
  │ │ │ ├── babel-helper-define-map@6.26.0 
  │ │ │ ├── babel-helper-function-name@6.24.1 
  │ │ │ ├── babel-helper-optimise-call-expression@6.24.1 
  │ │ │ ├── babel-helper-replace-supers@6.24.1 
  │ │ │ └── babel-messages@6.23.0 
  │ │ ├── babel-plugin-transform-es2015-computed-properties@6.24.1 
  │ │ ├── babel-plugin-transform-es2015-destructuring@6.23.0 
  │ │ ├── babel-plugin-transform-es2015-duplicate-keys@6.24.1 
  │ │ ├── babel-plugin-transform-es2015-for-of@6.23.0 
  │ │ ├── babel-plugin-transform-es2015-function-name@6.24.1 
  │ │ ├── babel-plugin-transform-es2015-literals@6.22.0 
  │ │ ├── babel-plugin-transform-es2015-modules-amd@6.24.1 
  │ │ ├─┬ babel-plugin-transform-es2015-modules-commonjs@6.26.0 
  │ │ │ └── babel-plugin-transform-strict-mode@6.24.1 
  │ │ ├─┬ babel-plugin-transform-es2015-modules-systemjs@6.24.1 
  │ │ │ └── babel-helper-hoist-variables@6.24.1 
  │ │ ├── babel-plugin-transform-es2015-modules-umd@6.24.1 
  │ │ ├── babel-plugin-transform-es2015-object-super@6.24.1 
  │ │ ├─┬ babel-plugin-transform-es2015-parameters@6.24.1 
  │ │ │ ├── babel-helper-call-delegate@6.24.1 
  │ │ │ └── babel-helper-get-function-arity@6.24.1 
  │ │ ├── babel-plugin-transform-es2015-shorthand-properties@6.24.1 
  │ │ ├── babel-plugin-transform-es2015-spread@6.22.0 
  │ │ ├─┬ babel-plugin-transform-es2015-sticky-regex@6.24.1 
  │ │ │ └── babel-helper-regex@6.26.0 
  │ │ ├── babel-plugin-transform-es2015-template-literals@6.22.0 
  │ │ ├── babel-plugin-transform-es2015-typeof-symbol@6.23.0 
  │ │ ├─┬ babel-plugin-transform-es2015-unicode-regex@6.24.1 
  │ │ │ └─┬ regexpu-core@2.0.0 
  │ │ │   ├── regenerate@1.3.3 
  │ │ │   ├── regjsgen@0.2.0 
  │ │ │   └─┬ regjsparser@0.1.5 
  │ │ │     └── jsesc@0.5.0 
  │ │ └─┬ babel-plugin-transform-regenerator@6.26.0 
  │ │   └── regenerator-transform@0.10.1 
  │ ├─┬ babelify@7.3.0 
  │ │ ├─┬ babel-core@6.26.0 
  │ │ │ ├─┬ babel-code-frame@6.26.0 
  │ │ │ │ ├─┬ chalk@1.1.3 
  │ │ │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ │ │ ├── escape-string-regexp@1.0.5 
  │ │ │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ │ │ └── ansi-regex@2.1.1 
  │ │ │ │ │ ├── strip-ansi@3.0.1 
  │ │ │ │ │ └── supports-color@2.0.0 
  │ │ │ │ └── js-tokens@3.0.2 
  │ │ │ ├─┬ babel-generator@6.26.0 
  │ │ │ │ ├─┬ detect-indent@4.0.0 
  │ │ │ │ │ └─┬ repeating@2.0.1 
  │ │ │ │ │   └─┬ is-finite@1.0.2 
  │ │ │ │ │     └── number-is-nan@1.0.1 
  │ │ │ │ ├── jsesc@1.3.0 
  │ │ │ │ └── trim-right@1.0.1 
  │ │ │ ├── babel-helpers@6.24.1 
  │ │ │ ├─┬ babel-register@6.26.0 
  │ │ │ │ ├─┬ home-or-tmp@2.0.0 
  │ │ │ │ │ └── os-tmpdir@1.0.2 
  │ │ │ │ └── source-map-support@0.4.18 
  │ │ │ ├── babylon@6.18.0 
  │ │ │ ├── convert-source-map@1.5.0 
  │ │ │ ├─┬ debug@2.6.9 
  │ │ │ │ └── ms@2.0.0 
  │ │ │ ├── json5@0.5.1 
  │ │ │ ├─┬ minimatch@3.0.4 
  │ │ │ │ └─┬ brace-expansion@1.1.8 
  │ │ │ │   ├── balanced-match@1.0.0 
  │ │ │ │   └── concat-map@0.0.1 
  │ │ │ ├── path-is-absolute@1.0.1 
  │ │ │ ├── private@0.1.7 
  │ │ │ ├── slash@1.0.0 
  │ │ │ └── source-map@0.5.7 
  │ │ └── object-assign@4.1.1 
  │ ├── bn.js@4.11.8 
  │ ├─┬ create-hash@1.1.3 
  │ │ ├── cipher-base@1.0.4 
  │ │ ├── inherits@2.0.3 
  │ │ ├─┬ ripemd160@2.0.1 
  │ │ │ └── hash-base@2.0.2 
  │ │ └── sha.js@2.4.9 
  │ ├─┬ ethjs-util@0.1.4 
  │ │ ├── is-hex-prefixed@1.0.0 
  │ │ └── strip-hex-prefix@1.0.0 
  │ ├─┬ keccak@1.3.0 
  │ │ ├── bindings@1.3.0 
  │ │ ├── nan@2.7.0 
  │ │ ├─┬ prebuild-install@2.2.2 
  │ │ │ ├── expand-template@1.1.0 
  │ │ │ ├── github-from-package@0.0.0 
  │ │ │ ├── minimist@1.2.0 
  │ │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ │ └── minimist@0.0.8 
  │ │ │ ├── node-abi@2.1.1 
  │ │ │ ├── noop-logger@0.1.1 
  │ │ │ ├─┬ npmlog@4.1.2 
  │ │ │ │ ├─┬ are-we-there-yet@1.1.4 
  │ │ │ │ │ └── delegates@1.0.0 
  │ │ │ │ ├── console-control-strings@1.1.0 
  │ │ │ │ ├─┬ gauge@2.7.4 
  │ │ │ │ │ ├── aproba@1.2.0 
  │ │ │ │ │ ├── has-unicode@2.0.1 
  │ │ │ │ │ ├── signal-exit@3.0.2 
  │ │ │ │ │ ├─┬ string-width@1.0.2 
  │ │ │ │ │ │ ├── code-point-at@1.1.0 
  │ │ │ │ │ │ └── is-fullwidth-code-point@1.0.0 
  │ │ │ │ │ └── wide-align@1.1.2 
  │ │ │ │ └── set-blocking@2.0.0 
  │ │ │ ├── os-homedir@1.0.2 
  │ │ │ ├─┬ pump@1.0.2 
  │ │ │ │ ├── end-of-stream@1.4.0 
  │ │ │ │ └─┬ once@1.4.0 
  │ │ │ │   └── wrappy@1.0.2 
  │ │ │ ├─┬ rc@1.2.1 
  │ │ │ │ ├── deep-extend@0.4.2 
  │ │ │ │ ├── ini@1.3.4 
  │ │ │ │ ├── minimist@1.2.0 
  │ │ │ │ └── strip-json-comments@2.0.1 
  │ │ │ ├─┬ simple-get@1.4.3 
  │ │ │ │ └── unzip-response@1.0.2 
  │ │ │ ├─┬ tar-fs@1.15.3 
  │ │ │ │ ├── chownr@1.0.1 
  │ │ │ │ └─┬ tar-stream@1.5.4 
  │ │ │ │   └── bl@1.2.1 
  │ │ │ ├── tunnel-agent@0.6.0 
  │ │ │ └── xtend@4.0.1 
  │ │ └── safe-buffer@5.1.1 
  │ ├── rlp@2.0.0 
  │ └─┬ secp256k1@3.3.0 
  │   ├── bip66@1.1.5 
  │   ├─┬ drbg.js@1.0.1 
  │   │ ├─┬ browserify-aes@1.0.8 
  │   │ │ ├── buffer-xor@1.0.3 
  │   │ │ └─┬ evp_bytestokey@1.0.3 
  │   │ │   └─┬ md5.js@1.3.4 
  │   │ │     └── hash-base@3.0.4 
  │   │ └── create-hmac@1.1.6 
  │   └─┬ elliptic@6.4.0 
  │     ├── brorand@1.1.0 
  │     ├── hash.js@1.1.3 
  │     ├── hmac-drbg@1.0.1 
  │     ├── minimalistic-assert@1.0.0 
  │     └── minimalistic-crypto-utils@1.0.1 
  ├─┬ sync-request@3.0.1 
  │ ├─┬ concat-stream@1.6.0 
  │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ ├── core-util-is@1.0.2 
  │ │ │ ├── isarray@1.0.0 
  │ │ │ ├── process-nextick-args@1.0.7 
  │ │ │ ├── string_decoder@1.0.3 
  │ │ │ └── util-deprecate@1.0.2 
  │ │ └── typedarray@0.0.6 
  │ ├── http-response-object@1.1.0 
  │ └─┬ then-request@2.2.0 
  │   ├── caseless@0.11.0 
  │   ├── http-basic@2.5.1 
  │   ├─┬ promise@7.3.1 
  │   │ └── asap@2.0.6 
  │   └── qs@6.5.1 
  ├── utf8@2.1.2 
  └── xmlhttprequest@1.8.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/hpc-web3/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 20% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0531 took 4.4557s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (41:6) on program /*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file utils.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

/**
 * Utils
 *
 * @module utils
 */

/**
 * Utility functions
 *
 * @class [utils] utils
 * @constructor
 */


var BigNumber = require('bignumber.js');
var sha3 = require('./sha3.js');
var utf8 = require('utf8');
const secp256k1 = require('secp256k1');
const assert = require('assert')

var unitMap = {
    'noether':      '0',
    'wei':          '1',
    'kwei':         '1000',
    'Kwei':         '1000',
    'babbage':      '1000',
    'femtoether':   '1000',
    'mwei':         '1000000',
    'Mwei':         '1000000',
    'lovelace':     '1000000',
    'picoether':    '1000000',
    'gwei':         '1000000000',
    'Gwei':         '1000000000',
    'shannon':      '1000000000',
    'nanoether':    '1000000000',
    'nano':         '1000000000',
    'szabo':        '1000000000000',
    'microether':   '1000000000000',
    'micro':        '1000000000000',
    'finney':       '1000000000000000',
    'milliether':    '1000000000000000',
    'milli':         '1000000000000000',
    'ether':        '1000000000000000000',
    'kether':       '1000000000000000000000',
    'grand':        '1000000000000000000000',
    'mether':       '1000000000000000000000000',
    'gether':       '1000000000000000000000000000',
    'tether':       '1000000000000000000000000000000'
};

/**
 * Should be called to pad string to expected length
 *
 * @method padLeft
 * @param {String} string to be padded
 * @param {Number} characters that result string should have
 * @param {String} sign, by default 0
 * @returns {String} right aligned string
 */
var padLeft = function (string, chars, sign) {
    return new Array(chars - string.length + 1).join(sign ? sign : "0") + string;
};

/**
 * Should be called to pad string to expected length
 *
 * @method padRight
 * @param {String} string to be padded
 * @param {Number} characters that result string should have
 * @param {String} sign, by default 0
 * @returns {String} right aligned string
 */
var padRight = function (string, chars, sign) {
    return string + (new Array(chars - string.length + 1).join(sign ? sign : "0"));
};

/**
 * Should be called to get utf8 from it's hex representation
 *
 * @method toUtf8
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */
var toUtf8 = function(hex) {
// Find termination
    var str = "";
    var i = 0, l = hex.length;
    if (hex.substring(0, 2) === '0x') {
        i = 2;
    }
    for (; i < l; i+=2) {
        var code = parseInt(hex.substr(i, 2), 16);
        if (code === 0)
            break;
        str += String.fromCharCode(code);
    }

    return utf8.decode(str);
};

/**
 * Should be called to get ascii from it's hex representation
 *
 * @method toAscii
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */
var toAscii = function(hex) {
// Find termination
    var str = "";
    var i = 0, l = hex.length;
    if (hex.substring(0, 2) === '0x') {
        i = 2;
    }
    for (; i < l; i+=2) {
        var code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
    }

    return str;
};

/**
 * Should be called to get hex representation (prefixed by 0x) of utf8 string
 *
 * @method fromUtf8
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */
var fromUtf8 = function(str) {
    str = utf8.encode(str);
    var hex = "";
    for(var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        if (code === 0)
            break;
        var n = code.toString(16);
        hex += n.length < 2 ? '0' + n : n;
    }

    return "0x" + hex;
};

/**
 * Should be called to get hex representation (prefixed by 0x) of ascii string
 *
 * @method fromAscii
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */
var fromAscii = function(str) {
    var hex = "";
    for(var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? '0' + n : n;
    }

    return "0x" + hex;
};

/**
 * Should be used to create full function/event name from json abi
 *
 * @method transformToFullName
 * @param {Object} json-abi
 * @return {String} full fnction/event name
 */
var transformToFullName = function (json) {
    if (json.name.indexOf('(') !== -1) {
        return json.name;
    }

    var typeName = json.inputs.map(function(i){return i.type; }).join();
    return json.name + '(' + typeName + ')';
};

/**
 * Should be called to get display name of contract function
 *
 * @method extractDisplayName
 * @param {String} name of function/event
 * @returns {String} display name for function/event eg. multiply(uint256) -> multiply
 */
var extractDisplayName = function (name) {
    var length = name.indexOf('(');
    return length !== -1 ? name.substr(0, length) : name;
};

/// @returns overloaded part of function/event name
var extractTypeName = function (name) {
    /// TODO: make it invulnerable
    var length = name.indexOf('(');
    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : "";
};

/**
 * Converts value to it's decimal representation in string
 *
 * @method toDecimal
 * @param {String|Number|BigNumber}
 * @return {String}
 */
var toDecimal = function (value) {
    return toBigNumber(value).toNumber();
};

/**
 * Converts value to it's hex representation
 *
 * @method fromDecimal
 * @param {String|Number|BigNumber}
 * @return {String}
 */
var fromDecimal = function (value) {
    var number = toBigNumber(value);
    var result = number.toString(16);

    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;
};

/**
 * Auto converts any given value into it's hex representation.
 *
 * And even stringifys objects before.
 *
 * @method toHex
 * @param {String|Number|BigNumber|Object}
 * @return {String}
 */
var toHex = function (val) {
    /*jshint maxcomplexity: 8 */

    if (isBoolean(val))
        return fromDecimal(+val);

    if (isBigNumber(val))
        return fromDecimal(val);

    if (isObject(val))
        return fromUtf8(JSON.stringify(val));

    // if its a negative number, pass it through fromDecimal
    if (isString(val)) {
        if (val.indexOf('-0x') === 0)
            return fromDecimal(val);
        else if(val.indexOf('0x') === 0)
            return val;
        else if (!isFinite(val))
            return fromAscii(val);
    }

    return fromDecimal(val);
};

/**
 * Returns value of unit in Wei
 *
 * @method getValueOfUnit
 * @param {String} unit the unit to convert to, default ether
 * @returns {BigNumber} value of the unit (in Wei)
 * @throws error if the unit is not correct:w
 */
var getValueOfUnit = function (unit) {
    unit = unit ? unit.toLowerCase() : 'ether';
    var unitValue = unitMap[unit];
    if (unitValue === undefined) {
        throw new Error('This unit doesn\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));
    }
    return new BigNumber(unitValue, 10);
};

/**
 * Takes a number of wei and converts it to any other ether unit.
 *
 * Possible units are:
 *   SI Short   SI Full        Effigy       Other
 * - kwei       femtoether     babbage
 * - mwei       picoether      lovelace
 * - gwei       nanoether      shannon      nano
 * - --         microether     szabo        micro
 * - --         milliether     finney       milli
 * - ether      --             --
 * - kether                    --           grand
 * - mether
 * - gether
 * - tether
 *
 * @method fromWei
 * @param {Number|String} number can be a number, number string or a HEX of a decimal
 * @param {String} unit the unit to convert to, default ether
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number
*/
var fromWei = function(number, unit) {
    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));

    return isBigNumber(number) ? returnValue : returnValue.toString(10);
};

/**
 * Takes a number of a unit and converts it to wei.
 *
 * Possible units are:
 *   SI Short   SI Full        Effigy       Other
 * - kwei       femtoether     babbage
 * - mwei       picoether      lovelace
 * - gwei       nanoether      shannon      nano
 * - --         microether     szabo        micro
 * - --         microether     szabo        micro
 * - --         milliether     finney       milli
 * - ether      --             --
 * - kether                    --           grand
 * - mether
 * - gether
 * - tether
 *
 * @method toWei
 * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal
 * @param {String} unit the unit to convert from, default ether
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number
*/
var toWei = function(number, unit) {
    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));

    return isBigNumber(number) ? returnValue : returnValue.toString(10);
};

/**
 * Takes an input and transforms it into an bignumber
 *
 * @method toBigNumber
 * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber
 * @return {BigNumber} BigNumber
*/
var toBigNumber = function(number) {
    /*jshint maxcomplexity:5 */
    number = number || 0;
    if (isBigNumber(number))
        return number;

    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {
        return new BigNumber(number.replace('0x',''), 16);
    }

    return new BigNumber(number.toString(10), 10);
};

/**
 * Takes and input transforms it into bignumber and if it is negative value, into two's complement
 *
 * @method toTwosComplement
 * @param {Number|String|BigNumber}
 * @return {BigNumber}
 */
var toTwosComplement = function (number) {
    var bigNumber = toBigNumber(number);
    if (bigNumber.lessThan(0)) {
        return new BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16).plus(bigNumber).plus(1);
    }
    return bigNumber;
};

/**
 * Checks if the given string is strictly an address
 *
 * @method isStrictAddress
 * @param {String} address the given HEX adress
 * @return {Boolean}
*/
var isStrictAddress = function (address) {
    return /^0x[0-9a-f]{40}$/i.test(address);
};

/**
 * Checks if the given string is an address
 *
 * @method isAddress
 * @param {String} address the given HEX adress
 * @return {Boolean}
*/
var isAddress = function (address) {
    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
        // check if it has the basic requirements of an address
        return false;
    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
        // If it's all small caps or all all caps, return true
        return true;
    } else {
        // Otherwise check each case
        return isChecksumAddress(address);
    }
};



/**
 * Checks if the given string is a checksummed address
 *
 * @method isChecksumAddress
 * @param {String} address the given HEX adress
 * @return {Boolean}
*/
var isChecksumAddress = function (address) {
    // Check each case
    address = address.replace('0x','');
    var addressHash = sha3(address.toLowerCase());

    for (var i = 0; i < 40; i++ ) {
        // the nth letter should be uppercase if the nth digit of casemap is 1
        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
            return false;
        }
    }
    return true;
};



/**
 * Makes a checksum address
 *
 * @method toChecksumAddress
 * @param {String} address the given HEX adress
 * @return {String}
*/
var toChecksumAddress = function (address) {
    if (typeof address === 'undefined') return '';

    address = address.toLowerCase().replace('0x','');
    var addressHash = sha3(address);
    var checksumAddress = '0x';

    for (var i = 0; i < address.length; i++ ) {
        // If ith character is 9 to f then make it uppercase
        if (parseInt(addressHash[i], 16) > 7) {
          checksumAddress += address[i].toUpperCase();
        } else {
            checksumAddress += address[i];
        }
    }
    return checksumAddress;
};

/**
 * Transforms given string to valid 20 bytes-length addres with 0x prefix
 *
 * @method toAddress
 * @param {String} address
 * @return {String} formatted address
 */
var toAddress = function (address) {
    if (isStrictAddress(address)) {
        return address;
    }

    if (/^[0-9a-f]{40}$/.test(address)) {
        return '0x' + address;
    }

    return '0x' + padLeft(toHex(address).substr(2), 40);
};

/**
 * Returns true if object is BigNumber, otherwise false
 *
 * @method isBigNumber
 * @param {Object}
 * @return {Boolean}
 */
var isBigNumber = function (object) {
    return object instanceof BigNumber ||
        (object && object.constructor && object.constructor.name === 'BigNumber');
};

/**
 * Returns true if object is string, otherwise false
 *
 * @method isString
 * @param {Object}
 * @return {Boolean}
 */
var isString = function (object) {
    return typeof object === 'string' ||
        (object && object.constructor && object.constructor.name === 'String');
};

/**
 * Returns true if object is function, otherwise false
 *
 * @method isFunction
 * @param {Object}
 * @return {Boolean}
 */
var isFunction = function (object) {
    return typeof object === 'function';
};

/**
 * Returns true if object is Objet, otherwise false
 *
 * @method isObject
 * @param {Object}
 * @return {Boolean}
 */
var isObject = function (object) {
    return typeof object === 'object';
};

/**
 * Returns true if object is boolean, otherwise false
 *
 * @method isBoolean
 * @param {Object}
 * @return {Boolean}
 */
var isBoolean = function (object) {
    return typeof object === 'boolean';
};

/**
 * Returns true if object is array, otherwise false
 *
 * @method isArray
 * @param {Object}
 * @return {Boolean}
 */
var isArray = function (object) {
    return object instanceof Array;
};

/**
 * Returns true if given string is valid json object
 *
 * @method isJson
 * @param {String}
 * @return {Boolean}
 */
var isJson = function (str) {
    try {
        return !!JSON.parse(str);
    } catch (e) {
        return false;
    }
};

var sign = function (tx, signHash, privKey) {
    var hashBuffer = new Buffer(signHash.substr(2,signHash.length),'hex');
    var signature = secp256k1.sign(hashBuffer,privKey);
    v = intToHex(signature.recovery);
    tx['signature'] = '0x'+signature.signature.toString('hex')+v.substr(2,v.length);
    return tx
};

var intToHex = function (i) {
    assert(i % 1 === 0, 'number is not a integer');
    assert(i >= 0, 'number must be positive');
    var hex = i.toString(16);
    if (hex.length % 2) {
        hex = '0' + hex
    }
    return '0x' + hex
};

var random_16bits = function(){
    var num = Math.random().toString();
    if (num.substr(num.length - 16, 1) === '0' || num.length <= 17) {
        return random_16bits();
    }
    return num.substring(num.length - 16);
};

module.exports = {
    padLeft: padLeft,
    padRight: padRight,
    intToHex: intToHex,
    toHex: toHex,
    toDecimal: toDecimal,
    fromDecimal: fromDecimal,
    toUtf8: toUtf8,
    toAscii: toAscii,
    fromUtf8: fromUtf8,
    fromAscii: fromAscii,
    transformToFullName: transformToFullName,
    extractDisplayName: extractDisplayName,
    extractTypeName: extractTypeName,
    toWei: toWei,
    fromWei: fromWei,
    toBigNumber: toBigNumber,
    toTwosComplement: toTwosComplement,
    toAddress: toAddress,
    isBigNumber: isBigNumber,
    isStrictAddress: isStrictAddress,
    isAddress: isAddress,
    isChecksumAddress: isChecksumAddress,
    toChecksumAddress: toChecksumAddress,
    isFunction: isFunction,
    isString: isString,
    isObject: isObject,
    isBoolean: isBoolean,
    isArray: isArray,
    isJson: isJson,
    sign: sign,
    random_16bits: random_16bits
};
 at SyntaxError: Unexpected token (41:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/hpc-web3/node_modules/hpc-web3/index.js. Coverage (Term): 40% Coverage (LOC): 57%
*- File /root/Targets/hpc-web3/node_modules/hpc-web3/lib/web3.js. Coverage (Term): 8% Coverage (LOC): 5%
*- File /root/Targets/hpc-web3/node_modules/hpc-web3/lib/web3/requestmanager.js. Coverage (Term): 4% Coverage (LOC): 4%
*- File /root/Targets/hpc-web3/node_modules/hpc-web3/lib/web3/jsonrpc.js. Coverage (Term): 24% Coverage (LOC): 42%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
