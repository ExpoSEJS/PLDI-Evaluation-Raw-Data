
> uws@0.14.5 install /root/Targets/sensejs/node_modules/uws
> node-gyp rebuild > build_log.txt 2>&1 || exit 0

/root/Targets/sensejs
└─┬ sensejs@0.1.1 
  ├── coffee-script@1.12.7 
  ├── connect@1.7.1 
  ├─┬ ejs-extension@0.0.1 
  │ └── ejs@2.5.7 
  ├─┬ express@4.15.4 
  │ ├─┬ accepts@1.3.4 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ └── negotiator@0.6.1 
  │ ├── array-flatten@1.1.1 
  │ ├── content-disposition@0.5.2 
  │ ├── content-type@1.0.4 
  │ ├── cookie@0.3.1 
  │ ├── cookie-signature@1.0.6 
  │ ├─┬ debug@2.6.8 
  │ │ └── ms@2.0.0 
  │ ├── depd@1.1.1 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├─┬ finalhandler@1.0.5 
  │ │ └── unpipe@1.0.0 
  │ ├── fresh@0.5.0 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@1.1.5 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.4.0 
  │ ├── qs@6.5.0 
  │ ├── range-parser@1.2.0 
  │ ├─┬ send@0.15.4 
  │ │ ├── destroy@1.0.4 
  │ │ ├─┬ http-errors@1.6.2 
  │ │ │ └── inherits@2.0.3 
  │ │ └── mime@1.3.4 
  │ ├── serve-static@1.12.4 
  │ ├── setprototypeof@1.0.3 
  │ ├── statuses@1.3.1 
  │ ├─┬ type-is@1.6.15 
  │ │ └── media-typer@0.3.0 
  │ ├── utils-merge@1.0.0 
  │ └── vary@1.1.1 
  ├─┬ jade-extension@0.0.1 
  │ └─┬ jade@1.11.0 
  │   ├── character-parser@1.2.1 
  │   ├─┬ clean-css@3.4.28 
  │   │ ├─┬ commander@2.8.1 
  │   │ │ └── graceful-readlink@1.0.1 
  │   │ └─┬ source-map@0.4.4 
  │   │   └── amdefine@1.0.1 
  │   ├── commander@2.6.0 
  │   ├─┬ constantinople@3.0.2 
  │   │ └── acorn@2.7.0 
  │   ├─┬ jstransformer@0.0.2 
  │   │ ├── is-promise@2.1.0 
  │   │ └─┬ promise@6.1.0 
  │   │   └── asap@1.0.0 
  │   ├─┬ mkdirp@0.5.1 
  │   │ └── minimist@0.0.8 
  │   ├─┬ transformers@2.1.0 
  │   │ ├─┬ css@1.0.8 
  │   │ │ ├── css-parse@1.0.4 
  │   │ │ └── css-stringify@1.0.5 
  │   │ ├─┬ promise@2.0.0 
  │   │ │ └── is-promise@1.0.1 
  │   │ └─┬ uglify-js@2.2.5 
  │   │   ├─┬ optimist@0.3.7 
  │   │   │ └── wordwrap@0.0.3 
  │   │   └── source-map@0.1.43 
  │   ├─┬ uglify-js@2.8.29 
  │   │ ├── source-map@0.5.7 
  │   │ ├── uglify-to-browserify@1.0.2 
  │   │ └─┬ yargs@3.10.0 
  │   │   ├── camelcase@1.2.1 
  │   │   ├─┬ cliui@2.1.0 
  │   │   │ ├─┬ center-align@0.1.3 
  │   │   │ │ ├─┬ align-text@0.1.4 
  │   │   │ │ │ ├─┬ kind-of@3.2.2 
  │   │   │ │ │ │ └── is-buffer@1.1.5 
  │   │   │ │ │ ├── longest@1.0.1 
  │   │   │ │ │ └── repeat-string@1.6.1 
  │   │   │ │ └── lazy-cache@1.0.4 
  │   │   │ ├── right-align@0.1.3 
  │   │   │ └── wordwrap@0.0.2 
  │   │   ├── decamelize@1.2.0 
  │   │   └── window-size@0.1.0 
  │   ├── void-elements@2.0.1 
  │   └─┬ with@4.0.3 
  │     ├── acorn@1.2.2 
  │     └── acorn-globals@1.0.9 
  ├── mime@2.0.2 
  ├── qs@6.5.1 
  ├─┬ socket.io@2.0.3 
  │ ├─┬ engine.io@3.1.1 
  │ │ ├── accepts@1.3.3 
  │ │ ├── base64id@1.0.0 
  │ │ ├─┬ engine.io-parser@2.1.1 
  │ │ │ ├── after@0.8.2 
  │ │ │ ├── arraybuffer.slice@0.0.6 
  │ │ │ └── blob@0.0.4 
  │ │ ├── uws@0.14.5 
  │ │ └─┬ ws@2.3.1 
  │ │   ├── safe-buffer@5.0.1 
  │ │   └── ultron@1.1.0 
  │ ├── object-assign@4.1.1 
  │ ├── socket.io-adapter@1.1.1 
  │ ├─┬ socket.io-client@2.0.3 
  │ │ ├── backo2@1.0.2 
  │ │ ├── base64-arraybuffer@0.1.5 
  │ │ ├── component-bind@1.0.0 
  │ │ ├── component-emitter@1.2.1 
  │ │ ├─┬ engine.io-client@3.1.1 
  │ │ │ ├── component-inherit@0.0.3 
  │ │ │ ├── parsejson@0.0.3 
  │ │ │ ├── xmlhttprequest-ssl@1.5.3 
  │ │ │ └── yeast@0.1.2 
  │ │ ├── has-cors@1.1.0 
  │ │ ├── indexof@0.0.1 
  │ │ ├── object-component@0.0.3 
  │ │ ├─┬ parseqs@0.0.5 
  │ │ │ └─┬ better-assert@1.0.2 
  │ │ │   └── callsite@1.0.0 
  │ │ ├── parseuri@0.0.5 
  │ │ └── to-array@0.1.4 
  │ └─┬ socket.io-parser@3.1.2 
  │   ├── has-binary2@1.0.2 
  │   └── isarray@2.0.1 
  ├─┬ uglify-js@3.1.1 
  │ ├── commander@2.11.0 
  │ └── source-map@0.5.7 
  ├── uglifycss@0.0.27 
  └── yaml@0.3.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/sensejs/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.043 took 4.3477s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Invalid number (209:20) on program var fs = require('fs');
var path = require('path');
var singularize = require("../vendor/inflection").singularize;
var express = require('express');
var utils = require('./sense_utils');

var safe_merge = utils.safe_merge;
var Mapper = require('./route_mapper').Mapper;
require('coffee-script');

function Sense() {
  global.sense = this;

  this.locales     = require('./locales');
  this.utils       = require('./sense_utils');

  this.ActionObserver = require('./action_observer');
  this.ActionObserver.init();

  this.controller  = require('./controller');
  this.extensions  = require('./extensions');
  this.generators  = require('./generators');
  this.tools       = require('./tools');
  this.logger      = require('./logger');
  this.routeMapper = new Mapper(app);
  this.helpers     = require('./helpers');

  process.nextTick(function () {
    this.models      = require('./models');
  }.bind(this));
}

exports.init = function (app) {
  if (arguments.length == 2) {
    app = arguments[1];
  }

  // globalize app object
  global.app = app;
  app.root = process.cwd();

  // create API publishing object
  new Sense();

  // run environment.{js|coffee} and environments/{test|development|production}.{js|coffee}
  configureApp();

  // controllers should be loaded before extensions
  sense.controller.init();
  // extensions should be loaded before server startup
  sense.extensions.init();

  // TODO: remove this publishing
  app.helpers = sense.helpers;

  // wtf???
  sense.ActionObserver.application_helper = path.existsSync(app.root + '/app/helpers/application_helper.js') ?
    require(app.root + '/app/helpers/application_helper.js') : {};

  // run config/initializers/*
  runInitializers();

  if (path.existsSync(app.root + '/config') && (path.existsSync(app.root + '/config/routes.js') || path.existsSync(app.root + '/config/routes.coffee'))) {
    sense.routeMapper.addRoutes(app.root + '/config/routes');
  }

  //if (process.env.JS_SOCKETS === 'on') {
    app.on('listening', hookSockets);
  //}

  process.nextTick(function () {

    sense.locales.init();
    sense.logger.init();
    sense.models.init();
    app.reloadModels = sense.models.init;

    loadObservers();

    if (app.enabled('merge javascripts')) {
      ensureDirClean(app.root + '/public' + app.set('jsDirectory') + 'cache');
    }

    if (app.enabled('merge stylesheets')) {
      ensureDirClean(app.root + '/public' + app.set('cssDirectory') + 'cache');
    }

  });
};

exports.createServer = function (options) {
  options = options || {};

  var keys, app,
      key = options.key || process.cwd() + '/config/tsl.key',
      cert = options.cert || process.cwd() + '/config/tsl.cert';

  if (path.existsSync(key) && path.existsSync(cert)) {
    keys = {
     key: fs.readFileSync(key).toString('utf8'),
     cert: fs.readFileSync(cert).toString('utf8')
    };
  }

  if (keys) {
    app = express.createServer(keys);
  } else {
    app = express.createServer();
  }

  exports.init(app);

  return app;
};

function configureApp() {
  var mainEnv = app.root + '/config/environment';
  requireIfExists(mainEnv + '.js') || requireIfExists(mainEnv + '.coffee');
  var supportEnv = app.root + '/config/environments/' + app.settings.env;
  requireIfExists(supportEnv + '.js') || requireIfExists(supportEnv + '.coffee');

  if (app.settings['view engine'] == 'ejs' && (!app.extensions || !app.extensions['ejs-extension'])) {
    // monkey patch ejs
    var ejs = require('ejs'), old_parse = ejs.parse;
    ejs.parse = function () {
      var str = old_parse.apply(this, Array.prototype.slice.call(arguments));
      return str.replace('var buf = [];', 'var buf = []; arguments.callee.buf = buf;');
    };
  }

  if (app.settings['view engine'] == 'jade' && (!app.extensions || !app.extensions['jade-extension'])) {
    // monkey patch jade
    var jade = require('jade'), old_parse = jade.Compiler.prototype.compile;
    jade.Compiler.prototype.compile = function () {
      var str = old_parse.apply(this, Array.prototype.slice.call(arguments));
      return 'arguments.callee.buf = buf;' + str;
    };
  }
}

function requireIfExists(module) {
  if (path.existsSync(module)) {
    require(module);
    return true;
  } else {
    return false;
  }
}

function runInitializers() {
  var Script = require('vm').Script,
    context = Script.createContext({
      global:  {}
    });
    if (process.cov) {
      context.__cov = __cov;
    }

  if (global.models) {
    for (var i in models) {
      context[i] = models[i];
    }
  }
  var initializersPath = app.root + '/config/initializers/';
  if (require('path').existsSync(initializersPath)) {
    fs.readdirSync(initializersPath).forEach(function (file) {
      var script_name = initializersPath + file;
      utils.runCode(script_name, context);
    });
    for (var i in context.global) {
      global[i] = context.global[i];
    }
  }
}

/**
 * Observer is a kind of controller, that listen for some event in
 * the system, for example: paypal, twitter or facebook observers
 * listens for callback from foreign service. Email observer may
 * listen some events related to emails.
 *
 * If you need app.on('someEvent') you should place this code in
 * APPROOT/app/observers/NAME_observer.js
 */
function loadObservers() {
  var dir = app.root + '/app/observers';
  path.exists(dir, function (exists) {
    if (exists) {
      fs.readdir(dir, function (err, files) {
        if (!err && files) {
          files.forEach(function (file) {
            require(path.join(dir, file));
          });
        }
      });
    }
  });
}

function ensureDirClean(dir) {
  path.exists(dir, function (exists) {
    if (exists) {
      fs.readdir(dir, function (err, files) {
        files.map(function (file) {
          return path.join(dir, file);
        }).forEach(fs.unlink);
      });
    } else {
      fs.mkdir(dir, 0755);
    }
  });
}

function hookSockets() {
  var io = app.Socket = require('socket.io').listen(app);
  io.configure('development', function(){
    io.set('transports', ['websocket', 'flashsocket', 'htmlfile', 'xhr-polling', 'jsonp-polling']);
    io.enable('browser client etag');
    io.set('log level', 2);
  });
  /*
  message = {
    c: 'foursquare',
    a: 'teste',
    m: {teste: 'ssss'}
  }
  */
  io.sockets.on('connection', function (client) {
    app.SC = client;
    client.on('request', function (m) {
      var ctl = sense.controller.load(m.c, m.c, '');
      ctl.performSocket(client, m);
    });

    client.on('disconnect', function () {
        console.warn('disconnecting');
    });

  });
} at SyntaxError: Invalid number (209:20)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.expect (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:597:10)
    at Parser.pp$3.parseExprList (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2152:16)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
