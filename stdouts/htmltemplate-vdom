/root/Targets/htmltemplate-vdom
└─┬ htmltemplate-vdom@1.0.0 
  ├── colors@1.1.2 
  ├── ent@2.2.0 
  ├─┬ escodegen@1.9.0 
  │ ├── esprima@3.1.3 
  │ ├── estraverse@4.2.0 
  │ ├── esutils@2.0.2 
  │ ├─┬ optionator@0.8.2 
  │ │ ├── deep-is@0.1.3 
  │ │ ├── fast-levenshtein@2.0.6 
  │ │ ├── levn@0.3.0 
  │ │ ├── prelude-ls@1.1.2 
  │ │ ├── type-check@0.3.2 
  │ │ └── wordwrap@1.0.0 
  │ └── source-map@0.5.7 
  ├── htmltemplate-parser@1.0.2 
  ├─┬ htmltemplate-transform@2.0.1 
  │ ├── find-index@1.1.0 
  │ └── object-assign@4.0.1 
  ├─┬ main-loop@3.4.0 
  │ ├─┬ error@4.4.0 
  │ │ ├── camelize@1.0.0 
  │ │ └── string-template@0.2.1 
  │ └─┬ raf@2.0.4 
  │   └── performance-now@0.1.4 
  ├── traverse@0.6.6 
  ├─┬ vdom-to-html@2.2.0 
  │ ├── escape-html@1.0.3 
  │ ├─┬ param-case@1.1.2 
  │ │ └─┬ sentence-case@1.1.3 
  │ │   └── lower-case@1.1.4 
  │ └── xtend@4.0.1 
  ├─┬ virtual-dom@2.1.1 
  │ ├── browser-split@0.0.1 
  │ ├─┬ ev-store@7.0.0 
  │ │ └── individual@3.0.0 
  │ ├─┬ global@4.3.2 
  │ │ ├─┬ min-document@2.19.0 
  │ │ │ └── dom-walk@0.1.1 
  │ │ └── process@0.5.2 
  │ ├── is-object@1.0.1 
  │ ├── next-tick@0.2.2 
  │ ├── x-is-array@0.1.0 
  │ └── x-is-string@0.1.0 
  └─┬ yargs@3.32.0 
    ├── camelcase@2.1.1 
    ├─┬ cliui@3.2.0 
    │ ├─┬ strip-ansi@3.0.1 
    │ │ └── ansi-regex@2.1.1 
    │ └── wrap-ansi@2.1.0 
    ├── decamelize@1.2.0 
    ├─┬ os-locale@1.4.0 
    │ └─┬ lcid@1.0.0 
    │   └── invert-kv@1.0.0 
    ├─┬ string-width@1.0.2 
    │ ├── code-point-at@1.1.0 
    │ └─┬ is-fullwidth-code-point@1.0.0 
    │   └── number-is-nan@1.0.1 
    ├── window-size@0.1.4 
    └── y18n@3.2.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/htmltemplate-vdom/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 7.000000000000001% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","Array"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.055 took 45.1711s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program var fs = require('fs');
var path = require('path');
var assert = require('assert');

var assign = require('object-assign');
var traverse = require('traverse');
var parser = require('htmltemplate-parser');

function inline(options) {
    var tags = options.includeTags;
    var resolvePath = options.resolvePath;

    assert(Array.isArray(tags), 'Expected options.includeTags to be an array of available include tags.');
    assert.equal(typeof resolvePath, 'function', 'Expected options.resolvePath to be a function.');

    var blocks = [];

    function transform(node, isNested) {
        if (this.isLeaf) {
            return;
        }

        var state = this.state;

        // On each include call a TMPL_BLOCK definition is created in the top
        // level scope which is then TMPL_INLINEd into the original location.
        // Block paths are namespaced to avoid duplication.
        if (this.isRoot && !isNested) {
            state.parentFilePath = state.rootFilepath;

            this.after(function(root) {
                var uniqueBlocks = deduplicate(blocks, function(block) {
                    return block.id;
                });

                this.update(
                    uniqueBlocks
                        .map(function(block) {
                            return {
                                type: 'Tag',
                                name: 'TMPL_BLOCK',
                                attributes: [
                                    {
                                        type: 'SingleAttribute',
                                        name: block.id
                                    }
                                ],
                                content: block.content
                            };
                        })
                        .concat(root)
                );

                blocks = [];
            });
        }

        if (isBlockTag(node)) {
            this.after(function() {
                var blockName = getPrimaryAttributeValue(node.attributes);

                var id = filepathAsBlockId(
                    getLocalBlockIdentifier(blockName, state.parentFilePath, state.rootFilepath)
                );

                blocks.push({
                    id: id,
                    content: node.content
                });

                this.update({
                    type: 'Text',
                    content: '',
                    position: node.position
                });
            });
        }

        if (tags.indexOf(node.name) !== -1) {
            var blockName = getPrimaryAttributeValue(node.attributes);
            var filepath = resolvePath(node.name, state.parentFilePath, blockName);
            var extname = path.extname(filepath);

            var isFileInclude = (
                extname === '.inc' ||
                extname === '.tmpl'
            );

            var id = filepathAsBlockId(
                // Resolving the included filepath against root filepath to
                // have both human-readable output and disregard project
                // location.
                isFileInclude ?
                    path.relative(path.dirname(state.rootFilepath), filepath) :
                    // Local TMPL_BLOCK calls are namespaced and renamed to
                    // `%blockname.local` for a safer deduplication.
                    getLocalBlockIdentifier(blockName, state.parentFilePath, state.rootFilepath)
            );

            if (isFileInclude) {
                blocks.push({
                    id: id,
                    content: getFileBlockContent(filepath, state, transform)
                });
            }

            var attributes = node.attributes.map(function(attribute) {
                if (isPrimaryAttribute(attribute)) {
                    return {
                        type: 'SingleAttribute',
                        name: id
                    };
                } else {
                    return attribute;
                }
            });

            this.update({
                type: 'Tag',
                name: 'TMPL_INLINE',
                attributes: attributes
            });
        }
    }

    return transform;

    function getFileBlockContent(filepath, state, transform) {
        var ast = parser.parse(
            fs.readFileSync(filepath, 'utf8'),
            state.parserOptions
        );

        return traverse(ast).map(function(n) {
            this.state = assign({}, state, {
                parentFilePath: filepath
            });

            transform.call(this, n, true);
        });
    }
}

function getLocalBlockIdentifier(name, parentFilePath, rootFilepath) {
    return path.join(
        path.relative(path.dirname(rootFilepath), parentFilePath),
        name + '.local'
    );
}

function deduplicate(array, predicate) {
    var seen = {};

    return array.filter(function(item, index) {
        var value = predicate(item, index);

        if (value in seen) {
            return false;
        } else {
            seen[value] = true;
            return true;
        }
    });
}

function isBlockTag(node) {
    return (
        node.type === 'Tag' &&
        node.name === 'TMPL_BLOCK'
    );
}

function isPrimaryAttribute(attribute) {
    return (
        attribute.type === 'SingleAttribute' ||
        (
            attribute.type === 'PairAttribute' &&
            attribute.name === 'name'
        )
    );
}

function getPrimaryAttributeValue(attributes) {
    var primary = attributes.filter(isPrimaryAttribute)[0];

    if (primary) {
        return primary.value || primary.name;
    } else {
        return null;
    }
}

function filepathAsBlockId(string) {
    return string.replace(/[^a-zA-Z0-9_]/g, '_');
}

module.exports = inline;
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/htmltemplate-vdom/node_modules/htmltemplate-vdom/index.js. Coverage (Term): 67% Coverage (LOC): 83%
*- File /root/Targets/htmltemplate-vdom/node_modules/htmltemplate-vdom/lib/render.js. Coverage (Term): 27% Coverage (LOC): 44%
*- File /root/Targets/htmltemplate-vdom/node_modules/htmltemplate-vdom/lib/compile.js. Coverage (Term): 80% Coverage (LOC): 100%
*- File /root/Targets/htmltemplate-vdom/node_modules/htmltemplate-vdom/lib/generator/index.js. Coverage (Term): 13% Coverage (LOC): 15%
*- File /root/Targets/htmltemplate-vdom/node_modules/escodegen/escodegen.js. Coverage (Term): 6% Coverage (LOC): 14%
*- File /root/Targets/htmltemplate-vdom/node_modules/estraverse/estraverse.js. Coverage (Term): 20% Coverage (LOC): 45%
*- File /root/Targets/htmltemplate-vdom/node_modules/esutils/lib/utils.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/htmltemplate-vdom/node_modules/esutils/lib/ast.js. Coverage (Term): 12% Coverage (LOC): 17%
*- File /root/Targets/htmltemplate-vdom/node_modules/esutils/lib/code.js. Coverage (Term): 42% Coverage (LOC): 79%
*- File /root/Targets/htmltemplate-vdom/node_modules/esutils/lib/keyword.js. Coverage (Term): 10% Coverage (LOC): 25%
*- File /root/Targets/htmltemplate-vdom/node_modules/traverse/index.js. Coverage (Term): 10% Coverage (LOC): 18%
*- File /root/Targets/htmltemplate-vdom/node_modules/ent/index.js. Coverage (Term): 96% Coverage (LOC): 100%
*- File /root/Targets/htmltemplate-vdom/node_modules/ent/encode.js. Coverage (Term): 16% Coverage (LOC): 16%
*- File /root/Targets/htmltemplate-vdom/node_modules/ent/decode.js. Coverage (Term): 19% Coverage (LOC): 24%
*- File /root/Targets/htmltemplate-vdom/node_modules/htmltemplate-parser/parser.js. Coverage (Term): 0% Coverage (LOC): 0%
*- File /root/Targets/htmltemplate-vdom/node_modules/htmltemplate-transform/index.js. Coverage (Term): 61% Coverage (LOC): 83%
*- File /root/Targets/htmltemplate-vdom/node_modules/htmltemplate-transform/lib/transform.js. Coverage (Term): 25% Coverage (LOC): 33%
*- File /root/Targets/htmltemplate-vdom/node_modules/htmltemplate-transform/plugins/jpath.js. Coverage (Term): 13% Coverage (LOC): 15%
*- File /root/Targets/htmltemplate-vdom/node_modules/object-assign/index.js. Coverage (Term): 21% Coverage (LOC): 27%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
