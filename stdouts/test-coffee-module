/root/Targets/test-coffee-module
└─┬ test-coffee-module@1.0.2 
  ├── bluebird@3.5.0 
  ├─┬ chai@3.4.1 
  │ ├── assertion-error@1.0.2 
  │ ├─┬ deep-eql@0.1.3 
  │ │ └── type-detect@0.1.1 
  │ └── type-detect@1.0.0 
  ├── chai-as-promised@5.2.0 
  ├── chai-things@0.2.0 
  ├─┬ coffee-coverage@1.0.1 
  │ ├─┬ argparse@1.0.9 
  │ │ └── sprintf-js@1.0.3 
  │ ├── lodash@3.10.1 
  │ ├─┬ minimatch@3.0.4 
  │ │ └─┬ brace-expansion@1.1.8 
  │ │   ├── balanced-match@1.0.0 
  │ │   └── concat-map@0.0.1 
  │ └── pkginfo@0.4.1 
  ├── coffee-script@1.12.7 
  ├── commander@2.11.0 
  ├─┬ istanbul@0.4.2 
  │ ├── abbrev@1.0.9 
  │ ├── async@1.5.2 
  │ ├─┬ escodegen@1.7.1 
  │ │ ├── esprima@1.2.5 
  │ │ ├── estraverse@1.9.3 
  │ │ ├── esutils@2.0.2 
  │ │ ├─┬ optionator@0.5.0 
  │ │ │ ├── deep-is@0.1.3 
  │ │ │ ├── fast-levenshtein@1.0.7 
  │ │ │ ├── levn@0.2.5 
  │ │ │ ├── prelude-ls@1.1.2 
  │ │ │ ├── type-check@0.3.2 
  │ │ │ └── wordwrap@0.0.3 
  │ │ └─┬ source-map@0.2.0 
  │ │   └── amdefine@1.0.1 
  │ ├── esprima@2.7.3 
  │ ├─┬ fileset@0.2.1 
  │ │ ├─┬ glob@5.0.15 
  │ │ │ ├── inflight@1.0.6 
  │ │ │ └── path-is-absolute@1.0.1 
  │ │ └── minimatch@2.0.10 
  │ ├─┬ handlebars@4.0.10 
  │ │ ├─┬ optimist@0.6.1 
  │ │ │ ├── minimist@0.0.10 
  │ │ │ └── wordwrap@0.0.3 
  │ │ ├── source-map@0.4.4 
  │ │ └─┬ uglify-js@2.8.29 
  │ │   ├── source-map@0.5.7 
  │ │   ├── uglify-to-browserify@1.0.2 
  │ │   └─┬ yargs@3.10.0 
  │ │     ├── camelcase@1.2.1 
  │ │     ├─┬ cliui@2.1.0 
  │ │     │ ├─┬ center-align@0.1.3 
  │ │     │ │ ├─┬ align-text@0.1.4 
  │ │     │ │ │ ├─┬ kind-of@3.2.2 
  │ │     │ │ │ │ └── is-buffer@1.1.5 
  │ │     │ │ │ ├── longest@1.0.1 
  │ │     │ │ │ └── repeat-string@1.6.1 
  │ │     │ │ └── lazy-cache@1.0.4 
  │ │     │ ├── right-align@0.1.3 
  │ │     │ └── wordwrap@0.0.2 
  │ │     ├── decamelize@1.2.0 
  │ │     └── window-size@0.1.0 
  │ ├─┬ js-yaml@3.10.0 
  │ │ └── esprima@4.0.0 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ ├── nopt@3.0.6 
  │ ├─┬ once@1.4.0 
  │ │ └── wrappy@1.0.2 
  │ ├── resolve@1.1.7 
  │ ├─┬ supports-color@3.2.3 
  │ │ └── has-flag@1.0.0 
  │ ├─┬ which@1.3.0 
  │ │ └── isexe@2.0.0 
  │ └── wordwrap@1.0.0 
  ├─┬ mocha@2.3.4 
  │ ├── commander@2.3.0 
  │ ├─┬ debug@2.2.0 
  │ │ └── ms@0.7.1 
  │ ├── diff@1.4.0 
  │ ├── escape-string-regexp@1.0.2 
  │ ├─┬ glob@3.2.3 
  │ │ ├── graceful-fs@2.0.3 
  │ │ ├── inherits@2.0.3 
  │ │ └─┬ minimatch@0.2.14 
  │ │   ├── lru-cache@2.7.3 
  │ │   └── sigmund@1.0.1 
  │ ├── growl@1.8.1 
  │ ├─┬ jade@0.26.3 
  │ │ ├── commander@0.6.1 
  │ │ └── mkdirp@0.3.0 
  │ ├─┬ mkdirp@0.5.0 
  │ │ └── minimist@0.0.8 
  │ └── supports-color@1.2.0 
  ├─┬ sinon@1.17.2 
  │ ├── formatio@1.1.1 
  │ ├── lolex@1.3.2 
  │ ├── samsam@1.1.2 
  │ └─┬ util@0.10.3 
  │   └── inherits@2.0.1 
  ├── sinon-chai@2.8.0 
  └─┬ winston@2.3.1 
    ├── async@1.0.0 
    ├── colors@1.0.3 
    ├── cycle@1.0.3 
    ├── eyes@0.1.8 
    ├── isstream@0.1.2 
    └── stack-trace@0.0.10 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/test-coffee-module/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0477 took 2.2744s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:96) on program Promise = require 'bluebird'
program = require 'commander'
winston = require 'winston'

# Bundles mocha, chai, sinon, sinon-chai, chai-things, chai-as-promised, istanbul and
# coffee-coverage into one command.
module.exports = class TestRunner
  # Creates a new TestRunner
  # @param (options) [Object] Options
  # @option options coverage [Boolean] Whether to create coverage report [false]
  # @option options debug [Boolean] Whether to output debug information [false]
  constructor: (options) ->
    @options =
      coverage: options.coverage?
      debug: options.debug?

    if @options.debug
      winston.level = 'debug'

  # Run tests from a set of files
  # @param files [Array<String>] Test files or globs for test files
  # @return [Promise] A Promise resolving when the tests are done
  run: (files) ->
    testSteps = ['load-test-utils', 'run-test']
    if @options.coverage
      testSteps = ['prepare-coverage'].concat testSteps.concat ['write-coverage', 'create-report']

    testPromise = Promise.resolve files
    winston.debug 'Running steps ' + testSteps + ' on files ' + files
    for stepName in testSteps
      do (stepName) ->
        testPromise = testPromise.then (files) ->
          Step = require './steps/' + stepName
          step = new Step()
          winston.debug "Running step " + stepName
          step.run(files)

    testPromise.catch (err) ->
      winston.debug err
      throw err

    return testPromise

  # Run test files based on command line arguments.
  # Test files will default ['src/**/*.[sS]pec.coffee'] if empty
  # Available flags are "-c"/"--coverage" and "-d"/"--debug"
  # @overload run(args, cb)
  #   @param args [Array] The arguments to the script
  #   @param cb [Function] A node-style callback that will be called with any error encountered
  # @overload run(args)
  #   @param args [Array] The arguments to the script.
  #   @return [Promise] A promise that rejects with any errors encountered
  @run: (args = [], cb) ->
    program
    .version require('../package.json').version
    .usage '[options] <files...>'
    .option '-c, --coverage', 'create a coverage report'
    .option '-d, --debug', 'log output useful for debuggin'
    .parse args

    if program.args.length is 0
      program.args = ['src/**/*.[sS]pec.coffee'] #, 'examples/**/*.[sS]pec.coffee']

    testPromise = new TestRunner(program).run(program.args)

    if cb?
      testPromise
      .then -> cb()
      .catch cb
      return
    else
      return testPromise
 at SyntaxError: Unexpected token (1:96)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:61)
    at Parser.pp$1.parseExpressionStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:966:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:730:24)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
    at Parser.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:516:17)
    at Object.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:3098:39)
    at convert (/root/ExpoSE/lib/Tropigate/bin/main.js:50:18)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
