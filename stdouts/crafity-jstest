/root/Targets/crafity-jstest
├── ansi@0.2.1 
└─┬ crafity-core@0.1.8 
  └── crafity-jstest@0.1.14 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/crafity-jstest/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0917 took 4.1451s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (17:3) on program /*jslint node: true, bitwise: true, unparam: true, maxerr: 50, white: true */
"use strict";

/*!
 * crafity-jstest - Test Framework for JavaScript
 * Copyright(c) 2013 Crafity
 * Copyright(c) 2013 Bart Riemens
 * Copyright(c) 2013 Galina Slavova
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var core = require('crafity-core')
	, assert = require('./crafity.jstest.assert.js')
	, formatters = require('./crafity.jstest.formatters.js')
	, TestReport = require('./crafity.jstest.TestReport.js')
	, jslint = require('./crafity.jstest.jslint.js')
	, EventEmitter = require('events').EventEmitter;

/**
 * The test context
 * @param [name] String The name of the context
 * @constructor
 */
function Context(name) {
	var self = this;

	this.onStart = new core.Event();
	this.onTestStarted = new core.Event();
	this.onTestFinished = new core.Event();
	this.onComplete = new core.Event();

	this.run = function run(tests, callback) {
		var formatter = formatters.create();

		if (callback) {
			self.on("complete", callback);
		} else {
			self.on("complete", formatter.format);
		}
		self.on("testFinished", formatter.format);

		var workerPool = new core.Workerpool("jstest", true),
			report = new TestReport();

		if (name) {
			formatter.format(null, "\n\rExecuting '" + name + "' with " + Object.keys(tests).length + " test(s):\n\r");
		} else {
			formatter.format(null, "\n\rExecuting " + Object.keys(tests).length + " test(s):\n\r");
		}

		if (!Object.keys(tests).length) {
			formatter.format("     No tests defined...");
			self.emit("complete", null, report.data);
			if (callback) {
				self.removeListener("complete", callback);
			} else {
				self.removeListener("complete", formatter.format);
			}
			self.removeListener("testFinished", formatter.format);
			return;
		}

		core.objects.forEach(tests, function (test, name) {
			if (test instanceof Function) {
				test.report = report.addTest(name);
				test.report.name = name;
				workerPool.add(test);
			}
		});

		workerPool.onWorkItemStarted.subscribe(function (err, workitem) {
			workitem.report.context = name;
			workitem.report.start();
			self.emit("testStarted", err, workitem);
		});
		workerPool.onWorkItemCompleted.subscribe(function (err, workitem) {
			workitem.report.stop();
			if (err) {
				workitem.report.failed(err);
			} else {
				workitem.report.succeeded();
			}
			self.emit("testFinished", err, report.data.tests[workitem.report.name]);
		});

		workerPool.onWorkStarted.subscribe(function (ex, result) {
			report.start();
			self.emit("start", ex, result);
		});

		workerPool.onWorkCompleted.subscribe(function (err) {
			report.stop();
			workerPool.stop();
			self.emit("complete", err, report.data);
			if (callback) {
				self.removeListener("complete", callback);
			} else {
				self.removeListener("complete", formatter.format);
			}
			self.removeListener("testFinished", formatter.format);
			formatter.print();
		});

		workerPool.work(10000);
	};
}
Context.prototype = EventEmitter.prototype;

function createContext(name) {
	var jstest = new Context(name);
	jstest.formatters = formatters;
	jstest.assert = assert;
	jstest.jslint = jslint;
	jstest.getScript = function (callback) {
		core.modules.getScript(module, callback);
	};
	jstest.createContext = createContext;
	return  jstest;
}

var jstestModule = createContext();
jstestModule.version = "0.1.13";
jstestModule.fullname = "crafity-jstest";

module.exports = jstestModule;

 at SyntaxError: Unexpected token (17:3)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
