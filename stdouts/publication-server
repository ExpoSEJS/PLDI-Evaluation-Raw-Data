
> uws@0.14.5 install /root/Targets/publication-server/node_modules/uws
> node-gyp rebuild > build_log.txt 2>&1 || exit 0

/root/Targets/publication-server
└─┬ publication-server@1.5.0 
  ├── ejson@2.1.2 
  ├── node-uuid@1.4.8 
  ├─┬ primus@6.1.0 
  │ ├─┬ access-control@1.0.0 
  │ │ ├── millisecond@0.1.2 
  │ │ └── vary@1.1.2 
  │ ├── asyncemit@3.0.1 
  │ ├─┬ create-server@1.0.1 
  │ │ └── connected@0.0.2 
  │ ├─┬ diagnostics@1.1.0 
  │ │ ├─┬ colorspace@1.0.1 
  │ │ │ ├─┬ color@0.8.0 
  │ │ │ │ ├── color-convert@0.5.3 
  │ │ │ │ └─┬ color-string@0.3.0 
  │ │ │ │   └── color-name@1.1.3 
  │ │ │ └── text-hex@0.0.0 
  │ │ ├─┬ enabled@1.0.2 
  │ │ │ └── env-variable@0.0.3 
  │ │ └─┬ kuler@0.0.0 
  │ │   └── colornames@0.0.2 
  │ ├── eventemitter3@2.0.3 
  │ ├── forwarded-for@1.0.1 
  │ ├─┬ fusing@1.0.0 
  │ │ ├── emits@3.0.0 
  │ │ └─┬ predefine@0.1.2 
  │ │   └── extendible@0.1.1 
  │ ├─┬ setheader@0.0.4 
  │ │ └── debug@0.7.4 
  │ ├── ultron@1.1.0 
  │ └── yeast@0.1.2 
  ├── underscore@1.8.3 
  └── uws@0.14.5 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/publication-server/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0426 took 3.2353s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:6) on program 'use strict';

const _ = require('underscore');
const assert = require('assert');
const Primus = require('primus');

const Session = require('./session');

/**
 * A PublicationServer handles registering publications and creating sessions
 * for incoming connections.
 */
class PublicationServer {
  /**
   * Creates the PublicationServer with the given function for authenticating
   * new connections.
   *
   * @param {Function} authFn The function for authenticating connections.
   * @param {String} mountPath The URL to mount the listener on.
   * @param {Function} errHandler An error handler to pass publication errors
   *    to.
   * @param {Object} server The HTTP server to allow Primus to listen on.
   */
  constructor({authFn, mountPath, errHandler, server} = {}) {
    assert(authFn, 'Must provide an authorization function');

    this._subscriptions = {};
    this._authFn = (req, done) => {
      authFn(req, (err, userId) => {
        // Make the userId available to the session and any publications.
        req.userId = userId;
        done(err);
      });
    };
    this._mountPath = mountPath;
    this._errHandler = errHandler;

    this._primus = new Primus(server, {
      authorization: this._authFn,
      pathname: this._mountPath,
      parser: 'EJSON',
      transformer: 'uws'
    });

    this._primus.on('connection', (spark) => {
      new Session({server: this, spark});
    });
  }

  /**
   * Registers the given publication so that clients can subscribe to it.
   *
   * @param {String} name The name of the publication, it must be globally
   *    unique.
   * @param {Function} func The publication function to be run for
   *    subscriptions.
   */
  publish(name, func) {
    if (this._subscriptions[name]) throw new Error(`handler ${name} already defined`);

    this._subscriptions[name] = func;
  }

  /**
   * Broadcast a message to all connected clients.
   *
   * @param {Object} msg The message to send to all connected clients.
   */
  broadcast(msg) {
    this._primus.write(msg);
  }

  /**
   * Gracefully shutdowns the publication server.
   *
   * @param {Number} timeout The amount of time we'll give the WebSocket server
   *    to gracefully shutdown.
   * @param {Object} options Any shutdown options that you'd like to pass when
   *    shutting the server down. These are passed through to the Primus
   *    instance, so see https://github.com/primus/primus#destruction for
   *    details.
   */
  shutdown(timeout, options) {
    this._primus.destroy(_.defaults(options, {
      // Don't force the HTTP server to close by default, that's not our job.
      close: false,
      timeout
    }));
  }
}

module.exports = PublicationServer; at SyntaxError: Unexpected token (4:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
