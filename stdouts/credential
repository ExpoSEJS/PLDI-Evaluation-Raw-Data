/root/Targets/credential
└─┬ credential@2.0.0 
  ├── commander@2.11.0 
  ├── mout@1.0.0 
  ├── pify@2.3.0 
  ├─┬ pinkie-promise@2.0.1 
  │ └── pinkie@2.0.4 
  └── pluck-keys@0.0.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/credential/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 25% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0562 took 6.7478s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: 'with' in strict mode (32:2) on program   /**
   * constantTimeCompare(x, y)
   *
   *  Created by Eric Elliott for the book,
   *  Programming JavaScript Applications" (O'Reilly)
   *
   * MIT license http://opensource.org/licenses/MIT
   */
  
// Regardless of the string size the number of character iterations/comparisons
// ought to be equal to or higher than the maximum string size.
var MAX_KEY_CHARS = 1024;

  /*
   * Compare two strings, x and y with a constant-time
   * algorithm to prevent attacks based on timing statistics.
   *
   * This really ought to be in C; see:
   *     https://github.com/joyent/node/issues/8560
   *     http://stackoverflow.com/questions/18476402
   *
   * See also:
   *     http://jsperf.com/constant-time-string-comparison
   *     
   * @param  {String} x
   * @param  {String} y
   * @return {Boolean}
   */
module.exports = function constantTimeCompare(a, b) {
  // Using with{} nixes some V8 optimizations that would otherwise undermine
  // our intentions here.
  with({}) {
    // Add at least one character so that there's at least one thing to modulo over.
    a += " ";
    b += " ";
    var aLen = a.length,
        bLen = b.length,
        match = aLen === bLen ? 1 : 0,
        i = Math.max(aLen, bLen, MAX_KEY_CHARS);
    while (i--) {
      // We repeat the comparison over the strings with % so that we do not compare
      // a number to NaN, since that has different timing that comparing two numbers.
      match &= a.charCodeAt( i % aLen ) === b.charCodeAt( i % bLen ) ? 1 : 0;
    }
    return match === 1;
  }
};
 at SyntaxError: 'with' in strict mode (32:2)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$1.parseWithStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:932:27)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:708:32)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
    at Parser.pp$3.parseFunctionBody (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2105:24)
    at Parser.parseFunctionBody (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:14:32)
    at Parser.pp$1.parseFunction (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1065:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1810:19)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/credential/node_modules/credential/credential.js. Coverage (Term): 9% Coverage (LOC): 5%
*- File /root/Targets/credential/node_modules/mout/object/mixIn.js. Coverage (Term): 33% Coverage (LOC): 40%
*- File /root/Targets/credential/node_modules/mout/object/forOwn.js. Coverage (Term): 46% Coverage (LOC): 55%
*- File /root/Targets/credential/node_modules/mout/object/hasOwn.js. Coverage (Term): 54% Coverage (LOC): 80%
*- File /root/Targets/credential/node_modules/mout/object/forIn.js. Coverage (Term): 18% Coverage (LOC): 19%
*- File /root/Targets/credential/node_modules/pify/index.js. Coverage (Term): 9% Coverage (LOC): 14%
*- File /root/Targets/credential/node_modules/pinkie-promise/index.js. Coverage (Term): 86% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
