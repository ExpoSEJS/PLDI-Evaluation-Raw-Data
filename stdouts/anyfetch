
> dtrace-provider@0.3.2 install /root/Targets/anyfetch/node_modules/dtrace-provider
> node scripts/install.js


> dtrace-provider@0.8.5 install /root/Targets/anyfetch/node_modules/bunyan/node_modules/dtrace-provider
> node scripts/install.js

/root/Targets/anyfetch
└─┬ anyfetch@2.1.11 
  ├── auto-load@1.1.0 
  ├── dotenv@0.5.1 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  ├── rarity@2.1.1 
  ├─┬ restify@2.8.5 
  │ ├── assert-plus@0.1.5 
  │ ├─┬ backoff@2.5.0 
  │ │ └── precond@0.2.3 
  │ ├─┬ bunyan@1.8.12 
  │ │ ├─┬ dtrace-provider@0.8.5 
  │ │ │ └── nan@2.7.0 
  │ │ ├── moment@2.18.1 
  │ │ ├─┬ mv@2.1.1 
  │ │ │ ├── ncp@2.0.0 
  │ │ │ └─┬ rimraf@2.4.5 
  │ │ │   └─┬ glob@6.0.4 
  │ │ │     ├── inflight@1.0.6 
  │ │ │     ├─┬ minimatch@3.0.4 
  │ │ │     │ └─┬ brace-expansion@1.1.8 
  │ │ │     │   ├── balanced-match@1.0.0 
  │ │ │     │   └── concat-map@0.0.1 
  │ │ │     └── path-is-absolute@1.0.1 
  │ │ └── safe-json-stringify@1.0.4 
  │ ├─┬ csv@0.4.6 
  │ │ ├── csv-generate@0.0.6 
  │ │ ├── csv-parse@1.2.3 
  │ │ ├── csv-stringify@0.0.8 
  │ │ └── stream-transform@0.1.2 
  │ ├── deep-equal@0.2.2 
  │ ├─┬ dtrace-provider@0.3.2 
  │ │ └── nan@1.3.0 
  │ ├── escape-regexp-component@1.0.2 
  │ ├── formidable@1.1.1 
  │ ├─┬ http-signature@0.10.1 
  │ │ ├── asn1@0.1.11 
  │ │ └── ctype@0.5.3 
  │ ├── keep-alive-agent@0.0.1 
  │ ├── lru-cache@2.7.3 
  │ ├── mime@1.4.1 
  │ ├── negotiator@0.4.9 
  │ ├── node-uuid@1.4.8 
  │ ├─┬ once@1.4.0 
  │ │ └── wrappy@1.0.2 
  │ ├── qs@1.2.2 
  │ ├── semver@2.3.2 
  │ ├── spdy@1.32.5 
  │ ├── tunnel-agent@0.4.3 
  │ └─┬ verror@1.10.0 
  │   ├── assert-plus@1.0.0 
  │   ├── core-util-is@1.0.2 
  │   └── extsprintf@1.3.0 
  └─┬ supertest@0.15.0 
    ├── methods@1.1.2 
    └─┬ superagent@0.21.0 
      ├── component-emitter@1.1.2 
      ├── cookiejar@2.0.1 
      ├─┬ debug@2.6.9 
      │ └── ms@2.0.0 
      ├── extend@1.2.1 
      ├─┬ form-data@0.1.3 
      │ ├── async@0.9.2 
      │ ├─┬ combined-stream@0.0.7 
      │ │ └── delayed-stream@0.0.5 
      │ └── mime@1.2.11 
      ├── formidable@1.0.14 
      ├── methods@1.0.1 
      ├── mime@1.2.11 
      ├── qs@1.2.0 
      ├─┬ readable-stream@1.0.27-1 
      │ ├── inherits@2.0.3 
      │ ├── isarray@0.0.1 
      │ └── string_decoder@0.10.31 
      └── reduce-component@1.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/anyfetch/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","random","round"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.044 took 9.7738s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (9:4) on program /**
 * Module dependencies.
 */

var request = require('superagent')
  , util = require('util')
  , http = require('http')
  , https = require('https')
  , assert = require('assert')
  , Request = request.Request;

/**
 * Expose `Test`.
 */

module.exports = Test;

/**
 * Initialize a new `Test` with the given `app`,
 * request `method` and `path`.
 *
 * @param {Server} app
 * @param {String} method
 * @param {String} path
 * @api public
 */

function Test(app, method, path) {
  Request.call(this, method, path);
  this.redirects(0);
  this.buffer();
  this.app = app;
  this._fields = {};
  this._bodies = [];
  this._asserts = [];
  this.url = 'string' == typeof app
    ? app + path
    : this.serverAddress(app, path);
}

/**
 * Inherits from `Request.prototype`.
 */

Test.prototype.__proto__ = Request.prototype;

/**
 * Returns a URL, extracted from a server.
 *
 * @param {Server} app
 * @param {String} path
 * @returns {String} URL address
 * @api private
 */

Test.prototype.serverAddress = function(app, path){
  var addr = app.address();
  if (!addr) this._server = app.listen(0);
  var port = app.address().port;
  var protocol = app instanceof https.Server ? 'https' : 'http';
  return protocol + '://127.0.0.1:' + port + path;
};

/**
 * Expectations:
 *
 *   .expect(200)
 *   .expect(200, fn)
 *   .expect(200, body)
 *   .expect('Some body')
 *   .expect('Some body', fn)
 *   .expect('Content-Type', 'application/json')
 *   .expect('Content-Type', 'application/json', fn)
 *   .expect(fn)
 *
 * @return {Test}
 * @api public
 */

Test.prototype.expect = function(a, b, c){
  var self = this;

  // callback
  if ('function' == typeof a) {
    this._asserts.push(a);
    return this;
  }
  if ('function' == typeof b) this.end(b);
  if ('function' == typeof c) this.end(c);

  // status
  if ('number' == typeof a) {
    this._status = a;
    // body
    if ('function' != typeof b && arguments.length > 1) this._bodies.push(b);
    return this;
  }

  // header field
  if ('string' == typeof b || 'number' == typeof b || b instanceof RegExp) {
    if (!this._fields[a]) this._fields[a] = [];
    this._fields[a].push(b);
    return this;
  }

  // body
  this._bodies.push(a);

  return this;
};

/**
 * Defer invoking superagent's `.end()` until
 * the server is listening.
 *
 * @param {Function} fn
 * @api public
 */

Test.prototype.end = function(fn){
  var self = this;
  var server = this._server;
  var end = Request.prototype.end;

  end.call(this, function(err, res){
    if (err) return fn(err);
    if (server) return server.close(assert);

    assert();

    function assert(){
      self.assert(res, fn);
    }
  });

  return this;
};

/**
 * Perform assertions and invoke `fn(err)`.
 *
 * @param {Response} res
 * @param {Function} fn
 * @api private
 */

Test.prototype.assert = function(res, fn){
  var status = this._status
    , fields = this._fields
    , bodies = this._bodies
    , expecteds
    , actual
    , re;

  // body
  for (var i = 0; i < bodies.length; i++) {
    var body = bodies[i];
    var isregexp = body instanceof RegExp;
    // parsed
    if ('object' == typeof body && !isregexp) {
      try {
        assert.deepEqual(body, res.body);
      } catch (err) {
        var a = util.inspect(body);
        var b = util.inspect(res.body);
        return fn(error('expected ' + a + ' response body, got ' + b, body, res.body));
      }
    } else {
      // string
      if (body !== res.text) {
        var a = util.inspect(body);
        var b = util.inspect(res.text);

        // regexp
        if (isregexp) {
          if (!body.test(res.text)) {
            return fn(error('expected body ' + b + ' to match ' + body, body, res.body));
          }
        } else {
          return fn(error('expected ' + a + ' response body, got ' + b, body, res.body));
        }
      }
    }
  }

  // fields
  for (var field in fields) {
    expecteds = fields[field];
    actual = res.header[field.toLowerCase()];
    if (null == actual) return fn(new Error('expected "' + field + '" header field'));
    for (var i = 0; i < expecteds.length; i++) {
      var fieldExpected = expecteds[i];
      if (fieldExpected == actual) continue;
      if (fieldExpected instanceof RegExp) re = fieldExpected;
      if (re && re.test(actual)) continue;
      if (re) return fn(new Error('expected "' + field + '" matching ' + fieldExpected + ', got "' + actual + '"'));
      return fn(new Error('expected "' + field + '" of "' + fieldExpected + '", got "' + actual + '"'));
    }
  }

  // status
  if (status && res.status !== status) {
    var a = http.STATUS_CODES[status];
    var b = http.STATUS_CODES[res.status];
    return fn(new Error('expected ' + status + ' "' + a + '", got ' + res.status + ' "' + b + '"'), res);
  }

  // asserts
  for (var i = 0; i < this._asserts.length; i++) {
    var check = this._asserts[i];
    var err;
    try {
      err = check(res);
    } catch(e) {
      err = e;
    }
    if (!err) continue;
    return fn(err instanceof Error ? err : new Error(err))
  }

  fn.call(this, null, res);
};

/**
 * Return an `Error` with `msg` and results properties.
 *
 * @param {String} msg
 * @param {Mixed} expected
 * @param {Mixed} actual
 * @return {Error}
 * @api private
 */

function error(msg, expected, actual) {
  var err = new Error(msg);
  err.expected = expected;
  err.actual = actual;
  err.showDiff = true;
  return err;
}

 at SyntaxError: Unexpected token (9:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/anyfetch/node_modules/anyfetch/lib/index.js. Coverage (Term): 16% Coverage (LOC): 17%
*- File /root/Targets/anyfetch/node_modules/anyfetch/config/configuration.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/anyfetch/node_modules/dotenv/lib/main.js. Coverage (Term): 23% Coverage (LOC): 35%
*- File /root/Targets/anyfetch/node_modules/anyfetch/lib/helpers/extend-defaults.js. Coverage (Term): 96% Coverage (LOC): 100%
*- File /root/Targets/anyfetch/node_modules/anyfetch/lib/helpers/safe-verb.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/anyfetch/node_modules/anyfetch/lib/mappings.js. Coverage (Term): 3% Coverage (LOC): 3%
*- File /root/Targets/anyfetch/node_modules/supertest/index.js. Coverage (Term): 22% Coverage (LOC): 24%
*- File /root/Targets/anyfetch/node_modules/methods/index.js. Coverage (Term): 59% Coverage (LOC): 27%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
