/root/Targets/Olive
└─┬ Olive@0.2.0 
  ├─┬ coffeekup@0.3.1 
  │ └── coffee-script@1.12.7 
  ├─┬ express@2.4.6 
  │ ├─┬ connect@1.9.2 
  │ │ └── formidable@1.0.17 
  │ ├── mime@2.0.3 
  │ └── qs@6.5.1 
  ├── less@1.1.6 
  └─┬ socket.io@0.8.7 
    ├── policyfile@0.0.4 
    ├── redis@0.6.7 
    └─┬ socket.io-client@0.8.7 
      ├── uglify-js@1.0.6 
      ├── websocket-client@1.0.0 
      └── xmlhttprequest@1.2.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/Olive/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0368 took 3.91s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:96) on program express = require 'express'
kup = require 'coffeekup'
url = require 'url'


app = module.exports = express.createServer()
io = require('socket.io').listen app

# Configuration

app.configure ->
  app.set 'view engine', 'coffee'
  app.register '.coffee', kup.adapters.express
  app.use express.bodyParser()
  app.use express.methodOverride()
  app.use express.compiler { src: __dirname + '/public', enable: ['less'] }
  app.use app.router
  app.use express.static(__dirname + '/public')
  app.use express.favicon(__dirname + '/public/favicon.ico')

app.configure 'development', ->
  app.use express.errorHandler { dumpExceptions: true, showStack: true }

app.configure 'production', ->
  app.use express.errorHandler()


# Routes

app.get '/.:format?', (req, res) ->
  if req.params.format == "json"
    res.render 'index', layout: false
  else
    res.render 'index'

app.get '/colorpicker.:format?', (req, res) ->
  if req.params.format == "json"
    res.render 'colorpicker', layout: false
  else
    res.render 'colorpicker'

app.get '/about.:format?', (req, res) ->
  if req.params.format == "json"
    res.render 'about', layout: false
  else
    res.render 'about'


# Socket.IO
hsb =
  h: 60
  s: 100
  b: 94

io.sockets.on 'connection', (socket) ->
  socket.emit 'color_change', col: hsb
  socket.on 'update_me', () ->
    socket.emit 'color_change', col: hsb
  socket.on 'set_color', (data) ->
    hsb=data.change_color;
    socket.broadcast.emit 'update_color',  col: data.change_color



# Lets run this app!
app.listen process.env.PORT || 3000
console.log "Listening on port %d in %s mode...", app.address().port, app.settings.env
 at SyntaxError: Unexpected token (1:96)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:61)
    at Parser.pp$1.parseExpressionStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:966:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:730:24)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
    at Parser.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:516:17)
    at Object.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:3098:39)
    at convert (/root/ExpoSE/lib/Tropigate/bin/main.js:50:18)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
