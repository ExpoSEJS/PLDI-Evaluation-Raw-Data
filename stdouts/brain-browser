/root/Targets/brain-browser
└─┬ brain-browser@1.0.2 
  ├── commander@2.3.0 
  ├─┬ express@4.4.5 
  │ ├─┬ accepts@1.0.7 
  │ │ ├── mime-types@1.0.2 
  │ │ └── negotiator@0.4.7 
  │ ├── buffer-crc32@0.2.3 
  │ ├── cookie@0.1.2 
  │ ├── cookie-signature@1.0.4 
  │ ├─┬ debug@1.0.2 
  │ │ └── ms@0.6.2 
  │ ├── escape-html@1.0.1 
  │ ├── fresh@0.2.2 
  │ ├── merge-descriptors@0.0.2 
  │ ├── methods@1.0.1 
  │ ├── parseurl@1.0.1 
  │ ├── path-to-regexp@0.1.2 
  │ ├─┬ proxy-addr@1.0.1 
  │ │ └── ipaddr.js@0.1.2 
  │ ├── qs@0.6.6 
  │ ├── range-parser@1.0.0 
  │ ├─┬ send@0.4.3 
  │ │ ├─┬ finished@1.2.2 
  │ │ │ └── ee-first@1.0.3 
  │ │ └── mime@1.2.11 
  │ ├── serve-static@1.2.3 
  │ ├─┬ type-is@1.2.1 
  │ │ └── mime-types@1.0.0 
  │ ├── utils-merge@1.0.0 
  │ └── vary@0.1.0 
  └── lodash@2.4.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/brain-browser/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0418 took 5.0431s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var http = require('http');
var _ = require('lodash');
var express = require('express');
var fs = require('fs');
var path = require('path');
var util = require('util');
var program = require('commander');

function collect(val, memo) {
  if(val && val.indexOf('.') != 0) val = "." + val;
  memo.push(val);
  return memo;
}

program
  .option('-p, --port <port>', 'Port to run the file-browser. Default value is 8088')
  .option('-e, --exclude <exclude>', 'File extensions to exclude. To exclude multiple extension pass -e multiple times. e.g. ( -e .js -e .cs -e .swp) ', collect, [])
  .parse(process.argv);

var app = express();
var dir = process.cwd();
app.use(express.static(dir));       //app public directory
app.use(express.static(__dirname)); //module directory
var server = http.createServer(app);
if(!program.port) program.port = 9099;
server.listen(program.port);
console.log("Brain browser is running at http://localhost:" + program.port);

app.get('/view', function(req, res) {
 var nifti = req.query.nifti || '1'; 
 console.log('in function');
 res.redirect('static/?loc=' + nifti); 
});

app.get('/files', function(req, res) {
 var currentDir =  dir;
 var query = req.query.path || '';
 if (query) currentDir = path.join(dir, query);
 console.log("browsing ", currentDir);
 fs.readdir(currentDir, function (err, files) {
     if (err) {
        throw err;
      }
      var data = [];
      files
      .filter(function (file) {
          return true;
      }).forEach(function (file) {
        try {
                console.log("processing ", file);
                var isDirectory = fs.statSync(path.join(currentDir,file)).isDirectory();
                if (isDirectory) {
                  data.push({ Name : file, Class:"folder", IsDirectory: true, Path : path.join(query, file) });
                } else {

                  // Regular expression to find .nii.gz
                  var re = /.nii.gz/g;
                  if (re.test(file)) {
                      var ext = ".nii.gz"
                  } else {
                      var ext = path.extname(file);
                  }
                  if(program.exclude && _.contains(program.exclude, ext)) {
                    console.log("excluding file ", file);
                    return;
                  }
                  if(ext == ".nii" || ext == ".nii.gz"){
                     var fileclass = "brain";
                  } else {
                     var fileclass = "file";
                  }     
                  data.push({ Name : file, Ext : ext, IsDirectory: false, Class: fileclass, Path : path.join(query, file), Base:currentDir  });
                }

        } catch(e) {
          console.log(e); 
        }        
        
      });
      data = _.sortBy(data, function(f) { return f.Name });
      res.json({Data:data});
  });
});

app.get('/', function(req, res) {
 res.redirect('static/'); 
});
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
