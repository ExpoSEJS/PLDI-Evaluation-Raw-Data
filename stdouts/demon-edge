/root/Targets/demon-edge
└─┬ demon-edge@1.0.22 
  ├─┬ axios@0.15.3 
  │ └─┬ follow-redirects@1.0.0 
  │   └─┬ debug@2.6.9 
  │     └── ms@2.0.0 
  └─┬ browserify@13.3.0 
    ├── assert@1.4.1 
    ├─┬ browser-pack@6.0.2 
    │ ├─┬ combine-source-map@0.7.2 
    │ │ ├── convert-source-map@1.1.3 
    │ │ ├── inline-source-map@0.6.2 
    │ │ ├── lodash.memoize@3.0.4 
    │ │ └── source-map@0.5.7 
    │ └── umd@3.0.1 
    ├─┬ browser-resolve@1.11.2 
    │ └── resolve@1.1.7 
    ├─┬ browserify-zlib@0.1.4 
    │ └── pako@0.2.9 
    ├─┬ buffer@4.9.1 
    │ ├── base64-js@1.2.1 
    │ ├── ieee754@1.1.8 
    │ └── isarray@1.0.0 
    ├── cached-path-relative@1.0.1 
    ├─┬ concat-stream@1.5.2 
    │ ├── readable-stream@2.0.6 
    │ └── typedarray@0.0.6 
    ├─┬ console-browserify@1.1.0 
    │ └── date-now@0.1.4 
    ├── constants-browserify@1.0.0 
    ├─┬ crypto-browserify@3.11.1 
    │ ├─┬ browserify-cipher@1.0.0 
    │ │ ├─┬ browserify-aes@1.0.8 
    │ │ │ └── buffer-xor@1.0.3 
    │ │ ├─┬ browserify-des@1.0.0 
    │ │ │ └── des.js@1.0.0 
    │ │ └─┬ evp_bytestokey@1.0.3 
    │ │   └─┬ md5.js@1.3.4 
    │ │     └── hash-base@3.0.4 
    │ ├─┬ browserify-sign@4.0.4 
    │ │ ├── bn.js@4.11.8 
    │ │ ├── browserify-rsa@4.0.1 
    │ │ ├─┬ elliptic@6.4.0 
    │ │ │ ├── brorand@1.1.0 
    │ │ │ ├── hash.js@1.1.3 
    │ │ │ ├── hmac-drbg@1.0.1 
    │ │ │ ├── minimalistic-assert@1.0.0 
    │ │ │ └── minimalistic-crypto-utils@1.0.1 
    │ │ └─┬ parse-asn1@5.1.0 
    │ │   └── asn1.js@4.9.1 
    │ ├── create-ecdh@4.0.0 
    │ ├─┬ create-hash@1.1.3 
    │ │ ├── cipher-base@1.0.4 
    │ │ └─┬ ripemd160@2.0.1 
    │ │   └── hash-base@2.0.2 
    │ ├── create-hmac@1.1.6 
    │ ├─┬ diffie-hellman@5.0.2 
    │ │ └── miller-rabin@4.0.1 
    │ ├── pbkdf2@3.0.14 
    │ ├── public-encrypt@4.0.0 
    │ └── randombytes@2.0.5 
    ├── defined@1.0.0 
    ├── deps-sort@2.0.0 
    ├── domain-browser@1.1.7 
    ├── duplexer2@0.1.4 
    ├── events@1.1.1 
    ├─┬ glob@7.1.2 
    │ ├── fs.realpath@1.0.0 
    │ ├─┬ inflight@1.0.6 
    │ │ └── wrappy@1.0.2 
    │ ├─┬ minimatch@3.0.4 
    │ │ └─┬ brace-expansion@1.1.8 
    │ │   ├── balanced-match@1.0.0 
    │ │   └── concat-map@0.0.1 
    │ ├── once@1.4.0 
    │ └── path-is-absolute@1.0.1 
    ├─┬ has@1.0.1 
    │ └── function-bind@1.1.1 
    ├── htmlescape@1.1.1 
    ├── https-browserify@0.0.1 
    ├── inherits@2.0.3 
    ├─┬ insert-module-globals@7.0.1 
    │ ├── is-buffer@1.1.5 
    │ └─┬ lexical-scope@1.2.0 
    │   └── astw@2.2.0 
    ├─┬ JSONStream@1.3.1 
    │ ├── jsonparse@1.3.1 
    │ └── through@2.3.8 
    ├─┬ labeled-stream-splicer@2.0.0 
    │ ├── isarray@0.0.1 
    │ └── stream-splicer@2.0.0 
    ├─┬ module-deps@4.1.1 
    │ ├── detective@4.5.0 
    │ └── stream-combiner2@1.1.1 
    ├── os-browserify@0.1.2 
    ├─┬ parents@1.0.1 
    │ └── path-platform@0.11.15 
    ├── path-browserify@0.0.0 
    ├── process@0.11.10 
    ├── punycode@1.4.1 
    ├── querystring-es3@0.2.1 
    ├── read-only-stream@2.0.0 
    ├─┬ readable-stream@2.3.3 
    │ ├── core-util-is@1.0.2 
    │ ├── process-nextick-args@1.0.7 
    │ ├── safe-buffer@5.1.1 
    │ ├── string_decoder@1.0.3 
    │ └── util-deprecate@1.0.2 
    ├─┬ resolve@1.4.0 
    │ └── path-parse@1.0.5 
    ├─┬ shasum@1.0.2 
    │ ├── json-stable-stringify@0.0.1 
    │ └── sha.js@2.4.9 
    ├─┬ shell-quote@1.6.1 
    │ ├── array-filter@0.0.1 
    │ ├── array-map@0.0.0 
    │ ├── array-reduce@0.0.0 
    │ └── jsonify@0.0.0 
    ├── stream-browserify@2.0.1 
    ├─┬ stream-http@2.7.2 
    │ ├── builtin-status-codes@3.0.0 
    │ └── to-arraybuffer@1.0.1 
    ├── string_decoder@0.10.31 
    ├─┬ subarg@1.0.0 
    │ └── minimist@1.2.0 
    ├─┬ syntax-error@1.3.0 
    │ └── acorn@4.0.13 
    ├── through2@2.0.3 
    ├── timers-browserify@1.4.2 
    ├── tty-browserify@0.0.0 
    ├─┬ url@0.11.0 
    │ ├── punycode@1.3.2 
    │ └── querystring@0.2.0 
    ├─┬ util@0.10.3 
    │ └── inherits@2.0.1 
    ├─┬ vm-browserify@0.0.4 
    │ └── indexof@0.0.1 
    └── xtend@4.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/demon-edge/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 25% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0424 took 2.954s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program 'use strict';
var url = require('url');
var assert = require('assert');
var http = require('http');
var https = require('https');
var Writable = require('stream').Writable;
var debug = require('debug')('follow-redirects');

var nativeProtocols = {'http:': http, 'https:': https};
var schemes = {};
var exports = module.exports = {
	maxRedirects: 21
};
// RFC7231§4.2.1: Of the request methods defined by this specification,
// the GET, HEAD, OPTIONS, and TRACE methods are defined to be safe.
var safeMethods = {GET: true, HEAD: true, OPTIONS: true, TRACE: true};

// Create handlers that pass events from native requests
var eventHandlers = Object.create(null);
['abort', 'aborted', 'error'].forEach(function (event) {
	eventHandlers[event] = function (arg) {
		this._redirectable.emit(event, arg);
	};
});

// An HTTP(S) request that can be redirected
function RedirectableRequest(options, responseCallback) {
	// Initialize the request
	Writable.call(this);
	this._options = options;
	this._redirectCount = 0;

	// Attach a callback if passed
	if (responseCallback) {
		this.on('response', responseCallback);
	}

	// React to responses of native requests
	var self = this;
	this._onNativeResponse = function (response) {
		self._processResponse(response);
	};

	// Perform the first request
	this._performRequest();
}
RedirectableRequest.prototype = Object.create(Writable.prototype);

// Executes the next native request (initial or redirect)
RedirectableRequest.prototype._performRequest = function () {
	// If specified, use the agent corresponding to the protocol
	// (HTTP and HTTPS use different types of agents)
	var protocol = this._options.protocol;
	if (this._options.agents) {
		this._options.agent = this._options.agents[schemes[protocol]];
	}

	// Create the native request
	var nativeProtocol = nativeProtocols[this._options.protocol];
	var request = this._currentRequest =
				nativeProtocol.request(this._options, this._onNativeResponse);
	this._currentUrl = url.format(this._options);

	// Set up event handlers
	request._redirectable = this;
	for (var event in eventHandlers) {
		if (event) {
			request.on(event, eventHandlers[event]);
		}
	}

	// The first request is explicitly ended in RedirectableRequest#end
	if (this._currentResponse) {
		request.end();
	}
};

// Processes a response from the current native request
RedirectableRequest.prototype._processResponse = function (response) {
	// RFC7231§6.4: The 3xx (Redirection) class of status code indicates
	// that further action needs to be taken by the user agent in order to
	// fulfill the request. If a Location header field is provided,
	// the user agent MAY automatically redirect its request to the URI
	// referenced by the Location field value,
	// even if the specific status code is not understood.
	var location = response.headers.location;
	if (location && this._options.followRedirects !== false &&
			response.statusCode >= 300 && response.statusCode < 400) {
		// RFC7231§6.4: A client SHOULD detect and intervene
		// in cyclical redirections (i.e., "infinite" redirection loops).
		if (++this._redirectCount > this._options.maxRedirects) {
			return this.emit('error', new Error('Max redirects exceeded.'));
		}

		// RFC7231§6.4.7: The 307 (Temporary Redirect) status code indicates
		// that the target resource resides temporarily under a different URI
		// and the user agent MUST NOT change the request method
		// if it performs an automatic redirection to that URI.
		if (response.statusCode !== 307) {
			// RFC7231§6.4: Automatic redirection needs to done with
			// care for methods not known to be safe […],
			// since the user might not wish to redirect an unsafe request.
			if (!(this._options.method in safeMethods)) {
				this._options.method = 'GET';
			}
		}

		// Perform the redirected request
		var redirectUrl = url.resolve(this._currentUrl, location);
		debug('redirecting to', redirectUrl);
		Object.assign(this._options, url.parse(redirectUrl));
		this._currentResponse = response;
		this._performRequest();
	} else {
		// The response is not a redirect; return it as-is
		response.responseUrl = this._currentUrl;
		return this.emit('response', response);
	}
};

// Aborts the current native request
RedirectableRequest.prototype.abort = function () {
	this._currentRequest.abort();
};

// Ends the current native request
RedirectableRequest.prototype.end = function (data, encoding, callback) {
	this._currentRequest.end(data, encoding, callback);
};

// Flushes the headers of the current native request
RedirectableRequest.prototype.flushHeaders = function () {
	this._currentRequest.flushHeaders();
};

// Sets the noDelay option of the current native request
RedirectableRequest.prototype.setNoDelay = function (noDelay) {
	this._currentRequest.setNoDelay(noDelay);
};

// Sets the socketKeepAlive option of the current native request
RedirectableRequest.prototype.setSocketKeepAlive = function (enable, initialDelay) {
	this._currentRequest.setSocketKeepAlive(enable, initialDelay);
};

// Sets the timeout option of the current native request
RedirectableRequest.prototype.setTimeout = function (timeout, callback) {
	this._currentRequest.setTimeout(timeout, callback);
};

// Writes buffered data to the current native request
RedirectableRequest.prototype._write = function (chunk, encoding, callback) {
	this._currentRequest.write(chunk, encoding, callback);
};

// Export a redirecting wrapper for each native protocol
Object.keys(nativeProtocols).forEach(function (protocol) {
	var scheme = schemes[protocol] = protocol.substr(0, protocol.length - 1);
	var nativeProtocol = nativeProtocols[protocol];
	var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

	// Executes an HTTP request, following redirects
	wrappedProtocol.request = function (options, callback) {
		if (typeof options === 'string') {
			options = url.parse(options);
			options.maxRedirects = exports.maxRedirects;
		} else {
			options = Object.assign({
				maxRedirects: exports.maxRedirects,
				protocol: protocol
			}, options);
		}
		assert.equal(options.protocol, protocol, 'protocol mismatch');
		debug('options', options);

		return new RedirectableRequest(options, callback);
	};

	// Executes a GET request, following redirects
	wrappedProtocol.get = function (options, callback) {
		var request = wrappedProtocol.request(options, callback);
		request.end();
		return request;
	};
});
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/demon-edge/node_modules/demon-edge/lib/DemonEdge.js. Coverage (Term): 12% Coverage (LOC): 16%
*- File /root/Targets/demon-edge/node_modules/demon-edge/lib/Utils.js. Coverage (Term): 8% Coverage (LOC): 13%
*- File /root/Targets/demon-edge/node_modules/axios/index.js. Coverage (Term): 80% Coverage (LOC): 100%
*- File /root/Targets/demon-edge/node_modules/axios/lib/axios.js. Coverage (Term): 22% Coverage (LOC): 30%
*- File /root/Targets/demon-edge/node_modules/axios/lib/utils.js. Coverage (Term): 16% Coverage (LOC): 46%
*- File /root/Targets/demon-edge/node_modules/axios/lib/helpers/bind.js. Coverage (Term): 27% Coverage (LOC): 45%
*- File /root/Targets/demon-edge/node_modules/axios/lib/core/Axios.js. Coverage (Term): 9% Coverage (LOC): 9%
*- File /root/Targets/demon-edge/node_modules/axios/lib/defaults.js. Coverage (Term): 20% Coverage (LOC): 23%
*- File /root/Targets/demon-edge/node_modules/axios/lib/helpers/normalizeHeaderName.js. Coverage (Term): 37% Coverage (LOC): 50%
*- File /root/Targets/demon-edge/node_modules/axios/lib/adapters/http.js. Coverage (Term): 7% Coverage (LOC): 6%
*- File /root/Targets/demon-edge/node_modules/axios/lib/core/settle.js. Coverage (Term): 36% Coverage (LOC): 55%
*- File /root/Targets/demon-edge/node_modules/axios/lib/core/createError.js. Coverage (Term): 51% Coverage (LOC): 75%
*- File /root/Targets/demon-edge/node_modules/axios/lib/core/enhanceError.js. Coverage (Term): 40% Coverage (LOC): 45%
*- File /root/Targets/demon-edge/node_modules/axios/lib/helpers/buildURL.js. Coverage (Term): 12% Coverage (LOC): 17%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
