/root/Targets/react-native-markdown-syntax
└─┬ react-native-markdown-syntax@0.1.0 
  └── lodash@4.17.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/react-native-markdown-syntax/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0412 took 2.4764s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (7:5) on program import React, { Component, PropTypes } from 'react';
import {
  View,
} from 'react-native';
import { markdown } from './lib/index';

type Props = {
  style: any;
  mdStyle: any,
  childre?: any;
};

export default class Markdown extends Component {
  props: Props;

  static propTypes = {
    style: View.propTypes.style,
    mdStyle: PropTypes.any,
  };

  componentDidMount() {
    if (this.props.mdStyle) {
      mdStyle = _.merge({}, this.props.mdStyle, mdStyle);
    }
  }

  render() {
    let text;
    if (typeof this.props.children === 'string') {
      text = this.props.children;
    } else if (typeof this.props.children === 'object') {
      text = this.props.children.join('');
    } else {
      throw 'Not supported type of text: ' + typeof this.props.children;
    }
    return (
      <View style={[{ flexDirection: 'column' }, this.props.style]}>
        {markdown.toReact(text)}
      </View>
    )
  }
}

// Here is the default style for markdown
let mdStyle = {
  h: {
    fontWeight: '200',
  },
  h1: {
    fontSize: 32,
  },
  h2: {
    fontSize: 24,
  },
  h3: {
    fontSize: 18,
  },
  h4: {
    fontSize: 16,
  },
  h5: {
    fontSize: 13,
  },
  h6: {
    fontSize: 11,
  },
  code: {
    backgroundColor: '#f7f7f7',
  },
  boxPre: {
    backgroundColor: '#f7f7f7',
  },
  pre: {
  },
  blockquote: {
    fontFamily: 'Courier',
    fontWeight: '500',
    color: 'grey',
  },
  blockQuotePipe: {
    height: 25,
    width: 3,
    marginHorizontal: 10,
    backgroundColor: '#dddddd',
  },
  del: {
    containerBackgroundColor: '#222222',
  },
  em: {
    fontStyle: 'italic',
  },
  strong: {
    fontWeight: 'bold',
  },
  li: {

  },
  liPoint: {
    height: 5,
    width: 5,
    borderRadius: 50,
    margin: 5,
    backgroundColor: 'black',
  },
  liOrder: {
    fontWeight: 'bold',
    paddingLeft: 5,
  },
  p: {
    marginTop: 10,
    marginBottom: 10,
    flexWrap: 'wrap',
    flexDirection: 'row',
    alignItems: 'flex-start',
    justifyContent: 'flex-start',
  },
};
export { mdStyle };
 at SyntaxError: Unexpected token (7:5)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:61)
    at Parser.pp$1.parseExpressionStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:966:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:730:24)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
    at Parser.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:516:17)
    at Object.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:3098:39)
    at convert (/root/ExpoSE/lib/Tropigate/bin/main.js:50:18)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
