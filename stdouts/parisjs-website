/root/Targets/parisjs-website
└─┬ parisjs-website@0.0.1 
  ├─┬ jsdom@11.2.0 
  │ ├── abab@1.0.4 
  │ ├── acorn@4.0.13 
  │ ├── acorn-globals@3.1.0 
  │ ├── array-equal@1.0.0 
  │ ├── content-type-parser@1.0.1 
  │ ├── cssom@0.3.2 
  │ ├── cssstyle@0.2.37 
  │ ├─┬ escodegen@1.9.0 
  │ │ ├── esprima@3.1.3 
  │ │ ├── estraverse@4.2.0 
  │ │ ├── esutils@2.0.2 
  │ │ ├─┬ optionator@0.8.2 
  │ │ │ ├── deep-is@0.1.3 
  │ │ │ ├── fast-levenshtein@2.0.6 
  │ │ │ ├── levn@0.3.0 
  │ │ │ ├── prelude-ls@1.1.2 
  │ │ │ ├── type-check@0.3.2 
  │ │ │ └── wordwrap@1.0.0 
  │ │ └── source-map@0.5.7 
  │ ├── html-encoding-sniffer@1.0.1 
  │ ├── nwmatcher@1.4.2 
  │ ├─┬ parse5@3.0.2 
  │ │ └── @types/node@6.0.88 
  │ ├── pn@1.0.0 
  │ ├─┬ request@2.82.0 
  │ │ ├── aws-sign2@0.7.0 
  │ │ ├── aws4@1.6.0 
  │ │ ├── caseless@0.12.0 
  │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ └── delayed-stream@1.0.0 
  │ │ ├── extend@3.0.1 
  │ │ ├── forever-agent@0.6.1 
  │ │ ├─┬ form-data@2.3.1 
  │ │ │ └── asynckit@0.4.0 
  │ │ ├─┬ har-validator@5.0.3 
  │ │ │ ├─┬ ajv@5.2.3 
  │ │ │ │ ├── co@4.6.0 
  │ │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │ │   └── jsonify@0.0.0 
  │ │ │ └── har-schema@2.0.0 
  │ │ ├─┬ hawk@6.0.2 
  │ │ │ ├── boom@4.3.1 
  │ │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ │ └── boom@5.2.0 
  │ │ │ ├── hoek@4.2.0 
  │ │ │ └── sntp@2.0.2 
  │ │ ├─┬ http-signature@1.2.0 
  │ │ │ ├── assert-plus@1.0.0 
  │ │ │ ├─┬ jsprim@1.4.1 
  │ │ │ │ ├── extsprintf@1.3.0 
  │ │ │ │ ├── json-schema@0.2.3 
  │ │ │ │ └─┬ verror@1.10.0 
  │ │ │ │   └── core-util-is@1.0.2 
  │ │ │ └─┬ sshpk@1.13.1 
  │ │ │   ├── asn1@0.2.3 
  │ │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │   ├── dashdash@1.14.1 
  │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │   ├── getpass@0.1.7 
  │ │ │   ├── jsbn@0.1.1 
  │ │ │   └── tweetnacl@0.14.5 
  │ │ ├── is-typedarray@1.0.0 
  │ │ ├── isstream@0.1.2 
  │ │ ├── json-stringify-safe@5.0.1 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ ├── oauth-sign@0.8.2 
  │ │ ├── performance-now@2.1.0 
  │ │ ├── qs@6.5.1 
  │ │ ├── safe-buffer@5.1.1 
  │ │ ├── stringstream@0.0.5 
  │ │ ├── tunnel-agent@0.6.0 
  │ │ └── uuid@3.1.0 
  │ ├─┬ request-promise-native@1.0.5 
  │ │ ├─┬ request-promise-core@1.1.1 
  │ │ │ └── lodash@4.17.4 
  │ │ └── stealthy-require@1.1.1 
  │ ├── sax@1.2.4 
  │ ├── symbol-tree@3.2.2 
  │ ├─┬ tough-cookie@2.3.3 
  │ │ └── punycode@1.4.1 
  │ ├── webidl-conversions@4.0.2 
  │ ├─┬ whatwg-encoding@1.0.1 
  │ │ └── iconv-lite@0.4.13 
  │ ├─┬ whatwg-url@6.3.0 
  │ │ ├── lodash.sortby@4.7.0 
  │ │ └─┬ tr46@1.0.1 
  │ │   └── punycode@2.1.0 
  │ └── xml-name-validator@2.0.1 
  └── underscore@1.8.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/parisjs-website/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.053 took 3.5897s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
/**
 * You don't want to manage the list of events/talks/people by hands? This script can help you.
 *
 * It's a two way parser:
 *  - read index.html and extract the list of events/talks/people and output JSON on stdout
 *  - read a JSON from stdin and output the new HTML on stdout
 *
 * Dependencies:
 *  * node
 *  * npm (bundled with node \o/)
 *
 * Install deps: npm install
 *
 * Why JSON?
 *  Because there is no good yaml parser in javascript, and it was out of the scope for now
 *
 * How to use it?
 *  node utils/meetups.js parse > meetups.json
 *  node utils/meetups.js update < meetups.json
 *
 * Examples:
 * You want to update the HTML of all talks
 *  1. Parse meetups and export to json
 *      node utils/meetups.js parse > meetups.json
 *  2. edit utils/template_meetup.html and update it (the hard part)
 *  3. Generate the new html of the page
 *      node utils/meetups.js update < meetups.json > index2.html
 *  4. Move the generated HTML to index.html
 *      mv index2.html index.html
 *
 * You want to extract talks informations from your code
 *  1. var parisjs = require('parisjs-website');
 *  2. parisjs.parseMeetups('http://parisjs.org', function(meetups) {})
 */

var jsdom = require('jsdom')
  , fs = require('fs')
  , _ = require('underscore')
;

function cli() {
    if (process.argv.length == 3) {
        var website = __dirname + '/../index.html';
        if (process.argv[2] == 'parse') {
            return parseMeetups(website, console.log);
        } else if (process.argv[2] == 'update') {
            return updateMeetups(website, console.log);
        }
    }
    console.log('usage');
    console.log('node utils/meetups.js parse');
    console.log('node utils/meetups.js update');
}
if (process.argv.length >= 2 && process.argv[1] == __filename)
    cli();

function readStdin(callback) {
    var data = "";
    process.stdin.resume();
    process.stdin.setEncoding('utf8');

    process.stdin.on('data', function (chunk) {
        data += chunk;
    });
    process.stdin.on('end', function () {
        callback(data);
    });
}

function updateMeetups(website, callback) {
    readStdin(function(data) {
        var meetups = JSON.parse(data);
        var html = generateHTMLFor(meetups);
        var jquery = 'http://code.jquery.com/jquery-1.5.min.js';
        jsdom.env(website, [jquery],
                  function(errors, window) {
                      if (errors) {
                          return console.error('jsdom error', errors)
                      }
                      var $ = window.$;
                      var $meetups = $('#meetups > ul').empty().append("\n                    ").append($(html)).append("\n                ");
                      var document = window.document;
                      // remove the jquery inserted by jsdom
                      $('script:last', document).remove();
                      var output = document.doctype + document.innerHTML;
                      callback(output.trim());
                  });
    });
}

function generateHTMLFor(meetups) {
    var template = _.template(fs.readFileSync(__dirname +'/template_meetup.html', 'utf8'));
    var total = meetups.length;
    var html = meetups.map(function(meetup, num) {
        meetup.num = total - num;
        return template(meetup);
    });
    return "\n"+ html.join('')+"\n\n";
}

//

function parseMeetups(website, callback) {
    var jquery = 'http://code.jquery.com/jquery-1.5.min.js';
    jsdom.env(website, [jquery],
              function(errors, window) {
                  if (errors) {
                      return console.error('jsdom error', errors)
                  }
                  var $ = window.$;
                  var meetups = extractMeetups($);
                  callback(JSON.stringify(meetups));
              });
}

/**
 * Return a raw object of all events and talks
 */
function extractMeetups($) {
    var $meetups = $('#meetups li.meetup');
    var meetups = [];
    $meetups.each(function() {
        var $meetup = $(this);
        var meetup = {
            title: $('.meetup-title', this).text(),
            talks: []
        };
        var $talks = $meetup.find('.meetup-content').find('> li');
        meetup.talks = extractTalks($, $talks);
        meetups.push(meetup);
    });
    return meetups;
}

function extractTalks($, $talks) {
    return $talks.toArray().map(function(talk) {
        var $talk = $(talk);

        function getLinks(regexp) {
            return $talk.find('.descTalk a').filter(function() {
                return $(this).text().match(regexp);
            }).map(function() {
                return $(this).attr('href');
            }).toArray();
        }

        var slides = getLinks(/slide/i);
        var videos = getLinks(/(video|part)/i);
        var projects = getLinks(/project/i);

        return {
            title: $talk.find('.titleTalk').text().trim(),
            slides: slides,
            videos: videos,
            projects: projects,
            authors: $talk.find('.authorTalk a').map(function() {
                return {
                    name: $(this).text(),
                    url: $(this).attr('href'),
                    // sorry boy, in case of multiple authors, we have only one avatar
                    avatar: $talk.find('.avatar img').attr('src')
                }
            }).toArray()
        }
    });
}

exports.parseMeetups = parseMeetups;
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
