/root/Targets/mpdjs
└── mpdjs@0.1.5 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/mpdjs/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 26% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","reduce","parseInt","charCodeAt","abs","Number","captureStackTrace","cwd","max","getFileName","getLineNumber","getColumnNumber","isEval","getFunctionName","create","toUpperCase","join"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0414 took 13.9551s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Invalid number (44:20) on program /*
    Copyright (c) 2004-2013, The Dojo Foundation All Rights Reserved.
    Available via Academic Free License >= 2.1 OR the modified BSD license.
    see: http://dojotoolkit.org/license for details
*/
var crypto = require('crypto');
var path = require('path');
var resourceloader = require('./resourceloader');
var util = require("./util");
var fs = require('fs');

var cache = {};

var analyzer = require('./amdanalyzer');

function getTmpDir(config) {
	var tmpDir = "./tmp/";
	if (config.tmpDir) {
		tmpDir = config.tmpDir;
		if (tmpDir.charAt(0) !== "/") {
			tmpDir = path.join(config.userConfigPath, tmpDir);
			tmpDir = path.normalize(tmpDir);
		}
		tmpDir += "/";
	}
	return tmpDir;
}

function loadAnalysis(key, config, cb) {
	var tmpDir = getTmpDir(config);
	function readAnalysisFile() {
		fs.readFile(tmpDir+key+".json", 'utf8', function(err, contents) {
			if (contents) {
				console.log("Read analysis for ["+key+"]");
				var analysisData = JSON.parse(contents);
				cb(analysisData);
			} else {
				cb();
			}
		});
	}
	fs.exists(tmpDir, function (exists) {
		if (!exists) {
			fs.mkdir(tmpDir, 0777, function(){
				readAnalysisFile();
			});
		} else {
			readAnalysisFile();
		}
	});
}

function saveAnalysis(key, analysisData, config, cb) {
	var tmpDir = getTmpDir(config);
	function writeAnalysisFile() {
		var data = JSON.stringify(analysisData, null, "\t");
		fs.writeFile(tmpDir+key+".json", data, 'utf8', function(err) {
			if (err) {
				throw err;
			}
			cb();
		});
	}
	fs.exists(tmpDir, function (exists) {
		if (!exists) {
			fs.mkdir(tmpDir, 0777, function(){
				writeAnalysisFile();
			});
		} else {
			writeAnalysisFile();
		}
	});
}

function toHash(value) {
	var md5Hash = crypto.createHash("md5");
	md5Hash.update(value);
	return md5Hash.digest('hex');
}

function checkExcludes(excludeKeys) {
	for (var i = 0; i < excludeKeys.length; i++) {
		if (cache[excludeKeys[i]] === undefined) {
			return excludeKeys[i];
		}
	}
	return null;
}

function getExcludes(excludeKeys) {
	var excludes = [];
	var seen = {};
	var analysisData;
	
	for (var i = 0; i < excludeKeys.length; i++) {
		analysisData = cache[excludeKeys[i]].analysisData;
		for (var j = 0; j < analysisData.dependencyList.length; j++) {
			var dep = analysisData.dependencyList[j];
			if (!seen[dep]) {
				excludes.push(dep);
				seen[dep] = true;
			}
		}
	}
	return excludes;
}

function createChecksum(analysisData, excludedModules, cb) {
	var js = "";
	
	var callback = util.createCallback(analysisData.dependencyList.length, function() {
		js += "excludes:";
		excludedModules.forEach(function(excludedModule) {
			js += excludedModule;
		});
		cb(toHash(js));
	});
	
	for (var i = 0; i < analysisData.dependencyList.length; i++) {
		resourceloader.readText(path.normalize(analysisData.dependencyList[i]+".js"), function(text) {
			js += text;
			callback();
		});
	}
}

function isStale(cacheEntry, cb) {
	var stale = false;
	var analysisData = cacheEntry.analysisData;
	
	var callback = util.createCallback(analysisData.dependencyList.length, function() {
		cb(stale);
	});
	
	analysisData.dependencyList.forEach(function(dependency) {
        var dependencyPath = path.normalize(dependency)+".js";
		resourceloader.getTimestamp(dependencyPath, function(ts) {
	        if (ts !== -1 && ts !== cacheEntry.timestamps[dependency]) {
				stale = true;
			}
			callback();
		});
	});	
}

function getTimestamps(dependencyList, cb) {
	var timestamps = {};

	var callback = util.createCallback(dependencyList.length, function() {
		cb(timestamps);
	});
	
	dependencyList.forEach(function(dependency) {
        var dependencyPath = path.normalize(dependency)+".js";
        resourceloader.getTimestamp(dependencyPath, function(timestamp) {
			timestamps[dependency] = timestamp;
			callback();
        });
	});
}

var getKey = function(modules, excludesKeys, config) {
	var excludes = getExcludes(excludesKeys);
	var key = "keyValues:";
	var i;
	
	for (i = 0; i < modules.length; i++) {
		key += modules[i];
	}
	
	key += "excludeValue:";
	
	for (i = 0; i < excludes.length; i++) {
		key += excludes[i];
	}
	
	if (config) {
		key += "configValue:";
		key += JSON.stringify(config);
	}
	return toHash(key);
};

exports.getKey = getKey;

exports.getAnalysisData = function(modules, excludes, config, cb) {
	var missingExclude = checkExcludes(excludes);
	if (missingExclude !== null) {
		cb({missingExclude: missingExclude});
		return;
	}
	var key = getKey(modules, excludes, config);
	var cacheEntry = cache[key];
	
	function doAnalysis() {
		var excludedModules = getExcludes(excludes);
		analyzer.createAnalyzer(config).getAnalysisData(modules, excludedModules, function(analysisData) {
			if (analysisData.failure) {
				cache[key] = undefined;
				cb(analysisData);
			} else {
				analysisData.key = key;
				createChecksum(analysisData, excludedModules, function(checksum) {
					analysisData.checksum = checksum;
					getTimestamps(analysisData.dependencyList, function(timestamps) {
						cacheEntry.analysisData = analysisData;
						cacheEntry.timestamps = timestamps;
						cacheEntry.state = 1;
						if (config.persistAnalysis === true) {
							saveAnalysis(key, cacheEntry, config, function() {
								console.log("Save analysis for ["+key+"]");
							});
						}
						cb(cacheEntry.analysisData);
					});
				});
			}
		});
	}
	
	if (cacheEntry) {
		if (cacheEntry.state === 0) {
			var isComplete = function() {
				if (cacheEntry.state === 1) {
					cb(cacheEntry.analysisData);
				} else {
					setImmediate(isComplete);
				}
			}
			setImmediate(isComplete);
		} else {
			if (config.checkTimestamps === false) {
				cb(cacheEntry.analysisData);
			} else {
				isStale(cacheEntry, function(stale) {
					if (stale === true) {
						cacheEntry.state = 0;
						doAnalysis();
					} else {
						cb(cacheEntry.analysisData);
					}
				});
			}
		}
	} else {
		if (config.persistAnalysis === true) {
			loadAnalysis(key, config, function(data) {
				if (data) {
					cacheEntry = data;
					cache[key] = cacheEntry;
					if (config.checkTimestamps === false) {
						cb(cacheEntry.analysisData);
					} else {
						isStale(cacheEntry, function(stale) {
							if (stale === true) {
								cacheEntry.state = 0;
								doAnalysis();
							} else {
								cb(cacheEntry.analysisData);
							}
						});
					}
				} else {
					cacheEntry = {state: 0};
					cache[key] = cacheEntry;
					doAnalysis();
				}
			});
		} else {
			cacheEntry = {state: 0};
			cache[key] = cacheEntry;
			doAnalysis();
		}
	}
};

exports.getAnalysisDataFromKey = function(key) {
	var cacheEntry = cache[key];
	return cacheEntry ? cacheEntry.analysisData : undefined;
};

exports.analysisInProcess = function(key) {
	var cacheEntry = cache[key];
	var state = cacheEntry ? cacheEntry.state : -1;
	if (state === 0) {
		return true;
	} else {
		return false;
	}
}; at SyntaxError: Invalid number (44:20)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.expect (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:597:10)
    at Parser.pp$3.parseExprList (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2152:16)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/mpdjs/node_modules/mpdjs/index.js. Coverage (Term): 80% Coverage (LOC): 100%
*- File /root/Targets/mpdjs/node_modules/mpdjs/lib/mpd.js. Coverage (Term): 22% Coverage (LOC): 35%
*- File /root/Targets/mpdjs/node_modules/connect/index.js. Coverage (Term): 14% Coverage (LOC): 19%
*- File /root/Targets/mpdjs/node_modules/debug/src/index.js. Coverage (Term): 81% Coverage (LOC): 83%
*- File /root/Targets/mpdjs/node_modules/debug/src/node.js. Coverage (Term): 35% Coverage (LOC): 44%
*- File /root/Targets/mpdjs/node_modules/debug/src/debug.js. Coverage (Term): 44% Coverage (LOC): 48%
*- File /root/Targets/mpdjs/node_modules/ms/index.js. Coverage (Term): 12% Coverage (LOC): 15%
*- File /root/Targets/mpdjs/node_modules/finalhandler/index.js. Coverage (Term): 16% Coverage (LOC): 21%
*- File /root/Targets/mpdjs/node_modules/encodeurl/index.js. Coverage (Term): 63% Coverage (LOC): 89%
*- File /root/Targets/mpdjs/node_modules/escape-html/index.js. Coverage (Term): 16% Coverage (LOC): 18%
*- File /root/Targets/mpdjs/node_modules/on-finished/index.js. Coverage (Term): 13% Coverage (LOC): 17%
*- File /root/Targets/mpdjs/node_modules/ee-first/index.js. Coverage (Term): 9% Coverage (LOC): 13%
*- File /root/Targets/mpdjs/node_modules/parseurl/index.js. Coverage (Term): 15% Coverage (LOC): 18%
*- File /root/Targets/mpdjs/node_modules/statuses/index.js. Coverage (Term): 56% Coverage (LOC): 67%
*- File /root/Targets/mpdjs/node_modules/unpipe/index.js. Coverage (Term): 16% Coverage (LOC): 20%
*- File /root/Targets/mpdjs/node_modules/utils-merge/index.js. Coverage (Term): 40% Coverage (LOC): 40%
*- File /root/Targets/mpdjs/node_modules/serve-static/index.js. Coverage (Term): 13% Coverage (LOC): 17%
*- File /root/Targets/mpdjs/node_modules/send/index.js. Coverage (Term): 13% Coverage (LOC): 20%
*- File /root/Targets/mpdjs/node_modules/http-errors/index.js. Coverage (Term): 46% Coverage (LOC): 40%
*- File /root/Targets/mpdjs/node_modules/depd/index.js. Coverage (Term): 32% Coverage (LOC): 34%
*- File /root/Targets/mpdjs/node_modules/depd/lib/compat/index.js. Coverage (Term): 87% Coverage (LOC): 97%
*- File /root/Targets/mpdjs/node_modules/setprototypeof/index.js. Coverage (Term): 32% Coverage (LOC): 38%
*- File /root/Targets/mpdjs/node_modules/inherits/inherits.js. Coverage (Term): 74% Coverage (LOC): 88%
*- File eval. Coverage (Term): 41% Coverage (LOC): 50%
*- File /root/Targets/mpdjs/node_modules/destroy/index.js. Coverage (Term): 32% Coverage (LOC): 33%
*- File /root/Targets/mpdjs/node_modules/etag/index.js. Coverage (Term): 16% Coverage (LOC): 32%
*- File /root/Targets/mpdjs/node_modules/fresh/index.js. Coverage (Term): 18% Coverage (LOC): 21%
*- File /root/Targets/mpdjs/node_modules/mime/mime.js. Coverage (Term): 56% Coverage (LOC): 75%
*- File /root/Targets/mpdjs/node_modules/range-parser/index.js. Coverage (Term): 8% Coverage (LOC): 15%
*- File /root/Targets/mpdjs/node_modules/zazloptimizer/lib/zazloptimizer.js. Coverage (Term): 3% Coverage (LOC): 4%
*- File /root/Targets/mpdjs/node_modules/zazloptimizer/lib/resourceloader.js. Coverage (Term): 21% Coverage (LOC): 23%
*- File /root/Targets/mpdjs/node_modules/zazloptimizer/lib/util.js. Coverage (Term): 26% Coverage (LOC): 35%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
