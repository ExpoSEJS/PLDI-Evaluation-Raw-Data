/root/Targets/test-justencrypt
└─┬ test-justencrypt@0.0.5 
  ├─┬ assert@1.4.1 
  │ └─┬ util@0.10.3 
  │   └── inherits@2.0.1 
  ├─┬ bip39@2.4.0 
  │ ├─┬ create-hash@1.1.3 
  │ │ ├── cipher-base@1.0.4 
  │ │ ├─┬ ripemd160@2.0.1 
  │ │ │ └── hash-base@2.0.2 
  │ │ └── sha.js@2.4.9 
  │ ├─┬ pbkdf2@3.0.14 
  │ │ └── create-hmac@1.1.6 
  │ ├── safe-buffer@5.1.1 
  │ └── unorm@1.4.1 
  ├── q@1.5.0 
  ├── randombytes@2.0.5 
  ├── sjcl@1.0.7 
  └── webworkify@1.4.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/test-justencrypt/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 34% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0897 took 6.7048s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:82) on program var assert = require('assert');

var pbkdf2Sha512 = require('./pbkdf2_sha512');
var pbkdf2Sha512WebCrypto = require('./pbkdf2_sha512-webcrypto');
var webworkifier = require('./webworkifier');

var KeyDerivation = {
    defaultIterations: 35000,
    subkeyIterations: 1,
    keySizeBits: 256,

    useWebWorker: true,
    useWebCrypto: true
};

KeyDerivation.compute = function(pw, salt, iterations) {
    iterations = iterations || KeyDerivation.defaultIterations;
    assert(pw instanceof Buffer, 'Password must be provided as a Buffer');
    assert(salt instanceof Buffer, 'Salt must be provided as a Buffer');
    assert(salt.length > 0, 'Salt must not be empty');
    assert(typeof iterations === 'number', 'Iterations must be a number');
    assert(iterations > 0, 'Iteration count should be at least 1');

    if (salt.length > 0x80) {
        throw new Error('Sanity check: Invalid salt, length can never be greater than 128');
    }

    var keySizeBytes = KeyDerivation.keySizeBits / 8;

    return pbkdf2Sha512WebCrypto.isSupported()
        .then(function(isSupported) {
            if (KeyDerivation.useWebCrypto && isSupported) {
                return pbkdf2Sha512WebCrypto.digest(pw, salt, iterations, keySizeBytes);
            } else if (KeyDerivation.useWebWorker && webworkifier.isSupported()) {
                return webworkifier({
                    method: 'pbkdf2Sha512.digest',
                    pw: typeof pw !== "undefined" ? Buffer.from(pw) : undefined, // Buffer.from will ensure that we transfer to webworker without issues
                    salt: typeof salt !== "undefined" ? Buffer.from(salt) : undefined, // --^
                    iterations: iterations,
                    keySizeBytes: keySizeBytes
                }).then(function(result) {
                    return Buffer.from(result);
                });
            } else {
                return pbkdf2Sha512.digest(pw, salt, iterations, keySizeBytes);
            }
        });
};

module.exports = KeyDerivation;
 at SyntaxError: Unexpected token (1:82)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/test-justencrypt/node_modules/test-justencrypt/index.js. Coverage (Term): 55% Coverage (LOC): 67%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
