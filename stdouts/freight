/root/Targets/freight
└── freight@0.6.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/freight/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 42% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 42% coverage ] ****** [2 done /1 queued / 1 running / 1 errors / 48% coverage ] ****** [2 done /0 queued / 2 running / 1 errors / 48% coverage ] ****** [2 done /0 queued / 2 running / 1 errors / 48% coverage ] ****** [3 done /0 queued / 1 running / 1 errors / 48% coverage ] ****** [4 done /0 queued / 1 running / 2 errors / 49% coverage ] ****** [4 done /0 queued / 1 running / 2 errors / 49% coverage ] ****** [5 done /0 queued / 1 running / 3 errors / 56.00000000000001% coverage ] ****** [5 done /0 queued / 1 running / 3 errors / 56.00000000000001% coverage ] ****** [6 done /0 queued / 1 running / 4 errors / 56.00000000000001% coverage ] ****** [6 done /0 queued / 1 running / 4 errors / 56.00000000000001% coverage ] ****** [7 done /1 queued / 1 running / 5 errors / 56.00000000000001% coverage ] ****** [7 done /0 queued / 2 running / 5 errors / 56.00000000000001% coverage ] ****** [7 done /0 queued / 2 running / 5 errors / 56.00000000000001% coverage ] ****** [8 done /0 queued / 1 running / 6 errors / 56.00000000000001% coverage ] ****** [9 done /1 queued / 1 running / 7 errors / 56.00000000000001% coverage ] ****** [9 done /0 queued / 2 running / 7 errors / 56.00000000000001% coverage ] ****** [9 done /0 queued / 2 running / 7 errors / 56.00000000000001% coverage ] ****** [10 done /1 queued / 2 running / 8 errors / 56.00000000000001% coverage ] ****** [10 done /0 queued / 3 running / 8 errors / 56.00000000000001% coverage ] ****** [10 done /0 queued / 3 running / 8 errors / 56.00000000000001% coverage ] ****** [11 done /2 queued / 3 running / 9 errors / 56.00000000000001% coverage ] ****** [11 done /1 queued / 4 running / 9 errors / 56.00000000000001% coverage ] ****** [11 done /0 queued / 5 running / 9 errors / 56.00000000000001% coverage ] ****** [11 done /0 queued / 5 running / 9 errors / 56.00000000000001% coverage ] ****** [12 done /1 queued / 5 running / 10 errors / 56.00000000000001% coverage ] ****** [12 done /0 queued / 6 running / 10 errors / 56.00000000000001% coverage ] ****** [12 done /0 queued / 6 running / 10 errors / 56.00000000000001% coverage ] ****** [13 done /1 queued / 6 running / 11 errors / 56.00000000000001% coverage ] ****** [13 done /0 queued / 7 running / 11 errors / 56.00000000000001% coverage ] ****** [13 done /0 queued / 7 running / 11 errors / 56.00000000000001% coverage ] ****** [14 done /1 queued / 7 running / 12 errors / 56.00000000000001% coverage ] ****** [14 done /0 queued / 8 running / 12 errors / 56.00000000000001% coverage ] ****** [14 done /0 queued / 8 running / 12 errors / 56.00000000000001% coverage ] ****** [15 done /2 queued / 8 running / 13 errors / 56.00000000000001% coverage ] ****** [15 done /1 queued / 9 running / 13 errors / 56.00000000000001% coverage ] ****** [15 done /0 queued / 10 running / 13 errors / 56.00000000000001% coverage ] ****** [15 done /0 queued / 10 running / 13 errors / 56.00000000000001% coverage ] ****** [16 done /0 queued / 10 running / 14 errors / 56.00000000000001% coverage ] ****** [16 done /0 queued / 10 running / 14 errors / 56.00000000000001% coverage ] ****** [17 done /1 queued / 10 running / 15 errors / 56.00000000000001% coverage ] ****** [17 done /0 queued / 11 running / 15 errors / 56.00000000000001% coverage ] ****** [17 done /0 queued / 11 running / 15 errors / 56.00000000000001% coverage ] ****** [18 done /1 queued / 11 running / 16 errors / 56.00000000000001% coverage ] ****** [18 done /0 queued / 12 running / 16 errors / 56.00000000000001% coverage ] ****** [18 done /0 queued / 12 running / 16 errors / 56.00000000000001% coverage ] ****** [19 done /1 queued / 12 running / 17 errors / 56.00000000000001% coverage ] ****** [19 done /0 queued / 13 running / 17 errors / 56.00000000000001% coverage ] ****** [19 done /0 queued / 13 running / 17 errors / 56.00000000000001% coverage ] ****** [20 done /1 queued / 13 running / 18 errors / 56.00000000000001% coverage ] ****** [20 done /0 queued / 14 running / 18 errors / 56.00000000000001% coverage ] ****** [20 done /0 queued / 14 running / 18 errors / 56.00000000000001% coverage ] ****** [21 done /1 queued / 14 running / 19 errors / 56.00000000000001% coverage ] ****** [21 done /0 queued / 15 running / 19 errors / 56.00000000000001% coverage ] ****** [21 done /0 queued / 15 running / 19 errors / 56.00000000000001% coverage ] ****** [22 done /0 queued / 15 running / 20 errors / 56.00000000000001% coverage ] ****** [22 done /0 queued / 15 running / 20 errors / 56.00000000000001% coverage ] ****** [23 done /1 queued / 15 running / 21 errors / 56.00000000000001% coverage ] ****** [23 done /0 queued / 16 running / 21 errors / 56.00000000000001% coverage ] ****** [23 done /0 queued / 16 running / 21 errors / 56.00000000000001% coverage ] ****** [24 done /1 queued / 16 running / 22 errors / 56.00000000000001% coverage ] ****** [24 done /1 queued / 16 running / 22 errors / 56.00000000000001% coverage ] ****** [25 done /2 queued / 16 running / 23 errors / 56.00000000000001% coverage ] ****** [25 done /2 queued / 16 running / 23 errors / 56.00000000000001% coverage ] ****** [26 done /3 queued / 16 running / 24 errors / 56.00000000000001% coverage ] ****** [26 done /3 queued / 16 running / 24 errors / 56.00000000000001% coverage ] ****** [27 done /4 queued / 16 running / 25 errors / 56.00000000000001% coverage ] ****** [27 done /4 queued / 16 running / 25 errors / 56.00000000000001% coverage ] ****** [28 done /5 queued / 16 running / 26 errors / 56.00000000000001% coverage ] ****** [28 done /5 queued / 16 running / 26 errors / 56.00000000000001% coverage ] ****** [29 done /6 queued / 16 running / 27 errors / 56.00000000000001% coverage ] ****** [29 done /6 queued / 16 running / 27 errors / 56.00000000000001% coverage ] ****** [30 done /7 queued / 16 running / 28 errors / 56.00000000000001% coverage ] ****** [30 done /7 queued / 16 running / 28 errors / 56.00000000000001% coverage ] ****** [31 done /8 queued / 16 running / 29 errors / 56.00000000000001% coverage ] ****** [31 done /8 queued / 16 running / 29 errors / 56.00000000000001% coverage ] ****** [32 done /9 queued / 16 running / 30 errors / 56.00000000000001% coverage ] ****** [32 done /9 queued / 16 running / 30 errors / 56.00000000000001% coverage ] ****** [33 done /10 queued / 16 running / 31 errors / 56.00000000000001% coverage ] ****** [33 done /10 queued / 16 running / 31 errors / 56.00000000000001% coverage ] ****** [34 done /12 queued / 16 running / 32 errors / 56.00000000000001% coverage ] ****** [34 done /12 queued / 16 running / 32 errors / 56.00000000000001% coverage ] ****** [35 done /15 queued / 16 running / 33 errors / 56.00000000000001% coverage ] ****** [35 done /15 queued / 16 running / 33 errors / 56.00000000000001% coverage ] ****** [36 done /16 queued / 16 running / 34 errors / 56.00000000000001% coverage ] ****** [36 done /16 queued / 16 running / 34 errors / 56.00000000000001% coverage ] ****** [37 done /17 queued / 16 running / 35 errors / 56.00000000000001% coverage ] ****** [37 done /17 queued / 16 running / 35 errors / 56.00000000000001% coverage ] ****** [38 done /18 queued / 16 running / 36 errors / 56.00000000000001% coverage ] ****** [38 done /18 queued / 16 running / 36 errors / 56.00000000000001% coverage ] ****** [39 done /19 queued / 16 running / 37 errors / 56.00000000000001% coverage ] ****** [39 done /19 queued / 16 running / 37 errors / 56.00000000000001% coverage ] ****** [40 done /20 queued / 16 running / 38 errors / 56.00000000000001% coverage ] ****** [40 done /20 queued / 16 running / 38 errors / 56.00000000000001% coverage ] ****** [41 done /22 queued / 16 running / 39 errors / 56.00000000000001% coverage ] ****** [41 done /22 queued / 16 running / 39 errors / 56.00000000000001% coverage ] ****** [42 done /23 queued / 16 running / 40 errors / 56.00000000000001% coverage ] ****** [42 done /23 queued / 16 running / 40 errors / 56.00000000000001% coverage ] ****** [43 done /24 queued / 16 running / 41 errors / 56.00000000000001% coverage ] ****** [43 done /24 queued / 16 running / 41 errors / 56.00000000000001% coverage ] ****** [44 done /25 queued / 16 running / 42 errors / 56.00000000000001% coverage ] ****** [44 done /25 queued / 16 running / 42 errors / 56.00000000000001% coverage ] ****** [45 done /27 queued / 16 running / 43 errors / 56.00000000000001% coverage ] ****** [45 done /27 queued / 16 running / 43 errors / 56.00000000000001% coverage ] ****** [46 done /29 queued / 16 running / 44 errors / 56.00000000000001% coverage ] ****** [46 done /29 queued / 16 running / 44 errors / 56.00000000000001% coverage ] ****** [47 done /33 queued / 16 running / 45 errors / 56.00000000000001% coverage ] ****** [47 done /33 queued / 16 running / 45 errors / 56.00000000000001% coverage ] ****** [48 done /34 queued / 16 running / 46 errors / 56.00000000000001% coverage ] ****** [48 done /34 queued / 16 running / 46 errors / 56.00000000000001% coverage ] ****** [49 done /35 queued / 16 running / 47 errors / 56.00000000000001% coverage ] ****** [49 done /35 queued / 16 running / 47 errors / 56.00000000000001% coverage ] ****** [50 done /36 queued / 16 running / 48 errors / 56.00000000000001% coverage ] ****** [50 done /36 queued / 16 running / 48 errors / 56.00000000000001% coverage ] ****** [51 done /36 queued / 16 running / 49 errors / 56.00000000000001% coverage ] ****** [51 done /36 queued / 16 running / 49 errors / 56.00000000000001% coverage ] ****** [52 done /38 queued / 16 running / 50 errors / 56.00000000000001% coverage ] ****** [52 done /38 queued / 16 running / 50 errors / 56.00000000000001% coverage ] ****** [53 done /41 queued / 16 running / 51 errors / 56.00000000000001% coverage ] ****** [53 done /41 queued / 16 running / 51 errors / 56.00000000000001% coverage ] ****** [54 done /42 queued / 16 running / 52 errors / 56.00000000000001% coverage ] ****** [54 done /42 queued / 16 running / 52 errors / 56.00000000000001% coverage ] ****** [55 done /42 queued / 16 running / 53 errors / 56.00000000000001% coverage ] ****** [55 done /42 queued / 16 running / 53 errors / 56.00000000000001% coverage ] ****** [56 done /42 queued / 16 running / 54 errors / 56.00000000000001% coverage ] ****** [56 done /42 queued / 16 running / 54 errors / 56.00000000000001% coverage ] ****** [57 done /43 queued / 16 running / 55 errors / 56.00000000000001% coverage ] ****** [57 done /43 queued / 16 running / 55 errors / 56.00000000000001% coverage ] ****** [58 done /44 queued / 16 running / 56 errors / 56.00000000000001% coverage ] ****** [58 done /44 queued / 16 running / 56 errors / 56.00000000000001% coverage ] ****** [59 done /44 queued / 16 running / 57 errors / 56.00000000000001% coverage ] ****** [59 done /44 queued / 16 running / 57 errors / 56.00000000000001% coverage ] ****** [60 done /45 queued / 16 running / 58 errors / 56.00000000000001% coverage ] ****** [60 done /45 queued / 16 running / 58 errors / 56.00000000000001% coverage ] ****** [61 done /46 queued / 16 running / 59 errors / 56.00000000000001% coverage ] ****** [61 done /46 queued / 16 running / 59 errors / 56.00000000000001% coverage ] ****** [62 done /47 queued / 16 running / 60 errors / 56.00000000000001% coverage ] ****** [62 done /47 queued / 16 running / 60 errors / 56.00000000000001% coverage ] ****** [63 done /47 queued / 16 running / 61 errors / 56.00000000000001% coverage ] ****** [63 done /47 queued / 16 running / 61 errors / 56.00000000000001% coverage ] ****** [64 done /47 queued / 16 running / 62 errors / 56.00000000000001% coverage ] ****** [64 done /47 queued / 16 running / 62 errors / 56.00000000000001% coverage ] ****** [65 done /48 queued / 16 running / 63 errors / 56.00000000000001% coverage ] ****** [65 done /48 queued / 16 running / 63 errors / 56.00000000000001% coverage ] ****** [66 done /48 queued / 16 running / 64 errors / 56.00000000000001% coverage ] ****** [66 done /48 queued / 16 running / 64 errors / 56.00000000000001% coverage ] ****** [67 done /49 queued / 16 running / 65 errors / 56.00000000000001% coverage ] ****** [67 done /49 queued / 16 running / 65 errors / 56.00000000000001% coverage ] ****** [68 done /50 queued / 16 running / 66 errors / 56.00000000000001% coverage ] ****** [68 done /50 queued / 16 running / 66 errors / 56.00000000000001% coverage ] ****** [69 done /50 queued / 16 running / 67 errors / 56.00000000000001% coverage ] ****** [69 done /50 queued / 16 running / 67 errors / 56.00000000000001% coverage ] ****** [70 done /51 queued / 16 running / 68 errors / 56.00000000000001% coverage ] ****** [70 done /51 queued / 16 running / 68 errors / 56.00000000000001% coverage ] ****** [71 done /51 queued / 16 running / 69 errors / 56.00000000000001% coverage ] ****** [71 done /51 queued / 16 running / 69 errors / 56.00000000000001% coverage ] ****** [72 done /54 queued / 16 running / 70 errors / 56.00000000000001% coverage ] ****** [72 done /54 queued / 16 running / 70 errors / 56.00000000000001% coverage ] ****** [73 done /54 queued / 16 running / 71 errors / 56.00000000000001% coverage ] ****** [73 done /54 queued / 16 running / 71 errors / 56.00000000000001% coverage ] ****** [74 done /55 queued / 16 running / 72 errors / 56.00000000000001% coverage ] ****** [74 done /55 queued / 16 running / 72 errors / 56.00000000000001% coverage ] ****** [75 done /55 queued / 16 running / 73 errors / 56.00000000000001% coverage ] ****** [75 done /55 queued / 16 running / 73 errors / 56.00000000000001% coverage ] ****** [76 done /56 queued / 16 running / 74 errors / 56.00000000000001% coverage ] ****** [76 done /56 queued / 16 running / 74 errors / 56.00000000000001% coverage ] ****** [77 done /57 queued / 16 running / 75 errors / 56.00000000000001% coverage ] ****** [77 done /57 queued / 16 running / 75 errors / 56.00000000000001% coverage ] ****** [78 done /58 queued / 16 running / 76 errors / 56.00000000000001% coverage ] ****** [78 done /58 queued / 16 running / 76 errors / 56.00000000000001% coverage ] ****** [79 done /59 queued / 16 running / 77 errors / 56.00000000000001% coverage ] ****** [79 done /59 queued / 16 running / 77 errors / 56.00000000000001% coverage ] ****** [80 done /60 queued / 16 running / 78 errors / 56.00000000000001% coverage ] ****** [80 done /60 queued / 16 running / 78 errors / 56.00000000000001% coverage ] ****** [81 done /63 queued / 16 running / 79 errors / 56.00000000000001% coverage ] ****** [81 done /63 queued / 16 running / 79 errors / 56.00000000000001% coverage ] ****** [82 done /65 queued / 16 running / 80 errors / 56.00000000000001% coverage ] ****** [82 done /65 queued / 16 running / 80 errors / 56.00000000000001% coverage ] ****** [83 done /65 queued / 16 running / 81 errors / 56.00000000000001% coverage ] ****** [83 done /65 queued / 16 running / 81 errors / 56.00000000000001% coverage ] ****** [84 done /66 queued / 16 running / 82 errors / 56.00000000000001% coverage ] ****** [84 done /66 queued / 16 running / 82 errors / 56.00000000000001% coverage ] ****** [85 done /67 queued / 16 running / 83 errors / 56.00000000000001% coverage ] ****** [85 done /67 queued / 16 running / 83 errors / 56.00000000000001% coverage ] ****** [86 done /67 queued / 16 running / 84 errors / 56.00000000000001% coverage ] ****** [86 done /67 queued / 16 running / 84 errors / 56.00000000000001% coverage ] ****** [87 done /71 queued / 16 running / 85 errors / 56.00000000000001% coverage ] ****** [87 done /71 queued / 16 running / 85 errors / 56.00000000000001% coverage ] ****** [88 done /72 queued / 16 running / 86 errors / 56.00000000000001% coverage ] ****** [88 done /72 queued / 16 running / 86 errors / 56.00000000000001% coverage ] ****** [89 done /73 queued / 16 running / 87 errors / 56.00000000000001% coverage ] ****** [89 done /73 queued / 16 running / 87 errors / 56.00000000000001% coverage ] ****** [90 done /74 queued / 16 running / 88 errors / 56.00000000000001% coverage ] ****** [90 done /74 queued / 16 running / 88 errors / 56.00000000000001% coverage ] ****** [91 done /76 queued / 16 running / 89 errors / 56.00000000000001% coverage ] ****** [91 done /76 queued / 16 running / 89 errors / 56.00000000000001% coverage ] ****** [92 done /76 queued / 16 running / 90 errors / 56.00000000000001% coverage ] ****** [92 done /76 queued / 16 running / 90 errors / 56.00000000000001% coverage ] ****** [93 done /76 queued / 16 running / 91 errors / 56.00000000000001% coverage ] ****** [93 done /76 queued / 16 running / 91 errors / 56.00000000000001% coverage ] ****** [94 done /76 queued / 16 running / 92 errors / 56.00000000000001% coverage ] ****** [94 done /76 queued / 16 running / 92 errors / 56.00000000000001% coverage ] ****** [95 done /76 queued / 16 running / 93 errors / 56.00000000000001% coverage ] ****** [95 done /76 queued / 16 running / 93 errors / 56.00000000000001% coverage ] ****** [96 done /77 queued / 16 running / 94 errors / 56.00000000000001% coverage ] ****** [96 done /77 queued / 16 running / 94 errors / 56.00000000000001% coverage ] ****** [97 done /78 queued / 16 running / 95 errors / 56.00000000000001% coverage ] ****** [97 done /78 queued / 16 running / 95 errors / 56.00000000000001% coverage ] ****** [98 done /78 queued / 16 running / 96 errors / 56.00000000000001% coverage ] ****** [98 done /78 queued / 16 running / 96 errors / 56.00000000000001% coverage ] ****** [99 done /79 queued / 16 running / 97 errors / 56.00000000000001% coverage ] ****** [99 done /79 queued / 16 running / 97 errors / 56.00000000000001% coverage ] ****** [100 done /80 queued / 16 running / 98 errors / 56.00000000000001% coverage ] ****** [100 done /80 queued / 16 running / 98 errors / 56.00000000000001% coverage ] ****** [101 done /82 queued / 16 running / 99 errors / 56.00000000000001% coverage ] ****** [101 done /82 queued / 16 running / 99 errors / 56.00000000000001% coverage ] ****** [102 done /82 queued / 16 running / 100 errors / 56.00000000000001% coverage ] ****** [102 done /82 queued / 16 running / 100 errors / 56.00000000000001% coverage ] ****** [103 done /83 queued / 16 running / 101 errors / 56.00000000000001% coverage ] ****** [103 done /83 queued / 16 running / 101 errors / 56.00000000000001% coverage ] ****** [104 done /84 queued / 16 running / 102 errors / 56.00000000000001% coverage ] ****** [104 done /84 queued / 16 running / 102 errors / 56.00000000000001% coverage ] ****** [105 done /85 queued / 16 running / 103 errors / 56.00000000000001% coverage ] ****** [105 done /85 queued / 16 running / 103 errors / 56.00000000000001% coverage ] ****** [106 done /86 queued / 16 running / 104 errors / 56.00000000000001% coverage ] ****** [106 done /86 queued / 16 running / 104 errors / 56.00000000000001% coverage ] ****** [107 done /86 queued / 16 running / 105 errors / 56.00000000000001% coverage ] ****** [107 done /86 queued / 16 running / 105 errors / 56.00000000000001% coverage ] ****** [108 done /87 queued / 16 running / 106 errors / 56.00000000000001% coverage ] ****** [108 done /87 queued / 16 running / 106 errors / 56.00000000000001% coverage ] ****** [109 done /88 queued / 16 running / 107 errors / 56.00000000000001% coverage ] ****** [109 done /88 queued / 16 running / 107 errors / 56.00000000000001% coverage ] ****** [110 done /88 queued / 16 running / 108 errors / 56.00000000000001% coverage ] ****** [110 done /88 queued / 16 running / 108 errors / 56.00000000000001% coverage ] ****** [111 done /88 queued / 16 running / 109 errors / 56.00000000000001% coverage ] ****** [111 done /88 queued / 16 running / 109 errors / 56.00000000000001% coverage ] ****** [112 done /89 queued / 16 running / 110 errors / 56.00000000000001% coverage ] ****** [112 done /89 queued / 16 running / 110 errors / 56.00000000000001% coverage ] ****** [113 done /91 queued / 16 running / 111 errors / 56.00000000000001% coverage ] ****** [113 done /91 queued / 16 running / 111 errors / 56.00000000000001% coverage ] ****** [114 done /93 queued / 16 running / 112 errors / 56.00000000000001% coverage ] ****** [114 done /93 queued / 16 running / 112 errors / 56.00000000000001% coverage ] ****** [115 done /94 queued / 16 running / 113 errors / 56.00000000000001% coverage ] ****** [115 done /94 queued / 16 running / 113 errors / 56.00000000000001% coverage ] ****** [116 done /95 queued / 16 running / 114 errors / 56.00000000000001% coverage ] ****** [116 done /95 queued / 16 running / 114 errors / 56.00000000000001% coverage ] ****** [117 done /96 queued / 16 running / 115 errors / 56.00000000000001% coverage ] ****** [117 done /96 queued / 16 running / 115 errors / 56.00000000000001% coverage ] ****** [118 done /97 queued / 16 running / 116 errors / 56.00000000000001% coverage ] ****** [118 done /97 queued / 16 running / 116 errors / 56.00000000000001% coverage ] ****** [119 done /99 queued / 16 running / 117 errors / 56.00000000000001% coverage ] ****** [119 done /99 queued / 16 running / 117 errors / 56.00000000000001% coverage ] ****** [120 done /100 queued / 16 running / 118 errors / 56.00000000000001% coverage ] ****** [120 done /100 queued / 16 running / 118 errors / 56.00000000000001% coverage ] ****** [121 done /101 queued / 16 running / 119 errors / 56.00000000000001% coverage ] ****** [121 done /101 queued / 16 running / 119 errors / 56.00000000000001% coverage ] ****** [122 done /103 queued / 16 running / 120 errors / 56.00000000000001% coverage ] ****** [122 done /103 queued / 16 running / 120 errors / 56.00000000000001% coverage ] ****** [123 done /104 queued / 16 running / 121 errors / 56.00000000000001% coverage ] ****** [123 done /104 queued / 16 running / 121 errors / 56.00000000000001% coverage ] ****** [124 done /105 queued / 16 running / 122 errors / 56.00000000000001% coverage ] ****** [124 done /105 queued / 16 running / 122 errors / 56.00000000000001% coverage ] ****** [125 done /106 queued / 16 running / 123 errors / 56.00000000000001% coverage ] ****** [125 done /106 queued / 16 running / 123 errors / 56.00000000000001% coverage ] ****** [126 done /107 queued / 16 running / 124 errors / 56.00000000000001% coverage ] ****** [126 done /107 queued / 16 running / 124 errors / 56.00000000000001% coverage ] ****** [127 done /108 queued / 16 running / 125 errors / 56.00000000000001% coverage ] ****** [127 done /108 queued / 16 running / 125 errors / 56.00000000000001% coverage ] ****** [128 done /109 queued / 16 running / 126 errors / 56.00000000000001% coverage ] ****** [128 done /109 queued / 16 running / 126 errors / 56.00000000000001% coverage ] ****** [129 done /113 queued / 16 running / 127 errors / 56.00000000000001% coverage ] ****** [129 done /113 queued / 16 running / 127 errors / 56.00000000000001% coverage ] ****** [130 done /113 queued / 16 running / 128 errors / 56.00000000000001% coverage ] ****** [130 done /113 queued / 16 running / 128 errors / 56.00000000000001% coverage ] ****** [131 done /114 queued / 16 running / 129 errors / 56.00000000000001% coverage ] ****** [131 done /114 queued / 16 running / 129 errors / 56.00000000000001% coverage ] ****** [132 done /115 queued / 16 running / 130 errors / 56.00000000000001% coverage ] ****** [132 done /115 queued / 16 running / 130 errors / 56.00000000000001% coverage ] ****** [133 done /115 queued / 16 running / 131 errors / 56.00000000000001% coverage ] ****** [133 done /115 queued / 16 running / 131 errors / 56.00000000000001% coverage ] ****** [134 done /116 queued / 16 running / 132 errors / 56.00000000000001% coverage ] ****** [134 done /116 queued / 16 running / 132 errors / 56.00000000000001% coverage ] ****** [135 done /117 queued / 16 running / 133 errors / 56.00000000000001% coverage ] ****** [135 done /117 queued / 16 running / 133 errors / 56.00000000000001% coverage ] ****** [136 done /118 queued / 16 running / 134 errors / 56.00000000000001% coverage ] ****** [136 done /118 queued / 16 running / 134 errors / 56.00000000000001% coverage ] ****** [137 done /118 queued / 16 running / 135 errors / 56.00000000000001% coverage ] ****** [137 done /118 queued / 16 running / 135 errors / 56.00000000000001% coverage ] ****** [138 done /118 queued / 16 running / 136 errors / 56.00000000000001% coverage ] ****** [138 done /118 queued / 16 running / 136 errors / 56.00000000000001% coverage ] ****** [139 done /119 queued / 16 running / 137 errors / 56.00000000000001% coverage ] ****** [139 done /119 queued / 16 running / 137 errors / 56.00000000000001% coverage ] ****** [140 done /120 queued / 16 running / 138 errors / 56.00000000000001% coverage ] ****** [140 done /120 queued / 16 running / 138 errors / 56.00000000000001% coverage ] ****** [141 done /120 queued / 16 running / 139 errors / 56.00000000000001% coverage ] ****** [141 done /120 queued / 16 running / 139 errors / 56.00000000000001% coverage ] ****** [142 done /120 queued / 16 running / 140 errors / 56.00000000000001% coverage ] ****** [142 done /120 queued / 16 running / 140 errors / 56.00000000000001% coverage ] ****** [143 done /120 queued / 16 running / 141 errors / 56.00000000000001% coverage ] ****** [143 done /120 queued / 16 running / 141 errors / 56.00000000000001% coverage ] ****** [144 done /121 queued / 16 running / 142 errors / 56.00000000000001% coverage ] ****** [144 done /121 queued / 16 running / 142 errors / 56.00000000000001% coverage ] ****** [145 done /122 queued / 16 running / 143 errors / 56.00000000000001% coverage ] ****** [145 done /122 queued / 16 running / 143 errors / 56.00000000000001% coverage ] ****** [146 done /123 queued / 16 running / 144 errors / 56.00000000000001% coverage ] ****** [146 done /123 queued / 16 running / 144 errors / 56.00000000000001% coverage ] ****** [147 done /127 queued / 16 running / 145 errors / 56.00000000000001% coverage ] ****** [147 done /127 queued / 16 running / 145 errors / 56.00000000000001% coverage ] ****** [148 done /128 queued / 16 running / 146 errors / 56.00000000000001% coverage ] ****** [148 done /128 queued / 16 running / 146 errors / 56.00000000000001% coverage ] ****** [149 done /131 queued / 16 running / 147 errors / 56.00000000000001% coverage ] ****** [149 done /131 queued / 16 running / 147 errors / 56.00000000000001% coverage ] ****** [150 done /134 queued / 16 running / 148 errors / 56.00000000000001% coverage ] ****** [150 done /134 queued / 16 running / 148 errors / 56.00000000000001% coverage ] ****** [151 done /136 queued / 16 running / 149 errors / 56.00000000000001% coverage ] ****** [151 done /136 queued / 16 running / 149 errors / 56.00000000000001% coverage ] ****** [152 done /137 queued / 16 running / 150 errors / 56.00000000000001% coverage ] ****** [152 done /137 queued / 16 running / 150 errors / 56.00000000000001% coverage ] ****** [153 done /138 queued / 16 running / 151 errors / 56.00000000000001% coverage ] ****** [153 done /138 queued / 16 running / 151 errors / 56.00000000000001% coverage ] ****** [154 done /139 queued / 16 running / 152 errors / 56.00000000000001% coverage ] ****** [154 done /139 queued / 16 running / 152 errors / 56.00000000000001% coverage ] ****** [155 done /140 queued / 16 running / 153 errors / 56.00000000000001% coverage ] ****** [155 done /140 queued / 16 running / 153 errors / 56.00000000000001% coverage ] ****** [156 done /141 queued / 16 running / 154 errors / 56.00000000000001% coverage ] ****** [156 done /141 queued / 16 running / 154 errors / 56.00000000000001% coverage ] ****** [157 done /141 queued / 16 running / 155 errors / 56.00000000000001% coverage ] ****** [157 done /141 queued / 16 running / 155 errors / 56.00000000000001% coverage ] ****** [158 done /143 queued / 16 running / 156 errors / 56.00000000000001% coverage ] ****** [158 done /143 queued / 16 running / 156 errors / 56.00000000000001% coverage ] ****** [159 done /144 queued / 16 running / 157 errors / 56.00000000000001% coverage ] ****** [159 done /144 queued / 16 running / 157 errors / 56.00000000000001% coverage ] ****** [160 done /145 queued / 16 running / 158 errors / 56.00000000000001% coverage ] ****** [160 done /145 queued / 16 running / 158 errors / 56.00000000000001% coverage ] ****** [161 done /145 queued / 16 running / 159 errors / 56.00000000000001% coverage ] ****** [161 done /145 queued / 16 running / 159 errors / 56.00000000000001% coverage ] ****** [162 done /147 queued / 16 running / 160 errors / 56.00000000000001% coverage ] ****** [162 done /147 queued / 16 running / 160 errors / 56.00000000000001% coverage ] ****** [163 done /147 queued / 16 running / 161 errors / 56.00000000000001% coverage ] ****** [163 done /147 queued / 16 running / 161 errors / 56.00000000000001% coverage ] ****** [164 done /149 queued / 16 running / 162 errors / 56.00000000000001% coverage ] ****** [164 done /149 queued / 16 running / 162 errors / 56.00000000000001% coverage ] ****** [165 done /151 queued / 16 running / 163 errors / 56.00000000000001% coverage ] ****** [165 done /151 queued / 16 running / 163 errors / 56.00000000000001% coverage ] ****** [166 done /153 queued / 16 running / 164 errors / 56.00000000000001% coverage ] ****** [166 done /153 queued / 16 running / 164 errors / 56.00000000000001% coverage ] ****** [167 done /154 queued / 16 running / 165 errors / 56.00000000000001% coverage ] ****** [167 done /154 queued / 16 running / 165 errors / 56.00000000000001% coverage ] ****** [168 done /154 queued / 16 running / 166 errors / 56.00000000000001% coverage ] ****** [168 done /154 queued / 16 running / 166 errors / 56.00000000000001% coverage ] ****** [169 done /154 queued / 16 running / 167 errors / 56.00000000000001% coverage ] ****** [169 done /154 queued / 16 running / 167 errors / 56.00000000000001% coverage ] ****** [170 done /155 queued / 16 running / 168 errors / 56.00000000000001% coverage ] ****** [170 done /155 queued / 16 running / 168 errors / 56.00000000000001% coverage ] ****** [171 done /155 queued / 16 running / 169 errors / 56.00000000000001% coverage ] ****** [171 done /155 queued / 16 running / 169 errors / 56.00000000000001% coverage ] ****** [172 done /155 queued / 16 running / 170 errors / 56.00000000000001% coverage ] ****** [172 done /155 queued / 16 running / 170 errors / 56.00000000000001% coverage ] ****** [173 done /155 queued / 16 running / 171 errors / 56.00000000000001% coverage ] ****** [173 done /155 queued / 16 running / 171 errors / 56.00000000000001% coverage ] ****** [174 done /156 queued / 16 running / 172 errors / 56.00000000000001% coverage ] ****** [174 done /156 queued / 16 running / 172 errors / 56.00000000000001% coverage ] ****** [175 done /156 queued / 16 running / 173 errors / 56.00000000000001% coverage ] ****** [175 done /156 queued / 16 running / 173 errors / 56.00000000000001% coverage ] ****** [176 done /156 queued / 16 running / 174 errors / 56.00000000000001% coverage ] ****** [176 done /156 queued / 16 running / 174 errors / 56.00000000000001% coverage ] ****** [177 done /157 queued / 16 running / 175 errors / 56.00000000000001% coverage ] ****** [177 done /157 queued / 16 running / 175 errors / 56.00000000000001% coverage ] ****** [178 done /158 queued / 16 running / 176 errors / 56.00000000000001% coverage ] ****** [178 done /158 queued / 16 running / 176 errors / 56.00000000000001% coverage ] ****** [179 done /159 queued / 16 running / 177 errors / 56.00000000000001% coverage ] ****** [179 done /159 queued / 16 running / 177 errors / 56.00000000000001% coverage ] ****** [180 done /159 queued / 16 running / 178 errors / 56.00000000000001% coverage ] ****** [180 done /159 queued / 16 running / 178 errors / 56.00000000000001% coverage ] ****** [181 done /160 queued / 16 running / 179 errors / 56.00000000000001% coverage ] ****** [181 done /160 queued / 16 running / 179 errors / 56.00000000000001% coverage ] ****** [182 done /161 queued / 16 running / 180 errors / 56.00000000000001% coverage ] ****** [182 done /161 queued / 16 running / 180 errors / 56.00000000000001% coverage ] ****** [183 done /163 queued / 16 running / 181 errors / 56.00000000000001% coverage ] ****** [183 done /163 queued / 16 running / 181 errors / 56.00000000000001% coverage ] ****** [184 done /165 queued / 16 running / 182 errors / 56.00000000000001% coverage ] ****** [184 done /165 queued / 16 running / 182 errors / 56.00000000000001% coverage ] ****** [185 done /166 queued / 16 running / 183 errors / 56.00000000000001% coverage ] ****** [185 done /166 queued / 16 running / 183 errors / 56.00000000000001% coverage ] ****** [186 done /166 queued / 16 running / 184 errors / 56.00000000000001% coverage ] ****** [186 done /166 queued / 16 running / 184 errors / 56.00000000000001% coverage ] ****** [187 done /167 queued / 16 running / 185 errors / 56.00000000000001% coverage ] ****** [187 done /167 queued / 16 running / 185 errors / 56.00000000000001% coverage ] ****** [188 done /168 queued / 16 running / 186 errors / 56.00000000000001% coverage ] ****** [188 done /168 queued / 16 running / 186 errors / 56.00000000000001% coverage ] ****** [189 done /169 queued / 16 running / 187 errors / 56.00000000000001% coverage ] ****** [189 done /169 queued / 16 running / 187 errors / 56.00000000000001% coverage ] ****** [190 done /170 queued / 16 running / 188 errors / 56.00000000000001% coverage ] ****** [190 done /170 queued / 16 running / 188 errors / 56.00000000000001% coverage ] ****** [191 done /173 queued / 16 running / 189 errors / 56.00000000000001% coverage ] ****** [191 done /173 queued / 16 running / 189 errors / 56.00000000000001% coverage ] ****** [192 done /174 queued / 16 running / 190 errors / 56.00000000000001% coverage ] ****** [192 done /174 queued / 16 running / 190 errors / 56.00000000000001% coverage ] ****** [193 done /176 queued / 16 running / 191 errors / 56.00000000000001% coverage ] ****** [193 done /176 queued / 16 running / 191 errors / 56.00000000000001% coverage ] ****** [194 done /177 queued / 16 running / 192 errors / 56.00000000000001% coverage ] ****** [194 done /177 queued / 16 running / 192 errors / 56.00000000000001% coverage ] ****** [195 done /178 queued / 16 running / 193 errors / 56.00000000000001% coverage ] ****** [195 done /178 queued / 16 running / 193 errors / 56.00000000000001% coverage ] ****** [196 done /179 queued / 16 running / 194 errors / 56.00000000000001% coverage ] ****** [196 done /179 queued / 16 running / 194 errors / 56.00000000000001% coverage ] ****** [197 done /179 queued / 16 running / 195 errors / 56.00000000000001% coverage ] ****** [197 done /179 queued / 16 running / 195 errors / 56.00000000000001% coverage ] ****** [198 done /180 queued / 16 running / 196 errors / 56.00000000000001% coverage ] ****** [198 done /180 queued / 16 running / 196 errors / 56.00000000000001% coverage ] ****** [199 done /181 queued / 16 running / 197 errors / 56.00000000000001% coverage ] ****** [199 done /181 queued / 16 running / 197 errors / 56.00000000000001% coverage ] ****** [200 done /182 queued / 16 running / 198 errors / 56.00000000000001% coverage ] ****** [200 done /182 queued / 16 running / 198 errors / 56.00000000000001% coverage ] ****** [201 done /184 queued / 16 running / 199 errors / 56.00000000000001% coverage ] ****** [201 done /184 queued / 16 running / 199 errors / 56.00000000000001% coverage ] ****** [202 done /184 queued / 16 running / 200 errors / 56.00000000000001% coverage ] ****** [202 done /184 queued / 16 running / 200 errors / 56.00000000000001% coverage ] ****** [203 done /187 queued / 16 running / 201 errors / 56.00000000000001% coverage ] ****** [203 done /187 queued / 16 running / 201 errors / 56.00000000000001% coverage ] ****** [204 done /188 queued / 16 running / 202 errors / 56.00000000000001% coverage ] ****** [204 done /188 queued / 16 running / 202 errors / 56.00000000000001% coverage ] ****** [205 done /190 queued / 16 running / 203 errors / 56.00000000000001% coverage ] ****** [205 done /190 queued / 16 running / 203 errors / 56.00000000000001% coverage ] ****** [206 done /191 queued / 16 running / 204 errors / 56.00000000000001% coverage ] ****** [206 done /191 queued / 16 running / 204 errors / 56.00000000000001% coverage ] ****** [207 done /195 queued / 16 running / 205 errors / 56.00000000000001% coverage ] ****** [207 done /195 queued / 16 running / 205 errors / 56.00000000000001% coverage ] ****** [208 done /196 queued / 16 running / 206 errors / 56.00000000000001% coverage ] ****** [208 done /196 queued / 16 running / 206 errors / 56.00000000000001% coverage ] ****** [209 done /197 queued / 16 running / 207 errors / 56.00000000000001% coverage ] ****** [209 done /197 queued / 16 running / 207 errors / 56.00000000000001% coverage ] ****** [210 done /198 queued / 16 running / 208 errors / 56.00000000000001% coverage ] ****** [210 done /198 queued / 16 running / 208 errors / 56.00000000000001% coverage ] ****** [211 done /201 queued / 16 running / 209 errors / 56.00000000000001% coverage ] ****** [211 done /201 queued / 16 running / 209 errors / 56.00000000000001% coverage ] ****** [212 done /202 queued / 16 running / 210 errors / 56.00000000000001% coverage ] ****** [212 done /202 queued / 16 running / 210 errors / 56.00000000000001% coverage ] ****** [213 done /204 queued / 16 running / 211 errors / 56.00000000000001% coverage ] ****** [213 done /204 queued / 16 running / 211 errors / 56.00000000000001% coverage ] ****** [214 done /205 queued / 16 running / 212 errors / 56.00000000000001% coverage ] ****** [214 done /205 queued / 16 running / 212 errors / 56.00000000000001% coverage ] ****** [215 done /205 queued / 16 running / 213 errors / 56.00000000000001% coverage ] ****** [215 done /205 queued / 16 running / 213 errors / 56.00000000000001% coverage ] ****** [216 done /207 queued / 16 running / 214 errors / 56.00000000000001% coverage ] ****** [216 done /207 queued / 16 running / 214 errors / 56.00000000000001% coverage ] ****** [217 done /211 queued / 16 running / 215 errors / 56.00000000000001% coverage ] ****** [217 done /211 queued / 16 running / 215 errors / 56.00000000000001% coverage ] ****** [218 done /212 queued / 16 running / 216 errors / 56.00000000000001% coverage ] ****** [218 done /212 queued / 16 running / 216 errors / 56.00000000000001% coverage ] ****** [219 done /213 queued / 16 running / 217 errors / 56.00000000000001% coverage ] ****** [219 done /213 queued / 16 running / 217 errors / 56.00000000000001% coverage ] ****** [220 done /214 queued / 16 running / 218 errors / 56.00000000000001% coverage ] ****** [220 done /214 queued / 16 running / 218 errors / 56.00000000000001% coverage ] ****** [221 done /214 queued / 16 running / 219 errors / 56.00000000000001% coverage ] ****** [221 done /214 queued / 16 running / 219 errors / 56.00000000000001% coverage ] ****** [222 done /215 queued / 16 running / 220 errors / 56.00000000000001% coverage ] ****** [222 done /215 queued / 16 running / 220 errors / 56.00000000000001% coverage ] ****** [223 done /215 queued / 16 running / 221 errors / 56.00000000000001% coverage ] ****** [223 done /215 queued / 16 running / 221 errors / 56.00000000000001% coverage ] ****** [224 done /216 queued / 16 running / 222 errors / 56.00000000000001% coverage ] ****** [224 done /216 queued / 16 running / 222 errors / 56.00000000000001% coverage ] ****** [225 done /217 queued / 16 running / 223 errors / 56.00000000000001% coverage ] ****** [225 done /217 queued / 16 running / 223 errors / 56.00000000000001% coverage ] ****** [226 done /219 queued / 16 running / 224 errors / 56.00000000000001% coverage ] ****** [226 done /219 queued / 16 running / 224 errors / 56.00000000000001% coverage ] ****** [227 done /219 queued / 16 running / 225 errors / 56.00000000000001% coverage ] ****** [227 done /219 queued / 16 running / 225 errors / 56.00000000000001% coverage ] ****** [228 done /219 queued / 16 running / 226 errors / 56.00000000000001% coverage ] ****** [228 done /219 queued / 16 running / 226 errors / 56.00000000000001% coverage ] ****** [229 done /220 queued / 16 running / 227 errors / 56.00000000000001% coverage ] ****** [229 done /220 queued / 16 running / 227 errors / 56.00000000000001% coverage ] ****** [230 done /220 queued / 16 running / 228 errors / 56.00000000000001% coverage ] ****** [230 done /220 queued / 16 running / 228 errors / 56.00000000000001% coverage ] ****** [231 done /221 queued / 16 running / 229 errors / 56.00000000000001% coverage ] ****** [231 done /221 queued / 16 running / 229 errors / 56.00000000000001% coverage ] ****** [232 done /222 queued / 16 running / 230 errors / 56.00000000000001% coverage ] ****** [232 done /222 queued / 16 running / 230 errors / 56.00000000000001% coverage ] ****** [233 done /222 queued / 16 running / 231 errors / 56.00000000000001% coverage ] ****** [233 done /222 queued / 16 running / 231 errors / 56.00000000000001% coverage ] ****** [234 done /224 queued / 16 running / 232 errors / 56.00000000000001% coverage ] ****** [234 done /224 queued / 16 running / 232 errors / 56.00000000000001% coverage ] ****** [235 done /224 queued / 16 running / 233 errors / 56.00000000000001% coverage ] ****** [235 done /224 queued / 16 running / 233 errors / 56.00000000000001% coverage ] ****** [236 done /224 queued / 16 running / 234 errors / 56.00000000000001% coverage ] ****** [236 done /224 queued / 16 running / 234 errors / 56.00000000000001% coverage ] ****** [237 done /225 queued / 16 running / 235 errors / 56.00000000000001% coverage ] ****** [237 done /225 queued / 16 running / 235 errors / 56.00000000000001% coverage ] ****** [238 done /226 queued / 16 running / 236 errors / 56.00000000000001% coverage ] ****** [238 done /226 queued / 16 running / 236 errors / 56.00000000000001% coverage ] ****** [239 done /227 queued / 16 running / 237 errors / 56.00000000000001% coverage ] ****** [239 done /227 queued / 16 running / 237 errors / 56.00000000000001% coverage ] ****** [240 done /228 queued / 16 running / 238 errors / 56.00000000000001% coverage ] ****** [240 done /228 queued / 16 running / 238 errors / 56.00000000000001% coverage ] ****** [241 done /229 queued / 16 running / 239 errors / 56.00000000000001% coverage ] ****** [241 done /229 queued / 16 running / 239 errors / 56.00000000000001% coverage ] ****** [242 done /233 queued / 16 running / 240 errors / 56.00000000000001% coverage ] ****** [242 done /233 queued / 16 running / 240 errors / 56.00000000000001% coverage ] ****** [243 done /234 queued / 16 running / 241 errors / 56.00000000000001% coverage ] ****** [243 done /234 queued / 16 running / 241 errors / 56.00000000000001% coverage ] ****** [244 done /235 queued / 16 running / 242 errors / 56.00000000000001% coverage ] ****** [244 done /235 queued / 16 running / 242 errors / 56.00000000000001% coverage ] ****** [245 done /237 queued / 16 running / 243 errors / 56.00000000000001% coverage ] ****** [245 done /237 queued / 16 running / 243 errors / 56.00000000000001% coverage ] ****** [246 done /239 queued / 16 running / 244 errors / 56.00000000000001% coverage ] ****** [246 done /239 queued / 16 running / 244 errors / 56.00000000000001% coverage ] ****** [247 done /240 queued / 16 running / 245 errors / 56.00000000000001% coverage ] ****** [247 done /240 queued / 16 running / 245 errors / 56.00000000000001% coverage ] ****** [248 done /241 queued / 16 running / 246 errors / 56.00000000000001% coverage ] ****** [248 done /241 queued / 16 running / 246 errors / 56.00000000000001% coverage ] ****** [249 done /242 queued / 16 running / 247 errors / 56.00000000000001% coverage ] ****** [249 done /242 queued / 16 running / 247 errors / 56.00000000000001% coverage ] ****** [250 done /246 queued / 16 running / 248 errors / 56.00000000000001% coverage ] ****** [250 done /246 queued / 16 running / 248 errors / 56.00000000000001% coverage ] ****** [251 done /247 queued / 16 running / 249 errors / 56.00000000000001% coverage ] ****** [251 done /247 queued / 16 running / 249 errors / 56.00000000000001% coverage ] ****** [252 done /248 queued / 16 running / 250 errors / 56.00000000000001% coverage ] ****** [252 done /248 queued / 16 running / 250 errors / 56.00000000000001% coverage ] ****** [253 done /250 queued / 16 running / 251 errors / 56.00000000000001% coverage ] ****** [253 done /250 queued / 16 running / 251 errors / 56.00000000000001% coverage ] ****** [254 done /251 queued / 16 running / 252 errors / 56.00000000000001% coverage ] ****** [254 done /251 queued / 16 running / 252 errors / 56.00000000000001% coverage ] ****** [255 done /252 queued / 16 running / 253 errors / 56.00000000000001% coverage ] ****** [255 done /252 queued / 16 running / 253 errors / 56.00000000000001% coverage ] ****** [256 done /252 queued / 16 running / 254 errors / 56.00000000000001% coverage ] ****** [256 done /252 queued / 16 running / 254 errors / 56.00000000000001% coverage ] ****** [257 done /253 queued / 16 running / 255 errors / 56.00000000000001% coverage ] ****** [257 done /253 queued / 16 running / 255 errors / 56.00000000000001% coverage ] ****** [258 done /257 queued / 16 running / 256 errors / 56.00000000000001% coverage ] ****** [258 done /257 queued / 16 running / 256 errors / 56.00000000000001% coverage ] ****** [259 done /258 queued / 16 running / 257 errors / 56.00000000000001% coverage ] ****** [259 done /258 queued / 16 running / 257 errors / 56.00000000000001% coverage ] ****** [260 done /259 queued / 16 running / 258 errors / 56.00000000000001% coverage ] ****** [260 done /259 queued / 16 running / 258 errors / 56.00000000000001% coverage ] ****** [261 done /259 queued / 16 running / 259 errors / 56.00000000000001% coverage ] ****** [261 done /259 queued / 16 running / 259 errors / 56.00000000000001% coverage ] ****** [262 done /259 queued / 16 running / 260 errors / 56.00000000000001% coverage ] ****** [262 done /259 queued / 16 running / 260 errors / 56.00000000000001% coverage ] ****** [263 done /261 queued / 16 running / 261 errors / 56.00000000000001% coverage ] ****** [263 done /261 queued / 16 running / 261 errors / 56.00000000000001% coverage ] ****** [264 done /261 queued / 16 running / 262 errors / 56.00000000000001% coverage ] ****** [264 done /261 queued / 16 running / 262 errors / 56.00000000000001% coverage ] ****** [265 done /261 queued / 16 running / 263 errors / 56.00000000000001% coverage ] ****** [265 done /261 queued / 16 running / 263 errors / 56.00000000000001% coverage ] ****** [266 done /261 queued / 16 running / 264 errors / 56.00000000000001% coverage ] ****** [266 done /261 queued / 16 running / 264 errors / 56.00000000000001% coverage ] ****** [267 done /263 queued / 16 running / 265 errors / 56.00000000000001% coverage ] ****** [267 done /263 queued / 16 running / 265 errors / 56.00000000000001% coverage ] ****** [268 done /267 queued / 16 running / 266 errors / 56.00000000000001% coverage ] ****** [268 done /267 queued / 16 running / 266 errors / 56.00000000000001% coverage ] ****** [269 done /269 queued / 16 running / 267 errors / 56.00000000000001% coverage ] ****** [269 done /269 queued / 16 running / 267 errors / 56.00000000000001% coverage ] ****** [270 done /273 queued / 16 running / 268 errors / 56.00000000000001% coverage ] ****** [270 done /273 queued / 16 running / 268 errors / 56.00000000000001% coverage ] ****** [271 done /274 queued / 16 running / 269 errors / 56.00000000000001% coverage ] ****** [271 done /274 queued / 16 running / 269 errors / 56.00000000000001% coverage ] ****** [272 done /274 queued / 16 running / 270 errors / 56.00000000000001% coverage ] ****** [272 done /274 queued / 16 running / 270 errors / 56.00000000000001% coverage ] ****** [273 done /274 queued / 16 running / 271 errors / 56.00000000000001% coverage ] ****** [273 done /274 queued / 16 running / 271 errors / 56.00000000000001% coverage ] ****** [274 done /274 queued / 16 running / 272 errors / 56.00000000000001% coverage ] ****** [274 done /274 queued / 16 running / 272 errors / 56.00000000000001% coverage ] ****** [275 done /276 queued / 16 running / 273 errors / 56.00000000000001% coverage ] ****** [275 done /276 queued / 16 running / 273 errors / 56.00000000000001% coverage ] ****** [276 done /277 queued / 16 running / 274 errors / 56.00000000000001% coverage ] ****** [276 done /277 queued / 16 running / 274 errors / 56.00000000000001% coverage ] ****** [277 done /281 queued / 16 running / 275 errors / 56.00000000000001% coverage ] ****** [277 done /281 queued / 16 running / 275 errors / 56.00000000000001% coverage ] ****** [278 done /281 queued / 16 running / 276 errors / 56.00000000000001% coverage ] ****** [278 done /281 queued / 16 running / 276 errors / 56.00000000000001% coverage ] ****** [279 done /282 queued / 16 running / 277 errors / 56.00000000000001% coverage ] ****** [279 done /282 queued / 16 running / 277 errors / 56.00000000000001% coverage ] ****** [280 done /282 queued / 16 running / 278 errors / 56.00000000000001% coverage ] ****** [280 done /282 queued / 16 running / 278 errors / 56.00000000000001% coverage ] ****** [281 done /283 queued / 16 running / 279 errors / 56.00000000000001% coverage ] ****** [281 done /283 queued / 16 running / 279 errors / 56.00000000000001% coverage ] ****** [282 done /283 queued / 16 running / 280 errors / 56.00000000000001% coverage ] ****** [282 done /283 queued / 16 running / 280 errors / 56.00000000000001% coverage ] ****** [283 done /284 queued / 16 running / 281 errors / 56.00000000000001% coverage ] ****** [283 done /284 queued / 16 running / 281 errors / 56.00000000000001% coverage ] ****** [284 done /286 queued / 16 running / 282 errors / 56.00000000000001% coverage ] ****** [284 done /286 queued / 16 running / 282 errors / 56.00000000000001% coverage ] ****** [285 done /287 queued / 16 running / 283 errors / 56.00000000000001% coverage ] ****** [285 done /287 queued / 16 running / 283 errors / 56.00000000000001% coverage ] ****** [286 done /287 queued / 16 running / 284 errors / 56.00000000000001% coverage ] ****** [286 done /287 queued / 16 running / 284 errors / 56.00000000000001% coverage ] ****** [287 done /288 queued / 16 running / 285 errors / 56.00000000000001% coverage ] ****** [287 done /288 queued / 16 running / 285 errors / 56.00000000000001% coverage ] ****** [288 done /288 queued / 16 running / 286 errors / 56.00000000000001% coverage ] ****** [288 done /288 queued / 16 running / 286 errors / 56.00000000000001% coverage ] ****** [289 done /289 queued / 16 running / 287 errors / 56.00000000000001% coverage ] ****** [289 done /289 queued / 16 running / 287 errors / 56.00000000000001% coverage ] ****** [290 done /291 queued / 16 running / 288 errors / 56.00000000000001% coverage ] ****** [290 done /291 queued / 16 running / 288 errors / 56.00000000000001% coverage ] ****** [291 done /291 queued / 16 running / 289 errors / 56.00000000000001% coverage ] ****** [291 done /291 queued / 16 running / 289 errors / 56.00000000000001% coverage ] ****** [292 done /291 queued / 16 running / 290 errors / 56.00000000000001% coverage ] ****** [292 done /291 queued / 16 running / 290 errors / 56.00000000000001% coverage ] ****** [293 done /292 queued / 16 running / 291 errors / 56.00000000000001% coverage ] ****** [293 done /292 queued / 16 running / 291 errors / 56.00000000000001% coverage ] ****** [294 done /292 queued / 16 running / 292 errors / 56.00000000000001% coverage ] ****** [294 done /292 queued / 16 running / 292 errors / 56.00000000000001% coverage ] ****** [295 done /292 queued / 16 running / 293 errors / 56.00000000000001% coverage ] ****** [295 done /292 queued / 16 running / 293 errors / 56.00000000000001% coverage ] ****** [296 done /292 queued / 16 running / 294 errors / 56.00000000000001% coverage ] ****** [296 done /292 queued / 16 running / 294 errors / 56.00000000000001% coverage ] ****** [297 done /292 queued / 16 running / 295 errors / 56.00000000000001% coverage ] ****** [297 done /292 queued / 16 running / 295 errors / 56.00000000000001% coverage ] ****** [298 done /292 queued / 16 running / 296 errors / 56.00000000000001% coverage ] ****** [298 done /292 queued / 16 running / 296 errors / 56.00000000000001% coverage ] ****** [299 done /294 queued / 16 running / 297 errors / 56.00000000000001% coverage ] ****** [299 done /294 queued / 16 running / 297 errors / 56.00000000000001% coverage ] ****** [300 done /295 queued / 16 running / 298 errors / 56.00000000000001% coverage ] ****** [300 done /295 queued / 16 running / 298 errors / 56.00000000000001% coverage ] ****** [301 done /295 queued / 16 running / 299 errors / 56.00000000000001% coverage ] ****** [301 done /295 queued / 16 running / 299 errors / 56.00000000000001% coverage ] ****** [302 done /295 queued / 16 running / 300 errors / 56.00000000000001% coverage ] ****** [302 done /295 queued / 16 running / 300 errors / 56.00000000000001% coverage ] ****** [303 done /296 queued / 16 running / 301 errors / 56.00000000000001% coverage ] ****** [303 done /296 queued / 16 running / 301 errors / 56.00000000000001% coverage ] ****** [304 done /296 queued / 16 running / 302 errors / 56.00000000000001% coverage ] ****** [304 done /296 queued / 16 running / 302 errors / 56.00000000000001% coverage ] ****** [305 done /297 queued / 16 running / 303 errors / 56.00000000000001% coverage ] ****** [305 done /297 queued / 16 running / 303 errors / 56.00000000000001% coverage ] ****** [306 done /299 queued / 16 running / 304 errors / 56.00000000000001% coverage ] ****** [306 done /299 queued / 16 running / 304 errors / 56.00000000000001% coverage ] ****** [307 done /299 queued / 16 running / 305 errors / 56.00000000000001% coverage ] ****** [307 done /299 queued / 16 running / 305 errors / 56.00000000000001% coverage ] ****** [308 done /300 queued / 16 running / 306 errors / 56.00000000000001% coverage ] ****** [308 done /300 queued / 16 running / 306 errors / 56.00000000000001% coverage ] ****** [309 done /301 queued / 16 running / 307 errors / 56.00000000000001% coverage ] ****** [309 done /301 queued / 16 running / 307 errors / 56.00000000000001% coverage ] ****** [310 done /302 queued / 16 running / 308 errors / 56.00000000000001% coverage ] ****** [310 done /302 queued / 16 running / 308 errors / 56.00000000000001% coverage ] ****** [311 done /305 queued / 16 running / 309 errors / 56.00000000000001% coverage ] ****** [311 done /305 queued / 16 running / 309 errors / 56.00000000000001% coverage ] ****** [312 done /306 queued / 16 running / 310 errors / 56.00000000000001% coverage ] ****** [312 done /306 queued / 16 running / 310 errors / 56.00000000000001% coverage ] ****** [313 done /307 queued / 16 running / 311 errors / 56.00000000000001% coverage ] ****** [313 done /307 queued / 16 running / 311 errors / 56.00000000000001% coverage ] ****** [314 done /308 queued / 16 running / 312 errors / 56.00000000000001% coverage ] ****** [314 done /308 queued / 16 running / 312 errors / 56.00000000000001% coverage ] ****** [315 done /310 queued / 16 running / 313 errors / 56.00000000000001% coverage ] ****** [315 done /310 queued / 16 running / 313 errors / 56.00000000000001% coverage ] ****** [316 done /311 queued / 16 running / 314 errors / 56.00000000000001% coverage ] ****** [316 done /311 queued / 16 running / 314 errors / 56.00000000000001% coverage ] ****** [317 done /312 queued / 16 running / 315 errors / 56.00000000000001% coverage ] ****** [317 done /312 queued / 16 running / 315 errors / 56.00000000000001% coverage ] ****** [318 done /312 queued / 16 running / 316 errors / 56.00000000000001% coverage ] ****** [318 done /312 queued / 16 running / 316 errors / 56.00000000000001% coverage ] ****** [319 done /312 queued / 16 running / 317 errors / 56.00000000000001% coverage ] ****** [319 done /312 queued / 16 running / 317 errors / 56.00000000000001% coverage ] ****** [320 done /316 queued / 16 running / 318 errors / 56.00000000000001% coverage ] ****** [320 done /316 queued / 16 running / 318 errors / 56.00000000000001% coverage ] ****** [321 done /319 queued / 16 running / 319 errors / 56.00000000000001% coverage ] ****** [321 done /319 queued / 16 running / 319 errors / 56.00000000000001% coverage ] ****** [322 done /320 queued / 16 running / 320 errors / 56.00000000000001% coverage ] ****** [322 done /320 queued / 16 running / 320 errors / 56.00000000000001% coverage ] ****** [323 done /321 queued / 16 running / 321 errors / 56.00000000000001% coverage ] ****** [323 done /321 queued / 16 running / 321 errors / 56.00000000000001% coverage ] ****** [324 done /323 queued / 16 running / 322 errors / 56.00000000000001% coverage ] ****** [324 done /323 queued / 16 running / 322 errors / 56.00000000000001% coverage ] ****** [325 done /326 queued / 16 running / 323 errors / 56.00000000000001% coverage ] ****** [325 done /326 queued / 16 running / 323 errors / 56.00000000000001% coverage ] ****** [326 done /329 queued / 16 running / 324 errors / 56.00000000000001% coverage ] ****** [326 done /329 queued / 16 running / 324 errors / 56.00000000000001% coverage ] ****** [327 done /330 queued / 16 running / 325 errors / 56.00000000000001% coverage ] ****** [327 done /330 queued / 16 running / 325 errors / 56.00000000000001% coverage ] ****** [328 done /332 queued / 16 running / 326 errors / 56.00000000000001% coverage ] ****** [328 done /332 queued / 16 running / 326 errors / 56.00000000000001% coverage ] ****** [329 done /334 queued / 16 running / 327 errors / 56.00000000000001% coverage ] ****** [329 done /334 queued / 16 running / 327 errors / 56.00000000000001% coverage ] ****** [330 done /335 queued / 16 running / 328 errors / 56.00000000000001% coverage ] ****** [330 done /335 queued / 16 running / 328 errors / 56.00000000000001% coverage ] ****** [331 done /336 queued / 16 running / 329 errors / 56.00000000000001% coverage ] ****** [331 done /336 queued / 16 running / 329 errors / 56.00000000000001% coverage ] ****** [332 done /337 queued / 16 running / 330 errors / 56.00000000000001% coverage ] ****** [332 done /337 queued / 16 running / 330 errors / 56.00000000000001% coverage ] ****** [333 done /338 queued / 16 running / 331 errors / 56.00000000000001% coverage ] ****** [333 done /338 queued / 16 running / 331 errors / 56.00000000000001% coverage ] ****** [334 done /338 queued / 16 running / 332 errors / 56.00000000000001% coverage ] ****** [334 done /338 queued / 16 running / 332 errors / 56.00000000000001% coverage ] ****** [335 done /339 queued / 16 running / 333 errors / 56.00000000000001% coverage ] ****** [335 done /339 queued / 16 running / 333 errors / 56.00000000000001% coverage ] ****** [336 done /339 queued / 16 running / 334 errors / 56.00000000000001% coverage ] ****** [336 done /339 queued / 16 running / 334 errors / 56.00000000000001% coverage ] ****** [337 done /339 queued / 16 running / 335 errors / 56.00000000000001% coverage ] ****** [337 done /339 queued / 16 running / 335 errors / 56.00000000000001% coverage ] ****** [338 done /342 queued / 16 running / 336 errors / 56.00000000000001% coverage ] ****** [338 done /342 queued / 16 running / 336 errors / 56.00000000000001% coverage ] ****** [339 done /343 queued / 16 running / 337 errors / 56.00000000000001% coverage ] ****** [339 done /343 queued / 16 running / 337 errors / 56.00000000000001% coverage ] ****** [340 done /343 queued / 16 running / 338 errors / 56.00000000000001% coverage ] ****** [340 done /343 queued / 16 running / 338 errors / 56.00000000000001% coverage ] ****** [341 done /343 queued / 16 running / 339 errors / 56.00000000000001% coverage ] ****** [341 done /343 queued / 16 running / 339 errors / 56.00000000000001% coverage ] ****** [342 done /345 queued / 16 running / 340 errors / 56.00000000000001% coverage ] ****** [342 done /345 queued / 16 running / 340 errors / 56.00000000000001% coverage ] ****** [343 done /346 queued / 16 running / 341 errors / 56.00000000000001% coverage ] ****** [343 done /346 queued / 16 running / 341 errors / 56.00000000000001% coverage ] ****** [344 done /347 queued / 16 running / 342 errors / 56.00000000000001% coverage ] ****** [344 done /347 queued / 16 running / 342 errors / 56.00000000000001% coverage ] ****** [345 done /349 queued / 16 running / 343 errors / 56.00000000000001% coverage ] ****** [345 done /349 queued / 16 running / 343 errors / 56.00000000000001% coverage ] ****** [346 done /350 queued / 16 running / 344 errors / 56.00000000000001% coverage ] ****** [346 done /350 queued / 16 running / 344 errors / 56.00000000000001% coverage ] ****** [347 done /351 queued / 16 running / 345 errors / 56.00000000000001% coverage ] ****** [347 done /351 queued / 16 running / 345 errors / 56.00000000000001% coverage ] ****** [348 done /351 queued / 16 running / 346 errors / 56.00000000000001% coverage ] ****** [348 done /351 queued / 16 running / 346 errors / 56.00000000000001% coverage ] ****** [349 done /352 queued / 16 running / 347 errors / 56.00000000000001% coverage ] ****** [349 done /352 queued / 16 running / 347 errors / 56.00000000000001% coverage ] ****** [350 done /352 queued / 16 running / 348 errors / 56.00000000000001% coverage ] ****** [350 done /352 queued / 16 running / 348 errors / 56.00000000000001% coverage ] ****** [351 done /353 queued / 16 running / 349 errors / 56.00000000000001% coverage ] ****** [351 done /353 queued / 16 running / 349 errors / 56.00000000000001% coverage ] ****** [352 done /356 queued / 16 running / 350 errors / 56.00000000000001% coverage ] ****** [352 done /356 queued / 16 running / 350 errors / 56.00000000000001% coverage ] ****** [353 done /356 queued / 16 running / 351 errors / 56.00000000000001% coverage ] ****** [353 done /356 queued / 16 running / 351 errors / 56.00000000000001% coverage ] ****** [354 done /358 queued / 16 running / 352 errors / 56.00000000000001% coverage ] ****** [354 done /358 queued / 16 running / 352 errors / 56.00000000000001% coverage ] ****** [355 done /358 queued / 16 running / 353 errors / 56.00000000000001% coverage ] ****** [355 done /358 queued / 16 running / 353 errors / 56.00000000000001% coverage ] ****** [356 done /360 queued / 16 running / 354 errors / 56.00000000000001% coverage ] ****** [356 done /360 queued / 16 running / 354 errors / 56.00000000000001% coverage ] ****** [357 done /364 queued / 16 running / 355 errors / 56.00000000000001% coverage ] ****** [357 done /364 queued / 16 running / 355 errors / 56.00000000000001% coverage ] ****** [358 done /367 queued / 16 running / 356 errors / 56.00000000000001% coverage ] ****** [358 done /367 queued / 16 running / 356 errors / 56.00000000000001% coverage ] ****** [359 done /368 queued / 16 running / 357 errors / 56.00000000000001% coverage ] ****** [359 done /368 queued / 16 running / 357 errors / 56.00000000000001% coverage ] ****** [360 done /369 queued / 16 running / 358 errors / 56.00000000000001% coverage ] ****** [360 done /369 queued / 16 running / 358 errors / 56.00000000000001% coverage ] ****** [361 done /369 queued / 16 running / 359 errors / 56.00000000000001% coverage ] ****** [361 done /369 queued / 16 running / 359 errors / 56.00000000000001% coverage ] ****** [362 done /369 queued / 16 running / 360 errors / 56.00000000000001% coverage ] ****** [362 done /369 queued / 16 running / 360 errors / 56.00000000000001% coverage ] ****** [363 done /370 queued / 16 running / 361 errors / 56.00000000000001% coverage ] ****** [363 done /370 queued / 16 running / 361 errors / 56.00000000000001% coverage ] ****** [364 done /371 queued / 16 running / 362 errors / 56.00000000000001% coverage ] ****** [364 done /371 queued / 16 running / 362 errors / 56.00000000000001% coverage ] ****** [365 done /372 queued / 16 running / 363 errors / 56.00000000000001% coverage ] ****** [365 done /372 queued / 16 running / 363 errors / 56.00000000000001% coverage ] ****** [366 done /372 queued / 16 running / 364 errors / 56.00000000000001% coverage ] ****** [366 done /372 queued / 16 running / 364 errors / 56.00000000000001% coverage ] ****** [367 done /373 queued / 16 running / 365 errors / 56.00000000000001% coverage ] ****** [367 done /373 queued / 16 running / 365 errors / 56.00000000000001% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","toUpperCase","bind","toString","apply","bound ","freeze","RegExp","call","randomBytes","create"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0,"Switcher":false,"Target_Switch_Base":0} start 0.0293 took 3.5248s
*-- Test Case {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"Target_Switcher":0,"ExpansionArg_type":0} start 3.6414 took 3.673s
*-- Errors occured in test {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"Target_Switcher":0,"ExpansionArg_type":0}
* Error: TypeError: Cannot read property 'log' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switch_Base":0,"_bound":1}'
*-- Test Case {"Switcher":true,"Target_Switcher":1,"ExpansionArg_type":0,"_bound":2} start 7.3565 took 3.2139s
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":1,"_bound":3} start 7.3353 took 4.3179s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":1,"_bound":3}
* Error: TypeError: Cannot read property 'log' of null
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":1,"_bound":3}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":2,"_bound":4,"ExpansionArg_int":0} start 11.6843 took 26.2721s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":2,"_bound":4,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":2,"_bound":4}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":5,"ExpansionArg_string":"PureString"} start 38.1814 took 27.5699s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":5,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":5}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":6,"ExpansionArg_array_length":0} start 65.9699 took 23.5543s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":6,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":6}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":7,"ExpansionArg_bool":false} start 89.7521 took 18.6985s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":7,"ExpansionArg_bool":false}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":7}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":8,"ExpansionArg_array_element_0_type":0} start 89.8237 took 19.3318s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":8,"ExpansionArg_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":8}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":10,"ExpansionArg_array_element_1_type":0} start 109.4202 took 17.7987s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":10,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":10}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":9,"ExpansionArg_array_element_0_int":0} start 109.326 took 25.8279s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":9,"ExpansionArg_array_element_0_int":0}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":9}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":11} start 127.4013 took 17.9214s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":11}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":11}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":12,"ExpansionArg_array_element_2_type":0} start 127.4657 took 19.9013s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":12,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":12}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":11,"ExpansionArg_array_element_0_string":"PureString"} start 135.4926 took 26.3931s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":11,"ExpansionArg_array_element_0_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":11}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":12,"ExpansionArg_array_element_1_string":"PureString"} start 145.4947 took 17.3191s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":12,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":12}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":10} start 135.5861 took 27.4912s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":10}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":10}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":12,"ExpansionArg_array_element_1_type":0} start 135.3931 took 28.7222s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":12,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":12}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":14,"ExpansionArg_array_element_3_type":0} start 147.5834 took 17.3877s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":14,"ExpansionArg_array_element_3_type":0}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":14}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":13} start 147.4793 took 18.9494s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":13}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":13}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":13,"ExpansionArg_array_element_2_type":0} start 145.5758 took 28.2278s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":13,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":13}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":14,"ExpansionArg_array_element_1_bool":false} start 162.9281 took 18.7468s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":14,"ExpansionArg_array_element_1_bool":false}
* Error: Tropigate failed because SyntaxError: Invalid number (133:11) on program var tar = require('tar-stream');
var pump = require('pump');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var os = require('os');

var win32 = os.platform() === 'win32';

var noop = function() {};

var echo = function(name) {
	return name;
};

var normalize = !win32 ? echo : function(name) {
	return name.replace(/\\/g, '/');
};

var statAll = function(cwd, ignore) {
	var queue = ['.'];

	return function loop(callback) {
		if (!queue.length) return callback();
		var next = queue.shift();
		var nextAbs = path.join(cwd, next);

		fs.lstat(nextAbs, function(err, stat) {
			if (err) return callback(err);

			if (!stat.isDirectory()) return callback(null, next, stat);

			fs.readdir(nextAbs, function(err, files) {
				if (err) return callback(err);

				for (var i = 0; i < files.length; i++) {
					if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));
				}

				callback(null, next, stat);
			});
		});
	};
};

exports.pack = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop;
	var statNext = statAll(cwd, ignore);
	var pack = tar.pack();

	var onlink = function(filename, header) {
		fs.readlink(path.join(cwd, filename), function(err, linkname) {
			if (err) return pack.destroy(err);
			header.linkname = normalize(linkname);
			pack.entry(header, onnextentry);
		});
	};

	var onstat = function(err, filename, stat) {
		if (err) return pack.destroy(err);
		if (!filename) return pack.finalize();

		if (stat.isSocket()) return onnextentry() // tar does not support sockets...

		var header = {
			name: normalize(filename),
			mode: stat.mode,
			mtime: stat.mtime,
			size: stat.size,
			type: 'file',
			uid: stat.uid,
			gid: stat.gid
		};

		if (stat.isDirectory()) {
			header.size = 0;
			header.type = 'directory';
			return pack.entry(header, onnextentry);
		}

		if (stat.isSymbolicLink()) {
			header.size = 0;
			header.type = 'symlink';
			return onlink(filename, header);
		}

		// TODO: add fifo etc...

		if (!stat.isFile()) return pack.destroy(new Error('unsupported type for '+filename));

		header = map(header) || header

		var entry = pack.entry(header, onnextentry);
		if (!entry) return;
		var rs = fs.createReadStream(path.join(cwd, filename));

		pump(rs, entry);
	};

	var onnextentry = function(err) {
		if (err) return pack.destroy(err);
		statNext(onstat);
	};

	onnextentry();

	return pack;
};

var head = function(list) {
	return list.length ? list[list.length-1] : null
};

exports.extract = function(cwd, opts) {
	if (!cwd) cwd = '.';
	if (!opts) opts = {};

	var ignore = opts.ignore || noop;
	var map = opts.map || noop
	var own = opts.chown !== false && !win32 && process.getuid() === 0;
	var extract = tar.extract();
	var stack = [];
	var now = new Date();
	var umask = typeof opts.umask === 'number' ? ~opts.umask : ~process.umask();
	var dmode = typeof opts.dmode === 'number' ? opts.dmode : 0;
	var fmode = typeof opts.fmode === 'number' ? opts.fmode : 0;

	if (opts.readable) {
		dmode |= 0555;
		fmode |= 0444;
	}
	if (opts.writable) {
		dmode |= 0333;
		fmode |= 0222;
	}

	var utimesParent = function(name, cb) { // we just set the mtime on the parent dir again everytime we write an entry
		var top;
		while ((top = head(stack)) && name.slice(0, top[0].length) !== top[0]) stack.pop();
		if (!top) return cb();
		fs.utimes(top[0], now, top[1], cb);
	};

	var utimes = function(name, header, cb) {
		if (opts.utimes === false) return cb();

		if (header.type === 'directory') return fs.utimes(name, now, header.mtime, cb);
		if (header.type === 'symlink') return utimesParent(name, cb); // TODO: how to set mtime on link?

		fs.utimes(name, now, header.mtime, function(err) {
			if (err) return cb(err);
			utimesParent(name, cb);
		});
	};

	var chperm = function(name, header, cb) {
		var link = header.type === 'symlink';
		var chmod = link ? fs.lchmod : fs.chmod;
		var chown = link ? fs.lchown : fs.chown;

		if (!chmod) return cb();
		chmod(name, (header.mode | (header.type === 'directory' ? dmode : fmode)) & umask, function(err) {
			if (err) return cb(err);
			if (!own) return cb();
			if (!chown) return cb();
			chown(name, header.uid, header.gid, cb);
		});
	};

	extract.on('entry', function(header, stream, next) {
		header = map(header) || header
		var name = path.join(cwd, path.join('/', header.name));

		if (ignore(name)) {
			stream.resume();
			return next();
		}

		var stat = function(err) {
			if (err) return next(err);
			if (win32) return next();
			utimes(name, header, function(err) {
				if (err) return next(err);
				chperm(name, header, next);
			});
		};

		var onlink = function() {
			if (win32) return next(); // skip symlinks on win for now before it can be tested
			fs.unlink(name, function() {
				fs.symlink(header.linkname, name, stat);
			});
		};

		var onfile = function() {
			var ws = fs.createWriteStream(name);

			pump(stream, ws, function(err) {
				if (err) return next(err);
				ws.on('close', stat);
			});
		};

		if (header.type === 'directory') {
			stack.push([name, header.mtime]);
			return mkdirp(name, stat);
		}

		mkdirp(path.dirname(name), function(err) {
			if (err) return next(err);
			if (header.type === 'symlink') return onlink();
			if (header.type !== 'file') return next(new Error('unsupported type for '+name+' ('+header.type+')'));

			onfile();
		});
	});

	return extract;
};
 at SyntaxError: Invalid number (133:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":5,"ExpansionArg_array_element_1_string":"","_bound":14}'
*-- Test Case {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":13,"ExpansionArg_array_element_1_int":0} start 162.8814 took 19.2681s
*-- Errors occured in test {"Switcher":true,"Target_Switcher":0,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":2,"ExpansionArg_array_element_1_string":"","_bound":13,"ExpansionArg_array_element_1_int":0}
