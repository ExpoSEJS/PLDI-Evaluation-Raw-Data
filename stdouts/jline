/root/Targets/jline
└─┬ jline@0.0.45 
  ├── docopt@0.4.1 
  ├─┬ split@0.3.3 
  │ └── through@2.3.8 
  ├── tree-math@0.0.17 
  └── ya-csv@0.9.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/jline/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 34% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0744 took 4.3478s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

function parseJlineStream(stream, options) {
  options = options || {};
  var logcode = {none:0, error:1, warn:2, undefined:0}[options.loglevel];
  var diecode = {none:0, error:1, warn:2, undefined:0}[options.dielevel];
  var log     = function(msg,code){console.error(msg);};
  log = options.logger || log;

  var lineNumber = 0;
  var recordNumber = 0;
  var record;

  return stream.pipe(require('split')())
  .on('data', function(line){
    lineNumber++;
    try {
        record = JSON.parse(line);
        recordNumber++;
        this.emit('jline', record, lineNumber, line, recordNumber);
        this.emit('line',  line,   lineNumber, line, recordNumber);
    } catch(e){
      // Does it look like an error? a comment?  an empty line?
      var match   = line.match(/^[ \t]*(#.*|$)/);
      var code=(match === null )?1 // malformed line
              :(match[1].length)?2 // comment
              :                  3;// blank line
      if (code <= logcode) log("Malformed JSON on line "+String(lineNumber)+" "+String(e));
      if (code <= diecode) throw(e);
      if (code === 1) this.emit('parseError'  , e       , lineNumber, line);
      if (code === 2) this.emit('comment'     , match[1], lineNumber, line);
                      this.emit('line'        , line    , lineNumber, line);
    }
  });
}

module.exports = parseJlineStream;

if(require.main === module) {
  require('../lib/opt').fancy({filename:__filename, usage:
  [ 'Usage: jline-foreach [--help|--version]'
  , '       jline-foreach [-l]'
  ].join("\n")});

  var exit = 0;
  parseJlineStream(process.stdin)
  .on('jline',      function(record,  lineNumber, line, recordNumber){console.log(line);})
  .on('comment',    function(comment, lineNumber, line, recordNumber){console.log(line);})
  .on('parseError', function(e,n,l){console.error("Malformed JSON on line", n, e); exit = 1;})
  .on('end',        function(){process.exit(exit);});
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/jline/node_modules/jline/index.js. Coverage (Term): 67% Coverage (LOC): 83%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
