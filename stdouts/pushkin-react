/root/Targets/pushkin-react
├─┬ pushkin-react@1.1.0 
│ ├─┬ axios@0.15.3 
│ │ └─┬ follow-redirects@1.0.0 
│ │   └─┬ debug@2.6.9 
│ │     └── ms@2.0.0 
│ ├─┬ rc-progress@2.2.2 
│ │ ├─┬ babel-runtime@6.26.0 
│ │ │ ├── core-js@2.5.1 
│ │ │ └── regenerator-runtime@0.11.0 
│ │ └─┬ prop-types@15.6.0 
│ │   ├─┬ fbjs@0.8.16 
│ │   │ ├── core-js@1.2.7 
│ │   │ ├─┬ isomorphic-fetch@2.2.1 
│ │   │ │ ├─┬ node-fetch@1.7.3 
│ │   │ │ │ ├─┬ encoding@0.1.12 
│ │   │ │ │ │ └── iconv-lite@0.4.19 
│ │   │ │ │ └── is-stream@1.1.0 
│ │   │ │ └── whatwg-fetch@2.0.3 
│ │   │ ├─┬ promise@7.3.1 
│ │   │ │ └── asap@2.0.6 
│ │   │ ├── setimmediate@1.0.5 
│ │   │ └── ua-parser-js@0.7.14 
│ │   └── object-assign@4.1.1 
│ ├── UNMET PEER DEPENDENCY react@^0.14.0 || ^15.0.0-0 || ^16.0.0-0
│ ├─┬ react-redux@5.0.6 
│ │ ├── hoist-non-react-statics@2.3.1 
│ │ ├── invariant@2.2.2 
│ │ ├── lodash@4.17.4 
│ │ ├── lodash-es@4.17.4 
│ │ └─┬ loose-envify@1.3.1 
│ │   └── js-tokens@3.0.2 
│ ├─┬ react-router@3.2.0 
│ │ ├── create-react-class@15.6.2 
│ │ ├─┬ history@3.3.0 
│ │ │ └─┬ query-string@4.3.4 
│ │ │   └── strict-uri-encode@1.1.0 
│ │ ├── hoist-non-react-statics@1.2.0 
│ │ └── warning@3.0.0 
│ └─┬ redux@3.7.2 
│   └── symbol-observable@1.0.4 
└── UNMET PEER DEPENDENCY react@15.x

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/pushkin-react/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 32% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","Symbol"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0945 took 12.7093s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program 'use strict';
var url = require('url');
var assert = require('assert');
var http = require('http');
var https = require('https');
var Writable = require('stream').Writable;
var debug = require('debug')('follow-redirects');

var nativeProtocols = {'http:': http, 'https:': https};
var schemes = {};
var exports = module.exports = {
	maxRedirects: 21
};
// RFC7231§4.2.1: Of the request methods defined by this specification,
// the GET, HEAD, OPTIONS, and TRACE methods are defined to be safe.
var safeMethods = {GET: true, HEAD: true, OPTIONS: true, TRACE: true};

// Create handlers that pass events from native requests
var eventHandlers = Object.create(null);
['abort', 'aborted', 'error'].forEach(function (event) {
	eventHandlers[event] = function (arg) {
		this._redirectable.emit(event, arg);
	};
});

// An HTTP(S) request that can be redirected
function RedirectableRequest(options, responseCallback) {
	// Initialize the request
	Writable.call(this);
	this._options = options;
	this._redirectCount = 0;

	// Attach a callback if passed
	if (responseCallback) {
		this.on('response', responseCallback);
	}

	// React to responses of native requests
	var self = this;
	this._onNativeResponse = function (response) {
		self._processResponse(response);
	};

	// Perform the first request
	this._performRequest();
}
RedirectableRequest.prototype = Object.create(Writable.prototype);

// Executes the next native request (initial or redirect)
RedirectableRequest.prototype._performRequest = function () {
	// If specified, use the agent corresponding to the protocol
	// (HTTP and HTTPS use different types of agents)
	var protocol = this._options.protocol;
	if (this._options.agents) {
		this._options.agent = this._options.agents[schemes[protocol]];
	}

	// Create the native request
	var nativeProtocol = nativeProtocols[this._options.protocol];
	var request = this._currentRequest =
				nativeProtocol.request(this._options, this._onNativeResponse);
	this._currentUrl = url.format(this._options);

	// Set up event handlers
	request._redirectable = this;
	for (var event in eventHandlers) {
		if (event) {
			request.on(event, eventHandlers[event]);
		}
	}

	// The first request is explicitly ended in RedirectableRequest#end
	if (this._currentResponse) {
		request.end();
	}
};

// Processes a response from the current native request
RedirectableRequest.prototype._processResponse = function (response) {
	// RFC7231§6.4: The 3xx (Redirection) class of status code indicates
	// that further action needs to be taken by the user agent in order to
	// fulfill the request. If a Location header field is provided,
	// the user agent MAY automatically redirect its request to the URI
	// referenced by the Location field value,
	// even if the specific status code is not understood.
	var location = response.headers.location;
	if (location && this._options.followRedirects !== false &&
			response.statusCode >= 300 && response.statusCode < 400) {
		// RFC7231§6.4: A client SHOULD detect and intervene
		// in cyclical redirections (i.e., "infinite" redirection loops).
		if (++this._redirectCount > this._options.maxRedirects) {
			return this.emit('error', new Error('Max redirects exceeded.'));
		}

		// RFC7231§6.4.7: The 307 (Temporary Redirect) status code indicates
		// that the target resource resides temporarily under a different URI
		// and the user agent MUST NOT change the request method
		// if it performs an automatic redirection to that URI.
		if (response.statusCode !== 307) {
			// RFC7231§6.4: Automatic redirection needs to done with
			// care for methods not known to be safe […],
			// since the user might not wish to redirect an unsafe request.
			if (!(this._options.method in safeMethods)) {
				this._options.method = 'GET';
			}
		}

		// Perform the redirected request
		var redirectUrl = url.resolve(this._currentUrl, location);
		debug('redirecting to', redirectUrl);
		Object.assign(this._options, url.parse(redirectUrl));
		this._currentResponse = response;
		this._performRequest();
	} else {
		// The response is not a redirect; return it as-is
		response.responseUrl = this._currentUrl;
		return this.emit('response', response);
	}
};

// Aborts the current native request
RedirectableRequest.prototype.abort = function () {
	this._currentRequest.abort();
};

// Ends the current native request
RedirectableRequest.prototype.end = function (data, encoding, callback) {
	this._currentRequest.end(data, encoding, callback);
};

// Flushes the headers of the current native request
RedirectableRequest.prototype.flushHeaders = function () {
	this._currentRequest.flushHeaders();
};

// Sets the noDelay option of the current native request
RedirectableRequest.prototype.setNoDelay = function (noDelay) {
	this._currentRequest.setNoDelay(noDelay);
};

// Sets the socketKeepAlive option of the current native request
RedirectableRequest.prototype.setSocketKeepAlive = function (enable, initialDelay) {
	this._currentRequest.setSocketKeepAlive(enable, initialDelay);
};

// Sets the timeout option of the current native request
RedirectableRequest.prototype.setTimeout = function (timeout, callback) {
	this._currentRequest.setTimeout(timeout, callback);
};

// Writes buffered data to the current native request
RedirectableRequest.prototype._write = function (chunk, encoding, callback) {
	this._currentRequest.write(chunk, encoding, callback);
};

// Export a redirecting wrapper for each native protocol
Object.keys(nativeProtocols).forEach(function (protocol) {
	var scheme = schemes[protocol] = protocol.substr(0, protocol.length - 1);
	var nativeProtocol = nativeProtocols[protocol];
	var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

	// Executes an HTTP request, following redirects
	wrappedProtocol.request = function (options, callback) {
		if (typeof options === 'string') {
			options = url.parse(options);
			options.maxRedirects = exports.maxRedirects;
		} else {
			options = Object.assign({
				maxRedirects: exports.maxRedirects,
				protocol: protocol
			}, options);
		}
		assert.equal(options.protocol, protocol, 'protocol mismatch');
		debug('options', options);

		return new RedirectableRequest(options, callback);
	};

	// Executes a GET request, following redirects
	wrappedProtocol.get = function (options, callback) {
		var request = wrappedProtocol.request(options, callback);
		request.end();
		return request;
	};
});
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/pushkin-react/node_modules/pushkin-react/lib/index.js. Coverage (Term): 42% Coverage (LOC): 62%
*- File /root/Targets/pushkin-react/node_modules/pushkin-react/lib/reducers/index.js. Coverage (Term): 58% Coverage (LOC): 58%
*- File /root/Targets/pushkin-react/node_modules/redux/lib/index.js. Coverage (Term): 88% Coverage (LOC): 96%
*- File /root/Targets/pushkin-react/node_modules/redux/lib/createStore.js. Coverage (Term): 17% Coverage (LOC): 14%
*- File /root/Targets/pushkin-react/node_modules/lodash/isPlainObject.js. Coverage (Term): 52% Coverage (LOC): 53%
*- File /root/Targets/pushkin-react/node_modules/lodash/_baseGetTag.js. Coverage (Term): 58% Coverage (LOC): 64%
*- File /root/Targets/pushkin-react/node_modules/lodash/_Symbol.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/pushkin-react/node_modules/lodash/_root.js. Coverage (Term): 76% Coverage (LOC): 100%
*- File /root/Targets/pushkin-react/node_modules/lodash/_freeGlobal.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/pushkin-react/node_modules/lodash/_getRawTag.js. Coverage (Term): 46% Coverage (LOC): 43%
*- File /root/Targets/pushkin-react/node_modules/lodash/_objectToString.js. Coverage (Term): 71% Coverage (LOC): 86%
*- File /root/Targets/pushkin-react/node_modules/lodash/_getPrototype.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/pushkin-react/node_modules/lodash/_overArg.js. Coverage (Term): 66% Coverage (LOC): 83%
*- File /root/Targets/pushkin-react/node_modules/lodash/isObjectLike.js. Coverage (Term): 54% Coverage (LOC): 80%
*- File /root/Targets/pushkin-react/node_modules/symbol-observable/index.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/pushkin-react/node_modules/symbol-observable/lib/index.js. Coverage (Term): 78% Coverage (LOC): 75%
*- File /root/Targets/pushkin-react/node_modules/symbol-observable/lib/ponyfill.js. Coverage (Term): 87% Coverage (LOC): 88%
*- File /root/Targets/pushkin-react/node_modules/redux/lib/combineReducers.js. Coverage (Term): 12% Coverage (LOC): 17%
*- File /root/Targets/pushkin-react/node_modules/redux/lib/utils/warning.js. Coverage (Term): 47% Coverage (LOC): 55%
*- File /root/Targets/pushkin-react/node_modules/redux/lib/bindActionCreators.js. Coverage (Term): 18% Coverage (LOC): 28%
*- File /root/Targets/pushkin-react/node_modules/redux/lib/applyMiddleware.js. Coverage (Term): 25% Coverage (LOC): 32%
*- File /root/Targets/pushkin-react/node_modules/redux/lib/compose.js. Coverage (Term): 22% Coverage (LOC): 30%
*- File /root/Targets/pushkin-react/node_modules/pushkin-react/lib/reducers/nextpage.js. Coverage (Term): 26% Coverage (LOC): 29%
*- File /root/Targets/pushkin-react/node_modules/pushkin-react/lib/actions/nextpage.js. Coverage (Term): 67% Coverage (LOC): 63%
*- File /root/Targets/pushkin-react/node_modules/pushkin-react/lib/reducers/questionque.js. Coverage (Term): 15% Coverage (LOC): 18%
*- File /root/Targets/pushkin-react/node_modules/pushkin-react/lib/actions/questionque.js. Coverage (Term): 14% Coverage (LOC): 19%
*- File /root/Targets/pushkin-react/node_modules/pushkin-react/lib/actions/axiosConfigInitial.js. Coverage (Term): 34% Coverage (LOC): 64%
*- File /root/Targets/pushkin-react/node_modules/axios/index.js. Coverage (Term): 80% Coverage (LOC): 100%
*- File /root/Targets/pushkin-react/node_modules/axios/lib/axios.js. Coverage (Term): 22% Coverage (LOC): 30%
*- File /root/Targets/pushkin-react/node_modules/axios/lib/utils.js. Coverage (Term): 16% Coverage (LOC): 46%
*- File /root/Targets/pushkin-react/node_modules/axios/lib/helpers/bind.js. Coverage (Term): 27% Coverage (LOC): 45%
*- File /root/Targets/pushkin-react/node_modules/axios/lib/core/Axios.js. Coverage (Term): 9% Coverage (LOC): 9%
*- File /root/Targets/pushkin-react/node_modules/axios/lib/defaults.js. Coverage (Term): 20% Coverage (LOC): 23%
*- File /root/Targets/pushkin-react/node_modules/axios/lib/helpers/normalizeHeaderName.js. Coverage (Term): 37% Coverage (LOC): 50%
*- File /root/Targets/pushkin-react/node_modules/axios/lib/adapters/http.js. Coverage (Term): 7% Coverage (LOC): 6%
*- File /root/Targets/pushkin-react/node_modules/axios/lib/core/settle.js. Coverage (Term): 36% Coverage (LOC): 55%
*- File /root/Targets/pushkin-react/node_modules/axios/lib/core/createError.js. Coverage (Term): 51% Coverage (LOC): 75%
*- File /root/Targets/pushkin-react/node_modules/axios/lib/core/enhanceError.js. Coverage (Term): 40% Coverage (LOC): 45%
*- File /root/Targets/pushkin-react/node_modules/axios/lib/helpers/buildURL.js. Coverage (Term): 12% Coverage (LOC): 17%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
