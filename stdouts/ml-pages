
> uws@0.14.5 install /root/Targets/ml-pages/node_modules/uws
> node-gyp rebuild > build_log.txt 2>&1 || exit 0

/root/Targets/ml-pages
└─┬ ml-pages@0.0.1 
  ├─┬ connect@3.6.5 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├─┬ finalhandler@1.0.6 
  │ │ ├── encodeurl@1.0.1 
  │ │ ├── escape-html@1.0.3 
  │ │ ├─┬ on-finished@2.3.0 
  │ │ │ └── ee-first@1.1.1 
  │ │ ├── statuses@1.3.1 
  │ │ └── unpipe@1.0.0 
  │ ├── parseurl@1.3.2 
  │ └── utils-merge@1.0.1 
  ├─┬ handlebars@4.0.10 
  │ ├── async@1.5.2 
  │ ├─┬ optimist@0.6.1 
  │ │ ├── minimist@0.0.10 
  │ │ └── wordwrap@0.0.3 
  │ ├─┬ source-map@0.4.4 
  │ │ └── amdefine@1.0.1 
  │ └─┬ uglify-js@2.8.29 
  │   ├── source-map@0.5.7 
  │   ├── uglify-to-browserify@1.0.2 
  │   └─┬ yargs@3.10.0 
  │     ├── camelcase@1.2.1 
  │     ├─┬ cliui@2.1.0 
  │     │ ├─┬ center-align@0.1.3 
  │     │ │ ├─┬ align-text@0.1.4 
  │     │ │ │ ├─┬ kind-of@3.2.2 
  │     │ │ │ │ └── is-buffer@1.1.5 
  │     │ │ │ ├── longest@1.0.1 
  │     │ │ │ └── repeat-string@1.6.1 
  │     │ │ └── lazy-cache@1.0.4 
  │     │ ├── right-align@0.1.3 
  │     │ └── wordwrap@0.0.2 
  │     ├── decamelize@1.2.0 
  │     └── window-size@0.1.0 
  ├─┬ jade@1.11.0 
  │ ├── character-parser@1.2.1 
  │ ├─┬ clean-css@3.4.28 
  │ │ └─┬ commander@2.8.1 
  │ │   └── graceful-readlink@1.0.1 
  │ ├── commander@2.6.0 
  │ ├─┬ constantinople@3.0.2 
  │ │ └── acorn@2.7.0 
  │ ├─┬ jstransformer@0.0.2 
  │ │ ├── is-promise@2.1.0 
  │ │ └─┬ promise@6.1.0 
  │ │   └── asap@1.0.0 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ ├─┬ transformers@2.1.0 
  │ │ ├─┬ css@1.0.8 
  │ │ │ ├── css-parse@1.0.4 
  │ │ │ └── css-stringify@1.0.5 
  │ │ ├─┬ promise@2.0.0 
  │ │ │ └── is-promise@1.0.1 
  │ │ └─┬ uglify-js@2.2.5 
  │ │   ├── optimist@0.3.7 
  │ │   └── source-map@0.1.43 
  │ ├── void-elements@2.0.1 
  │ └─┬ with@4.0.3 
  │   ├── acorn@1.2.2 
  │   └── acorn-globals@1.0.9 
  ├── jb@0.0.1 
  ├── jc@0.0.1 
  ├─┬ less@2.7.2 
  │ ├─┬ errno@0.1.4 
  │ │ └── prr@0.0.0 
  │ ├── graceful-fs@4.1.11 
  │ ├── image-size@0.5.5 
  │ ├── mime@1.4.1 
  │ ├─┬ promise@7.3.1 
  │ │ └── asap@2.0.6 
  │ ├─┬ request@2.83.0 
  │ │ ├── aws-sign2@0.7.0 
  │ │ ├── aws4@1.6.0 
  │ │ ├── caseless@0.12.0 
  │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ └── delayed-stream@1.0.0 
  │ │ ├── extend@3.0.1 
  │ │ ├── forever-agent@0.6.1 
  │ │ ├─┬ form-data@2.3.1 
  │ │ │ └── asynckit@0.4.0 
  │ │ ├─┬ har-validator@5.0.3 
  │ │ │ ├─┬ ajv@5.2.3 
  │ │ │ │ ├── co@4.6.0 
  │ │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │ │   └── jsonify@0.0.0 
  │ │ │ └── har-schema@2.0.0 
  │ │ ├─┬ hawk@6.0.2 
  │ │ │ ├── boom@4.3.1 
  │ │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ │ └── boom@5.2.0 
  │ │ │ ├── hoek@4.2.0 
  │ │ │ └── sntp@2.0.2 
  │ │ ├─┬ http-signature@1.2.0 
  │ │ │ ├── assert-plus@1.0.0 
  │ │ │ ├─┬ jsprim@1.4.1 
  │ │ │ │ ├── extsprintf@1.3.0 
  │ │ │ │ ├── json-schema@0.2.3 
  │ │ │ │ └─┬ verror@1.10.0 
  │ │ │ │   └── core-util-is@1.0.2 
  │ │ │ └─┬ sshpk@1.13.1 
  │ │ │   ├── asn1@0.2.3 
  │ │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │   ├── dashdash@1.14.1 
  │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │   ├── getpass@0.1.7 
  │ │ │   ├── jsbn@0.1.1 
  │ │ │   └── tweetnacl@0.14.5 
  │ │ ├── is-typedarray@1.0.0 
  │ │ ├── isstream@0.1.2 
  │ │ ├── json-stringify-safe@5.0.1 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ ├── oauth-sign@0.8.2 
  │ │ ├── performance-now@2.1.0 
  │ │ ├── qs@6.5.1 
  │ │ ├── safe-buffer@5.1.1 
  │ │ ├── stringstream@0.0.5 
  │ │ ├─┬ tough-cookie@2.3.3 
  │ │ │ └── punycode@1.4.1 
  │ │ ├── tunnel-agent@0.6.0 
  │ │ └── uuid@3.1.0 
  │ └── source-map@0.5.7 
  ├─┬ socket.io@2.0.3 
  │ ├─┬ engine.io@3.1.2 
  │ │ ├─┬ accepts@1.3.3 
  │ │ │ └── negotiator@0.6.1 
  │ │ ├── base64id@1.0.0 
  │ │ ├── cookie@0.3.1 
  │ │ ├─┬ engine.io-parser@2.1.1 
  │ │ │ ├── after@0.8.2 
  │ │ │ ├── arraybuffer.slice@0.0.6 
  │ │ │ └── blob@0.0.4 
  │ │ ├── uws@0.14.5 
  │ │ └─┬ ws@2.3.1 
  │ │   ├── safe-buffer@5.0.1 
  │ │   └── ultron@1.1.0 
  │ ├── object-assign@4.1.1 
  │ ├── socket.io-adapter@1.1.1 
  │ ├─┬ socket.io-client@2.0.3 
  │ │ ├── backo2@1.0.2 
  │ │ ├── base64-arraybuffer@0.1.5 
  │ │ ├── component-bind@1.0.0 
  │ │ ├── component-emitter@1.2.1 
  │ │ ├─┬ engine.io-client@3.1.2 
  │ │ │ ├── component-inherit@0.0.3 
  │ │ │ ├── xmlhttprequest-ssl@1.5.3 
  │ │ │ └── yeast@0.1.2 
  │ │ ├── has-cors@1.1.0 
  │ │ ├── indexof@0.0.1 
  │ │ ├── object-component@0.0.3 
  │ │ ├─┬ parseqs@0.0.5 
  │ │ │ └─┬ better-assert@1.0.2 
  │ │ │   └── callsite@1.0.0 
  │ │ ├── parseuri@0.0.5 
  │ │ └── to-array@0.1.4 
  │ └─┬ socket.io-parser@3.1.2 
  │   ├── has-binary2@1.0.2 
  │   └── isarray@2.0.1 
  ├── underscore@1.8.3 
  └── wrench@1.5.9 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/ml-pages/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","pow","join","RegExp","sort"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0257 took 6.7686s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: The keyword 'static' is reserved (280:3) on program // External Dependencies
var _ = require('underscore');
var Class = require('jc');
var http = require('http');
var connect = require('connect');
var fs = require('fs');
var util = require('util');
var cookies = require('ml-cookies');
var ajf = require('ajf');
var wrench = require('wrench');
var auth = require('ml-auth');
var jade = require('jade');
var path = require('path');
var jb = require('jb');
var less = require('less');
var socketio = require('socket.io', {
    rememberTransport: false,
    transports: ['WebSocket',
        'Flash Socket',
        'AJAX long-polling'] });
var hb = require('handlebars');

// Internal Dependencies
var pages = require('./index');
var Router = require('./router');

// Shortcuts
var readdir = wrench.readdirSyncRecursive;
var exists = fs.existsSync;

// Module vars
var key = 'c31daa2c93dbdce13733f81890bb9293f0126729';
var actionsTemplate = fs.readFileSync(
	__dirname + '/../templates/actions.js') + '';
var slotsTemplate = hb.compile(fs.readFileSync(__dirname + '/../templates/slots.js') + '');

module.exports = Class({
	
	// Interface ===============================================================
	
	init: function (options) {
		var self = this;
		options = options || {};
		self.dir = options.dir || null;
		self.app = null;
		self.router = null;
		self.templates = {};
		self.scripts = {};
		self.styles = {};
		self.mainScript = '';
		self.slots = [];
	},
	
	start: function (port) {
		var self = this;
		self.port = port || self.port;
		if (!self.dir) {
			pages.emit('error', new Error('Directory name is missing!'));
			return;
		}
		if (!self.port) {
			pages.emit('error', new Error('Port is missing!'));
			return;
		}
		self.loadSlots();
		self.compileScripts();
		self.compileStyles();
		self.compileActions();
		self.loadTemplates();
		self.loadRouter();
		self.createApp();
		self.addMiddleware();
		self.listen(self.port);
		self.listenSlots();
	},
	
	// Implementation ==========================================================
	
	loadSlots: function () {
		var self = this;
		if (!exists(self.dir + '/slots')) {
			return;
		}
		_.each(fs.readdirSync(self.dir + '/slots'), function (filename) {
			if (filename.slice(-3) !== '.js') {
				return;
			}
			var mod = require(self.dir + '/slots/' + filename),
				modName = filename.slice(0, -3);
			_.each(mod, function (handler, name) {
				var slot = {
					module: modName,
					name: name,
					handler: handler
				};
				self.slots.push(slot);
			});
		});
	},
	
	listenSlots: function () {
		var self = this;
		self.ioServer.of('/ml/').on('connection', function (socket) {
			socket.on('slot', function (request, callback) {
				var name = request.name || '',
					module = request.module,
					sessionKey = request.sessionKey,
					args = request.args || [],
					slot = null;
				
				auth.getUserBySession(sessionKey, function (user) {
					user = user || {
						isAuth: false
					};
					var context = {
						user: user
					};
					args.push(callback);
					_.each(self.slots, function (s) {
						if (s.module === module && s.name === name) {
							slot = s;
						}
					});
					if (!slot && (typeof slot.handler !== 'function')) {
						pages.emit('error', new Error('Slot "' + name + '" not found!'));
						return;
					}
					slot.handler.apply(context, args);
				});
			});
		});
	},
	
	compileStyles: function () {
		var self = this,
			urls = require(self.dir + '/urls.json');
		_.each(urls, function (page, url) {
			var content = '',
				name = page;
			for (var i = 0, max = page.split('/').length; i <= max; i++) {
				if (exists(self.dir + '/pages/' + page + '/styles.css')) {
					content = fs.readFileSync(self.dir + '/pages/' + page + '/styles.css') + content;
				}
				page = page.split('/').slice(0, -1).join('/');
			}
			less.render(content, function (err, css) {
				if (err) {
					throw err;
				}
				self.styles[name] = css;
			});
		});
	},
	
	compileScripts: function () {
		var self = this;
		_.each(readdir(self.dir + '/pages'), function (filename) {
			var path = self.dir + '/pages/' + filename;
			if (!fs.statSync(path).isDirectory()) {
				return;
			}
			if (!exists(path + '/script.js')) {
				return;
			}
			var content = jb.renderFile(path + '/script.js');
			self.scripts[filename] = content;
		});
		if (exists(self.dir + '/pages/script.js')) {
			self.mainScript = fs.readFileSync(self.dir + '/pages/script.js') + '';
		}
		var lib = '';
		var libDir = __dirname + '/../client/lib';
		_.each(fs.readdirSync(libDir), function (filename) {
			lib += fs.readFileSync(libDir + '/' + filename);
		});
		self.mainScript = lib + ';' + self.mainScript;
		// Slots
		var content = slotsTemplate({
			slots: self.slots
		});
		self.mainScript = self.mainScript + ';' + content;
	},
	
	compileActions: function () {
		var self = this;
		_.each(readdir(self.dir + '/pages'), function (filename) {
			if (filename.slice(-4) !== '.ajf') {
				return;
			}
			var source = fs.readFileSync(self.dir + '/pages/' + filename) + '',
				content = ajf.parse(source),
				actions = actionsTemplate.replace('{{{code}}}', content),
				path = self.dir + '/pages/' + filename.slice(0, -3) + 'js';
			fs.writeFileSync(path, actions);
			require(path);
		});
	},
	
	loadTemplates: function () {
		var self = this;
		_.each(readdir(self.dir + '/pages'), function (filename) {
			if (filename.slice(-5) !== '.jade') {
				return;
			}
			var source = fs.readFileSync(self.dir + '/pages/' + filename) + '',
				template = jade.compile(source, {
					filename: self.dir + '/pages/' + filename
				});
			self.templates[path.normalize(filename)] = template;
		});
	},
	
	loadRouter: function () {
		var self = this;
		self.router = new Router({ filename: self.dir + '/urls.json' });
	},
	
	createApp: function () {
		var self = this,
            connectServer = connect(),
            httpServer = http.createServer(connectServer),
            ioServer = socketio.listen(httpServer);
        ioServer.set('log level', 0);
        self.app = connectServer;
        self.httpServer = httpServer;
        self.ioServer = ioServer;
	},
	
	addMiddleware: function () {
		var self = this,
			app = self.app;
		app.use(connect.static(self.dir + '/static'));
		app.use(connect.bodyParser());
		app.use(connect.query());
		app.use(self.responseMiddleware.bind(self));
	},
	
	listen: function (port) {
		var self = this;
		self.httpServer.listen(port);
		pages.emit('info', 'Server started at 127.0.0.1:' + port + '...');
	},
	
	responseMiddleware: function (request, response) {
		var self = this,
			url = request.url.split('?')[0],
			handled = false;
		var route = self.router.parse(url);
		if (route) {
			// Redirect
			if (route.page.slice(0, 2) === '->') {
				self.redirect(request, response, route.page.slice(2));
				return;
			}
			// Restricted
			if (route.page.slice(0, 1) === '@') {
				if (cookies.get(request, '_kit_restricted_key') === key) {
					self.handlePage(request,
						response,
						route.page.slice(1),
						route.args);
					return;
				} else {
					self.handle404(request, response);
					return;
				}
			}
			// Pages
			self.handlePage(request, response, route.page, route.args);
			return;
		}
		// Error 404
		self.handle404(request, response);
	},
	
	handlePage: function (request, response, page, args) {
		var self = this,
			dir = self.dir + '/pages/',
			handler = null,
			static = null,
			template = null,
			context = {};
			
		// Init
		if (exists(dir + page + '.js')) {
			handler = require(dir + page + '.js').init;
		}
		if (exists(dir + page + '/actions.js')) {
			handler = require(dir + page + '/actions.js').init;
		}
		if (exists(dir + page + '.html')) {
			static = fs.readFileSync(dir + page + '.html') + '';
		}
		if (exists(dir + page + '/index.html')) {
			static = fs.readFileSync(dir + page + '/index.html') + '';
		}
		if (self.templates[path.normalize(page + '.jade')]) {
			template = self.templates[path.normalize(page + '.jade')];
		}
		if (self.templates[path.normalize(page + '/index.jade')]) {
			template = self.templates[path.normalize(page + '/index.jade')];
		}
		
		// Handler
		if (handler) {
			var options = {
				request: request,
				response: response,
				context: context,
				url: args
			};
			options.redirect = function (url) {
				self.redirect(request, response, url);
			};
			auth.auth(request, function (user) {
				options.user = user;
				handler(options, handlerDone);
			});
		} else {
			renderTemplate();
		}
		function handlerDone(add) {
			if (add) {
				_.extend(context, add);
			}
			renderTemplate();
		}
		
		// Template
		function renderTemplate() {
			var content = '';
			if (template) {
				content = template(context);
			} else {
				content = static;
			}
			// Socket.io
			content = content.replace('</head>', '<script src="/socket.io/socket.io.js"></script></head>');
			var script = '<script>' + self.mainScript + '</script>';
			if (self.scripts[page]) {
				script += '<script>' + self.scripts[page] + '</script>';
			}
			content = content.replace('</body>', script + '</body>');
			if (self.styles[page]) {
				content = content.replace('</head>', '<style>' + self.styles[page] + '</style></head>');
			}
			done(content);
		}
		
		// Response
		function done(content) {
			response.writeHead(200, {'Content-Type': 'text/html'});
			response.end(content);
		}
	},
	
	handle404: function (request, response) {
		var self = this;
		response.writeHead(200, {'Content-Type': 'text/plain'});
		response.end('Error 404 ' + request.url);
	},
	
	redirect: function (request, response, url) {
		var self = this;
		response.writeHead(302, {
			'Location': url
		});
		response.end();
	},
	
}); at SyntaxError: The keyword 'static' is reserved (280:3)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$3.parseIdent (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2182:14)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:41:34)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
    at Parser.pp$3.parseFunctionBody (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2105:24)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/ml-pages/node_modules/ml-pages/lib/index.js. Coverage (Term): 16% Coverage (LOC): 19%
*- File /root/Targets/ml-pages/node_modules/underscore/underscore.js. Coverage (Term): 19% Coverage (LOC): 33%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
