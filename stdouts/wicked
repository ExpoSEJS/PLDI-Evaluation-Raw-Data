
> jsdoc@3.3.0-alpha2 postinstall /root/Targets/wicked/node_modules/jsdoc
> node ./node/postinstall.js

/root/Targets/wicked
└─┬ wicked@0.3.1 
  ├── asyncreduce@0.1.4 
  ├─┬ doctoc@0.7.1 
  │ ├── anchor-markdown-header@0.3.8 
  │ ├─┬ htmlparser2@3.7.3 
  │ │ ├── domelementtype@1.3.0 
  │ │ ├── domhandler@2.2.1 
  │ │ ├─┬ domutils@1.5.1 
  │ │ │ └─┬ dom-serializer@0.1.0 
  │ │ │   ├── domelementtype@1.1.3 
  │ │ │   └── entities@1.1.1 
  │ │ └── entities@1.0.0 
  │ ├── underscore@1.8.3 
  │ └── update-section@0.3.3 
  ├── find-parent-dir@0.1.0 
  ├─┬ jsdoc@3.3.0-alpha2 
  │ ├── async@0.1.22 
  │ ├── catharsis@0.7.0 
  │ ├── esprima@1.0.4 
  │ ├── js2xmlparser@0.1.0 
  │ ├── marked@0.2.8 
  │ ├── taffydb@2.6.2  (git+https://github.com/hegemonic/taffydb.git#e41b5e179e197bb85c5fb887b707672b1e5ca079)
  │ ├── underscore@1.4.2 
  │ └── wrench@1.3.9 
  ├─┬ jsdoc-githubify@0.1.3 
  │ ├─┬ cheerio@0.12.4 
  │ │ ├─┬ cheerio-select@0.0.3 
  │ │ │ └─┬ CSSselect@0.7.0 
  │ │ │   ├── boolbase@1.0.0 
  │ │ │   ├── CSSwhat@0.4.7 
  │ │ │   ├── domutils@1.4.3 
  │ │ │   └── nth-check@1.0.1 
  │ │ ├── entities@0.5.0 
  │ │ ├─┬ htmlparser2@3.1.4 
  │ │ │ ├── domhandler@2.0.3 
  │ │ │ ├── domutils@1.1.6 
  │ │ │ └── readable-stream@1.0.34 
  │ │ └── underscore@1.4.4 
  │ ├─┬ readable-stream@1.1.14 
  │ │ ├── core-util-is@1.0.2 
  │ │ ├── inherits@2.0.3 
  │ │ ├── isarray@0.0.1 
  │ │ └── string_decoder@0.10.31 
  │ └── resolve-git-branch@0.1.1 
  ├── minimist@0.0.5 
  ├── mkdirp@0.3.5 
  ├─┬ mutiny@0.4.0 
  │ ├─┬ readdirp@1.0.1 
  │ │ └── readable-stream@1.0.34 
  │ └─┬ stream-combiner@0.0.2 
  │   └── duplexer@0.0.4 
  ├─┬ npmlog@0.0.6 
  │ └── ansi@0.2.1 
  ├─┬ readdirp@0.3.3 
  │ ├── graceful-fs@2.0.3 
  │ └─┬ minimatch@0.2.14 
  │   ├── lru-cache@2.7.3 
  │   └── sigmund@1.0.1 
  ├─┬ require-module@0.1.0 
  │ └── resolve@0.6.3 
  ├── resolve-git-remote@0.1.1 
  ├── rimraf@2.2.8 
  ├── runnel@0.5.3 
  ├─┬ through2@0.2.3 
  │ └─┬ xtend@2.1.2 
  │   └── object-keys@0.4.0 
  └── update-section@0.1.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/wicked/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 16% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0609 took 6.7273s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (23:4) on program 
/**
 * Accepts any node Stream instance and hijacks its "write()" function,
 * so that it can count any newlines that get written to the output.
 *
 * When a '\n' byte is encountered, then a "newline" event will be emitted
 * on the stream, with no arguments. It is up to the listeners to determine
 * any necessary deltas required for their use-case.
 *
 * Ex:
 *
 *   var cursor = ansi(process.stdout)
 *     , ln = 0
 *   process.stdout.on('newline', function () {
 *    ln++
 *   })
 */

/**
 * Module dependencies.
 */

var assert = require('assert')
var NEWLINE = '\n'.charCodeAt(0)

function emitNewlineEvents (stream) {
  if (stream._emittingNewlines) {
    // already emitting newline events
    return
  }

  var write = stream.write

  stream.write = function (data) {
    // first write the data
    var rtn = write.apply(stream, arguments)

    if (stream.listeners('newline').length > 0) {
      var len = data.length
        , i = 0
      // now try to calculate any deltas
      if (typeof data == 'string') {
        for (; i<len; i++) {
          processByte(stream, data.charCodeAt(i))
        }
      } else {
        // buffer
        for (; i<len; i++) {
          processByte(stream, data[i])
        }
      }
    }

    return rtn
  }

  stream._emittingNewlines = true
}
module.exports = emitNewlineEvents


/**
 * Processes an individual byte being written to a stream
 */

function processByte (stream, b) {
  assert.equal(typeof b, 'number')
  if (b === NEWLINE) {
    stream.emit('newline')
  }
}
 at SyntaxError: Unexpected token (23:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/wicked/node_modules/wicked/index.js. Coverage (Term): 11% Coverage (LOC): 19%
*- File /root/Targets/wicked/node_modules/npmlog/log.js. Coverage (Term): 5% Coverage (LOC): 4%
*- File /root/Targets/wicked/node_modules/ansi/lib/ansi.js. Coverage (Term): 3% Coverage (LOC): 5%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
