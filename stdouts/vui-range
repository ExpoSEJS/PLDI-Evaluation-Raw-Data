/root/Targets/vui-range
└── vui-range@1.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/vui-range/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0283 took 3.136s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:78) on program <style scoped>
  .vui-range-wrapper {
    width: 100%;
    height: 100%;
    background-color: #414755;
    overflow: hidden;
  }
  .vui-range-wrapper .range,
  .vui-range-wrapper .range-btn {
    float: left;
  }
  .vui-range-wrapper .range {
    width: 30%;
    height: 3px;
    background-color: #13a9ba;
  }
  .vui-range-wrapper .range-btn {
    height: 3px;
    width: 0;
  }
  .vui-range-wrapper .range-btn:before {
    content: '';
    position: absolute;
    width: 21px;
    height: 21px;
    background-color: #ffffff;
    border-radius: 100%;
    margin-top: -9px;
    margin-left: -10px;
    cursor: pointer;
  }
</style>

<template>
  <div class="vui-template-wrapper">
    <div class="vui-range-wrapper">
      <div ref="range" 
           class="range"
           :style="{'width': calcPercent}"
      >
      </div>
      <div ref="rangeBtn"
           @mousedown="__onMousedown"
           class="range-btn">
      </div>
    </div>
  </div>
</template>

<script>
  export default {
    props: {
      value: {
        type: null
      },
      onchange: {
        type: Function
      },
      max: {
        type: Number
      },
      min: {
        type: Number
      },
      step: {
        type: Number
      },
      background: {
        type: String
      },
      color: {
        type: String
      }
    },
    data () {
      return {
        element: null,
        model: {
          value: null,
          min: 0,
          max: 100
        },
      }
    },
    computed: {
      calcPercent() {
        return parseInt( ( this.value - ( this.min || 0 ) )/((this.max || 100) - (this.min || 0))*100 ) + '%';
      }
    },
    methods: {
      __onMousedown( e ) {
        if( e.which == 1 ){
          this.element = e;
          this.oldWith = this.$refs.range.offsetWidth;
          this.oldValue = this.value;
          this.__addEvent(document,'mousemove', this.__onMousemove);
          this.__addEvent(document,'mouseup', this.__onMouseup);
        }
      },
      __onMousemove( e ) {
        // 拦截没有点击的情况
        if( !this.element ){
          return;
        }
        let wrapperWidth = this.$el.offsetWidth;
        let field = (this.max || 100)-(this.min || 0);
        let unit = wrapperWidth/( (this.max || 100)-(this.min || 0) );
        let oldX = this.element.clientX;
        let curX = e.clientX;
        let moveX = curX - oldX;
        let result = this.oldValue + moveX/unit;
        if( result > (this.max || 100) ){
          result = (this.max || 100)
        }else if(result < (parseInt(this.min) || 0) ){
          result = (this.min || 0)
        }
        this.__onChange( parseInt(result) );
      },
      __onMouseup( e ) {
        this.element = null;
        this.__removeEvent(document,'mousemove', this.__onMousemove);
        this.__removeEvent(document,'mouseup', this.__onMouseup);
      },
      __onChange( _result ) {
        this.onchange && this.onchange( _result );
      },
      __addEvent( _element, _type, __handler ) {
        if( _element.addEventListener ){
          _element.addEventListener(_type,__handler,false);
        }else if( _element.attachEvent ){
          _element.attachEvent('on'+_type,__handler);
        }else{
          _element['on'+_type]=__handler;
        }
      },
      __removeEvent( _element, _type, __handler ) {
        if( _element.removeEventListener ){
          _element.removeEventListener(_type,__handler,false);
        }else if( _element.detachEvent ){
          _element.detachEvent('on'+_type,__handler);
        }else{
          _element['on'+_type]=null;
        }
      }
    }
  };
</script>

 at SyntaxError: Unexpected token (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
