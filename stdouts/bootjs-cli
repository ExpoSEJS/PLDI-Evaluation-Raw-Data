/root/Targets/bootjs-cli
└─┬ bootjs-cli@0.2.3 
  ├── commander@2.11.0 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  ├── readline@1.3.0 
  └─┬ recursive-copy@2.0.6 
    ├─┬ del@2.2.2 
    │ ├─┬ globby@5.0.0 
    │ │ └─┬ glob@7.1.2 
    │ │   ├── fs.realpath@1.0.0 
    │ │   ├─┬ inflight@1.0.6 
    │ │   │ └── wrappy@1.0.2 
    │ │   ├── inherits@2.0.3 
    │ │   ├── once@1.4.0 
    │ │   └── path-is-absolute@1.0.1 
    │ ├── is-path-cwd@1.0.0 
    │ ├─┬ is-path-in-cwd@1.0.0 
    │ │ └─┬ is-path-inside@1.0.0 
    │ │   └── path-is-inside@1.0.2 
    │ ├── object-assign@4.1.1 
    │ ├─┬ pinkie-promise@2.0.1 
    │ │ └── pinkie@2.0.4 
    │ └── rimraf@2.6.2 
    ├── emitter-mixin@0.0.3 
    ├─┬ errno@0.1.4 
    │ └── prr@0.0.0 
    ├── graceful-fs@4.1.11 
    ├── junk@1.0.3 
    ├─┬ maximatch@0.1.0 
    │ ├── array-differ@1.0.0 
    │ ├─┬ array-union@1.0.2 
    │ │ └── array-uniq@1.0.3 
    │ ├── arrify@1.0.1 
    │ └─┬ minimatch@3.0.4 
    │   └─┬ brace-expansion@1.1.8 
    │     ├── balanced-match@1.0.0 
    │     └── concat-map@0.0.1 
    ├── pify@2.3.0 
    ├─┬ promise@7.3.1 
    │ └── asap@2.0.6 
    └── slash@1.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/bootjs-cli/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0307 took 1.412s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

'use strict';
const fs = require('fs');
const path = require('path');
const program = require('commander');
const mkdirp = require('mkdirp');
const readline = require('readline');
const pkg = require('../package.json');
const artFont = require('../lib/ArtFont.js');

let projInfo = {};
program
    .version(pkg.version);

program
    .command('init <project_name>')
    .option('-d, --dir <path>', 'The directory to create project.')
    .option('-t, --template <template name>', 'Template name to clone.')
    .description('create a new project')
    .action(function(project_name, options) {
        if (!project_name) return;
        project_name = project_name.toLowerCase();
        let proArr = project_name.split(':');
        if (proArr[1]) {
            projInfo.subSystem = proArr[0];
            projInfo.projectName = proArr[1];
        } else {
            projInfo.subSystem = 'sub';
            projInfo.projectName = proArr[0];
        }

        if (!options.dir) {
            options.dir = path.join(process.cwd(), projInfo.projectName);
        }
        init(projInfo.projectName, options);
    });

program.on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ bootjs-cli init kickstart # 创建一个带有quickstart的项目');
    console.log('    $ bootjs-cli init --template=compact quickstart # 创建一个干净的项目');
    console.log('    $ bootjs-cli init --template=compact mgr:planet # 创建一个类别名为mgr、项目名为planet的项目');
    console.log('    $ bootjs-cli init --template=mini quickstart # 创建一个最小化的项目');
    console.log('    $ bootjs-cli init --dir=/proj/kickstart kickstart # 指定目录创建项目');
    console.log();
}).parse(process.argv);

if (process.argv.length <= 2) {
    program.outputHelp(function(txt) {
        return txt;
    });
}

function init(project_name, options) {
    if (fs.existsSync(options.dir)) {
        console.info('目标目录: ' + options.dir + ' 已经存在, 请换一个再试.');
        process.exit(1);
    }
    console.log('即将创建项目到' + options.dir);
    process.stdin.destroy();
    mkdirp(options.dir, function() {
        let tmpName = options.template || 'kickstart';
        _init(project_name, options, tmpName);
    });
}

function confirm(msg, callback) {
    var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    rl.question(msg, function(input) {
        rl.close();
        callback(/^y|yes|ok|true$/i.test(input));
    });
}

function _replacePlaceholders(files, target) {
    target = target || {};
    files.forEach(function(filePath) {
        if(!fs.existsSync(filePath)) return;

        let text = fs.readFileSync(filePath, 'utf8');

        target.projectName = target.projectName || 'PRO'
        text = text.replace(/\{project_name\}/g, target.projectName);
        text = text.replace(/__project_name__/g, target.projectName);
        text = text.replace(/\{PROJECT_NAME\}/g, target.projectName.toUpperCase());

        target.subSystem = target.subSystem || 'SUB';
        text = text.replace(/\{sub_system\}/g, target.subSystem);
        text = text.replace(/\{SUB_SYSTEM\}/g, target.subSystem.toUpperCase());
        text = text.replace(/\{project_name_art\}/g, target.projectNameArt);

        fs.writeFileSync(filePath, text);
    });
}

function _init(project_name, options, templatesName) {
    let copy = require('recursive-copy');
    templatesName = templatesName || 'kickstart';
    let src = path.join(__dirname, "/../templates/" + templatesName);
    if (!fs.existsSync(src)) {
        console.error('指定的模板【'+ templatesName +'】不存在');
        process.exit(1);
    }
    copy(src, options.dir, {dot: true})
        .then(function(results) {
            createGitignoreFile(options.dir);
            console.info('Step 1: Copied ' + results.length + ' files.');
            // template替换.
            projInfo.projectNameArt = artFont.genWords(projInfo.projectName).join('@');
            projInfo.projectNameArt = projInfo.projectNameArt
                .replace(/'/, '\\\'')
                .replace(/\\/g, '\\\\')
                .replace(/@/g, '\\n');

            _replacePlaceholders([
                options.dir + '/app/config/config.js',
                options.dir + '/app/src/controllers/IndexController.js',
                options.dir + '/package.json',
                options.dir + '/app.js',
            ], projInfo);

            console.info('Step 2: Compiled template files.');

            console.info('Step 3: Starting "npm install"');
            // 执行npm更新包 
            let child_process = require('child_process');
            let cmd = 'cd ' + options.dir + ' && npm install ';
            let working = child_process.exec(cmd, function(err, stdout, stderr) {
                if (err) throw err;
                console.info('Module dependencies installed.');
                hookCompleted(project_name, options);
            });
            working.stdout.on('data', function(data) {
                console.log(data);
            });

            working.stderr.on('data', function(data) {
                console.error(data);
            });
        })
        .catch(function(error) {
            console.error('Copy failed: ' + error);
        });
}

function hookCompleted(project_name, options) {
    console.log();
    console.log('**************************************************');
    console.log();
    console.log(' $> cd ' + options.dir);
    console.log(' Run ');
    console.log('    Windows: npm run win.start"');
    console.log('    Non-Windows: npm run local.start"');
    console.log(' to start node on port 5000');
    console.log();
    console.log('**************************************************');
}

function createGitignoreFile(targetDir) {
    let items = [
        'var/logs/*',
        '!var/logs/.gitkeep',
        'app/modules/*',
        '!app/.gitkeep',
        '**/.DS_Store',
        'node_modules    ',
    ];
    fs.writeFileSync(path.join(targetDir, '.gitignore'), items.join('\n'));
} at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
