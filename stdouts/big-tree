/root/Targets/big-tree
└─┬ big-tree@0.1.0 
  └── jquery@2.2.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/big-tree/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0929 took 3.6641s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:78) on program <!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Big-Tree</title>
  <link rel="stylesheet" href="css/big-tree.css"/>
  <style>
    html,body {
      height: 100%;
      padding: 0;
      margin: 0;
    }
    #tree{
      width: 30%;
      height: 100%;
      background: #f8f9f9;
      float: left;
    }
    #lazy_tree{
      width: 30%;
      height: 100%;
      background: #f8f9f9;
      float: right;
    }
    .button-area {
      padding: 5px;
    }
    .button-area button {
      padding: 5px;
      border-radius: 5px;
      background: #d9eef8;
      border: none;
      cursor: pointer;
      margin-right: 5px;
    }
    .button-area input {
      padding: 5px;
      border-radius: 5px;
      border: 1px solid #ccc;
    }
    #operation {
      margin-left: 31%;
      padding-top: 0.8%;
      width: 38%;
    }
    #result {
      overflow: auto;
      border: 1px solid #ccc;
      height: 300px;
      border-radius: 5px;
      margin-top: 10px;
      margin-bottom: 5px;
      font-size: 13px;
      font-family: Microsoft Yahei, serif, MONOSPACE;
    }
    pre {
      position: absolute;
      right: 31%;
      top: 0;
      margin: 0;
      padding: 0;
      font-size: 13px;
    }
    a {
      font-family: Microsoft Yahei, serif, MONOSPACE;
    }
  </style>
</head>
<body>
  <div id="tree"></div>
  <div id="lazy_tree"></div>
  <div id="operation">
    <div class="button-area">
      <button id="selected">selected</button>
      <button id="remove">remove</button>
      <input type="text" id="search" placeholder="search"/>
    </div>
    <pre>
      <code>
        new node example:
        [
          {
            "id": 100,
            "text": "new 100",
            "state": "closed" || "open"
            "children": [x,x,x] || null || []
          }
        ]
      </code>
    </pre>
    <div class="button-area">
      <input type="text" id="appendIpt" placeholder="append"/>
      <button id="append">append</button>
    </div>
    <div class="button-area">
      <input type="text" id="updateIpt" placeholder="update"/>
      <button id="update">update</button>
    </div>
    <div class="button-area">
      <button id="load">load data</button>
      <button id="db_filter">db_filter</button>
    </div>
    <div class="button-area">
      <button id="expand">expand</button>
      <button id="collapse">collapse</button>
      <button id="get_children">get children</button>
    </div>
    <div id="result"></div>
    <a href="http://json.parser.online.fr/" target="_blank">JSON parser online</a>
  </div>
</body>
<script src="vendor/jquery/jquery.min.js"></script>
<script src="mock/data.js"></script>
<script src="js/big-tree.js"></script>
<script>
  var $tree = $('#tree');
  $tree.tree('destroy').tree({
    data: TreeData,
    formatter: function(node) {
      var length = (node.children == null || node.children == undefined) ? 0 : node.children.length;
      return node.text + ' ('  + length + ')';
    },
    onSelect: function(node) {
      console.log('selected', node);
    },
    onBeforeExpand: function(node) {
      console.log('before expand', node);
    }
  });
  $('#selected').click(function() {
    var selected = $tree.tree('getSelected');
    $('#result').html(JSON.stringify(selected));
  });
  $('#remove').click(function() {
    var selected = $tree.tree('getSelected');
    if(selected) {
      $tree.tree('remove', selected.target);
    }
  });
  $('#update').click(function() {
    var selected = $tree.tree('getSelected');
    var value = $('#updateIpt').val();
    if( value == "") {
      value = 'update text ' + Math.ceil(Math.random()*1000)
    }
    if(selected) {
      $tree.tree('update', {
        target: selected.target,
        text: value
      });
    }
  });
  $('#append').click(function() {
    var selected = $tree.tree('getSelected');
    var value = $('#appendIpt').val();
    var data;
    if(value != "") {
      data = JSON.parse(value);
    } else {
      data = [
        {
          id: Math.ceil(Math.random()*1000),
          text: 'append text ' + Math.ceil(Math.random()*1000)
        },
        {
          text: 'append text ' + Math.ceil(Math.random()*1000),
          state: 'closed',
          children: [
            {text: 'append child ' + Math.ceil(Math.random()*1000)},
            {text: 'append child ' + Math.ceil(Math.random()*1000)}
          ]
        }
      ];
    }
    if(selected) {
      $tree.tree('append', {
        target: selected.target,
        data: data
      });
    }
  });
  $('#search').keyup(function() {
    $tree.tree('doFilter', $(this).val());
  });
  $('#load').click(function() {
    $.ajax({
      type: 'GET',
      url: 'controller/root.json',
      dataType: 'json',
      headers: {
        'User-Id': 5
      },
      success: function(result) {
        $tree.tree('loadData', result.data);
      }
    });
  });
  $('#db_filter').click(function() {
    $tree.tree('dbFilter', {
      type: 'GET',
      url: 'controller/root.json',
      dataType: 'json',
      headers: {
        'User-Id': 5
      },
      dataObj: true
    });
  });
  $('#expand').click(function() {
    var selected = $tree.tree('getSelected');
    if(selected) {
      $tree.tree('expand', selected.target);
    }
  });
  $('#collapse').click(function() {
    var selected = $tree.tree('getSelected');
    if(selected) {
      $tree.tree('collapse', selected.target);
    }
  });
  $('#get_children').click(function() {
    var selected = $tree.tree('getSelected');
    if(selected) {
      var children = $tree.tree('getChildren', selected.target);
      $('#result').html(JSON.stringify(children));
    }
  });

  /**
   * lazy tree
   */
  var $lazy_tree = $('#lazy_tree');
  $lazy_tree.tree({
    method: 'GET',
    url: 'controller/root.json',
    lazy: true,
    onSelect: function(node) {
      console.log('selected', node);
    },
    onBeforeExpand: function(node) {
      $lazy_tree.tree('options').url = 'controller/children.json?node=' + node.id;
    }
  });
</script>
</html> at SyntaxError: Unexpected token (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
