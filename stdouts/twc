/root/Targets/twc
└─┬ twc@0.4.4-rc 
  ├─┬ pretty@2.0.0 
  │ ├─┬ condense-newlines@0.2.1 
  │ │ ├── is-whitespace@0.3.0 
  │ │ └─┬ kind-of@3.2.2 
  │ │   └── is-buffer@1.1.5 
  │ ├─┬ extend-shallow@2.0.1 
  │ │ └── is-extendable@0.1.1 
  │ └─┬ js-beautify@1.7.3 
  │   ├─┬ config-chain@1.1.11 
  │   │ ├── ini@1.3.4 
  │   │ └── proto-list@1.2.4 
  │   ├─┬ editorconfig@0.13.3 
  │   │ ├── bluebird@3.5.1 
  │   │ ├── commander@2.11.0 
  │   │ ├─┬ lru-cache@3.2.0 
  │   │ │ └── pseudomap@1.0.2 
  │   │ ├── semver@5.4.1 
  │   │ └── sigmund@1.0.1 
  │   ├─┬ mkdirp@0.5.1 
  │   │ └── minimist@0.0.8 
  │   └─┬ nopt@3.0.6 
  │     └── abbrev@1.1.1 
  └── typescript@2.4.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/twc/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0713 took 4.0396s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const typescript_1 = require("typescript");
const builder_1 = require("./builder");
const config_1 = require("./config");
/**
 * Make sure the path exists. If it doesn't, create it.
 *
 * @param path Path to ensure
 *
 * @returns Ensured path
 */
function ensurePath(path) {
    if (!fs_1.existsSync(path)) {
        path_1.dirname(path)
            .split("/")
            .reduce((prev, curr) => {
            const p = path_1.join(prev, curr);
            if (!fs_1.existsSync(p)) {
                fs_1.mkdirSync(p);
            }
            return p;
        }, "");
    }
    return path;
}
/**
 * Transpile the file and save on the disk.
 *
 * @param fileName Path of the file to transpile
 */
function emitFile(fileName) {
    const source = typescript_1.createSourceFile(fileName, fs_1.readFileSync(fileName).toString(), config_1.compilerOptions.target, true);
    config_1.cache.update(source);
    fs_1.writeFileSync(ensurePath(config_1.outPath(fileName.replace(/.ts$/, ".html"))), new builder_1.Module(source, config_1.compilerOptions, config_1.compileTo).toString());
}
/**
 * Watch provided files for changes. Whenever a chang happens, emit the file.
 *
 * @param rootFileNames Array of files to watch
 */
function watch(rootFileNames) {
    const files = {};
    rootFileNames.forEach((fileName) => {
        files[fileName] = { version: 0 };
        emitFile(fileName);
        fs_1.watchFile(fileName, { persistent: true, interval: 250 }, (curr, prev) => {
            if (+curr.mtime <= +prev.mtime) {
                return;
            }
            files[fileName].version++;
            emitFile(fileName);
        });
    });
}
if (config_1.errors.length) {
    console.error(config_1.errors.map(({ messageText }) => messageText).join("\n"));
    process.exit(config_1.errors[0].code);
}
else if (config_1.cli.version) {
    console.log(`Version ${config_1.twc.version}`);
    process.exit();
}
else if (config_1.cli.help) {
    console.log([
        `Version ${config_1.twc.version}`,
        `Syntax:    twc [options [file ...]`,
        "",
        "Examples:  twc",
        "           twc my-component.ts",
        "           twc --outDir dist src/*.ts",
        "",
        "Options:",
        " -h, --help                      Print this message.",
        " -v, --version                   Print the twc version",
        " -p, --project                   Compile the project given the path to its configuration file, or to a folder with a `tsconfig.json`.",
        " -w, --watch                     Watch input files for changes.",
        "",
        "Compiler options:",
        "Just as with `tsc` you can pass on the compiler options within the command line. These options will override tsconfig.json file. For" +
            " the list of options refer to tsc documentation (you can quickly check it by running `tsc --all`)."
    ].join("\n"));
    process.exit();
}
else if (config_1.cli.watch) {
    watch(config_1.files);
}
else {
    config_1.files.forEach((file) => emitFile(file));
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
