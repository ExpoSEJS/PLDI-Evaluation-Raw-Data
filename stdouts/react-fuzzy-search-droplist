/root/Targets/react-fuzzy-search-droplist
└─┬ react-fuzzy-search-droplist@0.0.1 
  ├── fuse.js@1.3.1 
  ├── lodash@3.10.1 
  └─┬ react@0.12.2 
    └─┬ envify@3.4.1 
      ├─┬ jstransform@11.0.3 
      │ ├── base62@1.2.0 
      │ ├─┬ commoner@0.10.8 
      │ │ ├── commander@2.11.0 
      │ │ ├─┬ detective@4.5.0 
      │ │ │ ├── acorn@4.0.13 
      │ │ │ └── defined@1.0.0 
      │ │ ├─┬ glob@5.0.15 
      │ │ │ ├─┬ inflight@1.0.6 
      │ │ │ │ └── wrappy@1.0.2 
      │ │ │ ├── inherits@2.0.3 
      │ │ │ ├─┬ minimatch@3.0.4 
      │ │ │ │ └─┬ brace-expansion@1.1.8 
      │ │ │ │   ├── balanced-match@1.0.0 
      │ │ │ │   └── concat-map@0.0.1 
      │ │ │ ├── once@1.4.0 
      │ │ │ └── path-is-absolute@1.0.1 
      │ │ ├── graceful-fs@4.1.11 
      │ │ ├── iconv-lite@0.4.19 
      │ │ ├─┬ mkdirp@0.5.1 
      │ │ │ └── minimist@0.0.8 
      │ │ ├── private@0.1.7 
      │ │ ├── q@1.5.0 
      │ │ └─┬ recast@0.11.23 
      │ │   ├── ast-types@0.9.6 
      │ │   ├── esprima@3.1.3 
      │ │   └── source-map@0.5.7 
      │ ├── esprima-fb@15001.1.0-dev-harmony-fb 
      │ ├── object-assign@2.1.1 
      │ └─┬ source-map@0.4.4 
      │   └── amdefine@1.0.1 
      └── through@2.3.8 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/react-fuzzy-search-droplist/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0513 took 4.6296s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (11:6) on program var React = require('react');
var Fuse = require('fuse.js');
var ResultList = require('./ResultList.react.jsx');
var _ = require('lodash');

var FuzzySearch = React.createClass({
  displayName: 'component/FuzzySearch',
  render: function () {
    var classNames = this.props.classNames || {};
    return (
      <div className={classNames.root}>
        <input 
          onChange={this.onChange} 
          ref="input"
          onKeyDown={this.onKeyDown}
          onBlur={this.onBlur}
          onFocus={this.onFocus}
          value={this.state.query} />
        <ResultList 
          display={this.props.display} 
          active={this.state.active}
          onClick={this.setItem}
          classNames={classNames}
          onMouseOver={this.setActiveAtIndex} >
          {this.state.result}
        </ResultList>
      </div>
    );
  },
  getInitialState: function () {
    return {
      result: null,
      active: -1,
      query: this.props.title
    };
  },
  componentWillMount: function () {},
  componentWillUnmount: function () {},
  getOptions: function () {
    var keys = this.props.keys.split(',').map(function (key) { return key.trim(); });
    return {
      keys: keys
    };
  },
  /**
   * Called by ResultListItem on mouse over, 
   * so that the is-active class is updated
   */
  setActiveAtIndex: function (index) {
    this.setState({ active: index });
  },
  onBlur: function (e) {
    var state = { result: null, active: -1 };
    if (!this.state.query.length) state.query = this.props.title;
    this.setState(state);
  },
  onFocus: function () {
    var state = { result: this.props.collection };
    if (this.state.query === this.props.title) state.query = '';
    this.setState(state);
  },
  /**
   * Called when the input field is changed.
   *
   * Searches the provided collection for the input query.
   */
  onChange: function (e) {
    var value = this.refs.input.getDOMNode().value;
    var options = this.getOptions();
    var fuse = new Fuse(this.props.collection, options);
    var result;
    if (value.length) {
      result = fuse.search(value);
    } else {
      result = this.props.collection;
    }
    this.setState({ result: result, query: value });
  },
  /**
   * Called by self on return key down and the ResultListItem on click.
   *
   * Calls the onSelect callback provided as a property.
   */
  setItem: function (item) {
    this.props.onSelect(item);
    var state = this.getInitialState();
    var compile = _.template(this.props.template);
    state.query = compile(item);
    this.setState(state);
  },
  /**
   * Called when a key is pressed in the input field.
   *
   * Navigates the ResultList with up/down arrows and
   * selects the currently active ResultListItem with return.
   */
  onKeyDown: function (e) {
    var active = this.state.active;
    if (e.which === 40) { // Down
      active++;
      if (active === this.state.result.length) active = 0;
    } else if (e.which === 38) { // Up
      active--;
      if (active === -1) active = this.state.result.length-1;
    } else if (e.which === 13) { // Return
      e.preventDefault();
      if (this.state.active > -1 && typeof this.props.onSelect === 'function') {
        var activeItem = this.state.result[this.state.active];
        this.setItem(activeItem);
      }
    }
    this.setState({ active: active });
  }
});

module.exports = FuzzySearch;
 at SyntaxError: Unexpected token (11:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseParenAndDistinguishExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1861:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/react-fuzzy-search-droplist/node_modules/react-fuzzy-search-droplist/index.js. Coverage (Term): 80% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
