
> codeflow@0.2.3 postinstall /root/Targets/codeflow/node_modules/codeflow
> ./bin/codeflow -h


  Usage: codeflow [options] [command]


  Options:

    -V, --version  output the version number
    -h, --help     output usage information


  Commands:

    run [options] <path>           start a flow or a project
    install [options] [packages]   install one or more package(s)
    uninstall [options] <package>  uninstall the specified package
    list [options]                 print a list of installed packages 
  For more help on each command, type:

    $ codeflow [command] --help 	 print more help on the command

/root/Targets/codeflow
└─┬ codeflow@0.2.3 
  ├─┬ archiver@1.3.0 
  │ ├─┬ archiver-utils@1.3.0 
  │ │ ├── lazystream@1.0.0 
  │ │ └─┬ normalize-path@2.1.1 
  │ │   └── remove-trailing-separator@1.1.0 
  │ ├── async@2.5.0 
  │ ├── buffer-crc32@0.2.13 
  │ ├─┬ glob@7.1.2 
  │ │ ├── fs.realpath@1.0.0 
  │ │ ├─┬ inflight@1.0.6 
  │ │ │ └── wrappy@1.0.2 
  │ │ ├─┬ minimatch@3.0.4 
  │ │ │ └─┬ brace-expansion@1.1.8 
  │ │ │   ├── balanced-match@1.0.0 
  │ │ │   └── concat-map@0.0.1 
  │ │ └── once@1.4.0 
  │ ├── lodash@4.17.4 
  │ ├─┬ readable-stream@2.3.3 
  │ │ ├── core-util-is@1.0.2 
  │ │ ├── isarray@1.0.0 
  │ │ ├── process-nextick-args@1.0.7 
  │ │ ├── safe-buffer@5.1.1 
  │ │ ├── string_decoder@1.0.3 
  │ │ └── util-deprecate@1.0.2 
  │ ├─┬ tar-stream@1.5.4 
  │ │ ├── bl@1.2.1 
  │ │ ├── end-of-stream@1.4.0 
  │ │ └── xtend@4.0.1 
  │ ├── walkdir@0.0.11 
  │ └─┬ zip-stream@1.2.0 
  │   └─┬ compress-commons@1.2.0 
  │     └─┬ crc32-stream@2.0.0 
  │       └── crc@3.5.0 
  ├── async@0.8.0 
  ├─┬ body-parser@1.18.2 
  │ ├── bytes@3.0.0 
  │ ├── content-type@1.0.4 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├── depd@1.1.1 
  │ ├─┬ http-errors@1.6.2 
  │ │ ├── setprototypeof@1.0.3 
  │ │ └── statuses@1.3.1 
  │ ├── iconv-lite@0.4.19 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── qs@6.5.1 
  │ ├─┬ raw-body@2.3.2 
  │ │ └── unpipe@1.0.0 
  │ └─┬ type-is@1.6.15 
  │   ├── media-typer@0.3.0 
  │   └─┬ mime-types@2.1.17 
  │     └── mime-db@1.30.0 
  ├── commander@2.11.0 
  ├─┬ connect-multiparty@2.0.0 
  │ ├─┬ multiparty@4.1.3 
  │ │ └─┬ fd-slicer@1.0.1 
  │ │   └── pend@1.2.0 
  │ └── qs@4.0.0 
  ├─┬ cookie-parser@1.4.3 
  │ ├── cookie@0.3.1 
  │ └── cookie-signature@1.0.6 
  ├── ejs@2.5.7 
  ├─┬ express@3.21.2 
  │ ├── basic-auth@1.0.4 
  │ ├── commander@2.6.0 
  │ ├─┬ connect@2.30.2 
  │ │ ├── basic-auth-connect@1.0.0 
  │ │ ├─┬ body-parser@1.13.3 
  │ │ │ ├── iconv-lite@0.4.11 
  │ │ │ └─┬ raw-body@2.1.7 
  │ │ │   ├── bytes@2.4.0 
  │ │ │   └── iconv-lite@0.4.13 
  │ │ ├── bytes@2.1.0 
  │ │ ├─┬ compression@1.5.2 
  │ │ │ ├─┬ accepts@1.2.13 
  │ │ │ │ └── negotiator@0.5.3 
  │ │ │ ├── bytes@2.1.0 
  │ │ │ ├── compressible@2.0.11 
  │ │ │ └─┬ debug@2.2.0 
  │ │ │   └── ms@0.7.1 
  │ │ ├─┬ connect-timeout@1.6.2 
  │ │ │ ├── debug@2.2.0 
  │ │ │ ├── http-errors@1.3.1 
  │ │ │ └── ms@0.7.1 
  │ │ ├── cookie@0.1.3 
  │ │ ├── cookie-parser@1.3.5 
  │ │ ├─┬ csurf@1.8.3 
  │ │ │ ├── cookie@0.1.3 
  │ │ │ ├─┬ csrf@3.0.6 
  │ │ │ │ ├── rndm@1.2.0 
  │ │ │ │ ├── tsscmp@1.0.5 
  │ │ │ │ └─┬ uid-safe@2.1.4 
  │ │ │ │   └── random-bytes@1.0.0 
  │ │ │ └── http-errors@1.3.1 
  │ │ ├─┬ debug@2.2.0 
  │ │ │ └── ms@0.7.1 
  │ │ ├── depd@1.0.1 
  │ │ ├─┬ errorhandler@1.4.3 
  │ │ │ ├─┬ accepts@1.3.4 
  │ │ │ │ └── negotiator@0.6.1 
  │ │ │ └── escape-html@1.0.3 
  │ │ ├─┬ express-session@1.11.3 
  │ │ │ ├── cookie@0.1.3 
  │ │ │ ├── crc@3.3.0 
  │ │ │ ├─┬ debug@2.2.0 
  │ │ │ │ └── ms@0.7.1 
  │ │ │ ├── depd@1.0.1 
  │ │ │ └─┬ uid-safe@2.0.0 
  │ │ │   └── base64-url@1.2.1 
  │ │ ├─┬ finalhandler@0.4.0 
  │ │ │ └─┬ debug@2.2.0 
  │ │ │   └── ms@0.7.1 
  │ │ ├── http-errors@1.3.1 
  │ │ ├─┬ method-override@2.3.10 
  │ │ │ └── vary@1.1.2 
  │ │ ├─┬ morgan@1.6.1 
  │ │ │ ├─┬ debug@2.2.0 
  │ │ │ │ └── ms@0.7.1 
  │ │ │ └── depd@1.0.1 
  │ │ ├─┬ multiparty@3.3.2 
  │ │ │ ├─┬ readable-stream@1.1.14 
  │ │ │ │ ├── isarray@0.0.1 
  │ │ │ │ └── string_decoder@0.10.31 
  │ │ │ └─┬ stream-counter@0.2.0 
  │ │ │   └─┬ readable-stream@1.1.14 
  │ │ │     ├── isarray@0.0.1 
  │ │ │     └── string_decoder@0.10.31 
  │ │ ├── on-headers@1.0.1 
  │ │ ├── pause@0.1.0 
  │ │ ├── qs@4.0.0 
  │ │ ├── response-time@2.3.2 
  │ │ ├─┬ serve-favicon@2.3.2 
  │ │ │ └── ms@0.7.2 
  │ │ ├─┬ serve-index@1.7.3 
  │ │ │ ├── batch@0.5.3 
  │ │ │ ├─┬ debug@2.2.0 
  │ │ │ │ └── ms@0.7.1 
  │ │ │ ├── escape-html@1.0.3 
  │ │ │ └── http-errors@1.3.1 
  │ │ ├─┬ serve-static@1.10.3 
  │ │ │ ├── escape-html@1.0.3 
  │ │ │ └─┬ send@0.13.2 
  │ │ │   ├── debug@2.2.0 
  │ │ │   ├── destroy@1.0.4 
  │ │ │   ├── http-errors@1.3.1 
  │ │ │   ├── ms@0.7.1 
  │ │ │   └── statuses@1.2.1 
  │ │ └── vhost@3.0.2 
  │ ├── content-disposition@0.5.0 
  │ ├── cookie@0.1.3 
  │ ├─┬ debug@2.2.0 
  │ │ └── ms@0.7.1 
  │ ├── depd@1.0.1 
  │ ├── escape-html@1.0.2 
  │ ├── etag@1.7.0 
  │ ├── fresh@0.3.0 
  │ ├── merge-descriptors@1.0.0 
  │ ├── methods@1.1.2 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ ├─┬ proxy-addr@1.0.10 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.0.5 
  │ ├── range-parser@1.0.3 
  │ ├─┬ send@0.13.0 
  │ │ ├── debug@2.2.0 
  │ │ ├── depd@1.0.1 
  │ │ ├── destroy@1.0.3 
  │ │ ├── http-errors@1.3.1 
  │ │ ├── mime@1.3.4 
  │ │ ├── ms@0.7.1 
  │ │ └── statuses@1.2.1 
  │ ├── utils-merge@1.0.0 
  │ └── vary@1.0.1 
  ├─┬ fix-path@2.1.0 
  │ └─┬ shell-path@2.1.0 
  │   └─┬ shell-env@0.3.0 
  │     ├── default-shell@1.0.1 
  │     ├─┬ execa@0.5.1 
  │     │ ├─┬ cross-spawn@4.0.2 
  │     │ │ └─┬ lru-cache@4.1.1 
  │     │ │   ├── pseudomap@1.0.2 
  │     │ │   └── yallist@2.1.2 
  │     │ ├─┬ get-stream@2.3.1 
  │     │ │ ├── object-assign@4.1.1 
  │     │ │ └─┬ pinkie-promise@2.0.1 
  │     │ │   └── pinkie@2.0.4 
  │     │ ├── is-stream@1.1.0 
  │     │ ├─┬ npm-run-path@2.0.2 
  │     │ │ └── path-key@2.0.1 
  │     │ ├── p-finally@1.0.0 
  │     │ ├── signal-exit@3.0.2 
  │     │ └── strip-eof@1.0.0 
  │     └─┬ strip-ansi@3.0.1 
  │       └── ansi-regex@2.1.1 
  ├── follow-redirects@1.2.5 
  ├─┬ fs-extra@4.0.2 
  │ ├── graceful-fs@4.1.11 
  │ ├── jsonfile@4.0.0 
  │ └── universalify@0.1.1 
  ├── icepick@1.3.0 
  ├── json-schema@0.2.3 
  ├── json-socket@0.2.1 
  ├─┬ npm-which@3.0.1 
  │ ├── npm-path@2.0.3 
  │ └─┬ which@1.3.0 
  │   └── isexe@2.0.0 
  ├── parseurl@1.3.2 
  ├── path-is-absolute@1.0.1 
  ├─┬ progress-stream@2.0.0 
  │ ├── speedometer@1.0.0 
  │ └── through2@2.0.3 
  ├── semver@5.4.1 
  ├─┬ tar@2.2.1 
  │ ├── block-stream@0.0.9 
  │ ├─┬ fstream@1.0.11 
  │ │ └── rimraf@2.6.2 
  │ └── inherits@2.0.3 
  └── underscore@1.8.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/codeflow/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 28.999999999999996% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","pow","join","RegExp","sort"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0557 took 9.3322s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (16:4) on program /**
 * Author Murukesh Sadasivan (murukesh@codeflow.co)
 * 
 * Copyright 2016 Codeflow Private Limited 
 * 
 * MIT Licensed
 */
'use strict'

var _ = require('underscore')
var Instance = require('./instance')
var Loader = require('./loader')
var Agent = require('./debugger/agent')
var Serializer = require('./debugger/serializer')
var Status = require('./status')
var assert = require('assert')

var ROOT_DIR = global.ROOT_DIR || process.cwd()
var MAX_DEBUG_INSTANCES = 50

/**
 * Class Engine
 * @param {props} props to flag the engine during startup
 */
function Engine(props) {
    this.isDebugMode = !!props.debug
    this.debugChannel = props.debug === 'tcp' ? 'tcp' : 'ipc'
    this.rootInstances = {}
    this.validationEnabled = false
    if (this.isDebugMode) {
        this.debugAgent = Agent.getInstance(this)
        //to debounce sendUpdate()
        this.pendingUpdate = 0
        this.lastUpdateTimer = null
    }
    this.bpOverride = {}
    this.listeners = {}
    this.isInited = false
}

Engine.prototype.init = function(cb) {
    var self = this
    if (this.debugAgent) {
        this.debugAgent.init(function() {
            self._load(cb)
        })
    } else {
        self._load(cb)
    }
}

Engine.prototype._load = function(cb) {
    this.isInited = true
    Loader.loadPackages(cb)
}

Engine.prototype.emit = function(event, data) {
    var eventListeners = this.listeners[event] || []
    for (var i = 0, length = eventListeners.length; i < length; i++) {
        var fn = eventListeners[i]
        if (typeof fn == 'function') {
            fn(data)
        }
    }
}

Engine.prototype.listen = function(event, fn) {
    if (!this.listeners[event]) {
        this.listeners[event] = []
    } 
    this.listeners[event].push(fn)    
}

Engine.prototype.getDebugAgent = function() {
    return this.debugAgent
}

Engine.prototype.sendSetFocus = function(instance, step, sessionId) {
    var data = {
        instance: instance.id, 
        step: step ? step.id: null
    }    
    //@TODO why sending update?
    this.sendUpdate(data, sessionId)
    this.debugAgent.sendMessage('focus', data, sessionId)    
}

Engine.prototype.sendBpNotify = function(instance, step, sessionId) {
    var data = {
        instance: instance.id, 
        instanceFile: instance.flow.fileName,
        step: step ? step.id: null,
        stepName: step && step.name ? step.name: step.id
    }
    this.debugAgent.sendMessage('breakPoint', data, sessionId) 
}

/**
 * Debounced sendUpdate
 */
Engine.prototype.sendUpdate = function(data, sessionId) {
    var self = this
    if (this.pendingUpdate == 0) {
        self.debugAgent.sendMessage('update')
    } else if (!this.lastUpdateTimer) {
        this.lastUpdateTimer = setTimeout(function() {
            self.pendingUpdate = 0
            self.lastUpdateTimer = null
            self.debugAgent.sendMessage('update')
        }, 100)
    }
    this.pendingUpdate++
}

Engine.prototype.sendStack = function(sessionId) {
    var stackTree = this.serializeInstances()    
    this.debugAgent.sendMessage('stack', stackTree, sessionId)
}

Engine.prototype.sendData = function(data, sessionId) {
    this.debugAgent.sendMessage('data', data, sessionId)
}

Engine.prototype.getId = function() {
    return this.id
}

Engine.prototype.serializeInstances = function() {
    var self = this
    var fileInstances = {}
    _.each(this.rootInstances, function(instance) {
        if (!instance) {
            return
        }
        if (!instance.parent) {
            var file = instance.flow.fileName
            if(process.platform === 'win32') {
                file = require('./fsUtil').toUnixPath(file)
            }
            if (!fileInstances[file]) {
                fileInstances[file] = []
            }
            self.trimSubInstances(instance)
            fileInstances[file].push(Serializer.serializeInstance(instance))
        }
    })
    return fileInstances    
}

Engine.prototype.clearInstances = function() {
    this.rootInstances = {}
}

Engine.prototype.getInstances = function() {
    return this.rootInstances
}

/**
 * Resolve a id in the format x.x.x.x to correct instance, traversing
 * from the root.
 */
Engine.prototype.getInstance = function(instanceId) {
    var ids = instanceId ? instanceId.split('.') : []
    var instance
    var map = this.rootInstances
    var prevId
    //dive into subinstances to find the match
    while (ids.length) {
        var id = (prevId ? prevId + '.' : '') + ids.shift()
        instance = map ? map[id] : null
        if (instance) {
           map = instance.subInstances
        } else {
            console.error("Instance with Id " + instanceId + " not found")
            break
        }
        prevId = id
    }
    return instance
}

/**
 * Only required for debugging
 */
Engine.prototype.addInstance = function(instance) {
    var parent = instance.parent    
    if (parent != null) {
        parent.addSubInstance(instance)
    } else {
        this.rootInstances[instance.id] = instance
    }
}

Engine.prototype.trimSubInstances = function(instance) {
    var subInstances = instance.subInstances
    var keys = Object.keys(subInstances)
    var len = keys.length
    if (len > MAX_DEBUG_INSTANCES) {
        var toTrim = len - MAX_DEBUG_INSTANCES
        for (var i = 0; i < toTrim; i++) {
            var id = keys[i]
            delete subInstances[id]
        }
    }
}

//in-memory breakpoint status to set/unset breakpoints without reloading flow 
//files
Engine.prototype.getBreakpointOverride = function(file, stepId) {
    return this.bpOverride[file] ? this.bpOverride[file][stepId] : null
}

Engine.prototype.setBreakpointOverride = function(file, stepId, status) {
    if (!this.bpOverride[file]) {
        this.bpOverride[file] = {}
    }
    this.bpOverride[file][stepId] = status
}

Engine.prototype.loadFlow = function(options, cb) {
    return Loader.loadFlow(options, cb)
}

Engine.prototype.loadResource = function(path, cb) {
    return Loader.loadResource(path, cb)
}

Engine.prototype.makeError = function(message, code, data, parent) {
    return new _Error(message, code, data, parent)
}


Engine.prototype.execute = function(params, parentInstance, parentStep, cb) {
    var self = this
    assert(this.isInited,"Engine is not initialized. Call .init() prior to execute()")    
    assert(params.flow || params.file, "Either a flow object or the file name should be passed")
    Loader.loadFlow(params, function(error, flow) {
        if (error) {
            if (params.callback) {
                return params.callback(error)
            } else {
                console.error(error)
            }
        } else {
            var instance = new Instance(self, flow, params, parentInstance, parentStep)                
            //for trigger types, sub instances will be added
            if (self.isDebugMode) {
                self.addInstance(instance)
                if (instance.mode === Status.DEBUG_MODE.STEP) {
                    self.sendSetFocus(instance)
                }
            }
            instance.execute()
            return cb && cb({
                path: flow.fileName,
                startRef: flow.startStep.ref
            })
        }
    })
}

Engine.prototype.getCompiled = function(params, cb) {
    var CompiledInstance = Loader.getLoaded(params.name || params.file)
    if (CompiledInstance) {
        return cb(null, CompiledInstance)
    }
    Loader.loadFlow(params, function(error, flow) {
        if (error) {
            return cb(error)
        }
        Loader.loadCompiled(flow, params, function(err, CompiledInstance) {
            return cb(null, CompiledInstance)
        })
    })
}

Engine.prototype.executeOptimized = function(params, parentInstance, parentStep, cb) {
    var self = this
    assert(this.isInited,"Engine is not initialized. Call .init() prior to execute()")    
    assert(params.flow || params.file, "Either a flow object or the file name should be passed")
    this.getCompiled(params, function(error, CompiledInstance) {
        if (error) {
            if (params.callback) {
                params.callback(error)
            } else {
                console.error(error)
            }
            return
        }        
        var instance = new CompiledInstance(self, params, parentInstance, parentStep)
        //for trigger types, sub instances will be added
        if (self.isDebugMode) {
            self.addInstance(instance)
            if (instance.mode === Status.DEBUG_MODE.STEP) {
                self.sendSetFocus(instance)
            }
        }                            
        instance.start()
        return cb && cb({
            path: instance.flow.fileName,
            startRef: instance.flow.startStep.ref
        })
    })
}

module.exports = Engine at SyntaxError: Unexpected token (16:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/codeflow/node_modules/codeflow/index.js. Coverage (Term): 78% Coverage (LOC): 100%
*- File /root/Targets/codeflow/node_modules/codeflow/src/runner.js. Coverage (Term): 5% Coverage (LOC): 5%
*- File /root/Targets/codeflow/node_modules/underscore/underscore.js. Coverage (Term): 19% Coverage (LOC): 33%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
