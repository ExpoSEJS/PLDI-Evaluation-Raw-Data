/root/Targets/csshint
└─┬ csshint@0.3.3 
  ├─┬ chalk@1.1.3 
  │ ├── ansi-styles@2.2.1 
  │ ├── escape-string-regexp@1.0.5 
  │ ├─┬ has-ansi@2.0.0 
  │ │ └── ansi-regex@2.1.1 
  │ ├── strip-ansi@3.0.1 
  │ └── supports-color@2.0.0 
  ├─┬ edp-core@1.0.32 
  │ ├─┬ chalk@1.0.0 
  │ │ ├─┬ has-ansi@1.0.3 
  │ │ │ ├── ansi-regex@1.1.1 
  │ │ │ └── get-stdin@4.0.1 
  │ │ ├── strip-ansi@2.0.1 
  │ │ └── supports-color@1.3.1 
  │ ├── edp-config@1.0.2 
  │ ├── esprima@2.2.0 
  │ ├── estraverse@4.1.1 
  │ ├─┬ glob@5.0.15 
  │ │ ├─┬ inflight@1.0.6 
  │ │ │ └── wrappy@1.0.2 
  │ │ ├── inherits@2.0.3 
  │ │ ├── once@1.4.0 
  │ │ └── path-is-absolute@1.0.1 
  │ ├── iconv-lite@0.4.19 
  │ ├─┬ minimatch@2.0.10 
  │ │ └─┬ brace-expansion@1.1.8 
  │ │   ├── balanced-match@1.0.0 
  │ │   └── concat-map@0.0.1 
  │ └── semver@4.3.6 
  ├─┬ js-yaml@3.10.0 
  │ ├─┬ argparse@1.0.9 
  │ │ └── sprintf-js@1.0.3 
  │ └── esprima@4.0.0 
  ├── manis@0.3.1 
  ├── object-assign@4.1.1 
  ├─┬ postcss@5.2.17 
  │ ├── js-base64@2.3.2 
  │ ├── source-map@0.5.7 
  │ └─┬ supports-color@3.2.3 
  │   └── has-flag@1.0.0 
  └── strip-json-comments@2.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/csshint/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 28.999999999999996% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","RegExp","bind","defineProperties","join","create","call","setPrototypeOf","getOwnPropertyNames","fromCharCode","assign","random","reduce"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.052 took 24.8893s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program /**
 * ER (Enterprise RIA)
 * Copyright 2013 Baidu Inc. All rights reserved.
 * 
 * @file Deferred类实现
 * @author otakustay
 */
var assert = require('assert');

/**
  * 尝试执行相关的回调函数
  * 
  * 当`deferred`处于非**pending**状态时，根据其状态，
  * 立即异步地运行对应的回调函数
  *
  * @param {Deferred} deferred 需要处理的`Deferred`实例
  */
function tryFlush(deferred) {
    if (deferred.state === 'pending') {
        return;
    }

    var callbacks = deferred.state === 'resolved'
        ? deferred._doneCallbacks.slice()
        : deferred._failCallbacks.slice();

    function flush() {
        for (var i = 0; i < callbacks.length; i++) {
            var callback = callbacks[i];
            try {
                // 回调时的this应该是`Promise`，没有`resolve`等方法
                callback.apply(deferred.promise, deferred._args);
            }
            catch (ex) {
            }
        }
    }

    if (deferred.syncModeEnabled) {
        flush();
    }
    else {
        process.nextTick(flush);
    }

    deferred._doneCallbacks = [];
    deferred._failCallbacks = [];
}

/**
  * 将一个原有的`Deferred`与一个新的`Deferred`对象连接起来
  * 
  * 该方法作为`then`方法的核心
  *
  * @param {Deferred} original 原`Deferred`对象
  * @param {Deferred} deferred 新`Deferred`对象
  * @param {callback} 当`original`运行完毕后，需要执行的函数
  * @param {string} actionType 关联的动作类型，`'resolve'`或`'reject'`
  * @return {function} 关联函数，可注册在`original`的相关回调函数上
  */
function pipe(original, deferred, callback, actionType) {
    return function () {
        // `.then(done)`及`.then(null, fail)`时使用
        // 
        // 根据`callback`的行为，进行以下处理：
        // 
        // - 如果`callback`返回值，则用该值改`deferred`为**resolved**
        // - 如果`callback`抛出异常，则用异常改`deferred`为**rejected**
        if (typeof callback === 'function') {
            var resolver = deferred.resolver;
            try {
                var returnValue = 
                    callback.apply(original.promise, arguments);

                if (Deferred.isPromise(returnValue)) {
                    returnValue.then(resolver.resolve, resolver.reject);
                }
                else {
                    resolver.resolve(returnValue);
                }
            }
            catch (error) {
                resolver.reject(error);
            }
        }
        // `.then()`及`.then(done, null)`时使用
        // 
        // 直接使用原`Deferred`保存的参数将`deferred`改为对应状态
        else {
            deferred[actionType].apply(deferred, original._args);
        }
    };
}

/**
  * Deferred类
  * 
  * 类似于jQuery的Deferred对象，是对异步操作的一种封装
  *
  * @constructor
  */
function Deferred() {
    this.state = 'pending';
    this._args = null;
    this._doneCallbacks = [];
    this._failCallbacks = [];

    /**
      * 与当前对象关联的`Promise`对象
      * 
      * 一个`Promise`对象是对`Deferred`对象的**只读**状态的表达，
      * `Promise`对象拥有所有添加回调函数的方法，包括：
      * 
      * - `done`
      * - `fail`
      * - `ensure`
      * - `then`
      * 
      * 但`Promise`对象并不包改变`Deferred`对象的方法，包括：
      * 
      * - `resolve`
      * - `reject`
      *
      * @type {Promise}
      * @public
      */
    this.promise =  {
        done: this.done.bind(this),
        fail: this.fail.bind(this),
        ensure: this.ensure.bind(this),
        then: this.then.bind(this)
    };
    // 形成环引用，保证`.promise.promise`能运行
    this.promise.promise = this.promise;


    /**
      * 与当前对象关联的`Resolver`对象
      * 
      * 一个`Resolver`对象是对`Deferred`对象的**只写**状态的表达，
      * `Resolver`对象拥有所有改变状态的方法，包括：
      * 
      * - `resolve`
      * - `reject
      *
      * @type {Resolver}
      * @public
      */
    this.resolver = {
        resolve: this.resolve.bind(this),
        reject: this.reject.bind(this)
    };
}

require('./Observable').enable(Deferred);

/**
  * 判断一个对象是否是一个`Promise`对象
  * 
  * 该方法采用灵活的判断方式，并非要求`value`为`Deferred`的实例
  *
  * @param {*} value 需要判断的对象
  * @return {boolean} 如果`value`是`Promise`对象，则返回true
  */
Deferred.isPromise = function (value) {
    return value && typeof value.then === 'function';
};

/**
  * 是否启用同步模式。
  * 
  * 在同步模式下，`Deferred`对象并不符合Promise/A规范，
  * 当对象进入或处于**resolved**或**rejected**状态时，
  * 添加的回调函数会**立即**、**同步**地被执行。
  *
  * @type {boolean}
  * @public
  */
Deferred.prototype.syncModeEnabled = false;

/**
  * 将当前对象状态设置为**resolved**，并执行所有成功回调函数
  *
  * @param {...*} args 执行回调时的参数
  * @public
  */
Deferred.prototype.resolve = function () {
    if (this.state !== 'pending') {
        return;
    }

    this.state = 'resolved';
    this._args = [].slice.call(arguments);

    Deferred.fire(
        'resolve',
        {
            deferred: this,
            args: this._args,
            reason: this._args[0]
        }
    );

    tryFlush(this);
};

/**
  * 将当前对象状态设置为**rejected**，并执行所有失败回调函数
  *
  * @param {...*} args 执行回调时的参数
  * @public
  */
Deferred.prototype.reject = function () {
    if (this.state !== 'pending') {
        return;
    }

    this.state = 'rejected';
    this._args = [].slice.call(arguments);

    Deferred.fire(
        'reject',
        {
            deferred: this,
            args: this._args,
            reason: this._args[0]
        }
    );

    tryFlush(this);
};

/**
  * 添加一个成功回调函数
  * 
  * 本方法相当于`.then(callback, null)，具体参考`then`方法的说明al
  *
  * @param {function} callback 需要添加的回调函数
  * @return {Promise} 新的`Promise`对象
  * @public
  */
Deferred.prototype.done = function (callback) {
    return this.then(callback);
};

/**
  * 添加一个失败回调函数
  * 
  * 本方法相当于`.then(null, callback)，具体参考`then`方法的说明
  *
  * @param {function} callback 需要添加的回调函数
  * @return {Promise} 新的`Promise`对象
  * @public
  */
Deferred.prototype.fail = function (callback) {
    return this.then(null, callback);
};


/**
  * 添加一个无论成功还是失败均执行的回调函数
  * 
  * 本方法相当于`.then(callback, callback)，具体参考`then`方法的说明
  *
  * @param {function} callback 需要添加的回调函数
  * @return {Promise} 新的`Promise`对象
  * @public
  */
Deferred.prototype.ensure = function (callback) {
    return this.then(callback, callback);
};

/**
  * 添加成功回调函数及可选的失败回调函数
  * 
  * 该函数会返回一个新的`Promise`对象，新`Promise`对象将有以下行为：
  * 
  * - 当原有`Deferred`对象进入**resolved**状态时，执行`done`回调函数，
  *   并根据函数的返回值进行逻辑
  * - 当原有`Deferred`对象进入**rejected**状态时，执行`fail`回调函数，
  *   并根据函数的返回值进行逻辑
  * 
  * 其中**根据函数的返回值进行逻辑**具体如下：
  * 
  * - 当函数返回非`null`或`undefined`时，使用返回值进入**resolved**状态
  * - 当函数抛出异常时，使用异常对象进入**rejected**状态
  * 
  * 另如果当前`Deferred`对象不处在**pending**状态，则：
  * 
  * - 如果处在**resolved**状态，则成功回调函数会被立即异步执行
  * - 如果处在**rejected**状态，则失败回调函数会被立即异步执行
  *
  * @param {?function} done 成功时执行的回调函数
  * @param {function=} fail 失败时执行的回调函数，可选参数
  * @return {Promise} 新的`Promise`对象
  * @public
  */
Deferred.prototype.then = function (done, fail) {
    var deferred = new Deferred();
    deferred.syncModeEnabled = this.syncModeEnabled;

    this._doneCallbacks.push(pipe(this, deferred, done, 'resolve'));
    this._failCallbacks.push(pipe(this, deferred, fail, 'reject'));

    tryFlush(this);

    return deferred.promise;
};

// 暂不支持`progress`，
// 社区对`progress`处理函数的返回值和异常的传递还在讨论中

/**
  * 生成一个新的`Promise`对象，当所有给定的`Promise`对象完成后触发
  * 
  * 其触发逻辑如下：
  * 
  * - 如果所有给定的`Promise`对象均进入**resolved**状态，则该`Promise`
  *   对象进入**resolved**状态
  * - 如果有至少一个`Promise`对象进入**rejected**状态，则该`Promise`
  *   对象进入**rejected**状态
  * 
  * 当新的`Promise`对象触发时，将按照传入的`Promise`对象的顺序，
  * 依次提供参数，且根据原`Promise`对象的回调参数，有以下情况：
  * 
  * - 如果给定参数只有一个，使用这一个参数
  * - 如果给定多个参数，则提供一个数组包含这些参数
  * 
  * 本方法对参数的方法与`Array.prototyp.concat`相同，
  * 如果任意一个参数是数组则会展开
  *
  * @param {...Promise | ...Array.<Promise>} 需要组合的`Promise`对象
  * @return {Promise} 一个新的`Promise`对象
  */
Deferred.all = function () {
    // 典型的异步并发归并问题，使用计数器来解决
    var workingUnits = [].concat.apply([], arguments);
    var workingCount = workingUnits.length;

    // 如果没有任何任务，直接给处理完的
    if (!workingCount) {
        return Deferred.resolved();
    }

    var actionType = 'resolve';
    var result = [];

    var jointDeferred = new Deferred();

    function resolveOne(whichToFill) {
        workingCount--;

        assert.ok(
            workingCount >= 0, 'workingCount should be positive'
        );

        var unitResult = [].slice.call(arguments, 1);
        // 如果给定的结果只有一个，不要再组装成数组
        if (unitResult.length <= 1) {
            unitResult = unitResult[0];
        }
        result[whichToFill] = unitResult;

        if (workingCount === 0) {
            jointDeferred[actionType].apply(jointDeferred, result);
        }
    }

    function rejectOne() {
        actionType = 'reject';
        resolveOne.apply(this, arguments);
    }

    for (var i = 0; i < workingUnits.length; i++) {
        var unit = workingUnits[i];
        unit.then(
            resolveOne.bind(unit, i),
            rejectOne.bind(unit, i)
        );
    }

    return jointDeferred.promise;
};

/**
  * 返回一个已经处于**resolved**状态的`Promise`对象
  *
  * @param {...*} 用于调用`resolve`方法的参数
  * @return {Promise} 一个已经处于**resolved**状态的`Promise`对象
  */
Deferred.resolved = function () {
    var deferred = new Deferred();
    deferred.resolve.apply(deferred, arguments);
    return deferred.promise;
};

/**
  * 返回一个已经处于**rejected**状态的`Promise`对象
  *
  * @param {...*} 用于调用`reject`方法的参数
  * @return {Promise} 一个已经处于**rejected**状态的`Promise`对象
  */
Deferred.rejected = function () {
    var deferred = new Deferred();
    deferred.reject.apply(deferred, arguments);
    return deferred.promise;
};

/**
  * 返回一个`Promise`对象，当指定的模块被AMD加载器加载后，进入**resolved**状态
  *
  * @param {...string} 需要加载的模块列表
  * @return {Promise} 一个`Promise`对象
  */
Deferred.require = function () {
    var modules = [].slice.call(arguments);
    var deferred = new Deferred();

    require(modules, deferred.resolver.resolve);

    deferred.promise.abort = deferred.resolver.reject;

    return deferred.promise;
};

module.exports = exports = Deferred;
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/csshint/node_modules/csshint/lib/checker.js. Coverage (Term): 14% Coverage (LOC): 12%
*- File /root/Targets/csshint/node_modules/chalk/index.js. Coverage (Term): 55% Coverage (LOC): 64%
*- File /root/Targets/csshint/node_modules/escape-string-regexp/index.js. Coverage (Term): 85% Coverage (LOC): 90%
*- File /root/Targets/csshint/node_modules/ansi-styles/index.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/csshint/node_modules/strip-ansi/index.js. Coverage (Term): 57% Coverage (LOC): 86%
*- File /root/Targets/csshint/node_modules/ansi-regex/index.js. Coverage (Term): 93% Coverage (LOC): 100%
*- File /root/Targets/csshint/node_modules/has-ansi/index.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/csshint/node_modules/supports-color/index.js. Coverage (Term): 63% Coverage (LOC): 56%
*- File /root/Targets/csshint/node_modules/postcss/lib/postcss.js. Coverage (Term): 50% Coverage (LOC): 62%
*- File /root/Targets/csshint/node_modules/postcss/lib/declaration.js. Coverage (Term): 57% Coverage (LOC): 74%
*- File /root/Targets/csshint/node_modules/postcss/lib/warn-once.js. Coverage (Term): 52% Coverage (LOC): 62%
*- File /root/Targets/csshint/node_modules/postcss/lib/node.js. Coverage (Term): 21% Coverage (LOC): 35%
*- File /root/Targets/csshint/node_modules/postcss/lib/css-syntax-error.js. Coverage (Term): 33% Coverage (LOC): 40%
*- File /root/Targets/csshint/node_modules/postcss/node_modules/supports-color/index.js. Coverage (Term): 49% Coverage (LOC): 40%
*- File /root/Targets/csshint/node_modules/has-flag/index.js. Coverage (Term): 83% Coverage (LOC): 100%
*- File /root/Targets/csshint/node_modules/postcss/lib/terminal-highlight.js. Coverage (Term): 46% Coverage (LOC): 58%
*- File /root/Targets/csshint/node_modules/postcss/lib/tokenize.js. Coverage (Term): 10% Coverage (LOC): 10%
*- File /root/Targets/csshint/node_modules/postcss/lib/input.js. Coverage (Term): 35% Coverage (LOC): 41%
*- File /root/Targets/csshint/node_modules/postcss/lib/previous-map.js. Coverage (Term): 22% Coverage (LOC): 33%
*- File /root/Targets/csshint/node_modules/js-base64/base64.js. Coverage (Term): 24% Coverage (LOC): 46%
*- File /root/Targets/csshint/node_modules/source-map/source-map.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/csshint/node_modules/source-map/lib/source-map-generator.js. Coverage (Term): 8% Coverage (LOC): 11%
*- File /root/Targets/csshint/node_modules/source-map/lib/base64-vlq.js. Coverage (Term): 20% Coverage (LOC): 30%
*- File /root/Targets/csshint/node_modules/source-map/lib/base64.js. Coverage (Term): 17% Coverage (LOC): 19%
*- File /root/Targets/csshint/node_modules/source-map/lib/util.js. Coverage (Term): 11% Coverage (LOC): 14%
*- File /root/Targets/csshint/node_modules/source-map/lib/array-set.js. Coverage (Term): 20% Coverage (LOC): 34%
*- File /root/Targets/csshint/node_modules/source-map/lib/mapping-list.js. Coverage (Term): 23% Coverage (LOC): 34%
*- File /root/Targets/csshint/node_modules/source-map/lib/source-map-consumer.js. Coverage (Term): 9% Coverage (LOC): 15%
*- File /root/Targets/csshint/node_modules/source-map/lib/binary-search.js. Coverage (Term): 12% Coverage (LOC): 18%
*- File /root/Targets/csshint/node_modules/source-map/lib/quick-sort.js. Coverage (Term): 12% Coverage (LOC): 25%
*- File /root/Targets/csshint/node_modules/source-map/lib/source-node.js. Coverage (Term): 8% Coverage (LOC): 12%
*- File /root/Targets/csshint/node_modules/postcss/lib/stringifier.js. Coverage (Term): 11% Coverage (LOC): 21%
*- File /root/Targets/csshint/node_modules/postcss/lib/stringify.js. Coverage (Term): 74% Coverage (LOC): 85%
*- File /root/Targets/csshint/node_modules/postcss/lib/processor.js. Coverage (Term): 25% Coverage (LOC): 39%
*- File /root/Targets/csshint/node_modules/postcss/lib/lazy-result.js. Coverage (Term): 24% Coverage (LOC): 36%
*- File /root/Targets/csshint/node_modules/postcss/lib/map-generator.js. Coverage (Term): 13% Coverage (LOC): 18%
*- File /root/Targets/csshint/node_modules/postcss/lib/result.js. Coverage (Term): 51% Coverage (LOC): 63%
*- File /root/Targets/csshint/node_modules/postcss/lib/warning.js. Coverage (Term): 26% Coverage (LOC): 32%
*- File /root/Targets/csshint/node_modules/postcss/lib/parse.js. Coverage (Term): 39% Coverage (LOC): 41%
*- File /root/Targets/csshint/node_modules/postcss/lib/parser.js. Coverage (Term): 11% Coverage (LOC): 17%
*- File /root/Targets/csshint/node_modules/postcss/lib/comment.js. Coverage (Term): 57% Coverage (LOC): 74%
*- File /root/Targets/csshint/node_modules/postcss/lib/at-rule.js. Coverage (Term): 45% Coverage (LOC): 65%
*- File /root/Targets/csshint/node_modules/postcss/lib/container.js. Coverage (Term): 15% Coverage (LOC): 24%
*- File /root/Targets/csshint/node_modules/postcss/lib/root.js. Coverage (Term): 31% Coverage (LOC): 44%
*- File /root/Targets/csshint/node_modules/postcss/lib/rule.js. Coverage (Term): 54% Coverage (LOC): 73%
*- File /root/Targets/csshint/node_modules/postcss/lib/list.js. Coverage (Term): 14% Coverage (LOC): 18%
*- File /root/Targets/csshint/node_modules/postcss/lib/vendor.js. Coverage (Term): 48% Coverage (LOC): 60%
*- File /root/Targets/csshint/node_modules/object-assign/index.js. Coverage (Term): 54% Coverage (LOC): 53%
*- File /root/Targets/csshint/node_modules/csshint/lib/util.js. Coverage (Term): 9% Coverage (LOC): 13%
*- File /root/Targets/csshint/node_modules/edp-core/index.js. Coverage (Term): 77% Coverage (LOC): 90%
*- File /root/Targets/csshint/node_modules/edp-core/lib/amd.js. Coverage (Term): 26% Coverage (LOC): 60%
*- File /root/Targets/csshint/node_modules/edp-core/lib/esl.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/csshint/node_modules/edp-core/lib/fs.js. Coverage (Term): 16% Coverage (LOC): 19%
*- File /root/Targets/csshint/node_modules/edp-core/lib/glob.js. Coverage (Term): 8% Coverage (LOC): 12%
*- File /root/Targets/csshint/node_modules/edp-core/lib/path.js. Coverage (Term): 26% Coverage (LOC): 45%
*- File /root/Targets/csshint/node_modules/minimatch/minimatch.js. Coverage (Term): 7% Coverage (LOC): 10%
*- File /root/Targets/csshint/node_modules/brace-expansion/index.js. Coverage (Term): 12% Coverage (LOC): 17%
*- File /root/Targets/csshint/node_modules/concat-map/index.js. Coverage (Term): 24% Coverage (LOC): 40%
*- File /root/Targets/csshint/node_modules/balanced-match/index.js. Coverage (Term): 11% Coverage (LOC): 15%
*- File /root/Targets/csshint/node_modules/edp-core/lib/log.js. Coverage (Term): 28% Coverage (LOC): 49%
*- File /root/Targets/csshint/node_modules/edp-core/node_modules/chalk/index.js. Coverage (Term): 59% Coverage (LOC): 69%
*- File /root/Targets/csshint/node_modules/edp-core/node_modules/strip-ansi/index.js. Coverage (Term): 57% Coverage (LOC): 86%
*- File /root/Targets/csshint/node_modules/edp-core/node_modules/ansi-regex/index.js. Coverage (Term): 93% Coverage (LOC): 100%
*- File /root/Targets/csshint/node_modules/edp-core/node_modules/has-ansi/index.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/csshint/node_modules/edp-core/node_modules/supports-color/index.js. Coverage (Term): 66% Coverage (LOC): 48%
*- File /root/Targets/csshint/node_modules/edp-core/lib/pkg.js. Coverage (Term): 16% Coverage (LOC): 19%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
