/root/Targets/made-in
└─┬ made-in@1.0.10 
  ├─┬ bindy@1.0.10 
  │ ├── deffy@2.2.2 
  │ └── sliced@1.0.1 
  ├─┬ gh.js@3.0.11 
  │ ├─┬ jsonrequest@4.2.3 
  │ │ ├── noop6@1.0.7 
  │ │ └─┬ tinyreq@3.2.6 
  │ │   ├── assured@1.0.10 
  │ │   └─┬ follow-redirects@0.2.0 
  │ │     ├─┬ debug@2.6.9 
  │ │     │ └── ms@2.0.0 
  │ │     └── stream-consume@0.1.0 
  │ └── last-char@1.3.8 
  ├─┬ same-time@2.3.3 
  │ └── deffy@2.0.0 
  └─┬ ul@5.2.13 
    └─┬ typpy@2.3.9 
      └── function.name@1.0.9 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/made-in/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 23% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0724 took 4.41s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program 'use strict';
var url = require('url');
var assert = require('assert');
var debug = require('debug')('follow-redirects');
var consume = require('stream-consume');

module.exports = function (_nativeProtocols) {
	var nativeProtocols = {};

	var publicApi = {
		maxRedirects: 5
	};

	for (var p in _nativeProtocols) {
		/* istanbul ignore else */
		if (_nativeProtocols.hasOwnProperty(p)) {
			// http://www.ietf.org/rfc/rfc2396.txt - Section 3.1
			assert(/^[A-Z][A-Z\+\-\.]*$/i.test(p), JSON.stringify(p) + ' is not a valid scheme name');
			generateWrapper(p, _nativeProtocols[p]);
		}
	}

	return publicApi;

	function execute(options, callback) {
		var fetchedUrls = [];
		var clientRequest = cb();

		// return a proxy to the request with separate event handling
		var requestProxy = Object.create(clientRequest);
		requestProxy._events = {};
		requestProxy._eventsCount = 0;
		if (callback) {
			requestProxy.on('response', callback);
		}
		return requestProxy;

		function cb(res) {
			// skip the redirection logic on the first call.
			if (res) {
				var fetchedUrl = url.format(options);
				fetchedUrls.unshift(fetchedUrl);

				if (!isRedirect(res)) {
					res.fetchedUrls = fetchedUrls;
					requestProxy.emit('response', res);
					return;
				}

				// we are going to follow the redirect, but in node 0.10 we must first attach a data listener
				// to consume the stream and send the 'end' event
				consume(res);

				// need to use url.resolve() in case location is a relative URL
				var redirectUrl = url.resolve(fetchedUrl, res.headers.location);
				debug('redirecting to', redirectUrl);

				// clean all the properties related to the old url away, and copy from the redirect url
				wipeUrlProps(options);
				extend(options, url.parse(redirectUrl));
			}

			if (fetchedUrls.length > options.maxRedirects) {
				var err = new Error('Max redirects exceeded.');
				return forwardError(err);
			}

			options.nativeProtocol = nativeProtocols[options.protocol];
			options.defaultRequest = defaultMakeRequest;

			var req = (options.makeRequest || defaultMakeRequest)(options, cb, res);
			req.on('error', forwardError);
			return req;
		}

		function defaultMakeRequest(options, cb, res) {
			if (res && res.statusCode !== 307) {
				// This is a redirect, so use only GET methods, except for status 307,
				// which must honor the previous request method.
				options.method = 'GET';
			}

			var req = options.nativeProtocol.request(options, cb);

			if (res) {
				// We leave the user to call `end` on the first request
				req.end();
			}

			return req;
		}

		// bubble errors that occur on the redirect back up to the initiating client request
		// object, otherwise they wind up killing the process.
		function forwardError(err) {
			requestProxy.emit('error', err);
		}
	}

	function generateWrapper(scheme, nativeProtocol) {
		var wrappedProtocol = scheme + ':';
		var H = function () {};
		H.prototype = nativeProtocols[wrappedProtocol] = nativeProtocol;
		H = new H();
		publicApi[scheme] = H;

		H.request = function (options, callback) {
			return execute(parseOptions(options, wrappedProtocol), callback);
		};

		// see https://github.com/joyent/node/blob/master/lib/http.js#L1623
		H.get = function (options, callback) {
			var req = execute(parseOptions(options, wrappedProtocol), callback);
			req.end();
			return req;
		};
	}

	// returns a safe copy of options (or a parsed url object if options was a string).
	// validates that the supplied callback is a function
	function parseOptions(options, wrappedProtocol) {
		if (typeof options === 'string') {
			options = url.parse(options);
			options.maxRedirects = publicApi.maxRedirects;
		} else {
			options = extend({
				maxRedirects: publicApi.maxRedirects,
				protocol: wrappedProtocol
			}, options);
		}
		assert.equal(options.protocol, wrappedProtocol, 'protocol mismatch');

		debug('options', options);
		return options;
	}
};

// copies source's own properties onto destination and returns destination
function extend(destination, source) {
	for (var i in source) {
		if (source.hasOwnProperty(i)) {
			destination[i] = source[i];
		}
	}
	return destination;
}

// to redirect the result must have
// a statusCode between 300-399
// and a `Location` header
function isRedirect(res) {
	return (res.statusCode >= 300 && res.statusCode <= 399 &&
	'location' in res.headers);
}

var urlProps = ['protocol', 'slashes', 'auth', 'host', 'port', 'hostname',
	'hash', 'search', 'query', 'pathname', 'path', 'href'];

// nulls all url related properties on the object.
// required on node <10
function wipeUrlProps(options) {
	for (var i = 0, l = urlProps.length; i < l; ++i) {
		options[urlProps[i]] = null;
	}
}
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/made-in/node_modules/made-in/lib/index.js. Coverage (Term): 10% Coverage (LOC): 11%
*- File /root/Targets/made-in/node_modules/gh.js/lib/index.js. Coverage (Term): 7% Coverage (LOC): 7%
*- File /root/Targets/made-in/node_modules/ul/lib/index.js. Coverage (Term): 15% Coverage (LOC): 18%
*- File /root/Targets/made-in/node_modules/typpy/lib/index.js. Coverage (Term): 23% Coverage (LOC): 36%
*- File /root/Targets/made-in/node_modules/function.name/lib/index.js. Coverage (Term): 46% Coverage (LOC): 58%
*- File /root/Targets/made-in/node_modules/noop6/lib/index.js. Coverage (Term): 79% Coverage (LOC): 100%
*- File /root/Targets/made-in/node_modules/deffy/lib/index.js. Coverage (Term): 31% Coverage (LOC): 31%
*- File /root/Targets/made-in/node_modules/jsonrequest/lib/index.js. Coverage (Term): 16% Coverage (LOC): 21%
*- File /root/Targets/made-in/node_modules/tinyreq/lib/index.js. Coverage (Term): 6% Coverage (LOC): 8%
*- File /root/Targets/made-in/node_modules/follow-redirects/index.js. Coverage (Term): 57% Coverage (LOC): 67%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
