/root/Targets/query
└─┬ query@0.2.0 
  └─┬ jsdom@11.2.0 
    ├── abab@1.0.4 
    ├── acorn@4.0.13 
    ├── acorn-globals@3.1.0 
    ├── array-equal@1.0.0 
    ├── content-type-parser@1.0.1 
    ├── cssom@0.3.2 
    ├── cssstyle@0.2.37 
    ├─┬ escodegen@1.9.0 
    │ ├── esprima@3.1.3 
    │ ├── estraverse@4.2.0 
    │ ├── esutils@2.0.2 
    │ ├─┬ optionator@0.8.2 
    │ │ ├── deep-is@0.1.3 
    │ │ ├── fast-levenshtein@2.0.6 
    │ │ ├── levn@0.3.0 
    │ │ ├── prelude-ls@1.1.2 
    │ │ ├── type-check@0.3.2 
    │ │ └── wordwrap@1.0.0 
    │ └── source-map@0.5.7 
    ├── html-encoding-sniffer@1.0.1 
    ├── nwmatcher@1.4.2 
    ├─┬ parse5@3.0.2 
    │ └── @types/node@6.0.88 
    ├── pn@1.0.0 
    ├─┬ request@2.83.0 
    │ ├── aws-sign2@0.7.0 
    │ ├── aws4@1.6.0 
    │ ├── caseless@0.12.0 
    │ ├─┬ combined-stream@1.0.5 
    │ │ └── delayed-stream@1.0.0 
    │ ├── extend@3.0.1 
    │ ├── forever-agent@0.6.1 
    │ ├─┬ form-data@2.3.1 
    │ │ └── asynckit@0.4.0 
    │ ├─┬ har-validator@5.0.3 
    │ │ ├─┬ ajv@5.2.3 
    │ │ │ ├── co@4.6.0 
    │ │ │ ├── fast-deep-equal@1.0.0 
    │ │ │ ├── json-schema-traverse@0.3.1 
    │ │ │ └─┬ json-stable-stringify@1.0.1 
    │ │ │   └── jsonify@0.0.0 
    │ │ └── har-schema@2.0.0 
    │ ├─┬ hawk@6.0.2 
    │ │ ├── boom@4.3.1 
    │ │ ├─┬ cryptiles@3.1.2 
    │ │ │ └── boom@5.2.0 
    │ │ ├── hoek@4.2.0 
    │ │ └── sntp@2.0.2 
    │ ├─┬ http-signature@1.2.0 
    │ │ ├── assert-plus@1.0.0 
    │ │ ├─┬ jsprim@1.4.1 
    │ │ │ ├── extsprintf@1.3.0 
    │ │ │ ├── json-schema@0.2.3 
    │ │ │ └─┬ verror@1.10.0 
    │ │ │   └── core-util-is@1.0.2 
    │ │ └─┬ sshpk@1.13.1 
    │ │   ├── asn1@0.2.3 
    │ │   ├── bcrypt-pbkdf@1.0.1 
    │ │   ├── dashdash@1.14.1 
    │ │   ├── ecc-jsbn@0.1.1 
    │ │   ├── getpass@0.1.7 
    │ │   ├── jsbn@0.1.1 
    │ │   └── tweetnacl@0.14.5 
    │ ├── is-typedarray@1.0.0 
    │ ├── isstream@0.1.2 
    │ ├── json-stringify-safe@5.0.1 
    │ ├─┬ mime-types@2.1.17 
    │ │ └── mime-db@1.30.0 
    │ ├── oauth-sign@0.8.2 
    │ ├── performance-now@2.1.0 
    │ ├── qs@6.5.1 
    │ ├── safe-buffer@5.1.1 
    │ ├── stringstream@0.0.5 
    │ ├── tunnel-agent@0.6.0 
    │ └── uuid@3.1.0 
    ├─┬ request-promise-native@1.0.5 
    │ ├─┬ request-promise-core@1.1.1 
    │ │ └── lodash@4.17.4 
    │ └── stealthy-require@1.1.1 
    ├── sax@1.2.4 
    ├── symbol-tree@3.2.2 
    ├─┬ tough-cookie@2.3.3 
    │ └── punycode@1.4.1 
    ├── webidl-conversions@4.0.2 
    ├─┬ whatwg-encoding@1.0.1 
    │ └── iconv-lite@0.4.13 
    ├─┬ whatwg-url@6.3.0 
    │ ├── lodash.sortby@4.7.0 
    │ └─┬ tr46@1.0.1 
    │   └── punycode@2.1.0 
    └── xml-name-validator@2.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/query/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0678 took 5.6691s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

/**
 * Module dependencies.
 */

var jsdom = require('jsdom')
  , jquery = require('./jquery');

/**
 * jsdom options.
 */

var jsdomOptions = {
  features: {
      FetchExternalResources: false
    , ProcessExternalResources: false
  }
};

/**
 * Buffer stdin.
 */

var stdin = process.openStdin()
  , buf = '';

stdin.setEncoding('utf8');
stdin
  .on('data', function(chunk){ buf += chunk; })
  .on('end', parseArguments);

/**
 * Supported "commands".
 */

var commands = {
    length:   { type: 'property' }
  , val:      { type: 'method', arity: 0 }
  , text:     { type: 'method', arity: 0 }
  , width:    { type: 'method', arity: 0 }
  , height:   { type: 'method', arity: 0 }
  , first:    { type: 'method traverse', arity: 0 }
  , last:     { type: 'method traverse', arity: 0 }
  , parent:   { type: 'method traverse', arity: 0 }
  , next:     { type: 'method traverse', arity: 0 }
  , prev:     { type: 'method traverse', arity: 0 }
  , eq:       { type: 'method traverse', arity: 1 }
  , is:       { type: 'method bool', arity: 1 }
  , attr:     { type: 'method bool', arity: 1 }
  , hasClass: { type: 'method bool', arity: 1 }
};

/**
 * Command aliases.
 */

var aliases = {
    len: 'length'
  , count: 'length'
  , get: 'eq'
  , 'has-class': 'hasClass'
};

/**
 * Parse argv.
 */

function parseArguments() {
  var args = process.argv.slice(2)
    , calls = []
    , alias
    , arg
    , cmd;

  function required() {
    if (args.length) return args.shift();
    console.error(arg + ' requires ' + cmd.arity + ' argument(s)');
    process.exit(1);
  }

  while (args.length) {
    arg = args.shift();
    alias = aliases[arg];
    // command
    if (cmd = commands[arg] || commands[alias]) {
      cmd = clone(cmd);
      cmd.name = alias || arg;
      cmd.args = [];
      // arguments required
      if (cmd.arity) {
        for (var i = 0; i < cmd.arity; ++i) {
          cmd.args.push(required());
        }
      }
      calls.push(cmd);
    // selector
    } else {
      calls.push({ type: 'selector', val: arg });
    }
  }

  parse(buf, calls);
}

/**
 * Parse and apply jQuery.
 */

function parse(html, calls) {
  var normalized = wrap(html)
    , wrapped = html != normalized
    , window = jsdom.jsdom(normalized, null, jsdomOptions).createWindow()
    , $ = jquery.create(window)
    , ctx = $(wrapped ? 'body' : '*')
    , call;

  while (call = calls.shift()) {
    switch (call.type) {
      case 'selector':
        ctx = ctx.find(call.val);
        break;
      case 'property':
        console.log(ctx[call.name]);
        process.exit();
      case 'method':
        console.log(ctx[call.name].apply(ctx, call.args));
        process.exit();
      case 'method traverse':
        ctx = ctx[call.name].apply(ctx, call.args);
        break;
      case 'method bool':
        var ret = ctx[call.name].apply(ctx, call.args);
        console.log(ret);
        process.exit(ret ? 0 : 1);
    }
  }

  ctx.each(function(i, el){
    console.log($(el).html());
  });
}

/**
 * Clone `obj`.
 */

function clone(obj) {
  var clone = {};
  for (var key in obj) clone[key] = obj[key];
  return clone;
}

/**
 * Wrap to prevent breakage for frags.
 */

function wrap(html) {
  if (!~html.indexOf('<body')) html = '<body>' + html + '</body>';
  if (!~html.indexOf('<html')) html = '<html>' + html + '</html>';
  return html;
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
