/root/Targets/meteor-rider
└─┬ meteor-rider@0.0.4 
  ├─┬ fs-extra@0.9.1 
  │ ├── jsonfile@1.1.1 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ ├── ncp@0.5.1 
  │ └─┬ rimraf@2.6.2 
  │   └─┬ glob@7.1.2 
  │     ├── fs.realpath@1.0.0 
  │     ├─┬ inflight@1.0.6 
  │     │ └── wrappy@1.0.2 
  │     ├── inherits@2.0.3 
  │     ├─┬ minimatch@3.0.4 
  │     │ └─┬ brace-expansion@1.1.8 
  │     │   ├── balanced-match@1.0.0 
  │     │   └── concat-map@0.0.1 
  │     ├── once@1.4.0 
  │     └── path-is-absolute@1.0.1 
  └─┬ xml2js@0.4.19 
    ├── sax@1.2.4 
    └── xmlbuilder@9.0.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/meteor-rider/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0626 took 4.9511s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var fs           = require('fs-extra'),
    readline     = require('readline'),
    cp           = require('child_process'),
    parseString  = require('xml2js').parseString;
    Utils        = require('./bin/utils');

var sourceFile   = __dirname + '/assets/index.html',
    targetFile   = process.cwd() + '/www/index.html',
    targetBackup = process.cwd() + '/www/index_old.html',
    jsDirectory  = __dirname + '/assets/js',
    jsDest       = process.cwd() + '/www/js',
    cordovaXML   = process.cwd() + '/config.xml';

var meteorUrl = '###METEOR_URL###',
    cordovaVersion = '###CORDOVA_VERSION###',
    cordovaAppVersion = '###CORDOVA_APP_VERSION###';

function backupIndex () {
  fs.readFile(targetFile, function (err, data) {
    if (err) return next(null);
  });
  fs.move(targetFile, targetBackup, function (err) {
    if (err) throw err;
    console.log('Backing up www/index.html into www/index_old.html ...\n');
    return next(null);
  });
}

function copyMeteorIndex () {
  fs.copy(sourceFile, targetFile, function (err) {
    if (err) throw err;
    console.log('Creating new www/index.html file ...\n');
    return next(null);
  });
}

function copyJsFiles () {
  fs.copy(jsDirectory, jsDest, function (err) {
    if (err) throw err;
    console.log('Creating needed JS files in ww/js/ ...\n');
    return next(null);
  });
}

function replaceMeteorUrl () {
  var ask = readline.createInterface(process.stdin, process.stdout);
  var question = 'What is the production URL of the meteor app?\n';
  question += '(example: http://todos.meteor.com) > ';
  ask.question(question, function (url) {
    Utils.strReplace(targetFile, meteorUrl, url, function (err) {
      if (err) throw err;
      ask.close();
      console.log('\n');
      return next(null);
    });
  });
}

function replaceCordovaVersion () {
  cp.exec('cordova -v', function (err, stdout, stderr) {
    if (err) throw err;
    var version = stdout.substr(0, stdout.indexOf('-'));
    version = version.substr(0, version.lastIndexOf('.'));
    Utils.strReplace(targetFile, cordovaVersion, version, function (err) {
      if (err) throw err;
      console.log('Successfully set Cordova Version (' + version + ') in Meteor Rider ...\n');
      return next(null);
    });
  });
}

function checkForConfigXml () {
  fs.readFile(cordovaXML, function (err, data) {
    if (err) throw err;
    return next(null, data);
  });
}

function replaceAppVersion (data) {
  parseString(data, function (err, result) {
    if (err) throw err;
    var appVersion = result.widget.$.version;
    if (!appVersion) return next(new Error('App version is missing from config.xml'));
    Utils.strReplace(targetFile, cordovaAppVersion, appVersion, function (err) {
      if (err) throw err;
      console.log('Successfully set Cordova App Version (' + appVersion + ') in Meteor Rider ...\n');
      return next(null);
    });
  });
}

function success () {
  console.log('MeteorRider has been successfully installed ...\n');
}

var tasks = [
  backupIndex,
  copyMeteorIndex,
  copyJsFiles,
  replaceMeteorUrl,
  replaceCordovaVersion,
  checkForConfigXml,
  replaceAppVersion,
  success
];

function next (err, result) {
  if (err) throw err;
  var currentTask = tasks.shift();
  if (currentTask) currentTask(result);
}

next();
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
