
> uws@0.14.5 install /root/Targets/coach/node_modules/uws
> node-gyp rebuild > build_log.txt 2>&1 || exit 0

/root/Targets/coach
└─┬ coach@0.3.0 
  ├─┬ async@2.5.0 
  │ └── lodash@4.17.4 
  ├── commander@2.11.0 
  ├─┬ connect@3.6.5 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├─┬ finalhandler@1.0.6 
  │ │ └── unpipe@1.0.0 
  │ ├── parseurl@1.3.2 
  │ └── utils-merge@1.0.1 
  ├─┬ express@4.15.5 
  │ ├─┬ accepts@1.3.4 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ └── negotiator@0.6.1 
  │ ├── array-flatten@1.1.1 
  │ ├── content-disposition@0.5.2 
  │ ├── content-type@1.0.4 
  │ ├── cookie@0.3.1 
  │ ├── cookie-signature@1.0.6 
  │ ├── depd@1.1.1 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├── fresh@0.5.2 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@1.1.5 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.4.0 
  │ ├── qs@6.5.0 
  │ ├── range-parser@1.2.0 
  │ ├─┬ send@0.15.6 
  │ │ ├── destroy@1.0.4 
  │ │ ├─┬ http-errors@1.6.2 
  │ │ │ └── inherits@2.0.3 
  │ │ └── mime@1.3.4 
  │ ├── serve-static@1.12.6 
  │ ├── setprototypeof@1.0.3 
  │ ├── statuses@1.3.1 
  │ ├─┬ type-is@1.6.15 
  │ │ └── media-typer@0.3.0 
  │ ├── utils-merge@1.0.0 
  │ └── vary@1.1.2 
  ├── lingo@0.0.5 
  ├── mime@2.0.3 
  ├─┬ pathfinder@0.3.0 
  │ ├─┬ detective@4.5.0 
  │ │ ├── acorn@4.0.13 
  │ │ └── defined@1.0.0 
  │ ├── findit@2.0.0 
  │ ├── mint@0.3.5 
  │ └─┬ mkdirp@0.5.1 
  │   └── minimist@0.0.8 
  ├── qs@6.5.1 
  ├── shift@0.1.8 
  ├─┬ socket.io@2.0.3 
  │ ├─┬ engine.io@3.1.2 
  │ │ ├── accepts@1.3.3 
  │ │ ├── base64id@1.0.0 
  │ │ ├─┬ engine.io-parser@2.1.1 
  │ │ │ ├── after@0.8.2 
  │ │ │ ├── arraybuffer.slice@0.0.6 
  │ │ │ └── blob@0.0.4 
  │ │ ├── uws@0.14.5 
  │ │ └─┬ ws@2.3.1 
  │ │   ├── safe-buffer@5.0.1 
  │ │   └── ultron@1.1.0 
  │ ├── object-assign@4.1.1 
  │ ├── socket.io-adapter@1.1.1 
  │ ├─┬ socket.io-client@2.0.3 
  │ │ ├── backo2@1.0.2 
  │ │ ├── base64-arraybuffer@0.1.5 
  │ │ ├── component-bind@1.0.0 
  │ │ ├── component-emitter@1.2.1 
  │ │ ├─┬ engine.io-client@3.1.2 
  │ │ │ ├── component-inherit@0.0.3 
  │ │ │ ├── xmlhttprequest-ssl@1.5.3 
  │ │ │ └── yeast@0.1.2 
  │ │ ├── has-cors@1.1.0 
  │ │ ├── indexof@0.0.1 
  │ │ ├── object-component@0.0.3 
  │ │ ├─┬ parseqs@0.0.5 
  │ │ │ └─┬ better-assert@1.0.2 
  │ │ │   └── callsite@1.0.0 
  │ │ ├── parseuri@0.0.5 
  │ │ └── to-array@0.1.4 
  │ └─┬ socket.io-parser@3.1.2 
  │   ├── has-binary2@1.0.2 
  │   └── isarray@2.0.1 
  ├── underscore@1.8.3 
  ├── underscore.logger@0.3.1 
  └─┬ underscore.string@3.3.4 
    ├── sprintf-js@1.1.1 
    └── util-deprecate@1.0.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/coach/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 30% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0417 took 2.4888s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Octal literal in strict mode (67:19) on program (function() {
  var Logger;

  Logger = (function() {

    Logger.FATAL = 0;

    Logger.ERROR = 1;

    Logger.WARN = 2;

    Logger.INFO = 3;

    Logger.DEBUG = 4;

    Logger.TRACE = 5;

    Logger.levels = ["FATAL", "ERROR", "WARN", "INFO", "DEBUG", "TRACE"];

    Logger.ANSI = {
      OFF: 0,
      BOLD: 1,
      ITALIC: 3,
      UNDERLINE: 4,
      BLINK: 5,
      INVERSE: 7,
      HIDDEN: 8,
      BLACK: 30,
      RED: 31,
      GREEN: 32,
      YELLOW: 33,
      BLUE: 34,
      MAGENTA: 35,
      CYAN: 36,
      WHITE: 37,
      BLACK_BG: 40,
      RED_BG: 41,
      GREEN_BG: 42,
      YELLOW_BG: 43,
      BLUE_BG: 44,
      MAGENTA_BG: 45,
      CYAN_BG: 46,
      WHITE_BG: 47
    };

    Logger.colors = [Logger.ANSI.MAGENTA, Logger.ANSI.RED, Logger.ANSI.YELLOW, Logger.ANSI.GREEN, Logger.ANSI.CYAN, Logger.ANSI.BLUE];

    function Logger(options) {
      if (options == null) options = {};
      this.level = options.level || Logger.DEBUG;
      if (options.out) this.out = options.out;
      this.colorized = options.hasOwnProperty("colorized") ? options.colorized : false;
      this.colors = Logger.colors.concat();
    }

    Logger.prototype.out = function(message) {
      return console.log(message);
    };

    Logger.prototype.colorize = function() {
      var color, colors, i, result, string;
      colors = Array.prototype.slice.call(arguments);
      string = colors.shift();
      result = "";
      i = 0;
      while (color = colors[i]) {
        result += "\033[" + color + "m";
        i++;
      }
      result += "" + string + "\033[" + Logger.ANSI.OFF + "m";
      return result;
    };

    Logger.prototype.format = function(date, level, message) {
      return "[" + (date.toUTCString()) + "] " + Logger.levels[level] + " " + message;
    };

    Logger.prototype._log = function(level, args) {
      var i, message;
      if (level <= this.level) {
        i = 0;
        message = args[0].replace(/%s/g, function() {
          return args[i++];
        });
        message = this.format(new Date(), level, message);
        if (this.colorized) message = this.colorize(message, this.colors[level]);
        return this.out(message);
      }
    };

    Logger.prototype.log = function() {
      return console.log.apply(console, arguments);
    };

    Logger.prototype.fatal = function() {
      return this._log(Logger.FATAL, arguments);
    };

    Logger.prototype.error = function() {
      return this._log(Logger.ERROR, arguments);
    };

    Logger.prototype.warn = function() {
      return this._log(Logger.WARN, arguments);
    };

    Logger.prototype.info = function() {
      return this._log(Logger.INFO, arguments);
    };

    Logger.prototype.debug = function() {
      return this._log(Logger.DEBUG, arguments);
    };

    Logger.prototype.trace = function() {
      return this._log(Logger.TRACE, arguments);
    };

    Logger.prototype.group = function() {};

    Logger.prototype.on = function(event, callback) {
      var _ref;
      switch (event) {
        case "message":
          this;
          break;
        case "line":
          this;
          break;
        case "frame":
          if ((_ref = this.timer) == null) this.timer = new Logger.Timer();
          this.timer.on(event, callback);
          break;
        case "bench":
          this;
      }
      return this;
    };

    Logger.prototype.toObject = function() {
      var logger;
      logger = this;
      return {
        log: function() {
          return logger.log.apply(logger, arguments);
        },
        fatal: function() {
          return logger.fatal.apply(logger, arguments);
        },
        error: function() {
          return logger.error.apply(logger, arguments);
        },
        warn: function() {
          return logger.warn.apply(logger, arguments);
        },
        info: function() {
          return logger.info.apply(logger, arguments);
        },
        debug: function() {
          return logger.debug.apply(logger, arguments);
        },
        trace: function() {
          return logger.trace.apply(logger, arguments);
        }
      };
    };

    Logger.Timer = (function() {

      function Timer() {
        this.now = Date.now();
        this.time_last_frame = this.now;
        this.time_last_second = this.now;
        this.fps = 0;
        this.fps_min = 1000;
        this.fps_max = 0;
        this.ms = 0;
        this.ms_min = 0;
        this.ms_max = 0;
        this.frames = 0;
        this.handlers = [];
      }

      Timer.prototype.on = function(event, callback) {
        this.handlers.push(callback);
        return this.start();
      };

      Timer.prototype.start = function() {
        var self;
        if (this.timer) return this;
        self = this;
        this.timer = setInterval((function() {
          return self.update();
        }), 1000 / 60);
        return this;
      };

      Timer.prototype.stop = function() {
        clearInterval(this.timer);
        this.timer = null;
        return this;
      };

      Timer.prototype.update = function() {
        var handler, _i, _len, _ref, _results;
        this.now = Date.now();
        this.ms = this.now - this.time_last_frame;
        this.ms_min = Math.min(this.ms_min, this.ms);
        this.ms_max = Math.max(this.ms_max, this.ms);
        this.time_last_frame = this.now;
        this.frames += 1;
        if (this.now > (this.time_last_second + 1000)) {
          this.fps = Math.round((this.frames * 1000) / (this.now - this.time_last_second));
          this.fps_min = Math.min(this.fps_min, this.fps);
          this.fps_max = Math.max(this.fps_max, this.fps);
          this.time_last_second = this.now;
          this.frames = 0;
          _ref = this.handlers;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            handler = _ref[_i];
            _results.push(handler.apply(this));
          }
          return _results;
        }
      };

      return Timer;

    })();

    return Logger;

  })();

  if (typeof module === 'undefined' || typeof window !== 'undefined') {
    window["_console"] = new Logger({
      colorized: false
    });
  } else {
    module.exports = new Logger({
      colorized: true
    });
    global["_console"] || (global["_console"] = module.exports);
  }

}).call(this);
 at SyntaxError: Octal literal in strict mode (67:19)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readEscapedChar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:3023:16)
    at Parser.pp$7.readString (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2935:23)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2724:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1607:12)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/coach/node_modules/coach/lib/coach.js. Coverage (Term): 12% Coverage (LOC): 11%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
