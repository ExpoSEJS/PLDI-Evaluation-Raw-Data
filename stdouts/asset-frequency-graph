/root/Targets/asset-frequency-graph
└── asset-frequency-graph@0.3.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/asset-frequency-graph/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 32% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 32% coverage ] ****** [2 done /1 queued / 1 running / 1 errors / 30% coverage ] ****** [2 done /0 queued / 2 running / 1 errors / 30% coverage ] ****** [2 done /0 queued / 2 running / 1 errors / 30% coverage ] ****** [3 done /0 queued / 2 running / 2 errors / 31% coverage ] ****** [3 done /0 queued / 2 running / 2 errors / 31% coverage ] ****** [4 done /1 queued / 2 running / 3 errors / 31% coverage ] ****** [4 done /0 queued / 3 running / 3 errors / 31% coverage ] ****** [4 done /0 queued / 3 running / 3 errors / 31% coverage ] ****** [5 done /0 queued / 3 running / 4 errors / 31% coverage ] ****** [5 done /0 queued / 3 running / 4 errors / 31% coverage ] ****** [6 done /2 queued / 3 running / 5 errors / 31% coverage ] ****** [6 done /1 queued / 4 running / 5 errors / 31% coverage ] ****** [6 done /0 queued / 5 running / 5 errors / 31% coverage ] ****** [6 done /0 queued / 5 running / 5 errors / 31% coverage ] ****** [7 done /1 queued / 5 running / 6 errors / 31% coverage ] ****** [7 done /0 queued / 6 running / 6 errors / 31% coverage ] ****** [7 done /0 queued / 6 running / 6 errors / 31% coverage ] ****** [8 done /0 queued / 6 running / 7 errors / 31% coverage ] ****** [8 done /0 queued / 6 running / 7 errors / 31% coverage ] ****** [9 done /0 queued / 6 running / 8 errors / 31% coverage ] ****** [9 done /0 queued / 6 running / 8 errors / 31% coverage ] ****** [10 done /3 queued / 6 running / 9 errors / 31% coverage ] ****** [10 done /2 queued / 7 running / 9 errors / 31% coverage ] ****** [10 done /1 queued / 8 running / 9 errors / 31% coverage ] ****** [10 done /0 queued / 9 running / 9 errors / 31% coverage ] ****** [10 done /0 queued / 9 running / 9 errors / 31% coverage ] ****** [11 done /0 queued / 8 running / 10 errors / 31% coverage ] ****** [12 done /0 queued / 7 running / 11 errors / 31% coverage ] ****** [13 done /2 queued / 7 running / 12 errors / 31% coverage ] ****** [13 done /1 queued / 8 running / 12 errors / 31% coverage ] ****** [13 done /0 queued / 9 running / 12 errors / 31% coverage ] ****** [13 done /0 queued / 9 running / 12 errors / 31% coverage ] ****** [14 done /1 queued / 9 running / 13 errors / 34% coverage ] ****** [14 done /0 queued / 10 running / 13 errors / 34% coverage ] ****** [14 done /0 queued / 10 running / 13 errors / 34% coverage ] ****** [15 done /1 queued / 10 running / 14 errors / 34% coverage ] ****** [15 done /0 queued / 11 running / 14 errors / 34% coverage ] ****** [15 done /0 queued / 11 running / 14 errors / 34% coverage ] ****** [16 done /0 queued / 10 running / 15 errors / 34% coverage ] ****** [17 done /0 queued / 10 running / 16 errors / 34% coverage ] ****** [17 done /0 queued / 10 running / 16 errors / 34% coverage ] ****** [18 done /2 queued / 10 running / 17 errors / 34% coverage ] ****** [18 done /1 queued / 11 running / 17 errors / 34% coverage ] ****** [18 done /0 queued / 12 running / 17 errors / 34% coverage ] ****** [18 done /0 queued / 12 running / 17 errors / 34% coverage ] ****** [19 done /0 queued / 11 running / 18 errors / 34% coverage ] ****** [20 done /5 queued / 11 running / 19 errors / 34% coverage ] ****** [20 done /4 queued / 12 running / 19 errors / 34% coverage ] ****** [20 done /3 queued / 13 running / 19 errors / 34% coverage ] ****** [20 done /2 queued / 14 running / 19 errors / 34% coverage ] ****** [20 done /1 queued / 15 running / 19 errors / 34% coverage ] ****** [20 done /0 queued / 16 running / 19 errors / 34% coverage ] ****** [20 done /0 queued / 16 running / 19 errors / 34% coverage ] ****** [21 done /0 queued / 16 running / 20 errors / 34% coverage ] ****** [21 done /0 queued / 16 running / 20 errors / 34% coverage ] ****** [22 done /1 queued / 16 running / 21 errors / 34% coverage ] ****** [22 done /1 queued / 16 running / 21 errors / 34% coverage ] ****** [23 done /0 queued / 16 running / 22 errors / 34% coverage ] ****** [23 done /0 queued / 16 running / 22 errors / 34% coverage ] ****** [24 done /0 queued / 15 running / 23 errors / 34% coverage ] ****** [25 done /2 queued / 15 running / 24 errors / 34% coverage ] ****** [25 done /1 queued / 16 running / 24 errors / 34% coverage ] ****** [25 done /1 queued / 16 running / 24 errors / 34% coverage ] ****** [26 done /0 queued / 16 running / 25 errors / 34% coverage ] ****** [26 done /0 queued / 16 running / 25 errors / 34% coverage ] ****** [27 done /2 queued / 16 running / 26 errors / 34% coverage ] ****** [27 done /2 queued / 16 running / 26 errors / 34% coverage ] ****** [28 done /3 queued / 16 running / 27 errors / 34% coverage ] ****** [28 done /3 queued / 16 running / 27 errors / 34% coverage ] ****** [29 done /2 queued / 16 running / 28 errors / 34% coverage ] ****** [29 done /2 queued / 16 running / 28 errors / 34% coverage ] ****** [30 done /4 queued / 16 running / 29 errors / 34% coverage ] ****** [30 done /4 queued / 16 running / 29 errors / 34% coverage ] ****** [31 done /4 queued / 16 running / 30 errors / 34% coverage ] ****** [31 done /4 queued / 16 running / 30 errors / 34% coverage ] ****** [32 done /3 queued / 16 running / 31 errors / 34% coverage ] ****** [32 done /3 queued / 16 running / 31 errors / 34% coverage ] ****** [33 done /3 queued / 16 running / 32 errors / 34% coverage ] ****** [33 done /3 queued / 16 running / 32 errors / 34% coverage ] ****** [34 done /3 queued / 16 running / 33 errors / 34% coverage ] ****** [34 done /3 queued / 16 running / 33 errors / 34% coverage ] ****** [35 done /3 queued / 16 running / 34 errors / 34% coverage ] ****** [35 done /3 queued / 16 running / 34 errors / 34% coverage ] ****** [36 done /4 queued / 16 running / 35 errors / 34% coverage ] ****** [36 done /4 queued / 16 running / 35 errors / 34% coverage ] ****** [37 done /3 queued / 16 running / 36 errors / 34% coverage ] ****** [37 done /3 queued / 16 running / 36 errors / 34% coverage ] ****** [38 done /4 queued / 16 running / 37 errors / 34% coverage ] ****** [38 done /4 queued / 16 running / 37 errors / 34% coverage ] ****** [39 done /6 queued / 16 running / 38 errors / 34% coverage ] ****** [39 done /6 queued / 16 running / 38 errors / 34% coverage ] ****** [40 done /6 queued / 16 running / 39 errors / 34% coverage ] ****** [40 done /6 queued / 16 running / 39 errors / 34% coverage ] ****** [41 done /7 queued / 16 running / 40 errors / 34% coverage ] ****** [41 done /7 queued / 16 running / 40 errors / 34% coverage ] ****** [42 done /6 queued / 16 running / 41 errors / 34% coverage ] ****** [42 done /6 queued / 16 running / 41 errors / 34% coverage ] ****** [43 done /8 queued / 16 running / 42 errors / 34% coverage ] ****** [43 done /8 queued / 16 running / 42 errors / 34% coverage ] ****** [44 done /7 queued / 16 running / 43 errors / 34% coverage ] ****** [44 done /7 queued / 16 running / 43 errors / 34% coverage ] ****** [45 done /10 queued / 16 running / 44 errors / 34% coverage ] ****** [45 done /10 queued / 16 running / 44 errors / 34% coverage ] ****** [46 done /12 queued / 16 running / 45 errors / 34% coverage ] ****** [46 done /12 queued / 16 running / 45 errors / 34% coverage ] ****** [47 done /15 queued / 16 running / 46 errors / 34% coverage ] ****** [47 done /15 queued / 16 running / 46 errors / 34% coverage ] ****** [48 done /19 queued / 16 running / 47 errors / 34% coverage ] ****** [48 done /19 queued / 16 running / 47 errors / 34% coverage ] ****** [49 done /18 queued / 16 running / 48 errors / 34% coverage ] ****** [49 done /18 queued / 16 running / 48 errors / 34% coverage ] ****** [50 done /17 queued / 16 running / 49 errors / 34% coverage ] ****** [50 done /17 queued / 16 running / 49 errors / 34% coverage ] ****** [51 done /17 queued / 16 running / 50 errors / 34% coverage ] ****** [51 done /17 queued / 16 running / 50 errors / 34% coverage ] ****** [52 done /18 queued / 16 running / 51 errors / 34% coverage ] ****** [52 done /18 queued / 16 running / 51 errors / 34% coverage ] ****** [53 done /19 queued / 16 running / 52 errors / 34% coverage ] ****** [53 done /19 queued / 16 running / 52 errors / 34% coverage ] ****** [54 done /21 queued / 16 running / 53 errors / 34% coverage ] ****** [54 done /21 queued / 16 running / 53 errors / 34% coverage ] ****** [55 done /23 queued / 16 running / 54 errors / 34% coverage ] ****** [55 done /23 queued / 16 running / 54 errors / 34% coverage ] ****** [56 done /27 queued / 16 running / 55 errors / 34% coverage ] ****** [56 done /27 queued / 16 running / 55 errors / 34% coverage ] ****** [57 done /26 queued / 16 running / 56 errors / 34% coverage ] ****** [57 done /26 queued / 16 running / 56 errors / 34% coverage ] ****** [58 done /27 queued / 16 running / 57 errors / 34% coverage ] ****** [58 done /27 queued / 16 running / 57 errors / 34% coverage ] ****** [59 done /26 queued / 16 running / 58 errors / 34% coverage ] ****** [59 done /26 queued / 16 running / 58 errors / 34% coverage ] ****** [60 done /26 queued / 16 running / 59 errors / 34% coverage ] ****** [60 done /26 queued / 16 running / 59 errors / 34% coverage ] ****** [61 done /25 queued / 16 running / 60 errors / 34% coverage ] ****** [61 done /25 queued / 16 running / 60 errors / 34% coverage ] ****** [62 done /24 queued / 16 running / 61 errors / 34% coverage ] ****** [62 done /24 queued / 16 running / 61 errors / 34% coverage ] ****** [63 done /25 queued / 16 running / 62 errors / 34% coverage ] ****** [63 done /25 queued / 16 running / 62 errors / 34% coverage ] ****** [64 done /26 queued / 16 running / 63 errors / 34% coverage ] ****** [64 done /26 queued / 16 running / 63 errors / 34% coverage ] ****** [65 done /29 queued / 16 running / 64 errors / 34% coverage ] ****** [65 done /29 queued / 16 running / 64 errors / 34% coverage ] ****** [66 done /30 queued / 16 running / 65 errors / 34% coverage ] ****** [66 done /30 queued / 16 running / 65 errors / 34% coverage ] ****** [67 done /31 queued / 16 running / 66 errors / 34% coverage ] ****** [67 done /31 queued / 16 running / 66 errors / 34% coverage ] ****** [68 done /30 queued / 16 running / 67 errors / 34% coverage ] ****** [68 done /30 queued / 16 running / 67 errors / 34% coverage ] ****** [69 done /32 queued / 16 running / 68 errors / 34% coverage ] ****** [69 done /32 queued / 16 running / 68 errors / 34% coverage ] ****** [70 done /33 queued / 16 running / 69 errors / 34% coverage ] ****** [70 done /33 queued / 16 running / 69 errors / 34% coverage ] ****** [71 done /34 queued / 16 running / 70 errors / 34% coverage ] ****** [71 done /34 queued / 16 running / 70 errors / 34% coverage ] ****** [72 done /34 queued / 16 running / 71 errors / 34% coverage ] ****** [72 done /34 queued / 16 running / 71 errors / 34% coverage ] ****** [73 done /36 queued / 16 running / 72 errors / 34% coverage ] ****** [73 done /36 queued / 16 running / 72 errors / 34% coverage ] ****** [74 done /36 queued / 16 running / 73 errors / 34% coverage ] ****** [74 done /36 queued / 16 running / 73 errors / 34% coverage ] ****** [75 done /37 queued / 16 running / 74 errors / 34% coverage ] ****** [75 done /37 queued / 16 running / 74 errors / 34% coverage ] ****** [76 done /37 queued / 16 running / 75 errors / 34% coverage ] ****** [76 done /37 queued / 16 running / 75 errors / 34% coverage ] ****** [77 done /39 queued / 16 running / 76 errors / 34% coverage ] ****** [77 done /39 queued / 16 running / 76 errors / 34% coverage ] ****** [78 done /38 queued / 16 running / 77 errors / 34% coverage ] ****** [78 done /38 queued / 16 running / 77 errors / 34% coverage ] ****** [79 done /39 queued / 16 running / 78 errors / 34% coverage ] ****** [79 done /39 queued / 16 running / 78 errors / 34% coverage ] ****** [80 done /40 queued / 16 running / 79 errors / 34% coverage ] ****** [80 done /40 queued / 16 running / 79 errors / 34% coverage ] ****** [81 done /42 queued / 16 running / 80 errors / 34% coverage ] ****** [81 done /42 queued / 16 running / 80 errors / 34% coverage ] ****** [82 done /42 queued / 16 running / 81 errors / 34% coverage ] ****** [82 done /42 queued / 16 running / 81 errors / 34% coverage ] ****** [83 done /41 queued / 16 running / 82 errors / 34% coverage ] ****** [83 done /41 queued / 16 running / 82 errors / 34% coverage ] ****** [84 done /44 queued / 16 running / 83 errors / 34% coverage ] ****** [84 done /44 queued / 16 running / 83 errors / 34% coverage ] ****** [85 done /46 queued / 16 running / 84 errors / 34% coverage ] ****** [85 done /46 queued / 16 running / 84 errors / 34% coverage ] ****** [86 done /47 queued / 16 running / 85 errors / 34% coverage ] ****** [86 done /47 queued / 16 running / 85 errors / 34% coverage ] ****** [87 done /49 queued / 16 running / 86 errors / 34% coverage ] ****** [87 done /49 queued / 16 running / 86 errors / 34% coverage ] ****** [88 done /51 queued / 16 running / 87 errors / 34% coverage ] ****** [88 done /51 queued / 16 running / 87 errors / 34% coverage ] ****** [89 done /53 queued / 16 running / 88 errors / 34% coverage ] ****** [89 done /53 queued / 16 running / 88 errors / 34% coverage ] ****** [90 done /54 queued / 16 running / 89 errors / 34% coverage ] ****** [90 done /54 queued / 16 running / 89 errors / 34% coverage ] ****** [91 done /57 queued / 16 running / 90 errors / 34% coverage ] ****** [91 done /57 queued / 16 running / 90 errors / 34% coverage ] ****** [92 done /58 queued / 16 running / 91 errors / 34% coverage ] ****** [92 done /58 queued / 16 running / 91 errors / 34% coverage ] ****** [93 done /59 queued / 16 running / 92 errors / 34% coverage ] ****** [93 done /59 queued / 16 running / 92 errors / 34% coverage ] ****** [94 done /60 queued / 16 running / 93 errors / 34% coverage ] ****** [94 done /60 queued / 16 running / 93 errors / 34% coverage ] ****** [95 done /62 queued / 16 running / 94 errors / 34% coverage ] ****** [95 done /62 queued / 16 running / 94 errors / 34% coverage ] ****** [96 done /63 queued / 16 running / 95 errors / 34% coverage ] ****** [96 done /63 queued / 16 running / 95 errors / 34% coverage ] ****** [97 done /62 queued / 16 running / 96 errors / 34% coverage ] ****** [97 done /62 queued / 16 running / 96 errors / 34% coverage ] ****** [98 done /63 queued / 16 running / 97 errors / 34% coverage ] ****** [98 done /63 queued / 16 running / 97 errors / 34% coverage ] ****** [99 done /65 queued / 16 running / 98 errors / 34% coverage ] ****** [99 done /65 queued / 16 running / 98 errors / 34% coverage ] ****** [100 done /64 queued / 16 running / 99 errors / 34% coverage ] ****** [100 done /64 queued / 16 running / 99 errors / 34% coverage ] ****** [101 done /65 queued / 16 running / 100 errors / 34% coverage ] ****** [101 done /65 queued / 16 running / 100 errors / 34% coverage ] ****** [102 done /67 queued / 16 running / 101 errors / 34% coverage ] ****** [102 done /67 queued / 16 running / 101 errors / 34% coverage ] ****** [103 done /69 queued / 16 running / 102 errors / 34% coverage ] ****** [103 done /69 queued / 16 running / 102 errors / 34% coverage ] ****** [104 done /70 queued / 16 running / 103 errors / 34% coverage ] ****** [104 done /70 queued / 16 running / 103 errors / 34% coverage ] ****** [105 done /71 queued / 16 running / 104 errors / 34% coverage ] ****** [105 done /71 queued / 16 running / 104 errors / 34% coverage ] ****** [106 done /71 queued / 16 running / 105 errors / 34% coverage ] ****** [106 done /71 queued / 16 running / 105 errors / 34% coverage ] ****** [107 done /74 queued / 16 running / 106 errors / 34% coverage ] ****** [107 done /74 queued / 16 running / 106 errors / 34% coverage ] ****** [108 done /73 queued / 16 running / 107 errors / 34% coverage ] ****** [108 done /73 queued / 16 running / 107 errors / 34% coverage ] ****** [109 done /72 queued / 16 running / 108 errors / 34% coverage ] ****** [109 done /72 queued / 16 running / 108 errors / 34% coverage ] ****** [110 done /73 queued / 16 running / 109 errors / 34% coverage ] ****** [110 done /73 queued / 16 running / 109 errors / 34% coverage ] ****** [111 done /73 queued / 16 running / 110 errors / 34% coverage ] ****** [111 done /73 queued / 16 running / 110 errors / 34% coverage ] ****** [112 done /75 queued / 16 running / 111 errors / 34% coverage ] ****** [112 done /75 queued / 16 running / 111 errors / 34% coverage ] ****** [113 done /76 queued / 16 running / 112 errors / 34% coverage ] ****** [113 done /76 queued / 16 running / 112 errors / 34% coverage ] ****** [114 done /76 queued / 16 running / 113 errors / 34% coverage ] ****** [114 done /76 queued / 16 running / 113 errors / 34% coverage ] ****** [115 done /76 queued / 16 running / 114 errors / 34% coverage ] ****** [115 done /76 queued / 16 running / 114 errors / 34% coverage ] ****** [116 done /77 queued / 16 running / 115 errors / 34% coverage ] ****** [116 done /77 queued / 16 running / 115 errors / 34% coverage ] ****** [117 done /81 queued / 16 running / 116 errors / 34% coverage ] ****** [117 done /81 queued / 16 running / 116 errors / 34% coverage ] ****** [118 done /81 queued / 16 running / 117 errors / 34% coverage ] ****** [118 done /81 queued / 16 running / 117 errors / 34% coverage ] ****** [119 done /80 queued / 16 running / 118 errors / 34% coverage ] ****** [119 done /80 queued / 16 running / 118 errors / 34% coverage ] ****** [120 done /82 queued / 16 running / 119 errors / 34% coverage ] ****** [120 done /82 queued / 16 running / 119 errors / 34% coverage ] ****** [121 done /83 queued / 16 running / 120 errors / 34% coverage ] ****** [121 done /83 queued / 16 running / 120 errors / 34% coverage ] ****** [122 done /84 queued / 16 running / 121 errors / 34% coverage ] ****** [122 done /84 queued / 16 running / 121 errors / 34% coverage ] ****** [123 done /85 queued / 16 running / 122 errors / 34% coverage ] ****** [123 done /85 queued / 16 running / 122 errors / 34% coverage ] ****** [124 done /88 queued / 16 running / 123 errors / 34% coverage ] ****** [124 done /88 queued / 16 running / 123 errors / 34% coverage ] ****** [125 done /90 queued / 16 running / 124 errors / 34% coverage ] ****** [125 done /90 queued / 16 running / 124 errors / 34% coverage ] ****** [126 done /89 queued / 16 running / 125 errors / 34% coverage ] ****** [126 done /89 queued / 16 running / 125 errors / 34% coverage ] ****** [127 done /91 queued / 16 running / 126 errors / 34% coverage ] ****** [127 done /91 queued / 16 running / 126 errors / 34% coverage ] ****** [128 done /93 queued / 16 running / 127 errors / 34% coverage ] ****** [128 done /93 queued / 16 running / 127 errors / 34% coverage ] ****** [129 done /95 queued / 16 running / 128 errors / 34% coverage ] ****** [129 done /95 queued / 16 running / 128 errors / 34% coverage ] ****** [130 done /96 queued / 16 running / 129 errors / 34% coverage ] ****** [130 done /96 queued / 16 running / 129 errors / 34% coverage ] ****** [131 done /98 queued / 16 running / 130 errors / 34% coverage ] ****** [131 done /98 queued / 16 running / 130 errors / 34% coverage ] ****** [132 done /100 queued / 16 running / 131 errors / 34% coverage ] ****** [132 done /100 queued / 16 running / 131 errors / 34% coverage ] ****** [133 done /99 queued / 16 running / 132 errors / 34% coverage ] ****** [133 done /99 queued / 16 running / 132 errors / 34% coverage ] ****** [134 done /100 queued / 16 running / 133 errors / 34% coverage ] ****** [134 done /100 queued / 16 running / 133 errors / 34% coverage ] ****** [135 done /104 queued / 16 running / 134 errors / 34% coverage ] ****** [135 done /104 queued / 16 running / 134 errors / 34% coverage ] ****** [136 done /105 queued / 16 running / 135 errors / 34% coverage ] ****** [136 done /105 queued / 16 running / 135 errors / 34% coverage ] ****** [137 done /105 queued / 16 running / 136 errors / 34% coverage ] ****** [137 done /105 queued / 16 running / 136 errors / 34% coverage ] ****** [138 done /106 queued / 16 running / 137 errors / 34% coverage ] ****** [138 done /106 queued / 16 running / 137 errors / 34% coverage ] ****** [139 done /108 queued / 16 running / 138 errors / 34% coverage ] ****** [139 done /108 queued / 16 running / 138 errors / 34% coverage ] ****** [140 done /109 queued / 16 running / 139 errors / 34% coverage ] ****** [140 done /109 queued / 16 running / 139 errors / 34% coverage ] ****** [141 done /109 queued / 16 running / 140 errors / 34% coverage ] ****** [141 done /109 queued / 16 running / 140 errors / 34% coverage ] ****** [142 done /108 queued / 16 running / 141 errors / 34% coverage ] ****** [142 done /108 queued / 16 running / 141 errors / 34% coverage ] ****** [143 done /110 queued / 16 running / 142 errors / 34% coverage ] ****** [143 done /110 queued / 16 running / 142 errors / 34% coverage ] ****** [144 done /111 queued / 16 running / 143 errors / 34% coverage ] ****** [144 done /111 queued / 16 running / 143 errors / 34% coverage ] ****** [145 done /112 queued / 16 running / 144 errors / 34% coverage ] ****** [145 done /112 queued / 16 running / 144 errors / 34% coverage ] ****** [146 done /113 queued / 16 running / 145 errors / 34% coverage ] ****** [146 done /113 queued / 16 running / 145 errors / 34% coverage ] ****** [147 done /113 queued / 16 running / 146 errors / 34% coverage ] ****** [147 done /113 queued / 16 running / 146 errors / 34% coverage ] ****** [148 done /114 queued / 16 running / 147 errors / 34% coverage ] ****** [148 done /114 queued / 16 running / 147 errors / 34% coverage ] ****** [149 done /116 queued / 16 running / 148 errors / 34% coverage ] ****** [149 done /116 queued / 16 running / 148 errors / 34% coverage ] ****** [150 done /118 queued / 16 running / 149 errors / 34% coverage ] ****** [150 done /118 queued / 16 running / 149 errors / 34% coverage ] ****** [151 done /120 queued / 16 running / 150 errors / 34% coverage ] ****** [151 done /120 queued / 16 running / 150 errors / 34% coverage ] ****** [152 done /122 queued / 16 running / 151 errors / 34% coverage ] ****** [152 done /122 queued / 16 running / 151 errors / 34% coverage ] ****** [153 done /122 queued / 16 running / 152 errors / 34% coverage ] ****** [153 done /122 queued / 16 running / 152 errors / 34% coverage ] ****** [154 done /124 queued / 16 running / 153 errors / 34% coverage ] ****** [154 done /124 queued / 16 running / 153 errors / 34% coverage ] ****** [155 done /123 queued / 16 running / 154 errors / 34% coverage ] ****** [155 done /123 queued / 16 running / 154 errors / 34% coverage ] ****** [156 done /122 queued / 16 running / 155 errors / 34% coverage ] ****** [156 done /122 queued / 16 running / 155 errors / 34% coverage ] ****** [157 done /123 queued / 16 running / 156 errors / 34% coverage ] ****** [157 done /123 queued / 16 running / 156 errors / 34% coverage ] ****** [158 done /124 queued / 16 running / 157 errors / 34% coverage ] ****** [158 done /124 queued / 16 running / 157 errors / 34% coverage ] ****** [159 done /123 queued / 16 running / 158 errors / 34% coverage ] ****** [159 done /123 queued / 16 running / 158 errors / 34% coverage ] ****** [160 done /124 queued / 16 running / 159 errors / 34% coverage ] ****** [160 done /124 queued / 16 running / 159 errors / 34% coverage ] ****** [161 done /126 queued / 16 running / 160 errors / 34% coverage ] ****** [161 done /126 queued / 16 running / 160 errors / 34% coverage ] ****** [162 done /126 queued / 16 running / 161 errors / 34% coverage ] ****** [162 done /126 queued / 16 running / 161 errors / 34% coverage ] ****** [163 done /126 queued / 16 running / 162 errors / 34% coverage ] ****** [163 done /126 queued / 16 running / 162 errors / 34% coverage ] ****** [164 done /128 queued / 16 running / 163 errors / 34% coverage ] ****** [164 done /128 queued / 16 running / 163 errors / 34% coverage ] ****** [165 done /129 queued / 16 running / 164 errors / 34% coverage ] ****** [165 done /129 queued / 16 running / 164 errors / 34% coverage ] ****** [166 done /131 queued / 16 running / 165 errors / 34% coverage ] ****** [166 done /131 queued / 16 running / 165 errors / 34% coverage ] ****** [167 done /132 queued / 16 running / 166 errors / 34% coverage ] ****** [167 done /132 queued / 16 running / 166 errors / 34% coverage ] ****** [168 done /136 queued / 16 running / 167 errors / 34% coverage ] ****** [168 done /136 queued / 16 running / 167 errors / 34% coverage ] ****** [169 done /135 queued / 16 running / 168 errors / 34% coverage ] ****** [169 done /135 queued / 16 running / 168 errors / 34% coverage ] ****** [170 done /137 queued / 16 running / 169 errors / 34% coverage ] ****** [170 done /137 queued / 16 running / 169 errors / 34% coverage ] ****** [171 done /138 queued / 16 running / 170 errors / 34% coverage ] ****** [171 done /138 queued / 16 running / 170 errors / 34% coverage ] ****** [172 done /141 queued / 16 running / 171 errors / 34% coverage ] ****** [172 done /141 queued / 16 running / 171 errors / 34% coverage ] ****** [173 done /142 queued / 16 running / 172 errors / 34% coverage ] ****** [173 done /142 queued / 16 running / 172 errors / 34% coverage ] ****** [174 done /141 queued / 16 running / 173 errors / 34% coverage ] ****** [174 done /141 queued / 16 running / 173 errors / 34% coverage ] ****** [175 done /143 queued / 16 running / 174 errors / 34% coverage ] ****** [175 done /143 queued / 16 running / 174 errors / 34% coverage ] ****** [176 done /144 queued / 16 running / 175 errors / 34% coverage ] ****** [176 done /144 queued / 16 running / 175 errors / 34% coverage ] ****** [177 done /143 queued / 16 running / 176 errors / 34% coverage ] ****** [177 done /143 queued / 16 running / 176 errors / 34% coverage ] ****** [178 done /145 queued / 16 running / 177 errors / 34% coverage ] ****** [178 done /145 queued / 16 running / 177 errors / 34% coverage ] ****** [179 done /144 queued / 16 running / 178 errors / 34% coverage ] ****** [179 done /144 queued / 16 running / 178 errors / 34% coverage ] ****** [180 done /145 queued / 16 running / 179 errors / 34% coverage ] ****** [180 done /145 queued / 16 running / 179 errors / 34% coverage ] ****** [181 done /144 queued / 16 running / 180 errors / 34% coverage ] ****** [181 done /144 queued / 16 running / 180 errors / 34% coverage ] ****** [182 done /145 queued / 16 running / 181 errors / 34% coverage ] ****** [182 done /145 queued / 16 running / 181 errors / 34% coverage ] ****** [183 done /145 queued / 16 running / 182 errors / 34% coverage ] ****** [183 done /145 queued / 16 running / 182 errors / 34% coverage ] ****** [184 done /144 queued / 16 running / 183 errors / 34% coverage ] ****** [184 done /144 queued / 16 running / 183 errors / 34% coverage ] ****** [185 done /143 queued / 16 running / 184 errors / 34% coverage ] ****** [185 done /143 queued / 16 running / 184 errors / 34% coverage ] ****** [186 done /147 queued / 16 running / 185 errors / 34% coverage ] ****** [186 done /147 queued / 16 running / 185 errors / 34% coverage ] ****** [187 done /147 queued / 16 running / 186 errors / 34% coverage ] ****** [187 done /147 queued / 16 running / 186 errors / 34% coverage ] ****** [188 done /147 queued / 16 running / 187 errors / 34% coverage ] ****** [188 done /147 queued / 16 running / 187 errors / 34% coverage ] ****** [189 done /148 queued / 16 running / 188 errors / 34% coverage ] ****** [189 done /148 queued / 16 running / 188 errors / 34% coverage ] ****** [190 done /149 queued / 16 running / 189 errors / 34% coverage ] ****** [190 done /149 queued / 16 running / 189 errors / 34% coverage ] ****** [191 done /149 queued / 16 running / 190 errors / 34% coverage ] ****** [191 done /149 queued / 16 running / 190 errors / 34% coverage ] ****** [192 done /151 queued / 16 running / 191 errors / 34% coverage ] ****** [192 done /151 queued / 16 running / 191 errors / 34% coverage ] ****** [193 done /152 queued / 16 running / 192 errors / 34% coverage ] ****** [193 done /152 queued / 16 running / 192 errors / 34% coverage ] ****** [194 done /151 queued / 16 running / 193 errors / 34% coverage ] ****** [194 done /151 queued / 16 running / 193 errors / 34% coverage ] ****** [195 done /153 queued / 16 running / 194 errors / 34% coverage ] ****** [195 done /153 queued / 16 running / 194 errors / 34% coverage ] ****** [196 done /155 queued / 16 running / 195 errors / 34% coverage ] ****** [196 done /155 queued / 16 running / 195 errors / 34% coverage ] ****** [197 done /155 queued / 16 running / 196 errors / 34% coverage ] ****** [197 done /155 queued / 16 running / 196 errors / 34% coverage ] ****** [198 done /155 queued / 16 running / 197 errors / 34% coverage ] ****** [198 done /155 queued / 16 running / 197 errors / 34% coverage ] ****** [199 done /156 queued / 16 running / 198 errors / 34% coverage ] ****** [199 done /156 queued / 16 running / 198 errors / 34% coverage ] ****** [200 done /157 queued / 16 running / 199 errors / 34% coverage ] ****** [200 done /157 queued / 16 running / 199 errors / 34% coverage ] ****** [201 done /158 queued / 16 running / 200 errors / 34% coverage ] ****** [201 done /158 queued / 16 running / 200 errors / 34% coverage ] ****** [202 done /157 queued / 16 running / 201 errors / 34% coverage ] ****** [202 done /157 queued / 16 running / 201 errors / 34% coverage ] ****** [203 done /158 queued / 16 running / 202 errors / 34% coverage ] ****** [203 done /158 queued / 16 running / 202 errors / 34% coverage ] ****** [204 done /161 queued / 16 running / 203 errors / 34% coverage ] ****** [204 done /161 queued / 16 running / 203 errors / 34% coverage ] ****** [205 done /160 queued / 16 running / 204 errors / 34% coverage ] ****** [205 done /160 queued / 16 running / 204 errors / 34% coverage ] ****** [206 done /160 queued / 16 running / 205 errors / 34% coverage ] ****** [206 done /160 queued / 16 running / 205 errors / 34% coverage ] ****** [207 done /161 queued / 16 running / 206 errors / 34% coverage ] ****** [207 done /161 queued / 16 running / 206 errors / 34% coverage ] ****** [208 done /160 queued / 16 running / 207 errors / 34% coverage ] ****** [208 done /160 queued / 16 running / 207 errors / 34% coverage ] ****** [209 done /163 queued / 16 running / 208 errors / 34% coverage ] ****** [209 done /163 queued / 16 running / 208 errors / 34% coverage ] ****** [210 done /165 queued / 16 running / 209 errors / 34% coverage ] ****** [210 done /165 queued / 16 running / 209 errors / 34% coverage ] ****** [211 done /166 queued / 16 running / 210 errors / 34% coverage ] ****** [211 done /166 queued / 16 running / 210 errors / 34% coverage ] ****** [212 done /168 queued / 16 running / 211 errors / 34% coverage ] ****** [212 done /168 queued / 16 running / 211 errors / 34% coverage ] ****** [213 done /169 queued / 16 running / 212 errors / 34% coverage ] ****** [213 done /169 queued / 16 running / 212 errors / 34% coverage ] ****** [214 done /171 queued / 16 running / 213 errors / 34% coverage ] ****** [214 done /171 queued / 16 running / 213 errors / 34% coverage ] ****** [215 done /174 queued / 16 running / 214 errors / 34% coverage ] ****** [215 done /174 queued / 16 running / 214 errors / 34% coverage ] ****** [216 done /174 queued / 16 running / 215 errors / 34% coverage ] ****** [216 done /174 queued / 16 running / 215 errors / 34% coverage ] ****** [217 done /176 queued / 16 running / 216 errors / 34% coverage ] ****** [217 done /176 queued / 16 running / 216 errors / 34% coverage ] ****** [218 done /175 queued / 16 running / 217 errors / 34% coverage ] ****** [218 done /175 queued / 16 running / 217 errors / 34% coverage ] ****** [219 done /176 queued / 16 running / 218 errors / 34% coverage ] ****** [219 done /176 queued / 16 running / 218 errors / 34% coverage ] ****** [220 done /175 queued / 16 running / 219 errors / 34% coverage ] ****** [220 done /175 queued / 16 running / 219 errors / 34% coverage ] ****** [221 done /175 queued / 16 running / 220 errors / 34% coverage ] ****** [221 done /175 queued / 16 running / 220 errors / 34% coverage ] ****** [222 done /174 queued / 16 running / 221 errors / 34% coverage ] ****** [222 done /174 queued / 16 running / 221 errors / 34% coverage ] ****** [223 done /173 queued / 16 running / 222 errors / 34% coverage ] ****** [223 done /173 queued / 16 running / 222 errors / 34% coverage ] ****** [224 done /173 queued / 16 running / 223 errors / 34% coverage ] ****** [224 done /173 queued / 16 running / 223 errors / 34% coverage ] ****** [225 done /172 queued / 16 running / 224 errors / 34% coverage ] ****** [225 done /172 queued / 16 running / 224 errors / 34% coverage ] ****** [226 done /175 queued / 16 running / 225 errors / 34% coverage ] ****** [226 done /175 queued / 16 running / 225 errors / 34% coverage ] ****** [227 done /174 queued / 16 running / 226 errors / 34% coverage ] ****** [227 done /174 queued / 16 running / 226 errors / 34% coverage ] ****** [228 done /174 queued / 16 running / 227 errors / 34% coverage ] ****** [228 done /174 queued / 16 running / 227 errors / 34% coverage ] ****** [229 done /173 queued / 16 running / 228 errors / 34% coverage ] ****** [229 done /173 queued / 16 running / 228 errors / 34% coverage ] ****** [230 done /172 queued / 16 running / 229 errors / 34% coverage ] ****** [230 done /172 queued / 16 running / 229 errors / 34% coverage ] ****** [231 done /171 queued / 16 running / 230 errors / 34% coverage ] ****** [231 done /171 queued / 16 running / 230 errors / 34% coverage ] ****** [232 done /171 queued / 16 running / 231 errors / 34% coverage ] ****** [232 done /171 queued / 16 running / 231 errors / 34% coverage ] ****** [233 done /170 queued / 16 running / 232 errors / 34% coverage ] ****** [233 done /170 queued / 16 running / 232 errors / 34% coverage ] ****** [234 done /169 queued / 16 running / 233 errors / 34% coverage ] ****** [234 done /169 queued / 16 running / 233 errors / 34% coverage ] ****** [235 done /168 queued / 16 running / 234 errors / 34% coverage ] ****** [235 done /168 queued / 16 running / 234 errors / 34% coverage ] ****** [236 done /168 queued / 16 running / 235 errors / 34% coverage ] ****** [236 done /168 queued / 16 running / 235 errors / 34% coverage ] ****** [237 done /169 queued / 16 running / 236 errors / 34% coverage ] ****** [237 done /169 queued / 16 running / 236 errors / 34% coverage ] ****** [238 done /169 queued / 16 running / 237 errors / 34% coverage ] ****** [238 done /169 queued / 16 running / 237 errors / 34% coverage ] ****** [239 done /168 queued / 16 running / 238 errors / 34% coverage ] ****** [239 done /168 queued / 16 running / 238 errors / 34% coverage ] ****** [240 done /167 queued / 16 running / 239 errors / 34% coverage ] ****** [240 done /167 queued / 16 running / 239 errors / 34% coverage ] ****** [241 done /169 queued / 16 running / 240 errors / 34% coverage ] ****** [241 done /169 queued / 16 running / 240 errors / 34% coverage ] ****** [242 done /168 queued / 16 running / 241 errors / 34% coverage ] ****** [242 done /168 queued / 16 running / 241 errors / 34% coverage ] ****** [243 done /168 queued / 16 running / 242 errors / 34% coverage ] ****** [243 done /168 queued / 16 running / 242 errors / 34% coverage ] ****** [244 done /170 queued / 16 running / 243 errors / 34% coverage ] ****** [244 done /170 queued / 16 running / 243 errors / 34% coverage ] ****** [245 done /170 queued / 16 running / 244 errors / 34% coverage ] ****** [245 done /170 queued / 16 running / 244 errors / 34% coverage ] ****** [246 done /172 queued / 16 running / 245 errors / 34% coverage ] ****** [246 done /172 queued / 16 running / 245 errors / 34% coverage ] ****** [247 done /175 queued / 16 running / 246 errors / 34% coverage ] ****** [247 done /175 queued / 16 running / 246 errors / 34% coverage ] ****** [248 done /177 queued / 16 running / 247 errors / 34% coverage ] ****** [248 done /177 queued / 16 running / 247 errors / 34% coverage ] ****** [249 done /176 queued / 16 running / 248 errors / 34% coverage ] ****** [249 done /176 queued / 16 running / 248 errors / 34% coverage ] ****** [250 done /176 queued / 16 running / 249 errors / 34% coverage ] ****** [250 done /176 queued / 16 running / 249 errors / 34% coverage ] ****** [251 done /177 queued / 16 running / 250 errors / 34% coverage ] ****** [251 done /177 queued / 16 running / 250 errors / 34% coverage ] ****** [252 done /179 queued / 16 running / 251 errors / 34% coverage ] ****** [252 done /179 queued / 16 running / 251 errors / 34% coverage ] ****** [253 done /178 queued / 16 running / 252 errors / 34% coverage ] ****** [253 done /178 queued / 16 running / 252 errors / 34% coverage ] ****** [254 done /177 queued / 16 running / 253 errors / 34% coverage ] ****** [254 done /177 queued / 16 running / 253 errors / 34% coverage ] ****** [255 done /180 queued / 16 running / 254 errors / 34% coverage ] ****** [255 done /180 queued / 16 running / 254 errors / 34% coverage ] ****** [256 done /180 queued / 16 running / 255 errors / 34% coverage ] ****** [256 done /180 queued / 16 running / 255 errors / 34% coverage ] ****** [257 done /180 queued / 16 running / 256 errors / 34% coverage ] ****** [257 done /180 queued / 16 running / 256 errors / 34% coverage ] ****** [258 done /182 queued / 16 running / 257 errors / 34% coverage ] ****** [258 done /182 queued / 16 running / 257 errors / 34% coverage ] ****** [259 done /181 queued / 16 running / 258 errors / 34% coverage ] ****** [259 done /181 queued / 16 running / 258 errors / 34% coverage ] ****** [260 done /183 queued / 16 running / 259 errors / 34% coverage ] ****** [260 done /183 queued / 16 running / 259 errors / 34% coverage ] ****** [261 done /182 queued / 16 running / 260 errors / 34% coverage ] ****** [261 done /182 queued / 16 running / 260 errors / 34% coverage ] ****** [262 done /181 queued / 16 running / 261 errors / 34% coverage ] ****** [262 done /181 queued / 16 running / 261 errors / 34% coverage ] ****** [263 done /184 queued / 16 running / 262 errors / 34% coverage ] ****** [263 done /184 queued / 16 running / 262 errors / 34% coverage ] ****** [264 done /184 queued / 16 running / 263 errors / 34% coverage ] ****** [264 done /184 queued / 16 running / 263 errors / 34% coverage ] ****** [265 done /186 queued / 16 running / 264 errors / 34% coverage ] ****** [265 done /186 queued / 16 running / 264 errors / 34% coverage ] ****** [266 done /186 queued / 16 running / 265 errors / 34% coverage ] ****** [266 done /186 queued / 16 running / 265 errors / 34% coverage ] ****** [267 done /187 queued / 16 running / 266 errors / 34% coverage ] ****** [267 done /187 queued / 16 running / 266 errors / 34% coverage ] ****** [268 done /186 queued / 16 running / 267 errors / 34% coverage ] ****** [268 done /186 queued / 16 running / 267 errors / 34% coverage ] ****** [269 done /186 queued / 16 running / 268 errors / 34% coverage ] ****** [269 done /186 queued / 16 running / 268 errors / 34% coverage ] ****** [270 done /187 queued / 16 running / 269 errors / 34% coverage ] ****** [270 done /187 queued / 16 running / 269 errors / 34% coverage ] ****** [271 done /188 queued / 16 running / 270 errors / 34% coverage ] ****** [271 done /188 queued / 16 running / 270 errors / 34% coverage ] ****** [272 done /190 queued / 16 running / 271 errors / 34% coverage ] ****** [272 done /190 queued / 16 running / 271 errors / 34% coverage ] ****** [273 done /191 queued / 16 running / 272 errors / 34% coverage ] ****** [273 done /191 queued / 16 running / 272 errors / 34% coverage ] ****** [274 done /190 queued / 16 running / 273 errors / 34% coverage ] ****** [274 done /190 queued / 16 running / 273 errors / 34% coverage ] ****** [275 done /193 queued / 16 running / 274 errors / 34% coverage ] ****** [275 done /193 queued / 16 running / 274 errors / 34% coverage ] ****** [276 done /192 queued / 16 running / 275 errors / 34% coverage ] ****** [276 done /192 queued / 16 running / 275 errors / 34% coverage ] ****** [277 done /192 queued / 16 running / 276 errors / 34% coverage ] ****** [277 done /192 queued / 16 running / 276 errors / 34% coverage ] ****** [278 done /193 queued / 16 running / 277 errors / 34% coverage ] ****** [278 done /193 queued / 16 running / 277 errors / 34% coverage ] ****** [279 done /194 queued / 16 running / 278 errors / 34% coverage ] ****** [279 done /194 queued / 16 running / 278 errors / 34% coverage ] ****** [280 done /195 queued / 16 running / 279 errors / 34% coverage ] ****** [280 done /195 queued / 16 running / 279 errors / 34% coverage ] ****** [281 done /194 queued / 16 running / 280 errors / 34% coverage ] ****** [281 done /194 queued / 16 running / 280 errors / 34% coverage ] ****** [282 done /194 queued / 16 running / 281 errors / 34% coverage ] ****** [282 done /194 queued / 16 running / 281 errors / 34% coverage ] ****** [283 done /194 queued / 16 running / 282 errors / 34% coverage ] ****** [283 done /194 queued / 16 running / 282 errors / 34% coverage ] ****** [284 done /196 queued / 16 running / 283 errors / 34% coverage ] ****** [284 done /196 queued / 16 running / 283 errors / 34% coverage ] ****** [285 done /197 queued / 16 running / 284 errors / 34% coverage ] ****** [285 done /197 queued / 16 running / 284 errors / 34% coverage ] ****** [286 done /202 queued / 16 running / 285 errors / 34% coverage ] ****** [286 done /202 queued / 16 running / 285 errors / 34% coverage ] ****** [287 done /205 queued / 16 running / 286 errors / 34% coverage ] ****** [287 done /205 queued / 16 running / 286 errors / 34% coverage ] ****** [288 done /207 queued / 16 running / 287 errors / 34% coverage ] ****** [288 done /207 queued / 16 running / 287 errors / 34% coverage ] ****** [289 done /207 queued / 16 running / 288 errors / 34% coverage ] ****** [289 done /207 queued / 16 running / 288 errors / 34% coverage ] ****** [290 done /206 queued / 16 running / 289 errors / 34% coverage ] ****** [290 done /206 queued / 16 running / 289 errors / 34% coverage ] ****** [291 done /208 queued / 16 running / 290 errors / 34% coverage ] ****** [291 done /208 queued / 16 running / 290 errors / 34% coverage ] ****** [292 done /207 queued / 16 running / 291 errors / 34% coverage ] ****** [292 done /207 queued / 16 running / 291 errors / 34% coverage ] ****** [293 done /206 queued / 16 running / 292 errors / 34% coverage ] ****** [293 done /206 queued / 16 running / 292 errors / 34% coverage ] ****** [294 done /207 queued / 16 running / 293 errors / 34% coverage ] ****** [294 done /207 queued / 16 running / 293 errors / 34% coverage ] ****** [295 done /209 queued / 16 running / 294 errors / 34% coverage ] ****** [295 done /209 queued / 16 running / 294 errors / 34% coverage ] ****** [296 done /210 queued / 16 running / 295 errors / 34% coverage ] ****** [296 done /210 queued / 16 running / 295 errors / 34% coverage ] ****** [297 done /213 queued / 16 running / 296 errors / 34% coverage ] ****** [297 done /213 queued / 16 running / 296 errors / 34% coverage ] ****** [298 done /218 queued / 16 running / 297 errors / 34% coverage ] ****** [298 done /218 queued / 16 running / 297 errors / 34% coverage ] ****** [299 done /222 queued / 16 running / 298 errors / 34% coverage ] ****** [299 done /222 queued / 16 running / 298 errors / 34% coverage ] ****** [300 done /223 queued / 16 running / 299 errors / 34% coverage ] ****** [300 done /223 queued / 16 running / 299 errors / 34% coverage ] ****** [301 done /224 queued / 16 running / 300 errors / 34% coverage ] ****** [301 done /224 queued / 16 running / 300 errors / 34% coverage ] ****** [302 done /225 queued / 16 running / 301 errors / 34% coverage ] ****** [302 done /225 queued / 16 running / 301 errors / 34% coverage ] ****** [303 done /228 queued / 16 running / 302 errors / 34% coverage ] ****** [303 done /228 queued / 16 running / 302 errors / 34% coverage ] ****** [304 done /228 queued / 16 running / 303 errors / 34% coverage ] ****** [304 done /228 queued / 16 running / 303 errors / 34% coverage ] ****** [305 done /228 queued / 16 running / 304 errors / 34% coverage ] ****** [305 done /228 queued / 16 running / 304 errors / 34% coverage ] ****** [306 done /229 queued / 16 running / 305 errors / 34% coverage ] ****** [306 done /229 queued / 16 running / 305 errors / 34% coverage ] ****** [307 done /230 queued / 16 running / 306 errors / 34% coverage ] ****** [307 done /230 queued / 16 running / 306 errors / 34% coverage ] ****** [308 done /234 queued / 16 running / 307 errors / 34% coverage ] ****** [308 done /234 queued / 16 running / 307 errors / 34% coverage ] ****** [309 done /235 queued / 16 running / 308 errors / 34% coverage ] ****** [309 done /235 queued / 16 running / 308 errors / 34% coverage ] ****** [310 done /236 queued / 16 running / 309 errors / 34% coverage ] ****** [310 done /236 queued / 16 running / 309 errors / 34% coverage ] ****** [311 done /237 queued / 16 running / 310 errors / 34% coverage ] ****** [311 done /237 queued / 16 running / 310 errors / 34% coverage ] ****** [312 done /239 queued / 16 running / 311 errors / 34% coverage ] ****** [312 done /239 queued / 16 running / 311 errors / 34% coverage ] ****** [313 done /240 queued / 16 running / 312 errors / 34% coverage ] ****** [313 done /240 queued / 16 running / 312 errors / 34% coverage ] ****** [314 done /239 queued / 16 running / 313 errors / 34% coverage ] ****** [314 done /239 queued / 16 running / 313 errors / 34% coverage ] ****** [315 done /241 queued / 16 running / 314 errors / 34% coverage ] ****** [315 done /241 queued / 16 running / 314 errors / 34% coverage ] ****** [316 done /240 queued / 16 running / 315 errors / 34% coverage ] ****** [316 done /240 queued / 16 running / 315 errors / 34% coverage ] ****** [317 done /241 queued / 16 running / 316 errors / 34% coverage ] ****** [317 done /241 queued / 16 running / 316 errors / 34% coverage ] ****** [318 done /242 queued / 16 running / 317 errors / 34% coverage ] ****** [318 done /242 queued / 16 running / 317 errors / 34% coverage ] ****** [319 done /243 queued / 16 running / 318 errors / 34% coverage ] ****** [319 done /243 queued / 16 running / 318 errors / 34% coverage ] ****** [320 done /243 queued / 16 running / 319 errors / 34% coverage ] ****** [320 done /243 queued / 16 running / 319 errors / 34% coverage ] ****** [321 done /244 queued / 16 running / 320 errors / 34% coverage ] ****** [321 done /244 queued / 16 running / 320 errors / 34% coverage ] ****** [322 done /246 queued / 16 running / 321 errors / 34% coverage ] ****** [322 done /246 queued / 16 running / 321 errors / 34% coverage ] ****** [323 done /247 queued / 16 running / 322 errors / 34% coverage ] ****** [323 done /247 queued / 16 running / 322 errors / 34% coverage ] ****** [324 done /249 queued / 16 running / 323 errors / 34% coverage ] ****** [324 done /249 queued / 16 running / 323 errors / 34% coverage ] ****** [325 done /249 queued / 16 running / 324 errors / 34% coverage ] ****** [325 done /249 queued / 16 running / 324 errors / 34% coverage ] ****** [326 done /248 queued / 16 running / 325 errors / 34% coverage ] ****** [326 done /248 queued / 16 running / 325 errors / 34% coverage ] ****** [327 done /249 queued / 16 running / 326 errors / 34% coverage ] ****** [327 done /249 queued / 16 running / 326 errors / 34% coverage ] ****** [328 done /250 queued / 16 running / 327 errors / 34% coverage ] ****** [328 done /250 queued / 16 running / 327 errors / 34% coverage ] ****** [329 done /250 queued / 16 running / 328 errors / 34% coverage ] ****** [329 done /250 queued / 16 running / 328 errors / 34% coverage ] ****** [330 done /251 queued / 16 running / 329 errors / 34% coverage ] ****** [330 done /251 queued / 16 running / 329 errors / 34% coverage ] ****** [331 done /250 queued / 16 running / 330 errors / 34% coverage ] ****** [331 done /250 queued / 16 running / 330 errors / 34% coverage ] ****** [332 done /249 queued / 16 running / 331 errors / 34% coverage ] ****** [332 done /249 queued / 16 running / 331 errors / 34% coverage ] ****** [333 done /249 queued / 16 running / 332 errors / 34% coverage ] ****** [333 done /249 queued / 16 running / 332 errors / 34% coverage ] ****** [334 done /248 queued / 16 running / 333 errors / 34% coverage ] ****** [334 done /248 queued / 16 running / 333 errors / 34% coverage ] ****** [335 done /250 queued / 16 running / 334 errors / 34% coverage ] ****** [335 done /250 queued / 16 running / 334 errors / 34% coverage ] ****** [336 done /251 queued / 16 running / 335 errors / 34% coverage ] ****** [336 done /251 queued / 16 running / 335 errors / 34% coverage ] ****** [337 done /251 queued / 16 running / 336 errors / 34% coverage ] ****** [337 done /251 queued / 16 running / 336 errors / 34% coverage ] ****** [338 done /250 queued / 16 running / 337 errors / 34% coverage ] ****** [338 done /250 queued / 16 running / 337 errors / 34% coverage ] ****** [339 done /252 queued / 16 running / 338 errors / 34% coverage ] ****** [339 done /252 queued / 16 running / 338 errors / 34% coverage ] ****** [340 done /254 queued / 16 running / 339 errors / 34% coverage ] ****** [340 done /254 queued / 16 running / 339 errors / 34% coverage ] ****** [341 done /254 queued / 16 running / 340 errors / 34% coverage ] ****** [341 done /254 queued / 16 running / 340 errors / 34% coverage ] ****** [342 done /253 queued / 16 running / 341 errors / 34% coverage ] ****** [342 done /253 queued / 16 running / 341 errors / 34% coverage ] ****** [343 done /252 queued / 16 running / 342 errors / 34% coverage ] ****** [343 done /252 queued / 16 running / 342 errors / 34% coverage ] ****** [344 done /256 queued / 16 running / 343 errors / 34% coverage ] ****** [344 done /256 queued / 16 running / 343 errors / 34% coverage ] ****** [345 done /261 queued / 16 running / 344 errors / 34% coverage ] ****** [345 done /261 queued / 16 running / 344 errors / 34% coverage ] ****** [346 done /260 queued / 16 running / 345 errors / 34% coverage ] ****** [346 done /260 queued / 16 running / 345 errors / 34% coverage ] ****** [347 done /262 queued / 16 running / 346 errors / 34% coverage ] ****** [347 done /262 queued / 16 running / 346 errors / 34% coverage ] ****** [348 done /263 queued / 16 running / 347 errors / 34% coverage ] ****** [348 done /263 queued / 16 running / 347 errors / 34% coverage ] ****** [349 done /264 queued / 16 running / 348 errors / 34% coverage ] ****** [349 done /264 queued / 16 running / 348 errors / 34% coverage ] ****** [350 done /263 queued / 16 running / 349 errors / 34% coverage ] ****** [350 done /263 queued / 16 running / 349 errors / 34% coverage ] ****** [351 done /264 queued / 16 running / 350 errors / 34% coverage ] ****** [351 done /264 queued / 16 running / 350 errors / 34% coverage ] ****** [352 done /266 queued / 16 running / 351 errors / 34% coverage ] ****** [352 done /266 queued / 16 running / 351 errors / 34% coverage ] ****** [353 done /271 queued / 16 running / 352 errors / 34% coverage ] ****** [353 done /271 queued / 16 running / 352 errors / 34% coverage ] ****** [354 done /272 queued / 16 running / 353 errors / 34% coverage ] ****** [354 done /272 queued / 16 running / 353 errors / 34% coverage ] ****** [355 done /272 queued / 16 running / 354 errors / 34% coverage ] ****** [355 done /272 queued / 16 running / 354 errors / 34% coverage ] ****** [356 done /271 queued / 16 running / 355 errors / 34% coverage ] ****** [356 done /271 queued / 16 running / 355 errors / 34% coverage ] ****** [357 done /271 queued / 16 running / 356 errors / 34% coverage ] ****** [357 done /271 queued / 16 running / 356 errors / 34% coverage ] ****** [358 done /270 queued / 16 running / 357 errors / 34% coverage ] ****** [358 done /270 queued / 16 running / 357 errors / 34% coverage ] ****** [359 done /271 queued / 16 running / 358 errors / 34% coverage ] ****** [359 done /271 queued / 16 running / 358 errors / 34% coverage ] ****** [360 done /273 queued / 16 running / 359 errors / 34% coverage ] ****** [360 done /273 queued / 16 running / 359 errors / 34% coverage ] ****** [361 done /273 queued / 16 running / 360 errors / 34% coverage ] ****** [361 done /273 queued / 16 running / 360 errors / 34% coverage ] ****** [362 done /275 queued / 16 running / 361 errors / 34% coverage ] ****** [362 done /275 queued / 16 running / 361 errors / 34% coverage ] ****** [363 done /277 queued / 16 running / 362 errors / 34% coverage ] ****** [363 done /277 queued / 16 running / 362 errors / 34% coverage ] ****** [364 done /279 queued / 16 running / 363 errors / 34% coverage ] ****** [364 done /279 queued / 16 running / 363 errors / 34% coverage ] ****** [365 done /279 queued / 16 running / 364 errors / 34% coverage ] ****** [365 done /279 queued / 16 running / 364 errors / 34% coverage ] ****** [366 done /280 queued / 16 running / 365 errors / 34% coverage ] ****** [366 done /280 queued / 16 running / 365 errors / 34% coverage ] ****** [367 done /282 queued / 16 running / 366 errors / 34% coverage ] ****** [367 done /282 queued / 16 running / 366 errors / 34% coverage ] ****** [368 done /283 queued / 16 running / 367 errors / 34% coverage ] ****** [368 done /283 queued / 16 running / 367 errors / 34% coverage ] ****** [369 done /283 queued / 16 running / 368 errors / 34% coverage ] ****** [369 done /283 queued / 16 running / 368 errors / 34% coverage ] ****** [370 done /285 queued / 16 running / 369 errors / 34% coverage ] ****** [370 done /285 queued / 16 running / 369 errors / 34% coverage ] ****** [371 done /286 queued / 16 running / 370 errors / 34% coverage ] ****** [371 done /286 queued / 16 running / 370 errors / 34% coverage ] ****** [372 done /287 queued / 16 running / 371 errors / 34% coverage ] ****** [372 done /287 queued / 16 running / 371 errors / 34% coverage ] ****** [373 done /287 queued / 16 running / 372 errors / 34% coverage ] ****** [373 done /287 queued / 16 running / 372 errors / 34% coverage ] ****** [374 done /289 queued / 16 running / 373 errors / 34% coverage ] ****** [374 done /289 queued / 16 running / 373 errors / 34% coverage ] ****** [375 done /288 queued / 16 running / 374 errors / 34% coverage ] ****** [375 done /288 queued / 16 running / 374 errors / 34% coverage ] ****** [376 done /287 queued / 16 running / 375 errors / 34% coverage ] ****** [376 done /287 queued / 16 running / 375 errors / 34% coverage ] ****** [377 done /289 queued / 16 running / 376 errors / 34% coverage ] ****** [377 done /289 queued / 16 running / 376 errors / 34% coverage ] ****** [378 done /293 queued / 16 running / 377 errors / 34% coverage ] ****** [378 done /293 queued / 16 running / 377 errors / 34% coverage ] ****** [379 done /295 queued / 16 running / 378 errors / 34% coverage ] ****** [379 done /295 queued / 16 running / 378 errors / 34% coverage ] ****** [380 done /294 queued / 16 running / 379 errors / 34% coverage ] ****** [380 done /294 queued / 16 running / 379 errors / 34% coverage ] ****** [381 done /298 queued / 16 running / 380 errors / 34% coverage ] ****** [381 done /298 queued / 16 running / 380 errors / 34% coverage ] ****** [382 done /299 queued / 16 running / 381 errors / 34% coverage ] ****** [382 done /299 queued / 16 running / 381 errors / 34% coverage ] ****** [383 done /300 queued / 16 running / 382 errors / 34% coverage ] ****** [383 done /300 queued / 16 running / 382 errors / 34% coverage ] ****** [384 done /301 queued / 16 running / 383 errors / 34% coverage ] ****** [384 done /301 queued / 16 running / 383 errors / 34% coverage ] ****** [385 done /304 queued / 16 running / 384 errors / 34% coverage ] ****** [385 done /304 queued / 16 running / 384 errors / 34% coverage ] ****** [386 done /307 queued / 16 running / 385 errors / 34% coverage ] ****** [386 done /307 queued / 16 running / 385 errors / 34% coverage ] ****** [387 done /309 queued / 16 running / 386 errors / 34% coverage ] ****** [387 done /309 queued / 16 running / 386 errors / 34% coverage ] ****** [388 done /310 queued / 16 running / 387 errors / 34% coverage ] ****** [388 done /310 queued / 16 running / 387 errors / 34% coverage ] ****** [389 done /312 queued / 16 running / 388 errors / 34% coverage ] ****** [389 done /312 queued / 16 running / 388 errors / 34% coverage ] ****** [390 done /316 queued / 16 running / 389 errors / 34% coverage ] ****** [390 done /316 queued / 16 running / 389 errors / 34% coverage ] ****** [391 done /315 queued / 16 running / 390 errors / 34% coverage ] ****** [391 done /315 queued / 16 running / 390 errors / 34% coverage ] ****** [392 done /317 queued / 16 running / 391 errors / 34% coverage ] ****** [392 done /317 queued / 16 running / 391 errors / 34% coverage ] ****** [393 done /317 queued / 16 running / 392 errors / 34% coverage ] ****** [393 done /317 queued / 16 running / 392 errors / 34% coverage ] ****** [394 done /318 queued / 16 running / 393 errors / 34% coverage ] ****** [394 done /318 queued / 16 running / 393 errors / 34% coverage ] ****** [395 done /322 queued / 16 running / 394 errors / 34% coverage ] ****** [395 done /322 queued / 16 running / 394 errors / 34% coverage ] ****** [396 done /324 queued / 16 running / 395 errors / 34% coverage ] ****** [396 done /324 queued / 16 running / 395 errors / 34% coverage ] ****** [397 done /325 queued / 16 running / 396 errors / 34% coverage ] ****** [397 done /325 queued / 16 running / 396 errors / 34% coverage ] ****** [398 done /325 queued / 16 running / 397 errors / 34% coverage ] ****** [398 done /325 queued / 16 running / 397 errors / 34% coverage ] ****** [399 done /328 queued / 16 running / 398 errors / 34% coverage ] ****** [399 done /328 queued / 16 running / 398 errors / 34% coverage ] ****** [400 done /329 queued / 16 running / 399 errors / 34% coverage ] ****** [400 done /329 queued / 16 running / 399 errors / 34% coverage ] ****** [401 done /329 queued / 16 running / 400 errors / 34% coverage ] ****** [401 done /329 queued / 16 running / 400 errors / 34% coverage ] ****** [402 done /330 queued / 16 running / 401 errors / 34% coverage ] ****** [402 done /330 queued / 16 running / 401 errors / 34% coverage ] ****** [403 done /333 queued / 16 running / 402 errors / 34% coverage ] ****** [403 done /333 queued / 16 running / 402 errors / 34% coverage ] ****** [404 done /334 queued / 16 running / 403 errors / 34% coverage ] ****** [404 done /334 queued / 16 running / 403 errors / 34% coverage ] ****** [405 done /333 queued / 16 running / 404 errors / 34% coverage ] ****** [405 done /333 queued / 16 running / 404 errors / 34% coverage ] ****** [406 done /335 queued / 16 running / 405 errors / 34% coverage ] ****** [406 done /335 queued / 16 running / 405 errors / 34% coverage ] ****** [407 done /336 queued / 16 running / 406 errors / 34% coverage ] ****** [407 done /336 queued / 16 running / 406 errors / 34% coverage ] ****** [408 done /338 queued / 16 running / 407 errors / 34% coverage ] ****** [408 done /338 queued / 16 running / 407 errors / 34% coverage ] ****** [409 done /337 queued / 16 running / 408 errors / 34% coverage ] ****** [409 done /337 queued / 16 running / 408 errors / 34% coverage ] ****** [410 done /338 queued / 16 running / 409 errors / 34% coverage ] ****** [410 done /338 queued / 16 running / 409 errors / 34% coverage ] ****** [411 done /339 queued / 16 running / 410 errors / 34% coverage ] ****** [411 done /339 queued / 16 running / 410 errors / 34% coverage ] ****** [412 done /340 queued / 16 running / 411 errors / 34% coverage ] ****** [412 done /340 queued / 16 running / 411 errors / 34% coverage ] ****** [413 done /342 queued / 16 running / 412 errors / 34% coverage ] ****** [413 done /342 queued / 16 running / 412 errors / 34% coverage ] ****** [414 done /344 queued / 16 running / 413 errors / 34% coverage ] ****** [414 done /344 queued / 16 running / 413 errors / 34% coverage ] ****** [415 done /345 queued / 16 running / 414 errors / 34% coverage ] ****** [415 done /345 queued / 16 running / 414 errors / 34% coverage ] ****** [416 done /347 queued / 16 running / 415 errors / 34% coverage ] ****** [416 done /347 queued / 16 running / 415 errors / 34% coverage ] ****** [417 done /346 queued / 16 running / 416 errors / 34% coverage ] ****** [417 done /346 queued / 16 running / 416 errors / 34% coverage ] ****** [418 done /345 queued / 16 running / 417 errors / 34% coverage ] ****** [418 done /345 queued / 16 running / 417 errors / 34% coverage ] ****** [419 done /347 queued / 16 running / 418 errors / 34% coverage ] ****** [419 done /347 queued / 16 running / 418 errors / 34% coverage ] ****** [420 done /347 queued / 16 running / 419 errors / 34% coverage ] ****** [420 done /347 queued / 16 running / 419 errors / 34% coverage ] ****** [421 done /346 queued / 16 running / 420 errors / 34% coverage ] ****** [421 done /346 queued / 16 running / 420 errors / 34% coverage ] ****** [422 done /346 queued / 16 running / 421 errors / 34% coverage ] ****** [422 done /346 queued / 16 running / 421 errors / 34% coverage ] ****** [423 done /346 queued / 16 running / 422 errors / 34% coverage ] ****** [423 done /346 queued / 16 running / 422 errors / 34% coverage ] ****** [424 done /350 queued / 16 running / 423 errors / 34% coverage ] ****** [424 done /350 queued / 16 running / 423 errors / 34% coverage ] ****** [425 done /350 queued / 16 running / 424 errors / 34% coverage ] ****** [425 done /350 queued / 16 running / 424 errors / 34% coverage ] ****** [426 done /352 queued / 16 running / 425 errors / 34% coverage ] ****** [426 done /352 queued / 16 running / 425 errors / 34% coverage ] ****** [427 done /353 queued / 16 running / 426 errors / 34% coverage ] ****** [427 done /353 queued / 16 running / 426 errors / 34% coverage ] ****** [428 done /355 queued / 16 running / 427 errors / 34% coverage ] ****** [428 done /355 queued / 16 running / 427 errors / 34% coverage ] ****** [429 done /354 queued / 16 running / 428 errors / 34% coverage ] ****** [429 done /354 queued / 16 running / 428 errors / 34% coverage ] ****** [430 done /359 queued / 16 running / 429 errors / 34% coverage ] ****** [430 done /359 queued / 16 running / 429 errors / 34% coverage ] ****** [431 done /360 queued / 16 running / 430 errors / 34% coverage ] ****** [431 done /360 queued / 16 running / 430 errors / 34% coverage ] ****** [432 done /362 queued / 16 running / 431 errors / 34% coverage ] ****** [432 done /362 queued / 16 running / 431 errors / 34% coverage ] ****** [433 done /364 queued / 16 running / 432 errors / 34% coverage ] ****** [433 done /364 queued / 16 running / 432 errors / 34% coverage ] ****** [434 done /365 queued / 16 running / 433 errors / 34% coverage ] ****** [434 done /365 queued / 16 running / 433 errors / 34% coverage ] ****** [435 done /368 queued / 16 running / 434 errors / 34% coverage ] ****** [435 done /368 queued / 16 running / 434 errors / 34% coverage ] ****** [436 done /369 queued / 16 running / 435 errors / 34% coverage ] ****** [436 done /369 queued / 16 running / 435 errors / 34% coverage ] ****** [437 done /369 queued / 16 running / 436 errors / 34% coverage ] ****** [437 done /369 queued / 16 running / 436 errors / 34% coverage ] ****** [438 done /373 queued / 16 running / 437 errors / 34% coverage ] ****** [438 done /373 queued / 16 running / 437 errors / 34% coverage ] ****** [439 done /372 queued / 16 running / 438 errors / 34% coverage ] ****** [439 done /372 queued / 16 running / 438 errors / 34% coverage ] ****** [440 done /375 queued / 16 running / 439 errors / 34% coverage ] ****** [440 done /375 queued / 16 running / 439 errors / 34% coverage ] ****** [441 done /377 queued / 16 running / 440 errors / 34% coverage ] ****** [441 done /377 queued / 16 running / 440 errors / 34% coverage ] ****** [442 done /378 queued / 16 running / 441 errors / 34% coverage ] ****** [442 done /378 queued / 16 running / 441 errors / 34% coverage ] ****** [443 done /379 queued / 16 running / 442 errors / 34% coverage ] ****** [443 done /379 queued / 16 running / 442 errors / 34% coverage ] ****** [444 done /381 queued / 16 running / 443 errors / 34% coverage ] ****** [444 done /381 queued / 16 running / 443 errors / 34% coverage ] ****** [445 done /382 queued / 16 running / 444 errors / 34% coverage ] ****** [445 done /382 queued / 16 running / 444 errors / 34% coverage ] ****** [446 done /384 queued / 16 running / 445 errors / 34% coverage ] ****** [446 done /384 queued / 16 running / 445 errors / 34% coverage ] ****** [447 done /387 queued / 16 running / 446 errors / 34% coverage ] ****** [447 done /387 queued / 16 running / 446 errors / 34% coverage ] ****** [448 done /386 queued / 16 running / 447 errors / 34% coverage ] ****** [448 done /386 queued / 16 running / 447 errors / 34% coverage ] ****** [449 done /387 queued / 16 running / 448 errors / 34% coverage ] ****** [449 done /387 queued / 16 running / 448 errors / 34% coverage ] ****** [450 done /389 queued / 16 running / 449 errors / 34% coverage ] ****** [450 done /389 queued / 16 running / 449 errors / 34% coverage ] ****** [451 done /390 queued / 16 running / 450 errors / 34% coverage ] ****** [451 done /390 queued / 16 running / 450 errors / 34% coverage ] ****** [452 done /392 queued / 16 running / 451 errors / 34% coverage ] ****** [452 done /392 queued / 16 running / 451 errors / 34% coverage ] ****** [453 done /396 queued / 16 running / 452 errors / 34% coverage ] ****** [453 done /396 queued / 16 running / 452 errors / 34% coverage ] ****** [454 done /396 queued / 16 running / 453 errors / 34% coverage ] ****** [454 done /396 queued / 16 running / 453 errors / 34% coverage ] ****** [455 done /398 queued / 16 running / 454 errors / 34% coverage ] ****** [455 done /398 queued / 16 running / 454 errors / 34% coverage ] ****** [456 done /398 queued / 16 running / 455 errors / 34% coverage ] ****** [456 done /398 queued / 16 running / 455 errors / 34% coverage ] ****** [457 done /400 queued / 16 running / 456 errors / 34% coverage ] ****** [457 done /400 queued / 16 running / 456 errors / 34% coverage ] ****** [458 done /401 queued / 16 running / 457 errors / 34% coverage ] ****** [458 done /401 queued / 16 running / 457 errors / 34% coverage ] ****** [459 done /403 queued / 16 running / 458 errors / 34% coverage ] ****** [459 done /403 queued / 16 running / 458 errors / 34% coverage ] ****** [460 done /403 queued / 16 running / 459 errors / 34% coverage ] ****** [460 done /403 queued / 16 running / 459 errors / 34% coverage ] ****** [461 done /404 queued / 16 running / 460 errors / 34% coverage ] ****** [461 done /404 queued / 16 running / 460 errors / 34% coverage ] ****** [462 done /406 queued / 16 running / 461 errors / 34% coverage ] ****** [462 done /406 queued / 16 running / 461 errors / 34% coverage ] ****** [463 done /409 queued / 16 running / 462 errors / 34% coverage ] ****** [463 done /409 queued / 16 running / 462 errors / 34% coverage ] ****** [464 done /408 queued / 16 running / 463 errors / 34% coverage ] ****** [464 done /408 queued / 16 running / 463 errors / 34% coverage ] ****** [465 done /407 queued / 16 running / 464 errors / 34% coverage ] ****** [465 done /407 queued / 16 running / 464 errors / 34% coverage ] ****** [466 done /406 queued / 16 running / 465 errors / 34% coverage ] ****** [466 done /406 queued / 16 running / 465 errors / 34% coverage ] ****** [467 done /406 queued / 16 running / 466 errors / 34% coverage ] ****** [467 done /406 queued / 16 running / 466 errors / 34% coverage ] ****** [468 done /407 queued / 16 running / 467 errors / 34% coverage ] ****** [468 done /407 queued / 16 running / 467 errors / 34% coverage ] ****** [469 done /408 queued / 16 running / 468 errors / 34% coverage ] ****** [469 done /408 queued / 16 running / 468 errors / 34% coverage ] ****** [470 done /409 queued / 16 running / 469 errors / 34% coverage ] ****** [470 done /409 queued / 16 running / 469 errors / 34% coverage ] ****** [471 done /408 queued / 16 running / 470 errors / 34% coverage ] ****** [471 done /408 queued / 16 running / 470 errors / 34% coverage ] ****** [472 done /407 queued / 16 running / 471 errors / 34% coverage ] ****** [472 done /407 queued / 16 running / 471 errors / 34% coverage ] ****** [473 done /410 queued / 16 running / 472 errors / 34% coverage ] ****** [473 done /410 queued / 16 running / 472 errors / 34% coverage ] ****** [474 done /412 queued / 16 running / 473 errors / 34% coverage ] ****** [474 done /412 queued / 16 running / 473 errors / 34% coverage ] ****** [475 done /414 queued / 16 running / 474 errors / 34% coverage ] ****** [475 done /414 queued / 16 running / 474 errors / 34% coverage ] ****** [476 done /415 queued / 16 running / 475 errors / 34% coverage ] ****** [476 done /415 queued / 16 running / 475 errors / 34% coverage ] ****** [477 done /418 queued / 16 running / 476 errors / 34% coverage ] ****** [477 done /418 queued / 16 running / 476 errors / 34% coverage ] ****** [478 done /420 queued / 16 running / 477 errors / 34% coverage ] ****** [478 done /420 queued / 16 running / 477 errors / 34% coverage ] ****** [479 done /421 queued / 16 running / 478 errors / 34% coverage ] ****** [479 done /421 queued / 16 running / 478 errors / 34% coverage ] ****** [480 done /426 queued / 16 running / 479 errors / 34% coverage ] ****** [480 done /426 queued / 16 running / 479 errors / 34% coverage ] ****** [481 done /425 queued / 16 running / 480 errors / 34% coverage ] ****** [481 done /425 queued / 16 running / 480 errors / 34% coverage ] ****** [482 done /427 queued / 16 running / 481 errors / 34% coverage ] ****** [482 done /427 queued / 16 running / 481 errors / 34% coverage ] ****** [483 done /429 queued / 16 running / 482 errors / 34% coverage ] ****** [483 done /429 queued / 16 running / 482 errors / 34% coverage ] ****** [484 done /430 queued / 16 running / 483 errors / 34% coverage ] ****** [484 done /430 queued / 16 running / 483 errors / 34% coverage ] ****** [485 done /433 queued / 16 running / 484 errors / 34% coverage ] ****** [485 done /433 queued / 16 running / 484 errors / 34% coverage ] ****** [486 done /435 queued / 16 running / 485 errors / 34% coverage ] ****** [486 done /435 queued / 16 running / 485 errors / 34% coverage ] ****** [487 done /437 queued / 16 running / 486 errors / 34% coverage ] ****** [487 done /437 queued / 16 running / 486 errors / 34% coverage ] ****** [488 done /438 queued / 16 running / 487 errors / 34% coverage ] ****** [488 done /438 queued / 16 running / 487 errors / 34% coverage ] ****** [489 done /437 queued / 16 running / 488 errors / 34% coverage ] ****** [489 done /437 queued / 16 running / 488 errors / 34% coverage ] ****** [490 done /439 queued / 16 running / 489 errors / 34% coverage ] ****** [490 done /439 queued / 16 running / 489 errors / 34% coverage ] ****** [491 done /438 queued / 16 running / 490 errors / 34% coverage ] ****** [491 done /438 queued / 16 running / 490 errors / 34% coverage ] ****** [492 done /438 queued / 16 running / 491 errors / 34% coverage ] ****** [492 done /438 queued / 16 running / 491 errors / 34% coverage ] ****** [493 done /440 queued / 16 running / 492 errors / 34% coverage ] ****** [493 done /440 queued / 16 running / 492 errors / 34% coverage ] ****** [494 done /442 queued / 16 running / 493 errors / 34% coverage ] ****** [494 done /442 queued / 16 running / 493 errors / 34% coverage ] ****** [495 done /443 queued / 16 running / 494 errors / 34% coverage ] ****** [495 done /443 queued / 16 running / 494 errors / 34% coverage ] ****** [496 done /444 queued / 16 running / 495 errors / 34% coverage ] ****** [496 done /444 queued / 16 running / 495 errors / 34% coverage ] ****** [497 done /443 queued / 16 running / 496 errors / 34% coverage ] ****** [497 done /443 queued / 16 running / 496 errors / 34% coverage ] ****** [498 done /442 queued / 16 running / 497 errors / 34% coverage ] ****** [498 done /442 queued / 16 running / 497 errors / 34% coverage ] ****** [499 done /443 queued / 16 running / 498 errors / 34% coverage ] ****** [499 done /443 queued / 16 running / 498 errors / 34% coverage ] ****** [500 done /445 queued / 16 running / 499 errors / 34% coverage ] ****** [500 done /445 queued / 16 running / 499 errors / 34% coverage ] ****** [501 done /448 queued / 16 running / 500 errors / 34% coverage ] ****** [501 done /448 queued / 16 running / 500 errors / 34% coverage ] ****** [502 done /448 queued / 16 running / 501 errors / 34% coverage ] ****** [502 done /448 queued / 16 running / 501 errors / 34% coverage ] ****** [503 done /449 queued / 16 running / 502 errors / 34% coverage ] ****** [503 done /449 queued / 16 running / 502 errors / 34% coverage ] ****** [504 done /451 queued / 16 running / 503 errors / 34% coverage ] ****** [504 done /451 queued / 16 running / 503 errors / 34% coverage ] ****** [505 done /452 queued / 16 running / 504 errors / 34% coverage ] ****** [505 done /452 queued / 16 running / 504 errors / 34% coverage ] ****** [506 done /453 queued / 16 running / 505 errors / 34% coverage ] ****** [506 done /453 queued / 16 running / 505 errors / 34% coverage ] ****** [507 done /455 queued / 16 running / 506 errors / 34% coverage ] ****** [507 done /455 queued / 16 running / 506 errors / 34% coverage ] ****** [508 done /456 queued / 16 running / 507 errors / 34% coverage ] ****** [508 done /456 queued / 16 running / 507 errors / 34% coverage ] ****** [509 done /457 queued / 16 running / 508 errors / 34% coverage ] ****** [509 done /457 queued / 16 running / 508 errors / 34% coverage ] ****** [510 done /458 queued / 16 running / 509 errors / 34% coverage ] ****** [510 done /458 queued / 16 running / 509 errors / 34% coverage ] ****** [511 done /461 queued / 16 running / 510 errors / 34% coverage ] ****** [511 done /461 queued / 16 running / 510 errors / 34% coverage ] ****** [512 done /461 queued / 16 running / 511 errors / 34% coverage ] ****** [512 done /461 queued / 16 running / 511 errors / 34% coverage ] ****** [513 done /462 queued / 16 running / 512 errors / 34% coverage ] ****** [513 done /462 queued / 16 running / 512 errors / 34% coverage ] ****** [514 done /466 queued / 16 running / 513 errors / 34% coverage ] ****** [514 done /466 queued / 16 running / 513 errors / 34% coverage ] ****** [515 done /465 queued / 16 running / 514 errors / 34% coverage ] ****** [515 done /465 queued / 16 running / 514 errors / 34% coverage ] ****** [516 done /464 queued / 16 running / 515 errors / 34% coverage ] ****** [516 done /464 queued / 16 running / 515 errors / 34% coverage ] ****** [517 done /465 queued / 16 running / 516 errors / 34% coverage ] ****** [517 done /465 queued / 16 running / 516 errors / 34% coverage ] ****** [518 done /464 queued / 16 running / 517 errors / 34% coverage ] ****** [518 done /464 queued / 16 running / 517 errors / 34% coverage ] ****** [519 done /466 queued / 16 running / 518 errors / 34% coverage ] ****** [519 done /466 queued / 16 running / 518 errors / 34% coverage ] ****** [520 done /467 queued / 16 running / 519 errors / 34% coverage ] ****** [520 done /467 queued / 16 running / 519 errors / 34% coverage ] ****** [521 done /468 queued / 16 running / 520 errors / 34% coverage ] ****** [521 done /468 queued / 16 running / 520 errors / 34% coverage ] ****** [522 done /470 queued / 16 running / 521 errors / 34% coverage ] ****** [522 done /470 queued / 16 running / 521 errors / 34% coverage ] ****** [523 done /471 queued / 16 running / 522 errors / 34% coverage ] ****** [523 done /471 queued / 16 running / 522 errors / 34% coverage ] ****** [524 done /472 queued / 16 running / 523 errors / 34% coverage ] ****** [524 done /472 queued / 16 running / 523 errors / 34% coverage ] ****** [525 done /473 queued / 16 running / 524 errors / 34% coverage ] ****** [525 done /473 queued / 16 running / 524 errors / 34% coverage ] ****** [526 done /475 queued / 16 running / 525 errors / 34% coverage ] ****** [526 done /475 queued / 16 running / 525 errors / 34% coverage ] ****** [527 done /476 queued / 16 running / 526 errors / 34% coverage ] ****** [527 done /476 queued / 16 running / 526 errors / 34% coverage ] ****** [528 done /478 queued / 16 running / 527 errors / 34% coverage ] ****** [528 done /478 queued / 16 running / 527 errors / 34% coverage ] ****** [529 done /477 queued / 16 running / 528 errors / 34% coverage ] ****** [529 done /477 queued / 16 running / 528 errors / 34% coverage ] ****** [530 done /478 queued / 16 running / 529 errors / 34% coverage ] ****** [530 done /478 queued / 16 running / 529 errors / 34% coverage ] ****** [531 done /480 queued / 16 running / 530 errors / 34% coverage ] ****** [531 done /480 queued / 16 running / 530 errors / 34% coverage ] ****** [532 done /481 queued / 16 running / 531 errors / 34% coverage ] ****** [532 done /481 queued / 16 running / 531 errors / 34% coverage ] ****** [533 done /483 queued / 16 running / 532 errors / 34% coverage ] ****** [533 done /483 queued / 16 running / 532 errors / 34% coverage ] ****** [534 done /483 queued / 16 running / 533 errors / 34% coverage ] ****** [534 done /483 queued / 16 running / 533 errors / 34% coverage ] ****** [535 done /486 queued / 16 running / 534 errors / 34% coverage ] ****** [535 done /486 queued / 16 running / 534 errors / 34% coverage ] ****** [536 done /488 queued / 16 running / 535 errors / 34% coverage ] ****** [536 done /488 queued / 16 running / 535 errors / 34% coverage ] ****** [537 done /490 queued / 16 running / 536 errors / 34% coverage ] ****** [537 done /490 queued / 16 running / 536 errors / 34% coverage ] ****** [538 done /492 queued / 16 running / 537 errors / 34% coverage ] ****** [538 done /492 queued / 16 running / 537 errors / 34% coverage ] ****** [539 done /492 queued / 16 running / 538 errors / 34% coverage ] ****** [539 done /492 queued / 16 running / 538 errors / 34% coverage ] ****** [540 done /493 queued / 16 running / 539 errors / 34% coverage ] ****** [540 done /493 queued / 16 running / 539 errors / 34% coverage ] ****** [541 done /494 queued / 16 running / 540 errors / 34% coverage ] ****** [541 done /494 queued / 16 running / 540 errors / 34% coverage ] ****** [542 done /496 queued / 16 running / 541 errors / 34% coverage ] ****** [542 done /496 queued / 16 running / 541 errors / 34% coverage ] ****** [543 done /495 queued / 16 running / 542 errors / 34% coverage ] ****** [543 done /495 queued / 16 running / 542 errors / 34% coverage ] ****** [544 done /494 queued / 16 running / 543 errors / 34% coverage ] ****** [544 done /494 queued / 16 running / 543 errors / 34% coverage ] ****** [545 done /496 queued / 16 running / 544 errors / 34% coverage ] ****** [545 done /496 queued / 16 running / 544 errors / 34% coverage ] ****** [546 done /498 queued / 16 running / 545 errors / 34% coverage ] ****** [546 done /498 queued / 16 running / 545 errors / 34% coverage ] ****** [547 done /499 queued / 16 running / 546 errors / 34% coverage ] ****** [547 done /499 queued / 16 running / 546 errors / 34% coverage ] ****** [548 done /501 queued / 16 running / 547 errors / 34% coverage ] ****** [548 done /501 queued / 16 running / 547 errors / 34% coverage ] ****** [549 done /503 queued / 16 running / 548 errors / 34% coverage ] ****** [549 done /503 queued / 16 running / 548 errors / 34% coverage ] ****** [550 done /504 queued / 16 running / 549 errors / 34% coverage ] ****** [550 done /504 queued / 16 running / 549 errors / 34% coverage ] ****** [551 done /507 queued / 16 running / 550 errors / 34% coverage ] ****** [551 done /507 queued / 16 running / 550 errors / 34% coverage ] ****** [552 done /506 queued / 16 running / 551 errors / 34% coverage ] ****** [552 done /506 queued / 16 running / 551 errors / 34% coverage ] ****** [553 done /505 queued / 16 running / 552 errors / 34% coverage ] ****** [553 done /505 queued / 16 running / 552 errors / 34% coverage ] ****** [554 done /507 queued / 16 running / 553 errors / 34% coverage ] ****** [554 done /507 queued / 16 running / 553 errors / 34% coverage ] ****** [555 done /509 queued / 16 running / 554 errors / 34% coverage ] ****** [555 done /509 queued / 16 running / 554 errors / 34% coverage ] ****** [556 done /512 queued / 16 running / 555 errors / 34% coverage ] ****** [556 done /512 queued / 16 running / 555 errors / 34% coverage ] ****** [557 done /513 queued / 16 running / 556 errors / 34% coverage ] ****** [557 done /513 queued / 16 running / 556 errors / 34% coverage ] ****** [558 done /514 queued / 16 running / 557 errors / 34% coverage ] ****** [558 done /514 queued / 16 running / 557 errors / 34% coverage ] ****** [559 done /515 queued / 16 running / 558 errors / 34% coverage ] ****** [559 done /515 queued / 16 running / 558 errors / 34% coverage ] ****** [560 done /515 queued / 16 running / 559 errors / 34% coverage ] ****** [560 done /515 queued / 16 running / 559 errors / 34% coverage ] ****** [561 done /515 queued / 16 running / 560 errors / 34% coverage ] ****** [561 done /515 queued / 16 running / 560 errors / 34% coverage ] ****** [562 done /515 queued / 16 running / 561 errors / 34% coverage ] ****** [562 done /515 queued / 16 running / 561 errors / 34% coverage ] ****** [563 done /514 queued / 16 running / 562 errors / 34% coverage ] ****** [563 done /514 queued / 16 running / 562 errors / 34% coverage ] ****** [564 done /515 queued / 16 running / 563 errors / 34% coverage ] ****** [564 done /515 queued / 16 running / 563 errors / 34% coverage ] ****** [565 done /514 queued / 16 running / 564 errors / 34% coverage ] ****** [565 done /514 queued / 16 running / 564 errors / 34% coverage ] ****** [566 done /515 queued / 16 running / 565 errors / 34% coverage ] ****** [566 done /515 queued / 16 running / 565 errors / 34% coverage ] ****** [567 done /516 queued / 16 running / 566 errors / 34% coverage ] ****** [567 done /516 queued / 16 running / 566 errors / 34% coverage ] ****** [568 done /515 queued / 16 running / 567 errors / 34% coverage ] ****** [568 done /515 queued / 16 running / 567 errors / 34% coverage ] ****** [569 done /518 queued / 16 running / 568 errors / 34% coverage ] ****** [569 done /518 queued / 16 running / 568 errors / 34% coverage ] ****** [570 done /517 queued / 16 running / 569 errors / 34% coverage ] ****** [570 done /517 queued / 16 running / 569 errors / 34% coverage ] ****** [571 done /520 queued / 16 running / 570 errors / 34% coverage ] ****** [571 done /520 queued / 16 running / 570 errors / 34% coverage ] ****** [572 done /520 queued / 16 running / 571 errors / 34% coverage ] ****** [572 done /520 queued / 16 running / 571 errors / 34% coverage ] ****** [573 done /520 queued / 16 running / 572 errors / 34% coverage ] ****** [573 done /520 queued / 16 running / 572 errors / 34% coverage ] ****** [574 done /522 queued / 16 running / 573 errors / 34% coverage ] ****** [574 done /522 queued / 16 running / 573 errors / 34% coverage ] ****** [575 done /521 queued / 16 running / 574 errors / 34% coverage ] ****** [575 done /521 queued / 16 running / 574 errors / 34% coverage ] ****** [576 done /521 queued / 16 running / 575 errors / 34% coverage ] ****** [576 done /521 queued / 16 running / 575 errors / 34% coverage ] ****** [577 done /520 queued / 16 running / 576 errors / 34% coverage ] ****** [577 done /520 queued / 16 running / 576 errors / 34% coverage ] ****** [578 done /519 queued / 16 running / 577 errors / 34% coverage ] ****** [578 done /519 queued / 16 running / 577 errors / 34% coverage ] ****** [579 done /518 queued / 16 running / 578 errors / 34% coverage ] ****** [579 done /518 queued / 16 running / 578 errors / 34% coverage ] ****** [580 done /517 queued / 16 running / 579 errors / 34% coverage ] ****** [580 done /517 queued / 16 running / 579 errors / 34% coverage ] ****** [581 done /516 queued / 16 running / 580 errors / 34% coverage ] ****** [581 done /516 queued / 16 running / 580 errors / 34% coverage ] ****** [582 done /515 queued / 16 running / 581 errors / 34% coverage ] ****** [582 done /515 queued / 16 running / 581 errors / 34% coverage ] ****** [583 done /519 queued / 16 running / 582 errors / 34% coverage ] ****** [583 done /519 queued / 16 running / 582 errors / 34% coverage ] ****** [584 done /520 queued / 16 running / 583 errors / 34% coverage ] ****** [584 done /520 queued / 16 running / 583 errors / 34% coverage ] ****** [585 done /519 queued / 16 running / 584 errors / 34% coverage ] ****** [585 done /519 queued / 16 running / 584 errors / 34% coverage ] ****** [586 done /518 queued / 16 running / 585 errors / 34% coverage ] ****** [586 done /518 queued / 16 running / 585 errors / 34% coverage ] ****** [587 done /517 queued / 16 running / 586 errors / 34% coverage ] ****** [587 done /517 queued / 16 running / 586 errors / 34% coverage ] ****** [588 done /517 queued / 16 running / 587 errors / 34% coverage ] ****** [588 done /517 queued / 16 running / 587 errors / 34% coverage ] ****** [589 done /518 queued / 16 running / 588 errors / 34% coverage ] ****** [589 done /518 queued / 16 running / 588 errors / 34% coverage ] ****** [590 done /517 queued / 16 running / 589 errors / 34% coverage ] ****** [590 done /517 queued / 16 running / 589 errors / 34% coverage ] ****** [591 done /518 queued / 16 running / 590 errors / 34% coverage ] ****** [591 done /518 queued / 16 running / 590 errors / 34% coverage ] ****** [592 done /519 queued / 16 running / 591 errors / 34% coverage ] ****** [592 done /519 queued / 16 running / 591 errors / 34% coverage ] ****** [593 done /519 queued / 16 running / 592 errors / 34% coverage ] ****** [593 done /519 queued / 16 running / 592 errors / 34% coverage ] ****** [594 done /521 queued / 16 running / 593 errors / 34% coverage ] ****** [594 done /521 queued / 16 running / 593 errors / 34% coverage ] ****** [595 done /521 queued / 16 running / 594 errors / 34% coverage ] ****** [595 done /521 queued / 16 running / 594 errors / 34% coverage ] ****** [596 done /524 queued / 16 running / 595 errors / 34% coverage ] ****** [596 done /524 queued / 16 running / 595 errors / 34% coverage ] ****** [597 done /525 queued / 16 running / 596 errors / 34% coverage ] ****** [597 done /525 queued / 16 running / 596 errors / 34% coverage ] ****** [598 done /524 queued / 16 running / 597 errors / 34% coverage ] ****** [598 done /524 queued / 16 running / 597 errors / 34% coverage ] ****** [599 done /524 queued / 16 running / 598 errors / 34% coverage ] ****** [599 done /524 queued / 16 running / 598 errors / 34% coverage ] ****** [600 done /523 queued / 16 running / 599 errors / 34% coverage ] ****** [600 done /523 queued / 16 running / 599 errors / 34% coverage ] ****** [601 done /523 queued / 16 running / 600 errors / 34% coverage ] ****** [601 done /523 queued / 16 running / 600 errors / 34% coverage ] ****** [602 done /525 queued / 16 running / 601 errors / 34% coverage ] ****** [602 done /525 queued / 16 running / 601 errors / 34% coverage ] ****** [603 done /527 queued / 16 running / 602 errors / 34% coverage ] ****** [603 done /527 queued / 16 running / 602 errors / 34% coverage ] ****** [604 done /529 queued / 16 running / 603 errors / 34% coverage ] ****** [604 done /529 queued / 16 running / 603 errors / 34% coverage ] ****** [605 done /528 queued / 16 running / 604 errors / 34% coverage ] ****** [605 done /528 queued / 16 running / 604 errors / 34% coverage ] ****** [606 done /527 queued / 16 running / 605 errors / 34% coverage ] ****** [606 done /527 queued / 16 running / 605 errors / 34% coverage ] ****** [607 done /527 queued / 16 running / 606 errors / 34% coverage ] ****** [607 done /527 queued / 16 running / 606 errors / 34% coverage ] ****** [608 done /528 queued / 16 running / 607 errors / 34% coverage ] ****** [608 done /528 queued / 16 running / 607 errors / 34% coverage ] ****** [609 done /528 queued / 16 running / 608 errors / 34% coverage ] ****** [609 done /528 queued / 16 running / 608 errors / 34% coverage ] ****** [610 done /527 queued / 16 running / 609 errors / 34% coverage ] ****** [610 done /527 queued / 16 running / 609 errors / 34% coverage ] ****** [611 done /528 queued / 16 running / 610 errors / 34% coverage ] ****** [611 done /528 queued / 16 running / 610 errors / 34% coverage ] ****** [612 done /527 queued / 16 running / 611 errors / 34% coverage ] ****** [612 done /527 queued / 16 running / 611 errors / 34% coverage ] ****** [613 done /527 queued / 16 running / 612 errors / 34% coverage ] ****** [613 done /527 queued / 16 running / 612 errors / 34% coverage ] ****** [614 done /527 queued / 16 running / 613 errors / 34% coverage ] ****** [614 done /527 queued / 16 running / 613 errors / 34% coverage ] ****** [615 done /528 queued / 16 running / 614 errors / 34% coverage ] ****** [615 done /528 queued / 16 running / 614 errors / 34% coverage ] ****** [616 done /532 queued / 16 running / 615 errors / 34% coverage ] ****** [616 done /532 queued / 16 running / 615 errors / 34% coverage ] ****** [617 done /533 queued / 16 running / 616 errors / 34% coverage ] ****** [617 done /533 queued / 16 running / 616 errors / 34% coverage ] ****** [618 done /532 queued / 16 running / 617 errors / 34% coverage ] ****** [618 done /532 queued / 16 running / 617 errors / 34% coverage ] ****** [619 done /532 queued / 16 running / 618 errors / 34% coverage ] ****** [619 done /532 queued / 16 running / 618 errors / 34% coverage ] ****** [620 done /531 queued / 16 running / 619 errors / 34% coverage ] ****** [620 done /531 queued / 16 running / 619 errors / 34% coverage ] ****** [621 done /534 queued / 16 running / 620 errors / 34% coverage ] ****** [621 done /534 queued / 16 running / 620 errors / 34% coverage ] ****** [622 done /535 queued / 16 running / 621 errors / 34% coverage ] ****** [622 done /535 queued / 16 running / 621 errors / 34% coverage ] ****** [623 done /538 queued / 16 running / 622 errors / 34% coverage ] ****** [623 done /538 queued / 16 running / 622 errors / 34% coverage ] ****** [624 done /540 queued / 16 running / 623 errors / 34% coverage ] ****** [624 done /540 queued / 16 running / 623 errors / 34% coverage ] ****** [625 done /544 queued / 16 running / 624 errors / 34% coverage ] ****** [625 done /544 queued / 16 running / 624 errors / 34% coverage ] ****** [626 done /545 queued / 16 running / 625 errors / 34% coverage ] ****** [626 done /545 queued / 16 running / 625 errors / 34% coverage ] ****** [627 done /544 queued / 16 running / 626 errors / 34% coverage ] ****** [627 done /544 queued / 16 running / 626 errors / 34% coverage ] ****** [628 done /546 queued / 16 running / 627 errors / 34% coverage ] ****** [628 done /546 queued / 16 running / 627 errors / 34% coverage ] ****** [629 done /548 queued / 16 running / 628 errors / 34% coverage ] ****** [629 done /548 queued / 16 running / 628 errors / 34% coverage ] ****** [630 done /547 queued / 16 running / 629 errors / 34% coverage ] ****** [630 done /547 queued / 16 running / 629 errors / 34% coverage ] ****** [631 done /548 queued / 16 running / 630 errors / 34% coverage ] ****** [631 done /548 queued / 16 running / 630 errors / 34% coverage ] ****** [632 done /549 queued / 16 running / 631 errors / 34% coverage ] ****** [632 done /549 queued / 16 running / 631 errors / 34% coverage ] ****** [633 done /552 queued / 16 running / 632 errors / 34% coverage ] ****** [633 done /552 queued / 16 running / 632 errors / 34% coverage ] ****** [634 done /552 queued / 16 running / 633 errors / 34% coverage ] ****** [634 done /552 queued / 16 running / 633 errors / 34% coverage ] ****** [635 done /551 queued / 16 running / 634 errors / 34% coverage ] ****** [635 done /551 queued / 16 running / 634 errors / 34% coverage ] ****** [636 done /551 queued / 16 running / 635 errors / 34% coverage ] ****** [636 done /551 queued / 16 running / 635 errors / 34% coverage ] ****** [637 done /555 queued / 16 running / 636 errors / 34% coverage ] ****** [637 done /555 queued / 16 running / 636 errors / 34% coverage ] ****** [638 done /555 queued / 16 running / 637 errors / 34% coverage ] ****** [638 done /555 queued / 16 running / 637 errors / 34% coverage ] ****** [639 done /556 queued / 16 running / 638 errors / 34% coverage ] ****** [639 done /556 queued / 16 running / 638 errors / 34% coverage ] ****** [640 done /556 queued / 16 running / 639 errors / 34% coverage ] ****** [640 done /556 queued / 16 running / 639 errors / 34% coverage ] ****** [641 done /558 queued / 16 running / 640 errors / 34% coverage ] ****** [641 done /558 queued / 16 running / 640 errors / 34% coverage ] ****** [642 done /557 queued / 16 running / 641 errors / 34% coverage ] ****** [642 done /557 queued / 16 running / 641 errors / 34% coverage ] ****** [643 done /558 queued / 16 running / 642 errors / 34% coverage ] ****** [643 done /558 queued / 16 running / 642 errors / 34% coverage ] ****** [644 done /557 queued / 16 running / 643 errors / 34% coverage ] ****** [644 done /557 queued / 16 running / 643 errors / 34% coverage ] ****** [645 done /557 queued / 16 running / 644 errors / 34% coverage ] ****** [645 done /557 queued / 16 running / 644 errors / 34% coverage ] ****** [646 done /557 queued / 16 running / 645 errors / 34% coverage ] ****** [646 done /557 queued / 16 running / 645 errors / 34% coverage ] ****** [647 done /557 queued / 16 running / 646 errors / 34% coverage ] ****** [647 done /557 queued / 16 running / 646 errors / 34% coverage ] ****** [648 done /556 queued / 16 running / 647 errors / 34% coverage ] ****** [648 done /556 queued / 16 running / 647 errors / 34% coverage ] ****** [649 done /557 queued / 16 running / 648 errors / 34% coverage ] ****** [649 done /557 queued / 16 running / 648 errors / 34% coverage ] ****** [650 done /557 queued / 16 running / 649 errors / 34% coverage ] ****** [650 done /557 queued / 16 running / 649 errors / 34% coverage ] ****** [651 done /556 queued / 16 running / 650 errors / 34% coverage ] ****** [651 done /556 queued / 16 running / 650 errors / 34% coverage ] ****** [652 done /555 queued / 16 running / 651 errors / 34% coverage ] ****** [652 done /555 queued / 16 running / 651 errors / 34% coverage ] ****** [653 done /556 queued / 16 running / 652 errors / 34% coverage ] ****** [653 done /556 queued / 16 running / 652 errors / 34% coverage ] ****** [654 done /555 queued / 16 running / 653 errors / 34% coverage ] ****** [654 done /555 queued / 16 running / 653 errors / 34% coverage ] ****** [655 done /555 queued / 16 running / 654 errors / 34% coverage ] ****** [655 done /555 queued / 16 running / 654 errors / 34% coverage ] ****** [656 done /554 queued / 16 running / 655 errors / 34% coverage ] ****** [656 done /554 queued / 16 running / 655 errors / 34% coverage ] ****** [657 done /554 queued / 16 running / 656 errors / 34% coverage ] ****** [657 done /554 queued / 16 running / 656 errors / 34% coverage ] ****** [658 done /553 queued / 16 running / 657 errors / 34% coverage ] ****** [658 done /553 queued / 16 running / 657 errors / 34% coverage ] ****** [659 done /555 queued / 16 running / 658 errors / 34% coverage ] ****** [659 done /555 queued / 16 running / 658 errors / 34% coverage ] ****** [660 done /557 queued / 16 running / 659 errors / 34% coverage ] ****** [660 done /557 queued / 16 running / 659 errors / 34% coverage ] ****** [661 done /556 queued / 16 running / 660 errors / 34% coverage ] ****** [661 done /556 queued / 16 running / 660 errors / 34% coverage ] ****** [662 done /558 queued / 16 running / 661 errors / 34% coverage ] ****** [662 done /558 queued / 16 running / 661 errors / 34% coverage ] ****** [663 done /558 queued / 16 running / 662 errors / 34% coverage ] ****** [663 done /558 queued / 16 running / 662 errors / 34% coverage ] ****** [664 done /557 queued / 16 running / 663 errors / 34% coverage ] ****** [664 done /557 queued / 16 running / 663 errors / 34% coverage ] ****** [665 done /558 queued / 16 running / 664 errors / 34% coverage ] ****** [665 done /558 queued / 16 running / 664 errors / 34% coverage ] ****** [666 done /559 queued / 16 running / 665 errors / 34% coverage ] ****** [666 done /559 queued / 16 running / 665 errors / 34% coverage ] ****** [667 done /558 queued / 16 running / 666 errors / 34% coverage ] ****** [667 done /558 queued / 16 running / 666 errors / 34% coverage ] ****** [668 done /559 queued / 16 running / 667 errors / 34% coverage ] ****** [668 done /559 queued / 16 running / 667 errors / 34% coverage ] ****** [669 done /560 queued / 16 running / 668 errors / 34% coverage ] ****** [669 done /560 queued / 16 running / 668 errors / 34% coverage ] ****** [670 done /562 queued / 16 running / 669 errors / 34% coverage ] ****** [670 done /562 queued / 16 running / 669 errors / 34% coverage ] ****** [671 done /561 queued / 16 running / 670 errors / 34% coverage ] ****** [671 done /561 queued / 16 running / 670 errors / 34% coverage ] ****** [672 done /565 queued / 16 running / 671 errors / 34% coverage ] ****** [672 done /565 queued / 16 running / 671 errors / 34% coverage ] ****** [673 done /570 queued / 16 running / 672 errors / 34% coverage ] ****** [673 done /570 queued / 16 running / 672 errors / 34% coverage ] ****** [674 done /571 queued / 16 running / 673 errors / 34% coverage ] ****** [674 done /571 queued / 16 running / 673 errors / 34% coverage ] ****** [675 done /572 queued / 16 running / 674 errors / 34% coverage ] ****** [675 done /572 queued / 16 running / 674 errors / 34% coverage ] ****** [676 done /572 queued / 16 running / 675 errors / 34% coverage ] ****** [676 done /572 queued / 16 running / 675 errors / 34% coverage ] ****** [677 done /573 queued / 16 running / 676 errors / 34% coverage ] ****** [677 done /573 queued / 16 running / 676 errors / 34% coverage ] ****** [678 done /577 queued / 16 running / 677 errors / 34% coverage ] ****** [678 done /577 queued / 16 running / 677 errors / 34% coverage ] ****** [679 done /576 queued / 16 running / 678 errors / 34% coverage ] ****** [679 done /576 queued / 16 running / 678 errors / 34% coverage ] ****** [680 done /577 queued / 16 running / 679 errors / 34% coverage ] ****** [680 done /577 queued / 16 running / 679 errors / 34% coverage ] ****** [681 done /579 queued / 16 running / 680 errors / 34% coverage ] ****** [681 done /579 queued / 16 running / 680 errors / 34% coverage ] ****** [682 done /579 queued / 16 running / 681 errors / 34% coverage ] ****** [682 done /579 queued / 16 running / 681 errors / 34% coverage ] ****** [683 done /579 queued / 16 running / 682 errors / 34% coverage ] ****** [683 done /579 queued / 16 running / 682 errors / 34% coverage ] ****** [684 done /579 queued / 16 running / 683 errors / 34% coverage ] ****** [684 done /579 queued / 16 running / 683 errors / 34% coverage ] ****** [685 done /582 queued / 16 running / 684 errors / 34% coverage ] ****** [685 done /582 queued / 16 running / 684 errors / 34% coverage ] ****** [686 done /583 queued / 16 running / 685 errors / 34% coverage ] ****** [686 done /583 queued / 16 running / 685 errors / 34% coverage ] ****** [687 done /583 queued / 16 running / 686 errors / 34% coverage ] ****** [687 done /583 queued / 16 running / 686 errors / 34% coverage ] ****** [688 done /584 queued / 16 running / 687 errors / 34% coverage ] ****** [688 done /584 queued / 16 running / 687 errors / 34% coverage ] ****** [689 done /586 queued / 16 running / 688 errors / 34% coverage ] ****** [689 done /586 queued / 16 running / 688 errors / 34% coverage ] ****** [690 done /585 queued / 16 running / 689 errors / 34% coverage ] ****** [690 done /585 queued / 16 running / 689 errors / 34% coverage ] ****** [691 done /586 queued / 16 running / 690 errors / 34% coverage ] ****** [691 done /586 queued / 16 running / 690 errors / 34% coverage ] ****** [692 done /588 queued / 16 running / 691 errors / 34% coverage ] ****** [692 done /588 queued / 16 running / 691 errors / 34% coverage ] ****** [693 done /589 queued / 16 running / 692 errors / 34% coverage ] ****** [693 done /589 queued / 16 running / 692 errors / 34% coverage ] ****** [694 done /592 queued / 16 running / 693 errors / 34% coverage ] ****** [694 done /592 queued / 16 running / 693 errors / 34% coverage ] ****** [695 done /594 queued / 16 running / 694 errors / 34% coverage ] ****** [695 done /594 queued / 16 running / 694 errors / 34% coverage ] ****** [696 done /596 queued / 16 running / 695 errors / 34% coverage ] ****** [696 done /596 queued / 16 running / 695 errors / 34% coverage ] ****** [697 done /596 queued / 16 running / 696 errors / 34% coverage ] ****** [697 done /596 queued / 16 running / 696 errors / 34% coverage ] ****** [698 done /596 queued / 16 running / 697 errors / 34% coverage ] ****** [698 done /596 queued / 16 running / 697 errors / 34% coverage ] ****** [699 done /595 queued / 16 running / 698 errors / 34% coverage ] ****** [699 done /595 queued / 16 running / 698 errors / 34% coverage ] ****** [700 done /594 queued / 16 running / 699 errors / 34% coverage ] ****** [700 done /594 queued / 16 running / 699 errors / 34% coverage ] ****** [701 done /596 queued / 16 running / 700 errors / 34% coverage ] ****** [701 done /596 queued / 16 running / 700 errors / 34% coverage ] ****** [702 done /595 queued / 16 running / 701 errors / 34% coverage ] ****** [702 done /595 queued / 16 running / 701 errors / 34% coverage ] ****** [703 done /598 queued / 16 running / 702 errors / 34% coverage ] ****** [703 done /598 queued / 16 running / 702 errors / 34% coverage ] ****** [704 done /598 queued / 16 running / 703 errors / 34% coverage ] ****** [704 done /598 queued / 16 running / 703 errors / 34% coverage ] ****** [705 done /597 queued / 16 running / 704 errors / 34% coverage ] ****** [705 done /597 queued / 16 running / 704 errors / 34% coverage ] ****** [706 done /598 queued / 16 running / 705 errors / 34% coverage ] ****** [706 done /598 queued / 16 running / 705 errors / 34% coverage ] ****** [707 done /598 queued / 16 running / 706 errors / 34% coverage ] ****** [707 done /598 queued / 16 running / 706 errors / 34% coverage ] ****** [708 done /599 queued / 16 running / 707 errors / 34% coverage ] ****** [708 done /599 queued / 16 running / 707 errors / 34% coverage ] ****** [709 done /600 queued / 16 running / 708 errors / 34% coverage ] ****** [709 done /600 queued / 16 running / 708 errors / 34% coverage ] ****** [710 done /599 queued / 16 running / 709 errors / 34% coverage ] ****** [710 done /599 queued / 16 running / 709 errors / 34% coverage ] ****** [711 done /598 queued / 16 running / 710 errors / 34% coverage ] ****** [711 done /598 queued / 16 running / 710 errors / 34% coverage ] ****** [712 done /602 queued / 16 running / 711 errors / 34% coverage ] ****** [712 done /602 queued / 16 running / 711 errors / 34% coverage ] ****** [713 done /601 queued / 16 running / 712 errors / 34% coverage ] ****** [713 done /601 queued / 16 running / 712 errors / 34% coverage ] ****** [714 done /604 queued / 16 running / 713 errors / 34% coverage ] ****** [714 done /604 queued / 16 running / 713 errors / 34% coverage ] ****** [715 done /607 queued / 16 running / 714 errors / 34% coverage ] ****** [715 done /607 queued / 16 running / 714 errors / 34% coverage ] ****** [716 done /607 queued / 16 running / 715 errors / 34% coverage ] ****** [716 done /607 queued / 16 running / 715 errors / 34% coverage ] ****** [717 done /606 queued / 16 running / 716 errors / 34% coverage ] ****** [717 done /606 queued / 16 running / 716 errors / 34% coverage ] ****** [718 done /606 queued / 16 running / 717 errors / 34% coverage ] ****** [718 done /606 queued / 16 running / 717 errors / 34% coverage ] ****** [719 done /608 queued / 16 running / 718 errors / 34% coverage ] ****** [719 done /608 queued / 16 running / 718 errors / 34% coverage ] ****** [720 done /609 queued / 16 running / 719 errors / 34% coverage ] ****** [720 done /609 queued / 16 running / 719 errors / 34% coverage ] ****** [721 done /610 queued / 16 running / 720 errors / 34% coverage ] ****** [721 done /610 queued / 16 running / 720 errors / 34% coverage ] ****** [722 done /612 queued / 16 running / 721 errors / 34% coverage ] ****** [722 done /612 queued / 16 running / 721 errors / 34% coverage ] ****** [723 done /613 queued / 16 running / 722 errors / 34% coverage ] ****** [723 done /613 queued / 16 running / 722 errors / 34% coverage ] ****** [724 done /615 queued / 16 running / 723 errors / 34% coverage ] ****** [724 done /615 queued / 16 running / 723 errors / 34% coverage ] ****** [725 done /614 queued / 16 running / 724 errors / 34% coverage ] ****** [725 done /614 queued / 16 running / 724 errors / 34% coverage ] ****** [726 done /614 queued / 16 running / 725 errors / 34% coverage ] ****** [726 done /614 queued / 16 running / 725 errors / 34% coverage ] ****** [727 done /616 queued / 16 running / 726 errors / 34% coverage ] ****** [727 done /616 queued / 16 running / 726 errors / 34% coverage ] ****** [728 done /615 queued / 16 running / 727 errors / 34% coverage ] ****** [728 done /615 queued / 16 running / 727 errors / 34% coverage ] ****** [729 done /617 queued / 16 running / 728 errors / 34% coverage ] ****** [729 done /617 queued / 16 running / 728 errors / 34% coverage ] ****** [730 done /616 queued / 16 running / 729 errors / 34% coverage ] ****** [730 done /616 queued / 16 running / 729 errors / 34% coverage ] ****** [731 done /616 queued / 16 running / 730 errors / 34% coverage ] ****** [731 done /616 queued / 16 running / 730 errors / 34% coverage ] ****** [732 done /616 queued / 16 running / 731 errors / 34% coverage ] ****** [732 done /616 queued / 16 running / 731 errors / 34% coverage ] ****** [733 done /618 queued / 16 running / 732 errors / 34% coverage ] ****** [733 done /618 queued / 16 running / 732 errors / 34% coverage ] ****** [734 done /619 queued / 16 running / 733 errors / 34% coverage ] ****** [734 done /619 queued / 16 running / 733 errors / 34% coverage ] ****** [735 done /620 queued / 16 running / 734 errors / 34% coverage ] ****** [735 done /620 queued / 16 running / 734 errors / 34% coverage ] ****** [736 done /619 queued / 16 running / 735 errors / 34% coverage ] ****** [736 done /619 queued / 16 running / 735 errors / 34% coverage ] ****** [737 done /618 queued / 16 running / 736 errors / 34% coverage ] ****** [737 done /618 queued / 16 running / 736 errors / 34% coverage ] ****** [738 done /618 queued / 16 running / 737 errors / 34% coverage ] ****** [738 done /618 queued / 16 running / 737 errors / 34% coverage ] ****** [739 done /620 queued / 16 running / 738 errors / 34% coverage ] ****** [739 done /620 queued / 16 running / 738 errors / 34% coverage ] ****** [740 done /619 queued / 16 running / 739 errors / 34% coverage ] ****** [740 done /619 queued / 16 running / 739 errors / 34% coverage ] ****** [741 done /621 queued / 16 running / 740 errors / 34% coverage ] ****** [741 done /621 queued / 16 running / 740 errors / 34% coverage ] ****** [742 done /623 queued / 16 running / 741 errors / 34% coverage ] ****** [742 done /623 queued / 16 running / 741 errors / 34% coverage ] ****** [743 done /622 queued / 16 running / 742 errors / 34% coverage ] ****** [743 done /622 queued / 16 running / 742 errors / 34% coverage ] ****** [744 done /623 queued / 16 running / 743 errors / 34% coverage ] ****** [744 done /623 queued / 16 running / 743 errors / 34% coverage ] ****** [745 done /626 queued / 16 running / 744 errors / 34% coverage ] ****** [745 done /626 queued / 16 running / 744 errors / 34% coverage ] ****** [746 done /627 queued / 16 running / 745 errors / 34% coverage ] ****** [746 done /627 queued / 16 running / 745 errors / 34% coverage ] ****** [747 done /627 queued / 16 running / 746 errors / 34% coverage ] ****** [747 done /627 queued / 16 running / 746 errors / 34% coverage ] ****** [748 done /629 queued / 16 running / 747 errors / 34% coverage ] ****** [748 done /629 queued / 16 running / 747 errors / 34% coverage ] ****** [749 done /630 queued / 16 running / 748 errors / 34% coverage ] ****** [749 done /630 queued / 16 running / 748 errors / 34% coverage ] ****** [750 done /629 queued / 16 running / 749 errors / 34% coverage ] ****** [750 done /629 queued / 16 running / 749 errors / 34% coverage ] ****** [751 done /628 queued / 16 running / 750 errors / 34% coverage ] ****** [751 done /628 queued / 16 running / 750 errors / 34% coverage ] ****** [752 done /630 queued / 16 running / 751 errors / 34% coverage ] ****** [752 done /630 queued / 16 running / 751 errors / 34% coverage ] ****** [753 done /633 queued / 16 running / 752 errors / 34% coverage ] ****** [753 done /633 queued / 16 running / 752 errors / 34% coverage ] ****** [754 done /637 queued / 16 running / 753 errors / 34% coverage ] ****** [754 done /637 queued / 16 running / 753 errors / 34% coverage ] ****** [755 done /637 queued / 16 running / 754 errors / 34% coverage ] ****** [755 done /637 queued / 16 running / 754 errors / 34% coverage ] ****** [756 done /638 queued / 16 running / 755 errors / 34% coverage ] ****** [756 done /638 queued / 16 running / 755 errors / 34% coverage ] ****** [757 done /638 queued / 16 running / 756 errors / 34% coverage ] ****** [757 done /638 queued / 16 running / 756 errors / 34% coverage ] ****** [758 done /637 queued / 16 running / 757 errors / 34% coverage ] ****** [758 done /637 queued / 16 running / 757 errors / 34% coverage ] ****** [759 done /642 queued / 16 running / 758 errors / 34% coverage ] ****** [759 done /642 queued / 16 running / 758 errors / 34% coverage ] ****** [760 done /646 queued / 16 running / 759 errors / 34% coverage ] ****** [760 done /646 queued / 16 running / 759 errors / 34% coverage ] ****** [761 done /645 queued / 16 running / 760 errors / 34% coverage ] ****** [761 done /645 queued / 16 running / 760 errors / 34% coverage ] ****** [762 done /645 queued / 16 running / 761 errors / 34% coverage ] ****** [762 done /645 queued / 16 running / 761 errors / 34% coverage ] ****** [763 done /645 queued / 16 running / 762 errors / 34% coverage ] ****** [763 done /645 queued / 16 running / 762 errors / 34% coverage ] ****** [764 done /647 queued / 16 running / 763 errors / 34% coverage ] ****** [764 done /647 queued / 16 running / 763 errors / 34% coverage ] ****** [765 done /648 queued / 16 running / 764 errors / 34% coverage ] ****** [765 done /648 queued / 16 running / 764 errors / 34% coverage ] ****** [766 done /651 queued / 16 running / 765 errors / 34% coverage ] ****** [766 done /651 queued / 16 running / 765 errors / 34% coverage ] ****** [767 done /653 queued / 16 running / 766 errors / 34% coverage ] ****** [767 done /653 queued / 16 running / 766 errors / 34% coverage ] ****** [768 done /654 queued / 16 running / 767 errors / 34% coverage ] ****** [768 done /654 queued / 16 running / 767 errors / 34% coverage ] ****** [769 done /655 queued / 16 running / 768 errors / 34% coverage ] ****** [769 done /655 queued / 16 running / 768 errors / 34% coverage ] ****** [770 done /654 queued / 16 running / 769 errors / 34% coverage ] ****** [770 done /654 queued / 16 running / 769 errors / 34% coverage ] ****** [771 done /655 queued / 16 running / 770 errors / 34% coverage ] ****** [771 done /655 queued / 16 running / 770 errors / 34% coverage ] ****** [772 done /656 queued / 16 running / 771 errors / 34% coverage ] ****** [772 done /656 queued / 16 running / 771 errors / 34% coverage ] ****** [773 done /658 queued / 16 running / 772 errors / 34% coverage ] ****** [773 done /658 queued / 16 running / 772 errors / 34% coverage ] ****** [774 done /658 queued / 16 running / 773 errors / 34% coverage ] ****** [774 done /658 queued / 16 running / 773 errors / 34% coverage ] ****** [775 done /658 queued / 16 running / 774 errors / 34% coverage ] ****** [775 done /658 queued / 16 running / 774 errors / 34% coverage ] ****** [776 done /657 queued / 16 running / 775 errors / 34% coverage ] ****** [776 done /657 queued / 16 running / 775 errors / 34% coverage ] ****** [777 done /657 queued / 16 running / 776 errors / 34% coverage ] ****** [777 done /657 queued / 16 running / 776 errors / 34% coverage ] ****** [778 done /658 queued / 16 running / 777 errors / 34% coverage ] ****** [778 done /658 queued / 16 running / 777 errors / 34% coverage ] ****** [779 done /659 queued / 16 running / 778 errors / 34% coverage ] ****** [779 done /659 queued / 16 running / 778 errors / 34% coverage ] ****** [780 done /658 queued / 16 running / 779 errors / 34% coverage ] ****** [780 done /658 queued / 16 running / 779 errors / 34% coverage ] ****** [781 done /660 queued / 16 running / 780 errors / 34% coverage ] ****** [781 done /660 queued / 16 running / 780 errors / 34% coverage ] ****** [782 done /661 queued / 16 running / 781 errors / 34% coverage ] ****** [782 done /661 queued / 16 running / 781 errors / 34% coverage ] ****** [783 done /660 queued / 16 running / 782 errors / 34% coverage ] ****** [783 done /660 queued / 16 running / 782 errors / 34% coverage ] ****** [784 done /661 queued / 16 running / 783 errors / 34% coverage ] ****** [784 done /661 queued / 16 running / 783 errors / 34% coverage ] ****** [785 done /661 queued / 16 running / 784 errors / 34% coverage ] ****** [785 done /661 queued / 16 running / 784 errors / 34% coverage ] ****** [786 done /663 queued / 16 running / 785 errors / 34% coverage ] ****** [786 done /663 queued / 16 running / 785 errors / 34% coverage ] ****** [787 done /662 queued / 16 running / 786 errors / 34% coverage ] ****** [787 done /662 queued / 16 running / 786 errors / 34% coverage ] ****** [788 done /663 queued / 16 running / 787 errors / 34% coverage ] ****** [788 done /663 queued / 16 running / 787 errors / 34% coverage ] ****** [789 done /662 queued / 16 running / 788 errors / 34% coverage ] ****** [789 done /662 queued / 16 running / 788 errors / 34% coverage ] ****** [790 done /661 queued / 16 running / 789 errors / 34% coverage ] ****** [790 done /661 queued / 16 running / 789 errors / 34% coverage ] ****** [791 done /661 queued / 16 running / 790 errors / 34% coverage ] ****** [791 done /661 queued / 16 running / 790 errors / 34% coverage ] ****** [792 done /660 queued / 16 running / 791 errors / 34% coverage ] ****** [792 done /660 queued / 16 running / 791 errors / 34% coverage ] ****** [793 done /662 queued / 16 running / 792 errors / 34% coverage ] ****** [793 done /662 queued / 16 running / 792 errors / 34% coverage ] ****** [794 done /662 queued / 16 running / 793 errors / 34% coverage ] ****** [794 done /662 queued / 16 running / 793 errors / 34% coverage ] ****** [795 done /664 queued / 16 running / 794 errors / 34% coverage ] ****** [795 done /664 queued / 16 running / 794 errors / 34% coverage ] ****** [796 done /666 queued / 16 running / 795 errors / 34% coverage ] ****** [796 done /666 queued / 16 running / 795 errors / 34% coverage ] ****** [797 done /668 queued / 16 running / 796 errors / 34% coverage ] ****** [797 done /668 queued / 16 running / 796 errors / 34% coverage ] ****** [798 done /670 queued / 16 running / 797 errors / 34% coverage ] ****** [798 done /670 queued / 16 running / 797 errors / 34% coverage ] ****** [799 done /669 queued / 16 running / 798 errors / 34% coverage ] ****** [799 done /669 queued / 16 running / 798 errors / 34% coverage ] ****** [800 done /672 queued / 16 running / 799 errors / 34% coverage ] ****** [800 done /672 queued / 16 running / 799 errors / 34% coverage ] ****** [801 done /673 queued / 16 running / 800 errors / 34% coverage ] ****** [801 done /673 queued / 16 running / 800 errors / 34% coverage ] ****** [802 done /676 queued / 16 running / 801 errors / 34% coverage ] ****** [802 done /676 queued / 16 running / 801 errors / 34% coverage ] ****** [803 done /677 queued / 16 running / 802 errors / 34% coverage ] ****** [803 done /677 queued / 16 running / 802 errors / 34% coverage ] ****** [804 done /679 queued / 16 running / 803 errors / 34% coverage ] ****** [804 done /679 queued / 16 running / 803 errors / 34% coverage ] ****** [805 done /683 queued / 16 running / 804 errors / 34% coverage ] ****** [805 done /683 queued / 16 running / 804 errors / 34% coverage ] ****** [806 done /682 queued / 16 running / 805 errors / 34% coverage ] ****** [806 done /682 queued / 16 running / 805 errors / 34% coverage ] ****** [807 done /681 queued / 16 running / 806 errors / 34% coverage ] ****** [807 done /681 queued / 16 running / 806 errors / 34% coverage ] ****** [808 done /683 queued / 16 running / 807 errors / 34% coverage ] ****** [808 done /683 queued / 16 running / 807 errors / 34% coverage ] ****** [809 done /688 queued / 16 running / 808 errors / 34% coverage ] ****** [809 done /688 queued / 16 running / 808 errors / 34% coverage ] ****** [810 done /689 queued / 16 running / 809 errors / 34% coverage ] ****** [810 done /689 queued / 16 running / 809 errors / 34% coverage ] ****** [811 done /690 queued / 16 running / 810 errors / 34% coverage ] ****** [811 done /690 queued / 16 running / 810 errors / 34% coverage ] ****** [812 done /689 queued / 16 running / 811 errors / 34% coverage ] ****** [812 done /689 queued / 16 running / 811 errors / 34% coverage ] ****** [813 done /689 queued / 16 running / 812 errors / 34% coverage ] ****** [813 done /689 queued / 16 running / 812 errors / 34% coverage ] ****** [814 done /690 queued / 16 running / 813 errors / 34% coverage ] ****** [814 done /690 queued / 16 running / 813 errors / 34% coverage ] ****** [815 done /690 queued / 16 running / 814 errors / 34% coverage ] ****** [815 done /690 queued / 16 running / 814 errors / 34% coverage ] ****** [816 done /693 queued / 16 running / 815 errors / 34% coverage ] ****** [816 done /693 queued / 16 running / 815 errors / 34% coverage ] ****** [817 done /696 queued / 16 running / 816 errors / 34% coverage ] ****** [817 done /696 queued / 16 running / 816 errors / 34% coverage ] ****** [818 done /700 queued / 16 running / 817 errors / 34% coverage ] ****** [818 done /700 queued / 16 running / 817 errors / 34% coverage ] ****** [819 done /701 queued / 16 running / 818 errors / 34% coverage ] ****** [819 done /701 queued / 16 running / 818 errors / 34% coverage ] ****** [820 done /700 queued / 16 running / 819 errors / 34% coverage ] ****** [820 done /700 queued / 16 running / 819 errors / 34% coverage ] ****** [821 done /701 queued / 16 running / 820 errors / 34% coverage ] ****** [821 done /701 queued / 16 running / 820 errors / 34% coverage ] ****** [822 done /702 queued / 16 running / 821 errors / 34% coverage ] ****** [822 done /702 queued / 16 running / 821 errors / 34% coverage ] ****** [823 done /703 queued / 16 running / 822 errors / 34% coverage ] ****** [823 done /703 queued / 16 running / 822 errors / 34% coverage ] ****** [824 done /703 queued / 16 running / 823 errors / 34% coverage ] ****** [824 done /703 queued / 16 running / 823 errors / 34% coverage ] ****** [825 done /703 queued / 16 running / 824 errors / 34% coverage ] ****** [825 done /703 queued / 16 running / 824 errors / 34% coverage ] ****** [826 done /704 queued / 16 running / 825 errors / 34% coverage ] ****** [826 done /704 queued / 16 running / 825 errors / 34% coverage ] ****** [827 done /704 queued / 16 running / 826 errors / 34% coverage ] ****** [827 done /704 queued / 16 running / 826 errors / 34% coverage ] ****** [828 done /706 queued / 16 running / 827 errors / 34% coverage ] ****** [828 done /706 queued / 16 running / 827 errors / 34% coverage ] ****** [829 done /705 queued / 16 running / 828 errors / 34% coverage ] ****** [829 done /705 queued / 16 running / 828 errors / 34% coverage ] ****** [830 done /704 queued / 16 running / 829 errors / 34% coverage ] ****** [830 done /704 queued / 16 running / 829 errors / 34% coverage ] ****** [831 done /703 queued / 16 running / 830 errors / 34% coverage ] ****** [831 done /703 queued / 16 running / 830 errors / 34% coverage ] ****** [832 done /704 queued / 16 running / 831 errors / 34% coverage ] ****** [832 done /704 queued / 16 running / 831 errors / 34% coverage ] ****** [833 done /706 queued / 16 running / 832 errors / 34% coverage ] ****** [833 done /706 queued / 16 running / 832 errors / 34% coverage ] ****** [834 done /706 queued / 16 running / 833 errors / 34% coverage ] ****** [834 done /706 queued / 16 running / 833 errors / 34% coverage ] ****** [835 done /708 queued / 16 running / 834 errors / 34% coverage ] ****** [835 done /708 queued / 16 running / 834 errors / 34% coverage ] ****** [836 done /709 queued / 16 running / 835 errors / 34% coverage ] ****** [836 done /709 queued / 16 running / 835 errors / 34% coverage ] ****** [837 done /711 queued / 16 running / 836 errors / 34% coverage ] ****** [837 done /711 queued / 16 running / 836 errors / 34% coverage ] ****** [838 done /716 queued / 16 running / 837 errors / 34% coverage ] ****** [838 done /716 queued / 16 running / 837 errors / 34% coverage ] ****** [839 done /717 queued / 16 running / 838 errors / 34% coverage ] ****** [839 done /717 queued / 16 running / 838 errors / 34% coverage ] ****** [840 done /716 queued / 16 running / 839 errors / 34% coverage ] ****** [840 done /716 queued / 16 running / 839 errors / 34% coverage ] ****** [841 done /716 queued / 16 running / 840 errors / 34% coverage ] ****** [841 done /716 queued / 16 running / 840 errors / 34% coverage ] ****** [842 done /715 queued / 16 running / 841 errors / 34% coverage ] ****** [842 done /715 queued / 16 running / 841 errors / 34% coverage ] ****** [843 done /717 queued / 16 running / 842 errors / 34% coverage ] ****** [843 done /717 queued / 16 running / 842 errors / 34% coverage ] ****** [844 done /716 queued / 16 running / 843 errors / 34% coverage ] ****** [844 done /716 queued / 16 running / 843 errors / 34% coverage ] ****** [845 done /716 queued / 16 running / 844 errors / 34% coverage ] ****** [845 done /716 queued / 16 running / 844 errors / 34% coverage ] ****** [846 done /717 queued / 16 running / 845 errors / 34% coverage ] ****** [846 done /717 queued / 16 running / 845 errors / 34% coverage ] ****** [847 done /716 queued / 16 running / 846 errors / 34% coverage ] ****** [847 done /716 queued / 16 running / 846 errors / 34% coverage ] ****** [848 done /716 queued / 16 running / 847 errors / 34% coverage ] ****** [848 done /716 queued / 16 running / 847 errors / 34% coverage ] ****** [849 done /718 queued / 16 running / 848 errors / 34% coverage ] ****** [849 done /718 queued / 16 running / 848 errors / 34% coverage ] ****** [850 done /717 queued / 16 running / 849 errors / 34% coverage ] ****** [850 done /717 queued / 16 running / 849 errors / 34% coverage ] ****** [851 done /719 queued / 16 running / 850 errors / 34% coverage ] ****** [851 done /719 queued / 16 running / 850 errors / 34% coverage ] ****** [852 done /721 queued / 16 running / 851 errors / 34% coverage ] ****** [852 done /721 queued / 16 running / 851 errors / 34% coverage ] ****** [853 done /722 queued / 16 running / 852 errors / 34% coverage ] ****** [853 done /722 queued / 16 running / 852 errors / 34% coverage ] ****** [854 done /723 queued / 16 running / 853 errors / 34% coverage ] ****** [854 done /723 queued / 16 running / 853 errors / 34% coverage ] ****** [855 done /724 queued / 16 running / 854 errors / 34% coverage ] ****** [855 done /724 queued / 16 running / 854 errors / 34% coverage ] ****** [856 done /723 queued / 16 running / 855 errors / 34% coverage ] ****** [856 done /723 queued / 16 running / 855 errors / 34% coverage ] ****** [857 done /724 queued / 16 running / 856 errors / 34% coverage ] ****** [857 done /724 queued / 16 running / 856 errors / 34% coverage ] ****** [858 done /726 queued / 16 running / 857 errors / 34% coverage ] ****** [858 done /726 queued / 16 running / 857 errors / 34% coverage ] ****** [859 done /728 queued / 16 running / 858 errors / 34% coverage ] ****** [859 done /728 queued / 16 running / 858 errors / 34% coverage ] ****** [860 done /729 queued / 16 running / 859 errors / 34% coverage ] ****** [860 done /729 queued / 16 running / 859 errors / 34% coverage ] ****** [861 done /728 queued / 16 running / 860 errors / 34% coverage ] ****** [861 done /728 queued / 16 running / 860 errors / 34% coverage ] ****** [862 done /729 queued / 16 running / 861 errors / 34% coverage ] ****** [862 done /729 queued / 16 running / 861 errors / 34% coverage ] ****** [863 done /728 queued / 16 running / 862 errors / 34% coverage ] ****** [863 done /728 queued / 16 running / 862 errors / 34% coverage ] ****** [864 done /730 queued / 16 running / 863 errors / 34% coverage ] ****** [864 done /730 queued / 16 running / 863 errors / 34% coverage ] ****** [865 done /731 queued / 16 running / 864 errors / 34% coverage ] ****** [865 done /731 queued / 16 running / 864 errors / 34% coverage ] ****** [866 done /730 queued / 16 running / 865 errors / 34% coverage ] ****** [866 done /730 queued / 16 running / 865 errors / 34% coverage ] ****** [867 done /730 queued / 16 running / 866 errors / 34% coverage ] ****** [867 done /730 queued / 16 running / 866 errors / 34% coverage ] ****** [868 done /730 queued / 16 running / 867 errors / 34% coverage ] ****** [868 done /730 queued / 16 running / 867 errors / 34% coverage ] ****** [869 done /729 queued / 16 running / 868 errors / 34% coverage ] ****** [869 done /729 queued / 16 running / 868 errors / 34% coverage ] ****** [870 done /731 queued / 16 running / 869 errors / 34% coverage ] ****** [870 done /731 queued / 16 running / 869 errors / 34% coverage ] ****** [871 done /730 queued / 16 running / 870 errors / 34% coverage ] ****** [871 done /730 queued / 16 running / 870 errors / 34% coverage ] ****** [872 done /729 queued / 16 running / 871 errors / 34% coverage ] ****** [872 done /729 queued / 16 running / 871 errors / 34% coverage ] ****** [873 done /732 queued / 16 running / 872 errors / 34% coverage ] ****** [873 done /732 queued / 16 running / 872 errors / 34% coverage ] ****** [874 done /734 queued / 16 running / 873 errors / 34% coverage ] ****** [874 done /734 queued / 16 running / 873 errors / 34% coverage ] ****** [875 done /733 queued / 16 running / 874 errors / 34% coverage ] ****** [875 done /733 queued / 16 running / 874 errors / 34% coverage ] ****** [876 done /733 queued / 16 running / 875 errors / 34% coverage ] ****** [876 done /733 queued / 16 running / 875 errors / 34% coverage ] ****** [877 done /733 queued / 16 running / 876 errors / 34% coverage ] ****** [877 done /733 queued / 16 running / 876 errors / 34% coverage ] ****** [878 done /735 queued / 16 running / 877 errors / 34% coverage ] ****** [878 done /735 queued / 16 running / 877 errors / 34% coverage ] ****** [879 done /734 queued / 16 running / 878 errors / 34% coverage ] ****** [879 done /734 queued / 16 running / 878 errors / 34% coverage ] ****** [880 done /735 queued / 16 running / 879 errors / 34% coverage ] ****** [880 done /735 queued / 16 running / 879 errors / 34% coverage ] ****** [881 done /734 queued / 16 running / 880 errors / 34% coverage ] ****** [881 done /734 queued / 16 running / 880 errors / 34% coverage ] ****** [882 done /733 queued / 16 running / 881 errors / 34% coverage ] ****** [882 done /733 queued / 16 running / 881 errors / 34% coverage ] ****** [883 done /735 queued / 16 running / 882 errors / 34% coverage ] ****** [883 done /735 queued / 16 running / 882 errors / 34% coverage ] ****** [884 done /734 queued / 16 running / 883 errors / 34% coverage ] ****** [884 done /734 queued / 16 running / 883 errors / 34% coverage ] ****** [885 done /735 queued / 16 running / 884 errors / 34% coverage ] ****** [885 done /735 queued / 16 running / 884 errors / 34% coverage ] ****** [886 done /736 queued / 16 running / 885 errors / 34% coverage ] ****** [886 done /736 queued / 16 running / 885 errors / 34% coverage ] ****** [887 done /735 queued / 16 running / 886 errors / 34% coverage ] ****** [887 done /735 queued / 16 running / 886 errors / 34% coverage ] ****** [888 done /735 queued / 16 running / 887 errors / 34% coverage ] ****** [888 done /735 queued / 16 running / 887 errors / 34% coverage ] ****** [889 done /734 queued / 16 running / 888 errors / 34% coverage ] ****** [889 done /734 queued / 16 running / 888 errors / 34% coverage ] ****** [890 done /733 queued / 16 running / 889 errors / 34% coverage ] ****** [890 done /733 queued / 16 running / 889 errors / 34% coverage ] ****** [891 done /734 queued / 16 running / 890 errors / 34% coverage ] ****** [891 done /734 queued / 16 running / 890 errors / 34% coverage ] ****** [892 done /735 queued / 16 running / 891 errors / 34% coverage ] ****** [892 done /735 queued / 16 running / 891 errors / 34% coverage ] ****** [893 done /736 queued / 16 running / 892 errors / 34% coverage ] ****** [893 done /736 queued / 16 running / 892 errors / 34% coverage ] ****** [894 done /737 queued / 16 running / 893 errors / 34% coverage ] ****** [894 done /737 queued / 16 running / 893 errors / 34% coverage ] ****** [895 done /736 queued / 16 running / 894 errors / 34% coverage ] ****** [895 done /736 queued / 16 running / 894 errors / 34% coverage ] ****** [896 done /736 queued / 16 running / 895 errors / 34% coverage ] ****** [896 done /736 queued / 16 running / 895 errors / 34% coverage ] ****** [897 done /737 queued / 16 running / 896 errors / 34% coverage ] ****** [897 done /737 queued / 16 running / 896 errors / 34% coverage ] ****** [898 done /737 queued / 16 running / 897 errors / 34% coverage ] ****** [898 done /737 queued / 16 running / 897 errors / 34% coverage ] ****** [899 done /737 queued / 16 running / 898 errors / 34% coverage ] ****** [899 done /737 queued / 16 running / 898 errors / 34% coverage ] ****** [900 done /739 queued / 16 running / 899 errors / 34% coverage ] ****** [900 done /739 queued / 16 running / 899 errors / 34% coverage ] ****** [901 done /739 queued / 16 running / 900 errors / 34% coverage ] ****** [901 done /739 queued / 16 running / 900 errors / 34% coverage ] ****** [902 done /742 queued / 16 running / 901 errors / 34% coverage ] ****** [902 done /742 queued / 16 running / 901 errors / 34% coverage ] ****** [903 done /742 queued / 16 running / 902 errors / 34% coverage ] ****** [903 done /742 queued / 16 running / 902 errors / 34% coverage ] ****** [904 done /741 queued / 16 running / 903 errors / 34% coverage ] ****** [904 done /741 queued / 16 running / 903 errors / 34% coverage ] ****** [905 done /740 queued / 16 running / 904 errors / 34% coverage ] ****** [905 done /740 queued / 16 running / 904 errors / 34% coverage ] ****** [906 done /741 queued / 16 running / 905 errors / 34% coverage ] ****** [906 done /741 queued / 16 running / 905 errors / 34% coverage ] ****** [907 done /742 queued / 16 running / 906 errors / 34% coverage ] ****** [907 done /742 queued / 16 running / 906 errors / 34% coverage ] ****** [908 done /741 queued / 16 running / 907 errors / 34% coverage ] ****** [908 done /741 queued / 16 running / 907 errors / 34% coverage ] ****** [909 done /745 queued / 16 running / 908 errors / 34% coverage ] ****** [909 done /745 queued / 16 running / 908 errors / 34% coverage ] ****** [910 done /745 queued / 16 running / 909 errors / 34% coverage ] ****** [910 done /745 queued / 16 running / 909 errors / 34% coverage ] ****** [911 done /744 queued / 16 running / 910 errors / 34% coverage ] ****** [911 done /744 queued / 16 running / 910 errors / 34% coverage ] ****** [912 done /744 queued / 16 running / 911 errors / 34% coverage ] ****** [912 done /744 queued / 16 running / 911 errors / 34% coverage ] ****** [913 done /745 queued / 16 running / 912 errors / 34% coverage ] ****** [913 done /745 queued / 16 running / 912 errors / 34% coverage ] ****** [914 done /748 queued / 16 running / 913 errors / 34% coverage ] ****** [914 done /748 queued / 16 running / 913 errors / 34% coverage ] ****** [915 done /751 queued / 16 running / 914 errors / 34% coverage ] ****** [915 done /751 queued / 16 running / 914 errors / 34% coverage ] ****** [916 done /750 queued / 16 running / 915 errors / 34% coverage ] ****** [916 done /750 queued / 16 running / 915 errors / 34% coverage ] ****** [917 done /750 queued / 16 running / 916 errors / 34% coverage ] ****** [917 done /750 queued / 16 running / 916 errors / 34% coverage ] ****** [918 done /749 queued / 16 running / 917 errors / 34% coverage ] ****** [918 done /749 queued / 16 running / 917 errors / 34% coverage ] ****** [919 done /748 queued / 16 running / 918 errors / 34% coverage ] ****** [919 done /748 queued / 16 running / 918 errors / 34% coverage ] ****** [920 done /750 queued / 16 running / 919 errors / 34% coverage ] ****** [920 done /750 queued / 16 running / 919 errors / 34% coverage ] ****** [921 done /749 queued / 16 running / 920 errors / 34% coverage ] ****** [921 done /749 queued / 16 running / 920 errors / 34% coverage ] ****** [922 done /749 queued / 16 running / 921 errors / 34% coverage ] ****** [922 done /749 queued / 16 running / 921 errors / 34% coverage ] ****** [923 done /749 queued / 16 running / 922 errors / 34% coverage ] ****** [923 done /749 queued / 16 running / 922 errors / 34% coverage ] ****** [924 done /750 queued / 16 running / 923 errors / 34% coverage ] ****** [924 done /750 queued / 16 running / 923 errors / 34% coverage ] ****** [925 done /750 queued / 16 running / 924 errors / 34% coverage ] ****** [925 done /750 queued / 16 running / 924 errors / 34% coverage ] ****** [926 done /752 queued / 16 running / 925 errors / 34% coverage ] ****** [926 done /752 queued / 16 running / 925 errors / 34% coverage ] ****** [927 done /753 queued / 16 running / 926 errors / 34% coverage ] ****** [927 done /753 queued / 16 running / 926 errors / 34% coverage ] ****** [928 done /755 queued / 16 running / 927 errors / 34% coverage ] ****** [928 done /755 queued / 16 running / 927 errors / 34% coverage ] ****** [929 done /755 queued / 16 running / 928 errors / 34% coverage ] ****** [929 done /755 queued / 16 running / 928 errors / 34% coverage ] ****** [930 done /754 queued / 16 running / 929 errors / 34% coverage ] ****** [930 done /754 queued / 16 running / 929 errors / 34% coverage ] ****** [931 done /756 queued / 16 running / 930 errors / 34% coverage ] ****** [931 done /756 queued / 16 running / 930 errors / 34% coverage ] ****** [932 done /757 queued / 16 running / 931 errors / 34% coverage ] ****** [932 done /757 queued / 16 running / 931 errors / 34% coverage ] ****** [933 done /758 queued / 16 running / 932 errors / 34% coverage ] ****** [933 done /758 queued / 16 running / 932 errors / 34% coverage ] ****** [934 done /759 queued / 16 running / 933 errors / 34% coverage ] ****** [934 done /759 queued / 16 running / 933 errors / 34% coverage ] ****** [935 done /760 queued / 16 running / 934 errors / 34% coverage ] ****** [935 done /760 queued / 16 running / 934 errors / 34% coverage ] ****** [936 done /759 queued / 16 running / 935 errors / 34% coverage ] ****** [936 done /759 queued / 16 running / 935 errors / 34% coverage ] ****** [937 done /762 queued / 16 running / 936 errors / 34% coverage ] ****** [937 done /762 queued / 16 running / 936 errors / 34% coverage ] ****** [938 done /768 queued / 16 running / 937 errors / 34% coverage ] ****** [938 done /768 queued / 16 running / 937 errors / 34% coverage ] ****** [939 done /767 queued / 16 running / 938 errors / 34% coverage ] ****** [939 done /767 queued / 16 running / 938 errors / 34% coverage ] ****** [940 done /766 queued / 16 running / 939 errors / 34% coverage ] ****** [940 done /766 queued / 16 running / 939 errors / 34% coverage ] ****** [941 done /771 queued / 16 running / 940 errors / 34% coverage ] ****** [941 done /771 queued / 16 running / 940 errors / 34% coverage ] ****** [942 done /773 queued / 16 running / 941 errors / 34% coverage ] ****** [942 done /773 queued / 16 running / 941 errors / 34% coverage ] ****** [943 done /776 queued / 16 running / 942 errors / 34% coverage ] ****** [943 done /776 queued / 16 running / 942 errors / 34% coverage ] ****** [944 done /778 queued / 16 running / 943 errors / 34% coverage ] ****** [944 done /778 queued / 16 running / 943 errors / 34% coverage ] ****** [945 done /777 queued / 16 running / 944 errors / 34% coverage ] ****** [945 done /777 queued / 16 running / 944 errors / 34% coverage ] ****** [946 done /776 queued / 16 running / 945 errors / 34% coverage ] ****** [946 done /776 queued / 16 running / 945 errors / 34% coverage ] ****** [947 done /777 queued / 16 running / 946 errors / 34% coverage ] ****** [947 done /777 queued / 16 running / 946 errors / 34% coverage ] ****** [948 done /779 queued / 16 running / 947 errors / 34% coverage ] ****** [948 done /779 queued / 16 running / 947 errors / 34% coverage ] ****** [949 done /780 queued / 16 running / 948 errors / 34% coverage ] ****** [949 done /780 queued / 16 running / 948 errors / 34% coverage ] ****** [950 done /779 queued / 16 running / 949 errors / 34% coverage ] ****** [950 done /779 queued / 16 running / 949 errors / 34% coverage ] ****** [951 done /779 queued / 16 running / 950 errors / 34% coverage ] ****** [951 done /779 queued / 16 running / 950 errors / 34% coverage ] ****** [952 done /781 queued / 16 running / 951 errors / 34% coverage ] ****** [952 done /781 queued / 16 running / 951 errors / 34% coverage ] ****** [953 done /783 queued / 16 running / 952 errors / 34% coverage ] ****** [953 done /783 queued / 16 running / 952 errors / 34% coverage ] ****** [954 done /785 queued / 16 running / 953 errors / 34% coverage ] ****** [954 done /785 queued / 16 running / 953 errors / 34% coverage ] ****** [955 done /784 queued / 16 running / 954 errors / 34% coverage ] ****** [955 done /784 queued / 16 running / 954 errors / 34% coverage ] ****** [956 done /786 queued / 16 running / 955 errors / 34% coverage ] ****** [956 done /786 queued / 16 running / 955 errors / 34% coverage ] ****** [957 done /788 queued / 16 running / 956 errors / 34% coverage ] ****** [957 done /788 queued / 16 running / 956 errors / 34% coverage ] ****** [958 done /789 queued / 16 running / 957 errors / 34% coverage ] ****** [958 done /789 queued / 16 running / 957 errors / 34% coverage ] ****** [959 done /792 queued / 16 running / 958 errors / 34% coverage ] ****** [959 done /792 queued / 16 running / 958 errors / 34% coverage ] ****** [960 done /793 queued / 16 running / 959 errors / 34% coverage ] ****** [960 done /793 queued / 16 running / 959 errors / 34% coverage ] ****** [961 done /794 queued / 16 running / 960 errors / 34% coverage ] ****** [961 done /794 queued / 16 running / 960 errors / 34% coverage ] ****** [962 done /794 queued / 16 running / 961 errors / 34% coverage ] ****** [962 done /794 queued / 16 running / 961 errors / 34% coverage ] ****** [963 done /795 queued / 16 running / 962 errors / 34% coverage ] ****** [963 done /795 queued / 16 running / 962 errors / 34% coverage ] ****** [964 done /800 queued / 16 running / 963 errors / 34% coverage ] ****** [964 done /800 queued / 16 running / 963 errors / 34% coverage ] ****** [965 done /802 queued / 16 running / 964 errors / 34% coverage ] ****** [965 done /802 queued / 16 running / 964 errors / 34% coverage ] ****** [966 done /804 queued / 16 running / 965 errors / 34% coverage ] ****** [966 done /804 queued / 16 running / 965 errors / 34% coverage ] ****** [967 done /806 queued / 16 running / 966 errors / 34% coverage ] ****** [967 done /806 queued / 16 running / 966 errors / 34% coverage ] ****** [968 done /805 queued / 16 running / 967 errors / 34% coverage ] ****** [968 done /805 queued / 16 running / 967 errors / 34% coverage ] ****** [969 done /806 queued / 16 running / 968 errors / 34% coverage ] ****** [969 done /806 queued / 16 running / 968 errors / 34% coverage ] ****** [970 done /805 queued / 16 running / 969 errors / 34% coverage ] ****** [970 done /805 queued / 16 running / 969 errors / 34% coverage ] ****** [971 done /806 queued / 16 running / 970 errors / 34% coverage ] ****** [971 done /806 queued / 16 running / 970 errors / 34% coverage ] ****** [972 done /809 queued / 16 running / 971 errors / 34% coverage ] ****** [972 done /809 queued / 16 running / 971 errors / 34% coverage ] ****** [973 done /813 queued / 16 running / 972 errors / 34% coverage ] ****** [973 done /813 queued / 16 running / 972 errors / 34% coverage ] ****** [974 done /815 queued / 16 running / 973 errors / 34% coverage ] ****** [974 done /815 queued / 16 running / 973 errors / 34% coverage ] ****** [975 done /817 queued / 16 running / 974 errors / 34% coverage ] ****** [975 done /817 queued / 16 running / 974 errors / 34% coverage ] ****** [976 done /818 queued / 16 running / 975 errors / 34% coverage ] ****** [976 done /818 queued / 16 running / 975 errors / 34% coverage ] ****** [977 done /819 queued / 16 running / 976 errors / 34% coverage ] ****** [977 done /819 queued / 16 running / 976 errors / 34% coverage ] ****** [978 done /818 queued / 16 running / 977 errors / 34% coverage ] ****** [978 done /818 queued / 16 running / 977 errors / 34% coverage ] ****** [979 done /819 queued / 16 running / 978 errors / 34% coverage ] ****** [979 done /819 queued / 16 running / 978 errors / 34% coverage ] ****** [980 done /819 queued / 16 running / 979 errors / 34% coverage ] ****** [980 done /819 queued / 16 running / 979 errors / 34% coverage ] ****** [981 done /819 queued / 16 running / 980 errors / 34% coverage ] ****** [981 done /819 queued / 16 running / 980 errors / 34% coverage ] ****** [982 done /819 queued / 16 running / 981 errors / 34% coverage ] ****** [982 done /819 queued / 16 running / 981 errors / 34% coverage ] ****** [983 done /821 queued / 16 running / 982 errors / 34% coverage ] ****** [983 done /821 queued / 16 running / 982 errors / 34% coverage ] ****** [984 done /820 queued / 16 running / 983 errors / 34% coverage ] ****** [984 done /820 queued / 16 running / 983 errors / 34% coverage ] ****** [985 done /823 queued / 16 running / 984 errors / 34% coverage ] ****** [985 done /823 queued / 16 running / 984 errors / 34% coverage ] ****** [986 done /822 queued / 16 running / 985 errors / 34% coverage ] ****** [986 done /822 queued / 16 running / 985 errors / 34% coverage ] ****** [987 done /824 queued / 16 running / 986 errors / 34% coverage ] ****** [987 done /824 queued / 16 running / 986 errors / 34% coverage ] ****** [988 done /826 queued / 16 running / 987 errors / 34% coverage ] ****** [988 done /826 queued / 16 running / 987 errors / 34% coverage ] ****** [989 done /827 queued / 16 running / 988 errors / 34% coverage ] ****** [989 done /827 queued / 16 running / 988 errors / 34% coverage ] ****** [990 done /826 queued / 16 running / 989 errors / 34% coverage ] ****** [990 done /826 queued / 16 running / 989 errors / 34% coverage ] ****** [991 done /829 queued / 16 running / 990 errors / 34% coverage ] ****** [991 done /829 queued / 16 running / 990 errors / 34% coverage ] ****** [992 done /830 queued / 16 running / 991 errors / 34% coverage ] ****** [992 done /830 queued / 16 running / 991 errors / 34% coverage ] ****** [993 done /830 queued / 16 running / 992 errors / 34% coverage ] ****** [993 done /830 queued / 16 running / 992 errors / 34% coverage ] ****** [994 done /831 queued / 16 running / 993 errors / 34% coverage ] ****** [994 done /831 queued / 16 running / 993 errors / 34% coverage ] ****** [995 done /830 queued / 16 running / 994 errors / 34% coverage ] ****** [995 done /830 queued / 16 running / 994 errors / 34% coverage ] ****** [996 done /831 queued / 16 running / 995 errors / 34% coverage ] ****** [996 done /831 queued / 16 running / 995 errors / 34% coverage ] ****** [997 done /830 queued / 16 running / 996 errors / 34% coverage ] ****** [997 done /830 queued / 16 running / 996 errors / 34% coverage ] ****** [998 done /830 queued / 16 running / 997 errors / 34% coverage ] ****** [998 done /830 queued / 16 running / 997 errors / 34% coverage ] ****** [999 done /832 queued / 16 running / 998 errors / 34% coverage ] ****** [999 done /832 queued / 16 running / 998 errors / 34% coverage ] ****** [1000 done /831 queued / 16 running / 999 errors / 34% coverage ] ****** [1000 done /831 queued / 16 running / 999 errors / 34% coverage ] ****** [1001 done /832 queued / 16 running / 1000 errors / 34% coverage ] ****** [1001 done /832 queued / 16 running / 1000 errors / 34% coverage ] ****** [1002 done /834 queued / 16 running / 1001 errors / 34% coverage ] ****** [1002 done /834 queued / 16 running / 1001 errors / 34% coverage ] ****** [1003 done /837 queued / 16 running / 1002 errors / 34% coverage ] ****** [1003 done /837 queued / 16 running / 1002 errors / 34% coverage ] ****** [1004 done /836 queued / 16 running / 1003 errors / 34% coverage ] ****** [1004 done /836 queued / 16 running / 1003 errors / 34% coverage ] ****** [1005 done /835 queued / 16 running / 1004 errors / 34% coverage ] ****** [1005 done /835 queued / 16 running / 1004 errors / 34% coverage ] ****** [1006 done /834 queued / 16 running / 1005 errors / 34% coverage ] ****** [1006 done /834 queued / 16 running / 1005 errors / 34% coverage ] ****** [1007 done /835 queued / 16 running / 1006 errors / 34% coverage ] ****** [1007 done /835 queued / 16 running / 1006 errors / 34% coverage ] ****** [1008 done /836 queued / 16 running / 1007 errors / 34% coverage ] ****** [1008 done /836 queued / 16 running / 1007 errors / 34% coverage ] ****** [1009 done /838 queued / 16 running / 1008 errors / 34% coverage ] ****** [1009 done /838 queued / 16 running / 1008 errors / 34% coverage ] ****** [1010 done /838 queued / 16 running / 1009 errors / 34% coverage ] ****** [1010 done /838 queued / 16 running / 1009 errors / 34% coverage ] ****** [1011 done /837 queued / 16 running / 1010 errors / 34% coverage ] ****** [1011 done /837 queued / 16 running / 1010 errors / 34% coverage ] ****** [1012 done /836 queued / 16 running / 1011 errors / 34% coverage ] ****** [1012 done /836 queued / 16 running / 1011 errors / 34% coverage ] ****** [1013 done /836 queued / 16 running / 1012 errors / 34% coverage ] ****** [1013 done /836 queued / 16 running / 1012 errors / 34% coverage ] ****** [1014 done /837 queued / 16 running / 1013 errors / 34% coverage ] ****** [1014 done /837 queued / 16 running / 1013 errors / 34% coverage ] ****** [1015 done /837 queued / 16 running / 1014 errors / 34% coverage ] ****** [1015 done /837 queued / 16 running / 1014 errors / 34% coverage ] ****** [1016 done /838 queued / 16 running / 1015 errors / 34% coverage ] ****** [1016 done /838 queued / 16 running / 1015 errors / 34% coverage ] ****** [1017 done /837 queued / 16 running / 1016 errors / 34% coverage ] ****** [1017 done /837 queued / 16 running / 1016 errors / 34% coverage ] ****** [1018 done /836 queued / 16 running / 1017 errors / 34% coverage ] ****** [1018 done /836 queued / 16 running / 1017 errors / 34% coverage ] ****** [1019 done /837 queued / 16 running / 1018 errors / 34% coverage ] ****** [1019 done /837 queued / 16 running / 1018 errors / 34% coverage ] ****** [1020 done /839 queued / 16 running / 1019 errors / 34% coverage ] ****** [1020 done /839 queued / 16 running / 1019 errors / 34% coverage ] ****** [1021 done /838 queued / 16 running / 1020 errors / 34% coverage ] ****** [1021 done /838 queued / 16 running / 1020 errors / 34% coverage ] ****** [1022 done /840 queued / 16 running / 1021 errors / 34% coverage ] ****** [1022 done /840 queued / 16 running / 1021 errors / 34% coverage ] ****** [1023 done /840 queued / 16 running / 1022 errors / 34% coverage ] ****** [1023 done /840 queued / 16 running / 1022 errors / 34% coverage ] ****** [1024 done /842 queued / 16 running / 1023 errors / 34% coverage ] ****** [1024 done /842 queued / 16 running / 1023 errors / 34% coverage ] ****** [1025 done /844 queued / 16 running / 1024 errors / 34% coverage ] ****** [1025 done /844 queued / 16 running / 1024 errors / 34% coverage ] ****** [1026 done /846 queued / 16 running / 1025 errors / 34% coverage ] ****** [1026 done /846 queued / 16 running / 1025 errors / 34% coverage ] ****** [1027 done /848 queued / 16 running / 1026 errors / 34% coverage ] ****** [1027 done /848 queued / 16 running / 1026 errors / 34% coverage ] ****** [1028 done /850 queued / 16 running / 1027 errors / 34% coverage ] ****** [1028 done /850 queued / 16 running / 1027 errors / 34% coverage ] ****** [1029 done /849 queued / 16 running / 1028 errors / 34% coverage ] ****** [1029 done /849 queued / 16 running / 1028 errors / 34% coverage ] ****** [1030 done /851 queued / 16 running / 1029 errors / 34% coverage ] ****** [1030 done /851 queued / 16 running / 1029 errors / 34% coverage ] ****** [1031 done /854 queued / 16 running / 1030 errors / 34% coverage ] ****** [1031 done /854 queued / 16 running / 1030 errors / 34% coverage ] ****** [1032 done /858 queued / 16 running / 1031 errors / 34% coverage ] ****** [1032 done /858 queued / 16 running / 1031 errors / 34% coverage ] ****** [1033 done /857 queued / 16 running / 1032 errors / 34% coverage ] ****** [1033 done /857 queued / 16 running / 1032 errors / 34% coverage ] ****** [1034 done /858 queued / 16 running / 1033 errors / 34% coverage ] ****** [1034 done /858 queued / 16 running / 1033 errors / 34% coverage ] ****** [1035 done /859 queued / 16 running / 1034 errors / 34% coverage ] ****** [1035 done /859 queued / 16 running / 1034 errors / 34% coverage ] ****** [1036 done /860 queued / 16 running / 1035 errors / 34% coverage ] ****** [1036 done /860 queued / 16 running / 1035 errors / 34% coverage ] ****** [1037 done /862 queued / 16 running / 1036 errors / 34% coverage ] ****** [1037 done /862 queued / 16 running / 1036 errors / 34% coverage ] ****** [1038 done /864 queued / 16 running / 1037 errors / 34% coverage ] ****** [1038 done /864 queued / 16 running / 1037 errors / 34% coverage ] ****** [1039 done /866 queued / 16 running / 1038 errors / 34% coverage ] ****** [1039 done /866 queued / 16 running / 1038 errors / 34% coverage ] ****** [1040 done /865 queued / 16 running / 1039 errors / 34% coverage ] ****** [1040 done /865 queued / 16 running / 1039 errors / 34% coverage ] ****** [1041 done /867 queued / 16 running / 1040 errors / 34% coverage ] ****** [1041 done /867 queued / 16 running / 1040 errors / 34% coverage ] ****** [1042 done /869 queued / 16 running / 1041 errors / 34% coverage ] ****** [1042 done /869 queued / 16 running / 1041 errors / 34% coverage ] ****** [1043 done /868 queued / 16 running / 1042 errors / 34% coverage ] ****** [1043 done /868 queued / 16 running / 1042 errors / 34% coverage ] ****** [1044 done /868 queued / 16 running / 1043 errors / 34% coverage ] ****** [1044 done /868 queued / 16 running / 1043 errors / 34% coverage ] ****** [1045 done /867 queued / 16 running / 1044 errors / 34% coverage ] ****** [1045 done /867 queued / 16 running / 1044 errors / 34% coverage ] ****** [1046 done /870 queued / 16 running / 1045 errors / 34% coverage ] ****** [1046 done /870 queued / 16 running / 1045 errors / 34% coverage ] ****** [1047 done /869 queued / 16 running / 1046 errors / 34% coverage ] ****** [1047 done /869 queued / 16 running / 1046 errors / 34% coverage ] ****** [1048 done /868 queued / 16 running / 1047 errors / 34% coverage ] ****** [1048 done /868 queued / 16 running / 1047 errors / 34% coverage ] ****** [1049 done /869 queued / 16 running / 1048 errors / 34% coverage ] ****** [1049 done /869 queued / 16 running / 1048 errors / 34% coverage ] ****** [1050 done /868 queued / 16 running / 1049 errors / 34% coverage ] ****** [1050 done /868 queued / 16 running / 1049 errors / 34% coverage ] ****** [1051 done /867 queued / 16 running / 1050 errors / 34% coverage ] ****** [1051 done /867 queued / 16 running / 1050 errors / 34% coverage ] ****** [1052 done /867 queued / 16 running / 1051 errors / 34% coverage ] ****** [1052 done /867 queued / 16 running / 1051 errors / 34% coverage ] ****** [1053 done /866 queued / 16 running / 1052 errors / 34% coverage ] ****** [1053 done /866 queued / 16 running / 1052 errors / 34% coverage ] ****** [1054 done /868 queued / 16 running / 1053 errors / 34% coverage ] ****** [1054 done /868 queued / 16 running / 1053 errors / 34% coverage ] ****** [1055 done /868 queued / 16 running / 1054 errors / 34% coverage ] ****** [1055 done /868 queued / 16 running / 1054 errors / 34% coverage ] ****** [1056 done /868 queued / 16 running / 1055 errors / 34% coverage ] ****** [1056 done /868 queued / 16 running / 1055 errors / 34% coverage ] ****** [1057 done /868 queued / 16 running / 1056 errors / 34% coverage ] ****** [1057 done /868 queued / 16 running / 1056 errors / 34% coverage ] ****** [1058 done /869 queued / 16 running / 1057 errors / 34% coverage ] ****** [1058 done /869 queued / 16 running / 1057 errors / 34% coverage ] ****** [1059 done /870 queued / 16 running / 1058 errors / 34% coverage ] ****** [1059 done /870 queued / 16 running / 1058 errors / 34% coverage ] ****** [1060 done /874 queued / 16 running / 1059 errors / 34% coverage ] ****** [1060 done /874 queued / 16 running / 1059 errors / 34% coverage ] ****** [1061 done /878 queued / 16 running / 1060 errors / 34% coverage ] ****** [1061 done /878 queued / 16 running / 1060 errors / 34% coverage ] ****** [1062 done /877 queued / 16 running / 1061 errors / 34% coverage ] ****** [1062 done /877 queued / 16 running / 1061 errors / 34% coverage ] ****** [1063 done /878 queued / 16 running / 1062 errors / 34% coverage ] ****** [1063 done /878 queued / 16 running / 1062 errors / 34% coverage ] ****** [1064 done /877 queued / 16 running / 1063 errors / 34% coverage ] ****** [1064 done /877 queued / 16 running / 1063 errors / 34% coverage ] ****** [1065 done /879 queued / 16 running / 1064 errors / 34% coverage ] ****** [1065 done /879 queued / 16 running / 1064 errors / 34% coverage ] ****** [1066 done /878 queued / 16 running / 1065 errors / 34% coverage ] ****** [1066 done /878 queued / 16 running / 1065 errors / 34% coverage ] ****** [1067 done /879 queued / 16 running / 1066 errors / 34% coverage ] ****** [1067 done /879 queued / 16 running / 1066 errors / 34% coverage ] ****** [1068 done /878 queued / 16 running / 1067 errors / 34% coverage ] ****** [1068 done /878 queued / 16 running / 1067 errors / 34% coverage ] ****** [1069 done /880 queued / 16 running / 1068 errors / 34% coverage ] ****** [1069 done /880 queued / 16 running / 1068 errors / 34% coverage ] ****** [1070 done /883 queued / 16 running / 1069 errors / 34% coverage ] ****** [1070 done /883 queued / 16 running / 1069 errors / 34% coverage ] ****** [1071 done /882 queued / 16 running / 1070 errors / 34% coverage ] ****** [1071 done /882 queued / 16 running / 1070 errors / 34% coverage ] ****** [1072 done /883 queued / 16 running / 1071 errors / 34% coverage ] ****** [1072 done /883 queued / 16 running / 1071 errors / 34% coverage ] ****** [1073 done /885 queued / 16 running / 1072 errors / 34% coverage ] ****** [1073 done /885 queued / 16 running / 1072 errors / 34% coverage ] ****** [1074 done /886 queued / 16 running / 1073 errors / 34% coverage ] ****** [1074 done /886 queued / 16 running / 1073 errors / 34% coverage ] ****** [1075 done /886 queued / 16 running / 1074 errors / 34% coverage ] ****** [1075 done /886 queued / 16 running / 1074 errors / 34% coverage ] ****** [1076 done /886 queued / 16 running / 1075 errors / 34% coverage ] ****** [1076 done /886 queued / 16 running / 1075 errors / 34% coverage ] ****** [1077 done /885 queued / 16 running / 1076 errors / 34% coverage ] ****** [1077 done /885 queued / 16 running / 1076 errors / 34% coverage ] ****** [1078 done /888 queued / 16 running / 1077 errors / 34% coverage ] ****** [1078 done /888 queued / 16 running / 1077 errors / 34% coverage ] ****** [1079 done /889 queued / 16 running / 1078 errors / 34% coverage ] ****** [1079 done /889 queued / 16 running / 1078 errors / 34% coverage ] ****** [1080 done /890 queued / 16 running / 1079 errors / 34% coverage ] ****** [1080 done /890 queued / 16 running / 1079 errors / 34% coverage ] ****** [1081 done /891 queued / 16 running / 1080 errors / 34% coverage ] ****** [1081 done /891 queued / 16 running / 1080 errors / 34% coverage ] ****** [1082 done /892 queued / 16 running / 1081 errors / 34% coverage ] ****** [1082 done /892 queued / 16 running / 1081 errors / 34% coverage ] ****** [1083 done /892 queued / 16 running / 1082 errors / 34% coverage ] ****** [1083 done /892 queued / 16 running / 1082 errors / 34% coverage ] ****** [1084 done /892 queued / 16 running / 1083 errors / 34% coverage ] ****** [1084 done /892 queued / 16 running / 1083 errors / 34% coverage ] ****** [1085 done /891 queued / 16 running / 1084 errors / 34% coverage ] ****** [1085 done /891 queued / 16 running / 1084 errors / 34% coverage ] ****** [1086 done /891 queued / 16 running / 1085 errors / 34% coverage ] ****** [1086 done /891 queued / 16 running / 1085 errors / 34% coverage ] ****** [1087 done /892 queued / 16 running / 1086 errors / 34% coverage ] ****** [1087 done /892 queued / 16 running / 1086 errors / 34% coverage ] ****** [1088 done /891 queued / 16 running / 1087 errors / 34% coverage ] ****** [1088 done /891 queued / 16 running / 1087 errors / 34% coverage ] ****** [1089 done /891 queued / 16 running / 1088 errors / 34% coverage ] ****** [1089 done /891 queued / 16 running / 1088 errors / 34% coverage ] ****** [1090 done /890 queued / 16 running / 1089 errors / 34% coverage ] ****** [1090 done /890 queued / 16 running / 1089 errors / 34% coverage ] ****** [1091 done /890 queued / 16 running / 1090 errors / 34% coverage ] ****** [1091 done /890 queued / 16 running / 1090 errors / 34% coverage ] ****** [1092 done /891 queued / 16 running / 1091 errors / 34% coverage ] ****** [1092 done /891 queued / 16 running / 1091 errors / 34% coverage ] ****** [1093 done /894 queued / 16 running / 1092 errors / 34% coverage ] ****** [1093 done /894 queued / 16 running / 1092 errors / 34% coverage ] ****** [1094 done /893 queued / 16 running / 1093 errors / 34% coverage ] ****** [1094 done /893 queued / 16 running / 1093 errors / 34% coverage ] ****** [1095 done /892 queued / 16 running / 1094 errors / 34% coverage ] ****** [1095 done /892 queued / 16 running / 1094 errors / 34% coverage ] ****** [1096 done /893 queued / 16 running / 1095 errors / 34% coverage ] ****** [1096 done /893 queued / 16 running / 1095 errors / 34% coverage ] ****** [1097 done /892 queued / 16 running / 1096 errors / 34% coverage ] ****** [1097 done /892 queued / 16 running / 1096 errors / 34% coverage ] ****** [1098 done /891 queued / 16 running / 1097 errors / 34% coverage ] ****** [1098 done /891 queued / 16 running / 1097 errors / 34% coverage ] ****** [1099 done /894 queued / 16 running / 1098 errors / 34% coverage ] ****** [1099 done /894 queued / 16 running / 1098 errors / 34% coverage ] ****** [1100 done /894 queued / 16 running / 1099 errors / 34% coverage ] ****** [1100 done /894 queued / 16 running / 1099 errors / 34% coverage ] ****** [1101 done /896 queued / 16 running / 1100 errors / 34% coverage ] ****** [1101 done /896 queued / 16 running / 1100 errors / 34% coverage ] ****** [1102 done /895 queued / 16 running / 1101 errors / 34% coverage ] ****** [1102 done /895 queued / 16 running / 1101 errors / 34% coverage ] ****** [1103 done /894 queued / 16 running / 1102 errors / 34% coverage ] ****** [1103 done /894 queued / 16 running / 1102 errors / 34% coverage ] ****** [1104 done /896 queued / 16 running / 1103 errors / 34% coverage ] ****** [1104 done /896 queued / 16 running / 1103 errors / 34% coverage ] ****** [1105 done /897 queued / 16 running / 1104 errors / 34% coverage ] ****** [1105 done /897 queued / 16 running / 1104 errors / 34% coverage ] ****** [1106 done /897 queued / 16 running / 1105 errors / 34% coverage ] ****** [1106 done /897 queued / 16 running / 1105 errors / 34% coverage ] ****** [1107 done /896 queued / 16 running / 1106 errors / 34% coverage ] ****** [1107 done /896 queued / 16 running / 1106 errors / 34% coverage ] ****** [1108 done /898 queued / 16 running / 1107 errors / 34% coverage ] ****** [1108 done /898 queued / 16 running / 1107 errors / 34% coverage ] ****** [1109 done /897 queued / 16 running / 1108 errors / 34% coverage ] ****** [1109 done /897 queued / 16 running / 1108 errors / 34% coverage ] ****** [1110 done /898 queued / 16 running / 1109 errors / 34% coverage ] ****** [1110 done /898 queued / 16 running / 1109 errors / 34% coverage ] ****** [1111 done /897 queued / 16 running / 1110 errors / 34% coverage ] ****** [1111 done /897 queued / 16 running / 1110 errors / 34% coverage ] ****** [1112 done /899 queued / 16 running / 1111 errors / 34% coverage ] ****** [1112 done /899 queued / 16 running / 1111 errors / 34% coverage ] ****** [1113 done /898 queued / 16 running / 1112 errors / 34% coverage ] ****** [1113 done /898 queued / 16 running / 1112 errors / 34% coverage ] ****** [1114 done /898 queued / 16 running / 1113 errors / 34% coverage ] ****** [1114 done /898 queued / 16 running / 1113 errors / 34% coverage ] ****** [1115 done /897 queued / 16 running / 1114 errors / 34% coverage ] ****** [1115 done /897 queued / 16 running / 1114 errors / 34% coverage ] ****** [1116 done /899 queued / 16 running / 1115 errors / 34% coverage ] ****** [1116 done /899 queued / 16 running / 1115 errors / 34% coverage ] ****** [1117 done /902 queued / 16 running / 1116 errors / 34% coverage ] ****** [1117 done /902 queued / 16 running / 1116 errors / 34% coverage ] ****** [1118 done /903 queued / 16 running / 1117 errors / 34% coverage ] ****** [1118 done /903 queued / 16 running / 1117 errors / 34% coverage ] ****** [1119 done /902 queued / 16 running / 1118 errors / 34% coverage ] ****** [1119 done /902 queued / 16 running / 1118 errors / 34% coverage ] ****** [1120 done /901 queued / 16 running / 1119 errors / 34% coverage ] ****** [1120 done /901 queued / 16 running / 1119 errors / 34% coverage ] ****** [1121 done /902 queued / 16 running / 1120 errors / 34% coverage ] ****** [1121 done /902 queued / 16 running / 1120 errors / 34% coverage ] ****** [1122 done /901 queued / 16 running / 1121 errors / 34% coverage ] ****** [1122 done /901 queued / 16 running / 1121 errors / 34% coverage ] ****** [1123 done /905 queued / 16 running / 1122 errors / 34% coverage ] ****** [1123 done /905 queued / 16 running / 1122 errors / 34% coverage ] ****** [1124 done /911 queued / 16 running / 1123 errors / 34% coverage ] ****** [1124 done /911 queued / 16 running / 1123 errors / 34% coverage ] ****** [1125 done /910 queued / 16 running / 1124 errors / 34% coverage ] ****** [1125 done /910 queued / 16 running / 1124 errors / 34% coverage ] ****** [1126 done /910 queued / 16 running / 1125 errors / 34% coverage ] ****** [1126 done /910 queued / 16 running / 1125 errors / 34% coverage ] ****** [1127 done /909 queued / 16 running / 1126 errors / 34% coverage ] ****** [1127 done /909 queued / 16 running / 1126 errors / 34% coverage ] ****** [1128 done /912 queued / 16 running / 1127 errors / 34% coverage ] ****** [1128 done /912 queued / 16 running / 1127 errors / 34% coverage ] ****** [1129 done /913 queued / 16 running / 1128 errors / 34% coverage ] ****** [1129 done /913 queued / 16 running / 1128 errors / 34% coverage ] ****** [1130 done /916 queued / 16 running / 1129 errors / 34% coverage ] ****** [1130 done /916 queued / 16 running / 1129 errors / 34% coverage ] ****** [1131 done /915 queued / 16 running / 1130 errors / 34% coverage ] ****** [1131 done /915 queued / 16 running / 1130 errors / 34% coverage ] ****** [1132 done /915 queued / 16 running / 1131 errors / 34% coverage ] ****** [1132 done /915 queued / 16 running / 1131 errors / 34% coverage ] ****** [1133 done /915 queued / 16 running / 1132 errors / 34% coverage ] ****** [1133 done /915 queued / 16 running / 1132 errors / 34% coverage ] ****** [1134 done /914 queued / 16 running / 1133 errors / 34% coverage ] ****** [1134 done /914 queued / 16 running / 1133 errors / 34% coverage ] ****** [1135 done /917 queued / 16 running / 1134 errors / 34% coverage ] ****** [1135 done /917 queued / 16 running / 1134 errors / 34% coverage ] ****** [1136 done /918 queued / 16 running / 1135 errors / 34% coverage ] ****** [1136 done /918 queued / 16 running / 1135 errors / 34% coverage ] ****** [1137 done /917 queued / 16 running / 1136 errors / 34% coverage ] ****** [1137 done /917 queued / 16 running / 1136 errors / 34% coverage ] ****** [1138 done /916 queued / 16 running / 1137 errors / 34% coverage ] ****** [1138 done /916 queued / 16 running / 1137 errors / 34% coverage ] ****** [1139 done /920 queued / 16 running / 1138 errors / 34% coverage ] ****** [1139 done /920 queued / 16 running / 1138 errors / 34% coverage ] ****** [1140 done /922 queued / 16 running / 1139 errors / 34% coverage ] ****** [1140 done /922 queued / 16 running / 1139 errors / 34% coverage ] ****** [1141 done /924 queued / 16 running / 1140 errors / 34% coverage ] ****** [1141 done /924 queued / 16 running / 1140 errors / 34% coverage ] ****** [1142 done /924 queued / 16 running / 1141 errors / 34% coverage ] ****** [1142 done /924 queued / 16 running / 1141 errors / 34% coverage ] ****** [1143 done /926 queued / 16 running / 1142 errors / 34% coverage ] ****** [1143 done /926 queued / 16 running / 1142 errors / 34% coverage ] ****** [1144 done /927 queued / 16 running / 1143 errors / 34% coverage ] ****** [1144 done /927 queued / 16 running / 1143 errors / 34% coverage ] ****** [1145 done /929 queued / 16 running / 1144 errors / 34% coverage ] ****** [1145 done /929 queued / 16 running / 1144 errors / 34% coverage ] ****** [1146 done /930 queued / 16 running / 1145 errors / 34% coverage ] ****** [1146 done /930 queued / 16 running / 1145 errors / 34% coverage ] ****** [1147 done /931 queued / 16 running / 1146 errors / 34% coverage ] ****** [1147 done /931 queued / 16 running / 1146 errors / 34% coverage ] ****** [1148 done /931 queued / 16 running / 1147 errors / 34% coverage ] ****** [1148 done /931 queued / 16 running / 1147 errors / 34% coverage ] ****** [1149 done /930 queued / 16 running / 1148 errors / 34% coverage ] ****** [1149 done /930 queued / 16 running / 1148 errors / 34% coverage ] ****** [1150 done /930 queued / 16 running / 1149 errors / 34% coverage ] ****** [1150 done /930 queued / 16 running / 1149 errors / 34% coverage ] ****** [1151 done /932 queued / 16 running / 1150 errors / 34% coverage ] ****** [1151 done /932 queued / 16 running / 1150 errors / 34% coverage ] ****** [1152 done /931 queued / 16 running / 1151 errors / 34% coverage ] ****** [1152 done /931 queued / 16 running / 1151 errors / 34% coverage ] ****** [1153 done /931 queued / 16 running / 1152 errors / 34% coverage ] ****** [1153 done /931 queued / 16 running / 1152 errors / 34% coverage ] ****** [1154 done /930 queued / 16 running / 1153 errors / 34% coverage ] ****** [1154 done /930 queued / 16 running / 1153 errors / 34% coverage ] ****** [1155 done /929 queued / 16 running / 1154 errors / 34% coverage ] ****** [1155 done /929 queued / 16 running / 1154 errors / 34% coverage ] ****** [1156 done /928 queued / 16 running / 1155 errors / 34% coverage ] ****** [1156 done /928 queued / 16 running / 1155 errors / 34% coverage ] ****** [1157 done /927 queued / 16 running / 1156 errors / 34% coverage ] ****** [1157 done /927 queued / 16 running / 1156 errors / 34% coverage ] ****** [1158 done /926 queued / 16 running / 1157 errors / 34% coverage ] ****** [1158 done /926 queued / 16 running / 1157 errors / 34% coverage ] ****** [1159 done /925 queued / 16 running / 1158 errors / 34% coverage ] ****** [1159 done /925 queued / 16 running / 1158 errors / 34% coverage ] ****** [1160 done /927 queued / 16 running / 1159 errors / 34% coverage ] ****** [1160 done /927 queued / 16 running / 1159 errors / 34% coverage ] ****** [1161 done /928 queued / 16 running / 1160 errors / 34% coverage ] ****** [1161 done /928 queued / 16 running / 1160 errors / 34% coverage ] ****** [1162 done /927 queued / 16 running / 1161 errors / 34% coverage ] ****** [1162 done /927 queued / 16 running / 1161 errors / 34% coverage ] ****** [1163 done /928 queued / 16 running / 1162 errors / 34% coverage ] ****** [1163 done /928 queued / 16 running / 1162 errors / 34% coverage ] ****** [1164 done /927 queued / 16 running / 1163 errors / 34% coverage ] ****** [1164 done /927 queued / 16 running / 1163 errors / 34% coverage ] ****** [1165 done /930 queued / 16 running / 1164 errors / 34% coverage ] ****** [1165 done /930 queued / 16 running / 1164 errors / 34% coverage ] ****** [1166 done /929 queued / 16 running / 1165 errors / 34% coverage ] ****** [1166 done /929 queued / 16 running / 1165 errors / 34% coverage ] ****** [1167 done /931 queued / 16 running / 1166 errors / 34% coverage ] ****** [1167 done /931 queued / 16 running / 1166 errors / 34% coverage ] ****** [1168 done /930 queued / 16 running / 1167 errors / 34% coverage ] ****** [1168 done /930 queued / 16 running / 1167 errors / 34% coverage ] ****** [1169 done /929 queued / 16 running / 1168 errors / 34% coverage ] ****** [1169 done /929 queued / 16 running / 1168 errors / 34% coverage ] ****** [1170 done /928 queued / 16 running / 1169 errors / 34% coverage ] ****** [1170 done /928 queued / 16 running / 1169 errors / 34% coverage ] ****** [1171 done /930 queued / 16 running / 1170 errors / 34% coverage ] ****** [1171 done /930 queued / 16 running / 1170 errors / 34% coverage ] ****** [1172 done /930 queued / 16 running / 1171 errors / 34% coverage ] ****** [1172 done /930 queued / 16 running / 1171 errors / 34% coverage ] ****** [1173 done /931 queued / 16 running / 1172 errors / 34% coverage ] ****** [1173 done /931 queued / 16 running / 1172 errors / 34% coverage ] ****** [1174 done /934 queued / 16 running / 1173 errors / 34% coverage ] ****** [1174 done /934 queued / 16 running / 1173 errors / 34% coverage ] ****** [1175 done /935 queued / 16 running / 1174 errors / 34% coverage ] ****** [1175 done /935 queued / 16 running / 1174 errors / 34% coverage ] ****** [1176 done /938 queued / 16 running / 1175 errors / 34% coverage ] ****** [1176 done /938 queued / 16 running / 1175 errors / 34% coverage ] ****** [1177 done /941 queued / 16 running / 1176 errors / 34% coverage ] ****** [1177 done /941 queued / 16 running / 1176 errors / 34% coverage ] ****** [1178 done /946 queued / 16 running / 1177 errors / 34% coverage ] ****** [1178 done /946 queued / 16 running / 1177 errors / 34% coverage ] ****** [1179 done /948 queued / 16 running / 1178 errors / 34% coverage ] ****** [1179 done /948 queued / 16 running / 1178 errors / 34% coverage ] ****** [1180 done /950 queued / 16 running / 1179 errors / 34% coverage ] ****** [1180 done /950 queued / 16 running / 1179 errors / 34% coverage ] ****** [1181 done /951 queued / 16 running / 1180 errors / 34% coverage ] ****** [1181 done /951 queued / 16 running / 1180 errors / 34% coverage ] ****** [1182 done /952 queued / 16 running / 1181 errors / 34% coverage ] ****** [1182 done /952 queued / 16 running / 1181 errors / 34% coverage ] ****** [1183 done /957 queued / 16 running / 1182 errors / 34% coverage ] ****** [1183 done /957 queued / 16 running / 1182 errors / 34% coverage ] ****** [1184 done /956 queued / 16 running / 1183 errors / 34% coverage ] ****** [1184 done /956 queued / 16 running / 1183 errors / 34% coverage ] ****** [1185 done /957 queued / 16 running / 1184 errors / 34% coverage ] ****** [1185 done /957 queued / 16 running / 1184 errors / 34% coverage ] ****** [1186 done /959 queued / 16 running / 1185 errors / 34% coverage ] ****** [1186 done /959 queued / 16 running / 1185 errors / 34% coverage ] ****** [1187 done /960 queued / 16 running / 1186 errors / 34% coverage ] ****** [1187 done /960 queued / 16 running / 1186 errors / 34% coverage ] ****** [1188 done /961 queued / 16 running / 1187 errors / 34% coverage ] ****** [1188 done /961 queued / 16 running / 1187 errors / 34% coverage ] ****** [1189 done /960 queued / 16 running / 1188 errors / 34% coverage ] ****** [1189 done /960 queued / 16 running / 1188 errors / 34% coverage ] ****** [1190 done /961 queued / 16 running / 1189 errors / 34% coverage ] ****** [1190 done /961 queued / 16 running / 1189 errors / 34% coverage ] ****** [1191 done /961 queued / 16 running / 1190 errors / 34% coverage ] ****** [1191 done /961 queued / 16 running / 1190 errors / 34% coverage ] ****** [1192 done /962 queued / 16 running / 1191 errors / 34% coverage ] ****** [1192 done /962 queued / 16 running / 1191 errors / 34% coverage ] ****** [1193 done /963 queued / 16 running / 1192 errors / 34% coverage ] ****** [1193 done /963 queued / 16 running / 1192 errors / 34% coverage ] ****** [1194 done /965 queued / 16 running / 1193 errors / 34% coverage ] ****** [1194 done /965 queued / 16 running / 1193 errors / 34% coverage ] ****** [1195 done /967 queued / 16 running / 1194 errors / 34% coverage ] ****** [1195 done /967 queued / 16 running / 1194 errors / 34% coverage ] ****** [1196 done /966 queued / 16 running / 1195 errors / 34% coverage ] ****** [1196 done /966 queued / 16 running / 1195 errors / 34% coverage ] ****** [1197 done /965 queued / 16 running / 1196 errors / 34% coverage ] ****** [1197 done /965 queued / 16 running / 1196 errors / 34% coverage ] ****** [1198 done /967 queued / 16 running / 1197 errors / 34% coverage ] ****** [1198 done /967 queued / 16 running / 1197 errors / 34% coverage ] ****** [1199 done /970 queued / 16 running / 1198 errors / 34% coverage ] ****** [1199 done /970 queued / 16 running / 1198 errors / 34% coverage ] ****** [1200 done /970 queued / 16 running / 1199 errors / 34% coverage ] ****** [1200 done /970 queued / 16 running / 1199 errors / 34% coverage ] ****** [1201 done /969 queued / 16 running / 1200 errors / 34% coverage ] ****** [1201 done /969 queued / 16 running / 1200 errors / 34% coverage ] ****** [1202 done /969 queued / 16 running / 1201 errors / 34% coverage ] ****** [1202 done /969 queued / 16 running / 1201 errors / 34% coverage ] ****** [1203 done /968 queued / 16 running / 1202 errors / 34% coverage ] ****** [1203 done /968 queued / 16 running / 1202 errors / 34% coverage ] ****** [1204 done /969 queued / 16 running / 1203 errors / 34% coverage ] ****** [1204 done /969 queued / 16 running / 1203 errors / 34% coverage ] ****** [1205 done /970 queued / 16 running / 1204 errors / 34% coverage ] ****** [1205 done /970 queued / 16 running / 1204 errors / 34% coverage ] ****** [1206 done /971 queued / 16 running / 1205 errors / 34% coverage ] ****** [1206 done /971 queued / 16 running / 1205 errors / 34% coverage ] ****** [1207 done /974 queued / 16 running / 1206 errors / 34% coverage ] ****** [1207 done /974 queued / 16 running / 1206 errors / 34% coverage ] ****** [1208 done /975 queued / 16 running / 1207 errors / 34% coverage ] ****** [1208 done /975 queued / 16 running / 1207 errors / 34% coverage ] ****** [1209 done /974 queued / 16 running / 1208 errors / 34% coverage ] ****** [1209 done /974 queued / 16 running / 1208 errors / 34% coverage ] ****** [1210 done /975 queued / 16 running / 1209 errors / 34% coverage ] ****** [1210 done /975 queued / 16 running / 1209 errors / 34% coverage ] ****** [1211 done /975 queued / 16 running / 1210 errors / 34% coverage ] ****** [1211 done /975 queued / 16 running / 1210 errors / 34% coverage ] ****** [1212 done /974 queued / 16 running / 1211 errors / 34% coverage ] ****** [1212 done /974 queued / 16 running / 1211 errors / 34% coverage ] ****** [1213 done /973 queued / 16 running / 1212 errors / 34% coverage ] ****** [1213 done /973 queued / 16 running / 1212 errors / 34% coverage ] ****** [1214 done /975 queued / 16 running / 1213 errors / 34% coverage ] ****** [1214 done /975 queued / 16 running / 1213 errors / 34% coverage ] ****** [1215 done /977 queued / 16 running / 1214 errors / 34% coverage ] ****** [1215 done /977 queued / 16 running / 1214 errors / 34% coverage ] ****** [1216 done /977 queued / 16 running / 1215 errors / 34% coverage ] ****** [1216 done /977 queued / 16 running / 1215 errors / 34% coverage ] ****** [1217 done /981 queued / 16 running / 1216 errors / 34% coverage ] ****** [1217 done /981 queued / 16 running / 1216 errors / 34% coverage ] ****** [1218 done /980 queued / 16 running / 1217 errors / 34% coverage ] ****** [1218 done /980 queued / 16 running / 1217 errors / 34% coverage ] ****** [1219 done /979 queued / 16 running / 1218 errors / 34% coverage ] ****** [1219 done /979 queued / 16 running / 1218 errors / 34% coverage ] ****** [1220 done /981 queued / 16 running / 1219 errors / 34% coverage ] ****** [1220 done /981 queued / 16 running / 1219 errors / 34% coverage ] ****** [1221 done /982 queued / 16 running / 1220 errors / 34% coverage ] ****** [1221 done /982 queued / 16 running / 1220 errors / 34% coverage ] ****** [1222 done /982 queued / 16 running / 1221 errors / 34% coverage ] ****** [1222 done /982 queued / 16 running / 1221 errors / 34% coverage ] ****** [1223 done /984 queued / 16 running / 1222 errors / 34% coverage ] ****** [1223 done /984 queued / 16 running / 1222 errors / 34% coverage ] ****** [1224 done /986 queued / 16 running / 1223 errors / 34% coverage ] ****** [1224 done /986 queued / 16 running / 1223 errors / 34% coverage ] ****** [1225 done /987 queued / 16 running / 1224 errors / 34% coverage ] ****** [1225 done /987 queued / 16 running / 1224 errors / 34% coverage ] ****** [1226 done /988 queued / 16 running / 1225 errors / 34% coverage ] ****** [1226 done /988 queued / 16 running / 1225 errors / 34% coverage ] ****** [1227 done /989 queued / 16 running / 1226 errors / 34% coverage ] ****** [1227 done /989 queued / 16 running / 1226 errors / 34% coverage ] ****** [1228 done /988 queued / 16 running / 1227 errors / 34% coverage ] ****** [1228 done /988 queued / 16 running / 1227 errors / 34% coverage ] ****** [1229 done /989 queued / 16 running / 1228 errors / 34% coverage ] ****** [1229 done /989 queued / 16 running / 1228 errors / 34% coverage ] ****** [1230 done /990 queued / 16 running / 1229 errors / 34% coverage ] ****** [1230 done /990 queued / 16 running / 1229 errors / 34% coverage ] ****** [1231 done /991 queued / 16 running / 1230 errors / 34% coverage ] ****** [1231 done /991 queued / 16 running / 1230 errors / 34% coverage ] ****** [1232 done /994 queued / 16 running / 1231 errors / 34% coverage ] ****** [1232 done /994 queued / 16 running / 1231 errors / 34% coverage ] ****** [1233 done /997 queued / 16 running / 1232 errors / 34% coverage ] ****** [1233 done /997 queued / 16 running / 1232 errors / 34% coverage ] ****** [1234 done /999 queued / 16 running / 1233 errors / 34% coverage ] ****** [1234 done /999 queued / 16 running / 1233 errors / 34% coverage ] ****** [1235 done /1000 queued / 16 running / 1234 errors / 34% coverage ] ****** [1235 done /1000 queued / 16 running / 1234 errors / 34% coverage ] ****** [1236 done /1002 queued / 16 running / 1235 errors / 34% coverage ] ****** [1236 done /1002 queued / 16 running / 1235 errors / 34% coverage ] ****** [1237 done /1003 queued / 16 running / 1236 errors / 34% coverage ] ****** [1237 done /1003 queued / 16 running / 1236 errors / 34% coverage ] ****** [1238 done /1005 queued / 16 running / 1237 errors / 34% coverage ] ****** [1238 done /1005 queued / 16 running / 1237 errors / 34% coverage ] ****** [1239 done /1005 queued / 16 running / 1238 errors / 34% coverage ] ****** [1239 done /1005 queued / 16 running / 1238 errors / 34% coverage ] ****** [1240 done /1006 queued / 16 running / 1239 errors / 34% coverage ] ****** [1240 done /1006 queued / 16 running / 1239 errors / 34% coverage ] ****** [1241 done /1006 queued / 16 running / 1240 errors / 34% coverage ] ****** [1241 done /1006 queued / 16 running / 1240 errors / 34% coverage ] ****** [1242 done /1005 queued / 16 running / 1241 errors / 34% coverage ] ****** [1242 done /1005 queued / 16 running / 1241 errors / 34% coverage ] ****** [1243 done /1004 queued / 16 running / 1242 errors / 34% coverage ] ****** [1243 done /1004 queued / 16 running / 1242 errors / 34% coverage ] ****** [1244 done /1005 queued / 16 running / 1243 errors / 34% coverage ] ****** [1244 done /1005 queued / 16 running / 1243 errors / 34% coverage ] ****** [1245 done /1006 queued / 16 running / 1244 errors / 34% coverage ] ****** [1245 done /1006 queued / 16 running / 1244 errors / 34% coverage ] ****** [1246 done /1005 queued / 16 running / 1245 errors / 34% coverage ] ****** [1246 done /1005 queued / 16 running / 1245 errors / 34% coverage ] ****** [1247 done /1005 queued / 16 running / 1246 errors / 34% coverage ] ****** [1247 done /1005 queued / 16 running / 1246 errors / 34% coverage ] ****** [1248 done /1005 queued / 16 running / 1247 errors / 34% coverage ] ****** [1248 done /1005 queued / 16 running / 1247 errors / 34% coverage ] ****** [1249 done /1008 queued / 16 running / 1248 errors / 34% coverage ] ****** [1249 done /1008 queued / 16 running / 1248 errors / 34% coverage ] ****** [1250 done /1007 queued / 16 running / 1249 errors / 34% coverage ] ****** [1250 done /1007 queued / 16 running / 1249 errors / 34% coverage ] ****** [1251 done /1006 queued / 16 running / 1250 errors / 34% coverage ] ****** [1251 done /1006 queued / 16 running / 1250 errors / 34% coverage ] ****** [1252 done /1007 queued / 16 running / 1251 errors / 34% coverage ] ****** [1252 done /1007 queued / 16 running / 1251 errors / 34% coverage ] ****** [1253 done /1006 queued / 16 running / 1252 errors / 34% coverage ] ****** [1253 done /1006 queued / 16 running / 1252 errors / 34% coverage ] ****** [1254 done /1005 queued / 16 running / 1253 errors / 34% coverage ] ****** [1254 done /1005 queued / 16 running / 1253 errors / 34% coverage ] ****** [1255 done /1006 queued / 16 running / 1254 errors / 34% coverage ] ****** [1255 done /1006 queued / 16 running / 1254 errors / 34% coverage ] ****** [1256 done /1007 queued / 16 running / 1255 errors / 34% coverage ] ****** [1256 done /1007 queued / 16 running / 1255 errors / 34% coverage ] ****** [1257 done /1010 queued / 16 running / 1256 errors / 34% coverage ] ****** [1257 done /1010 queued / 16 running / 1256 errors / 34% coverage ] ****** [1258 done /1011 queued / 16 running / 1257 errors / 34% coverage ] ****** [1258 done /1011 queued / 16 running / 1257 errors / 34% coverage ] ****** [1259 done /1012 queued / 16 running / 1258 errors / 34% coverage ] ****** [1259 done /1012 queued / 16 running / 1258 errors / 34% coverage ] ****** [1260 done /1014 queued / 16 running / 1259 errors / 34% coverage ] ****** [1260 done /1014 queued / 16 running / 1259 errors / 34% coverage ] ****** [1261 done /1013 queued / 16 running / 1260 errors / 34% coverage ] ****** [1261 done /1013 queued / 16 running / 1260 errors / 34% coverage ] ****** [1262 done /1012 queued / 16 running / 1261 errors / 34% coverage ] ****** [1262 done /1012 queued / 16 running / 1261 errors / 34% coverage ] ****** [1263 done /1012 queued / 16 running / 1262 errors / 34% coverage ] ****** [1263 done /1012 queued / 16 running / 1262 errors / 34% coverage ] ****** [1264 done /1013 queued / 16 running / 1263 errors / 34% coverage ] ****** [1264 done /1013 queued / 16 running / 1263 errors / 34% coverage ] ****** [1265 done /1014 queued / 16 running / 1264 errors / 34% coverage ] ****** [1265 done /1014 queued / 16 running / 1264 errors / 34% coverage ] ****** [1266 done /1013 queued / 16 running / 1265 errors / 34% coverage ] ****** [1266 done /1013 queued / 16 running / 1265 errors / 34% coverage ] ****** [1267 done /1016 queued / 16 running / 1266 errors / 34% coverage ] ****** [1267 done /1016 queued / 16 running / 1266 errors / 34% coverage ] ****** [1268 done /1015 queued / 16 running / 1267 errors / 34% coverage ] ****** [1268 done /1015 queued / 16 running / 1267 errors / 34% coverage ] ****** [1269 done /1014 queued / 16 running / 1268 errors / 34% coverage ] ****** [1269 done /1014 queued / 16 running / 1268 errors / 34% coverage ] ****** [1270 done /1015 queued / 16 running / 1269 errors / 34% coverage ] ****** [1270 done /1015 queued / 16 running / 1269 errors / 34% coverage ] ****** [1271 done /1015 queued / 16 running / 1270 errors / 34% coverage ] ****** [1271 done /1015 queued / 16 running / 1270 errors / 34% coverage ] ****** [1272 done /1016 queued / 16 running / 1271 errors / 34% coverage ] ****** [1272 done /1016 queued / 16 running / 1271 errors / 34% coverage ] ****** [1273 done /1018 queued / 16 running / 1272 errors / 34% coverage ] ****** [1273 done /1018 queued / 16 running / 1272 errors / 34% coverage ] ****** [1274 done /1020 queued / 16 running / 1273 errors / 34% coverage ] ****** [1274 done /1020 queued / 16 running / 1273 errors / 34% coverage ] ****** [1275 done /1023 queued / 16 running / 1274 errors / 34% coverage ] ****** [1275 done /1023 queued / 16 running / 1274 errors / 34% coverage ] ****** [1276 done /1024 queued / 16 running / 1275 errors / 34% coverage ] ****** [1276 done /1024 queued / 16 running / 1275 errors / 34% coverage ] ****** [1277 done /1023 queued / 16 running / 1276 errors / 34% coverage ] ****** [1277 done /1023 queued / 16 running / 1276 errors / 34% coverage ] ****** [1278 done /1028 queued / 16 running / 1277 errors / 34% coverage ] ****** [1278 done /1028 queued / 16 running / 1277 errors / 34% coverage ] ****** [1279 done /1029 queued / 16 running / 1278 errors / 34% coverage ] ****** [1279 done /1029 queued / 16 running / 1278 errors / 34% coverage ] ****** [1280 done /1030 queued / 16 running / 1279 errors / 34% coverage ] ****** [1280 done /1030 queued / 16 running / 1279 errors / 34% coverage ] ****** [1281 done /1030 queued / 16 running / 1280 errors / 34% coverage ] ****** [1281 done /1030 queued / 16 running / 1280 errors / 34% coverage ] ****** [1282 done /1031 queued / 16 running / 1281 errors / 34% coverage ] ****** [1282 done /1031 queued / 16 running / 1281 errors / 34% coverage ] ****** [1283 done /1030 queued / 16 running / 1282 errors / 34% coverage ] ****** [1283 done /1030 queued / 16 running / 1282 errors / 34% coverage ] ****** [1284 done /1031 queued / 16 running / 1283 errors / 34% coverage ] ****** [1284 done /1031 queued / 16 running / 1283 errors / 34% coverage ] ****** [1285 done /1033 queued / 16 running / 1284 errors / 34% coverage ] ****** [1285 done /1033 queued / 16 running / 1284 errors / 34% coverage ] ****** [1286 done /1033 queued / 16 running / 1285 errors / 34% coverage ] ****** [1286 done /1033 queued / 16 running / 1285 errors / 34% coverage ] ****** [1287 done /1035 queued / 16 running / 1286 errors / 34% coverage ] ****** [1287 done /1035 queued / 16 running / 1286 errors / 34% coverage ] ****** [1288 done /1036 queued / 16 running / 1287 errors / 34% coverage ] ****** [1288 done /1036 queued / 16 running / 1287 errors / 34% coverage ] ****** [1289 done /1037 queued / 16 running / 1288 errors / 34% coverage ] ****** [1289 done /1037 queued / 16 running / 1288 errors / 34% coverage ] ****** [1290 done /1038 queued / 16 running / 1289 errors / 34% coverage ] ****** [1290 done /1038 queued / 16 running / 1289 errors / 34% coverage ] ****** [1291 done /1038 queued / 16 running / 1290 errors / 34% coverage ] ****** [1291 done /1038 queued / 16 running / 1290 errors / 34% coverage ] ****** [1292 done /1039 queued / 16 running / 1291 errors / 34% coverage ] ****** [1292 done /1039 queued / 16 running / 1291 errors / 34% coverage ] ****** [1293 done /1039 queued / 16 running / 1292 errors / 34% coverage ] ****** [1293 done /1039 queued / 16 running / 1292 errors / 34% coverage ] ****** [1294 done /1040 queued / 16 running / 1293 errors / 34% coverage ] ****** [1294 done /1040 queued / 16 running / 1293 errors / 34% coverage ] ****** [1295 done /1040 queued / 16 running / 1294 errors / 34% coverage ] ****** [1295 done /1040 queued / 16 running / 1294 errors / 34% coverage ] ****** [1296 done /1042 queued / 16 running / 1295 errors / 34% coverage ] ****** [1296 done /1042 queued / 16 running / 1295 errors / 34% coverage ] ****** [1297 done /1043 queued / 16 running / 1296 errors / 34% coverage ] ****** [1297 done /1043 queued / 16 running / 1296 errors / 34% coverage ] ****** [1298 done /1044 queued / 16 running / 1297 errors / 34% coverage ] ****** [1298 done /1044 queued / 16 running / 1297 errors / 34% coverage ] ****** [1299 done /1046 queued / 16 running / 1298 errors / 34% coverage ] ****** [1299 done /1046 queued / 16 running / 1298 errors / 34% coverage ] ****** [1300 done /1045 queued / 16 running / 1299 errors / 34% coverage ] ****** [1300 done /1045 queued / 16 running / 1299 errors / 34% coverage ] ****** [1301 done /1044 queued / 16 running / 1300 errors / 34% coverage ] ****** [1301 done /1044 queued / 16 running / 1300 errors / 34% coverage ] ****** [1302 done /1044 queued / 16 running / 1301 errors / 34% coverage ] ****** [1302 done /1044 queued / 16 running / 1301 errors / 34% coverage ] ****** [1303 done /1045 queued / 16 running / 1302 errors / 34% coverage ] ****** [1303 done /1045 queued / 16 running / 1302 errors / 34% coverage ] ****** [1304 done /1044 queued / 16 running / 1303 errors / 34% coverage ] ****** [1304 done /1044 queued / 16 running / 1303 errors / 34% coverage ] ****** [1305 done /1045 queued / 16 running / 1304 errors / 34% coverage ] ****** [1305 done /1045 queued / 16 running / 1304 errors / 34% coverage ] ****** [1306 done /1047 queued / 16 running / 1305 errors / 34% coverage ] ****** [1306 done /1047 queued / 16 running / 1305 errors / 34% coverage ] ****** [1307 done /1050 queued / 16 running / 1306 errors / 34% coverage ] ****** [1307 done /1050 queued / 16 running / 1306 errors / 34% coverage ] ****** [1308 done /1049 queued / 16 running / 1307 errors / 34% coverage ] ****** [1308 done /1049 queued / 16 running / 1307 errors / 34% coverage ] ****** [1309 done /1048 queued / 16 running / 1308 errors / 34% coverage ] ****** [1309 done /1048 queued / 16 running / 1308 errors / 34% coverage ] ****** [1310 done /1049 queued / 16 running / 1309 errors / 34% coverage ] ****** [1310 done /1049 queued / 16 running / 1309 errors / 34% coverage ] ****** [1311 done /1048 queued / 16 running / 1310 errors / 34% coverage ] ****** [1311 done /1048 queued / 16 running / 1310 errors / 34% coverage ] ****** [1312 done /1048 queued / 16 running / 1311 errors / 34% coverage ] ****** [1312 done /1048 queued / 16 running / 1311 errors / 34% coverage ] ****** [1313 done /1049 queued / 16 running / 1312 errors / 34% coverage ] ****** [1313 done /1049 queued / 16 running / 1312 errors / 34% coverage ] ****** [1314 done /1048 queued / 16 running / 1313 errors / 34% coverage ] ****** [1314 done /1048 queued / 16 running / 1313 errors / 34% coverage ] ****** [1315 done /1053 queued / 16 running / 1314 errors / 34% coverage ] ****** [1315 done /1053 queued / 16 running / 1314 errors / 34% coverage ] ****** [1316 done /1052 queued / 16 running / 1315 errors / 34% coverage ] ****** [1316 done /1052 queued / 16 running / 1315 errors / 34% coverage ] ****** [1317 done /1053 queued / 16 running / 1316 errors / 34% coverage ] ****** [1317 done /1053 queued / 16 running / 1316 errors / 34% coverage ] ****** [1318 done /1054 queued / 16 running / 1317 errors / 34% coverage ] ****** [1318 done /1054 queued / 16 running / 1317 errors / 34% coverage ] ****** [1319 done /1055 queued / 16 running / 1318 errors / 34% coverage ] ****** [1319 done /1055 queued / 16 running / 1318 errors / 34% coverage ] ****** [1320 done /1054 queued / 16 running / 1319 errors / 34% coverage ] ****** [1320 done /1054 queued / 16 running / 1319 errors / 34% coverage ] ****** [1321 done /1056 queued / 16 running / 1320 errors / 34% coverage ] ****** [1321 done /1056 queued / 16 running / 1320 errors / 34% coverage ] ****** [1322 done /1055 queued / 16 running / 1321 errors / 34% coverage ] ****** [1322 done /1055 queued / 16 running / 1321 errors / 34% coverage ] ****** [1323 done /1055 queued / 16 running / 1322 errors / 34% coverage ] ****** [1323 done /1055 queued / 16 running / 1322 errors / 34% coverage ] ****** [1324 done /1058 queued / 16 running / 1323 errors / 34% coverage ] ****** [1324 done /1058 queued / 16 running / 1323 errors / 34% coverage ] ****** [1325 done /1060 queued / 16 running / 1324 errors / 34% coverage ] ****** [1325 done /1060 queued / 16 running / 1324 errors / 34% coverage ] ****** [1326 done /1059 queued / 16 running / 1325 errors / 34% coverage ] ****** [1326 done /1059 queued / 16 running / 1325 errors / 34% coverage ] ****** [1327 done /1061 queued / 16 running / 1326 errors / 34% coverage ] ****** [1327 done /1061 queued / 16 running / 1326 errors / 34% coverage ] ****** [1328 done /1063 queued / 16 running / 1327 errors / 34% coverage ] ****** [1328 done /1063 queued / 16 running / 1327 errors / 34% coverage ] ****** [1329 done /1066 queued / 16 running / 1328 errors / 34% coverage ] ****** [1329 done /1066 queued / 16 running / 1328 errors / 34% coverage ] ****** [1330 done /1068 queued / 16 running / 1329 errors / 34% coverage ] ****** [1330 done /1068 queued / 16 running / 1329 errors / 34% coverage ] ****** [1331 done /1068 queued / 16 running / 1330 errors / 34% coverage ] ****** [1331 done /1068 queued / 16 running / 1330 errors / 34% coverage ] ****** [1332 done /1067 queued / 16 running / 1331 errors / 34% coverage ] ****** [1332 done /1067 queued / 16 running / 1331 errors / 34% coverage ] ****** [1333 done /1071 queued / 16 running / 1332 errors / 34% coverage ] ****** [1333 done /1071 queued / 16 running / 1332 errors / 34% coverage ] ****** [1334 done /1070 queued / 16 running / 1333 errors / 34% coverage ] ****** [1334 done /1070 queued / 16 running / 1333 errors / 34% coverage ] ****** [1335 done /1073 queued / 16 running / 1334 errors / 34% coverage ] ****** [1335 done /1073 queued / 16 running / 1334 errors / 34% coverage ] ****** [1336 done /1074 queued / 16 running / 1335 errors / 34% coverage ] ****** [1336 done /1074 queued / 16 running / 1335 errors / 34% coverage ] ****** [1337 done /1073 queued / 16 running / 1336 errors / 34% coverage ] ****** [1337 done /1073 queued / 16 running / 1336 errors / 34% coverage ] ****** [1338 done /1072 queued / 16 running / 1337 errors / 34% coverage ] ****** [1338 done /1072 queued / 16 running / 1337 errors / 34% coverage ] ****** [1339 done /1072 queued / 16 running / 1338 errors / 34% coverage ] ****** [1339 done /1072 queued / 16 running / 1338 errors / 34% coverage ] ****** [1340 done /1076 queued / 16 running / 1339 errors / 34% coverage ] ****** [1340 done /1076 queued / 16 running / 1339 errors / 34% coverage ] ****** [1341 done /1076 queued / 16 running / 1340 errors / 34% coverage ] ****** [1341 done /1076 queued / 16 running / 1340 errors / 34% coverage ] ****** [1342 done /1079 queued / 16 running / 1341 errors / 34% coverage ] ****** [1342 done /1079 queued / 16 running / 1341 errors / 34% coverage ] ****** [1343 done /1078 queued / 16 running / 1342 errors / 34% coverage ] ****** [1343 done /1078 queued / 16 running / 1342 errors / 34% coverage ] ****** [1344 done /1078 queued / 16 running / 1343 errors / 34% coverage ] ****** [1344 done /1078 queued / 16 running / 1343 errors / 34% coverage ] ****** [1345 done /1077 queued / 16 running / 1344 errors / 34% coverage ] ****** [1345 done /1077 queued / 16 running / 1344 errors / 34% coverage ] ****** [1346 done /1076 queued / 16 running / 1345 errors / 34% coverage ] ****** [1346 done /1076 queued / 16 running / 1345 errors / 34% coverage ] ****** [1347 done /1075 queued / 16 running / 1346 errors / 34% coverage ] ****** [1347 done /1075 queued / 16 running / 1346 errors / 34% coverage ] ****** [1348 done /1075 queued / 16 running / 1347 errors / 34% coverage ] ****** [1348 done /1075 queued / 16 running / 1347 errors / 34% coverage ] ****** [1349 done /1075 queued / 16 running / 1348 errors / 34% coverage ] ****** [1349 done /1075 queued / 16 running / 1348 errors / 34% coverage ] ****** [1350 done /1074 queued / 16 running / 1349 errors / 34% coverage ] ****** [1350 done /1074 queued / 16 running / 1349 errors / 34% coverage ] ****** [1351 done /1075 queued / 16 running / 1350 errors / 34% coverage ] ****** [1351 done /1075 queued / 16 running / 1350 errors / 34% coverage ] ****** [1352 done /1076 queued / 16 running / 1351 errors / 34% coverage ] ****** [1352 done /1076 queued / 16 running / 1351 errors / 34% coverage ] ****** [1353 done /1076 queued / 16 running / 1352 errors / 34% coverage ] ****** [1353 done /1076 queued / 16 running / 1352 errors / 34% coverage ] ****** [1354 done /1076 queued / 16 running / 1353 errors / 34% coverage ] ****** [1354 done /1076 queued / 16 running / 1353 errors / 34% coverage ] ****** [1355 done /1075 queued / 16 running / 1354 errors / 34% coverage ] ****** [1355 done /1075 queued / 16 running / 1354 errors / 34% coverage ] ****** [1356 done /1074 queued / 16 running / 1355 errors / 34% coverage ] ****** [1356 done /1074 queued / 16 running / 1355 errors / 34% coverage ] ****** [1357 done /1074 queued / 16 running / 1356 errors / 34% coverage ] ****** [1357 done /1074 queued / 16 running / 1356 errors / 34% coverage ] ****** [1358 done /1073 queued / 16 running / 1357 errors / 34% coverage ] ****** [1358 done /1073 queued / 16 running / 1357 errors / 34% coverage ] ****** [1359 done /1073 queued / 16 running / 1358 errors / 34% coverage ] ****** [1359 done /1073 queued / 16 running / 1358 errors / 34% coverage ] ****** [1360 done /1075 queued / 16 running / 1359 errors / 34% coverage ] ****** [1360 done /1075 queued / 16 running / 1359 errors / 34% coverage ] ****** [1361 done /1076 queued / 16 running / 1360 errors / 34% coverage ] ****** [1361 done /1076 queued / 16 running / 1360 errors / 34% coverage ] ****** [1362 done /1078 queued / 16 running / 1361 errors / 34% coverage ] ****** [1362 done /1078 queued / 16 running / 1361 errors / 34% coverage ] ****** [1363 done /1078 queued / 16 running / 1362 errors / 34% coverage ] ****** [1363 done /1078 queued / 16 running / 1362 errors / 34% coverage ] ****** [1364 done /1079 queued / 16 running / 1363 errors / 34% coverage ] ****** [1364 done /1079 queued / 16 running / 1363 errors / 34% coverage ] ****** [1365 done /1082 queued / 16 running / 1364 errors / 34% coverage ] ****** [1365 done /1082 queued / 16 running / 1364 errors / 34% coverage ] ****** [1366 done /1084 queued / 16 running / 1365 errors / 34% coverage ] ****** [1366 done /1084 queued / 16 running / 1365 errors / 34% coverage ] ****** [1367 done /1083 queued / 16 running / 1366 errors / 34% coverage ] ****** [1367 done /1083 queued / 16 running / 1366 errors / 34% coverage ] ****** [1368 done /1085 queued / 16 running / 1367 errors / 34% coverage ] ****** [1368 done /1085 queued / 16 running / 1367 errors / 34% coverage ] ****** [1369 done /1087 queued / 16 running / 1368 errors / 34% coverage ] ****** [1369 done /1087 queued / 16 running / 1368 errors / 34% coverage ] ****** [1370 done /1088 queued / 16 running / 1369 errors / 34% coverage ] ****** [1370 done /1088 queued / 16 running / 1369 errors / 34% coverage ] ****** [1371 done /1093 queued / 16 running / 1370 errors / 34% coverage ] ****** [1371 done /1093 queued / 16 running / 1370 errors / 34% coverage ] ****** [1372 done /1092 queued / 16 running / 1371 errors / 34% coverage ] ****** [1372 done /1092 queued / 16 running / 1371 errors / 34% coverage ] ****** [1373 done /1094 queued / 16 running / 1372 errors / 34% coverage ] ****** [1373 done /1094 queued / 16 running / 1372 errors / 34% coverage ] ****** [1374 done /1095 queued / 16 running / 1373 errors / 34% coverage ] ****** [1374 done /1095 queued / 16 running / 1373 errors / 34% coverage ] ****** [1375 done /1097 queued / 16 running / 1374 errors / 34% coverage ] ****** [1375 done /1097 queued / 16 running / 1374 errors / 34% coverage ] ****** [1376 done /1099 queued / 16 running / 1375 errors / 34% coverage ] ****** [1376 done /1099 queued / 16 running / 1375 errors / 34% coverage ] ****** [1377 done /1098 queued / 16 running / 1376 errors / 34% coverage ] ****** [1377 done /1098 queued / 16 running / 1376 errors / 34% coverage ] ****** [1378 done /1100 queued / 16 running / 1377 errors / 34% coverage ] ****** [1378 done /1100 queued / 16 running / 1377 errors / 34% coverage ] ****** [1379 done /1101 queued / 16 running / 1378 errors / 34% coverage ] ****** [1379 done /1101 queued / 16 running / 1378 errors / 34% coverage ] ****** [1380 done /1101 queued / 16 running / 1379 errors / 34% coverage ] ****** [1380 done /1101 queued / 16 running / 1379 errors / 34% coverage ] ****** [1381 done /1101 queued / 16 running / 1380 errors / 34% coverage ] ****** [1381 done /1101 queued / 16 running / 1380 errors / 34% coverage ] ****** [1382 done /1102 queued / 16 running / 1381 errors / 34% coverage ] ****** [1382 done /1102 queued / 16 running / 1381 errors / 34% coverage ] ****** [1383 done /1103 queued / 16 running / 1382 errors / 34% coverage ] ****** [1383 done /1103 queued / 16 running / 1382 errors / 34% coverage ] ****** [1384 done /1107 queued / 16 running / 1383 errors / 34% coverage ] ****** [1384 done /1107 queued / 16 running / 1383 errors / 34% coverage ] ****** [1385 done /1106 queued / 16 running / 1384 errors / 34% coverage ] ****** [1385 done /1106 queued / 16 running / 1384 errors / 34% coverage ] ****** [1386 done /1109 queued / 16 running / 1385 errors / 34% coverage ] ****** [1386 done /1109 queued / 16 running / 1385 errors / 34% coverage ] ****** [1387 done /1110 queued / 16 running / 1386 errors / 34% coverage ] ****** [1387 done /1110 queued / 16 running / 1386 errors / 34% coverage ] ****** [1388 done /1112 queued / 16 running / 1387 errors / 34% coverage ] ****** [1388 done /1112 queued / 16 running / 1387 errors / 34% coverage ] ****** [1389 done /1116 queued / 16 running / 1388 errors / 34% coverage ] ****** [1389 done /1116 queued / 16 running / 1388 errors / 34% coverage ] ****** [1390 done /1116 queued / 16 running / 1389 errors / 34% coverage ] ****** [1390 done /1116 queued / 16 running / 1389 errors / 34% coverage ] ****** [1391 done /1115 queued / 16 running / 1390 errors / 34% coverage ] ****** [1391 done /1115 queued / 16 running / 1390 errors / 34% coverage ] ****** [1392 done /1116 queued / 16 running / 1391 errors / 34% coverage ] ****** [1392 done /1116 queued / 16 running / 1391 errors / 34% coverage ] ****** [1393 done /1117 queued / 16 running / 1392 errors / 34% coverage ] ****** [1393 done /1117 queued / 16 running / 1392 errors / 34% coverage ] ****** [1394 done /1119 queued / 16 running / 1393 errors / 34% coverage ] ****** [1394 done /1119 queued / 16 running / 1393 errors / 34% coverage ] ****** [1395 done /1119 queued / 16 running / 1394 errors / 34% coverage ] ****** [1395 done /1119 queued / 16 running / 1394 errors / 34% coverage ] ****** [1396 done /1119 queued / 16 running / 1395 errors / 34% coverage ] ****** [1396 done /1119 queued / 16 running / 1395 errors / 34% coverage ] ****** [1397 done /1120 queued / 16 running / 1396 errors / 34% coverage ] ****** [1397 done /1120 queued / 16 running / 1396 errors / 34% coverage ] ****** [1398 done /1120 queued / 16 running / 1397 errors / 34% coverage ] ****** [1398 done /1120 queued / 16 running / 1397 errors / 34% coverage ] ****** [1399 done /1124 queued / 16 running / 1398 errors / 34% coverage ] ****** [1399 done /1124 queued / 16 running / 1398 errors / 34% coverage ] ****** [1400 done /1126 queued / 16 running / 1399 errors / 34% coverage ] ****** [1400 done /1126 queued / 16 running / 1399 errors / 34% coverage ] ****** [1401 done /1129 queued / 16 running / 1400 errors / 34% coverage ] ****** [1401 done /1129 queued / 16 running / 1400 errors / 34% coverage ] ****** [1402 done /1131 queued / 16 running / 1401 errors / 34% coverage ] ****** [1402 done /1131 queued / 16 running / 1401 errors / 34% coverage ] ****** [1403 done /1132 queued / 16 running / 1402 errors / 34% coverage ] ****** [1403 done /1132 queued / 16 running / 1402 errors / 34% coverage ] ****** [1404 done /1133 queued / 16 running / 1403 errors / 34% coverage ] ****** [1404 done /1133 queued / 16 running / 1403 errors / 34% coverage ] ****** [1405 done /1132 queued / 16 running / 1404 errors / 34% coverage ] ****** [1405 done /1132 queued / 16 running / 1404 errors / 34% coverage ] ****** [1406 done /1133 queued / 16 running / 1405 errors / 34% coverage ] ****** [1406 done /1133 queued / 16 running / 1405 errors / 34% coverage ] ****** [1407 done /1134 queued / 16 running / 1406 errors / 34% coverage ] ****** [1407 done /1134 queued / 16 running / 1406 errors / 34% coverage ] ****** [1408 done /1134 queued / 16 running / 1407 errors / 34% coverage ] ****** [1408 done /1134 queued / 16 running / 1407 errors / 34% coverage ] ****** [1409 done /1134 queued / 16 running / 1408 errors / 34% coverage ] ****** [1409 done /1134 queued / 16 running / 1408 errors / 34% coverage ] ****** [1410 done /1135 queued / 16 running / 1409 errors / 34% coverage ] ****** [1410 done /1135 queued / 16 running / 1409 errors / 34% coverage ] ****** [1411 done /1140 queued / 16 running / 1410 errors / 34% coverage ] ****** [1411 done /1140 queued / 16 running / 1410 errors / 34% coverage ] ****** [1412 done /1141 queued / 16 running / 1411 errors / 34% coverage ] ****** [1412 done /1141 queued / 16 running / 1411 errors / 34% coverage ] ****** [1413 done /1140 queued / 16 running / 1412 errors / 34% coverage ] ****** [1413 done /1140 queued / 16 running / 1412 errors / 34% coverage ] ****** [1414 done /1140 queued / 16 running / 1413 errors / 34% coverage ] ****** [1414 done /1140 queued / 16 running / 1413 errors / 34% coverage ] ****** [1415 done /1139 queued / 16 running / 1414 errors / 34% coverage ] ****** [1415 done /1139 queued / 16 running / 1414 errors / 34% coverage ] ****** [1416 done /1139 queued / 16 running / 1415 errors / 34% coverage ] ****** [1416 done /1139 queued / 16 running / 1415 errors / 34% coverage ] ****** [1417 done /1139 queued / 16 running / 1416 errors / 34% coverage ] ****** [1417 done /1139 queued / 16 running / 1416 errors / 34% coverage ] ****** [1418 done /1141 queued / 16 running / 1417 errors / 34% coverage ] ****** [1418 done /1141 queued / 16 running / 1417 errors / 34% coverage ] ****** [1419 done /1141 queued / 16 running / 1418 errors / 34% coverage ] ****** [1419 done /1141 queued / 16 running / 1418 errors / 34% coverage ] ****** [1420 done /1142 queued / 16 running / 1419 errors / 34% coverage ] ****** [1420 done /1142 queued / 16 running / 1419 errors / 34% coverage ] ****** [1421 done /1144 queued / 16 running / 1420 errors / 34% coverage ] ****** [1421 done /1144 queued / 16 running / 1420 errors / 34% coverage ] ****** [1422 done /1144 queued / 16 running / 1421 errors / 34% coverage ] ****** [1422 done /1144 queued / 16 running / 1421 errors / 34% coverage ] ****** [1423 done /1146 queued / 16 running / 1422 errors / 34% coverage ] ****** [1423 done /1146 queued / 16 running / 1422 errors / 34% coverage ] ****** [1424 done /1145 queued / 16 running / 1423 errors / 34% coverage ] ****** [1424 done /1145 queued / 16 running / 1423 errors / 34% coverage ] ****** [1425 done /1147 queued / 16 running / 1424 errors / 34% coverage ] ****** [1425 done /1147 queued / 16 running / 1424 errors / 34% coverage ] ****** [1426 done /1148 queued / 16 running / 1425 errors / 34% coverage ] ****** [1426 done /1148 queued / 16 running / 1425 errors / 34% coverage ] ****** [1427 done /1149 queued / 16 running / 1426 errors / 34% coverage ] ****** [1427 done /1149 queued / 16 running / 1426 errors / 34% coverage ] ****** [1428 done /1151 queued / 16 running / 1427 errors / 34% coverage ] ****** [1428 done /1151 queued / 16 running / 1427 errors / 34% coverage ] ****** [1429 done /1156 queued / 16 running / 1428 errors / 34% coverage ] ****** [1429 done /1156 queued / 16 running / 1428 errors / 34% coverage ] ****** [1430 done /1157 queued / 16 running / 1429 errors / 34% coverage ] ****** [1430 done /1157 queued / 16 running / 1429 errors / 34% coverage ] ****** [1431 done /1158 queued / 16 running / 1430 errors / 34% coverage ] ****** [1431 done /1158 queued / 16 running / 1430 errors / 34% coverage ] ****** [1432 done /1157 queued / 16 running / 1431 errors / 34% coverage ] ****** [1432 done /1157 queued / 16 running / 1431 errors / 34% coverage ] ****** [1433 done /1158 queued / 16 running / 1432 errors / 34% coverage ] ****** [1433 done /1158 queued / 16 running / 1432 errors / 34% coverage ] ****** [1434 done /1157 queued / 16 running / 1433 errors / 34% coverage ] ****** [1434 done /1157 queued / 16 running / 1433 errors / 34% coverage ] ****** [1435 done /1159 queued / 16 running / 1434 errors / 34% coverage ] ****** [1435 done /1159 queued / 16 running / 1434 errors / 34% coverage ] ****** [1436 done /1158 queued / 16 running / 1435 errors / 34% coverage ] ****** [1436 done /1158 queued / 16 running / 1435 errors / 34% coverage ] ****** [1437 done /1157 queued / 16 running / 1436 errors / 34% coverage ] ****** [1437 done /1157 queued / 16 running / 1436 errors / 34% coverage ] ****** [1438 done /1158 queued / 16 running / 1437 errors / 34% coverage ] ****** [1438 done /1158 queued / 16 running / 1437 errors / 34% coverage ] ****** [1439 done /1159 queued / 16 running / 1438 errors / 34% coverage ] ****** [1439 done /1159 queued / 16 running / 1438 errors / 34% coverage ] ****** [1440 done /1160 queued / 16 running / 1439 errors / 34% coverage ] ****** [1440 done /1160 queued / 16 running / 1439 errors / 34% coverage ] ****** [1441 done /1164 queued / 16 running / 1440 errors / 34% coverage ] ****** [1441 done /1164 queued / 16 running / 1440 errors / 34% coverage ] ****** [1442 done /1163 queued / 16 running / 1441 errors / 34% coverage ] ****** [1442 done /1163 queued / 16 running / 1441 errors / 34% coverage ] ****** [1443 done /1165 queued / 16 running / 1442 errors / 34% coverage ] ****** [1443 done /1165 queued / 16 running / 1442 errors / 34% coverage ] ****** [1444 done /1167 queued / 16 running / 1443 errors / 34% coverage ] ****** [1444 done /1167 queued / 16 running / 1443 errors / 34% coverage ] ****** [1445 done /1166 queued / 16 running / 1444 errors / 34% coverage ] ****** [1445 done /1166 queued / 16 running / 1444 errors / 34% coverage ] ****** [1446 done /1167 queued / 16 running / 1445 errors / 34% coverage ] ****** [1446 done /1167 queued / 16 running / 1445 errors / 34% coverage ] ****** [1447 done /1166 queued / 16 running / 1446 errors / 34% coverage ] ****** [1447 done /1166 queued / 16 running / 1446 errors / 34% coverage ] ****** [1448 done /1168 queued / 16 running / 1447 errors / 34% coverage ] ****** [1448 done /1168 queued / 16 running / 1447 errors / 34% coverage ] ****** [1449 done /1169 queued / 16 running / 1448 errors / 34% coverage ] ****** [1449 done /1169 queued / 16 running / 1448 errors / 34% coverage ] ****** [1450 done /1170 queued / 16 running / 1449 errors / 34% coverage ] ****** [1450 done /1170 queued / 16 running / 1449 errors / 34% coverage ] ****** [1451 done /1171 queued / 16 running / 1450 errors / 34% coverage ] ****** [1451 done /1171 queued / 16 running / 1450 errors / 34% coverage ] ****** [1452 done /1173 queued / 16 running / 1451 errors / 34% coverage ] ****** [1452 done /1173 queued / 16 running / 1451 errors / 34% coverage ] ****** [1453 done /1174 queued / 16 running / 1452 errors / 34% coverage ] ****** [1453 done /1174 queued / 16 running / 1452 errors / 34% coverage ] ****** [1454 done /1174 queued / 16 running / 1453 errors / 34% coverage ] ****** [1454 done /1174 queued / 16 running / 1453 errors / 34% coverage ] ****** [1455 done /1174 queued / 16 running / 1454 errors / 34% coverage ] ****** [1455 done /1174 queued / 16 running / 1454 errors / 34% coverage ] ****** [1456 done /1176 queued / 16 running / 1455 errors / 34% coverage ] ****** [1456 done /1176 queued / 16 running / 1455 errors / 34% coverage ] ****** [1457 done /1177 queued / 16 running / 1456 errors / 34% coverage ] ****** [1457 done /1177 queued / 16 running / 1456 errors / 34% coverage ] ****** [1458 done /1179 queued / 16 running / 1457 errors / 34% coverage ] ****** [1458 done /1179 queued / 16 running / 1457 errors / 34% coverage ] ****** [1459 done /1183 queued / 16 running / 1458 errors / 34% coverage ] ****** [1459 done /1183 queued / 16 running / 1458 errors / 34% coverage ] ****** [1460 done /1183 queued / 16 running / 1459 errors / 34% coverage ] ****** [1460 done /1183 queued / 16 running / 1459 errors / 34% coverage ] ****** [1461 done /1182 queued / 16 running / 1460 errors / 34% coverage ] ****** [1461 done /1182 queued / 16 running / 1460 errors / 34% coverage ] ****** [1462 done /1181 queued / 16 running / 1461 errors / 34% coverage ] ****** [1462 done /1181 queued / 16 running / 1461 errors / 34% coverage ] ****** [1463 done /1187 queued / 16 running / 1462 errors / 34% coverage ] ****** [1463 done /1187 queued / 16 running / 1462 errors / 34% coverage ] ****** [1464 done /1188 queued / 16 running / 1463 errors / 34% coverage ] ****** [1464 done /1188 queued / 16 running / 1463 errors / 34% coverage ] ****** [1465 done /1190 queued / 16 running / 1464 errors / 34% coverage ] ****** [1465 done /1190 queued / 16 running / 1464 errors / 34% coverage ] ****** [1466 done /1191 queued / 16 running / 1465 errors / 34% coverage ] ****** [1466 done /1191 queued / 16 running / 1465 errors / 34% coverage ] ****** [1467 done /1197 queued / 16 running / 1466 errors / 34% coverage ] ****** [1467 done /1197 queued / 16 running / 1466 errors / 34% coverage ] ****** [1468 done /1201 queued / 16 running / 1467 errors / 34% coverage ] ****** [1468 done /1201 queued / 16 running / 1467 errors / 34% coverage ] ****** [1469 done /1200 queued / 16 running / 1468 errors / 34% coverage ] ****** [1469 done /1200 queued / 16 running / 1468 errors / 34% coverage ] ****** [1470 done /1199 queued / 16 running / 1469 errors / 34% coverage ] ****** [1470 done /1199 queued / 16 running / 1469 errors / 34% coverage ] ****** [1471 done /1201 queued / 16 running / 1470 errors / 34% coverage ] ****** [1471 done /1201 queued / 16 running / 1470 errors / 34% coverage ] ****** [1472 done /1205 queued / 16 running / 1471 errors / 34% coverage ] ****** [1472 done /1205 queued / 16 running / 1471 errors / 34% coverage ] ****** [1473 done /1205 queued / 16 running / 1472 errors / 34% coverage ] ****** [1473 done /1205 queued / 16 running / 1472 errors / 34% coverage ] ****** [1474 done /1204 queued / 16 running / 1473 errors / 34% coverage ] ****** [1474 done /1204 queued / 16 running / 1473 errors / 34% coverage ] ****** [1475 done /1204 queued / 16 running / 1474 errors / 34% coverage ] ****** [1475 done /1204 queued / 16 running / 1474 errors / 34% coverage ] ****** [1476 done /1206 queued / 16 running / 1475 errors / 34% coverage ] ****** [1476 done /1206 queued / 16 running / 1475 errors / 34% coverage ] ****** [1477 done /1209 queued / 16 running / 1476 errors / 34% coverage ] ****** [1477 done /1209 queued / 16 running / 1476 errors / 34% coverage ] ****** [1478 done /1209 queued / 16 running / 1477 errors / 34% coverage ] ****** [1478 done /1209 queued / 16 running / 1477 errors / 34% coverage ] ****** [1479 done /1209 queued / 16 running / 1478 errors / 34% coverage ] ****** [1479 done /1209 queued / 16 running / 1478 errors / 34% coverage ] ****** [1480 done /1211 queued / 16 running / 1479 errors / 34% coverage ] ****** [1480 done /1211 queued / 16 running / 1479 errors / 34% coverage ] ****** [1481 done /1212 queued / 16 running / 1480 errors / 34% coverage ] ****** [1481 done /1212 queued / 16 running / 1480 errors / 34% coverage ] ****** [1482 done /1214 queued / 16 running / 1481 errors / 34% coverage ] ****** [1482 done /1214 queued / 16 running / 1481 errors / 34% coverage ] ****** [1483 done /1216 queued / 16 running / 1482 errors / 34% coverage ] ****** [1483 done /1216 queued / 16 running / 1482 errors / 34% coverage ] ****** [1484 done /1216 queued / 16 running / 1483 errors / 34% coverage ] ****** [1484 done /1216 queued / 16 running / 1483 errors / 34% coverage ] ****** [1485 done /1218 queued / 16 running / 1484 errors / 34% coverage ] ****** [1485 done /1218 queued / 16 running / 1484 errors / 34% coverage ] ****** [1486 done /1220 queued / 16 running / 1485 errors / 34% coverage ] ****** [1486 done /1220 queued / 16 running / 1485 errors / 34% coverage ] ****** [1487 done /1223 queued / 16 running / 1486 errors / 34% coverage ] ****** [1487 done /1223 queued / 16 running / 1486 errors / 34% coverage ] ****** [1488 done /1225 queued / 16 running / 1487 errors / 34% coverage ] ****** [1488 done /1225 queued / 16 running / 1487 errors / 34% coverage ] ****** [1489 done /1227 queued / 16 running / 1488 errors / 34% coverage ] ****** [1489 done /1227 queued / 16 running / 1488 errors / 34% coverage ] ****** [1490 done /1228 queued / 16 running / 1489 errors / 34% coverage ] ****** [1490 done /1228 queued / 16 running / 1489 errors / 34% coverage ] ****** [1491 done /1231 queued / 16 running / 1490 errors / 34% coverage ] ****** [1491 done /1231 queued / 16 running / 1490 errors / 34% coverage ] ****** [1492 done /1233 queued / 16 running / 1491 errors / 34% coverage ] ****** [1492 done /1233 queued / 16 running / 1491 errors / 34% coverage ] ****** [1493 done /1233 queued / 16 running / 1492 errors / 34% coverage ] ****** [1493 done /1233 queued / 16 running / 1492 errors / 34% coverage ] ****** [1494 done /1234 queued / 16 running / 1493 errors / 34% coverage ] ****** [1494 done /1234 queued / 16 running / 1493 errors / 34% coverage ] ****** [1495 done /1234 queued / 16 running / 1494 errors / 34% coverage ] ****** [1495 done /1234 queued / 16 running / 1494 errors / 34% coverage ] ****** [1496 done /1235 queued / 16 running / 1495 errors / 34% coverage ] ****** [1496 done /1235 queued / 16 running / 1495 errors / 34% coverage ] ****** [1497 done /1236 queued / 16 running / 1496 errors / 34% coverage ] ****** [1497 done /1236 queued / 16 running / 1496 errors / 34% coverage ] ****** [1498 done /1238 queued / 16 running / 1497 errors / 34% coverage ] ****** [1498 done /1238 queued / 16 running / 1497 errors / 34% coverage ] ****** [1499 done /1241 queued / 16 running / 1498 errors / 34% coverage ] ****** [1499 done /1241 queued / 16 running / 1498 errors / 34% coverage ] ****** [1500 done /1242 queued / 16 running / 1499 errors / 34% coverage ] ****** [1500 done /1242 queued / 16 running / 1499 errors / 34% coverage ] ****** [1501 done /1241 queued / 16 running / 1500 errors / 34% coverage ] ****** [1501 done /1241 queued / 16 running / 1500 errors / 34% coverage ] ****** [1502 done /1243 queued / 16 running / 1501 errors / 34% coverage ] ****** [1502 done /1243 queued / 16 running / 1501 errors / 34% coverage ] ****** [1503 done /1242 queued / 16 running / 1502 errors / 34% coverage ] ****** [1503 done /1242 queued / 16 running / 1502 errors / 34% coverage ] ****** [1504 done /1242 queued / 16 running / 1503 errors / 34% coverage ] ****** [1504 done /1242 queued / 16 running / 1503 errors / 34% coverage ] ****** [1505 done /1244 queued / 16 running / 1504 errors / 34% coverage ] ****** [1505 done /1244 queued / 16 running / 1504 errors / 34% coverage ] ****** [1506 done /1245 queued / 16 running / 1505 errors / 34% coverage ] ****** [1506 done /1245 queued / 16 running / 1505 errors / 34% coverage ] ****** [1507 done /1247 queued / 16 running / 1506 errors / 34% coverage ] ****** [1507 done /1247 queued / 16 running / 1506 errors / 34% coverage ] ****** [1508 done /1248 queued / 16 running / 1507 errors / 34% coverage ] ****** [1508 done /1248 queued / 16 running / 1507 errors / 34% coverage ] ****** [1509 done /1251 queued / 16 running / 1508 errors / 34% coverage ] ****** [1509 done /1251 queued / 16 running / 1508 errors / 34% coverage ] ****** [1510 done /1251 queued / 16 running / 1509 errors / 34% coverage ] ****** [1510 done /1251 queued / 16 running / 1509 errors / 34% coverage ] ****** [1511 done /1250 queued / 16 running / 1510 errors / 34% coverage ] ****** [1511 done /1250 queued / 16 running / 1510 errors / 34% coverage ] ****** [1512 done /1251 queued / 16 running / 1511 errors / 34% coverage ] ****** [1512 done /1251 queued / 16 running / 1511 errors / 34% coverage ] ****** [1513 done /1254 queued / 16 running / 1512 errors / 34% coverage ] ****** [1513 done /1254 queued / 16 running / 1512 errors / 34% coverage ] ****** [1514 done /1257 queued / 16 running / 1513 errors / 34% coverage ] ****** [1514 done /1257 queued / 16 running / 1513 errors / 34% coverage ] ****** [1515 done /1259 queued / 16 running / 1514 errors / 34% coverage ] ****** [1515 done /1259 queued / 16 running / 1514 errors / 34% coverage ] ****** [1516 done /1258 queued / 16 running / 1515 errors / 34% coverage ] ****** [1516 done /1258 queued / 16 running / 1515 errors / 34% coverage ] ****** [1517 done /1260 queued / 16 running / 1516 errors / 34% coverage ] ****** [1517 done /1260 queued / 16 running / 1516 errors / 34% coverage ] ****** [1518 done /1259 queued / 16 running / 1517 errors / 34% coverage ] ****** [1518 done /1259 queued / 16 running / 1517 errors / 34% coverage ] ****** [1519 done /1258 queued / 16 running / 1518 errors / 34% coverage ] ****** [1519 done /1258 queued / 16 running / 1518 errors / 34% coverage ] ****** [1520 done /1260 queued / 16 running / 1519 errors / 34% coverage ] ****** [1520 done /1260 queued / 16 running / 1519 errors / 34% coverage ] ****** [1521 done /1265 queued / 16 running / 1520 errors / 34% coverage ] ****** [1521 done /1265 queued / 16 running / 1520 errors / 34% coverage ] ****** [1522 done /1264 queued / 16 running / 1521 errors / 34% coverage ] ****** [1522 done /1264 queued / 16 running / 1521 errors / 34% coverage ] ****** [1523 done /1263 queued / 16 running / 1522 errors / 34% coverage ] ****** [1523 done /1263 queued / 16 running / 1522 errors / 34% coverage ] ****** [1524 done /1267 queued / 16 running / 1523 errors / 34% coverage ] ****** [1524 done /1267 queued / 16 running / 1523 errors / 34% coverage ] ****** [1525 done /1269 queued / 16 running / 1524 errors / 34% coverage ] ****** [1525 done /1269 queued / 16 running / 1524 errors / 34% coverage ] ****** [1526 done /1270 queued / 16 running / 1525 errors / 34% coverage ] ****** [1526 done /1270 queued / 16 running / 1525 errors / 34% coverage ] ****** [1527 done /1274 queued / 16 running / 1526 errors / 34% coverage ] ****** [1527 done /1274 queued / 16 running / 1526 errors / 34% coverage ] ****** [1528 done /1274 queued / 16 running / 1527 errors / 34% coverage ] ****** [1528 done /1274 queued / 16 running / 1527 errors / 34% coverage ] ****** [1529 done /1274 queued / 16 running / 1528 errors / 34% coverage ] ****** [1529 done /1274 queued / 16 running / 1528 errors / 34% coverage ] ****** [1530 done /1276 queued / 16 running / 1529 errors / 34% coverage ] ****** [1530 done /1276 queued / 16 running / 1529 errors / 34% coverage ] ****** [1531 done /1276 queued / 16 running / 1530 errors / 34% coverage ] ****** [1531 done /1276 queued / 16 running / 1530 errors / 34% coverage ] ****** [1532 done /1275 queued / 16 running / 1531 errors / 34% coverage ] ****** [1532 done /1275 queued / 16 running / 1531 errors / 34% coverage ] ****** [1533 done /1274 queued / 16 running / 1532 errors / 34% coverage ] ****** [1533 done /1274 queued / 16 running / 1532 errors / 34% coverage ] ****** [1534 done /1275 queued / 16 running / 1533 errors / 34% coverage ] ****** [1534 done /1275 queued / 16 running / 1533 errors / 34% coverage ] ****** [1535 done /1274 queued / 16 running / 1534 errors / 34% coverage ] ****** [1535 done /1274 queued / 16 running / 1534 errors / 34% coverage ] ****** [1536 done /1276 queued / 16 running / 1535 errors / 34% coverage ] ****** [1536 done /1276 queued / 16 running / 1535 errors / 34% coverage ] ****** [1537 done /1275 queued / 16 running / 1536 errors / 34% coverage ] ****** [1537 done /1275 queued / 16 running / 1536 errors / 34% coverage ] ****** [1538 done /1276 queued / 16 running / 1537 errors / 34% coverage ] ****** [1538 done /1276 queued / 16 running / 1537 errors / 34% coverage ] ****** [1539 done /1276 queued / 16 running / 1538 errors / 34% coverage ] ****** [1539 done /1276 queued / 16 running / 1538 errors / 34% coverage ] ****** [1540 done /1278 queued / 16 running / 1539 errors / 34% coverage ] ****** [1540 done /1278 queued / 16 running / 1539 errors / 34% coverage ] ****** [1541 done /1279 queued / 16 running / 1540 errors / 34% coverage ] ****** [1541 done /1279 queued / 16 running / 1540 errors / 34% coverage ] ****** [1542 done /1280 queued / 16 running / 1541 errors / 34% coverage ] ****** [1542 done /1280 queued / 16 running / 1541 errors / 34% coverage ] ****** [1543 done /1281 queued / 16 running / 1542 errors / 34% coverage ] ****** [1543 done /1281 queued / 16 running / 1542 errors / 34% coverage ] ****** [1544 done /1281 queued / 16 running / 1543 errors / 34% coverage ] ****** [1544 done /1281 queued / 16 running / 1543 errors / 34% coverage ] ****** [1545 done /1281 queued / 16 running / 1544 errors / 34% coverage ] ****** [1545 done /1281 queued / 16 running / 1544 errors / 34% coverage ] ****** [1546 done /1282 queued / 16 running / 1545 errors / 34% coverage ] ****** [1546 done /1282 queued / 16 running / 1545 errors / 34% coverage ] ****** [1547 done /1282 queued / 16 running / 1546 errors / 34% coverage ] ****** [1547 done /1282 queued / 16 running / 1546 errors / 34% coverage ] ****** [1548 done /1284 queued / 16 running / 1547 errors / 34% coverage ] ****** [1548 done /1284 queued / 16 running / 1547 errors / 34% coverage ] ****** [1549 done /1286 queued / 16 running / 1548 errors / 34% coverage ] ****** [1549 done /1286 queued / 16 running / 1548 errors / 34% coverage ] ****** [1550 done /1287 queued / 16 running / 1549 errors / 34% coverage ] ****** [1550 done /1287 queued / 16 running / 1549 errors / 34% coverage ] ****** [1551 done /1286 queued / 16 running / 1550 errors / 34% coverage ] ****** [1551 done /1286 queued / 16 running / 1550 errors / 34% coverage ] ****** [1552 done /1285 queued / 16 running / 1551 errors / 34% coverage ] ****** [1552 done /1285 queued / 16 running / 1551 errors / 34% coverage ] ****** [1553 done /1284 queued / 16 running / 1552 errors / 34% coverage ] ****** [1553 done /1284 queued / 16 running / 1552 errors / 34% coverage ] ****** [1554 done /1283 queued / 16 running / 1553 errors / 34% coverage ] ****** [1554 done /1283 queued / 16 running / 1553 errors / 34% coverage ] ****** [1555 done /1284 queued / 16 running / 1554 errors / 34% coverage ] ****** [1555 done /1284 queued / 16 running / 1554 errors / 34% coverage ] ****** [1556 done /1285 queued / 16 running / 1555 errors / 34% coverage ] ****** [1556 done /1285 queued / 16 running / 1555 errors / 34% coverage ] ****** [1557 done /1285 queued / 16 running / 1556 errors / 34% coverage ] ****** [1557 done /1285 queued / 16 running / 1556 errors / 34% coverage ] ****** [1558 done /1285 queued / 16 running / 1557 errors / 34% coverage ] ****** [1558 done /1285 queued / 16 running / 1557 errors / 34% coverage ] ****** [1559 done /1286 queued / 16 running / 1558 errors / 34% coverage ] ****** [1559 done /1286 queued / 16 running / 1558 errors / 34% coverage ] ****** [1560 done /1288 queued / 16 running / 1559 errors / 34% coverage ] ****** [1560 done /1288 queued / 16 running / 1559 errors / 34% coverage ] ****** [1561 done /1290 queued / 16 running / 1560 errors / 34% coverage ] ****** [1561 done /1290 queued / 16 running / 1560 errors / 34% coverage ] ****** [1562 done /1292 queued / 16 running / 1561 errors / 34% coverage ] ****** [1562 done /1292 queued / 16 running / 1561 errors / 34% coverage ] ****** [1563 done /1294 queued / 16 running / 1562 errors / 34% coverage ] ****** [1563 done /1294 queued / 16 running / 1562 errors / 34% coverage ] ****** [1564 done /1295 queued / 16 running / 1563 errors / 34% coverage ] ****** [1564 done /1295 queued / 16 running / 1563 errors / 34% coverage ] ****** [1565 done /1294 queued / 16 running / 1564 errors / 34% coverage ] ****** [1565 done /1294 queued / 16 running / 1564 errors / 34% coverage ] ****** [1566 done /1293 queued / 16 running / 1565 errors / 34% coverage ] ****** [1566 done /1293 queued / 16 running / 1565 errors / 34% coverage ] ****** [1567 done /1295 queued / 16 running / 1566 errors / 34% coverage ] ****** [1567 done /1295 queued / 16 running / 1566 errors / 34% coverage ] ****** [1568 done /1296 queued / 16 running / 1567 errors / 34% coverage ] ****** [1568 done /1296 queued / 16 running / 1567 errors / 34% coverage ] ****** [1569 done /1297 queued / 16 running / 1568 errors / 34% coverage ] ****** [1569 done /1297 queued / 16 running / 1568 errors / 34% coverage ] ****** [1570 done /1296 queued / 16 running / 1569 errors / 34% coverage ] ****** [1570 done /1296 queued / 16 running / 1569 errors / 34% coverage ] ****** [1571 done /1298 queued / 16 running / 1570 errors / 34% coverage ] ****** [1571 done /1298 queued / 16 running / 1570 errors / 34% coverage ] ****** [1572 done /1300 queued / 16 running / 1571 errors / 34% coverage ] ****** [1572 done /1300 queued / 16 running / 1571 errors / 34% coverage ] ****** [1573 done /1305 queued / 16 running / 1572 errors / 34% coverage ] ****** [1573 done /1305 queued / 16 running / 1572 errors / 34% coverage ] ****** [1574 done /1307 queued / 16 running / 1573 errors / 34% coverage ] ****** [1574 done /1307 queued / 16 running / 1573 errors / 34% coverage ] ****** [1575 done /1306 queued / 16 running / 1574 errors / 34% coverage ] ****** [1575 done /1306 queued / 16 running / 1574 errors / 34% coverage ] ****** [1576 done /1305 queued / 16 running / 1575 errors / 34% coverage ] ****** [1576 done /1305 queued / 16 running / 1575 errors / 34% coverage ] ****** [1577 done /1308 queued / 16 running / 1576 errors / 34% coverage ] ****** [1577 done /1308 queued / 16 running / 1576 errors / 34% coverage ] ****** [1578 done /1308 queued / 16 running / 1577 errors / 34% coverage ] ****** [1578 done /1308 queued / 16 running / 1577 errors / 34% coverage ] ****** [1579 done /1310 queued / 16 running / 1578 errors / 34% coverage ] ****** [1579 done /1310 queued / 16 running / 1578 errors / 34% coverage ] ****** [1580 done /1309 queued / 16 running / 1579 errors / 34% coverage ] ****** [1580 done /1309 queued / 16 running / 1579 errors / 34% coverage ] ****** [1581 done /1312 queued / 16 running / 1580 errors / 34% coverage ] ****** [1581 done /1312 queued / 16 running / 1580 errors / 34% coverage ] ****** [1582 done /1311 queued / 16 running / 1581 errors / 34% coverage ] ****** [1582 done /1311 queued / 16 running / 1581 errors / 34% coverage ] ****** [1583 done /1315 queued / 16 running / 1582 errors / 34% coverage ] ****** [1583 done /1315 queued / 16 running / 1582 errors / 34% coverage ] ****** [1584 done /1316 queued / 16 running / 1583 errors / 34% coverage ] ****** [1584 done /1316 queued / 16 running / 1583 errors / 34% coverage ] ****** [1585 done /1315 queued / 16 running / 1584 errors / 34% coverage ] ****** [1585 done /1315 queued / 16 running / 1584 errors / 34% coverage ] ****** [1586 done /1315 queued / 16 running / 1585 errors / 34% coverage ] ****** [1586 done /1315 queued / 16 running / 1585 errors / 34% coverage ] ****** [1587 done /1316 queued / 16 running / 1586 errors / 34% coverage ] ****** [1587 done /1316 queued / 16 running / 1586 errors / 34% coverage ] ****** [1588 done /1318 queued / 16 running / 1587 errors / 34% coverage ] ****** [1588 done /1318 queued / 16 running / 1587 errors / 34% coverage ] ****** [1589 done /1317 queued / 16 running / 1588 errors / 34% coverage ] ****** [1589 done /1317 queued / 16 running / 1588 errors / 34% coverage ] ****** [1590 done /1317 queued / 16 running / 1589 errors / 34% coverage ] ****** [1590 done /1317 queued / 16 running / 1589 errors / 34% coverage ] ****** [1591 done /1318 queued / 16 running / 1590 errors / 34% coverage ] ****** [1591 done /1318 queued / 16 running / 1590 errors / 34% coverage ] ****** [1592 done /1317 queued / 16 running / 1591 errors / 34% coverage ] ****** [1592 done /1317 queued / 16 running / 1591 errors / 34% coverage ] ****** [1593 done /1318 queued / 16 running / 1592 errors / 34% coverage ] ****** [1593 done /1318 queued / 16 running / 1592 errors / 34% coverage ] ****** [1594 done /1318 queued / 16 running / 1593 errors / 34% coverage ] ****** [1594 done /1318 queued / 16 running / 1593 errors / 34% coverage ] ****** [1595 done /1317 queued / 16 running / 1594 errors / 34% coverage ] ****** [1595 done /1317 queued / 16 running / 1594 errors / 34% coverage ] ****** [1596 done /1318 queued / 16 running / 1595 errors / 34% coverage ] ****** [1596 done /1318 queued / 16 running / 1595 errors / 34% coverage ] ****** [1597 done /1319 queued / 16 running / 1596 errors / 34% coverage ] ****** [1597 done /1319 queued / 16 running / 1596 errors / 34% coverage ] ****** [1598 done /1321 queued / 16 running / 1597 errors / 34% coverage ] ****** [1598 done /1321 queued / 16 running / 1597 errors / 34% coverage ] ****** [1599 done /1323 queued / 16 running / 1598 errors / 34% coverage ] ****** [1599 done /1323 queued / 16 running / 1598 errors / 34% coverage ] ****** [1600 done /1324 queued / 16 running / 1599 errors / 34% coverage ] ****** [1600 done /1324 queued / 16 running / 1599 errors / 34% coverage ] ****** [1601 done /1325 queued / 16 running / 1600 errors / 34% coverage ] ****** [1601 done /1325 queued / 16 running / 1600 errors / 34% coverage ] ****** [1602 done /1327 queued / 16 running / 1601 errors / 34% coverage ] ****** [1602 done /1327 queued / 16 running / 1601 errors / 34% coverage ] ****** [1603 done /1329 queued / 16 running / 1602 errors / 34% coverage ] ****** [1603 done /1329 queued / 16 running / 1602 errors / 34% coverage ] ****** [1604 done /1331 queued / 16 running / 1603 errors / 34% coverage ] ****** [1604 done /1331 queued / 16 running / 1603 errors / 34% coverage ] ****** [1605 done /1333 queued / 16 running / 1604 errors / 34% coverage ] ****** [1605 done /1333 queued / 16 running / 1604 errors / 34% coverage ] ****** [1606 done /1335 queued / 16 running / 1605 errors / 34% coverage ] ****** [1606 done /1335 queued / 16 running / 1605 errors / 34% coverage ] ****** [1607 done /1335 queued / 16 running / 1606 errors / 34% coverage ] ****** [1607 done /1335 queued / 16 running / 1606 errors / 34% coverage ] ****** [1608 done /1338 queued / 16 running / 1607 errors / 34% coverage ] ****** [1608 done /1338 queued / 16 running / 1607 errors / 34% coverage ] ****** [1609 done /1339 queued / 16 running / 1608 errors / 34% coverage ] ****** [1609 done /1339 queued / 16 running / 1608 errors / 34% coverage ] ****** [1610 done /1338 queued / 16 running / 1609 errors / 34% coverage ] ****** [1610 done /1338 queued / 16 running / 1609 errors / 34% coverage ] ****** [1611 done /1342 queued / 16 running / 1610 errors / 34% coverage ] ****** [1611 done /1342 queued / 16 running / 1610 errors / 34% coverage ] ****** [1612 done /1343 queued / 16 running / 1611 errors / 34% coverage ] ****** [1612 done /1343 queued / 16 running / 1611 errors / 34% coverage ] ****** [1613 done /1342 queued / 16 running / 1612 errors / 34% coverage ] ****** [1613 done /1342 queued / 16 running / 1612 errors / 34% coverage ] ****** [1614 done /1342 queued / 16 running / 1613 errors / 34% coverage ] ****** [1614 done /1342 queued / 16 running / 1613 errors / 34% coverage ] ****** [1615 done /1343 queued / 16 running / 1614 errors / 34% coverage ] ****** [1615 done /1343 queued / 16 running / 1614 errors / 34% coverage ] ****** [1616 done /1344 queued / 16 running / 1615 errors / 34% coverage ] ****** [1616 done /1344 queued / 16 running / 1615 errors / 34% coverage ] ****** [1617 done /1346 queued / 16 running / 1616 errors / 34% coverage ] ****** [1617 done /1346 queued / 16 running / 1616 errors / 34% coverage ] ****** [1618 done /1348 queued / 16 running / 1617 errors / 34% coverage ] ****** [1618 done /1348 queued / 16 running / 1617 errors / 34% coverage ] ****** [1619 done /1348 queued / 16 running / 1618 errors / 34% coverage ] ****** [1619 done /1348 queued / 16 running / 1618 errors / 34% coverage ] ****** [1620 done /1350 queued / 16 running / 1619 errors / 34% coverage ] ****** [1620 done /1350 queued / 16 running / 1619 errors / 34% coverage ] ****** [1621 done /1349 queued / 16 running / 1620 errors / 34% coverage ] ****** [1621 done /1349 queued / 16 running / 1620 errors / 34% coverage ] ****** [1622 done /1348 queued / 16 running / 1621 errors / 34% coverage ] ****** [1622 done /1348 queued / 16 running / 1621 errors / 34% coverage ] ****** [1623 done /1350 queued / 16 running / 1622 errors / 34% coverage ] ****** [1623 done /1350 queued / 16 running / 1622 errors / 34% coverage ] ****** [1624 done /1352 queued / 16 running / 1623 errors / 34% coverage ] ****** [1624 done /1352 queued / 16 running / 1623 errors / 34% coverage ] ****** [1625 done /1353 queued / 16 running / 1624 errors / 34% coverage ] ****** [1625 done /1353 queued / 16 running / 1624 errors / 34% coverage ] ****** [1626 done /1355 queued / 16 running / 1625 errors / 34% coverage ] ****** [1626 done /1355 queued / 16 running / 1625 errors / 34% coverage ] ****** [1627 done /1357 queued / 16 running / 1626 errors / 34% coverage ] ****** [1627 done /1357 queued / 16 running / 1626 errors / 34% coverage ] ****** [1628 done /1358 queued / 16 running / 1627 errors / 34% coverage ] ****** [1628 done /1358 queued / 16 running / 1627 errors / 34% coverage ] ****** [1629 done /1358 queued / 16 running / 1628 errors / 34% coverage ] ****** [1629 done /1358 queued / 16 running / 1628 errors / 34% coverage ] ****** [1630 done /1360 queued / 16 running / 1629 errors / 34% coverage ] ****** [1630 done /1360 queued / 16 running / 1629 errors / 34% coverage ] ****** [1631 done /1361 queued / 16 running / 1630 errors / 34% coverage ] ****** [1631 done /1361 queued / 16 running / 1630 errors / 34% coverage ] ****** [1632 done /1361 queued / 16 running / 1631 errors / 34% coverage ] ****** [1632 done /1361 queued / 16 running / 1631 errors / 34% coverage ] ****** [1633 done /1363 queued / 16 running / 1632 errors / 34% coverage ] ****** [1633 done /1363 queued / 16 running / 1632 errors / 34% coverage ] ****** [1634 done /1363 queued / 16 running / 1633 errors / 34% coverage ] ****** [1634 done /1363 queued / 16 running / 1633 errors / 34% coverage ] ****** [1635 done /1362 queued / 16 running / 1634 errors / 34% coverage ] ****** [1635 done /1362 queued / 16 running / 1634 errors / 34% coverage ] ****** [1636 done /1362 queued / 16 running / 1635 errors / 34% coverage ] ****** [1636 done /1362 queued / 16 running / 1635 errors / 34% coverage ] ****** [1637 done /1362 queued / 16 running / 1636 errors / 34% coverage ] ****** [1637 done /1362 queued / 16 running / 1636 errors / 34% coverage ] ****** [1638 done /1361 queued / 16 running / 1637 errors / 34% coverage ] ****** [1638 done /1361 queued / 16 running / 1637 errors / 34% coverage ] ****** [1639 done /1362 queued / 16 running / 1638 errors / 34% coverage ] ****** [1639 done /1362 queued / 16 running / 1638 errors / 34% coverage ] ****** [1640 done /1361 queued / 16 running / 1639 errors / 34% coverage ] ****** [1640 done /1361 queued / 16 running / 1639 errors / 34% coverage ] ****** [1641 done /1360 queued / 16 running / 1640 errors / 34% coverage ] ****** [1641 done /1360 queued / 16 running / 1640 errors / 34% coverage ] ****** [1642 done /1362 queued / 16 running / 1641 errors / 34% coverage ] ****** [1642 done /1362 queued / 16 running / 1641 errors / 34% coverage ] ****** [1643 done /1363 queued / 16 running / 1642 errors / 34% coverage ] ****** [1643 done /1363 queued / 16 running / 1642 errors / 34% coverage ] ****** [1644 done /1365 queued / 16 running / 1643 errors / 34% coverage ] ****** [1644 done /1365 queued / 16 running / 1643 errors / 34% coverage ] ****** [1645 done /1367 queued / 16 running / 1644 errors / 34% coverage ] ****** [1645 done /1367 queued / 16 running / 1644 errors / 34% coverage ] ****** [1646 done /1366 queued / 16 running / 1645 errors / 34% coverage ] ****** [1646 done /1366 queued / 16 running / 1645 errors / 34% coverage ] ****** [1647 done /1367 queued / 16 running / 1646 errors / 34% coverage ] ****** [1647 done /1367 queued / 16 running / 1646 errors / 34% coverage ] ****** [1648 done /1369 queued / 16 running / 1647 errors / 34% coverage ] ****** [1648 done /1369 queued / 16 running / 1647 errors / 34% coverage ] ****** [1649 done /1373 queued / 16 running / 1648 errors / 34% coverage ] ****** [1649 done /1373 queued / 16 running / 1648 errors / 34% coverage ] ****** [1650 done /1375 queued / 16 running / 1649 errors / 34% coverage ] ****** [1650 done /1375 queued / 16 running / 1649 errors / 34% coverage ] ****** [1651 done /1376 queued / 16 running / 1650 errors / 34% coverage ] ****** [1651 done /1376 queued / 16 running / 1650 errors / 34% coverage ] ****** [1652 done /1376 queued / 16 running / 1651 errors / 34% coverage ] ****** [1652 done /1376 queued / 16 running / 1651 errors / 34% coverage ] ****** [1653 done /1376 queued / 16 running / 1652 errors / 34% coverage ] ****** [1653 done /1376 queued / 16 running / 1652 errors / 34% coverage ] ****** [1654 done /1378 queued / 16 running / 1653 errors / 34% coverage ] ****** [1654 done /1378 queued / 16 running / 1653 errors / 34% coverage ] ****** [1655 done /1383 queued / 16 running / 1654 errors / 34% coverage ] ****** [1655 done /1383 queued / 16 running / 1654 errors / 34% coverage ] ****** [1656 done /1382 queued / 16 running / 1655 errors / 34% coverage ] ****** [1656 done /1382 queued / 16 running / 1655 errors / 34% coverage ] ****** [1657 done /1385 queued / 16 running / 1656 errors / 34% coverage ] ****** [1657 done /1385 queued / 16 running / 1656 errors / 34% coverage ] ****** [1658 done /1384 queued / 16 running / 1657 errors / 34% coverage ] ****** [1658 done /1384 queued / 16 running / 1657 errors / 34% coverage ] ****** [1659 done /1388 queued / 16 running / 1658 errors / 34% coverage ] ****** [1659 done /1388 queued / 16 running / 1658 errors / 34% coverage ] ****** [1660 done /1390 queued / 16 running / 1659 errors / 34% coverage ] ****** [1660 done /1390 queued / 16 running / 1659 errors / 34% coverage ] ****** [1661 done /1391 queued / 16 running / 1660 errors / 34% coverage ] ****** [1661 done /1391 queued / 16 running / 1660 errors / 34% coverage ] ****** [1662 done /1393 queued / 16 running / 1661 errors / 34% coverage ] ****** [1662 done /1393 queued / 16 running / 1661 errors / 34% coverage ] ****** [1663 done /1396 queued / 16 running / 1662 errors / 34% coverage ] ****** [1663 done /1396 queued / 16 running / 1662 errors / 34% coverage ] ****** [1664 done /1398 queued / 16 running / 1663 errors / 34% coverage ] ****** [1664 done /1398 queued / 16 running / 1663 errors / 34% coverage ] ****** [1665 done /1399 queued / 16 running / 1664 errors / 34% coverage ] ****** [1665 done /1399 queued / 16 running / 1664 errors / 34% coverage ] ****** [1666 done /1399 queued / 16 running / 1665 errors / 34% coverage ] ****** [1666 done /1399 queued / 16 running / 1665 errors / 34% coverage ] ****** [1667 done /1401 queued / 16 running / 1666 errors / 34% coverage ] ****** [1667 done /1401 queued / 16 running / 1666 errors / 34% coverage ] ****** [1668 done /1401 queued / 16 running / 1667 errors / 34% coverage ] ****** [1668 done /1401 queued / 16 running / 1667 errors / 34% coverage ] ****** [1669 done /1402 queued / 16 running / 1668 errors / 34% coverage ] ****** [1669 done /1402 queued / 16 running / 1668 errors / 34% coverage ] ****** [1670 done /1403 queued / 16 running / 1669 errors / 34% coverage ] ****** [1670 done /1403 queued / 16 running / 1669 errors / 34% coverage ] ****** [1671 done /1404 queued / 16 running / 1670 errors / 34% coverage ] ****** [1671 done /1404 queued / 16 running / 1670 errors / 34% coverage ] ****** [1672 done /1405 queued / 16 running / 1671 errors / 34% coverage ] ****** [1672 done /1405 queued / 16 running / 1671 errors / 34% coverage ] ****** [1673 done /1405 queued / 16 running / 1672 errors / 34% coverage ] ****** [1673 done /1405 queued / 16 running / 1672 errors / 34% coverage ] ****** [1674 done /1405 queued / 16 running / 1673 errors / 34% coverage ] ****** [1674 done /1405 queued / 16 running / 1673 errors / 34% coverage ] ****** [1675 done /1406 queued / 16 running / 1674 errors / 34% coverage ] ****** [1675 done /1406 queued / 16 running / 1674 errors / 34% coverage ] ****** [1676 done /1408 queued / 16 running / 1675 errors / 34% coverage ] ****** [1676 done /1408 queued / 16 running / 1675 errors / 34% coverage ] ****** [1677 done /1409 queued / 16 running / 1676 errors / 34% coverage ] ****** [1677 done /1409 queued / 16 running / 1676 errors / 34% coverage ] ****** [1678 done /1411 queued / 16 running / 1677 errors / 34% coverage ] ****** [1678 done /1411 queued / 16 running / 1677 errors / 34% coverage ] ****** [1679 done /1411 queued / 16 running / 1678 errors / 34% coverage ] ****** [1679 done /1411 queued / 16 running / 1678 errors / 34% coverage ] ****** [1680 done /1411 queued / 16 running / 1679 errors / 34% coverage ] ****** [1680 done /1411 queued / 16 running / 1679 errors / 34% coverage ] ****** [1681 done /1412 queued / 16 running / 1680 errors / 34% coverage ] ****** [1681 done /1412 queued / 16 running / 1680 errors / 34% coverage ] ****** [1682 done /1415 queued / 16 running / 1681 errors / 34% coverage ] ****** [1682 done /1415 queued / 16 running / 1681 errors / 34% coverage ] ****** [1683 done /1417 queued / 16 running / 1682 errors / 34% coverage ] ****** [1683 done /1417 queued / 16 running / 1682 errors / 34% coverage ] ****** [1684 done /1418 queued / 16 running / 1683 errors / 34% coverage ] ****** [1684 done /1418 queued / 16 running / 1683 errors / 34% coverage ] ****** [1685 done /1420 queued / 16 running / 1684 errors / 34% coverage ] ****** [1685 done /1420 queued / 16 running / 1684 errors / 34% coverage ] ****** [1686 done /1420 queued / 16 running / 1685 errors / 34% coverage ] ****** [1686 done /1420 queued / 16 running / 1685 errors / 34% coverage ] ****** [1687 done /1421 queued / 16 running / 1686 errors / 34% coverage ] ****** [1687 done /1421 queued / 16 running / 1686 errors / 34% coverage ] ****** [1688 done /1423 queued / 16 running / 1687 errors / 34% coverage ] ****** [1688 done /1423 queued / 16 running / 1687 errors / 34% coverage ] ****** [1689 done /1424 queued / 16 running / 1688 errors / 34% coverage ] ****** [1689 done /1424 queued / 16 running / 1688 errors / 34% coverage ] ****** [1690 done /1424 queued / 16 running / 1689 errors / 34% coverage ] ****** [1690 done /1424 queued / 16 running / 1689 errors / 34% coverage ] ****** [1691 done /1423 queued / 16 running / 1690 errors / 34% coverage ] ****** [1691 done /1423 queued / 16 running / 1690 errors / 34% coverage ] ****** [1692 done /1425 queued / 16 running / 1691 errors / 34% coverage ] ****** [1692 done /1425 queued / 16 running / 1691 errors / 34% coverage ] ****** [1693 done /1429 queued / 16 running / 1692 errors / 34% coverage ] ****** [1693 done /1429 queued / 16 running / 1692 errors / 34% coverage ] ****** [1694 done /1428 queued / 16 running / 1693 errors / 34% coverage ] ****** [1694 done /1428 queued / 16 running / 1693 errors / 34% coverage ] ****** [1695 done /1430 queued / 16 running / 1694 errors / 34% coverage ] ****** [1695 done /1430 queued / 16 running / 1694 errors / 34% coverage ] ****** [1696 done /1429 queued / 16 running / 1695 errors / 34% coverage ] ****** [1696 done /1429 queued / 16 running / 1695 errors / 34% coverage ] ****** [1697 done /1429 queued / 16 running / 1696 errors / 34% coverage ] ****** [1697 done /1429 queued / 16 running / 1696 errors / 34% coverage ] ****** [1698 done /1428 queued / 16 running / 1697 errors / 34% coverage ] ****** [1698 done /1428 queued / 16 running / 1697 errors / 34% coverage ] ****** [1699 done /1428 queued / 16 running / 1698 errors / 34% coverage ] ****** [1699 done /1428 queued / 16 running / 1698 errors / 34% coverage ] ****** [1700 done /1430 queued / 16 running / 1699 errors / 34% coverage ] ****** [1700 done /1430 queued / 16 running / 1699 errors / 34% coverage ] ****** [1701 done /1431 queued / 16 running / 1700 errors / 34% coverage ] ****** [1701 done /1431 queued / 16 running / 1700 errors / 34% coverage ] ****** [1702 done /1435 queued / 16 running / 1701 errors / 34% coverage ] ****** [1702 done /1435 queued / 16 running / 1701 errors / 34% coverage ] ****** [1703 done /1438 queued / 16 running / 1702 errors / 34% coverage ] ****** [1703 done /1438 queued / 16 running / 1702 errors / 34% coverage ] ****** [1704 done /1439 queued / 16 running / 1703 errors / 34% coverage ] ****** [1704 done /1439 queued / 16 running / 1703 errors / 34% coverage ] ****** [1705 done /1439 queued / 16 running / 1704 errors / 34% coverage ] ****** [1705 done /1439 queued / 16 running / 1704 errors / 34% coverage ] ****** [1706 done /1439 queued / 16 running / 1705 errors / 34% coverage ] ****** [1706 done /1439 queued / 16 running / 1705 errors / 34% coverage ] ****** [1707 done /1438 queued / 16 running / 1706 errors / 34% coverage ] ****** [1707 done /1438 queued / 16 running / 1706 errors / 34% coverage ] ****** [1708 done /1441 queued / 16 running / 1707 errors / 34% coverage ] ****** [1708 done /1441 queued / 16 running / 1707 errors / 34% coverage ] ****** [1709 done /1442 queued / 16 running / 1708 errors / 34% coverage ] ****** [1709 done /1442 queued / 16 running / 1708 errors / 34% coverage ] ****** [1710 done /1442 queued / 16 running / 1709 errors / 34% coverage ] ****** [1710 done /1442 queued / 16 running / 1709 errors / 34% coverage ] ****** [1711 done /1443 queued / 16 running / 1710 errors / 34% coverage ] ****** [1711 done /1443 queued / 16 running / 1710 errors / 34% coverage ] ****** [1712 done /1446 queued / 16 running / 1711 errors / 34% coverage ] ****** [1712 done /1446 queued / 16 running / 1711 errors / 34% coverage ] ****** [1713 done /1445 queued / 16 running / 1712 errors / 34% coverage ] ****** [1713 done /1445 queued / 16 running / 1712 errors / 34% coverage ] ****** [1714 done /1445 queued / 16 running / 1713 errors / 34% coverage ] ****** [1714 done /1445 queued / 16 running / 1713 errors / 34% coverage ] ****** [1715 done /1444 queued / 16 running / 1714 errors / 34% coverage ] ****** [1715 done /1444 queued / 16 running / 1714 errors / 34% coverage ] ****** [1716 done /1445 queued / 16 running / 1715 errors / 34% coverage ] ****** [1716 done /1445 queued / 16 running / 1715 errors / 34% coverage ] ****** [1717 done /1446 queued / 16 running / 1716 errors / 34% coverage ] ****** [1717 done /1446 queued / 16 running / 1716 errors / 34% coverage ] ****** [1718 done /1446 queued / 16 running / 1717 errors / 34% coverage ] ****** [1718 done /1446 queued / 16 running / 1717 errors / 34% coverage ] ****** [1719 done /1447 queued / 16 running / 1718 errors / 34% coverage ] ****** [1719 done /1447 queued / 16 running / 1718 errors / 34% coverage ] ****** [1720 done /1448 queued / 16 running / 1719 errors / 34% coverage ] ****** [1720 done /1448 queued / 16 running / 1719 errors / 34% coverage ] ****** [1721 done /1448 queued / 16 running / 1720 errors / 34% coverage ] ****** [1721 done /1448 queued / 16 running / 1720 errors / 34% coverage ] ****** [1722 done /1450 queued / 16 running / 1721 errors / 34% coverage ] ****** [1722 done /1450 queued / 16 running / 1721 errors / 34% coverage ] ****** [1723 done /1451 queued / 16 running / 1722 errors / 34% coverage ] ****** [1723 done /1451 queued / 16 running / 1722 errors / 34% coverage ] ****** [1724 done /1453 queued / 16 running / 1723 errors / 34% coverage ] ****** [1724 done /1453 queued / 16 running / 1723 errors / 34% coverage ] ****** [1725 done /1453 queued / 16 running / 1724 errors / 34% coverage ] ****** [1725 done /1453 queued / 16 running / 1724 errors / 34% coverage ] ****** [1726 done /1454 queued / 16 running / 1725 errors / 34% coverage ] ****** [1726 done /1454 queued / 16 running / 1725 errors / 34% coverage ] ****** [1727 done /1456 queued / 16 running / 1726 errors / 34% coverage ] ****** [1727 done /1456 queued / 16 running / 1726 errors / 34% coverage ] ****** [1728 done /1457 queued / 16 running / 1727 errors / 34% coverage ] ****** [1728 done /1457 queued / 16 running / 1727 errors / 34% coverage ] ****** [1729 done /1460 queued / 16 running / 1728 errors / 34% coverage ] ****** [1729 done /1460 queued / 16 running / 1728 errors / 34% coverage ] ****** [1730 done /1462 queued / 16 running / 1729 errors / 34% coverage ] ****** [1730 done /1462 queued / 16 running / 1729 errors / 34% coverage ] ****** [1731 done /1463 queued / 16 running / 1730 errors / 34% coverage ] ****** [1731 done /1463 queued / 16 running / 1730 errors / 34% coverage ] ****** [1732 done /1466 queued / 16 running / 1731 errors / 34% coverage ] ****** [1732 done /1466 queued / 16 running / 1731 errors / 34% coverage ] ****** [1733 done /1467 queued / 16 running / 1732 errors / 34% coverage ] ****** [1733 done /1467 queued / 16 running / 1732 errors / 34% coverage ] ****** [1734 done /1468 queued / 16 running / 1733 errors / 34% coverage ] ****** [1734 done /1468 queued / 16 running / 1733 errors / 34% coverage ] ****** [1735 done /1470 queued / 16 running / 1734 errors / 34% coverage ] ****** [1735 done /1470 queued / 16 running / 1734 errors / 34% coverage ] ****** [1736 done /1469 queued / 16 running / 1735 errors / 34% coverage ] ****** [1736 done /1469 queued / 16 running / 1735 errors / 34% coverage ] ****** [1737 done /1471 queued / 16 running / 1736 errors / 34% coverage ] ****** [1737 done /1471 queued / 16 running / 1736 errors / 34% coverage ] ****** [1738 done /1471 queued / 16 running / 1737 errors / 34% coverage ] ****** [1738 done /1471 queued / 16 running / 1737 errors / 34% coverage ] ****** [1739 done /1473 queued / 16 running / 1738 errors / 34% coverage ] ****** [1739 done /1473 queued / 16 running / 1738 errors / 34% coverage ] ****** [1740 done /1474 queued / 16 running / 1739 errors / 34% coverage ] ****** [1740 done /1474 queued / 16 running / 1739 errors / 34% coverage ] ****** [1741 done /1478 queued / 16 running / 1740 errors / 34% coverage ] ****** [1741 done /1478 queued / 16 running / 1740 errors / 34% coverage ] ****** [1742 done /1480 queued / 16 running / 1741 errors / 34% coverage ] ****** [1742 done /1480 queued / 16 running / 1741 errors / 34% coverage ] ****** [1743 done /1486 queued / 16 running / 1742 errors / 34% coverage ] ****** [1743 done /1486 queued / 16 running / 1742 errors / 34% coverage ] ****** [1744 done /1487 queued / 16 running / 1743 errors / 34% coverage ] ****** [1744 done /1487 queued / 16 running / 1743 errors / 34% coverage ] ****** [1745 done /1486 queued / 16 running / 1744 errors / 34% coverage ] ****** [1745 done /1486 queued / 16 running / 1744 errors / 34% coverage ] ****** [1746 done /1486 queued / 16 running / 1745 errors / 34% coverage ] ****** [1746 done /1486 queued / 16 running / 1745 errors / 34% coverage ] ****** [1747 done /1487 queued / 16 running / 1746 errors / 34% coverage ] ****** [1747 done /1487 queued / 16 running / 1746 errors / 34% coverage ] ****** [1748 done /1486 queued / 16 running / 1747 errors / 34% coverage ] ****** [1748 done /1486 queued / 16 running / 1747 errors / 34% coverage ] ****** [1749 done /1485 queued / 16 running / 1748 errors / 34% coverage ] ****** [1749 done /1485 queued / 16 running / 1748 errors / 34% coverage ] ****** [1750 done /1484 queued / 16 running / 1749 errors / 34% coverage ] ****** [1750 done /1484 queued / 16 running / 1749 errors / 34% coverage ] ****** [1751 done /1484 queued / 16 running / 1750 errors / 34% coverage ] ****** [1751 done /1484 queued / 16 running / 1750 errors / 34% coverage ] ****** [1752 done /1485 queued / 16 running / 1751 errors / 34% coverage ] ****** [1752 done /1485 queued / 16 running / 1751 errors / 34% coverage ] ****** [1753 done /1486 queued / 16 running / 1752 errors / 34% coverage ] ****** [1753 done /1486 queued / 16 running / 1752 errors / 34% coverage ] ****** [1754 done /1487 queued / 16 running / 1753 errors / 34% coverage ] ****** [1754 done /1487 queued / 16 running / 1753 errors / 34% coverage ] ****** [1755 done /1488 queued / 16 running / 1754 errors / 34% coverage ] ****** [1755 done /1488 queued / 16 running / 1754 errors / 34% coverage ] ****** [1756 done /1490 queued / 16 running / 1755 errors / 34% coverage ] ****** [1756 done /1490 queued / 16 running / 1755 errors / 34% coverage ] ****** [1757 done /1492 queued / 16 running / 1756 errors / 34% coverage ] ****** [1757 done /1492 queued / 16 running / 1756 errors / 34% coverage ] ****** [1758 done /1492 queued / 16 running / 1757 errors / 34% coverage ] ****** [1758 done /1492 queued / 16 running / 1757 errors / 34% coverage ] ****** [1759 done /1497 queued / 16 running / 1758 errors / 34% coverage ] ****** [1759 done /1497 queued / 16 running / 1758 errors / 34% coverage ] ****** [1760 done /1498 queued / 16 running / 1759 errors / 34% coverage ] ****** [1760 done /1498 queued / 16 running / 1759 errors / 34% coverage ] ****** [1761 done /1500 queued / 16 running / 1760 errors / 34% coverage ] ****** [1761 done /1500 queued / 16 running / 1760 errors / 34% coverage ] ****** [1762 done /1502 queued / 16 running / 1761 errors / 34% coverage ] ****** [1762 done /1502 queued / 16 running / 1761 errors / 34% coverage ] ****** [1763 done /1505 queued / 16 running / 1762 errors / 34% coverage ] ****** [1763 done /1505 queued / 16 running / 1762 errors / 34% coverage ] ****** [1764 done /1506 queued / 16 running / 1763 errors / 34% coverage ] ****** [1764 done /1506 queued / 16 running / 1763 errors / 34% coverage ] ****** [1765 done /1505 queued / 16 running / 1764 errors / 34% coverage ] ****** [1765 done /1505 queued / 16 running / 1764 errors / 34% coverage ] ****** [1766 done /1504 queued / 16 running / 1765 errors / 34% coverage ] ****** [1766 done /1504 queued / 16 running / 1765 errors / 34% coverage ] ****** [1767 done /1506 queued / 16 running / 1766 errors / 34% coverage ] ****** [1767 done /1506 queued / 16 running / 1766 errors / 34% coverage ] ****** [1768 done /1508 queued / 16 running / 1767 errors / 34% coverage ] ****** [1768 done /1508 queued / 16 running / 1767 errors / 34% coverage ] ****** [1769 done /1510 queued / 16 running / 1768 errors / 34% coverage ] ****** [1769 done /1510 queued / 16 running / 1768 errors / 34% coverage ] ****** [1770 done /1514 queued / 16 running / 1769 errors / 34% coverage ] ****** [1770 done /1514 queued / 16 running / 1769 errors / 34% coverage ] ****** [1771 done /1513 queued / 16 running / 1770 errors / 34% coverage ] ****** [1771 done /1513 queued / 16 running / 1770 errors / 34% coverage ] ****** [1772 done /1512 queued / 16 running / 1771 errors / 34% coverage ] ****** [1772 done /1512 queued / 16 running / 1771 errors / 34% coverage ] ****** [1773 done /1511 queued / 16 running / 1772 errors / 34% coverage ] ****** [1773 done /1511 queued / 16 running / 1772 errors / 34% coverage ] ****** [1774 done /1512 queued / 16 running / 1773 errors / 34% coverage ] ****** [1774 done /1512 queued / 16 running / 1773 errors / 34% coverage ] ****** [1775 done /1513 queued / 16 running / 1774 errors / 34% coverage ] ****** [1775 done /1513 queued / 16 running / 1774 errors / 34% coverage ] ****** [1776 done /1514 queued / 16 running / 1775 errors / 34% coverage ] ****** [1776 done /1514 queued / 16 running / 1775 errors / 34% coverage ] ****** [1777 done /1516 queued / 16 running / 1776 errors / 34% coverage ] ****** [1777 done /1516 queued / 16 running / 1776 errors / 34% coverage ] ****** [1778 done /1517 queued / 16 running / 1777 errors / 34% coverage ] ****** [1778 done /1517 queued / 16 running / 1777 errors / 34% coverage ] ****** [1779 done /1519 queued / 16 running / 1778 errors / 34% coverage ] ****** [1779 done /1519 queued / 16 running / 1778 errors / 34% coverage ] ****** [1780 done /1520 queued / 16 running / 1779 errors / 34% coverage ] ****** [1780 done /1520 queued / 16 running / 1779 errors / 34% coverage ] ****** [1781 done /1521 queued / 16 running / 1780 errors / 34% coverage ] ****** [1781 done /1521 queued / 16 running / 1780 errors / 34% coverage ] ****** [1782 done /1521 queued / 16 running / 1781 errors / 34% coverage ] ****** [1782 done /1521 queued / 16 running / 1781 errors / 34% coverage ] ****** [1783 done /1522 queued / 16 running / 1782 errors / 34% coverage ] ****** [1783 done /1522 queued / 16 running / 1782 errors / 34% coverage ] ****** [1784 done /1522 queued / 16 running / 1783 errors / 34% coverage ] ****** [1784 done /1522 queued / 16 running / 1783 errors / 34% coverage ] ****** [1785 done /1523 queued / 16 running / 1784 errors / 34% coverage ] ****** [1785 done /1523 queued / 16 running / 1784 errors / 34% coverage ] ****** [1786 done /1522 queued / 16 running / 1785 errors / 34% coverage ] ****** [1786 done /1522 queued / 16 running / 1785 errors / 34% coverage ] ****** [1787 done /1524 queued / 16 running / 1786 errors / 34% coverage ] ****** [1787 done /1524 queued / 16 running / 1786 errors / 34% coverage ] ****** [1788 done /1524 queued / 16 running / 1787 errors / 34% coverage ] ****** [1788 done /1524 queued / 16 running / 1787 errors / 34% coverage ] ****** [1789 done /1525 queued / 16 running / 1788 errors / 34% coverage ] ****** [1789 done /1525 queued / 16 running / 1788 errors / 34% coverage ] ****** [1790 done /1525 queued / 16 running / 1789 errors / 34% coverage ] ****** [1790 done /1525 queued / 16 running / 1789 errors / 34% coverage ] ****** [1791 done /1528 queued / 16 running / 1790 errors / 34% coverage ] ****** [1791 done /1528 queued / 16 running / 1790 errors / 34% coverage ] ****** [1792 done /1530 queued / 16 running / 1791 errors / 34% coverage ] ****** [1792 done /1530 queued / 16 running / 1791 errors / 34% coverage ] ****** [1793 done /1533 queued / 16 running / 1792 errors / 34% coverage ] ****** [1793 done /1533 queued / 16 running / 1792 errors / 34% coverage ] ****** [1794 done /1535 queued / 16 running / 1793 errors / 34% coverage ] ****** [1794 done /1535 queued / 16 running / 1793 errors / 34% coverage ] ****** [1795 done /1535 queued / 16 running / 1794 errors / 34% coverage ] ****** [1795 done /1535 queued / 16 running / 1794 errors / 34% coverage ] ****** [1796 done /1538 queued / 16 running / 1795 errors / 34% coverage ] ****** [1796 done /1538 queued / 16 running / 1795 errors / 34% coverage ] ****** [1797 done /1540 queued / 16 running / 1796 errors / 34% coverage ] ****** [1797 done /1540 queued / 16 running / 1796 errors / 34% coverage ] ****** [1798 done /1542 queued / 16 running / 1797 errors / 34% coverage ] ****** [1798 done /1542 queued / 16 running / 1797 errors / 34% coverage ] ****** [1799 done /1541 queued / 16 running / 1798 errors / 34% coverage ] ****** [1799 done /1541 queued / 16 running / 1798 errors / 34% coverage ] ****** [1800 done /1543 queued / 16 running / 1799 errors / 34% coverage ] ****** [1800 done /1543 queued / 16 running / 1799 errors / 34% coverage ] ****** [1801 done /1542 queued / 16 running / 1800 errors / 34% coverage ] ****** [1801 done /1542 queued / 16 running / 1800 errors / 34% coverage ] ****** [1802 done /1541 queued / 16 running / 1801 errors / 34% coverage ] ****** [1802 done /1541 queued / 16 running / 1801 errors / 34% coverage ] ****** [1803 done /1542 queued / 16 running / 1802 errors / 34% coverage ] ****** [1803 done /1542 queued / 16 running / 1802 errors / 34% coverage ] ****** [1804 done /1543 queued / 16 running / 1803 errors / 34% coverage ] ****** [1804 done /1543 queued / 16 running / 1803 errors / 34% coverage ] ****** [1805 done /1545 queued / 16 running / 1804 errors / 34% coverage ] ****** [1805 done /1545 queued / 16 running / 1804 errors / 34% coverage ] ****** [1806 done /1544 queued / 16 running / 1805 errors / 34% coverage ] ****** [1806 done /1544 queued / 16 running / 1805 errors / 34% coverage ] ****** [1807 done /1544 queued / 16 running / 1806 errors / 34% coverage ] ****** [1807 done /1544 queued / 16 running / 1806 errors / 34% coverage ] ****** [1808 done /1547 queued / 16 running / 1807 errors / 34% coverage ] ****** [1808 done /1547 queued / 16 running / 1807 errors / 34% coverage ] ****** [1809 done /1549 queued / 16 running / 1808 errors / 34% coverage ] ****** [1809 done /1549 queued / 16 running / 1808 errors / 34% coverage ] ****** [1810 done /1548 queued / 16 running / 1809 errors / 34% coverage ] ****** [1810 done /1548 queued / 16 running / 1809 errors / 34% coverage ] ****** [1811 done /1549 queued / 16 running / 1810 errors / 34% coverage ] ****** [1811 done /1549 queued / 16 running / 1810 errors / 34% coverage ] ****** [1812 done /1548 queued / 16 running / 1811 errors / 34% coverage ] ****** [1812 done /1548 queued / 16 running / 1811 errors / 34% coverage ] ****** [1813 done /1547 queued / 16 running / 1812 errors / 34% coverage ] ****** [1813 done /1547 queued / 16 running / 1812 errors / 34% coverage ] ****** [1814 done /1551 queued / 16 running / 1813 errors / 34% coverage ] ****** [1814 done /1551 queued / 16 running / 1813 errors / 34% coverage ] ****** [1815 done /1551 queued / 16 running / 1814 errors / 34% coverage ] ****** [1815 done /1551 queued / 16 running / 1814 errors / 34% coverage ] ****** [1816 done /1554 queued / 16 running / 1815 errors / 34% coverage ] ****** [1816 done /1554 queued / 16 running / 1815 errors / 34% coverage ] ****** [1817 done /1555 queued / 16 running / 1816 errors / 34% coverage ] ****** [1817 done /1555 queued / 16 running / 1816 errors / 34% coverage ] ****** [1818 done /1554 queued / 16 running / 1817 errors / 34% coverage ] ****** [1818 done /1554 queued / 16 running / 1817 errors / 34% coverage ] ****** [1819 done /1559 queued / 16 running / 1818 errors / 34% coverage ] ****** [1819 done /1559 queued / 16 running / 1818 errors / 34% coverage ] ****** [1820 done /1562 queued / 16 running / 1819 errors / 34% coverage ] ****** [1820 done /1562 queued / 16 running / 1819 errors / 34% coverage ] ****** [1821 done /1563 queued / 16 running / 1820 errors / 34% coverage ] ****** [1821 done /1563 queued / 16 running / 1820 errors / 34% coverage ] ****** [1822 done /1562 queued / 16 running / 1821 errors / 34% coverage ] ****** [1822 done /1562 queued / 16 running / 1821 errors / 34% coverage ] ****** [1823 done /1563 queued / 16 running / 1822 errors / 34% coverage ] ****** [1823 done /1563 queued / 16 running / 1822 errors / 34% coverage ] ****** [1824 done /1562 queued / 16 running / 1823 errors / 34% coverage ] ****** [1824 done /1562 queued / 16 running / 1823 errors / 34% coverage ] ****** [1825 done /1561 queued / 16 running / 1824 errors / 34% coverage ] ****** [1825 done /1561 queued / 16 running / 1824 errors / 34% coverage ] ****** [1826 done /1560 queued / 16 running / 1825 errors / 34% coverage ] ****** [1826 done /1560 queued / 16 running / 1825 errors / 34% coverage ] ****** [1827 done /1562 queued / 16 running / 1826 errors / 34% coverage ] ****** [1827 done /1562 queued / 16 running / 1826 errors / 34% coverage ] ****** [1828 done /1561 queued / 16 running / 1827 errors / 34% coverage ] ****** [1828 done /1561 queued / 16 running / 1827 errors / 34% coverage ] ****** [1829 done /1562 queued / 16 running / 1828 errors / 34% coverage ] ****** [1829 done /1562 queued / 16 running / 1828 errors / 34% coverage ] ****** [1830 done /1562 queued / 16 running / 1829 errors / 34% coverage ] ****** [1830 done /1562 queued / 16 running / 1829 errors / 34% coverage ] ****** [1831 done /1561 queued / 16 running / 1830 errors / 34% coverage ] ****** [1831 done /1561 queued / 16 running / 1830 errors / 34% coverage ] ****** [1832 done /1560 queued / 16 running / 1831 errors / 34% coverage ] ****** [1832 done /1560 queued / 16 running / 1831 errors / 34% coverage ] ****** [1833 done /1562 queued / 16 running / 1832 errors / 34% coverage ] ****** [1833 done /1562 queued / 16 running / 1832 errors / 34% coverage ] ****** [1834 done /1563 queued / 16 running / 1833 errors / 34% coverage ] ****** [1834 done /1563 queued / 16 running / 1833 errors / 34% coverage ] ****** [1835 done /1564 queued / 16 running / 1834 errors / 34% coverage ] ****** [1835 done /1564 queued / 16 running / 1834 errors / 34% coverage ] ****** [1836 done /1566 queued / 16 running / 1835 errors / 34% coverage ] ****** [1836 done /1566 queued / 16 running / 1835 errors / 34% coverage ] ****** [1837 done /1565 queued / 16 running / 1836 errors / 34% coverage ] ****** [1837 done /1565 queued / 16 running / 1836 errors / 34% coverage ] ****** [1838 done /1564 queued / 16 running / 1837 errors / 34% coverage ] ****** [1838 done /1564 queued / 16 running / 1837 errors / 34% coverage ] ****** [1839 done /1565 queued / 16 running / 1838 errors / 34% coverage ] ****** [1839 done /1565 queued / 16 running / 1838 errors / 34% coverage ] ****** [1840 done /1565 queued / 16 running / 1839 errors / 34% coverage ] ****** [1840 done /1565 queued / 16 running / 1839 errors / 34% coverage ] ****** [1841 done /1567 queued / 16 running / 1840 errors / 34% coverage ] ****** [1841 done /1567 queued / 16 running / 1840 errors / 34% coverage ] ****** [1842 done /1566 queued / 16 running / 1841 errors / 34% coverage ] ****** [1842 done /1566 queued / 16 running / 1841 errors / 34% coverage ] ****** [1843 done /1569 queued / 16 running / 1842 errors / 34% coverage ] ****** [1843 done /1569 queued / 16 running / 1842 errors / 34% coverage ] ****** [1844 done /1568 queued / 16 running / 1843 errors / 34% coverage ] ****** [1844 done /1568 queued / 16 running / 1843 errors / 34% coverage ] ****** [1845 done /1570 queued / 16 running / 1844 errors / 34% coverage ] ****** [1845 done /1570 queued / 16 running / 1844 errors / 34% coverage ] ****** [1846 done /1571 queued / 16 running / 1845 errors / 34% coverage ] ****** [1846 done /1571 queued / 16 running / 1845 errors / 34% coverage ] ****** [1847 done /1570 queued / 16 running / 1846 errors / 34% coverage ] ****** [1847 done /1570 queued / 16 running / 1846 errors / 34% coverage ] ****** [1848 done /1570 queued / 16 running / 1847 errors / 34% coverage ] ****** [1848 done /1570 queued / 16 running / 1847 errors / 34% coverage ] ****** [1849 done /1574 queued / 16 running / 1848 errors / 34% coverage ] ****** [1849 done /1574 queued / 16 running / 1848 errors / 34% coverage ] ****** [1850 done /1575 queued / 16 running / 1849 errors / 34% coverage ] ****** [1850 done /1575 queued / 16 running / 1849 errors / 34% coverage ] ****** [1851 done /1576 queued / 16 running / 1850 errors / 34% coverage ] ****** [1851 done /1576 queued / 16 running / 1850 errors / 34% coverage ] ****** [1852 done /1575 queued / 16 running / 1851 errors / 34% coverage ] ****** [1852 done /1575 queued / 16 running / 1851 errors / 34% coverage ] ****** [1853 done /1574 queued / 16 running / 1852 errors / 34% coverage ] ****** [1853 done /1574 queued / 16 running / 1852 errors / 34% coverage ] ****** [1854 done /1577 queued / 16 running / 1853 errors / 34% coverage ] ****** [1854 done /1577 queued / 16 running / 1853 errors / 34% coverage ] ****** [1855 done /1577 queued / 16 running / 1854 errors / 34% coverage ] ****** [1855 done /1577 queued / 16 running / 1854 errors / 34% coverage ] ****** [1856 done /1578 queued / 16 running / 1855 errors / 34% coverage ] ****** [1856 done /1578 queued / 16 running / 1855 errors / 34% coverage ] ****** [1857 done /1577 queued / 16 running / 1856 errors / 34% coverage ] ****** [1857 done /1577 queued / 16 running / 1856 errors / 34% coverage ] ****** [1858 done /1579 queued / 16 running / 1857 errors / 34% coverage ] ****** [1858 done /1579 queued / 16 running / 1857 errors / 34% coverage ] ****** [1859 done /1580 queued / 16 running / 1858 errors / 34% coverage ] ****** [1859 done /1580 queued / 16 running / 1858 errors / 34% coverage ] ****** [1860 done /1582 queued / 16 running / 1859 errors / 34% coverage ] ****** [1860 done /1582 queued / 16 running / 1859 errors / 34% coverage ] ****** [1861 done /1581 queued / 16 running / 1860 errors / 34% coverage ] ****** [1861 done /1581 queued / 16 running / 1860 errors / 34% coverage ] ****** [1862 done /1580 queued / 16 running / 1861 errors / 34% coverage ] ****** [1862 done /1580 queued / 16 running / 1861 errors / 34% coverage ] ****** [1863 done /1579 queued / 16 running / 1862 errors / 34% coverage ] ****** [1863 done /1579 queued / 16 running / 1862 errors / 34% coverage ] ****** [1864 done /1580 queued / 16 running / 1863 errors / 34% coverage ] ****** [1864 done /1580 queued / 16 running / 1863 errors / 34% coverage ] ****** [1865 done /1584 queued / 16 running / 1864 errors / 34% coverage ] ****** [1865 done /1584 queued / 16 running / 1864 errors / 34% coverage ] ****** [1866 done /1587 queued / 16 running / 1865 errors / 34% coverage ] ****** [1866 done /1587 queued / 16 running / 1865 errors / 34% coverage ] ****** [1867 done /1589 queued / 16 running / 1866 errors / 34% coverage ] ****** [1867 done /1589 queued / 16 running / 1866 errors / 34% coverage ] ****** [1868 done /1591 queued / 16 running / 1867 errors / 34% coverage ] ****** [1868 done /1591 queued / 16 running / 1867 errors / 34% coverage ] ****** [1869 done /1593 queued / 16 running / 1868 errors / 34% coverage ] ****** [1869 done /1593 queued / 16 running / 1868 errors / 34% coverage ] ****** [1870 done /1594 queued / 16 running / 1869 errors / 34% coverage ] ****** [1870 done /1594 queued / 16 running / 1869 errors / 34% coverage ] ****** [1871 done /1593 queued / 16 running / 1870 errors / 34% coverage ] ****** [1871 done /1593 queued / 16 running / 1870 errors / 34% coverage ] ****** [1872 done /1593 queued / 16 running / 1871 errors / 34% coverage ] ****** [1872 done /1593 queued / 16 running / 1871 errors / 34% coverage ] ****** [1873 done /1592 queued / 16 running / 1872 errors / 34% coverage ] ****** [1873 done /1592 queued / 16 running / 1872 errors / 34% coverage ] ****** [1874 done /1591 queued / 16 running / 1873 errors / 34% coverage ] ****** [1874 done /1591 queued / 16 running / 1873 errors / 34% coverage ] ****** [1875 done /1593 queued / 16 running / 1874 errors / 34% coverage ] ****** [1875 done /1593 queued / 16 running / 1874 errors / 34% coverage ] ****** [1876 done /1594 queued / 16 running / 1875 errors / 34% coverage ] ****** [1876 done /1594 queued / 16 running / 1875 errors / 34% coverage ] ****** [1877 done /1596 queued / 16 running / 1876 errors / 34% coverage ] ****** [1877 done /1596 queued / 16 running / 1876 errors / 34% coverage ] ****** [1878 done /1597 queued / 16 running / 1877 errors / 34% coverage ] ****** [1878 done /1597 queued / 16 running / 1877 errors / 34% coverage ] ****** [1879 done /1600 queued / 16 running / 1878 errors / 34% coverage ] ****** [1879 done /1600 queued / 16 running / 1878 errors / 34% coverage ] ****** [1880 done /1602 queued / 16 running / 1879 errors / 34% coverage ] ****** [1880 done /1602 queued / 16 running / 1879 errors / 34% coverage ] ****** [1881 done /1603 queued / 16 running / 1880 errors / 34% coverage ] ****** [1881 done /1603 queued / 16 running / 1880 errors / 34% coverage ] ****** [1882 done /1604 queued / 16 running / 1881 errors / 34% coverage ] ****** [1882 done /1604 queued / 16 running / 1881 errors / 34% coverage ] ****** [1883 done /1604 queued / 16 running / 1882 errors / 34% coverage ] ****** [1883 done /1604 queued / 16 running / 1882 errors / 34% coverage ] ****** [1884 done /1606 queued / 16 running / 1883 errors / 34% coverage ] ****** [1884 done /1606 queued / 16 running / 1883 errors / 34% coverage ] ****** [1885 done /1606 queued / 16 running / 1884 errors / 34% coverage ] ****** [1885 done /1606 queued / 16 running / 1884 errors / 34% coverage ] ****** [1886 done /1608 queued / 16 running / 1885 errors / 34% coverage ] ****** [1886 done /1608 queued / 16 running / 1885 errors / 34% coverage ] ****** [1887 done /1609 queued / 16 running / 1886 errors / 34% coverage ] ****** [1887 done /1609 queued / 16 running / 1886 errors / 34% coverage ] ****** [1888 done /1608 queued / 16 running / 1887 errors / 34% coverage ] ****** [1888 done /1608 queued / 16 running / 1887 errors / 34% coverage ] ****** [1889 done /1607 queued / 16 running / 1888 errors / 34% coverage ] ****** [1889 done /1607 queued / 16 running / 1888 errors / 34% coverage ] ****** [1890 done /1608 queued / 16 running / 1889 errors / 34% coverage ] ****** [1890 done /1608 queued / 16 running / 1889 errors / 34% coverage ] ****** [1891 done /1608 queued / 16 running / 1890 errors / 34% coverage ] ****** [1891 done /1608 queued / 16 running / 1890 errors / 34% coverage ] ****** [1892 done /1607 queued / 16 running / 1891 errors / 34% coverage ] ****** [1892 done /1607 queued / 16 running / 1891 errors / 34% coverage ] ****** [1893 done /1608 queued / 16 running / 1892 errors / 34% coverage ] ****** [1893 done /1608 queued / 16 running / 1892 errors / 34% coverage ] ****** [1894 done /1608 queued / 16 running / 1893 errors / 34% coverage ] ****** [1894 done /1608 queued / 16 running / 1893 errors / 34% coverage ] ****** [1895 done /1609 queued / 16 running / 1894 errors / 34% coverage ] ****** [1895 done /1609 queued / 16 running / 1894 errors / 34% coverage ] ****** [1896 done /1609 queued / 16 running / 1895 errors / 34% coverage ] ****** [1896 done /1609 queued / 16 running / 1895 errors / 34% coverage ] ****** [1897 done /1611 queued / 16 running / 1896 errors / 34% coverage ] ****** [1897 done /1611 queued / 16 running / 1896 errors / 34% coverage ] ****** [1898 done /1611 queued / 16 running / 1897 errors / 34% coverage ] ****** [1898 done /1611 queued / 16 running / 1897 errors / 34% coverage ] ****** [1899 done /1611 queued / 16 running / 1898 errors / 34% coverage ] ****** [1899 done /1611 queued / 16 running / 1898 errors / 34% coverage ] ****** [1900 done /1613 queued / 16 running / 1899 errors / 34% coverage ] ****** [1900 done /1613 queued / 16 running / 1899 errors / 34% coverage ] ****** [1901 done /1612 queued / 16 running / 1900 errors / 34% coverage ] ****** [1901 done /1612 queued / 16 running / 1900 errors / 34% coverage ] ****** [1902 done /1611 queued / 16 running / 1901 errors / 34% coverage ] ****** [1902 done /1611 queued / 16 running / 1901 errors / 34% coverage ] ****** [1903 done /1613 queued / 16 running / 1902 errors / 34% coverage ] ****** [1903 done /1613 queued / 16 running / 1902 errors / 34% coverage ] ****** [1904 done /1615 queued / 16 running / 1903 errors / 34% coverage ] ****** [1904 done /1615 queued / 16 running / 1903 errors / 34% coverage ] ****** [1905 done /1617 queued / 16 running / 1904 errors / 34% coverage ] ****** [1905 done /1617 queued / 16 running / 1904 errors / 34% coverage ] ****** [1906 done /1620 queued / 16 running / 1905 errors / 34% coverage ] ****** [1906 done /1620 queued / 16 running / 1905 errors / 34% coverage ] ****** [1907 done /1619 queued / 16 running / 1906 errors / 34% coverage ] ****** [1907 done /1619 queued / 16 running / 1906 errors / 34% coverage ] ****** [1908 done /1619 queued / 16 running / 1907 errors / 34% coverage ] ****** [1908 done /1619 queued / 16 running / 1907 errors / 34% coverage ] ****** [1909 done /1620 queued / 16 running / 1908 errors / 34% coverage ] ****** [1909 done /1620 queued / 16 running / 1908 errors / 34% coverage ] ****** [1910 done /1623 queued / 16 running / 1909 errors / 34% coverage ] ****** [1910 done /1623 queued / 16 running / 1909 errors / 34% coverage ] ****** [1911 done /1625 queued / 16 running / 1910 errors / 34% coverage ] ****** [1911 done /1625 queued / 16 running / 1910 errors / 34% coverage ] ****** [1912 done /1627 queued / 16 running / 1911 errors / 34% coverage ] ****** [1912 done /1627 queued / 16 running / 1911 errors / 34% coverage ] ****** [1913 done /1631 queued / 16 running / 1912 errors / 34% coverage ] ****** [1913 done /1631 queued / 16 running / 1912 errors / 34% coverage ] ****** [1914 done /1634 queued / 16 running / 1913 errors / 34% coverage ] ****** [1914 done /1634 queued / 16 running / 1913 errors / 34% coverage ] ****** [1915 done /1633 queued / 16 running / 1914 errors / 34% coverage ] ****** [1915 done /1633 queued / 16 running / 1914 errors / 34% coverage ] ****** [1916 done /1637 queued / 16 running / 1915 errors / 34% coverage ] ****** [1916 done /1637 queued / 16 running / 1915 errors / 34% coverage ] ****** [1917 done /1639 queued / 16 running / 1916 errors / 34% coverage ] ****** [1917 done /1639 queued / 16 running / 1916 errors / 34% coverage ] ****** [1918 done /1642 queued / 16 running / 1917 errors / 34% coverage ] ****** [1918 done /1642 queued / 16 running / 1917 errors / 34% coverage ] ****** [1919 done /1643 queued / 16 running / 1918 errors / 34% coverage ] ****** [1919 done /1643 queued / 16 running / 1918 errors / 34% coverage ] ****** [1920 done /1642 queued / 16 running / 1919 errors / 34% coverage ] ****** [1920 done /1642 queued / 16 running / 1919 errors / 34% coverage ] ****** [1921 done /1642 queued / 16 running / 1920 errors / 34% coverage ] ****** [1921 done /1642 queued / 16 running / 1920 errors / 34% coverage ] ****** [1922 done /1643 queued / 16 running / 1921 errors / 34% coverage ] ****** [1922 done /1643 queued / 16 running / 1921 errors / 34% coverage ] ****** [1923 done /1642 queued / 16 running / 1922 errors / 34% coverage ] ****** [1923 done /1642 queued / 16 running / 1922 errors / 34% coverage ] ****** [1924 done /1643 queued / 16 running / 1923 errors / 34% coverage ] ****** [1924 done /1643 queued / 16 running / 1923 errors / 34% coverage ] ****** [1925 done /1643 queued / 16 running / 1924 errors / 34% coverage ] ****** [1925 done /1643 queued / 16 running / 1924 errors / 34% coverage ] ****** [1926 done /1642 queued / 16 running / 1925 errors / 34% coverage ] ****** [1926 done /1642 queued / 16 running / 1925 errors / 34% coverage ] ****** [1927 done /1642 queued / 16 running / 1926 errors / 34% coverage ] ****** [1927 done /1642 queued / 16 running / 1926 errors / 34% coverage ] ****** [1928 done /1642 queued / 16 running / 1927 errors / 34% coverage ] ****** [1928 done /1642 queued / 16 running / 1927 errors / 34% coverage ] ****** [1929 done /1643 queued / 16 running / 1928 errors / 34% coverage ] ****** [1929 done /1643 queued / 16 running / 1928 errors / 34% coverage ] ****** [1930 done /1644 queued / 16 running / 1929 errors / 34% coverage ] ****** [1930 done /1644 queued / 16 running / 1929 errors / 34% coverage ] ****** [1931 done /1645 queued / 16 running / 1930 errors / 34% coverage ] ****** [1931 done /1645 queued / 16 running / 1930 errors / 34% coverage ] ****** [1932 done /1645 queued / 16 running / 1931 errors / 34% coverage ] ****** [1932 done /1645 queued / 16 running / 1931 errors / 34% coverage ] ****** [1933 done /1645 queued / 16 running / 1932 errors / 34% coverage ] ****** [1933 done /1645 queued / 16 running / 1932 errors / 34% coverage ] ****** [1934 done /1645 queued / 16 running / 1933 errors / 34% coverage ] ****** [1934 done /1645 queued / 16 running / 1933 errors / 34% coverage ] ****** [1935 done /1645 queued / 16 running / 1934 errors / 34% coverage ] ****** [1935 done /1645 queued / 16 running / 1934 errors / 34% coverage ] ****** [1936 done /1644 queued / 16 running / 1935 errors / 34% coverage ] ****** [1936 done /1644 queued / 16 running / 1935 errors / 34% coverage ] ****** [1937 done /1645 queued / 16 running / 1936 errors / 34% coverage ] ****** [1937 done /1645 queued / 16 running / 1936 errors / 34% coverage ] ****** [1938 done /1646 queued / 16 running / 1937 errors / 34% coverage ] ****** [1938 done /1646 queued / 16 running / 1937 errors / 34% coverage ] ****** [1939 done /1646 queued / 16 running / 1938 errors / 34% coverage ] ****** [1939 done /1646 queued / 16 running / 1938 errors / 34% coverage ] ****** [1940 done /1645 queued / 16 running / 1939 errors / 34% coverage ] ****** [1940 done /1645 queued / 16 running / 1939 errors / 34% coverage ] ****** [1941 done /1645 queued / 16 running / 1940 errors / 34% coverage ] ****** [1941 done /1645 queued / 16 running / 1940 errors / 34% coverage ] ****** [1942 done /1644 queued / 16 running / 1941 errors / 34% coverage ] ****** [1942 done /1644 queued / 16 running / 1941 errors / 34% coverage ] ****** [1943 done /1644 queued / 16 running / 1942 errors / 34% coverage ] ****** [1943 done /1644 queued / 16 running / 1942 errors / 34% coverage ] ****** [1944 done /1646 queued / 16 running / 1943 errors / 34% coverage ] ****** [1944 done /1646 queued / 16 running / 1943 errors / 34% coverage ] ****** [1945 done /1646 queued / 16 running / 1944 errors / 34% coverage ] ****** [1945 done /1646 queued / 16 running / 1944 errors / 34% coverage ] ****** [1946 done /1645 queued / 16 running / 1945 errors / 34% coverage ] ****** [1946 done /1645 queued / 16 running / 1945 errors / 34% coverage ] ****** [1947 done /1644 queued / 16 running / 1946 errors / 34% coverage ] ****** [1947 done /1644 queued / 16 running / 1946 errors / 34% coverage ] ****** [1948 done /1644 queued / 16 running / 1947 errors / 34% coverage ] ****** [1948 done /1644 queued / 16 running / 1947 errors / 34% coverage ] ****** [1949 done /1644 queued / 16 running / 1948 errors / 34% coverage ] ****** [1949 done /1644 queued / 16 running / 1948 errors / 34% coverage ] ****** [1950 done /1643 queued / 16 running / 1949 errors / 34% coverage ] ****** [1950 done /1643 queued / 16 running / 1949 errors / 34% coverage ] ****** [1951 done /1645 queued / 16 running / 1950 errors / 34% coverage ] ****** [1951 done /1645 queued / 16 running / 1950 errors / 34% coverage ] ****** [1952 done /1644 queued / 16 running / 1951 errors / 34% coverage ] ****** [1952 done /1644 queued / 16 running / 1951 errors / 34% coverage ] ****** [1953 done /1646 queued / 16 running / 1952 errors / 34% coverage ] ****** [1953 done /1646 queued / 16 running / 1952 errors / 34% coverage ] ****** [1954 done /1647 queued / 16 running / 1953 errors / 34% coverage ] ****** [1954 done /1647 queued / 16 running / 1953 errors / 34% coverage ] ****** [1955 done /1651 queued / 16 running / 1954 errors / 34% coverage ] ****** [1955 done /1651 queued / 16 running / 1954 errors / 34% coverage ] ****** [1956 done /1652 queued / 16 running / 1955 errors / 34% coverage ] ****** [1956 done /1652 queued / 16 running / 1955 errors / 34% coverage ] ****** [1957 done /1653 queued / 16 running / 1956 errors / 34% coverage ] ****** [1957 done /1653 queued / 16 running / 1956 errors / 34% coverage ] ****** [1958 done /1652 queued / 16 running / 1957 errors / 34% coverage ] ****** [1958 done /1652 queued / 16 running / 1957 errors / 34% coverage ] ****** [1959 done /1654 queued / 16 running / 1958 errors / 34% coverage ] ****** [1959 done /1654 queued / 16 running / 1958 errors / 34% coverage ] ****** [1960 done /1655 queued / 16 running / 1959 errors / 34% coverage ] ****** [1960 done /1655 queued / 16 running / 1959 errors / 34% coverage ] ****** [1961 done /1659 queued / 16 running / 1960 errors / 34% coverage ] ****** [1961 done /1659 queued / 16 running / 1960 errors / 34% coverage ] ****** [1962 done /1660 queued / 16 running / 1961 errors / 34% coverage ] ****** [1962 done /1660 queued / 16 running / 1961 errors / 34% coverage ] ****** [1963 done /1659 queued / 16 running / 1962 errors / 34% coverage ] ****** [1963 done /1659 queued / 16 running / 1962 errors / 34% coverage ] ****** [1964 done /1660 queued / 16 running / 1963 errors / 34% coverage ] ****** [1964 done /1660 queued / 16 running / 1963 errors / 34% coverage ] ****** [1965 done /1659 queued / 16 running / 1964 errors / 34% coverage ] ****** [1965 done /1659 queued / 16 running / 1964 errors / 34% coverage ] ****** [1966 done /1659 queued / 16 running / 1965 errors / 34% coverage ] ****** [1966 done /1659 queued / 16 running / 1965 errors / 34% coverage ] ****** [1967 done /1663 queued / 16 running / 1966 errors / 34% coverage ] ****** [1967 done /1663 queued / 16 running / 1966 errors / 34% coverage ] ****** [1968 done /1664 queued / 16 running / 1967 errors / 34% coverage ] ****** [1968 done /1664 queued / 16 running / 1967 errors / 34% coverage ] ****** [1969 done /1666 queued / 16 running / 1968 errors / 34% coverage ] ****** [1969 done /1666 queued / 16 running / 1968 errors / 34% coverage ] ****** [1970 done /1665 queued / 16 running / 1969 errors / 34% coverage ] ****** [1970 done /1665 queued / 16 running / 1969 errors / 34% coverage ] ****** [1971 done /1666 queued / 16 running / 1970 errors / 34% coverage ] ****** [1971 done /1666 queued / 16 running / 1970 errors / 34% coverage ] ****** [1972 done /1666 queued / 16 running / 1971 errors / 34% coverage ] ****** [1972 done /1666 queued / 16 running / 1971 errors / 34% coverage ] ****** [1973 done /1666 queued / 16 running / 1972 errors / 34% coverage ] ****** [1973 done /1666 queued / 16 running / 1972 errors / 34% coverage ] ****** [1974 done /1668 queued / 16 running / 1973 errors / 34% coverage ] ****** [1974 done /1668 queued / 16 running / 1973 errors / 34% coverage ] ****** [1975 done /1669 queued / 16 running / 1974 errors / 34% coverage ] ****** [1975 done /1669 queued / 16 running / 1974 errors / 34% coverage ] ****** [1976 done /1673 queued / 16 running / 1975 errors / 34% coverage ] ****** [1976 done /1673 queued / 16 running / 1975 errors / 34% coverage ] ****** [1977 done /1673 queued / 16 running / 1976 errors / 34% coverage ] ****** [1977 done /1673 queued / 16 running / 1976 errors / 34% coverage ] ****** [1978 done /1675 queued / 16 running / 1977 errors / 34% coverage ] ****** [1978 done /1675 queued / 16 running / 1977 errors / 34% coverage ] ****** [1979 done /1674 queued / 16 running / 1978 errors / 34% coverage ] ****** [1979 done /1674 queued / 16 running / 1978 errors / 34% coverage ] ****** [1980 done /1673 queued / 16 running / 1979 errors / 34% coverage ] ****** [1980 done /1673 queued / 16 running / 1979 errors / 34% coverage ] ****** [1981 done /1673 queued / 16 running / 1980 errors / 34% coverage ] ****** [1981 done /1673 queued / 16 running / 1980 errors / 34% coverage ] ****** [1982 done /1675 queued / 16 running / 1981 errors / 34% coverage ] ****** [1982 done /1675 queued / 16 running / 1981 errors / 34% coverage ] ****** [1983 done /1678 queued / 16 running / 1982 errors / 34% coverage ] ****** [1983 done /1678 queued / 16 running / 1982 errors / 34% coverage ] ****** [1984 done /1677 queued / 16 running / 1983 errors / 34% coverage ] ****** [1984 done /1677 queued / 16 running / 1983 errors / 34% coverage ] ****** [1985 done /1680 queued / 16 running / 1984 errors / 34% coverage ] ****** [1985 done /1680 queued / 16 running / 1984 errors / 34% coverage ] ****** [1986 done /1680 queued / 16 running / 1985 errors / 34% coverage ] ****** [1986 done /1680 queued / 16 running / 1985 errors / 34% coverage ] ****** [1987 done /1679 queued / 16 running / 1986 errors / 34% coverage ] ****** [1987 done /1679 queued / 16 running / 1986 errors / 34% coverage ] ****** [1988 done /1679 queued / 16 running / 1987 errors / 34% coverage ] ****** [1988 done /1679 queued / 16 running / 1987 errors / 34% coverage ] ****** [1989 done /1679 queued / 16 running / 1988 errors / 34% coverage ] ****** [1989 done /1679 queued / 16 running / 1988 errors / 34% coverage ] ****** [1990 done /1680 queued / 16 running / 1989 errors / 34% coverage ] ****** [1990 done /1680 queued / 16 running / 1989 errors / 34% coverage ] ****** [1991 done /1679 queued / 16 running / 1990 errors / 34% coverage ] ****** [1991 done /1679 queued / 16 running / 1990 errors / 34% coverage ] ****** [1992 done /1680 queued / 16 running / 1991 errors / 34% coverage ] ****** [1992 done /1680 queued / 16 running / 1991 errors / 34% coverage ] ****** [1993 done /1681 queued / 16 running / 1992 errors / 34% coverage ] ****** [1993 done /1681 queued / 16 running / 1992 errors / 34% coverage ] ****** [1994 done /1681 queued / 16 running / 1993 errors / 34% coverage ] ****** [1994 done /1681 queued / 16 running / 1993 errors / 34% coverage ] ****** [1995 done /1682 queued / 16 running / 1994 errors / 34% coverage ] ****** [1995 done /1682 queued / 16 running / 1994 errors / 34% coverage ] ****** [1996 done /1681 queued / 16 running / 1995 errors / 34% coverage ] ****** [1996 done /1681 queued / 16 running / 1995 errors / 34% coverage ] ****** [1997 done /1681 queued / 16 running / 1996 errors / 34% coverage ] ****** [1997 done /1681 queued / 16 running / 1996 errors / 34% coverage ] ****** [1998 done /1683 queued / 16 running / 1997 errors / 34% coverage ] ****** [1998 done /1683 queued / 16 running / 1997 errors / 34% coverage ] ****** [1999 done /1685 queued / 16 running / 1998 errors / 34% coverage ] ****** [1999 done /1685 queued / 16 running / 1998 errors / 34% coverage ] ****** [2000 done /1684 queued / 16 running / 1999 errors / 34% coverage ] ****** [2000 done /1684 queued / 16 running / 1999 errors / 34% coverage ] ****** [2001 done /1687 queued / 16 running / 2000 errors / 34% coverage ] ****** [2001 done /1687 queued / 16 running / 2000 errors / 34% coverage ] ****** [2002 done /1686 queued / 16 running / 2001 errors / 34% coverage ] ****** [2002 done /1686 queued / 16 running / 2001 errors / 34% coverage ] ****** [2003 done /1688 queued / 16 running / 2002 errors / 34% coverage ] ****** [2003 done /1688 queued / 16 running / 2002 errors / 34% coverage ] ****** [2004 done /1688 queued / 16 running / 2003 errors / 34% coverage ] ****** [2004 done /1688 queued / 16 running / 2003 errors / 34% coverage ] ****** [2005 done /1691 queued / 16 running / 2004 errors / 34% coverage ] ****** [2005 done /1691 queued / 16 running / 2004 errors / 34% coverage ] ****** [2006 done /1693 queued / 16 running / 2005 errors / 34% coverage ] ****** [2006 done /1693 queued / 16 running / 2005 errors / 34% coverage ] ****** [2007 done /1696 queued / 16 running / 2006 errors / 34% coverage ] ****** [2007 done /1696 queued / 16 running / 2006 errors / 34% coverage ] ****** [2008 done /1698 queued / 16 running / 2007 errors / 34% coverage ] ****** [2008 done /1698 queued / 16 running / 2007 errors / 34% coverage ] ****** [2009 done /1697 queued / 16 running / 2008 errors / 34% coverage ] ****** [2009 done /1697 queued / 16 running / 2008 errors / 34% coverage ] ****** [2010 done /1699 queued / 16 running / 2009 errors / 34% coverage ] ****** [2010 done /1699 queued / 16 running / 2009 errors / 34% coverage ] ****** [2011 done /1699 queued / 16 running / 2010 errors / 34% coverage ] ****** [2011 done /1699 queued / 16 running / 2010 errors / 34% coverage ] ****** [2012 done /1704 queued / 16 running / 2011 errors / 34% coverage ] ****** [2012 done /1704 queued / 16 running / 2011 errors / 34% coverage ] ****** [2013 done /1709 queued / 16 running / 2012 errors / 34% coverage ] ****** [2013 done /1709 queued / 16 running / 2012 errors / 34% coverage ] ****** [2014 done /1711 queued / 16 running / 2013 errors / 34% coverage ] ****** [2014 done /1711 queued / 16 running / 2013 errors / 34% coverage ] ****** [2015 done /1710 queued / 16 running / 2014 errors / 34% coverage ] ****** [2015 done /1710 queued / 16 running / 2014 errors / 34% coverage ] ****** [2016 done /1709 queued / 16 running / 2015 errors / 34% coverage ] ****** [2016 done /1709 queued / 16 running / 2015 errors / 34% coverage ] ****** [2017 done /1710 queued / 16 running / 2016 errors / 34% coverage ] ****** [2017 done /1710 queued / 16 running / 2016 errors / 34% coverage ] ****** [2018 done /1709 queued / 16 running / 2017 errors / 34% coverage ] ****** [2018 done /1709 queued / 16 running / 2017 errors / 34% coverage ] ****** [2019 done /1709 queued / 16 running / 2018 errors / 34% coverage ] ****** [2019 done /1709 queued / 16 running / 2018 errors / 34% coverage ] ****** [2020 done /1710 queued / 16 running / 2019 errors / 34% coverage ] ****** [2020 done /1710 queued / 16 running / 2019 errors / 34% coverage ] ****** [2021 done /1710 queued / 16 running / 2020 errors / 34% coverage ] ****** [2021 done /1710 queued / 16 running / 2020 errors / 34% coverage ] ****** [2022 done /1712 queued / 16 running / 2021 errors / 34% coverage ] ****** [2022 done /1712 queued / 16 running / 2021 errors / 34% coverage ] ****** [2023 done /1711 queued / 16 running / 2022 errors / 34% coverage ] ****** [2023 done /1711 queued / 16 running / 2022 errors / 34% coverage ] ****** [2024 done /1710 queued / 16 running / 2023 errors / 34% coverage ] ****** [2024 done /1710 queued / 16 running / 2023 errors / 34% coverage ] ****** [2025 done /1709 queued / 16 running / 2024 errors / 34% coverage ] ****** [2025 done /1709 queued / 16 running / 2024 errors / 34% coverage ] ****** [2026 done /1711 queued / 16 running / 2025 errors / 34% coverage ] ****** [2026 done /1711 queued / 16 running / 2025 errors / 34% coverage ] ****** [2027 done /1712 queued / 16 running / 2026 errors / 34% coverage ] ****** [2027 done /1712 queued / 16 running / 2026 errors / 34% coverage ] ****** [2028 done /1716 queued / 16 running / 2027 errors / 34% coverage ] ****** [2028 done /1716 queued / 16 running / 2027 errors / 34% coverage ] ****** [2029 done /1715 queued / 16 running / 2028 errors / 34% coverage ] ****** [2029 done /1715 queued / 16 running / 2028 errors / 34% coverage ] ****** [2030 done /1716 queued / 16 running / 2029 errors / 34% coverage ] ****** [2030 done /1716 queued / 16 running / 2029 errors / 34% coverage ] ****** [2031 done /1715 queued / 16 running / 2030 errors / 34% coverage ] ****** [2031 done /1715 queued / 16 running / 2030 errors / 34% coverage ] ****** [2032 done /1717 queued / 16 running / 2031 errors / 34% coverage ] ****** [2032 done /1717 queued / 16 running / 2031 errors / 34% coverage ] ****** [2033 done /1717 queued / 16 running / 2032 errors / 34% coverage ] ****** [2033 done /1717 queued / 16 running / 2032 errors / 34% coverage ] ****** [2034 done /1719 queued / 16 running / 2033 errors / 34% coverage ] ****** [2034 done /1719 queued / 16 running / 2033 errors / 34% coverage ] ****** [2035 done /1722 queued / 16 running / 2034 errors / 34% coverage ] ****** [2035 done /1722 queued / 16 running / 2034 errors / 34% coverage ] ****** [2036 done /1723 queued / 16 running / 2035 errors / 34% coverage ] ****** [2036 done /1723 queued / 16 running / 2035 errors / 34% coverage ] ****** [2037 done /1722 queued / 16 running / 2036 errors / 34% coverage ] ****** [2037 done /1722 queued / 16 running / 2036 errors / 34% coverage ] ****** [2038 done /1722 queued / 16 running / 2037 errors / 34% coverage ] ****** [2038 done /1722 queued / 16 running / 2037 errors / 34% coverage ] ****** [2039 done /1724 queued / 16 running / 2038 errors / 34% coverage ] ****** [2039 done /1724 queued / 16 running / 2038 errors / 34% coverage ] ****** [2040 done /1726 queued / 16 running / 2039 errors / 34% coverage ] ****** [2040 done /1726 queued / 16 running / 2039 errors / 34% coverage ] ****** [2041 done /1729 queued / 16 running / 2040 errors / 34% coverage ] ****** [2041 done /1729 queued / 16 running / 2040 errors / 34% coverage ] ****** [2042 done /1731 queued / 16 running / 2041 errors / 34% coverage ] ****** [2042 done /1731 queued / 16 running / 2041 errors / 34% coverage ] ****** [2043 done /1734 queued / 16 running / 2042 errors / 34% coverage ] ****** [2043 done /1734 queued / 16 running / 2042 errors / 34% coverage ] ****** [2044 done /1733 queued / 16 running / 2043 errors / 34% coverage ] ****** [2044 done /1733 queued / 16 running / 2043 errors / 34% coverage ] ****** [2045 done /1734 queued / 16 running / 2044 errors / 34% coverage ] ****** [2045 done /1734 queued / 16 running / 2044 errors / 34% coverage ] ****** [2046 done /1736 queued / 16 running / 2045 errors / 34% coverage ] ****** [2046 done /1736 queued / 16 running / 2045 errors / 34% coverage ] ****** [2047 done /1740 queued / 16 running / 2046 errors / 34% coverage ] ****** [2047 done /1740 queued / 16 running / 2046 errors / 34% coverage ] ****** [2048 done /1745 queued / 16 running / 2047 errors / 34% coverage ] ****** [2048 done /1745 queued / 16 running / 2047 errors / 34% coverage ] ****** [2049 done /1747 queued / 16 running / 2048 errors / 34% coverage ] ****** [2049 done /1747 queued / 16 running / 2048 errors / 34% coverage ] ****** [2050 done /1748 queued / 16 running / 2049 errors / 34% coverage ] ****** [2050 done /1748 queued / 16 running / 2049 errors / 34% coverage ] ****** [2051 done /1747 queued / 16 running / 2050 errors / 34% coverage ] ****** [2051 done /1747 queued / 16 running / 2050 errors / 34% coverage ] ****** [2052 done /1750 queued / 16 running / 2051 errors / 34% coverage ] ****** [2052 done /1750 queued / 16 running / 2051 errors / 34% coverage ] ****** [2053 done /1749 queued / 16 running / 2052 errors / 34% coverage ] ****** [2053 done /1749 queued / 16 running / 2052 errors / 34% coverage ] ****** [2054 done /1750 queued / 16 running / 2053 errors / 34% coverage ] ****** [2054 done /1750 queued / 16 running / 2053 errors / 34% coverage ] ****** [2055 done /1749 queued / 16 running / 2054 errors / 34% coverage ] ****** [2055 done /1749 queued / 16 running / 2054 errors / 34% coverage ] ****** [2056 done /1752 queued / 16 running / 2055 errors / 34% coverage ] ****** [2056 done /1752 queued / 16 running / 2055 errors / 34% coverage ] ****** [2057 done /1754 queued / 16 running / 2056 errors / 34% coverage ] ****** [2057 done /1754 queued / 16 running / 2056 errors / 34% coverage ] ****** [2058 done /1753 queued / 16 running / 2057 errors / 34% coverage ] ****** [2058 done /1753 queued / 16 running / 2057 errors / 34% coverage ] ****** [2059 done /1752 queued / 16 running / 2058 errors / 34% coverage ] ****** [2059 done /1752 queued / 16 running / 2058 errors / 34% coverage ] ****** [2060 done /1753 queued / 16 running / 2059 errors / 34% coverage ] ****** [2060 done /1753 queued / 16 running / 2059 errors / 34% coverage ] ****** [2061 done /1757 queued / 16 running / 2060 errors / 34% coverage ] ****** [2061 done /1757 queued / 16 running / 2060 errors / 34% coverage ] ****** [2062 done /1757 queued / 16 running / 2061 errors / 34% coverage ] ****** [2062 done /1757 queued / 16 running / 2061 errors / 34% coverage ] ****** [2063 done /1759 queued / 16 running / 2062 errors / 34% coverage ] ****** [2063 done /1759 queued / 16 running / 2062 errors / 34% coverage ] ****** [2064 done /1761 queued / 16 running / 2063 errors / 34% coverage ] ****** [2064 done /1761 queued / 16 running / 2063 errors / 34% coverage ] ****** [2065 done /1760 queued / 16 running / 2064 errors / 34% coverage ] ****** [2065 done /1760 queued / 16 running / 2064 errors / 34% coverage ] ****** [2066 done /1760 queued / 16 running / 2065 errors / 34% coverage ] ****** [2066 done /1760 queued / 16 running / 2065 errors / 34% coverage ] ****** [2067 done /1761 queued / 16 running / 2066 errors / 34% coverage ] ****** [2067 done /1761 queued / 16 running / 2066 errors / 34% coverage ] ****** [2068 done /1762 queued / 16 running / 2067 errors / 34% coverage ] ****** [2068 done /1762 queued / 16 running / 2067 errors / 34% coverage ] ****** [2069 done /1763 queued / 16 running / 2068 errors / 34% coverage ] ****** [2069 done /1763 queued / 16 running / 2068 errors / 34% coverage ] ****** [2070 done /1763 queued / 16 running / 2069 errors / 34% coverage ] ****** [2070 done /1763 queued / 16 running / 2069 errors / 34% coverage ] ****** [2071 done /1764 queued / 16 running / 2070 errors / 34% coverage ] ****** [2071 done /1764 queued / 16 running / 2070 errors / 34% coverage ] ****** [2072 done /1765 queued / 16 running / 2071 errors / 34% coverage ] ****** [2072 done /1765 queued / 16 running / 2071 errors / 34% coverage ] ****** [2073 done /1764 queued / 16 running / 2072 errors / 34% coverage ] ****** [2073 done /1764 queued / 16 running / 2072 errors / 34% coverage ] ****** [2074 done /1766 queued / 16 running / 2073 errors / 34% coverage ] ****** [2074 done /1766 queued / 16 running / 2073 errors / 34% coverage ] ****** [2075 done /1769 queued / 16 running / 2074 errors / 34% coverage ] ****** [2075 done /1769 queued / 16 running / 2074 errors / 34% coverage ] ****** [2076 done /1769 queued / 16 running / 2075 errors / 34% coverage ] ****** [2076 done /1769 queued / 16 running / 2075 errors / 34% coverage ] ****** [2077 done /1770 queued / 16 running / 2076 errors / 34% coverage ] ****** [2077 done /1770 queued / 16 running / 2076 errors / 34% coverage ] ****** [2078 done /1770 queued / 16 running / 2077 errors / 34% coverage ] ****** [2078 done /1770 queued / 16 running / 2077 errors / 34% coverage ] ****** [2079 done /1769 queued / 16 running / 2078 errors / 34% coverage ] ****** [2079 done /1769 queued / 16 running / 2078 errors / 34% coverage ] ****** [2080 done /1771 queued / 16 running / 2079 errors / 34% coverage ] ****** [2080 done /1771 queued / 16 running / 2079 errors / 34% coverage ] ****** [2081 done /1771 queued / 16 running / 2080 errors / 34% coverage ] ****** [2081 done /1771 queued / 16 running / 2080 errors / 34% coverage ] ****** [2082 done /1770 queued / 16 running / 2081 errors / 34% coverage ] ****** [2082 done /1770 queued / 16 running / 2081 errors / 34% coverage ] ****** [2083 done /1772 queued / 16 running / 2082 errors / 34% coverage ] ****** [2083 done /1772 queued / 16 running / 2082 errors / 34% coverage ] ****** [2084 done /1771 queued / 16 running / 2083 errors / 34% coverage ] ****** [2084 done /1771 queued / 16 running / 2083 errors / 34% coverage ] ****** [2085 done /1773 queued / 16 running / 2084 errors / 34% coverage ] ****** [2085 done /1773 queued / 16 running / 2084 errors / 34% coverage ] ****** [2086 done /1774 queued / 16 running / 2085 errors / 34% coverage ] ****** [2086 done /1774 queued / 16 running / 2085 errors / 34% coverage ] ****** [2087 done /1775 queued / 16 running / 2086 errors / 34% coverage ] ****** [2087 done /1775 queued / 16 running / 2086 errors / 34% coverage ] ****** [2088 done /1778 queued / 16 running / 2087 errors / 34% coverage ] ****** [2088 done /1778 queued / 16 running / 2087 errors / 34% coverage ] ****** [2089 done /1780 queued / 16 running / 2088 errors / 34% coverage ] ****** [2089 done /1780 queued / 16 running / 2088 errors / 34% coverage ] ****** [2090 done /1779 queued / 16 running / 2089 errors / 34% coverage ] ****** [2090 done /1779 queued / 16 running / 2089 errors / 34% coverage ] ****** [2091 done /1780 queued / 16 running / 2090 errors / 34% coverage ] ****** [2091 done /1780 queued / 16 running / 2090 errors / 34% coverage ] ****** [2092 done /1786 queued / 16 running / 2091 errors / 34% coverage ] ****** [2092 done /1786 queued / 16 running / 2091 errors / 34% coverage ] ****** [2093 done /1787 queued / 16 running / 2092 errors / 34% coverage ] ****** [2093 done /1787 queued / 16 running / 2092 errors / 34% coverage ] ****** [2094 done /1788 queued / 16 running / 2093 errors / 34% coverage ] ****** [2094 done /1788 queued / 16 running / 2093 errors / 34% coverage ] ****** [2095 done /1791 queued / 16 running / 2094 errors / 34% coverage ] ****** [2095 done /1791 queued / 16 running / 2094 errors / 34% coverage ] ****** [2096 done /1790 queued / 16 running / 2095 errors / 34% coverage ] ****** [2096 done /1790 queued / 16 running / 2095 errors / 34% coverage ] ****** [2097 done /1792 queued / 16 running / 2096 errors / 34% coverage ] ****** [2097 done /1792 queued / 16 running / 2096 errors / 34% coverage ] ****** [2098 done /1792 queued / 16 running / 2097 errors / 34% coverage ] ****** [2098 done /1792 queued / 16 running / 2097 errors / 34% coverage ] ****** [2099 done /1794 queued / 16 running / 2098 errors / 34% coverage ] ****** [2099 done /1794 queued / 16 running / 2098 errors / 34% coverage ] ****** [2100 done /1799 queued / 16 running / 2099 errors / 34% coverage ] ****** [2100 done /1799 queued / 16 running / 2099 errors / 34% coverage ] ****** [2101 done /1798 queued / 16 running / 2100 errors / 34% coverage ] ****** [2101 done /1798 queued / 16 running / 2100 errors / 34% coverage ] ****** [2102 done /1801 queued / 16 running / 2101 errors / 34% coverage ] ****** [2102 done /1801 queued / 16 running / 2101 errors / 34% coverage ] ****** [2103 done /1803 queued / 16 running / 2102 errors / 34% coverage ] ****** [2103 done /1803 queued / 16 running / 2102 errors / 34% coverage ] ****** [2104 done /1807 queued / 16 running / 2103 errors / 34% coverage ] ****** [2104 done /1807 queued / 16 running / 2103 errors / 34% coverage ] ****** [2105 done /1812 queued / 16 running / 2104 errors / 34% coverage ] ****** [2105 done /1812 queued / 16 running / 2104 errors / 34% coverage ] ****** [2106 done /1811 queued / 16 running / 2105 errors / 34% coverage ] ****** [2106 done /1811 queued / 16 running / 2105 errors / 34% coverage ] ****** [2107 done /1813 queued / 16 running / 2106 errors / 34% coverage ] ****** [2107 done /1813 queued / 16 running / 2106 errors / 34% coverage ] ****** [2108 done /1813 queued / 16 running / 2107 errors / 34% coverage ] ****** [2108 done /1813 queued / 16 running / 2107 errors / 34% coverage ] ****** [2109 done /1814 queued / 16 running / 2108 errors / 34% coverage ] ****** [2109 done /1814 queued / 16 running / 2108 errors / 34% coverage ] ****** [2110 done /1816 queued / 16 running / 2109 errors / 34% coverage ] ****** [2110 done /1816 queued / 16 running / 2109 errors / 34% coverage ] ****** [2111 done /1815 queued / 16 running / 2110 errors / 34% coverage ] ****** [2111 done /1815 queued / 16 running / 2110 errors / 34% coverage ] ****** [2112 done /1818 queued / 16 running / 2111 errors / 34% coverage ] ****** [2112 done /1818 queued / 16 running / 2111 errors / 34% coverage ] ****** [2113 done /1820 queued / 16 running / 2112 errors / 34% coverage ] ****** [2113 done /1820 queued / 16 running / 2112 errors / 34% coverage ] ****** [2114 done /1821 queued / 16 running / 2113 errors / 34% coverage ] ****** [2114 done /1821 queued / 16 running / 2113 errors / 34% coverage ] ****** [2115 done /1823 queued / 16 running / 2114 errors / 34% coverage ] ****** [2115 done /1823 queued / 16 running / 2114 errors / 34% coverage ] ****** [2116 done /1824 queued / 16 running / 2115 errors / 34% coverage ] ****** [2116 done /1824 queued / 16 running / 2115 errors / 34% coverage ] ****** [2117 done /1824 queued / 16 running / 2116 errors / 34% coverage ] ****** [2117 done /1824 queued / 16 running / 2116 errors / 34% coverage ] ****** [2118 done /1825 queued / 16 running / 2117 errors / 34% coverage ] ****** [2118 done /1825 queued / 16 running / 2117 errors / 34% coverage ] ****** [2119 done /1827 queued / 16 running / 2118 errors / 34% coverage ] ****** [2119 done /1827 queued / 16 running / 2118 errors / 34% coverage ] ****** [2120 done /1829 queued / 16 running / 2119 errors / 34% coverage ] ****** [2120 done /1829 queued / 16 running / 2119 errors / 34% coverage ] ****** [2121 done /1830 queued / 16 running / 2120 errors / 34% coverage ] ****** [2121 done /1830 queued / 16 running / 2120 errors / 34% coverage ] ****** [2122 done /1831 queued / 16 running / 2121 errors / 34% coverage ] ****** [2122 done /1831 queued / 16 running / 2121 errors / 34% coverage ] ****** [2123 done /1832 queued / 16 running / 2122 errors / 34% coverage ] ****** [2123 done /1832 queued / 16 running / 2122 errors / 34% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","toString","apply","bound ","parseInt","call","Array","isArray","resolve"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0,"Switcher":false,"Target_Switch_Base":0} start 0.008 took 1.0392s
*-- Test Case {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0} start 1.068 took 2.0877s
*-- Errors occured in test {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (49:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var isAbsolute = common.isAbsolute
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

glob.hasMagic = function (pattern, options_) {
  var options = util._extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set
  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  var n = this.minimatch.set.length
  this._processing = 0
  this.matches = new Array(n)

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }

  function done () {
    --self._processing
    if (self._processing <= 0)
      self._finish()
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  //console.error('FINISH', this.matches)
  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}


Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (!this.matches[index][e]) {
    if (this.paused) {
      this._emitQueue.push([index, e])
      return
    }

    if (this.nodir) {
      var c = this.cache[this._makeAbs(e)]
      if (c === 'DIR' || Array.isArray(c))
        return
    }

    this.matches[index][e] = true
    if (!this.stat && !this.mark)
      return this.emit('match', e)

    var self = this
    this._stat(this._makeAbs(e), function (er, c, st) {
      self.emit('stat', e, st)
      self.emit('match', e)
    })
  }
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er)
      return cb()

    var isSym = lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTDIR': // totally normal. means it *does* exist.
      this.cache[f] = 'FILE'
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[f] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) return this.emit('error', er)
      if (!this.silent) console.error('glob error', er)
      break
  }
  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = f
  if (f.charAt(0) === '/')
    abs = path.join(this.root, f)
  else if (this.changedCwd)
    abs = path.resolve(this.cwd, f)


  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, f)) {
    var c = this.cache[f]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but not how we need it
    if (abs.slice(-1) === '/' && c !== 'DIR')
      return cb()

    return cb(null, c)
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else
      return cb(null, stat.isDirectory() ? 'DIR' : 'FILE', stat)
  }

  var self = this
  var statcb = inflight('stat\0' + abs, statcb_)
  if (statcb)
    fs.stat(abs, statcb)

  function statcb_ (er, stat) {
    self._stat2(f, abs, er, stat, cb)
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er) {
    this.statCache[abs] = false
    return cb()
  }

  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && !stat.isDirectory())
    return cb(null, false, stat)

  var c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[f] = this.cache[f] || c
  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (49:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switch_Base":0,"_bound":1}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"_bound":3} start 3.1885 took 1.9873s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"_bound":3}
* Error: Tropigate failed because SyntaxError: Unexpected token (49:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var isAbsolute = common.isAbsolute
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

glob.hasMagic = function (pattern, options_) {
  var options = util._extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set
  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  var n = this.minimatch.set.length
  this._processing = 0
  this.matches = new Array(n)

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }

  function done () {
    --self._processing
    if (self._processing <= 0)
      self._finish()
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  //console.error('FINISH', this.matches)
  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}


Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (!this.matches[index][e]) {
    if (this.paused) {
      this._emitQueue.push([index, e])
      return
    }

    if (this.nodir) {
      var c = this.cache[this._makeAbs(e)]
      if (c === 'DIR' || Array.isArray(c))
        return
    }

    this.matches[index][e] = true
    if (!this.stat && !this.mark)
      return this.emit('match', e)

    var self = this
    this._stat(this._makeAbs(e), function (er, c, st) {
      self.emit('stat', e, st)
      self.emit('match', e)
    })
  }
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er)
      return cb()

    var isSym = lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTDIR': // totally normal. means it *does* exist.
      this.cache[f] = 'FILE'
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[f] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) return this.emit('error', er)
      if (!this.silent) console.error('glob error', er)
      break
  }
  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = f
  if (f.charAt(0) === '/')
    abs = path.join(this.root, f)
  else if (this.changedCwd)
    abs = path.resolve(this.cwd, f)


  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, f)) {
    var c = this.cache[f]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but not how we need it
    if (abs.slice(-1) === '/' && c !== 'DIR')
      return cb()

    return cb(null, c)
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else
      return cb(null, stat.isDirectory() ? 'DIR' : 'FILE', stat)
  }

  var self = this
  var statcb = inflight('stat\0' + abs, statcb_)
  if (statcb)
    fs.stat(abs, statcb)

  function statcb_ (er, stat) {
    self._stat2(f, abs, er, stat, cb)
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er) {
    this.statCache[abs] = false
    return cb()
  }

  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && !stat.isDirectory())
    return cb(null, false, stat)

  var c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[f] = this.cache[f] || c
  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (49:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"_bound":3}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"_bound":2} start 3.1758 took 2.6513s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"_bound":2}
* Error: Tropigate failed because SyntaxError: Unexpected token (49:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var isAbsolute = common.isAbsolute
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

glob.hasMagic = function (pattern, options_) {
  var options = util._extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set
  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  var n = this.minimatch.set.length
  this._processing = 0
  this.matches = new Array(n)

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }

  function done () {
    --self._processing
    if (self._processing <= 0)
      self._finish()
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  //console.error('FINISH', this.matches)
  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}


Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (!this.matches[index][e]) {
    if (this.paused) {
      this._emitQueue.push([index, e])
      return
    }

    if (this.nodir) {
      var c = this.cache[this._makeAbs(e)]
      if (c === 'DIR' || Array.isArray(c))
        return
    }

    this.matches[index][e] = true
    if (!this.stat && !this.mark)
      return this.emit('match', e)

    var self = this
    this._stat(this._makeAbs(e), function (er, c, st) {
      self.emit('stat', e, st)
      self.emit('match', e)
    })
  }
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er)
      return cb()

    var isSym = lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTDIR': // totally normal. means it *does* exist.
      this.cache[f] = 'FILE'
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[f] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) return this.emit('error', er)
      if (!this.silent) console.error('glob error', er)
      break
  }
  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = f
  if (f.charAt(0) === '/')
    abs = path.join(this.root, f)
  else if (this.changedCwd)
    abs = path.resolve(this.cwd, f)


  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, f)) {
    var c = this.cache[f]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but not how we need it
    if (abs.slice(-1) === '/' && c !== 'DIR')
      return cb()

    return cb(null, c)
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else
      return cb(null, stat.isDirectory() ? 'DIR' : 'FILE', stat)
  }

  var self = this
  var statcb = inflight('stat\0' + abs, statcb_)
  if (statcb)
    fs.stat(abs, statcb)

  function statcb_ (er, stat) {
    self._stat2(f, abs, er, stat, cb)
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er) {
    this.statCache[abs] = false
    return cb()
  }

  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && !stat.isDirectory())
    return cb(null, false, stat)

  var c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[f] = this.cache[f] || c
  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (49:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"_bound":2}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"_bound":4,"ExpansionArg_int":0} start 5.1876 took 1.8556s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"_bound":4,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (49:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var isAbsolute = common.isAbsolute
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

glob.hasMagic = function (pattern, options_) {
  var options = util._extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set
  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  var n = this.minimatch.set.length
  this._processing = 0
  this.matches = new Array(n)

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }

  function done () {
    --self._processing
    if (self._processing <= 0)
      self._finish()
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  //console.error('FINISH', this.matches)
  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}


Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (!this.matches[index][e]) {
    if (this.paused) {
      this._emitQueue.push([index, e])
      return
    }

    if (this.nodir) {
      var c = this.cache[this._makeAbs(e)]
      if (c === 'DIR' || Array.isArray(c))
        return
    }

    this.matches[index][e] = true
    if (!this.stat && !this.mark)
      return this.emit('match', e)

    var self = this
    this._stat(this._makeAbs(e), function (er, c, st) {
      self.emit('stat', e, st)
      self.emit('match', e)
    })
  }
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er)
      return cb()

    var isSym = lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTDIR': // totally normal. means it *does* exist.
      this.cache[f] = 'FILE'
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[f] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) return this.emit('error', er)
      if (!this.silent) console.error('glob error', er)
      break
  }
  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = f
  if (f.charAt(0) === '/')
    abs = path.join(this.root, f)
  else if (this.changedCwd)
    abs = path.resolve(this.cwd, f)


  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, f)) {
    var c = this.cache[f]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but not how we need it
    if (abs.slice(-1) === '/' && c !== 'DIR')
      return cb()

    return cb(null, c)
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else
      return cb(null, stat.isDirectory() ? 'DIR' : 'FILE', stat)
  }

  var self = this
  var statcb = inflight('stat\0' + abs, statcb_)
  if (statcb)
    fs.stat(abs, statcb)

  function statcb_ (er, stat) {
    self._stat2(f, abs, er, stat, cb)
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er) {
    this.statCache[abs] = false
    return cb()
  }

  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && !stat.isDirectory())
    return cb(null, false, stat)

  var c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[f] = this.cache[f] || c
  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (49:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"_bound":3,"ExpansionArg_int":0} start 5.8379 took 2.6732s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"_bound":3,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (49:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var isAbsolute = common.isAbsolute
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

glob.hasMagic = function (pattern, options_) {
  var options = util._extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set
  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  var n = this.minimatch.set.length
  this._processing = 0
  this.matches = new Array(n)

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }

  function done () {
    --self._processing
    if (self._processing <= 0)
      self._finish()
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  //console.error('FINISH', this.matches)
  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}


Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (!this.matches[index][e]) {
    if (this.paused) {
      this._emitQueue.push([index, e])
      return
    }

    if (this.nodir) {
      var c = this.cache[this._makeAbs(e)]
      if (c === 'DIR' || Array.isArray(c))
        return
    }

    this.matches[index][e] = true
    if (!this.stat && !this.mark)
      return this.emit('match', e)

    var self = this
    this._stat(this._makeAbs(e), function (er, c, st) {
      self.emit('stat', e, st)
      self.emit('match', e)
    })
  }
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er)
      return cb()

    var isSym = lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTDIR': // totally normal. means it *does* exist.
      this.cache[f] = 'FILE'
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[f] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) return this.emit('error', er)
      if (!this.silent) console.error('glob error', er)
      break
  }
  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = f
  if (f.charAt(0) === '/')
    abs = path.join(this.root, f)
  else if (this.changedCwd)
    abs = path.resolve(this.cwd, f)


  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, f)) {
    var c = this.cache[f]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but not how we need it
    if (abs.slice(-1) === '/' && c !== 'DIR')
      return cb()

    return cb(null, c)
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else
      return cb(null, stat.isDirectory() ? 'DIR' : 'FILE', stat)
  }

  var self = this
  var statcb = inflight('stat\0' + abs, statcb_)
  if (statcb)
    fs.stat(abs, statcb)

  function statcb_ (er, stat) {
    self._stat2(f, abs, er, stat, cb)
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er) {
    this.statCache[abs] = false
    return cb()
  }

  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && !stat.isDirectory())
    return cb(null, false, stat)

  var c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[f] = this.cache[f] || c
  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (49:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"_bound":3}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"_bound":4,"ExpansionArg_int":0} start 5.8518 took 2.7212s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"_bound":4,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (49:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var isAbsolute = common.isAbsolute
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

glob.hasMagic = function (pattern, options_) {
  var options = util._extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set
  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  var n = this.minimatch.set.length
  this._processing = 0
  this.matches = new Array(n)

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }

  function done () {
    --self._processing
    if (self._processing <= 0)
      self._finish()
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  //console.error('FINISH', this.matches)
  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}


Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (!this.matches[index][e]) {
    if (this.paused) {
      this._emitQueue.push([index, e])
      return
    }

    if (this.nodir) {
      var c = this.cache[this._makeAbs(e)]
      if (c === 'DIR' || Array.isArray(c))
        return
    }

    this.matches[index][e] = true
    if (!this.stat && !this.mark)
      return this.emit('match', e)

    var self = this
    this._stat(this._makeAbs(e), function (er, c, st) {
      self.emit('stat', e, st)
      self.emit('match', e)
    })
  }
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er)
      return cb()

    var isSym = lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTDIR': // totally normal. means it *does* exist.
      this.cache[f] = 'FILE'
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[f] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) return this.emit('error', er)
      if (!this.silent) console.error('glob error', er)
      break
  }
  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = f
  if (f.charAt(0) === '/')
    abs = path.join(this.root, f)
  else if (this.changedCwd)
    abs = path.resolve(this.cwd, f)


  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, f)) {
    var c = this.cache[f]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but not how we need it
    if (abs.slice(-1) === '/' && c !== 'DIR')
      return cb()

    return cb(null, c)
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else
      return cb(null, stat.isDirectory() ? 'DIR' : 'FILE', stat)
  }

  var self = this
  var statcb = inflight('stat\0' + abs, statcb_)
  if (statcb)
    fs.stat(abs, statcb)

  function statcb_ (er, stat) {
    self._stat2(f, abs, er, stat, cb)
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er) {
    this.statCache[abs] = false
    return cb()
  }

  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && !stat.isDirectory())
    return cb(null, false, stat)

  var c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[f] = this.cache[f] || c
  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (49:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":5,"ExpansionArg_string":"PureString"} start 7.0644 took 3.4073s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":5,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (49:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var isAbsolute = common.isAbsolute
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

glob.hasMagic = function (pattern, options_) {
  var options = util._extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set
  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  var n = this.minimatch.set.length
  this._processing = 0
  this.matches = new Array(n)

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }

  function done () {
    --self._processing
    if (self._processing <= 0)
      self._finish()
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  //console.error('FINISH', this.matches)
  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}


Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (!this.matches[index][e]) {
    if (this.paused) {
      this._emitQueue.push([index, e])
      return
    }

    if (this.nodir) {
      var c = this.cache[this._makeAbs(e)]
      if (c === 'DIR' || Array.isArray(c))
        return
    }

    this.matches[index][e] = true
    if (!this.stat && !this.mark)
      return this.emit('match', e)

    var self = this
    this._stat(this._makeAbs(e), function (er, c, st) {
      self.emit('stat', e, st)
      self.emit('match', e)
    })
  }
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er)
      return cb()

    var isSym = lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTDIR': // totally normal. means it *does* exist.
      this.cache[f] = 'FILE'
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[f] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) return this.emit('error', er)
      if (!this.silent) console.error('glob error', er)
      break
  }
  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = f
  if (f.charAt(0) === '/')
    abs = path.join(this.root, f)
  else if (this.changedCwd)
    abs = path.resolve(this.cwd, f)


  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, f)) {
    var c = this.cache[f]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but not how we need it
    if (abs.slice(-1) === '/' && c !== 'DIR')
      return cb()

    return cb(null, c)
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else
      return cb(null, stat.isDirectory() ? 'DIR' : 'FILE', stat)
  }

  var self = this
  var statcb = inflight('stat\0' + abs, statcb_)
  if (statcb)
    fs.stat(abs, statcb)

  function statcb_ (er, stat) {
    self._stat2(f, abs, er, stat, cb)
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er) {
    this.statCache[abs] = false
    return cb()
  }

  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && !stat.isDirectory())
    return cb(null, false, stat)

  var c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[f] = this.cache[f] || c
  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (49:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":6,"ExpansionArg_string":"PureString"} start 8.5831 took 2.7123s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":6,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (49:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var isAbsolute = common.isAbsolute
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

glob.hasMagic = function (pattern, options_) {
  var options = util._extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set
  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  var n = this.minimatch.set.length
  this._processing = 0
  this.matches = new Array(n)

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }

  function done () {
    --self._processing
    if (self._processing <= 0)
      self._finish()
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  //console.error('FINISH', this.matches)
  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}


Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (!this.matches[index][e]) {
    if (this.paused) {
      this._emitQueue.push([index, e])
      return
    }

    if (this.nodir) {
      var c = this.cache[this._makeAbs(e)]
      if (c === 'DIR' || Array.isArray(c))
        return
    }

    this.matches[index][e] = true
    if (!this.stat && !this.mark)
      return this.emit('match', e)

    var self = this
    this._stat(this._makeAbs(e), function (er, c, st) {
      self.emit('stat', e, st)
      self.emit('match', e)
    })
  }
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er)
      return cb()

    var isSym = lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTDIR': // totally normal. means it *does* exist.
      this.cache[f] = 'FILE'
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[f] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) return this.emit('error', er)
      if (!this.silent) console.error('glob error', er)
      break
  }
  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = f
  if (f.charAt(0) === '/')
    abs = path.join(this.root, f)
  else if (this.changedCwd)
    abs = path.resolve(this.cwd, f)


  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, f)) {
    var c = this.cache[f]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but not how we need it
    if (abs.slice(-1) === '/' && c !== 'DIR')
      return cb()

    return cb(null, c)
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else
      return cb(null, stat.isDirectory() ? 'DIR' : 'FILE', stat)
  }

  var self = this
  var statcb = inflight('stat\0' + abs, statcb_)
  if (statcb)
    fs.stat(abs, statcb)

  function statcb_ (er, stat) {
    self._stat2(f, abs, er, stat, cb)
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er) {
    this.statCache[abs] = false
    return cb()
  }

  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && !stat.isDirectory())
    return cb(null, false, stat)

  var c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[f] = this.cache[f] || c
  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (49:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":3,"_bound":5,"ExpansionArg_string":"PureString"} start 8.5277 took 2.9471s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":3,"_bound":5,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (49:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var isAbsolute = common.isAbsolute
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

glob.hasMagic = function (pattern, options_) {
  var options = util._extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set
  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  var n = this.minimatch.set.length
  this._processing = 0
  this.matches = new Array(n)

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }

  function done () {
    --self._processing
    if (self._processing <= 0)
      self._finish()
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  //console.error('FINISH', this.matches)
  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}


Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (!this.matches[index][e]) {
    if (this.paused) {
      this._emitQueue.push([index, e])
      return
    }

    if (this.nodir) {
      var c = this.cache[this._makeAbs(e)]
      if (c === 'DIR' || Array.isArray(c))
        return
    }

    this.matches[index][e] = true
    if (!this.stat && !this.mark)
      return this.emit('match', e)

    var self = this
    this._stat(this._makeAbs(e), function (er, c, st) {
      self.emit('stat', e, st)
      self.emit('match', e)
    })
  }
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er)
      return cb()

    var isSym = lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTDIR': // totally normal. means it *does* exist.
      this.cache[f] = 'FILE'
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[f] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) return this.emit('error', er)
      if (!this.silent) console.error('glob error', er)
      break
  }
  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = f
  if (f.charAt(0) === '/')
    abs = path.join(this.root, f)
  else if (this.changedCwd)
    abs = path.resolve(this.cwd, f)


  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, f)) {
    var c = this.cache[f]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but not how we need it
    if (abs.slice(-1) === '/' && c !== 'DIR')
      return cb()

    return cb(null, c)
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else
      return cb(null, stat.isDirectory() ? 'DIR' : 'FILE', stat)
  }

  var self = this
  var statcb = inflight('stat\0' + abs, statcb_)
  if (statcb)
    fs.stat(abs, statcb)

  function statcb_ (er, stat) {
    self._stat2(f, abs, er, stat, cb)
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er) {
    this.statCache[abs] = false
    return cb()
  }

  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && !stat.isDirectory())
    return cb(null, false, stat)

  var c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[f] = this.cache[f] || c
  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (49:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":3,"_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"_bound":6} start 8.5423 took 3.5855s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"_bound":6}
* Error: Tropigate failed because SyntaxError: Unexpected token (49:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var isAbsolute = common.isAbsolute
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

glob.hasMagic = function (pattern, options_) {
  var options = util._extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set
  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  var n = this.minimatch.set.length
  this._processing = 0
  this.matches = new Array(n)

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }

  function done () {
    --self._processing
    if (self._processing <= 0)
      self._finish()
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  //console.error('FINISH', this.matches)
  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}


Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (!this.matches[index][e]) {
    if (this.paused) {
      this._emitQueue.push([index, e])
      return
    }

    if (this.nodir) {
      var c = this.cache[this._makeAbs(e)]
      if (c === 'DIR' || Array.isArray(c))
        return
    }

    this.matches[index][e] = true
    if (!this.stat && !this.mark)
      return this.emit('match', e)

    var self = this
    this._stat(this._makeAbs(e), function (er, c, st) {
      self.emit('stat', e, st)
      self.emit('match', e)
    })
  }
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er)
      return cb()

    var isSym = lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTDIR': // totally normal. means it *does* exist.
      this.cache[f] = 'FILE'
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[f] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) return this.emit('error', er)
      if (!this.silent) console.error('glob error', er)
      break
  }
  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = f
  if (f.charAt(0) === '/')
    abs = path.join(this.root, f)
  else if (this.changedCwd)
    abs = path.resolve(this.cwd, f)


  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, f)) {
    var c = this.cache[f]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but not how we need it
    if (abs.slice(-1) === '/' && c !== 'DIR')
      return cb()

    return cb(null, c)
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else
      return cb(null, stat.isDirectory() ? 'DIR' : 'FILE', stat)
  }

  var self = this
  var statcb = inflight('stat\0' + abs, statcb_)
  if (statcb)
    fs.stat(abs, statcb)

  function statcb_ (er, stat) {
    self._stat2(f, abs, er, stat, cb)
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er) {
    this.statCache[abs] = false
    return cb()
  }

  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && !stat.isDirectory())
    return cb(null, false, stat)

  var c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[f] = this.cache[f] || c
  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (49:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":3,"ExpansionArg_type_2":0,"_bound":6}'
