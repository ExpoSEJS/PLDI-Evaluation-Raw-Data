/root/Targets/nucleus-styleguide
└─┬ nucleus-styleguide@1.1.1 
  └── dot-object@1.7.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/nucleus-styleguide/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0731 took 3.821s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

/* index.js -- Bootstraps the application and starts the pipeline
 *
 * Copyright (C) 2016 Michael Seibt
 *
 * With contributions from:
 *  - Marco Vito Moscaritolo (@mavimo)
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file for details.
 */

'use strict';

var Config = require('./src/Config');
var Verbose = require('./src/Verbose');
var Crawler = require('./src/Crawler');
var Transform = require('./src/Transform');
var Substitute = require('./src/Substitute');
var SearchIndex = require('./src/SearchIndex');

var jade = require('pug');

/*
|--------------------------------------------------------------------------
| BOOTSTRAP
|--------------------------------------------------------------------------
|
| We need to collect configuration and environment information before
| starting the application.
|
*/

// If requested, run the init script and stop the execution here
if(Config.shouldRunInit()) {
  require('./init');
  process.exit(0);
}

var config = Config.parse();
Verbose.setLevel(config.verbose);
Verbose.start();
Verbose.status('Found ' + config.files.length + ' files.');

/*
|--------------------------------------------------------------------------
| CRAWL
|--------------------------------------------------------------------------
|
| Start the parser that crawls the stylesheets for DocBlock annotations.
|
*/

var styles = [];
for(var f in config.files) {
  var file = config.files[f];
  Verbose.spin('Crawling ' + file);
  var style = Crawler.processFile(file);
  styles = styles.concat(style);
}

/*
|--------------------------------------------------------------------------
| TRANSFORM
|--------------------------------------------------------------------------
|
| Prepare the styleguide data for view generation.
|
*/

Verbose.spin('Analyzing styles');
styles = Substitute.injectConfig(config).process(styles);
var styleguides = Transform.forView(styles);

Verbose.spin('Creating search index');
var searchIndex = SearchIndex.create(styleguides);

/*
|--------------------------------------------------------------------------
| EXPORT
|--------------------------------------------------------------------------
|
| Generate the view files.
|
*/

Verbose.spin('Generating files');

// Create the target folder
require('mkdirp').sync(config.target);

// Build the template files
var templateFiles = ['atoms', 'molecules', 'index', 'nuclides', 'structures'];
for(var t in templateFiles) {
  Verbose.spin('Generating files');
  var html = jade.renderFile(config.template.replace(/\/$/, '')+'/'+templateFiles[t]+'.pug', {
    styles : styleguides,
    index: searchIndex,
    meta: {
      css: config.css,
      title: config.title,
      namespace: config.namespace,
      counterCSS: config.counterCSS,
      scripts: config.scripts,
      demo: !!config.demo
    }
  });
  require('fs').writeFileSync('./'+config.target+'/'+templateFiles[t]+'.html', html);
}

// Copy assets
if(config.target !== 'build') {
var fs = require('fs');
require('mkdirp').sync(config.target + '/styles');
require('mkdirp').sync(config.target + '/fonts');
require('mkdirp').sync(config.target + '/scripts');

fs
  .writeFileSync(config.target + '/styles/app.css',
    fs.readFileSync(__dirname + '/build/styles/app.css'));
fs
  .writeFileSync(config.target + '/scripts/app.js',
    fs.readFileSync(__dirname + '/build/scripts/app.js'));
fs
  .writeFileSync(config.target + '/favicon.ico',
    fs.readFileSync(__dirname + '/build/favicon.ico'));
fs
  .writeFileSync(config.target + '/fonts/SG-icons.eot',
    fs.readFileSync(__dirname + '/build/fonts/SG-icons.eot'));
fs
  .writeFileSync(config.target + '/fonts/SG-icons.ttf',
    fs.readFileSync(__dirname + '/build/fonts/SG-icons.ttf'));
fs
  .writeFileSync(config.target + '/fonts/SG-icons.woff',
    fs.readFileSync(__dirname + '/build/fonts/SG-icons.woff'));

}

/*
|--------------------------------------------------------------------------
| THANKS FOR YOUR ATTENTION
|--------------------------------------------------------------------------
*/

Verbose.finished();
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
