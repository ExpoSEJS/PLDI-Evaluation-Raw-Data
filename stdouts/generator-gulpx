/root/Targets/generator-gulpx
├─┬ generator-gulpx@1.0.0 
│ ├─┬ chalk@0.4.0 
│ │ ├── ansi-styles@1.0.0 
│ │ ├── has-color@0.1.7 
│ │ └── strip-ansi@0.1.1 
│ ├─┬ yeoman-generator@0.16.0 
│ │ ├── async@0.2.10 
│ │ ├─┬ cheerio@0.13.1 
│ │ │ ├─┬ CSSselect@0.4.1 
│ │ │ │ ├── CSSwhat@0.4.7 
│ │ │ │ └── domutils@1.4.3 
│ │ │ ├── entities@0.5.0 
│ │ │ ├─┬ htmlparser2@3.4.0 
│ │ │ │ ├── domelementtype@1.3.0 
│ │ │ │ ├── domhandler@2.2.1 
│ │ │ │ ├── domutils@1.3.0 
│ │ │ │ └─┬ readable-stream@1.1.14 
│ │ │ │   ├── core-util-is@1.0.2 
│ │ │ │   ├── isarray@0.0.1 
│ │ │ │   └── string_decoder@0.10.31 
│ │ │ └── underscore@1.5.2 
│ │ ├─┬ class-extend@0.1.2 
│ │ │ └── object-assign@2.1.1 
│ │ ├── dargs@0.1.0 
│ │ ├── debug@0.7.4 
│ │ ├── diff@1.0.8 
│ │ ├─┬ download@0.1.19 
│ │ │ ├─┬ decompress@0.2.5 
│ │ │ │ ├── adm-zip@0.4.7 
│ │ │ │ ├─┬ ext-name@1.0.1 
│ │ │ │ │ └─┬ ext-list@0.2.0 
│ │ │ │ │   └─┬ got@0.2.0 
│ │ │ │ │     └── object-assign@0.3.1 
│ │ │ │ ├─┬ stream-combiner@0.0.4 
│ │ │ │ │ └── duplexer@0.1.1 
│ │ │ │ ├─┬ tar@0.1.20 
│ │ │ │ │ ├── block-stream@0.0.9 
│ │ │ │ │ └─┬ fstream@0.1.31 
│ │ │ │ │   ├─┬ graceful-fs@3.0.11 
│ │ │ │ │   │ └── natives@1.1.0 
│ │ │ │ │   └─┬ mkdirp@0.5.1 
│ │ │ │ │     └── minimist@0.0.8 
│ │ │ │ └─┬ tempfile@0.1.3 
│ │ │ │   └── uuid@1.4.2 
│ │ │ ├── each-async@0.1.3 
│ │ │ ├── get-stdin@0.1.0 
│ │ │ ├── get-urls@0.1.2 
│ │ │ ├─┬ nopt@2.2.1 
│ │ │ │ └── abbrev@1.1.1 
│ │ │ ├─┬ request@2.83.0 
│ │ │ │ ├── aws-sign2@0.7.0 
│ │ │ │ ├── aws4@1.6.0 
│ │ │ │ ├── caseless@0.12.0 
│ │ │ │ ├─┬ combined-stream@1.0.5 
│ │ │ │ │ └── delayed-stream@1.0.0 
│ │ │ │ ├── extend@3.0.1 
│ │ │ │ ├── forever-agent@0.6.1 
│ │ │ │ ├─┬ form-data@2.3.1 
│ │ │ │ │ └── asynckit@0.4.0 
│ │ │ │ ├─┬ har-validator@5.0.3 
│ │ │ │ │ ├─┬ ajv@5.2.3 
│ │ │ │ │ │ ├── co@4.6.0 
│ │ │ │ │ │ ├── fast-deep-equal@1.0.0 
│ │ │ │ │ │ ├── json-schema-traverse@0.3.1 
│ │ │ │ │ │ └─┬ json-stable-stringify@1.0.1 
│ │ │ │ │ │   └── jsonify@0.0.0 
│ │ │ │ │ └── har-schema@2.0.0 
│ │ │ │ ├─┬ hawk@6.0.2 
│ │ │ │ │ ├── boom@4.3.1 
│ │ │ │ │ ├─┬ cryptiles@3.1.2 
│ │ │ │ │ │ └── boom@5.2.0 
│ │ │ │ │ ├── hoek@4.2.0 
│ │ │ │ │ └── sntp@2.0.2 
│ │ │ │ ├─┬ http-signature@1.2.0 
│ │ │ │ │ ├── assert-plus@1.0.0 
│ │ │ │ │ ├─┬ jsprim@1.4.1 
│ │ │ │ │ │ ├── extsprintf@1.3.0 
│ │ │ │ │ │ ├── json-schema@0.2.3 
│ │ │ │ │ │ └── verror@1.10.0 
│ │ │ │ │ └─┬ sshpk@1.13.1 
│ │ │ │ │   ├── asn1@0.2.3 
│ │ │ │ │   ├── bcrypt-pbkdf@1.0.1 
│ │ │ │ │   ├── dashdash@1.14.1 
│ │ │ │ │   ├── ecc-jsbn@0.1.1 
│ │ │ │ │   ├── getpass@0.1.7 
│ │ │ │ │   ├── jsbn@0.1.1 
│ │ │ │ │   └── tweetnacl@0.14.5 
│ │ │ │ ├── is-typedarray@1.0.0 
│ │ │ │ ├── isstream@0.1.2 
│ │ │ │ ├─┬ mime-types@2.1.17 
│ │ │ │ │ └── mime-db@1.30.0 
│ │ │ │ ├── oauth-sign@0.8.2 
│ │ │ │ ├── performance-now@2.1.0 
│ │ │ │ ├── qs@6.5.1 
│ │ │ │ ├── safe-buffer@5.1.1 
│ │ │ │ ├── stringstream@0.0.5 
│ │ │ │ ├── tough-cookie@2.3.3 
│ │ │ │ ├── tunnel-agent@0.6.0 
│ │ │ │ └── uuid@3.1.0 
│ │ │ └─┬ through2@0.4.2 
│ │ │   ├── readable-stream@1.0.34 
│ │ │   └─┬ xtend@2.1.2 
│ │ │     └── object-keys@0.4.0 
│ │ ├─┬ file-utils@0.1.5 
│ │ │ ├── isbinaryfile@0.1.9 
│ │ │ ├── lodash@2.1.0 
│ │ │ └─┬ minimatch@0.2.14 
│ │ │   ├── lru-cache@2.7.3 
│ │ │   └── sigmund@1.0.1 
│ │ ├── findup-sync@0.1.3 
│ │ ├─┬ glob@3.2.11 
│ │ │ ├── inherits@2.0.3 
│ │ │ └── minimatch@0.3.0 
│ │ ├── iconv-lite@0.2.11 
│ │ ├─┬ inquirer@0.4.1 
│ │ │ ├─┬ cli-color@0.2.3 
│ │ │ │ ├── es5-ext@0.9.2 
│ │ │ │ └─┬ memoizee@0.2.6 
│ │ │ │   ├── event-emitter@0.2.2 
│ │ │ │   └── next-tick@0.1.0 
│ │ │ ├── mute-stream@0.0.4 
│ │ │ ├─┬ readline2@0.1.1 
│ │ │ │ └─┬ strip-ansi@2.0.1 
│ │ │ │   └── ansi-regex@1.1.1 
│ │ │ └── through@2.3.8 
│ │ ├── isbinaryfile@2.0.4 
│ │ ├── lodash@2.4.2 
│ │ ├── mime@1.2.11 
│ │ ├── mkdirp@0.3.5 
│ │ ├─┬ request@2.30.0 
│ │ │ ├── aws-sign2@0.5.0 
│ │ │ ├── forever-agent@0.5.2 
│ │ │ ├─┬ form-data@0.1.4 
│ │ │ │ ├── async@0.9.2 
│ │ │ │ └─┬ combined-stream@0.0.7 
│ │ │ │   └── delayed-stream@0.0.5 
│ │ │ ├─┬ hawk@1.0.0 
│ │ │ │ ├── boom@0.4.2 
│ │ │ │ ├── cryptiles@0.2.2 
│ │ │ │ ├── hoek@0.9.1 
│ │ │ │ └── sntp@0.2.4 
│ │ │ ├─┬ http-signature@0.10.1 
│ │ │ │ ├── asn1@0.1.11 
│ │ │ │ ├── assert-plus@0.1.5 
│ │ │ │ └── ctype@0.5.3 
│ │ │ ├── json-stringify-safe@5.0.1 
│ │ │ ├── node-uuid@1.4.8 
│ │ │ ├── oauth-sign@0.3.0 
│ │ │ ├── qs@0.6.6 
│ │ │ ├─┬ tough-cookie@0.9.15 
│ │ │ │ └── punycode@1.4.1 
│ │ │ └── tunnel-agent@0.3.0 
│ │ ├── rimraf@2.2.8 
│ │ ├── shelljs@0.2.6 
│ │ ├── text-table@0.2.0 
│ │ └── underscore.string@2.3.3 
│ └─┬ yosay@0.1.0 
│   ├── minimist@0.0.9 
│   ├── pad-component@0.0.1 
│   └── word-wrap@0.1.3 
└── UNMET PEER DEPENDENCY yo@>=1.0.0

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/generator-gulpx/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 24% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","defineProperties","call","Date","RegExp","join","parseInt","sort","some"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0245 took 16.8017s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (46:2) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
// readdir(PREFIX) as ENTRIES
//   If fails, END
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $])
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $])
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.



module.exports = glob

var fs = require("fs")
, minimatch = require("minimatch")
, Minimatch = minimatch.Minimatch
, inherits = require("inherits")
, EE = require("events").EventEmitter
, path = require("path")
, isDir = {}
, assert = require("assert").ok

function glob (pattern, options, cb) {
  if (typeof options === "function") cb = options, options = {}
  if (!options) options = {}

  if (typeof options === "number") {
    deprecated()
    return
  }

  var g = new Glob(pattern, options, cb)
  return g.sync ? g.found : g
}

glob.fnmatch = deprecated

function deprecated () {
  throw new Error("glob's interface has changed. Please see the docs.")
}

glob.sync = globSync
function globSync (pattern, options) {
  if (typeof options === "number") {
    deprecated()
    return
  }

  options = options || {}
  options.sync = true
  return glob(pattern, options)
}

this._processingEmitQueue = false

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (!(this instanceof Glob)) {
    return new Glob(pattern, options, cb)
  }

  if (typeof options === "function") {
    cb = options
    options = null
  }

  if (typeof cb === "function") {
    this.on("error", cb)
    this.on("end", function (matches) {
      cb(null, matches)
    })
  }

  options = options || {}

  this._endEmitted = false
  this.EOF = {}
  this._emitQueue = []

  this.paused = false
  this._processingEmitQueue = false

  this.maxDepth = options.maxDepth || 1000
  this.maxLength = options.maxLength || Infinity
  this.cache = options.cache || {}
  this.statCache = options.statCache || {}

  this.changedCwd = false
  var cwd = process.cwd()
  if (!options.hasOwnProperty("cwd")) this.cwd = cwd
  else {
    this.cwd = options.cwd
    this.changedCwd = path.resolve(options.cwd) !== cwd
  }

  this.root = options.root || path.resolve(this.cwd, "/")
  this.root = path.resolve(this.root)
  if (process.platform === "win32")
    this.root = this.root.replace(/\\/g, "/")

  this.nomount = !!options.nomount

  if (!pattern) {
    throw new Error("must provide pattern")
  }

  // base-matching: just use globstar for that.
  if (options.matchBase && -1 === pattern.indexOf("/")) {
    if (options.noglobstar) {
      throw new Error("base matching requires globstar")
    }
    pattern = "**/" + pattern
  }

  this.strict = options.strict !== false
  this.dot = !!options.dot
  this.mark = !!options.mark
  this.sync = !!options.sync
  this.nounique = !!options.nounique
  this.nonull = !!options.nonull
  this.nosort = !!options.nosort
  this.nocase = !!options.nocase
  this.stat = !!options.stat

  this.debug = !!options.debug || !!options.globDebug
  if (this.debug)
    this.log = console.error

  this.silent = !!options.silent

  var mm = this.minimatch = new Minimatch(pattern, options)
  this.options = mm.options
  pattern = this.pattern = mm.pattern

  this.error = null
  this.aborted = false

  // list of all the patterns that ** has resolved do, so
  // we can avoid visiting multiple times.
  this._globstars = {}

  EE.call(this)

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  this.minimatch.set.forEach(iterator.bind(this))
  function iterator (pattern, i, set) {
    this._process(pattern, 0, i, function (er) {
      if (er) this.emit("error", er)
      if (-- n <= 0) this._finish()
    })
  }
}

Glob.prototype.log = function () {}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)

  var nou = this.nounique
  , all = nou ? [] : {}

  for (var i = 0, l = this.matches.length; i < l; i ++) {
    var matches = this.matches[i]
    this.log("matches[%d] =", i, matches)
    // do like the shell, and spit out the literal glob
    if (!matches) {
      if (this.nonull) {
        var literal = this.minimatch.globSet[i]
        if (nou) all.push(literal)
        else all[literal] = true
      }
    } else {
      // had matches
      var m = Object.keys(matches)
      if (nou) all.push.apply(all, m)
      else m.forEach(function (m) {
        all[m] = true
      })
    }
  }

  if (!nou) all = Object.keys(all)

  if (!this.nosort) {
    all = all.sort(this.nocase ? alphasorti : alphasort)
  }

  if (this.mark) {
    // at *some* point we statted all of these
    all = all.map(this._mark, this)
  }

  this.log("emitting end", all)

  this.EOF = this.found = all
  this.emitMatch(this.EOF)
}

function alphasorti (a, b) {
  a = a.toLowerCase()
  b = b.toLowerCase()
  return alphasort(a, b)
}

function alphasort (a, b) {
  return a > b ? 1 : a < b ? -1 : 0
}

Glob.prototype._mark = function (p) {
  var c = this.cache[p]
  var m = p
  if (c) {
    var isDir = c === 2 || Array.isArray(c)
    var slash = p.slice(-1) === '/'

    if (isDir && !slash)
      m += '/'
    else if (!isDir && slash)
      m = m.slice(0, -1)

    if (m !== p) {
      this.statCache[m] = this.statCache[p]
      this.cache[m] = this.cache[p]
    }
  }

  return m
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit("abort")
}

Glob.prototype.pause = function () {
  if (this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = true
  this.emit("pause")
}

Glob.prototype.resume = function () {
  if (!this.paused) return
  if (this.sync)
    this.emit("error", new Error("Can't pause/resume sync glob"))
  this.paused = false
  this.emit("resume")
  this._processEmitQueue()
  //process.nextTick(this.emit.bind(this, "resume"))
}

Glob.prototype.emitMatch = function (m) {
  this.log('emitMatch', m)
  this._emitQueue.push(m)
  this._processEmitQueue()
}

Glob.prototype._processEmitQueue = function (m) {
  this.log("pEQ paused=%j processing=%j m=%j", this.paused,
           this._processingEmitQueue, m)
  var done = false
  while (!this._processingEmitQueue &&
         !this.paused) {
    this._processingEmitQueue = true
    var m = this._emitQueue.shift()
    this.log(">processEmitQueue", m === this.EOF ? ":EOF:" : m)
    if (!m) {
      this.log(">processEmitQueue, falsey m")
      this._processingEmitQueue = false
      break
    }

    if (m === this.EOF || !(this.mark && !this.stat)) {
      this.log("peq: unmarked, or eof")
      next.call(this, 0, false)
    } else if (this.statCache[m]) {
      var sc = this.statCache[m]
      var exists
      if (sc)
        exists = sc.isDirectory() ? 2 : 1
      this.log("peq: stat cached")
      next.call(this, exists, exists === 2)
    } else {
      this.log("peq: _stat, then next")
      this._stat(m, next)
    }

    function next(exists, isDir) {
      this.log("next", m, exists, isDir)
      var ev = m === this.EOF ? "end" : "match"

      // "end" can only happen once.
      assert(!this._endEmitted)
      if (ev === "end")
        this._endEmitted = true

      if (exists) {
        // Doesn't mean it necessarily doesn't exist, it's possible
        // we just didn't check because we don't care that much, or
        // this is EOF anyway.
        if (isDir && !m.match(/\/$/)) {
          m = m + "/"
        } else if (!isDir && m.match(/\/$/)) {
          m = m.replace(/\/+$/, "")
        }
      }
      this.log("emit", ev, m)
      this.emit(ev, m)
      this._processingEmitQueue = false
      if (done && m !== this.EOF && !this.paused)
        this._processEmitQueue()
    }
  }
  done = true
}

Glob.prototype._process = function (pattern, depth, index, cb_) {
  assert(this instanceof Glob)

  var cb = function cb (er, res) {
    assert(this instanceof Glob)
    if (this.paused) {
      if (!this._processQueue) {
        this._processQueue = []
        this.once("resume", function () {
          var q = this._processQueue
          this._processQueue = null
          q.forEach(function (cb) { cb() })
        })
      }
      this._processQueue.push(cb_.bind(this, er, res))
    } else {
      cb_.call(this, er, res)
    }
  }.bind(this)

  if (this.aborted) return cb()

  if (depth > this.maxDepth) return cb()

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === "string") {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      prefix = pattern.join("/")
      this._stat(prefix, function (exists, isDir) {
        // either it's there, or it isn't.
        // nothing more to do, either way.
        if (exists) {
          if (prefix && isAbsolute(prefix) && !this.nomount) {
            if (prefix.charAt(0) === "/") {
              prefix = path.join(this.root, prefix)
            } else {
              prefix = path.resolve(this.root, prefix)
            }
          }

          if (process.platform === "win32")
            prefix = prefix.replace(/\\/g, "/")

          this.matches[index] = this.matches[index] || {}
          this.matches[index][prefix] = true
          this.emitMatch(prefix)
        }
        return cb()
      })
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's "absolute" like /foo/bar,
      // or "relative" like "../baz"
      prefix = pattern.slice(0, n)
      prefix = prefix.join("/")
      break
  }

  // get the list of entries.
  var read
  if (prefix === null) read = "."
  else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
    if (!prefix || !isAbsolute(prefix)) {
      prefix = path.join("/", prefix)
    }
    read = prefix = path.resolve(prefix)

    // if (process.platform === "win32")
    //   read = prefix = prefix.replace(/^[a-zA-Z]:|\\/g, "/")

    this.log('absolute: ', prefix, this.root, pattern, read)
  } else {
    read = prefix
  }

  this.log('readdir(%j)', read, this.cwd, this.root)

  return this._readdir(read, function (er, entries) {
    if (er) {
      // not a directory!
      // this means that, whatever else comes after this, it can never match
      return cb()
    }

    // globstar is special
    if (pattern[n] === minimatch.GLOBSTAR) {
      // test without the globstar, and with every child both below
      // and replacing the globstar.
      var s = [ pattern.slice(0, n).concat(pattern.slice(n + 1)) ]
      entries.forEach(function (e) {
        if (e.charAt(0) === "." && !this.dot) return
        // instead of the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1)))
        // below the globstar
        s.push(pattern.slice(0, n).concat(e).concat(pattern.slice(n)))
      }, this)

      s = s.filter(function (pattern) {
        var key = gsKey(pattern)
        var seen = !this._globstars[key]
        this._globstars[key] = true
        return seen
      }, this)

      if (!s.length)
        return cb()

      // now asyncForEach over this
      var l = s.length
      , errState = null
      s.forEach(function (gsPattern) {
        this._process(gsPattern, depth + 1, index, function (er) {
          if (errState) return
          if (er) return cb(errState = er)
          if (--l <= 0) return cb()
        })
      }, this)

      return
    }

    // not a globstar
    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
    var pn = pattern[n]
    var rawGlob = pattern[n]._glob
    , dotOk = this.dot || rawGlob.charAt(0) === "."

    entries = entries.filter(function (e) {
      return (e.charAt(0) !== "." || dotOk) &&
             e.match(pattern[n])
    })

    // If n === pattern.length - 1, then there's no need for the extra stat
    // *unless* the user has specified "mark" or "stat" explicitly.
    // We know that they exist, since the readdir returned them.
    if (n === pattern.length - 1 &&
        !this.mark &&
        !this.stat) {
      entries.forEach(function (e) {
        if (prefix) {
          if (prefix !== "/") e = prefix + "/" + e
          else e = prefix + e
        }
        if (e.charAt(0) === "/" && !this.nomount) {
          e = path.join(this.root, e)
        }

        if (process.platform === "win32")
          e = e.replace(/\\/g, "/")

        this.matches[index] = this.matches[index] || {}
        this.matches[index][e] = true
        this.emitMatch(e)
      }, this)
      return cb.call(this)
    }


    // now test all the remaining entries as stand-ins for that part
    // of the pattern.
    var l = entries.length
    , errState = null
    if (l === 0) return cb() // no matches possible
    entries.forEach(function (e) {
      var p = pattern.slice(0, n).concat(e).concat(pattern.slice(n + 1))
      this._process(p, depth + 1, index, function (er) {
        if (errState) return
        if (er) return cb(errState = er)
        if (--l === 0) return cb.call(this)
      })
    }, this)
  })

}

function gsKey (pattern) {
  return '**' + pattern.map(function (p) {
    return (p === minimatch.GLOBSTAR) ? '**' : (''+p)
  }).join('/')
}

Glob.prototype._stat = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterStat(f, abs, cb, er)
  }

  this.log('stat', [this.cwd, f, '=', abs])

  if (!this.stat && this.cache.hasOwnProperty(f)) {
    var exists = this.cache[f]
    , isDir = exists && (Array.isArray(exists) || exists === 2)
    if (this.sync) return cb.call(this, !!exists, isDir)
    return process.nextTick(cb.bind(this, !!exists, isDir))
  }

  var stat = this.statCache[abs]
  if (this.sync || stat) {
    var er
    try {
      stat = fs.statSync(abs)
    } catch (e) {
      er = e
    }
    this._afterStat(f, abs, cb, er, stat)
  } else {
    fs.stat(abs, this._afterStat.bind(this, f, abs, cb))
  }
}

Glob.prototype._afterStat = function (f, abs, cb, er, stat) {
  var exists
  assert(this instanceof Glob)

  if (abs.slice(-1) === "/" && stat && !stat.isDirectory()) {
    this.log("should be ENOTDIR, fake it")

    er = new Error("ENOTDIR, not a directory '" + abs + "'")
    er.path = abs
    er.code = "ENOTDIR"
    stat = null
  }

  var emit = !this.statCache[abs]
  this.statCache[abs] = stat

  if (er || !stat) {
    exists = false
  } else {
    exists = stat.isDirectory() ? 2 : 1
    if (emit)
      this.emit('stat', f, stat)
  }
  this.cache[f] = this.cache[f] || exists
  cb.call(this, !!exists, exists === 2)
}

Glob.prototype._readdir = function (f, cb) {
  assert(this instanceof Glob)
  var abs = f
  if (f.charAt(0) === "/") {
    abs = path.join(this.root, f)
  } else if (isAbsolute(f)) {
    abs = f
  } else if (this.changedCwd) {
    abs = path.resolve(this.cwd, f)
  }

  if (f.length > this.maxLength) {
    var er = new Error("Path name too long")
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterReaddir(f, abs, cb, er)
  }

  this.log('readdir', [this.cwd, f, abs])
  if (this.cache.hasOwnProperty(f)) {
    var c = this.cache[f]
    if (Array.isArray(c)) {
      if (this.sync) return cb.call(this, null, c)
      return process.nextTick(cb.bind(this, null, c))
    }

    if (!c || c === 1) {
      // either ENOENT or ENOTDIR
      var code = c ? "ENOTDIR" : "ENOENT"
      , er = new Error((c ? "Not a directory" : "Not found") + ": " + f)
      er.path = f
      er.code = code
      this.log(f, er)
      if (this.sync) return cb.call(this, er)
      return process.nextTick(cb.bind(this, er))
    }

    // at this point, c === 2, meaning it's a dir, but we haven't
    // had to read it yet, or c === true, meaning it's *something*
    // but we don't have any idea what.  Need to read it, either way.
  }

  if (this.sync) {
    var er, entries
    try {
      entries = fs.readdirSync(abs)
    } catch (e) {
      er = e
    }
    return this._afterReaddir(f, abs, cb, er, entries)
  }

  fs.readdir(abs, this._afterReaddir.bind(this, f, abs, cb))
}

Glob.prototype._afterReaddir = function (f, abs, cb, er, entries) {
  assert(this instanceof Glob)
  if (entries && !er) {
    this.cache[f] = entries
    // if we haven't asked to stat everything for suresies, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.  This also gets us one step
    // further into ELOOP territory.
    if (!this.mark && !this.stat) {
      entries.forEach(function (e) {
        if (f === "/") e = f + e
        else e = f + "/" + e
        this.cache[e] = true
      }, this)
    }

    return cb.call(this, er, entries)
  }

  // now handle errors, and cache the information
  if (er) switch (er.code) {
    case "ENOTDIR": // totally normal. means it *does* exist.
      this.cache[f] = 1
      return cb.call(this, er)
    case "ENOENT": // not terribly unusual
    case "ELOOP":
    case "ENAMETOOLONG":
    case "UNKNOWN":
      this.cache[f] = false
      return cb.call(this, er)
    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict) this.emit("error", er)
      if (!this.silent) console.error("glob error", er)
      return cb.call(this, er)
  }
}

var isAbsolute = process.platform === "win32" ? absWin : absUnix

function absWin (p) {
  if (absUnix(p)) return true
  // pull off the device/UNC bit from a windows path.
  // from node's lib/path.js
  var splitDeviceRe =
      /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/
    , result = splitDeviceRe.exec(p)
    , device = result[1] || ''
    , isUnc = device && device.charAt(1) !== ':'
    , isAbsolute = !!result[2] || isUnc // UNC paths are always absolute

  return isAbsolute
}

function absUnix (p) {
  return p.charAt(0) === "/" || p === ""
}
 at SyntaxError: Unexpected token (46:2)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/generator-gulpx/node_modules/generator-gulpx/app/index.js. Coverage (Term): 7% Coverage (LOC): 7%
*- File /root/Targets/generator-gulpx/node_modules/yeoman-generator/main.js. Coverage (Term): 22% Coverage (LOC): 29%
*- File /root/Targets/generator-gulpx/node_modules/yeoman-generator/lib/env/index.js. Coverage (Term): 7% Coverage (LOC): 7%
*- File /root/Targets/generator-gulpx/node_modules/chalk/index.js. Coverage (Term): 60% Coverage (LOC): 70%
*- File /root/Targets/generator-gulpx/node_modules/ansi-styles/ansi-styles.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/generator-gulpx/node_modules/strip-ansi/index.js. Coverage (Term): 49% Coverage (LOC): 83%
*- File /root/Targets/generator-gulpx/node_modules/has-color/index.js. Coverage (Term): 52% Coverage (LOC): 44%
*- File /root/Targets/generator-gulpx/node_modules/lodash/dist/lodash.js. Coverage (Term): 19% Coverage (LOC): 27%
*- File /root/Targets/generator-gulpx/node_modules/debug/lib/debug.js. Coverage (Term): 37% Coverage (LOC): 59%
*- File /root/Targets/generator-gulpx/node_modules/yeoman-generator/lib/base.js. Coverage (Term): 3% Coverage (LOC): 3%
*- File /root/Targets/generator-gulpx/node_modules/async/lib/async.js. Coverage (Term): 11% Coverage (LOC): 16%
*- File /root/Targets/generator-gulpx/node_modules/findup-sync/lib/findup-sync.js. Coverage (Term): 17% Coverage (LOC): 25%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
