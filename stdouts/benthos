/root/Targets/benthos
└─┬ benthos@0.3.0 
  ├── identicon.js@1.3.0 
  ├── lodash.foreach@4.5.0 
  └── random-js@1.0.8 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/benthos/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 63% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","imul","repeat","floor","isFinite","toUpperCase","call"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0338 took 17.5971s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Octal literal in strict mode (204:11) on program /**
* A handy class to calculate color values.
*
* @version 1.0
* @author Robert Eisele <robert@xarg.org>
* @copyright Copyright (c) 2010, Robert Eisele
* @link http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/
* @license http://www.opensource.org/licenses/bsd-license.php BSD License
*
*/

(function() {

	// helper functions for that ctx
	function write(buffer, offs) {
		for (var i = 2; i < arguments.length; i++) {
			for (var j = 0; j < arguments[i].length; j++) {
				buffer[offs++] = arguments[i].charAt(j);
			}
		}
	}

	function byte2(w) {
		return String.fromCharCode((w >> 8) & 255, w & 255);
	}

	function byte4(w) {
		return String.fromCharCode((w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w & 255);
	}

	function byte2lsb(w) {
		return String.fromCharCode(w & 255, (w >> 8) & 255);
	}

	// modified from original source to support NPM
	var PNGlib = function(width,height,depth) {

		this.width   = width;
		this.height  = height;
		this.depth   = depth;

		// pixel data and row filter identifier size
		this.pix_size = height * (width + 1);

		// deflate header, pix_size, block headers, adler32 checksum
		this.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4;

		// offsets and sizes of Png chunks
		this.ihdr_offs = 0;									// IHDR offset and size
		this.ihdr_size = 4 + 4 + 13 + 4;
		this.plte_offs = this.ihdr_offs + this.ihdr_size;	// PLTE offset and size
		this.plte_size = 4 + 4 + 3 * depth + 4;
		this.trns_offs = this.plte_offs + this.plte_size;	// tRNS offset and size
		this.trns_size = 4 + 4 + depth + 4;
		this.idat_offs = this.trns_offs + this.trns_size;	// IDAT offset and size
		this.idat_size = 4 + 4 + this.data_size + 4;
		this.iend_offs = this.idat_offs + this.idat_size;	// IEND offset and size
		this.iend_size = 4 + 4 + 4;
		this.buffer_size  = this.iend_offs + this.iend_size;	// total PNG size

		this.buffer  = new Array();
		this.palette = new Object();
		this.pindex  = 0;

		var _crc32 = new Array();

		// initialize buffer with zero bytes
		for (var i = 0; i < this.buffer_size; i++) {
			this.buffer[i] = "\x00";
		}

		// initialize non-zero elements
		write(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), "\x08\x03");
		write(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');
		write(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');
		write(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');
		write(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND');

		// initialize deflate header
		var header = ((8 + (7 << 4)) << 8) | (3 << 6);
		header+= 31 - (header % 31);

		write(this.buffer, this.idat_offs + 8, byte2(header));

		// initialize deflate block headers
		for (var i = 0; (i << 16) - 1 < this.pix_size; i++) {
			var size, bits;
			if (i + 0xffff < this.pix_size) {
				size = 0xffff;
				bits = "\x00";
			} else {
				size = this.pix_size - (i << 16) - i;
				bits = "\x01";
			}
			write(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));
		}

		/* Create crc32 lookup table */
		for (var i = 0; i < 256; i++) {
			var c = i;
			for (var j = 0; j < 8; j++) {
				if (c & 1) {
					c = -306674912 ^ ((c >> 1) & 0x7fffffff);
				} else {
					c = (c >> 1) & 0x7fffffff;
				}
			}
			_crc32[i] = c;
		}

		// compute the index into a png for a given pixel
		this.index = function(x,y) {
			var i = y * (this.width + 1) + x + 1;
			var j = this.idat_offs + 8 + 2 + 5 * Math.floor((i / 0xffff) + 1) + i;
			return j;
		}

		// convert a color and build up the palette
		this.color = function(red, green, blue, alpha) {

			alpha = alpha >= 0 ? alpha : 255;
			var color = (((((alpha << 8) | red) << 8) | green) << 8) | blue;

			if (typeof this.palette[color] == "undefined") {
				if (this.pindex == this.depth) return "\x00";

				var ndx = this.plte_offs + 8 + 3 * this.pindex;

				this.buffer[ndx + 0] = String.fromCharCode(red);
				this.buffer[ndx + 1] = String.fromCharCode(green);
				this.buffer[ndx + 2] = String.fromCharCode(blue);
				this.buffer[this.trns_offs+8+this.pindex] = String.fromCharCode(alpha);

				this.palette[color] = String.fromCharCode(this.pindex++);
			}
			return this.palette[color];
		}

		// output a PNG string, Base64 encoded
		this.getBase64 = function() {

			var s = this.getDump();

			var ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
			var c1, c2, c3, e1, e2, e3, e4;
			var l = s.length;
			var i = 0;
			var r = "";

			do {
				c1 = s.charCodeAt(i);
				e1 = c1 >> 2;
				c2 = s.charCodeAt(i+1);
				e2 = ((c1 & 3) << 4) | (c2 >> 4);
				c3 = s.charCodeAt(i+2);
				if (l < i+2) { e3 = 64; } else { e3 = ((c2 & 0xf) << 2) | (c3 >> 6); }
				if (l < i+3) { e4 = 64; } else { e4 = c3 & 0x3f; }
				r+= ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);
			} while ((i+= 3) < l);
			return r;
		}

		// output a PNG string
		this.getDump = function() {

			// compute adler32 of output pixels + row filter bytes
			var BASE = 65521; /* largest prime smaller than 65536 */
			var NMAX = 5552;  /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */
			var s1 = 1;
			var s2 = 0;
			var n = NMAX;

			for (var y = 0; y < this.height; y++) {
				for (var x = -1; x < this.width; x++) {
					s1+= this.buffer[this.index(x, y)].charCodeAt(0);
					s2+= s1;
					if ((n-= 1) == 0) {
						s1%= BASE;
						s2%= BASE;
						n = NMAX;
					}
				}
			}
			s1%= BASE;
			s2%= BASE;
			write(this.buffer, this.idat_offs + this.idat_size - 8, byte4((s2 << 16) | s1));

			// compute crc32 of the PNG chunks
			function crc32(png, offs, size) {
				var crc = -1;
				for (var i = 4; i < size-4; i += 1) {
					crc = _crc32[(crc ^ png[offs+i].charCodeAt(0)) & 0xff] ^ ((crc >> 8) & 0x00ffffff);
				}
				write(png, offs+size-4, byte4(crc ^ -1));
			}

			crc32(this.buffer, this.ihdr_offs, this.ihdr_size);
			crc32(this.buffer, this.plte_offs, this.plte_size);
			crc32(this.buffer, this.trns_offs, this.trns_size);
			crc32(this.buffer, this.idat_offs, this.idat_size);
			crc32(this.buffer, this.iend_offs, this.iend_size);

			// convert PNG to string
			return "\211PNG\r\n\032\n"+this.buffer.join('');
		}
	}

	// modified from original source to support NPM
	if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
		module.exports = PNGlib;
	} else {
		window.PNGlib = PNGlib;
	}
})();
 at SyntaxError: Octal literal in strict mode (204:11)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readEscapedChar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:3023:16)
    at Parser.pp$7.readString (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2935:23)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2724:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$1.parseReturnStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:832:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:699:34)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/benthos/node_modules/benthos/build/benthos.js. Coverage (Term): 29% Coverage (LOC): 34%
*- File /root/Targets/benthos/node_modules/benthos/build/config.js. Coverage (Term): 46% Coverage (LOC): 50%
*- File /root/Targets/benthos/node_modules/benthos/build/datasets/index.js. Coverage (Term): 81% Coverage (LOC): 93%
*- File /root/Targets/benthos/node_modules/benthos/build/datasets/en/index.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/benthos/node_modules/benthos/build/datasets/en/gender_data.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/benthos/node_modules/benthos/build/datasets/en/lastNames_data.js. Coverage (Term): 100% Coverage (LOC): 100%
*- File /root/Targets/benthos/node_modules/benthos/build/datasets/en/firstNames_data.js. Coverage (Term): 100% Coverage (LOC): 100%
*- File /root/Targets/benthos/node_modules/benthos/build/datasets/en/location_data.js. Coverage (Term): 100% Coverage (LOC): 100%
*- File /root/Targets/benthos/node_modules/benthos/build/datasets/en/text_data.js. Coverage (Term): 100% Coverage (LOC): 100%
*- File /root/Targets/benthos/node_modules/benthos/build/utilities/errors.js. Coverage (Term): 47% Coverage (LOC): 74%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/index.js. Coverage (Term): 61% Coverage (LOC): 75%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/ipv4.js. Coverage (Term): 44% Coverage (LOC): 88%
*- File /root/Targets/benthos/node_modules/benthos/build/utilities/random.js. Coverage (Term): 56% Coverage (LOC): 84%
*- File /root/Targets/benthos/node_modules/random-js/lib/random.js. Coverage (Term): 17% Coverage (LOC): 30%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/ipv6.js. Coverage (Term): 41% Coverage (LOC): 50%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/email.js. Coverage (Term): 60% Coverage (LOC): 89%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/string.js. Coverage (Term): 36% Coverage (LOC): 45%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/domain.js. Coverage (Term): 72% Coverage (LOC): 94%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/url.js. Coverage (Term): 13% Coverage (LOC): 21%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/image.js. Coverage (Term): 28% Coverage (LOC): 44%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/tag.js. Coverage (Term): 60% Coverage (LOC): 78%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/words.js. Coverage (Term): 49% Coverage (LOC): 60%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/color.js. Coverage (Term): 14% Coverage (LOC): 23%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/integer.js. Coverage (Term): 22% Coverage (LOC): 36%
*- File /root/Targets/benthos/node_modules/benthos/build/utilities/parser.js. Coverage (Term): 13% Coverage (LOC): 14%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/float.js. Coverage (Term): 26% Coverage (LOC): 42%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/boolean.js. Coverage (Term): 70% Coverage (LOC): 64%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/uuid.js. Coverage (Term): 38% Coverage (LOC): 60%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/hash.js. Coverage (Term): 32% Coverage (LOC): 47%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/md5.js. Coverage (Term): 6% Coverage (LOC): 13%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/serial.js. Coverage (Term): 29% Coverage (LOC): 41%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/name.js. Coverage (Term): 65% Coverage (LOC): 89%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/firstName.js. Coverage (Term): 44% Coverage (LOC): 73%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/lastName.js. Coverage (Term): 65% Coverage (LOC): 80%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/gender.js. Coverage (Term): 60% Coverage (LOC): 73%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/phone.js. Coverage (Term): 49% Coverage (LOC): 58%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/street.js. Coverage (Term): 40% Coverage (LOC): 56%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/country.js. Coverage (Term): 54% Coverage (LOC): 69%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/address.js. Coverage (Term): 40% Coverage (LOC): 60%
*- File /root/Targets/benthos/node_modules/benthos/build/functions/identicon.js. Coverage (Term): 36% Coverage (LOC): 53%
*- File /root/Targets/benthos/node_modules/identicon.js/identicon.js. Coverage (Term): 5% Coverage (LOC): 6%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
