/root/Targets/html5boiler
└─┬ html5boiler@0.0.9 
  └── commander@2.11.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/html5boiler/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0537 took 1.6079s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #! /usr/bin/env node
/*
 * Boiler
 * https://github.com/ccoles/boiler
 *
 * Copyright (c) 2013 Craig Coles
 * Licensed under the MIT license.
 */

'use strict';

var program = require('commander');
var fs = require('fs');

program
  .version('0.1.0')
  .option('--useresetcss', 'do you want to use reset.css instead of normalize?',Boolean)
  .parse(process.argv);

if(program.useresetcss === "undefined") {
	program.useresetcss = false;	
}

var baseDir = __dirname+'/html5BoilerPlate/';

function readFile(path){

	fs.readFile(path,{encoding:'utf8'},function(err,data){
		
		writeFile(path,data);	

	});

}

function getFileNameFromPath(path){
	
	var nm = path.split("/"),
		fileToWrite = nm[nm.length - 1];

		return fileToWrite;
}

function writeFile(path,data){

	var fileToWrite = getFileNameFromPath(path),
		dirName = getLastDirectoryInPath(path);

	if(dirName.toLowerCase() !== "html5boilerplate") {
		fileToWrite = dirName + "/" + fileToWrite;
	}

	fs.writeFile(fileToWrite,data,{encoding:'utf8'},function(err){
		
		if(err) {
			throw err;
		} 

	});

}

function getLastDirectoryInPath(path){

	var path = path || false,
		num = 1,
		dirs = null,
		lastDir = null;

	if(path) {

		dirs = path.split("/");
		
		for(var i = 0; i < dirs.length;i++){
			
			lastDir = dirs[dirs.length - num];

			if(lastDir.indexOf(".") >= 0) {

				num++;

			} else {

				break;

			}
		}

		return lastDir;
	}

}

function createDirectory(path){

	var exists = fs.existsSync(path);
	
	if(!exists) {
		fs.mkdir(path);
	}

	return;
}

function createSubDirectories(subDirObj){

	var subDirObj = subDirObj || [],
		dir = null,
		length = subDirObj.length,
		exists = false,
		i = 0;

	for(i; i < length;i++) {
		
		dir = getLastDirectoryInPath(subDirObj[i]);
		
		exists = fs.existsSync(dir);

		if(!exists) {

			createDirectory(dir);

			readDirectory(baseDir + dir + "/");

		}
		
	}

}

function readDirectory(path,subDir){

	var subDirObj = [],
		subDir = subDir || false,
		i = 0,
		stat = null;

		
	fs.exists(path,function(exists){
		
		if(exists){

			fs.readdir(path,function(err,files){
				
				for(i; i < files.length;i++){
					
					stat = fs.statSync(path+files[i]);

					if(stat.isFile()) {
						
						readFile(path+files[i]);

					} else if(stat.isDirectory()){

						subDirObj.push(path+files[i]);

					} else {

						return;
					}
					
				}

				createSubDirectories(subDirObj);

			});

		} else {

			return;

		}

	});

}

function checkDone(){

	//this should check the number of files and directories in the source and then in the destination, if nums are the same it's done (boiled)
}

function init(path){

	readDirectory(path);

}

init(baseDir);
	










 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
