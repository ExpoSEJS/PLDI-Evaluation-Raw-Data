/root/Targets/dawnjs
└─┬ dawnjs@1.10.5 
  ├─┬ cheerio@0.19.0 
  │ ├─┬ css-select@1.0.0 
  │ │ ├── boolbase@1.0.0 
  │ │ ├── css-what@1.0.0 
  │ │ ├── domutils@1.4.3 
  │ │ └── nth-check@1.0.1 
  │ ├─┬ dom-serializer@0.1.0 
  │ │ └── domelementtype@1.1.3 
  │ ├── entities@1.1.1 
  │ ├─┬ htmlparser2@3.8.3 
  │ │ ├── domelementtype@1.3.0 
  │ │ ├── domhandler@2.3.0 
  │ │ ├── domutils@1.5.1 
  │ │ ├── entities@1.0.0 
  │ │ └─┬ readable-stream@1.1.14 
  │ │   ├── core-util-is@1.0.2 
  │ │   ├── inherits@2.0.3 
  │ │   ├── isarray@0.0.1 
  │ │   └── string_decoder@0.10.31 
  │ └── lodash@3.10.1 
  ├── cmdline@0.0.5 
  ├─┬ console.table@0.4.0 
  │ └── easy-table@0.3.0 
  ├── formidable@1.0.17 
  ├─┬ less@2.5.1 
  │ ├─┬ errno@0.1.4 
  │ │ └── prr@0.0.0 
  │ ├─┬ graceful-fs@3.0.11 
  │ │ └── natives@1.1.0 
  │ ├── image-size@0.3.5 
  │ ├── mime@1.4.1 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ ├─┬ promise@6.1.0 
  │ │ └── asap@1.0.0 
  │ ├─┬ request@2.83.0 
  │ │ ├── aws-sign2@0.7.0 
  │ │ ├── aws4@1.6.0 
  │ │ ├── caseless@0.12.0 
  │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ └── delayed-stream@1.0.0 
  │ │ ├── extend@3.0.1 
  │ │ ├── forever-agent@0.6.1 
  │ │ ├─┬ form-data@2.3.1 
  │ │ │ └── asynckit@0.4.0 
  │ │ ├─┬ har-validator@5.0.3 
  │ │ │ ├─┬ ajv@5.2.3 
  │ │ │ │ ├── co@4.6.0 
  │ │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │ │   └── jsonify@0.0.0 
  │ │ │ └── har-schema@2.0.0 
  │ │ ├─┬ hawk@6.0.2 
  │ │ │ ├── boom@4.3.1 
  │ │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ │ └── boom@5.2.0 
  │ │ │ ├── hoek@4.2.0 
  │ │ │ └── sntp@2.0.2 
  │ │ ├─┬ http-signature@1.2.0 
  │ │ │ ├── assert-plus@1.0.0 
  │ │ │ ├─┬ jsprim@1.4.1 
  │ │ │ │ ├── extsprintf@1.3.0 
  │ │ │ │ ├── json-schema@0.2.3 
  │ │ │ │ └── verror@1.10.0 
  │ │ │ └─┬ sshpk@1.13.1 
  │ │ │   ├── asn1@0.2.3 
  │ │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │   ├── dashdash@1.14.1 
  │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │   ├── getpass@0.1.7 
  │ │ │   ├── jsbn@0.1.1 
  │ │ │   └── tweetnacl@0.14.5 
  │ │ ├── is-typedarray@1.0.0 
  │ │ ├── isstream@0.1.2 
  │ │ ├── json-stringify-safe@5.0.1 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ ├── oauth-sign@0.8.2 
  │ │ ├── performance-now@2.1.0 
  │ │ ├── qs@6.5.1 
  │ │ ├── safe-buffer@5.1.1 
  │ │ ├── stringstream@0.0.5 
  │ │ ├─┬ tough-cookie@2.3.3 
  │ │ │ └── punycode@1.4.1 
  │ │ ├── tunnel-agent@0.6.0 
  │ │ └── uuid@3.1.0 
  │ └─┬ source-map@0.4.4 
  │   └── amdefine@1.0.1 
  ├── real-utils@0.0.1 
  ├─┬ tpjs@3.8.3 
  │ ├─┬ cmdline@2.0.3 
  │ │ └── cify@2.1.11 
  │ ├── ntils@2.1.2 
  │ └─┬ uglify-js@2.8.29 
  │   ├── source-map@0.5.7 
  │   ├── uglify-to-browserify@1.0.2 
  │   └─┬ yargs@3.10.0 
  │     ├── camelcase@1.2.1 
  │     ├─┬ cliui@2.1.0 
  │     │ ├─┬ center-align@0.1.3 
  │     │ │ ├─┬ align-text@0.1.4 
  │     │ │ │ ├─┬ kind-of@3.2.2 
  │     │ │ │ │ └── is-buffer@1.1.5 
  │     │ │ │ ├── longest@1.0.1 
  │     │ │ │ └── repeat-string@1.6.1 
  │     │ │ └── lazy-cache@1.0.4 
  │     │ ├── right-align@0.1.3 
  │     │ └── wordwrap@0.0.2 
  │     ├── decamelize@1.2.0 
  │     └── window-size@0.1.0 
  ├─┬ watch@0.16.0 
  │ ├─┬ exec-sh@0.2.1 
  │ │ └── merge@1.2.0 
  │ └── minimist@1.2.0 
  └─┬ xml2js@0.4.19 
    ├── sax@1.2.4 
    └── xmlbuilder@9.0.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/dawnjs/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","parse","toUpperCase","join","Array","call"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.025 took 5.2993s
*-- Errors occured in test {"_bound":0}
* Error: Error: ENAMETOOLONG: name too long, mkdir '/usr/etc/.Dawnjsfunction (regex, w) {
                jalangiLabel7:
                    while (true) {
                        try {
                            J$.Fe(1281, arguments.callee, this, arguments);
                            arguments = J$.N(1289, 'arguments', arguments, 4);
                            regex = J$.N(1297, 'regex', regex, 4);
                            w = J$.N(1305, 'w', w, 4);
                            J$.N(1313, 'result', result, 0);
                            J$.N(1321, 'next_start', next_start, 0);
                            J$.N(1329, 'next_split', next_split, 0);
                            J$.N(1337, 'replace_portion', replace_portion, 0);
                            J$.X1(937, J$.M(929, J$.R(889, 'console', console, 2), 'log', 0)(J$.B(130, '+', J$.B(122, '+', J$.B(114, '+', J$.T(897, 'TODO: Replace prototype is new and needs better modeling ', 21, false), J$.R(905, 'regex', regex, 0), 0), J$.T(913, ' and w ', 21, false), 0), J$.R(921, 'w', w, 0), 0)));
                            var result = J$.X1(961, J$.W(953, 'result', J$.R(945, 'this', this, 0), result, 1));
                            var next_start = J$.X1(985, J$.W(977, 'next_start', J$.T(969, 0, 22, false), next_start, 1));
                            do {
                                var next_split = J$.X1(1041, J$.W(1033, 'next_split', J$.M(1025, J$.R(993, 'result', result, 0), 'substr', 0)(J$.R(1001, 'next_start', next_start, 0), J$.G(1017, J$.R(1009, 'result', result, 0), 'length', 0)), next_split, 1));
                                var replace_portion = J$.X1(1097, J$.W(1089, 'replace_portion', J$.F(1081, J$.R(1049, 'secret_replace_once', secret_replace_once, 1), 0)(J$.R(1057, 'next_split', next_split, 0), J$.R(1065, 'regex', regex, 0), J$.R(1073, 'w', w, 0)), replace_portion, 1));
                                if (J$.X1(7001, J$.C(64, J$.B(138, '===', J$.R(1105, 'replace_portion', replace_portion, 0), J$.T(1113, undefined, 24, false), 0)))) {
                                    break;
                                }
                                J$.X1(1185, result = J$.W(1177, 'result', J$.B(146, '+', J$.M(1145, J$.R(1121, 'result', result, 0), 'substr', 0)(J$.T(1129, 0, 22, false), J$.R(1137, 'next_start', next_start, 0)), J$.G(1169, J$.R(1153, 'replace_portion', replace_portion, 0), J$.T(1161, 0, 22, false), 4), 0), result, 0));
                                J$.X1(1233, next_start = J$.W(1225, 'next_start', J$.B(154, '+', J$.R(1217, 'next_start', next_start, 0), J$.G(1209, J$.R(1193, 'replace_portion', replace_portion, 0), J$.T(1201, 1, 22, false), 4), 0), next_start, 0));
                            } while (J$.X1(7009, J$.C(72, J$.G(1249, J$.R(1241, 'regex', regex, 0), 'global', 0))));
                            return J$.X1(1273, J$.Rt(1265, J$.R(1257, 'result', result, 0)));
                        } catch (J$e) {
                            J$.Ex(7017, J$e);
                        } finally {
                            if (J$.Fr(7025))
                                continue jalangiLabel7;
                            else
                                return J$.Ra();
                        }
                    }
            }function (regex) {
                jalangiLabel8:
                    while (true) {
                        try {
                            J$.Fe(1769, arguments.callee, this, arguments);
                            arguments = J$.N(1777, 'arguments', arguments, 4);
                            regex = J$.N(1785, 'regex', regex, 4);
                            J$.N(1793, 'result', result, 0);
                            J$.N(1801, 'remaining', remaining, 0);
                            J$.N(1809, 'match', match, 0);
                            J$.X1(1417, J$.M(1409, J$.R(1385, 'console', console, 2), 'log', 0)(J$.B(162, '+', J$.T(1393, 'TODO: Replace prototype is new and needs better modeling ', 21, false), J$.R(1401, 'regex', regex, 0), 0)));
                            var result = J$.X1(1441, J$.W(1433, 'result', J$.T(1425, [], 10, false), result, 1));
                            var remaining = J$.X1(1465, J$.W(1457, 'remaining', J$.R(1449, 'this', this, 0), remaining, 1));
                            do {
                                var match = J$.X1(1505, J$.W(1497, 'match', J$.M(1489, J$.R(1473, 'remaining', remaining, 0), 'match', 0)(J$.R(1481, 'regex', regex, 0)), match, 1));
                                if (J$.X1(7033, J$.C(80, J$.U(170, '!', J$.R(1513, 'match', match, 0))))) {
                                    break;
                                }
                                J$.X1(1577, J$.M(1569, J$.R(1521, 'result', result, 0), 'push', 0)(J$.M(1561, J$.R(1529, 'remaining', remaining, 0), 'substr', 0)(J$.T(1537, 0, 22, false), J$.G(1553, J$.R(1545, 'match', match, 0), 'index', 0))));
                                J$.X1(1673, remaining = J$.W(1665, 'remaining', J$.M(1657, J$.R(1585, 'remaining', remaining, 0), 'substr', 0)(J$.B(178, '+', J$.G(1601, J$.R(1593, 'match', match, 0), 'index', 0), J$.G(1633, J$.G(1625, J$.R(1609, 'match', match, 0), J$.T(1617, 0, 22, false), 4), 'length', 0), 0), J$.G(1649, J$.R(1641, 'remaining', remaining, 0), 'length', 0)), remaining, 0));
                            } while (J$.X1(7041, J$.C(88, J$.T(1681, true, 23, false))));
                            if (J$.X1(7049, J$.C(96, J$.B(186, '>', J$.G(1697, J$.R(1689, 'remaining', remaining, 0), 'length', 0), J$.T(1705, 0, 22, false), 0)))) {
                                J$.X1(1737, J$.M(1729, J$.R(1713, 'result', result, 0), 'push', 0)(J$.R(1721, 'remaining', remaining, 0)));
                            }
                            return J$.X1(1761, J$.Rt(1753, J$.R(1745, 'result', result, 0)));
                        } catch (J$e) {
                            J$.Ex(7057, J$e);
                        } finally {
                            if (J$.Fr(7065))
                                continue jalangiLabel8;
                            else
                                return J$.Ra();
                        }
                    }
            }'
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/dawnjs/node_modules/dawnjs/lib/index.js. Coverage (Term): 55% Coverage (LOC): 62%
*- File /root/Targets/dawnjs/node_modules/dawnjs/lib/core/utils.js. Coverage (Term): 36% Coverage (LOC): 45%
*- File /root/Targets/dawnjs/node_modules/real-utils/lib/utils.js. Coverage (Term): 24% Coverage (LOC): 38%
*- File /root/Targets/dawnjs/node_modules/tpjs/lib/tp.js. Coverage (Term): 15% Coverage (LOC): 23%
*- File /root/Targets/dawnjs/node_modules/dawnjs/lib/core/console.js. Coverage (Term): 54% Coverage (LOC): 70%
*- File /root/Targets/dawnjs/node_modules/dawnjs/lib/core/colors.js. Coverage (Term): 72% Coverage (LOC): 90%
*- File /root/Targets/dawnjs/node_modules/console.table/index.js. Coverage (Term): 17% Coverage (LOC): 27%
*- File /root/Targets/dawnjs/node_modules/easy-table/lib/table.js. Coverage (Term): 11% Coverage (LOC): 20%
*- File /root/Targets/dawnjs/node_modules/easy-table/lib/sort.js. Coverage (Term): 9% Coverage (LOC): 13%
*- File /root/Targets/dawnjs/node_modules/easy-table/lib/aggregations.js. Coverage (Term): 43% Coverage (LOC): 63%
*- File /root/Targets/dawnjs/node_modules/dawnjs/lib/core/amd.js. Coverage (Term): 18% Coverage (LOC): 25%
*- File /root/Targets/dawnjs/node_modules/dawnjs/lib/core/locale.js. Coverage (Term): 81% Coverage (LOC): 93%
*- File /root/Targets/dawnjs/node_modules/dawnjs/lib/core/base64.js. Coverage (Term): 27% Coverage (LOC): 19%
*- File /root/Targets/dawnjs/node_modules/dawnjs/lib/core/info.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/dawnjs/node_modules/dawnjs/lib/core/env.js. Coverage (Term): 88% Coverage (LOC): 95%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
