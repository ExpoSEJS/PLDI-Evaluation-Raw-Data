/root/Targets/react-geocoder
└─┬ react-geocoder@2.5.0 
  ├─┬ babelify@6.4.0 
  │ ├─┬ babel-core@5.8.38 
  │ │ ├── babel-plugin-constant-folding@1.0.1 
  │ │ ├── babel-plugin-dead-code-elimination@1.0.2 
  │ │ ├── babel-plugin-eval@1.0.1 
  │ │ ├── babel-plugin-inline-environment-variables@1.0.1 
  │ │ ├── babel-plugin-jscript@1.0.4 
  │ │ ├── babel-plugin-member-expression-literals@1.0.1 
  │ │ ├── babel-plugin-property-literals@1.0.1 
  │ │ ├── babel-plugin-proto-to-assign@1.0.4 
  │ │ ├── babel-plugin-react-constant-elements@1.0.3 
  │ │ ├── babel-plugin-react-display-name@1.0.3 
  │ │ ├── babel-plugin-remove-console@1.0.1 
  │ │ ├── babel-plugin-remove-debugger@1.0.1 
  │ │ ├── babel-plugin-runtime@1.0.7 
  │ │ ├─┬ babel-plugin-undeclared-variables-check@1.0.2 
  │ │ │ └── leven@1.0.2 
  │ │ ├── babel-plugin-undefined-to-void@1.1.6 
  │ │ ├── babylon@5.8.38 
  │ │ ├── bluebird@2.11.0 
  │ │ ├─┬ chalk@1.1.3 
  │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ ├── escape-string-regexp@1.0.5 
  │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ └── ansi-regex@2.1.1 
  │ │ │ ├── strip-ansi@3.0.1 
  │ │ │ └── supports-color@2.0.0 
  │ │ ├── convert-source-map@1.5.0 
  │ │ ├── core-js@1.2.7 
  │ │ ├─┬ debug@2.6.9 
  │ │ │ └── ms@2.0.0 
  │ │ ├─┬ detect-indent@3.0.1 
  │ │ │ ├── get-stdin@4.0.1 
  │ │ │ └── minimist@1.2.0 
  │ │ ├── esutils@2.0.2 
  │ │ ├── fs-readdir-recursive@0.1.2 
  │ │ ├── globals@6.4.1 
  │ │ ├─┬ home-or-tmp@1.0.0 
  │ │ │ ├── os-tmpdir@1.0.2 
  │ │ │ └── user-home@1.1.1 
  │ │ ├─┬ is-integer@1.0.7 
  │ │ │ └─┬ is-finite@1.0.2 
  │ │ │   └── number-is-nan@1.0.1 
  │ │ ├── js-tokens@1.0.1 
  │ │ ├── json5@0.4.0 
  │ │ ├── lodash@3.10.1 
  │ │ ├─┬ minimatch@2.0.10 
  │ │ │ └─┬ brace-expansion@1.1.8 
  │ │ │   ├── balanced-match@1.0.0 
  │ │ │   └── concat-map@0.0.1 
  │ │ ├─┬ output-file-sync@1.1.2 
  │ │ │ ├── graceful-fs@4.1.11 
  │ │ │ └─┬ mkdirp@0.5.1 
  │ │ │   └── minimist@0.0.8 
  │ │ ├── path-exists@1.0.0 
  │ │ ├── path-is-absolute@1.0.1 
  │ │ ├── private@0.1.7 
  │ │ ├─┬ regenerator@0.8.40 
  │ │ │ ├─┬ commoner@0.10.8 
  │ │ │ │ ├── commander@2.11.0 
  │ │ │ │ ├─┬ detective@4.5.0 
  │ │ │ │ │ ├── acorn@4.0.13 
  │ │ │ │ │ └── defined@1.0.0 
  │ │ │ │ ├─┬ glob@5.0.15 
  │ │ │ │ │ ├─┬ inflight@1.0.6 
  │ │ │ │ │ │ └── wrappy@1.0.2 
  │ │ │ │ │ ├── inherits@2.0.3 
  │ │ │ │ │ └── once@1.4.0 
  │ │ │ │ ├── iconv-lite@0.4.19 
  │ │ │ │ ├── q@1.5.0 
  │ │ │ │ └─┬ recast@0.11.23 
  │ │ │ │   ├── ast-types@0.9.6 
  │ │ │ │   └── esprima@3.1.3 
  │ │ │ ├─┬ defs@1.1.1 
  │ │ │ │ ├─┬ alter@0.2.0 
  │ │ │ │ │ └── stable@0.1.6 
  │ │ │ │ ├── ast-traverse@0.1.1 
  │ │ │ │ ├── breakable@1.0.0 
  │ │ │ │ ├── simple-fmt@0.1.0 
  │ │ │ │ ├── simple-is@0.2.0 
  │ │ │ │ ├── stringmap@0.2.2 
  │ │ │ │ ├── stringset@0.2.1 
  │ │ │ │ ├── tryor@0.1.2 
  │ │ │ │ └─┬ yargs@3.27.0 
  │ │ │ │   ├── camelcase@1.2.1 
  │ │ │ │   ├─┬ cliui@2.1.0 
  │ │ │ │   │ ├─┬ center-align@0.1.3 
  │ │ │ │   │ │ ├─┬ align-text@0.1.4 
  │ │ │ │   │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │   │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ │   │ │ │ ├── longest@1.0.1 
  │ │ │ │   │ │ │ └── repeat-string@1.6.1 
  │ │ │ │   │ │ └── lazy-cache@1.0.4 
  │ │ │ │   │ ├── right-align@0.1.3 
  │ │ │ │   │ └── wordwrap@0.0.2 
  │ │ │ │   ├── decamelize@1.2.0 
  │ │ │ │   ├─┬ os-locale@1.4.0 
  │ │ │ │   │ └─┬ lcid@1.0.0 
  │ │ │ │   │   └── invert-kv@1.0.0 
  │ │ │ │   ├── window-size@0.1.4 
  │ │ │ │   └── y18n@3.2.1 
  │ │ │ ├── esprima-fb@15001.1001.0-dev-harmony-fb 
  │ │ │ └─┬ recast@0.10.33 
  │ │ │   └── ast-types@0.8.12 
  │ │ ├─┬ regexpu@1.3.0 
  │ │ │ ├── esprima@2.7.3 
  │ │ │ ├── regenerate@1.3.3 
  │ │ │ ├── regjsgen@0.2.0 
  │ │ │ └─┬ regjsparser@0.1.5 
  │ │ │   └── jsesc@0.5.0 
  │ │ ├── repeating@1.1.3 
  │ │ ├─┬ resolve@1.4.0 
  │ │ │ └── path-parse@1.0.5 
  │ │ ├── shebang-regex@1.0.0 
  │ │ ├── slash@1.0.0 
  │ │ ├── source-map@0.5.7 
  │ │ ├─┬ source-map-support@0.2.10 
  │ │ │ └─┬ source-map@0.1.32 
  │ │ │   └── amdefine@1.0.1 
  │ │ ├── to-fast-properties@1.0.3 
  │ │ ├── trim-right@1.0.1 
  │ │ └── try-resolve@1.0.1 
  │ └── object-assign@4.1.1 
  ├─┬ react@0.13.3 
  │ └─┬ envify@3.4.1 
  │   ├─┬ jstransform@11.0.3 
  │   │ ├── base62@1.2.0 
  │   │ ├── esprima-fb@15001.1.0-dev-harmony-fb 
  │   │ ├── object-assign@2.1.1 
  │   │ └── source-map@0.4.4 
  │   └── through@2.3.8 
  └─┬ xhr@1.17.1 
    ├─┬ global@4.3.2 
    │ ├─┬ min-document@2.19.0 
    │ │ └── dom-walk@0.1.1 
    │ └── process@0.5.2 
    ├── once@1.1.1 
    └─┬ parse-headers@2.0.1 
      ├─┬ for-each@0.3.2 
      │ └── is-function@1.0.1 
      └── trim@0.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/react-geocoder/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0323 took 2.9944s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (128:16) on program var React = require('react'),
  search = require('./search');

/**
 * Geocoder component: connects to Mapbox.com Geocoding API
 * and provides an autocompleting interface for finding locations.
 */
var Geocoder = React.createClass({
  getDefaultProps() {
    return {
      endpoint: 'https://api.tiles.mapbox.com',
      inputClass: '',
      resultClass: '',
      resultsClass: '',
      resultFocusClass: 'strong',
      inputPosition: 'top',
      inputPlaceholder: 'Search',
      showLoader: false,
      source: 'mapbox.places',
      proximity: '',
      onSuggest: function() {},
      focusOnMount: true
    };
  },
  getInitialState() {
    return {
      results: [],
      focus: null,
      loading: false,
      searchTime: new Date()
    };
  },
  propTypes: {
    endpoint: React.PropTypes.string,
    source: React.PropTypes.string,
    inputClass: React.PropTypes.string,
    resultClass: React.PropTypes.string,
    resultsClass: React.PropTypes.string,
    inputPosition: React.PropTypes.string,
    inputPlaceholder: React.PropTypes.string,
    resultFocusClass: React.PropTypes.string,
    onSelect: React.PropTypes.func.isRequired,
    onSuggest: React.PropTypes.func,
    accessToken: React.PropTypes.string.isRequired,
    proximity: React.PropTypes.string,
    showLoader: React.PropTypes.bool,
    focusOnMount: React.PropTypes.bool
  },
  componentDidMount() {
    if (this.props.focusOnMount) React.findDOMNode(this.refs.input).focus();
  },
  onInput(e) {
    this.setState({loading:true});
    var value = e.target.value;
    if (value === '') {
      this.setState({
        results: [],
        focus: null,
        loading:false
      });
    } else {
      search(
        this.props.endpoint,
        this.props.source,
        this.props.accessToken,
        this.props.proximity,
        value,
        this.onResult);
    }
  },
  moveFocus(dir) {
    if(this.state.loading) return;
    this.setState({
      focus: this.state.focus === null ?
        0 : Math.max(0,
          Math.min(
            this.state.results.length - 1,
            this.state.focus + dir))
    });
  },
  acceptFocus() {
    if (this.state.focus !== null) {
      this.props.onSelect(this.state.results[this.state.focus]);
    }
  },
  onKeyDown(e) {
    switch (e.which) {
      // up
      case 38:
        e.preventDefault();
        this.moveFocus(-1);
        break;
      // down
      case 40:
        this.moveFocus(1);
        break;
      // accept
      case 13:
        if( this.state.results.length > 0 && this.state.focus == null) {
          this.clickOption(this.state.results[0],0);
        }
        this.acceptFocus();
        break;
    }
  },
  onResult(err, res, body, searchTime) {
    // searchTime is compared with the last search to set the state
    // to ensure that a slow xhr response does not scramble the
    // sequence of autocomplete display.
    if (!err && body && body.features && this.state.searchTime <= searchTime) {
      this.setState({
        searchTime: searchTime,
        loading: false,
        results: body.features,
        focus: null
      });
      this.props.onSuggest(this.state.results);
    }
  },
  clickOption(place, listLocation) {
    this.props.onSelect(place);
    this.setState({focus:listLocation});
    // focus on the input after click to maintain key traversal
    React.findDOMNode(this.refs.input).focus();
    return false;
  },
  render() {
    var input = <input
      ref='input'
      className={this.props.inputClass}
      onInput={this.onInput}
      onKeyDown={this.onKeyDown}
      placeholder={this.props.inputPlaceholder}
      type='text' />;
    return (
      <div>
        {this.props.inputPosition === 'top' && input}
        {this.state.results.length > 0 && (
          <ul className={`${this.props.showLoader && this.state.loading ? 'loading' : ''} ${this.props.resultsClass}`}>
            {this.state.results.map((result, i) => (
              <li key={result.id}>
                <a href='#'
                  onClick={this.clickOption.bind(this, result, i)}
                  className={this.props.resultClass + ' ' + (i === this.state.focus ? this.props.resultFocusClass : '')}
                  key={result.id}>{result.place_name}</a>
              </li>
            ))}
          </ul>
        )}
        {this.props.inputPosition === 'bottom' && input}
      </div>
    );
  }
});

module.exports = Geocoder;
 at SyntaxError: Unexpected token (128:16)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1034:28)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
