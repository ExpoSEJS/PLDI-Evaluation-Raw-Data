
> gifsicle@3.0.4 postinstall /root/Targets/flyku-manage/node_modules/gifsicle
> node lib/install.js


> jpegtran-bin@3.2.0 postinstall /root/Targets/flyku-manage/node_modules/jpegtran-bin
> node lib/install.js


> optipng-bin@3.1.4 postinstall /root/Targets/flyku-manage/node_modules/optipng-bin
> node lib/install.js

/root/Targets/flyku-manage
└─┬ flyku-manage@0.0.4 
  ├─┬ clean-css@4.1.9 
  │ └── source-map@0.5.7 
  ├── consoleplusplus@1.4.1 
  ├── flyku-include@0.0.1 
  ├─┬ gulp@3.9.1 
  │ ├── archy@1.0.0 
  │ ├─┬ chalk@1.1.3 
  │ │ ├── ansi-styles@2.2.1 
  │ │ ├── escape-string-regexp@1.0.5 
  │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ └── ansi-regex@2.1.1 
  │ │ ├── strip-ansi@3.0.1 
  │ │ └── supports-color@2.0.0 
  │ ├── deprecated@0.0.1 
  │ ├─┬ gulp-util@3.0.8 
  │ │ ├── array-differ@1.0.0 
  │ │ ├── array-uniq@1.0.3 
  │ │ ├── beeper@1.1.1 
  │ │ ├── dateformat@2.2.0 
  │ │ ├─┬ fancy-log@1.3.0 
  │ │ │ └── time-stamp@1.1.0 
  │ │ ├─┬ gulplog@1.0.0 
  │ │ │ └── glogg@1.0.0 
  │ │ ├─┬ has-gulplog@0.1.0 
  │ │ │ └── sparkles@1.0.0 
  │ │ ├── lodash._reescape@3.0.0 
  │ │ ├── lodash._reevaluate@3.0.0 
  │ │ ├── lodash._reinterpolate@3.0.0 
  │ │ ├─┬ lodash.template@3.6.2 
  │ │ │ ├── lodash._basecopy@3.0.1 
  │ │ │ ├── lodash._basetostring@3.0.1 
  │ │ │ ├── lodash._basevalues@3.0.0 
  │ │ │ ├── lodash._isiterateecall@3.0.9 
  │ │ │ ├─┬ lodash.escape@3.2.0 
  │ │ │ │ └── lodash._root@3.0.1 
  │ │ │ ├─┬ lodash.keys@3.1.2 
  │ │ │ │ ├── lodash._getnative@3.9.1 
  │ │ │ │ ├── lodash.isarguments@3.1.0 
  │ │ │ │ └── lodash.isarray@3.0.4 
  │ │ │ ├── lodash.restparam@3.6.1 
  │ │ │ └── lodash.templatesettings@3.1.1 
  │ │ ├─┬ multipipe@0.1.2 
  │ │ │ └─┬ duplexer2@0.0.2 
  │ │ │   └── readable-stream@1.1.14 
  │ │ ├── object-assign@3.0.0 
  │ │ ├── replace-ext@0.0.1 
  │ │ ├─┬ through2@2.0.3 
  │ │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ │ ├── core-util-is@1.0.2 
  │ │ │ │ ├── isarray@1.0.0 
  │ │ │ │ ├── process-nextick-args@1.0.7 
  │ │ │ │ ├── string_decoder@1.0.3 
  │ │ │ │ └── util-deprecate@1.0.2 
  │ │ │ └── xtend@4.0.1 
  │ │ └─┬ vinyl@0.5.3 
  │ │   ├── clone@1.0.2 
  │ │   └── clone-stats@0.0.1 
  │ ├── interpret@1.0.4 
  │ ├─┬ liftoff@2.3.0 
  │ │ ├── extend@3.0.1 
  │ │ ├─┬ findup-sync@0.4.3 
  │ │ │ ├─┬ detect-file@0.1.0 
  │ │ │ │ └── fs-exists-sync@0.1.0 
  │ │ │ ├─┬ is-glob@2.0.1 
  │ │ │ │ └── is-extglob@1.0.0 
  │ │ │ ├─┬ micromatch@2.3.11 
  │ │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ │ ├── array-unique@0.2.1 
  │ │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │ │   ├─┬ isobject@2.1.0 
  │ │ │ │ │ │   │ └── isarray@1.0.0 
  │ │ │ │ │ │   └─┬ randomatic@1.1.7 
  │ │ │ │ │ │     ├─┬ is-number@3.0.0 
  │ │ │ │ │ │     │ └── kind-of@3.2.2 
  │ │ │ │ │ │     └── kind-of@4.0.0 
  │ │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ │ ├── extglob@0.3.2 
  │ │ │ │ ├── filename-regex@2.0.1 
  │ │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ │ ├─┬ normalize-path@2.1.1 
  │ │ │ │ │ └── remove-trailing-separator@1.1.0 
  │ │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ │ ├── for-own@0.1.5 
  │ │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ │ ├─┬ glob-base@0.3.0 
  │ │ │ │ │ │ └── glob-parent@2.0.0 
  │ │ │ │ │ └── is-dotfile@1.0.3 
  │ │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │ │     └── is-primitive@2.0.0 
  │ │ │ └─┬ resolve-dir@0.1.1 
  │ │ │   ├── expand-tilde@1.2.2 
  │ │ │   └─┬ global-modules@0.2.3 
  │ │ │     ├─┬ global-prefix@0.1.5 
  │ │ │     │ └── ini@1.3.4 
  │ │ │     └── is-windows@0.2.0 
  │ │ ├─┬ fined@1.1.0 
  │ │ │ ├─┬ expand-tilde@2.0.2 
  │ │ │ │ └─┬ homedir-polyfill@1.0.1 
  │ │ │ │   └── parse-passwd@1.0.0 
  │ │ │ ├─┬ is-plain-object@2.0.4 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ ├─┬ object.defaults@1.1.0 
  │ │ │ │ ├── array-each@1.0.1 
  │ │ │ │ ├── array-slice@1.0.0 
  │ │ │ │ ├─┬ for-own@1.0.0 
  │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ ├─┬ object.pick@1.3.0 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ └─┬ parse-filepath@1.0.1 
  │ │ │   ├─┬ is-absolute@0.2.6 
  │ │ │   │ └─┬ is-relative@0.2.1 
  │ │ │   │   └─┬ is-unc-path@0.1.2 
  │ │ │   │     └── unc-path-regex@0.1.2 
  │ │ │   ├── map-cache@0.2.2 
  │ │ │   └─┬ path-root@0.1.1 
  │ │ │     └── path-root-regex@0.1.2 
  │ │ ├── flagged-respawn@0.3.2 
  │ │ ├── lodash.isplainobject@4.0.6 
  │ │ ├── lodash.isstring@4.0.1 
  │ │ ├── lodash.mapvalues@4.6.0 
  │ │ └─┬ resolve@1.4.0 
  │ │   └── path-parse@1.0.5 
  │ ├── minimist@1.2.0 
  │ ├─┬ orchestrator@0.3.8 
  │ │ ├── end-of-stream@0.1.5 
  │ │ ├── sequencify@0.0.7 
  │ │ └── stream-consume@0.1.0 
  │ ├── pretty-hrtime@1.0.3 
  │ ├── semver@4.3.6 
  │ ├─┬ tildify@1.2.0 
  │ │ └── os-homedir@1.0.2 
  │ ├─┬ v8flags@2.1.1 
  │ │ └── user-home@1.1.1 
  │ └─┬ vinyl-fs@0.3.14 
  │   ├── defaults@1.0.3 
  │   ├─┬ glob-stream@3.1.18 
  │   │ ├── glob@4.5.3 
  │   │ ├─┬ glob2base@0.0.12 
  │   │ │ └── find-index@0.1.1 
  │   │ ├── minimatch@2.0.10 
  │   │ ├── ordered-read-streams@0.1.0 
  │   │ ├─┬ through2@0.6.5 
  │   │ │ └── readable-stream@1.0.34 
  │   │ └── unique-stream@1.0.0 
  │   ├─┬ glob-watcher@0.0.6 
  │   │ └─┬ gaze@0.5.2 
  │   │   └─┬ globule@0.1.0 
  │   │     ├─┬ glob@3.1.21 
  │   │     │ ├── graceful-fs@1.2.3 
  │   │     │ └── inherits@1.0.2 
  │   │     ├── lodash@1.0.2 
  │   │     └─┬ minimatch@0.2.14 
  │   │       ├── lru-cache@2.7.3 
  │   │       └── sigmund@1.0.1 
  │   ├─┬ graceful-fs@3.0.11 
  │   │ └── natives@1.1.0 
  │   ├─┬ strip-bom@1.0.0 
  │   │ ├── first-chunk-stream@1.0.0 
  │   │ └── is-utf8@0.2.1 
  │   ├─┬ through2@0.6.5 
  │   │ └─┬ readable-stream@1.0.34 
  │   │   ├── isarray@0.0.1 
  │   │   └── string_decoder@0.10.31 
  │   └─┬ vinyl@0.4.6 
  │     └── clone@0.2.0 
  ├─┬ gulp-imagemin@3.3.0 
  │ ├─┬ imagemin@5.3.1 
  │ │ ├── file-type@4.4.0 
  │ │ ├─┬ globby@6.1.0 
  │ │ │ ├── array-union@1.0.2 
  │ │ │ ├─┬ glob@7.1.2 
  │ │ │ │ └── minimatch@3.0.4 
  │ │ │ ├── object-assign@4.1.1 
  │ │ │ └─┬ pinkie-promise@2.0.1 
  │ │ │   └── pinkie@2.0.4 
  │ │ ├── make-dir@1.0.0 
  │ │ ├── p-pipe@1.2.0 
  │ │ ├── pify@2.3.0 
  │ │ └── replace-ext@1.0.0 
  │ ├─┬ imagemin-gifsicle@5.2.0 
  │ │ ├─┬ exec-buffer@3.2.0 
  │ │ │ ├─┬ execa@0.7.0 
  │ │ │ │ ├─┬ cross-spawn@5.1.0 
  │ │ │ │ │ ├─┬ lru-cache@4.1.1 
  │ │ │ │ │ │ ├── pseudomap@1.0.2 
  │ │ │ │ │ │ └── yallist@2.1.2 
  │ │ │ │ │ ├─┬ shebang-command@1.2.0 
  │ │ │ │ │ │ └── shebang-regex@1.0.0 
  │ │ │ │ │ └─┬ which@1.3.0 
  │ │ │ │ │   └── isexe@2.0.0 
  │ │ │ │ ├── get-stream@3.0.0 
  │ │ │ │ ├── is-stream@1.1.0 
  │ │ │ │ ├─┬ npm-run-path@2.0.2 
  │ │ │ │ │ └── path-key@2.0.1 
  │ │ │ │ ├── signal-exit@3.0.2 
  │ │ │ │ └── strip-eof@1.0.0 
  │ │ │ ├── p-finally@1.0.0 
  │ │ │ ├── pify@3.0.0 
  │ │ │ ├─┬ rimraf@2.6.2 
  │ │ │ │ └─┬ glob@7.1.2 
  │ │ │ │   └── minimatch@3.0.4 
  │ │ │ └─┬ tempfile@2.0.0 
  │ │ │   └── temp-dir@1.0.0 
  │ │ ├─┬ gifsicle@3.0.4 
  │ │ │ ├─┬ bin-build@2.2.0 
  │ │ │ │ ├─┬ archive-type@3.2.0 
  │ │ │ │ │ └── file-type@3.9.0 
  │ │ │ │ ├─┬ decompress@3.0.0 
  │ │ │ │ │ ├─┬ buffer-to-vinyl@1.1.0 
  │ │ │ │ │ │ ├── file-type@3.9.0 
  │ │ │ │ │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ │ │ │ │ ├── isarray@1.0.0 
  │ │ │ │ │ │ │ └── string_decoder@1.0.3 
  │ │ │ │ │ │ ├── uuid@2.0.3 
  │ │ │ │ │ │ └── vinyl@1.2.0 
  │ │ │ │ │ ├─┬ concat-stream@1.6.0 
  │ │ │ │ │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ │ │ │ │ ├── isarray@1.0.0 
  │ │ │ │ │ │ │ └── string_decoder@1.0.3 
  │ │ │ │ │ │ └── typedarray@0.0.6 
  │ │ │ │ │ ├─┬ decompress-tar@3.1.0 
  │ │ │ │ │ │ ├── is-tar@1.0.0 
  │ │ │ │ │ │ ├── object-assign@2.1.1 
  │ │ │ │ │ │ ├─┬ strip-dirs@1.1.1 
  │ │ │ │ │ │ │ ├─┬ is-absolute@0.1.7 
  │ │ │ │ │ │ │ │ └── is-relative@0.1.3 
  │ │ │ │ │ │ │ ├── is-natural-number@2.1.1 
  │ │ │ │ │ │ │ └── sum-up@1.0.3 
  │ │ │ │ │ │ ├─┬ tar-stream@1.5.4 
  │ │ │ │ │ │ │ ├─┬ bl@1.2.1 
  │ │ │ │ │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │ │ │ │ │   ├── isarray@1.0.0 
  │ │ │ │ │ │ │ │   └── string_decoder@1.0.3 
  │ │ │ │ │ │ │ ├─┬ end-of-stream@1.4.0 
  │ │ │ │ │ │ │ │ └── once@1.4.0 
  │ │ │ │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │ │ │ │   ├── isarray@1.0.0 
  │ │ │ │ │ │ │   └── string_decoder@1.0.3 
  │ │ │ │ │ │ ├─┬ through2@0.6.5 
  │ │ │ │ │ │ │ └── readable-stream@1.0.34 
  │ │ │ │ │ │ └─┬ vinyl@0.4.6 
  │ │ │ │ │ │   └── clone@0.2.0 
  │ │ │ │ │ ├─┬ decompress-tarbz2@3.1.0 
  │ │ │ │ │ │ ├── is-bzip2@1.0.0 
  │ │ │ │ │ │ ├── object-assign@2.1.1 
  │ │ │ │ │ │ ├─┬ seek-bzip@1.0.5 
  │ │ │ │ │ │ │ └── commander@2.8.1 
  │ │ │ │ │ │ ├─┬ through2@0.6.5 
  │ │ │ │ │ │ │ └── readable-stream@1.0.34 
  │ │ │ │ │ │ └─┬ vinyl@0.4.6 
  │ │ │ │ │ │   └── clone@0.2.0 
  │ │ │ │ │ ├─┬ decompress-targz@3.1.0 
  │ │ │ │ │ │ ├── is-gzip@1.0.0 
  │ │ │ │ │ │ ├── object-assign@2.1.1 
  │ │ │ │ │ │ ├─┬ through2@0.6.5 
  │ │ │ │ │ │ │ └── readable-stream@1.0.34 
  │ │ │ │ │ │ └─┬ vinyl@0.4.6 
  │ │ │ │ │ │   └── clone@0.2.0 
  │ │ │ │ │ ├─┬ decompress-unzip@3.4.0 
  │ │ │ │ │ │ ├── is-zip@1.0.0 
  │ │ │ │ │ │ ├── stat-mode@0.2.2 
  │ │ │ │ │ │ ├── vinyl@1.2.0 
  │ │ │ │ │ │ └─┬ yauzl@2.8.0 
  │ │ │ │ │ │   ├── buffer-crc32@0.2.13 
  │ │ │ │ │ │   └─┬ fd-slicer@1.0.1 
  │ │ │ │ │ │     └── pend@1.2.0 
  │ │ │ │ │ ├─┬ stream-combiner2@1.1.1 
  │ │ │ │ │ │ ├── duplexer2@0.1.4 
  │ │ │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │ │ │   ├── isarray@1.0.0 
  │ │ │ │ │ │   └── string_decoder@1.0.3 
  │ │ │ │ │ ├─┬ vinyl-assign@1.2.1 
  │ │ │ │ │ │ ├── object-assign@4.1.1 
  │ │ │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │ │ │   ├── isarray@1.0.0 
  │ │ │ │ │ │   └── string_decoder@1.0.3 
  │ │ │ │ │ └─┬ vinyl-fs@2.4.4 
  │ │ │ │ │   ├─┬ duplexify@3.5.1 
  │ │ │ │ │   │ ├─┬ end-of-stream@1.4.0 
  │ │ │ │ │   │ │ └── once@1.4.0 
  │ │ │ │ │   │ ├─┬ readable-stream@2.3.3 
  │ │ │ │ │   │ │ ├── isarray@1.0.0 
  │ │ │ │ │   │ │ └── string_decoder@1.0.3 
  │ │ │ │ │   │ └── stream-shift@1.0.0 
  │ │ │ │ │   ├─┬ glob-stream@5.3.5 
  │ │ │ │ │   │ ├── glob@5.0.15 
  │ │ │ │ │   │ ├─┬ glob-parent@3.1.0 
  │ │ │ │ │   │ │ ├─┬ is-glob@3.1.0 
  │ │ │ │ │   │ │ │ └── is-extglob@2.1.1 
  │ │ │ │ │   │ │ └── path-dirname@1.0.2 
  │ │ │ │ │   │ ├── ordered-read-streams@0.3.0 
  │ │ │ │ │   │ ├─┬ through2@0.6.5 
  │ │ │ │ │   │ │ └─┬ readable-stream@1.0.34 
  │ │ │ │ │   │ │   ├── isarray@0.0.1 
  │ │ │ │ │   │ │   └── string_decoder@0.10.31 
  │ │ │ │ │   │ ├─┬ to-absolute-glob@0.1.1 
  │ │ │ │ │   │ │ └── extend-shallow@2.0.1 
  │ │ │ │ │   │ └── unique-stream@2.2.1 
  │ │ │ │ │   ├── graceful-fs@4.1.11 
  │ │ │ │ │   ├─┬ gulp-sourcemaps@1.6.0 
  │ │ │ │ │   │ ├── convert-source-map@1.5.0 
  │ │ │ │ │   │ ├── graceful-fs@4.1.11 
  │ │ │ │ │   │ ├── strip-bom@2.0.0 
  │ │ │ │ │   │ └── vinyl@1.2.0 
  │ │ │ │ │   ├── is-valid-glob@0.3.0 
  │ │ │ │ │   ├─┬ lazystream@1.0.0 
  │ │ │ │ │   │ └─┬ readable-stream@2.3.3 
  │ │ │ │ │   │   ├── isarray@1.0.0 
  │ │ │ │ │   │   └── string_decoder@1.0.3 
  │ │ │ │ │   ├── lodash.isequal@4.5.0 
  │ │ │ │ │   ├─┬ merge-stream@1.0.1 
  │ │ │ │ │   │ └─┬ readable-stream@2.3.3 
  │ │ │ │ │   │   ├── isarray@1.0.0 
  │ │ │ │ │   │   └── string_decoder@1.0.3 
  │ │ │ │ │   ├── object-assign@4.1.1 
  │ │ │ │ │   ├─┬ readable-stream@2.3.3 
  │ │ │ │ │   │ ├── isarray@1.0.0 
  │ │ │ │ │   │ └── string_decoder@1.0.3 
  │ │ │ │ │   ├── strip-bom@2.0.0 
  │ │ │ │ │   ├─┬ strip-bom-stream@1.0.0 
  │ │ │ │ │   │ └── strip-bom@2.0.0 
  │ │ │ │ │   ├── through2-filter@2.0.0 
  │ │ │ │ │   ├── vali-date@1.0.0 
  │ │ │ │ │   └── vinyl@1.2.0 
  │ │ │ │ ├─┬ download@4.4.3 
  │ │ │ │ │ ├─┬ caw@1.2.0 
  │ │ │ │ │ │ ├─┬ get-proxy@1.1.0 
  │ │ │ │ │ │ │ └─┬ rc@1.2.1 
  │ │ │ │ │ │ │   ├── deep-extend@0.4.2 
  │ │ │ │ │ │ │   └── strip-json-comments@2.0.1 
  │ │ │ │ │ │ ├── is-obj@1.0.1 
  │ │ │ │ │ │ └── tunnel-agent@0.4.3 
  │ │ │ │ │ ├─┬ filenamify@1.2.1 
  │ │ │ │ │ │ ├── filename-reserved-regex@1.0.0 
  │ │ │ │ │ │ ├── strip-outer@1.0.0 
  │ │ │ │ │ │ └── trim-repeated@1.0.0 
  │ │ │ │ │ ├─┬ got@5.7.1 
  │ │ │ │ │ │ ├─┬ create-error-class@3.0.2 
  │ │ │ │ │ │ │ └── capture-stack-trace@1.0.0 
  │ │ │ │ │ │ ├── duplexer2@0.1.4 
  │ │ │ │ │ │ ├── is-redirect@1.0.0 
  │ │ │ │ │ │ ├── is-retry-allowed@1.1.0 
  │ │ │ │ │ │ ├── lowercase-keys@1.0.0 
  │ │ │ │ │ │ ├── node-status-codes@1.0.0 
  │ │ │ │ │ │ ├── object-assign@4.1.1 
  │ │ │ │ │ │ ├─┬ parse-json@2.2.0 
  │ │ │ │ │ │ │ └─┬ error-ex@1.3.1 
  │ │ │ │ │ │ │   └── is-arrayish@0.2.1 
  │ │ │ │ │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ │ │ │ │ ├── isarray@1.0.0 
  │ │ │ │ │ │ │ └── string_decoder@1.0.3 
  │ │ │ │ │ │ ├── timed-out@3.1.3 
  │ │ │ │ │ │ ├── unzip-response@1.0.2 
  │ │ │ │ │ │ └─┬ url-parse-lax@1.0.0 
  │ │ │ │ │ │   └── prepend-http@1.0.4 
  │ │ │ │ │ ├─┬ gulp-decompress@1.2.0 
  │ │ │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │ │ │   ├── isarray@1.0.0 
  │ │ │ │ │ │   └── string_decoder@1.0.3 
  │ │ │ │ │ ├── gulp-rename@1.2.2 
  │ │ │ │ │ ├── is-url@1.2.2 
  │ │ │ │ │ ├── object-assign@4.1.1 
  │ │ │ │ │ ├─┬ read-all-stream@3.1.0 
  │ │ │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │ │ │   ├── isarray@1.0.0 
  │ │ │ │ │ │   └── string_decoder@1.0.3 
  │ │ │ │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ │ │ │ ├── isarray@1.0.0 
  │ │ │ │ │ │ └── string_decoder@1.0.3 
  │ │ │ │ │ ├── vinyl@1.2.0 
  │ │ │ │ │ ├─┬ vinyl-fs@2.4.4 
  │ │ │ │ │ │ ├─┬ glob-stream@5.3.5 
  │ │ │ │ │ │ │ ├── glob@5.0.15 
  │ │ │ │ │ │ │ ├─┬ glob-parent@3.1.0 
  │ │ │ │ │ │ │ │ └─┬ is-glob@3.1.0 
  │ │ │ │ │ │ │ │   └── is-extglob@2.1.1 
  │ │ │ │ │ │ │ ├── ordered-read-streams@0.3.0 
  │ │ │ │ │ │ │ ├─┬ through2@0.6.5 
  │ │ │ │ │ │ │ │ └─┬ readable-stream@1.0.34 
  │ │ │ │ │ │ │ │   ├── isarray@0.0.1 
  │ │ │ │ │ │ │ │   └── string_decoder@0.10.31 
  │ │ │ │ │ │ │ └── unique-stream@2.2.1 
  │ │ │ │ │ │ ├── graceful-fs@4.1.11 
  │ │ │ │ │ │ └── strip-bom@2.0.0 
  │ │ │ │ │ └─┬ ware@1.3.0 
  │ │ │ │ │   └─┬ wrap-fn@0.1.5 
  │ │ │ │ │     └── co@3.1.0 
  │ │ │ │ ├─┬ exec-series@1.0.3 
  │ │ │ │ │ ├── async-each-series@1.1.0 
  │ │ │ │ │ └── object-assign@4.1.1 
  │ │ │ │ ├─┬ tempfile@1.1.1 
  │ │ │ │ │ ├── os-tmpdir@1.0.2 
  │ │ │ │ │ └── uuid@2.0.3 
  │ │ │ │ └─┬ url-regex@3.2.0 
  │ │ │ │   └── ip-regex@1.0.3 
  │ │ │ ├─┬ bin-wrapper@3.0.2 
  │ │ │ │ ├─┬ bin-check@2.0.0 
  │ │ │ │ │ └─┬ executable@1.1.0 
  │ │ │ │ │   └─┬ meow@3.7.0 
  │ │ │ │ │     ├─┬ camelcase-keys@2.1.0 
  │ │ │ │ │     │ └── camelcase@2.1.1 
  │ │ │ │ │     ├─┬ loud-rejection@1.6.0 
  │ │ │ │ │     │ └─┬ currently-unhandled@0.4.1 
  │ │ │ │ │     │   └── array-find-index@1.0.2 
  │ │ │ │ │     ├── map-obj@1.0.1 
  │ │ │ │ │     ├─┬ normalize-package-data@2.4.0 
  │ │ │ │ │     │ ├── hosted-git-info@2.5.0 
  │ │ │ │ │     │ ├─┬ is-builtin-module@1.0.0 
  │ │ │ │ │     │ │ └── builtin-modules@1.1.1 
  │ │ │ │ │     │ └─┬ validate-npm-package-license@3.0.1 
  │ │ │ │ │     │   ├─┬ spdx-correct@1.0.2 
  │ │ │ │ │     │   │ └── spdx-license-ids@1.2.2 
  │ │ │ │ │     │   └── spdx-expression-parse@1.0.4 
  │ │ │ │ │     ├── object-assign@4.1.1 
  │ │ │ │ │     ├─┬ read-pkg-up@1.0.1 
  │ │ │ │ │     │ ├─┬ find-up@1.1.2 
  │ │ │ │ │     │ │ └── path-exists@2.1.0 
  │ │ │ │ │     │ └─┬ read-pkg@1.1.0 
  │ │ │ │ │     │   ├─┬ load-json-file@1.1.0 
  │ │ │ │ │     │   │ ├── graceful-fs@4.1.11 
  │ │ │ │ │     │   │ └── strip-bom@2.0.0 
  │ │ │ │ │     │   └─┬ path-type@1.1.0 
  │ │ │ │ │     │     └── graceful-fs@4.1.11 
  │ │ │ │ │     ├─┬ redent@1.0.0 
  │ │ │ │ │     │ └── strip-indent@1.0.1 
  │ │ │ │ │     └── trim-newlines@1.0.0 
  │ │ │ │ ├─┬ bin-version-check@2.1.0 
  │ │ │ │ │ ├─┬ bin-version@1.0.4 
  │ │ │ │ │ │ └─┬ find-versions@1.2.1 
  │ │ │ │ │ │   └── semver-regex@1.0.0 
  │ │ │ │ │ └─┬ semver-truncate@1.1.2 
  │ │ │ │ │   └── semver@5.4.1 
  │ │ │ │ ├─┬ each-async@1.1.1 
  │ │ │ │ │ ├── onetime@1.1.0 
  │ │ │ │ │ └── set-immediate-shim@1.0.1 
  │ │ │ │ ├── lazy-req@1.1.0 
  │ │ │ │ └── os-filter-obj@1.0.3 
  │ │ │ └─┬ logalot@2.1.0 
  │ │ │   ├─┬ figures@1.7.0 
  │ │ │   │ └── object-assign@4.1.1 
  │ │ │   └─┬ squeak@1.3.0 
  │ │ │     ├── console-stream@0.1.1 
  │ │ │     └─┬ lpad-align@1.1.2 
  │ │ │       ├── get-stdin@4.0.1 
  │ │ │       ├─┬ indent-string@2.1.0 
  │ │ │       │ └─┬ repeating@2.0.1 
  │ │ │       │   └─┬ is-finite@1.0.2 
  │ │ │       │     └── number-is-nan@1.0.1 
  │ │ │       └── longest@1.0.1 
  │ │ └── is-gif@1.0.0 
  │ ├─┬ imagemin-jpegtran@5.0.2 
  │ │ ├── is-jpg@1.0.0 
  │ │ └── jpegtran-bin@3.2.0 
  │ ├─┬ imagemin-optipng@5.2.1 
  │ │ ├── is-png@1.1.0 
  │ │ └── optipng-bin@3.1.4 
  │ ├─┬ imagemin-svgo@5.2.2 
  │ │ ├─┬ is-svg@2.1.0 
  │ │ │ └── html-comment-regex@1.1.1 
  │ │ └─┬ svgo@0.7.2 
  │ │   ├─┬ coa@1.0.4 
  │ │   │ └── q@1.5.0 
  │ │   ├── colors@1.1.2 
  │ │   ├─┬ csso@2.3.2 
  │ │   │ └── clap@1.2.3 
  │ │   ├─┬ js-yaml@3.7.0 
  │ │   │ ├─┬ argparse@1.0.9 
  │ │   │ │ └── sprintf-js@1.0.3 
  │ │   │ └── esprima@2.7.3 
  │ │   ├── sax@1.2.4 
  │ │   └── whet.extend@0.9.9 
  │ ├─┬ plur@2.1.2 
  │ │ └── irregular-plurals@1.3.0 
  │ ├── pretty-bytes@4.0.2 
  │ └── through2-concurrent@1.1.1 
  ├─┬ html-minifier@3.5.5 
  │ ├─┬ camel-case@3.0.0 
  │ │ ├─┬ no-case@2.3.2 
  │ │ │ └── lower-case@1.1.4 
  │ │ └── upper-case@1.1.3 
  │ ├── commander@2.11.0 
  │ ├── he@1.1.1 
  │ ├─┬ ncname@1.0.0 
  │ │ └── xml-char-classes@1.0.0 
  │ ├── param-case@2.1.1 
  │ ├── relateurl@0.2.7 
  │ └─┬ uglify-js@3.1.3 
  │   └── commander@2.11.0 
  ├─┬ jspacker@0.1.13 
  │ ├─┬ mocha@3.5.3 
  │ │ ├── browser-stdout@1.3.0 
  │ │ ├─┬ commander@2.9.0 
  │ │ │ └── graceful-readlink@1.0.1 
  │ │ ├─┬ debug@2.6.8 
  │ │ │ └── ms@2.0.0 
  │ │ ├── diff@3.2.0 
  │ │ ├─┬ glob@7.1.1 
  │ │ │ └── minimatch@3.0.4 
  │ │ ├── growl@1.9.2 
  │ │ ├── json3@3.3.2 
  │ │ ├─┬ lodash.create@3.1.1 
  │ │ │ ├── lodash._baseassign@3.2.0 
  │ │ │ └── lodash._basecreate@3.0.3 
  │ │ └─┬ supports-color@3.1.2 
  │ │   └── has-flag@1.0.0 
  │ └─┬ uglify-js@2.6.4 
  │   ├── async@0.2.10 
  │   ├── uglify-to-browserify@1.0.2 
  │   └─┬ yargs@3.10.0 
  │     ├── camelcase@1.2.1 
  │     ├─┬ cliui@2.1.0 
  │     │ ├─┬ center-align@0.1.3 
  │     │ │ ├─┬ align-text@0.1.4 
  │     │ │ │ └── repeat-string@1.6.1 
  │     │ │ └── lazy-cache@1.0.4 
  │     │ ├── right-align@0.1.3 
  │     │ └── wordwrap@0.0.2 
  │     ├── decamelize@1.2.0 
  │     └── window-size@0.1.0 
  ├─┬ less@2.7.2 
  │ ├─┬ errno@0.1.4 
  │ │ └── prr@0.0.0 
  │ ├── graceful-fs@4.1.11 
  │ ├── image-size@0.5.5 
  │ ├── mime@1.4.1 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ ├─┬ promise@7.3.1 
  │ │ └── asap@2.0.6 
  │ └─┬ request@2.83.0 
  │   ├── aws-sign2@0.7.0 
  │   ├── aws4@1.6.0 
  │   ├── caseless@0.12.0 
  │   ├─┬ combined-stream@1.0.5 
  │   │ └── delayed-stream@1.0.0 
  │   ├── forever-agent@0.6.1 
  │   ├─┬ form-data@2.3.1 
  │   │ └── asynckit@0.4.0 
  │   ├─┬ har-validator@5.0.3 
  │   │ ├─┬ ajv@5.2.3 
  │   │ │ ├── co@4.6.0 
  │   │ │ ├── fast-deep-equal@1.0.0 
  │   │ │ ├── json-schema-traverse@0.3.1 
  │   │ │ └─┬ json-stable-stringify@1.0.1 
  │   │ │   └── jsonify@0.0.0 
  │   │ └── har-schema@2.0.0 
  │   ├─┬ hawk@6.0.2 
  │   │ ├── boom@4.3.1 
  │   │ ├─┬ cryptiles@3.1.2 
  │   │ │ └── boom@5.2.0 
  │   │ ├── hoek@4.2.0 
  │   │ └── sntp@2.0.2 
  │   ├─┬ http-signature@1.2.0 
  │   │ ├── assert-plus@1.0.0 
  │   │ ├─┬ jsprim@1.4.1 
  │   │ │ ├── extsprintf@1.3.0 
  │   │ │ ├── json-schema@0.2.3 
  │   │ │ └── verror@1.10.0 
  │   │ └─┬ sshpk@1.13.1 
  │   │   ├── asn1@0.2.3 
  │   │   ├── bcrypt-pbkdf@1.0.1 
  │   │   ├── dashdash@1.14.1 
  │   │   ├── ecc-jsbn@0.1.1 
  │   │   ├── getpass@0.1.7 
  │   │   ├── jsbn@0.1.1 
  │   │   └── tweetnacl@0.14.5 
  │   ├── is-typedarray@1.0.0 
  │   ├── isstream@0.1.2 
  │   ├── json-stringify-safe@5.0.1 
  │   ├─┬ mime-types@2.1.17 
  │   │ └── mime-db@1.30.0 
  │   ├── oauth-sign@0.8.2 
  │   ├── performance-now@2.1.0 
  │   ├── qs@6.5.1 
  │   ├── safe-buffer@5.1.1 
  │   ├── stringstream@0.0.5 
  │   ├─┬ tough-cookie@2.3.3 
  │   │ └── punycode@1.4.1 
  │   ├── tunnel-agent@0.6.0 
  │   └── uuid@3.1.0 
  ├── mime@2.0.3 
  ├─┬ optimist@0.6.1 
  │ ├── minimist@0.0.10 
  │ └── wordwrap@0.0.3 
  └─┬ shelljs@0.7.8 
    ├─┬ glob@7.1.2 
    │ ├── fs.realpath@1.0.0 
    │ ├─┬ inflight@1.0.6 
    │ │ └── wrappy@1.0.2 
    │ ├── inherits@2.0.3 
    │ ├─┬ minimatch@3.0.4 
    │ │ └─┬ brace-expansion@1.1.8 
    │ │   ├── balanced-match@1.0.0 
    │ │   └── concat-map@0.0.1 
    │ ├── once@1.3.3 
    │ └── path-is-absolute@1.0.1 
    └── rechoir@0.6.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/flyku-manage/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 16% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.038 took 6.0256s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (50:4) on program // Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var fs = require('fs')
var rp = require('fs.realpath')
var minimatch = require('minimatch')
var Minimatch = minimatch.Minimatch
var inherits = require('inherits')
var EE = require('events').EventEmitter
var path = require('path')
var assert = require('assert')
var isAbsolute = require('path-is-absolute')
var globSync = require('./sync.js')
var common = require('./common.js')
var alphasort = common.alphasort
var alphasorti = common.alphasorti
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = require('inflight')
var util = require('util')
var childrenIgnored = common.childrenIgnored
var isIgnored = common.isIgnored

var once = require('once')

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

function extend (origin, add) {
  if (add === null || typeof add !== 'object') {
    return origin
  }

  var keys = Object.keys(add)
  var i = keys.length
  while (i--) {
    origin[keys[i]] = add[keys[i]]
  }
  return origin
}

glob.hasMagic = function (pattern, options_) {
  var options = extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set

  if (!pattern)
    return false

  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)
  this._didRealPath = false

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  this._processing = 0

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  var sync = true
  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }
  sync = false

  function done () {
    --self._processing
    if (self._processing <= 0) {
      if (sync) {
        process.nextTick(function () {
          self._finish()
        })
      } else {
        self._finish()
      }
    }
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  if (this.realpath && !this._didRealpath)
    return this._realpath()

  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._realpath = function () {
  if (this._didRealpath)
    return

  this._didRealpath = true

  var n = this.matches.length
  if (n === 0)
    return this._finish()

  var self = this
  for (var i = 0; i < this.matches.length; i++)
    this._realpathSet(i, next)

  function next () {
    if (--n === 0)
      self._finish()
  }
}

Glob.prototype._realpathSet = function (index, cb) {
  var matchset = this.matches[index]
  if (!matchset)
    return cb()

  var found = Object.keys(matchset)
  var self = this
  var n = found.length

  if (n === 0)
    return cb()

  var set = this.matches[index] = Object.create(null)
  found.forEach(function (p, i) {
    // If there's a problem with the stat, then it means that
    // one or more of the links in the realpath couldn't be
    // resolved.  just return the abs value in that case.
    p = self._makeAbs(p)
    rp.realpath(p, self.realpathCache, function (er, real) {
      if (!er)
        set[real] = true
      else if (er.syscall === 'stat')
        set[p] = true
      else
        self.emit('error', er) // srsly wtf right here

      if (--n === 0) {
        self.matches[index] = set
        cb()
      }
    })
  })
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  //if ignored, skip _processing
  if (childrenIgnored(this, read))
    return cb()

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}

Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (isIgnored(this, e))
    return

  if (this.paused) {
    this._emitQueue.push([index, e])
    return
  }

  var abs = isAbsolute(e) ? e : this._makeAbs(e)

  if (this.mark)
    e = this._mark(e)

  if (this.absolute)
    e = abs

  if (this.matches[index][e])
    return

  if (this.nodir) {
    var c = this.cache[abs]
    if (c === 'DIR' || Array.isArray(c))
      return
  }

  this.matches[index][e] = true

  var st = this.statCache[abs]
  if (st)
    this.emit('stat', e, st)

  this.emit('match', e)
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  // follow all symlinked directories forever
  // just proceed as if this is a non-globstar situation
  if (this.follow)
    return this._readdir(abs, false, cb)

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er && er.code === 'ENOENT')
      return cb()

    var isSym = lstat && lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && lstat && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
    case 'ENOTDIR': // totally normal. means it *does* exist.
      var abs = this._makeAbs(f)
      this.cache[abs] = 'FILE'
      if (abs === this.cwdAbs) {
        var error = new Error(er.code + ' invalid cwd ' + this.cwd)
        error.path = this.cwd
        error.code = er.code
        this.emit('error', error)
        this.abort()
      }
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[this._makeAbs(f)] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[this._makeAbs(f)] = false
      if (this.strict) {
        this.emit('error', er)
        // If the error is handled, then we abort
        // if not, we threw out of here
        this.abort()
      }
      if (!this.silent)
        console.error('glob error', er)
      break
  }

  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = this._makeAbs(f)
  var needDir = f.slice(-1) === '/'

  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, abs)) {
    var c = this.cache[abs]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but maybe not how we need it
    if (!needDir || c === 'DIR')
      return cb(null, c)

    if (needDir && c === 'FILE')
      return cb()

    // otherwise we have to stat, because maybe c=true
    // if we know it exists, but not what it is.
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else {
      var type = stat.isDirectory() ? 'DIR' : 'FILE'
      if (needDir && type === 'FILE')
        return cb()
      else
        return cb(null, type, stat)
    }
  }

  var self = this
  var statcb = inflight('stat\0' + abs, lstatcb_)
  if (statcb)
    fs.lstat(abs, statcb)

  function lstatcb_ (er, lstat) {
    if (lstat && lstat.isSymbolicLink()) {
      // If it's a symlink, then treat it as the target, unless
      // the target does not exist, then treat it as a file.
      return fs.stat(abs, function (er, stat) {
        if (er)
          self._stat2(f, abs, null, lstat, cb)
        else
          self._stat2(f, abs, er, stat, cb)
      })
    } else {
      self._stat2(f, abs, er, lstat, cb)
    }
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
    this.statCache[abs] = false
    return cb()
  }

  var needDir = f.slice(-1) === '/'
  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())
    return cb(null, false, stat)

  var c = true
  if (stat)
    c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[abs] = this.cache[abs] || c

  if (needDir && c === 'FILE')
    return cb()

  return cb(null, c, stat)
}
 at SyntaxError: Unexpected token (50:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/flyku-manage/node_modules/flyku-manage/index.js. Coverage (Term): 80% Coverage (LOC): 100%
*- File /root/Targets/flyku-manage/node_modules/flyku-manage/lib/index.js. Coverage (Term): 4% Coverage (LOC): 4%
*- File /root/Targets/flyku-manage/node_modules/shelljs/shell.js. Coverage (Term): 25% Coverage (LOC): 36%
*- File /root/Targets/flyku-manage/node_modules/shelljs/src/common.js. Coverage (Term): 4% Coverage (LOC): 7%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
