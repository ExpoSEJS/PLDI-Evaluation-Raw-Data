
> ws@0.4.32 install /root/Targets/slidevs/node_modules/ws
> (node-gyp rebuild 2> builderror.log) || (exit 0)

make: Entering directory '/root/Targets/slidevs/node_modules/ws/build'
  CXX(target) Release/obj.target/bufferutil/src/bufferutil.o
bufferutil.target.mk:96: recipe for target 'Release/obj.target/bufferutil/src/bufferutil.o' failed
make: Leaving directory '/root/Targets/slidevs/node_modules/ws/build'
/root/Targets/slidevs
└─┬ slidevs@1.0.3 
  ├── async@0.7.0 
  ├── colors@0.6.2 
  ├─┬ event-stream@3.1.7 
  │ ├── duplexer@0.1.1 
  │ ├── from@0.1.7 
  │ ├── map-stream@0.1.0 
  │ ├── pause-stream@0.0.11 
  │ ├── split@0.2.10 
  │ ├── stream-combiner@0.0.4 
  │ └── through@2.3.8 
  ├─┬ express@4.0.0 
  │ ├─┬ accepts@1.0.0 
  │ │ ├── mime@1.2.11 
  │ │ └── negotiator@0.3.0 
  │ ├── buffer-crc32@0.2.1 
  │ ├── cookie@0.1.0 
  │ ├── cookie-signature@1.0.3 
  │ ├── debug@0.8.1 
  │ ├── escape-html@1.0.1 
  │ ├── fresh@0.2.2 
  │ ├── merge-descriptors@0.0.2 
  │ ├── methods@0.1.0 
  │ ├── parseurl@1.0.1 
  │ ├── path-to-regexp@0.1.2 
  │ ├── qs@0.6.6 
  │ ├── range-parser@1.0.0 
  │ ├── send@0.2.0 
  │ ├─┬ serve-static@1.0.1 
  │ │ └─┬ send@0.1.4 
  │ │   ├── fresh@0.2.0 
  │ │   └── range-parser@0.0.4 
  │ ├── type-is@1.0.0 
  │ └── utils-merge@1.0.0 
  ├─┬ gulp@3.6.2 
  │ ├── archy@0.0.2 
  │ ├─┬ chalk@0.4.0 
  │ │ ├── ansi-styles@1.0.0 
  │ │ ├── has-color@0.1.7 
  │ │ └── strip-ansi@0.1.1 
  │ ├── deprecated@0.0.1 
  │ ├─┬ gulp-util@2.2.20 
  │ │ ├─┬ chalk@0.5.1 
  │ │ │ ├── ansi-styles@1.1.0 
  │ │ │ ├── escape-string-regexp@1.0.5 
  │ │ │ ├── has-ansi@0.1.0 
  │ │ │ ├─┬ strip-ansi@0.3.0 
  │ │ │ │ └── ansi-regex@0.2.1 
  │ │ │ └── supports-color@0.2.0 
  │ │ ├─┬ dateformat@1.0.12 
  │ │ │ ├── get-stdin@4.0.1 
  │ │ │ └─┬ meow@3.7.0 
  │ │ │   ├─┬ camelcase-keys@2.1.0 
  │ │ │   │ └── camelcase@2.1.1 
  │ │ │   ├─┬ loud-rejection@1.6.0 
  │ │ │   │ ├─┬ currently-unhandled@0.4.1 
  │ │ │   │ │ └── array-find-index@1.0.2 
  │ │ │   │ └── signal-exit@3.0.2 
  │ │ │   ├── map-obj@1.0.1 
  │ │ │   ├── minimist@1.2.0 
  │ │ │   ├─┬ normalize-package-data@2.4.0 
  │ │ │   │ ├── hosted-git-info@2.5.0 
  │ │ │   │ ├─┬ is-builtin-module@1.0.0 
  │ │ │   │ │ └── builtin-modules@1.1.1 
  │ │ │   │ └─┬ validate-npm-package-license@3.0.1 
  │ │ │   │   ├─┬ spdx-correct@1.0.2 
  │ │ │   │   │ └── spdx-license-ids@1.2.2 
  │ │ │   │   └── spdx-expression-parse@1.0.4 
  │ │ │   ├── object-assign@4.1.1 
  │ │ │   ├─┬ read-pkg-up@1.0.1 
  │ │ │   │ ├─┬ find-up@1.1.2 
  │ │ │   │ │ ├── path-exists@2.1.0 
  │ │ │   │ │ └─┬ pinkie-promise@2.0.1 
  │ │ │   │ │   └── pinkie@2.0.4 
  │ │ │   │ └─┬ read-pkg@1.1.0 
  │ │ │   │   ├─┬ load-json-file@1.1.0 
  │ │ │   │   │ ├── graceful-fs@4.1.11 
  │ │ │   │   │ ├─┬ parse-json@2.2.0 
  │ │ │   │   │ │ └─┬ error-ex@1.3.1 
  │ │ │   │   │ │   └── is-arrayish@0.2.1 
  │ │ │   │   │ ├── pify@2.3.0 
  │ │ │   │   │ └─┬ strip-bom@2.0.0 
  │ │ │   │   │   └── is-utf8@0.2.1 
  │ │ │   │   └── path-type@1.1.0 
  │ │ │   ├─┬ redent@1.0.0 
  │ │ │   │ ├─┬ indent-string@2.1.0 
  │ │ │   │ │ └─┬ repeating@2.0.1 
  │ │ │   │ │   └─┬ is-finite@1.0.2 
  │ │ │   │ │     └── number-is-nan@1.0.1 
  │ │ │   │ └── strip-indent@1.0.1 
  │ │ │   └── trim-newlines@1.0.0 
  │ │ ├── lodash._reinterpolate@2.4.1 
  │ │ ├─┬ lodash.template@2.4.1 
  │ │ │ ├── lodash._escapestringchar@2.4.1 
  │ │ │ ├─┬ lodash.defaults@2.4.1 
  │ │ │ │ └── lodash._objecttypes@2.4.1 
  │ │ │ ├─┬ lodash.escape@2.4.1 
  │ │ │ │ ├─┬ lodash._escapehtmlchar@2.4.1 
  │ │ │ │ │ └── lodash._htmlescapes@2.4.1 
  │ │ │ │ └── lodash._reunescapedhtml@2.4.1 
  │ │ │ ├─┬ lodash.keys@2.4.1 
  │ │ │ │ ├── lodash._isnative@2.4.1 
  │ │ │ │ ├── lodash._shimkeys@2.4.1 
  │ │ │ │ └── lodash.isobject@2.4.1 
  │ │ │ ├── lodash.templatesettings@2.4.1 
  │ │ │ └── lodash.values@2.4.1 
  │ │ ├── minimist@0.2.0 
  │ │ ├─┬ multipipe@0.1.2 
  │ │ │ └── duplexer2@0.0.2 
  │ │ └─┬ through2@0.5.1 
  │ │   ├── readable-stream@1.0.34 
  │ │   └── xtend@3.0.0 
  │ ├─┬ liftoff@0.9.8 
  │ │ ├── extend@1.2.1 
  │ │ ├─┬ findup-sync@0.1.3 
  │ │ │ ├─┬ glob@3.2.11 
  │ │ │ │ └─┬ minimatch@0.3.0 
  │ │ │ │   ├── lru-cache@2.7.3 
  │ │ │ │   └── sigmund@1.0.1 
  │ │ │ └── lodash@2.4.2 
  │ │ ├── minimist@0.0.10 
  │ │ └── resolve@0.6.3 
  │ ├─┬ orchestrator@0.3.8 
  │ │ ├─┬ end-of-stream@0.1.5 
  │ │ │ └─┬ once@1.3.3 
  │ │ │   └── wrappy@1.0.2 
  │ │ ├── sequencify@0.0.7 
  │ │ └── stream-consume@0.1.0 
  │ ├── pretty-hrtime@0.2.2 
  │ ├── semver@2.3.2 
  │ ├── tildify@0.2.0 
  │ └─┬ vinyl-fs@0.1.4 
  │   ├─┬ glob-stream@3.1.18 
  │   │ ├─┬ glob@4.5.3 
  │   │ │ └── inflight@1.0.6 
  │   │ ├─┬ glob2base@0.0.12 
  │   │ │ └── find-index@0.1.1 
  │   │ ├─┬ minimatch@2.0.10 
  │   │ │ └─┬ brace-expansion@1.1.8 
  │   │ │   ├── balanced-match@1.0.0 
  │   │ │   └── concat-map@0.0.1 
  │   │ ├── ordered-read-streams@0.1.0 
  │   │ ├─┬ through2@0.6.5 
  │   │ │ ├── readable-stream@1.0.34 
  │   │ │ └── xtend@4.0.1 
  │   │ └── unique-stream@1.0.0 
  │   ├─┬ glob-watcher@0.0.6 
  │   │ └─┬ gaze@0.5.2 
  │   │   └─┬ globule@0.1.0 
  │   │     ├─┬ glob@3.1.21 
  │   │     │ ├── graceful-fs@1.2.3 
  │   │     │ └── inherits@1.0.2 
  │   │     ├── lodash@1.0.2 
  │   │     └── minimatch@0.2.14 
  │   ├── graceful-fs@2.0.3 
  │   └── mkdirp@0.3.5 
  ├── gulp-concat@2.2.0 
  ├─┬ gulp-minify-css@0.3.13 
  │ ├─┬ bufferstreams@0.0.2 
  │ │ └─┬ readable-stream@1.1.14 
  │ │   ├── core-util-is@1.0.2 
  │ │   ├── inherits@2.0.3 
  │ │   ├── isarray@0.0.1 
  │ │   └── string_decoder@0.10.31 
  │ ├─┬ clean-css@3.0.10 
  │ │ ├── commander@2.5.1 
  │ │ └─┬ source-map@0.1.43 
  │ │   └── amdefine@1.0.1 
  │ ├─┬ gulp-util@3.0.8 
  │ │ ├── array-differ@1.0.0 
  │ │ ├── array-uniq@1.0.3 
  │ │ ├── beeper@1.1.1 
  │ │ ├─┬ chalk@1.1.3 
  │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ └── ansi-regex@2.1.1 
  │ │ │ ├── strip-ansi@3.0.1 
  │ │ │ └── supports-color@2.0.0 
  │ │ ├── dateformat@2.2.0 
  │ │ ├─┬ fancy-log@1.3.0 
  │ │ │ ├─┬ chalk@1.1.3 
  │ │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ │ └── ansi-regex@2.1.1 
  │ │ │ │ ├── strip-ansi@3.0.1 
  │ │ │ │ └── supports-color@2.0.0 
  │ │ │ └── time-stamp@1.1.0 
  │ │ ├─┬ gulplog@1.0.0 
  │ │ │ └── glogg@1.0.0 
  │ │ ├─┬ has-gulplog@0.1.0 
  │ │ │ └── sparkles@1.0.0 
  │ │ ├── lodash._reescape@3.0.0 
  │ │ ├── lodash._reevaluate@3.0.0 
  │ │ ├── lodash._reinterpolate@3.0.0 
  │ │ ├─┬ lodash.template@3.6.2 
  │ │ │ ├── lodash._basecopy@3.0.1 
  │ │ │ ├── lodash._basetostring@3.0.1 
  │ │ │ ├── lodash._basevalues@3.0.0 
  │ │ │ ├── lodash._isiterateecall@3.0.9 
  │ │ │ ├─┬ lodash.escape@3.2.0 
  │ │ │ │ └── lodash._root@3.0.1 
  │ │ │ ├─┬ lodash.keys@3.1.2 
  │ │ │ │ ├── lodash._getnative@3.9.1 
  │ │ │ │ ├── lodash.isarguments@3.1.0 
  │ │ │ │ └── lodash.isarray@3.0.4 
  │ │ │ ├── lodash.restparam@3.6.1 
  │ │ │ └── lodash.templatesettings@3.1.1 
  │ │ ├── minimist@1.2.0 
  │ │ ├── object-assign@3.0.0 
  │ │ ├── replace-ext@0.0.1 
  │ │ ├─┬ through2@2.0.3 
  │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │   ├── isarray@1.0.0 
  │ │ │   ├── process-nextick-args@1.0.7 
  │ │ │   ├── safe-buffer@5.1.1 
  │ │ │   ├── string_decoder@1.0.3 
  │ │ │   └── util-deprecate@1.0.2 
  │ │ └─┬ vinyl@0.5.3 
  │ │   └── clone@1.0.2 
  │ ├── memory-cache@0.0.5 
  │ ├─┬ through2@0.6.5 
  │ │ ├─┬ readable-stream@1.0.34 
  │ │ │ ├── isarray@0.0.1 
  │ │ │ └── string_decoder@0.10.31 
  │ │ └── xtend@4.0.1 
  │ └── vinyl-sourcemaps-apply@0.1.4 
  ├─┬ gulp-uglify@0.2.1 
  │ ├── deepmerge@0.2.10 
  │ ├─┬ through2@0.4.2 
  │ │ ├── readable-stream@1.0.34 
  │ │ └─┬ xtend@2.1.2 
  │ │   └── object-keys@0.4.0 
  │ ├─┬ uglify-js@2.4.24 
  │ │ ├── async@0.2.10 
  │ │ ├── source-map@0.1.34 
  │ │ ├── uglify-to-browserify@1.0.2 
  │ │ └─┬ yargs@3.5.4 
  │ │   ├── camelcase@1.2.1 
  │ │   ├── decamelize@1.2.0 
  │ │   ├── window-size@0.1.0 
  │ │   └── wordwrap@0.0.2 
  │ └─┬ vinyl@0.2.3 
  │   └── clone-stats@0.0.1 
  ├── ncp@0.5.1 
  ├── node-watch@0.3.5 
  ├── rimraf@2.2.8 
  └─┬ socket.io@0.9.19 
    ├── base64id@0.1.0 
    ├── policyfile@0.0.4 
    ├── redis@0.7.3 
    └─┬ socket.io-client@0.9.16 
      ├─┬ active-x-obfuscator@0.0.1 
      │ └── zeparser@0.0.5 
      ├── uglify-js@1.2.5 
      ├─┬ ws@0.4.32 
      │ ├── commander@2.1.0 
      │ ├── nan@1.0.0 
      │ ├── options@0.0.6 
      │ └── tinycolor@0.0.1 
      └── xmlhttprequest@1.4.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/slidevs/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0612 took 3.3705s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Invalid number (200:30) on program var fs = require('fs'),
    os = require('os'),
    path = require('path'),
    es = require('event-stream'),
    ncp = require('ncp'),
    rimraf = require('rimraf'),
    async = require('async'),
    watch = require('node-watch'),
    express = require('express'),
    gulp = require('gulp'),
    minify = require('gulp-minify-css'),
    uglify = require('gulp-uglify'),
    concat = require('gulp-concat'),
    colors = require('colors');

module.exports = slidevs;

function slidevs(userSettings) {

    userSettings = userSettings ? userSettings : {};
    settings = {

        name: userSettings.name ? userSettings.name : 'Slidevs Presentation',
        layout: userSettings.layout ? userSettings.layout.toLowerCase().replace('.html', '').replace('/', '') + '.html' : 'main-layout.html',
        slidesFolder: userSettings.slidesFolder ? '/' + userSettings.slidesFolder.toLowerCase().replace(' ', '').replace('/', '') : '/slides',
        styling: userSettings.styling ? userSettings.styling.toLowerCase().replace('.css', '').replace('/', '') + '.css' : 'styling.css',
        scriptsFolder: userSettings.scriptsFolder ? '/' + userSettings.scriptsFolder.toLowerCase().replace(' ', '').replace('/', '') : '/scripts',
        imagesFolder: userSettings.imagesFolder ? '/' + userSettings.imagesFolder.toLowerCase().replace(' ', '').replace('/', '') : '/images',
        controls: userSettings.controls ? (typeof(userSettings.controls.on) === 'boolean' ? userSettings.controls.on : true) : true,
        password: userSettings.controls ? (userSettings.controls.password.length !== 0 ? userSettings.controls.password : false) : false,
        progressBar: typeof(userSettings.progressBar) === 'boolean' ? userSettings.progressBar : true,
        port: userSettings.port || 5000,
        address: (os.networkInterfaces().en1 !== undefined ? os.networkInterfaces().en1[1].address : 'http://localhost'),
        thisFolder: path.dirname(module.parent.filename),
        hiddenFolder: path.join(path.dirname(module.parent.filename), '.slidevs'),
        running: false

    };

    return {

        // Server
        start: function(self) {
            if (self) startSlidevs(self);
            else startSlidevs(this);
        },
        isRunning: function() {
            return settings.running;
        },
        isNowRunning: function() {
            settings.running = true;
        },

        // Settings
        name: settings.name,
        trimmedName: settings.name.toLowerCase().replace(' ', '-'),
        layout: settings.layout,
        slidesFolder: settings.slidesFolder,
        styling: settings.styling,
        scriptsFolder: settings.scriptsFolder,
        imagesFolder: settings.imagesFolder,
        controls: settings.controls,
        password: settings.password,
        progressBar: settings.progressBar,
        port: settings.port,
        socketPort: (settings.port + 1),
        address: settings.address,

        // Folders
        thisFolder: settings.thisFolder,
        hiddenFolder: settings.hiddenFolder

    };

}

function startSlidevs(slidevs) {

    console.log('\n\nSLIDEVS.JS'.yellow + ' --------------------------------------------------------------------------------------------\n'.grey);
    console.log((slidevs.isRunning() ? 'Rebuilding' : 'Building') + ' your slidevs \'' + slidevs.name.bold + '\' started..' + (slidevs.controls ? (slidevs.isRunning() ? '' : '\n') : '\n'));

    async.waterfall([
        function(startCallback) {
            buildSlidevs(slidevs, startCallback);
        },
        function(slidevs, startCallback) {
            if (slidevs.isRunning()) startCallback(null, slidevs, null, true);
            else createSlidevServer(slidevs, startCallback);
        },
        function(slidevs, slidevsInfo, alreadyRunning, startCallback) {

            watch([
                path.join(slidevs.thisFolder, slidevs.layout),
                path.join(slidevs.thisFolder, slidevs.slidesFolder),
                path.join(slidevs.thisFolder, slidevs.styling),
                path.join(slidevs.thisFolder, slidevs.scriptsFolder),
                path.join(slidevs.thisFolder, slidevs.imagesFolder)],
                function() {
                    slidevs.start(slidevs);
                });

            startCallback(null, slidevsInfo, alreadyRunning);

        }
    ], function(err, slidevLinks, alreadyRunning) {
        if (err) showMessage('start async', err);
        else {
            console.log((slidevs.controls ? '\n' : '') + '-------------------------------------------------------------------------------------------------------\n'.grey);
            if (alreadyRunning) console.log('Your slidev \'' + slidevs.name.bold + '\' has been rebuild with your changes!');
            else {
                console.log('Your slidevs \'' + slidevs.name.bold + '\' has been created and is now up and running!\n');
                console.log('Slidevs:', slidevLinks.slides.yellow);
                if (slidevLinks.controls) console.log('Controls:', slidevLinks.controls.yellow);
                console.log('\n(i)'.bold + ' Saving changes made in the layout, slides, styling, images or script(s) will rebuild your Slidevs!');
            }
            console.log('\n-------------------------------------------------------------------------------------------------------\n\n'.grey);
        }

    });

}

function buildSlidevs(slidevs, startCallback) {

    async.waterfall([
        function(buildCallback) {
            checkSlidevsFolder(slidevs, buildCallback);
        },
        function(slidevs, buildCallback) {
            prepareSlides(slidevs, buildCallback);
        },
        function(slidevs, buildCallback) {

            // Create slidev's .js and .css file
            var counter = 0,
                fileLocations = {
                    scripts: path.join(slidevs.hiddenFolder, 'slidevs.js'),
                    styles: path.join(slidevs.hiddenFolder, 'slidevs.css')
                };

            for(var key in fileLocations) {
                fs.writeFile(fileLocations[key], '', function(err) {
                    if (err) showMessage('creating the slidevs ' + key + ' file', err);
                    else {
                        counter++;
                        if(counter === 2) buildCallback(null, fileLocations, slidevs);
                    }
                });
            }

        },
        function(fileLocations, slidevs, buildCallback) {
            prepareVendors(fileLocations, slidevs, buildCallback);
        },
        function(fileLocations, slidevs, buildCallback) {
            prepareScripts(fileLocations, slidevs, buildCallback);
        },
        function(slidevs, buildCallback) {
            prepareStyling(slidevs, buildCallback);
        },
        function(slidevs, buildCallback) {
            copyImages(slidevs, buildCallback);
        },
        function(slidevs, buildCallback) {
            concatSlidevs(slidevs, buildCallback);
        },
        function(slidevs, buildCallback) {
            checkControls(slidevs, buildCallback);
        },
    ], function(err, slidevs) {
        if (err) showMessage('build async', err);
        else startCallback(null, slidevs);
    });

}

function checkSlidevsFolder(slidevs, buildCallback) {

    function createSlidevsFolder() {
        fs.mkdir(slidevs.hiddenFolder, [], function(err) {
            if (err) showMessage('creating a hidden slidevs folder', err);
            else buildCallback(null, slidevs);
        });
    }

    fs.exists(slidevs.hiddenFolder, function(exists) {
        if (exists) {
            rimraf(slidevs.hiddenFolder, function(err) {
                if (err) showMessage('deleting the hidden slidevs folder', err);
                createSlidevsFolder();
            });
        } else createSlidevsFolder();
    });

}

function prepareSlides(slidevs, buildCallback) {

    var tmpSlidesFolder = path.join(slidevs.hiddenFolder, '.slides-tmp');
    fs.mkdir(tmpSlidesFolder, 0777, function(err) {
        if (err) showMessage('creating hidden slides folder', err);
        else {
            fs.readdir(path.join(slidevs.thisFolder, slidevs.slidesFolder), function(err, slides) {
                if (err) showMessage('preparing the slides', err);
                else {
                    if (slides.length < 2) showMessage('concatenating the slides', 'You need at least two slides!');
                    else {

                        var slidesAreNumbered = true;
                        slides.forEach(function(slide, index) {
                            if (slide !== '.DS_Store') {
                                var fileName = slide.replace('.html', ''),
                                    isNumbered = /^[0-9]/.test(fileName[fileName.length - 1]);
                                if (!isNumbered) slidesAreNumbered = false;
                            } else slides.splice(index, 1);
                        });

                        if(!slidesAreNumbered) showMessage('concatenating the slides', 'Could you please number your slides as following? > slide-1.html, slide-2.html');
                        else {

                            var concatSlides = function(prepareSlidesCallback) {
                                var slidesFile = path.join(tmpSlidesFolder, 'slides.html');
                                async.waterfall([
                                    function(slideConcatCallback) {
                                        fs.appendFile(slidesFile, '<div class="slidevs-frame">\n<div class="slidevs-strip">\n', function(err) {
                                            if (err) showMessage('appending the first elements of the slides container', err);
                                            else slideConcatCallback();
                                        });
                                    },
                                    function(slideConcatCallback) {
                                        slides.forEach(function(slide, index) {
                                            fs.readFile(path.join(tmpSlidesFolder, slide), 'utf-8', function(err, data) {
                                                if (err) showMessage('getting a slide for concatenation', err);
                                                else {
                                                    fs.appendFile(path.join(tmpSlidesFolder, 'slides.html'), (data.toString() + '\n'), function(err) {
                                                        if (err) showMessage('adding slide to temporary slides file', err);
                                                        else {
                                                            fs.unlink(path.join(tmpSlidesFolder, slide), function(err) {
                                                                if (err) showMessage('deleting temporary slide file', err);
                                                                else if ((index + 1) === slides.length) slideConcatCallback();
                                                            });
                                                        }
                                                    });
                                                }
                                            });
                                        });
                                    },
                                    function(slideConcatCallback) {
                                        fs.appendFile(slidesFile, '\n</div>\n</div>', function(err) {
                                            if (err) showMessage('appending the last elements the slides container', err);
                                            else slideConcatCallback(null, slidevs);
                                        });
                                    }

                                ], function(err, slidevs) {
                                    if (err) showMessage('concatenating slides async', err);
                                    else prepareSlidesCallback(null, slidevs);
                                });

                            };

                            async.waterfall([

                                    function(prepareSlidesCallback) {

                                        var goodOrder = [];
                                        slides.forEach(function(slide, index) {
                                            goodOrder[slide.replace('.html', '').split('-')[1]] = slide;
                                        });
                                        prepareSlidesCallback(null, goodOrder);

                                    },
                                    function(goodOrder, prepareSlidesCallback) {

                                        goodOrder.forEach(function(slide, index) {

                                            var slideFile = fs.createReadStream(path.join(slidevs.thisFolder, slidevs.slidesFolder, slide)),
                                                tmpSlideFile = fs.createWriteStream(path.join(tmpSlidesFolder, slide));

                                            slideFile
                                                .pipe(es.through(function(s) {
                                                    var slide = s.toString(),
                                                    resultSlide = '\n<div class="slidev">\n<div class="note-canvas"></div>\n' + slide;
                                                    this.emit('data', resultSlide);
                                                }, function() {
                                                    this.emit('data', '\n</div>');
                                                    this.emit('end');
                                                }))
                                                .pipe(tmpSlideFile)
                                                .on('error', function(err) {
                                                    showMessage('piping a slide to his temporary file', err);
                                                })
                                                .on('finish', function() {
                                                    if ((index + 1) === slides.length) prepareSlidesCallback();
                                                });

                                        });

                                    },
                                    function(prepareSlidesCallback) {
                                        concatSlides(prepareSlidesCallback);
                                    }

                                ], function(err, slidevs) {
                                    if (err) showMessage('preparing slides async', err);
                                    else buildCallback(null, slidevs);
                                });

                            }

                    }
                }
            });
        }
    });

}

function prepareVendors(fileLocations, slidevs, buildCallback) {

    var vendorsLocation = path.join(path.dirname(module.filename), 'lib', 'vendor');
    fs.readdir(vendorsLocation, function(err, vendorFiles) {
        if (err) showMessage('reading the vendors folder', err);
        else {
            vendorFiles.forEach(function(vendorFile, index) {
                if (vendorFile !== '.DS_Store') {
                    var finalFile, fileType = vendorFile.substr((vendorFile.length - 3), 3);
                    switch(fileType) {
                        case '.js': finalFile = fileLocations.scripts; break;
                        case 'css': finalFile = fileLocations.styles; break;
                        default: finalFile = false;
                    }
                    if(!finalFile) showMessage('preparing vendor files', 'There seems to be an unsupported file type within the vendor folder. Only .js and .css allowed.');
                    else {
                        fs.readFile(path.join(vendorsLocation, vendorFile), 'utf-8', function(err, data) {
                            if (err) showMessage('reading a vendor file', err);
                            else {
                                fs.appendFile(finalFile, (data.toString() + '\n'), function(err) {
                                    if (err) showMessage('adding a vendor file to the final file', err);
                                    else if ((index + 1) === vendorFiles.length) buildCallback(null, fileLocations, slidevs);
                                });
                            }
                        });
                    }
                }
            });
        }
    });

}

function prepareScripts(fileLocations, slidevs, buildCallback) {

    var scriptsFile = fileLocations.scripts,
        filesLocation,
        addScripts = function(which, slidevs, scriptsConcatCallback) {

            switch(which) {
                case 'slidevs': filesLocation = path.join(path.dirname(module.filename), 'lib'); break;
                case 'user': filesLocation = path.join(slidevs.thisFolder, slidevs.scriptsFolder); break;
                default: showMessage('the adding scripts switch', 'Switch does not recognize which scripts to get?');
            }

            fs.exists(filesLocation, function(exists) {
                if (!exists) buildCallback(null, slidevs);
                else {
                    fs.readdir(filesLocation, function(err, scripts) {
                        if (err) showMessage('reading ' + which + ' scripts folder', err);
                        else {

                            var finalFiles =
                                scripts,
                                removed = 0;

                            scripts.forEach(function(readScript, index) {
                                // Remove folders first
                                if (readScript.split('.').length === 1) {
                                    finalFiles.splice(index, 1);
                                    removed++;
                                }
                                if ((index + 1) - removed === finalFiles.length) {
                                    finalFiles.forEach(function(readScript, index) {
                                        if (readScript !== '.DS_Store' && readScript.substr((readScript.length - 2), 2) === 'js' && readScript.substr(0, 8) !== 'controls') {
                                            fs.readFile(path.join(filesLocation, readScript), 'utf-8', function(err, data) {
                                                if (err) showMessage('getting a ' + which + ' script for concatenation', err);
                                                else {
                                                    fs.appendFile(scriptsFile, (data.toString() + '\n'), function(err) {
                                                        if (err) showMessage('adding ' + which + ' script to temporary slidevs.js file', err);
                                                        else if ((index + 1) === finalFiles.length) scriptsConcatCallback(null, slidevs);
                                                    });
                                                }
                                            });
                                        }
                                    });
                                }

                            });

                        }
                    });

                }
            });
        };

    async.waterfall([
        function(scriptsConcatCallback) {
            addScripts('slidevs', slidevs, scriptsConcatCallback);
        },
        function(slidevs, scriptsConcatCallback) {
            addScripts('user', slidevs, scriptsConcatCallback);
        },
        function(slidevs, scriptsConcatCallback) {
            fs.appendFile(scriptsFile, '\n});', function(err) {
                if (err) showMessage('adding last part for scripts', err);
                else scriptsConcatCallback(null, slidevs);
            });
        }
    ], function(err, slidevs) {
        if (err) showMessage('scripts async', err);
        else {

            gulp.src(scriptsFile)
                .pipe(uglify({ mangle: false }))
                .pipe(gulp.dest(slidevs.hiddenFolder))
                .on('error', function(err) {
                    showMessage('minifying front-end script', err);
                })
                .on('end', function() {
                    buildCallback(null, slidevs);
                });

        }
    });

}

function prepareStyling(slidevs, buildCallback) {

    gulp.src([path.join(path.dirname(module.filename), '/lib/slidevs.css'), path.join(slidevs.thisFolder, slidevs.styling)])
        .pipe(minify())
        .pipe(concat('slidevs.css'))
        .pipe(gulp.dest(slidevs.hiddenFolder))
        .on('error', function(err) {
            showMessage('concatenating and minifying styling', err);
        })
        .on('end', function() {
            buildCallback(null, slidevs);
        });

}

function copyImages(slidevs, buildCallback) {

    var userImages = path.join(slidevs.thisFolder, slidevs.imagesFolder),
        imagesFolder = path.join(slidevs.hiddenFolder, 'images');

    fs.exists(userImages, function(exists) {
        if (exists) {
            ncp(userImages, imagesFolder, function(err) {
                if (err) showMessage('copying user images', err);
                else buildCallback(null, slidevs);
            });
        } else buildCallback(null, slidevs);
    });

}

function concatSlidevs(slidevs, buildCallback) {

    var layout = fs.createReadStream(path.join(slidevs.thisFolder, slidevs.layout)),
        slidevsIndex = fs.createWriteStream(path.join(slidevs.hiddenFolder, 'slidevs.html'));

    fs.readFile(path.join(slidevs.hiddenFolder, '.slides-tmp', 'slides.html'), 'utf-8', function(err, slides) {
        if (err) showMessage('getting concatenated slides', err);
        else {

            layout.pipe(es.split('\n'))
                .pipe(es.mapSync(function(line) {
                    return line.split('\t');
                }))
                .pipe(es.mapSync(function(line) {
                    line = line[0].trim();
                    if (line.indexOf('t') === 2) line = '<html class="no-js">';
                    if (line.indexOf('i') === 2) line = '<title>' + slidevs.name + '</title>';
                    if (line.indexOf('[## Assets ##]') > -1) {
                        line = '<link rel="stylesheet" type="text/css" href="slidevs.css" />\n<script type="text/javascript" src="slidevs.js"></script>';
                        if (slidevs.controls) line += '\n<script type="text/javascript" src="/socket.io/socket.io.js"></script>';
                    }
                    if (line.indexOf('[## Slidevs ##]') > -1) {
                        if (slidevs.progressBar) line = '<div class="progress-bar"><div class="progress"></div></div>\n\n';
                        if (slidevs.controls) line += '<input type="hidden" name="socket-connection" class="socket-connection" value="' + slidevs.address + ':' + slidevs.port + '" />\n' + slides;
                        else line += slides;
                    }
                    return line;
                }))
                .pipe(es.join('\n'))
                .pipe(es.wait())
                .pipe(slidevsIndex)
                .on('error', function(error) {
                    showMessage('importing slides', error);
                })
                .on('finish', function() {
                    rimraf(path.join(slidevs.hiddenFolder, '.slides-tmp'), function(err) {
                        if (err) showMessage('removing temporary slides folder', err);
                        else buildCallback(null, slidevs);
                    });
                });

        }
    });

}

function checkControls(slidevs, buildCallback) {

    if(slidevs.controls) {

        async.waterfall([
            function(controlsCallback) {
                fs.readdir(path.join(path.dirname(module.filename), 'lib', 'vendor'), function(err, scripts) {
                    if (err) showMessage('reading vendor scripts folder for getting jquery', err);
                    else {
                        scripts.forEach(function(scriptName) {
                            if (scriptName.split('-')[0] === 'jquery') {
                                gulp.src([path.join(path.dirname(module.filename), 'lib', 'vendor', scriptName), path.join(path.dirname(module.filename), 'lib', 'controls.js')])
                                    .pipe(uglify({ mangle: false }))
                                    .pipe(concat('controls.js'))
                                    .pipe(gulp.dest(slidevs.hiddenFolder))
                                    .on('error', function(err) {
                                        showMessage('minifying front-end controls script', err);
                                    })
                                    .on('end', function() {
                                        controlsCallback(null, slidevs);
                                    });
                            }
                        });
                    }
                });
            },
            function(slidevs, controlsCallback) {
                (fs.createReadStream(path.join(path.dirname(module.filename), 'lib', 'controls.html')))
                    .pipe(es.split('\n'))
                    .pipe(es.mapSync(function(line) { return line.split('\t'); }))
                    .pipe(es.mapSync(function(line) {
                        line = line[0].trim();
                        if (line.indexOf('[## Title ##]') > -1) line = '<title>' + slidevs.name + ' - Controls</title>';
                        if (line.indexOf('[## Assets ##]') > -1) line = '<link rel="stylesheet" type="text/css" href="slidevs.css" />\n<script type="text/javascript" src="/socket.io/socket.io.js"></script>\n<script type="text/javascript" src="/controls.js"></script>';
                        if (line.indexOf('[## Password-check ##]') > -1) {
                            if (slidevs.password && !slidevs.isRunning()) line = '<div class="pass-check">\n<span class="heading">Password required</span>\n<input type="password" class="pass-input" />\n<div class="pass-button">Let me control!</div>\n</div>';
                            else line = '';
                        }
                        if (line.indexOf('[## Socket-connection ##]') > -1) line = '<input type="hidden" name="socket-connection" class="socket-connection" value="' + slidevs.address + ':' + slidevs.socketPort + '" />';
                        return line;
                    }))
                    .pipe(es.join('\n'))
                    .pipe(es.wait())
                .pipe(fs.createWriteStream(path.join(slidevs.hiddenFolder, 'controls.html')))
                .on('error', function(err) {
                    showMessage('copying controls file', err);
                })
                .on('finish', function() {
                    controlsCallback(null, slidevs);
                });
            }
        ], function(err, slidevs) {
            if (err) showMessage('controls async', err);
            else buildCallback(null, slidevs);
        });

    } else buildCallback(null, slidevs);

}

function createSlidevServer(slidevs, startCallback) {

    var uris = {
            slides: '/' + slidevs.trimmedName,
            controls: slidevs.controls ? '/' + slidevs.trimmedName : false
        },
        links = {
            slides: slidevs.address + ':' + slidevs.port + uris.slides,
            controls: slidevs.controls ? slidevs.address + ':' + slidevs.socketPort + uris.controls : false
        };

    if (!slidevs.controls) {

        // Slidevs only
        var app = express();
        app.use(express.static(slidevs.hiddenFolder));
        app.get(uris.slides, function(req, res) {
            res.sendfile(slidevs.hiddenFolder + '/slidevs.html');
        });
        app.listen(slidevs.port);
        slidevs.isNowRunning();

    } else {

        // Slidevs including controls
        require('./lib/controls-server')(uris, slidevs);

    }

    startCallback(null, slidevs, links, false);

}

function showMessage(location, message) {
    console.log('\n\nSLIDEVS.JS'.red + ' ------------------------------------------------------------------------------------\n'.grey);
    console.log('Something went wrong during '.grey + location.grey + ':\n'.grey + message);
    console.log('\n-----------------------------------------------------------------------------------------------\n\n'.grey);
} at SyntaxError: Invalid number (200:30)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.expect (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:597:10)
    at Parser.pp$3.parseExprList (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2152:16)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
