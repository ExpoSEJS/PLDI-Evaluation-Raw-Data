
> uws@0.14.5 install /root/Targets/nodestalgia/node_modules/uws
> node-gyp rebuild > build_log.txt 2>&1 || exit 0

/root/Targets/nodestalgia
└─┬ nodestalgia@0.1.2 
  ├── commander@2.11.0 
  ├─┬ express@2.5.8 
  │ ├─┬ connect@1.9.2 
  │ │ └── formidable@1.0.17 
  │ ├── mime@1.2.4 
  │ ├── mkdirp@0.3.0 
  │ └── qs@0.4.2 
  ├─┬ jade@1.11.0 
  │ ├── character-parser@1.2.1 
  │ ├─┬ clean-css@3.4.28 
  │ │ ├─┬ commander@2.8.1 
  │ │ │ └── graceful-readlink@1.0.1 
  │ │ └── source-map@0.4.4 
  │ ├── commander@2.6.0 
  │ ├─┬ constantinople@3.0.2 
  │ │ └── acorn@2.7.0 
  │ ├─┬ jstransformer@0.0.2 
  │ │ ├── is-promise@2.1.0 
  │ │ └─┬ promise@6.1.0 
  │ │   └── asap@1.0.0 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ ├─┬ transformers@2.1.0 
  │ │ ├─┬ css@1.0.8 
  │ │ │ ├── css-parse@1.0.4 
  │ │ │ └── css-stringify@1.0.5 
  │ │ ├─┬ promise@2.0.0 
  │ │ │ └── is-promise@1.0.1 
  │ │ └─┬ uglify-js@2.2.5 
  │ │   ├─┬ optimist@0.3.7 
  │ │   │ └── wordwrap@0.0.3 
  │ │   └── source-map@0.1.43 
  │ ├─┬ uglify-js@2.8.29 
  │ │ ├── source-map@0.5.7 
  │ │ ├── uglify-to-browserify@1.0.2 
  │ │ └─┬ yargs@3.10.0 
  │ │   ├── camelcase@1.2.1 
  │ │   ├─┬ cliui@2.1.0 
  │ │   │ ├─┬ center-align@0.1.3 
  │ │   │ │ ├─┬ align-text@0.1.4 
  │ │   │ │ │ ├─┬ kind-of@3.2.2 
  │ │   │ │ │ │ └── is-buffer@1.1.5 
  │ │   │ │ │ ├── longest@1.0.1 
  │ │   │ │ │ └── repeat-string@1.6.1 
  │ │   │ │ └── lazy-cache@1.0.4 
  │ │   │ ├── right-align@0.1.3 
  │ │   │ └── wordwrap@0.0.2 
  │ │   ├── decamelize@1.2.0 
  │ │   └── window-size@0.1.0 
  │ ├── void-elements@2.0.1 
  │ └─┬ with@4.0.3 
  │   ├── acorn@1.2.2 
  │   └── acorn-globals@1.0.9 
  ├─┬ socket.io@2.0.3 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├─┬ engine.io@3.1.1 
  │ │ ├─┬ accepts@1.3.3 
  │ │ │ ├─┬ mime-types@2.1.17 
  │ │ │ │ └── mime-db@1.30.0 
  │ │ │ └── negotiator@0.6.1 
  │ │ ├── base64id@1.0.0 
  │ │ ├── cookie@0.3.1 
  │ │ ├─┬ engine.io-parser@2.1.1 
  │ │ │ ├── after@0.8.2 
  │ │ │ ├── arraybuffer.slice@0.0.6 
  │ │ │ └── blob@0.0.4 
  │ │ ├── uws@0.14.5 
  │ │ └─┬ ws@2.3.1 
  │ │   ├── safe-buffer@5.0.1 
  │ │   └── ultron@1.1.0 
  │ ├── object-assign@4.1.1 
  │ ├── socket.io-adapter@1.1.1 
  │ ├─┬ socket.io-client@2.0.3 
  │ │ ├── backo2@1.0.2 
  │ │ ├── base64-arraybuffer@0.1.5 
  │ │ ├── component-bind@1.0.0 
  │ │ ├── component-emitter@1.2.1 
  │ │ ├─┬ engine.io-client@3.1.1 
  │ │ │ ├── component-inherit@0.0.3 
  │ │ │ ├── parsejson@0.0.3 
  │ │ │ ├── xmlhttprequest-ssl@1.5.3 
  │ │ │ └── yeast@0.1.2 
  │ │ ├── has-cors@1.1.0 
  │ │ ├── indexof@0.0.1 
  │ │ ├── object-component@0.0.3 
  │ │ ├─┬ parseqs@0.0.5 
  │ │ │ └─┬ better-assert@1.0.2 
  │ │ │   └── callsite@1.0.0 
  │ │ ├── parseuri@0.0.5 
  │ │ └── to-array@0.1.4 
  │ └─┬ socket.io-parser@3.1.2 
  │   ├── has-binary2@1.0.2 
  │   └── isarray@2.0.1 
  └─┬ stylus@0.54.5 
    ├── css-parse@1.7.0 
    ├─┬ glob@7.0.6 
    │ ├── fs.realpath@1.0.0 
    │ ├─┬ inflight@1.0.6 
    │ │ └── wrappy@1.0.2 
    │ ├── inherits@2.0.3 
    │ ├─┬ minimatch@3.0.4 
    │ │ └─┬ brace-expansion@1.1.8 
    │ │   ├── balanced-match@1.0.0 
    │ │   └── concat-map@0.0.1 
    │ ├── once@1.4.0 
    │ └── path-is-absolute@1.0.1 
    ├── mkdirp@0.5.1 
    ├── sax@0.5.8 
    └─┬ source-map@0.1.43 
      └── amdefine@1.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/nodestalgia/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0588 took 2.0528s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var program = require('commander');
var path = require('path');

program
.version('0.1.2')
.option('-D, --no-dns', 'Do not resolve DNS')
.option('-e, --speed <speed>', 'Set the request movement speed', Number, 15)
.option('-f, --framerate <framerate>', 'Set the rendering canvas frame rate', Number, 30)
.option('-T, --no-time', 'Do not show date and time')
.option('-C, --no-colorize', 'Do not colorize the requests')
.option('-S, --no-sumarize', 'Do not show the sumarize counters')
.parse(process.argv);

var filename = [];
if (program.args.length > 0) {
  for (var i = 0; i < program.args.length; i++) {
    var f = program.args[i];
    if (!path.existsSync(f)) {
      throw (f + ' does not exists');
    } else {
      filename.push(f);
    }
  }
} else {
  filename.push("/var/log/apache2/access.log");
}

var express   = require('express'),
sys       = require('util'),
dns       = require('dns'),
events    = require('events'),
socketio  = require('socket.io');

var app = module.exports = express.createServer();

// Configuration
app.configure(function () {
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade');
  app.set('view options', { layout: false });
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(require('stylus').middleware({ src: __dirname + '/public' }));
  app.use(app.router);
  app.use(express['static'](__dirname + '/public'));
});

app.configure('development', function () {
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
});

app.configure('production', function () {
  app.use(express.errorHandler());
});

// Routes / Controllers
[''].map(function (controllerName) { // Examples: ['api', 'authorization', 'users', 'tests']
  if (controllerName === '') {
    controllerName = 'index'; // Default controller
  }
  var controller = require('../routes/' + controllerName);
  controller.setup(app, program);
});

app.listen(8081);
var io = socketio.listen(app);
console.log("Express server listening on port %d in %s mode", app.address().port, app.settings.env);

var spawn = require('child_process').spawn;
var tail = spawn('tail', ['-f'].concat(filename));

// 127.0.0.1 - - [07/Mar/2012:23:21:47 +0100] "GET / HTTP/1.0" 200 454 "-" "ApacheBench/2.3"
var regexp = /([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).+\[(.+)\] "(\w+) ([^ ]+) .*" (\w+) (\w+)/;

// Regex for fake dns
var regexpdns = /(fakedns=([0-9\.]+))/;

// Hashmap for DNS resolves
var hmdns = {};

// For DNS resolve
function reverse_addr(addr) {
  var e = new events.EventEmitter();
  dns.reverse(addr, function (err, domains) {
    if (err) {
      if (err.errno === dns.NOTFOUND) {
        e.emit('response', addr, 'NOTFOUND');
      } else {
        e.emit('error', addr, err);
      }
    } else {
      e.emit('response', addr, domains);
    }
  });
  return e;
}

tail.stdout.on('data', function (data) {
  var str = data.toString('utf8')
    , match = regexp.exec(str)
    , robj
    , matchdns;

  if (match !== null) {
    robj = {ip: match[1], time: match[2], method: match[3], path: match[4], result: match[5], size: match[6]};

    // Test for matching a GET parameter for DNS faking
    matchdns = regexpdns.exec(robj.path);
    if (matchdns !== null) {
      robj.ip = matchdns[2];
      robj.path = match[4].replace(regexpdns, ''); // Hide fakedns
      console.log('Fake ip: ' + robj.ip);
    }

    if (!program.dns) {
      io.sockets.emit('log', JSON.stringify(robj));
    } else if (hmdns[robj.ip] !== undefined) {
      robj.ip = hmdns[robj.ip];
      io.sockets.emit('log', JSON.stringify(robj));
    } else {
      reverse_addr(robj.ip).addListener('error', function (addr, err) {
        console.log(addr + ' failed: ' + err.message);
      }).addListener('response', function (addr, domains) {
        if (domains.length === 0) {
          hmdns[robj.ip] = robj.ip;
        } else {
          console.log('DNS: ' + addr + ' resolved to ' + domains[0]);
          hmdns[robj.ip] = domains[0];
        }

        // Same that known host
        robj.ip = hmdns[robj.ip];
        io.sockets.emit('log', JSON.stringify(robj));
      });
    }

  }
});
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/nodestalgia/node_modules/nodestalgia/index.js. Coverage (Term): 80% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
