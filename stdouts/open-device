/root/Targets/open-device
└── open-device@4.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/open-device/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0848 took 4.0434s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
/**
 * Created by Alec on 12/15/15.
 */
var server = require("./lib/server")();
var path = require("path");
var fs = require("fs");
var child_process = require('child_process');
var cwd = process.cwd();
const publicFolder = __dirname + "/public";
const PORT=8080;
const HOME = process.env.HOME || process.env.USERPROFILE;
server.listen(PORT, (function(){
    console.log("Started server on port: %s", PORT);
}));

server.use(require("./lib/server-send"));
server.use(require("./lib/server-accessible")(publicFolder));
server.use(require("./lib/server-json"));
server.post("/exec", function(req,res){

    console.log("[" + req.body.command + "]", req.body.arguments);
    if(req.body.command === "cd"){
        req.body.arguments = req.body.arguments.replace(/ /g,"");
        var tempCwd;

        if(req.body.arguments.length > 0)
            tempCwd = req.body.arguments[0] === "/"? req.body.arguments : path.join(cwd, req.body.arguments);
        else
            tempCwd = HOME;

        fs.exists(tempCwd, (function(exists){
            if(exists){
                cwd = tempCwd;
                res.send(JSON.stringify({cwd: path.basename(cwd), data: "new directory '" + cwd + "'"}));
            }else
                res.send(JSON.stringify({cwd: path.basename(cwd), data: "path does not exists..."}));

        }));

       }else{

        child_process.exec(req.body.command + " " + req.body.arguments, {cwd: cwd}, function(err, stdout){

           if(err)
           res.send( JSON.stringify({cwd: path.basename(cwd), data: "an error has occurred."}) );
           else
            res.send(JSON.stringify({cwd: path.basename(cwd), data: stdout}));

        });
    }

});


server.get("/", function(req,res, next){


    console.log(req.url);
    fs.readFile(__dirname + "/view.html", function(err, data){
        if(err)
            res.send("Error could not load.");
        else
            res.send(data);
    })

}); at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
