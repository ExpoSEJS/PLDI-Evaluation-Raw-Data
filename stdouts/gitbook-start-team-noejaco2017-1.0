/root/Targets/gitbook-start-team-noejaco2017-1.0
└── gitbook-start-team-noejaco2017-1.0@0.0.11 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/gitbook-start-team-noejaco2017-1.0/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0865 took 4.3938s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
var express = require('express');
var app = express()
var path = require('path');
var fs= require('fs-extra');
var ejs=require('ejs');
var child = require("child_process");


//MINIMIST
var argv = require('minimist')(process.argv.slice(2));
console.dir(argv);


function estructura(directorio){
      //CREACION DE LOS DIRECTORIOS TXT, SCRIPTS, Y LA CARPETA A GENERAR
      //creamos el directorio raiz

      var direct = process.cwd() + directorio;
      console.log("VARIABLE DIRECTORIO "+direct);

             //Creamos el directorio
             fs.mkdirsSync(directorio);


      //Creamos una copia de los scripts
      console.log("LLEGOOOOOOOOOOO SCRIPTS");
      fs.copy(path.join(__dirname,'..','scripts'), path.join(process.cwd(), directorio , 'scripts'),function(err){
        if(err)
          console.log(err);
      });
             console.log("LLEGOOOOOOOOOOO TXT");
             //Creamos una copia de los txt
             fs.copy(path.join(__dirname,'..','txt'), path.join(process.cwd(), directorio , 'txt'),function(err){
               if(err)
                 console.log(err);
             });

      console.log("LLEGOOOOOOOOOOO BOOK");
      fs.copy(path.join(__dirname,'..','book.json'),path.join(process.cwd(), directorio , 'book.json'),function(err){
        if(err)
        console.log(err);
      });
console.log("LLEGOOOOOOOOOOO APP");
      //copiamos server.js
      fs.copy(path.join(__dirname,'..','app.js'),path.join(process.cwd(), directorio , 'app.js'),function(err){
        if(err)
        console.log(err);
      });
console.log("SALGO");

}




if(argv.h || argv.help){

    //MENU
    console.log("gitbook-start [OPTIONS]\n"+
    "--autor: autor del libro a crear node gitbook-star -a AutorDelLibro\n"+
    "--email: email de contacto del usuario\n"+
    "--version: version repositorio github contra el que se va a trabajar -r github.com/repo.git\n"+
    "--url: repositorio github contra el que se va a trabajar -r github.com/repo.git\n"+
    "--wiki: direccion web de la wiki en github -w github.com/repo.wiki.git\n"+
    "--directorio: nombre del directorio a crear\n"+
    "--help: muestra ayuda sobre las opciones disponibles\n"+
    "--deploy: Deploy en IaaS(iaas.ull.es)"+
    "--iaasIP: Direccion de la maquina virtual\n"+
    "--iaaspath: Repositorio que va a contener el libro en iaas\n");


}else{
  if(!argv.iaasIP || !argv.iaaspath || !argv.deploy ){
               console.log("Falta el argumento IP, path o directorio");
  }else{
    if(argv.deploy){
                 if(!argv.directorio){//Si especificas deploy solo

                             estructura("Estructura_del_book");

                             child.exec('npm install --save-dev gitbook-start-plugin-iaas-ull-es-noejaco2017 ', function(error, stdout, stderr){
                               if(error)
                                 console.log(error)

                               console.log(stderr);
                               console.log(stdout);
                             })

                             //añadir las tareas al gulp
                             var iaas = require(path.join(__dirname,'../..','gitbook-start-plugin-iaas-ull-es-noejaco2017 ','linea-comando-iaas '));
                             iaas.initialize("Estructura_del_book");


                             //renderizando package.json con opciones de iaas
                             ejs.renderFile(path.join(__dirname,'./template_npm','template','package.ejs'),{ direccionip:argv.iaasIP,direccionpath:argv.iaaspath},
                               function(err,data){
                                   if(err) {
                                       console.error(err);
                                   }
                                   if(data) {
                                       fs.writeFile(path.join(process.cwd(),"Estructura_del_book",'package.json'), data);
                                   }
                               });
               }else if(argv.directorio){

                 estructura(argv.directorio);
                      console.log("Despues de crear estructura");
                         child.exec('npm install --save-dev gitbook-start-plugin-iaas-ull-es-noejaco2017', function(error, stdout, stderr){
                           if(error)
                             console.log(error)

                           console.log(stderr);
                           console.log(stdout);
                         })

                         console.log("TAREA GULP");
                         //añadir las tareas al gulp
                         var iaas = require(path.join(__dirname,'../node_modules','gitbook-start-plugin-iaas-ull-es-noejaco2017','linea-comando-iaas'));
                         iaas.initialize(argv.directorio);

                         console.log("LLEGOOOOOOOOOOO PACKAGE");

                           ejs.renderFile(path.join(__dirname, '../template_npm', 'package.ejs'),{nombre:argv.name, num:argv.version, direcciongit:argv.url, direccionwiki:argv.wiki, autor:argv.autor, email:argv.email,direccionip:argv.iaasIP,direccionpath:argv.iaaspath},function(err, result) {
                              // render on success

                                      if (!err) {
                                          // result.nombre=argv.name;
                                          // result.direcciongit=argv.url;
                                          // result.direccionwiki='argv.wiki';
                                           console.log(result);
                                               //CREAMOS EL PACKAGE.JSON del template

                                                   fs.writeFile(path.join(process.cwd(), `${argv.directorio}`, 'package.json'), result);
                                                          if (err) throw err;
                                                          console.log('CREADO PACKAGE.JSON');

                                      }
                                      // render or error
                                      else {
                                               console.log('Error renderFile(package.ejs)');
                                               console.log(err);
                                      }
                               });
                               //
                              //  fs.copy(path.join(process.cwd(),'./node_modules/gitbook-start-team-noejaco2017','gulpfile.js'), path.join(process.cwd(), argv.directorio , 'gulpfile.js'),function(err){
                              //    if(err)
                              //      console.log(err);
                              //      console.log("Tarea gulp añadida a gulpfile desde NPM");
                              //  });


                                   //
                                  //  fs.copy(path.join(__dirname, '..', 'gulpfile.js') , path.join(process.cwd(), `${argv.directorio}`,'gulpfile.js'), function(err){
                                  //      if(err) return console.error(err)
                                  //  });

              }else{
                  console.log("ELSE DENTRO NO HA INTRODUCIDO OPCIONES VALIDAS DE DEPLOY");
              }
      }else{
             console.log("ELSE FUERA NO HA INTRODUCIDO OPCIONES VALIDAS DE DEPLOY");
     }
   }
}
            //    var direct = process.cwd() + '/template-iaas/';
             //
            //        //Creamos el directorio
            //        fs.mkdirsSync(direct + argv.d);
             //
            //        //Creamos una copia de los scripts
            //        fs.copy(path.join(__dirname, '../template-iaas', 'scripts') , path.join(direct, `${argv.d}`,'scripts'), function(err){
            //            if(err) return console.error(err)
            //        });
            //        //Creamos una copia de los txt
            //        fs.copy(path.join(__dirname, '../template-iaas', 'txt') , path.join(direct, `${argv.d}`,'txt'), function(err){
            //            if(err) return console.error(err)
            //        });
            //        //Creamos una copia de Readme
            //        fs.copy(path.join(__dirname, '../template-iaas', 'README.md') , path.join(direct, `${argv.d}`,'README.md'), function(err){
            //            if(err) return console.error(err)
            //        });
            //        //Creamos gulpfile
            //        fs.copy(path.join(__dirname, '../template-iaas', 'gulpfile.js') , path.join(direct, `${argv.d}`,'gulpfile.js'), function(err){
            //            if(err) return console.error(err)
            //        });
            //        //Creamos book.json
            //        fs.copy(path.join(__dirname, '../template-iaas', 'book.json') , path.join(direct, `${argv.d}`,'book.json'), function(err){
            //            if(err) return console.error(err)
            //        });
            //        //Creamos server
            //        fs.copy(path.join(__dirname, '../template-iaas', 'app.js') , path.join(direct, `${argv.d}`,'app.js'), function(err){
            //            if(err) return console.error(err)
            //        });
            //        ejs.renderFile(path.join(__dirname, '../template-iaas', 'package.ejs'),{direccionip:argv.iaasIP,direccionpath:argv.iaaspath},function(err, result) {
            //                         // render on success
             //
            //                                 if (!err) {
            //                                     // result.nombre=argv.name;
            //                                     // result.direcciongit=argv.url;
            //                                     // result.direccionwiki='argv.wiki';
            //                                      console.log(result);
            //                                          //CREAMOS EL PACKAGE.JSON del template
            //                                             //var write=fs.writeFile("./template/package.json",result, (err) =>
             //
            //                                              fs.writeFile(path.join(direct, `${argv.d}`, 'package.json'), result);
            //                                                     if (err) throw err;
            //                                                     console.log('CREADO PACKAGE.JSON');
             //
            //                                 }
            //                                 // render or error
            //                                 else {
            //                                          console.log('Error renderFile(package.ejs)');
            //                                          console.log(err);
            //                                 }
            //                          });
            //                          milib.deploy(argv.iaasIP,argv.iaaspath);
//               }
// }
//EJS RENDERFILE cargamos la plantilla
// var direct = process.cwd() + '/template_npm/';
//
//     //Creamos el directorio
//     fs.mkdirsSync(direct + argv.directorio);
//
//     //Creamos una copia de los scripts
//     fs.copy(path.join(__dirname, '../template', 'scripts') , path.join(direct, `${argv.directorio}`,'scripts'), function(err){
//         if(err) return console.error(err)
//     });
//     //Creamos una copia de los txt
//     fs.copy(path.join(__dirname, '../template', 'txt') , path.join(direct, `${argv.directorio}`,'txt'), function(err){
//         if(err) return console.error(err)
//     });
//     //Creamos una copia de Readme
//     fs.copy(path.join(__dirname, '../template', 'README.md') , path.join(direct, `${argv.directorio}`,'README.md'), function(err){
//         if(err) return console.error(err)
//     });
//     //Creamos gulpfile
//     fs.copy(path.join(__dirname, '../template', 'gulpfile.js') , path.join(direct, `${argv.directorio}`,'gulpfile.js'), function(err){
//         if(err) return console.error(err)
//     });
//     //Creamos una copia de app.js
//     fs.copy(path.join(__dirname, '../template', 'app.js') , path.join(direct, `${argv.directorio}`,'app.js'), function(err){
//         if(err) return console.error(err)
//     });
//     //Creamos una copia de book.json
//     fs.copy(path.join(__dirname, '../template', 'book.json') , path.join(direct, `${argv.directorio}`,'book.json'), function(err){
//         if(err) return console.error(err)
//     });
//
//
//
//     //Creamos el packeage.json a traves de la plantilla
//     ejs.renderFile(path.join(__dirname, '../template', 'package.ejs'),{nombre:argv.name, num:argv.version, direcciongit:argv.url, direccionwiki:argv.wiki, autor:argv.autor, email:argv.email},function(err, result) {
//    // render on success
//
//            if (!err) {
//                // result.nombre=argv.name;
//                // result.direcciongit=argv.url;
//                // result.direccionwiki='argv.wiki';
//                 console.log(result);
//                     //CREAMOS EL PACKAGE.JSON del template
//                        //var write=fs.writeFile("./template/package.json",result, (err) => {
//                         fs.writeFile(path.join(direct, `${argv.directorio}`, 'package.json'), result);
//                                if (err) throw err;
//                                console.log('CREADO PACKAGE.JSON');
//
//            }
//            // render or error
//            else {
//                     console.log('Error renderFile(package.ejs)');
//                     console.log(err);
//            }
//     });
//}




// if(argv.h || argv.help){
//     //MENU
//     console.log("gitbook-start-iaas [OPTIONS]\n"+
//     "--iaasIP: Direccion de la maquina virtual\n"+
//     "--iaaspath: Repositorio que va a contener el libro en iaas\n"+
//     "--d: Crea la estructura del directorio\n");
//
// }else{
//             if(!argv.iaasIP || !argv.iaaspath || !argv.d ){
//               console.log("Falta el argumento IP, path o directorio");
//             }else{
//               var direct = process.cwd() + '/template-iaas/';
//
//                   //Creamos el directorio
//                   fs.mkdirsSync(direct + argv.d);
//
//                   //Creamos una copia de los scripts
//                   fs.copy(path.join(__dirname, '../template-iaas', 'scripts') , path.join(direct, `${argv.d}`,'scripts'), function(err){
//                       if(err) return console.error(err)
//                   });
//                   //Creamos una copia de los txt
//                   fs.copy(path.join(__dirname, '../template-iaas', 'txt') , path.join(direct, `${argv.d}`,'txt'), function(err){
//                       if(err) return console.error(err)
//                   });
//                   //Creamos una copia de Readme
//                   fs.copy(path.join(__dirname, '../template-iaas', 'README.md') , path.join(direct, `${argv.d}`,'README.md'), function(err){
//                       if(err) return console.error(err)
//                   });
//                   //Creamos gulpfile
//                   fs.copy(path.join(__dirname, '../template-iaas', 'gulpfile.js') , path.join(direct, `${argv.d}`,'gulpfile.js'), function(err){
//                       if(err) return console.error(err)
//                   });
//                   //Creamos book.json
//                   fs.copy(path.join(__dirname, '../template-iaas', 'book.json') , path.join(direct, `${argv.d}`,'book.json'), function(err){
//                       if(err) return console.error(err)
//                   });
//                   //Creamos server
//                   fs.copy(path.join(__dirname, '../template-iaas', 'app.js') , path.join(direct, `${argv.d}`,'app.js'), function(err){
//                       if(err) return console.error(err)
//                   });
//                   ejs.renderFile(path.join(__dirname, '../template-iaas', 'package.ejs'),{direccionip:argv.iaasIP,direccionpath:argv.iaaspath},function(err, result) {
//                                    // render on success
//
//                                            if (!err) {
//                                                // result.nombre=argv.name;
//                                                // result.direcciongit=argv.url;
//                                                // result.direccionwiki='argv.wiki';
//                                                 console.log(result);
//                                                     //CREAMOS EL PACKAGE.JSON del template
//                                                        //var write=fs.writeFile("./template/package.json",result, (err) =>
//
//                                                         fs.writeFile(path.join(direct, `${argv.d}`, 'package.json'), result);
//                                                                if (err) throw err;
//                                                                console.log('CREADO PACKAGE.JSON');
//
//                                            }
//                                            // render or error
//                                            else {
//                                                     console.log('Error renderFile(package.ejs)');
//                                                     console.log(err);
//                                            }
//                                     });
//                                     milib.deploy(argv.iaasIP,argv.iaaspath);
//             }
// }
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
