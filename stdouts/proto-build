/root/Targets/proto-build
└─┬ proto-build@0.2.3 
  ├─┬ chalk@1.1.3 
  │ ├── ansi-styles@2.2.1 
  │ ├── escape-string-regexp@1.0.5 
  │ ├─┬ has-ansi@2.0.0 
  │ │ └── ansi-regex@2.1.1 
  │ ├── strip-ansi@3.0.1 
  │ └── supports-color@2.0.0 
  ├─┬ chokidar@1.7.0 
  │ ├─┬ anymatch@1.3.2 
  │ │ ├─┬ micromatch@2.3.11 
  │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ ├── array-unique@0.2.1 
  │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │   ├── isobject@2.1.0 
  │ │ │ │ │   ├─┬ randomatic@1.1.7 
  │ │ │ │ │   │ ├─┬ is-number@3.0.0 
  │ │ │ │ │   │ │ └── kind-of@3.2.2 
  │ │ │ │ │   │ └── kind-of@4.0.0 
  │ │ │ │ │   └── repeat-string@1.6.1 
  │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ ├── extglob@0.3.2 
  │ │ │ ├── filename-regex@2.0.1 
  │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ ├─┬ for-own@0.1.5 
  │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ ├── glob-base@0.3.0 
  │ │ │ │ └── is-dotfile@1.0.3 
  │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │     └── is-primitive@2.0.0 
  │ │ └─┬ normalize-path@2.1.1 
  │ │   └── remove-trailing-separator@1.1.0 
  │ ├── async-each@1.0.1 
  │ ├── glob-parent@2.0.0 
  │ ├── inherits@2.0.3 
  │ ├─┬ is-binary-path@1.0.1 
  │ │ └── binary-extensions@1.10.0 
  │ ├─┬ is-glob@2.0.1 
  │ │ └── is-extglob@1.0.0 
  │ ├── path-is-absolute@1.0.1 
  │ └─┬ readdirp@2.1.0 
  │   ├─┬ minimatch@3.0.4 
  │   │ └─┬ brace-expansion@1.1.8 
  │   │   ├── balanced-match@1.0.0 
  │   │   └── concat-map@0.0.1 
  │   ├─┬ readable-stream@2.3.3 
  │   │ ├── core-util-is@1.0.2 
  │   │ ├── isarray@1.0.0 
  │   │ ├── process-nextick-args@1.0.7 
  │   │ ├── safe-buffer@5.1.1 
  │   │ ├── string_decoder@1.0.3 
  │   │ └── util-deprecate@1.0.2 
  │   └── set-immediate-shim@1.0.1 
  ├── deep-equal@1.0.1 
  ├─┬ fs-extra@1.0.0 
  │ ├── graceful-fs@4.1.11 
  │ ├── jsonfile@2.4.0 
  │ └── klaw@1.3.1 
  └── slash@1.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/proto-build/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 23% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","reduce","getOwnPropertyNames","getOwnPropertyDescriptor","call","create","apply","random","RegExp","bind","defineProperties","parseInt"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0635 took 30.746s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program module.exports = rimraf
rimraf.sync = rimrafSync

var assert = require('assert')
var path = require('path')
var fs = require('graceful-fs')

var isWindows = (process.platform === 'win32')

function defaults (options) {
  var methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(function (m) {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
}

function rimraf (p, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  var busyTries = 0

  rimraf_(p, options, function CB (er) {
    if (er) {
      if (isWindows && (er.code === 'EBUSY' || er.code === 'ENOTEMPTY' || er.code === 'EPERM') &&
          busyTries < options.maxBusyTries) {
        busyTries++
        var time = busyTries * 100
        // try again, with the same exact callback as this one.
        return setTimeout(function () {
          rimraf_(p, options, CB)
        }, time)
      }

      // already gone
      if (er.code === 'ENOENT') er = null
    }

    cb(er)
  })
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, function (er, st) {
    if (er && er.code === 'ENOENT') {
      return cb(null)
    }

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === 'EPERM' && isWindows) {
      fixWinEPERM(p, options, er, cb)
    }

    if (st && st.isDirectory()) {
      return rmdir(p, options, er, cb)
    }

    options.unlink(p, function (er) {
      if (er) {
        if (er.code === 'ENOENT') {
          return cb(null)
        }
        if (er.code === 'EPERM') {
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        }
        if (er.code === 'EISDIR') {
          return rmdir(p, options, er, cb)
        }
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er) {
    assert(er instanceof Error)
  }

  options.chmod(p, 666, function (er2) {
    if (er2) {
      cb(er2.code === 'ENOENT' ? null : er)
    } else {
      options.stat(p, function (er3, stats) {
        if (er3) {
          cb(er3.code === 'ENOENT' ? null : er)
        } else if (stats.isDirectory()) {
          rmdir(p, options, er, cb)
        } else {
          options.unlink(p, cb)
        }
      })
    }
  })
}

function fixWinEPERMSync (p, options, er) {
  assert(p)
  assert(options)
  if (er) {
    assert(er instanceof Error)
  }

  try {
    options.chmodSync(p, 666)
  } catch (er2) {
    if (er2.code === 'ENOENT') {
      return
    } else {
      throw er
    }
  }

  try {
    var stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === 'ENOENT') {
      return
    } else {
      throw er
    }
  }

  if (stats.isDirectory()) {
    rmdirSync(p, options, er)
  } else {
    options.unlinkSync(p)
  }
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr) {
    assert(originalEr instanceof Error)
  }
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, function (er) {
    if (er && (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM')) {
      rmkids(p, options, cb)
    } else if (er && er.code === 'ENOTDIR') {
      cb(originalEr)
    } else {
      cb(er)
    }
  })
}

function rmkids (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, function (er, files) {
    if (er) {
      return cb(er)
    }
    var n = files.length
    if (n === 0) {
      return options.rmdir(p, cb)
    }
    var errState
    files.forEach(function (f) {
      rimraf(path.join(p, f), options, function (er) {
        if (errState) {
          return
        }
        if (er) {
          return cb(errState = er)
        }
        if (--n === 0) {
          options.rmdir(p, cb)
        }
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  try {
    var st = options.lstatSync(p)
  } catch (er) {
    if (er.code === 'ENOENT') {
      return
    }

    // Windows can EPERM on stat.  Life is suffering.
    if (er.code === 'EPERM' && isWindows) {
      fixWinEPERMSync(p, options, er)
    }
  }

  try {
    // sunos lets the root user unlink directories, which is... weird.
    if (st && st.isDirectory()) {
      rmdirSync(p, options, null)
    } else {
      options.unlinkSync(p)
    }
  } catch (er) {
    if (er.code === 'ENOENT') {
      return
    }
    if (er.code === 'EPERM') {
      return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
    }
    if (er.code !== 'EISDIR') {
      throw er
    }
    rmdirSync(p, options, er)
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr) {
    assert(originalEr instanceof Error)
  }

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === 'ENOENT') {
      return
    }
    if (er.code === 'ENOTDIR') {
      throw originalEr
    }
    if (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM') {
      rmkidsSync(p, options)
    }
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(function (f) {
    rimrafSync(path.join(p, f), options)
  })
  options.rmdirSync(p, options)
}
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/proto-build/node_modules/proto-build/index.js. Coverage (Term): 14% Coverage (LOC): 15%
*- File /root/Targets/proto-build/node_modules/chokidar/index.js. Coverage (Term): 8% Coverage (LOC): 12%
*- File /root/Targets/proto-build/node_modules/async-each/index.js. Coverage (Term): 24% Coverage (LOC): 24%
*- File /root/Targets/proto-build/node_modules/anymatch/index.js. Coverage (Term): 12% Coverage (LOC): 16%
*- File /root/Targets/proto-build/node_modules/micromatch/index.js. Coverage (Term): 9% Coverage (LOC): 14%
*- File /root/Targets/proto-build/node_modules/micromatch/lib/expand.js. Coverage (Term): 8% Coverage (LOC): 11%
*- File /root/Targets/proto-build/node_modules/micromatch/lib/utils.js. Coverage (Term): 36% Coverage (LOC): 58%
*- File /root/Targets/proto-build/node_modules/filename-regex/index.js. Coverage (Term): 65% Coverage (LOC): 80%
*- File /root/Targets/proto-build/node_modules/arr-diff/index.js. Coverage (Term): 30% Coverage (LOC): 32%
*- File /root/Targets/proto-build/node_modules/arr-flatten/index.js. Coverage (Term): 26% Coverage (LOC): 43%
*- File /root/Targets/proto-build/node_modules/array-unique/index.js. Coverage (Term): 20% Coverage (LOC): 26%
*- File /root/Targets/proto-build/node_modules/braces/index.js. Coverage (Term): 6% Coverage (LOC): 10%
*- File /root/Targets/proto-build/node_modules/expand-range/index.js. Coverage (Term): 19% Coverage (LOC): 19%
*- File /root/Targets/proto-build/node_modules/fill-range/index.js. Coverage (Term): 7% Coverage (LOC): 11%
*- File /root/Targets/proto-build/node_modules/isobject/index.js. Coverage (Term): 52% Coverage (LOC): 86%
*- File /root/Targets/proto-build/node_modules/isarray/index.js. Coverage (Term): 62% Coverage (LOC): 83%
*- File /root/Targets/proto-build/node_modules/is-number/index.js. Coverage (Term): 37% Coverage (LOC): 50%
*- File /root/Targets/proto-build/node_modules/kind-of/index.js. Coverage (Term): 10% Coverage (LOC): 7%
*- File /root/Targets/proto-build/node_modules/is-buffer/index.js. Coverage (Term): 22% Coverage (LOC): 67%
*- File /root/Targets/proto-build/node_modules/randomatic/index.js. Coverage (Term): 20% Coverage (LOC): 26%
*- File /root/Targets/proto-build/node_modules/randomatic/node_modules/is-number/index.js. Coverage (Term): 36% Coverage (LOC): 43%
*- File /root/Targets/proto-build/node_modules/randomatic/node_modules/is-number/node_modules/kind-of/index.js. Coverage (Term): 10% Coverage (LOC): 7%
*- File /root/Targets/proto-build/node_modules/randomatic/node_modules/kind-of/index.js. Coverage (Term): 9% Coverage (LOC): 6%
*- File /root/Targets/proto-build/node_modules/repeat-string/index.js. Coverage (Term): 18% Coverage (LOC): 20%
*- File /root/Targets/proto-build/node_modules/repeat-element/index.js. Coverage (Term): 35% Coverage (LOC): 50%
*- File /root/Targets/proto-build/node_modules/preserve/index.js. Coverage (Term): 28% Coverage (LOC): 50%
*- File /root/Targets/proto-build/node_modules/expand-brackets/index.js. Coverage (Term): 10% Coverage (LOC): 21%
*- File /root/Targets/proto-build/node_modules/is-posix-bracket/index.js. Coverage (Term): 49% Coverage (LOC): 80%
*- File /root/Targets/proto-build/node_modules/extglob/index.js. Coverage (Term): 9% Coverage (LOC): 16%
*- File /root/Targets/proto-build/node_modules/is-extglob/index.js. Coverage (Term): 49% Coverage (LOC): 80%
*- File /root/Targets/proto-build/node_modules/is-glob/index.js. Coverage (Term): 51% Coverage (LOC): 83%
*- File /root/Targets/proto-build/node_modules/normalize-path/index.js. Coverage (Term): 37% Coverage (LOC): 38%
*- File /root/Targets/proto-build/node_modules/remove-trailing-separator/index.js. Coverage (Term): 28% Coverage (LOC): 38%
*- File /root/Targets/proto-build/node_modules/object.omit/index.js. Coverage (Term): 21% Coverage (LOC): 24%
*- File /root/Targets/proto-build/node_modules/is-extendable/index.js. Coverage (Term): 41% Coverage (LOC): 83%
*- File /root/Targets/proto-build/node_modules/for-own/index.js. Coverage (Term): 45% Coverage (LOC): 58%
*- File /root/Targets/proto-build/node_modules/for-in/index.js. Coverage (Term): 41% Coverage (LOC): 56%
*- File /root/Targets/proto-build/node_modules/parse-glob/index.js. Coverage (Term): 10% Coverage (LOC): 17%
*- File /root/Targets/proto-build/node_modules/glob-base/index.js. Coverage (Term): 20% Coverage (LOC): 25%
*- File /root/Targets/proto-build/node_modules/glob-parent/index.js. Coverage (Term): 54% Coverage (LOC): 64%
*- File /root/Targets/proto-build/node_modules/is-dotfile/index.js. Coverage (Term): 25% Coverage (LOC): 44%
*- File /root/Targets/proto-build/node_modules/regex-cache/index.js. Coverage (Term): 28% Coverage (LOC): 31%
*- File /root/Targets/proto-build/node_modules/is-equal-shallow/index.js. Coverage (Term): 22% Coverage (LOC): 26%
*- File /root/Targets/proto-build/node_modules/is-primitive/index.js. Coverage (Term): 46% Coverage (LOC): 83%
*- File /root/Targets/proto-build/node_modules/micromatch/lib/glob.js. Coverage (Term): 15% Coverage (LOC): 28%
*- File /root/Targets/proto-build/node_modules/micromatch/lib/chars.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/proto-build/node_modules/path-is-absolute/index.js. Coverage (Term): 39% Coverage (LOC): 57%
*- File /root/Targets/proto-build/node_modules/inherits/inherits.js. Coverage (Term): 74% Coverage (LOC): 88%
*- File /root/Targets/proto-build/node_modules/chokidar/lib/nodefs-handler.js. Coverage (Term): 6% Coverage (LOC): 9%
*- File /root/Targets/proto-build/node_modules/readdirp/readdirp.js. Coverage (Term): 6% Coverage (LOC): 5%
*- File /root/Targets/proto-build/node_modules/graceful-fs/graceful-fs.js. Coverage (Term): 27% Coverage (LOC): 33%
*- File /root/Targets/proto-build/node_modules/graceful-fs/polyfills.js. Coverage (Term): 31% Coverage (LOC): 39%
*- File /root/Targets/proto-build/node_modules/graceful-fs/fs.js. Coverage (Term): 87% Coverage (LOC): 100%
*- File /root/Targets/proto-build/node_modules/graceful-fs/legacy-streams.js. Coverage (Term): 6% Coverage (LOC): 5%
*- File /root/Targets/proto-build/node_modules/minimatch/minimatch.js. Coverage (Term): 8% Coverage (LOC): 13%
*- File /root/Targets/proto-build/node_modules/brace-expansion/index.js. Coverage (Term): 12% Coverage (LOC): 17%
*- File /root/Targets/proto-build/node_modules/concat-map/index.js. Coverage (Term): 24% Coverage (LOC): 40%
*- File /root/Targets/proto-build/node_modules/balanced-match/index.js. Coverage (Term): 11% Coverage (LOC): 15%
*- File /root/Targets/proto-build/node_modules/set-immediate-shim/index.js. Coverage (Term): 47% Coverage (LOC): 63%
*- File /root/Targets/proto-build/node_modules/is-binary-path/index.js. Coverage (Term): 72% Coverage (LOC): 92%
*- File /root/Targets/proto-build/node_modules/chokidar/lib/fsevents-handler.js. Coverage (Term): 6% Coverage (LOC): 10%
*- File /root/Targets/proto-build/node_modules/slash/index.js. Coverage (Term): 35% Coverage (LOC): 45%
*- File /root/Targets/proto-build/node_modules/chalk/index.js. Coverage (Term): 46% Coverage (LOC): 56%
*- File /root/Targets/proto-build/node_modules/escape-string-regexp/index.js. Coverage (Term): 85% Coverage (LOC): 90%
*- File /root/Targets/proto-build/node_modules/ansi-styles/index.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/proto-build/node_modules/strip-ansi/index.js. Coverage (Term): 57% Coverage (LOC): 86%
*- File /root/Targets/proto-build/node_modules/ansi-regex/index.js. Coverage (Term): 93% Coverage (LOC): 100%
*- File /root/Targets/proto-build/node_modules/has-ansi/index.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/proto-build/node_modules/supports-color/index.js. Coverage (Term): 63% Coverage (LOC): 56%
*- File /root/Targets/proto-build/node_modules/proto-build/lib/helpers.js. Coverage (Term): 12% Coverage (LOC): 27%
*- File /root/Targets/proto-build/node_modules/fs-extra/lib/index.js. Coverage (Term): 46% Coverage (LOC): 48%
*- File /root/Targets/proto-build/node_modules/fs-extra/lib/util/assign.js. Coverage (Term): 94% Coverage (LOC): 100%
*- File /root/Targets/proto-build/node_modules/fs-extra/lib/copy/index.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/proto-build/node_modules/fs-extra/lib/copy/copy.js. Coverage (Term): 17% Coverage (LOC): 18%
*- File /root/Targets/proto-build/node_modules/fs-extra/lib/copy/ncp.js. Coverage (Term): 4% Coverage (LOC): 4%
*- File /root/Targets/proto-build/node_modules/fs-extra/lib/util/utimes.js. Coverage (Term): 12% Coverage (LOC): 24%
*- File /root/Targets/proto-build/node_modules/fs-extra/lib/mkdirs/index.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/proto-build/node_modules/fs-extra/lib/mkdirs/mkdirs.js. Coverage (Term): 17% Coverage (LOC): 16%
*- File /root/Targets/proto-build/node_modules/fs-extra/lib/mkdirs/win32.js. Coverage (Term): 38% Coverage (LOC): 61%
*- File /root/Targets/proto-build/node_modules/fs-extra/lib/mkdirs/mkdirs-sync.js. Coverage (Term): 23% Coverage (LOC): 21%
*- File /root/Targets/proto-build/node_modules/fs-extra/lib/copy-sync/index.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/proto-build/node_modules/fs-extra/lib/copy-sync/copy-sync.js. Coverage (Term): 14% Coverage (LOC): 15%
*- File /root/Targets/proto-build/node_modules/fs-extra/lib/copy-sync/copy-file-sync.js. Coverage (Term): 21% Coverage (LOC): 21%
*- File /root/Targets/proto-build/node_modules/fs-extra/lib/remove/index.js. Coverage (Term): 27% Coverage (LOC): 46%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
