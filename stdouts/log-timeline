
> log-timeline@0.2.1 postinstall /root/Targets/log-timeline/node_modules/log-timeline
> node scripts/postinstall.js

[ 'index.html',
  'jquery-1.8.3.min.js',
  'style.css',
  'timeline.css',
  'timeline.js',
  'timeline.png' ] '/root/Targets/log-timeline/node_modules/log-timeline/public'
/root/Targets/log-timeline
└─┬ log-timeline@0.2.1 
  ├── commander@2.0.0 
  ├── moment@2.18.1 
  ├─┬ serve-static@1.1.0 
  │ ├── parseurl@1.0.1 
  │ └─┬ send@0.3.0 
  │   ├── buffer-crc32@0.2.1 
  │   ├── debug@0.8.0 
  │   ├── fresh@0.2.4 
  │   ├── mime@1.2.11 
  │   └── range-parser@1.0.3 
  └─┬ xml2js@0.4.19 
    ├── sax@1.2.4 
    └── xmlbuilder@9.0.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/log-timeline/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.029 took 5.781s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs          = require('fs');
var path        = require('path');
var http        = require('http');
var exec        = require('child_process').exec;

var moment      = require('moment');
var staticServe = require('serve-static');
var program     = require('commander');
var parseString = require('xml2js').parseString;

var cwd         = process.cwd();
var currYear    = moment().format('YYYY');
var isDir       = fs.existsSync || path.existsSync;

var logStaticPath = path.join(process.env.HOME, '.log-timeline');

program
  .option('-p, --port [port]', '设置预览端口', Number, 4000)
  .version(require('./package.json').version)
  .parse(process.argv);

console.log('Check-in log records generated...');

function gitLog() {

  exec('git log --pretty=format:"%an|%ad|%s"', {cwd: cwd}, function(err, data, stderr) {

    if(err) {

      return console.log(err);
    }

    var dataLog = [];

    data.split('\n').forEach(function(d) {

      var _d = d.split('|');

      var sDate = moment(_d[1]).format('YYYY,MM,DD,HH,mm,ss');

      dataLog.push({

        headline: _d[0] + ' ' + _d[2],
        startDate: sDate,
        message: _d[2]
      });
    });

    startServer(dataLog);
  });
}

function svnLog() {

  exec('svn log --xml', {cwd: cwd}, function(err, data, stderr) {

    if(err) {

      return console.log(err);
    }

    parseString(data, function (error, result) {

      if(error) {

        return;
      }

      var dataLog = [];

      result.log.logentry.forEach(function(log) {

        var sDate = moment(log.date[0]).format('YYYY,MM,DD,HH,mm,ss');

        dataLog.push({

          headline: log.author[0] + log.msg[0],
          startDate: sDate,
          message: log.msg[0]
        });
      });

      startServer(dataLog);
    });
  });
}

function startServer(dataLog) {

  var dataStr = {
    timeline: {
      headline: 'log',
      type: 'default',
      startDate: currYear,
      text: '<i><span class="c1">Designed</span> by <span class="c2">Nightink</span></i>',
      date: dataLog
    }
  };

  fs.writeFileSync(path.join(logStaticPath, 'data.json'), JSON.stringify(dataStr, null, 2));

  console.log('Completed generating log records checked.');

  var staticServer = staticServe(logStaticPath, {
    'index': 'index.html'
  });

  http.createServer(function(req, res){

    staticServer(req, res, function(err) {

      if(!err) {

        res.end('<h2>404: not found</h2>');
      }
    });

  }).listen(program.port, function(err) {

    if(err) {
      console.log(err.message);
      return;
    }
    console.log('Please visit http://localhost:%s/ view check-in timeline', program.port);
  });
}

isDir('.git') ?
  gitLog() :
  svnLog();
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
