/root/Targets/jc-react-reveal
└─┬ jc-react-reveal@1.0.2 
  └─┬ react@15.6.2 
    ├── create-react-class@15.6.2 
    ├─┬ fbjs@0.8.16 
    │ ├── core-js@1.2.7 
    │ ├─┬ isomorphic-fetch@2.2.1 
    │ │ ├─┬ node-fetch@1.7.3 
    │ │ │ ├─┬ encoding@0.1.12 
    │ │ │ │ └── iconv-lite@0.4.19 
    │ │ │ └── is-stream@1.1.0 
    │ │ └── whatwg-fetch@2.0.3 
    │ ├─┬ promise@7.3.1 
    │ │ └── asap@2.0.6 
    │ ├── setimmediate@1.0.5 
    │ └── ua-parser-js@0.7.14 
    ├─┬ loose-envify@1.3.1 
    │ └── js-tokens@3.0.2 
    ├── object-assign@4.1.1 
    └── prop-types@15.6.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/jc-react-reveal/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0698 took 7.0415s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (32:6) on program import React, { Component } from 'react'

/**
 * This is meant to be a super awesome extendable Reveal arrow.  It is used
 * widely thoughout the site.
 *
 * Instructions on Use:
 *
 * Pass a head and a body component as props.  And optionally a icon svg,
 * and/or a position.  The default position for the arrow icon is left and
 * if you add a prop right={true} then it will place the arrow on the right.
 */
class Reveal extends Component {

  constructor (props) {
    super(props)
    this.state = { open: this.props.open && true }
  }

  componentWillReceiveProps (nextProps) {
    if (nextProps.open) this.setState({open: nextProps.open})
  }

  handleReveal (e) {
    this.setState({ open: !this.state.open })
  }

  renderDefaultArrow () {
    const fillColor = this.props.className && this.props.className.indexOf('dk-grey') > -1 ? '#ffffff' : '#444444'

    return (
      <svg viewBox='0 0 38 23' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlnsXlink='http://www.w3.org/1999/xlink'>
        <g stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>
          <g fill={fillColor}>
            <rect transform='translate(11.732748, 11.670797) rotate(-45.000000) translate(-11.732748, -11.670797) ' x='8.42774835' y='-1.52920258' width='6.61' height='26.4' rx='1' />
            <rect transform='translate(25.950736, 11.670797) rotate(-45.000000) translate(-25.950736, -11.670797) ' x='12.7507357' y='8.36579742' width='26.4' height='6.61' rx='1' />
          </g>
        </g>
      </svg>
    )
  }

  render () {
    const arrowClass = this.state.open ? 'open' : 'closed'

    let head
    if (this.props.openHead && this.state.open) {
      head = this.props.openHead
    } else {
      head = this.props.head
    }

    return (
      <section className={`reveal ${this.props.className ? this.props.className : ''}`}>

        <div className={`reveal-header ${arrowClass}`} style={this.props.headStyles} onClick={this.handleReveal.bind(this)}>
          <div className={`reveal-icon ${this.props.right ? 'right' : 'left'}`} >
            {this.props.arrow ? this.props.arrow : this.renderDefaultArrow()}
          </div>
          {head}
        </div>

        <div className={`reveal-body ${arrowClass}`} style={this.props.bodyStyles} >
          {this.props.body}
        </div>

      </section>
    )
  }
}

export default Reveal
 at SyntaxError: Unexpected token (32:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseParenAndDistinguishExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1861:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
