/root/Targets/pdd-calendar
├── UNMET PEER DEPENDENCY node-sass@^3.8.0
├── pdd-calendar@1.0.3 
├── UNMET PEER DEPENDENCY react@^0.14.3
├── UNMET PEER DEPENDENCY react-dom@^0.14.3
└── UNMET PEER DEPENDENCY sass-loader@^4.0.0

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/pdd-calendar/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.022 took 3.603s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (926:12) on program 'use strict';

var React = require('react');
var ReactDom = require('react-dom');
// 引入日期样式
var calendarStyle = require('../css/index.scss');

/**
 * 拼多多日期组件
 *
 * @author 邃宇(suiyu@yiran.com)
 * @class
 */
var Index = React.createClass({
    /**
     * 组件变量
     *
     * @type {Object}
     */
    variate: {
        input: null,
        tYear: new Date().getFullYear(),
        tMonth: new Date().getMonth(),
        tDate: new Date().getDate()
    },
    /**
     * 设置初始化参数
     *
     * @return {object} 初始化的State
     */
    getInitialState: function () {
        var props = this.props;
        var randomStr = (Math.random() + '').replace('.', '');
        var controlId = 'Calendar' + Number(new Date()) + randomStr + 'Pdd';
        var inputId = 'Input' + controlId;
        var config = {
            value: props.value || '',
            controlId: controlId,
            inputId: inputId,
            speed: Number(props.speed) || 200,
            complement: $.parseJSON(props.complement || true),
            readonly: $.parseJSON(props.readonly || true),
            time: $.parseJSON(props.time || false),
            lowerLimit: props.lowerLimit || '',
            upperLimit: props.upperLimit || '',
            select: props.select || function () {}
        };
        return config;
    },

    /**
     * 组件渲染后的调用
     *
     */
    componentDidMount: function () {
        this.setInput();
        this.setInputStatus();
        this.renderContainer();
        this.bindEvent();
    },

    /**
     * 组件销毁时去除document事件绑定
     * 去除日期显示节点
     * 
     */
    componentWillUnmount: function () {
        $(document).unbind();
        $('#' + this.state.controlId).remove();
    },

    /**
     * 绑定组件事件
     *
     */
    bindEvent: function () {
        this.bindEventAClick();
        this.bindEventIconClick();
        this.bindEventPrevMonthClick();
        this.bindEventNextMonthClick();
        this.bindEventMonthTextClick();
        this.bindEventYearTextClick();
        this.bindEventTimeTitleClick();
        this.bindEventTimeBodyClick();
        this.bindEventInput();
        this.bindEventDocument();
    },

    /**
     * 绑定日期里面a链接的点击事件(r())
     *
     */
    bindEventAClick: function () {
        var self = this;
        var state = this.state;
        var variate = this.variate;
        $('#' + state.controlId).find('.tabD a').mouseup(function () {
            var a = new Date($('#' + state.controlId).find('.currentYear').text() + '/' + $('#' + state.controlId).find('.currentMonth').text() + '/1');
            if ($(this).hasClass('prevD')) {
                a.setMonth(a.getMonth() - 1);
                a.setDate($(this).text());
                var b = state.speed;
                state.speed = 0;
                $('#' + state.controlId).find('.prevMonth').triggerHandler('mouseup');
                state.speed = b;
            } else if ($(this).hasClass('nextD')) {
                a.setMonth(a.getMonth() + 1);
                a.setDate($(this).text());
                b = state.speed;
                state.speed = 0;
                $('#' + state.controlId).find('.nextMonth').triggerHandler('mouseup');
                state.speed = b;
            }
            var d = $(this).text();
            a = a.getFullYear() + '-' + (Number(a.getMonth() + 1) < 10 ? '0' + Number(a.getMonth() + 1) : Number(a.getMonth() + 1)) + '-' + (Number(d) < 10 ? '0' + d : d);
            // 获取时间 by suiyu
            a += self.getTimeValue();
            // end
            $('#' + self.state.inputId).val(a);
            $('#' + state.controlId + ' div table a').removeClass('pdd-select');
            $('#' + state.controlId + ' .tabD a:contains(\'' + d + '\')').each(function () {
                d == $(this).text() && !$(this).hasClass('prevD') && !$(this).hasClass('nextD') && $(this).addClass('pdd-select');
            });
            // 如果是在没有时分秒选择的情况下，选择日期后就直接隐藏
            if (!state.time) {
                $('#' + state.controlId).hide();
                $('#' + self.state.inputId).blur();
            }
            state.select(a);
            // by suiyu
        }).hover(function () {
            $(this).addClass('hover');
        },
        function () {
            $(this).removeClass('hover');
        });
    },

    /**
     * 绑定月份的a链接的点击(u())
     *
     */
    bindEventMonthAClick: function () {
        var self = this;
        var state = this.state;
        $('#' + state.controlId).find('.tabM a').mouseup(function () {
            var a = self.renderDateBody(Number($('#' + state.controlId).find('.currentYear').text()), Number($(this).attr('val')));
            self.animateChangeDisD(a);
            self.bindEventAClick();
            $('#' + state.controlId).find('.currentMonth').text(Number($(this).attr('val')) + 1);
        }).hover(function () {
            $(this).addClass('hover');
        }, function () {
            $(this).removeClass('hover');
        });
    },

    /**
     * 绑定年份的a链接的点击(v())
     *
     */
    bindEventYearAClick: function () {
        var self = this;
        var state = this.state;
        $('#' + state.controlId).find('.tabY a').mouseup(function () {
            var a = self.renderDateBody(Number($(this).text()), Number($('#' + state.controlId).find('.currentMonth').text()) - 1);
            self.animateChangeDisD(a);
            self.bindEventAClick();
            $('#' + state.controlId).find('.currentYear').text(Number($(this).text()));
        }).hover(function () {
            $(this).addClass('hover');
        },
        function () {
            $(this).removeClass('hover');
        });
    },

    /**
     * 绑定上一月按钮的点击事件
     *
     */
    bindEventPrevMonthClick: function () {
        var self = this;
        var state = this.state;
        $('#' + state.controlId).find('.prevMonth').mouseup(function () {
            if ($('#' + state.controlId).find('.enabled > .tabD').length > 0) {
                var a = $('#' + state.controlId).find('.currentYear'),
                    b = $('#' + state.controlId).find('.currentMonth'),
                    d = self.renderDateBody(Number(a.text()), Number(b.text()) - 2);
                self.animateChangeDis(d);
                if (Number(b.text()) != 1) {
                    b.text(Number(b.text()) - 1);
                } else {
                    a.text(Number(a.text()) - 1);
                    b.text('12');
                }
                self.bindEventAClick();
            } else if ($('#' + state.controlId).find('.enabled > .tabM').length > 0) {
                d = self.renderMonthABody(Number($('#' + state.controlId).find('.currentYear').text()) - 1);
                self.animateChangeDis(d);
                self.bindEventMonthAClick();
                $('#' + state.controlId).find('.currentYear').text(Number($('#' + state.controlId).find('.currentYear').text()) - 1);
            } else if ($('#' + state.controlId).find('.enabled > .tabY').length > 0) {
                d = self.renderYearABody(Number($('#' + state.controlId).find('.currentYear').text()) - 10);
                self.animateChangeDis(d);
                self.bindEventYearAClick();
                $('#' + state.controlId).find('.currentYear').text(Number($('#' + state.controlId).find('.currentYear').text()) - 10);
            }
        });
    },

    /**
     * 绑定下一月按钮的点击事件
     *
     */
    bindEventNextMonthClick: function () {
        var self = this;
        var state = this.state;
        $('#' + state.controlId).find('.nextMonth').mouseup(function () {
            if ($('#' + state.controlId).find('.enabled > .tabD').length > 0) {
                var a = $('#' + state.controlId).find('.currentYear'),
                    b = $('#' + state.controlId).find('.currentMonth'),
                    d = self.renderDateBody(Number(a.text()), Number(b.text()));
                self.animateChangeDisB(d);
                if (Number(b.text()) != 12) b.text(Number(b.text()) + 1);
                else {
                    a.text(Number(a.text()) + 1);
                    b.text('1');
                }
                self.bindEventAClick();
            } else if ($('#' + state.controlId).find('.enabled > .tabM').length > 0) {
                d = self.renderMonthABody(Number($('#' + state.controlId).find('.currentYear').text()) + 1);
                self.animateChangeDisB(d);
                self.bindEventMonthAClick();
                $('#' + state.controlId).find('.currentYear').text(Number($('#' + state.controlId).find('.currentYear').text()) + 1);
            } else if ($('#' + state.controlId).find('.enabled > .tabY').length > 0) {
                d = self.renderYearABody(Number($('#' + state.controlId).find('.currentYear').text()) + 10);
                self.animateChangeDisB(d);
                self.bindEventYearAClick();
                $('#' + state.controlId).find('.currentYear').text(Number($('#' + state.controlId).find('.currentYear').text()) + 10);
            }
        });
    },

    /**
     * 绑定日期上面的年份的文本的点击事件
     *
     */
    bindEventMonthTextClick: function () {
        var self = this;
        var state = this.state;
        $('#' + state.controlId).find('.currentMonthText').mouseup(function () {
            if (!($('#' + state.controlId).find('.enabled > .tabM').length > 0)) {
                var a = self.renderMonthABody(Number($('#' + state.controlId).find('.currentYear').text()));
                self.animateChangeDisE(a);
                self.bindEventMonthAClick();
            }
        });
    },

    /**
     * 绑定日期上面的月份的文本的点击事件
     *
     */
    bindEventYearTextClick: function () {
        var self = this;
        var state = this.state;
        $('#' + state.controlId).find('.currentYearText').mouseup(function () {
            if (!($('#' + state.controlId).find('.enabled > .tabY').length > 0)) {
                var a = self.renderYearABody(Number($('#' + state.controlId).find('.currentYear').text()));
                self.animateChangeDisE(a);
                self.bindEventYearAClick();
            }
        });
    },

    /**
     * 绑定时间上面的三个时间选择按钮
     *
     */
    bindEventTimeTitleClick: function () {
        var state = this.state;
        $('#' + state.controlId).find('.calTimeTitle').mouseup(function (e) {
            var arr = [];
            var hour = $('#' + state.controlId).find('.calTimeTitle>.hour');
            var hourList = $('#' + state.controlId).find('.calTimeListH');
            arr.push({
                title: hour,
                list: hourList
            });
            var minute = $('#' + state.controlId).find('.calTimeTitle>.minute');
            var minuteList = $('#' + state.controlId).find('.calTimeListM');
            arr.push({
                title: minute,
                list: minuteList
            });
            var seconds = $('#' + state.controlId).find('.calTimeTitle>.seconds');
            var secondsList = $('#' + state.controlId).find('.calTimeListS');
            arr.push({
                title: seconds,
                list: secondsList
            });
            var nName = e.target.nodeName;
            var cName = e.target.className;
            function clear () {
                $(arr).each(function (key, item) {
                    item.title[0].className = item.title[0].className.replace(/pdd\-select/g, '');
                    item.list[0].style.display = 'none';
                });
            }
            /**
             * 分别点击了时分秒三个按钮的处理逻辑
             *
             */
            if (nName === 'SPAN' && cName.indexOf('hour') > -1) {
                clear();
                hour[0].className += ' pdd-select';
                hourList[0].style.display = 'block';
            } else if (nName === 'SPAN' && cName.indexOf('minute') > -1) {
                clear();
                minute[0].className += ' pdd-select';
                minuteList[0].style.display = 'block';
            } else if (nName === 'SPAN' && cName.indexOf('seconds') > -1) {
                clear();
                seconds[0].className += ' pdd-select';
                secondsList[0].style.display = 'block';
            }
        });
    },

    /**
     * 绑定时分秒的主体部分的点击处理
     *
     */
    bindEventTimeBodyClick: function () {
        var self = this;
        var state = this.state;
        var variate = this.variate;
        $('#' + state.controlId).find('.calTimeList').mouseup(function (e) {
            var nName = e.target.nodeName;
            if (nName === 'A') {
                clear();
                e.target.className += ' pdd-select';
                var currentTitle = $('#' + state.controlId).find('.calTimeTitle>.pdd-select');
                var val = parseInt($(e.target).html(), 10);
                val = val > 9 ? val : '0' + val;
                currentTitle.html(val);
                // 设置Input的时间值显示
                var input = $('#' + state.inputId);
                var str = '';
                if (input.val() === '') {
                    str += variate.tYear + '-' + (Number(variate.tMonth + 1) < 10 ? '0' + Number(variate.tMonth + 1) : Number(variate.tMonth + 1)) + '-' + (Number(variate.tDate) < 10 ? '0' + variate.tDate : variate.tDate);
                    str += self.getTimeValue();
                } else {
                    var d = input.val().split(' ')[0];
                    str += d;
                    str += self.getTimeValue();
                }
                input.val(str);
                state.select(str);
            }
            function clear () {
                var as = $(e.target).parents('.calTimeList').find('a');
                as.each(function (key, item) {
                    item.className = item.className.replace(/pdd\-select/g, '');
                });
            }
        });
    },

    /**
     * 绑定Input输入框的事件处理
     *
     */
    bindEventInput: function () {
        var self = this;
        var state = this.state;
        var input = this.variate.input;

        $('#' + state.inputId).bind('click focus', function (e) {
            if ($('#' + state.controlId + ':hidden').length != 0) {
                $('.pdd-calendar').hide();
                var a = $('#' + state.controlId),
                    b = self.getOffset(input[0]),
                    d = b.x + Number(input[0].clientLeft) - 1;
                b = b.y + Number(input[0].clientTop) + Number(input[0].clientHeight) - 1;

                // by suiyu
                b = b + 4;
                // end
                a.css({
                    top: b + 'px',
                    left: d + 'px'
                });
                d = $('#' + state.controlId).width();
                b = $('#' + state.controlId).height();
                // by suiyu
                // a.width(0);
                a.height(0);
                a.show().animate({height: b + 'px'}, state.speed);
                // end
                a.bind('selectstart', function () {
                    return false;
                }).bind('mousedown', function () {
                    return false;
                });
            }
        });
    },

    /**
     * 绑定icon的点击
     *
     */
    bindEventIconClick: function () {
        var state = this.state;
        $('#' + state.inputId).siblings('.pdd-calendar-icon').mouseup(function (e) {
            $('#' + state.inputId).focus();
        });
    },

    /**
     * 绑定document的点击事件
     *
     */
    bindEventDocument: function () {
        var state = this.state;
        var input = $('#' + state.inputId);

        $(document).bind('mouseup', function (a) {
            if ($(a.target).attr('id') != input.attr('id') && ($(a.target).parentsUntil('#' + state.controlId).parent().length == 0 || $(a.target).parentsUntil('#' + state.controlId).parent()[0].id != state.controlId)) {
                if (a.target.className != 'pdd-calendar-icon') {
                    $('#' + state.controlId).hide();
                }
            }
        });
    },

    /**
     * 设置Input节点为组件变量
     *
     */
    setInput: function () {
        var input = $(ReactDom.findDOMNode(this)).find('input');
        this.variate.input = input;
    },

    /**
     * 设置Input输入框的状态
     *
     */
    setInputStatus: function () {
        var state = this.state;
        var input = this.variate.input;

        if (this.state.readonly) {
            input.attr('readonly', true);
            input.bind('keydown', function () {
                if (event.keyCode == 8) {
                    event.keyCode = 0;
                }
            });
        }
    },

    /**
     * 实例化输入框里面值为日期对象 (w())
     * @return {Date} [返回后的日期对象]
     */
    instanceDate: function () {
        var re = /(\d\d\d\d)(\W)?(\d\d)(\W)?(\d\d)/g;
        var a = this.variate.input.val();
        a = a.replace(re, '$1/$3/$5@').split('@')[0];
        return new Date(a);
    },

    /**
     * 动画交叉变换显示(B(a))
     *
     */
    animateChangeDisB: function (a) {
        var state = this.state;
        var b = $('#' + state.controlId).find('.reserve'),
            d = $('#' + state.controlId).find('.enabled');
        b.stop();
        d.stop();
        b.removeClass('reserve').addClass('enabled');
        d.removeClass('enabled').addClass('reserve');
        b.css({
            'margin-left': d.width() + 'px',
            'margin-top': '0px'
        });
        b.empty().append(a);
        b.animate({'margin-left': '0px'}, state.speed);
        d.animate({'margin-left': '-' + d.width() + 'px'}, state.speed, function () {
            d.empty();
        });
    },

    /**
     * 动画交叉变换显示(C(a))
     *
     */
    animateChangeDis: function (a) {
        var state = this.state;
        var b = $('#' + state.controlId).find('.reserve');
        var d = $('#' + state.controlId).find('.enabled');
        b.stop();
        d.stop();
        b.removeClass('reserve').addClass('enabled');
        d.removeClass('enabled').addClass('reserve');
        b.css({
            'margin-left': '-' + d.width() + 'px',
            'margin-top': '0px'
        });
        b.empty().append(a);
        b.animate({'margin-left': '0px'}, state.speed);
        d.animate({'margin-left': d.width() + 'px'}, state.speed, function () {
            d.empty();
        });
    },

    /**
     * 动画交叉变换显示(D(a))
     *
     */
    animateChangeDisD: function (a) {
        var state = this.state;
        var b = $('#' + state.controlId).find('.reserve'),
            d = $('#' + state.controlId).find('.enabled');
        b.stop();
        d.stop();
        b.removeClass('reserve').addClass('enabled');
        d.removeClass('enabled').addClass('reserve');
        $('#' + state.controlId).css({'z-index': 1});

        b.css({'z-index': -1});
        d.css({'z-index': -1});
        b.css({
            'margin-left': '0px',
            'margin-top': d.height() + 'px'
        });
        b.empty().append(a);
        b.animate({'margin-top': '0px'}, state.speed);
        d.animate({'margin-top': '-' + d.width() + 'px'}, state.speed, function () {
            d.empty();
            $('#' + state.controlId).css({'z-index': 0});
            b.css({'z-index': 0});
            d.css({'z-index': 0});
        });
    },

    /**
     * 动画交叉变换显示(E(a))
     *
     */
    animateChangeDisE: function (a) {
        var state = this.state;
        var b = $('#' + state.controlId).find('.reserve'),
            d = $('#' + state.controlId).find('.enabled');
        b.stop();
        d.stop();
        b.removeClass('reserve').addClass('enabled');
        d.removeClass('enabled').addClass('reserve');
        $('#' + state.controlId).css({'z-index': 1});
        b.css({'z-index': -1});
        d.css({'z-index': -1});
        b.css({
            'margin-left': '0px',
            'margin-top': '-' + d.height() + 'px'
        });
        b.empty().append(a);
        b.animate({'margin-top': '0px'}, state.speed);
        d.animate({'margin-top': d.width() + 'px'}, state.speed, function () {
            d.empty();
            $('#' + state.controlId).css({'z-index': 0});
            b.css({'z-index': 0});
            d.css({'z-index': 0});
        });
    },

    /**
     * 获取节点位置数据
     * @param  {Dom} a [节点]
     * @return {Object}   [位置数据信息]
     */
    getOffset: function (a) {
        return {
            x: $(a).offset().left,
            y: $(a).offset().top
        };
    },

    /**
     * 获取时间值
     * @return {[type]} [description]
     */
    getTimeValue: function () {
        var state = this.state,
            str = '';
        if (state.time) {
            var hour = $('#' + state.controlId).find('.calTimeTitle>.hour');
            var minute = $('#' + state.controlId).find('.calTimeTitle>.minute');
            var seconds = $('#' + state.controlId).find('.calTimeTitle>.seconds');
            str += ' ' + hour.html() + ':' + minute.html() + ':' + seconds.html();
        }
        return str;
    },

    /**
     * 绘制时分秒Title
     *
     */
    renderHmsTitle: function (hour, minute, seconds) {
        var k = '';
        k += '  <div class=\'calTime\'>';
        k += '      <div class=\'calTimeTitle\'>';
        k += '          <span class=\'hour pdd-select\'>&hour&</span>';
        k += '          <span class=\'colon\'>:</span>';
        k += '          <span class=\'minute\'>&minute&</span>';
        k += '          <span class=\'colon\'>:</span>';
        k += '          <span class=\'seconds\'>&seconds&</span>';
        k += '      </div>';
        k += '  </div>';
        k = k.replace(/\&hour\&/g, hour)
             .replace(/\&minute\&/g, minute)
             .replace(/\&seconds\&/g, seconds);
        return k;
    },

    /**
     * 绘制小时List
     *
     */
    renderHour: function (num) {
        var now = new Date();
        var hour = now.getHours();
        var column = num / 6;
        var k = '';
        k += '<div class=\'calTimeList calTimeListH\'>';
        k += '<table class=\'tabT\'>';
        for (var i = 0; i < 6; i++) {
            k += '<tr>';
            for (var j = 0; j < column; j++) {
                var disHour = (i * column) + j;
                if (hour === disHour) {
                    // k += "<td><a class='current'>" + disHour + "</a></td>";
                    // 此处暂时不对当前时间作处理
                    k += '<td><a class=\'\'>' + disHour + '</a></td>';
                } else {
                    k += '<td><a class=\'\'>' + disHour + '</a></td>';
                }
            }
            k += '</tr>';
        }
        k += '</table>';
        k += '</div>';
        return k;
    },

    /**
     * 绘制分钟List
     *
     */
    renderMinute: function (num) {
        var column = num / 6;
        var now = new Date();
        var minute = now.getMinutes();
        var k = '';
        k += '<div class=\'calTimeList calTimeListM\' style=\'display:none;\'>';
        k += '<table class=\'tabT\'>';
        for (var i = 0; i < 6; i++) {
            k += '<tr>';
            for (var j = 0; j < column; j++) {
                var disMinute = (i * column) + j;
                if (minute === disMinute) {
                    // k += "<td><a class='tabT-minute current'>" + disMinute + "</a></td>";
                    // 此处暂时不对当前时间作处理
                    k += '<td><a class=\'tabT-minute\'>' + disMinute + '</a></td>';
                } else {
                    k += '<td><a class=\'tabT-minute\'>' + disMinute + '</a></td>';
                }
            }
            k += '</tr>';
        }
        k += '</table>';
        k += '</div>';
        return k;
    },

    /**
     * 绘制秒钟List
     *
     */
    renderSeconds: function (num) {
        var column = num / 6;
        var now = new Date();
        var seconds = now.getSeconds();
        var k = '';
        k += '<div class=\'calTimeList calTimeListS\' style=\'display:none;\'>';
        k += '<table class=\'tabT\'>';
        for (var i = 0; i < 6; i++) {
            k += '<tr>';
            for (var j = 0; j < column; j++) {
                var disSeconds = (i * column) + j;
                if (seconds === disSeconds) {
                    // k += "<td><a class='tabT-seconds current'>" + disSeconds + "</a></td>";
                    // 此处暂且不对当前时间作处理
                    k += '<td><a class=\'tabT-seconds\'>' + disSeconds + '</a></td>';
                } else {
                    k += '<td><a class=\'tabT-seconds\'>' + disSeconds + '</a></td>';
                }
            }
            k += '</tr>';
        }
        k += '</table>';
        k += '</div>';
        return k;
    },

    /**
     * 渲染日期的主体显示部分(s())
     *
     * @param  {[number]} year  [当前年的Date值]
     * @param  {[number]} month [当前月的Date值]
     * @return {[string]}       [渲染出的日期节点结构的字符串]
     */
    renderDateBody: function (year, month) {
        var state = this.state;
        var variate = this.variate;
        var newDate = new Date(year, month, 1);
        newDate.setDate(0);
        var d = 1,
            h = newDate.getDate();
        newDate.setDate(1);
        newDate.setMonth(newDate.getMonth() + 1);
        var m = newDate.getDay();
        if (m == 0) m = 7;
        h = h - m + 1;
        newDate.setMonth(newDate.getMonth() + 1);
        newDate.setDate(0);
        var o = newDate.getDate(),
            g = '<table class=\'tabD\'>';
        g += '<tr><th>\u65e5</th><th>\u4e00</th><th>\u4e8c</th><th>\u4e09</th><th>\u56db</th><th>\u4e94</th><th>\u516d</th></tr>';
        var i = this.instanceDate(),
            l = '',
            p = '',
            t = '';
        state.complement || (t = 'style=\'display:none\'');
        for (var x = 0; x < 6; x++) {
            g += '<tr>';
            for (var y = 0; y < 7; y++) {
                var j = x * 7 + y + 1 - m;
                p = l = '';
                if (state.lowerLimit != '' && state.lowerLimit > new Date(newDate.getFullYear(), newDate.getMonth(), j) || state.upperLimit != '' && new Date(newDate.getFullYear(), newDate.getMonth(), j) > state.upperLimit) if (0 < j && j <= o) {
                    if (newDate.getFullYear() == variate.tYear && newDate.getMonth() == variate.tMonth && j == variate.tDate) l = 'current';
                    g += '<td><span class=\'' + l + '\'>' + j + '</span></td>';
                } else if (j <= 0) {
                    if (newDate.getFullYear() == variate.tYear && newDate.getMonth() - 1 == variate.tMonth && h == variate.tDate) l = 'current';
                    g += '<td><span class=\'' + l + '\' ' + t + '>' + h + '</span></td>';
                    h++;
                } else {
                    if (j > o) {
                        if (newDate.getFullYear() == variate.tYear && newDate.getMonth() + 1 == variate.tMonth && d == variate.tDate) l = 'current';
                        g += '<td><span class=\'' + l + '\' ' + t + '>' + d + '</span></td>';
                        d++;
                    }
                } else if (0 < j && j <= o) {
                    if (newDate.getFullYear() == variate.tYear && newDate.getMonth() == variate.tMonth && j == variate.tDate) l = 'current';
                    if (newDate.getFullYear() == i.getFullYear() && newDate.getMonth() == i.getMonth() && j == i.getDate()) p = 'pdd-select';
                    g += '<td><a class=\'' + p + ' ' + l + '\'>' + j + '</a></td>';
                } else if (j <= 0) {
                    if (newDate.getFullYear() == variate.tYear && newDate.getMonth() - 1 == variate.tMonth && h == variate.tDate) l = 'current';
                    if (newDate.getFullYear() == i.getFullYear() && newDate.getMonth() - 1 == i.getMonth() && h == i.getDate()) p = 'pdd-select';
                    g += '<td><a class=\'prevD ' + p + ' ' + l + '\' ' + t + '>' + h + '</a></td>';
                    h++;
                } else if (j > o) {
                    if (newDate.getFullYear() == variate.tYear && newDate.getMonth() + 1 == variate.tMonth && d == variate.tDate) l = 'current';
                    if (newDate.getFullYear() == i.getFullYear() && newDate.getMonth() + 1 == i.getMonth() && d == i.getDate()) p = 'pdd-select';
                    g += '<td><a class=\'nextD ' + p + ' ' + l + '\' ' + t + '>' + d + '</a></td>';
                    d++;
                }
                g = g.replace('class=\' \'', '');
            }
            g += '</tr>';
        }
        g += '</table>';
        return g;
    },

    /**
     * 显示月份的a的主体 (z(a))
     * @return {string} 主体的html字符串
     *
     */
    renderMonthABody: function (a) {
        var e = this.variate.tYear;
        var f = this.variate.tMonth;

        var b = this.instanceDate(),
            d = '<table class=\'tabM\'>';
        d += '<tr>';
        d += '<td><a val=\'0\' ' + (a == b.getFullYear() && 0 == b.getMonth() ? 'class=\'pdd-select\'' : '') + ' ' + (a == e && 0 == f ? 'class=\'current\'' : '') + '>\u4e00\u6708</a></td>';
        d += '<td><a val=\'1\' ' + (a == b.getFullYear() && 1 == b.getMonth() ? 'class=\'pdd-select\'' : '') + ' ' + (a == e && 1 == f ? 'class=\'current\'' : '') + '>\u4e8c\u6708</a></td>';
        d += '<td><a val=\'2\' ' + (a == b.getFullYear() && 2 == b.getMonth() ? 'class=\'pdd-select\'' : '') + ' ' + (a == e && 2 == f ? 'class=\'current\'' : '') + '>\u4e09\u6708</a></td>';
        d += '<td><a val=\'3\' ' + (a == b.getFullYear() && 3 == b.getMonth() ? 'class=\'pdd-select\'' : '') + ' ' + (a == e && 3 == f ? 'class=\'current\'' : '') + '>\u56db\u6708</a></td>';
        d += '</tr>';
        d += '<tr>';
        d += '<td><a val=\'4\' ' + (a == b.getFullYear() && 4 == b.getMonth() ? 'class=\'pdd-select\'' : '') + ' ' + (a == e && 4 == f ? 'class=\'current\'' : '') + '>\u4e94\u6708</a></td>';
        d += '<td><a val=\'5\' ' + (a == b.getFullYear() && 5 == b.getMonth() ? 'class=\'pdd-select\'' : '') + ' ' + (a == e && 5 == f ? 'class=\'current\'' : '') + '>\u516d\u6708</a></td>';
        d += '<td><a val=\'6\' ' + (a == b.getFullYear() && 6 == b.getMonth() ? 'class=\'pdd-select\'' : '') + ' ' + (a == e && 6 == f ? 'class=\'current\'' : '') + '>\u4e03\u6708</a></td>';
        d += '<td><a val=\'7\' ' + (a == b.getFullYear() && 7 == b.getMonth() ? 'class=\'pdd-select\'' : '') + ' ' + (a == e && 7 == f ? 'class=\'current\'' : '') + '>\u516b\u6708</a></td>';
        d += '</tr>';
        d += '<tr>';
        d += '<td><a val=\'8\' ' + (a == b.getFullYear() && 8 == b.getMonth() ? 'class=\'pdd-select\'' : '') + ' ' + (a == e && 8 == f ? 'class=\'current\'' : '') + '>\u4e5d\u6708</a></td>';
        d += '<td><a val=\'9\' ' + (a == b.getFullYear() && 9 == b.getMonth() ? 'class=\'pdd-select\'' : '') + ' ' + (a == e && 9 == f ? 'class=\'current\'' : '') + '>\u5341\u6708</a></td>';
        d += '<td><a val=\'10\' ' + (a == b.getFullYear() && 10 == b.getMonth() ? 'class=\'pdd-select\'' : '') + ' ' + (a == e && 10 == f ? 'class=\'current\'' : '') + '>\u5341\u4e00\u6708</a></td>';
        d += '<td><a val=\'11\' ' + (a == b.getFullYear() && 11 == b.getMonth() ? 'class=\'pdd-select\'' : '') + ' ' + (a == e && 11 == f ? 'class=\'current\'' : '') + '>\u5341\u4e8c\u6708</a></td>';
        d += '</tr>';
        d += '</table>';
        return d;
    },

    /**
     * 显示年份的a的主体 (A(a))
     * @param  {Number} 当前年份
     * @return {String} 年份html主体的字符串
     */
    renderYearABody: function (a) {
        a = Math.floor(a / 10) * 10;
        var b = '<table class=\'tabY\'>',
            d = this.instanceDate(),
            h = '',
            m = '',
            o = '';
        this.state.complement || (o = 'style=\'display:none\'');
        for (var g = 0; g < 3; g++) {
            b += '<tr>';
            for (var i = 0; i < 4; i++) {
                m = h = '';
                if (g + 1 * i + 1 != 1 && (g + 1) * (i + 1) != 12) {
                    if (a == d.getFullYear()) h = 'pdd-select';
                    if (a == this.variate.tYear) m = 'current';
                    b += '<td><a class=\'' + h + ' ' + m + '\' >' + a + '</a></td>';
                    a++;
                } else if (g + 1 * i + 1 == 1) {
                    if (a - 1 == d.getFullYear()) h = 'pdd-select';
                    if (a - 1 == this.variate.tYear) m = 'current';
                    b += '<td><a class=\'prevY ' + h + ' ' + m + '\' ' + o + '>' + (a - 1) + '</a></td>';
                } else {
                    if (a == d.getFullYear()) h = 'pdd-select';
                    if (a == this.variate.tYear) m = 'current';
                    b += '<td><a class=\'nextY ' + h + ' ' + m + '\' ' + o + '>' + a + '</a></td>';
                }
            }
            b += '</tr>';
        }
        b += '</table>';
        return b;
    },

    /**
     * 渲染日期容器
     *
     */
    renderContainer: function () {
        var state = this.state;
        var today = new Date;
        var variate = this.variate;

        var k = '';
        k += '<div id=\'' + state.controlId + '\' class=\'pdd-calendar\'>';
        k += '  <div class=\'calMain\'>';
        k += '    <div class=\'calTitle\'>';
        k += '      <a class=\'prevMonth\'><span class=\'arrow-left\'></span></a>';
        k += '      <span class=\'t_date\'>';
        k += '          <span class=\'currentYearText\'>';
        k += '              <a class=\'currentYear\'>' + variate.tYear + '</a>\u5e74';
        k += '          </span>';
        k += '          <span class=\'currentMonthText\'>';
        k += '              <a class=\'currentMonth\'>' + (variate.tMonth + 1) + '</a>\u6708';
        k += '          </span>';
        k += '      </span>';
        k += '      <a class=\'nextMonth\'><span class=\'arrow-right\'></span></a>';
        k += '    </div>';
        k += '    <div class=\'calContent\'>';
        k += '      <div class=\'reserve\'>';
        k += '      </div>';
        k += '      <div class=\'enabled\'>';
        k += this.renderDateBody(variate.tYear, variate.tMonth);
        k += '      </div>';
        k += '    </div>';
        k += '  </div>';
        // by suiyu
        if (state.time) {
            var h = '00', m = '00', s = '00';
            var val = state.value;
            if (val) {
                var hms = val.split(' ')[1];
                if (hms) {
                    h = hms.split(':')[0];
                    m = hms.split(':')[1];
                    s = hms.split(':')[2];
                }
            }
            k += this.renderHmsTitle(h, m, s);
            k += this.renderHour(24);
            k += this.renderMinute(60);
            k += this.renderSeconds(60);
        }
        // end
        k += '</div>';
        $('body').append(k);
        // 如果没有时分秒的情况下，将高度设小(by suiyu)
        if (!state.time) {
            $('#' + state.controlId).css('height', '295px');
        }
    },
    /**
     * 渲染日期Dom结构
     *
     * @return {object} 日期虚拟Dom
     */
    render: function () {
        return (
            <div className="pdd-calendar-wrap">
                <input id={this.state.inputId} className="pdd-calendar-input" type="text" defaultValue={this.state.value} />
                <span className="pdd-calendar-icon"></span>
            </div>
        );
    }

});

module.exports = Index;
 at SyntaxError: Unexpected token (926:12)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseParenAndDistinguishExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1861:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
