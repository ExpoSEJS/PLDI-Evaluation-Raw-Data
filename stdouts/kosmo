/root/Targets/kosmo
└─┬ kosmo@0.0.7 
  ├─┬ archiver@0.21.0 
  │ ├─┬ archiver-utils@0.3.0 
  │ │ ├─┬ lazystream@0.1.0 
  │ │ │ └─┬ readable-stream@1.0.34 
  │ │ │   └── isarray@0.0.1 
  │ │ ├── lodash@3.10.1 
  │ │ └── normalize-path@2.0.1 
  │ ├── async@1.5.2 
  │ ├── buffer-crc32@0.2.13 
  │ ├─┬ glob@6.0.4 
  │ │ ├─┬ inflight@1.0.6 
  │ │ │ └── wrappy@1.0.2 
  │ │ ├── inherits@2.0.3 
  │ │ ├── once@1.4.0 
  │ │ └── path-is-absolute@1.0.1 
  │ ├── lodash@3.10.1 
  │ ├─┬ readable-stream@2.0.6 
  │ │ ├── core-util-is@1.0.2 
  │ │ ├── isarray@1.0.0 
  │ │ ├── process-nextick-args@1.0.7 
  │ │ ├── string_decoder@0.10.31 
  │ │ └── util-deprecate@1.0.2 
  │ ├─┬ tar-stream@1.3.2 
  │ │ ├── bl@1.2.1 
  │ │ ├── end-of-stream@1.4.0 
  │ │ └── xtend@4.0.1 
  │ └─┬ zip-stream@0.8.0 
  │   ├─┬ compress-commons@0.4.2 
  │   │ ├── crc32-stream@0.4.0 
  │   │ └── node-int64@0.4.0 
  │   └── lodash@3.10.1 
  ├─┬ aws-sdk@2.125.0 
  │ ├─┬ buffer@4.9.1 
  │ │ ├── base64-js@1.2.1 
  │ │ ├── ieee754@1.1.8 
  │ │ └── isarray@1.0.0 
  │ ├── crypto-browserify@1.0.9 
  │ ├── events@1.1.1 
  │ ├── jmespath@0.15.0 
  │ ├── querystring@0.2.0 
  │ ├── sax@1.2.1 
  │ ├─┬ url@0.10.3 
  │ │ └── punycode@1.3.2 
  │ ├── uuid@3.0.1 
  │ ├── xml2js@0.4.17 
  │ └── xmlbuilder@4.2.1 
  ├─┬ change-case@2.3.1 
  │ ├── camel-case@1.2.2 
  │ ├── constant-case@1.1.2 
  │ ├── dot-case@1.1.2 
  │ ├── is-lower-case@1.1.3 
  │ ├── is-upper-case@1.1.2 
  │ ├── lower-case@1.1.4 
  │ ├── lower-case-first@1.0.2 
  │ ├── param-case@1.1.2 
  │ ├── pascal-case@1.1.2 
  │ ├── path-case@1.1.2 
  │ ├── sentence-case@1.1.3 
  │ ├── snake-case@1.1.2 
  │ ├── swap-case@1.1.2 
  │ ├── title-case@1.1.2 
  │ ├── upper-case@1.1.3 
  │ └── upper-case-first@1.1.2 
  ├─┬ js-yaml@3.10.0 
  │ ├─┬ argparse@1.0.9 
  │ │ └── sprintf-js@1.0.3 
  │ └── esprima@4.0.0 
  ├── lodash@4.17.4 
  ├─┬ mime-multipart@0.0.2  (git+https://github.com/sergi/mime-multipart.git#2295a3dbf236676c2a75fdb7f4fdf62fedfae00d)
  │ ├── mime@1.4.1 
  │ └── node-uuid@1.4.8 
  ├─┬ minimatch@2.0.10 
  │ └─┬ brace-expansion@1.1.8 
  │   ├── balanced-match@1.0.0 
  │   └── concat-map@0.0.1 
  ├── moment@2.18.1 
  ├── node-getopt@0.2.3 
  ├── q@1.5.0 
  └── semver@5.4.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/kosmo/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 35% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","RegExp","join","binding","Object","WeakMap","create","Set","Array","ArrayBuffer","DataView","Map","resolve","max","now","apply"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0348 took 22.0709s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:6) on program 'use strict';

var _ = require('lodash')
    , assert = require('assert')
    , CFFunction = require('./cf-function')
    , types = require('./types');

function AWSResource(name, objectType, properties, attributes, validator) {
    if (!(this instanceof AWSResource)) {
        return new AWSResource(name, objectType, properties, attributes, validator);
    }

    // TODO: add a check that objectTyps is actually a type.object. Might need to
    // refactor types to have a base called Type or something so we can do something
    // like if (objectType instanceof types.Object), for eg.

    this.type = objectType;
    this.name = name;
    this.properties = properties || {};
    this.attributes = attributes;
    this.validator = validator;

    this[CFFunction.REF] = this.name;
    this[CFFunction.GET_ATT] = this.name;
}

AWSResource.prototype.validate = function() {
    var errors = [];
    var warnings = [];

    var resourceName = this.name;
    if (_.isEmpty(this.name) || !_.isString(this.name)) {
        errors.push('resource name must be non-empty string');
        resourceName = '<unknown>';
    }

    var typeValidationErrors = this.type.validate(this.properties);

    if (!_.isUndefined(typeValidationErrors)) {
        errors = errors.concat(_.map(typeValidationErrors, error => {
            return `resource "${resourceName}": ${error}`;
        }));
    }

    const validators = typeof this.validator === 'function'
        ? [this.validator]
        : this.validator instanceof Array
            ? this.validator
            : [];

    _.forEach(validators, validator => {
        assert(_.isFunction(validator));
        const validationContext = {
            addError: function(message) {
                errors.push(`resource "${resourceName}" validation error: "${message}"`);
            },
            addWarning: function(message) {
                warnings.push(`resource "${resourceName}" validation warning: "${message}"`);
            },
            properties: this.properties,
        };
        validator(validationContext);
    });

    return { errors, warnings };
};

AWSResource.prototype.toObject = function() {
    var object = {
        Type: this.type.name,
        Properties: this.type.toCloudFormationValue(this.properties),
    };

    object = _.extend(object, this.attributes);

    return object;
};

AWSResource.define = function(typeName, propertyDefinitions, options) {
    function Resource(name, properties, attributes) {
        if (!(this instanceof Resource)) {
            return new Resource(name, properties, attributes);
        }
        options = options || {};
        var validator = _.isFunction(options.validator) || _.isArray(options.validator)
            ? options.validator
            : undefined;
        AWSResource.call(this, name, types.object(typeName, propertyDefinitions), properties, attributes, validator);
    }
    Resource.prototype = Object.create(AWSResource.prototype);
    Resource.prototype.constructor = Resource;

    return Resource;
};

module.exports = AWSResource;
 at SyntaxError: Unexpected token (4:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/kosmo/node_modules/kosmo/lib/index.js. Coverage (Term): 67% Coverage (LOC): 83%
*- File /root/Targets/kosmo/node_modules/kosmo/lib/kosmoform/index.js. Coverage (Term): 11% Coverage (LOC): 11%
*- File /root/Targets/kosmo/node_modules/lodash/lodash.js. Coverage (Term): 22% Coverage (LOC): 35%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
