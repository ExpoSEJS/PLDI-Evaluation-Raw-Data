
> uws@0.14.5 install /root/Targets/alchemymvc/node_modules/uws
> node-gyp rebuild > build_log.txt 2>&1 || exit 0


> mmmagic@0.4.5 install /root/Targets/alchemymvc/node_modules/mmmagic
> node-gyp rebuild

make: Entering directory '/root/Targets/alchemymvc/node_modules/mmmagic/build'
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/apprentice.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/apptype.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/ascmagic.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/cdf.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/cdf_time.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/compress.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/der.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/encoding.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/fsmagic.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/funcs.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/is_tar.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/magic.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/print.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/readcdf.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/readelf.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/softmagic.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/fmtcheck.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/strlcat.o
  CC(target) Release/obj.target/libmagic/deps/libmagic/src/strlcpy.o
  AR(target) Release/obj.target/deps/libmagic/magic.a
  COPY Release/magic.a
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_byte_order.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_chartables.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_compile.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_config.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_dfa_exec.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_exec.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_fullinfo.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_get.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_globals.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_jit_compile.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_maketables.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_newline.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_ord2utf8.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_refcount.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_string_utils.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_study.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_tables.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_ucd.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_valid_utf8.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_version.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcre_xclass.o
  CC(target) Release/obj.target/libpcre/deps/libmagic/pcre/pcreposix.o
  AR(target) Release/obj.target/deps/libmagic/pcre/pcre.a
  COPY Release/pcre.a
  CXX(target) Release/obj.target/magic/src/binding.o
  SOLINK_MODULE(target) Release/obj.target/magic.node
  COPY Release/magic.node
make: Leaving directory '/root/Targets/alchemymvc/node_modules/mmmagic/build'

> node-sass@4.5.3 install /root/Targets/alchemymvc/node_modules/node-sass
> node scripts/install.js

Downloading binary from https://github.com/sass/node-sass/releases/download/v4.5.3/linux-x64-51_binding.node
Download complete
Binary saved to /root/Targets/alchemymvc/node_modules/node-sass/vendor/linux-x64-51/binding.node
Caching binary to /root/Targets/alchemymvc/false/node-sass/4.5.3/linux-x64-51_binding.node

> node-sass@4.5.3 postinstall /root/Targets/alchemymvc/node_modules/node-sass
> node scripts/build.js

Binary found at /root/Targets/alchemymvc/node_modules/node-sass/vendor/linux-x64-51/binding.node
Testing binary
Binary is fine
/root/Targets/alchemymvc
└─┬ alchemymvc@0.4.3 
  ├── ansi-256-colors@1.1.0 
  ├─┬ body@5.1.0 
  │ ├── continuable-cache@0.3.1 
  │ ├─┬ error@7.0.2 
  │ │ ├── string-template@0.2.1 
  │ │ └── xtend@4.0.1 
  │ ├─┬ raw-body@1.1.7 
  │ │ ├── bytes@1.0.0 
  │ │ └── string_decoder@0.10.31 
  │ └── safe-json-parse@1.0.1 
  ├─┬ body-parser@1.17.2 
  │ ├── bytes@2.4.0 
  │ ├── content-type@1.0.4 
  │ ├─┬ debug@2.6.7 
  │ │ └── ms@2.0.0 
  │ ├── depd@1.1.1 
  │ ├─┬ http-errors@1.6.2 
  │ │ ├── setprototypeof@1.0.3 
  │ │ └── statuses@1.3.1 
  │ ├── iconv-lite@0.4.15 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── qs@6.4.0 
  │ ├─┬ raw-body@2.2.0 
  │ │ └── unpipe@1.0.0 
  │ └─┬ type-is@1.6.15 
  │   ├── media-typer@0.3.0 
  │   └─┬ mime-types@2.1.17 
  │     └── mime-db@1.30.0 
  ├── bson@1.0.4 
  ├─┬ chokidar@1.7.0 
  │ ├─┬ anymatch@1.3.2 
  │ │ ├─┬ micromatch@2.3.11 
  │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ ├── array-unique@0.2.1 
  │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │   ├── isobject@2.1.0 
  │ │ │ │ │   ├─┬ randomatic@1.1.7 
  │ │ │ │ │   │ ├─┬ is-number@3.0.0 
  │ │ │ │ │   │ │ └── kind-of@3.2.2 
  │ │ │ │ │   │ └── kind-of@4.0.0 
  │ │ │ │ │   └── repeat-string@1.6.1 
  │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ ├── extglob@0.3.2 
  │ │ │ ├── filename-regex@2.0.1 
  │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ ├─┬ for-own@0.1.5 
  │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ ├── glob-base@0.3.0 
  │ │ │ │ └── is-dotfile@1.0.3 
  │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │     └── is-primitive@2.0.0 
  │ │ └─┬ normalize-path@2.1.1 
  │ │   └── remove-trailing-separator@1.1.0 
  │ ├── async-each@1.0.1 
  │ ├── glob-parent@2.0.0 
  │ ├── inherits@2.0.3 
  │ ├─┬ is-binary-path@1.0.1 
  │ │ └── binary-extensions@1.10.0 
  │ ├─┬ is-glob@2.0.1 
  │ │ └── is-extglob@1.0.0 
  │ ├── path-is-absolute@1.0.1 
  │ └─┬ readdirp@2.1.0 
  │   ├─┬ minimatch@3.0.4 
  │   │ └─┬ brace-expansion@1.1.8 
  │   │   ├── balanced-match@1.0.0 
  │   │   └── concat-map@0.0.1 
  │   ├─┬ readable-stream@2.3.3 
  │   │ └── string_decoder@1.0.3 
  │   └── set-immediate-shim@1.0.1 
  ├── expirable@0.1.0 
  ├── formidable@1.1.1 
  ├── graceful-fs@4.1.11 
  ├── hawkejs@1.2.1 
  ├─┬ janeway@0.2.4 
  │ ├── blessed@0.1.81 
  │ └─┬ copy-paste@1.3.0 
  │   └── sync-exec@0.6.2 
  ├─┬ jsondiffpatch@0.2.4 
  │ └─┬ chalk@0.5.1 
  │   ├── ansi-styles@1.1.0 
  │   ├── escape-string-regexp@1.0.5 
  │   ├─┬ has-ansi@0.1.0 
  │   │ └── ansi-regex@0.2.1 
  │   ├── strip-ansi@0.3.0 
  │   └── supports-color@0.2.0 
  ├─┬ less@2.7.2 
  │ ├─┬ errno@0.1.4 
  │ │ └── prr@0.0.0 
  │ ├── image-size@0.5.5 
  │ ├─┬ promise@7.3.1 
  │ │ └── asap@2.0.6 
  │ ├─┬ request@2.83.0 
  │ │ ├── aws-sign2@0.7.0 
  │ │ ├── aws4@1.6.0 
  │ │ ├── caseless@0.12.0 
  │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ └── delayed-stream@1.0.0 
  │ │ ├── extend@3.0.1 
  │ │ ├── forever-agent@0.6.1 
  │ │ ├─┬ form-data@2.3.1 
  │ │ │ └── asynckit@0.4.0 
  │ │ ├─┬ har-validator@5.0.3 
  │ │ │ ├─┬ ajv@5.2.3 
  │ │ │ │ ├── co@4.6.0 
  │ │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │ │   └── jsonify@0.0.0 
  │ │ │ └── har-schema@2.0.0 
  │ │ ├─┬ hawk@6.0.2 
  │ │ │ ├── boom@4.3.1 
  │ │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ │ └── boom@5.2.0 
  │ │ │ ├── hoek@4.2.0 
  │ │ │ └── sntp@2.0.2 
  │ │ ├─┬ http-signature@1.2.0 
  │ │ │ ├── assert-plus@1.0.0 
  │ │ │ ├─┬ jsprim@1.4.1 
  │ │ │ │ ├── extsprintf@1.3.0 
  │ │ │ │ ├── json-schema@0.2.3 
  │ │ │ │ └── verror@1.10.0 
  │ │ │ └─┬ sshpk@1.13.1 
  │ │ │   ├── asn1@0.2.3 
  │ │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │   ├── dashdash@1.14.1 
  │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │   ├── getpass@0.1.7 
  │ │ │   ├── jsbn@0.1.1 
  │ │ │   └── tweetnacl@0.14.5 
  │ │ ├── is-typedarray@1.0.0 
  │ │ ├── isstream@0.1.2 
  │ │ ├── json-stringify-safe@5.0.1 
  │ │ ├── oauth-sign@0.8.2 
  │ │ ├── performance-now@2.1.0 
  │ │ ├── safe-buffer@5.1.1 
  │ │ ├── stringstream@0.0.5 
  │ │ ├─┬ tough-cookie@2.3.3 
  │ │ │ └── punycode@1.4.1 
  │ │ ├── tunnel-agent@0.6.0 
  │ │ └── uuid@3.1.0 
  │ └── source-map@0.5.7 
  ├── mime@1.3.6 
  ├── minimist@1.2.0 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  ├─┬ mmmagic@0.4.5 
  │ └── nan@2.7.0 
  ├─┬ mongodb@2.2.31 
  │ ├── es6-promise@3.2.1 
  │ ├─┬ mongodb-core@2.1.15 
  │ │ └─┬ require_optional@1.0.1 
  │ │   └── resolve-from@2.0.0 
  │ └─┬ readable-stream@2.2.7 
  │   ├── buffer-shims@1.0.0 
  │   ├── core-util-is@1.0.2 
  │   ├── isarray@1.0.0 
  │   ├── process-nextick-args@1.0.7 
  │   ├── string_decoder@1.0.3 
  │   └── util-deprecate@1.0.2 
  ├── ncp@2.0.0 
  ├─┬ nedb@1.8.0 
  │ ├── async@0.2.10 
  │ ├── binary-search-tree@0.2.5 
  │ ├─┬ localforage@1.5.0 
  │ │ └─┬ lie@3.0.2 
  │ │   ├─┬ es3ify@0.1.4 
  │ │   │ ├── esprima-fb@3001.1.0-dev-harmony-fb 
  │ │   │ ├─┬ jstransform@3.0.0 
  │ │   │ │ ├── base62@0.1.1 
  │ │   │ │ └── source-map@0.1.31 
  │ │   │ └── through@2.3.8 
  │ │   ├── immediate@3.0.6 
  │ │   ├─┬ inline-process-browser@1.0.0 
  │ │   │ ├─┬ falafel@1.2.0 
  │ │   │ │ ├── acorn@1.2.2 
  │ │   │ │ ├── foreach@2.0.5 
  │ │   │ │ ├── isarray@0.0.1 
  │ │   │ │ └── object-keys@1.0.11 
  │ │   │ └─┬ through2@0.6.5 
  │ │   │   └─┬ readable-stream@1.0.34 
  │ │   │     └── isarray@0.0.1 
  │ │   └─┬ unreachable-branch-transform@0.3.0 
  │ │     ├── esmangle-evaluator@1.0.1 
  │ │     └─┬ recast@0.10.43 
  │ │       ├── ast-types@0.8.15 
  │ │       ├── esprima-fb@15001.1001.0-dev-harmony-fb 
  │ │       └── private@0.1.7 
  │ └── underscore@1.4.4 
  ├─┬ node-sass@4.5.3 
  │ ├── async-foreach@0.1.3 
  │ ├─┬ chalk@1.1.3 
  │ │ ├── ansi-styles@2.2.1 
  │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ └── ansi-regex@2.1.1 
  │ │ ├── strip-ansi@3.0.1 
  │ │ └── supports-color@2.0.0 
  │ ├─┬ cross-spawn@3.0.1 
  │ │ ├─┬ lru-cache@4.1.1 
  │ │ │ ├── pseudomap@1.0.2 
  │ │ │ └── yallist@2.1.2 
  │ │ └─┬ which@1.3.0 
  │ │   └── isexe@2.0.0 
  │ ├─┬ gaze@1.1.2 
  │ │ └── globule@1.2.0 
  │ ├── get-stdin@4.0.1 
  │ ├─┬ glob@7.1.2 
  │ │ ├── fs.realpath@1.0.0 
  │ │ ├─┬ inflight@1.0.6 
  │ │ │ └── wrappy@1.0.2 
  │ │ └── once@1.4.0 
  │ ├── in-publish@2.0.0 
  │ ├── lodash.assign@4.2.0 
  │ ├── lodash.clonedeep@4.5.0 
  │ ├── lodash.mergewith@4.6.0 
  │ ├─┬ meow@3.7.0 
  │ │ ├─┬ camelcase-keys@2.1.0 
  │ │ │ └── camelcase@2.1.1 
  │ │ ├── decamelize@1.2.0 
  │ │ ├─┬ loud-rejection@1.6.0 
  │ │ │ ├─┬ currently-unhandled@0.4.1 
  │ │ │ │ └── array-find-index@1.0.2 
  │ │ │ └── signal-exit@3.0.2 
  │ │ ├── map-obj@1.0.1 
  │ │ ├─┬ normalize-package-data@2.4.0 
  │ │ │ ├── hosted-git-info@2.5.0 
  │ │ │ ├─┬ is-builtin-module@1.0.0 
  │ │ │ │ └── builtin-modules@1.1.1 
  │ │ │ └─┬ validate-npm-package-license@3.0.1 
  │ │ │   ├─┬ spdx-correct@1.0.2 
  │ │ │   │ └── spdx-license-ids@1.2.2 
  │ │ │   └── spdx-expression-parse@1.0.4 
  │ │ ├─┬ read-pkg-up@1.0.1 
  │ │ │ ├─┬ find-up@1.1.2 
  │ │ │ │ ├── path-exists@2.1.0 
  │ │ │ │ └─┬ pinkie-promise@2.0.1 
  │ │ │ │   └── pinkie@2.0.4 
  │ │ │ └─┬ read-pkg@1.1.0 
  │ │ │   ├─┬ load-json-file@1.1.0 
  │ │ │   │ ├─┬ parse-json@2.2.0 
  │ │ │   │ │ └─┬ error-ex@1.3.1 
  │ │ │   │ │   └── is-arrayish@0.2.1 
  │ │ │   │ ├── pify@2.3.0 
  │ │ │   │ └─┬ strip-bom@2.0.0 
  │ │ │   │   └── is-utf8@0.2.1 
  │ │ │   └── path-type@1.1.0 
  │ │ ├─┬ redent@1.0.0 
  │ │ │ ├─┬ indent-string@2.1.0 
  │ │ │ │ └─┬ repeating@2.0.1 
  │ │ │ │   └── is-finite@1.0.2 
  │ │ │ └── strip-indent@1.0.1 
  │ │ └── trim-newlines@1.0.0 
  │ ├─┬ node-gyp@3.6.2 
  │ │ ├── fstream@1.0.11 
  │ │ ├─┬ nopt@3.0.6 
  │ │ │ └── abbrev@1.1.1 
  │ │ ├─┬ osenv@0.1.4 
  │ │ │ └── os-homedir@1.0.2 
  │ │ ├── semver@5.3.0 
  │ │ └─┬ tar@2.2.1 
  │ │   └── block-stream@0.0.9 
  │ ├─┬ npmlog@4.1.2 
  │ │ ├─┬ are-we-there-yet@1.1.4 
  │ │ │ └── delegates@1.0.0 
  │ │ ├── console-control-strings@1.1.0 
  │ │ ├─┬ gauge@2.7.4 
  │ │ │ ├── aproba@1.2.0 
  │ │ │ ├── has-unicode@2.0.1 
  │ │ │ ├─┬ string-width@1.0.2 
  │ │ │ │ ├── code-point-at@1.1.0 
  │ │ │ │ ├─┬ is-fullwidth-code-point@1.0.0 
  │ │ │ │ │ └── number-is-nan@1.0.1 
  │ │ │ │ └─┬ strip-ansi@3.0.1 
  │ │ │ │   └── ansi-regex@2.1.1 
  │ │ │ ├─┬ strip-ansi@3.0.1 
  │ │ │ │ └── ansi-regex@2.1.1 
  │ │ │ └── wide-align@1.1.2 
  │ │ └── set-blocking@2.0.0 
  │ ├─┬ sass-graph@2.2.4 
  │ │ ├── lodash@4.17.4 
  │ │ ├─┬ scss-tokenizer@0.2.3 
  │ │ │ ├── js-base64@2.3.2 
  │ │ │ └─┬ source-map@0.4.4 
  │ │ │   └── amdefine@1.0.1 
  │ │ └─┬ yargs@7.1.0 
  │ │   ├── camelcase@3.0.0 
  │ │   ├─┬ cliui@3.2.0 
  │ │   │ ├─┬ strip-ansi@3.0.1 
  │ │   │ │ └── ansi-regex@2.1.1 
  │ │   │ └─┬ wrap-ansi@2.1.0 
  │ │   │   └─┬ strip-ansi@3.0.1 
  │ │   │     └── ansi-regex@2.1.1 
  │ │   ├── get-caller-file@1.0.2 
  │ │   ├─┬ os-locale@1.4.0 
  │ │   │ └─┬ lcid@1.0.0 
  │ │   │   └── invert-kv@1.0.0 
  │ │   ├── require-directory@2.1.1 
  │ │   ├── require-main-filename@1.0.1 
  │ │   ├── which-module@1.0.0 
  │ │   ├── y18n@3.2.1 
  │ │   └─┬ yargs-parser@5.0.0 
  │ │     └── camelcase@3.0.0 
  │ └── stdout-stream@1.4.0 
  ├─┬ path-to-regexp@1.7.0 
  │ └── isarray@0.0.1 
  ├── protoblast@0.3.10 
  ├── qs@6.5.1 
  ├── semver@5.4.1 
  ├─┬ slug@0.9.1 
  │ └── unicode@10.0.0 
  ├─┬ socket.io@2.0.3 
  │ ├─┬ engine.io@3.1.2 
  │ │ ├─┬ accepts@1.3.3 
  │ │ │ └── negotiator@0.6.1 
  │ │ ├── base64id@1.0.0 
  │ │ ├── cookie@0.3.1 
  │ │ ├─┬ engine.io-parser@2.1.1 
  │ │ │ ├── after@0.8.2 
  │ │ │ ├── arraybuffer.slice@0.0.6 
  │ │ │ └── blob@0.0.4 
  │ │ ├── uws@0.14.5 
  │ │ └─┬ ws@2.3.1 
  │ │   ├── safe-buffer@5.0.1 
  │ │   └── ultron@1.1.0 
  │ ├── object-assign@4.1.1 
  │ ├── socket.io-adapter@1.1.1 
  │ └─┬ socket.io-parser@3.1.2 
  │   ├─┬ has-binary2@1.0.2 
  │   │ └── isarray@2.0.1 
  │   └── isarray@2.0.1 
  ├─┬ socket.io-client@2.0.3 
  │ ├── backo2@1.0.2 
  │ ├── base64-arraybuffer@0.1.5 
  │ ├── component-bind@1.0.0 
  │ ├── component-emitter@1.2.1 
  │ ├─┬ engine.io-client@3.1.2 
  │ │ ├── component-inherit@0.0.3 
  │ │ ├── xmlhttprequest-ssl@1.5.3 
  │ │ └── yeast@0.1.2 
  │ ├── has-cors@1.1.0 
  │ ├── indexof@0.0.1 
  │ ├── object-component@0.0.3 
  │ ├─┬ parseqs@0.0.5 
  │ │ └─┬ better-assert@1.0.2 
  │ │   └── callsite@1.0.0 
  │ ├── parseuri@0.0.5 
  │ └── to-array@0.1.4 
  ├─┬ socket.io-stream@0.9.1 
  │ └─┬ debug@2.2.0 
  │   └── ms@0.7.1 
  ├── sputnik@0.0.6 
  ├─┬ temp@0.8.3 
  │ ├── os-tmpdir@1.0.2 
  │ └── rimraf@2.2.8 
  ├── toobusy-js@0.5.1 
  ├─┬ uglify-js@3.0.28 
  │ └── commander@2.11.0 
  └─┬ useragent@2.2.1 
    ├── lru-cache@2.2.4 
    └── tmp@0.0.33 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/alchemymvc/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 28.000000000000004% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0349 took 4.3704s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: The keyword 'package' is reserved (6:5) on program module.exports = function BlastInit(modifyPrototype) {

	var BlastClass,
	    Collection,
	    other_ver,
	    package,
	    Globals,
	    version,
	    Names,
	    Blast,
	    temp,
	    key;

	BlastClass = function BlastClass(){};
	Blast = new BlastClass();

	// Is it a pure, regular browser?
	Blast.isBrowser = false;

	// Is it running in a node context?
	Blast.isNode = false;

	// Is it running in NW.js?
	Blast.isNW = false;

	// Is it running in a NW.js window?
	Blast.isNWWindow = false;

	// If it's a browser, is it IE?
	Blast.isIE = false;
	Blast.__init = BlastInit;

	// If it's a browser, is it Edge?
	Blast.isEdge = false;

	// See if we can modify class prototypes
	if (typeof modifyPrototype === 'undefined') {
		modifyPrototype = true;
	}

	if (typeof process === 'object' && (process.__node_webkit || process.__nwjs)) {
		Blast.isNW = true;
		Blast.isNode = true;
		Globals = global;
	} else if (typeof window !== 'undefined') {
		Globals = window;
		Blast.isBrowser = true;

		if (window.navigator && window.navigator.userAgent) {
			Blast.isIE = (window.navigator.userAgent.indexOf('MSIE') > -1 || window.navigator.userAgent.indexOf('Trident/') > -1);

			if (!Blast.isIE) {
				Blast.isEdge = window.navigator.userAgent.indexOf('Edge/') > -1;
			}
		}
	} else {
		Globals = global;
		Blast.isNode = true;
	}

	// NW.js offers 2 contexts: node & chromium
	if (false && Blast.isNW && typeof window !== 'undefined') {
		Globals = window;
		Blast.isNWWindow = true;
	}

	Blast.Globals = Globals;

	// Get the debug environment variable
	// This is not meant to debug protoblast
	if (typeof process != 'undefined') {
		Blast.DEBUG = !!process.env.DEBUG;
	} else {
		Blast.DEBUG = !!Blast.Globals.DEBUG;
	}

	// Get version information of this protoblast instance
	if (Blast.isNode) {
		package = require(__dirname + '/../package.json');

		// Split the version
		temp = package.version.split('.');

		// Interpret the numbers
		version = {
			major : parseInt(temp[0]),
			minor : parseInt(temp[1]),
			patch : parseInt(temp[2])
		};

		Blast.version = version;
	}

	// Maybe we can return an existing protoblast collection
	if (Globals.__Protoblast) {

		// If we don't have to modify the prototype, or if it's already done, return the existing collection
		if (!modifyPrototype || (modifyPrototype && Globals.__Protoblast.modifyPrototype)) {

			// See if the versions match on node.js
			if (Blast.isNode) {

				// Get the other version info
				other_ver = Globals.__Protoblast.version;

				// See if we can use the earlier loaded protoblast instance
				if (other_ver && other_ver.major == version.major && other_ver.minor == version.minor) {
					// If the earlier loaded protoblast instance has a higher patch, we can safely use that
					if (other_ver.patch >= version.patch) {
						return Globals.__Protoblast;
					}
				}
			} else {
				return Globals.__Protoblast;
			}
		} else {
			Blast = Globals.__Protoblast;
		}
	}

	// Store shims under unit_test object
	// when unit testing
	if (module.exports.unit_test) {
		Blast.Shims = {};
	}

	// Don't overwrite another protoblast instance
	if (!other_ver) {
		Globals.__Protoblast = Blast;
	}

	Names = [
		'Function',
		'Object',
		'Array',
		'Boolean',
		'Crypto',
		'Date',
		'Error',
		'Informer',
		'Request',
		'FunctionQueue',
		'Iterator',
		'Deck',
		'JSON',
		'JSONPath',
		'Math',
		'SeededRng',
		'Number',
		'RegExp',
		'String',
		'URL'
	];

	Blast.modifyPrototype = modifyPrototype;

	// Class references go here. They're shared among all Protoblast instances
	if (!Blast.Classes) {
		Blast.Classes = {
			Object: Object
		};
	}

	// All definitions will also be set on these objects
	Blast.Collection = {
		Object: {}
	};

	Collection = Blast.Collection;

	Blast.Bound = {};

	/**
	 * Add the defineProperty method if it doesn't exist yet,
	 * this will only support .value setters
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.1.0
	 * @version   0.1.0
	 */
	if (!Object.defineProperty || (typeof navigator !== 'undefined' && navigator.appVersion.indexOf('MSIE 8') > -1)) {
		Collection.Object.defineProperty = function defineProperty(obj, name, settings) {
			obj[name] = settings.value;
		};

		if (modifyPrototype) {
			Object.defineProperty = Collection.Object.defineProperty;
		}
	}

	if (!Collection.Object.defineProperty) {
		Collection.Object.defineProperty = Object.defineProperty;
	}

	// Create the property definer
	Blast.defineProperty = function defineProperty(obj, name, settings) {
		return Collection.Object.defineProperty(obj, name, settings);
	};

	/**
	 * Inherit the prototype methods from one constructor into another
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.1.3
	 * @version   0.1.3
	 *
	 * @param     {Function}  constructor       The new constructor
	 * @param     {Function}  superConstructor  The 'super' constructor
	 * @param     {Boolean}   setSuper          Set super on constructor [TRUE]
	 */
	Blast.inherits = function inherits(constructor, superConstructor, setSuper) {

		// Store the parent constructor if wanted
		if (typeof setSuper === 'undefined' || setSuper) {
			constructor.super_ = superConstructor;
		}

		// Create the prototype
		constructor.prototype = Object.create(superConstructor.prototype, {
			constructor: {
				value: constructor,
				enumerable: false,
				writable: true,
				configurable: true
			}
		});
	};

	/**
	 * Define a non-enumerable property
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.1.0
	 * @version   0.3.5
	 *
	 * @param     {Object}   target   The object to add the property to
	 * @param     {String}   name     The name of the property
	 * @param     {Object}   value    The value of the property
	 */
	Blast.defineProperty(Collection.Object, 'defineValue', {
		value: function defineValue(target, name, value, enumerable) {

			var i;

			if (typeof enumerable == 'undefined') {
				enumerable = false;
			}

			if (Array.isArray(name)) {
				for (i = 0; i < name.length; i++) {
					Blast.defineValue(target, name[i], value, enumerable);
				}
				return;
			}

			// When in DEBUG mode show warnings for already existing properties
			if (Blast.DEBUG && Object.getOwnPropertyDescriptor(target, name) != null) {
				console.warn('Protoblast is overwriting property "' + name + '"');
			}

			Object.defineProperty(target, name, {
				value: value,
				enumerable: enumerable,
				configurable: true,
				writable: true
			});
		}
	});

	Blast.defineValue = Collection.Object.defineValue;

	if (modifyPrototype) {
		Blast.defineValue(Object, 'defineValue', Blast.defineValue);
	}

	/**
	 * Define a property getter
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.1.3
	 * @version   0.1.3
	 *
	 * @param     {Object}   target   The object to add the property to
	 * @param     {String}   name     The name of the property
	 * @param     {Object}   value    The value of the property
	 */
	Blast.defineGet = function defineGet(target, name, value, enumerable) {

		if (target && typeof target[name] !== 'undefined') {
			return;
		}

		if (typeof enumerable == 'undefined') {
			enumerable = false;
		}

		Object.defineProperty(target, name, {
			get: value,
			enumerable: enumerable
		});
	};

	/**
	 * Define a class constructor.
	 * Always returns the given constructor.
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.1.2
	 * @version   0.1.12
	 */
	Blast.defineClass = function defineClass(className, constructor, shim) {

		var objTarget;

		if (shim && Globals[className]) {
			Blast.Classes[className] = Globals[className];
		} else {

			// Indicate this defined class belongs to protoblast
			Blast.defineValue(constructor, '_blast_class', true);

			// Store the new constructor in the classes object
			Blast.Classes[className] = constructor;

			// If we're allowed to modify prototypes, turn it into a global
			if (Blast.modifyPrototype) {
				Globals[className] = constructor;
			}
		}

		return constructor;
	};

	/**
	 * Define a global
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.1.2
	 * @version   0.1.2
	 */
	Blast.defineGlobal = function defineGlobal(name, value, shim) {

		if (shim && Globals[name]) {
			Blast[name] = Globals[name];
		} else {

			// Always add it to Blast
			Blast[name] = value;

			if (Blast.modifyPrototype) {
				if (Blast.isNode) {
					// In node, every global is an own property of the `global` object
					Globals[name] = constructor;
				} else {
					// In the browser, it's mostly a property of the window prototype
					if (Globals.constructor && Globals.constructor.prototype) {
						Globals.constructor.prototype[name] = value;
					} else {
						Globals[name] = value;
					}
				}
			}
		}
	};

	/**
	 * Define a prototype value
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.1.0
	 * @version   0.1.12
	 *
	 * @param     {Object}   target   The object to add the property to
	 * @param     {String}   name     The name of the property
	 * @param     {String}   type     get/set/value, defaults to value
	 * @param     {Object}   value    The value of the property
	 * @param     {Boolean}  shim     Only set value if it's not already there
	 */
	Blast.definePrototype = function definePrototype(targetClass, name, type, value, shim) {

		var objTarget,
		    className,
		    definer;

		if (arguments.length == 3) {
			value = type;
			type = 'value';
		}

		if (arguments.length == 4) {
			if (typeof value == 'boolean') {
				shim = value;
				value = type;
				type = 'value';

			}
		}

		if (type == 'get') {
			definer = Blast.defineGet;
		} else {
			definer = Blast.defineValue;
		}

		if (typeof targetClass == 'string') {

			className = targetClass;

			if (!Collection[className]) {
				Collection[className] = {};
			}

			if (!Blast.Classes[className]) {
				if (!Globals[className]) {
					Globals[className] = {};
				}

				Blast.Classes[className] = Globals[className];
			}

			objTarget = Collection[className];
			targetClass = Blast.Classes[className];
		} else if (shim || Blast.modifyPrototype) {
			objTarget = targetClass;
		}

		if (shim && Blast.Shims) {
			Blast.Shims[(className || targetClass.name) + '#' + name] = value;

			// Force overwrite while unit testing
			if (module.exports.unit_test) {
				shim = false;
			}
		}

		if (Blast.modifyPrototype) {

			if (!targetClass.prototype) {
				targetClass.prototype = {};
			}

			// Only set if it's not a shim, or if it's not there
			if (!shim || !(targetClass.prototype[name] && targetClass.prototype.hasOwnProperty(name))) {
				definer(targetClass.prototype, name, value);
			}
		} else if (targetClass._blast_class || (shim && !targetClass.prototype[name])) {
			definer(targetClass.prototype, name, value);
		}

		if (objTarget) {

			if (!objTarget.prototype) {
				objTarget.prototype = {};
			}

			// If this is only a shim, and it already exists on the real class, use that
			if (shim && targetClass.prototype && targetClass.prototype.hasOwnProperty(name)) {
				if (type == 'get') {
					// If we want to set a getter, it needs to be a function
					if (typeof targetClass.prototype[name] == 'function') {
						definer(objTarget.prototype, name, targetClass.prototype[name], true);
					}
				} else {
					definer(objTarget.prototype, name, targetClass.prototype[name], true);
				}
			} else {
				definer(objTarget.prototype, name, value, true);
			}
		}
	};

	/**
	 * Define a class function
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.1.0
	 * @version   0.1.9
	 *
	 * @param     {Object}   target   The object to add the property to
	 * @param     {String}   name     The name of the property
	 * @param     {Object}   value    The value of the property
	 * @param     {Boolean}  shim     Only set value if it's not already there
	 */
	Blast.defineStatic = function defineStatic(targetClass, name, value, shim) {

		var objTarget,
		    className;

		if (typeof targetClass == 'string') {

			className = targetClass;

			if (!Collection[className]) {
				Collection[className] = {};
			}

			if (!Blast.Classes[className]) {
				if (!Globals[className]) {
					Globals[className] = {};
				}

				Blast.Classes[className] = Globals[className];
			}

			objTarget = Collection[className];
			targetClass = Blast.Classes[className];
		}

		if (shim && Blast.Shims) {
			Blast.Shims[(className || targetClass.name) + '.' + name] = value;

			// Force overwrite while unit testing
			if (module.exports.unit_test) {
				shim = false;
			}
		}

		if (Blast.modifyPrototype) {
			// Only set if it's not a shim, or if it's not there
			if (!shim || !targetClass.hasOwnProperty(name)) {
				Blast.defineValue(targetClass, name, value);
			}
		}

		if (objTarget) {
			// If this is only a shim, and it already exists on the real class, use that
			if (shim && targetClass.hasOwnProperty(name)) {
				Blast.defineValue(objTarget, name, targetClass[name], true);
			} else {
				Blast.defineValue(objTarget, name, value, true);
			}
		}
	};

	/**
	 * Return a string representing the source code of the given variable.
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.1.0
	 * @version   0.1.0
	 *
	 * @param     {Object}           variable   The variable to uneval
	 * @param     {Boolean|Number}   tab        If indent should be used
	 *
	 * @return    {String}
	 */
	Blast.uneval = function uneval(variable, tab) {

		var result,
		    type = typeof variable;

		if (tab === true) {
			tab = 1;
		}

		if (!variable) {
			result = ''+variable;
		} else if (type == 'number') {
			result = ''+variable;
		} else if (!(type == 'string' || type == 'boolean') && variable.toSource) {
			result = variable.toSource(tab);
		} else {
			result = JSON.stringify(variable, jsonuneval);
		}

		return result;
	};

	/**
	 * The root was not uneval-able, but the rest could be
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.1.4
	 * @version   0.1.4
	 */
	function jsonuneval(key, value) {

		if (key === '') {
			return value;
		}

		return Blast.uneval(value);
	}

	/**
	 * Server side: create client side file
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.1.1
	 * @version   0.1.1
	 *
	 * @return    {String}
	 */
	Blast.getClientPath = function getClientPath(useCommon) {

		var template,
		    result,
		    cpath,
		    files,
		    code,
		    temp,
		    id,
		    fs;

		if (useCommon) {
			if (Blast.clientPathCommon) {
				return Blast.clientPathCommon;
			}

			cpath = __dirname + '/../client-file-common.js';
			Blast.clientPathCommon = cpath;
		} else {
			if (Blast.clientPath) {
				return Blast.clientPath;
			}

			cpath = __dirname + '/../client-file.js';
			Blast.clientPath = cpath;
		}

		// Require fs
		fs = require('fs');

		// Get the main template
		template = fs.readFileSync(__dirname + '/client.js', {encoding: 'utf8'});

		code = '';

		files = [
			'init',
			'inflections',
			'diacritics',
			'date_format',
			'weakmap',
			'function_flow',
			'function_inheritance',
			'benchmark',
			'misc',
			'string_compression',
			'string_compressed_entities',
			'string_entities',
			'setimmediate',
			'sorting'
		].concat(Names);

		// This file should only be for browsers
		files.push('browsershims');

		files.forEach(function(name, index) {

			name = name.toLowerCase();

			temp = fs.readFileSync(__dirname + '/' + name + '.js', {encoding: 'utf8'});

			code += 'require.register("' + name + '.js", function(module, exports, require){\n';
			code += temp;
			code += '});\n';

		});

		id = template.indexOf('//_REGISTER_//');

		if (useCommon) {
			code += '\nuseCommon = true;\n';
		}

		template = template.slice(0, id) + code + template.slice(id);

		fs.writeFileSync(cpath, template);

		return cpath;
	};

	var when_ready = [],
	    when_loaded = [],
	    queued_meds = [],
	    queued_ticks = [];

	/**
	 * Execute function after Blast code has run.
	 * This is normally after 'ready' on a real 'nextTick',
	 * but can be forced with a 'doLoaded' call.
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.3.6
	 * @version   0.3.6
	 *
	 * @param     {Function}   fnc
	 */
	Blast.queueTick = function queueTick(fnc) {
		if (queued_ticks) {
			queued_ticks.push(fnc);
		} else {
			Blast.nextTick(fnc);
		}
	};

	/**
	 * Do queued ticks
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.3.6
	 * @version   0.3.6
	 */
	function doQueuedTicks() {

		var i;

		if (!queued_ticks) {
			return;
		}

		for (i = 0; i < queued_ticks.length; i++) {
			queued_ticks[i]();
		}

		queued_ticks = false;
	}

	/**
	 * Execute function after Blast code has run
	 * This is after 'ready' and 'tick' but before 'loaded'
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.3.6
	 * @version   0.3.6
	 *
	 * @param     {Function}   fnc
	 */
	Blast.queueImmediate = function queueImmediate(fnc) {
		if (when_loaded) {
			queued_meds.push(fnc);
		} else {
			Blast.setImmediate(fnc);
		}
	};

	/**
	 * Execute function after Blast has been completely defined.
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.1.2
	 * @version   0.3.6
	 *
	 * @param     {Function}   fnc
	 *
	 * @return    {Boolean}    Returns if Protoblast is already ready
	 */
	Blast.ready = function ready(fnc) {
		if (when_ready) {

			if (fnc) {
				when_ready.push(fnc);
			}

			return false;
		} else {

			if (fnc) {
				fnc();
			}

			return true;
		}
	};

	/**
	 * Execute function after Blast and all other scripts have executed.
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.1.10
	 * @version   0.3.6
	 *
	 * @param     {Function}   fnc
	 *
	 * @return    {Boolean}    Returns if Protoblast has already loaded
	 */
	Blast.loaded = function loaded(fnc) {
		if (when_loaded) {

			if (fnc) {
				when_loaded.push(fnc);
			}

			return false;
		} else {

			if (fnc) {
				fnc(true);
			}

			return true;
		}
	};

	/**
	 * Force Protoblast into executing the when_loaded functions
	 *
	 * @author    Jelle De Loecker   <jelle@develry.be>
	 * @since     0.2.0
	 * @version   0.3.6
	 */
	Blast.doLoaded = function doLoaded() {

		var i;

		if (!when_loaded) {
			return;
		}

		doQueuedTicks();

		for (i = 0; i < queued_meds.length; i++) {
			queued_meds[i]();
		}

		for (i = 0; i < when_loaded.length; i++) {
			when_loaded[i]();
		}

		queued_meds = false;
		when_loaded = false;
	};

	// Make sure WeakMap is available first!
	require('./weakmap.js')(Blast, Collection);

	// Load the inheritance methods
	require('./function_inheritance.js')(Blast, Collection);

	// Require the scripts
	Names.forEach(function eachName(name) {
		name = name.toLowerCase();
		require('./' + name + '.js')(Blast, Collection);
	});

	// Turn Blast into an event emitter
	Blast.Collection.Object.inject(BlastClass.prototype, Blast.Classes.Informer.prototype);

	require('./string_compression.js')(Blast, Collection);
	require('./string_entities.js')(Blast, Collection);
	require('./function_flow.js')(Blast, Collection);
	require('./setimmediate.js')(Blast, Collection);
	require('./inflections.js')(Blast, Collection);
	require('./date_format.js')(Blast, Collection);
	require('./diacritics.js')(Blast, Collection);
	require('./benchmark.js')(Blast, Collection);
	require('./sorting.js')(Blast, Collection);
	require('./misc.js')(Blast, Collection);

	if (Blast.isBrowser) {
		require('./browsershims.js')(Blast, Collection);
	}

	// Now create bound methods, which are about 0,000129 ms slower
	Collection.Object.each(Collection, function eachCollection(StaticClass, className) {

		// Make sure the bound collection object exists
		if (!Blast.Bound[className]) {
			Blast.Bound[className] = {};
		}

		// Add all the static functions as-is
		Collection.Object.each(StaticClass, function eachClass(StaticFunction, functionName) {
			Blast.Bound[className][functionName] = StaticFunction;
		});

		// Add all the prototype functions (if no static version exists already)
		Collection.Object.each(StaticClass.prototype, function eachProperty(PrototypeFunction, functionName) {

			// If there is a static function with the same name,
			// it gets precedence!
			// @version 0.3.7
			if (Object.hasOwnProperty.call(StaticClass, functionName)) {
				return;
			}

			Blast.Bound[className][functionName] = Collection.Function.prototype.unmethodize.call(PrototypeFunction, functionName);
		});
	});

	for (var i = 0; i < when_ready.length; i++) {
		when_ready[i]();
	}

	when_ready = false;

	// The core has loaded and the `return Blast` will have executed
	Blast.nextTick(function afterThisFunction() {
		Blast.emit('ready');
		doQueuedTicks();
	});

	// Any other synchronous javascript after this has also finished
	Blast.setImmediate(function afterOtherScripts() {
		Blast.doLoaded();
		Blast.emit('loaded');
	});

	return Blast;
}; at SyntaxError: The keyword 'package' is reserved (6:5)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$3.parseIdent (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2182:14)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:41:34)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
    at Parser.pp$3.parseFunctionBody (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2105:24)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/alchemymvc/node_modules/alchemymvc/lib/bootstrap.js. Coverage (Term): 8% Coverage (LOC): 10%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
