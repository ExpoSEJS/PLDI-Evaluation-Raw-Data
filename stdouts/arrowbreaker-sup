
> ws@0.4.32 install /root/Targets/arrowbreaker-sup/node_modules/ws
> (node-gyp rebuild 2> builderror.log) || (exit 0)

make: Entering directory '/root/Targets/arrowbreaker-sup/node_modules/ws/build'
  CXX(target) Release/obj.target/bufferutil/src/bufferutil.o
bufferutil.target.mk:96: recipe for target 'Release/obj.target/bufferutil/src/bufferutil.o' failed
make: Leaving directory '/root/Targets/arrowbreaker-sup/node_modules/ws/build'
/root/Targets/arrowbreaker-sup
└─┬ arrowbreaker-sup@1.2.1 
  ├── arrr@0.2.0 
  ├── async@0.2.10 
  ├─┬ emailjs@0.3.16 
  │ ├── addressparser@0.3.2 
  │ ├── bufferjs@1.1.0 
  │ ├─┬ mimelib@0.2.14 
  │ │ ├── addressparser@0.2.1 
  │ │ └─┬ encoding@0.1.12 
  │ │   └── iconv-lite@0.4.19 
  │ ├── moment@1.7.0 
  │ └── starttls@0.2.1 
  ├─┬ express@3.1.2 
  │ ├── buffer-crc32@0.2.13 
  │ ├── commander@0.6.1 
  │ ├─┬ connect@2.7.5 
  │ │ ├── buffer-crc32@0.1.1 
  │ │ ├── bytes@0.2.0 
  │ │ ├── formidable@1.0.11 
  │ │ ├── pause@0.0.1 
  │ │ └── qs@0.5.1 
  │ ├── cookie@0.0.5 
  │ ├── cookie-signature@1.0.0 
  │ ├─┬ debug@3.1.0 
  │ │ └── ms@2.0.0 
  │ ├── fresh@0.1.0 
  │ ├── methods@0.0.1 
  │ ├── mkdirp@0.3.5 
  │ ├── range-parser@0.0.4 
  │ └─┬ send@0.1.0 
  │   └── mime@1.2.6 
  ├── jade@0.28.2 
  ├─┬ nib@0.9.2 
  │ └── stylus@0.31.0 
  ├─┬ request@2.16.6 
  │ ├── aws-sign@0.2.0 
  │ ├── cookie-jar@0.2.0 
  │ ├── forever-agent@0.2.0 
  │ ├─┬ form-data@0.0.10 
  │ │ └─┬ combined-stream@0.0.7 
  │ │   └── delayed-stream@0.0.5 
  │ ├─┬ hawk@0.10.2 
  │ │ ├── boom@0.3.8 
  │ │ ├── cryptiles@0.1.3 
  │ │ ├── hoek@0.7.6 
  │ │ └── sntp@0.1.4 
  │ ├── json-stringify-safe@3.0.0 
  │ ├── mime@1.2.11 
  │ ├── node-uuid@1.4.8 
  │ ├── oauth-sign@0.2.0 
  │ ├── qs@0.5.6 
  │ └── tunnel-agent@0.2.0 
  ├─┬ socket.io@0.9.19 
  │ ├── base64id@0.1.0 
  │ ├── policyfile@0.0.4 
  │ ├── redis@0.7.3 
  │ └─┬ socket.io-client@0.9.16 
  │   ├─┬ active-x-obfuscator@0.0.1 
  │   │ └── zeparser@0.0.5 
  │   ├── uglify-js@1.2.5 
  │   ├─┬ ws@0.4.32 
  │   │ ├── commander@2.1.0 
  │   │ ├── nan@1.0.0 
  │   │ ├── options@0.0.6 
  │   │ └── tinycolor@0.0.1 
  │   └── xmlhttprequest@1.4.2 
  └─┬ stylus@0.32.1 
    └── cssom@0.2.5 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/arrowbreaker-sup/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 36% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 36% coverage ] ****** [2 done /0 queued / 1 running / 1 errors / 26% coverage ] ****** [2 done /0 queued / 1 running / 1 errors / 26% coverage ] ****** [3 done /0 queued / 1 running / 2 errors / 26% coverage ] ****** [3 done /0 queued / 1 running / 2 errors / 26% coverage ] ****** [4 done /0 queued / 1 running / 3 errors / 26% coverage ] ****** [4 done /0 queued / 1 running / 3 errors / 26% coverage ] ****** [5 done /0 queued / 1 running / 4 errors / 27% coverage ] ****** [5 done /0 queued / 1 running / 4 errors / 27% coverage ] ****** [6 done /1 queued / 1 running / 5 errors / 23% coverage ] ****** [6 done /0 queued / 2 running / 5 errors / 23% coverage ] ****** [6 done /0 queued / 2 running / 5 errors / 23% coverage ] ****** [7 done /0 queued / 1 running / 6 errors / 23% coverage ] ****** [8 done /1 queued / 1 running / 7 errors / 23% coverage ] ****** [8 done /0 queued / 2 running / 7 errors / 23% coverage ] ****** [8 done /0 queued / 2 running / 7 errors / 23% coverage ] ****** [9 done /1 queued / 2 running / 8 errors / 23% coverage ] ****** [9 done /0 queued / 3 running / 8 errors / 23% coverage ] ****** [9 done /0 queued / 3 running / 8 errors / 23% coverage ] ****** [10 done /2 queued / 3 running / 9 errors / 23% coverage ] ****** [10 done /1 queued / 4 running / 9 errors / 23% coverage ] ****** [10 done /0 queued / 5 running / 9 errors / 23% coverage ] ****** [10 done /0 queued / 5 running / 9 errors / 23% coverage ] ****** [11 done /1 queued / 5 running / 10 errors / 23% coverage ] ****** [11 done /0 queued / 6 running / 10 errors / 23% coverage ] ****** [11 done /0 queued / 6 running / 10 errors / 23% coverage ] ****** [12 done /1 queued / 6 running / 11 errors / 23% coverage ] ****** [12 done /0 queued / 7 running / 11 errors / 23% coverage ] ****** [12 done /0 queued / 7 running / 11 errors / 23% coverage ] ****** [13 done /1 queued / 7 running / 12 errors / 23% coverage ] ****** [13 done /0 queued / 8 running / 12 errors / 23% coverage ] ****** [13 done /0 queued / 8 running / 12 errors / 23% coverage ] ****** [14 done /0 queued / 8 running / 13 errors / 23% coverage ] ****** [14 done /0 queued / 8 running / 13 errors / 23% coverage ] ****** [15 done /1 queued / 8 running / 14 errors / 23% coverage ] ****** [15 done /0 queued / 9 running / 14 errors / 23% coverage ] ****** [15 done /0 queued / 9 running / 14 errors / 23% coverage ] ****** [16 done /1 queued / 9 running / 15 errors / 23% coverage ] ****** [16 done /0 queued / 10 running / 15 errors / 23% coverage ] ****** [16 done /0 queued / 10 running / 15 errors / 23% coverage ] ****** [17 done /1 queued / 10 running / 16 errors / 23% coverage ] ****** [17 done /0 queued / 11 running / 16 errors / 23% coverage ] ****** [17 done /0 queued / 11 running / 16 errors / 23% coverage ] ****** [18 done /1 queued / 11 running / 17 errors / 23% coverage ] ****** [18 done /0 queued / 12 running / 17 errors / 23% coverage ] ****** [18 done /0 queued / 12 running / 17 errors / 23% coverage ] ****** [19 done /1 queued / 12 running / 18 errors / 23% coverage ] ****** [19 done /0 queued / 13 running / 18 errors / 23% coverage ] ****** [19 done /0 queued / 13 running / 18 errors / 23% coverage ] ****** [20 done /2 queued / 13 running / 19 errors / 23% coverage ] ****** [20 done /1 queued / 14 running / 19 errors / 23% coverage ] ****** [20 done /0 queued / 15 running / 19 errors / 23% coverage ] ****** [20 done /0 queued / 15 running / 19 errors / 23% coverage ] ****** [21 done /1 queued / 15 running / 20 errors / 23% coverage ] ****** [21 done /0 queued / 16 running / 20 errors / 23% coverage ] ****** [21 done /0 queued / 16 running / 20 errors / 23% coverage ] ****** [22 done /1 queued / 16 running / 21 errors / 23% coverage ] ****** [22 done /1 queued / 16 running / 21 errors / 23% coverage ] ****** [23 done /2 queued / 16 running / 22 errors / 23% coverage ] ****** [23 done /2 queued / 16 running / 22 errors / 23% coverage ] ****** [24 done /3 queued / 16 running / 23 errors / 23% coverage ] ****** [24 done /3 queued / 16 running / 23 errors / 23% coverage ] ****** [25 done /4 queued / 16 running / 24 errors / 23% coverage ] ****** [25 done /4 queued / 16 running / 24 errors / 23% coverage ] ****** [26 done /5 queued / 16 running / 25 errors / 23% coverage ] ****** [26 done /5 queued / 16 running / 25 errors / 23% coverage ] ****** [27 done /8 queued / 16 running / 26 errors / 23% coverage ] ****** [27 done /8 queued / 16 running / 26 errors / 23% coverage ] ****** [28 done /9 queued / 16 running / 27 errors / 23% coverage ] ****** [28 done /9 queued / 16 running / 27 errors / 23% coverage ] ****** [29 done /10 queued / 16 running / 28 errors / 23% coverage ] ****** [29 done /10 queued / 16 running / 28 errors / 23% coverage ] ****** [30 done /10 queued / 16 running / 29 errors / 23% coverage ] ****** [30 done /10 queued / 16 running / 29 errors / 23% coverage ] ****** [31 done /11 queued / 16 running / 30 errors / 23% coverage ] ****** [31 done /11 queued / 16 running / 30 errors / 23% coverage ] ****** [32 done /12 queued / 16 running / 31 errors / 23% coverage ] ****** [32 done /12 queued / 16 running / 31 errors / 23% coverage ] ****** [33 done /14 queued / 16 running / 32 errors / 23% coverage ] ****** [33 done /14 queued / 16 running / 32 errors / 23% coverage ] ****** [34 done /15 queued / 16 running / 33 errors / 23% coverage ] ****** [34 done /15 queued / 16 running / 33 errors / 23% coverage ] ****** [35 done /17 queued / 16 running / 34 errors / 23% coverage ] ****** [35 done /17 queued / 16 running / 34 errors / 23% coverage ] ****** [36 done /18 queued / 16 running / 35 errors / 23% coverage ] ****** [36 done /18 queued / 16 running / 35 errors / 23% coverage ] ****** [37 done /19 queued / 16 running / 36 errors / 23% coverage ] ****** [37 done /19 queued / 16 running / 36 errors / 23% coverage ] ****** [38 done /20 queued / 16 running / 37 errors / 23% coverage ] ****** [38 done /20 queued / 16 running / 37 errors / 23% coverage ] ****** [39 done /21 queued / 16 running / 38 errors / 23% coverage ] ****** [39 done /21 queued / 16 running / 38 errors / 23% coverage ] ****** [40 done /22 queued / 16 running / 39 errors / 23% coverage ] ****** [40 done /22 queued / 16 running / 39 errors / 23% coverage ] ****** [41 done /24 queued / 16 running / 40 errors / 23% coverage ] ****** [41 done /24 queued / 16 running / 40 errors / 23% coverage ] ****** [42 done /25 queued / 16 running / 41 errors / 23% coverage ] ****** [42 done /25 queued / 16 running / 41 errors / 23% coverage ] ****** [43 done /25 queued / 16 running / 42 errors / 23% coverage ] ****** [43 done /25 queued / 16 running / 42 errors / 23% coverage ] ****** [44 done /28 queued / 16 running / 43 errors / 23% coverage ] ****** [44 done /28 queued / 16 running / 43 errors / 23% coverage ] ****** [45 done /29 queued / 16 running / 44 errors / 23% coverage ] ****** [45 done /29 queued / 16 running / 44 errors / 23% coverage ] ****** [46 done /29 queued / 16 running / 45 errors / 23% coverage ] ****** [46 done /29 queued / 16 running / 45 errors / 23% coverage ] ****** [47 done /29 queued / 16 running / 46 errors / 23% coverage ] ****** [47 done /29 queued / 16 running / 46 errors / 23% coverage ] ****** [48 done /31 queued / 16 running / 47 errors / 23% coverage ] ****** [48 done /31 queued / 16 running / 47 errors / 23% coverage ] ****** [49 done /32 queued / 16 running / 48 errors / 23% coverage ] ****** [49 done /32 queued / 16 running / 48 errors / 23% coverage ] ****** [50 done /34 queued / 16 running / 49 errors / 23% coverage ] ****** [50 done /34 queued / 16 running / 49 errors / 23% coverage ] ****** [51 done /37 queued / 16 running / 50 errors / 23% coverage ] ****** [51 done /37 queued / 16 running / 50 errors / 23% coverage ] ****** [52 done /38 queued / 16 running / 51 errors / 23% coverage ] ****** [52 done /38 queued / 16 running / 51 errors / 23% coverage ] ****** [53 done /39 queued / 16 running / 52 errors / 23% coverage ] ****** [53 done /39 queued / 16 running / 52 errors / 23% coverage ] ****** [54 done /40 queued / 16 running / 53 errors / 23% coverage ] ****** [54 done /40 queued / 16 running / 53 errors / 23% coverage ] ****** [55 done /41 queued / 16 running / 54 errors / 23% coverage ] ****** [55 done /41 queued / 16 running / 54 errors / 23% coverage ] ****** [56 done /41 queued / 16 running / 55 errors / 23% coverage ] ****** [56 done /41 queued / 16 running / 55 errors / 23% coverage ] ****** [57 done /42 queued / 16 running / 56 errors / 23% coverage ] ****** [57 done /42 queued / 16 running / 56 errors / 23% coverage ] ****** [58 done /43 queued / 16 running / 57 errors / 23% coverage ] ****** [58 done /43 queued / 16 running / 57 errors / 23% coverage ] ****** [59 done /44 queued / 16 running / 58 errors / 23% coverage ] ****** [59 done /44 queued / 16 running / 58 errors / 23% coverage ] ****** [60 done /44 queued / 16 running / 59 errors / 23% coverage ] ****** [60 done /44 queued / 16 running / 59 errors / 23% coverage ] ****** [61 done /44 queued / 16 running / 60 errors / 23% coverage ] ****** [61 done /44 queued / 16 running / 60 errors / 23% coverage ] ****** [62 done /46 queued / 16 running / 61 errors / 23% coverage ] ****** [62 done /46 queued / 16 running / 61 errors / 23% coverage ] ****** [63 done /46 queued / 16 running / 62 errors / 23% coverage ] ****** [63 done /46 queued / 16 running / 62 errors / 23% coverage ] ****** [64 done /46 queued / 16 running / 63 errors / 23% coverage ] ****** [64 done /46 queued / 16 running / 63 errors / 23% coverage ] ****** [65 done /47 queued / 16 running / 64 errors / 23% coverage ] ****** [65 done /47 queued / 16 running / 64 errors / 23% coverage ] ****** [66 done /47 queued / 16 running / 65 errors / 23% coverage ] ****** [66 done /47 queued / 16 running / 65 errors / 23% coverage ] ****** [67 done /48 queued / 16 running / 66 errors / 23% coverage ] ****** [67 done /48 queued / 16 running / 66 errors / 23% coverage ] ****** [68 done /49 queued / 16 running / 67 errors / 23% coverage ] ****** [68 done /49 queued / 16 running / 67 errors / 23% coverage ] ****** [69 done /50 queued / 16 running / 68 errors / 23% coverage ] ****** [69 done /50 queued / 16 running / 68 errors / 23% coverage ] ****** [70 done /50 queued / 16 running / 69 errors / 23% coverage ] ****** [70 done /50 queued / 16 running / 69 errors / 23% coverage ] ****** [71 done /50 queued / 16 running / 70 errors / 23% coverage ] ****** [71 done /50 queued / 16 running / 70 errors / 23% coverage ] ****** [72 done /51 queued / 16 running / 71 errors / 23% coverage ] ****** [72 done /51 queued / 16 running / 71 errors / 23% coverage ] ****** [73 done /52 queued / 16 running / 72 errors / 23% coverage ] ****** [73 done /52 queued / 16 running / 72 errors / 23% coverage ] ****** [74 done /53 queued / 16 running / 73 errors / 23% coverage ] ****** [74 done /53 queued / 16 running / 73 errors / 23% coverage ] ****** [75 done /54 queued / 16 running / 74 errors / 23% coverage ] ****** [75 done /54 queued / 16 running / 74 errors / 23% coverage ] ****** [76 done /55 queued / 16 running / 75 errors / 23% coverage ] ****** [76 done /55 queued / 16 running / 75 errors / 23% coverage ] ****** [77 done /56 queued / 16 running / 76 errors / 23% coverage ] ****** [77 done /56 queued / 16 running / 76 errors / 23% coverage ] ****** [78 done /60 queued / 16 running / 77 errors / 23% coverage ] ****** [78 done /60 queued / 16 running / 77 errors / 23% coverage ] ****** [79 done /60 queued / 16 running / 78 errors / 23% coverage ] ****** [79 done /60 queued / 16 running / 78 errors / 23% coverage ] ****** [80 done /62 queued / 16 running / 79 errors / 23% coverage ] ****** [80 done /62 queued / 16 running / 79 errors / 23% coverage ] ****** [81 done /63 queued / 16 running / 80 errors / 23% coverage ] ****** [81 done /63 queued / 16 running / 80 errors / 23% coverage ] ****** [82 done /65 queued / 16 running / 81 errors / 23% coverage ] ****** [82 done /65 queued / 16 running / 81 errors / 23% coverage ] ****** [83 done /66 queued / 16 running / 82 errors / 23% coverage ] ****** [83 done /66 queued / 16 running / 82 errors / 23% coverage ] ****** [84 done /67 queued / 16 running / 83 errors / 23% coverage ] ****** [84 done /67 queued / 16 running / 83 errors / 23% coverage ] ****** [85 done /68 queued / 16 running / 84 errors / 23% coverage ] ****** [85 done /68 queued / 16 running / 84 errors / 23% coverage ] ****** [86 done /69 queued / 16 running / 85 errors / 23% coverage ] ****** [86 done /69 queued / 16 running / 85 errors / 23% coverage ] ****** [87 done /70 queued / 16 running / 86 errors / 23% coverage ] ****** [87 done /70 queued / 16 running / 86 errors / 23% coverage ] ****** [88 done /71 queued / 16 running / 87 errors / 23% coverage ] ****** [88 done /71 queued / 16 running / 87 errors / 23% coverage ] ****** [89 done /73 queued / 16 running / 88 errors / 23% coverage ] ****** [89 done /73 queued / 16 running / 88 errors / 23% coverage ] ****** [90 done /75 queued / 16 running / 89 errors / 23% coverage ] ****** [90 done /75 queued / 16 running / 89 errors / 23% coverage ] ****** [91 done /76 queued / 16 running / 90 errors / 23% coverage ] ****** [91 done /76 queued / 16 running / 90 errors / 23% coverage ] ****** [92 done /77 queued / 16 running / 91 errors / 23% coverage ] ****** [92 done /77 queued / 16 running / 91 errors / 23% coverage ] ****** [93 done /77 queued / 16 running / 92 errors / 23% coverage ] ****** [93 done /77 queued / 16 running / 92 errors / 23% coverage ] ****** [94 done /78 queued / 16 running / 93 errors / 23% coverage ] ****** [94 done /78 queued / 16 running / 93 errors / 23% coverage ] ****** [95 done /79 queued / 16 running / 94 errors / 23% coverage ] ****** [95 done /79 queued / 16 running / 94 errors / 23% coverage ] ****** [96 done /79 queued / 16 running / 95 errors / 23% coverage ] ****** [96 done /79 queued / 16 running / 95 errors / 23% coverage ] ****** [97 done /80 queued / 16 running / 96 errors / 23% coverage ] ****** [97 done /80 queued / 16 running / 96 errors / 23% coverage ] ****** [98 done /80 queued / 16 running / 97 errors / 23% coverage ] ****** [98 done /80 queued / 16 running / 97 errors / 23% coverage ] ****** [99 done /81 queued / 16 running / 98 errors / 23% coverage ] ****** [99 done /81 queued / 16 running / 98 errors / 23% coverage ] ****** [100 done /81 queued / 16 running / 99 errors / 23% coverage ] ****** [100 done /81 queued / 16 running / 99 errors / 23% coverage ] ****** [101 done /82 queued / 16 running / 100 errors / 23% coverage ] ****** [101 done /82 queued / 16 running / 100 errors / 23% coverage ] ****** [102 done /82 queued / 16 running / 101 errors / 23% coverage ] ****** [102 done /82 queued / 16 running / 101 errors / 23% coverage ] ****** [103 done /84 queued / 16 running / 102 errors / 23% coverage ] ****** [103 done /84 queued / 16 running / 102 errors / 23% coverage ] ****** [104 done /85 queued / 16 running / 103 errors / 23% coverage ] ****** [104 done /85 queued / 16 running / 103 errors / 23% coverage ] ****** [105 done /86 queued / 16 running / 104 errors / 23% coverage ] ****** [105 done /86 queued / 16 running / 104 errors / 23% coverage ] ****** [106 done /86 queued / 16 running / 105 errors / 23% coverage ] ****** [106 done /86 queued / 16 running / 105 errors / 23% coverage ] ****** [107 done /87 queued / 16 running / 106 errors / 23% coverage ] ****** [107 done /87 queued / 16 running / 106 errors / 23% coverage ] ****** [108 done /88 queued / 16 running / 107 errors / 23% coverage ] ****** [108 done /88 queued / 16 running / 107 errors / 23% coverage ] ****** [109 done /92 queued / 16 running / 108 errors / 23% coverage ] ****** [109 done /92 queued / 16 running / 108 errors / 23% coverage ] ****** [110 done /93 queued / 16 running / 109 errors / 23% coverage ] ****** [110 done /93 queued / 16 running / 109 errors / 23% coverage ] ****** [111 done /94 queued / 16 running / 110 errors / 23% coverage ] ****** [111 done /94 queued / 16 running / 110 errors / 23% coverage ] ****** [112 done /94 queued / 16 running / 111 errors / 23% coverage ] ****** [112 done /94 queued / 16 running / 111 errors / 23% coverage ] ****** [113 done /95 queued / 16 running / 112 errors / 23% coverage ] ****** [113 done /95 queued / 16 running / 112 errors / 23% coverage ] ****** [114 done /96 queued / 16 running / 113 errors / 23% coverage ] ****** [114 done /96 queued / 16 running / 113 errors / 23% coverage ] ****** [115 done /97 queued / 16 running / 114 errors / 23% coverage ] ****** [115 done /97 queued / 16 running / 114 errors / 23% coverage ] ****** [116 done /100 queued / 16 running / 115 errors / 23% coverage ] ****** [116 done /100 queued / 16 running / 115 errors / 23% coverage ] ****** [117 done /101 queued / 16 running / 116 errors / 23% coverage ] ****** [117 done /101 queued / 16 running / 116 errors / 23% coverage ] ****** [118 done /102 queued / 16 running / 117 errors / 23% coverage ] ****** [118 done /102 queued / 16 running / 117 errors / 23% coverage ] ****** [119 done /102 queued / 16 running / 118 errors / 23% coverage ] ****** [119 done /102 queued / 16 running / 118 errors / 23% coverage ] ****** [120 done /104 queued / 16 running / 119 errors / 23% coverage ] ****** [120 done /104 queued / 16 running / 119 errors / 23% coverage ] ****** [121 done /106 queued / 16 running / 120 errors / 23% coverage ] ****** [121 done /106 queued / 16 running / 120 errors / 23% coverage ] ****** [122 done /107 queued / 16 running / 121 errors / 23% coverage ] ****** [122 done /107 queued / 16 running / 121 errors / 23% coverage ] ****** [123 done /108 queued / 16 running / 122 errors / 23% coverage ] ****** [123 done /108 queued / 16 running / 122 errors / 23% coverage ] ****** [124 done /110 queued / 16 running / 123 errors / 23% coverage ] ****** [124 done /110 queued / 16 running / 123 errors / 23% coverage ] ****** [125 done /111 queued / 16 running / 124 errors / 23% coverage ] ****** [125 done /111 queued / 16 running / 124 errors / 23% coverage ] ****** [126 done /112 queued / 16 running / 125 errors / 23% coverage ] ****** [126 done /112 queued / 16 running / 125 errors / 23% coverage ] ****** [127 done /112 queued / 16 running / 126 errors / 23% coverage ] ****** [127 done /112 queued / 16 running / 126 errors / 23% coverage ] ****** [128 done /114 queued / 16 running / 127 errors / 23% coverage ] ****** [128 done /114 queued / 16 running / 127 errors / 23% coverage ] ****** [129 done /115 queued / 16 running / 128 errors / 23% coverage ] ****** [129 done /115 queued / 16 running / 128 errors / 23% coverage ] ****** [130 done /116 queued / 16 running / 129 errors / 23% coverage ] ****** [130 done /116 queued / 16 running / 129 errors / 23% coverage ] ****** [131 done /116 queued / 16 running / 130 errors / 23% coverage ] ****** [131 done /116 queued / 16 running / 130 errors / 23% coverage ] ****** [132 done /116 queued / 16 running / 131 errors / 23% coverage ] ****** [132 done /116 queued / 16 running / 131 errors / 23% coverage ] ****** [133 done /117 queued / 16 running / 132 errors / 23% coverage ] ****** [133 done /117 queued / 16 running / 132 errors / 23% coverage ] ****** [134 done /117 queued / 16 running / 133 errors / 23% coverage ] ****** [134 done /117 queued / 16 running / 133 errors / 23% coverage ] ****** [135 done /117 queued / 16 running / 134 errors / 23% coverage ] ****** [135 done /117 queued / 16 running / 134 errors / 23% coverage ] ****** [136 done /118 queued / 16 running / 135 errors / 23% coverage ] ****** [136 done /118 queued / 16 running / 135 errors / 23% coverage ] ****** [137 done /118 queued / 16 running / 136 errors / 23% coverage ] ****** [137 done /118 queued / 16 running / 136 errors / 23% coverage ] ****** [138 done /118 queued / 16 running / 137 errors / 23% coverage ] ****** [138 done /118 queued / 16 running / 137 errors / 23% coverage ] ****** [139 done /119 queued / 16 running / 138 errors / 23% coverage ] ****** [139 done /119 queued / 16 running / 138 errors / 23% coverage ] ****** [140 done /120 queued / 16 running / 139 errors / 23% coverage ] ****** [140 done /120 queued / 16 running / 139 errors / 23% coverage ] ****** [141 done /120 queued / 16 running / 140 errors / 23% coverage ] ****** [141 done /120 queued / 16 running / 140 errors / 23% coverage ] ****** [142 done /121 queued / 16 running / 141 errors / 23% coverage ] ****** [142 done /121 queued / 16 running / 141 errors / 23% coverage ] ****** [143 done /124 queued / 16 running / 142 errors / 23% coverage ] ****** [143 done /124 queued / 16 running / 142 errors / 23% coverage ] ****** [144 done /124 queued / 16 running / 143 errors / 23% coverage ] ****** [144 done /124 queued / 16 running / 143 errors / 23% coverage ] ****** [145 done /128 queued / 16 running / 144 errors / 23% coverage ] ****** [145 done /128 queued / 16 running / 144 errors / 23% coverage ] ****** [146 done /129 queued / 16 running / 145 errors / 23% coverage ] ****** [146 done /129 queued / 16 running / 145 errors / 23% coverage ] ****** [147 done /130 queued / 16 running / 146 errors / 23% coverage ] ****** [147 done /130 queued / 16 running / 146 errors / 23% coverage ] ****** [148 done /131 queued / 16 running / 147 errors / 23% coverage ] ****** [148 done /131 queued / 16 running / 147 errors / 23% coverage ] ****** [149 done /132 queued / 16 running / 148 errors / 23% coverage ] ****** [149 done /132 queued / 16 running / 148 errors / 23% coverage ] ****** [150 done /133 queued / 16 running / 149 errors / 23% coverage ] ****** [150 done /133 queued / 16 running / 149 errors / 23% coverage ] ****** [151 done /136 queued / 16 running / 150 errors / 23% coverage ] ****** [151 done /136 queued / 16 running / 150 errors / 23% coverage ] ****** [152 done /137 queued / 16 running / 151 errors / 23% coverage ] ****** [152 done /137 queued / 16 running / 151 errors / 23% coverage ] ****** [153 done /138 queued / 16 running / 152 errors / 23% coverage ] ****** [153 done /138 queued / 16 running / 152 errors / 23% coverage ] ****** [154 done /139 queued / 16 running / 153 errors / 23% coverage ] ****** [154 done /139 queued / 16 running / 153 errors / 23% coverage ] ****** [155 done /140 queued / 16 running / 154 errors / 23% coverage ] ****** [155 done /140 queued / 16 running / 154 errors / 23% coverage ] ****** [156 done /141 queued / 16 running / 155 errors / 23% coverage ] ****** [156 done /141 queued / 16 running / 155 errors / 23% coverage ] ****** [157 done /143 queued / 16 running / 156 errors / 23% coverage ] ****** [157 done /143 queued / 16 running / 156 errors / 23% coverage ] ****** [158 done /143 queued / 16 running / 157 errors / 23% coverage ] ****** [158 done /143 queued / 16 running / 157 errors / 23% coverage ] ****** [159 done /147 queued / 16 running / 158 errors / 23% coverage ] ****** [159 done /147 queued / 16 running / 158 errors / 23% coverage ] ****** [160 done /147 queued / 16 running / 159 errors / 23% coverage ] ****** [160 done /147 queued / 16 running / 159 errors / 23% coverage ] ****** [161 done /148 queued / 16 running / 160 errors / 23% coverage ] ****** [161 done /148 queued / 16 running / 160 errors / 23% coverage ] ****** [162 done /149 queued / 16 running / 161 errors / 23% coverage ] ****** [162 done /149 queued / 16 running / 161 errors / 23% coverage ] ****** [163 done /150 queued / 16 running / 162 errors / 23% coverage ] ****** [163 done /150 queued / 16 running / 162 errors / 23% coverage ] ****** [164 done /151 queued / 16 running / 163 errors / 23% coverage ] ****** [164 done /151 queued / 16 running / 163 errors / 23% coverage ] ****** [165 done /151 queued / 16 running / 164 errors / 23% coverage ] ****** [165 done /151 queued / 16 running / 164 errors / 23% coverage ] ****** [166 done /151 queued / 16 running / 165 errors / 23% coverage ] ****** [166 done /151 queued / 16 running / 165 errors / 23% coverage ] ****** [167 done /151 queued / 16 running / 166 errors / 23% coverage ] ****** [167 done /151 queued / 16 running / 166 errors / 23% coverage ] ****** [168 done /152 queued / 16 running / 167 errors / 23% coverage ] ****** [168 done /152 queued / 16 running / 167 errors / 23% coverage ] ****** [169 done /152 queued / 16 running / 168 errors / 23% coverage ] ****** [169 done /152 queued / 16 running / 168 errors / 23% coverage ] ****** [170 done /153 queued / 16 running / 169 errors / 23% coverage ] ****** [170 done /153 queued / 16 running / 169 errors / 23% coverage ] ****** [171 done /153 queued / 16 running / 170 errors / 23% coverage ] ****** [171 done /153 queued / 16 running / 170 errors / 23% coverage ] ****** [172 done /154 queued / 16 running / 171 errors / 23% coverage ] ****** [172 done /154 queued / 16 running / 171 errors / 23% coverage ] ****** [173 done /156 queued / 16 running / 172 errors / 23% coverage ] ****** [173 done /156 queued / 16 running / 172 errors / 23% coverage ] ****** [174 done /156 queued / 16 running / 173 errors / 23% coverage ] ****** [174 done /156 queued / 16 running / 173 errors / 23% coverage ] ****** [175 done /157 queued / 16 running / 174 errors / 23% coverage ] ****** [175 done /157 queued / 16 running / 174 errors / 23% coverage ] ****** [176 done /157 queued / 16 running / 175 errors / 23% coverage ] ****** [176 done /157 queued / 16 running / 175 errors / 23% coverage ] ****** [177 done /158 queued / 16 running / 176 errors / 23% coverage ] ****** [177 done /158 queued / 16 running / 176 errors / 23% coverage ] ****** [178 done /159 queued / 16 running / 177 errors / 23% coverage ] ****** [178 done /159 queued / 16 running / 177 errors / 23% coverage ] ****** [179 done /161 queued / 16 running / 178 errors / 23% coverage ] ****** [179 done /161 queued / 16 running / 178 errors / 23% coverage ] ****** [180 done /163 queued / 16 running / 179 errors / 23% coverage ] ****** [180 done /163 queued / 16 running / 179 errors / 23% coverage ] ****** [181 done /164 queued / 16 running / 180 errors / 23% coverage ] ****** [181 done /164 queued / 16 running / 180 errors / 23% coverage ] ****** [182 done /164 queued / 16 running / 181 errors / 23% coverage ] ****** [182 done /164 queued / 16 running / 181 errors / 23% coverage ] ****** [183 done /167 queued / 16 running / 182 errors / 23% coverage ] ****** [183 done /167 queued / 16 running / 182 errors / 23% coverage ] ****** [184 done /168 queued / 16 running / 183 errors / 23% coverage ] ****** [184 done /168 queued / 16 running / 183 errors / 23% coverage ] ****** [185 done /169 queued / 16 running / 184 errors / 23% coverage ] ****** [185 done /169 queued / 16 running / 184 errors / 23% coverage ] ****** [186 done /170 queued / 16 running / 185 errors / 23% coverage ] ****** [186 done /170 queued / 16 running / 185 errors / 23% coverage ] ****** [187 done /171 queued / 16 running / 186 errors / 23% coverage ] ****** [187 done /171 queued / 16 running / 186 errors / 23% coverage ] ****** [188 done /173 queued / 16 running / 187 errors / 23% coverage ] ****** [188 done /173 queued / 16 running / 187 errors / 23% coverage ] ****** [189 done /176 queued / 16 running / 188 errors / 23% coverage ] ****** [189 done /176 queued / 16 running / 188 errors / 23% coverage ] ****** [190 done /177 queued / 16 running / 189 errors / 23% coverage ] ****** [190 done /177 queued / 16 running / 189 errors / 23% coverage ] ****** [191 done /177 queued / 16 running / 190 errors / 23% coverage ] ****** [191 done /177 queued / 16 running / 190 errors / 23% coverage ] ****** [192 done /178 queued / 16 running / 191 errors / 23% coverage ] ****** [192 done /178 queued / 16 running / 191 errors / 23% coverage ] ****** [193 done /178 queued / 16 running / 192 errors / 23% coverage ] ****** [193 done /178 queued / 16 running / 192 errors / 23% coverage ] ****** [194 done /179 queued / 16 running / 193 errors / 23% coverage ] ****** [194 done /179 queued / 16 running / 193 errors / 23% coverage ] ****** [195 done /179 queued / 16 running / 194 errors / 23% coverage ] ****** [195 done /179 queued / 16 running / 194 errors / 23% coverage ] ****** [196 done /180 queued / 16 running / 195 errors / 23% coverage ] ****** [196 done /180 queued / 16 running / 195 errors / 23% coverage ] ****** [197 done /182 queued / 16 running / 196 errors / 23% coverage ] ****** [197 done /182 queued / 16 running / 196 errors / 23% coverage ] ****** [198 done /184 queued / 16 running / 197 errors / 23% coverage ] ****** [198 done /184 queued / 16 running / 197 errors / 23% coverage ] ****** [199 done /185 queued / 16 running / 198 errors / 23% coverage ] ****** [199 done /185 queued / 16 running / 198 errors / 23% coverage ] ****** [200 done /186 queued / 16 running / 199 errors / 23% coverage ] ****** [200 done /186 queued / 16 running / 199 errors / 23% coverage ] ****** [201 done /187 queued / 16 running / 200 errors / 23% coverage ] ****** [201 done /187 queued / 16 running / 200 errors / 23% coverage ] ****** [202 done /191 queued / 16 running / 201 errors / 23% coverage ] ****** [202 done /191 queued / 16 running / 201 errors / 23% coverage ] ****** [203 done /192 queued / 16 running / 202 errors / 23% coverage ] ****** [203 done /192 queued / 16 running / 202 errors / 23% coverage ] ****** [204 done /193 queued / 16 running / 203 errors / 23% coverage ] ****** [204 done /193 queued / 16 running / 203 errors / 23% coverage ] ****** [205 done /194 queued / 16 running / 204 errors / 23% coverage ] ****** [205 done /194 queued / 16 running / 204 errors / 23% coverage ] ****** [206 done /194 queued / 16 running / 205 errors / 23% coverage ] ****** [206 done /194 queued / 16 running / 205 errors / 23% coverage ] ****** [207 done /195 queued / 16 running / 206 errors / 23% coverage ] ****** [207 done /195 queued / 16 running / 206 errors / 23% coverage ] ****** [208 done /195 queued / 16 running / 207 errors / 23% coverage ] ****** [208 done /195 queued / 16 running / 207 errors / 23% coverage ] ****** [209 done /197 queued / 16 running / 208 errors / 23% coverage ] ****** [209 done /197 queued / 16 running / 208 errors / 23% coverage ] ****** [210 done /197 queued / 16 running / 209 errors / 23% coverage ] ****** [210 done /197 queued / 16 running / 209 errors / 23% coverage ] ****** [211 done /199 queued / 16 running / 210 errors / 23% coverage ] ****** [211 done /199 queued / 16 running / 210 errors / 23% coverage ] ****** [212 done /200 queued / 16 running / 211 errors / 23% coverage ] ****** [212 done /200 queued / 16 running / 211 errors / 23% coverage ] ****** [213 done /202 queued / 16 running / 212 errors / 23% coverage ] ****** [213 done /202 queued / 16 running / 212 errors / 23% coverage ] ****** [214 done /204 queued / 16 running / 213 errors / 23% coverage ] ****** [214 done /204 queued / 16 running / 213 errors / 23% coverage ] ****** [215 done /204 queued / 16 running / 214 errors / 23% coverage ] ****** [215 done /204 queued / 16 running / 214 errors / 23% coverage ] ****** [216 done /205 queued / 16 running / 215 errors / 23% coverage ] ****** [216 done /205 queued / 16 running / 215 errors / 23% coverage ] ****** [217 done /206 queued / 16 running / 216 errors / 23% coverage ] ****** [217 done /206 queued / 16 running / 216 errors / 23% coverage ] ****** [218 done /207 queued / 16 running / 217 errors / 23% coverage ] ****** [218 done /207 queued / 16 running / 217 errors / 23% coverage ] ****** [219 done /208 queued / 16 running / 218 errors / 23% coverage ] ****** [219 done /208 queued / 16 running / 218 errors / 23% coverage ] ****** [220 done /208 queued / 16 running / 219 errors / 23% coverage ] ****** [220 done /208 queued / 16 running / 219 errors / 23% coverage ] ****** [221 done /210 queued / 16 running / 220 errors / 23% coverage ] ****** [221 done /210 queued / 16 running / 220 errors / 23% coverage ] ****** [222 done /210 queued / 16 running / 221 errors / 23% coverage ] ****** [222 done /210 queued / 16 running / 221 errors / 23% coverage ] ****** [223 done /211 queued / 16 running / 222 errors / 23% coverage ] ****** [223 done /211 queued / 16 running / 222 errors / 23% coverage ] ****** [224 done /211 queued / 16 running / 223 errors / 23% coverage ] ****** [224 done /211 queued / 16 running / 223 errors / 23% coverage ] ****** [225 done /212 queued / 16 running / 224 errors / 23% coverage ] ****** [225 done /212 queued / 16 running / 224 errors / 23% coverage ] ****** [226 done /212 queued / 16 running / 225 errors / 23% coverage ] ****** [226 done /212 queued / 16 running / 225 errors / 23% coverage ] ****** [227 done /212 queued / 16 running / 226 errors / 23% coverage ] ****** [227 done /212 queued / 16 running / 226 errors / 23% coverage ] ****** [228 done /213 queued / 16 running / 227 errors / 23% coverage ] ****** [228 done /213 queued / 16 running / 227 errors / 23% coverage ] ****** [229 done /215 queued / 16 running / 228 errors / 23% coverage ] ****** [229 done /215 queued / 16 running / 228 errors / 23% coverage ] ****** [230 done /216 queued / 16 running / 229 errors / 23% coverage ] ****** [230 done /216 queued / 16 running / 229 errors / 23% coverage ] ****** [231 done /216 queued / 16 running / 230 errors / 23% coverage ] ****** [231 done /216 queued / 16 running / 230 errors / 23% coverage ] ****** [232 done /219 queued / 16 running / 231 errors / 23% coverage ] ****** [232 done /219 queued / 16 running / 231 errors / 23% coverage ] ****** [233 done /220 queued / 16 running / 232 errors / 23% coverage ] ****** [233 done /220 queued / 16 running / 232 errors / 23% coverage ] ****** [234 done /224 queued / 16 running / 233 errors / 23% coverage ] ****** [234 done /224 queued / 16 running / 233 errors / 23% coverage ] ****** [235 done /225 queued / 16 running / 234 errors / 23% coverage ] ****** [235 done /225 queued / 16 running / 234 errors / 23% coverage ] ****** [236 done /226 queued / 16 running / 235 errors / 23% coverage ] ****** [236 done /226 queued / 16 running / 235 errors / 23% coverage ] ****** [237 done /227 queued / 16 running / 236 errors / 23% coverage ] ****** [237 done /227 queued / 16 running / 236 errors / 23% coverage ] ****** [238 done /228 queued / 16 running / 237 errors / 23% coverage ] ****** [238 done /228 queued / 16 running / 237 errors / 23% coverage ] ****** [239 done /228 queued / 16 running / 238 errors / 23% coverage ] ****** [239 done /228 queued / 16 running / 238 errors / 23% coverage ] ****** [240 done /232 queued / 16 running / 239 errors / 23% coverage ] ****** [240 done /232 queued / 16 running / 239 errors / 23% coverage ] ****** [241 done /233 queued / 16 running / 240 errors / 23% coverage ] ****** [241 done /233 queued / 16 running / 240 errors / 23% coverage ] ****** [242 done /237 queued / 16 running / 241 errors / 23% coverage ] ****** [242 done /237 queued / 16 running / 241 errors / 23% coverage ] ****** [243 done /238 queued / 16 running / 242 errors / 23% coverage ] ****** [243 done /238 queued / 16 running / 242 errors / 23% coverage ] ****** [244 done /239 queued / 16 running / 243 errors / 23% coverage ] ****** [244 done /239 queued / 16 running / 243 errors / 23% coverage ] ****** [245 done /240 queued / 16 running / 244 errors / 23% coverage ] ****** [245 done /240 queued / 16 running / 244 errors / 23% coverage ] ****** [246 done /242 queued / 16 running / 245 errors / 23% coverage ] ****** [246 done /242 queued / 16 running / 245 errors / 23% coverage ] ****** [247 done /243 queued / 16 running / 246 errors / 23% coverage ] ****** [247 done /243 queued / 16 running / 246 errors / 23% coverage ] ****** [248 done /243 queued / 16 running / 247 errors / 23% coverage ] ****** [248 done /243 queued / 16 running / 247 errors / 23% coverage ] ****** [249 done /243 queued / 16 running / 248 errors / 23% coverage ] ****** [249 done /243 queued / 16 running / 248 errors / 23% coverage ] ****** [250 done /243 queued / 16 running / 249 errors / 23% coverage ] ****** [250 done /243 queued / 16 running / 249 errors / 23% coverage ] ****** [251 done /244 queued / 16 running / 250 errors / 23% coverage ] ****** [251 done /244 queued / 16 running / 250 errors / 23% coverage ] ****** [252 done /244 queued / 16 running / 251 errors / 23% coverage ] ****** [252 done /244 queued / 16 running / 251 errors / 23% coverage ] ****** [253 done /245 queued / 16 running / 252 errors / 23% coverage ] ****** [253 done /245 queued / 16 running / 252 errors / 23% coverage ] ****** [254 done /246 queued / 16 running / 253 errors / 23% coverage ] ****** [254 done /246 queued / 16 running / 253 errors / 23% coverage ] ****** [255 done /247 queued / 16 running / 254 errors / 23% coverage ] ****** [255 done /247 queued / 16 running / 254 errors / 23% coverage ] ****** [256 done /248 queued / 16 running / 255 errors / 23% coverage ] ****** [256 done /248 queued / 16 running / 255 errors / 23% coverage ] ****** [257 done /248 queued / 16 running / 256 errors / 23% coverage ] ****** [257 done /248 queued / 16 running / 256 errors / 23% coverage ] ****** [258 done /248 queued / 16 running / 257 errors / 23% coverage ] ****** [258 done /248 queued / 16 running / 257 errors / 23% coverage ] ****** [259 done /249 queued / 16 running / 258 errors / 23% coverage ] ****** [259 done /249 queued / 16 running / 258 errors / 23% coverage ] ****** [260 done /249 queued / 16 running / 259 errors / 23% coverage ] ****** [260 done /249 queued / 16 running / 259 errors / 23% coverage ] ****** [261 done /249 queued / 16 running / 260 errors / 23% coverage ] ****** [261 done /249 queued / 16 running / 260 errors / 23% coverage ] ****** [262 done /249 queued / 16 running / 261 errors / 23% coverage ] ****** [262 done /249 queued / 16 running / 261 errors / 23% coverage ] ****** [263 done /249 queued / 16 running / 262 errors / 23% coverage ] ****** [263 done /249 queued / 16 running / 262 errors / 23% coverage ] ****** [264 done /250 queued / 16 running / 263 errors / 23% coverage ] ****** [264 done /250 queued / 16 running / 263 errors / 23% coverage ] ****** [265 done /250 queued / 16 running / 264 errors / 23% coverage ] ****** [265 done /250 queued / 16 running / 264 errors / 23% coverage ] ****** [266 done /251 queued / 16 running / 265 errors / 23% coverage ] ****** [266 done /251 queued / 16 running / 265 errors / 23% coverage ] ****** [267 done /253 queued / 16 running / 266 errors / 23% coverage ] ****** [267 done /253 queued / 16 running / 266 errors / 23% coverage ] ****** [268 done /254 queued / 16 running / 267 errors / 23% coverage ] ****** [268 done /254 queued / 16 running / 267 errors / 23% coverage ] ****** [269 done /258 queued / 16 running / 268 errors / 23% coverage ] ****** [269 done /258 queued / 16 running / 268 errors / 23% coverage ] ****** [270 done /260 queued / 16 running / 269 errors / 23% coverage ] ****** [270 done /260 queued / 16 running / 269 errors / 23% coverage ] ****** [271 done /264 queued / 16 running / 270 errors / 23% coverage ] ****** [271 done /264 queued / 16 running / 270 errors / 23% coverage ] ****** [272 done /265 queued / 16 running / 271 errors / 23% coverage ] ****** [272 done /265 queued / 16 running / 271 errors / 23% coverage ] ****** [273 done /269 queued / 16 running / 272 errors / 23% coverage ] ****** [273 done /269 queued / 16 running / 272 errors / 23% coverage ] ****** [274 done /270 queued / 16 running / 273 errors / 23% coverage ] ****** [274 done /270 queued / 16 running / 273 errors / 23% coverage ] ****** [275 done /271 queued / 16 running / 274 errors / 23% coverage ] ****** [275 done /271 queued / 16 running / 274 errors / 23% coverage ] ****** [276 done /272 queued / 16 running / 275 errors / 23% coverage ] ****** [276 done /272 queued / 16 running / 275 errors / 23% coverage ] ****** [277 done /273 queued / 16 running / 276 errors / 23% coverage ] ****** [277 done /273 queued / 16 running / 276 errors / 23% coverage ] ****** [278 done /275 queued / 16 running / 277 errors / 23% coverage ] ****** [278 done /275 queued / 16 running / 277 errors / 23% coverage ] ****** [279 done /276 queued / 16 running / 278 errors / 23% coverage ] ****** [279 done /276 queued / 16 running / 278 errors / 23% coverage ] ****** [280 done /277 queued / 16 running / 279 errors / 23% coverage ] ****** [280 done /277 queued / 16 running / 279 errors / 23% coverage ] ****** [281 done /279 queued / 16 running / 280 errors / 23% coverage ] ****** [281 done /279 queued / 16 running / 280 errors / 23% coverage ] ****** [282 done /281 queued / 16 running / 281 errors / 23% coverage ] ****** [282 done /281 queued / 16 running / 281 errors / 23% coverage ] ****** [283 done /283 queued / 16 running / 282 errors / 23% coverage ] ****** [283 done /283 queued / 16 running / 282 errors / 23% coverage ] ****** [284 done /283 queued / 16 running / 283 errors / 23% coverage ] ****** [284 done /283 queued / 16 running / 283 errors / 23% coverage ] ****** [285 done /283 queued / 16 running / 284 errors / 23% coverage ] ****** [285 done /283 queued / 16 running / 284 errors / 23% coverage ] ****** [286 done /284 queued / 16 running / 285 errors / 23% coverage ] ****** [286 done /284 queued / 16 running / 285 errors / 23% coverage ] ****** [287 done /285 queued / 16 running / 286 errors / 23% coverage ] ****** [287 done /285 queued / 16 running / 286 errors / 23% coverage ] ****** [288 done /285 queued / 16 running / 287 errors / 23% coverage ] ****** [288 done /285 queued / 16 running / 287 errors / 23% coverage ] ****** [289 done /287 queued / 16 running / 288 errors / 23% coverage ] ****** [289 done /287 queued / 16 running / 288 errors / 23% coverage ] ****** [290 done /287 queued / 16 running / 289 errors / 23% coverage ] ****** [290 done /287 queued / 16 running / 289 errors / 23% coverage ] ****** [291 done /289 queued / 16 running / 290 errors / 23% coverage ] ****** [291 done /289 queued / 16 running / 290 errors / 23% coverage ] ****** [292 done /289 queued / 16 running / 291 errors / 23% coverage ] ****** [292 done /289 queued / 16 running / 291 errors / 23% coverage ] ****** [293 done /290 queued / 16 running / 292 errors / 23% coverage ] ****** [293 done /290 queued / 16 running / 292 errors / 23% coverage ] ****** [294 done /290 queued / 16 running / 293 errors / 23% coverage ] ****** [294 done /290 queued / 16 running / 293 errors / 23% coverage ] ****** [295 done /290 queued / 16 running / 294 errors / 23% coverage ] ****** [295 done /290 queued / 16 running / 294 errors / 23% coverage ] ****** [296 done /290 queued / 16 running / 295 errors / 23% coverage ] ****** [296 done /290 queued / 16 running / 295 errors / 23% coverage ] ****** [297 done /291 queued / 16 running / 296 errors / 23% coverage ] ****** [297 done /291 queued / 16 running / 296 errors / 23% coverage ] ****** [298 done /291 queued / 16 running / 297 errors / 23% coverage ] ****** [298 done /291 queued / 16 running / 297 errors / 23% coverage ] ****** [299 done /292 queued / 16 running / 298 errors / 23% coverage ] ****** [299 done /292 queued / 16 running / 298 errors / 23% coverage ] ****** [300 done /293 queued / 16 running / 299 errors / 23% coverage ] ****** [300 done /293 queued / 16 running / 299 errors / 23% coverage ] ****** [301 done /293 queued / 16 running / 300 errors / 23% coverage ] ****** [301 done /293 queued / 16 running / 300 errors / 23% coverage ] ****** [302 done /294 queued / 16 running / 301 errors / 23% coverage ] ****** [302 done /294 queued / 16 running / 301 errors / 23% coverage ] ****** [303 done /295 queued / 16 running / 302 errors / 23% coverage ] ****** [303 done /295 queued / 16 running / 302 errors / 23% coverage ] ****** [304 done /296 queued / 16 running / 303 errors / 23% coverage ] ****** [304 done /296 queued / 16 running / 303 errors / 23% coverage ] ****** [305 done /298 queued / 16 running / 304 errors / 23% coverage ] ****** [305 done /298 queued / 16 running / 304 errors / 23% coverage ] ****** [306 done /302 queued / 16 running / 305 errors / 23% coverage ] ****** [306 done /302 queued / 16 running / 305 errors / 23% coverage ] ****** [307 done /302 queued / 16 running / 306 errors / 23% coverage ] ****** [307 done /302 queued / 16 running / 306 errors / 23% coverage ] ****** [308 done /303 queued / 16 running / 307 errors / 23% coverage ] ****** [308 done /303 queued / 16 running / 307 errors / 23% coverage ] ****** [309 done /305 queued / 16 running / 308 errors / 23% coverage ] ****** [309 done /305 queued / 16 running / 308 errors / 23% coverage ] ****** [310 done /306 queued / 16 running / 309 errors / 23% coverage ] ****** [310 done /306 queued / 16 running / 309 errors / 23% coverage ] ****** [311 done /307 queued / 16 running / 310 errors / 23% coverage ] ****** [311 done /307 queued / 16 running / 310 errors / 23% coverage ] ****** [312 done /312 queued / 16 running / 311 errors / 23% coverage ] ****** [312 done /312 queued / 16 running / 311 errors / 23% coverage ] ****** [313 done /315 queued / 16 running / 312 errors / 23% coverage ] ****** [313 done /315 queued / 16 running / 312 errors / 23% coverage ] ****** [314 done /316 queued / 16 running / 313 errors / 23% coverage ] ****** [314 done /316 queued / 16 running / 313 errors / 23% coverage ] ****** [315 done /317 queued / 16 running / 314 errors / 23% coverage ] ****** [315 done /317 queued / 16 running / 314 errors / 23% coverage ] ****** [316 done /318 queued / 16 running / 315 errors / 23% coverage ] ****** [316 done /318 queued / 16 running / 315 errors / 23% coverage ] ****** [317 done /319 queued / 16 running / 316 errors / 23% coverage ] ****** [317 done /319 queued / 16 running / 316 errors / 23% coverage ] ****** [318 done /321 queued / 16 running / 317 errors / 23% coverage ] ****** [318 done /321 queued / 16 running / 317 errors / 23% coverage ] ****** [319 done /324 queued / 16 running / 318 errors / 23% coverage ] ****** [319 done /324 queued / 16 running / 318 errors / 23% coverage ] ****** [320 done /326 queued / 16 running / 319 errors / 23% coverage ] ****** [320 done /326 queued / 16 running / 319 errors / 23% coverage ] ****** [321 done /327 queued / 16 running / 320 errors / 23% coverage ] ****** [321 done /327 queued / 16 running / 320 errors / 23% coverage ] ****** [322 done /327 queued / 16 running / 321 errors / 23% coverage ] ****** [322 done /327 queued / 16 running / 321 errors / 23% coverage ] ****** [323 done /328 queued / 16 running / 322 errors / 23% coverage ] ****** [323 done /328 queued / 16 running / 322 errors / 23% coverage ] ****** [324 done /328 queued / 16 running / 323 errors / 23% coverage ] ****** [324 done /328 queued / 16 running / 323 errors / 23% coverage ] ****** [325 done /329 queued / 16 running / 324 errors / 23% coverage ] ****** [325 done /329 queued / 16 running / 324 errors / 23% coverage ] ****** [326 done /329 queued / 16 running / 325 errors / 23% coverage ] ****** [326 done /329 queued / 16 running / 325 errors / 23% coverage ] ****** [327 done /331 queued / 16 running / 326 errors / 23% coverage ] ****** [327 done /331 queued / 16 running / 326 errors / 23% coverage ] ****** [328 done /333 queued / 16 running / 327 errors / 23% coverage ] ****** [328 done /333 queued / 16 running / 327 errors / 23% coverage ] ****** [329 done /334 queued / 16 running / 328 errors / 23% coverage ] ****** [329 done /334 queued / 16 running / 328 errors / 23% coverage ] ****** [330 done /337 queued / 16 running / 329 errors / 23% coverage ] ****** [330 done /337 queued / 16 running / 329 errors / 23% coverage ] ****** [331 done /338 queued / 16 running / 330 errors / 23% coverage ] ****** [331 done /338 queued / 16 running / 330 errors / 23% coverage ] ****** [332 done /338 queued / 16 running / 331 errors / 23% coverage ] ****** [332 done /338 queued / 16 running / 331 errors / 23% coverage ] ****** [333 done /339 queued / 16 running / 332 errors / 23% coverage ] ****** [333 done /339 queued / 16 running / 332 errors / 23% coverage ] ****** [334 done /340 queued / 16 running / 333 errors / 23% coverage ] ****** [334 done /340 queued / 16 running / 333 errors / 23% coverage ] ****** [335 done /340 queued / 16 running / 334 errors / 23% coverage ] ****** [335 done /340 queued / 16 running / 334 errors / 23% coverage ] ****** [336 done /341 queued / 16 running / 335 errors / 23% coverage ] ****** [336 done /341 queued / 16 running / 335 errors / 23% coverage ] ****** [337 done /341 queued / 16 running / 336 errors / 23% coverage ] ****** [337 done /341 queued / 16 running / 336 errors / 23% coverage ] ****** [338 done /341 queued / 16 running / 337 errors / 23% coverage ] ****** [338 done /341 queued / 16 running / 337 errors / 23% coverage ] ****** [339 done /341 queued / 16 running / 338 errors / 23% coverage ] ****** [339 done /341 queued / 16 running / 338 errors / 23% coverage ] ****** [340 done /342 queued / 16 running / 339 errors / 23% coverage ] ****** [340 done /342 queued / 16 running / 339 errors / 23% coverage ] ****** [341 done /343 queued / 16 running / 340 errors / 23% coverage ] ****** [341 done /343 queued / 16 running / 340 errors / 23% coverage ] ****** [342 done /344 queued / 16 running / 341 errors / 23% coverage ] ****** [342 done /344 queued / 16 running / 341 errors / 23% coverage ] ****** [343 done /346 queued / 16 running / 342 errors / 23% coverage ] ****** [343 done /346 queued / 16 running / 342 errors / 23% coverage ] ****** [344 done /347 queued / 16 running / 343 errors / 23% coverage ] ****** [344 done /347 queued / 16 running / 343 errors / 23% coverage ] ****** [345 done /347 queued / 16 running / 344 errors / 23% coverage ] ****** [345 done /347 queued / 16 running / 344 errors / 23% coverage ] ****** [346 done /349 queued / 16 running / 345 errors / 23% coverage ] ****** [346 done /349 queued / 16 running / 345 errors / 23% coverage ] ****** [347 done /350 queued / 16 running / 346 errors / 23% coverage ] ****** [347 done /350 queued / 16 running / 346 errors / 23% coverage ] ****** [348 done /351 queued / 16 running / 347 errors / 23% coverage ] ****** [348 done /351 queued / 16 running / 347 errors / 23% coverage ] ****** [349 done /352 queued / 16 running / 348 errors / 23% coverage ] ****** [349 done /352 queued / 16 running / 348 errors / 23% coverage ] ****** [350 done /353 queued / 16 running / 349 errors / 23% coverage ] ****** [350 done /353 queued / 16 running / 349 errors / 23% coverage ] ****** [351 done /354 queued / 16 running / 350 errors / 23% coverage ] ****** [351 done /354 queued / 16 running / 350 errors / 23% coverage ] ****** [352 done /356 queued / 16 running / 351 errors / 23% coverage ] ****** [352 done /356 queued / 16 running / 351 errors / 23% coverage ] ****** [353 done /360 queued / 16 running / 352 errors / 23% coverage ] ****** [353 done /360 queued / 16 running / 352 errors / 23% coverage ] ****** [354 done /361 queued / 16 running / 353 errors / 23% coverage ] ****** [354 done /361 queued / 16 running / 353 errors / 23% coverage ] ****** [355 done /362 queued / 16 running / 354 errors / 23% coverage ] ****** [355 done /362 queued / 16 running / 354 errors / 23% coverage ] ****** [356 done /363 queued / 16 running / 355 errors / 23% coverage ] ****** [356 done /363 queued / 16 running / 355 errors / 23% coverage ] ****** [357 done /364 queued / 16 running / 356 errors / 23% coverage ] ****** [357 done /364 queued / 16 running / 356 errors / 23% coverage ] ****** [358 done /366 queued / 16 running / 357 errors / 23% coverage ] ****** [358 done /366 queued / 16 running / 357 errors / 23% coverage ] ****** [359 done /367 queued / 16 running / 358 errors / 23% coverage ] ****** [359 done /367 queued / 16 running / 358 errors / 23% coverage ] ****** [360 done /369 queued / 16 running / 359 errors / 23% coverage ] ****** [360 done /369 queued / 16 running / 359 errors / 23% coverage ] ****** [361 done /369 queued / 16 running / 360 errors / 23% coverage ] ****** [361 done /369 queued / 16 running / 360 errors / 23% coverage ] ****** [362 done /371 queued / 16 running / 361 errors / 23% coverage ] ****** [362 done /371 queued / 16 running / 361 errors / 23% coverage ] ****** [363 done /374 queued / 16 running / 362 errors / 23% coverage ] ****** [363 done /374 queued / 16 running / 362 errors / 23% coverage ] ****** [364 done /375 queued / 16 running / 363 errors / 23% coverage ] ****** [364 done /375 queued / 16 running / 363 errors / 23% coverage ] ****** [365 done /376 queued / 16 running / 364 errors / 23% coverage ] ****** [365 done /376 queued / 16 running / 364 errors / 23% coverage ] ****** [366 done /377 queued / 16 running / 365 errors / 23% coverage ] ****** [366 done /377 queued / 16 running / 365 errors / 23% coverage ] ****** [367 done /378 queued / 16 running / 366 errors / 23% coverage ] ****** [367 done /378 queued / 16 running / 366 errors / 23% coverage ] ****** [368 done /378 queued / 16 running / 367 errors / 23% coverage ] ****** [368 done /378 queued / 16 running / 367 errors / 23% coverage ] ****** [369 done /378 queued / 16 running / 368 errors / 23% coverage ] ****** [369 done /378 queued / 16 running / 368 errors / 23% coverage ] ****** [370 done /379 queued / 16 running / 369 errors / 23% coverage ] ****** [370 done /379 queued / 16 running / 369 errors / 23% coverage ] ****** [371 done /379 queued / 16 running / 370 errors / 23% coverage ] ****** [371 done /379 queued / 16 running / 370 errors / 23% coverage ] ****** [372 done /380 queued / 16 running / 371 errors / 23% coverage ] ****** [372 done /380 queued / 16 running / 371 errors / 23% coverage ] ****** [373 done /381 queued / 16 running / 372 errors / 23% coverage ] ****** [373 done /381 queued / 16 running / 372 errors / 23% coverage ] ****** [374 done /382 queued / 16 running / 373 errors / 23% coverage ] ****** [374 done /382 queued / 16 running / 373 errors / 23% coverage ] ****** [375 done /382 queued / 16 running / 374 errors / 23% coverage ] ****** [375 done /382 queued / 16 running / 374 errors / 23% coverage ] ****** [376 done /384 queued / 16 running / 375 errors / 23% coverage ] ****** [376 done /384 queued / 16 running / 375 errors / 23% coverage ] ****** [377 done /384 queued / 16 running / 376 errors / 23% coverage ] ****** [377 done /384 queued / 16 running / 376 errors / 23% coverage ] ****** [378 done /385 queued / 16 running / 377 errors / 23% coverage ] ****** [378 done /385 queued / 16 running / 377 errors / 23% coverage ] ****** [379 done /389 queued / 16 running / 378 errors / 23% coverage ] ****** [379 done /389 queued / 16 running / 378 errors / 23% coverage ] ****** [380 done /390 queued / 16 running / 379 errors / 23% coverage ] ****** [380 done /390 queued / 16 running / 379 errors / 23% coverage ] ****** [381 done /391 queued / 16 running / 380 errors / 23% coverage ] ****** [381 done /391 queued / 16 running / 380 errors / 23% coverage ] ****** [382 done /391 queued / 16 running / 381 errors / 23% coverage ] ****** [382 done /391 queued / 16 running / 381 errors / 23% coverage ] ****** [383 done /392 queued / 16 running / 382 errors / 23% coverage ] ****** [383 done /392 queued / 16 running / 382 errors / 23% coverage ] ****** [384 done /392 queued / 16 running / 383 errors / 23% coverage ] ****** [384 done /392 queued / 16 running / 383 errors / 23% coverage ] ****** [385 done /394 queued / 16 running / 384 errors / 23% coverage ] ****** [385 done /394 queued / 16 running / 384 errors / 23% coverage ] ****** [386 done /397 queued / 16 running / 385 errors / 23% coverage ] ****** [386 done /397 queued / 16 running / 385 errors / 23% coverage ] ****** [387 done /399 queued / 16 running / 386 errors / 23% coverage ] ****** [387 done /399 queued / 16 running / 386 errors / 23% coverage ] ****** [388 done /400 queued / 16 running / 387 errors / 23% coverage ] ****** [388 done /400 queued / 16 running / 387 errors / 23% coverage ] ****** [389 done /401 queued / 16 running / 388 errors / 23% coverage ] ****** [389 done /401 queued / 16 running / 388 errors / 23% coverage ] ****** [390 done /402 queued / 16 running / 389 errors / 23% coverage ] ****** [390 done /402 queued / 16 running / 389 errors / 23% coverage ] ****** [391 done /403 queued / 16 running / 390 errors / 23% coverage ] ****** [391 done /403 queued / 16 running / 390 errors / 23% coverage ] ****** [392 done /404 queued / 16 running / 391 errors / 23% coverage ] ****** [392 done /404 queued / 16 running / 391 errors / 23% coverage ] ****** [393 done /404 queued / 16 running / 392 errors / 23% coverage ] ****** [393 done /404 queued / 16 running / 392 errors / 23% coverage ] ****** [394 done /405 queued / 16 running / 393 errors / 23% coverage ] ****** [394 done /405 queued / 16 running / 393 errors / 23% coverage ] ****** [395 done /406 queued / 16 running / 394 errors / 23% coverage ] ****** [395 done /406 queued / 16 running / 394 errors / 23% coverage ] ****** [396 done /407 queued / 16 running / 395 errors / 23% coverage ] ****** [396 done /407 queued / 16 running / 395 errors / 23% coverage ] ****** [397 done /408 queued / 16 running / 396 errors / 23% coverage ] ****** [397 done /408 queued / 16 running / 396 errors / 23% coverage ] ****** [398 done /409 queued / 16 running / 397 errors / 23% coverage ] ****** [398 done /409 queued / 16 running / 397 errors / 23% coverage ] ****** [399 done /411 queued / 16 running / 398 errors / 23% coverage ] ****** [399 done /411 queued / 16 running / 398 errors / 23% coverage ] ****** [400 done /413 queued / 16 running / 399 errors / 23% coverage ] ****** [400 done /413 queued / 16 running / 399 errors / 23% coverage ] ****** [401 done /414 queued / 16 running / 400 errors / 23% coverage ] ****** [401 done /414 queued / 16 running / 400 errors / 23% coverage ] ****** [402 done /419 queued / 16 running / 401 errors / 23% coverage ] ****** [402 done /419 queued / 16 running / 401 errors / 23% coverage ] ****** [403 done /420 queued / 16 running / 402 errors / 23% coverage ] ****** [403 done /420 queued / 16 running / 402 errors / 23% coverage ] ****** [404 done /421 queued / 16 running / 403 errors / 23% coverage ] ****** [404 done /421 queued / 16 running / 403 errors / 23% coverage ] ****** [405 done /424 queued / 16 running / 404 errors / 23% coverage ] ****** [405 done /424 queued / 16 running / 404 errors / 23% coverage ] ****** [406 done /425 queued / 16 running / 405 errors / 23% coverage ] ****** [406 done /425 queued / 16 running / 405 errors / 23% coverage ] ****** [407 done /425 queued / 16 running / 406 errors / 23% coverage ] ****** [407 done /425 queued / 16 running / 406 errors / 23% coverage ] ****** [408 done /426 queued / 16 running / 407 errors / 23% coverage ] ****** [408 done /426 queued / 16 running / 407 errors / 23% coverage ] ****** [409 done /428 queued / 16 running / 408 errors / 23% coverage ] ****** [409 done /428 queued / 16 running / 408 errors / 23% coverage ] ****** [410 done /429 queued / 16 running / 409 errors / 23% coverage ] ****** [410 done /429 queued / 16 running / 409 errors / 23% coverage ] ****** [411 done /430 queued / 16 running / 410 errors / 23% coverage ] ****** [411 done /430 queued / 16 running / 410 errors / 23% coverage ] ****** [412 done /431 queued / 16 running / 411 errors / 23% coverage ] ****** [412 done /431 queued / 16 running / 411 errors / 23% coverage ] ****** [413 done /433 queued / 16 running / 412 errors / 23% coverage ] ****** [413 done /433 queued / 16 running / 412 errors / 23% coverage ] ****** [414 done /434 queued / 16 running / 413 errors / 23% coverage ] ****** [414 done /434 queued / 16 running / 413 errors / 23% coverage ] ****** [415 done /435 queued / 16 running / 414 errors / 23% coverage ] ****** [415 done /435 queued / 16 running / 414 errors / 23% coverage ] ****** [416 done /435 queued / 16 running / 415 errors / 23% coverage ] ****** [416 done /435 queued / 16 running / 415 errors / 23% coverage ] ****** [417 done /437 queued / 16 running / 416 errors / 23% coverage ] ****** [417 done /437 queued / 16 running / 416 errors / 23% coverage ] ****** [418 done /439 queued / 16 running / 417 errors / 23% coverage ] ****** [418 done /439 queued / 16 running / 417 errors / 23% coverage ] ****** [419 done /441 queued / 16 running / 418 errors / 23% coverage ] ****** [419 done /441 queued / 16 running / 418 errors / 23% coverage ] ****** [420 done /443 queued / 16 running / 419 errors / 23% coverage ] ****** [420 done /443 queued / 16 running / 419 errors / 23% coverage ] ****** [421 done /444 queued / 16 running / 420 errors / 23% coverage ] ****** [421 done /444 queued / 16 running / 420 errors / 23% coverage ] ****** [422 done /445 queued / 16 running / 421 errors / 23% coverage ] ****** [422 done /445 queued / 16 running / 421 errors / 23% coverage ] ****** [423 done /446 queued / 16 running / 422 errors / 23% coverage ] ****** [423 done /446 queued / 16 running / 422 errors / 23% coverage ] ****** [424 done /447 queued / 16 running / 423 errors / 23% coverage ] ****** [424 done /447 queued / 16 running / 423 errors / 23% coverage ] ****** [425 done /449 queued / 16 running / 424 errors / 23% coverage ] ****** [425 done /449 queued / 16 running / 424 errors / 23% coverage ] ****** [426 done /450 queued / 16 running / 425 errors / 23% coverage ] ****** [426 done /450 queued / 16 running / 425 errors / 23% coverage ] ****** [427 done /450 queued / 16 running / 426 errors / 23% coverage ] ****** [427 done /450 queued / 16 running / 426 errors / 23% coverage ] ****** [428 done /453 queued / 16 running / 427 errors / 23% coverage ] ****** [428 done /453 queued / 16 running / 427 errors / 23% coverage ] ****** [429 done /454 queued / 16 running / 428 errors / 23% coverage ] ****** [429 done /454 queued / 16 running / 428 errors / 23% coverage ] ****** [430 done /455 queued / 16 running / 429 errors / 23% coverage ] ****** [430 done /455 queued / 16 running / 429 errors / 23% coverage ] ****** [431 done /456 queued / 16 running / 430 errors / 23% coverage ] ****** [431 done /456 queued / 16 running / 430 errors / 23% coverage ] ****** [432 done /457 queued / 16 running / 431 errors / 23% coverage ] ****** [432 done /457 queued / 16 running / 431 errors / 23% coverage ] ****** [433 done /458 queued / 16 running / 432 errors / 23% coverage ] ****** [433 done /458 queued / 16 running / 432 errors / 23% coverage ] ****** [434 done /458 queued / 16 running / 433 errors / 23% coverage ] ****** [434 done /458 queued / 16 running / 433 errors / 23% coverage ] ****** [435 done /460 queued / 16 running / 434 errors / 23% coverage ] ****** [435 done /460 queued / 16 running / 434 errors / 23% coverage ] ****** [436 done /460 queued / 16 running / 435 errors / 23% coverage ] ****** [436 done /460 queued / 16 running / 435 errors / 23% coverage ] ****** [437 done /461 queued / 16 running / 436 errors / 23% coverage ] ****** [437 done /461 queued / 16 running / 436 errors / 23% coverage ] ****** [438 done /462 queued / 16 running / 437 errors / 23% coverage ] ****** [438 done /462 queued / 16 running / 437 errors / 23% coverage ] ****** [439 done /463 queued / 16 running / 438 errors / 23% coverage ] ****** [439 done /463 queued / 16 running / 438 errors / 23% coverage ] ****** [440 done /464 queued / 16 running / 439 errors / 23% coverage ] ****** [440 done /464 queued / 16 running / 439 errors / 23% coverage ] ****** [441 done /465 queued / 16 running / 440 errors / 23% coverage ] ****** [441 done /465 queued / 16 running / 440 errors / 23% coverage ] ****** [442 done /465 queued / 16 running / 441 errors / 23% coverage ] ****** [442 done /465 queued / 16 running / 441 errors / 23% coverage ] ****** [443 done /467 queued / 16 running / 442 errors / 23% coverage ] ****** [443 done /467 queued / 16 running / 442 errors / 23% coverage ] ****** [444 done /468 queued / 16 running / 443 errors / 23% coverage ] ****** [444 done /468 queued / 16 running / 443 errors / 23% coverage ] ****** [445 done /468 queued / 16 running / 444 errors / 23% coverage ] ****** [445 done /468 queued / 16 running / 444 errors / 23% coverage ] ****** [446 done /468 queued / 16 running / 445 errors / 23% coverage ] ****** [446 done /468 queued / 16 running / 445 errors / 23% coverage ] ****** [447 done /471 queued / 16 running / 446 errors / 23% coverage ] ****** [447 done /471 queued / 16 running / 446 errors / 23% coverage ] ****** [448 done /472 queued / 16 running / 447 errors / 23% coverage ] ****** [448 done /472 queued / 16 running / 447 errors / 23% coverage ] ****** [449 done /475 queued / 16 running / 448 errors / 23% coverage ] ****** [449 done /475 queued / 16 running / 448 errors / 23% coverage ] ****** [450 done /476 queued / 16 running / 449 errors / 23% coverage ] ****** [450 done /476 queued / 16 running / 449 errors / 23% coverage ] ****** [451 done /480 queued / 16 running / 450 errors / 23% coverage ] ****** [451 done /480 queued / 16 running / 450 errors / 23% coverage ] ****** [452 done /482 queued / 16 running / 451 errors / 23% coverage ] ****** [452 done /482 queued / 16 running / 451 errors / 23% coverage ] ****** [453 done /483 queued / 16 running / 452 errors / 23% coverage ] ****** [453 done /483 queued / 16 running / 452 errors / 23% coverage ] ****** [454 done /484 queued / 16 running / 453 errors / 23% coverage ] ****** [454 done /484 queued / 16 running / 453 errors / 23% coverage ] ****** [455 done /487 queued / 16 running / 454 errors / 23% coverage ] ****** [455 done /487 queued / 16 running / 454 errors / 23% coverage ] ****** [456 done /488 queued / 16 running / 455 errors / 23% coverage ] ****** [456 done /488 queued / 16 running / 455 errors / 23% coverage ] ****** [457 done /489 queued / 16 running / 456 errors / 23% coverage ] ****** [457 done /489 queued / 16 running / 456 errors / 23% coverage ] ****** [458 done /490 queued / 16 running / 457 errors / 23% coverage ] ****** [458 done /490 queued / 16 running / 457 errors / 23% coverage ] ****** [459 done /493 queued / 16 running / 458 errors / 23% coverage ] ****** [459 done /493 queued / 16 running / 458 errors / 23% coverage ] ****** [460 done /494 queued / 16 running / 459 errors / 23% coverage ] ****** [460 done /494 queued / 16 running / 459 errors / 23% coverage ] ****** [461 done /495 queued / 16 running / 460 errors / 23% coverage ] ****** [461 done /495 queued / 16 running / 460 errors / 23% coverage ] ****** [462 done /496 queued / 16 running / 461 errors / 23% coverage ] ****** [462 done /496 queued / 16 running / 461 errors / 23% coverage ] ****** [463 done /497 queued / 16 running / 462 errors / 23% coverage ] ****** [463 done /497 queued / 16 running / 462 errors / 23% coverage ] ****** [464 done /498 queued / 16 running / 463 errors / 23% coverage ] ****** [464 done /498 queued / 16 running / 463 errors / 23% coverage ] ****** [465 done /498 queued / 16 running / 464 errors / 23% coverage ] ****** [465 done /498 queued / 16 running / 464 errors / 23% coverage ] ****** [466 done /498 queued / 16 running / 465 errors / 23% coverage ] ****** [466 done /498 queued / 16 running / 465 errors / 23% coverage ] ****** [467 done /498 queued / 16 running / 466 errors / 23% coverage ] ****** [467 done /498 queued / 16 running / 466 errors / 23% coverage ] ****** [468 done /499 queued / 16 running / 467 errors / 23% coverage ] ****** [468 done /499 queued / 16 running / 467 errors / 23% coverage ] ****** [469 done /500 queued / 16 running / 468 errors / 23% coverage ] ****** [469 done /500 queued / 16 running / 468 errors / 23% coverage ] ****** [470 done /500 queued / 16 running / 469 errors / 23% coverage ] ****** [470 done /500 queued / 16 running / 469 errors / 23% coverage ] ****** [471 done /500 queued / 16 running / 470 errors / 23% coverage ] ****** [471 done /500 queued / 16 running / 470 errors / 23% coverage ] ****** [472 done /501 queued / 16 running / 471 errors / 23% coverage ] ****** [472 done /501 queued / 16 running / 471 errors / 23% coverage ] ****** [473 done /503 queued / 16 running / 472 errors / 23% coverage ] ****** [473 done /503 queued / 16 running / 472 errors / 23% coverage ] ****** [474 done /505 queued / 16 running / 473 errors / 23% coverage ] ****** [474 done /505 queued / 16 running / 473 errors / 23% coverage ] ****** [475 done /505 queued / 16 running / 474 errors / 23% coverage ] ****** [475 done /505 queued / 16 running / 474 errors / 23% coverage ] ****** [476 done /508 queued / 16 running / 475 errors / 23% coverage ] ****** [476 done /508 queued / 16 running / 475 errors / 23% coverage ] ****** [477 done /509 queued / 16 running / 476 errors / 23% coverage ] ****** [477 done /509 queued / 16 running / 476 errors / 23% coverage ] ****** [478 done /509 queued / 16 running / 477 errors / 23% coverage ] ****** [478 done /509 queued / 16 running / 477 errors / 23% coverage ] ****** [479 done /510 queued / 16 running / 478 errors / 23% coverage ] ****** [479 done /510 queued / 16 running / 478 errors / 23% coverage ] ****** [480 done /511 queued / 16 running / 479 errors / 23% coverage ] ****** [480 done /511 queued / 16 running / 479 errors / 23% coverage ] ****** [481 done /514 queued / 16 running / 480 errors / 23% coverage ] ****** [481 done /514 queued / 16 running / 480 errors / 23% coverage ] ****** [482 done /516 queued / 16 running / 481 errors / 23% coverage ] ****** [482 done /516 queued / 16 running / 481 errors / 23% coverage ] ****** [483 done /518 queued / 16 running / 482 errors / 23% coverage ] ****** [483 done /518 queued / 16 running / 482 errors / 23% coverage ] ****** [484 done /521 queued / 16 running / 483 errors / 23% coverage ] ****** [484 done /521 queued / 16 running / 483 errors / 23% coverage ] ****** [485 done /525 queued / 16 running / 484 errors / 23% coverage ] ****** [485 done /525 queued / 16 running / 484 errors / 23% coverage ] ****** [486 done /528 queued / 16 running / 485 errors / 23% coverage ] ****** [486 done /528 queued / 16 running / 485 errors / 23% coverage ] ****** [487 done /529 queued / 16 running / 486 errors / 23% coverage ] ****** [487 done /529 queued / 16 running / 486 errors / 23% coverage ] ****** [488 done /531 queued / 16 running / 487 errors / 23% coverage ] ****** [488 done /531 queued / 16 running / 487 errors / 23% coverage ] ****** [489 done /532 queued / 16 running / 488 errors / 23% coverage ] ****** [489 done /532 queued / 16 running / 488 errors / 23% coverage ] ****** [490 done /534 queued / 16 running / 489 errors / 23% coverage ] ****** [490 done /534 queued / 16 running / 489 errors / 23% coverage ] ****** [491 done /534 queued / 16 running / 490 errors / 23% coverage ] ****** [491 done /534 queued / 16 running / 490 errors / 23% coverage ] ****** [492 done /535 queued / 16 running / 491 errors / 23% coverage ] ****** [492 done /535 queued / 16 running / 491 errors / 23% coverage ] ****** [493 done /537 queued / 16 running / 492 errors / 23% coverage ] ****** [493 done /537 queued / 16 running / 492 errors / 23% coverage ] ****** [494 done /538 queued / 16 running / 493 errors / 23% coverage ] ****** [494 done /538 queued / 16 running / 493 errors / 23% coverage ] ****** [495 done /540 queued / 16 running / 494 errors / 23% coverage ] ****** [495 done /540 queued / 16 running / 494 errors / 23% coverage ] ****** [496 done /540 queued / 16 running / 495 errors / 23% coverage ] ****** [496 done /540 queued / 16 running / 495 errors / 23% coverage ] ****** [497 done /541 queued / 16 running / 496 errors / 23% coverage ] ****** [497 done /541 queued / 16 running / 496 errors / 23% coverage ] ****** [498 done /542 queued / 16 running / 497 errors / 23% coverage ] ****** [498 done /542 queued / 16 running / 497 errors / 23% coverage ] ****** [499 done /542 queued / 16 running / 498 errors / 23% coverage ] ****** [499 done /542 queued / 16 running / 498 errors / 23% coverage ] ****** [500 done /542 queued / 16 running / 499 errors / 23% coverage ] ****** [500 done /542 queued / 16 running / 499 errors / 23% coverage ] ****** [501 done /543 queued / 16 running / 500 errors / 23% coverage ] ****** [501 done /543 queued / 16 running / 500 errors / 23% coverage ] ****** [502 done /545 queued / 16 running / 501 errors / 23% coverage ] ****** [502 done /545 queued / 16 running / 501 errors / 23% coverage ] ****** [503 done /545 queued / 16 running / 502 errors / 23% coverage ] ****** [503 done /545 queued / 16 running / 502 errors / 23% coverage ] ****** [504 done /545 queued / 16 running / 503 errors / 23% coverage ] ****** [504 done /545 queued / 16 running / 503 errors / 23% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","toString","apply","bound ","call","pop","Date","setFullYear","setHours","RegExp","create","parseFloat","isNaN","isFinite","getHostname","bind","bound addListener","randomBytes"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0,"Switcher":false,"Target_Switch_Base":0} start 0.0341 took 3.761s
*-- Test Case {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0} start 3.8467 took 16.2575s
*-- Errors occured in test {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0}
* Error: Settings is not defined.
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switch_Base":0,"_bound":1}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"_bound":2} start 20.3229 took 16.0381s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"_bound":2}
* Error: TypeError: Cannot read property 'email_server' of null
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"_bound":2}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"_bound":3,"ExpansionArg_int":0} start 36.4613 took 15.9305s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"_bound":3,"ExpansionArg_int":0}
* Error: Interval is not a number.
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"_bound":3}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":4,"ExpansionArg_string":"PureString"} start 52.4743 took 14.7177s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":4,"ExpansionArg_string":"PureString"}
* Error: Interval is not a number.
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":5,"ExpansionArg_array_length":0} start 67.2789 took 26.3222s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":5,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":6,"ExpansionArg_bool":false} start 93.9141 took 14.3563s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":6,"ExpansionArg_bool":false}
* Error: Interval is not a number.
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":7,"ExpansionArg_array_element_0_type":0} start 93.9902 took 24.2264s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":7,"ExpansionArg_array_element_0_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"_bound":7}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":9,"ExpansionArg_array_element_1_type":0} start 118.3773 took 24.4181s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":9,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"_bound":9}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":8,"ExpansionArg_array_element_0_int":0} start 118.4693 took 24.775s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":8,"ExpansionArg_array_element_0_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":2,"_bound":8}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":11,"ExpansionArg_array_element_2_type":0} start 142.9632 took 24.8745s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":11,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":10,"ExpansionArg_array_element_0_string":"PureString"} start 143.4712 took 24.8372s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":10,"ExpansionArg_array_element_0_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":3,"ExpansionArg_array_element_0_int":0,"_bound":10}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":10} start 143.0256 took 25.7358s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":10}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":10}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":9} start 143.5616 took 25.5666s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":9}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":1,"ExpansionArg_array_element_0_int":0,"_bound":9}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":11,"ExpansionArg_array_element_1_type":0} start 143.6368 took 25.7111s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":11,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":12} start 168.0631 took 25.7547s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":12}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":1,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"_bound":10,"ExpansionArg_array_element_1_type":0} start 169.256 took 25.0003s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"_bound":10,"ExpansionArg_array_element_1_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":1,"_bound":10}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":13,"ExpansionArg_array_element_3_type":0} start 168.1647 took 26.4288s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":13,"ExpansionArg_array_element_3_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":4,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":0,"ExpansionArg_array_element_2_type":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"_bound":13,"ExpansionArg_array_element_2_type":0} start 169.6365 took 25.3434s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"_bound":13,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":0,"_bound":13}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":11,"ExpansionArg_array_element_1_string":"PureString"} start 168.9011 took 26.9958s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":11,"ExpansionArg_array_element_1_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":3,"_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","_bound":11,"ExpansionArg_array_element_0_bool":false} start 168.5465 took 28.0737s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","_bound":11,"ExpansionArg_array_element_0_bool":false}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":1,"ExpansionArg_array_element_0_type":5,"ExpansionArg_array_element_0_string":"","_bound":11}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":12,"ExpansionArg_array_element_2_type":0} start 169.0299 took 27.8916s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":12,"ExpansionArg_array_element_2_type":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":3,"ExpansionArg_array_element_0_type":0,"ExpansionArg_array_element_1_type":1,"_bound":12}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"_bound":12} start 169.4867 took 27.7973s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_array_length":2,"ExpansionArg_array_element_0_type":2,"ExpansionArg_array_element_0_int":0,"ExpansionArg_array_element_1_type":1,"_bound":12}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program 'use strict'

var net = require('net')
  , tls = require('tls')
  , http = require('http')
  , https = require('https')
  , events = require('events')
  , assert = require('assert')
  , util = require('util')
  ;

exports.httpOverHttp = httpOverHttp
exports.httpsOverHttp = httpsOverHttp
exports.httpOverHttps = httpOverHttps
exports.httpsOverHttps = httpsOverHttps


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  return agent
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options)
  agent.request = http.request
  agent.createSocket = createSecureSocket
  return agent
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  return agent
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options)
  agent.request = https.request
  agent.createSocket = createSecureSocket
  return agent
}


function TunnelingAgent(options) {
  var self = this
  self.options = options || {}
  self.proxyOptions = self.options.proxy || {}
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
  self.requests = []
  self.sockets = []

  self.on('free', function onFree(socket, host, port) {
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i]
      if (pending.host === host && pending.port === port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1)
        pending.request.onSocket(socket)
        return
      }
    }
    socket.destroy()
    self.removeSocket(socket)
  })
}
util.inherits(TunnelingAgent, events.EventEmitter)

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
  var self = this

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push({host: host, port: port, request: req})
    return
  }

  // If we are under maxSockets create a new one.
  self.createSocket({host: host, port: port, request: req}, function(socket) {
    socket.on('free', onFree)
    socket.on('close', onCloseOrRemove)
    socket.on('agentRemove', onCloseOrRemove)
    req.onSocket(socket)

    function onFree() {
      self.emit('free', socket, host, port)
    }

    function onCloseOrRemove(err) {
      self.removeSocket()
      socket.removeListener('free', onFree)
      socket.removeListener('close', onCloseOrRemove)
      socket.removeListener('agentRemove', onCloseOrRemove)
    }
  })
}

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this
  var placeholder = {}
  self.sockets.push(placeholder)

  var connectOptions = mergeOptions({}, self.proxyOptions, 
    { method: 'CONNECT'
    , path: options.host + ':' + options.port
    , agent: false
    }
  )
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {}
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64')
  }

  debug('making CONNECT request')
  var connectReq = self.request(connectOptions)
  connectReq.useChunkedEncodingByDefault = false // for v0.6
  connectReq.once('response', onResponse) // for v0.6
  connectReq.once('upgrade', onUpgrade)   // for v0.6
  connectReq.once('connect', onConnect)   // for v0.7 or later
  connectReq.once('error', onError)
  connectReq.end()

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head)
    })
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners()
    socket.removeAllListeners()

    if (res.statusCode === 200) {
      assert.equal(head.length, 0)
      debug('tunneling connection has established')
      self.sockets[self.sockets.indexOf(placeholder)] = socket
      cb(socket)
    } else {
      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)
      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)
      error.code = 'ECONNRESET'
      options.request.emit('error', error)
      self.removeSocket(placeholder)
    }
  }

  function onError(cause) {
    connectReq.removeAllListeners()

    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack)
    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)
    error.code = 'ECONNRESET'
    options.request.emit('error', error)
    self.removeSocket(placeholder)
  }
}

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) return
  
  this.sockets.splice(pos, 1)

  var pending = this.requests.shift()
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket)
    })
  }
}

function createSecureSocket(options, cb) {
  var self = this
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, mergeOptions({}, self.options, 
      { servername: options.host
      , socket: socket
      }
    ))
    cb(secureSocket)
  })
}


function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i]
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides)
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j]
        if (overrides[k] !== undefined) {
          target[k] = overrides[k]
        }
      }
    }
  }
  return target
}


var debug
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments)
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0]
    } else {
      args.unshift('TUNNEL:')
    }
    console.error.apply(console, args)
  }
} else {
  debug = function() {}
}
exports.debug = debug // for test
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
