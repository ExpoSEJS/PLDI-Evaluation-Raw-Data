/root/Targets/neutrinodb
└─┬ neutrinodb@0.0.1 
  └─┬ request@2.82.0 
    ├── aws-sign2@0.7.0 
    ├── aws4@1.6.0 
    ├── caseless@0.12.0 
    ├─┬ combined-stream@1.0.5 
    │ └── delayed-stream@1.0.0 
    ├── extend@3.0.1 
    ├── forever-agent@0.6.1 
    ├─┬ form-data@2.3.1 
    │ └── asynckit@0.4.0 
    ├─┬ har-validator@5.0.3 
    │ ├─┬ ajv@5.2.2 
    │ │ ├── co@4.6.0 
    │ │ ├── fast-deep-equal@1.0.0 
    │ │ ├── json-schema-traverse@0.3.1 
    │ │ └─┬ json-stable-stringify@1.0.1 
    │ │   └── jsonify@0.0.0 
    │ └── har-schema@2.0.0 
    ├─┬ hawk@6.0.2 
    │ ├── boom@4.3.1 
    │ ├─┬ cryptiles@3.1.2 
    │ │ └── boom@5.2.0 
    │ ├── hoek@4.2.0 
    │ └── sntp@2.0.2 
    ├─┬ http-signature@1.2.0 
    │ ├── assert-plus@1.0.0 
    │ ├─┬ jsprim@1.4.1 
    │ │ ├── extsprintf@1.3.0 
    │ │ ├── json-schema@0.2.3 
    │ │ └─┬ verror@1.10.0 
    │ │   └── core-util-is@1.0.2 
    │ └─┬ sshpk@1.13.1 
    │   ├── asn1@0.2.3 
    │   ├── bcrypt-pbkdf@1.0.1 
    │   ├── dashdash@1.14.1 
    │   ├── ecc-jsbn@0.1.1 
    │   ├── getpass@0.1.7 
    │   ├── jsbn@0.1.1 
    │   └── tweetnacl@0.14.5 
    ├── is-typedarray@1.0.0 
    ├── isstream@0.1.2 
    ├── json-stringify-safe@5.0.1 
    ├─┬ mime-types@2.1.17 
    │ └── mime-db@1.30.0 
    ├── oauth-sign@0.8.2 
    ├── performance-now@2.1.0 
    ├── qs@6.5.1 
    ├── safe-buffer@5.1.1 
    ├── stringstream@0.0.5 
    ├─┬ tough-cookie@2.3.2 
    │ └── punycode@1.4.1 
    ├── tunnel-agent@0.6.0 
    └── uuid@3.1.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/neutrinodb/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0674 took 4.1017s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: 'return' outside of function (112:0) on program var request = require('request');
var qs = require('querystring');

module.exports = function(url){
	return new NeutrinoClient(url);
};

function NeutrinoClient(address){
   this.address = address;
}

NeutrinoClient.prototype.get = function(table, key, cb){
	request.get(this.address + "/" + table + "/" + key, function(error, response, body){
		if (error) console.log(error);
		if (body == undefined){
			cb("Entity does not exist", undefined);
			return;
		}
		cb(error, JSON.parse(body));
	});
}

NeutrinoClient.prototype.put = function(table, key, entity, cb){
	request.put(this.address + "/" + table + "/" + key, {json:entity}, function(error, response, body){
		if (error) console.log(error);
		if (cb) cb(error);
	});
}

NeutrinoClient.prototype.del = function(table, key, cb){
	request.del(this.address + "/" + table + "/" + key, function(error, response, body){
		if (error) console.log(error);
		if (cb) cb(error);
	});
}

NeutrinoClient.prototype.tables = function(cb){
	request.get(this.address + "/", function(error, response, body){
		if (error) console.log(error);
		cb(error, JSON.parse(body));
	});
}

NeutrinoClient.prototype.createTable = function(table, cb){
	request.put(this.address + "/" + table, function(error, response, body){
		if (error) console.log(error);
		if (cb) cb(error);
	});
}

NeutrinoClient.prototype.deleteTable = function(table, cb){
	request.del(this.address + "/" + table, function(error, response, body){
		if (error) console.log(error);
		if (cb) cb(error);
	});
}

NeutrinoClient.prototype.query = function(table, query, options, cb){
	if (!options && !cb){
		// query is optional
		options = query;
		query = undefined;
	}

	if (!cb){
		// options are optional!
		cb = options;
		options = undefined;
	}
	var params = {};
	if (query){
		params["$filter"] = query;
	}
	if (options && options.top){
		params["$top"] = options.top;
	}
	if (options && options.skip){
		params["$skip"] = options.skip;
	}

	var url = this.address + "/" + table + "?" + qs.stringify(params);

	request.get(url, function(error, response, body){
		if (error) console.log(error);
		cb(error, JSON.parse(body));
	});
}

NeutrinoClient.prototype.registerView = function(name, table, query, cb){
	request.put(this.address + "/view/" + table + "/" + name + "?$filter=" + query, function(error, response, body){
		if (error) console.log(error);
		if (cb) cb();
	});
}

NeutrinoClient.prototype.queryView = function(name, value, cb){
	if (!cb){
		// value is optional;
		cb = value;
		value = undefined;
	}
	var url = this.address + "/view/" + name;
	if (undefined != value){
		url += "/" + value;
	}
	request.get(url, function(error, response, body){
		if (error) console.log(error);
		cb(error, JSON.parse(body));
	});
}

return;
var neutrino = new NeutrinoClient("http://localhost:8080");

/* UNIT TESTS */

var assert = require('assert');

// test table creation
neutrino.createTable('newTable', function(error){
	neutrino.tables(function(error, data){
		assert(listContains(data, 'newTable'));
		neutrino.deleteTable('newTable', function(){
			neutrino.tables(function(error, data2){
				assert(!listContains(data2, 'newTable'));
				console.log("Test simple entity creation passed");
			});
		})
	});
});

// test put/get entity
neutrino.createTable('test', function(){
	neutrino.put('test', '1', {foo:"bar", baz:"qux"}, function(error){
		assert(!error);
		neutrino.get('test', '1', function(error, entity){
			assert(!error);
			assert(entity.foo == "bar");
			assert(entity.baz == "qux");
			assert(entity.key == "1");

			neutrino.del('test', '1', function(error){
				neutrino.get('test', '1', function(error2, entity2){
					assert(error2);
					assert(!entity2);
					neutrino.deleteTable('test');
					console.log("Test simple entity creation passed");
				});
			});

		});

		neutrino.get('test', 'NOT AN ENTITY', function(error, entity){
			assert(error);
			assert(!entity);
		});

		neutrino.get('NOT A TABLE', '1', function(error, entity){
			assert(error);
			assert(!entity);
		});

	});
});

neutrino.createTable('test2', function(){
	neutrino.put('test2', '1', {foo:"A"});
	neutrino.put('test2', '2', {foo:"B"});
	neutrino.put('test2', '3', {foo:"C"});
	neutrino.put('test2', '4', {foo:"A"}, function(){
		neutrino.query('test2', "foo eq 'A'", function(error, data){
			assert(data.length == 2);
			assert(data[0].key == '1');
			assert(data[1].key == '4');
		});

		neutrino.query('test2', "foo eq 'A'", { top: 1}, function(error, data){
			assert(data.length == 1);
			assert(data[0].key == '1');
			console.log("Test querying passed");
		});

	});
});


neutrino.createTable('test3', function(){
	neutrino.registerView('view1', 'test3', "active eq 'Y'", function(){
		neutrino.put('test3', '1', {active: "N"});
		neutrino.put('test3', '2', {active: "N"});
		neutrino.put('test3', 'Z', {active: "Y"});
		neutrino.put('test3', '4', {active: "N"});
		neutrino.put('test3', '5', {active: "N"}, function(){
			//setTimeout(function(){
				neutrino.queryView('view1', function(error, body){
					assert(body.length == 1);
					assert(body[0].key == "Z");
					assert(body[0].active == 'Y');

					console.log("Test view registration passed");
				});
			//},1000);
		});
	});
});


neutrino.createTable('test4', function(){
	neutrino.put('test4', '1', {active: "A"});
	neutrino.put('test4', '2', {active: "A"});
	neutrino.put('test4', '3', {active: "B"});
	neutrino.put('test4', '4', {active: "A"});
	neutrino.put('test4', '5', {active: "A"}, function(){
		neutrino.registerView('view2', 'test4', "active eq 'B'", function(){

			neutrino.queryView('view2', function(error, body){
				assert(body.length == 1);
				assert(body[0].key == "3");
				assert(body[0].active == 'B');

				console.log("Test view registration and index rebuild passed");
			});
		});
	});
});

neutrino.createTable('test5', function(){
	neutrino.registerView('view3', 'test5', "test eq '?'", function(){

		neutrino.put('test5', '1', {test: "A"});
		neutrino.put('test5', '2', {test: "B"});
		neutrino.put('test5', '3', {test: "C"});
		neutrino.put('test5', '4', {test: "D"});
		neutrino.put('test5', '5', {test: "D"}, function(){
		
			neutrino.queryView('view3', "D", function(error, body){
				assert(body.length == 2);
				assert(body[0].key == "4");
				assert(body[0].test == 'D');
				assert(body[1].key == "5");
				assert(body[1].test == 'D');

				console.log("Test view registration and index rebuild passed");
			});

			neutrino.queryView('view3', "Z", function(error, body){
				assert(body.length == 0);
			});

			neutrino.queryView('view3', "B", function(error, body){
				assert(body.length == 1);
			});


		});
	});
});



function listContains(list, item){
	for (var i = 0; i < list.length; i++){
		if (list[i] === item) return true;
	}
	return false;
}
 at SyntaxError: 'return' outside of function (112:0)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$1.parseReturnStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:831:12)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:699:34)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
    at Parser.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:516:17)
    at Object.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:3098:39)
    at convert (/root/ExpoSE/lib/Tropigate/bin/main.js:50:18)
    at SymbolicExecution.instrumentCodePre (/root/ExpoSE/Analyser/bin/bundle.js:1474:24)
    at Object.instrumentCode (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/instrument/esnstrument.js:1928:37)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
