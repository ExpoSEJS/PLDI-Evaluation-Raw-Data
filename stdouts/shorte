/root/Targets/shorte
└─┬ shorte@1.0.1 
  └── validate.js@0.11.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/shorte/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0429 took 3.2933s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:6) on program 'use strict'

const assert = require('assert')
const validate = require('validate.js')
const EventEmitter = require('events')
const { registerShortcuts, unregisterShortcuts } = require('./lib/registrators')

module.exports = function ShortE (globalShortcut, leader, opts = {}) {
  assert(validate.isObject(globalShortcut), 'malformed globalShortcut object')
  assert(validate.isFunction(globalShortcut.register), 'malformed globalShortcut object')
  assert(validate.isFunction(globalShortcut.unregister), 'malformed globalShortcut object')
  assert(validate.isString(leader) || validate.isInteger(leader), 'invalid leader key')
  const debounceTime = opts.debounceTime || 0
  const cancel = validate.isDefined(opts.cancel) ? opts.cancel : 'Esc'
  assert(cancel !== leader, 'leader and cancel shortcuts cannot be identical')
  assert(validate.isInteger(debounceTime), 'debounceTime must be an integer')
  assert(validate.isString(cancel) || validate.isInteger(cancel), 'invalid cancelShortcut')
  let state = {
    globalShortcut,
    leader,
    cancel,
    debounceTime,
    shortcuts: {},
    timer: null,
    active: false
  }
  const emitter = new EventEmitter()
  const emitterMethods = Object.keys(EventEmitter.prototype).reduce((methods, key) => {
    if (typeof EventEmitter.prototype[key] === 'function') {
      methods[key] = emitter[key]
    }
    return methods
  }, {})
  const methods = Object.assign({}, emitterMethods, {
    register: function (shortcut, cb) {
      assert(
        validate.isString(shortcut) ||
        validate.isInteger(shortcut),
        'invalid shortcut key'
      )
      assert(
        validate.isFunction(cb),
        'invalid callback function'
      )
      state.shortcuts[shortcut] = cb
    }
  })
  globalShortcut.register(leader, () => registerShortcuts(state, emitter))
  globalShortcut.register(cancel, () => {
    clearTimeout(state.timer)
    unregisterShortcuts(state, emitter)
  })
  return Object.defineProperties(methods, {
    leader: {
      get: () => state.leader,
      set: (val) => {
        assert(validate.isString(val) || validate.isInteger(val), 'invalid leader key')
        assert(val !== state.cancel, 'leader and cancel shortcuts cannot be identical')
        globalShortcut.unregister(state.leader)
        globalShortcut.register(val, () => registerShortcuts(state, emitter))
        state.leader = val
      }
    },
    cancel: {
      get: () => state.cancel,
      set: (val) => {
        assert(validate.isString(val) || validate.isInteger(val), 'invalid cancel shortcut')
        assert(val !== state.leader, 'leader and cancel shortcuts cannot be identical')
        globalShortcut.unregister(state.cancel)
        globalShortcut.register(val, () => registerShortcuts(state, emitter))
        state.cancel = val
      }
    },
    debounceTime: {
      get: () => state.debounceTime,
      set: (val) => {
        assert(validate.isInteger(val), 'debounceTime must be an integer')
        state.debounceTime = val
      }
    },
    shortcuts: {
      get: () => Object.assign({}, state.shortcuts)
    },
    active: {
      get: () => state.active
    }
  })
}
 at SyntaxError: Unexpected token (3:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
