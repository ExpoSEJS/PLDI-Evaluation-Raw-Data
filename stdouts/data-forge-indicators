/root/Targets/data-forge-indicators
└─┬ data-forge-indicators@0.0.18 
  ├─┬ chai@3.5.0 
  │ ├── assertion-error@1.0.2 
  │ ├─┬ deep-eql@0.1.3 
  │ │ └── type-detect@0.1.1 
  │ └── type-detect@1.0.0 
  └── linq@3.0.9 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/data-forge-indicators/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0426 took 3.9662s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:5) on program 'use strict';

module.exports = function (dataForge) {

	var assert = require('chai').assert;
    var Enumerable = require('linq');

	/*
	 * Generate a simple moving average from the series.
	 *
	 * @param {int} period - The time period of the moving average.
	 */
    dataForge.Series.prototype.sma = function (period) {

    	assert.isNumber(period, "Expected 'period' parameter to 'sma' to be a number that specifies the time period of the moving average.");

        var self = this;
        return self.rollingWindow(period)
            .asPairs()
            .select(function (pair) {
                var window = pair[1];
                return [window.getIndex().last(), window.average()];
            })
            .asValues()
            ;
    };

    /*
     * Generate an exponential moving average from the series.
     *
     * @param {int} period - The time period of the moving average.
     */
    dataForge.Series.prototype.ema = function (period) {

        assert.isNumber(period, "Expected 'period' parameter to 'ema' to be a number that specifies the time period of the moving average.");

        var self = this;
        var inputIndex = self.getIndex().toArray();
        var inputValues = self.toArray();
        assert(inputIndex.length === inputValues.length);

        var indexValues = [];
        var averagedValues = [];
        var mult = (2 / (period + 1));

        if (inputValues.length < period) {
            return new dataForge.Series();
        }

        var avgValue = Enumerable.from(inputValues)
            .take(period)
            .average();

        indexValues.push(inputIndex[period-1]);
        averagedValues.push(avgValue)

        for (var curValueIndex = period; curValueIndex < inputValues.length; ++curValueIndex) {

            var curValue = inputValues[curValueIndex];
            avgValue = ((curValue - avgValue) * mult) + avgValue;

            indexValues.push(inputIndex[curValueIndex]);
            averagedValues.push(avgValue);
        }

        return new dataForge.Series({
                values: averagedValues,
                index: indexValues,
            });
    };
}; at SyntaxError: Unexpected token (5:5)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
