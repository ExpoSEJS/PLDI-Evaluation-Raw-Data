/root/Targets/itsa-react-anchorbutton
├─┬ itsa-react-anchorbutton@16.0.3 
│ ├─┬ itsa-dom@1.2.0 
│ │ └── itsa-jsext@1.4.0 
│ ├── itsa-utils@1.4.0 
│ └─┬ prop-types@15.6.0 
│   ├─┬ fbjs@0.8.16 
│   │ ├── core-js@1.2.7 
│   │ ├─┬ isomorphic-fetch@2.2.1 
│   │ │ ├─┬ node-fetch@1.7.3 
│   │ │ │ ├─┬ encoding@0.1.12 
│   │ │ │ │ └── iconv-lite@0.4.19 
│   │ │ │ └── is-stream@1.1.0 
│   │ │ └── whatwg-fetch@2.0.3 
│   │ ├─┬ promise@7.3.1 
│   │ │ └── asap@2.0.6 
│   │ ├── setimmediate@1.0.5 
│   │ └── ua-parser-js@0.7.14 
│   ├─┬ loose-envify@1.3.1 
│   │ └── js-tokens@3.0.2 
│   └── object-assign@4.1.1 
└── UNMET PEER DEPENDENCY react@>=15

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/itsa-react-anchorbutton/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0887 took 1.5054s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (118:12) on program "use strict";

/**
 * Description here
 *
 *
 *
 * <i>Copyright (c) 2016 ItsAsbreuk - http://itsasbreuk.nl</i><br>
 * New BSD License - http://choosealicense.com/licenses/bsd-3-clause/
 *
 *
 * @module itsa-react-anchorbutton.jsx
 * @class Component
 * @since 15.0.0
*/

require("itsa-dom");

const React = require("react"),
    PropTypes = require("prop-types"),
    MAIN_CLASS = "itsa-anchorbutton",
    FORM_ELEMENT_CLASS_SPACES = " itsa-formelement",
    utils = require("itsa-utils"),
    later = utils.later;

class Component extends React.Component {
    constructor(props) {
        super(props);
        const instance = this;
        instance.blur = instance.blur.bind(instance);
        instance.focus = instance.focus.bind(instance);
        instance.handleClick = instance.handleClick.bind(instance);
    }

    /**
     * Blurs the Component.
     *
     * @method blur
     * @chainable
     * @since 0.0.1
     */
    blur() {
        var instance = this;
        instance._anchorNode.blur();
        return instance;
    }

    /**
     * componentDidMount does some initialization.
     *
     * @method componentDidMount
     * @since 0.0.1
     */
    componentDidMount() {
        const instance = this;
        if (instance.props.autoFocus) {
            instance._focusLater = later(() => instance.focus(), 50);
        }
    }

    /**
     * componentWilUnmount does some cleanup.
     *
     * @method componentWillUnmount
     * @since 0.0.1
     */
    componentWillUnmount() {
        this._focusLater && this._focusLater.cancel();
    }

    /**
     * Sets the focus on the Component.
     *
     * @method focus
     * @param [transitionTime] {Number} transition-time to focus the element into the view
     * @chainable
     * @since 0.0.1
     */
    focus(transitionTime) {
        var instance = this;
        instance._anchorNode.itsa_focus && instance._anchorNode.itsa_focus(null, null, transitionTime);
        return instance;
    }

    /**
     * Callback-fn for the onClick-event.
     * Will invoke `this.props.onClick`
     *
     * @method handleClick
     * @since 0.0.1
     */
    handleClick(e) {
        const instance = this,
              props = instance.props,
              onClick = props.onClick;
        if (!props.disabled && !props.readOnly) {
            onClick && onClick.apply(null, arguments);
        }
        else {
            e.preventDefault();
        }
    }

    /**
     * React render-method --> renderes the Component.
     *
     * @method render
     * @return ReactComponent
     * @since 15.0.0
     */
    render() {
        let className = MAIN_CLASS+FORM_ELEMENT_CLASS_SPACES;
        const instance = this,
            props = instance.props,
            propsClass = props.className;
        propsClass && (className+=" "+propsClass);
        return (
            <a {...props}
                className={className}
                onClick={instance.handleClick}
                ref={node => instance._anchorNode = node} >
                {props.children}
            </a>
        );
    }
}

Component.propTypes = {
    /**
     * Whether to autofocus the Component.
     *
     * @property autoFocus
     * @type Boolean
     * @since 0.0.1
    */
    autoFocus: PropTypes.bool,

    /**
     * The Component its children
     *
     * @property children
     * @type String || Object || Array
     * @since 15.0.0
    */

    children: PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.array]),

    /**
     * Additional classname for the Component.
     *
     * @property className
     * @type String
     * @since 15.0.0
    */
    className: PropTypes.string,

    /**
     * Whether the button is disabled
     *
     * @property disabled
     * @type Boolean
     * @since 0.0.1
    */
    disabled: PropTypes.bool,

    /**
     * The url for the anchor-element.
     *
     * @default "#"
     * @property href
     * @type String
     * @since 0.0.1
    */
    href: PropTypes.string,

    /**
     * The name-attribute of the button
     *
     * @property name
     * @type String
     * @since 0.0.1
    */
    name: PropTypes.string,

    /**
     * Callback whenever the button gets clicked by the left mousebutton.
     *
     * @property onClick
     * @type Function
     * @since 0.0.1
    */
    onClick: PropTypes.func,

    /**
     * Whether the checkbox is readonly
     *
     * @property readOnly
     * @type Boolean
     * @default false
     * @since 15.2.0
    */
    readOnly: PropTypes.bool,

    /**
     * Inline style
     *
     * @property style
     * @type object
     * @since 0.0.1
    */
    style: PropTypes.object,

    /**
     * The tabIndex
     * Default: 1
     *
     * @property tabIndex
     * @type Number
     * @since 0.0.1
    */
    tabIndex: PropTypes.number,

    /**
     * The anchor-target where the response should go into.
     *
     * @property target
     * @type String
     * @since 0.0.1
    */
    target: PropTypes.string
};

Component.defaultProps = {
    autoFocus: false,
    disabled: false,
    href: "#",
    readOnly: false
};

module.exports = Component;
 at SyntaxError: Unexpected token (118:12)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseParenAndDistinguishExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1861:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
