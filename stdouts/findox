/root/Targets/findox
└─┬ findox@1.0.7 
  ├─┬ handlebars@4.0.10 
  │ ├── async@1.5.2 
  │ ├─┬ optimist@0.6.1 
  │ │ ├── minimist@0.0.10 
  │ │ └── wordwrap@0.0.3 
  │ ├─┬ source-map@0.4.4 
  │ │ └── amdefine@1.0.1 
  │ └─┬ uglify-js@2.8.29 
  │   ├── source-map@0.5.7 
  │   ├── uglify-to-browserify@1.0.2 
  │   └─┬ yargs@3.10.0 
  │     ├── camelcase@1.2.1 
  │     ├─┬ cliui@2.1.0 
  │     │ ├─┬ center-align@0.1.3 
  │     │ │ ├─┬ align-text@0.1.4 
  │     │ │ │ ├─┬ kind-of@3.2.2 
  │     │ │ │ │ └── is-buffer@1.1.5 
  │     │ │ │ ├── longest@1.0.1 
  │     │ │ │ └── repeat-string@1.6.1 
  │     │ │ └── lazy-cache@1.0.4 
  │     │ ├── right-align@0.1.3 
  │     │ └── wordwrap@0.0.2 
  │     ├── decamelize@1.2.0 
  │     └── window-size@0.1.0 
  ├── marked@0.3.6 
  ├─┬ node-static@0.7.10 
  │ ├── colors@1.1.2 
  │ └── mime@1.4.0 
  └─┬ socket.io@1.7.4 
    ├─┬ debug@2.3.3 
    │ └── ms@0.7.2 
    ├─┬ engine.io@1.8.4 
    │ ├─┬ accepts@1.3.3 
    │ │ ├─┬ mime-types@2.1.17 
    │ │ │ └── mime-db@1.30.0 
    │ │ └── negotiator@0.6.1 
    │ ├── base64id@1.0.0 
    │ ├── cookie@0.3.1 
    │ ├─┬ engine.io-parser@1.3.2 
    │ │ ├── after@0.8.2 
    │ │ ├── arraybuffer.slice@0.0.6 
    │ │ ├── base64-arraybuffer@0.1.5 
    │ │ ├── blob@0.0.4 
    │ │ └── wtf-8@1.0.0 
    │ └─┬ ws@1.1.4 
    │   ├── options@0.0.6 
    │   └── ultron@1.0.2 
    ├─┬ has-binary@0.1.7 
    │ └── isarray@0.0.1 
    ├── object-assign@4.1.0 
    ├── socket.io-adapter@0.5.0 
    ├─┬ socket.io-client@1.7.4 
    │ ├── backo2@1.0.2 
    │ ├── component-bind@1.0.0 
    │ ├── component-emitter@1.2.1 
    │ ├─┬ engine.io-client@1.8.4 
    │ │ ├── component-emitter@1.2.1 
    │ │ ├── component-inherit@0.0.3 
    │ │ ├── has-cors@1.1.0 
    │ │ ├── parsejson@0.0.3 
    │ │ ├── parseqs@0.0.5 
    │ │ ├── ws@1.1.2 
    │ │ ├── xmlhttprequest-ssl@1.5.3 
    │ │ └── yeast@0.1.2 
    │ ├── indexof@0.0.1 
    │ ├── object-component@0.0.3 
    │ ├─┬ parseuri@0.0.5 
    │ │ └─┬ better-assert@1.0.2 
    │ │   └── callsite@1.0.0 
    │ └── to-array@0.1.4 
    └─┬ socket.io-parser@2.3.1 
      ├── component-emitter@1.1.2 
      ├─┬ debug@2.2.0 
      │ └── ms@0.7.1 
      └── json3@3.3.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/findox/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0376 took 3.7129s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node 
if(~process.argv.indexOf("--version") || ~process.argv.indexOf("-v")) {
	console.log(require('../package.json').version);
	process.exit(0);
}

const fs = require('fs');
const path = require('path');
const static = require('node-static');
const read = require('./read.js');
const compile = require('./compile.js');
const assets = require('./assets.js');
const watcher = require('./watch.js');

var io,
	config,
	userconfig = {},
	stopWatching;

try {
	userconfig = require(path.join(process.cwd(),"findox.config.js"),"utf8");
}
catch(e) {
}

var config = {
	menu:userconfig.menu 					|| [],
	fixed_footer: userconfig.fixed_footer 	|| "",
	logo: userconfig.logo 					|| "",
	css: userconfig.css 					|| "",
	js: userconfig.js 						|| "",
	title: userconfig.title 				|| "Documentation",
	description: userconfig.description 	|| "documentation",
	baseurl: userconfig.baseurl 			|| "/",
	ga: userconfig.ga 						|| "123",
	disqusid: userconfig.disqusid 			|| "465",
	previewPort: userconfig.previewPort 	|| 3000
};

if(~process.argv.indexOf("-w") || ~process.argv.indexOf("--watch")) {
	config.baseurl = "http://127.0.0.1:"+config.previewPort;
	var file = new static.Server(process.cwd());
	const http = require('http').createServer((request, response) => {
	    request.addListener('end',()=>{
	        file.serve(request, response);
	    }).resume();
	}).listen(config.previewPort||3000);
	io = require('socket.io')(http);
}

config.baseurl.replace(/\/$/,"");

build();

function build () {
	read.articles()
	.then((groups)=>{
		// build links array
		config.links = groups.map((group)=>{
			return {
				name:group.name,
				articles:group.articles.map((article)=>{
					return {
						baseurl:config.baseurl,
						name:article.name.replace(/\.md/,""),
						link:slugify(group.name)+"/"+slugify(article.name.replace(/\.md/,""))+".html"
					};
				})
			};
		});
		// write files
		var promises = groups.reduce((newArr,group)=>{
			group.articles.forEach((article)=>{
				newArr.push(compileAndWrite(article.content,path.join(process.cwd(),slugify(group.name),slugify(article.name.replace(/\.md$/,""))+".html")));
			});
			return newArr;
		},[]);
		return promises;
	})
	.then(()=>read.home())
	.then((homeMD)=>compileAndWrite(homeMD,path.join(process.cwd(),"index.html")))
	.then(()=>assets(config.css,config.js,config))
	.then(()=>{
		if(~process.argv.indexOf("--watch") || ~process.argv.indexOf("-w")) {
			io.emit('reload',{for:'everyone'});
			if(stopWatching) stopWatching();
			stopWatching = new watcher(fs.readdirSync(process.cwd()).filter(x=>x==="readme.md"||/^\d\d\./.test(x))).watch(function(event,path){
				build();
			});
		}
	})
	.catch((err)=>{
		console.log(err);
	});
}

function compileAndWrite(data,filepath) {
	return new Promise((resolve,reject)=>{
		compile(data,config)
		.then((compiled)=>{
			mkdirp(path.dirname(filepath));
			fs.writeFile(filepath,compiled,function(err){
				if(err) throw err;
				console.log("	Written:",filepath);
				resolve();
			});
		})
		.catch((err)=>reject(err));
	});
}

function slugify(str) {
	return str.toString().toLowerCase().replace(/-+/g, '').replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
}


function isDir(dpath) {
    try {
        return fs.lstatSync(dpath).isDirectory();
    } catch(e) {
        return false;
    }
}

function mkdirp(dirname) {
    dirname = path.normalize(dirname).split(path.sep);
    dirname.forEach((sdir,index)=>{
        var pathInQuestion = dirname.slice(0,index+1).join(path.sep);
        if((!isDir(pathInQuestion)) && pathInQuestion) fs.mkdirSync(pathInQuestion);
    });
} at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
