/root/Targets/vue-loading-bar
└── vue-loading-bar@1.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/vue-loading-bar/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0624 took 4.5901s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:78) on program <style>
	.loading-bar{
		transition:all 0.3s ease;
		-moz-transition:all 0.3s ease;
		-webkit-transition:all 0.3s ease;
		-o-transition:all 0.3s ease;
	}
	.loading-bar{
		position: fixed;
		top: 0;
		background: #1AF184;
		height: 3px;
		opacity: 1;
	}
	.glow-bar{
		top: 0;
		position: absolute;
		width: 100px;
		height: 100%;
		box-shadow: -3px 0 15px 1px rgba(0, 255, 231, 0.4)
	}

	.to-right.loading-bar{
		left: 0;
	}
	.to-right .glow-bar{
		right: 0;
	}

	.to-left.loading-bar{
		right: 0;
	}
	.to-left .glow-bar{
		left: 0;
	}

	.full.loading-bar{
		transition:all 0.1s ease;
		-moz-transition:all 0.1s ease;
		-webkit-transition:all 0.1s ease;
		-o-transition:all 0.1s ease;
		height: 0;
		opacity: 0;
	}

	.error.loading-bar{
		background: #F44336;
	}
	.error .glow-bar{
		box-shadow: -3px 0 15px 1px rgba(244, 67, 54, 0.4);
	}
</style>

<template>
	<div 	v-if="show"
				class="loading-bar to-{{ direction }} {{ full }} {{ class != undefined ? class : '' }} {{ error ? 'error' : '' }}"
				:id="id != undefined ? 'loading-bar-'+id : ''"
				:style="styling()">

			<div class="glow-bar"></div>

	</div>
</template>

<script>
	/*! Copyright (c) 2016 Naufal Rabbani (http://github.com/BosNaufal)
	* Licensed Under MIT (http://opensource.org/licenses/MIT)
	*
	* Version 0.0.1
	*
	*/

	export default {
		props: {
			id: String,
			class: String,

			progress: Number, // The progress of loading bar

			// the direction of loading bar
			direction: {
				type: String,
				default: "right"
			},

			error: Boolean // Loading Bar error state
		},

		data() {
			return {
				// To show
				show: true,

				// binding class when it end
				full: '',

				// state to animate the width of loading bar
				width: 0,

				// indicate the loading bar is in 100% ( so, wait it till gone )
				wait: false
			};
		},

		watch:{

			progress(val,old){

				if(old == 0 && val > 0){
					// Callback Event when it's started
					this.$dispatch('loading-bar:started');
				}

				if(val > 1 && val < 100){
					// Callback Event when it's loading
					this.$dispatch('loading-bar:loading');
				}

				// When the progress end
				if(this.progress == 100){

					// Prevent new progress change
					this.wait = true;

					// Start animate it
					this.width = 100;

					setTimeout(() => {
						// animate when element removed
						this.full = 'full';
						this.error = false;

							setTimeout(() => {
								//remove bar element
								this.show = false;

								// New Element is available to create now
								this.progress = 0;
								this.wait = false;

								setTimeout(() => {
									// Show Bar
									this.full = '';
									this.show = true;

									// Callback Event when it's loaded and totally gone
									this.$dispatch('loading-bar:loaded');
								});

						// Duration to Waiting for slick hiding animation
						},250);

					// Duration is depend on css animation-duration of loading-bar
					},700);

				// When the progress doesn't end yet
				}else{

					// Do normaly loading bar animation
					this.full = '';
					this.width = val;

				}

			},

			error(val,old){
				this.progress = 100;
				// Callback Event when it's error
				this.$dispatch('loading-bar:error');
			}

		},

		methods: {
			styling(){
				// When loading bar still in progress
				if(!this.wait){
					return { width: `${this.width}%` };

				// When loading bar end
				}else{
					// Make it stuck at 100 to waiting the animation
					return{ width: `100%` };
				}

			}

		}

	}
</script>
 at SyntaxError: Unexpected token (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
