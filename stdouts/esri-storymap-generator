/root/Targets/esri-storymap-generator
└─┬ esri-storymap-generator@0.1.4 
  ├── async@2.5.0 
  ├─┬ exif@0.6.0 
  │ └─┬ debug@2.6.9 
  │   └── ms@2.0.0 
  ├─┬ fs-extra@0.30.0 
  │ ├── graceful-fs@4.1.11 
  │ ├── jsonfile@2.4.0 
  │ ├── klaw@1.3.1 
  │ ├── path-is-absolute@1.0.1 
  │ └─┬ rimraf@2.6.2 
  │   └─┬ glob@7.1.2 
  │     ├── fs.realpath@1.0.0 
  │     ├─┬ inflight@1.0.6 
  │     │ └── wrappy@1.0.2 
  │     ├── inherits@2.0.3 
  │     ├─┬ minimatch@3.0.4 
  │     │ └─┬ brace-expansion@1.1.8 
  │     │   ├── balanced-match@1.0.0 
  │     │   └── concat-map@0.0.1 
  │     └── once@1.4.0 
  ├─┬ jimp@0.2.28 
  │ ├── bignumber.js@2.4.0 
  │ ├── bmp-js@0.0.3 
  │ ├── es6-promise@3.3.1 
  │ ├── exif-parser@0.1.12 
  │ ├── file-type@3.9.0 
  │ ├── jpeg-js@0.2.0 
  │ ├─┬ load-bmfont@1.3.0 
  │ │ ├── buffer-equal@0.0.1 
  │ │ ├── parse-bmfont-ascii@1.0.6 
  │ │ ├── parse-bmfont-binary@1.0.6 
  │ │ ├─┬ parse-bmfont-xml@1.1.3 
  │ │ │ ├── xml-parse-from-string@1.0.1 
  │ │ │ └─┬ xml2js@0.4.19 
  │ │ │   ├── sax@1.2.4 
  │ │ │   └── xmlbuilder@9.0.4 
  │ │ ├─┬ xhr@2.4.0 
  │ │ │ ├─┬ global@4.3.2 
  │ │ │ │ ├─┬ min-document@2.19.0 
  │ │ │ │ │ └── dom-walk@0.1.1 
  │ │ │ │ └── process@0.5.2 
  │ │ │ ├── is-function@1.0.1 
  │ │ │ └─┬ parse-headers@2.0.1 
  │ │ │   ├── for-each@0.3.2 
  │ │ │   └── trim@0.0.1 
  │ │ └── xtend@4.0.1 
  │ ├── mime@1.4.1 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ ├── pixelmatch@4.0.2 
  │ ├── pngjs@3.3.0 
  │ ├── read-chunk@1.0.1 
  │ ├─┬ request@2.82.0 
  │ │ ├── aws-sign2@0.7.0 
  │ │ ├── aws4@1.6.0 
  │ │ ├── caseless@0.12.0 
  │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ └── delayed-stream@1.0.0 
  │ │ ├── extend@3.0.1 
  │ │ ├── forever-agent@0.6.1 
  │ │ ├─┬ form-data@2.3.1 
  │ │ │ └── asynckit@0.4.0 
  │ │ ├─┬ har-validator@5.0.3 
  │ │ │ ├─┬ ajv@5.2.3 
  │ │ │ │ ├── co@4.6.0 
  │ │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │ │   └── jsonify@0.0.0 
  │ │ │ └── har-schema@2.0.0 
  │ │ ├─┬ hawk@6.0.2 
  │ │ │ ├── boom@4.3.1 
  │ │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ │ └── boom@5.2.0 
  │ │ │ ├── hoek@4.2.0 
  │ │ │ └── sntp@2.0.2 
  │ │ ├─┬ http-signature@1.2.0 
  │ │ │ ├── assert-plus@1.0.0 
  │ │ │ ├─┬ jsprim@1.4.1 
  │ │ │ │ ├── extsprintf@1.3.0 
  │ │ │ │ ├── json-schema@0.2.3 
  │ │ │ │ └─┬ verror@1.10.0 
  │ │ │ │   └── core-util-is@1.0.2 
  │ │ │ └─┬ sshpk@1.13.1 
  │ │ │   ├── asn1@0.2.3 
  │ │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │   ├── dashdash@1.14.1 
  │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │   ├── getpass@0.1.7 
  │ │ │   ├── jsbn@0.1.1 
  │ │ │   └── tweetnacl@0.14.5 
  │ │ ├── is-typedarray@1.0.0 
  │ │ ├── isstream@0.1.2 
  │ │ ├── json-stringify-safe@5.0.1 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ ├── oauth-sign@0.8.2 
  │ │ ├── performance-now@2.1.0 
  │ │ ├── qs@6.5.1 
  │ │ ├── safe-buffer@5.1.1 
  │ │ ├── stringstream@0.0.5 
  │ │ ├─┬ tough-cookie@2.3.3 
  │ │ │ └── punycode@1.4.1 
  │ │ ├── tunnel-agent@0.6.0 
  │ │ └── uuid@3.1.0 
  │ ├─┬ stream-to-buffer@0.1.0 
  │ │ └── stream-to@0.2.2 
  │ ├── tinycolor2@1.4.1 
  │ └─┬ url-regex@3.2.0 
  │   └── ip-regex@1.0.3 
  ├── lodash@4.17.4 
  └─┬ path@0.12.7 
    ├── process@0.11.10 
    └─┬ util@0.10.3 
      └── inherits@2.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/esri-storymap-generator/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0345 took 3.5637s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #! /usr/bin/env node
"use strict";
var fs = require("fs");
var ExifImage = require("exif").ExifImage;
var async = require("async");
var Jimp = require("jimp");
var path = require('path');
var fse = require("fs-extra");
var iconSize = 45;
var previewSize = 200;
function resizeImage(original, target, size) {
    Jimp.read(original, function (err, image) {
        var w = image.bitmap.width;
        var h = image.bitmap.height;
        if (err) {
            return;
        }
        if (typeof image !== "undefined") {
            try {
                image.resize(size, (h / w) * size) // resize
                    .quality(95) // set JPEG quality                    
                    .write(target); // save
            }
            catch (e) {
            }
        }
    });
}
function exifToFeature(exifData, path) {
    var gps = exifData.gps;
    if (!gps.GPSLatitude) {
        return null;
    }
    var lat = gps.GPSLatitude[0] + gps.GPSLatitude[1] / 60 + gps.GPSLatitude[2] / 3600;
    var lng = gps.GPSLongitude[0] + gps.GPSLongitude[1] / 60 + gps.GPSLongitude[2] / 3600;
    if (gps.hasOwnProperty("GPSLatitudeRef") && gps.GPSLatitudeRef.toLowerCase() === "s") {
        lat = -lat;
    }
    if (gps.hasOwnProperty("GPSLongitudeRef") && gps.GPSLongitudeRef.toLowerCase() === "w") {
        lng = -lng;
    }
    var alt = gps.GPSAltitude | 0;
    var coord = alt ? [lng, lat, alt] : [lng, lat];
    var feat = {
        "type": "Feature",
        "properties": {},
        "geometry": {
            "type": "Point",
            "coordinates": coord
        }
    };
    // feat.properties.exif = exifData;
    // time the gps coordinate was taken
    if (gps.hasOwnProperty("GPSDateStamp")) {
        var gpsDateArr = gps.GPSDateStamp.split(":");
        var gpsDate = new Date(Date.UTC(parseInt(gpsDateArr[0]), parseInt(gpsDateArr[1]) - 1, // Jan is 0
        parseInt(gpsDateArr[2]), gps.GPSTimeStamp[0], gps.GPSTimeStamp[1], gps.GPSTimeStamp[2]));
        feat.properties.gpsTime = gpsDate.getTime();
        feat.properties.gpsTimeStr = gpsDate.toString();
    }
    // time the actual picture was taken.
    // NH FIXME: We are assuming the pic was taken in the current timezone?
    var imgStr = exifData.exif.CreateDate;
    if (imgStr) {
        imgStr = imgStr.replace(":", "-").replace(":", "-");
        var imgDate = new Date(imgStr);
        feat.properties.imgTime = imgDate.getTime();
        feat.properties.imgTimeStr = imgDate.toString();
    }
    return feat;
}
var geojson = {
    type: "FeatureCollection",
    features: []
};
var result = [];
var csv = "Tab_Name,Name,artist,copyright,date,lat,long,Website,pic_url,thumb_url,ico_url\n";
var count = 0;
var files = fs.readdirSync(".");
var website = "website//";
var images = website + "images//";
var original = images + "original//";
var thumbnails = images + "thumbnails//";
var icons = images + "icons//";
var websiteRoot = process.argv[2];
var global = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'] + "\\AppData\\Roaming\\npm\\node_modules\\esri-storymap-generator\\website\\";
console.log("Initialize website");
if (!fs.existsSync(website))
    fs.mkdirSync(website);
if (!fs.existsSync(images))
    fs.mkdirSync(images);
if (!fs.existsSync(original))
    fs.mkdirSync(original);
if (!fs.existsSync(thumbnails))
    fs.mkdirSync(thumbnails);
if (!fs.existsSync(icons))
    fs.mkdirSync(icons);
fse.copySync(global, website, { clobber: false });
console.log("Creating images");
async.eachSeries(files, function (file, cb) {
    var ext = path.extname(file).toLowerCase();
    if (ext !== ".jpg") {
        cb();
        return;
    }
    console.log(file);
    var opath = file;
    var safeFile = file.replace(/[^a-z0-9/.]/gi, "").toLowerCase();
    var name = file.replace(".jpg", "");
    var fpath = original + "/" + safeFile;
    if (!fs.existsSync(fpath)) {
        console.log(safeFile);
        try {
            fse.copySync(opath, fpath);
        }
        catch (e) {
        }
    }
    new ExifImage({ image: fpath }, function (error, exifData) {
        if (error) {
            console.log("error : " + error);
            cb(null);
        }
        else {
            delete exifData.exif.MakerNote;
            delete exifData.exif.UserComment;
            delete exifData.makernote;
            var preview = thumbnails + safeFile;
            var f = exifToFeature(exifData, fpath);
            if (f != null) {
                count += 1;
                var icon = icons + safeFile;
                f.properties.largeUrl = fpath;
                f.properties.iconUrl = icon;
                f.properties.description = exifData.image.ImageDescription;
                f.properties.artist = exifData.image.Artist;
                f.properties.date = exifData.image.ModifyDate;
                f.properties.copyright = exifData.image.Copyright;
                if (!fs.existsSync(icon)) {
                    resizeImage(fpath, icon, iconSize);
                }
                if (!fs.existsSync(preview)) {
                    resizeImage(fpath, preview, previewSize);
                }
                f.properties.previewUrl = preview;
                if (f.geometry) {
                    csv += "test,\"" + f.properties.description + "\",\"" + f.properties.artist + "\",\"" + f.properties.copyright + "\"," + f.properties.date + "," + f.geometry.coordinates[1] + "," + f.geometry.coordinates[0] + ",,\"" + websiteRoot + "/images/original/" + safeFile + "\",\"" + websiteRoot + "/images/thumbnails/" + safeFile + "\",\"" + websiteRoot + "/images/icons/" + safeFile + "\"\n";
                }
                result.push(f);
            }
            cb(null);
        }
    });
}, function (r) {
    geojson.features = result;
    fs.writeFile(website + "result.json", JSON.stringify(geojson));
    fs.writeFile(website + "storymap.csv", csv);
});
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
