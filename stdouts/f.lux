/root/Targets/f.lux
└── f.lux@1.4.16 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/f.lux/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 37% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","RegExp","create","Map","Symbol"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0377 took 8.3704s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (27:4) on program "use strict";

exports.__esModule = true;
exports.default = assert;

var _lodash = require("lodash.has");

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require("lodash.isequal");

var _lodash4 = _interopRequireDefault(_lodash3);

var _isObject = require("./isObject");

var _isObject2 = _interopRequireDefault(_isObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
	Efficiently implements assertions by performing a noop when not in development mode, eg
	config.development == false. This means code like the following will not evaluate the
	@isRoot() call when not in development mode.

	assert (a) => a.not(@isRoot(), "root properties do not have parents")
*/
var assert = {
	equal: function equal(a, b) {
		if ((0, _isObject2.default)(a)) {
			if (!(0, _lodash4.default)(a, b)) {
				assertFailed("Objects not equal");
			}
		} else if (a != b) {
			assertFailed(a + " != " + b);
		}

		return this;
	},
	not: function not(val) {
		var msg = arguments.length <= 1 || arguments[1] === undefined ? "" : arguments[1];

		if (val) assertFailed(msg);

		return this;
	},
	is: function is(val) {
		var msg = arguments.length <= 1 || arguments[1] === undefined ? "" : arguments[1];

		if (!val) assertFailed(msg);

		return this;
	},
	has: function has(obj) {
		for (var _len = arguments.length, keys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			keys[_key - 1] = arguments[_key];
		}

		for (var i = 0, len = keys.length; i < len; i++) {
			if (!(0, _lodash2.default)(obj, keys[i])) {
				assertFailed("Object does not have key=" + keys[i]);
			}
		}

		return this;
	},
	hasOne: function hasOne(obj) {
		for (var _len2 = arguments.length, keys = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
			keys[_key2 - 1] = arguments[_key2];
		}

		for (var i = 0, len = keys.length; i < len; i++) {
			if ((0, _lodash2.default)(obj, keys[i])) {
				return this;
			}
		}

		assertFailed("Object does not have one of keys: " + keys.join(", "));
	}
};

function assertFailed(msg) {
	// do not write to consoule during testing
	if (typeof config != 'undefined' && !config.test) {
		console.error("Assertion failed: " + msg);
		alert("Assertion Failed: " + msg + "\n\nSee console for details.");
	}

	throw new Error(msg);
}

function assert(cb, context) {
	var configDebug = typeof config != 'undefined' && (config.development || config.debug);
	var envDevelopment = process.env.NODE_ENV !== 'production';

	if (configDebug || envDevelopment) {
		cb.call(context, assert);
	}
} at SyntaxError: Unexpected token (27:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/f.lux/node_modules/f.lux/lib/index.js. Coverage (Term): 11% Coverage (LOC): 9%
*- File /root/Targets/f.lux/node_modules/f.lux/lib/Access.js. Coverage (Term): 40% Coverage (LOC): 72%
*- File /root/Targets/f.lux/node_modules/lodash.has/index.js. Coverage (Term): 36% Coverage (LOC): 48%
*- File /root/Targets/f.lux/node_modules/es6-symbol/index.js. Coverage (Term): 86% Coverage (LOC): 100%
*- File /root/Targets/f.lux/node_modules/es6-symbol/is-implemented.js. Coverage (Term): 80% Coverage (LOC): 90%
*- File /root/Targets/f.lux/node_modules/f.lux/lib/ArrayProperty.js. Coverage (Term): 11% Coverage (LOC): 15%
*- File /root/Targets/f.lux/node_modules/akutils/lib/index.js. Coverage (Term): 9% Coverage (LOC): 6%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
