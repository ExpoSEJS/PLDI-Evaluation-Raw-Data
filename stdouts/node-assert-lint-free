/root/Targets/node-assert-lint-free
└─┬ node-assert-lint-free@0.0.2 
  └── JSLint-commonJS@0.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/node-assert-lint-free/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0483 took 5.0552s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:82) on program var assert = require('assert'),
    path = require('path'),
    underscore = require('underscore'),
    JSLINT = require('JSLint-commonJS'),
    fs = require('fs');

var walkTree = function(root, fn) {
    var filenameParts, extension, path, stat;
    var files = fs.readdirSync(root);
    files.forEach(function(file) {
        path = root + '/' + file;
        stat = fs.lstatSync(path);
        fn(path, stat);
        if (stat.isDirectory() && !stat.isSymbolicLink()) {
            walkTree(path, fn);
        }
    });
};

var getFilePaths = function(roots) {
    if (!_.isArray(roots)) {
        roots = [roots];
    }
    var paths = [];
    roots.forEach(function(root) {
        walkTree(root, function(file, stat) {
            filenameParts = file.split('.');
            extension = filenameParts[filenameParts.length - 1];
            if (extension == 'js' || extension == 'json') {
                paths.push(file);
            }
        });
    });
    return paths;
};

assertLintFree = exports.assertLintFree = function (root, options) {
    var paths = getFilePaths(root);
    var errors = {};
    paths.forEach(function(path) {
        var source = fs.readFileSync(path, 'utf8');
        var lintFree = JSLINT(source, options);
        if (!lintFree) {
            errors[path] = JSLINT.errors;
        }
    });
    Object.keys(errors).forEach(function(path) {
        errors[path].forEach(function(error) {
            // option to ignore an array of reasons
            var allowAssert = true;
            if (options && options.ignore) {
                options.ignore.forEach(function(reason) {
                    if (error && reason === error.reason) {
                        allowAssert = false;
                    }
                });
            }
            if (error && allowAssert) {
                assert.ok(
                    false, 
                    "\n\tProblem at line " + error.line + " character " + error.character + ": " + error.reason + "\n\tFile: " + path
                );
            }
        });
    });
};

module.exports = assertLintFree;
 at SyntaxError: Unexpected token (1:82)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
