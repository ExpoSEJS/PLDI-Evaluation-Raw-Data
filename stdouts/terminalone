/root/Targets/terminalone
└─┬ terminalone@0.5.1 
  ├── bluebird@3.5.0 
  ├─┬ json-refs@1.3.0 
  │ ├── native-promise-only@0.8.1 
  │ ├─┬ path-loader@0.2.1 
  │ │ └─┬ superagent@1.8.5 
  │ │   ├── component-emitter@1.2.1 
  │ │   ├── cookiejar@2.0.6 
  │ │   ├─┬ debug@2.6.8 
  │ │   │ └── ms@2.0.0 
  │ │   ├── extend@3.0.0 
  │ │   ├─┬ form-data@1.0.0-rc3 
  │ │   │ └── async@1.5.2 
  │ │   ├── formidable@1.0.17 
  │ │   ├── methods@1.1.2 
  │ │   ├── mime@1.3.4 
  │ │   ├── qs@2.3.3 
  │ │   ├─┬ readable-stream@1.0.27-1 
  │ │   │ ├── core-util-is@1.0.2 
  │ │   │ ├── inherits@2.0.3 
  │ │   │ ├── isarray@0.0.1 
  │ │   │ └── string_decoder@0.10.31 
  │ │   └── reduce-component@1.0.1 
  │ └── traverse@0.6.6 
  ├── jsonschema@1.2.0 
  ├── querystring@0.2.0 
  └─┬ request-promise@1.0.2 
    ├── bluebird@2.11.0 
    ├─┬ cls-bluebird@1.1.3 
    │ ├── is-bluebird@1.0.2 
    │ └── shimmer@1.1.0 
    ├── lodash@3.10.1 
    └─┬ request@2.82.0 
      ├── aws-sign2@0.7.0 
      ├── aws4@1.6.0 
      ├── caseless@0.12.0 
      ├─┬ combined-stream@1.0.5 
      │ └── delayed-stream@1.0.0 
      ├── extend@3.0.1 
      ├── forever-agent@0.6.1 
      ├─┬ form-data@2.3.1 
      │ └── asynckit@0.4.0 
      ├─┬ har-validator@5.0.3 
      │ ├─┬ ajv@5.2.2 
      │ │ ├── co@4.6.0 
      │ │ ├── fast-deep-equal@1.0.0 
      │ │ ├── json-schema-traverse@0.3.1 
      │ │ └─┬ json-stable-stringify@1.0.1 
      │ │   └── jsonify@0.0.0 
      │ └── har-schema@2.0.0 
      ├─┬ hawk@6.0.2 
      │ ├── boom@4.3.1 
      │ ├─┬ cryptiles@3.1.2 
      │ │ └── boom@5.2.0 
      │ ├── hoek@4.2.0 
      │ └── sntp@2.0.2 
      ├─┬ http-signature@1.2.0 
      │ ├── assert-plus@1.0.0 
      │ ├─┬ jsprim@1.4.1 
      │ │ ├── extsprintf@1.3.0 
      │ │ ├── json-schema@0.2.3 
      │ │ └── verror@1.10.0 
      │ └─┬ sshpk@1.13.1 
      │   ├── asn1@0.2.3 
      │   ├── bcrypt-pbkdf@1.0.1 
      │   ├── dashdash@1.14.1 
      │   ├── ecc-jsbn@0.1.1 
      │   ├── getpass@0.1.7 
      │   ├── jsbn@0.1.1 
      │   └── tweetnacl@0.14.5 
      ├── is-typedarray@1.0.0 
      ├── isstream@0.1.2 
      ├── json-stringify-safe@5.0.1 
      ├─┬ mime-types@2.1.17 
      │ └── mime-db@1.30.0 
      ├── oauth-sign@0.8.2 
      ├── performance-now@2.1.0 
      ├── qs@6.5.1 
      ├── safe-buffer@5.1.1 
      ├── stringstream@0.0.5 
      ├─┬ tough-cookie@2.3.2 
      │ └── punycode@1.4.1 
      ├── tunnel-agent@0.6.0 
      └── uuid@3.1.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/terminalone/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0631 took 3.5817s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: The keyword 'package' is reserved (10:8) on program var RequestPromise = require('request-promise');
var QueryString = require('querystring');
var Config = require('./common/config');
var BPromise = require('bluebird');
var OauthService = require('simple-oauth2');

var T1Connection = function (t1config) {
    this.cookieAuthed = false;
    this.t1config = t1config;
    var package = require('../package.json');
    this.requestHeaders = {
        'Accept': 'application/vnd.mediamath.v1+json',
        'User-Agent': package.name + '-node/' + package.version
    };

    if (!t1config.apiBaseUrl) {
        this.t1config.apiBaseUrl = Config.apiBaseUrl;
    }
    this.t1config.apiUrl = t1config.apiBaseUrl + '/api/v2.0/';
};

T1Connection.prototype.ensureAuthenticated = function () {
    var that = this;
    return BPromise.try(function () {
        if (!that.cookieAuthed && this.oauth2 === undefined) {
            return RequestPromise.post({
                jar: true,
                url: that.t1config.apiUrl + "login",
                headers: that.requestHeaders,
                withCredentials: true,
                form: {
                    user: that.t1config.user,
                    password: that.t1config.password,
                    api_key: that.t1config.api_key
                }
            }).then(function () {
                that.cookieAuthed = true;
            });

        } else if (that.oauth2) {
            if (that.oauth2Token) {
                if (that.oauth2Token.expired()) {
                    that.oauth2Token.refresh()
                        .then((result) => {
                            that.oauth2Token = result;
                            if (that.tokenUpdatedCallback !== undefined) {
                                that.tokenUpdatedCallback(result.token);
                            }
                        });
                }
            }
            else {
                BPromise.reject("No oauth2 token! Ensure the " +
                    "oauth2 flow is completed by calling getToken()");
            }
        }
    });
};

T1Connection.prototype.initializeOauth = function (tokenUpdatedCallback) {
    var that = this;
    var credentials = {
        client: {
            id: that.t1config.api_key,
            secret: that.t1config.client_secret
        },
        auth: {
            tokenHost: Config.apiBaseUrl,
            tokenPath: 'oauth2/v1.0/token',
            authorizePath: 'oauth2/v1.0/authorize'
        },
        http: {
            headers: that.requestHeaders
        }
    };
    that.tokenUpdatedCallback = tokenUpdatedCallback;
    that.oauth2 = OauthService.create(credentials);
};

// Call to start off the oauth2 flow
T1Connection.prototype.fetchAuthUrl = function (tokenUpdatedCallback) {
    var that = this;
    if (!that.oauth2) {
        that.initializeOauth(tokenUpdatedCallback);
    }
    return this.oauth2.authorizationCode.authorizeURL({
        redirect_uri: that.t1config.redirect_uri
    });
};

// your application should redirect to the T1 user authorisation URL fetched
// from fetchAuthUrl(). T1 will then 301 to your redirect_uri with a 'code' URL param.
// Use that code to obtain the access token. The flow is now complete.
// t1-node will handle setting the bearer headers, and renewing access.
T1Connection.prototype.getToken = function (code) {
    var that = this;
    that.tokenConfig = {
        code: code,
        redirect_uri: that.t1config.redirect_uri
    };
    return that.oauth2.authorizationCode.getToken(that.tokenConfig)
        .then((result) => {
            that.oauth2Token = that.oauth2.accessToken.create(result);
        });
};

T1Connection.prototype.copyHeaders = function (source, sink) {
    Object.keys(source).forEach(function (key) {
        sink[key] = source[key];
    });
};

T1Connection.prototype.get = function (endpoint) {
    var options = {
        jar: true,
        headers: this.requestHeaders,
        url: this.t1config.apiUrl + endpoint,
        withCredentials: true
    };
    return this.ensureAuthenticated()
        .then(function () {
            return RequestPromise.get(options);
        });
};

T1Connection.prototype.getSession = function () {
    return this.get('session');
};

T1Connection.prototype.post = function (endpoint, form) {
    var that = this;
    var formData = QueryString.stringify(form);
    var contentLength = formData.length;
    var postHeaders = {
        'Content-Length': contentLength,
        'Content-Type': 'application/x-www-form-urlencoded'
    };
    if (this.oauth2Token) {
        postHeaders.Authorization = 'Bearer ' + this.oauth2Token.token.access_token;
    }
    this.copyHeaders(this.requestHeaders, postHeaders);
    return this.ensureAuthenticated()
        .then(function () {
            return RequestPromise.post({
                    jar: true,
                    withCredentials: true,
                    headers: postHeaders,
                    url: that.t1config.apiUrl + endpoint,
                    body: formData
                }
            );
        });
};

T1Connection.prototype.buildQueryString = function (baseUrl, userParams) {
    var endpoint = baseUrl;
    if (!userParams) {
        userParams = {};
    }
    userParams.api_key = this.t1config.api_key !== undefined ? this.t1config.api_key : 'noapikey';

    var urlParams = [];
    if (userParams.limit !== undefined) {
        var entity = Object.keys(userParams.limit)[0];
        endpoint += ('/limit/' + entity +
        '=' + userParams.limit[entity]);
    }
    for (var p in userParams) {
        if (!userParams.hasOwnProperty(p)) {
            continue;
        }
        if (p === 'limit') {
            //skip
        }
        else if (p === 'with') {
            urlParams.push(userParams[p].map(function (i) {
                return 'with=' + i;
            }).join('&'));
        }
        else {
            urlParams.push(encodeURIComponent(p) + "=" + encodeURIComponent(userParams[p]));
        }
    }

    if (Object.keys(userParams).length > 0) {
        endpoint += '?' + urlParams.join("&");
    }

    return endpoint;
};


module.exports = T1Connection;
 at SyntaxError: The keyword 'package' is reserved (10:8)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$3.parseIdent (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2182:14)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:41:34)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
    at Parser.pp$3.parseFunctionBody (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2105:24)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/terminalone/node_modules/terminalone/index.js. Coverage (Term): 29% Coverage (LOC): 44%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
