/root/Targets/rest-sugar
└── rest-sugar@0.6.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/rest-sugar/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 20% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0432 took 11.4397s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Octal literal in strict mode (134:16) on program (function(root, factory) {
    if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory(require('is-js'));
    } else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['is-js'], function(is) {
            return (root.annotate = factory(is));
        });
    } else {
        // Browser globals (root is window)
        root.annotate = factory(root.is);
    }
}(this, function(is) {
    return function() {
        var doc = arguments[1];
        var functions = [];
        var preconditions = [];
        var postconditions = [];
        var name = arguments[0];
        var ret = function() {
            console.warn(red('\n"' + name + '" is missing dispatcher!'));
        };

        return attachMeta(ret);

        function on() {
            var len = arguments.length - 1;
            var fn = arguments[len];
            var inv = [];

            for(var i = 0; i < len; i++) {
                inv.push(arguments[i]);
            }

            functions.push(wrapFn(fn));
            preconditions.push(inv);

            return attachMeta(check(preconditions, postconditions, functions, name));
        }

        function satisfies(postCondition) {
            postconditions.push(postCondition);

            return attachMeta(check(preconditions, postconditions, functions, name));
        }

        function attachMeta(a) {
            a.on = on;
            a.satisfies = satisfies;

            a._doc = doc || '';
            a._preconditions = preconditions;
            a._postconditions = postconditions;
            a._name = name || '';

            return a;
        }
    };

    function wrapFn(a) {
        return is.fn(a)? a: function() {return a;};
    }

    function check(preconditions, postconditions, functions, name) {
        return function() {
            var args = Array.prototype.slice.call(arguments);
            var i, j, n, len1, len2, precondition, pre, allMatched, ret, failedPre;

            n = name || '<undefined>';
            for(i = 0, len1 = preconditions.length; i < len1; i++) {
                allMatched = true;
                precondition = preconditions[i];

                for(j = 0, len2 = precondition.length; j < len2; j++) {
                    pre = precondition[j];
                    pre = is.fn(pre)? pre: is.array(pre)? arr(pre): eq(pre);

                    if(!pre(args[j], args)) {
                        allMatched = false;
                        failedPre = pre;
                        break;
                    }
                }

                if(allMatched) {
                    return postOk(functions[i].apply(undefined, arguments), postconditions, args, n);
                }
            }

            warn('precondition', failedPre, n, args);
        };
    }

    function arr(pre) {
        return function(i) {
            return pre[0] === i;
        };
    }

    function eq(a) {
        return function(i) {
            return a === i;
        };
    }

    function postOk(res, postconditions, args, name) {
        var i, len, postcondition;

        if(!postconditions.length) return res;

        for(i = 0, len = postconditions.length; i < len; i++) {
            postcondition = postconditions[i];

            if(!postcondition.apply(undefined, [res].concat(args))) {
                warn('postcondition', postcondition, name, args);

                return false;
            }
        }

        console.log(res, postconditions, args);

        return res;
    }

    function warn(prefix, fn, name, args) {
        console.warn('\n' + yellow(name) + ' ' + prefix + '\n' + fn + '\nfailed with parameters (' + green(args.join(', ')) + ')!');
    }

    function red(str) {
        return '\033[31m' + str + '\033[0m';
    }

    function green(str) {
        return '\033[32m' + str + '\033[0m';
    }

    function yellow(str) {
        return '\033[33m' + str + '\033[0m';
    }
}));
 at SyntaxError: Octal literal in strict mode (134:16)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readEscapedChar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:3023:16)
    at Parser.pp$7.readString (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2935:23)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2724:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$1.parseReturnStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:832:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:699:34)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/rest-sugar/node_modules/rest-sugar/rest-sugar/index.js. Coverage (Term): 46% Coverage (LOC): 67%
*- File /root/Targets/rest-sugar/node_modules/rest-sugar/rest-sugar/core.js. Coverage (Term): 5% Coverage (LOC): 12%
*- File /root/Targets/rest-sugar/node_modules/async/lib/async.js. Coverage (Term): 10% Coverage (LOC): 14%
*- File /root/Targets/rest-sugar/node_modules/funkit/dist/index.js. Coverage (Term): 26% Coverage (LOC): 25%
*- File /root/Targets/rest-sugar/node_modules/funkit/dist/array.js. Coverage (Term): 33% Coverage (LOC): 33%
*- File /root/Targets/rest-sugar/node_modules/funkit/dist/functional/chain.js. Coverage (Term): 17% Coverage (LOC): 23%
*- File /root/Targets/rest-sugar/node_modules/is-js/is.js. Coverage (Term): 27% Coverage (LOC): 42%
*- File /root/Targets/rest-sugar/node_modules/funkit/dist/functional/each.js. Coverage (Term): 15% Coverage (LOC): 25%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
