/root/Targets/vue-simple-audio
└─┬ vue-simple-audio@1.0.6 
  ├── UNMET PEER DEPENDENCY babel-core@^6.8.0
  ├── UNMET PEER DEPENDENCY babel-loader@^6.2.4
  ├── UNMET PEER DEPENDENCY babel-plugin-transform-runtime@^6.8.0
  ├── UNMET PEER DEPENDENCY babel-preset-es2015@^6.6.0
  ├── UNMET PEER DEPENDENCY babel-runtime@^6.0.0
  ├── UNMET PEER DEPENDENCY css-loader@*
  ├── vue@2.4.4 
  ├── vue-hot-reload-api@1.3.3 
  ├─┬ vue-html-loader@1.2.4 
  │ ├─┬ es6-templates@0.2.3 
  │ │ ├─┬ recast@0.11.23 
  │ │ │ ├── ast-types@0.9.6 
  │ │ │ ├── esprima@3.1.3 
  │ │ │ └── private@0.1.7 
  │ │ └── through@2.3.8 
  │ ├── fastparse@1.1.1 
  │ ├─┬ html-minifier@2.1.7 
  │ │ ├─┬ change-case@3.0.1 
  │ │ │ ├── camel-case@3.0.0 
  │ │ │ ├── constant-case@2.0.0 
  │ │ │ ├── dot-case@2.1.1 
  │ │ │ ├── header-case@1.0.1 
  │ │ │ ├── is-lower-case@1.1.3 
  │ │ │ ├── is-upper-case@1.1.2 
  │ │ │ ├── lower-case@1.1.4 
  │ │ │ ├── lower-case-first@1.0.2 
  │ │ │ ├── no-case@2.3.2 
  │ │ │ ├── param-case@2.1.1 
  │ │ │ ├── pascal-case@2.0.1 
  │ │ │ ├── path-case@2.1.1 
  │ │ │ ├── sentence-case@2.1.1 
  │ │ │ ├── snake-case@2.1.0 
  │ │ │ ├── swap-case@1.1.2 
  │ │ │ ├── title-case@2.1.1 
  │ │ │ ├── upper-case@1.1.3 
  │ │ │ └── upper-case-first@1.1.2 
  │ │ ├─┬ clean-css@3.4.28 
  │ │ │ ├── commander@2.8.1 
  │ │ │ └─┬ source-map@0.4.4 
  │ │ │   └── amdefine@1.0.1 
  │ │ ├─┬ commander@2.9.0 
  │ │ │ └── graceful-readlink@1.0.1 
  │ │ ├── he@1.1.1 
  │ │ ├─┬ ncname@1.0.0 
  │ │ │ └── xml-char-classes@1.0.0 
  │ │ ├── relateurl@0.2.7 
  │ │ └─┬ uglify-js@2.6.4 
  │ │   ├── async@0.2.10 
  │ │   ├── uglify-to-browserify@1.0.2 
  │ │   └─┬ yargs@3.10.0 
  │ │     ├── camelcase@1.2.1 
  │ │     ├─┬ cliui@2.1.0 
  │ │     │ ├─┬ center-align@0.1.3 
  │ │     │ │ ├─┬ align-text@0.1.4 
  │ │     │ │ │ ├─┬ kind-of@3.2.2 
  │ │     │ │ │ │ └── is-buffer@1.1.5 
  │ │     │ │ │ ├── longest@1.0.1 
  │ │     │ │ │ └── repeat-string@1.6.1 
  │ │     │ │ └── lazy-cache@1.0.4 
  │ │     │ ├── right-align@0.1.3 
  │ │     │ └── wordwrap@0.0.2 
  │ │     ├── decamelize@1.2.0 
  │ │     └── window-size@0.1.0 
  │ ├─┬ loader-utils@1.1.0 
  │ │ ├── big.js@3.2.0 
  │ │ ├── emojis-list@2.1.0 
  │ │ └── json5@0.5.1 
  │ └── object-assign@4.1.1 
  ├─┬ vue-loader@8.7.0 
  │ ├─┬ autoprefixer@6.7.7 
  │ │ ├─┬ browserslist@1.7.7 
  │ │ │ └── electron-to-chromium@1.3.24 
  │ │ ├── caniuse-db@1.0.30000740 
  │ │ ├── normalize-range@0.1.2 
  │ │ ├── num2fraction@1.2.2 
  │ │ └── postcss-value-parser@3.3.0 
  │ ├─┬ consolidate@0.14.5 
  │ │ └── bluebird@3.5.0 
  │ ├── de-indent@1.0.2 
  │ ├── hash-sum@1.0.2 
  │ ├── loader-utils@0.2.17 
  │ ├── lru-cache@2.7.3 
  │ ├── parse5@2.2.3 
  │ ├─┬ postcss@5.2.17 
  │ │ ├─┬ chalk@1.1.3 
  │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ ├── escape-string-regexp@1.0.5 
  │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ └── ansi-regex@2.1.1 
  │ │ │ ├── strip-ansi@3.0.1 
  │ │ │ └── supports-color@2.0.0 
  │ │ ├── js-base64@2.3.2 
  │ │ └─┬ supports-color@3.2.3 
  │ │   └── has-flag@1.0.0 
  │ ├─┬ postcss-selector-parser@1.3.3 
  │ │ ├── flatten@1.0.2 
  │ │ ├── indexes-of@1.0.1 
  │ │ └── uniq@1.0.1 
  │ ├── source-map@0.5.7 
  │ └── vue-template-validator@1.1.5 
  └─┬ vue-style-loader@1.0.0 
    └── loader-utils@0.2.17 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/vue-simple-audio/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.1271 took 5.6891s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:78) on program <template>
  <div class="player"
       :style="{'background-color': bgColor,'transform':'scale(' + (parseInt(width)/190) +')'}">
    <div class="player-panel">
      <div class="player-panel-details">
        <div class="player-panel-title text-ellipsis" v-cloak :title="currentAudio.songname">
          {{currentAudio.songname}}
        </div>
        <div class="player-panel-time">
          <span class="player-time-current">{{ current | time }}</span>
          <span class="player-time-total">of {{ duration | time }}</span>
        </div>
      </div>
      <div class="player-panel-volume" @click="changeVolume($event)" ref="volume-control">
        <i class="player-volume-control" :volume-level="(6-index)*2" v-for="index in 5"
           :class="{'backBlack': (volume/2 - 5 + index > 0) ? true : false }"></i>
        <i class="icon-headphones" @click="noVolume()"></i>
        <i class="no-volume" v-show="!volume"></i>
      </div>
    </div>
    <div class="player-controls">
      <div class="player-buttons">
        <div class="player-btn">
          <span class="player-prev" @click="prev()"></span>
        </div>
        <div class="player-btn">
          <span class="player-pause" @click="toggleStatus()" :class="{'player-play':isPause}"></span>
        </div>
        <div class="player-btn">
          <span class="player-next" @click="next()"></span>
        </div>
      </div>
      <div style="clear: both"></div>
      <div class="player-range">
        <mt-range v-model="current" :min="0" :max="duration" :step="1"
                  @mousedown.native="changeRange($event)">
        </mt-range>
      </div>
    </div>
    <audio :src="currentAudio.url" id="player" :autoplay="autoPlay" :loop="loop" @timeupdate="timeChange()"
           @loadeddata="getDuration()" @ended="next()"
           ref="player" @error="next()">
    </audio>
  </div>
</template>

<script type="es6">
  import Range from '../lib/mint-range';
  import './style.css';

  export default {
    props: {
      autoPlay: {
        type: Boolean,
        default: true
      },
      repeat: {
        type: Boolean,
        default: true
      },
      loop: {
        type: Boolean,
        default: false
      },
      width: {
        type: String,
        default: '300'
      },
      initialVolume: {
        type: String,
        default: '60'
      },
      bgColor: {
        type: String,
        default: '#000000'
      },
      songs: {
        type: Array
      }
    },
    data: function () {
      return {
        RANGE_WIDTH: 180,
        current: 0,
        duration: 0,
        oldVolume: 0,
        audioIndex: 0,
        volume: parseInt(this.initialVolume) / 10,
        isPause: !this.autoPlay
      }
    },
    components:{
      'mt-range':Range
    },
    mounted: function () {
      this.$refs.player.volume = this.volume / 10;
    },
    computed: {
      currentAudio: function () {
        return this.songs[this.audioIndex];
      }
    },
    methods: {
      toggleStatus: function () {
        var player = this.$refs.player;
        this.isPause ? player.play() : player.pause();
        this.isPause = !this.isPause;
      },
      timeChange: function () {
        this.current = this.$refs.player.currentTime;
      },
      getDuration: function () {
        this.duration = this.$refs.player.duration;
      },
      changeRange: function (event) {
        var offset = event.offsetX;
        if (this.duration && offset < this.RANGE_WIDTH) {
          var currentClick = Math.floor(offset * this.duration / this.RANGE_WIDTH);
          this.$refs.player.currentTime = currentClick;
        }
      },
      changeVolume: function (event) {
        if (event.target.classList.contains('player-volume-control')) {
          this.volume = parseInt(event.target.getAttribute('volume-level'));
          this.$refs.player.volume = this.volume / 10;
        }
      },
      noVolume: function () {
        if (this.volume) {
          this.oldVolume = this.volume;
          this.volume = 0;
        } else {
          this.volume = this.oldVolume;
        }
        this.$refs.player.volume = this.volume / 10;
      },
      prev: function () {
        if (this.audioIndex == 0) {
          if (this.repeat) {
            this.audioIndex = this.songs.length - 1;
          }
        } else {
          this.audioIndex--;
        }
      },
      next: function () {
        if (this.audioIndex == this.songs.length - 1) {
          if (this.repeat) {
            this.audioIndex = 0;
          }
        } else {
          this.audioIndex++;
        }
      }
    },
    filters: {
      time: function (value) {
        var length = Math.floor(parseInt(value));
        var minute = Math.floor(value / 60);
        if (minute < 10) {
          minute = '0' + minute;
        }
        var second = length % 60;
        if (second < 10) {
          second = '0' + second;
        }
        return minute + ':' + second;
      }
    }
  }
</script>

 at SyntaxError: Unexpected token (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/vue-simple-audio/node_modules/vue-simple-audio/src/index.js. Coverage (Term): 80% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
