/root/Targets/ciffi
└─┬ ciffi@0.24.2 
  ├─┬ chalk@2.1.0 
  │ ├─┬ ansi-styles@3.2.0 
  │ │ └─┬ color-convert@1.9.0 
  │ │   └── color-name@1.1.3 
  │ ├── escape-string-regexp@1.0.5 
  │ └─┬ supports-color@4.4.0 
  │   └── has-flag@2.0.0 
  ├── ciffi-js-webpack@0.11.3 
  ├─┬ cli-cursor@2.1.0 
  │ └─┬ restore-cursor@2.0.0 
  │   ├─┬ onetime@2.0.1 
  │   │ └── mimic-fn@1.1.0 
  │   └── signal-exit@3.0.2 
  ├── cli-spinners@1.0.1 
  ├─┬ empty-dir@0.2.1 
  │ └── fs-exists-sync@0.1.0 
  ├── file-exists@4.0.0 
  ├── foreach@2.0.5 
  ├─┬ inquirer@3.3.0 
  │ ├── ansi-escapes@3.0.0 
  │ ├── cli-width@2.2.0 
  │ ├─┬ external-editor@2.0.5 
  │ │ ├── iconv-lite@0.4.19 
  │ │ ├── jschardet@1.5.1 
  │ │ └─┬ tmp@0.0.33 
  │ │   └── os-tmpdir@1.0.2 
  │ ├── figures@2.0.0 
  │ ├── lodash@4.17.4 
  │ ├── mute-stream@0.0.7 
  │ ├─┬ run-async@2.3.0 
  │ │ └── is-promise@2.1.0 
  │ ├── rx-lite@4.0.8 
  │ ├── rx-lite-aggregates@4.0.8 
  │ ├─┬ string-width@2.1.1 
  │ │ └── is-fullwidth-code-point@2.0.0 
  │ ├─┬ strip-ansi@4.0.0 
  │ │ └── ansi-regex@3.0.0 
  │ └── through@2.3.8 
  ├─┬ meow@3.7.0 
  │ ├─┬ camelcase-keys@2.1.0 
  │ │ └── camelcase@2.1.1 
  │ ├── decamelize@1.2.0 
  │ ├─┬ loud-rejection@1.6.0 
  │ │ └─┬ currently-unhandled@0.4.1 
  │ │   └── array-find-index@1.0.2 
  │ ├── map-obj@1.0.1 
  │ ├── minimist@1.2.0 
  │ ├─┬ normalize-package-data@2.4.0 
  │ │ ├── hosted-git-info@2.5.0 
  │ │ ├─┬ is-builtin-module@1.0.0 
  │ │ │ └── builtin-modules@1.1.1 
  │ │ ├── semver@5.4.1 
  │ │ └─┬ validate-npm-package-license@3.0.1 
  │ │   ├─┬ spdx-correct@1.0.2 
  │ │   │ └── spdx-license-ids@1.2.2 
  │ │   └── spdx-expression-parse@1.0.4 
  │ ├── object-assign@4.1.1 
  │ ├─┬ read-pkg-up@1.0.1 
  │ │ ├─┬ find-up@1.1.2 
  │ │ │ ├── path-exists@2.1.0 
  │ │ │ └─┬ pinkie-promise@2.0.1 
  │ │ │   └── pinkie@2.0.4 
  │ │ └─┬ read-pkg@1.1.0 
  │ │   ├─┬ load-json-file@1.1.0 
  │ │   │ ├── graceful-fs@4.1.11 
  │ │   │ ├─┬ parse-json@2.2.0 
  │ │   │ │ └─┬ error-ex@1.3.1 
  │ │   │ │   └── is-arrayish@0.2.1 
  │ │   │ ├── pify@2.3.0 
  │ │   │ └─┬ strip-bom@2.0.0 
  │ │   │   └── is-utf8@0.2.1 
  │ │   └── path-type@1.1.0 
  │ ├─┬ redent@1.0.0 
  │ │ ├─┬ indent-string@2.1.0 
  │ │ │ └─┬ repeating@2.0.1 
  │ │ │   └── is-finite@1.0.2 
  │ │ └─┬ strip-indent@1.0.1 
  │ │   └── get-stdin@4.0.1 
  │ └── trim-newlines@1.0.0 
  ├─┬ ora@1.3.0 
  │ ├─┬ chalk@1.1.3 
  │ │ ├── ansi-styles@2.2.1 
  │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ └── ansi-regex@2.1.1 
  │ │ ├─┬ strip-ansi@3.0.1 
  │ │ │ └── ansi-regex@2.1.1 
  │ │ └── supports-color@2.0.0 
  │ └─┬ log-symbols@1.0.2 
  │   └─┬ chalk@1.1.3 
  │     ├── ansi-styles@2.2.1 
  │     ├─┬ strip-ansi@3.0.1 
  │     │ └── ansi-regex@2.1.1 
  │     └── supports-color@2.0.0 
  ├── path-exists@3.0.0 
  ├─┬ replace-in-file@2.6.4 
  │ ├─┬ glob@7.1.2 
  │ │ ├── fs.realpath@1.0.0 
  │ │ ├─┬ inflight@1.0.6 
  │ │ │ └── wrappy@1.0.2 
  │ │ ├── inherits@2.0.3 
  │ │ ├─┬ minimatch@3.0.4 
  │ │ │ └─┬ brace-expansion@1.1.8 
  │ │ │   ├── balanced-match@1.0.0 
  │ │ │   └── concat-map@0.0.1 
  │ │ ├── once@1.4.0 
  │ │ └── path-is-absolute@1.0.1 
  │ └─┬ yargs@8.0.2 
  │   ├── camelcase@4.1.0 
  │   ├─┬ cliui@3.2.0 
  │   │ ├─┬ string-width@1.0.2 
  │   │ │ └── is-fullwidth-code-point@1.0.0 
  │   │ ├─┬ strip-ansi@3.0.1 
  │   │ │ └── ansi-regex@2.1.1 
  │   │ └─┬ wrap-ansi@2.1.0 
  │   │   ├─┬ string-width@1.0.2 
  │   │   │ └── is-fullwidth-code-point@1.0.0 
  │   │   └─┬ strip-ansi@3.0.1 
  │   │     └── ansi-regex@2.1.1 
  │   ├── get-caller-file@1.0.2 
  │   ├─┬ os-locale@2.1.0 
  │   │ ├─┬ execa@0.7.0 
  │   │ │ ├─┬ cross-spawn@5.1.0 
  │   │ │ │ ├─┬ lru-cache@4.1.1 
  │   │ │ │ │ ├── pseudomap@1.0.2 
  │   │ │ │ │ └── yallist@2.1.2 
  │   │ │ │ ├─┬ shebang-command@1.2.0 
  │   │ │ │ │ └── shebang-regex@1.0.0 
  │   │ │ │ └─┬ which@1.3.0 
  │   │ │ │   └── isexe@2.0.0 
  │   │ │ ├── get-stream@3.0.0 
  │   │ │ ├── is-stream@1.1.0 
  │   │ │ ├─┬ npm-run-path@2.0.2 
  │   │ │ │ └── path-key@2.0.1 
  │   │ │ ├── p-finally@1.0.0 
  │   │ │ └── strip-eof@1.0.0 
  │   │ ├─┬ lcid@1.0.0 
  │   │ │ └── invert-kv@1.0.0 
  │   │ └── mem@1.1.0 
  │   ├─┬ read-pkg-up@2.0.0 
  │   │ ├─┬ find-up@2.1.0 
  │   │ │ └─┬ locate-path@2.0.0 
  │   │ │   └─┬ p-locate@2.0.0 
  │   │ │     └── p-limit@1.1.0 
  │   │ └─┬ read-pkg@2.0.0 
  │   │   ├─┬ load-json-file@2.0.0 
  │   │   │ └── strip-bom@3.0.0 
  │   │   └── path-type@2.0.0 
  │   ├── require-directory@2.1.1 
  │   ├── require-main-filename@1.0.1 
  │   ├── set-blocking@2.0.0 
  │   ├── which-module@2.0.0 
  │   ├── y18n@3.2.1 
  │   └─┬ yargs-parser@7.0.0 
  │     └── camelcase@4.1.0 
  ├─┬ shelljs@0.7.8 
  │ ├── interpret@1.0.4 
  │ └─┬ rechoir@0.6.2 
  │   └─┬ resolve@1.4.0 
  │     └── path-parse@1.0.5 
  └─┬ single-line-log@1.1.2 
    └─┬ string-width@1.0.2 
      ├── code-point-at@1.1.0 
      ├─┬ is-fullwidth-code-point@1.0.0 
      │ └── number-is-nan@1.0.1 
      └─┬ strip-ansi@3.0.1 
        └── ansi-regex@2.1.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/ciffi/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0568 took 3.142s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #! /usr/bin/env node
'use strict';

var meow = require('meow');
var chalk = require('chalk');
var pkg = require('./package.json');
var cliCursor = require('cli-cursor');
var Commands = require('./command/app-commands');
var exec = require('child_process').exec;
var fileExists = require('file-exists');
var ConfigFile = process.env.PWD + '/.ciffisettings';

var cli = meow({
	pkg: pkg
});

var opts = cli.flags;
var args = cli.input;
var cmd = args[0];
var projectName = args[1];

pkg = cli.pkg;

Object.keys(opts).forEach(function (key) {
	var legacyKey = key.replace(/[A-Z]/g, function (m) {
		return '-' + m.toLowerCase();
	});
	
	opts[legacyKey] = opts[key];
});

var _process = exec('npm config get prefix');

_process.stdout.on('data', function (path) {
	var _modulePath = path.trim();
	
	start(_modulePath);
});

function start(modulePath) {
	if (!cmd) {
		if (opts.h) {
			showCommandListMsg();
		} else if (opts.v) {
			console.log(chalk.magenta.bold(pkg.version));
		} else if (opts.a) {
			console.log(chalk.blue(pkg.author.name));
		} else if (opts.logo) {
			showLogo();
		} else if (opts.postsetup) {
			cliCursor.show();
			showGreetings();
		} else {
			showCommandErrorMessage();
		}
	} else {
		
		var _cmd = cmd;
		var _env = fileExists.sync(ConfigFile) && require(ConfigFile).defaultBuildEnv ? require(ConfigFile).defaultBuildEnv : 'local';
		
		if (cmd.indexOf('build:') === 0) {
			_cmd = 'build';
			_env = cmd.split(':')[1];
		}
		
		switch (_cmd) {
			case 'setup':
				var Setup = require('./command/app-setup')(modulePath);
				new Setup({
					projectName: projectName
				});
				break;
			case 'update':
				require('./command/app-update');
				break;
			case 'serve':
				require('./command/app-serve');
				break;
			case 'dev':
				require('./command/app-dev');
				break;
			case 'build':
				require('./command/app-build')(_env);
				break;
			case 'build-es6':
				require('./command/app-build-es6');
				break;
			case 'build-prod':
				console.log(chalk.red.bold('Sorry, but build-prod task is still not available'));
				//require('./command/app-build-prod');
				break;
			case 'dev-old':
				require('./command/app-dev-old');
				break;
			case 'build-old':
				require('./command/app-build-prod');
				break;
			case 'dev-unit':
				console.log(chalk.red.bold('Sorry, but dev-unit task is still not available'));
				//require('./command/app-test').devUnit();
				break;
			case 'unit':
				console.log(chalk.red.bold('Sorry, but unit task is still not available'));
				//require('./command/app-test').unit();
				break;
			case 'e2e':
				var _args = false;
				if (args[1]) {
					_args = args;
				}
				require('./command/app-test').e2e(_args);
				break;
			case 'newpage':
				var Page = require('./command/app-newpage')(modulePath);
				new Page({
					pageName: projectName
				});
				break;
			case 'newmodule':
				var Module = require('./command/app-newmodule')(modulePath);
				new Module({
					moduleName: projectName
				});
				break;
			case 'newcomponent':
				var Component = require('./command/app-newcomponent')(modulePath);
				new Component({
					componentName: projectName
				});
				break;
			case 'jsdoc':
				require('./command/app-doc').jsdoc();
				break;
			case 'cssdoc':
				require('./command/app-doc').cssdoc();
				break;
			case 'styleguide':
				require('./command/app-doc').styleguide();
				break;
			case 'assets':
				require('./command/app-assets');
				break;
			case 'styles':
				require('./command/app-styles');
				break;
			default:
				showCommandErrorMessage();
				break;
		}
	}
}

function showCommandErrorMessage() {
	console.log('');
	console.log('');
	console.log(chalk.red.bold('Command not found'));
	console.log('');
	console.log(chalk.blue('ciffi -h') + chalk.green(' -- commands list --'));
	console.log('');
}

function showGreetings() {
	console.log('');
	console.log('');
	Commands.show();
	console.log(chalk.blue.bold(pkg.author.name) + chalk.blue.bold(' ^_^'));
	console.log('');
}

function showCommandListMsg() {
	console.log('');
	console.log('');
	console.log(chalk.green.bold('-- Ciffi Frontend Generator --'));
	console.log('');
	console.log('');
	console.log('Available commands:');
	console.log('');
	Commands.show();
	console.log('');
}

function showLogo() {
	console.log(chalk.black(''));
	console.log(chalk.black('           `-+shmNNNNNNmhy+:`           '));
	console.log(chalk.black('        .odNmmNNNNNNNNNNNNmmNdo-        '));
	console.log(chalk.black('      /dNmmNMMMMMMMMMMMMsmMMNmmNm+      '));
	console.log(chalk.black('    :mNmNMMMMMMm:NMMMMMM:NMMMMMNmNN/    '));
	console.log(chalk.black('   sMmNMMMMMMMMMm:NMMMMM-MMMMMMMMhmMh`  '));
	console.log(chalk.black('  hMdMhssymMMMMMMd:MMMMyoMMMMMNs+dMdNm` '));
	console.log(chalk.black(' yMdMMMMMNhsoyNMMMsoMMy+MMMMmoomMMMMdMd '));
	console.log(chalk.black(':MdMMMMMMMMMMNsosNM-NsoMmysosNMMMMMMMdM+'));
	console.log(chalk.black('hMdMMMMMMMMMMdos:-+:+-s::+sssssNMMMMMmMm'));
	console.log(chalk.black('mMmMMMMMMMMNy.dMdM:-mmooddohMMMMMMMMMMdM'));
	console.log(chalk.black('mMmMMMMMMMMNy.mMmM:-mmoodhohMMMMMMMMMMdM'));
	console.log(chalk.black('hMdMMMMMMMMMMdos:-/:+-o-:osssssNMMMMMmNm'));
	console.log(chalk.black(':MdMMMMMMMMMMNyosNM-NsoMmysoyMMMMMMMMdMo'));
	console.log(chalk.black(' yMdMMMMMNhsosmMMMyoMMy+MMMMmooNMMMMdNm '));
	console.log(chalk.black(' `dMdMhssydMMMMMMd:MMMMyoMMMMMNsodMmNm. '));
	console.log(chalk.black('   yMmNMMMMMMMMMm:NMMMMM-MMMMMMMMhmMh`  '));
	console.log(chalk.black('    :mNmNMMMMMMm:NMMMMMM:NMMMMMNmNN+    '));
	console.log(chalk.black('      /dNmmNMMMMMMMMMMMMsmMMNmmNm+`     '));
	console.log(chalk.black('        .odNmmNNNNNMMMNNNNmmNms-        '));
	console.log(chalk.black('           `:oydmNNNNNNmdyo:`           '));
	console.log(chalk.black(''));
} at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
