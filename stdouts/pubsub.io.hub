/root/Targets/pubsub.io.hub
└─┬ pubsub.io.hub@0.5.6 
  ├── common@0.1.2 
  ├─┬ curl@0.1.4 
  │ ├─┬ request@2.83.0 
  │ │ ├── aws-sign2@0.7.0 
  │ │ ├── aws4@1.6.0 
  │ │ ├── caseless@0.12.0 
  │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ └── delayed-stream@1.0.0 
  │ │ ├── extend@3.0.1 
  │ │ ├── forever-agent@0.6.1 
  │ │ ├─┬ form-data@2.3.1 
  │ │ │ └── asynckit@0.4.0 
  │ │ ├─┬ har-validator@5.0.3 
  │ │ │ ├─┬ ajv@5.2.3 
  │ │ │ │ ├── co@4.6.0 
  │ │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │ │   └── jsonify@0.0.0 
  │ │ │ └── har-schema@2.0.0 
  │ │ ├─┬ hawk@6.0.2 
  │ │ │ ├── boom@4.3.1 
  │ │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ │ └── boom@5.2.0 
  │ │ │ ├── hoek@4.2.0 
  │ │ │ └── sntp@2.0.2 
  │ │ ├─┬ http-signature@1.2.0 
  │ │ │ ├── assert-plus@1.0.0 
  │ │ │ ├─┬ jsprim@1.4.1 
  │ │ │ │ ├── extsprintf@1.3.0 
  │ │ │ │ ├── json-schema@0.2.3 
  │ │ │ │ └── verror@1.10.0 
  │ │ │ └─┬ sshpk@1.13.1 
  │ │ │   ├── asn1@0.2.3 
  │ │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │   ├── dashdash@1.14.1 
  │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │   ├── getpass@0.1.7 
  │ │ │   ├── jsbn@0.1.1 
  │ │ │   └── tweetnacl@0.14.5 
  │ │ ├── is-typedarray@1.0.0 
  │ │ ├── isstream@0.1.2 
  │ │ ├── json-stringify-safe@5.0.1 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ ├── oauth-sign@0.8.2 
  │ │ ├── performance-now@2.1.0 
  │ │ ├── qs@6.5.1 
  │ │ ├── safe-buffer@5.1.1 
  │ │ ├── stringstream@0.0.5 
  │ │ ├─┬ tough-cookie@2.3.3 
  │ │ │ └── punycode@1.4.1 
  │ │ ├── tunnel-agent@0.6.0 
  │ │ └── uuid@3.1.0 
  │ └─┬ router@1.3.2 
  │   ├── array-flatten@2.1.1 
  │   ├─┬ debug@2.6.9 
  │   │ └── ms@2.0.0 
  │   ├── methods@1.1.2 
  │   ├── parseurl@1.3.2 
  │   ├── path-to-regexp@0.1.7 
  │   ├── setprototypeof@1.1.0 
  │   └── utils-merge@1.0.1 
  ├── json-sockets@0.2.0 
  ├─┬ mongojs@0.1.6 
  │ └─┬ mongodb@2.2.31 
  │   ├── es6-promise@3.2.1 
  │   ├─┬ mongodb-core@2.1.15 
  │   │ ├── bson@1.0.4 
  │   │ └─┬ require_optional@1.0.1 
  │   │   ├── resolve-from@2.0.0 
  │   │   └── semver@5.4.1 
  │   └─┬ readable-stream@2.2.7 
  │     ├── buffer-shims@1.0.0 
  │     ├── core-util-is@1.0.2 
  │     ├── inherits@2.0.3 
  │     ├── isarray@1.0.0 
  │     ├── process-nextick-args@1.0.7 
  │     ├── string_decoder@1.0.3 
  │     └── util-deprecate@1.0.2 
  └─┬ optimist@0.2.6 
    └── wordwrap@0.0.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/pubsub.io.hub/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0288 took 3.6295s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

// TODO: make optimist print out help

var argv = require('optimist')
	.alias('p', 'port')
	.default('p', 9999)
	.alias('k', 'key')
	.alias('c','config')
	.argv;

var router = require('./../modules/router');
var sockets = require('./../modules/json-sockets');
var common = require('common');
var curl = require('curl');
var parse = require('url').parse;
var signer = require('./../modules/signer');
var hubs = require('./hubs');

var hooks = {};

var server = router.create();

var noop = function() {};

var error = function(message) {
   var err = new Error('internal error');

   err.publicMessage = message;
   return err;
};

var toJSON = function(request, callback) {
	var buffer = '';
	var onclose = function() {
		callback(new Error('unexpected close'));
	};
	
	request.setEncoding('utf-8');
	
	request.on('data', function(data) {
		buffer += data;
	});
	request.on('end', function() {
		request.removeListener('close', onclose);
		try {
			buffer = JSON.parse(buffer);			
		} catch (err) {
			callback(err);
			return;
		}
		callback(null, buffer);
	});
	request.on('close', onclose);
};

var onhookpublish = function(sub, request, response) {
	common.step([
		function(next) {
			toJSON(request, next);
		}, 
		function(message) {
			hubs.use(sub).publish(message.doc, message.challenge);

			response.writeHead(200);
			response.end('ok\n');
		}
	], function(err){
		response.writeHead(500);
		response.end();
	});	
};
var onhooksubscribe = function(sub, request, response) {
	common.step([
		function(next) {
			toJSON(request, next);
		},
		function(message, next) {
			var id = message.id || Math.random().toString(36).substring(2);

			if (!message.endpoint) {
				next(error('endpoint missing'));
			}
			
		 	hooks[id] = hubs.use(sub).subscribe(message.query, message.selection, function(doc) {
				curl.postJSON(message.endpoint, doc);
			});
			
			var body = common.format("http://{host}/{sub}unsubscribe?id={id}", {
				host : request.headers.host,
				sub : sub || '',
				id: id
			});
			
			response.writeHead(200, {
				'content-type':'application/json',
				'content-length':Buffer.byteLength(body)
			});			
			response.end(body+'\n');
		}
	], function(err) {
		response.writeHead(500);
		response.end(JSON.stringify({error:err.publicMessage || 'internal error'}));
	});	
};
var onhookunsubscribe = function(sub, request, response) {
	var id = parse(request.url,true).query.id;
	
	if (!hooks[id]) {
		response.writeHead(404);
		response.end();
		return;
	}
	
	hooks[id]();
	delete hooks[id];
		
	response.writeHead(200);
	response.end('unsubscribed\n');	
};


server.post('/publish', function(request, response) {
	onhookpublish('/', request, response);
});
server.post('/{sub}/publish', function(request, response) {
	onhookpublish('/'+request.matches.sub, request, response);
});

server.post('/subscribe', function(request, response) {
	onhooksubscribe('/', request, response);
});
server.post('/{sub}/subscribe', function(request, response) {
	onhooksubscribe('/'+request.matches.sub, request, response);
});

server.get('/{sub}/unsubscribe', function(request, response) {
	onhookunsubscribe('/'+request.matches.sub, request, response);
});
server.get('/unsubscribe', function(request, response) {
	onhookunsubscribe('/', request, response);
});

server.get('/{sub}/add', function(request, response) {
	var query = parse(request.url, true).query;
	var sub = request.matches.sub;

	common.step([
		function(next) {
			if (hubs.use(sub).secret && hubs.use(sub).secret.toString('base64') !== query.old) {
				response.writeHead(403);
				response.end();
				return;
			}
			if (query.secret) {
				next(null, new Buffer(query.secret, 'base64'));
				return;
			}
			signer.generateKey(next);
		},
		function(key) {			
			hubs.add(sub, key);

			response.writeHead(200);
			response.end(key.toString('base64'));
		}
	], function(err) {
		response.writeHead(500);
		response.end();
	});
});

var onsocket = function(socket) {
	var clear = {};
	
	console.log('socket connection');

	socket.once('message', function(handshake) {
		var sub = handshake.sub || '/';
		var hub = hubs.use(sub);
		
		console.log(handshake);
		
		socket.on('message', function(message) {
			
			console.log(message);

			var id = message.id;

			if (message.name === 'subscribe') {
				clear[id] = hub.subscribe(message.query, message.selection, function(doc) {
					var doc = {name:'publish', id:id, doc:doc};
					socket.send(doc);
				});
				return;
			}
			if (message.name === 'unsubscribe') {
				(clear[id] || noop)();
				delete clear[id];
				return;
			}
			if (message.name === 'publish') {
				hub.publish(message.doc, message.challenge);
				return;
			}
		});
	});
	socket.on('close', function() {
		for (var i in clear) {
			clear[i]();
		}
	});	
};

if (argv.config) {
	var config = JSON.parse(require('fs').readFileSync(argv.config, 'utf-8'));

	for (var i in config.hubs) {
		hubs.add(i, new Buffer(config.hubs[i], 'base64'));
		common.log('adding hub={0}, secret={1}',i,config.hubs[i]);
	}
}

sockets.listen(server, onsocket);
sockets.createServer(onsocket).listen(10547);

server.listen(argv.p);

console.log('running hub server on port', argv.p);

process.on('uncaughtException', function(err) { console.error(err.stack) }); at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
