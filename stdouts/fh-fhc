/root/Targets/fh-fhc
└─┬ fh-fhc@2.18.0-896 
  ├── async@0.2.9 
  ├─┬ cheerio@0.10.8 
  │ ├─┬ cheerio-select@0.0.3 
  │ │ └─┬ CSSselect@0.7.0 
  │ │   ├── boolbase@1.0.0 
  │ │   ├── CSSwhat@0.4.7 
  │ │   ├─┬ domutils@1.4.3 
  │ │   │ └── domelementtype@1.3.0 
  │ │   └── nth-check@1.0.1 
  │ ├── entities@0.5.0 
  │ ├─┬ htmlparser2@2.6.0 
  │ │ ├── domelementtype@1.3.0 
  │ │ ├── domhandler@2.0.3 
  │ │ └── domutils@1.0.1 
  │ └── underscore@1.4.4 
  ├─┬ cli-table@0.0.2 
  │ └── colors@0.3.0 
  ├── cli-tree@0.0.1 
  ├── colors@0.6.2 
  ├── findit@2.0.0 
  ├─┬ fstream@0.1.22 
  │ ├── graceful-fs@1.2.3 
  │ ├── inherits@1.0.2 
  │ ├── mkdirp@0.3.5 
  │ └─┬ rimraf@2.5.4 
  │   └─┬ glob@7.1.1 
  │     ├── fs.realpath@1.0.0 
  │     ├─┬ inflight@1.0.6 
  │     │ └── wrappy@1.0.2 
  │     ├── inherits@2.0.3 
  │     ├─┬ minimatch@3.0.3 
  │     │ └─┬ brace-expansion@1.1.6 
  │     │   ├── balanced-match@0.4.2 
  │     │   └── concat-map@0.0.1 
  │     └── path-is-absolute@1.0.1 
  ├── mime@1.2.9 
  ├── moment@2.0.0 
  ├─┬ node-gettext@1.1.0 
  │ └─┬ gettext-parser@1.2.0 
  │   └─┬ encoding@0.1.12 
  │     └── iconv-lite@0.4.13 
  ├─┬ nopt@1.0.0 
  │ └── abbrev@1.0.9 
  ├─┬ once@1.4.0 
  │ └── wrappy@1.0.2 
  ├── open@0.0.5 
  ├─┬ os-locale@1.4.0 
  │ └─┬ lcid@1.0.0 
  │   └── invert-kv@1.0.0 
  ├── progress@1.1.8 
  ├─┬ request@2.74.0 
  │ ├── aws-sign2@0.6.0 
  │ ├── aws4@1.5.0 
  │ ├─┬ bl@1.1.2 
  │ │ └─┬ readable-stream@2.0.6 
  │ │   ├── core-util-is@1.0.2 
  │ │   ├── inherits@2.0.3 
  │ │   ├── isarray@1.0.0 
  │ │   ├── process-nextick-args@1.0.7 
  │ │   ├── string_decoder@0.10.31 
  │ │   └── util-deprecate@1.0.2 
  │ ├── caseless@0.11.0 
  │ ├─┬ combined-stream@1.0.5 
  │ │ └── delayed-stream@1.0.0 
  │ ├── extend@3.0.0 
  │ ├── forever-agent@0.6.1 
  │ ├─┬ form-data@1.0.1 
  │ │ └─┬ async@2.1.2 
  │ │   └── lodash@4.16.6 
  │ ├─┬ har-validator@2.0.6 
  │ │ ├─┬ chalk@1.1.3 
  │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ ├── escape-string-regexp@1.0.5 
  │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ └── ansi-regex@2.0.0 
  │ │ │ ├─┬ strip-ansi@3.0.1 
  │ │ │ │ └── ansi-regex@2.0.0 
  │ │ │ └── supports-color@2.0.0 
  │ │ ├─┬ commander@2.9.0 
  │ │ │ └── graceful-readlink@1.0.1 
  │ │ ├─┬ is-my-json-valid@2.15.0 
  │ │ │ ├── generate-function@2.0.0 
  │ │ │ ├─┬ generate-object-property@1.2.0 
  │ │ │ │ └── is-property@1.0.2 
  │ │ │ ├── jsonpointer@4.0.0 
  │ │ │ └── xtend@4.0.1 
  │ │ └─┬ pinkie-promise@2.0.1 
  │ │   └── pinkie@2.0.4 
  │ ├─┬ hawk@3.1.3 
  │ │ ├── boom@2.10.1 
  │ │ ├── cryptiles@2.0.5 
  │ │ ├── hoek@2.16.3 
  │ │ └── sntp@1.0.9 
  │ ├─┬ http-signature@1.1.1 
  │ │ ├── assert-plus@0.2.0 
  │ │ ├─┬ jsprim@1.3.1 
  │ │ │ ├── extsprintf@1.0.2 
  │ │ │ ├── json-schema@0.2.3 
  │ │ │ └── verror@1.3.6 
  │ │ └─┬ sshpk@1.10.1 
  │ │   ├── asn1@0.2.3 
  │ │   ├── assert-plus@1.0.0 
  │ │   ├── bcrypt-pbkdf@1.0.0 
  │ │   ├── dashdash@1.14.0 
  │ │   ├── ecc-jsbn@0.1.1 
  │ │   ├── getpass@0.1.6 
  │ │   ├── jodid25519@1.0.2 
  │ │   ├── jsbn@0.1.0 
  │ │   └── tweetnacl@0.14.3 
  │ ├── is-typedarray@1.0.0 
  │ ├── isstream@0.1.2 
  │ ├── json-stringify-safe@5.0.1 
  │ ├─┬ mime-types@2.1.12 
  │ │ └── mime-db@1.24.0 
  │ ├── node-uuid@1.4.7 
  │ ├── oauth-sign@0.8.2 
  │ ├── qs@6.2.1 
  │ ├── stringstream@0.0.5 
  │ ├─┬ tough-cookie@2.3.2 
  │ │ └── punycode@1.4.1 
  │ └── tunnel-agent@0.4.3 
  ├── semver@4.3.6 
  ├── tabtab@0.0.2 
  ├─┬ tar@2.2.1 
  │ ├── block-stream@0.0.9 
  │ ├─┬ fstream@1.0.10 
  │ │ ├── graceful-fs@4.1.10 
  │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ └── minimist@0.0.8 
  │ │ └─┬ rimraf@2.5.4 
  │ │   └─┬ glob@7.1.1 
  │ │     ├── fs.realpath@1.0.0 
  │ │     ├─┬ inflight@1.0.6 
  │ │     │ └── wrappy@1.0.2 
  │ │     ├─┬ minimatch@3.0.3 
  │ │     │ └─┬ brace-expansion@1.1.6 
  │ │     │   ├── balanced-match@0.4.2 
  │ │     │   └── concat-map@0.0.1 
  │ │     └── path-is-absolute@1.0.1 
  │ └── inherits@2.0.3 
  ├── underscore@1.8.0 
  ├── underscore-deep-extend@0.0.5 
  ├─┬ unzip@0.1.7 
  │ ├─┬ binary@0.3.0 
  │ │ ├── buffers@0.1.1 
  │ │ └─┬ chainsaw@0.1.0 
  │ │   └── traverse@0.3.9 
  │ ├─┬ match-stream@0.0.1 
  │ │ └── buffers@0.1.1 
  │ ├─┬ pullstream@0.4.1 
  │ │ ├── over@0.0.5 
  │ │ └── slice-stream@1.0.0 
  │ ├─┬ readable-stream@1.0.34 
  │ │ ├── core-util-is@1.0.2 
  │ │ ├── inherits@2.0.3 
  │ │ ├── isarray@0.0.1 
  │ │ └── string_decoder@0.10.31 
  │ └── setimmediate@1.0.5 
  └── yargs@2.1.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/fh-fhc/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 47% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","create","toString","join","toUpperCase","bind","call","pow","RegExp","sort"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0619 took 23.6693s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (243:4) on program // info about each config option.

var debug = process.env.DEBUG_OPTPARSE
  ? function () { console.error.apply(console, arguments) }
  : function () {}

var url = require("url")
  , path = require("path")
  , Stream = require("stream").Stream
  , abbrev = require("abbrev")

module.exports = exports = optparse
exports.clean = clean

exports.typeDefs =
  { String  : { type: String,  validate: validateString  }
  , Boolean : { type: Boolean, validate: validateBoolean }
  , url     : { type: url,     validate: validateUrl     }
  , Number  : { type: Number,  validate: validateNumber  }
  , path    : { type: path,    validate: validatePath    }
  , Stream  : { type: Stream,  validate: validateStream  }
  }

function optparse (types, shorthands, args, slice) {
  args = args || process.argv
  types = types || {}
  shorthands = shorthands || {}
  if (typeof slice !== "number") slice = 2

  args = args.slice(slice)
  var data = {}
    , key
    , remain = []
    , cooked = args
    , original = args.slice(0)

  parse(args, data, remain, types, shorthands)
  // now data is full
  clean(data, types, exports.typeDefs)
  data.argv = {remain:remain,cooked:cooked,original:original}
  return data
}

function clean (data, types, typeDefs) {
  typeDefs = typeDefs || exports.typeDefs
  Object.keys(data).forEach(function (k) {
    var val = data[k]
    // if it's an unknown value, then parse false/true/null/numbers
    if (typeof val === "string") {
      val = val.trim()
      if (val === "null" || val === "true" || val === "false") {
        val = JSON.parse(val)
      } else if (!isNaN(val)) {
        val = +val
      }
    }
    if (!types.hasOwnProperty(k)) {
      data[k] = val
      return
    }
    if (!validate(data, k, val, types[k], typeDefs)) {
      if (exports.invalidHandler) {
        exports.invalidHandler(k, val, types[k], data)
      } else if (exports.invalidHandler !== false) {
        debug("invalid: "+k+"="+val, types[k])
      }
    }
  })
}

function validateString (data, k, val) {
  data[k] = String(val)
}

function validatePath (data, k, val) {
  data[k] = path.resolve(String(val))
}

function validateNumber (data, k, val) {
  debug("validate Number %j %j %j", k, val, isNaN(val))
  if (isNaN(val)) return false
  data[k] = +val
}

function validateBoolean (data, k, val) {
  if (val instanceof Boolean) val = val.valueOf()
  else if (typeof val === "string") {
    if (!isNaN(val)) val = !!(+val)
    else if (val === "null" || val === "false") val = false
    else val = true
  } else val = !!val
  data[k] = val
}

function validateUrl (data, k, val) {
  val = url.parse(String(val))
  if (!val.host) return false
  data[k] = val.href
}

function validateStream (data, k, val) {
  if (!(val instanceof Stream)) return false
  data[k] = val
}

function validate (data, k, val, type, typeDefs) {
  // arrays are lists of types.
  if (Array.isArray(type)) {
    for (var i = 0, l = type.length; i < l; i ++) {
      if (validate(data, k, val, type[i], typeDefs)) return true
    }
    delete data[k]
    return false
  }

  // NaN is poisonous.  Means that something is not allowed.
  if (type !== type) {
    debug("Poison NaN", k, val, type)
    delete data[k]
    return false
  }

  // explicit list of values
  if (val === type) {
    debug("Explicitly allowed %j", val)
    data[k] = val
    return true
  }

  // now go through the list of typeDefs, validate against each one.
  var ok = false
    , types = Object.keys(typeDefs)
  for (var i = 0, l = types.length; i < l; i ++) {
    debug("test type %j %j %j", k, val, types[i])
    var t = typeDefs[types[i]]
    if (t && type === t.type) {
      ok = false !== t.validate(data, k, val)
      if (ok) break
    }
  }
  debug("OK? %j (%j %j %j)", ok, k, val, types[i])

  if (!ok) delete data[k]
  return ok
}

function parse (args, data, remain, types, shorthands) {
  var key = null
    , abbrevs = abbrev(Object.keys(types))
    , shortAbbr = abbrev(Object.keys(shorthands))

  for (var i = 0; i < args.length; i ++) {
    var arg = args[i]
    if (arg.match(/^-{2,}$/)) {
      // done with keys.
      // the rest are args.
      remain.push.apply(remain, args.slice(i + 1))
      args[i] = "--"
      break
    }
    if (arg.charAt(0) === "-") {
      if (arg.indexOf("=") !== -1) {
        var v = arg.split("=")
        arg = v.shift()
        v = v.join("=")
        args.splice.apply(args, [i, 1].concat([arg, v]))
      }
      // see if it's a shorthand
      // if so, splice and back up to re-parse it.
      var shRes = resolveShort(arg, shorthands, shortAbbr)
      if (shRes) {
        args.splice.apply(args, [i, 1].concat(shRes))
        i --
        continue
      }
      arg = arg.replace(/^-+/, "")
      var no = false
      while (arg.toLowerCase().indexOf("no-") === 0) {
        no = !no
        arg = arg.substr(3)
      }
      var isBool = no || types[arg] === Boolean ||
        Array.isArray(types[arg]) && types[arg].indexOf(Boolean) !== -1
      if (abbrevs[arg]) arg = abbrevs[arg]
      if (isBool) {
        // just set and move along
        data[arg] = !no
        // however, also support --bool true or --bool false
        var la = args[i + 1]
        if (la === "true" || la === "false") {
          data[arg] = JSON.parse(la)
          if (no) data[arg] = !data[arg]
          i ++
        }
        continue
      }
      var la = args[i + 1]
      if (la && la.match(/^-{2,}$/)) {
        la = undefined
        i --
      }
      data[arg] = la === undefined ? true : la
      i ++
      continue
    }
    remain.push(arg)
  }
}

function resolveShort (arg, shorthands, shortAbbr) {
  // handle single-char shorthands glommed together, like
  // npm ls -glp, but only if there is one dash, and only if
  // all of the chars are single-char shorthands, and it's
  // not a match to some other abbrev.
  arg = arg.replace(/^-+/, '')
  if (shortAbbr[arg]) {
    arg = shortAbbr[arg]
  } else {
    var singles = shorthands.___singles
    if (!singles) {
      singles = Object.keys(shorthands).filter(function (s) {
        return s.length === 1
      }).reduce(function (l,r) { l[r] = true ; return l }, {})
      shorthands.___singles = singles
    }
    var chrs = arg.split("").filter(function (c) {
      return singles[c]
    })
    if (chrs.join("") === arg) return chrs.map(function (c) {
      return shorthands[c]
    }).reduce(function (l, r) {
      return l.concat(r)
    }, [])
  }

  if (shorthands[arg] && !Array.isArray(shorthands[arg])) {
    shorthands[arg] = shorthands[arg].split(/\s+/)
  }
  return shorthands[arg]
}

if (module === require.main) {
var assert = require("assert")
  , sys = require("sys")

  , shorthands =
    { s : ["--loglevel", "silent"]
    , d : ["--loglevel", "info"]
    , dd : ["--loglevel", "verbose"]
    , ddd : ["--loglevel", "silly"]
    , noreg : ["--no-registry"]
    , reg : ["--registry"]
    , "no-reg" : ["--no-registry"]
    , silent : ["--loglevel", "silent"]
    , verbose : ["--loglevel", "verbose"]
    , h : ["--usage"]
    , H : ["--usage"]
    , "?" : ["--usage"]
    , help : ["--usage"]
    , v : ["--version"]
    , f : ["--force"]
    , desc : ["--description"]
    , "no-desc" : ["--no-description"]
    , "local" : ["--no-global"]
    , l : ["--long"]
    , p : ["--parseable"]
    , porcelain : ["--parseable"]
    , g : ["--global"]
    }

  , types =
    { argv : NaN
    , browser : String
    , cache : path
    , color : ["always", Boolean]
    , depth : Number
    , description : Boolean
    , dev : Boolean
    , editor : path
    , force : Boolean
    , global : Boolean
    , globalconfig : path
    , group : [String, Number]
    , gzipbin : String
    , logfd : [Number, Stream]
    , loglevel : ["silent","win","error","warn","info","verbose","silly"]
    , long : Boolean
    , "node-version" : [false, String]
    , npaturl : url
    , npat : Boolean
    , "onload-script" : [false, String]
    , outfd : [Number, Stream]
    , parseable : Boolean
    , pre: Boolean
    , prefix: path
    , proxy : url
    , "rebuild-bundle" : Boolean
    , registry : url
    , searchopts : String
    , searchexclude: [null, String]
    , shell : path
    , tag : String
    , tar : String
    , tmp : path
    , "unsafe-perm" : Boolean
    , usage : Boolean
    , user : String
    , username : String
    , userconfig : path
    , version : Boolean
    , viewer: path
    , _exit : Boolean
    }

; [["-v", {version:true}, []]
  ,["---v", {version:true}, []]
  ,["ls -s --no-reg connect -d",
    {loglevel:"info",registry:null},["ls","connect"]]
  ,["ls ---s foo",{loglevel:"silent"},["ls","foo"]]
  ,["ls --registry blargle", {}, ["ls"]]
  ,["--no-registry", {registry:null}, []]
  ,["--no-color true", {color:false}, []]
  ,["--no-color false", {color:true}, []]
  ,["--no-color", {color:false}, []]
  ,["--color false", {color:false}, []]
  ,["--color --logfd 7", {logfd:7,color:true}, []]
  ,["--color=true", {color:true}, []]
  ,["--logfd=10", {logfd:10}, []]
  ,["--tmp=/tmp -tar=gtar",{tmp:"/tmp",tar:"gtar"},[]]
  ,["--tmp=tmp -tar=gtar",
    {tmp:path.join(process.cwd(), "tmp"),tar:"gtar"},[]]
  ,["--logfd x", {}, []]
  ,["a -true -- -no-false", {true:true},["a","-no-false"]]
  ,["a -no-false", {false:false},["a"]]
  ,["a -no-no-true", {true:true}, ["a"]]
  ,["a -no-no-no-false", {false:false}, ["a"]]
  ,["---NO-no-No-no-no-no-nO-no-no"+
    "-No-no-no-no-no-no-no-no-no"+
    "-no-no-no-no-NO-NO-no-no-no-no-no-no"+
    "-no-body-can-do-the-boogaloo-like-I-do"
   ,{"body-can-do-the-boogaloo-like-I-do":false}, []]
  ,["we are -no-strangers-to-love "+
    "--you-know the-rules --and so-do-i "+
    "---im-thinking-of=a-full-commitment "+
    "--no-you-would-get-this-from-any-other-guy "+
    "--no-gonna-give-you-up "+
    "-no-gonna-let-you-down=true "+
    "--no-no-gonna-run-around false "+
    "--desert-you=false "+
    "--make-you-cry false "+
    "--no-tell-a-lie "+
    "--no-no-and-hurt-you false"
   ,{"strangers-to-love":false
    ,"you-know":"the-rules"
    ,"and":"so-do-i"
    ,"you-would-get-this-from-any-other-guy":false
    ,"gonna-give-you-up":false
    ,"gonna-let-you-down":false
    ,"gonna-run-around":false
    ,"desert-you":false
    ,"make-you-cry":false
    ,"tell-a-lie":false
    ,"and-hurt-you":false
    },["we", "are"]]
  ].forEach(function (test) {
    var argv = test[0].split(/\s+/)
      , opts = test[1]
      , rem = test[2]
      , actual = optparse(types, shorthands, argv, 0)
      , parsed = actual.argv
    delete actual.argv
    console.log(parsed.remain)
    console.log(sys.inspect(actual, false, 2, true))
    for (var i in opts) {
      assert.equal(opts[i], actual[i])
    }
    assert.deepEqual(rem, parsed.remain)
  })
}
 at SyntaxError: Unexpected token (243:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/lib/fhc.js. Coverage (Term): 10% Coverage (LOC): 9%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/lib/i18n.js. Coverage (Term): 92% Coverage (LOC): 97%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/os-locale/index.js. Coverage (Term): 26% Coverage (LOC): 22%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/os-locale/node_modules/lcid/index.js. Coverage (Term): 51% Coverage (LOC): 58%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/os-locale/node_modules/lcid/node_modules/invert-kv/index.js. Coverage (Term): 88% Coverage (LOC): 93%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/node-gettext/lib/gettext.js. Coverage (Term): 39% Coverage (LOC): 51%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/node-gettext/lib/plurals.js. Coverage (Term): 47% Coverage (LOC): 92%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/node-gettext/node_modules/gettext-parser/index.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/node-gettext/node_modules/gettext-parser/lib/poparser.js. Coverage (Term): 24% Coverage (LOC): 30%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/node-gettext/node_modules/gettext-parser/node_modules/encoding/lib/encoding.js. Coverage (Term): 14% Coverage (LOC): 21%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/node-gettext/node_modules/gettext-parser/node_modules/encoding/node_modules/iconv-lite/lib/index.js. Coverage (Term): 25% Coverage (LOC): 34%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/node-gettext/node_modules/gettext-parser/node_modules/encoding/node_modules/iconv-lite/lib/bom-handling.js. Coverage (Term): 27% Coverage (LOC): 42%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/node-gettext/node_modules/gettext-parser/node_modules/encoding/node_modules/iconv-lite/lib/streams.js. Coverage (Term): 24% Coverage (LOC): 35%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/node-gettext/node_modules/gettext-parser/node_modules/encoding/node_modules/iconv-lite/lib/extend-node.js. Coverage (Term): 6% Coverage (LOC): 7%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/node-gettext/node_modules/gettext-parser/node_modules/encoding/lib/iconv-loader.js. Coverage (Term): 84% Coverage (LOC): 100%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/node-gettext/node_modules/gettext-parser/lib/shared.js. Coverage (Term): 11% Coverage (LOC): 23%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/node-gettext/node_modules/gettext-parser/lib/pocompiler.js. Coverage (Term): 7% Coverage (LOC): 15%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/node-gettext/node_modules/gettext-parser/lib/moparser.js. Coverage (Term): 12% Coverage (LOC): 20%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/node-gettext/node_modules/gettext-parser/lib/mocompiler.js. Coverage (Term): 7% Coverage (LOC): 16%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/lib/utils/ini.js. Coverage (Term): 7% Coverage (LOC): 4%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/underscore/underscore.js. Coverage (Term): 19% Coverage (LOC): 32%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/lib/utils/log.js. Coverage (Term): 31% Coverage (LOC): 35%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/lib/utils/output.js. Coverage (Term): 10% Coverage (LOC): 10%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/lib/utils/config-defs.js. Coverage (Term): 13% Coverage (LOC): 6%
*- File /root/Targets/fh-fhc/node_modules/fh-fhc/node_modules/semver/semver.js. Coverage (Term): 30% Coverage (LOC): 33%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
