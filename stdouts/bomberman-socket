
> bufferutil@1.2.1 install /root/Targets/bomberman-socket/node_modules/bufferutil
> node-gyp rebuild

make: Entering directory '/root/Targets/bomberman-socket/node_modules/bufferutil/build'
  CXX(target) Release/obj.target/bufferutil/src/bufferutil.o
  SOLINK_MODULE(target) Release/obj.target/bufferutil.node
  COPY Release/bufferutil.node
make: Leaving directory '/root/Targets/bomberman-socket/node_modules/bufferutil/build'

> utf-8-validate@1.2.2 install /root/Targets/bomberman-socket/node_modules/utf-8-validate
> node-gyp rebuild

make: Entering directory '/root/Targets/bomberman-socket/node_modules/utf-8-validate/build'
  CXX(target) Release/obj.target/validation/src/validation.o
  SOLINK_MODULE(target) Release/obj.target/validation.node
  COPY Release/validation.node
make: Leaving directory '/root/Targets/bomberman-socket/node_modules/utf-8-validate/build'
/root/Targets/bomberman-socket
└─┬ bomberman-socket@0.0.1 
  ├─┬ body-parser@1.12.4 
  │ ├── bytes@1.0.0 
  │ ├── content-type@1.0.4 
  │ ├─┬ debug@2.2.0 
  │ │ └── ms@0.7.1 
  │ ├── depd@1.0.1 
  │ ├── iconv-lite@0.4.8 
  │ ├─┬ on-finished@2.2.1 
  │ │ └── ee-first@1.1.0 
  │ ├── qs@2.4.2 
  │ ├─┬ raw-body@2.0.2 
  │ │ └── bytes@2.1.0 
  │ └─┬ type-is@1.6.15 
  │   ├── media-typer@0.3.0 
  │   └─┬ mime-types@2.1.17 
  │     └── mime-db@1.30.0 
  ├─┬ express@4.12.4 
  │ ├─┬ accepts@1.2.13 
  │ │ └── negotiator@0.5.3 
  │ ├── content-disposition@0.5.0 
  │ ├── cookie@0.1.2 
  │ ├── cookie-signature@1.0.6 
  │ ├── escape-html@1.0.1 
  │ ├─┬ etag@1.6.0 
  │ │ └── crc@3.2.1 
  │ ├── finalhandler@0.3.6 
  │ ├── fresh@0.2.4 
  │ ├── merge-descriptors@1.0.0 
  │ ├── methods@1.1.2 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.3 
  │ ├─┬ proxy-addr@1.0.10 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.0.5 
  │ ├── range-parser@1.0.3 
  │ ├─┬ send@0.12.3 
  │ │ ├── destroy@1.0.3 
  │ │ └── mime@1.3.4 
  │ ├── serve-static@1.9.3 
  │ ├── utils-merge@1.0.0 
  │ └── vary@1.0.1 
  ├── UNMET PEER DEPENDENCY node-libs-browser@>= 0.4.0 <=0.6.0
  ├── path@0.4.10 
  ├─┬ socket.io@1.3.7 
  │ ├─┬ debug@2.1.0 
  │ │ └── ms@0.6.2 
  │ ├─┬ engine.io@1.5.4 
  │ │ ├── base64id@0.1.0 
  │ │ ├─┬ debug@1.0.3 
  │ │ │ └── ms@0.6.2 
  │ │ ├─┬ engine.io-parser@1.2.2 
  │ │ │ ├── after@0.8.1 
  │ │ │ ├── arraybuffer.slice@0.0.6 
  │ │ │ ├── base64-arraybuffer@0.1.2 
  │ │ │ ├── blob@0.0.4 
  │ │ │ └── utf8@2.1.0 
  │ │ └─┬ ws@0.8.0 
  │ │   ├─┬ bufferutil@1.2.1 
  │ │   │ ├── bindings@1.2.1 
  │ │   │ └── nan@2.7.0 
  │ │   ├── options@0.0.6 
  │ │   ├── ultron@1.0.2 
  │ │   └─┬ utf-8-validate@1.2.2 
  │ │     └── nan@2.4.0 
  │ ├─┬ has-binary-data@0.1.3 
  │ │ └── isarray@0.0.1 
  │ ├─┬ socket.io-adapter@0.3.1 
  │ │ ├─┬ debug@1.0.2 
  │ │ │ └── ms@0.6.2 
  │ │ ├── object-keys@1.0.1 
  │ │ └─┬ socket.io-parser@2.2.2 
  │ │   └── debug@0.7.4 
  │ ├─┬ socket.io-client@1.3.7 
  │ │ ├── backo2@1.0.2 
  │ │ ├── component-bind@1.0.0 
  │ │ ├── component-emitter@1.1.2 
  │ │ ├── debug@0.7.4 
  │ │ ├─┬ engine.io-client@1.5.4 
  │ │ │ ├── component-inherit@0.0.3 
  │ │ │ ├─┬ debug@1.0.4 
  │ │ │ │ └── ms@0.6.2 
  │ │ │ ├─┬ has-cors@1.0.3 
  │ │ │ │ └── global@2.0.1 
  │ │ │ ├── parsejson@0.0.1 
  │ │ │ ├── parseqs@0.0.2 
  │ │ │ ├── parseuri@0.0.4 
  │ │ │ └── xmlhttprequest@1.5.0 
  │ │ ├── has-binary@0.1.6 
  │ │ ├── indexof@0.0.1 
  │ │ ├── object-component@0.0.3 
  │ │ ├─┬ parseuri@0.0.2 
  │ │ │ └─┬ better-assert@1.0.2 
  │ │ │   └── callsite@1.0.0 
  │ │ └── to-array@0.1.3 
  │ └─┬ socket.io-parser@2.2.4 
  │   ├── benchmark@1.0.0 
  │   ├── debug@0.7.4 
  │   └── json3@3.2.6 
  ├─┬ socket.io-logger@0.0.2 
  │ ├─┬ flat@1.6.1 
  │ │ └── is-buffer@1.1.5 
  │ └── socket.io-events@0.4.6 
  └─┬ webpack@1.9.13 
    ├── async@0.9.2 
    ├── clone@1.0.2 
    ├─┬ enhanced-resolve@0.8.6 
    │ └─┬ graceful-fs@3.0.11 
    │   └── natives@1.1.0 
    ├── esprima@1.2.5 
    ├── interpret@0.5.2 
    ├── memory-fs@0.2.0 
    ├─┬ mkdirp@0.5.1 
    │ └── minimist@0.0.8 
    ├─┬ optimist@0.6.1 
    │ └── wordwrap@0.0.3 
    ├── supports-color@1.3.1 
    ├── tapable@0.1.10 
    ├─┬ uglify-js@2.4.24 
    │ ├── async@0.2.10 
    │ ├─┬ source-map@0.1.34 
    │ │ └── amdefine@1.0.1 
    │ ├── uglify-to-browserify@1.0.2 
    │ └─┬ yargs@3.5.4 
    │   ├── camelcase@1.2.1 
    │   ├── decamelize@1.2.0 
    │   ├── window-size@0.1.0 
    │   └── wordwrap@0.0.2 
    ├─┬ watchpack@0.2.9 
    │ ├─┬ chokidar@1.7.0 
    │ │ ├─┬ anymatch@1.3.2 
    │ │ │ ├─┬ micromatch@2.3.11 
    │ │ │ │ ├─┬ arr-diff@2.0.0 
    │ │ │ │ │ └── arr-flatten@1.1.0 
    │ │ │ │ ├── array-unique@0.2.1 
    │ │ │ │ ├─┬ braces@1.8.5 
    │ │ │ │ │ ├─┬ expand-range@1.8.2 
    │ │ │ │ │ │ └─┬ fill-range@2.2.3 
    │ │ │ │ │ │   ├── is-number@2.1.0 
    │ │ │ │ │ │   ├─┬ isobject@2.1.0 
    │ │ │ │ │ │   │ └── isarray@1.0.0 
    │ │ │ │ │ │   ├─┬ randomatic@1.1.7 
    │ │ │ │ │ │   │ ├─┬ is-number@3.0.0 
    │ │ │ │ │ │   │ │ └── kind-of@3.2.2 
    │ │ │ │ │ │   │ └── kind-of@4.0.0 
    │ │ │ │ │ │   └── repeat-string@1.6.1 
    │ │ │ │ │ ├── preserve@0.2.0 
    │ │ │ │ │ └── repeat-element@1.1.2 
    │ │ │ │ ├─┬ expand-brackets@0.1.5 
    │ │ │ │ │ └── is-posix-bracket@0.1.1 
    │ │ │ │ ├── extglob@0.3.2 
    │ │ │ │ ├── filename-regex@2.0.1 
    │ │ │ │ ├── kind-of@3.2.2 
    │ │ │ │ ├─┬ object.omit@2.0.1 
    │ │ │ │ │ ├─┬ for-own@0.1.5 
    │ │ │ │ │ │ └── for-in@1.0.2 
    │ │ │ │ │ └── is-extendable@0.1.1 
    │ │ │ │ ├─┬ parse-glob@3.0.4 
    │ │ │ │ │ ├── glob-base@0.3.0 
    │ │ │ │ │ └── is-dotfile@1.0.3 
    │ │ │ │ └─┬ regex-cache@0.4.4 
    │ │ │ │   └─┬ is-equal-shallow@0.1.3 
    │ │ │ │     └── is-primitive@2.0.0 
    │ │ │ └─┬ normalize-path@2.1.1 
    │ │ │   └── remove-trailing-separator@1.1.0 
    │ │ ├── async-each@1.0.1 
    │ │ ├── glob-parent@2.0.0 
    │ │ ├── inherits@2.0.3 
    │ │ ├─┬ is-binary-path@1.0.1 
    │ │ │ └── binary-extensions@1.10.0 
    │ │ ├─┬ is-glob@2.0.1 
    │ │ │ └── is-extglob@1.0.0 
    │ │ ├── path-is-absolute@1.0.1 
    │ │ └─┬ readdirp@2.1.0 
    │ │   ├── graceful-fs@4.1.11 
    │ │   ├─┬ minimatch@3.0.4 
    │ │   │ └─┬ brace-expansion@1.1.8 
    │ │   │   ├── balanced-match@1.0.0 
    │ │   │   └── concat-map@0.0.1 
    │ │   ├─┬ readable-stream@2.3.3 
    │ │   │ ├── core-util-is@1.0.2 
    │ │   │ ├── isarray@1.0.0 
    │ │   │ ├── process-nextick-args@1.0.7 
    │ │   │ ├── safe-buffer@5.1.1 
    │ │   │ ├── string_decoder@1.0.3 
    │ │   │ └── util-deprecate@1.0.2 
    │ │   └── set-immediate-shim@1.0.1 
    │ └── graceful-fs@4.1.11 
    └─┬ webpack-core@0.6.9 
      ├── source-list-map@0.1.8 
      └── source-map@0.4.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/bomberman-socket/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0495 took 4.2022s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Deleting local variable in strict mode (86:4) on program var express = require("express");
var app = express();
var server = require("http").Server(app),
    fs = require('fs'),
    path = require('path');

app.use(express.static(path.join( __dirname, 'public')));

app.get('/', function (req, res) {
    res.sendfile(__dirname + '/index.html');
});

socket = require("socket.io").listen(server);
TILE_SIZE = 35;

var Player = require("./entity/player");
var Bomb = require("./entity/bomb");
var Map = require("./entity/map");
var MapInfo = require("./common/map_info");
var Game = require("./entity/game");
var Lobby = require("./lobby");
var PendingGame = require("./entity/pending_game");
var PowerupIDs = require("./common/powerup_ids");

var games = {};

var updateInterval = 100;
app.use(express.static("client"));
server.listen(process.env.PORT || 3000);

init();

function init() {
    Lobby.initialize();
    setEventHandlers();
    setInterval(broadcastingLoop, updateInterval);
};

function setEventHandlers () {
    socket.sockets.on("connection", function(client) {
        console.log("New player has connected: " + client.id);
        client.on("move player", onMovePlayer);
        client.on("disconnect", onClientDisconnect);
        client.on("place bomb", onPlaceBomb);
        client.on("register map", onRegisterMap);
        client.on("start game on server", onStartGame);
        client.on("ready for round", onReadyForRound);
        client.on("powerup overlap", onPowerupOverlap);
        client.on("enter lobby", Lobby.onEnterLobby);
        client.on("host game", Lobby.onHostGame);
        client.on("select stage", Lobby.onStageSelect);
        client.on("enter pending game", Lobby.onEnterPendingGame);
        client.on("leave pending game", Lobby.onLeavePendingGame);
    });
};

function onClientDisconnect() {
    if (this.gameId == null) {
        return;
    }
    var lobbySlots = Lobby.getLobbySlots();
    if (lobbySlots.state == "joinable" || lobbySlots.state == "full") {
        Lobby.onLeavePendingGame.call(this);
    } else if (lobbySlots.state == "settingup") {
        lobbySlots.state = "empty";
        Lobby.broadcastSlotStateUpdate(this.gameId, "empty");
    } else if (lobbySlots.state == "inprogress") {
        if (this.id in games.players) {
            delete games.players[this.id];
            socket.sockets.in(this.gameId).emit("remove player", {id: this.id});
        }
        if (games.numPlayers < 2) {
            if (games.numPlayers == 1) {
                socket.sockets.in(this.gameId).emit("no opponents left");
            }
            terminateExistingGame(this.gameId);
        }
        if (games.awaiting && games.numEndOfRoundAcknowledgements >= games.numPlayers) {
            games.awaiting = false;
        }
    }
};

function terminateExistingGame(gameId) {
    games.clearBombs();
    delete games;
    Lobby.restartLobby();
    Lobby.broadcastSlotStateUpdate(gameId, "empty");
};

function onStartGame() {
    var lobbySlots = Lobby.getLobbySlots();
    var game = new Game(this.gameId);
    games = game;
    var pendingGame = lobbySlots;
    lobbySlots.state = "inprogress";
    Lobby.broadcastSlotStateUpdate(this.gameId, "inprogress");
    var ids = pendingGame.getPlayerIds();
    for(var i = 0; i < ids.length; i++) {
        var playerId = ids[i];
        var spawnPoint = MapInfo['First'].spawnLocations[i];
        var newPlayer = new Player(spawnPoint.x * TILE_SIZE, spawnPoint.y * TILE_SIZE, "down", playerId, pendingGame.players[playerId].color);
        newPlayer.spawnPoint = spawnPoint;
        games.players[playerId] = newPlayer;
    }
    games.numPlayersAlive = ids.length;
    socket.sockets.in(this.gameId).emit("start game on client", {mapName: pendingGame.mapName, players: games.players});
};

function onRegisterMap(data) {
    games.map = new Map(data, TILE_SIZE);
};

function onMovePlayer(data) {
    if (games === undefined || games.awaiting) {
        return;
    }
    var movingPlayer = games.players[this.id];
    if(!movingPlayer) {
        return;
    }
    movingPlayer.x = data.x;
    movingPlayer.y = data.y;
    movingPlayer.facing = data.facing;
};

function onPlaceBomb(data) {
    var player = games.players[this.id];
    if (games === undefined || games.awaiting || player.numBombsAlive >= player.bombCapacity) {
        return;
    }
    var gameId = this.gameId;
    var bombId = data.id;
    var normalizedBombLocation = games.map.placeBombOnGrid(data.x, data.y);
    if(normalizedBombLocation == -1) {
        return;
    }
    player.numBombsAlive++;
    var bombTimeoutId = setTimeout(function() {
        var explosionData = bomb.detonate(games.map, player.bombStrength, games.players);
        player.numBombsAlive--;
        socket.sockets.in(gameId).emit("detonate", {explosions: explosionData.explosions, id: bombId,
            destroyedTiles: explosionData.destroyedBlocks});
        delete games.bombs[bombId];
        games.map.removeBombFromGrid(data.x, data.y);

        handlePlayerDeath(explosionData.killedPlayers, gameId);
    }, 2000);
    var bomb = new Bomb(normalizedBombLocation.x, normalizedBombLocation.y, bombTimeoutId);
    games.bombs[bombId] = bomb;
    socket.sockets.to(this.gameId).emit("place bomb", {x: normalizedBombLocation.x, y: normalizedBombLocation.y, id: data.id});
};

function onPowerupOverlap(data) {
    var powerup = games.map.claimPowerup(data.x, data.y);

    if(!powerup) {
        return;
    }
    var player = games.players[this.id];
    if(powerup.powerupType === PowerupIDs.BOMB_STRENGTH) {
        player.bombStrength++;
    } else if(powerup.powerupType === PowerupIDs.BOMB_CAPACITY) {
        player.bombCapacity++;
    }
    socket.sockets.in(this.gameId).emit("powerup acquired", {acquiringPlayerId: this.id, powerupId: powerup.id, powerupType: powerup.powerupType});
};

function handlePlayerDeath(deadPlayerIds, gameId) {
    var tiedWinnerIds;
    if (deadPlayerIds.length > 1 && games.numPlayersAlive - deadPlayerIds.length == 0) {
        tiedWinnerIds = deadPlayerIds;
    }
    deadPlayerIds.forEach(function(deadPlayerId) {
        games.players[deadPlayerId].alive = false;
        socket.sockets.in(gameId).emit("kill player", {id: deadPlayerId});
        games.numPlayersAlive--;
    }, this);

    if (games.numPlayersAlive <= 1) {
        endRound(gameId, tiedWinnerIds);
    }
};

function endRound(gameId, tiedWinnerIds) {
    var roundWinnerColors = [];
    if(tiedWinnerIds) {
        tiedWinnerIds.forEach(function(tiedWinnerId) {
            roundWinnerColors.push(games.players[tiedWinnerId].color);
        });
    } else {
        var winner = games.calculateRoundWinner();
        winner.wins++;
        roundWinnerColors.push(winner.color);
    }
    games.currentRound++;
    if (games.currentRound > 2) {
        var gameWinners = games.calculateGameWinners();

        if (gameWinners.length == 1 && (games.currentRound > 3 || gameWinners[0].wins == 2)) {
            socket.sockets.in(gameId).emit("end game", {
                completedRoundNumber: games.currentRound - 1, roundWinnerColors: roundWinnerColors,
                gameWinnerColor: gameWinners[0].color});
            terminateExistingGame(gameId);
            return;
        }
    }
    games.awaiting = true;
    games.resetForNewRound();
    socket.sockets.in(gameId).emit("new round", {
        completedRoundNumber: games.currentRound - 1,
        roundWinnerColors: roundWinnerColors
    });
};

function onReadyForRound() {
    if (!games.awaiting) {
        return;
    }
    games.addPlayerReadyRound(this.id);
    if (games.numPlayersReadyRound >= games.numPlayers) {
        games.awaiting = false;
    }
};

function broadcastingLoop() {
    for (var i in games.players) {
        var player = games.players[i];
        if (player.alive) {
            socket.sockets.in(games.id).emit("move player", {
                id: player.id,
                x: player.x,
                y: player.y,
                facing: player.facing,
                timestamp: (+new Date())
            });
        }
    }
}; at SyntaxError: Deleting local variable in strict mode (86:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:31:155)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:727:47)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
    at Parser.pp$3.parseFunctionBody (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2105:24)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
