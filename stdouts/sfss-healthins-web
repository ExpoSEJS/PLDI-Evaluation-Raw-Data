/root/Targets/sfss-healthins-web
└─┬ sfss-healthins-web@1.0.0 
  ├─┬ babel-preset-react@6.24.1 
  │ ├── babel-plugin-syntax-jsx@6.18.0 
  │ ├─┬ babel-plugin-transform-react-display-name@6.25.0 
  │ │ └─┬ babel-runtime@6.26.0 
  │ │   ├── core-js@2.5.1 
  │ │   └── regenerator-runtime@0.11.0 
  │ ├─┬ babel-plugin-transform-react-jsx@6.24.1 
  │ │ └─┬ babel-helper-builder-react-jsx@6.26.0 
  │ │   └── esutils@2.0.2 
  │ ├── babel-plugin-transform-react-jsx-self@6.22.0 
  │ ├── babel-plugin-transform-react-jsx-source@6.22.0 
  │ └─┬ babel-preset-flow@6.23.0 
  │   └─┬ babel-plugin-transform-flow-strip-types@6.22.0 
  │     └── babel-plugin-syntax-flow@6.18.0 
  ├─┬ babelify@7.3.0 
  │ ├─┬ babel-core@6.26.0 
  │ │ ├─┬ babel-code-frame@6.26.0 
  │ │ │ └─┬ chalk@1.1.3 
  │ │ │   ├── ansi-styles@2.2.1 
  │ │ │   ├── escape-string-regexp@1.0.5 
  │ │ │   ├─┬ has-ansi@2.0.0 
  │ │ │   │ └── ansi-regex@2.1.1 
  │ │ │   ├── strip-ansi@3.0.1 
  │ │ │   └── supports-color@2.0.0 
  │ │ ├─┬ babel-generator@6.26.0 
  │ │ │ ├─┬ detect-indent@4.0.0 
  │ │ │ │ └─┬ repeating@2.0.1 
  │ │ │ │   └─┬ is-finite@1.0.2 
  │ │ │ │     └── number-is-nan@1.0.1 
  │ │ │ ├── jsesc@1.3.0 
  │ │ │ └── trim-right@1.0.1 
  │ │ ├── babel-helpers@6.24.1 
  │ │ ├── babel-messages@6.23.0 
  │ │ ├─┬ babel-register@6.26.0 
  │ │ │ ├─┬ home-or-tmp@2.0.0 
  │ │ │ │ ├── os-homedir@1.0.2 
  │ │ │ │ └── os-tmpdir@1.0.2 
  │ │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ │ └── minimist@0.0.8 
  │ │ │ └── source-map-support@0.4.18 
  │ │ ├── babel-template@6.26.0 
  │ │ ├─┬ babel-traverse@6.26.0 
  │ │ │ ├── globals@9.18.0 
  │ │ │ └── invariant@2.2.2 
  │ │ ├─┬ babel-types@6.26.0 
  │ │ │ └── to-fast-properties@1.0.3 
  │ │ ├── babylon@6.18.0 
  │ │ ├── convert-source-map@1.5.0 
  │ │ ├─┬ debug@2.6.8 
  │ │ │ └── ms@2.0.0 
  │ │ ├── json5@0.5.1 
  │ │ ├── lodash@4.17.4 
  │ │ ├─┬ minimatch@3.0.4 
  │ │ │ └─┬ brace-expansion@1.1.8 
  │ │ │   ├── balanced-match@1.0.0 
  │ │ │   └── concat-map@0.0.1 
  │ │ ├── path-is-absolute@1.0.1 
  │ │ ├── private@0.1.7 
  │ │ ├── slash@1.0.0 
  │ │ └── source-map@0.5.7 
  │ └── object-assign@4.1.1 
  ├─┬ react@15.6.1 
  │ ├── create-react-class@15.6.0 
  │ ├─┬ fbjs@0.8.15 
  │ │ ├── core-js@1.2.7 
  │ │ ├─┬ isomorphic-fetch@2.2.1 
  │ │ │ ├─┬ node-fetch@1.7.3 
  │ │ │ │ ├─┬ encoding@0.1.12 
  │ │ │ │ │ └── iconv-lite@0.4.19 
  │ │ │ │ └── is-stream@1.1.0 
  │ │ │ └── whatwg-fetch@2.0.3 
  │ │ ├─┬ promise@7.3.1 
  │ │ │ └── asap@2.0.6 
  │ │ ├── setimmediate@1.0.5 
  │ │ └── ua-parser-js@0.7.14 
  │ ├─┬ loose-envify@1.3.1 
  │ │ └── js-tokens@3.0.2 
  │ └── prop-types@15.5.10 
  └── react-dom@15.6.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/sfss-healthins-web/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0368 took 3.5784s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (13:22) on program require('./widget.js');

var imageUrl = "http://localhost:7032/productmgr/";

var Option = React.createClass({
	view: null,
	getValue: function() {
		return this.view == null ? null : this.view.props.value.value;
	},
	render: function() {
		var v = this.props.value;
		if (v.widget == 7)
        	this.view = (<CText value={v} parent={this.props.parent}/>);
		else if (v.widget == 5)
        	this.view = (<CTextBox value={v} parent={this.props.parent}/>);
		else if (v.widget == 3)
        	this.view = (<CDateBox value={v} parent={this.props.parent}/>);
		else if (v.widget == 2)
        	this.view = (<CYesNo value={v} parent={this.props.parent}/>);
		else if (v.widget == 1)
        	this.view = (<CText value={v} parent={this.props.parent}/>);
        return (
        	<tr style={{display: v.widget == 7 ? "none" : "table-row"}}>
        		<td>{v.name}</td>
        		<td>{this.view}</td>
        	</tr>
        );
	}
});

var TryCal = React.createClass({
	getInitialState: function(){
        return {
			premium: "",
			plan: 0,
			info: 0,
        }
    },
	onPlanChange: function(index) {
		this.setState({plan: index, info: 0, premium: ""});
	},
	onDetailChange: function(index) {
		this.setState({info: index});
	},
	onOptionChange: function() {
        var myself = this;
		var ins = this.props.value.content[this.state.plan];

		var params = {versionId: ins.versionId};
		var idx = 0;
		ins.tryopt.map(function(v) {
			var option = myself.refs["option"+idx++];
			params[option.props.value.key] = option.getValue();
        });

		ss.post("Premium", params, function(r) {
			myself.setState({premium: r.data});
		});
	},
   	onNext: function() {
   		this.props.value.plan = this.state.plan;
		this.props.parent.next();
	},
	componentWillMount: function() {
	},
	render: function() {
        var myself = this;
		var prd = this.props.value;
		var ins = prd.content[this.state.plan];

		var idx = 0;
		var plans = prd.content.map(function(v) {
            return (<span key={"plan"+idx} style={{backgroundColor:idx==myself.state.plan?"#AAA":"#FFF"}} onClick={myself.onPlanChange.bind(myself,idx++)}>{v.name}</span>);
        });

		idx = 0;
		var params = ins.tryopt.map(function(v) {
            return (<Option key={idx} value={v} parent={myself} ref={"option"+idx++}/>);
        });

        idx = 0;
		var descrs = ins.show.map(function(v) {
            return (<span key={"title"+idx} style={{backgroundColor:idx==myself.state.info?"#AAA":"#FFF"}} onClick={myself.onDetailChange.bind(myself,idx++)}>{v.title}</span>);
        });

		var detail = "";
        if (ins.show.length > this.state.info)
        	detail = ins.show[this.state.info].content;

		return (
			<div>
				<img src={imageUrl + prd.banner}/>
				<div>{plans}</div>
				<table>
					<tbody>{params}</tbody>
				</table>
				<div>{descrs}</div>
				<div id="detail">{detail}</div>
				<div>保费：{this.state.premium}</div>
				<span onClick={this.onNext}>立即购买</span>
			</div>
		);
	}
});

var Quest = React.createClass({
   	onNext: function() {
		this.props.parent.next();
	},
	onFail: function() {
		alert("抱歉，该类型客户暂不接受投保");
	},
	render: function() {
		var str = this.props.value.content[this.props.value.plan].quest.content;
		return (
			<div>
				<div dangerouslySetInnerHTML={{__html: str}}/>
				<div>
					<button onClick={this.onFail}>是</button>
					<button onClick={this.onNext}>否</button>
				</div>
			</div>
		);
	}
});

var BuyIns = React.createClass({
	detail: "",
	premium: "",
	onOptionChange: function() {
        var myself = this;
		var ins = this.props.value.content[this.props.value.plan];

		var params = {versionId: ins.versionId};
		var idx = 0;
		ins.buyopt.map(function(v) {
			var option = myself.refs["option"+idx++];
			params[option.props.value.key] = option.getValue();
        });

		ss.post("Premium", params, function(r) {
			myself.premium = r.data;
			myself.forceUpdate();	
		});
	},
   	onNext: function() {
		this.props.parent.next();
	},
	render: function() {
        var myself = this;
		var prd = this.props.value;
		var ins = prd.content[this.props.value.plan];

		var idx = 0;
		var params = ins.buyopt.map(function(v) {
            return (<Option key={idx} value={v} parent={myself} ref={"option"+idx++}/>);
        });

		return (
			<div>
				<table>
					<tbody>{params}</tbody>
				</table>
				<div>保费：{this.premium}</div>
				<span onClick={this.onNext}>提交</span>
			</div>
		);
	}
});

var Frame = React.createClass({
	getInitialState: function(){
        return {
        	step: 0
        }
    },
   	next: function() {
		this.setState({step: this.state.step + 1});
	},
	render: function() {
		if (this.state.step == 1)
			return (<Quest value={this.props.value} parent={this}/>);
		else if (this.state.step == 2)
			return (<BuyIns value={this.props.value} parent={this}/>);
		return (<TryCal value={this.props.value} parent={this}/>);
	}
});

var start = function() {
	ss.post("View", {productId: "10001"}, function(r) {
		ReactDOM.render(
			<Frame value={r.data}/>,
			document.getElementById("content")
		);
	});
} at SyntaxError: Unexpected token (13:22)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseParenAndDistinguishExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1861:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
