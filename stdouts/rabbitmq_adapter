/root/Targets/rabbitmq_adapter
└─┬ rabbitmq_adapter@0.0.1 
  ├── async@0.9.2 
  ├─┬ bramqp@0.1.18 
  │ ├── buffer-more-ints@0.0.2 
  │ └─┬ xml2js@0.4.19 
  │   ├── sax@1.2.4 
  │   └── xmlbuilder@9.0.4 
  ├─┬ connect@3.6.5 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├─┬ finalhandler@1.0.6 
  │ │ ├── encodeurl@1.0.1 
  │ │ ├── escape-html@1.0.3 
  │ │ ├─┬ on-finished@2.3.0 
  │ │ │ └── ee-first@1.1.1 
  │ │ ├── statuses@1.3.1 
  │ │ └── unpipe@1.0.0 
  │ ├── parseurl@1.3.2 
  │ └── utils-merge@1.0.1 
  └─┬ express@3.21.2 
    ├── basic-auth@1.0.4 
    ├── commander@2.6.0 
    ├─┬ connect@2.30.2 
    │ ├── basic-auth-connect@1.0.0 
    │ ├─┬ body-parser@1.13.3 
    │ │ ├─┬ debug@2.2.0 
    │ │ │ └── ms@0.7.1 
    │ │ ├── iconv-lite@0.4.11 
    │ │ └─┬ raw-body@2.1.7 
    │ │   ├── bytes@2.4.0 
    │ │   └── iconv-lite@0.4.13 
    │ ├── bytes@2.1.0 
    │ ├─┬ compression@1.5.2 
    │ │ ├─┬ accepts@1.2.13 
    │ │ │ └── negotiator@0.5.3 
    │ │ ├─┬ compressible@2.0.11 
    │ │ │ └── mime-db@1.30.0 
    │ │ └─┬ debug@2.2.0 
    │ │   └── ms@0.7.1 
    │ ├─┬ connect-timeout@1.6.2 
    │ │ ├── debug@2.2.0 
    │ │ └── ms@0.7.1 
    │ ├── cookie-parser@1.3.5 
    │ ├─┬ csurf@1.8.3 
    │ │ └─┬ csrf@3.0.6 
    │ │   ├── rndm@1.2.0 
    │ │   ├── tsscmp@1.0.5 
    │ │   └─┬ uid-safe@2.1.4 
    │ │     └── random-bytes@1.0.0 
    │ ├─┬ errorhandler@1.4.3 
    │ │ └─┬ accepts@1.3.4 
    │ │   └── negotiator@0.6.1 
    │ ├─┬ express-session@1.11.3 
    │ │ ├── crc@3.3.0 
    │ │ ├─┬ debug@2.2.0 
    │ │ │ └── ms@0.7.1 
    │ │ ├─┬ uid-safe@2.0.0 
    │ │ │ └── base64-url@1.2.1 
    │ │ └── utils-merge@1.0.0 
    │ ├── finalhandler@0.4.0 
    │ ├─┬ http-errors@1.3.1 
    │ │ └── inherits@2.0.3 
    │ ├─┬ method-override@2.3.10 
    │ │ └── vary@1.1.2 
    │ ├─┬ morgan@1.6.1 
    │ │ └─┬ debug@2.2.0 
    │ │   └── ms@0.7.1 
    │ ├─┬ multiparty@3.3.2 
    │ │ ├─┬ readable-stream@1.1.14 
    │ │ │ ├── core-util-is@1.0.2 
    │ │ │ ├── isarray@0.0.1 
    │ │ │ └── string_decoder@0.10.31 
    │ │ └── stream-counter@0.2.0 
    │ ├── on-headers@1.0.1 
    │ ├── pause@0.1.0 
    │ ├── qs@4.0.0 
    │ ├─┬ response-time@2.3.2 
    │ │ └── depd@1.1.1 
    │ ├─┬ serve-favicon@2.3.2 
    │ │ └── ms@0.7.2 
    │ ├─┬ serve-index@1.7.3 
    │ │ ├── batch@0.5.3 
    │ │ ├─┬ debug@2.2.0 
    │ │ │ └── ms@0.7.1 
    │ │ └── mime-types@2.1.17 
    │ ├─┬ serve-static@1.10.3 
    │ │ └─┬ send@0.13.2 
    │ │   ├── debug@2.2.0 
    │ │   ├── depd@1.1.1 
    │ │   ├── destroy@1.0.4 
    │ │   ├── ms@0.7.1 
    │ │   └── statuses@1.2.1 
    │ ├─┬ type-is@1.6.15 
    │ │ └── media-typer@0.3.0 
    │ └── vhost@3.0.2 
    ├── content-disposition@0.5.0 
    ├── content-type@1.0.4 
    ├── cookie@0.1.3 
    ├── cookie-signature@1.0.6 
    ├─┬ debug@2.2.0 
    │ └── ms@0.7.1 
    ├── depd@1.0.1 
    ├── escape-html@1.0.2 
    ├── etag@1.7.0 
    ├── fresh@0.3.0 
    ├── merge-descriptors@1.0.0 
    ├── methods@1.1.2 
    ├─┬ mkdirp@0.5.1 
    │ └── minimist@0.0.8 
    ├─┬ proxy-addr@1.0.10 
    │ ├── forwarded@0.1.2 
    │ └── ipaddr.js@1.0.5 
    ├── range-parser@1.0.3 
    ├─┬ send@0.13.0 
    │ ├── debug@2.2.0 
    │ ├── destroy@1.0.3 
    │ ├── escape-html@1.0.2 
    │ ├── mime@1.3.4 
    │ ├── ms@0.7.1 
    │ └── statuses@1.2.1 
    ├── utils-merge@1.0.0 
    └── vary@1.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/rabbitmq_adapter/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 28.999999999999996% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","create","fromCharCode","RegExp","apply"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.068 took 37.0263s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program 'use strict';

var assert = require("assert");

// JavaScript is numerically challenged
var SHIFT_LEFT_32 = (1 << 16) * (1 << 16);
var SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;

// The maximum contiguous integer that can be held in a IEEE754 double
var MAX_INT = 0x1fffffffffffff;

function isContiguousInt(val) {
    return val <= MAX_INT && val >= -MAX_INT;
}

function assertContiguousInt(val) {
    assert(isContiguousInt(val), "number cannot be represented as a contiguous integer");
}

module.exports.isContiguousInt = isContiguousInt;
module.exports.assertContiguousInt = assertContiguousInt;

// Fill in the regular procedures
['UInt', 'Int'].forEach(function (sign) {
  var suffix = sign + '8';
  module.exports['read' + suffix] =
    Buffer.prototype['read' + suffix].call;
  module.exports['write' + suffix] =
    Buffer.prototype['write' + suffix].call;
  
  ['16', '32'].forEach(function (size) {
    ['LE', 'BE'].forEach(function (endian) {
      var suffix = sign + size + endian;
      var read = Buffer.prototype['read' + suffix];
      module.exports['read' + suffix] =
        function (buf, offset, noAssert) {
          return read.call(buf, offset, noAssert);
        };
      var write = Buffer.prototype['write' + suffix];
      module.exports['write' + suffix] =
        function (buf, val, offset, noAssert) {
          return write.call(buf, val, offset, noAssert);
        };
    });
  });
});

// Check that a value is an integer within the given range
function check_int(val, min, max) {
    assert.ok(typeof(val) == 'number' && val >= min && val <= max && Math.floor(val) === val, "not a number in the required range");
}

function readUInt24BE(buf, offset, noAssert) {
  return buf.readUInt8(offset, noAssert) << 16 | buf.readUInt16BE(offset + 1, noAssert);
}
module.exports.readUInt24BE = readUInt24BE;

function writeUInt24BE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, 0, 0xffffff);
        assert.ok(offset + 3 <= buf.length, "attempt to write beyond end of buffer");
    }

    buf.writeUInt8(val >>> 16, offset, noAssert);
    buf.writeUInt16BE(val & 0xffff, offset + 1, noAssert);
}
module.exports.writeUInt24BE = writeUInt24BE;

function readUInt40BE(buf, offset, noAssert) {
    return (buf.readUInt8(offset, noAssert) || 0) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 1, noAssert);
}
module.exports.readUInt40BE = readUInt40BE;

function writeUInt40BE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, 0, 0xffffffffff);
        assert.ok(offset + 5 <= buf.length, "attempt to write beyond end of buffer");
    }

    buf.writeUInt8(Math.floor(val * SHIFT_RIGHT_32), offset, noAssert);
    buf.writeInt32BE(val & -1, offset + 1, noAssert);
}
module.exports.writeUInt40BE = writeUInt40BE;

function readUInt48BE(buf, offset, noAssert) {
    return buf.readUInt16BE(offset, noAssert) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 2, noAssert);
}
module.exports.readUInt48BE = readUInt48BE;

function writeUInt48BE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, 0, 0xffffffffffff);
        assert.ok(offset + 6 <= buf.length, "attempt to write beyond end of buffer");
    }

    buf.writeUInt16BE(Math.floor(val * SHIFT_RIGHT_32), offset, noAssert);
    buf.writeInt32BE(val & -1, offset + 2, noAssert);
}
module.exports.writeUInt48BE = writeUInt48BE;

function readUInt56BE(buf, offset, noAssert) {
    return ((buf.readUInt8(offset, noAssert) || 0) << 16 | buf.readUInt16BE(offset + 1, noAssert)) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 3, noAssert);
}
module.exports.readUInt56BE = readUInt56BE;

function writeUInt56BE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, 0, 0xffffffffffffff);
        assert.ok(offset + 7 <= buf.length, "attempt to write beyond end of buffer");
    }

    if (val < 0x100000000000000) {
        var hi = Math.floor(val * SHIFT_RIGHT_32);
        buf.writeUInt8(hi >>> 16, offset, noAssert);
        buf.writeUInt16BE(hi & 0xffff, offset + 1, noAssert);
        buf.writeInt32BE(val & -1, offset + 3, noAssert);
    } else {
        // Special case because 2^56-1 gets rounded up to 2^56
        buf[offset] = 0xff;
        buf[offset+1] = 0xff;
        buf[offset+2] = 0xff;
        buf[offset+3] = 0xff;
        buf[offset+4] = 0xff;
        buf[offset+5] = 0xff;
        buf[offset+6] = 0xff;
    }
}
module.exports.writeUInt56BE = writeUInt56BE;

function readUInt64BE(buf, offset, noAssert) {
    return buf.readUInt32BE(offset, noAssert) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 4, noAssert);
}
module.exports.readUInt64BE = readUInt64BE;

function writeUInt64BE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, 0, 0xffffffffffffffff);
        assert.ok(offset + 8 <= buf.length, "attempt to write beyond end of buffer");
    }

    if (val < 0x10000000000000000) {
        buf.writeUInt32BE(Math.floor(val * SHIFT_RIGHT_32), offset, noAssert);
        buf.writeInt32BE(val & -1, offset + 4, noAssert);
    } else {
        // Special case because 2^64-1 gets rounded up to 2^64
        buf[offset] = 0xff;
        buf[offset+1] = 0xff;
        buf[offset+2] = 0xff;
        buf[offset+3] = 0xff;
        buf[offset+4] = 0xff;
        buf[offset+5] = 0xff;
        buf[offset+6] = 0xff;
        buf[offset+7] = 0xff;
    }
}
module.exports.writeUInt64BE = writeUInt64BE;

function readUInt24LE(buf, offset, noAssert) {
    return buf.readUInt8(offset + 2, noAssert) << 16 | buf.readUInt16LE(offset, noAssert);
}
module.exports.readUInt24LE = readUInt24LE;

function writeUInt24LE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, 0, 0xffffff);
        assert.ok(offset + 3 <= buf.length, "attempt to write beyond end of buffer");
    }

    buf.writeUInt16LE(val & 0xffff, offset, noAssert);
    buf.writeUInt8(val >>> 16, offset + 2, noAssert);
}
module.exports.writeUInt24LE = writeUInt24LE;

function readUInt40LE(buf, offset, noAssert) {
    return (buf.readUInt8(offset + 4, noAssert) || 0) * SHIFT_LEFT_32 + buf.readUInt32LE(offset, noAssert);
}
module.exports.readUInt40LE = readUInt40LE;

function writeUInt40LE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, 0, 0xffffffffff);
        assert.ok(offset + 5 <= buf.length, "attempt to write beyond end of buffer");
    }

    buf.writeInt32LE(val & -1, offset, noAssert);
    buf.writeUInt8(Math.floor(val * SHIFT_RIGHT_32), offset + 4, noAssert);
}
module.exports.writeUInt40LE = writeUInt40LE;

function readUInt48LE(buf, offset, noAssert) {
    return buf.readUInt16LE(offset + 4, noAssert) * SHIFT_LEFT_32 + buf.readUInt32LE(offset, noAssert);
}
module.exports.readUInt48LE = readUInt48LE;

function writeUInt48LE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, 0, 0xffffffffffff);
        assert.ok(offset + 6 <= buf.length, "attempt to write beyond end of buffer");
    }

    buf.writeInt32LE(val & -1, offset, noAssert);
    buf.writeUInt16LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4, noAssert);
}
module.exports.writeUInt48LE = writeUInt48LE;

function readUInt56LE(buf, offset, noAssert) {
    return ((buf.readUInt8(offset + 6, noAssert) || 0) << 16 | buf.readUInt16LE(offset + 4, noAssert)) * SHIFT_LEFT_32 + buf.readUInt32LE(offset, noAssert);
}
module.exports.readUInt56LE = readUInt56LE;

function writeUInt56LE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, 0, 0xffffffffffffff);
        assert.ok(offset + 7 <= buf.length, "attempt to write beyond end of buffer");
    }

    if (val < 0x100000000000000) {
        buf.writeInt32LE(val & -1, offset, noAssert);
        var hi = Math.floor(val * SHIFT_RIGHT_32);
        buf.writeUInt16LE(hi & 0xffff, offset + 4, noAssert);
        buf.writeUInt8(hi >>> 16, offset + 6, noAssert);
    } else {
        // Special case because 2^56-1 gets rounded up to 2^56
        buf[offset] = 0xff;
        buf[offset+1] = 0xff;
        buf[offset+2] = 0xff;
        buf[offset+3] = 0xff;
        buf[offset+4] = 0xff;
        buf[offset+5] = 0xff;
        buf[offset+6] = 0xff;
    }
}
module.exports.writeUInt56LE = writeUInt56LE;

function readUInt64LE(buf, offset, noAssert) {
    return buf.readUInt32LE(offset + 4, noAssert) * SHIFT_LEFT_32 + buf.readUInt32LE(offset, noAssert);
}
module.exports.readUInt64LE = readUInt64LE;

function writeUInt64LE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, 0, 0xffffffffffffffff);
        assert.ok(offset + 8 <= buf.length, "attempt to write beyond end of buffer");
    }

    if (val < 0x10000000000000000) {
        buf.writeInt32LE(val & -1, offset, noAssert);
        buf.writeUInt32LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4, noAssert);
    } else {
        // Special case because 2^64-1 gets rounded up to 2^64
        buf[offset] = 0xff;
        buf[offset+1] = 0xff;
        buf[offset+2] = 0xff;
        buf[offset+3] = 0xff;
        buf[offset+4] = 0xff;
        buf[offset+5] = 0xff;
        buf[offset+6] = 0xff;
        buf[offset+7] = 0xff;
    }
}
module.exports.writeUInt64LE = writeUInt64LE;


function readInt24BE(buf, offset, noAssert) {
    return (buf.readInt8(offset, noAssert) << 16) + buf.readUInt16BE(offset + 1, noAssert);
}
module.exports.readInt24BE = readInt24BE;

function writeInt24BE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, -0x800000, 0x7fffff);
        assert.ok(offset + 3 <= buf.length, "attempt to write beyond end of buffer");
    }

    buf.writeInt8(val >> 16, offset, noAssert);
    buf.writeUInt16BE(val & 0xffff, offset + 1, noAssert);
}
module.exports.writeInt24BE = writeInt24BE;

function readInt40BE(buf, offset, noAssert) {
    return (buf.readInt8(offset, noAssert) || 0) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 1, noAssert);
}
module.exports.readInt40BE = readInt40BE;

function writeInt40BE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, -0x8000000000, 0x7fffffffff);
        assert.ok(offset + 5 <= buf.length, "attempt to write beyond end of buffer");
    }

    buf.writeInt8(Math.floor(val * SHIFT_RIGHT_32), offset, noAssert);
    buf.writeInt32BE(val & -1, offset + 1, noAssert);
}
module.exports.writeInt40BE = writeInt40BE;

function readInt48BE(buf, offset, noAssert) {
    return buf.readInt16BE(offset, noAssert) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 2, noAssert);
}
module.exports.readInt48BE = readInt48BE;

function writeInt48BE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, -0x800000000000, 0x7fffffffffff);
        assert.ok(offset + 6 <= buf.length, "attempt to write beyond end of buffer");
    }

    buf.writeInt16BE(Math.floor(val * SHIFT_RIGHT_32), offset, noAssert);
    buf.writeInt32BE(val & -1, offset + 2, noAssert);
}
module.exports.writeInt48BE = writeInt48BE;

function readInt56BE(buf, offset, noAssert) {
    return (((buf.readInt8(offset, noAssert) || 0) << 16) + buf.readUInt16BE(offset + 1, noAssert)) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 3, noAssert);
}
module.exports.readInt56BE = readInt56BE;

function writeInt56BE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, -0x800000000000000, 0x7fffffffffffff);
        assert.ok(offset + 7 <= buf.length, "attempt to write beyond end of buffer");
    }

    if (val < 0x80000000000000) {
        var hi = Math.floor(val * SHIFT_RIGHT_32);
        buf.writeInt8(hi >> 16, offset, noAssert);
        buf.writeUInt16BE(hi & 0xffff, offset + 1, noAssert);
        buf.writeInt32BE(val & -1, offset + 3, noAssert);
    } else {
        // Special case because 2^55-1 gets rounded up to 2^55
        buf[offset] = 0x7f;
        buf[offset+1] = 0xff;
        buf[offset+2] = 0xff;
        buf[offset+3] = 0xff;
        buf[offset+4] = 0xff;
        buf[offset+5] = 0xff;
        buf[offset+6] = 0xff;
    }
}
module.exports.writeInt56BE = writeInt56BE;

function readInt64BE(buf, offset, noAssert) {
    return buf.readInt32BE(offset, noAssert) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 4, noAssert);
}
module.exports.readInt64BE = readInt64BE;

function writeInt64BE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, -0x800000000000000000, 0x7fffffffffffffff);
        assert.ok(offset + 8 <= buf.length, "attempt to write beyond end of buffer");
    }

    if (val < 0x8000000000000000) {
        buf.writeInt32BE(Math.floor(val * SHIFT_RIGHT_32), offset, noAssert);
        buf.writeInt32BE(val & -1, offset + 4, noAssert);
    } else {
        // Special case because 2^63-1 gets rounded up to 2^63
        buf[offset] = 0x7f;
        buf[offset+1] = 0xff;
        buf[offset+2] = 0xff;
        buf[offset+3] = 0xff;
        buf[offset+4] = 0xff;
        buf[offset+5] = 0xff;
        buf[offset+6] = 0xff;
        buf[offset+7] = 0xff;
    }
}
module.exports.writeInt64BE = writeInt64BE;

function readInt24LE(buf, offset, noAssert) {
    return (buf.readInt8(offset + 2, noAssert) << 16) + buf.readUInt16LE(offset, noAssert);
}
module.exports.readInt24LE = readInt24LE;

function writeInt24LE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, -0x800000, 0x7fffff);
        assert.ok(offset + 3 <= buf.length, "attempt to write beyond end of buffer");
    }

    buf.writeUInt16LE(val & 0xffff, offset, noAssert);
    buf.writeInt8(val >> 16, offset + 2, noAssert);
}
module.exports.writeInt24LE = writeInt24LE;

function readInt40LE(buf, offset, noAssert) {
    return (buf.readInt8(offset + 4, noAssert) || 0) * SHIFT_LEFT_32 + buf.readUInt32LE(offset, noAssert);
}
module.exports.readInt40LE = readInt40LE;

function writeInt40LE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, -0x8000000000, 0x7fffffffff);
        assert.ok(offset + 5 <= buf.length, "attempt to write beyond end of buffer");
    }

    buf.writeInt32LE(val & -1, offset, noAssert);
    buf.writeInt8(Math.floor(val * SHIFT_RIGHT_32), offset + 4, noAssert);
}
module.exports.writeInt40LE = writeInt40LE;

function readInt48LE(buf, offset, noAssert) {
    return buf.readInt16LE(offset + 4, noAssert) * SHIFT_LEFT_32 + buf.readUInt32LE(offset, noAssert);
}
module.exports.readInt48LE = readInt48LE;

function writeInt48LE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, -0x800000000000, 0x7fffffffffff);
        assert.ok(offset + 6 <= buf.length, "attempt to write beyond end of buffer");
    }

    buf.writeInt32LE(val & -1, offset, noAssert);
    buf.writeInt16LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4, noAssert);
}
module.exports.writeInt48LE = writeInt48LE;

function readInt56LE(buf, offset, noAssert) {
    return (((buf.readInt8(offset + 6, noAssert) || 0) << 16) + buf.readUInt16LE(offset + 4, noAssert)) * SHIFT_LEFT_32 + buf.readUInt32LE(offset, noAssert);
}
module.exports.readInt56LE = readInt56LE;

function writeInt56LE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, -0x80000000000000, 0x7fffffffffffff);
        assert.ok(offset + 7 <= buf.length, "attempt to write beyond end of buffer");
    }

    if (val < 0x80000000000000) {
        buf.writeInt32LE(val & -1, offset, noAssert);
        var hi = Math.floor(val * SHIFT_RIGHT_32);
        buf.writeUInt16LE(hi & 0xffff, offset + 4, noAssert);
        buf.writeInt8(hi >> 16, offset + 6, noAssert);
    } else {
        // Special case because 2^55-1 gets rounded up to 2^55
        buf[offset] = 0xff;
        buf[offset+1] = 0xff;
        buf[offset+2] = 0xff;
        buf[offset+3] = 0xff;
        buf[offset+4] = 0xff;
        buf[offset+5] = 0xff;
        buf[offset+6] = 0x7f;
    }
}
module.exports.writeInt56LE = writeInt56LE;

function readInt64LE(buf, offset, noAssert) {
    return buf.readInt32LE(offset + 4, noAssert) * SHIFT_LEFT_32 + buf.readUInt32LE(offset, noAssert);
}
module.exports.readInt64LE = readInt64LE;

function writeInt64LE(buf, val, offset, noAssert) {
    if (!noAssert) {
        check_int(val, -0x8000000000000000, 0x7fffffffffffffff);
        assert.ok(offset + 8 <= buf.length, "attempt to write beyond end of buffer");
    }

    if (val < 0x8000000000000000) {
        buf.writeInt32LE(val & -1, offset, noAssert);
        buf.writeInt32LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4, noAssert);
    } else {
        // Special case because 2^55-1 gets rounded up to 2^55
        buf[offset] = 0xff;
        buf[offset+1] = 0xff;
        buf[offset+2] = 0xff;
        buf[offset+3] = 0xff;
        buf[offset+4] = 0xff;
        buf[offset+5] = 0xff;
        buf[offset+6] = 0xff;
        buf[offset+7] = 0x7f;
    }
}
module.exports.writeInt64LE = writeInt64LE;
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/rabbitmq_adapter/node_modules/rabbitmq_adapter/index.js. Coverage (Term): 5% Coverage (LOC): 6%
*- File /root/Targets/rabbitmq_adapter/node_modules/bramqp/lib/bramqp.js. Coverage (Term): 30% Coverage (LOC): 38%
*- File /root/Targets/rabbitmq_adapter/node_modules/bramqp/lib/specification.js. Coverage (Term): 30% Coverage (LOC): 27%
*- File /root/Targets/rabbitmq_adapter/node_modules/xml2js/lib/xml2js.js. Coverage (Term): 92% Coverage (LOC): 97%
*- File /root/Targets/rabbitmq_adapter/node_modules/xml2js/lib/defaults.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/rabbitmq_adapter/node_modules/xml2js/lib/builder.js. Coverage (Term): 12% Coverage (LOC): 15%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/index.js. Coverage (Term): 37% Coverage (LOC): 39%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/Utility.js. Coverage (Term): 26% Coverage (LOC): 34%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLDocument.js. Coverage (Term): 51% Coverage (LOC): 56%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLNode.js. Coverage (Term): 15% Coverage (LOC): 28%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLStringifier.js. Coverage (Term): 26% Coverage (LOC): 46%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLStringWriter.js. Coverage (Term): 13% Coverage (LOC): 21%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLDeclaration.js. Coverage (Term): 48% Coverage (LOC): 53%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLDocType.js. Coverage (Term): 36% Coverage (LOC): 53%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLDTDAttList.js. Coverage (Term): 37% Coverage (LOC): 38%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLDTDEntity.js. Coverage (Term): 36% Coverage (LOC): 37%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLDTDElement.js. Coverage (Term): 49% Coverage (LOC): 54%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLDTDNotation.js. Coverage (Term): 46% Coverage (LOC): 51%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLCData.js. Coverage (Term): 57% Coverage (LOC): 68%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLComment.js. Coverage (Term): 57% Coverage (LOC): 68%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLElement.js. Coverage (Term): 29% Coverage (LOC): 31%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLAttribute.js. Coverage (Term): 33% Coverage (LOC): 48%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLRaw.js. Coverage (Term): 57% Coverage (LOC): 68%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLText.js. Coverage (Term): 57% Coverage (LOC): 68%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLProcessingInstruction.js. Coverage (Term): 53% Coverage (LOC): 62%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLWriterBase.js. Coverage (Term): 12% Coverage (LOC): 16%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLDocumentCB.js. Coverage (Term): 21% Coverage (LOC): 33%
*- File /root/Targets/rabbitmq_adapter/node_modules/xmlbuilder/lib/XMLStreamWriter.js. Coverage (Term): 15% Coverage (LOC): 26%
*- File /root/Targets/rabbitmq_adapter/node_modules/xml2js/lib/parser.js. Coverage (Term): 25% Coverage (LOC): 29%
*- File /root/Targets/rabbitmq_adapter/node_modules/sax/lib/sax.js. Coverage (Term): 19% Coverage (LOC): 35%
*- File /root/Targets/rabbitmq_adapter/node_modules/xml2js/lib/bom.js. Coverage (Term): 54% Coverage (LOC): 60%
*- File /root/Targets/rabbitmq_adapter/node_modules/xml2js/lib/processors.js. Coverage (Term): 35% Coverage (LOC): 58%
*- File /root/Targets/rabbitmq_adapter/node_modules/bramqp/lib/valueTypes.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/rabbitmq_adapter/node_modules/bramqp/lib/connectionHandle.js. Coverage (Term): 2% Coverage (LOC): 3%
*- File /root/Targets/rabbitmq_adapter/node_modules/async/lib/async.js. Coverage (Term): 10% Coverage (LOC): 14%
*- File /root/Targets/rabbitmq_adapter/node_modules/bramqp/lib/frameParser.js. Coverage (Term): 1% Coverage (LOC): 2%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
