/root/Targets/mongoui
└─┬ mongoui@4.2.1 
  ├─┬ body-parser@1.18.2 
  │ ├── bytes@3.0.0 
  │ ├── content-type@1.0.4 
  │ ├── debug@2.6.9 
  │ ├── depd@1.1.1 
  │ ├─┬ http-errors@1.6.2 
  │ │ ├── inherits@2.0.3 
  │ │ └── setprototypeof@1.0.3 
  │ ├── iconv-lite@0.4.19 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── qs@6.5.1 
  │ ├─┬ raw-body@2.3.2 
  │ │ └── unpipe@1.0.0 
  │ └─┬ type-is@1.6.15 
  │   ├── media-typer@0.3.0 
  │   └── mime-types@2.1.17 
  ├─┬ compression@1.7.1 
  │ ├─┬ accepts@1.3.4 
  │ │ └── negotiator@0.6.1 
  │ ├─┬ compressible@2.0.11 
  │ │ └── mime-db@1.30.0 
  │ ├── on-headers@1.0.1 
  │ ├── safe-buffer@5.1.1 
  │ └── vary@1.1.2 
  ├─┬ convict@2.0.0 
  │ ├── json5@0.5.1 
  │ ├── lodash.clonedeep@4.5.0 
  │ ├── minimist@1.2.0 
  │ ├── moment@2.17.1 
  │ ├── validator@6.2.0 
  │ └─┬ varify@0.1.1 
  │   ├─┬ redeyed@0.4.4 
  │   │ └── esprima@1.0.4 
  │   └── through@2.3.8 
  ├─┬ cors@2.8.4 
  │ └── object-assign@4.1.1 
  ├── deep-equal@1.0.1 
  ├─┬ errorhandler@1.5.0 
  │ └── escape-html@1.0.3 
  ├─┬ express@4.16.1 
  │ ├── array-flatten@1.1.1 
  │ ├── content-disposition@0.5.2 
  │ ├── cookie@0.3.1 
  │ ├── cookie-signature@1.0.6 
  │ ├── encodeurl@1.0.1 
  │ ├── etag@1.8.1 
  │ ├── finalhandler@1.1.0 
  │ ├── fresh@0.5.2 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@2.0.2 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.5.2 
  │ ├── range-parser@1.2.0 
  │ ├─┬ send@0.16.1 
  │ │ ├── destroy@1.0.4 
  │ │ └── mime@1.4.1 
  │ ├── serve-static@1.13.1 
  │ ├── setprototypeof@1.1.0 
  │ ├── statuses@1.3.1 
  │ └── utils-merge@1.0.1 
  ├─┬ express-handlebars@3.0.0 
  │ ├─┬ glob@6.0.4 
  │ │ ├─┬ inflight@1.0.6 
  │ │ │ └── wrappy@1.0.2 
  │ │ ├─┬ minimatch@3.0.4 
  │ │ │ └─┬ brace-expansion@1.1.8 
  │ │ │   ├── balanced-match@1.0.0 
  │ │ │   └── concat-map@0.0.1 
  │ │ ├── once@1.4.0 
  │ │ └── path-is-absolute@1.0.1 
  │ ├── graceful-fs@4.1.11 
  │ ├─┬ handlebars@4.0.10 
  │ │ ├── async@1.5.2 
  │ │ ├─┬ optimist@0.6.1 
  │ │ │ ├── minimist@0.0.10 
  │ │ │ └── wordwrap@0.0.3 
  │ │ ├─┬ source-map@0.4.4 
  │ │ │ └── amdefine@1.0.1 
  │ │ └─┬ uglify-js@2.8.29 
  │ │   ├── source-map@0.5.7 
  │ │   ├── uglify-to-browserify@1.0.2 
  │ │   └─┬ yargs@3.10.0 
  │ │     ├── camelcase@1.2.1 
  │ │     ├─┬ cliui@2.1.0 
  │ │     │ ├─┬ center-align@0.1.3 
  │ │     │ │ ├─┬ align-text@0.1.4 
  │ │     │ │ │ ├─┬ kind-of@3.2.2 
  │ │     │ │ │ │ └── is-buffer@1.1.5 
  │ │     │ │ │ ├── longest@1.0.1 
  │ │     │ │ │ └── repeat-string@1.6.1 
  │ │     │ │ └── lazy-cache@1.0.4 
  │ │     │ ├── right-align@0.1.3 
  │ │     │ └── wordwrap@0.0.2 
  │ │     └── window-size@0.1.0 
  │ ├─┬ object.assign@4.0.4 
  │ │ ├─┬ define-properties@1.1.2 
  │ │ │ └── foreach@2.0.5 
  │ │ ├── function-bind@1.1.1 
  │ │ └── object-keys@1.0.11 
  │ └─┬ promise@7.3.1 
  │   └── asap@2.0.6 
  ├── getconfig@3.1.0 
  ├─┬ UNMET PEER DEPENDENCY mongodb@2.2.31
  │ ├── es6-promise@3.2.1 
  │ ├─┬ mongodb-core@2.1.15 
  │ │ ├── bson@1.0.4 
  │ │ └─┬ require_optional@1.0.1 
  │ │   ├── resolve-from@2.0.0 
  │ │   └── semver@5.4.1 
  │ └─┬ readable-stream@2.2.7 
  │   ├── buffer-shims@1.0.0 
  │   ├── core-util-is@1.0.2 
  │   ├── isarray@1.0.0 
  │   ├── process-nextick-args@1.0.7 
  │   ├── string_decoder@1.0.3 
  │   └── util-deprecate@1.0.2 
  ├── mongoskin@2.0.3 
  ├── neo-async@1.8.0 
  ├─┬ opn-cli@3.1.0 
  │ ├── file-type@3.9.0 
  │ ├── get-stdin@5.0.1 
  │ ├─┬ meow@3.7.0 
  │ │ ├─┬ camelcase-keys@2.1.0 
  │ │ │ └── camelcase@2.1.1 
  │ │ ├── decamelize@1.2.0 
  │ │ ├─┬ loud-rejection@1.6.0 
  │ │ │ ├─┬ currently-unhandled@0.4.1 
  │ │ │ │ └── array-find-index@1.0.2 
  │ │ │ └── signal-exit@3.0.2 
  │ │ ├── map-obj@1.0.1 
  │ │ ├── minimist@1.2.0 
  │ │ ├─┬ normalize-package-data@2.4.0 
  │ │ │ ├── hosted-git-info@2.5.0 
  │ │ │ ├─┬ is-builtin-module@1.0.0 
  │ │ │ │ └── builtin-modules@1.1.1 
  │ │ │ └─┬ validate-npm-package-license@3.0.1 
  │ │ │   ├─┬ spdx-correct@1.0.2 
  │ │ │   │ └── spdx-license-ids@1.2.2 
  │ │ │   └── spdx-expression-parse@1.0.4 
  │ │ ├─┬ read-pkg-up@1.0.1 
  │ │ │ ├─┬ find-up@1.1.2 
  │ │ │ │ └── path-exists@2.1.0 
  │ │ │ └─┬ read-pkg@1.1.0 
  │ │ │   ├─┬ load-json-file@1.1.0 
  │ │ │   │ ├─┬ parse-json@2.2.0 
  │ │ │   │ │ └─┬ error-ex@1.3.1 
  │ │ │   │ │   └── is-arrayish@0.2.1 
  │ │ │   │ └─┬ strip-bom@2.0.0 
  │ │ │   │   └── is-utf8@0.2.1 
  │ │ │   └── path-type@1.1.0 
  │ │ ├─┬ redent@1.0.0 
  │ │ │ ├─┬ indent-string@2.1.0 
  │ │ │ │ └─┬ repeating@2.0.1 
  │ │ │ │   └─┬ is-finite@1.0.2 
  │ │ │ │     └── number-is-nan@1.0.1 
  │ │ │ └─┬ strip-indent@1.0.1 
  │ │ │   └── get-stdin@4.0.1 
  │ │ └── trim-newlines@1.0.0 
  │ ├─┬ opn@4.0.2 
  │ │ └─┬ pinkie-promise@2.0.1 
  │ │   └── pinkie@2.0.4 
  │ └─┬ temp-write@2.1.0 
  │   ├─┬ mkdirp@0.5.1 
  │   │ └── minimist@0.0.8 
  │   ├── os-tmpdir@1.0.2 
  │   ├── pify@2.3.0 
  │   └── uuid@2.0.3 
  ├─┬ react@15.6.2 
  │ ├── create-react-class@15.6.2 
  │ ├─┬ fbjs@0.8.16 
  │ │ ├── core-js@1.2.7 
  │ │ ├─┬ isomorphic-fetch@2.2.1 
  │ │ │ ├─┬ node-fetch@1.7.3 
  │ │ │ │ ├── encoding@0.1.12 
  │ │ │ │ └── is-stream@1.1.0 
  │ │ │ └── whatwg-fetch@2.0.3 
  │ │ ├── setimmediate@1.0.5 
  │ │ └── ua-parser-js@0.7.14 
  │ ├─┬ loose-envify@1.3.1 
  │ │ └── js-tokens@3.0.2 
  │ └── prop-types@15.6.0 
  ├─┬ react-bootstrap@0.30.10 
  │ ├─┬ babel-runtime@6.26.0 
  │ │ ├── core-js@2.5.1 
  │ │ └── regenerator-runtime@0.11.0 
  │ ├── classnames@2.2.5 
  │ ├── dom-helpers@3.2.1 
  │ ├── invariant@2.2.2 
  │ ├── keycode@2.1.9 
  │ ├── react-overlays@0.6.12 
  │ ├── react-prop-types@0.4.0 
  │ ├── uncontrollable@4.1.0 
  │ └── warning@3.0.0 
  ├─┬ react-copy-to-clipboard@4.3.1 
  │ └─┬ copy-to-clipboard@3.0.8 
  │   └── toggle-selection@1.0.6 
  ├── react-dom@15.6.2 
  ├─┬ react-highlight@0.8.0 
  │ └── highlight.js@8.9.1 
  ├─┬ react-redux@4.4.1 
  │ ├── hoist-non-react-statics@1.2.0 
  │ └── lodash@4.17.4 
  ├─┬ react-router@2.8.1 
  │ └─┬ history@2.1.2 
  │   ├─┬ query-string@3.0.3 
  │   │ └── strict-uri-encode@1.1.0 
  │   └── warning@2.1.0 
  ├─┬ redux@3.3.1 
  │ └── lodash-es@4.17.4 
  ├── require-dir@0.3.2 
  └─┬ serve-favicon@2.4.5 
    └── ms@2.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/mongoui/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0618 took 5.7937s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
"use strict"

const opn = require('opn')

let log = console.log
const express = require('express')
const bodyParser = require('body-parser')
const compression = require('compression')
const expressHandlebars = require('express-handlebars')
const errorHandler = require('errorhandler')
const cors = require('cors')

const favicon = require('serve-favicon')
const path = require('path')

let mongoDb = require('mongodb')
let mongoskin = require('mongoskin')
let OId = require('mongoskin').ObjectId

let config = require('./config')

const port = config.api.port

let dbHostName, dbPortNumber, dbName

dbHostName = config.database.host
dbPortNumber = config.database.port
dbName = config.database.name

var app = express()
app.use(favicon(path.join(__dirname, 'public', 'img', 'favicons', 'favicon.ico')))
app.use(errorHandler())
app.use(cors({credential: false}))
app.use(bodyParser.json())
app.use(express.static(path.join(__dirname,'public')))

app.use(compression())

app.get('/api/dbs', function(req, res) {
  if (!req.admin) req.admin = mongoskin.db(`mongodb://${dbHostName}:${dbPortNumber}/${dbName}`).admin()
  req.admin.listDatabases(function(error, dbs) {
    res.json(dbs)
  })
})

app.param('dbName', function(req, res, next, dbName){
  var db = mongoskin.db(`mongodb://${dbHostName}:${dbPortNumber}/${dbName}`)
  req.db = db
  req.admin = db.admin()
  return next()
})
app.param('collectionName', function(req, res, next, collectionName){
  req.collection = req.db.collection(collectionName)
  return next()
})


app.get('/api/dbs/:dbName/collections', function(req, res, next) {
  req.db.collections(function(e, names) {
    if (!names) next(new Error('No collections'))
    let collections = names.map((collection)=>{
      log(collection.s.name)
      return {name: collection.s.name}
    })
    res.json({collections: collections})
  })
})

app.get('/api/dbs/:dbName/collections/:collectionName', function(req, res, next) {
  let query = {}
  try {
    query = JSON.parse(req.query.query)
    //recognize and convert any regex queries from strings into regex objects
    for (var prop in query){
      if ((query[prop][0] == "R" && query[prop][1] == "/") //arbitrary letter 'R' used by this app
        && (query[prop].length > 3)   //avoids a few corner cases
        && ((query[prop][(query[prop].length - 1) ] == "/" ) || (query[prop][(query[prop].length - 2)] == "/") || (query[prop][query[prop].length - 3 ] == "/" )|| (query[prop][query[prop].length - 4 ] == "/"  ))
      ){
        var splitRegex = query[prop].split("/")
        var makeRegex = new RegExp( splitRegex[1], splitRegex[2])
        query[prop] = makeRegex
      }
    }
  } catch (error) {
    console.log('Invalid query, cannot parse it.')
    query = {} // fail more gracefully.
    // return next(new Error('Invalid query, cannot parse it'))
  }
  if (query._id) {
    if (query._id['$in'] && Array.isArray(query._id.$in)) {
      query._id.$in = query._id.$in.map((id)=>{
        return OId(id)
      })
    } else query._id = OId(query._id)
  }
  req.collection.find(query || {}, {limit: req.query.limit || 20}).toArray(function(e, docs) {
    console.log('boo', docs, query)
    res.json({docs: docs})
  })
})

app.post('/api/dbs/:dbName/collections/:collectionName', function(req, res) {
  delete req.body._id
  req.collection.insert(req.body, function(e, results) {
    // console.log('boo', e, results)
    res.json(results)
  })
})

app.delete('/api/dbs/:dbName/collections/:collectionName/:id', function(req, res) {
  if (req.body._id && req.body._id != req.params.id) return res.status(400).json({error: 'ID in the body is not matching ID in the URL'})
  delete req.body._id
  req.collection.remove({ _id: mongoDb.ObjectId(req.params.id)}, function(e, results) {
    res.json(results)
  })
})

app.patch('/api/dbs/:dbName/collections/:collectionName/:id', function(req, res) {
  if (req.body._id && req.body._id != req.params.id) return res.status(400).json({error: 'ID in the body is not matching ID in the URL'})
  delete req.body._id
  req.collection.updateById(req.params.id, {$set: req.body}, function(e, results) {
    // console.log('boo', e, results)
    res.json(results)
  })
})


if (require.main === module) {
  app.listen(port, function(){
    if (process.env.NODE_ENV && process.env.NODE_ENV=='dev') {
      console.log('Mongoui API is listening on: %s', config.api.port)
    } else {
      console.log('Mongoui web app is listening on: %s', config.api.port)    
      // Opens the url in the default browser 
      opn(`http://localhost:${config.api.port}`)
    }
  })
} else {
  module.exports = app
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
