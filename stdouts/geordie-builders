/root/Targets/geordie-builders
└─┬ geordie-builders@1.0.425 
  ├── colors@1.1.2 
  ├── minimist@1.2.0 
  └─┬ prompt@0.2.14 
    ├── pkginfo@0.4.1 
    ├─┬ read@1.0.7 
    │ └── mute-stream@0.0.7 
    ├── revalidator@0.1.8 
    ├─┬ utile@0.2.1 
    │ ├── async@0.2.10 
    │ ├── deep-equal@1.0.1 
    │ ├── i@0.3.6 
    │ ├─┬ mkdirp@0.5.1 
    │ │ └── minimist@0.0.8 
    │ ├── ncp@0.4.2 
    │ └─┬ rimraf@2.6.2 
    │   └─┬ glob@7.1.2 
    │     ├── fs.realpath@1.0.0 
    │     ├─┬ inflight@1.0.6 
    │     │ └── wrappy@1.0.2 
    │     ├── inherits@2.0.3 
    │     ├─┬ minimatch@3.0.4 
    │     │ └─┬ brace-expansion@1.1.8 
    │     │   ├── balanced-match@1.0.0 
    │     │   └── concat-map@0.0.1 
    │     ├── once@1.4.0 
    │     └── path-is-absolute@1.0.1 
    └─┬ winston@0.8.3 
      ├── colors@0.6.2 
      ├── cycle@1.0.3 
      ├── eyes@0.1.8 
      ├── isstream@0.1.2 
      ├── pkginfo@0.3.1 
      └── stack-trace@0.0.10 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/geordie-builders/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.028 took 1.6391s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

// load color manager
var colors    = require('colors');

// clear screen and show greetings
process.stdout.write('\033c');
require("./tools/greeting")();

// check process arguments for a help flag
var help = process.argv.filter(function (arg) {
    // check for possibilities
    return arg.match(/([-]{0,2}help)|([-]{1,2}h)/i);
});

if(help.length > 0) {
    console.log(
        " Help and Information\n".green+
        "   This app will build a MEAN Application template based on mata-data.\n".white +
        "   You need a list of models, views, services and factories and it will\n".white +
        "   build the app with relevant unit tests, models and controller files built.\n".white +
        "   You can also ask for the bootstrap CSS to be loaded (CSS Only) onto your \n   project template.\n\n".white +
        " Commands:\n\n".green+
        "   help -help --help -h --h  ".yellow+
            "Prints this help file to the terminal.\n\n".white+
        "   -o <<filepath>>           ".yellow+
            "Chooses the output path of the built project. \n".white+
        "                             Will build to the current folder if no output flag is given\n\n".white
    );
    process.exit();
}

// extract runtime arguments from process (argv)
var argv      = require('minimist')(process.argv.slice(2));

// import frameworks
var prompt    = require('prompt');
var fs        = require('fs');
var path      = require('path');

// data gathering tools
var schema    = require('./tools/schema');
var getData   = require('./tools/get-data');

// project setup tools
var nodeB     = require("./tools/node-builder");
var setupDir  = require("./tools/setup-directories");
var copyFiles = require("./tools/copy-files");

// build tools
var sb        = require("./tools/build-services");
var apiB      = require("./tools/build-apis");
var indexB    = require("./tools/build-index");
var bs        = require("./tools/build-bootstrap");

// set output directory to runtime argument geordiebuilders -o <<path>>
var outputpath = argv.o || process.cwd();

// setup prompt
prompt.message = "";
prompt.delimiter = "";
prompt.start();

// make store
var settings;

console.log(" NOTE: names must not have any spaces or special characters!\n".dim);


function stage1(err, result) {
    settings = result;

    // get models
    console.log("\n Server API Models\n".white +
        " Enter names of server side models / API Routes\n".green +
        " Enter as: ModelName:CollectionName,\n\tie. Person:people\n".green +
        " Enter blank entry to stop.".green);

    getData(prompt, " model-name: ".green, stage2);
}

function stage2(models) {
    settings.models = models;

    // get view controllers
    console.log("\n Views and Controllers\n".white +
        " Enter names of views - ".green +
        " will make accompanying controllers and unit tests.\n".green +
        " Enter blank entry to stop.".green);

    getData(prompt, " view: ".green, stage3);

}

function stage3(views) {
    settings.views = views;

    // get factories
    console.log("\n Services - singletons\n".white +
        " Enter names of factories - ".green +
        " will make accompanying unit tests.\n".green +
        " Enter blank entry to stop.".green);

    getData(prompt, " factory: ".green, stage4);
}

function stage4(factories) {
    settings.factories = factories;

    // get services
    console.log("\n Services\n".white +
        " Enter names of services - ".green +
        " will make accompanying unit tests.\n".green +
        " Enter blank entry to stop.".green);

    getData(prompt, " service: ".green, stage5);
}

function stage5(services) {
    settings.services = services;

    console.log("\n\n Building project...\n".white);

    outputpath = path.join(outputpath, settings.nodeValues.name);

    if (!fs.existsSync(outputpath)) {
        console.log(" Creating output dir: " + outputpath+"\n");
        fs.mkdir(outputpath, function (err) {
            if(err) {
                console.log(" Error creating directory for project!".red);
                console.log(err);
            } else {
                console.log(" Folder created.".yellow);
                build();
            }
        });
    } else {
        build();
    }
}

function build() {
    nodeB(settings.nodeValues, outputpath);
    setupDir(outputpath, function(success) {
        if (success) {
            console.log(" Project directories creates.".yellow);

            // Copy files and create Views, Controllers and Routes
            success = success && copyFiles(outputpath, settings);

            // make Services and Factories
            success = success && sb(settings.services, settings.factories, settings.nodeValues.name, outputpath);

            // make API Routes and Model
            success = success && apiB(settings.models, outputpath);

            // make src/index.html
            success = success && indexB(settings.nodeValues.name,settings.views, settings.bootstrap.indexOf("y")>=0, outputpath);

            // bootstrap all files into app.js
            success = success && bs(settings, outputpath);

            // check all files created good
            if (success) {
                console.log("\n\n Project successfully created.\n\n".white);
            } else {
                console.log("\n\n Errors in creating project!!!\n\n".red);
            }

        } else {
            console.log(" Error! Can't create folder structure!".red);
        }
    });
}

// get project settings from schema
prompt.get(schema, stage1);
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
