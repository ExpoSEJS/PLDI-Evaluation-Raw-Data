
> keccak@1.3.0 install /root/Targets/eth-lightwallet/node_modules/keccak
> prebuild-install || node-gyp rebuild || echo "Keccak bindings compilation fail. Pure JS implementation will be used."


> secp256k1@3.3.0 install /root/Targets/eth-lightwallet/node_modules/secp256k1
> prebuild-install || node-gyp rebuild || echo "Secp256k1 bindings compilation fail. Pure JS implementation will be used."

/root/Targets/eth-lightwallet
└─┬ eth-lightwallet@2.5.6 
  ├─┬ bitcore-lib@0.14.0 
  │ ├── bn.js@2.0.4 
  │ ├── bs58@2.0.0 
  │ ├── buffer-compare@1.0.0 
  │ ├─┬ elliptic@3.0.3 
  │ │ ├── brorand@1.0.5 
  │ │ └── hash.js@1.0.3 
  │ ├── inherits@2.0.1 
  │ └── lodash@3.10.1 
  ├─┬ bitcore-mnemonic@1.2.5 
  │ └── unorm@1.4.1 
  ├─┬ buffer@4.9.1 
  │ ├── base64-js@1.2.1 
  │ ├── ieee754@1.1.8 
  │ └── isarray@1.0.0 
  ├── crypto-js@3.1.8 
  ├─┬ elliptic@3.1.0 
  │ ├── bn.js@2.2.0 
  │ ├── brorand@1.1.0 
  │ ├─┬ hash.js@1.1.3 
  │ │ └── minimalistic-assert@1.0.0 
  │ └── inherits@2.0.3 
  ├─┬ ethereumjs-tx@1.3.3 
  │ └── ethereum-common@0.0.18 
  ├─┬ ethereumjs-util@5.1.2 
  │ ├─┬ babel-preset-es2015@6.24.1 
  │ │ ├─┬ babel-plugin-check-es2015-constants@6.22.0 
  │ │ │ └─┬ babel-runtime@6.26.0 
  │ │ │   ├── core-js@2.5.1 
  │ │ │   └── regenerator-runtime@0.11.0 
  │ │ ├── babel-plugin-transform-es2015-arrow-functions@6.22.0 
  │ │ ├── babel-plugin-transform-es2015-block-scoped-functions@6.22.0 
  │ │ ├─┬ babel-plugin-transform-es2015-block-scoping@6.26.0 
  │ │ │ ├── babel-template@6.26.0 
  │ │ │ ├─┬ babel-traverse@6.26.0 
  │ │ │ │ ├── globals@9.18.0 
  │ │ │ │ └─┬ invariant@2.2.2 
  │ │ │ │   └── loose-envify@1.3.1 
  │ │ │ ├─┬ babel-types@6.26.0 
  │ │ │ │ ├── esutils@2.0.2 
  │ │ │ │ └── to-fast-properties@1.0.3 
  │ │ │ └── lodash@4.17.4 
  │ │ ├─┬ babel-plugin-transform-es2015-classes@6.24.1 
  │ │ │ ├── babel-helper-define-map@6.26.0 
  │ │ │ ├── babel-helper-function-name@6.24.1 
  │ │ │ ├── babel-helper-optimise-call-expression@6.24.1 
  │ │ │ ├── babel-helper-replace-supers@6.24.1 
  │ │ │ └── babel-messages@6.23.0 
  │ │ ├── babel-plugin-transform-es2015-computed-properties@6.24.1 
  │ │ ├── babel-plugin-transform-es2015-destructuring@6.23.0 
  │ │ ├── babel-plugin-transform-es2015-duplicate-keys@6.24.1 
  │ │ ├── babel-plugin-transform-es2015-for-of@6.23.0 
  │ │ ├── babel-plugin-transform-es2015-function-name@6.24.1 
  │ │ ├── babel-plugin-transform-es2015-literals@6.22.0 
  │ │ ├── babel-plugin-transform-es2015-modules-amd@6.24.1 
  │ │ ├─┬ babel-plugin-transform-es2015-modules-commonjs@6.26.0 
  │ │ │ └── babel-plugin-transform-strict-mode@6.24.1 
  │ │ ├─┬ babel-plugin-transform-es2015-modules-systemjs@6.24.1 
  │ │ │ └── babel-helper-hoist-variables@6.24.1 
  │ │ ├── babel-plugin-transform-es2015-modules-umd@6.24.1 
  │ │ ├── babel-plugin-transform-es2015-object-super@6.24.1 
  │ │ ├─┬ babel-plugin-transform-es2015-parameters@6.24.1 
  │ │ │ ├── babel-helper-call-delegate@6.24.1 
  │ │ │ └── babel-helper-get-function-arity@6.24.1 
  │ │ ├── babel-plugin-transform-es2015-shorthand-properties@6.24.1 
  │ │ ├── babel-plugin-transform-es2015-spread@6.22.0 
  │ │ ├─┬ babel-plugin-transform-es2015-sticky-regex@6.24.1 
  │ │ │ └── babel-helper-regex@6.26.0 
  │ │ ├── babel-plugin-transform-es2015-template-literals@6.22.0 
  │ │ ├── babel-plugin-transform-es2015-typeof-symbol@6.23.0 
  │ │ ├─┬ babel-plugin-transform-es2015-unicode-regex@6.24.1 
  │ │ │ └─┬ regexpu-core@2.0.0 
  │ │ │   ├── regenerate@1.3.3 
  │ │ │   ├── regjsgen@0.2.0 
  │ │ │   └─┬ regjsparser@0.1.5 
  │ │ │     └── jsesc@0.5.0 
  │ │ └─┬ babel-plugin-transform-regenerator@6.26.0 
  │ │   └── regenerator-transform@0.10.1 
  │ ├─┬ babelify@7.3.0 
  │ │ ├─┬ babel-core@6.26.0 
  │ │ │ ├─┬ babel-code-frame@6.26.0 
  │ │ │ │ ├─┬ chalk@1.1.3 
  │ │ │ │ │ ├── ansi-styles@2.2.1 
  │ │ │ │ │ ├── escape-string-regexp@1.0.5 
  │ │ │ │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ │ │ │ └── ansi-regex@2.1.1 
  │ │ │ │ │ ├── strip-ansi@3.0.1 
  │ │ │ │ │ └── supports-color@2.0.0 
  │ │ │ │ └── js-tokens@3.0.2 
  │ │ │ ├─┬ babel-generator@6.26.0 
  │ │ │ │ ├─┬ detect-indent@4.0.0 
  │ │ │ │ │ └─┬ repeating@2.0.1 
  │ │ │ │ │   └─┬ is-finite@1.0.2 
  │ │ │ │ │     └── number-is-nan@1.0.1 
  │ │ │ │ ├── jsesc@1.3.0 
  │ │ │ │ └── trim-right@1.0.1 
  │ │ │ ├── babel-helpers@6.24.1 
  │ │ │ ├─┬ babel-register@6.26.0 
  │ │ │ │ ├─┬ home-or-tmp@2.0.0 
  │ │ │ │ │ └── os-tmpdir@1.0.2 
  │ │ │ │ └── source-map-support@0.4.18 
  │ │ │ ├── babylon@6.18.0 
  │ │ │ ├── convert-source-map@1.5.0 
  │ │ │ ├─┬ debug@2.6.8 
  │ │ │ │ └── ms@2.0.0 
  │ │ │ ├── json5@0.5.1 
  │ │ │ ├─┬ minimatch@3.0.4 
  │ │ │ │ └─┬ brace-expansion@1.1.8 
  │ │ │ │   ├── balanced-match@1.0.0 
  │ │ │ │   └── concat-map@0.0.1 
  │ │ │ ├── path-is-absolute@1.0.1 
  │ │ │ ├── private@0.1.7 
  │ │ │ ├── slash@1.0.0 
  │ │ │ └── source-map@0.5.7 
  │ │ └── object-assign@4.1.1 
  │ ├── bn.js@4.11.8 
  │ ├─┬ create-hash@1.1.3 
  │ │ ├── cipher-base@1.0.4 
  │ │ ├─┬ ripemd160@2.0.1 
  │ │ │ └── hash-base@2.0.2 
  │ │ └── sha.js@2.4.8 
  │ ├─┬ ethjs-util@0.1.4 
  │ │ ├── is-hex-prefixed@1.0.0 
  │ │ └── strip-hex-prefix@1.0.0 
  │ ├─┬ keccak@1.3.0 
  │ │ ├── bindings@1.3.0 
  │ │ ├── nan@2.7.0 
  │ │ ├─┬ prebuild-install@2.2.2 
  │ │ │ ├── expand-template@1.1.0 
  │ │ │ ├── github-from-package@0.0.0 
  │ │ │ ├── minimist@1.2.0 
  │ │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ │ └── minimist@0.0.8 
  │ │ │ ├── node-abi@2.1.1 
  │ │ │ ├── noop-logger@0.1.1 
  │ │ │ ├─┬ npmlog@4.1.2 
  │ │ │ │ ├─┬ are-we-there-yet@1.1.4 
  │ │ │ │ │ ├── delegates@1.0.0 
  │ │ │ │ │ └─┬ readable-stream@2.3.3 
  │ │ │ │ │   ├── core-util-is@1.0.2 
  │ │ │ │ │   ├── process-nextick-args@1.0.7 
  │ │ │ │ │   ├── string_decoder@1.0.3 
  │ │ │ │ │   └── util-deprecate@1.0.2 
  │ │ │ │ ├── console-control-strings@1.1.0 
  │ │ │ │ ├─┬ gauge@2.7.4 
  │ │ │ │ │ ├── aproba@1.2.0 
  │ │ │ │ │ ├── has-unicode@2.0.1 
  │ │ │ │ │ ├── signal-exit@3.0.2 
  │ │ │ │ │ ├─┬ string-width@1.0.2 
  │ │ │ │ │ │ ├── code-point-at@1.1.0 
  │ │ │ │ │ │ └── is-fullwidth-code-point@1.0.0 
  │ │ │ │ │ └── wide-align@1.1.2 
  │ │ │ │ └── set-blocking@2.0.0 
  │ │ │ ├── os-homedir@1.0.2 
  │ │ │ ├─┬ pump@1.0.2 
  │ │ │ │ ├── end-of-stream@1.4.0 
  │ │ │ │ └─┬ once@1.4.0 
  │ │ │ │   └── wrappy@1.0.2 
  │ │ │ ├─┬ rc@1.2.1 
  │ │ │ │ ├── deep-extend@0.4.2 
  │ │ │ │ ├── ini@1.3.4 
  │ │ │ │ ├── minimist@1.2.0 
  │ │ │ │ └── strip-json-comments@2.0.1 
  │ │ │ ├─┬ simple-get@1.4.3 
  │ │ │ │ └── unzip-response@1.0.2 
  │ │ │ ├─┬ tar-fs@1.15.3 
  │ │ │ │ ├── chownr@1.0.1 
  │ │ │ │ └─┬ tar-stream@1.5.4 
  │ │ │ │   └── bl@1.2.1 
  │ │ │ ├── tunnel-agent@0.6.0 
  │ │ │ └── xtend@4.0.1 
  │ │ └── safe-buffer@5.1.1 
  │ └─┬ secp256k1@3.3.0 
  │   ├── bip66@1.1.5 
  │   ├── bn.js@4.11.8 
  │   ├─┬ drbg.js@1.0.1 
  │   │ ├─┬ browserify-aes@1.0.8 
  │   │ │ ├── buffer-xor@1.0.3 
  │   │ │ └─┬ evp_bytestokey@1.0.3 
  │   │ │   └─┬ md5.js@1.3.4 
  │   │ │     └── hash-base@3.0.4 
  │   │ └── create-hmac@1.1.6 
  │   └─┬ elliptic@6.4.0 
  │     ├── hmac-drbg@1.0.1 
  │     └── minimalistic-crypto-utils@1.0.1 
  ├── rlp@2.0.0 
  ├── scrypt-async@1.3.1 
  ├── tweetnacl@0.13.2 
  └─┬ web3@0.19.1 
    ├── bignumber.js@4.0.4 
    ├── utf8@2.1.2 
    ├── xhr2@0.1.4 
    └── xmlhttprequest@1.8.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/eth-lightwallet/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 20% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0587 took 6.0954s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:6) on program const createKeccakHash = require('keccak')
const secp256k1 = require('secp256k1')
const assert = require('assert')
const rlp = require('rlp')
const BN = require('bn.js')
const createHash = require('create-hash')
Object.assign(exports, require('ethjs-util'))

/**
 * the max integer that this VM can handle (a ```BN```)
 * @var {BN} MAX_INTEGER
 */
exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)

/**
 * 2^256 (a ```BN```)
 * @var {BN} TWO_POW256
 */
exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16)

/**
 * SHA3-256 hash of null (a ```String```)
 * @var {String} SHA3_NULL_S
 */
exports.SHA3_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'

/**
 * SHA3-256 hash of null (a ```Buffer```)
 * @var {Buffer} SHA3_NULL
 */
exports.SHA3_NULL = Buffer.from(exports.SHA3_NULL_S, 'hex')

/**
 * SHA3-256 of an RLP of an empty array (a ```String```)
 * @var {String} SHA3_RLP_ARRAY_S
 */
exports.SHA3_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'

/**
 * SHA3-256 of an RLP of an empty array (a ```Buffer```)
 * @var {Buffer} SHA3_RLP_ARRAY
 */
exports.SHA3_RLP_ARRAY = Buffer.from(exports.SHA3_RLP_ARRAY_S, 'hex')

/**
 * SHA3-256 hash of the RLP of null  (a ```String```)
 * @var {String} SHA3_RLP_S
 */
exports.SHA3_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'

/**
 * SHA3-256 hash of the RLP of null (a ```Buffer```)
 * @var {Buffer} SHA3_RLP
 */
exports.SHA3_RLP = Buffer.from(exports.SHA3_RLP_S, 'hex')

/**
 * [`BN`](https://github.com/indutny/bn.js)
 * @var {Function}
 */
exports.BN = BN

/**
 * [`rlp`](https://github.com/ethereumjs/rlp)
 * @var {Function}
 */
exports.rlp = rlp

/**
 * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
 * @var {Object}
 */
exports.secp256k1 = secp256k1

/**
 * Returns a buffer filled with 0s
 * @method zeros
 * @param {Number} bytes  the number of bytes the buffer should be
 * @return {Buffer}
 */
exports.zeros = function (bytes) {
  return Buffer.allocUnsafe(bytes).fill(0)
}

/**
 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @method lsetLength
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @param {Boolean} [right=false] whether to start padding form the left or right
 * @return {Buffer|Array}
 */
exports.setLengthLeft = exports.setLength = function (msg, length, right) {
  var buf = exports.zeros(length)
  msg = exports.toBuffer(msg)
  if (right) {
    if (msg.length < length) {
      msg.copy(buf)
      return buf
    }
    return msg.slice(0, length)
  } else {
    if (msg.length < length) {
      msg.copy(buf, length - msg.length)
      return buf
    }
    return msg.slice(-length)
  }
}

/**
 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @return {Buffer|Array}
 */
exports.setLengthRight = function (msg, length) {
  return exports.setLength(msg, length, true)
}

/**
 * Trims leading zeros from a `Buffer` or an `Array`
 * @param {Buffer|Array|String} a
 * @return {Buffer|Array|String}
 */
exports.unpad = exports.stripZeros = function (a) {
  a = exports.stripHexPrefix(a)
  var first = a[0]
  while (a.length > 0 && first.toString() === '0') {
    a = a.slice(1)
    first = a[0]
  }
  return a
}
/**
 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
 * @param {*} v the value
 */
exports.toBuffer = function (v) {
  if (!Buffer.isBuffer(v)) {
    if (Array.isArray(v)) {
      v = Buffer.from(v)
    } else if (typeof v === 'string') {
      if (exports.isHexString(v)) {
        v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex')
      } else {
        v = Buffer.from(v)
      }
    } else if (typeof v === 'number') {
      v = exports.intToBuffer(v)
    } else if (v === null || v === undefined) {
      v = Buffer.allocUnsafe(0)
    } else if (v.toArray) {
      // converts a BN to a Buffer
      v = Buffer.from(v.toArray())
    } else {
      throw new Error('invalid type')
    }
  }
  return v
}

/**
 * Converts a `Buffer` to a `Number`
 * @param {Buffer} buf
 * @return {Number}
 * @throws If the input number exceeds 53 bits.
 */
exports.bufferToInt = function (buf) {
  return new BN(exports.toBuffer(buf)).toNumber()
}

/**
 * Converts a `Buffer` into a hex `String`
 * @param {Buffer} buf
 * @return {String}
 */
exports.bufferToHex = function (buf) {
  buf = exports.toBuffer(buf)
  return '0x' + buf.toString('hex')
}

/**
 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
 * @param {Buffer} num
 * @return {BN}
 */
exports.fromSigned = function (num) {
  return new BN(num).fromTwos(256)
}

/**
 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
 * @param {BN} num
 * @return {Buffer}
 */
exports.toUnsigned = function (num) {
  return Buffer.from(num.toTwos(256).toArray())
}

/**
 * Creates SHA-3 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the SHA width
 * @return {Buffer}
 */
exports.sha3 = function (a, bits) {
  a = exports.toBuffer(a)
  if (!bits) bits = 256

  return createKeccakHash('keccak' + bits).update(a).digest()
}

/**
 * Creates SHA256 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.sha256 = function (a) {
  a = exports.toBuffer(a)
  return createHash('sha256').update(a).digest()
}

/**
 * Creates RIPEMD160 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Boolean} padded whether it should be padded to 256 bits or not
 * @return {Buffer}
 */
exports.ripemd160 = function (a, padded) {
  a = exports.toBuffer(a)
  var hash = createHash('rmd160').update(a).digest()
  if (padded === true) {
    return exports.setLength(hash, 32)
  } else {
    return hash
  }
}

/**
 * Creates SHA-3 hash of the RLP encoded version of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.rlphash = function (a) {
  return exports.sha3(rlp.encode(a))
}

/**
 * Checks if the private key satisfies the rules of the curve secp256k1.
 * @param {Buffer} privateKey
 * @return {Boolean}
 */
exports.isValidPrivate = function (privateKey) {
  return secp256k1.privateKeyVerify(privateKey)
}

/**
 * Checks if the public key satisfies the rules of the curve secp256k1
 * and the requirements of Ethereum.
 * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Boolean}
 */
exports.isValidPublic = function (publicKey, sanitize) {
  if (publicKey.length === 64) {
    // Convert to SEC1 for secp256k1
    return secp256k1.publicKeyVerify(Buffer.concat([ Buffer.from([4]), publicKey ]))
  }

  if (!sanitize) {
    return false
  }

  return secp256k1.publicKeyVerify(publicKey)
}

/**
 * Returns the ethereum address of a given public key.
 * Accepts "Ethereum public keys" and SEC1 encoded keys.
 * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Buffer}
 */
exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
  pubKey = exports.toBuffer(pubKey)
  if (sanitize && (pubKey.length !== 64)) {
    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1)
  }
  assert(pubKey.length === 64)
  // Only take the lower 160bits of the hash
  return exports.sha3(pubKey).slice(-20)
}

/**
 * Returns the ethereum public key of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */
var privateToPublic = exports.privateToPublic = function (privateKey) {
  privateKey = exports.toBuffer(privateKey)
  // skip the type flag and use the X, Y points
  return secp256k1.publicKeyCreate(privateKey, false).slice(1)
}

/**
 * Converts a public key to the Ethereum format.
 * @param {Buffer} publicKey
 * @return {Buffer}
 */
exports.importPublic = function (publicKey) {
  publicKey = exports.toBuffer(publicKey)
  if (publicKey.length !== 64) {
    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1)
  }
  return publicKey
}

/**
 * ECDSA sign
 * @param {Buffer} msgHash
 * @param {Buffer} privateKey
 * @return {Object}
 */
exports.ecsign = function (msgHash, privateKey) {
  var sig = secp256k1.sign(msgHash, privateKey)

  var ret = {}
  ret.r = sig.signature.slice(0, 32)
  ret.s = sig.signature.slice(32, 64)
  ret.v = sig.recovery + 27
  return ret
}

/**
 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
 * used to produce the signature.
 * @param message
 * @returns {Buffer} hash
 */
exports.hashPersonalMessage = function (message) {
  var prefix = exports.toBuffer('\u0019Ethereum Signed Message:\n' + message.length.toString())
  return exports.sha3(Buffer.concat([prefix, message]))
}

/**
 * ECDSA public key recovery from signature
 * @param {Buffer} msgHash
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {Buffer} publicKey
 */
exports.ecrecover = function (msgHash, v, r, s) {
  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64)
  var recovery = v - 27
  if (recovery !== 0 && recovery !== 1) {
    throw new Error('Invalid signature v value')
  }
  var senderPubKey = secp256k1.recover(msgHash, signature, recovery)
  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1)
}

/**
 * Convert signature parameters into the format of `eth_sign` RPC method
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {String} sig
 */
exports.toRpcSig = function (v, r, s) {
  // NOTE: with potential introduction of chainId this might need to be updated
  if (v !== 27 && v !== 28) {
    throw new Error('Invalid recovery id')
  }

  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
  return exports.bufferToHex(Buffer.concat([
    exports.setLengthLeft(r, 32),
    exports.setLengthLeft(s, 32),
    exports.toBuffer(v - 27)
  ]))
}

/**
 * Convert signature format of the `eth_sign` RPC method to signature parameters
 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
 * @param {String} sig
 * @return {Object}
 */
exports.fromRpcSig = function (sig) {
  sig = exports.toBuffer(sig)

  // NOTE: with potential introduction of chainId this might need to be updated
  if (sig.length !== 65) {
    throw new Error('Invalid signature length')
  }

  var v = sig[64]
  // support both versions of `eth_sign` responses
  if (v < 27) {
    v += 27
  }

  return {
    v: v,
    r: sig.slice(0, 32),
    s: sig.slice(32, 64)
  }
}

/**
 * Returns the ethereum address of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */
exports.privateToAddress = function (privateKey) {
  return exports.publicToAddress(privateToPublic(privateKey))
}

/**
 * Checks if the address is a valid. Accepts checksummed addresses too
 * @param {String} address
 * @return {Boolean}
 */
exports.isValidAddress = function (address) {
  return /^0x[0-9a-fA-F]{40}$/i.test(address)
}

/**
 * Returns a checksummed address
 * @param {String} address
 * @return {String}
 */
exports.toChecksumAddress = function (address) {
  address = exports.stripHexPrefix(address).toLowerCase()
  var hash = exports.sha3(address).toString('hex')
  var ret = '0x'

  for (var i = 0; i < address.length; i++) {
    if (parseInt(hash[i], 16) >= 8) {
      ret += address[i].toUpperCase()
    } else {
      ret += address[i]
    }
  }

  return ret
}

/**
 * Checks if the address is a valid checksummed address
 * @param {Buffer} address
 * @return {Boolean}
 */
exports.isValidChecksumAddress = function (address) {
  return exports.isValidAddress(address) && (exports.toChecksumAddress(address) === address)
}

/**
 * Generates an address of a newly created contract
 * @param {Buffer} from the address which is creating this new address
 * @param {Buffer} nonce the nonce of the from account
 * @return {Buffer}
 */
exports.generateAddress = function (from, nonce) {
  from = exports.toBuffer(from)
  nonce = new BN(nonce)

  if (nonce.isZero()) {
    // in RLP we want to encode null in the case of zero nonce
    // read the RLP documentation for an answer if you dare
    nonce = null
  } else {
    nonce = Buffer.from(nonce.toArray())
  }

  // Only take the lower 160bits of the hash
  return exports.rlphash([from, nonce]).slice(-20)
}

/**
 * Returns true if the supplied address belongs to a precompiled account
 * @param {Buffer|String} address
 * @return {Boolean}
 */
exports.isPrecompiled = function (address) {
  var a = exports.unpad(address)
  return a.length === 1 && a[0] > 0 && a[0] < 5
}

/**
 * Adds "0x" to a given `String` if it does not already start with "0x"
 * @param {String} str
 * @return {String}
 */
exports.addHexPrefix = function (str) {
  if (typeof str !== 'string') {
    return str
  }

  return exports.isHexPrefixed(str) ? str : '0x' + str
}

/**
 * Validate ECDSA signature
 * @method isValidSignature
 * @param {Buffer} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @param {Boolean} [homestead=true]
 * @return {Boolean}
 */

exports.isValidSignature = function (v, r, s, homestead) {
  const SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16)
  const SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16)

  if (r.length !== 32 || s.length !== 32) {
    return false
  }

  if (v !== 27 && v !== 28) {
    return false
  }

  r = new BN(r)
  s = new BN(s)

  if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {
    return false
  }

  if ((homestead === false) && (new BN(s).cmp(SECP256K1_N_DIV_2) === 1)) {
    return false
  }

  return true
}

/**
 * Converts a `Buffer` or `Array` to JSON
 * @param {Buffer|Array} ba
 * @return {Array|String|null}
 */
exports.baToJSON = function (ba) {
  if (Buffer.isBuffer(ba)) {
    return '0x' + ba.toString('hex')
  } else if (ba instanceof Array) {
    var array = []
    for (var i = 0; i < ba.length; i++) {
      array.push(exports.baToJSON(ba[i]))
    }
    return array
  }
}

/**
 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
 * @param {Object} self the `Object` to define properties on
 * @param {Array} fields an array fields to define. Fields can contain:
 * * `name` - the name of the properties
 * * `length` - the number of bytes the field can have
 * * `allowLess` - if the field can be less than the length
 * * `allowEmpty`
 * @param {*} data data to be validated against the definitions
 */
exports.defineProperties = function (self, fields, data) {
  self.raw = []
  self._fields = []

  // attach the `toJSON`
  self.toJSON = function (label) {
    if (label) {
      var obj = {}
      self._fields.forEach(function (field) {
        obj[field] = '0x' + self[field].toString('hex')
      })
      return obj
    }
    return exports.baToJSON(this.raw)
  }

  self.serialize = function serialize () {
    return rlp.encode(self.raw)
  }

  fields.forEach(function (field, i) {
    self._fields.push(field.name)
    function getter () {
      return self.raw[i]
    }
    function setter (v) {
      v = exports.toBuffer(v)

      if (v.toString('hex') === '00' && !field.allowZero) {
        v = Buffer.allocUnsafe(0)
      }

      if (field.allowLess && field.length) {
        v = exports.stripZeros(v)
        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes')
      } else if (!(field.allowZero && v.length === 0) && field.length) {
        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length)
      }

      self.raw[i] = v
    }

    Object.defineProperty(self, field.name, {
      enumerable: true,
      configurable: true,
      get: getter,
      set: setter
    })

    if (field.default) {
      self[field.name] = field.default
    }

    // attach alias
    if (field.alias) {
      Object.defineProperty(self, field.alias, {
        enumerable: false,
        configurable: true,
        set: setter,
        get: getter
      })
    }
  })

  // if the constuctor is passed data
  if (data) {
    if (typeof data === 'string') {
      data = Buffer.from(exports.stripHexPrefix(data), 'hex')
    }

    if (Buffer.isBuffer(data)) {
      data = rlp.decode(data)
    }

    if (Array.isArray(data)) {
      if (data.length > self._fields.length) {
        throw (new Error('wrong number of fields in data'))
      }

      // make sure all the items are buffers
      data.forEach(function (d, i) {
        self[self._fields[i]] = exports.toBuffer(d)
      })
    } else if (typeof data === 'object') {
      const keys = Object.keys(data)
      fields.forEach(function (field) {
        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name]
        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias]
      })
    } else {
      throw new Error('invalid data')
    }
  }
}
 at SyntaxError: Unexpected token (3:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/eth-lightwallet/node_modules/eth-lightwallet/index.js. Coverage (Term): 48% Coverage (LOC): 56%
*- File /root/Targets/eth-lightwallet/node_modules/eth-lightwallet/lib/txutils.js. Coverage (Term): 7% Coverage (LOC): 15%
*- File /root/Targets/eth-lightwallet/node_modules/ethereumjs-tx/es5/index.js. Coverage (Term): 3% Coverage (LOC): 4%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
