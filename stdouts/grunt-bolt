/root/Targets/grunt-bolt
└── grunt-bolt@1.1.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/grunt-bolt/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0688 took 6.5569s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!D:/node/node.exe --harmony
const http = require ('http');
const fs = require ('fs');
const os = require ('os');
const path = require ('path');
//返回新建的http.Server实例
const spawnSync = require ('child_process').spawnSync;
//decodeURLCompontent转义中文的unicode码
const server = http.createServer();
server.on('request',(req,res)=>{
    if(req.url === '/favicon.ico'){
        res.end();
        return;
    }

    const staticFilePath = path.resolve('.' + decodeURIComponent(req.url));
    const indexFile = path.resolve(staticFilePath,'index.html');
    if(fs.existsSync(indexFile)){     //判断里面有没有index.html文件
        fs.createReadStream(indexFile).pipe(res);
    }else{
        if(fs.lstatSync(staticFilePath).isDirectory()){
            var files = fs.readdirSync(staticFilePath);
            var lis="";
            files.forEach(function (v,i) {
                if(fs.lstatSync(path.resolve(staticFilePath,v)).isDirectory()){ //判断是目录还是文件
                    lis += `<li><a  style="color: #0b3b8c" href="${req.url}${v}/">${v}/</a></li>`
                }else{
                    lis += `<li><a href="${req.url}${v}">${v}</a></li>`
                }
            });
            res.end(`<html><head><style>body{margin:0;padding:80px;}ul{list-style: none;}li{line-height: 30px;}a{color: #3188e0;font-size: 18px;}</style></head><body><ul>${lis}</ul></body></html>`)
        }else{
            if(fs.existsSync(path.resolve(staticFilePath))){
                fs.createReadStream(staticFilePath).pipe(res);
            }else{
                res.end('404 not found')
            }
        }
    }
});
server.listen(8080,()=>{
    console.log('服务器已经启动');
    console.log('访问localhost:8080');
    if(os.platform() === 'win32'){
        spawnSync('explorer',['http://localhost:8080']);
    }else{
        spawnSync('open',['http://localhost:8080']);
    }
});
process.on('uncaughtException',(exception)=>{
    console.log('error')
});
//运行时  nodemon index.js at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
