/root/Targets/verbotenjs
└── verbotenjs@1.2.10 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/verbotenjs/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 20% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0882 took 19.9148s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because TypeError: Function.prototype.apply was called on undefined, which is a undefined and not a function on program /*
////////////////////////////////////////////////////////////////////////////////
    ______                        ____             __        __
   / ____/_____________  _____   / __ \_________  / /_____  / /___  ______  ___  _____
  / __/ / ___/ ___/ __ \/ ___/  / /_/ / ___/ __ \/ __/ __ \/ __/ / / / __ \/ _ \/ ___/
 / /___/ /  / /  / /_/ / /     / ____/ /  / /_/ / /_/ /_/ / /_/ /_/ / /_/ /  __(__  )
/_____/_/  /_/   \____/_/     /_/   /_/   \____/\__/\____/\__/\__, / .___/\___/____/
                                                             /____/_/

////////////////////////////////////////////////////////////////////////////////
*/

(function() {

    Error.prototype.matches = function(err) {
        if (err.isNumber()) return this.number == err;
        if (err.isError()) return this.number == err.number;
    };

    Error.prototype.toString = function() {
        //Returns a better string representation of an error object
        //@todo: enhance logic for browser based stack traces and information.
        //@ref: https://github.com/occ/TraceKit
        //@note: this used to include a stack trace, but that spins JSON.stringify into an IL,
        //       if you'd like to view a stack trace, just use console.trace() instead
        return 'ERROR: ' + this.message;
    };

    Error.prototype.trace = function() {
        //@desc: returns the stack trace as an array of function names
        if (this.stack) {
            return this.stack.lines();
        }
        else {
            var cur = arguments.callee.caller;
            var stack = [];
            var i = 50;

            while(cur && i--) {
                stack.push(cur.id());
                cur = cur.caller;
            }

            return stack;
        }
    };

    Error.prototype.ignore = function() {
        //returns true for known "non-errors" used for workflow purposes
        if (this.description == "break" || this.exit == true) {
            return true;
        }
    };

    Error.prototype.debug = function(code) {
        //prompt user for debugger hook
        code = code || "[no code provided]";
        //@todo: need to implement with callback handler because that's how nodejs does confirms, until then I'm disabling it.
        if (false && confirm("An error has occurred:\n\n" + this.toString() + "\n\n" + code + "\n\nWould you like to debug?")) {
            //if the user clicks yes - hit debug statement
            debugger;
            return true;
        }

        return false;
    };

    Error.prototype.bubble = function() {
        if (this.bbl) {
            this.count--;
            if (this.count <= 0) {
                return true;
            }
            throw this;
        }
    };

    Error.prototype.handle = function() {
        //attempts to handle all errors
        //will return undefined if nothing further to do
        //will return a value if the error was intended to return a value (each iterators)
        //will rethrow the error if it was intended to be reported via the .report attribute
        if (this.ignore()) {
            return this.retval;
        }

        if (this.bubble()) {
            return this.retval;
        }

        if (this.debug()) return null;

        if (this.die) {
            throw this; //Keep throwing until we die!
        }

        if (this.report != null || this.die) {
            delete this.report;
            throw this;
        }
        else {
            if (gc.debug) {
                alert(this.toString());
            }
        }

        return true;
    };

    Error.toss = function(m) {
        //alias for throwing a new exception
        throw new Error(m);
    };

    Error.prototype.toss = function(m) {
        //A gentler type of throw
        //Designed to throw a newly defined Error inside things like var definitions or array indicies
        this.report = true;
        this.extra = m;
        this.handle();
    };

    Error.prototype.pass = function(f) {
        //pass an error to the provided error handling function {f}
        if (f) {
            f(this);
        }
    };

    Object.prototype.pass =
    Object.prototype.toss = function() {
        //noop: this is designed to reduce complexity of the node framework's error handling architecture
    };

    Error.prototype.print = function() {
        return "  ERROR: " + this.number + " - " + (this.description || this.message);
    };

    Error.notImplemented = function() {
        //helper error for functions yet to be implemented
        Error.toss("Function Not Implemented: " + closure().caller.id());
    };

    Error.invalidArgument = function() {
        Error.toss(
            "Function " + closure().caller.id() + " does not implement logic for parameters: " +
            arguments.ea(function(v) {
                return v.isa() + " : " + v.serialize();
            }).join("\r\n")
        );
    };

})(); at TypeError: Function.prototype.apply was called on undefined, which is a undefined and not a function
    at callFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:196:51)
    at invokeFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:217:22)
    at /root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:242:41
    at SymbolicState.ea (/root/Targets/verbotenjs/node_modules/verbotenjs/lib/object.prototype.js:380:143)
    at callFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:196:51)
    at invokeFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:217:22)
    at /root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:242:41
    at Object.slice (/root/Targets/verbotenjs/node_modules/verbotenjs/lib/object.prototype.js:2265:108)
    at SymbolicExecution.invokeFun (/root/ExpoSE/Analyser/bin/bundle.js:1083:56)
    at invokeFun (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/runtime/analysis.js:220:37)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/verbotenjs/node_modules/verbotenjs/index.js. Coverage (Term): 6% Coverage (LOC): 7%
*- File /root/Targets/verbotenjs/node_modules/verbotenjs/lib/object.prototype.js. Coverage (Term): 14% Coverage (LOC): 23%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
