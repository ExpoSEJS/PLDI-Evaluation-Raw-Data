/root/Targets/react-widgets-simple-number
├── UNMET PEER DEPENDENCY react-widgets@^4.0.2
└─┬ react-widgets-simple-number@4.0.2 
  ├── deconstruct-number-format@0.0.1 
  └─┬ format-number-with-string@0.0.2 
    └── format-number@2.0.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/react-widgets-simple-number/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0547 took 4.435s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (11:32) on program import configure from 'react-widgets/lib/configure';
import formatNumber from 'format-number-with-string';
import deconstruct from 'deconstruct-number-format';

let defaults = {
  decimal: '.',
  grouping: ','
}

export default function simpleNumber(options = {}) {
  let { decimal, grouping } = { ...defaults, ...options }

  let localizer = {
    formats: {
      default: `-#${grouping}##0${decimal}`
    },

    // TODO major bump consistent ordering
    parse(value, culture, format) {
      if (format) {
        let data = deconstruct(format)
          , negative = (data.negativeLeftSymbol && value.indexOf(data.negativeLeftSymbol) !== -1)
                    || (data.negativeRightSymbol && value.indexOf(data.negativeRightSymbol) !== -1)

        value = value
          .replace(data.negativeLeftSymbol, '')
          .replace(data.negativeRightSymbol, '')
          .replace(data.prefix, '')
          .replace(data.suffix, '')

        let halves = value.split(data.decimalChar)

        if (data.integerSeperator)
          halves[0] = halves[0].replace(new RegExp('\\' + data.integerSeperator, 'g'))

        if (data.decimalsSeparator)
          halves[1] = halves[1].replace(new RegExp('\\' + data.decimalsSeparator, 'g'))

        if (halves[1] === '') halves.pop();

        value = halves.join('.')
        value = +value

        if (negative)
          value = -1 * value
      }
      else
        value = parseFloat(value)

      return isNaN(value) ? null : value
    },

    format(value, format) {
      return formatNumber(value, format)
    },

    decimalChar(format) {
      return format && deconstruct(format).decimalsSeparator || '.'
    },

    precision(format) {
      let data = deconstruct(format)
      return data.maxRight !== -1 ? data.maxRight : null
    }
  }

  configure.setNumberLocalizer(localizer)
  return localizer
}
 at SyntaxError: Unexpected token (11:32)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseIdent (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2189:12)
    at Parser.pp$3.parsePropertyName (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2052:101)
    at Parser.pp$3.parseObj (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1988:14)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1805:19)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
