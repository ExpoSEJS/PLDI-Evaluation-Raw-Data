
> isomorphic-react-boilerplate@1.1.1 postinstall /root/Targets/isomorphic-react-boilerplate/node_modules/isomorphic-react-boilerplate
> gulp build

[18:02:42] Using gulpfile ~/Targets/isomorphic-react-boilerplate/node_modules/isomorphic-react-boilerplate/gulpfile.js
[18:02:42] Starting 'build'...
[18:02:42] Starting 'delete'...
[18:02:42] Finished 'delete' after 120 ms
[18:02:42] Starting 'jsx'...
[18:02:42] Starting 'reactify'...
[18:02:43] Finished 'reactify' after 790 ms
[18:02:43] Finished 'jsx' after 1.04 s
[18:02:43] Finished 'build' after 1.17 s
/root/Targets/isomorphic-react-boilerplate
└─┬ isomorphic-react-boilerplate@1.1.1 
  ├─┬ browserify@6.3.4 
  │ ├── assert@1.1.2 
  │ ├─┬ browser-pack@3.2.0 
  │ │ ├─┬ combine-source-map@0.3.0 
  │ │ │ ├── convert-source-map@0.3.5 
  │ │ │ ├─┬ inline-source-map@0.3.1 
  │ │ │ │ └── source-map@0.3.0 
  │ │ │ └── source-map@0.1.43 
  │ │ └─┬ through2@0.5.1 
  │ │   └── readable-stream@1.0.34 
  │ ├─┬ browser-resolve@1.11.2 
  │ │ └── resolve@1.1.7 
  │ ├─┬ browserify-zlib@0.1.4 
  │ │ └── pako@0.2.9 
  │ ├─┬ buffer@2.8.2 
  │ │ ├── base64-js@0.0.7 
  │ │ ├── ieee754@1.1.8 
  │ │ └── is-array@1.0.1 
  │ ├── builtins@0.0.7 
  │ ├── commondir@0.0.1 
  │ ├─┬ concat-stream@1.4.10 
  │ │ └── typedarray@0.0.6 
  │ ├─┬ console-browserify@1.1.0 
  │ │ └── date-now@0.1.4 
  │ ├── constants-browserify@0.0.1 
  │ ├─┬ crypto-browserify@3.11.1 
  │ │ ├─┬ browserify-cipher@1.0.0 
  │ │ │ ├─┬ browserify-aes@1.0.8 
  │ │ │ │ └── buffer-xor@1.0.3 
  │ │ │ ├─┬ browserify-des@1.0.0 
  │ │ │ │ └── des.js@1.0.0 
  │ │ │ └─┬ evp_bytestokey@1.0.3 
  │ │ │   └─┬ md5.js@1.3.4 
  │ │ │     └── hash-base@3.0.4 
  │ │ ├─┬ browserify-sign@4.0.4 
  │ │ │ ├── bn.js@4.11.8 
  │ │ │ ├── browserify-rsa@4.0.1 
  │ │ │ ├─┬ elliptic@6.4.0 
  │ │ │ │ ├── brorand@1.1.0 
  │ │ │ │ ├── hash.js@1.1.3 
  │ │ │ │ ├── hmac-drbg@1.0.1 
  │ │ │ │ ├── minimalistic-assert@1.0.0 
  │ │ │ │ └── minimalistic-crypto-utils@1.0.1 
  │ │ │ └─┬ parse-asn1@5.1.0 
  │ │ │   └── asn1.js@4.9.1 
  │ │ ├── create-ecdh@4.0.0 
  │ │ ├─┬ create-hash@1.1.3 
  │ │ │ ├── cipher-base@1.0.4 
  │ │ │ └─┬ ripemd160@2.0.1 
  │ │ │   └── hash-base@2.0.2 
  │ │ ├── create-hmac@1.1.6 
  │ │ ├─┬ diffie-hellman@5.0.2 
  │ │ │ └── miller-rabin@4.0.1 
  │ │ ├── pbkdf2@3.0.14 
  │ │ ├── public-encrypt@4.0.0 
  │ │ └── randombytes@2.0.5 
  │ ├── deep-equal@0.2.2 
  │ ├── defined@0.0.0 
  │ ├─┬ deps-sort@1.3.9 
  │ │ └─┬ JSONStream@1.3.1 
  │ │   └── jsonparse@1.3.1 
  │ ├── domain-browser@1.1.7 
  │ ├── duplexer2@0.0.2 
  │ ├── events@1.0.2 
  │ ├─┬ glob@4.5.3 
  │ │ ├─┬ inflight@1.0.6 
  │ │ │ └── wrappy@1.0.2 
  │ │ ├─┬ minimatch@2.0.10 
  │ │ │ └─┬ brace-expansion@1.1.8 
  │ │ │   ├── balanced-match@1.0.0 
  │ │ │   └── concat-map@0.0.1 
  │ │ └── once@1.4.0 
  │ ├─┬ http-browserify@1.7.0 
  │ │ └── Base64@0.2.1 
  │ ├── https-browserify@0.0.1 
  │ ├── inherits@2.0.3 
  │ ├─┬ insert-module-globals@6.6.3 
  │ │ ├─┬ combine-source-map@0.6.1 
  │ │ │ ├── convert-source-map@1.1.3 
  │ │ │ ├── inline-source-map@0.5.0 
  │ │ │ ├── lodash.memoize@3.0.4 
  │ │ │ └── source-map@0.4.4 
  │ │ ├── is-buffer@1.1.5 
  │ │ ├─┬ JSONStream@1.3.1 
  │ │ │ └── jsonparse@1.3.1 
  │ │ ├─┬ lexical-scope@1.2.0 
  │ │ │ └── astw@2.2.0 
  │ │ ├── process@0.11.10 
  │ │ └── xtend@4.0.1 
  │ ├── isarray@0.0.1 
  │ ├─┬ JSONStream@0.8.4 
  │ │ └── jsonparse@0.0.5 
  │ ├─┬ labeled-stream-splicer@1.0.2 
  │ │ └─┬ stream-splicer@1.3.2 
  │ │   └── readable-wrap@1.0.0 
  │ ├─┬ module-deps@3.9.1 
  │ │ ├── defined@1.0.0 
  │ │ ├─┬ detective@4.5.0 
  │ │ │ └── defined@1.0.0 
  │ │ ├─┬ JSONStream@1.3.1 
  │ │ │ └── jsonparse@1.3.1 
  │ │ ├─┬ parents@1.0.1 
  │ │ │ └── path-platform@0.11.15 
  │ │ ├─┬ resolve@1.4.0 
  │ │ │ └── path-parse@1.0.5 
  │ │ ├─┬ stream-combiner2@1.0.2 
  │ │ │ └─┬ through2@0.5.1 
  │ │ │   └── readable-stream@1.0.34 
  │ │ └── xtend@4.0.1 
  │ ├── os-browserify@0.1.2 
  │ ├─┬ parents@0.0.3 
  │ │ └── path-platform@0.0.1 
  │ ├── path-browserify@0.0.0 
  │ ├── process@0.8.0 
  │ ├── punycode@1.2.4 
  │ ├── querystring-es3@0.2.1 
  │ ├─┬ readable-stream@1.1.14 
  │ │ └── core-util-is@1.0.2 
  │ ├── resolve@0.7.4 
  │ ├── shallow-copy@0.0.1 
  │ ├─┬ shasum@1.0.2 
  │ │ ├─┬ json-stable-stringify@0.0.1 
  │ │ │ └── jsonify@0.0.0 
  │ │ └── sha.js@2.4.9 
  │ ├── shell-quote@0.0.1 
  │ ├── stream-browserify@1.0.0 
  │ ├── string_decoder@0.10.31 
  │ ├── subarg@1.0.0 
  │ ├─┬ syntax-error@1.3.0 
  │ │ └── acorn@4.0.13 
  │ ├─┬ through2@1.1.1 
  │ │ └── xtend@4.0.1 
  │ ├─┬ timers-browserify@1.4.2 
  │ │ └── process@0.11.10 
  │ ├── tty-browserify@0.0.0 
  │ ├─┬ umd@2.1.0 
  │ │ ├─┬ rfile@1.0.0 
  │ │ │ ├── callsite@1.0.0 
  │ │ │ └── resolve@0.3.1 
  │ │ ├─┬ ruglify@1.0.0 
  │ │ │ └─┬ uglify-js@2.2.5 
  │ │ │   └── optimist@0.3.7 
  │ │ └─┬ uglify-js@2.4.24 
  │ │   ├── source-map@0.1.34 
  │ │   └─┬ yargs@3.5.4 
  │ │     └── wordwrap@0.0.2 
  │ ├─┬ url@0.10.3 
  │ │ ├── punycode@1.3.2 
  │ │ └── querystring@0.2.0 
  │ ├─┬ util@0.10.3 
  │ │ └── inherits@2.0.1 
  │ ├─┬ vm-browserify@0.0.4 
  │ │ └── indexof@0.0.1 
  │ └── xtend@3.0.0 
  ├─┬ debug@2.6.9 
  │ └── ms@2.0.0 
  ├─┬ del@0.1.3 
  │ ├─┬ each-async@1.1.1 
  │ │ ├── onetime@1.1.0 
  │ │ └── set-immediate-shim@1.0.1 
  │ ├─┬ globby@0.1.1 
  │ │ ├── array-differ@0.1.0 
  │ │ ├─┬ array-union@0.1.0 
  │ │ │ └── array-uniq@0.1.1 
  │ │ └── async@0.9.2 
  │ ├── is-path-cwd@1.0.0 
  │ ├─┬ is-path-in-cwd@1.0.0 
  │ │ └─┬ is-path-inside@1.0.0 
  │ │   └── path-is-inside@1.0.2 
  │ └─┬ rimraf@2.6.2 
  │   └─┬ glob@7.1.2 
  │     ├── fs.realpath@1.0.0 
  │     ├── minimatch@3.0.4 
  │     └── path-is-absolute@1.0.1 
  ├─┬ express@4.16.1 
  │ ├─┬ accepts@1.3.4 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ └── negotiator@0.6.1 
  │ ├── array-flatten@1.1.1 
  │ ├─┬ body-parser@1.18.2 
  │ │ ├── bytes@3.0.0 
  │ │ ├─┬ http-errors@1.6.2 
  │ │ │ └── setprototypeof@1.0.3 
  │ │ ├── iconv-lite@0.4.19 
  │ │ └── raw-body@2.3.2 
  │ ├── content-disposition@0.5.2 
  │ ├── content-type@1.0.4 
  │ ├── cookie@0.3.1 
  │ ├── cookie-signature@1.0.6 
  │ ├── depd@1.1.1 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├─┬ finalhandler@1.1.0 
  │ │ └── unpipe@1.0.0 
  │ ├── fresh@0.5.2 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@2.0.2 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.5.2 
  │ ├── qs@6.5.1 
  │ ├── range-parser@1.2.0 
  │ ├── safe-buffer@5.1.1 
  │ ├─┬ send@0.16.1 
  │ │ ├── destroy@1.0.4 
  │ │ └── mime@1.4.1 
  │ ├── serve-static@1.13.1 
  │ ├── setprototypeof@1.1.0 
  │ ├── statuses@1.3.1 
  │ ├─┬ type-is@1.6.15 
  │ │ └── media-typer@0.3.0 
  │ ├── utils-merge@1.0.1 
  │ └── vary@1.1.2 
  ├─┬ gulp@3.9.1 
  │ ├── archy@1.0.0 
  │ ├─┬ chalk@1.1.3 
  │ │ ├── ansi-styles@2.2.1 
  │ │ ├── escape-string-regexp@1.0.5 
  │ │ ├─┬ has-ansi@2.0.0 
  │ │ │ └── ansi-regex@2.1.1 
  │ │ ├── strip-ansi@3.0.1 
  │ │ └── supports-color@2.0.0 
  │ ├── deprecated@0.0.1 
  │ ├─┬ gulp-util@3.0.8 
  │ │ ├── array-differ@1.0.0 
  │ │ ├── array-uniq@1.0.3 
  │ │ ├── beeper@1.1.1 
  │ │ ├── dateformat@2.2.0 
  │ │ ├─┬ gulplog@1.0.0 
  │ │ │ └── glogg@1.0.0 
  │ │ ├─┬ has-gulplog@0.1.0 
  │ │ │ └── sparkles@1.0.0 
  │ │ ├── lodash._reescape@3.0.0 
  │ │ ├── lodash._reevaluate@3.0.0 
  │ │ ├── lodash._reinterpolate@3.0.0 
  │ │ ├─┬ lodash.template@3.6.2 
  │ │ │ ├── lodash._basecopy@3.0.1 
  │ │ │ ├── lodash._basetostring@3.0.1 
  │ │ │ ├── lodash._basevalues@3.0.0 
  │ │ │ ├── lodash._isiterateecall@3.0.9 
  │ │ │ ├─┬ lodash.escape@3.2.0 
  │ │ │ │ └── lodash._root@3.0.1 
  │ │ │ ├─┬ lodash.keys@3.1.2 
  │ │ │ │ ├── lodash._getnative@3.9.1 
  │ │ │ │ ├── lodash.isarguments@3.1.0 
  │ │ │ │ └── lodash.isarray@3.0.4 
  │ │ │ ├── lodash.restparam@3.6.1 
  │ │ │ └── lodash.templatesettings@3.1.1 
  │ │ ├── multipipe@0.1.2 
  │ │ ├── object-assign@3.0.0 
  │ │ ├── replace-ext@0.0.1 
  │ │ └─┬ through2@2.0.3 
  │ │   ├─┬ readable-stream@2.3.3 
  │ │   │ ├── isarray@1.0.0 
  │ │   │ └── string_decoder@1.0.3 
  │ │   └── xtend@4.0.1 
  │ ├── interpret@1.0.4 
  │ ├─┬ liftoff@2.3.0 
  │ │ ├── extend@3.0.1 
  │ │ ├─┬ findup-sync@0.4.3 
  │ │ │ ├─┬ detect-file@0.1.0 
  │ │ │ │ └── fs-exists-sync@0.1.0 
  │ │ │ ├─┬ is-glob@2.0.1 
  │ │ │ │ └── is-extglob@1.0.0 
  │ │ │ ├─┬ micromatch@2.3.11 
  │ │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ │ ├── array-unique@0.2.1 
  │ │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │ │   └─┬ randomatic@1.1.7 
  │ │ │ │ │ │     ├─┬ is-number@3.0.0 
  │ │ │ │ │ │     │ └── kind-of@3.2.2 
  │ │ │ │ │ │     └── kind-of@4.0.0 
  │ │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ │ ├── extglob@0.3.2 
  │ │ │ │ ├── filename-regex@2.0.1 
  │ │ │ │ ├── kind-of@3.2.2 
  │ │ │ │ ├── normalize-path@2.1.1 
  │ │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ │ ├── for-own@0.1.5 
  │ │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ │ ├── glob-base@0.3.0 
  │ │ │ │ │ └── is-dotfile@1.0.3 
  │ │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │ │     └── is-primitive@2.0.0 
  │ │ │ └─┬ resolve-dir@0.1.1 
  │ │ │   ├── expand-tilde@1.2.2 
  │ │ │   └─┬ global-modules@0.2.3 
  │ │ │     ├─┬ global-prefix@0.1.5 
  │ │ │     │ ├── ini@1.3.4 
  │ │ │     │ └─┬ which@1.3.0 
  │ │ │     │   └── isexe@2.0.0 
  │ │ │     └── is-windows@0.2.0 
  │ │ ├─┬ fined@1.1.0 
  │ │ │ ├─┬ expand-tilde@2.0.2 
  │ │ │ │ └─┬ homedir-polyfill@1.0.1 
  │ │ │ │   └── parse-passwd@1.0.0 
  │ │ │ ├─┬ is-plain-object@2.0.4 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ ├─┬ object.defaults@1.1.0 
  │ │ │ │ ├── array-each@1.0.1 
  │ │ │ │ ├── array-slice@1.0.0 
  │ │ │ │ ├─┬ for-own@1.0.0 
  │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ ├─┬ object.pick@1.3.0 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ └─┬ parse-filepath@1.0.1 
  │ │ │   ├─┬ is-absolute@0.2.6 
  │ │ │   │ └─┬ is-relative@0.2.1 
  │ │ │   │   └─┬ is-unc-path@0.1.2 
  │ │ │   │     └── unc-path-regex@0.1.2 
  │ │ │   ├── map-cache@0.2.2 
  │ │ │   └─┬ path-root@0.1.1 
  │ │ │     └── path-root-regex@0.1.2 
  │ │ ├── flagged-respawn@0.3.2 
  │ │ ├── lodash.isplainobject@4.0.6 
  │ │ ├── lodash.isstring@4.0.1 
  │ │ ├── lodash.mapvalues@4.6.0 
  │ │ ├─┬ rechoir@0.6.2 
  │ │ │ └── resolve@1.4.0 
  │ │ └── resolve@1.4.0 
  │ ├── minimist@1.2.0 
  │ ├─┬ orchestrator@0.3.8 
  │ │ ├─┬ end-of-stream@0.1.5 
  │ │ │ └── once@1.3.3 
  │ │ ├── sequencify@0.0.7 
  │ │ └── stream-consume@0.1.0 
  │ ├── pretty-hrtime@1.0.3 
  │ ├── semver@4.3.6 
  │ ├─┬ tildify@1.2.0 
  │ │ └── os-homedir@1.0.2 
  │ ├─┬ v8flags@2.1.1 
  │ │ └── user-home@1.1.1 
  │ └─┬ vinyl-fs@0.3.14 
  │   ├── defaults@1.0.3 
  │   ├─┬ glob-stream@3.1.18 
  │   │ ├─┬ glob2base@0.0.12 
  │   │ │ └── find-index@0.1.1 
  │   │ ├── ordered-read-streams@0.1.0 
  │   │ ├─┬ through2@0.6.5 
  │   │ │ ├── readable-stream@1.0.34 
  │   │ │ └── xtend@4.0.1 
  │   │ └── unique-stream@1.0.0 
  │   ├─┬ glob-watcher@0.0.6 
  │   │ └─┬ gaze@0.5.2 
  │   │   └─┬ globule@0.1.0 
  │   │     ├─┬ glob@3.1.21 
  │   │     │ ├── graceful-fs@1.2.3 
  │   │     │ └── inherits@1.0.2 
  │   │     ├── lodash@1.0.2 
  │   │     └── minimatch@0.2.14 
  │   ├─┬ graceful-fs@3.0.11 
  │   │ └── natives@1.1.0 
  │   ├─┬ strip-bom@1.0.0 
  │   │ ├── first-chunk-stream@1.0.0 
  │   │ └── is-utf8@0.2.1 
  │   ├─┬ through2@0.6.5 
  │   │ ├── readable-stream@1.0.34 
  │   │ └── xtend@4.0.1 
  │   └─┬ vinyl@0.4.6 
  │     └── clone@0.2.0 
  ├─┬ gulp-browserify@0.5.1 
  │ ├─┬ UNMET PEER DEPENDENCY browserify@3.46.1
  │ │ ├─┬ browser-pack@2.0.1 
  │ │ │ └─┬ JSONStream@0.6.4 
  │ │ │   └── through@2.2.7 
  │ │ ├── browser-resolve@1.2.4 
  │ │ ├── buffer@2.1.13 
  │ │ ├── console-browserify@1.0.3 
  │ │ ├── crypto-browserify@1.0.9 
  │ │ ├── deep-equal@0.1.2 
  │ │ ├─┬ deps-sort@0.1.2 
  │ │ │ ├─┬ JSONStream@0.6.4 
  │ │ │ │ └── through@2.2.7 
  │ │ │ └── minimist@0.0.10 
  │ │ ├─┬ derequire@0.8.0 
  │ │ │ ├── esprima-fb@3001.1.0-dev-harmony-fb 
  │ │ │ ├─┬ esrefactor@0.1.0 
  │ │ │ │ ├── escope@0.0.16 
  │ │ │ │ ├── esprima@1.0.4 
  │ │ │ │ └── estraverse@0.0.4 
  │ │ │ └── estraverse@1.5.1 
  │ │ ├── duplexer@0.1.1 
  │ │ ├─┬ glob@3.2.11 
  │ │ │ └─┬ minimatch@0.3.0 
  │ │ │   ├── lru-cache@2.7.3 
  │ │ │   └── sigmund@1.0.1 
  │ │ ├── http-browserify@1.3.2 
  │ │ ├─┬ insert-module-globals@6.0.0 
  │ │ │ ├── lexical-scope@1.1.1 
  │ │ │ └── process@0.6.0 
  │ │ ├── JSONStream@0.7.4 
  │ │ ├─┬ module-deps@2.0.6 
  │ │ │ ├─┬ detective@3.1.0 
  │ │ │ │ └─┬ escodegen@1.1.0 
  │ │ │ │   ├── esprima@1.0.4 
  │ │ │ │   └── esutils@1.0.0 
  │ │ │ ├── parents@0.0.2 
  │ │ │ └── stream-combiner@0.1.0 
  │ │ ├── process@0.7.0 
  │ │ ├── querystring-es3@0.2.0 
  │ │ ├── resolve@0.6.3 
  │ │ ├─┬ stream-browserify@0.1.3 
  │ │ │ └── process@0.5.2 
  │ │ ├── stream-combiner@0.0.4 
  │ │ ├── string_decoder@0.0.1 
  │ │ ├── subarg@0.0.1 
  │ │ ├─┬ syntax-error@1.1.6 
  │ │ │ └── acorn@2.7.0 
  │ │ ├─┬ timers-browserify@1.0.3 
  │ │ │ └── process@0.5.2 
  │ │ └── umd@2.0.0 
  │ ├── browserify-shim@2.0.10 
  │ ├─┬ gulp-util@2.2.20 
  │ │ ├─┬ chalk@0.5.1 
  │ │ │ ├── ansi-styles@1.1.0 
  │ │ │ ├─┬ has-ansi@0.1.0 
  │ │ │ │ └── ansi-regex@0.2.1 
  │ │ │ ├── strip-ansi@0.3.0 
  │ │ │ └── supports-color@0.2.0 
  │ │ ├─┬ dateformat@1.0.12 
  │ │ │ ├── get-stdin@4.0.1 
  │ │ │ └─┬ meow@3.7.0 
  │ │ │   ├─┬ camelcase-keys@2.1.0 
  │ │ │   │ └── camelcase@2.1.1 
  │ │ │   ├─┬ loud-rejection@1.6.0 
  │ │ │   │ ├─┬ currently-unhandled@0.4.1 
  │ │ │   │ │ └── array-find-index@1.0.2 
  │ │ │   │ └── signal-exit@3.0.2 
  │ │ │   ├── map-obj@1.0.1 
  │ │ │   ├─┬ normalize-package-data@2.4.0 
  │ │ │   │ ├── hosted-git-info@2.5.0 
  │ │ │   │ ├─┬ is-builtin-module@1.0.0 
  │ │ │   │ │ └── builtin-modules@1.1.1 
  │ │ │   │ └─┬ validate-npm-package-license@3.0.1 
  │ │ │   │   ├─┬ spdx-correct@1.0.2 
  │ │ │   │   │ └── spdx-license-ids@1.2.2 
  │ │ │   │   └── spdx-expression-parse@1.0.4 
  │ │ │   ├── object-assign@4.1.1 
  │ │ │   ├─┬ read-pkg-up@1.0.1 
  │ │ │   │ ├─┬ find-up@1.1.2 
  │ │ │   │ │ ├── path-exists@2.1.0 
  │ │ │   │ │ └─┬ pinkie-promise@2.0.1 
  │ │ │   │ │   └── pinkie@2.0.4 
  │ │ │   │ └─┬ read-pkg@1.1.0 
  │ │ │   │   ├─┬ load-json-file@1.1.0 
  │ │ │   │   │ ├── graceful-fs@4.1.11 
  │ │ │   │   │ ├─┬ parse-json@2.2.0 
  │ │ │   │   │ │ └─┬ error-ex@1.3.1 
  │ │ │   │   │ │   └── is-arrayish@0.2.1 
  │ │ │   │   │ ├── pify@2.3.0 
  │ │ │   │   │ └── strip-bom@2.0.0 
  │ │ │   │   └─┬ path-type@1.1.0 
  │ │ │   │     └── graceful-fs@4.1.11 
  │ │ │   ├─┬ redent@1.0.0 
  │ │ │   │ ├─┬ indent-string@2.1.0 
  │ │ │   │ │ └─┬ repeating@2.0.1 
  │ │ │   │ │   └─┬ is-finite@1.0.2 
  │ │ │   │ │     └── number-is-nan@1.0.1 
  │ │ │   │ └── strip-indent@1.0.1 
  │ │ │   └── trim-newlines@1.0.0 
  │ │ ├── lodash._reinterpolate@2.4.1 
  │ │ ├─┬ lodash.template@2.4.1 
  │ │ │ ├── lodash._escapestringchar@2.4.1 
  │ │ │ ├─┬ lodash.defaults@2.4.1 
  │ │ │ │ ├── lodash._objecttypes@2.4.1 
  │ │ │ │ └── lodash.keys@2.4.1 
  │ │ │ ├─┬ lodash.escape@2.4.1 
  │ │ │ │ ├─┬ lodash._escapehtmlchar@2.4.1 
  │ │ │ │ │ └── lodash._htmlescapes@2.4.1 
  │ │ │ │ └─┬ lodash._reunescapedhtml@2.4.1 
  │ │ │ │   └── lodash.keys@2.4.1 
  │ │ │ ├─┬ lodash.keys@2.4.1 
  │ │ │ │ ├── lodash._isnative@2.4.1 
  │ │ │ │ ├── lodash._shimkeys@2.4.1 
  │ │ │ │ └── lodash.isobject@2.4.1 
  │ │ │ ├── lodash.templatesettings@2.4.1 
  │ │ │ └─┬ lodash.values@2.4.1 
  │ │ │   └── lodash.keys@2.4.1 
  │ │ ├── minimist@0.2.0 
  │ │ ├─┬ through2@0.5.1 
  │ │ │ └─┬ readable-stream@1.0.34 
  │ │ │   └── string_decoder@0.10.31 
  │ │ └── vinyl@0.2.3 
  │ └─┬ through2@0.4.2 
  │   ├─┬ readable-stream@1.0.34 
  │   │ └── string_decoder@0.10.31 
  │   └─┬ xtend@2.1.2 
  │     └── object-keys@0.4.0 
  ├─┬ gulp-concat@2.6.1 
  │ ├─┬ concat-with-sourcemaps@1.0.4 
  │ │ └── source-map@0.5.7 
  │ ├─┬ through2@2.0.3 
  │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ ├── isarray@1.0.0 
  │ │ │ ├── process-nextick-args@1.0.7 
  │ │ │ ├── string_decoder@1.0.3 
  │ │ │ └── util-deprecate@1.0.2 
  │ │ └── xtend@4.0.1 
  │ └─┬ vinyl@2.1.0 
  │   ├── clone@2.1.1 
  │   ├── clone-buffer@1.0.0 
  │   ├── clone-stats@1.0.0 
  │   ├─┬ cloneable-readable@1.0.0 
  │   │ └─┬ through2@2.0.3 
  │   │   ├─┬ readable-stream@2.3.3 
  │   │   │ ├── isarray@1.0.0 
  │   │   │ └── string_decoder@1.0.3 
  │   │   └── xtend@4.0.1 
  │   ├── remove-trailing-separator@1.1.0 
  │   └── replace-ext@1.0.0 
  ├─┬ gulp-react@2.0.0 
  │ ├─┬ react-tools@0.12.2 
  │ │ └─┬ commoner@0.10.8 
  │ │   ├── commander@2.11.0 
  │ │   ├── glob@5.0.15 
  │ │   ├── graceful-fs@4.1.11 
  │ │   ├── private@0.1.7 
  │ │   ├── q@1.5.0 
  │ │   └─┬ recast@0.11.23 
  │ │     ├── ast-types@0.9.6 
  │ │     ├── esprima@3.1.3 
  │ │     └── source-map@0.5.7 
  │ └─┬ through2@0.6.5 
  │   ├── readable-stream@1.0.34 
  │   └── xtend@4.0.1 
  ├── gulp-rename@1.2.2 
  ├─┬ gulp-uglify@1.5.4 
  │ ├── deap@1.0.0 
  │ ├─┬ fancy-log@1.3.0 
  │ │ └── time-stamp@1.1.0 
  │ ├─┬ isobject@2.1.0 
  │ │ └── isarray@1.0.0 
  │ ├─┬ through2@2.0.3 
  │ │ ├─┬ readable-stream@2.3.3 
  │ │ │ ├── isarray@1.0.0 
  │ │ │ └── string_decoder@1.0.3 
  │ │ └── xtend@4.0.1 
  │ ├─┬ uglify-js@2.6.4 
  │ │ ├── async@0.2.10 
  │ │ ├── source-map@0.5.7 
  │ │ ├── uglify-to-browserify@1.0.2 
  │ │ └─┬ yargs@3.10.0 
  │ │   ├── camelcase@1.2.1 
  │ │   ├─┬ cliui@2.1.0 
  │ │   │ ├─┬ center-align@0.1.3 
  │ │   │ │ ├─┬ align-text@0.1.4 
  │ │   │ │ │ ├── longest@1.0.1 
  │ │   │ │ │ └── repeat-string@1.6.1 
  │ │   │ │ └── lazy-cache@1.0.4 
  │ │   │ ├── right-align@0.1.3 
  │ │   │ └── wordwrap@0.0.2 
  │ │   ├── decamelize@1.2.0 
  │ │   └── window-size@0.1.0 
  │ ├── uglify-save-license@0.4.1 
  │ └─┬ vinyl-sourcemaps-apply@0.2.1 
  │   └── source-map@0.5.7 
  ├─┬ gulp-webpack@1.5.0 
  │ ├── memory-fs@0.2.0 
  │ ├── through@2.3.8 
  │ └─┬ vinyl@0.5.3 
  │   └── clone-stats@0.0.1 
  ├─┬ jsx-loader@0.12.2 
  │ └─┬ loader-utils@0.2.17 
  │   ├── big.js@3.2.0 
  │   ├── emojis-list@2.1.0 
  │   ├── json5@0.5.1 
  │   └── object-assign@4.1.1 
  ├─┬ literalify@0.3.0 
  │ └─┬ browserify-transform-tools@1.2.2 
  │   └─┬ falafel@2.1.0 
  │     ├── acorn@5.1.2 
  │     ├── foreach@2.0.5 
  │     └── object-keys@1.0.11 
  ├── lodash@2.4.2 
  ├── moment@2.18.1 
  ├── node-jsx@0.12.4 
  ├─┬ react@0.12.2 
  │ └─┬ envify@3.4.1 
  │   └─┬ jstransform@11.0.3 
  │     ├── base62@1.2.0 
  │     ├── esprima-fb@15001.1.0-dev-harmony-fb 
  │     ├── object-assign@2.1.1 
  │     └── source-map@0.4.4 
  ├─┬ reactify@0.17.1 
  │ └─┬ jstransform@8.2.0 
  │   ├── base62@0.1.1 
  │   ├── esprima-fb@8001.1001.0-dev-harmony-fb 
  │   └─┬ source-map@0.1.31 
  │     └── amdefine@1.0.1 
  ├── require-dir@0.1.0 
  ├── run-sequence@1.2.2 
  ├─┬ vinyl-buffer@1.0.0 
  │ ├─┬ bl@0.9.5 
  │ │ └── readable-stream@1.0.34 
  │ └─┬ through2@0.6.5 
  │   ├── readable-stream@1.0.34 
  │   └── xtend@4.0.1 
  ├─┬ vinyl-source-stream@1.1.0 
  │ ├─┬ through2@0.6.5 
  │ │ ├── readable-stream@1.0.34 
  │ │ └── xtend@4.0.1 
  │ └─┬ vinyl@0.4.6 
  │   └── clone@0.2.0 
  └─┬ webpack@1.15.0 
    ├── acorn@3.3.0 
    ├── async@1.5.2 
    ├── clone@1.0.2 
    ├─┬ enhanced-resolve@0.9.1 
    │ └── graceful-fs@4.1.11 
    ├── interpret@0.6.6 
    ├─┬ memory-fs@0.3.0 
    │ ├─┬ errno@0.1.4 
    │ │ └── prr@0.0.0 
    │ └─┬ readable-stream@2.3.3 
    │   ├── isarray@1.0.0 
    │   └── string_decoder@1.0.3 
    ├─┬ mkdirp@0.5.1 
    │ └── minimist@0.0.8 
    ├─┬ node-libs-browser@0.7.0 
    │ ├─┬ buffer@4.9.1 
    │ │ ├── base64-js@1.2.1 
    │ │ └── isarray@1.0.0 
    │ ├── constants-browserify@1.0.0 
    │ ├─┬ crypto-browserify@3.3.0 
    │ │ ├── browserify-aes@0.4.0 
    │ │ ├── pbkdf2-compat@2.0.1 
    │ │ ├── ripemd160@0.2.0 
    │ │ └── sha.js@2.2.6 
    │ ├── os-browserify@0.2.1 
    │ ├── process@0.11.10 
    │ ├─┬ readable-stream@2.3.3 
    │ │ └── string_decoder@1.0.3 
    │ ├── stream-browserify@2.0.1 
    │ ├─┬ stream-http@2.7.2 
    │ │ ├── builtin-status-codes@3.0.0 
    │ │ ├─┬ readable-stream@2.3.3 
    │ │ │ ├── isarray@1.0.0 
    │ │ │ └── string_decoder@1.0.3 
    │ │ ├── to-arraybuffer@1.0.1 
    │ │ └── xtend@4.0.1 
    │ ├─┬ timers-browserify@2.0.4 
    │ │ └── setimmediate@1.0.5 
    │ └─┬ url@0.11.0 
    │   └── punycode@1.3.2 
    ├─┬ optimist@0.6.1 
    │ ├── minimist@0.0.10 
    │ └── wordwrap@0.0.3 
    ├─┬ supports-color@3.2.3 
    │ └── has-flag@1.0.0 
    ├── tapable@0.1.10 
    ├─┬ uglify-js@2.7.5 
    │ ├── async@0.2.10 
    │ ├── source-map@0.5.7 
    │ └── yargs@3.10.0 
    ├─┬ watchpack@0.2.9 
    │ ├── async@0.9.2 
    │ ├─┬ chokidar@1.7.0 
    │ │ ├── anymatch@1.3.2 
    │ │ ├── async-each@1.0.1 
    │ │ ├── glob-parent@2.0.0 
    │ │ ├─┬ is-binary-path@1.0.1 
    │ │ │ └── binary-extensions@1.10.0 
    │ │ └─┬ readdirp@2.1.0 
    │ │   ├── graceful-fs@4.1.11 
    │ │   ├── minimatch@3.0.4 
    │ │   └─┬ readable-stream@2.3.3 
    │ │     ├── isarray@1.0.0 
    │ │     └── string_decoder@1.0.3 
    │ └── graceful-fs@4.1.11 
    └─┬ webpack-core@0.6.9 
      ├── source-list-map@0.1.8 
      └── source-map@0.4.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/isomorphic-react-boilerplate/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 24% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","reduce","call","RegExp"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0361 took 15.7355s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: 'return' outside of function (32:2) on program // Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var isWindows = process.platform === 'win32';
var util = require('util');

var _path = require('path');

// we are new enough we already have this from the system, just export the
// system then
if (_path.posix) {
  module.exports = _path;
  return;
}

// resolves . and .. elements in a path array with directory names there
// must be no slashes or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  var res = [];
  for (var i = 0; i < parts.length; i++) {
    var p = parts[i];

    // ignore empty parts
    if (!p || p === '.')
      continue;

    if (p === '..') {
      if (res.length && res[res.length - 1] !== '..') {
        res.pop();
      } else if (allowAboveRoot) {
        res.push('..');
      }
    } else {
      res.push(p);
    }
  }

  return res;
}

// Regex to split a windows path into three parts: [*, device, slash,
// tail] windows-only
var splitDeviceRe =
    /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;

// Regex to split the tail part of the above into [*, dir, basename, ext]
var splitTailRe =
    /^([\s\S]*?)((?:\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))(?:[\\\/]*)$/;

var win32 = {};

// Function to split a filename into [root, dir, basename, ext]
function win32SplitPath(filename) {
  // Separate device+slash from tail
  var result = splitDeviceRe.exec(filename),
      device = (result[1] || '') + (result[2] || ''),
      tail = result[3] || '';
  // Split the tail into dir, basename and extension
  var result2 = splitTailRe.exec(tail),
      dir = result2[1],
      basename = result2[2],
      ext = result2[3];
  return [device, dir, basename, ext];
}

var normalizeUNCRoot = function(device) {
  return '\\\\' + device.replace(/^[\\\/]+/, '').replace(/[\\\/]+/g, '\\');
};

// path.resolve([from ...], to)
win32.resolve = function() {
  var resolvedDevice = '',
      resolvedTail = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1; i--) {
    var path;
    if (i >= 0) {
      path = arguments[i];
    } else if (!resolvedDevice) {
      path = process.cwd();
    } else {
      // Windows has the concept of drive-specific current working
      // directories. If we've resolved a drive letter but not yet an
      // absolute path, get cwd for that drive. We're sure the device is not
      // an unc path at this points, because unc paths are always absolute.
      path = process.env['=' + resolvedDevice];
      // Verify that a drive-local cwd was found and that it actually points
      // to our drive. If not, default to the drive's root.
      if (!path || path.substr(0, 3).toLowerCase() !==
          resolvedDevice.toLowerCase() + '\\') {
        path = resolvedDevice + '\\';
      }
    }

    // Skip empty and invalid entries
    if (!util.isString(path)) {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    var result = splitDeviceRe.exec(path),
        device = result[1] || '',
        isUnc = device && device.charAt(1) !== ':',
        isAbsolute = win32.isAbsolute(path),
        tail = result[3];

    if (device &&
        resolvedDevice &&
        device.toLowerCase() !== resolvedDevice.toLowerCase()) {
      // This path points to another device so it is not applicable
      continue;
    }

    if (!resolvedDevice) {
      resolvedDevice = device;
    }
    if (!resolvedAbsolute) {
      resolvedTail = tail + '\\' + resolvedTail;
      resolvedAbsolute = isAbsolute;
    }

    if (resolvedDevice && resolvedAbsolute) {
      break;
    }
  }

  // Convert slashes to backslashes when `resolvedDevice` points to an UNC
  // root. Also squash multiple slashes into a single one where appropriate.
  if (isUnc) {
    resolvedDevice = normalizeUNCRoot(resolvedDevice);
  }

  // At this point the path should be resolved to a full absolute path,
  // but handle relative paths to be safe (might happen when process.cwd()
  // fails)

  // Normalize the tail path
  resolvedTail = normalizeArray(resolvedTail.split(/[\\\/]+/),
                                !resolvedAbsolute).join('\\');

  // If device is a drive letter, we'll normalize to lower case.
  if (resolvedDevice && resolvedDevice.charAt(1) === ':') {
    resolvedDevice = resolvedDevice[0].toLowerCase() +
        resolvedDevice.substr(1);
  }

  return (resolvedDevice + (resolvedAbsolute ? '\\' : '') + resolvedTail) ||
         '.';
};


win32.normalize = function(path) {
  var result = splitDeviceRe.exec(path),
      device = result[1] || '',
      isUnc = device && device.charAt(1) !== ':',
      isAbsolute = win32.isAbsolute(path),
      tail = result[3],
      trailingSlash = /[\\\/]$/.test(tail);

  // If device is a drive letter, we'll normalize to lower case.
  if (device && device.charAt(1) === ':') {
    device = device[0].toLowerCase() + device.substr(1);
  }

  // Normalize the tail path
  tail = normalizeArray(tail.split(/[\\\/]+/), !isAbsolute).join('\\');

  if (!tail && !isAbsolute) {
    tail = '.';
  }
  if (tail && trailingSlash) {
    tail += '\\';
  }

  // Convert slashes to backslashes when `device` points to an UNC root.
  // Also squash multiple slashes into a single one where appropriate.
  if (isUnc) {
    device = normalizeUNCRoot(device);
  }

  return device + (isAbsolute ? '\\' : '') + tail;
};


win32.isAbsolute = function(path) {
  var result = splitDeviceRe.exec(path),
      device = result[1] || '',
      isUnc = !!device && device.charAt(1) !== ':';
  // UNC paths are always absolute
  return !!result[2] || isUnc;
};

win32.join = function() {
  function f(p) {
    if (!util.isString(p)) {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }

  var paths = Array.prototype.filter.call(arguments, f);
  var joined = paths.join('\\');

  // Make sure that the joined path doesn't start with two slashes, because
  // normalize() will mistake it for an UNC path then.
  //
  // This step is skipped when it is very clear that the user actually
  // intended to point at an UNC path. This is assumed when the first
  // non-empty string arguments starts with exactly two slashes followed by
  // at least one more non-slash character.
  //
  // Note that for normalize() to treat a path as an UNC path it needs to
  // have at least 2 components, so we don't filter for that here.
  // This means that the user can use join to construct UNC paths from
  // a server name and a share name; for example:
  //   path.join('//server', 'share') -> '\\\\server\\share\')
  if (!/^[\\\/]{2}[^\\\/]/.test(paths[0])) {
    joined = joined.replace(/^[\\\/]{2,}/, '\\');
  }

  return win32.normalize(joined);
};


// path.relative(from, to)
// it will solve the relative path from 'from' to 'to', for instance:
// from = 'C:\\orandea\\test\\aaa'
// to = 'C:\\orandea\\impl\\bbb'
// The output of the function should be: '..\\..\\impl\\bbb'
win32.relative = function(from, to) {
  from = win32.resolve(from);
  to = win32.resolve(to);

  // windows is not case sensitive
  var lowerFrom = from.toLowerCase();
  var lowerTo = to.toLowerCase();

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end + 1);
  }

  var toParts = trim(to.split('\\'));

  var lowerFromParts = trim(lowerFrom.split('\\'));
  var lowerToParts = trim(lowerTo.split('\\'));

  var length = Math.min(lowerFromParts.length, lowerToParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (lowerFromParts[i] !== lowerToParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  if (samePartsLength == 0) {
    return to;
  }

  var outputParts = [];
  for (var i = samePartsLength; i < lowerFromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('\\');
};


win32._makeLong = function(path) {
  // Note: this will *probably* throw somewhere.
  if (!util.isString(path))
    return path;

  if (!path) {
    return '';
  }

  var resolvedPath = win32.resolve(path);

  if (/^[a-zA-Z]\:\\/.test(resolvedPath)) {
    // path is local filesystem path, which needs to be converted
    // to long UNC path.
    return '\\\\?\\' + resolvedPath;
  } else if (/^\\\\[^?.]/.test(resolvedPath)) {
    // path is network UNC path, which needs to be converted
    // to long UNC path.
    return '\\\\?\\UNC\\' + resolvedPath.substring(2);
  }

  return path;
};


win32.dirname = function(path) {
  var result = win32SplitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


win32.basename = function(path, ext) {
  var f = win32SplitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


win32.extname = function(path) {
  return win32SplitPath(path)[3];
};


win32.format = function(pathObject) {
  if (!util.isObject(pathObject)) {
    throw new TypeError(
        "Parameter 'pathObject' must be an object, not " + typeof pathObject
    );
  }

  var root = pathObject.root || '';

  if (!util.isString(root)) {
    throw new TypeError(
        "'pathObject.root' must be a string or undefined, not " +
        typeof pathObject.root
    );
  }

  var dir = pathObject.dir;
  var base = pathObject.base || '';
  if (dir.slice(dir.length - 1, dir.length) === win32.sep) {
    return dir + base;
  }

  if (dir) {
    return dir + win32.sep + base;
  }

  return base;
};


win32.parse = function(pathString) {
  if (!util.isString(pathString)) {
    throw new TypeError(
        "Parameter 'pathString' must be a string, not " + typeof pathString
    );
  }
  var allParts = win32SplitPath(pathString);
  if (!allParts || allParts.length !== 4) {
    throw new TypeError("Invalid path '" + pathString + "'");
  }
  return {
    root: allParts[0],
    dir: allParts[0] + allParts[1].slice(0, allParts[1].length - 1),
    base: allParts[2],
    ext: allParts[3],
    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
  };
};


win32.sep = '\\';
win32.delimiter = ';';


// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var posix = {};


function posixSplitPath(filename) {
  return splitPathRe.exec(filename).slice(1);
}


// path.resolve([from ...], to)
// posix version
posix.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (!util.isString(path)) {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(resolvedPath.split('/'),
                                !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
posix.normalize = function(path) {
  var isAbsolute = posix.isAbsolute(path),
      trailingSlash = path.substr(-1) === '/';

  // Normalize the path
  path = normalizeArray(path.split('/'), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
posix.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
posix.join = function() {
  var path = '';
  for (var i = 0; i < arguments.length; i++) {
    var segment = arguments[i];
    if (!util.isString(segment)) {
      throw new TypeError('Arguments to path.join must be strings');
    }
    if (segment) {
      if (!path) {
        path += segment;
      } else {
        path += '/' + segment;
      }
    }
  }
  return posix.normalize(path);
};


// path.relative(from, to)
// posix version
posix.relative = function(from, to) {
  from = posix.resolve(from).substr(1);
  to = posix.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};


posix._makeLong = function(path) {
  return path;
};


posix.dirname = function(path) {
  var result = posixSplitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


posix.basename = function(path, ext) {
  var f = posixSplitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


posix.extname = function(path) {
  return posixSplitPath(path)[3];
};


posix.format = function(pathObject) {
  if (!util.isObject(pathObject)) {
    throw new TypeError(
        "Parameter 'pathObject' must be an object, not " + typeof pathObject
    );
  }

  var root = pathObject.root || '';

  if (!util.isString(root)) {
    throw new TypeError(
        "'pathObject.root' must be a string or undefined, not " +
        typeof pathObject.root
    );
  }

  var dir = pathObject.dir ? pathObject.dir + posix.sep : '';
  var base = pathObject.base || '';
  return dir + base;
};


posix.parse = function(pathString) {
  if (!util.isString(pathString)) {
    throw new TypeError(
        "Parameter 'pathString' must be a string, not " + typeof pathString
    );
  }
  var allParts = posixSplitPath(pathString);
  if (!allParts || allParts.length !== 4) {
    throw new TypeError("Invalid path '" + pathString + "'");
  }
  allParts[1] = allParts[1] || '';
  allParts[2] = allParts[2] || '';
  allParts[3] = allParts[3] || '';

  return {
    root: allParts[0],
    dir: allParts[0] + allParts[1].slice(0, allParts[1].length - 1),
    base: allParts[2],
    ext: allParts[3],
    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
  };
};


posix.sep = '/';
posix.delimiter = ':';


if (isWindows)
  module.exports = win32;
else /* posix */
  module.exports = posix;

module.exports.posix = posix;
module.exports.win32 = win32;
 at SyntaxError: 'return' outside of function (32:2)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$1.parseReturnStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:831:12)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:699:34)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:709:33)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseIfStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:824:28)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:698:30)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/isomorphic-react-boilerplate/server.js. Coverage (Term): 13% Coverage (LOC): 13%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/browserify/index.js. Coverage (Term): 1% Coverage (LOC): 1%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/module-deps/index.js. Coverage (Term): 3% Coverage (LOC): 3%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/browser-resolve/index.js. Coverage (Term): 5% Coverage (LOC): 8%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/browser-resolve/node_modules/resolve/index.js. Coverage (Term): 78% Coverage (LOC): 89%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/browser-resolve/node_modules/resolve/lib/core.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/browser-resolve/node_modules/resolve/lib/async.js. Coverage (Term): 5% Coverage (LOC): 6%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/browser-resolve/node_modules/resolve/lib/caller.js. Coverage (Term): 30% Coverage (LOC): 36%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/browser-resolve/node_modules/resolve/lib/node-modules-paths.js. Coverage (Term): 12% Coverage (LOC): 19%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/browser-resolve/node_modules/resolve/lib/sync.js. Coverage (Term): 11% Coverage (LOC): 12%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/module-deps/node_modules/resolve/index.js. Coverage (Term): 79% Coverage (LOC): 91%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/module-deps/node_modules/resolve/lib/core.js. Coverage (Term): 92% Coverage (LOC): 95%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/module-deps/node_modules/resolve/lib/async.js. Coverage (Term): 4% Coverage (LOC): 5%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/module-deps/node_modules/resolve/lib/caller.js. Coverage (Term): 30% Coverage (LOC): 36%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/module-deps/node_modules/resolve/lib/node-modules-paths.js. Coverage (Term): 18% Coverage (LOC): 21%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/module-deps/node_modules/resolve/lib/sync.js. Coverage (Term): 10% Coverage (LOC): 11%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/detective/index.js. Coverage (Term): 14% Coverage (LOC): 17%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/acorn/dist/acorn.js. Coverage (Term): 13% Coverage (LOC): 35%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/acorn/dist/walk.js. Coverage (Term): 17% Coverage (LOC): 37%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/detective/node_modules/defined/index.js. Coverage (Term): 35% Coverage (LOC): 50%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/through2/through2.js. Coverage (Term): 24% Coverage (LOC): 26%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/readable-stream/transform.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/readable-stream/lib/_stream_transform.js. Coverage (Term): 15% Coverage (LOC): 23%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/readable-stream/lib/_stream_duplex.js. Coverage (Term): 49% Coverage (LOC): 51%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/core-util-is/lib/util.js. Coverage (Term): 33% Coverage (LOC): 64%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/inherits/inherits.js. Coverage (Term): 74% Coverage (LOC): 88%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/readable-stream/lib/_stream_readable.js. Coverage (Term): 7% Coverage (LOC): 11%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/isarray/index.js. Coverage (Term): 53% Coverage (LOC): 80%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/readable-stream/lib/_stream_writable.js. Coverage (Term): 9% Coverage (LOC): 16%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/through2/node_modules/xtend/immutable.js. Coverage (Term): 32% Coverage (LOC): 33%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/concat-stream/index.js. Coverage (Term): 11% Coverage (LOC): 18%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/readable-stream/readable.js. Coverage (Term): 90% Coverage (LOC): 92%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/readable-stream/lib/_stream_passthrough.js. Coverage (Term): 58% Coverage (LOC): 71%
*- File /root/Targets/isomorphic-react-boilerplate/node_modules/module-deps/node_modules/parents/index.js. Coverage (Term): 6% Coverage (LOC): 11%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
