/root/Targets/copress
└─┬ copress@1.1.17 
  ├─┬ bootable@0.2.4  (git://github.com/taoyuan/bootable.git#3e0b1ab3d2f1976ca35c8740575c210858f2bf6d)
  │ ├─┬ bootable-di@0.1.0 
  │ │ ├── debug@0.7.4 
  │ │ └── parent-require@1.0.0 
  │ ├─┬ debug@2.2.0 
  │ │ └── ms@0.7.1 
  │ └── scripts@0.1.0 
  ├─┬ bootable-components@0.1.7 
  │ └─┬ configup@2.0.0  (git://github.com/taoyuan/configup.git#c43b8c8b6fb6d33810e5bcdf0a34289290aa4d23)
  │   ├── json5@0.5.1 
  │   └── lodash.clonedeep@4.5.0 
  ├─┬ bootable-middleware@0.1.6 
  │ ├── configup@2.0.0  (git://github.com/taoyuan/configup.git#c43b8c8b6fb6d33810e5bcdf0a34289290aa4d23)
  │ └── lodash@3.10.1 
  ├── coffee-script@1.12.7 
  ├─┬ configup@0.1.6 
  │ └─┬ lodash.clonedeep@3.0.2 
  │   ├─┬ lodash._baseclone@3.3.0 
  │   │ ├── lodash._arraycopy@3.0.0 
  │   │ ├── lodash._arrayeach@3.0.0 
  │   │ ├─┬ lodash._baseassign@3.2.0 
  │   │ │ └── lodash._basecopy@3.0.1 
  │   │ ├── lodash._basefor@3.0.3 
  │   │ ├── lodash.isarray@3.0.4 
  │   │ └─┬ lodash.keys@3.1.2 
  │   │   ├── lodash._getnative@3.9.1 
  │   │   └── lodash.isarguments@3.1.0 
  │   └── lodash._bindcallback@3.0.1 
  ├─┬ debug@2.6.9 
  │ └── ms@2.0.0 
  ├── ejs@2.5.7 
  ├── ejs-ext@0.1.4-5 
  ├─┬ expressx@0.1.10 
  │ ├─┬ assert@1.4.1 
  │ │ └─┬ util@0.10.3 
  │ │   └── inherits@2.0.1 
  │ ├─┬ endomain@0.1.0 
  │ │ └─┬ continuation-local-storage@3.2.0 
  │ │   ├─┬ async-listener@0.6.8 
  │ │   │ ├── semver@5.4.1 
  │ │   │ └── shimmer@1.1.0 
  │ │   └─┬ emitter-listener@1.0.1 
  │ │     └── shimmer@1.0.0 
  │ ├─┬ express@4.16.1 
  │ │ ├─┬ accepts@1.3.4 
  │ │ │ ├─┬ mime-types@2.1.17 
  │ │ │ │ └── mime-db@1.30.0 
  │ │ │ └── negotiator@0.6.1 
  │ │ ├── array-flatten@1.1.1 
  │ │ ├─┬ body-parser@1.18.2 
  │ │ │ ├── bytes@3.0.0 
  │ │ │ ├─┬ http-errors@1.6.2 
  │ │ │ │ ├── inherits@2.0.3 
  │ │ │ │ └── setprototypeof@1.0.3 
  │ │ │ ├── iconv-lite@0.4.19 
  │ │ │ └── raw-body@2.3.2 
  │ │ ├── content-disposition@0.5.2 
  │ │ ├── content-type@1.0.4 
  │ │ ├── cookie@0.3.1 
  │ │ ├── cookie-signature@1.0.6 
  │ │ ├── depd@1.1.1 
  │ │ ├── encodeurl@1.0.1 
  │ │ ├── escape-html@1.0.3 
  │ │ ├── etag@1.8.1 
  │ │ ├─┬ finalhandler@1.1.0 
  │ │ │ └── unpipe@1.0.0 
  │ │ ├── fresh@0.5.2 
  │ │ ├── merge-descriptors@1.0.1 
  │ │ ├── methods@1.1.2 
  │ │ ├─┬ on-finished@2.3.0 
  │ │ │ └── ee-first@1.1.1 
  │ │ ├── parseurl@1.3.2 
  │ │ ├── path-to-regexp@0.1.7 
  │ │ ├─┬ proxy-addr@2.0.2 
  │ │ │ ├── forwarded@0.1.2 
  │ │ │ └── ipaddr.js@1.5.2 
  │ │ ├── qs@6.5.1 
  │ │ ├── range-parser@1.2.0 
  │ │ ├── safe-buffer@5.1.1 
  │ │ ├─┬ send@0.16.1 
  │ │ │ ├── destroy@1.0.4 
  │ │ │ ├── mime@1.4.1 
  │ │ │ └── ms@2.0.0 
  │ │ ├── serve-static@1.13.1 
  │ │ ├── setprototypeof@1.1.0 
  │ │ ├── statuses@1.3.1 
  │ │ ├─┬ type-is@1.6.15 
  │ │ │ └── media-typer@0.3.0 
  │ │ └── vary@1.1.2 
  │ ├── stable@0.1.6 
  │ └── utils-merge@1.0.1 
  ├── inflection@1.12.0 
  ├── kontroller@0.0.11 
  ├── middist@0.1.2 
  ├─┬ railway-routes@0.0.10 
  │ └─┬ express@3.21.2 
  │   ├── basic-auth@1.0.4 
  │   ├── commander@2.6.0 
  │   ├─┬ connect@2.30.2 
  │   │ ├── basic-auth-connect@1.0.0 
  │   │ ├─┬ body-parser@1.13.3 
  │   │ │ ├── iconv-lite@0.4.11 
  │   │ │ └─┬ raw-body@2.1.7 
  │   │ │   ├── bytes@2.4.0 
  │   │ │   └── iconv-lite@0.4.13 
  │   │ ├── bytes@2.1.0 
  │   │ ├─┬ compression@1.5.2 
  │   │ │ ├─┬ accepts@1.2.13 
  │   │ │ │ └── negotiator@0.5.3 
  │   │ │ ├── bytes@2.1.0 
  │   │ │ ├── compressible@2.0.11 
  │   │ │ ├── debug@2.2.0 
  │   │ │ └── vary@1.0.1 
  │   │ ├─┬ connect-timeout@1.6.2 
  │   │ │ ├── debug@2.2.0 
  │   │ │ └── http-errors@1.3.1 
  │   │ ├── cookie@0.1.3 
  │   │ ├─┬ cookie-parser@1.3.5 
  │   │ │ └── cookie@0.1.3 
  │   │ ├─┬ csurf@1.8.3 
  │   │ │ ├── cookie@0.1.3 
  │   │ │ ├─┬ csrf@3.0.6 
  │   │ │ │ ├── rndm@1.2.0 
  │   │ │ │ ├── tsscmp@1.0.5 
  │   │ │ │ └─┬ uid-safe@2.1.4 
  │   │ │ │   └── random-bytes@1.0.0 
  │   │ │ └── http-errors@1.3.1 
  │   │ ├── debug@2.2.0 
  │   │ ├── depd@1.0.1 
  │   │ ├── errorhandler@1.4.3 
  │   │ ├─┬ express-session@1.11.3 
  │   │ │ ├── cookie@0.1.3 
  │   │ │ ├── crc@3.3.0 
  │   │ │ ├── debug@2.2.0 
  │   │ │ ├── depd@1.0.1 
  │   │ │ ├─┬ uid-safe@2.0.0 
  │   │ │ │ └── base64-url@1.2.1 
  │   │ │ └── utils-merge@1.0.0 
  │   │ ├─┬ finalhandler@0.4.0 
  │   │ │ └── escape-html@1.0.2 
  │   │ ├── fresh@0.3.0 
  │   │ ├── http-errors@1.3.1 
  │   │ ├── method-override@2.3.10 
  │   │ ├─┬ morgan@1.6.1 
  │   │ │ ├── debug@2.2.0 
  │   │ │ └── depd@1.0.1 
  │   │ ├─┬ multiparty@3.3.2 
  │   │ │ ├─┬ readable-stream@1.1.14 
  │   │ │ │ ├── core-util-is@1.0.2 
  │   │ │ │ ├── isarray@0.0.1 
  │   │ │ │ └── string_decoder@0.10.31 
  │   │ │ └── stream-counter@0.2.0 
  │   │ ├── on-headers@1.0.1 
  │   │ ├── pause@0.1.0 
  │   │ ├── qs@4.0.0 
  │   │ ├── response-time@2.3.2 
  │   │ ├─┬ serve-favicon@2.3.2 
  │   │ │ ├── etag@1.7.0 
  │   │ │ ├── fresh@0.3.0 
  │   │ │ └── ms@0.7.2 
  │   │ ├─┬ serve-index@1.7.3 
  │   │ │ ├─┬ accepts@1.2.13 
  │   │ │ │ └── negotiator@0.5.3 
  │   │ │ ├── batch@0.5.3 
  │   │ │ ├── debug@2.2.0 
  │   │ │ └── http-errors@1.3.1 
  │   │ ├─┬ serve-static@1.10.3 
  │   │ │ ├── escape-html@1.0.3 
  │   │ │ └─┬ send@0.13.2 
  │   │ │   ├── depd@1.1.1 
  │   │ │   ├── escape-html@1.0.3 
  │   │ │   ├── etag@1.7.0 
  │   │ │   ├── mime@1.3.4 
  │   │ │   ├── range-parser@1.0.3 
  │   │ │   └── statuses@1.2.1 
  │   │ ├── utils-merge@1.0.0 
  │   │ └── vhost@3.0.2 
  │   ├── content-disposition@0.5.0 
  │   ├── cookie@0.1.3 
  │   ├── debug@2.2.0 
  │   ├── depd@1.0.1 
  │   ├── escape-html@1.0.2 
  │   ├── etag@1.7.0 
  │   ├── fresh@0.3.0 
  │   ├── merge-descriptors@1.0.0 
  │   ├─┬ mkdirp@0.5.1 
  │   │ └── minimist@0.0.8 
  │   ├─┬ proxy-addr@1.0.10 
  │   │ └── ipaddr.js@1.0.5 
  │   ├── range-parser@1.0.3 
  │   ├─┬ send@0.13.0 
  │   │ ├── destroy@1.0.3 
  │   │ ├── http-errors@1.3.1 
  │   │ ├── mime@1.3.4 
  │   │ └── statuses@1.2.1 
  │   ├── utils-merge@1.0.0 
  │   └── vary@1.0.1 
  └── yaml-js@0.1.5 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/copress/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0421 took 3.2905s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Invalid number (290:26) on program var Compound = require('../compound');
var util = require('util');
var http = require('http');
var https = require('https');
var fs = require('fs');
var path = require('path');

function CompoundServer(app, root, opts) {

    Compound.call(this, app, root);

    if (app) {
        if (opts && opts.key && opts.cert) {
            this.server = https.createServer(opts, app);
        } else {
            this.server = http.createServer(app);
        }

        app.listen = function () {
            app.emit('before listening', this.server);
            this.server.listen.apply(this.server, arguments);
        }.bind(this);

        this.injectMiddlewareAt(0, function compound(req, res, next) {
            req.locals = req.locals || {};
            app.compound.emit('request', req, res);
            next();
        });
    }

    this.__defineGetter__('rootModule', function () {
        return module.parent;
    });

    this.logger = require('./logger');
    this.generators = require('./generators');
    this.installer = require('./installer');
    this.structure.tools = this.tools = require('./tools');
    //this.extensions = require('./extensions');
    this.middleware = require('./middleware');
    this.loadStructure = require('./structure')(this);
    this.__defineGetter__('version', function () {
        return require('../../package').version;
    });

    var that = this;
    if (!opts || opts.autoboot !== false) {
        process.nextTick(function () {
            that.boot();
        });
    }
}

util.inherits(CompoundServer, Compound);

CompoundServer.prototype.setup = function (root) {
    var compound = this;

    this.phase(function () {
        envInfo(compound);
    });

    this.phase(function () {
        compound.logger.init(compound);
    });

    Compound.prototype.setup.call(compound, root);

    this.phase(function () {
        if (compound.app) {
            if (compound.app.enabled('merge javascripts')) {
                var jsDir = compound.app.get('jsDirectory');
                if (jsDir) {
                    ensureDirClean(compound.app.root + '/public' +
                        jsDir, 'cache');
                }
            }

            if (compound.app.enabled('merge stylesheets')) {
                var cssDir = compound.app.get('cssDirectory');
                if (cssDir) {
                    ensureDirClean(compound.app.root + '/public' +
                        cssDir, 'cache');
                }
            }
        }
    });

};

/**
 * Put middleware inside stack before anchor.
 *
 * @param {String} anchor - name of anchor middleware.
 * @param {Function} middleware - middleware.
 *
 * @return {Boolean} - is anchor middleware was found.
 */
CompoundServer.prototype.injectMiddlewareBefore = function (anchor, route, middleware) {
    var mod = this.app, anchorPosition;
    if (!mod) {
        return;
    }
    mod.stack.forEach(function (r, i) {
        if (r.handle === anchor || r.handle.name === anchor) {
            anchorPosition = i;
        }
    });
    this.injectMiddlewareAt(anchorPosition, route, middleware);
    return 'undefined' !== typeof anchorPosition;
};

/**
 * Put middleware inside stack after anchor.
 *
 * @param {Function,String} anchor - middleware or name of anchor middleware.
 * @param {Function} middleware - middleware.
 *
 * @return {Boolean} - is anchor middleware was found.
 */
CompoundServer.prototype.injectMiddlewareAfter = function (anchor, route, middleware) {
    var mod = this.app, anchorPosition;
    if (!mod) {
        return;
    }
    mod.stack.forEach(function (r, i) {
        if (r.handle === anchor || r.handle.name === anchor) {
            anchorPosition = i;
        }
    });
    this.injectMiddlewareAt(anchorPosition + 1, route, middleware);
    return 'undefined' !== typeof anchorPosition;
};

CompoundServer.prototype.injectMiddlewareAt = function (position, route, middleware) {
    if (typeof route === 'function') {
        middleware = route;
        route = '';
    }
    var mod = this.app;
    if (!mod) {
        return;
    }
    if (route && route.length > 0) {
        mod.use(route, middleware);
    } else {
        mod.use(middleware);
    }

    var layer = mod.stack.pop();

    if (position <= 0) {
        mod.stack.unshift(layer);
    } else if (position && position <= mod.stack.length) {
        mod.stack.splice(position, 0, layer);
    } else {
        mod.stack.push(layer);
    }
};

/**
 * Create http server object. Automatically hook up SSL keys stored in
 * app.root/config/tsl.{cert|key}
 *
 * @param {Object} [options] - example:
 *   {root: __dirname, any other options for express}.
 * @return {Function} express server.
 */
exports.createServer = function (options) {
    options = options || {};
    if (typeof options === 'string') {
        options = {root: options};
    }
    var root = options.root || process.cwd();
    delete options.root;

    var expressx = require('expressx');
    var app = expressx();

    // hack stack from express3 to express4
    Object.defineProperty(app, 'stack', {
        get: function () {
            if (this._router) {
                return this._router.stack;
            }
            if (!this._stack) this._stack = [];
            return this._stack;
        },
        set: function (newValue) {
            if (this._router) {
                this._router.stack = newValue;
            } else {
                this._stack = newValue;
            }
        },
        enumerable: true,
        configurable: true
    });

    new CompoundServer(app, root, options);

    app.express4 = true;

    return app;
};

exports.controllers = require('./controllers');

exports.Compound = CompoundServer;

/**
 * Setup route /compound/environment.json to return information about environment
 */
function envInfo(rw) {
    rw.on('after configure', defineEnvInfoRoutes.bind(rw));
}

function defineEnvInfoRoutes() {
    var rw = this;
    var jugglingdbVersion, npmVersion, viewEngineVersion;

    if (!rw.app) {
        return;
    }

    rw.app.get('/compound/environment.json', function (req, res) {

        if (rw.app.disabled('env info')) {
            return res.send({forbidden: true});
        }

        try {
            jugglingdbVersion = require('jugglingdb').version;
        } catch (e) {
            jugglingdbVersion = 'not installed';
        }

        try {
            npmVersion = require('npm').version;
        } catch (e) {
        }

        try {
            viewEngineVersion = require(rw.app.root + '/node_modules/' + rw.app.set('view engine')).version;
        } catch (e) {
            viewEngineVersion = 'not installed';
        }

        res.send({
            settings: rw.app.settings,
            versions: {
                core: process.versions,
                npm: npmVersion,
                compound: rw.version,
                jugglingdb: jugglingdbVersion,
                templating: {
                    name: rw.app.set('view engine'),
                    version: viewEngineVersion
                }
            },
            application: {
                root: rw.app.root,
                database: require(rw.app.root + '/config/database')[rw.app.set('env')].driver,
                middleware: rw.app.stack.map(function (m) {
                    return m.handle.name;
                })
            },
            env: process.env
        });
    });
}

/**
 * Cleanup or create dir
 *
 * @param {String} dir - path to dir to create.
 * @param {String} prefix - only remove files started with that prefix.
 */
function ensureDirClean(dir, prefix) {
    fs.exists(dir, function (exists) {
        if (exists) {
            fs.readdir(dir, function (err, files) {
                files.filter(function (file) {
                    return file.indexOf(prefix + '_') === 0;
                }).map(function (file) {
                    return path.join(dir, file);
                }).forEach(fs.unlink);
            });
        } else {
            fs.mkdir(dir, 0755, function () {
            });
        }
    });
}
 at SyntaxError: Invalid number (290:26)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.expect (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:597:10)
    at Parser.pp$3.parseExprList (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2152:16)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
