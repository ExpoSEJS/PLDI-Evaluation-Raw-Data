/root/Targets/assert6
└── assert6@1.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/assert6/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0324 took 2.8228s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:6) on program 'use strict'

const assert = require('assert')
const AssertionError = assert.AssertionError
const fail = assert.fail

function Assert(value, message) {
  return assert.ok(value, message)
}

module.exports = Assert

Assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual)
  }
}

Assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual)
  }
}

const keys = Object.keys(assert)
for (var i = 0, len = keys.length; i < len; i++) {
  if (!Assert.hasOwnProperty(keys[i]))
    Assert[keys[i]] = assert[keys[i]]
}

Assert.assertMap = function assertMap(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual)
  }
}

Assert.assertMapStrict = function assertMapStrict(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual)
  }
}

Assert.assertSet = function assertSet(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual)
  }
}

Assert.assertSetStrict = function assertSetStrict(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual)
  }
}

function compareMaps(a, b, strict) {
  if (a.size !== b.size)
    return false

  for (let kvs of a) {
    const key = kvs[0]
    const val = kvs[1]
    if (!b.has(key))
      return false

    if (!_deepEqual(val, b.get(key), strict))
      return false
  }

  return true
}

function compareSets(a, b) {
  if (a.size !== b.size)
    return false

  for (let item of a) {
    if (!b.has(item))
      return false
  }

  return true
}

function _deepEqual(a, b, strict) {
  const aStr = Object.prototype.toString.call(a)
  const bStr = Object.prototype.toString.call(b)
  if (aStr === '[object Map]' && bStr === '[object Map]') {
    return compareMaps(a, b, strict)
  } else if (aStr === '[object Set]' && bStr === '[object Set]') {
    return compareSets(a, b)
  }
  try {
    if (strict) {
      assert.deepStrictEqual(a, b)
    } else {
      assert.deepEqual(a, b)
    }
    return true
  }
  catch (err) {
    if (err instanceof AssertionError)
      return false

    throw err
  }
}
 at SyntaxError: Unexpected token (3:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
