/root/Targets/react-ssr-benchmarks
└─┬ react-ssr-benchmarks@4.0.0 
  └─┬ benchmark@2.1.4 
    ├── lodash@4.17.4 
    └── platform@1.3.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/react-ssr-benchmarks/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0706 took 2.6745s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:84) on program const assert = require('assert')
const Benchmark = require('benchmark')
const SimpleExample = require('./examples/simple')

const Reacts = {
  12: require('./react/12'),
  13: require('./react/13'),
  14: require('./react/14'),
  15: require('./react/15'),
}

function assertVersions(version) {
  const valid = {
    12: '0.12.2',
    13: '0.13.3',
    14: '0.14.8',
    15: '15.3.0',
  }
  const React = Reacts[version].React

  assert.ok(
    React.version === valid[version],
    `Failed version check for ${version}. Expected ${valid[version]} got ${React.version}`)
}

function outputMarkup(name, res) {
  // Prior to starting the test run it'll output the markup to console
  // so you can verify the markup
  console.log(`Markup generated by ${name}:`)
  console.log('`')
  console.log(res)
  console.log('`')
  console.log()
  console.log('Benchmark Results:')
}

// Make sure each version is correct
Object.keys(Reacts).forEach(version => assertVersions(version))

module.exports = (config) => {
  const options = Object.assign({
    // Default getComponent and render implementations just run a "Hello World" test
    getComponent: SimpleExample.getComponent,
    props: SimpleExample.props,
    // Array of custom tests to add to the suite to benchmark vs React
    tests: [],
    // What versions we run benchmarks on
    versions: {
      12: true,
      13: true,
      14: true,
      15: true,
    },
  }, config)

  const suite = new Benchmark.Suite()

  // Enable each react version
  Object.keys(options.versions).forEach((version) => {
    const React = Reacts[version].React
    const ReactDOMServer = Reacts[version].ReactDOMServer
    const Component = options.getComponent(React)
    const Element = React.createElement(Component, options.props)

    const name = `React v${React.version}`

    suite.add(name, function () {
      ReactDOMServer.renderToString(Element)
    })

    outputMarkup(name, ReactDOMServer.renderToString(Element))
  })

  // Add your own tests
  // It'll use the React version you pass in through options as React and ReactDOMServer
  // and it'll get the component just like the other tests to ensure it uses the same component
  options.tests.forEach((test) => {
    const React = test.React
    const ReactDOMServer = test.ReactDOMServer
    const Component = options.getComponent(React)
    const Element = React.createElement(Component, options.props)

    suite.add(test.name, function () {
      ReactDOMServer.renderToString(Element)
    })

    outputMarkup(test.name, ReactDOMServer.renderToString(Element))
  })

  // Run
  suite.on('cycle', function (event) {
    console.log(String(event.target))
  }).on('complete', function () {
    console.log()
    console.log(`Fastest is ${this.filter('fastest').map('name')}`)
  }).run()
}
 at SyntaxError: Unexpected token (1:84)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
