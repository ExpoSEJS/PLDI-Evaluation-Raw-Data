
> bufferutil@1.2.1 install /root/Targets/chaunli/node_modules/bufferutil
> node-gyp rebuild

make: Entering directory '/root/Targets/chaunli/node_modules/bufferutil/build'
  CXX(target) Release/obj.target/bufferutil/src/bufferutil.o
  SOLINK_MODULE(target) Release/obj.target/bufferutil.node
  COPY Release/bufferutil.node
make: Leaving directory '/root/Targets/chaunli/node_modules/bufferutil/build'

> utf-8-validate@1.2.2 install /root/Targets/chaunli/node_modules/utf-8-validate
> node-gyp rebuild

make: Entering directory '/root/Targets/chaunli/node_modules/utf-8-validate/build'
  CXX(target) Release/obj.target/validation/src/validation.o
  SOLINK_MODULE(target) Release/obj.target/validation.node
  COPY Release/validation.node
make: Leaving directory '/root/Targets/chaunli/node_modules/utf-8-validate/build'
/root/Targets/chaunli
└─┬ chaunli@0.2.1 
  ├─┬ body-parser@1.13.3 
  │ ├── bytes@2.1.0 
  │ ├── content-type@1.0.4 
  │ ├─┬ debug@2.2.0 
  │ │ └── ms@0.7.1 
  │ ├── depd@1.0.1 
  │ ├─┬ http-errors@1.3.1 
  │ │ ├── inherits@2.0.3 
  │ │ └── statuses@1.3.1 
  │ ├── iconv-lite@0.4.11 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── qs@4.0.0 
  │ ├─┬ raw-body@2.1.7 
  │ │ ├── bytes@2.4.0 
  │ │ ├── iconv-lite@0.4.13 
  │ │ └── unpipe@1.0.0 
  │ └─┬ type-is@1.6.15 
  │   ├── media-typer@0.3.0 
  │   └─┬ mime-types@2.1.17 
  │     └── mime-db@1.30.0 
  ├── config@1.14.0 
  ├─┬ connect-redis@2.3.0 
  │ └─┬ debug@1.0.5 
  │   └── ms@2.0.0 
  ├─┬ cookie-parser@1.3.5 
  │ ├── cookie@0.1.3 
  │ └── cookie-signature@1.0.6 
  ├─┬ express@4.13.4 
  │ ├─┬ accepts@1.2.13 
  │ │ └── negotiator@0.5.3 
  │ ├── array-flatten@1.1.1 
  │ ├── content-disposition@0.5.1 
  │ ├── cookie@0.1.5 
  │ ├── depd@1.1.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.7.0 
  │ ├── finalhandler@0.4.1 
  │ ├── fresh@0.3.0 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@1.0.10 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.0.5 
  │ ├── range-parser@1.0.3 
  │ ├─┬ send@0.13.1 
  │ │ ├── depd@1.1.1 
  │ │ ├── destroy@1.0.4 
  │ │ ├── mime@1.3.4 
  │ │ └── statuses@1.2.1 
  │ ├─┬ serve-static@1.10.3 
  │ │ └─┬ send@0.13.2 
  │ │   ├── depd@1.1.1 
  │ │   └── statuses@1.2.1 
  │ ├── utils-merge@1.0.0 
  │ └── vary@1.0.1 
  ├─┬ express-session@1.11.3 
  │ ├── crc@3.3.0 
  │ ├── on-headers@1.0.1 
  │ └─┬ uid-safe@2.0.0 
  │   └── base64-url@1.2.1 
  ├── highlight.js@8.9.1 
  ├─┬ i18n@0.5.0 
  │ ├── mustache@2.3.0 
  │ └── sprintf@0.1.5 
  ├─┬ jade@1.11.0 
  │ ├── character-parser@1.2.1 
  │ ├─┬ clean-css@3.4.28 
  │ │ ├─┬ commander@2.8.1 
  │ │ │ └── graceful-readlink@1.0.1 
  │ │ └─┬ source-map@0.4.4 
  │ │   └── amdefine@1.0.1 
  │ ├── commander@2.6.0 
  │ ├─┬ constantinople@3.0.2 
  │ │ └── acorn@2.7.0 
  │ ├─┬ jstransformer@0.0.2 
  │ │ ├── is-promise@2.1.0 
  │ │ └─┬ promise@6.1.0 
  │ │   └── asap@1.0.0 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ ├─┬ transformers@2.1.0 
  │ │ ├─┬ css@1.0.8 
  │ │ │ ├── css-parse@1.0.4 
  │ │ │ └── css-stringify@1.0.5 
  │ │ ├─┬ promise@2.0.0 
  │ │ │ └── is-promise@1.0.1 
  │ │ └─┬ uglify-js@2.2.5 
  │ │   ├─┬ optimist@0.3.7 
  │ │   │ └── wordwrap@0.0.3 
  │ │   └── source-map@0.1.43 
  │ ├─┬ uglify-js@2.8.29 
  │ │ ├── source-map@0.5.7 
  │ │ ├── uglify-to-browserify@1.0.2 
  │ │ └─┬ yargs@3.10.0 
  │ │   ├── camelcase@1.2.1 
  │ │   ├─┬ cliui@2.1.0 
  │ │   │ ├─┬ center-align@0.1.3 
  │ │   │ │ ├─┬ align-text@0.1.4 
  │ │   │ │ │ ├─┬ kind-of@3.2.2 
  │ │   │ │ │ │ └── is-buffer@1.1.5 
  │ │   │ │ │ ├── longest@1.0.1 
  │ │   │ │ │ └── repeat-string@1.6.1 
  │ │   │ │ └── lazy-cache@1.0.4 
  │ │   │ ├── right-align@0.1.3 
  │ │   │ └── wordwrap@0.0.2 
  │ │   ├── decamelize@1.2.0 
  │ │   └── window-size@0.1.0 
  │ ├── void-elements@2.0.1 
  │ └─┬ with@4.0.3 
  │   ├── acorn@1.2.2 
  │   └── acorn-globals@1.0.9 
  ├─┬ markdown-it@4.3.1 
  │ ├─┬ argparse@1.0.9 
  │ │ └── sprintf-js@1.0.3 
  │ ├── entities@1.1.1 
  │ ├── linkify-it@1.2.4 
  │ ├── mdurl@1.0.1 
  │ └── uc.micro@1.0.3 
  ├── markdown-it-for-inline@0.1.1 
  ├─┬ MD5@1.2.2 
  │ ├── charenc@0.0.2 
  │ └── crypt@0.0.2 
  ├─┬ passport@0.2.2 
  │ ├── passport-strategy@1.0.0 
  │ └── pause@0.0.1 
  ├── passport-local@1.0.0 
  ├─┬ passport.socketio@3.7.0 
  │ └── xtend@4.0.1 
  ├── path@0.11.14 
  ├── redis@0.12.1 
  └─┬ socket.io@1.3.7 
    ├─┬ debug@2.1.0 
    │ └── ms@0.6.2 
    ├─┬ engine.io@1.5.4 
    │ ├── base64id@0.1.0 
    │ ├─┬ debug@1.0.3 
    │ │ └── ms@0.6.2 
    │ ├─┬ engine.io-parser@1.2.2 
    │ │ ├── after@0.8.1 
    │ │ ├── arraybuffer.slice@0.0.6 
    │ │ ├── base64-arraybuffer@0.1.2 
    │ │ ├── blob@0.0.4 
    │ │ └── utf8@2.1.0 
    │ └─┬ ws@0.8.0 
    │   ├─┬ bufferutil@1.2.1 
    │   │ ├── bindings@1.2.1 
    │   │ └── nan@2.7.0 
    │   ├── options@0.0.6 
    │   ├── ultron@1.0.2 
    │   └─┬ utf-8-validate@1.2.2 
    │     └── nan@2.4.0 
    ├─┬ has-binary-data@0.1.3 
    │ └── isarray@0.0.1 
    ├─┬ socket.io-adapter@0.3.1 
    │ ├─┬ debug@1.0.2 
    │ │ └── ms@0.6.2 
    │ ├── object-keys@1.0.1 
    │ └─┬ socket.io-parser@2.2.2 
    │   └── debug@0.7.4 
    ├─┬ socket.io-client@1.3.7 
    │ ├── backo2@1.0.2 
    │ ├── component-bind@1.0.0 
    │ ├── component-emitter@1.1.2 
    │ ├── debug@0.7.4 
    │ ├─┬ engine.io-client@1.5.4 
    │ │ ├── component-inherit@0.0.3 
    │ │ ├─┬ debug@1.0.4 
    │ │ │ └── ms@0.6.2 
    │ │ ├─┬ has-cors@1.0.3 
    │ │ │ └── global@2.0.1 
    │ │ ├── parsejson@0.0.1 
    │ │ ├── parseqs@0.0.2 
    │ │ ├── parseuri@0.0.4 
    │ │ └── xmlhttprequest@1.5.0 
    │ ├── has-binary@0.1.6 
    │ ├── indexof@0.0.1 
    │ ├── object-component@0.0.3 
    │ ├─┬ parseuri@0.0.2 
    │ │ └─┬ better-assert@1.0.2 
    │ │   └── callsite@1.0.0 
    │ └── to-array@0.1.3 
    └─┬ socket.io-parser@2.2.4 
      ├── benchmark@1.0.0 
      ├── debug@0.7.4 
      └── json3@3.2.6 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/chaunli/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0817 took 2.0257s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var path = require("path");
process.env["NODE_CONFIG_DIR"] = path.resolve(__dirname, "./config");

var express = require("express")
    , session = require('express-session')
    , config = require("config")
    , redis = require("redis")
    , client = redis.createClient(config.get("redis.port"), config.get("redis.host"))
    , RedisStore = require("connect-redis")(session)
    , sessionStore = new RedisStore({client: client})
    , app = express()
    , http = require("http")
    , server = http.createServer(app)
    , io = require("socket.io").listen(server)
    , md5 = require("MD5")
    , passport = require("passport")
    , LocalStrategy = require("passport-local").Strategy
    , passportSocketIo = require("passport.socketio")
    , bodyParser = require("body-parser")
    , cookieParser = require("cookie-parser")
    , i18n = require("i18n")
    , User = require(path.resolve(__dirname, "./src/user"))
    , chat = require(path.resolve(__dirname, "./src/chat"));

app.set("views", path.resolve(__dirname, "./views"));
app.set("view engine", "jade");
app.use(express.static(path.join(app.get("views"))));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
    extended: true
}));
app.use(cookieParser());
app.use(session({
    key:                "chaunli.sid",
    store:              sessionStore,
    secret:             config.get("secret_token"),
    resave:             true,
    saveUninitialized:  true
}));
app.use(passport.initialize());
app.use(passport.session());
app.use("/locales", express.static(path.resolve(__dirname, "./locales")));
app.use(i18n.init);
i18n.configure({
    locales:["en", "fr"],
    directory: path.resolve(__dirname, "./locales")
});
passport.use(new LocalStrategy({
        usernameField: "email",
        passwordField: "password"
    },
    function(username, password, done) {
        // asynchronous verification
        process.nextTick(function () {
            User.findOne(username, function(err, user) {
                if (err) { return done(err); }
                if (!user) { return done(null, false, { message: i18n.__("Unknown user %s", username) }); }
                if (user.password !== md5(password)) { return done(null, false, { message: i18n.__("Invalid password") }); }
                return done(null, user);
            })
        });
    }
));

passport.serializeUser(function(user, done) {
    done(null, user.id);
});

passport.deserializeUser(function(id, done) {
    User.findById(id, function (err, user) {
        done(err, user);
    });
});

function onAuthorizeSuccess(data, accept){
    i18n.init(data);
    data.user.locale = i18n.getLocale(data);
    data.user.idle = false;
    console.info(new Date().toLocaleString() + " Successful connection to socket.io (lang: " + data.user.locale + ", auth: cookie)");
    accept();
}

function onAuthorizeFail(data, message, error, accept){
    console.info(new Date().toLocaleString() + " Failed connection to socket.io: " + message);
    if(error) {
        accept(new Error(message));
    }
}

var cookieAuth = passportSocketIo.authorize({
    cookieParser: cookieParser,
    key:         "chaunli.sid",
    secret:      config.get("secret_token"),
    store:       sessionStore,
    success:     onAuthorizeSuccess,
    fail:        onAuthorizeFail
});

io.use(function(socket, next) {
    if (socket.request._query && socket.request._query.token) {
        User.findByToken(socket.request._query.token, function(err, user) {
            if (err || !user) {
                return next("Fail");
            }

            i18n.init(socket.request);
            socket.request.user = user;
            socket.request.user.logged_in = true;
            socket.request.user.locale = i18n.getLocale(socket.request);
            socket.request.user.idle = false;
            console.info(new Date().toLocaleString() + " Successful connection to socket.io (lang: " + socket.request.user.locale + ", auth: token)");
            next();
        })
    } else {
        cookieAuth(socket, next);
    }
});



var index = require(path.resolve(__dirname, "./routes/index"))
    , login = require(path.resolve(__dirname, "./routes/login"))
    , logout = require(path.resolve(__dirname, "./routes/logout"));

app.all("/", index.show);
app.all("/login", login.show);
app.all("/logout", logout.show);

app.use(function(req, res, next) {
    return res.render("404", {
        title: i18n.__("Page not found")
    });
});

client.on("error", function (err) {
    console.log("Redis error: " + err);
});

io.on("connection", function(socket) {
    chat.init(socket);
});
chat.getRooms().forEach(function(room) {
    var endpoint = io.of(room.URI).on("connection", function(socket) {
        chat.respond(socket, endpoint, room, client);
    });
});

server.listen(config.get("server.port"), config.get("server.host"), function() {
    return console.info("Server started on http://%s:%d in %s mode", server.address().address, server.address().port, app.settings.env);
});

process.on('message', function(msg) {
    // PM2 Graceful reload
    if (msg === 'shutdown') {
        chat.close(io);

        setTimeout(function() {
            process.exit(0);
        }, 2000);
    }
});
process.on('exit', function(code) {
    chat.close(io);
}); at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
