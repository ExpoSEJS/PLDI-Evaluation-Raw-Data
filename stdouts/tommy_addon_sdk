/root/Targets/tommy_addon_sdk
└─┬ tommy_addon_sdk@0.4.1 
  ├─┬ archiver@1.3.0 
  │ ├─┬ archiver-utils@1.3.0 
  │ │ ├── graceful-fs@4.1.11 
  │ │ ├── lazystream@1.0.0 
  │ │ └─┬ normalize-path@2.1.1 
  │ │   └── remove-trailing-separator@1.1.0 
  │ ├── async@2.5.0 
  │ ├── buffer-crc32@0.2.13 
  │ ├─┬ glob@7.1.2 
  │ │ ├── fs.realpath@1.0.0 
  │ │ ├─┬ inflight@1.0.6 
  │ │ │ └── wrappy@1.0.2 
  │ │ ├── inherits@2.0.3 
  │ │ ├─┬ minimatch@3.0.4 
  │ │ │ └─┬ brace-expansion@1.1.8 
  │ │ │   ├── balanced-match@1.0.0 
  │ │ │   └── concat-map@0.0.1 
  │ │ ├── once@1.4.0 
  │ │ └── path-is-absolute@1.0.1 
  │ ├── lodash@4.17.4 
  │ ├─┬ readable-stream@2.3.3 
  │ │ ├── core-util-is@1.0.2 
  │ │ ├── isarray@1.0.0 
  │ │ ├── process-nextick-args@1.0.7 
  │ │ ├── string_decoder@1.0.3 
  │ │ └── util-deprecate@1.0.2 
  │ ├─┬ tar-stream@1.5.4 
  │ │ ├── bl@1.2.1 
  │ │ ├── end-of-stream@1.4.0 
  │ │ └── xtend@4.0.1 
  │ ├── walkdir@0.0.11 
  │ └─┬ zip-stream@1.2.0 
  │   └─┬ compress-commons@1.2.0 
  │     └─┬ crc32-stream@2.0.0 
  │       └── crc@3.4.4 
  ├── ejs@2.5.7 
  ├─┬ express@4.15.4 
  │ ├─┬ accepts@1.3.4 
  │ │ └── negotiator@0.6.1 
  │ ├── array-flatten@1.1.1 
  │ ├── content-disposition@0.5.2 
  │ ├── content-type@1.0.4 
  │ ├── cookie@0.3.1 
  │ ├── cookie-signature@1.0.6 
  │ ├─┬ debug@2.6.8 
  │ │ └── ms@2.0.0 
  │ ├── depd@1.1.1 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├─┬ finalhandler@1.0.5 
  │ │ └── unpipe@1.0.0 
  │ ├── fresh@0.5.0 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@1.1.5 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.4.0 
  │ ├── qs@6.5.0 
  │ ├── range-parser@1.2.0 
  │ ├─┬ send@0.15.4 
  │ │ ├── destroy@1.0.4 
  │ │ ├── http-errors@1.6.2 
  │ │ └── mime@1.3.4 
  │ ├── serve-static@1.12.4 
  │ ├── setprototypeof@1.0.3 
  │ ├── statuses@1.3.1 
  │ ├─┬ type-is@1.6.15 
  │ │ └── media-typer@0.3.0 
  │ ├── utils-merge@1.0.0 
  │ └── vary@1.1.1 
  ├─┬ js-yaml@3.10.0 
  │ ├─┬ argparse@1.0.9 
  │ │ └── sprintf-js@1.0.3 
  │ └── esprima@4.0.0 
  └─┬ request@2.82.0 
    ├── aws-sign2@0.7.0 
    ├── aws4@1.6.0 
    ├── caseless@0.12.0 
    ├─┬ combined-stream@1.0.5 
    │ └── delayed-stream@1.0.0 
    ├── extend@3.0.1 
    ├── forever-agent@0.6.1 
    ├─┬ form-data@2.3.1 
    │ └── asynckit@0.4.0 
    ├─┬ har-validator@5.0.3 
    │ ├─┬ ajv@5.2.2 
    │ │ ├── co@4.6.0 
    │ │ ├── fast-deep-equal@1.0.0 
    │ │ ├── json-schema-traverse@0.3.1 
    │ │ └─┬ json-stable-stringify@1.0.1 
    │ │   └── jsonify@0.0.0 
    │ └── har-schema@2.0.0 
    ├─┬ hawk@6.0.2 
    │ ├── boom@4.3.1 
    │ ├─┬ cryptiles@3.1.2 
    │ │ └── boom@5.2.0 
    │ ├── hoek@4.2.0 
    │ └── sntp@2.0.2 
    ├─┬ http-signature@1.2.0 
    │ ├── assert-plus@1.0.0 
    │ ├─┬ jsprim@1.4.1 
    │ │ ├── extsprintf@1.3.0 
    │ │ ├── json-schema@0.2.3 
    │ │ └── verror@1.10.0 
    │ └─┬ sshpk@1.13.1 
    │   ├── asn1@0.2.3 
    │   ├── bcrypt-pbkdf@1.0.1 
    │   ├── dashdash@1.14.1 
    │   ├── ecc-jsbn@0.1.1 
    │   ├── getpass@0.1.7 
    │   ├── jsbn@0.1.1 
    │   └── tweetnacl@0.14.5 
    ├── is-typedarray@1.0.0 
    ├── isstream@0.1.2 
    ├── json-stringify-safe@5.0.1 
    ├─┬ mime-types@2.1.17 
    │ └── mime-db@1.30.0 
    ├── oauth-sign@0.8.2 
    ├── performance-now@2.1.0 
    ├── qs@6.5.1 
    ├── safe-buffer@5.1.1 
    ├── stringstream@0.0.5 
    ├─┬ tough-cookie@2.3.2 
    │ └── punycode@1.4.1 
    ├── tunnel-agent@0.6.0 
    └── uuid@3.1.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/tommy_addon_sdk/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0279 took 3.4794s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: The keyword 'package' is reserved (48:6) on program var express = require('express'),
  fs = require('fs'),
  yaml = require('js-yaml'),
  path = require('path'),
  url = require('url'),
  request = require('request'),
  config = loadConfig('config.json'),
  app = express();

app.set('port', 4000);
app.set('view engine', 'ejs');
app.use(express.static('public'));
app.use(express.static('./'));

app.get('/', function(req, res) {
  res.render('index', {
    localAddons: readLocalAddons(),
    config: config,
    url: getSdkUrl()
  });
});

app.get('/addons', function(req, res) {
  res.send(readLocalAddons());
});

app.get('/addons/:package/:version', function(req, res) {
  res.send(readLocalAddon(req.params.package, req.params.version));
});

app.get('/addons/:package/versions/:version/files/*', function(req, res) {
  res.sendFile(getLocalAddonFilePath(req.params.package, req.params.version, req.params['0']));
});

app.post('/addon/archive/:package/:version', function(req, res) {
  createAddonArchive(req.params.package, req.params.version, function(err, archivePath) {
    console.log('Created archive', archivePath);
    if (err) {
      res.status(500).send(err);
    }
    else {
      res.status(200).send(archivePath);
    }
  });
});

app.post('/addon/sandbox/upload/:package/:version', function(req, res) {
  var package = req.params.package,
    version = req.params.version;
  createAddonArchive(package, version, function(err, archivePath) {
    console.log('Created archive', archivePath);
    createAddon(config.apiSandboxEndpoint, 'upload', package, version, archivePath, function(err, json) {
      console.log('Uploaded archive', err, json);
      if (err) {
        res.status(500).send(err);
      }
      else {
        res.send(json);
      }
    });
  });
});

app.post('/addon/store/submit/:package/:version', function(req, res) {
  var package = req.params.package,
    version = req.params.version;
  createAddonArchive(package, version, function(err, archivePath) {
    console.log('Created archive', archivePath);
    createAddon(config.apiEndpoint, 'submit', package, version, archivePath, function(err, json) {
      console.log('Uploaded archive', err, json);
      if (err) {
        res.status(500).send(err);
      }
      else {
        res.send(json);
      }
    });
  });
});

app.listen(app.get('port'), function() {
  console.log('Server listening on port', app.get('port'));
});

//
/// Helpers

function loadConfig(filepath) {
  return JSON.parse(
    fs.readFileSync(filepath).toString().replace( //
      new RegExp("\\/\\*(.|\\r|\\n)*?\\*\\/", "g"),
      "" // strip out comments
    )
  );
}

function createAddon(host, action, package, version, archivePath, callback) {
  request.post({
    url: host + '/v1/addons/' + action + '?api_key=' + config.apiKey,
    formData: {
      package: package,
      version: version,
      archive: fs.createReadStream(archivePath) }
  }, function(err, httpResponse, body) {
    if (!err && httpResponse.statusCode == 201) {
      callback(null, JSON.parse(body));
    }
    else {
      callback(err || 'Upload failed', null);
    }
  });
}

function readLocalAddonVersions() {
  var addons = {}
  var packages = fs.readdirSync(path.join(__dirname, 'addons'));
  for (var i = 0; i < packages.length; i++) {
    addons[packages[i]] = fs.readdirSync(path.join(__dirname, 'addons', packages[i]))
  }
  return addons;
}

function getLocalAddonFilePath(package, version, file) {
  return path.join(__dirname, 'addons', package, version, file);
}

function getSdkUrl() {
  return 'http://localhost:' + app.get('port');
  // url.resolve();
}

function readLocalAddon(package, version) {
  var addon =  yaml.safeLoad(fs.readFileSync(getLocalAddonFilePath(package, version, 'manifest.yml'), 'utf8'));
  var base = '/addons/' + addon.package + '/versions/' + addon.version + '/files/';
  addon.url = url.resolve(getSdkUrl(), base);
  addon.icon_url =  url.resolve(addon.url, 'icon.png'); //path + '/icon.png';
  addon.local = true;
  if (addon.views) {
    for (var i = 0; i < addon.views.length; i++) {
      var view = addon.views[i];
      view.url = url.resolve(addon.url, view.file);
      if (view.assets) {
        for (var x = 0; x < view.assets.length; x++) {
          var asset = view.assets[x];
          asset.url = url.resolve(addon.url, asset.file);
        }
      }
    }
  }
  return addon;
}

function readLocalAddons() {
  var addons = [];
  var data = readLocalAddonVersions();
  for (var package in data) {
    var versions = data[package];
    for (var i = 0; i < versions.length; i++) {
      var manifest = readLocalAddon(package, versions[i]);
      // console.log(manifest);
      addons.push(manifest);
    }
  }
  return addons;
}

function createAddonArchive(package, version, callback) {
  var archivePath = path.join(__dirname, 'archives', package + '-' + version + '.zip'),
    outStream = fs.createWriteStream(archivePath),
    archiver = require('archiver'),
    archive = archiver('zip');

  outStream.on('finish', function() {
    if (callback)
      callback(null, archivePath);
  });

  archive.on('error', function(err) {
    if (callback)
      callback(err, null);
    callback = null;
  });

  archive.pipe(outStream);
  archive.directory(path.join(__dirname, 'addons', package, version), '/')
  archive.finalize();
}
 at SyntaxError: The keyword 'package' is reserved (48:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$3.parseIdent (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2182:14)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:41:34)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
    at Parser.pp$3.parseFunctionBody (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2105:24)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
