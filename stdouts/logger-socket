/root/Targets/logger-socket
└─┬ logger-socket@0.1.1 
  ├── async@1.5.2 
  ├─┬ express@4.16.1 
  │ ├─┬ accepts@1.3.4 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ └── negotiator@0.6.1 
  │ ├── array-flatten@1.1.1 
  │ ├─┬ body-parser@1.18.2 
  │ │ ├── bytes@3.0.0 
  │ │ ├─┬ http-errors@1.6.2 
  │ │ │ ├── inherits@2.0.3 
  │ │ │ └── setprototypeof@1.0.3 
  │ │ ├── iconv-lite@0.4.19 
  │ │ └── raw-body@2.3.2 
  │ ├── content-disposition@0.5.2 
  │ ├── content-type@1.0.4 
  │ ├── cookie@0.3.1 
  │ ├── cookie-signature@1.0.6 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├── depd@1.1.1 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├─┬ finalhandler@1.1.0 
  │ │ └── unpipe@1.0.0 
  │ ├── fresh@0.5.2 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@2.0.2 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.5.2 
  │ ├── qs@6.5.1 
  │ ├── range-parser@1.2.0 
  │ ├── safe-buffer@5.1.1 
  │ ├─┬ send@0.16.1 
  │ │ ├── destroy@1.0.4 
  │ │ └── mime@1.4.1 
  │ ├── serve-static@1.13.1 
  │ ├── setprototypeof@1.1.0 
  │ ├── statuses@1.3.1 
  │ ├─┬ type-is@1.6.15 
  │ │ └── media-typer@0.3.0 
  │ ├── utils-merge@1.0.1 
  │ └── vary@1.1.2 
  ├── opener@1.4.3 
  └─┬ socket.io@1.7.4 
    ├─┬ debug@2.3.3 
    │ └── ms@0.7.2 
    ├─┬ engine.io@1.8.4 
    │ ├── accepts@1.3.3 
    │ ├── base64id@1.0.0 
    │ ├─┬ debug@2.3.3 
    │ │ └── ms@0.7.2 
    │ ├─┬ engine.io-parser@1.3.2 
    │ │ ├── after@0.8.2 
    │ │ ├── arraybuffer.slice@0.0.6 
    │ │ ├── base64-arraybuffer@0.1.5 
    │ │ ├── blob@0.0.4 
    │ │ └── wtf-8@1.0.0 
    │ └─┬ ws@1.1.4 
    │   ├── options@0.0.6 
    │   └── ultron@1.0.2 
    ├─┬ has-binary@0.1.7 
    │ └── isarray@0.0.1 
    ├── object-assign@4.1.0 
    ├─┬ socket.io-adapter@0.5.0 
    │ └─┬ debug@2.3.3 
    │   └── ms@0.7.2 
    ├─┬ socket.io-client@1.7.4 
    │ ├── backo2@1.0.2 
    │ ├── component-bind@1.0.0 
    │ ├── component-emitter@1.2.1 
    │ ├─┬ debug@2.3.3 
    │ │ └── ms@0.7.2 
    │ ├─┬ engine.io-client@1.8.4 
    │ │ ├── component-emitter@1.2.1 
    │ │ ├── component-inherit@0.0.3 
    │ │ ├─┬ debug@2.3.3 
    │ │ │ └── ms@0.7.2 
    │ │ ├── has-cors@1.1.0 
    │ │ ├── parsejson@0.0.3 
    │ │ ├── parseqs@0.0.5 
    │ │ ├── ws@1.1.2 
    │ │ ├── xmlhttprequest-ssl@1.5.3 
    │ │ └── yeast@0.1.2 
    │ ├── indexof@0.0.1 
    │ ├── object-component@0.0.3 
    │ ├─┬ parseuri@0.0.5 
    │ │ └─┬ better-assert@1.0.2 
    │ │   └── callsite@1.0.0 
    │ └── to-array@0.1.4 
    └─┬ socket.io-parser@2.3.1 
      ├── component-emitter@1.1.2 
      ├─┬ debug@2.2.0 
      │ └── ms@0.7.1 
      └── json3@3.3.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/logger-socket/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0667 took 4.3994s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var filename = "./console.log";

var spawn = require('child_process').spawn;
var async = require('async');
var fs = require('fs');
var express = require('express');
var app = express();
var server = require('http').createServer(app);
var io = require('socket.io')(server);
var opener = require('opener');
var port = process.env.PORT || 3003;

var os=require('os');
var ifaces=os.networkInterfaces();
var ipAddress = null;

function getIp(details){
    if (details.family === 'IPv4') {
      ipAddress = details.address;
    }
}

for (var dev in ifaces) {
    if(dev !== 'eth0' && dev !== 'wlan0') {
        continue;
    }
    ifaces[dev].forEach(getIp);
}

console.log('IP: '+ipAddress);

server.listen(port, function () {
  console.log('Server listening at port %d', port);
  console.log('Append this code in the client:');
  console.log('<script id="logger" src="http://'+ipAddress+':3003/console-log.js"></script>');
  console.log('Opening http://localhost:3003 to see the console log');
});

opener('http://localhost:' + port);

app.use(express.static(__dirname + '/public/'));

var connections = {};
var logReaders = {};
var readers = {};

io.on('connection', function (socket) {

    console.log('New connection: ', socket.id);

    if (!fs.existsSync('./logs')){
        fs.mkdirSync('./logs');
    }

    //logData = { clientId: '23424sdfsdfs4', message: 'abcdef'}
    socket.on('log', function (logData) {
        if (!fs.existsSync('./logs/' + logData.clientId)){
            fs.mkdirSync('./logs/' + logData.clientId);
        }

        var filename = './logs/' + logData.clientId + '/console.log';
        fs.appendFile(filename, logData.message + '\n');

    });

    socket.on('register', function(value) {
        console.log('Register:', value);
        if (value.type === 'reader') {
            readers[socket.id] = socket;
        }
        if (value.type === 'writer') {
            if (!fs.existsSync('./logs/' + value.clientId)){
                fs.mkdirSync('./logs/' + value.clientId);
            }
            var filename = './logs/' + value.clientId + '/console.log';
            fs.appendFile(filename, new Date() + 'Start logging...\n');
            connections[socket.id] = value.clientId;
            for (var socketId in readers) {
                console.log('Emit new panel');
                readers[socketId].emit('newPanel', {
                    host: 'localhost',
                    port: port,
                    path: value.clientId,
                    file: 'console.log'
                });
                readers[socketId].newPanelNotified = true;
            }
        }
    });

    socket.on('checkfile', function (data) {
        console.log('Checking file: ', data);
        var filename = './logs/' + (data.path ?  data.path + '/' : '') + data.file;
        fs.exists(filename, function(exists) {
            if (exists) {
                socket.emit('ready', filename);
            } else {
                socket.emit('logger_error', 'FILE_NOT_FOUND');
            }
        });
    });

    socket.on('start', function (filename) {
        console.log('Start: ', filename);
        var tailProcess = spawn('tail', ['-f', filename]);
        tailProcess.stdout.on('data', function (data) {
          socket.emit('data', ''+data);
        });
        logReaders[socket.id] = tailProcess;
    });

    socket.on('pause', function () {
        console.log('Killing tail process');
        var tailProcess = logReaders[socket.id];
        if (tailProcess) {
            tailProcess.kill();
            tailProcess = null;
        }
    });

    socket.on('disconnect', function () {
        console.log('Disconnect');
        var dir = connections[socket.id];
        //Delete folder
        if (dir) {
            console.log('Remove file and notify');

            if (!fs.existsSync('./logs/' + dir + '/console.log')){
                fs.unlinkSync('./logs/' + dir + '/console.log');
                fs.rmdir(dir);
            }

            for (var socketId in readers) {
                console.log('Emit remove panel');
                readers[socketId].emit('removePanel', {
                    host: 'localhost',
                    port: port,
                    path: dir,
                    file: 'console.log'
                });
            }
        }
        var tailProcess = logReaders[socket.id];
        if (tailProcess) {
            console.log('Killing tail process');
            tailProcess.kill();
            tailProcess = null;
            delete logReaders[socket.id];
        }

        if (readers[socket.id]) {
            delete readers[socket.id];
        }

    });

});

 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
