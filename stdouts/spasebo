/root/Targets/spasebo
└── spasebo@0.0.6 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/spasebo/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 42% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0477 took 2.9347s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: 'return' outside of function (1:78) on program return
process.on('uncaughtException', function (e) {
	var s = e.stack
	console.log(s)
	console.log(JSON.stringify(e))
	process.exit()
})

Error.prepareStackTrace = function(s, t) {
//	var fs = require('fs')
	var W = 70 // width of output 'window'
	var frame = ''; while (frame.length < W + 4) frame += '-' // make frame line
	R = []
	for (var i = t.length - 1; i >= 0; i--) { // t v8 is list of calls
		var fn = t[i].getFileName()
		if (fn == 'module.js') continue // it is useless for us anyway
		if (fn == 'node.js') continue
		var q =  (i+1) +') at ' + fn +':'+ t[i].getLineNumber() + ':' + t[i].getColumnNumber() 	+ ', ' 
		var f = t[i].getFunctionName()
		if (f == null) q += '(main program body)'
		else q += 'function ' + f + '()'
		R.push(q)
	}
	R.push(frame)
	var L0 = t[0].getLineNumber() // prepare display of source code
	if (fs.existsSync(fn)) {
		// we need to load from disc, no way to get source from v8
		var file = fs.readFileSync(fn)
		if (file.length > 0) {
			var TXT = file.toString().replace(/\r/g, '').split('\n')
			console.log(L0)
			TXT = TXT.slice(L0-2, L0+1)
			for (var l = 0; l < TXT.length; l++) {
				TXT[l] = TXT[l].replace(/\t/g, '   ')
				R.push((l+L0-1) + ' ' + TXT[l])
				if (l == L0) { // line that has error
					var tab = ''
					while (tab.length < t[0].getColumnNumber()+2
						+l.toString().length) tab += ' '
					s = s.toString().replace(/ReferenceError: /g, '')
					R.push(tab + '^ ' + s)
					// s - is error message provided by v8
				}
			}
		}
	}
	R.unshift(frame), R.push(frame)
	var L = []
	for (var i = 0; i < R.length; i++) {  // break lines that are wider than our window
		if (R[i][0] != '-' && R[i].length > W) L.push(R[i].slice(0, W)), L.push('  ' + R[i].slice(W))
		else L.push(R[i])
	}
	W += 9
	for (var i = 0; i < L.length; i++) { // draw lieft and right of window frame
		if (L[i][0] != '-') L[i] = '  ' + L[i]
		L[i] = '    |' + L[i]
		while (L[i].length < W) L[i] += ' '
		L[i] += '|'
	}
	return L.join('\n');
} at SyntaxError: 'return' outside of function (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$1.parseReturnStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:831:12)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:699:34)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
    at Parser.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:516:17)
    at Object.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:3098:39)
    at convert (/root/ExpoSE/lib/Tropigate/bin/main.js:50:18)
    at SymbolicExecution.instrumentCodePre (/root/ExpoSE/Analyser/bin/bundle.js:1474:24)
    at Object.instrumentCode (/root/ExpoSE/Analyser/node_modules/jalangi2/src/js/instrument/esnstrument.js:1928:37)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/spasebo/node_modules/spasebo/spasebo.js. Coverage (Term): 51% Coverage (LOC): 55%
*- File /root/ExpoSE/Analyser/config.js. Coverage (Term): 98% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
