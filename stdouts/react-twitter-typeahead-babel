/root/Targets/react-twitter-typeahead-babel
└─┬ react-twitter-typeahead-babel@1.1.6 
  ├── extend@3.0.1 
  ├─┬ handlebars@4.0.10 
  │ ├── async@1.5.2 
  │ ├─┬ optimist@0.6.1 
  │ │ ├── minimist@0.0.10 
  │ │ └── wordwrap@0.0.3 
  │ ├─┬ source-map@0.4.4 
  │ │ └── amdefine@1.0.1 
  │ └─┬ uglify-js@2.8.29 
  │   ├── source-map@0.5.7 
  │   ├── uglify-to-browserify@1.0.2 
  │   └─┬ yargs@3.10.0 
  │     ├── camelcase@1.2.1 
  │     ├─┬ cliui@2.1.0 
  │     │ ├─┬ center-align@0.1.3 
  │     │ │ ├─┬ align-text@0.1.4 
  │     │ │ │ ├─┬ kind-of@3.2.2 
  │     │ │ │ │ └── is-buffer@1.1.5 
  │     │ │ │ ├── longest@1.0.1 
  │     │ │ │ └── repeat-string@1.6.1 
  │     │ │ └── lazy-cache@1.0.4 
  │     │ ├── right-align@0.1.3 
  │     │ └── wordwrap@0.0.2 
  │     ├── decamelize@1.2.0 
  │     └── window-size@0.1.0 
  ├── jquery@2.2.4 
  └── typeahead.js@0.11.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/react-twitter-typeahead-babel/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.066 took 5.0791s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (100:6) on program var React = require('react'),
    Bloodhound = require('typeahead.js/dist/bloodhound'),
    $ = require('jquery'),
    Typeahead = require('typeahead.js/dist/typeahead.jquery'),
    extend = require("extend"),
    ReactTypeahead;

ReactTypeahead = React.createClass({displayName: "ReactTypeahead",
  /**
  * 'proptypes' property
  * Declares all the properties that can be used to configure this component
  */
  propTypes: {
    bloodhound: React.PropTypes.object,
    typeahead: React.PropTypes.object,
    datasource: React.PropTypes.object,
    placeholder: React.PropTypes.string,
    inputClassName: React.PropTypes.string
  },

  /**
  * 'getDefaultProps' method
  * Sets default properties on the component
  */
  getDefaultProps: function() {
    return {
      bloodhound: {},
      typeahead: {},
      datasource: {},
      placeholder: '',
      inputClassName: 'typeahead'
    }
  },

  /**
  * 'initOptions' method
  * This method sets up the typeahead with initial config parameters. The first set is default
  * and the other set is defined by the
  */
  initOptions: function () {
    var defaultMinLength = 2, config = {};

    var defaults = {
      bloodhound: {
        datumTokenizer: Bloodhound.tokenizers.whitespace,
        queryTokenizer: Bloodhound.tokenizers.whitespace
      },
      typeahead: {
        minLength: defaultMinLength,
        hint: true,
        highlight: true
      },
      datasource: {
        displayProperty: 'value',
        queryStr: '%QUERY'
      }
    };

    config.bloodhound = extend(true, {}, defaults.bloodhound, this.props.bloodhound);
    config.typeahead = extend(true, {}, defaults.typeahead, this.props.typeahead);
    config.datasource = extend(true, {}, defaults.datasource, this.props.datasource);

    return config;
  },

  loadScript: function(scriptURL){
    script = document.createElement('script');
    script.src = scriptURL;
    script.type = 'text/javascript';
    script.async = true;
    document.body.appendChild(script);
  },

  /**
  * 'getInitialState' method
  * We want to make sure that the jquery and typeahead libraries are loaded into the DOM
  */
  getInitialState: function(){
    return {data: []};
  },
  /**
  * 'componentDidMount' method
  * Initializes react with the typeahead component.
  */
  componentDidMount: function () {
    var self = this,
    options = this.initOptions();

    var remoteCall = new Bloodhound(options.bloodhound);
    options.datasource.source = remoteCall;
    var typeaheadInput = React.findDOMNode(self);
    if(typeaheadInput)
    this.typeahead = $(typeaheadInput).typeahead(options.typeahead, options.datasource);

    this.bindCustomEvents();
  },

  render: function () {
    return (
      <input className={this.props.inputClassName} type="text" placeholder={this.props.placeHolder} />
    );
  },

  bindCustomEvents: function(){
    var customEvents = this.props.customEvents;

    if (!customEvents)
    return;

    for (var event in customEvents)
    this.typeahead.on(event, customEvents[event]);
  }
});

module.exports = ReactTypeahead;
 at SyntaxError: Unexpected token (100:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseParenAndDistinguishExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1861:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
