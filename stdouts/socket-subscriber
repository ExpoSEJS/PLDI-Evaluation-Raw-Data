
> websocket@1.0.24 install /root/Targets/socket-subscriber/node_modules/websocket
> (node-gyp rebuild 2> builderror.log) || (exit 0)

make: Entering directory '/root/Targets/socket-subscriber/node_modules/websocket/build'
  CXX(target) Release/obj.target/bufferutil/src/bufferutil.o
  SOLINK_MODULE(target) Release/obj.target/bufferutil.node
  COPY Release/bufferutil.node
  CXX(target) Release/obj.target/validation/src/validation.o
  SOLINK_MODULE(target) Release/obj.target/validation.node
  COPY Release/validation.node
make: Leaving directory '/root/Targets/socket-subscriber/node_modules/websocket/build'
/root/Targets/socket-subscriber
└─┬ socket-subscriber@0.1.4 
  ├─┬ sockjs-client@1.1.4 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├─┬ eventsource@0.1.6 
  │ │ └─┬ original@1.0.0 
  │ │   └─┬ url-parse@1.0.5 
  │ │     └── querystringify@0.0.4 
  │ ├─┬ faye-websocket@0.11.1 
  │ │ └─┬ websocket-driver@0.7.0 
  │ │   ├── http-parser-js@0.4.9 
  │ │   └── websocket-extensions@0.1.2 
  │ ├── inherits@2.0.3 
  │ ├── json3@3.3.2 
  │ └─┬ url-parse@1.1.9 
  │   ├── querystringify@1.0.0 
  │   └── requires-port@1.0.0 
  └─┬ stompjs@2.3.3 
    └─┬ websocket@1.0.24 
      ├── nan@2.7.0 
      ├─┬ typedarray-to-buffer@3.1.2 
      │ └── is-typedarray@1.0.0 
      └── yaeti@0.0.6 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/socket-subscriber/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.043 took 5.6283s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '@' (17:0) on program 
import {TIMER_ID, ROOM} from './constants/Config'
import GeneralSocketClient from './GeneralSocketClient'
import Observer from './events/Observer'
import Idle from './events/Idle'
import inherits from './utils/inherits'
import {CONNECT, CLOSE} from './constants/EventType'
import Channel from './Channel'
import * as random from './utils/random'

function buildRoomId(type, id) {

  return `${ROOM}.${type}.${id}`
}


@Idle()
class SocketSubscriber {

  constructor(host, {debug = false, retryTime = 10000, retryCount = -1, idleTime = 600000, incomingHeartbeat = 1000} = {}) {
    Observer.call(this);

    this._client = new GeneralSocketClient(host, {
      retryTime:retryTime,
      retryCount:retryCount,
      incomingHeartbeat:incomingHeartbeat
    });
    this._connectPromise = this._client.connect();
    this._client.on(CONNECT, ::this._onConnect);
    this._client.on(CLOSE, ::this._onClose);
    this.debug(debug);
    this.id = random.string();
    this._connectPromise.then(()=> this._countIdle(idleTime));
  }

  _onConnect(evt) {

    this.trigger(CONNECT, null, {headers:evt.headers});
  }

  _onClose() {

    this.trigger(CLOSE);
  }

  debug(enabled) {
    return this._client.debug(enabled);
  }

  ready() {

    return this._connectPromise;
  }

  @Idle.reset
  sendRoom(type, id, data, headers, ...args) {
    let roomId = buildRoomId(type, id);
    var label = null;

    if (typeof data === 'string') {
      label = data;
      data = headers || {};
      headers = args[0] || {};
    }

    this.ready().then(()=> this._client.send(roomId, data, label, headers));
  }

  room(type, id) {
    let roomId = buildRoomId(type, id);
    let channel = Channel.getInstance(this, roomId);

    this.ready().then(()=> this._client.subscribe(roomId));
    return channel;
  }

  exitRoom(type, id) {
    let roomId = buildRoomId(type, id);
    this.ready().then(()=> {
      this._client.unsubscribe(roomId)
      Channel.clear(this, roomId);
    });
  }

  date() {
    let id = TIMER_ID;
    let channel = Channel.getInstance(this, id);

    this.ready().then(()=> this._client.subscribe(id));
    return channel;
  }

  getSockJSSessionId() {

    return this._client.getSessionId();
  }

}

inherits(SocketSubscriber, Observer);

window.SocketSubscriber = SocketSubscriber;

module.export = SocketSubscriber;

 at SyntaxError: Unexpected character '@' (17:0)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:980:18)
    at Parser.pp$3.parseFunctionBody (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2105:24)
    at Parser.parseFunctionBody (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:14:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
