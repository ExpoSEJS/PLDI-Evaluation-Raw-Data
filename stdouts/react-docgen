/root/Targets/react-docgen
└─┬ react-docgen@2.18.0 
  ├─┬ async@2.5.0 
  │ └── lodash@4.17.4 
  ├─┬ babel-runtime@6.26.0 
  │ ├── core-js@2.5.1 
  │ └── regenerator-runtime@0.11.0 
  ├── babylon@5.8.38 
  ├── commander@2.11.0 
  ├─┬ doctrine@2.0.0 
  │ ├── esutils@2.0.2 
  │ └── isarray@1.0.0 
  ├─┬ node-dir@0.1.17 
  │ └─┬ minimatch@3.0.4 
  │   └─┬ brace-expansion@1.1.8 
  │     ├── balanced-match@1.0.0 
  │     └── concat-map@0.0.1 
  └─┬ recast@0.12.6 
    ├── ast-types@0.9.11 
    ├── esprima@4.0.0 
    ├── private@0.1.7 
    └── source-map@0.5.7 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/react-docgen/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 43% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","defineProperties","Date","create","join","every","apply","lastIndexOf"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0418 took 11.9847s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:82) on program var assert = require("assert");
var types = require("./types");
var n = types.namedTypes;
var b = types.builders;
var isObject = types.builtInTypes.object;
var isArray = types.builtInTypes.array;
var isFunction = types.builtInTypes.function;
var Patcher = require("./patcher").Patcher;
var normalizeOptions = require("./options").normalize;
var fromString = require("./lines").fromString;
var attachComments = require("./comments").attach;
var util = require("./util");
var Map = global.Map || require("core-js/es6/map");

exports.parse = function parse(source, options) {
  options = normalizeOptions(options);

  var lines = fromString(source, options);

  var sourceWithoutTabs = lines.toString({
    tabWidth: options.tabWidth,
    reuseWhitespace: false,
    useTabs: false
  });

  var comments = [];
  var program = options.parser.parse(sourceWithoutTabs, {
    jsx: true,
    loc: true,
    locations: true,
    range: options.range,
    comment: true,
    onComment: comments,
    tolerant: options.tolerant,
    ecmaVersion: 6,
    sourceType: 'module'
  });

  // If the source was empty, some parsers give loc.{start,end}.line
  // values of 0, instead of the minimum of 1.
  util.fixFaultyLocations(program, lines);

  program.loc = program.loc || {
    start: lines.firstPos(),
    end: lines.lastPos()
  };

  program.loc.lines = lines;
  program.loc.indent = 0;

  // Expand the Program node's .loc to include all comments, since
  // typically its .loc.start and .loc.end will coincide with those of the
  // first and last statements, respectively, excluding any comments that
  // fall outside that region.
  var trueProgramLoc = util.getTrueLoc(program, lines);
  program.loc.start = trueProgramLoc.start;
  program.loc.end = trueProgramLoc.end;

  if (program.comments) {
    comments = program.comments;
    delete program.comments;
  }

  // In order to ensure we reprint leading and trailing program comments,
  // wrap the original Program node with a File node.
  var file = program;
  if (file.type === "Program") {
    var file = b.file(program, options.sourceFileName || null);
    file.loc = {
      lines: lines,
      indent: 0,
      start: lines.firstPos(),
      end: lines.lastPos()
    };
  } else if (file.type === "File") {
    program = file.program;
  }

  // Passing file.program here instead of just file means that initial
  // comments will be attached to program.body[0] instead of program.
  attachComments(
    comments,
    program.body.length ? file.program : file,
    lines
  );

  // Return a copy of the original AST so that any changes made may be
  // compared to the original.
  return new TreeCopier(lines).copy(file);
};

function TreeCopier(lines) {
  assert.ok(this instanceof TreeCopier);
  this.lines = lines;
  this.indent = 0;
  this.seen = new Map;
}

var TCp = TreeCopier.prototype;

TCp.copy = function(node) {
  if (this.seen.has(node)) {
    return this.seen.get(node);
  }

  if (isArray.check(node)) {
    var copy = new Array(node.length);
    this.seen.set(node, copy);
    node.forEach(function (item, i) {
      copy[i] = this.copy(item);
    }, this);
    return copy;
  }

  if (!isObject.check(node)) {
    return node;
  }

  util.fixFaultyLocations(node, this.lines);

  var copy = Object.create(Object.getPrototypeOf(node), {
    original: { // Provide a link from the copy to the original.
      value: node,
      configurable: false,
      enumerable: false,
      writable: true
    }
  });

  this.seen.set(node, copy);

  var loc = node.loc;
  var oldIndent = this.indent;
  var newIndent = oldIndent;

  if (loc) {
    // When node is a comment, we set node.loc.indent to
    // node.loc.start.column so that, when/if we print the comment by
    // itself, we can strip that much whitespace from the left margin of
    // the comment. This only really matters for multiline Block comments,
    // but it doesn't hurt for Line comments.
    if (node.type === "Block" || node.type === "Line" ||
        node.type === "CommentBlock" || node.type === "CommentLine" ||
        this.lines.isPrecededOnlyByWhitespace(loc.start)) {
      newIndent = this.indent = loc.start.column;
    }

    loc.lines = this.lines;
    loc.indent = newIndent;
  }

  var keys = Object.keys(node);
  var keyCount = keys.length;
  for (var i = 0; i < keyCount; ++i) {
    var key = keys[i];
    if (key === "loc") {
      copy[key] = node[key];
    } else if (key === "tokens" &&
               node.type === "File") {
      // Preserve file.tokens (uncopied) in case client code cares about
      // it, even though Recast ignores it when reprinting.
      copy[key] = node[key];
    } else {
      copy[key] = this.copy(node[key]);
    }
  }

  this.indent = oldIndent;

  return copy;
};
 at SyntaxError: Unexpected token (1:82)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/react-docgen/node_modules/react-docgen/dist/main.js. Coverage (Term): 22% Coverage (LOC): 19%
*- File /root/Targets/react-docgen/node_modules/react-docgen/dist/handlers/index.js. Coverage (Term): 12% Coverage (LOC): 9%
*- File /root/Targets/react-docgen/node_modules/react-docgen/dist/handlers/componentDocblockHandler.js. Coverage (Term): 16% Coverage (LOC): 22%
*- File /root/Targets/react-docgen/node_modules/recast/main.js. Coverage (Term): 17% Coverage (LOC): 24%
*- File /root/Targets/react-docgen/node_modules/recast/lib/types.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/react-docgen/node_modules/ast-types/main.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/react-docgen/node_modules/ast-types/fork.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/react-docgen/node_modules/ast-types/def/core.js. Coverage (Term): 92% Coverage (LOC): 79%
*- File /root/Targets/react-docgen/node_modules/ast-types/def/es6.js. Coverage (Term): 100% Coverage (LOC): 100%
*- File /root/Targets/react-docgen/node_modules/ast-types/def/es7.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/react-docgen/node_modules/ast-types/def/mozilla.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/react-docgen/node_modules/ast-types/def/e4x.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/react-docgen/node_modules/ast-types/def/jsx.js. Coverage (Term): 93% Coverage (LOC): 90%
*- File /root/Targets/react-docgen/node_modules/ast-types/def/flow.js. Coverage (Term): 100% Coverage (LOC): 100%
*- File /root/Targets/react-docgen/node_modules/ast-types/def/esprima.js. Coverage (Term): 97% Coverage (LOC): 96%
*- File /root/Targets/react-docgen/node_modules/ast-types/def/babel.js. Coverage (Term): 100% Coverage (LOC): 100%
*- File /root/Targets/react-docgen/node_modules/ast-types/def/babel6.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/react-docgen/node_modules/ast-types/lib/types.js. Coverage (Term): 53% Coverage (LOC): 62%
*- File /root/Targets/react-docgen/node_modules/ast-types/lib/shared.js. Coverage (Term): 57% Coverage (LOC): 73%
*- File /root/Targets/react-docgen/node_modules/ast-types/def/babel6-core.js. Coverage (Term): 98% Coverage (LOC): 97%
*- File /root/Targets/react-docgen/node_modules/ast-types/lib/equiv.js. Coverage (Term): 14% Coverage (LOC): 15%
*- File /root/Targets/react-docgen/node_modules/ast-types/lib/path.js. Coverage (Term): 10% Coverage (LOC): 17%
*- File /root/Targets/react-docgen/node_modules/ast-types/lib/node-path.js. Coverage (Term): 15% Coverage (LOC): 26%
*- File /root/Targets/react-docgen/node_modules/ast-types/lib/scope.js. Coverage (Term): 13% Coverage (LOC): 22%
*- File /root/Targets/react-docgen/node_modules/ast-types/lib/path-visitor.js. Coverage (Term): 13% Coverage (LOC): 20%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
