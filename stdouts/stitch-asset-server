/root/Targets/stitch-asset-server
└─┬ stitch-asset-server@0.2.2 
  ├── chai@0.3.4 
  ├── coffee-script@1.2.0 
  ├─┬ eco@1.1.0-rc-3 
  │ └── strscan@1.0.1 
  ├─┬ fast-detective@0.0.2 
  │ └─┬ burrito@0.2.12 
  │   └── traverse@0.5.2 
  ├── jqueryify@0.0.3 
  ├─┬ optimist@0.2.8 
  │ └── wordwrap@0.0.3 
  ├─┬ stylus@0.22.6 
  │ ├── cssom@0.2.1 
  │ ├── growl@1.1.0 
  │ └── mkdirp@0.0.7 
  ├── uglify-js@1.1.1 
  └── watch@0.4.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/stitch-asset-server/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0349 took 3.1416s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: The keyword 'package' is reserved (91:14) on program (function() {
  var AssetCompiler, CssBundler, Package, fs, md5Namer, path, resolve, util, watch;

  fs = require('fs');

  path = require('path');

  util = require('util');

  resolve = path.resolve;

  CssBundler = require('./css_bundler').CssBundler;

  Package = require('./js_packager').Package;

  md5Namer = require('./file_namer').md5Namer;

  watch = require('./utils').watch;

  AssetCompiler = (function() {

    function AssetCompiler(packages) {
      this.packages = packages;
    }

    AssetCompiler.prototype.create_routes = function(adapter) {
      this._create_route_for(this.packages.js, adapter, Package);
      return this._create_route_for(this.packages.css, adapter, CssBundler);
    };

    AssetCompiler.prototype.watch = function(options, postBuildCallBack) {
      var dirs, watchDirs, _, _ref;
      if (options == null) options = {};
      if (postBuildCallBack == null) postBuildCallBack = null;
      this.compile(options);
      watchDirs = (function() {
        var _ref, _results;
        _ref = this.packages.js;
        _results = [];
        for (_ in _ref) {
          dirs = _ref[_];
          _results.push(dirs.paths.concat(dirs.libs));
        }
        return _results;
      }).call(this);
      _ref = this.packages.css;
      for (_ in _ref) {
        dirs = _ref[_];
        watchDirs.push(dirs);
      }
      return watch(watchDirs, this._createOnWatchChange(options, postBuildCallBack));
    };

    AssetCompiler.prototype.compile = function(options) {
      var manifest, _base, _base2;
      if (options == null) options = {};
      options = Object.create(options);
      options.manifest_name || (options.manifest_name = (_base = this.packages).manifest_name || (_base.manifest_name = 'manifest.mf'));
      options.save_dir || (options.save_dir = (_base2 = this.packages).save_dir || (_base2.save_dir = './build'));
      options.save_dir = path.resolve(options.save_dir);
      options.hash_file_names = options.hash_file_names === void 0 ? true : options.hash_file_names;
      options.minify = options.minify === void 0 ? true : options.minify;
      if (!path.existsSync(options.save_dir)) fs.mkdirSync(options.save_dir);
      manifest = {};
      this._compile(this.packages.js, manifest, Package, options);
      this._compile(this.packages.css, manifest, CssBundler, options);
      return fs.writeFileSync(path.join(options.save_dir, options.manifest_name), util.format('%j', manifest));
    };

    AssetCompiler.prototype._createOnWatchChange = function(options, postBuildCallBack) {
      var compile,
        _this = this;
      compile = function() {
        return _this.compile.apply(_this, arguments);
      };
      return function(file, curr, prev) {
        if (curr && (curr.nlink === 0 || +curr.mtime !== +(prev != null ? prev.mtime : void 0))) {
          console.log("" + file + " changed.  Rebuilding...");
          compile(options);
          return postBuildCallBack && postBuildCallBack();
        }
      };
    };

    AssetCompiler.prototype._create_route_for = function(package_data, adapter, packager) {
      var data, file_name, _results;
      _results = [];
      for (file_name in package_data) {
        data = package_data[file_name];
        _results.push((function(file_name, data) {
          var package;
          package = new packager(data);
          return adapter.route('get', file_name, package);
        })(file_name, data));
      }
      return _results;
    };

    AssetCompiler.prototype._compile = function(package_data, manifest, packager, options) {
      var data, file_data, file_name, hashed_file_name, write_file_path, _results;
      _results = [];
      for (file_name in package_data) {
        data = package_data[file_name];
        file_name = path.basename(file_name);
        file_data = new packager(data).compile(options.minify);
        hashed_file_name = options.hash_file_names ? md5Namer(file_name, file_data) : file_name;
        write_file_path = path.join(options.save_dir, hashed_file_name);
        fs.writeFileSync(write_file_path, file_data);
        console.log("file " + write_file_path + " written");
        _results.push(manifest[file_name] = hashed_file_name);
      }
      return _results;
    };

    return AssetCompiler;

  })();

  module.exports = AssetCompiler;

}).call(this);
 at SyntaxError: The keyword 'package' is reserved (91:14)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$3.parseIdent (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2182:14)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:41:34)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
    at Parser.pp$3.parseFunctionBody (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2105:24)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/stitch-asset-server/node_modules/stitch-asset-server/lib/index.js. Coverage (Term): 51% Coverage (LOC): 50%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
