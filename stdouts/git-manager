/root/Targets/git-manager
└─┬ git-manager@0.0.1 
  ├── async@2.5.0 
  ├─┬ body-parser@1.18.1 
  │ ├── bytes@3.0.0 
  │ ├── content-type@1.0.4 
  │ ├── debug@2.6.8 
  │ ├── depd@1.1.1 
  │ ├─┬ http-errors@1.6.2 
  │ │ └── inherits@2.0.3 
  │ ├── iconv-lite@0.4.19 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── qs@6.5.1 
  │ ├─┬ raw-body@2.3.2 
  │ │ └── unpipe@1.0.0 
  │ └─┬ type-is@1.6.15 
  │   ├── media-typer@0.3.0 
  │   └─┬ mime-types@2.1.17 
  │     └── mime-db@1.30.0 
  ├── colors@1.1.2 
  ├── commander@2.11.0 
  ├─┬ cookie-parser@1.4.3 
  │ ├── cookie@0.3.1 
  │ └── cookie-signature@1.0.6 
  ├─┬ express@4.15.4 
  │ ├─┬ accepts@1.3.4 
  │ │ └── negotiator@0.6.1 
  │ ├── array-flatten@1.1.1 
  │ ├── content-disposition@0.5.2 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├── finalhandler@1.0.5 
  │ ├── fresh@0.5.0 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@1.1.5 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.4.0 
  │ ├── qs@6.5.0 
  │ ├── range-parser@1.2.0 
  │ ├─┬ send@0.15.4 
  │ │ ├── destroy@1.0.4 
  │ │ └── mime@1.3.4 
  │ ├── serve-static@1.12.4 
  │ ├── setprototypeof@1.0.3 
  │ ├── statuses@1.3.1 
  │ ├── utils-merge@1.0.0 
  │ └── vary@1.1.1 
  ├─┬ jade@1.11.0 
  │ ├── character-parser@1.2.1 
  │ ├─┬ clean-css@3.4.28 
  │ │ ├─┬ commander@2.8.1 
  │ │ │ └── graceful-readlink@1.0.1 
  │ │ └─┬ source-map@0.4.4 
  │ │   └── amdefine@1.0.1 
  │ ├── commander@2.6.0 
  │ ├─┬ constantinople@3.0.2 
  │ │ └── acorn@2.7.0 
  │ ├─┬ jstransformer@0.0.2 
  │ │ ├── is-promise@2.1.0 
  │ │ └─┬ promise@6.1.0 
  │ │   └── asap@1.0.0 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ ├─┬ transformers@2.1.0 
  │ │ ├─┬ css@1.0.8 
  │ │ │ ├── css-parse@1.0.4 
  │ │ │ └── css-stringify@1.0.5 
  │ │ ├─┬ promise@2.0.0 
  │ │ │ └── is-promise@1.0.1 
  │ │ └─┬ uglify-js@2.2.5 
  │ │   ├─┬ optimist@0.3.7 
  │ │   │ └── wordwrap@0.0.3 
  │ │   └── source-map@0.1.43 
  │ ├─┬ uglify-js@2.8.29 
  │ │ ├── source-map@0.5.7 
  │ │ ├── uglify-to-browserify@1.0.2 
  │ │ └─┬ yargs@3.10.0 
  │ │   ├── camelcase@1.2.1 
  │ │   ├─┬ cliui@2.1.0 
  │ │   │ ├─┬ center-align@0.1.3 
  │ │   │ │ ├─┬ align-text@0.1.4 
  │ │   │ │ │ ├─┬ kind-of@3.2.2 
  │ │   │ │ │ │ └── is-buffer@1.1.5 
  │ │   │ │ │ ├── longest@1.0.1 
  │ │   │ │ │ └── repeat-string@1.6.1 
  │ │   │ │ └── lazy-cache@1.0.4 
  │ │   │ ├── right-align@0.1.3 
  │ │   │ └── wordwrap@0.0.2 
  │ │   ├── decamelize@1.2.0 
  │ │   └── window-size@0.1.0 
  │ ├── void-elements@2.0.1 
  │ └─┬ with@4.0.3 
  │   ├── acorn@1.2.2 
  │   └── acorn-globals@1.0.9 
  ├── lodash@4.17.4 
  ├─┬ morgan@1.8.2 
  │ ├── basic-auth@1.1.0 
  │ └── on-headers@1.0.1 
  ├─┬ passport@0.3.2 
  │ ├── passport-strategy@1.0.0 
  │ └── pause@0.0.1 
  ├── passport-http@0.3.0 
  ├─┬ serve-favicon@2.4.4 
  │ ├── fresh@0.5.1 
  │ ├── ms@2.0.0 
  │ └── safe-buffer@5.1.1 
  ├─┬ socket.io@1.7.4 
  │ ├─┬ debug@2.3.3 
  │ │ └── ms@0.7.2 
  │ ├─┬ engine.io@1.8.4 
  │ │ ├── accepts@1.3.3 
  │ │ ├── base64id@1.0.0 
  │ │ ├─┬ debug@2.3.3 
  │ │ │ └── ms@0.7.2 
  │ │ ├─┬ engine.io-parser@1.3.2 
  │ │ │ ├── after@0.8.2 
  │ │ │ ├── arraybuffer.slice@0.0.6 
  │ │ │ ├── base64-arraybuffer@0.1.5 
  │ │ │ ├── blob@0.0.4 
  │ │ │ └── wtf-8@1.0.0 
  │ │ └─┬ ws@1.1.4 
  │ │   ├── options@0.0.6 
  │ │   └── ultron@1.0.2 
  │ ├─┬ has-binary@0.1.7 
  │ │ └── isarray@0.0.1 
  │ ├── object-assign@4.1.0 
  │ ├─┬ socket.io-adapter@0.5.0 
  │ │ └─┬ debug@2.3.3 
  │ │   └── ms@0.7.2 
  │ ├─┬ socket.io-client@1.7.4 
  │ │ ├── backo2@1.0.2 
  │ │ ├── component-bind@1.0.0 
  │ │ ├── component-emitter@1.2.1 
  │ │ ├─┬ debug@2.3.3 
  │ │ │ └── ms@0.7.2 
  │ │ ├─┬ engine.io-client@1.8.4 
  │ │ │ ├── component-emitter@1.2.1 
  │ │ │ ├── component-inherit@0.0.3 
  │ │ │ ├─┬ debug@2.3.3 
  │ │ │ │ └── ms@0.7.2 
  │ │ │ ├── has-cors@1.1.0 
  │ │ │ ├── parsejson@0.0.3 
  │ │ │ ├── parseqs@0.0.5 
  │ │ │ ├── ws@1.1.2 
  │ │ │ ├── xmlhttprequest-ssl@1.5.3 
  │ │ │ └── yeast@0.1.2 
  │ │ ├── indexof@0.0.1 
  │ │ ├── object-component@0.0.3 
  │ │ ├─┬ parseuri@0.0.5 
  │ │ │ └─┬ better-assert@1.0.2 
  │ │ │   └── callsite@1.0.0 
  │ │ └── to-array@0.1.4 
  │ └─┬ socket.io-parser@2.3.1 
  │   ├── component-emitter@1.1.2 
  │   ├─┬ debug@2.2.0 
  │   │ └── ms@0.7.1 
  │   └── json3@3.3.2 
  └─┬ winston@2.3.1 
    ├── async@1.0.0 
    ├── colors@1.0.3 
    ├── cycle@1.0.3 
    ├── eyes@0.1.8 
    ├── isstream@0.1.2 
    └── stack-trace@0.0.10 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/git-manager/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0665 took 3.1218s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

const app = require('../app');
const program = require('commander');
const colors = require('colors');
const path = require('path');
const async = require('async');
const fs = require('fs');
const exec = require('child_process').exec;
const spawn = require('child_process').spawn;
const winston = require('winston');

const passport = require('passport');
const AuthStrategy = require('passport-http').DigestStrategy;

const http = require('http').Server(app);
const io = require('socket.io')(http);

const encryption = require('../utils/encryption.js');

const DEFAULT_PORT = 9999;


// Initialization
program
  .version('0.0.1')
  .option('-p, --port <n>', 'listening port for http requests', parseInt)
  .option('-r, --repo [path]', 'repository path')
  .option('-l, --log [path]', 'log file path')
  .option('-u, --username [username]', 'user name for authentication')
  .option('-w, --password [password]', 'password')
  .option('-k, --key [key]', 'a security key to limit access to /pull endpoint')
  .parse(process.argv);


const resolveHome = function(filepath) {
  if (filepath[0] === '~') {
    return path.join(process.env.HOME, filepath.slice(1));
  }
  return filepath;
}


app.locals.port = program.port || DEFAULT_PORT;
app.locals.repo = path.resolve(resolveHome(program.repo || '.'));
app.locals.log = path.resolve(resolveHome(program.log || '~/git-manager.log'));
app.locals.username = program.username || 'admin';
app.locals.password = program.password || 'password';
app.locals.key = program.key || '';

app.locals.io = io;

app.locals.logInfo = function(message){
  app.locals.logger.info(message);

  app.locals.io.to('users').emit('log', {
    type: 'info',
    text: message
  });
}

app.locals.logError = function(message){
  app.locals.logger.error(message);

  app.locals.io.to('users').emit('log', {
    type: 'danger',
    text: message
  });
}

app.locals.logWarn = function(message){
  app.locals.logger.warn(message);

  app.locals.io.to('users').emit('log', {
    type: 'warning',
    text: message
  });
}


app.locals.logSuccess = function(message){
  app.locals.logger.info(message);

  app.locals.io.to('users').emit('log', {
    type: 'success',
    text: message
  });
}





// Authentication
passport.use(new AuthStrategy({ qop: 'auth' },
  function(username, done) {
    if(username !== app.locals.username){
      done('Invalid username or password');
    }
    else{
      done(null, {username: username}, app.locals.password);
    }
  }
));





// Repo Checks
async.waterfall([
  // Check if git is installed
  function(cb){ 
    exec('git', function(error, stdout, stderr){
      if(stderr != ""){
        // console.log(error);
        // console.log(stderr);
        cb('Git is not installed, please install it first');
      }
      else{
        cb(null);
      }
    });
  },

  // Check if "repo" is a git repository
  function(cb){
    fs.stat(app.locals.repo + '/.git', function(err, stats){
      if(err != null){
        cb(app.locals.repo.bold + ' is not a git repository');
      }
      else{
        cb(null);
      }
    });
  }
], function(err, result){
  if(err != null){
    console.log(err.red);
    process.exit(-1);
  }


  // Create logger
  var logger = new (winston.Logger)({
    transports: [
      new (winston.transports.Console)(),
      new (winston.transports.File)({ filename: app.locals.log })
    ]
  });
  app.locals.logger = logger;


  var server = http.listen(app.locals.port, function() {
    console.log('-= Git Manager =-'.green);
    console.log(('Port: ' + (server.address().port + '').bold).yellow);
    console.log(('Repo: ' + app.locals.repo.bold).yellow);
    console.log(('Username: ' + app.locals.username.bold).yellow);
    console.log(('Logs: ' + app.locals.log.bold).yellow);

    if(app.locals.password === 'password'){
      console.log('');
      console.log('!!! WARNING !!!'.red.bold);
      console.log('You are using the default password! You can define a password by using the -w parameter'.red.bold);
      console.log('');
    }

    console.log('------------------'.green);
  });



  // IO stuff
  // TODO: authenticate requests
  io.on('connection', function(socket){
    // console.log('a user connected');
    var isAuthenticated = false;

    // TODO: use JWT for authentication
    socket.on('auth', function(token){
      console.log('Auth request: ' + token);
      if(encryption.encrypt(app.locals.username + app.locals.password) == token){
        isAuthenticated = true;
        socket.join('users');
        console.log('Authentication successful');
      }
      else{
        console.log('Authentication failed');
      }
    });


    // TODO: send last logs

    socket.on('disconnect', function(){
      // console.log('a user disconnected');
    });

    socket.on('git-command', function(command){
      var args = null;

      app.locals.logInfo('Requested git command: ' + command);


      switch(command){
        case 'push':
          args = [command, 'origin', 'master'];
          break;
        case 'reset':
          args = [command, '--hard', 'HEAD'];
          break;
        case 'pull':
        // case 'commit':
        // case 'reset':
        // case 'stash':
          args = [command];
          break;
      }

      if(args.length > 0){
        var git_command = spawn('git', args, {cwd: app.locals.repo});

        git_command.stdout.on('data', (data) => {
          app.locals.logInfo(data.toString('utf8'));
        });

        git_command.stderr.on('data', (data) => {
          app.locals.logError(data.toString('utf8'));
        });
      }
    });
  });

});







 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
