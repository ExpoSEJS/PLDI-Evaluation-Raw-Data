/root/Targets/react-onoff-switch
└─┬ react-onoff-switch@1.0.0 
  └─┬ react@15.6.2 
    ├── create-react-class@15.6.2 
    ├─┬ fbjs@0.8.16 
    │ ├── core-js@1.2.7 
    │ ├─┬ isomorphic-fetch@2.2.1 
    │ │ ├─┬ node-fetch@1.7.3 
    │ │ │ ├─┬ encoding@0.1.12 
    │ │ │ │ └── iconv-lite@0.4.19 
    │ │ │ └── is-stream@1.1.0 
    │ │ └── whatwg-fetch@2.0.3 
    │ ├─┬ promise@7.3.1 
    │ │ └── asap@2.0.6 
    │ ├── setimmediate@1.0.5 
    │ └── ua-parser-js@0.7.14 
    ├─┬ loose-envify@1.3.1 
    │ └── js-tokens@3.0.2 
    ├── object-assign@4.1.1 
    └── prop-types@15.6.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/react-onoff-switch/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0491 took 3.7838s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (22:3) on program 
import React from 'react';
import {grey, offBackground, onBackground, buttonStyle, setStyles} from './styles.js';

const componentDefaults = {
	width: 100,
	buttonColor: '#FFFFFF',
	passiveColor: '#FFFFFF',
	activeColor: '#13BF11'
}

const stopEvent = e => {
	e.preventDefault();
	e.stopPropagation();
}

export default class OnOff extends React.Component {
	constructor(props) {
		super(props);
		const active = !!props.initialValue;
		this.state = {
			...componentDefaults,
			...props,
			on: active, // false if not set
			activeColorWidth: active ? 1 : 0.6,
			buttonPosition: active ? 0.4 : 0,
		};

		this.handleChange = this.handleChange.bind(this);
		this.onChange = props.onChange || (() => {});
		this.onPointerDown = this.onPointerDown.bind(this);
		this.onDrag = this.onDrag.bind(this);
		this.onDragEnd = this.onDragEnd.bind(this);
	}

	handleChange(state) {
		const val = typeof state == 'boolean' ? state : !this.state.on;
		this.setState({
			on: val,
			buttonPosition: val ? 0.4 : 0,
			activeColorWidth: val ? 1 : 0.6
		},
			() => this.onChange(this.state.on) // callback to parent Component
		);
	}

	getPointerCoords(e){
		return e.pageX || e.touches[0].pageX;
	}

	onPointerDown(e){
		stopEvent(e);
		this.touchDown = this.getPointerCoords(e.nativeEvent) - parseInt(e.target.style.left, 10);
		window.addEventListener('ontouchend' in window ? 'touchend' : 'mouseup', this.onDragEnd);
	}

	onDrag(e){
		if (!this.touchDown) return;
		else this.dragged = true;
		stopEvent(e);

		// 0.4 and 0.6 are related to proportions where 1 is the width
		// 0.4 is the most left point of the buttonPosition
		// 0.6 is the most right point, so the active color fills the whole background behind the button

		const positionNow = this.getPointerCoords(e.nativeEvent);
		let diff = (positionNow - this.touchDown) / this.state.width;
		const maxDragDistance = 0.4;
		if (diff < 0) diff = 0;
		else if (diff > maxDragDistance) diff = maxDragDistance;
		const pos = 0.6 + diff;

		this.setState({
			buttonPosition: diff,
			activeColorWidth: pos
		});
	}

	onDragEnd(e){
		stopEvent(e);
		if (!this.touchDown) return;

		window.removeEventListener('ontouchend' in window ? 'touchend' : 'mouseup', this.onDragEnd);
		const newState = this.dragged ? this.state.buttonPosition > 0.2 : !this.state.on;
		this.handleChange(newState);
		this.touchDown = this.dragged = null;
	}

	render() {
		const on = this.state.on;

		const active = setStyles({
			...onBackground,
			width: this.state.activeColorWidth,
			background: this.state.activeColor
		}, this.state.width);

		const passive = setStyles({
			...offBackground,
			background: this.state.passiveColor
		}, this.state.width);

		const button = setStyles({
			...buttonStyle,
			left: this.state.buttonPosition,
			boxShadow: `inset 0 0 0 1px ${on ? this.state.activeColor : grey}, 0 2px 4px ${grey}`,
			background: this.state.buttonColor
		}, this.state.width);

		return (
			<div style={{position: 'relative', height: 0.6 * this.state.width}}>
				<div style={passive}/>
				<div style={active}/>
				<div
					onMouseMove={this.onDrag}
					onTouchMove={this.onDrag}
					onTouchStart={this.onPointerDown}
					onMouseDown={this.onPointerDown}
					onMouseOut={this.onDragEnd}
					style={button}/
					>
			</div>
		)
	}
}
 at SyntaxError: Unexpected token (22:3)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseIdent (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2189:12)
    at Parser.pp$3.parsePropertyName (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2052:101)
    at Parser.pp$3.parseObj (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1988:14)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1805:19)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
