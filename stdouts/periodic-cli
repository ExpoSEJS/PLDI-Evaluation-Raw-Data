/root/Targets/periodic-cli
└─┬ periodic-cli@1.2.0 
  ├─┬ async@2.5.0 
  │ └── lodash@4.17.4 
  ├─┬ chalk@1.1.3 
  │ ├── ansi-styles@2.2.1 
  │ ├── escape-string-regexp@1.0.5 
  │ ├─┬ has-ansi@2.0.0 
  │ │ └── ansi-regex@2.1.1 
  │ ├── strip-ansi@3.0.1 
  │ └── supports-color@2.0.0 
  ├── colors@1.1.2 
  ├── commander@2.11.0 
  ├─┬ fs-extra@0.30.0 
  │ ├── graceful-fs@4.1.11 
  │ ├── jsonfile@2.4.0 
  │ ├── klaw@1.3.1 
  │ ├── path-is-absolute@1.0.1 
  │ └─┬ rimraf@2.6.2 
  │   └─┬ glob@7.1.2 
  │     ├── fs.realpath@1.0.0 
  │     ├─┬ inflight@1.0.6 
  │     │ └── wrappy@1.0.2 
  │     └── once@1.4.0 
  ├─┬ nodemon@1.12.1 
  │ ├─┬ chokidar@1.7.0 
  │ │ ├─┬ anymatch@1.3.2 
  │ │ │ ├─┬ micromatch@2.3.11 
  │ │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ │ ├── array-unique@0.2.1 
  │ │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │ │   ├── isobject@2.1.0 
  │ │ │ │ │ │   ├─┬ randomatic@1.1.7 
  │ │ │ │ │ │   │ ├─┬ is-number@3.0.0 
  │ │ │ │ │ │   │ │ └── kind-of@3.2.2 
  │ │ │ │ │ │   │ └── kind-of@4.0.0 
  │ │ │ │ │ │   └── repeat-string@1.6.1 
  │ │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ │ ├── extglob@0.3.2 
  │ │ │ │ ├── filename-regex@2.0.1 
  │ │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ │ ├─┬ for-own@0.1.5 
  │ │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ │ ├── glob-base@0.3.0 
  │ │ │ │ │ └── is-dotfile@1.0.3 
  │ │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │ │     └── is-primitive@2.0.0 
  │ │ │ └─┬ normalize-path@2.1.1 
  │ │ │   └── remove-trailing-separator@1.1.0 
  │ │ ├── async-each@1.0.1 
  │ │ ├── glob-parent@2.0.0 
  │ │ ├── inherits@2.0.3 
  │ │ ├─┬ is-binary-path@1.0.1 
  │ │ │ └── binary-extensions@1.10.0 
  │ │ ├─┬ is-glob@2.0.1 
  │ │ │ └── is-extglob@1.0.0 
  │ │ └─┬ readdirp@2.1.0 
  │ │   ├─┬ readable-stream@2.3.3 
  │ │   │ ├── core-util-is@1.0.2 
  │ │   │ ├── isarray@1.0.0 
  │ │   │ ├── process-nextick-args@1.0.7 
  │ │   │ ├── safe-buffer@5.1.1 
  │ │   │ ├── string_decoder@1.0.3 
  │ │   │ └── util-deprecate@1.0.2 
  │ │   └── set-immediate-shim@1.0.1 
  │ ├─┬ debug@2.6.9 
  │ │ └── ms@2.0.0 
  │ ├── es6-promise@3.3.1 
  │ ├── ignore-by-default@1.0.1 
  │ ├─┬ lodash.defaults@3.1.2 
  │ │ ├─┬ lodash.assign@3.2.0 
  │ │ │ ├─┬ lodash._baseassign@3.2.0 
  │ │ │ │ └── lodash._basecopy@3.0.1 
  │ │ │ ├─┬ lodash._createassigner@3.1.1 
  │ │ │ │ ├── lodash._bindcallback@3.0.1 
  │ │ │ │ └── lodash._isiterateecall@3.0.9 
  │ │ │ └─┬ lodash.keys@3.1.2 
  │ │ │   ├── lodash._getnative@3.9.1 
  │ │ │   ├── lodash.isarguments@3.1.0 
  │ │ │   └── lodash.isarray@3.0.4 
  │ │ └── lodash.restparam@3.6.1 
  │ ├─┬ minimatch@3.0.4 
  │ │ └─┬ brace-expansion@1.1.8 
  │ │   ├── balanced-match@1.0.0 
  │ │   └── concat-map@0.0.1 
  │ ├─┬ ps-tree@1.1.0 
  │ │ └─┬ event-stream@3.3.4 
  │ │   ├── duplexer@0.1.1 
  │ │   ├── from@0.1.7 
  │ │   ├── map-stream@0.1.0 
  │ │   ├── pause-stream@0.0.11 
  │ │   ├── split@0.3.3 
  │ │   ├── stream-combiner@0.0.4 
  │ │   └── through@2.3.8 
  │ ├─┬ touch@3.1.0 
  │ │ └─┬ nopt@1.0.10 
  │ │   └── abbrev@1.1.1 
  │ ├── undefsafe@0.0.3 
  │ └─┬ update-notifier@2.2.0 
  │   ├─┬ boxen@1.2.1 
  │   │ ├── ansi-align@2.0.0 
  │   │ ├── camelcase@4.1.0 
  │   │ ├─┬ chalk@2.1.0 
  │   │ │ ├─┬ ansi-styles@3.2.0 
  │   │ │ │ └─┬ color-convert@1.9.0 
  │   │ │ │   └── color-name@1.1.3 
  │   │ │ └─┬ supports-color@4.4.0 
  │   │ │   └── has-flag@2.0.0 
  │   │ ├── cli-boxes@1.0.0 
  │   │ ├─┬ string-width@2.1.1 
  │   │ │ ├── is-fullwidth-code-point@2.0.0 
  │   │ │ └─┬ strip-ansi@4.0.0 
  │   │ │   └── ansi-regex@3.0.0 
  │   │ ├─┬ term-size@1.2.0 
  │   │ │ └─┬ execa@0.7.0 
  │   │ │   ├─┬ cross-spawn@5.1.0 
  │   │ │   │ ├─┬ lru-cache@4.1.1 
  │   │ │   │ │ ├── pseudomap@1.0.2 
  │   │ │   │ │ └── yallist@2.1.2 
  │   │ │   │ ├─┬ shebang-command@1.2.0 
  │   │ │   │ │ └── shebang-regex@1.0.0 
  │   │ │   │ └─┬ which@1.3.0 
  │   │ │   │   └── isexe@2.0.0 
  │   │ │   ├── get-stream@3.0.0 
  │   │ │   ├── is-stream@1.1.0 
  │   │ │   ├─┬ npm-run-path@2.0.2 
  │   │ │   │ └── path-key@2.0.1 
  │   │ │   ├── p-finally@1.0.0 
  │   │ │   └── strip-eof@1.0.0 
  │   │ └─┬ widest-line@1.0.0 
  │   │   └─┬ string-width@1.0.2 
  │   │     ├── code-point-at@1.1.0 
  │   │     └─┬ is-fullwidth-code-point@1.0.0 
  │   │       └── number-is-nan@1.0.1 
  │   ├─┬ configstore@3.1.1 
  │   │ ├─┬ dot-prop@4.2.0 
  │   │ │ └── is-obj@1.0.1 
  │   │ ├─┬ make-dir@1.0.0 
  │   │ │ └── pify@2.3.0 
  │   │ ├─┬ unique-string@1.0.0 
  │   │ │ └── crypto-random-string@1.0.0 
  │   │ └─┬ write-file-atomic@2.3.0 
  │   │   ├── imurmurhash@0.1.4 
  │   │   └── signal-exit@3.0.2 
  │   ├── import-lazy@2.1.0 
  │   ├── is-npm@1.0.0 
  │   ├─┬ latest-version@3.1.0 
  │   │ └─┬ package-json@4.0.1 
  │   │   ├─┬ got@6.7.1 
  │   │   │ ├─┬ create-error-class@3.0.2 
  │   │   │ │ └── capture-stack-trace@1.0.0 
  │   │   │ ├── duplexer3@0.1.4 
  │   │   │ ├── is-redirect@1.0.0 
  │   │   │ ├── is-retry-allowed@1.1.0 
  │   │   │ ├── lowercase-keys@1.0.0 
  │   │   │ ├── timed-out@4.0.1 
  │   │   │ ├── unzip-response@2.0.1 
  │   │   │ └─┬ url-parse-lax@1.0.0 
  │   │   │   └── prepend-http@1.0.4 
  │   │   ├─┬ registry-auth-token@3.3.1 
  │   │   │ └─┬ rc@1.2.1 
  │   │   │   ├── deep-extend@0.4.2 
  │   │   │   ├── ini@1.3.4 
  │   │   │   ├── minimist@1.2.0 
  │   │   │   └── strip-json-comments@2.0.1 
  │   │   └── registry-url@3.1.0 
  │   ├── semver-diff@2.1.0 
  │   └── xdg-basedir@3.0.0 
  ├── periodicjs.core.extensions@6.5.0 
  ├── periodicjs.core.utilities@6.1.1 
  ├─┬ promisie@1.6.1 
  │ └─┬ babelify-es6-polyfill@1.0.4 
  │   ├── core-js@1.1.0 
  │   └─┬ regenerator@0.8.36 
  │     ├─┬ commoner@0.10.8 
  │     │ ├─┬ detective@4.5.0 
  │     │ │ ├── acorn@4.0.13 
  │     │ │ └── defined@1.0.0 
  │     │ ├── glob@5.0.15 
  │     │ ├── iconv-lite@0.4.19 
  │     │ ├─┬ mkdirp@0.5.1 
  │     │ │ └── minimist@0.0.8 
  │     │ ├── q@1.5.0 
  │     │ └─┬ recast@0.11.23 
  │     │   ├── ast-types@0.9.6 
  │     │   ├── esprima@3.1.3 
  │     │   └── source-map@0.5.7 
  │     ├─┬ defs@1.1.1 
  │     │ ├─┬ alter@0.2.0 
  │     │ │ └── stable@0.1.6 
  │     │ ├── ast-traverse@0.1.1 
  │     │ ├── breakable@1.0.0 
  │     │ ├── esprima-fb@15001.1001.0-dev-harmony-fb 
  │     │ ├── simple-fmt@0.1.0 
  │     │ ├── simple-is@0.2.0 
  │     │ ├── stringmap@0.2.2 
  │     │ ├── stringset@0.2.1 
  │     │ ├── tryor@0.1.2 
  │     │ └─┬ yargs@3.27.0 
  │     │   ├── camelcase@1.2.1 
  │     │   ├─┬ cliui@2.1.0 
  │     │   │ ├─┬ center-align@0.1.3 
  │     │   │ │ ├─┬ align-text@0.1.4 
  │     │   │ │ │ └── longest@1.0.1 
  │     │   │ │ └── lazy-cache@1.0.4 
  │     │   │ ├── right-align@0.1.3 
  │     │   │ └── wordwrap@0.0.2 
  │     │   ├── decamelize@1.2.0 
  │     │   ├─┬ os-locale@1.4.0 
  │     │   │ └─┬ lcid@1.0.0 
  │     │   │   └── invert-kv@1.0.0 
  │     │   ├── window-size@0.1.4 
  │     │   └── y18n@3.2.1 
  │     ├── esprima-fb@15001.1.0-dev-harmony-fb 
  │     ├── private@0.1.7 
  │     └─┬ recast@0.10.25 
  │       ├── ast-types@0.8.5 
  │       └─┬ source-map@0.4.4 
  │         └── amdefine@1.0.1 
  ├── semver@5.4.1 
  └── utils-merge@1.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/periodic-cli/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0274 took 4.13s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
'use strict';

/**
 * Require dependencies
 */
const program = require('commander');
const Promisie = require('promisie');
const fs = Promisie.promisifyAll(require('fs-extra'));
const path = require('path');
const async = require('async');
const nodemon = require('nodemon');
const npm = require('npm');
const npm_deploysync = require('./scripts/npm_deploymentsync');
const app_pre_install = require('./scripts/app_pre_install');
const app_post_install = require('./scripts/app_post_install');
const colors = require('colors');
const spawn = require('child_process').spawn;
let install_prefix = process.cwd();
let child;

program
  .version(require('./package').version)
  .option('-a, --all', 'all environments')

var run_cmd = function (cmd, args, callback, env) {
  var spawn = require('child_process').spawn;

  if (env) {
    child = spawn(cmd, args, env);
  }
  else {
    child = spawn(cmd, args);		
  }

  child.stdout.on('error', function (err) {
    console.error(err);
    process.exit(0);
  });

  child.stdout.on('data', function (buffer) {
    console.log(buffer.toString());
  });

  child.stderr.on('data', function (buffer) {
    console.error(buffer.toString());
  });

  child.on('exit', function () {
    callback(null, 'command run: ' + cmd + ' ' + args);
    process.exit(0);
  }); 
};

// $ deploy deploy development
// $ deploy deploy staging
program
  .command('deploy [env]')
  .description('run deploy commands for specified environment')
  .action(function (env) {
    if (!env) {
      console.log('Please specify the environment')
    } else {
      try {
        console.log('deploying for %s env(s)', env);
        run_cmd('pm2', ['deploy', path.resolve(process.cwd(),'content/config/deployment/ecosystem.json'), env], function (err, text) { console.log(text.green.underline) });
      }
      catch (e) {
        logger.error(e);
        logger.error(e.stack);
        process.exit(0);
      }      
    }
  });

program
  .command('deploysetup')
  .description('run deploy setup for specified environment')
  .action(function (env) {
    if (!env) {
      console.log('Please speicify the environment')
    } else {
      try {
        console.log('running deploy setup for %s env(s)', env);
        run_cmd('pm2', ['deploy', path.resolve(process.cwd(),'content/config/deployment/ecosystem.json'), env, 'setup'], function (err, text) { console.log(text.green.underline) });
      }
      catch (e) {
        logger.error(e);
        logger.error(e.stack);
        process.exit(0);
      }
    }
  })

program
  .command('deploy-sync')
  .alias('deploysync')
  .alias('ds')
  .description('')
  .action(function () {
    console.log('Running deploysync'.green.underline);
    npm_deploysync.deploy_sync_promise()
      .then(result => {
        console.log(`Successfully ran deploysync`.green.underline);
      })
      .catch(err => { 
        console.log(`Error running deploysync: ${err}`.red.underline);
      });
  });

program
  .command('forever')
  .alias('f')
  .description('')
  .action((env = 'development') => {
    run_cmd('forever', ['start', '-o', 'logs/app-out.forever.log', '-e', 'logs/app-err.forever.log', '-c', 'nodemon', 'index.js', '--e', env], function (err, text) { console.log(text.green.underline) });
  });

program
  .command('coverage')
  .alias('c')
  .description('')
  .action(() => {
    run_cmd('mocha', ['-R', 'html-cov', '--recursive > test/coverage.html'], function (err, text) { console.log(text.green.underline) });
  });

program
  .command('start [env]')
  .description('starts the application in the specified environment')
  .action((env = 'development') => {
    let message = 'Starting application';
    if (env) message = `Starting application in ${env}`;
    console.log(message.green.underline);
    run_cmd('nodemon', ['index.js', '--e', env], function (err, text) { console.log(text.green.underline) });
  });

program
  .command('stop')
  .description('Stops the forever instance of the application')
  .action(() => {
    run_cmd('forever', ['stop', '-c', 'nodemon', 'index.js'], function (err, text) { console.log(text.green.underline) });
  });

program
  .command('test')
  .description('Recursively runs mocha tests')
  .action(function () {
    console.log('Running tests'.green.underline);
    run_cmd('mocha', ['-R', 'spec', '--recursive'], function (err, text) { console.log(text.green.underline) });
  });

function installExtension(extension) {
  let npm_load_options = {
    'strict-ssl': false,
    'save-optional': true,
    'no-optional': true,
    'production': true,
    prefix: install_prefix
  };

  if (extension.indexOf('@') !== -1) {
    let [name, version] = extension.split('@');
    console.log(`Installing ${name}@${version}`.green.underline);
    npm.load(npm_load_options, function (err) {
      if (err) return console.log(`Error installing extension ${name}`.red.underline);
      npm.commands.install([`periodicjs.ext.${name}@${version}`], function (err, data) {
        if (err) return console.log(`Error installing extension ${name}`.red.underline)
        console.log(`Successfully installed extension ${name}@${version}`.green.underline);
      })
    })
  } else {
    console.log(`Installing ${extension}@latest`.green.underline);
    npm.load(npm_load_options, function (err) {
      if (err) return console.log(`Error installing extension ${name}`.red.underline);
      npm.commands.install([`periodicjs.ext.${extension}`], function (err, data) {
        if (err) return console.log(`Error installing extension ${extension}`.red.underline)
        console.log(`Successfully installed extension ${extension}@$latest`.green.underline);
      })
    })    
  }
};

function removeExtension(extension) {
  let npm_load_options = {
    'strict-ssl': false,
    'save-optional': true,
    'no-optional': true,
    'production': true,
    prefix: install_prefix
  };
  console.log(`Removing extension ${extension}`.green.underline);
  npm.load(npm_load_options, function (err) {
    if (err) return console.log(`Error removing extension ${err}`.red.underline);
    npm.commands.remove([`periodicjs.ext.${extension}`], function (err, data) {
      if (err) return console.log(`Error removing extension ${err}`.red.underline)
      console.log(`Successfully removed extension ${extension}`.green.underline);
    })
  })
};

program
  .command('install [ext...]')
  .alias('i')
  .description('Installs extension for current Periodic Project')
  .action(function (extensions) {
    if (!extensions) console.log('Please specify extension name')
    extensions.forEach(extension => installExtension(extension));
  });

program
  .command('remove [ext...]')
  .alias('r')
  .description('Removes extensions from current Periodic Project')
  .action(function (extensions) {
    if (!extensions) return console.log('Please specify an extension you\'d like to remove');
    extensions.forEach(extension => removeExtension(extension));
  });

program
  .command('upgrade [version]')
  .alias('u')
  .description('Installs PeriodicJS in current directory at specified version')
  .action(function (version) {
    let npm_load_options = {
      'strict-ssl': false,
      'save-optional': true,
      'no-optional': true,
      'production': true,
      prefix: install_prefix
    };
    if (!version) version = 'latest'
    console.log(`Starting PeriodicJS@${version} install`.green.underline);
    npm.load(npm_load_options, (err) => {
      if (err) return err;
      npm.commands.install([`periodicjs`], (err) => {
        if (err) return err
        app_post_install.init(install_prefix)
          .then(() => {
            fs.remove(install_prefix + '/node_modules/periodicjs', (err) => {
              if (err) return console.log('Error removing periodicjs from node_modules');
              return Promise.resolve();
            });          
          })
          .then(() => {
            console.log(`Installed periodicjs@${version}`.green.underline);
          })
          .catch(err => {
            console.log(`Error installing PeriodicJS ${err}`);
          })
      })
    })
  });

program
  .command('setup')
  .alias('s')
  .description('Installs PeriodicJS at latest version')
  .action(function () {
    let npm_load_options = {
      'strict-ssl': false,
      'save-optional': true,
      'no-optional': true,
      'production': true,
      prefix: install_prefix
    };
    console.log('Starting PeriodicJS install'.green.underline);
    app_pre_install.init(install_prefix)
      .then(() => {
        return new Promise((resolve, reject) => {
          npm.load(npm_load_options, (err) => {
            if (err) return err;
            npm.commands.install(['periodicjs'], (err) => {
              if (err) return err
              console.log('Installed periodicjs'.green.underline)
              resolve();
            })
          })
        })
      })
      .then(() => {
        return app_post_install.init(install_prefix);
      })
      .then(() => {
        fs.remove(install_prefix + '/node_modules/periodicjs', (err) => {
          if (err) return console.log('Error removing periodicjs from node_modules');
          console.log(`Installation complete`.green.underline);
          return Promise.resolve();
        });
      })
      .catch(err => {
        console.log(`Error installing PeriodicJS ${err}`);
      })
  });

program
  .command('pre-install')
  .alias('preinstall')
  .description('Runs periodicjs preinstall script')
  .action(function () {
    app_pre_install.init(install_prefix);
  });

program
  .command('post-install')
  .alias('postinstall')
  .description('Runs periodicjs postinstall script')
  .action(function () {
    app_post_install.init(install_prefix);
  });  

program.parse(process.argv); at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
