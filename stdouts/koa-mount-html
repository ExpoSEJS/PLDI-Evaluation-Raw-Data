/root/Targets/koa-mount-html
└─┬ koa-mount-html@0.1.2 
  ├─┬ debug@2.6.9 
  │ └── ms@2.0.0 
  └── koa-compose@2.5.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/koa-mount-html/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0332 took 1.5248s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:6) on program const debug = require('debug')('koa-mount-html');
const compose = require('koa-compose');

const assert = require('assert');
const path = require('path');
const url = require('url');

const CONTENT_TYPE_HTML = 'text/html';

function acceptsHtml (acceptsString) {
  return acceptsString.indexOf('application/json') !== 0
         && (acceptsString.indexOf('text/html') !== -1 || acceptsString.indexOf('*/*') !== -1)
}

function *noop(){}

exports = module.exports = function mountHtml(app, opts) {
  opts = opts || {};

  const downstream = app.middleware
    ? compose(app.middleware)
    : app;

  assert(downstream, 'koa app / middleware required');

  return function* (upstream) {

    if (opts.defer) {
      yield* upstream;
      // response is already handled
      if (this.body != null || this.status != 404) return;
    }

    if (this.method === 'GET' && this.accepts('text/html')) {

      const parsedUrl = url.parse(this.url);

      if (opts.includeDotPaths || parsedUrl.pathname.indexOf('.') === -1) {

        debug('mounting for url "%s"', this.url);

        if (opts.defer) {
          yield* downstream.call(this, noop());
        }
        else {
          yield* downstream.call(this, function * callback(){
            yield* upstream;
          }.call(this));
        }

      }
      else {
        debug('not mounting request for a path containing a \'.\' "%s"', parsedUrl.pathname);
      }

    }

    yield *upstream;
  };
};
 at SyntaxError: Unexpected token (4:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
