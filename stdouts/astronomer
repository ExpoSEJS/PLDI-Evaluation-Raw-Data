/root/Targets/astronomer
└─┬ astronomer@2.0.4 
  ├── clone@0.1.19 
  ├── component-type@1.0.0 
  ├─┬ debug@2.6.9 
  │ └── ms@2.0.0 
  ├── join-component@1.0.0 
  ├── lodash@2.4.2 
  ├─┬ superagent@1.8.5 
  │ ├── component-emitter@1.2.1 
  │ ├── cookiejar@2.0.6 
  │ ├── extend@3.0.0 
  │ ├─┬ form-data@1.0.0-rc3 
  │ │ ├── async@1.5.2 
  │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ └── delayed-stream@1.0.0 
  │ │ └─┬ mime-types@2.1.17 
  │ │   └── mime-db@1.30.0 
  │ ├── formidable@1.0.17 
  │ ├── methods@1.1.2 
  │ ├── mime@1.3.4 
  │ ├── qs@2.3.3 
  │ ├─┬ readable-stream@1.0.27-1 
  │ │ ├── core-util-is@1.0.2 
  │ │ ├── inherits@2.0.3 
  │ │ ├── isarray@0.0.1 
  │ │ └── string_decoder@0.10.31 
  │ └── reduce-component@1.0.1 
  ├─┬ superagent-proxy@1.0.2 
  │ └─┬ proxy-agent@2.1.0 
  │   ├─┬ agent-base@2.1.1 
  │   │ └── semver@5.0.3 
  │   ├── http-proxy-agent@1.0.0 
  │   ├── https-proxy-agent@1.0.0 
  │   ├── lru-cache@2.6.5 
  │   ├─┬ pac-proxy-agent@2.0.0 
  │   │ ├─┬ get-uri@2.0.1 
  │   │ │ ├── data-uri-to-buffer@1.2.0 
  │   │ │ ├── file-uri-to-path@1.0.0 
  │   │ │ ├─┬ ftp@0.3.10 
  │   │ │ │ ├── readable-stream@1.1.14 
  │   │ │ │ └── xregexp@2.0.0 
  │   │ │ └─┬ readable-stream@2.3.3 
  │   │ │   ├── isarray@1.0.0 
  │   │ │   ├── process-nextick-args@1.0.7 
  │   │ │   ├── safe-buffer@5.1.1 
  │   │ │   ├── string_decoder@1.0.3 
  │   │ │   └── util-deprecate@1.0.2 
  │   │ ├─┬ pac-resolver@3.0.0 
  │   │ │ ├── co@4.6.0 
  │   │ │ ├─┬ degenerator@1.0.4 
  │   │ │ │ ├── ast-types@0.9.13 
  │   │ │ │ ├─┬ escodegen@1.9.0 
  │   │ │ │ │ ├── estraverse@4.2.0 
  │   │ │ │ │ ├── esutils@2.0.2 
  │   │ │ │ │ ├─┬ optionator@0.8.2 
  │   │ │ │ │ │ ├── deep-is@0.1.3 
  │   │ │ │ │ │ ├── fast-levenshtein@2.0.6 
  │   │ │ │ │ │ ├── levn@0.3.0 
  │   │ │ │ │ │ ├── prelude-ls@1.1.2 
  │   │ │ │ │ │ ├── type-check@0.3.2 
  │   │ │ │ │ │ └── wordwrap@1.0.0 
  │   │ │ │ │ └── source-map@0.5.7 
  │   │ │ │ └── esprima@3.1.3 
  │   │ │ ├── ip@1.1.5 
  │   │ │ ├── netmask@1.0.6 
  │   │ │ └── thunkify@2.1.2 
  │   │ ├─┬ raw-body@2.3.2 
  │   │ │ ├── bytes@3.0.0 
  │   │ │ ├─┬ http-errors@1.6.2 
  │   │ │ │ ├── depd@1.1.1 
  │   │ │ │ ├── setprototypeof@1.0.3 
  │   │ │ │ └── statuses@1.3.1 
  │   │ │ ├── iconv-lite@0.4.19 
  │   │ │ └── unpipe@1.0.0 
  │   │ └─┬ socks-proxy-agent@3.0.1 
  │   │   └─┬ agent-base@4.1.1 
  │   │     └─┬ es6-promisify@5.0.0 
  │   │       └── es6-promise@4.1.1 
  │   └─┬ socks-proxy-agent@2.1.1 
  │     └─┬ socks@1.1.10 
  │       └── smart-buffer@1.1.15 
  ├── superagent-retry@0.5.1 
  └── uid@0.0.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/astronomer/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0496 took 2.2417s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:82) on program var assert = require('assert');
var clone = require('clone');
var debug = require('debug')('analytics-node');
var noop = function(){};
var request = require('superagent');
require('superagent-retry')(request);
var type = require('component-type');
var join = require('join-component');
var uid = require('uid');
var version = require('../package.json').version;
var extend = require('lodash').extend;

global.setImmediate = global.setImmediate || process.nextTick.bind(process);

/**
 * Expose an `Analytics` client.
 */

module.exports = Analytics;

/**
 * Initialize a new `Analytics` with your Astronomer project's `appId` and an
 * optional dictionary of `options`.
 *
 * @param {String} appId
 * @param {Object} options (optional)
 *   @property {Number} flushAt (default: 20)
 *   @property {Number} flushAfter (default: 10000)
 *   @property {String} host (default: 'https://api.astronomer.io')
 */

function Analytics(appId, options){
  if (!(this instanceof Analytics)) return new Analytics(appId, options);
  assert(appId, 'You must pass your Astronomer project\'s appId.');
  options = options || {};
  this.queue = [];
  this.appId = appId;
  this.host = options.host || 'https://api.astronomer.io';
  this.flushAt = Math.max(options.flushAt, 1) || 20;
  this.flushAfter = options.flushAfter || 10000;
}

/**
 * Send an identify `message`.
 *
 * @param {Object} message
 * @param {Function} fn (optional)
 * @return {Analytics}
 */

Analytics.prototype.identify = function(message, fn){
  validate(message);
  assert(message.anonymousId || message.userId, 'You must pass either an "anonymousId" or a "userId".');
  this.enqueue('identify', message, fn);
  return this;
};

/**
 * Send a group `message`.
 *
 * @param {Object} message
 * @param {Function} fn (optional)
 * @return {Analytics}
 */

Analytics.prototype.group = function(message, fn){
  validate(message);
  assert(message.anonymousId || message.userId, 'You must pass either an "anonymousId" or a "userId".');
  assert(message.groupId, 'You must pass a "groupId".');
  this.enqueue('group', message, fn);
  return this;
};

/**
 * Send a track `message`.
 *
 * @param {Object} message
 * @param {Function} fn (optional)
 * @return {Analytics}
 */

Analytics.prototype.track = function(message, fn){
  validate(message);
  assert(message.anonymousId || message.userId, 'You must pass either an "anonymousId" or a "userId".');
  assert(message.event, 'You must pass an "event".');
  this.enqueue('track', message, fn);
  return this;
};

/**
 * Send a page `message`.
 *
 * @param {Object} message
 * @param {Function} fn (optional)
 * @return {Analytics}
 */

Analytics.prototype.page = function(message, fn){
  validate(message);
  assert(message.anonymousId || message.userId, 'You must pass either an "anonymousId" or a "userId".');
  this.enqueue('page', message, fn);
  return this;
};

/**
 * Send an alias `message`.
 *
 * @param {Object} message
 * @param {Function} fn (optional)
 * @return {Analytics}
 */

Analytics.prototype.alias = function(message, fn){
  validate(message);
  assert(message.userId, 'You must pass a "userId".');
  assert(message.previousId, 'You must pass a "previousId".');
  this.enqueue('alias', message, fn);
  return this;
};

/**
 * Flush the current queue and callback `fn(err, batch)`.
 *
 * @param {Function} fn (optional)
 * @return {Analytics}
 */

Analytics.prototype.flush = function(fn){
  fn = fn || noop;
  if (!this.queue.length) return setImmediate(fn);

  var items = this.queue.splice(0, this.flushAt);
  var fns = items.map(function(_){ return _.callback; });
  var batch = items.map(function(_){ return _.message; });

  var data = {
    batch: batch,
    timestamp: new Date(),
    sentAt: new Date(),
    messageId: uid(8)
  };

  debug('flush: %o', data);

  var req = request
    .post(this.host + '/v1/batch')
    .auth(this.appId, '')
    .retry(3)
    .send(data)
    .end(function(err, res){
      err = err || error(res);
      fns.push(fn);
      fns.forEach(function(fn){ fn(err, data); });
      debug('flushed: %o', data);
    });
};

/**
 * Add a `message` of type `type` to the queue and check whether it should be
 * flushed.
 *
 * @param {String} type
 * @param {Object} message
 * @param {Functino} fn (optional)
 * @api private
 */

Analytics.prototype.enqueue = function(type, message, fn){
  fn = fn || noop;
  message = clone(message);
  message.type = type;
  message.context = extend(message.context || {}, { library: { name: 'analytics-node', version: version }});
  if (!message.timestamp) message.timestamp = new Date();

  debug('%s: %o', type, message);
  this.queue.push({
    message: message,
    callback: fn
  });

  if (this.queue.length >= this.flushAt) this.flush();
  if (this.timer) clearTimeout(this.timer);
  if (this.flushAfter) this.timer = setTimeout(this.flush.bind(this), this.flushAfter);
};

/**
 * Validation rules.
 */

var rules = {
  anonymousId: ['string', 'number'],
  category: 'string',
  context: 'object',
  event: 'string',
  groupId: ['string', 'number'],
  integrations: 'object',
  name: 'string',
  previousId: ['string', 'number'],
  timestamp: 'date',
  userId: ['string', 'number']
};

/**
 * Validate an options `obj`.
 *
 * @param {Object} obj
 */

function validate(obj){
  assert('object' == type(obj), 'You must pass a message object.');
  for (var key in rules) {
    var val = obj[key];
    if (!val) continue;
    var exp = rules[key];
    exp = ('array' === type(exp) ? exp : [exp]);
    var a = 'object' == exp ? 'an' : 'a';
    assert(exp.some(function(e){ return type(val) === e; }), '"' + key + '" must be ' + a + ' ' + join(exp, 'or') + '.');
  }
};

/**
 * Get an error from a `res`.
 *
 * @param {Object} res
 * @return {String}
 */

function error(res){
  if (!res.error) return;
  var body = res.body;
  var msg = body.error && body.error.message
    || res.status + ' ' + res.text;
  return new Error(msg);
}
 at SyntaxError: Unexpected token (1:82)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
