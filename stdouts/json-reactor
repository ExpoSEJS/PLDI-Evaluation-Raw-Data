/root/Targets/json-reactor
└── json-reactor@2.0.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/json-reactor/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0387 took 1.4284s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (19:4) on program import React                from 'react';
import {render}             from 'react-dom';

// import {Styles}             from './src/Util'
// // Old:
// import {KeyList}            from './src/editor/KeyList'
// import {FieldEditor}        from './src/editor/FieldEditor'
// import {KeyValueEditor}     from './src/editor/KeyValueEditor'
//New
// import {DataTreeFactory, mountTree} from './src/tree/DataTree'
import {Tree}               from './src/tree'
import {Schema}             from './src/schema/Schema'


export {Tree, Schema};

export const loadTreeApp = ({data, draggable}) => {
  return render(
    <Tree data={data} draggable={draggable} />,
    document.getElementById('app'))
}

// export function create(elem, config) {
//   if (!elem)   { throw new Error('JsonReactor instance requires 1st param `elem`') }
//   if (!config) { throw new Error('JsonReactor instance requires 2nd param `config`') }

//   const destroy = () => {
//     Styles.remove()

//     const currForm = elem.querySelector('section.j-edit')
//     if (currForm && typeof currForm.destroy === 'function') {
//       currForm.destroy()
//     }
//     if (keyList && typeof keyList.destroy === 'function') {
//       keyList.destroy()
//     }
//   }

//   const _handleSelect = ({target, detail}) => {
//     console.warn('SELECT', detail, target)
//     const currForm = elem.querySelector('section.j-edit')
//     if (currForm && currForm.parentNode) {
//       currForm.parentNode.removeChild(currForm)
//     }
//     let fieldCreator = config.schema ? KeyValueEditor : FieldEditor;
//     elem.appendChild(fieldCreator({
//       depth:  target.depth || 1,
//       elem:   target,
//       key:    target.key,
//       node:   target.node,
//       parent: target.parent || target.parentNode,
//       path:   target.path,
//       type:   target.type || 'string',
//     }))
//   }

//   const treeSection = document.createElement('section')
//   const keyList = KeyList({data: config})

//   keyList.addEventListener('selected', _handleSelect)
//   treeSection.appendChild(keyList)
//   treeSection.classList.add('j-side')
//   elem.appendChild(treeSection)
//   elem.classList.add('json-reactor')

//   Styles.add()

//   return {destroy};
// }
 at SyntaxError: Unexpected token (19:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseExprList (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2165:22)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
