
> bson@0.2.2 install /root/Targets/docparse-supplier-nge/node_modules/bson
> (node-gyp rebuild 2> builderror.log) || (exit 0)

make: Entering directory '/root/Targets/docparse-supplier-nge/node_modules/bson/build'
  CXX(target) Release/obj.target/bson/ext/bson.o
bson.target.mk:90: recipe for target 'Release/obj.target/bson/ext/bson.o' failed
make: Leaving directory '/root/Targets/docparse-supplier-nge/node_modules/bson/build'

> kerberos@0.0.3 install /root/Targets/docparse-supplier-nge/node_modules/kerberos
> (node-gyp rebuild 2> builderror.log) || (exit 0)

make: Entering directory '/root/Targets/docparse-supplier-nge/node_modules/kerberos/build'
  SOLINK_MODULE(target) Release/obj.target/kerberos.node
  COPY Release/kerberos.node
make: Leaving directory '/root/Targets/docparse-supplier-nge/node_modules/kerberos/build'
/root/Targets/docparse-supplier-nge
└─┬ docparse-supplier-nge@1.1.6 
  ├── async@0.2.10 
  ├── cloneextend@0.0.3 
  ├── docparse-add-invoice@1.0.4 
  ├─┬ docparse-bill@1.1.1 
  │ └─┬ mongoose@3.5.16 
  │   ├── hooks@0.2.1 
  │   ├─┬ mongodb@1.3.18 
  │   │ ├── bson@0.2.2 
  │   │ └── kerberos@0.0.3 
  │   ├── ms@0.1.0 
  │   ├── muri@0.3.1 
  │   └── sliced@0.0.5 
  ├─┬ docparse-find-bill@1.1.5 
  │ └─┬ cradle@0.6.9 
  │   ├─┬ follow@0.11.4 
  │   │ ├── browser-request@0.3.3 
  │   │ └── debug@0.7.4 
  │   ├─┬ request@2.83.0 
  │   │ ├── aws-sign2@0.7.0 
  │   │ ├── aws4@1.6.0 
  │   │ ├── caseless@0.12.0 
  │   │ ├─┬ combined-stream@1.0.5 
  │   │ │ └── delayed-stream@1.0.0 
  │   │ ├── extend@3.0.1 
  │   │ ├── forever-agent@0.6.1 
  │   │ ├─┬ form-data@2.3.1 
  │   │ │ └── asynckit@0.4.0 
  │   │ ├─┬ har-validator@5.0.3 
  │   │ │ ├─┬ ajv@5.2.3 
  │   │ │ │ ├── co@4.6.0 
  │   │ │ │ ├── fast-deep-equal@1.0.0 
  │   │ │ │ ├── json-schema-traverse@0.3.1 
  │   │ │ │ └─┬ json-stable-stringify@1.0.1 
  │   │ │ │   └── jsonify@0.0.0 
  │   │ │ └── har-schema@2.0.0 
  │   │ ├─┬ hawk@6.0.2 
  │   │ │ ├── boom@4.3.1 
  │   │ │ ├─┬ cryptiles@3.1.2 
  │   │ │ │ └── boom@5.2.0 
  │   │ │ ├── hoek@4.2.0 
  │   │ │ └── sntp@2.0.2 
  │   │ ├─┬ http-signature@1.2.0 
  │   │ │ ├── assert-plus@1.0.0 
  │   │ │ ├─┬ jsprim@1.4.1 
  │   │ │ │ ├── extsprintf@1.3.0 
  │   │ │ │ ├── json-schema@0.2.3 
  │   │ │ │ └─┬ verror@1.10.0 
  │   │ │ │   └── core-util-is@1.0.2 
  │   │ │ └─┬ sshpk@1.13.1 
  │   │ │   ├── asn1@0.2.3 
  │   │ │   ├── bcrypt-pbkdf@1.0.1 
  │   │ │   ├── dashdash@1.14.1 
  │   │ │   ├── ecc-jsbn@0.1.1 
  │   │ │   ├── getpass@0.1.7 
  │   │ │   ├── jsbn@0.1.1 
  │   │ │   └── tweetnacl@0.14.5 
  │   │ ├── is-typedarray@1.0.0 
  │   │ ├── isstream@0.1.2 
  │   │ ├── json-stringify-safe@5.0.1 
  │   │ ├─┬ mime-types@2.1.17 
  │   │ │ └── mime-db@1.30.0 
  │   │ ├── oauth-sign@0.8.2 
  │   │ ├── performance-now@2.1.0 
  │   │ ├── qs@6.5.1 
  │   │ ├── safe-buffer@5.1.1 
  │   │ ├── stringstream@0.0.5 
  │   │ ├─┬ tough-cookie@2.3.3 
  │   │ │ └── punycode@1.4.1 
  │   │ ├── tunnel-agent@0.6.0 
  │   │ └── uuid@3.1.0 
  │   └── vargs@0.1.0 
  ├── docparse-get-distinct-bill-field@1.1.0 
  ├── docparse-invoice@1.1.0 
  ├── docparse-save-bill@1.1.1 
  ├── docparse-save-invoice@1.1.7 
  ├── docparse-supplier@1.1.0 
  ├── docparse-upload@1.1.0 
  ├── docparse-upload-set-matches@1.1.1 
  ├── docparse-upload-warning@1.1.1 
  ├── eyespect@0.1.10 
  ├── moment@2.0.0 
  ├─┬ num@0.2.3 
  │ └── int@0.1.2 
  ├── regex-extract@1.0.1 
  ├── required-keys@1.0.5 
  └── underscore@1.4.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/docparse-supplier-nge/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 28.999999999999996% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0627 took 2.9148s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Octal literal in strict mode (53:56) on program //
// Eyes.js - a customizable value inspector for Node.js
//
//   usage:
//
//       var inspect = require('eyes').inspector({styles: {all: 'magenta'}});
//       inspect(something); // inspect with the settings passed to `inspector`
//
//     or
//
//       var eyes = require('eyes');
//       eyes.inspect(something); // inspect with the default settings
//
var eyes = exports,
    stack = [];

eyes.defaults = {
  styles: {                 // Styles applied to stdout
    all:     'cyan',      // Overall style applied to everything
    label:   'underline', // Inspection labels, like 'array' in `array: [1, 2, 3]`
    other:   'inverted',  // Objects which don't have a literal representation, such as functions
    key:     'bold',      // The keys in object literals, like 'a' in `{a: 1}`
    special: 'grey',      // null, undefined...
    string:  'green',
    number:  'magenta',
    bool:    'cyan',      // true false
    regexp:  'green',     // /\d+/
  },
  pretty: true,             // Indent object literals
  hideFunctions: false,
  showHidden: false,
  stream: process.stdout,
  maxLength: 2048           // Truncate output if longer
};

// Return a curried inspect() function, with the `options` argument filled in.
eyes.inspector = function (options) {
  var that = this;
  return function (obj, label, opts) {
    return that.inspect.call(that, obj, label,
                             merge(options || {}, opts || {}));
  };
};

// If we have a `stream` defined, use it to print a styled string,
// if not, we just return the stringified object.
eyes.inspect = function (obj, label, options) {
  options = merge(this.defaults, options || {});

  if (options.stream) {
    return this.print(stringify(obj, options), label, options);
  } else {
    return stringify(obj, options) + (options.styles ? '\033[39m' : '');
  }
};

// Output using the 'stream', and an optional label
// Loop through `str`, and truncate it after `options.maxLength` has been reached.
// Because escape sequences are, at this point embeded within
// the output string, we can't measure the length of the string
// in a useful way, without separating what is an escape sequence,
// versus a printable character (`c`). So we resort to counting the
// length manually.
eyes.print = function (str, label, options) {
  for (var c = 0, i = 0; i < str.length; i++) {
    if (str.charAt(i) === '\033') { i += 4 } // `4` because '\033[25m'.length + 1 == 5
    else if (c === options.maxLength) {
      str = str.slice(0, i - 1) + '…';
      break;
    } else { c++ }
  }
  return options.stream.write.call(options.stream, (label ?
                                                    this.stylize(label, options.styles.label, options.styles) + ': ' : '') +
                                   this.stylize(str,   options.styles.all, options.styles) + '\033[0m' + "\n");
};

// Apply a style to a string, eventually,
// I'd like this to support passing multiple
// styles.
eyes.stylize = function (str, style, styles) {
  var codes = {
    'bold'      : [1,  22],
    'underline' : [4,  24],
    'inverse'   : [7,  27],
    'cyan'      : [36, 39],
    'magenta'   : [35, 39],
    'blue'      : [34, 39],
    'yellow'    : [33, 39],
    'green'     : [32, 39],
    'red'       : [31, 39],
    'grey'      : [90, 39]
  }, endCode;

  if (style && codes[style]) {
    endCode = (codes[style][1] === 39 && styles.all) ? codes[styles.all][0]
      : codes[style][1];
    return '\033[' + codes[style][0] + 'm' + str +
      '\033[' + endCode + 'm';
  } else { return str }
};

// Convert any object to a string, ready for output.
// When an 'array' or an 'object' are encountered, they are
// passed to specialized functions, which can then recursively call
// stringify().
function stringify(obj, options) {
  var that = this, stylize = function (str, style) {
    return eyes.stylize(str, options.styles[style], options.styles)
  }, index, result;

  if ((index = stack.indexOf(obj)) !== -1) {
    return stylize(new(Array)(stack.length - index + 1).join('.'), 'special');
  }
  stack.push(obj);

  result = (function (obj) {
    switch (typeOf(obj)) {
    case "string"   : obj = stringifyString(obj.indexOf("'") === -1 ? "'" + obj + "'"
                                            : '"' + obj + '"');
      return stylize(obj, 'string');
    case "regexp"   : return stylize('/' + obj.source + '/', 'regexp');
    case "number"   : return stylize(obj + '',    'number');
    case "function" : return options.stream ? stylize("Function", 'other') : '[Function]';
    case "null"     : return stylize("null",      'special');
    case "undefined": return stylize("undefined", 'special');
    case "boolean"  : return stylize(obj + '',    'bool');
    case "date"     : return stylize(obj.toUTCString());
    case "array"    : return stringifyArray(obj,  options, stack.length);
    case "object"   : return stringifyObject(obj, options, stack.length);
    }
  })(obj);

  stack.pop();
  return result;
};

// Escape invisible characters in a string
function stringifyString (str, options) {
  return str.replace(/\\/g, '\\\\')
    .replace(/\n/g, '\\n')
    .replace(/[\u0001-\u001F]/g, function (match) {
      return '\\0' + match[0].charCodeAt(0).toString(8);
    });
}

// Convert an array to a string, such as [1, 2, 3].
// This function calls stringify() for each of the elements
// in the array.
function stringifyArray(ary, options, level) {
  var out = [];
  var pretty = options.pretty && (ary.length > 4 || ary.some(function (o) {
    return (o !== null && typeof(o) === 'object' && Object.keys(o).length > 0) ||
      (Array.isArray(o) && o.length > 0);
  }));
  var ws = pretty ? '\n' + new(Array)(level * 4 + 1).join(' ') : ' ';

  for (var i = 0; i < ary.length; i++) {
    out.push(stringify(ary[i], options));
  }

  if (out.length === 0) {
    return '[]';
  } else {
    return '[' + ws
      + out.join(',' + (pretty ? ws : ' '))
      + (pretty ? ws.slice(0, -4) : ws) +
      ']';
  }
};

// Convert an object to a string, such as {a: 1}.
// This function calls stringify() for each of its values,
// and does not output functions or prototype values.
function stringifyObject(obj, options, level) {
  var out = [];
  var pretty = options.pretty && (Object.keys(obj).length > 2 ||
                                  Object.keys(obj).some(function (k) { return typeof(obj[k]) === 'object' }));
  var ws = pretty ? '\n' + new(Array)(level * 4 + 1).join(' ') : ' ';

  var keys = options.showHidden ? Object.keys(obj) : Object.getOwnPropertyNames(obj);
  keys.forEach(function (k) {
    if (Object.prototype.hasOwnProperty.call(obj, k)
        && !(obj[k] instanceof Function && options.hideFunctions)) {
      out.push(eyes.stylize(k, options.styles.key, options.styles) + ': ' +
               stringify(obj[k], options));
    }
  });

  if (out.length === 0) {
    return '{}';
  } else {
    return "{" + ws
      + out.join(',' + (pretty ? ws : ' '))
      + (pretty ? ws.slice(0, -4) : ws) +
      "}";
  }
};

// A better `typeof`
function typeOf(value) {
  var s = typeof(value),
      types = [Object, Array, String, RegExp, Number, Function, Boolean, Date];

  if (s === 'object' || s === 'function') {
    if (value) {
      types.forEach(function (t) {
        if (value instanceof t) { s = t.name.toLowerCase() }
      });
    } else { s = 'null' }
  }
  return s;
}

function merge(/* variable args */) {
  var objs = Array.prototype.slice.call(arguments);
  var target = {};

  objs.forEach(function (o) {
    Object.keys(o).forEach(function (k) {
      if (k === 'styles') {
        if (! o.styles) {
          target.styles = false;
        } else {
          target.styles = {}
          for (var s in o.styles) {
            target.styles[s] = o.styles[s];
          }
        }
      } else {
        target[k] = o[k];
      }
    });
  });
  return target;
}
 at SyntaxError: Octal literal in strict mode (53:56)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readEscapedChar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:3023:16)
    at Parser.pp$7.readString (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2935:23)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2724:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1622:14)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/docparse-supplier-nge/node_modules/docparse-supplier-nge/index.js. Coverage (Term): 53% Coverage (LOC): 50%
*- File /root/Targets/docparse-supplier-nge/node_modules/docparse-supplier-nge/scraperProcessData.js. Coverage (Term): 7% Coverage (LOC): 7%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
