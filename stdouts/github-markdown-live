/root/Targets/github-markdown-live
└─┬ github-markdown-live@1.0.6 
  ├─┬ express@4.13.4 
  │ ├─┬ accepts@1.2.13 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ └── negotiator@0.5.3 
  │ ├── array-flatten@1.1.1 
  │ ├── content-disposition@0.5.1 
  │ ├── content-type@1.0.4 
  │ ├── cookie@0.1.5 
  │ ├── cookie-signature@1.0.6 
  │ ├─┬ debug@2.2.0 
  │ │ └── ms@0.7.1 
  │ ├── depd@1.1.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.7.0 
  │ ├─┬ finalhandler@0.4.1 
  │ │ └── unpipe@1.0.0 
  │ ├── fresh@0.3.0 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@1.0.10 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.0.5 
  │ ├── qs@4.0.0 
  │ ├── range-parser@1.0.3 
  │ ├─┬ send@0.13.1 
  │ │ ├── destroy@1.0.4 
  │ │ ├─┬ http-errors@1.3.1 
  │ │ │ └── inherits@2.0.3 
  │ │ ├── mime@1.3.4 
  │ │ └── statuses@1.2.1 
  │ ├─┬ serve-static@1.10.3 
  │ │ └── send@0.13.2 
  │ ├─┬ type-is@1.6.15 
  │ │ └── media-typer@0.3.0 
  │ ├── utils-merge@1.0.0 
  │ └── vary@1.0.1 
  ├─┬ socket.io@1.4.8 
  │ ├─┬ engine.io@1.6.11 
  │ │ ├─┬ accepts@1.1.4 
  │ │ │ ├─┬ mime-types@2.0.14 
  │ │ │ │ └── mime-db@1.12.0 
  │ │ │ └── negotiator@0.4.9 
  │ │ ├── base64id@0.1.0 
  │ │ ├─┬ engine.io-parser@1.2.4 
  │ │ │ ├── after@0.8.1 
  │ │ │ ├── arraybuffer.slice@0.0.6 
  │ │ │ ├── base64-arraybuffer@0.1.2 
  │ │ │ ├── blob@0.0.4 
  │ │ │ ├── has-binary@0.1.6 
  │ │ │ └── utf8@2.1.0 
  │ │ └─┬ ws@1.1.0 
  │ │   ├── options@0.0.6 
  │ │   └── ultron@1.0.2 
  │ ├─┬ has-binary@0.1.7 
  │ │ └── isarray@0.0.1 
  │ ├─┬ socket.io-adapter@0.4.0 
  │ │ └─┬ socket.io-parser@2.2.2 
  │ │   ├── debug@0.7.4 
  │ │   └── json3@3.2.6 
  │ ├─┬ socket.io-client@1.4.8 
  │ │ ├── backo2@1.0.2 
  │ │ ├── component-bind@1.0.0 
  │ │ ├── component-emitter@1.2.0 
  │ │ ├─┬ engine.io-client@1.6.11 
  │ │ │ ├── component-inherit@0.0.3 
  │ │ │ ├── has-cors@1.1.0 
  │ │ │ ├── parsejson@0.0.1 
  │ │ │ ├── parseqs@0.0.2 
  │ │ │ ├── ws@1.0.1 
  │ │ │ ├── xmlhttprequest-ssl@1.5.1 
  │ │ │ └── yeast@0.1.2 
  │ │ ├── indexof@0.0.1 
  │ │ ├── object-component@0.0.3 
  │ │ ├─┬ parseuri@0.0.4 
  │ │ │ └─┬ better-assert@1.0.2 
  │ │ │   └── callsite@1.0.0 
  │ │ └── to-array@0.1.4 
  │ └─┬ socket.io-parser@2.2.6 
  │   ├── benchmark@1.0.0 
  │   ├── component-emitter@1.1.2 
  │   └── json3@3.3.2 
  └─┬ yargs@4.2.0 
    ├── camelcase@2.1.1 
    ├─┬ cliui@3.2.0 
    │ ├─┬ strip-ansi@3.0.1 
    │ │ └── ansi-regex@2.1.1 
    │ └── wrap-ansi@2.1.0 
    ├── decamelize@1.2.0 
    ├── lodash.assign@4.2.0 
    ├─┬ os-locale@1.4.0 
    │ └─┬ lcid@1.0.0 
    │   └── invert-kv@1.0.0 
    ├─┬ pkg-conf@1.1.3 
    │ ├─┬ find-up@1.1.2 
    │ │ ├── path-exists@2.1.0 
    │ │ └─┬ pinkie-promise@2.0.1 
    │ │   └── pinkie@2.0.4 
    │ ├─┬ load-json-file@1.1.0 
    │ │ ├── graceful-fs@4.1.11 
    │ │ ├─┬ parse-json@2.2.0 
    │ │ │ └─┬ error-ex@1.3.1 
    │ │ │   └── is-arrayish@0.2.1 
    │ │ ├── pify@2.3.0 
    │ │ └─┬ strip-bom@2.0.0 
    │ │   └── is-utf8@0.2.1 
    │ ├── object-assign@4.1.1 
    │ └── symbol@0.2.3 
    ├─┬ read-pkg-up@1.0.1 
    │ └─┬ read-pkg@1.1.0 
    │   ├─┬ normalize-package-data@2.4.0 
    │   │ ├── hosted-git-info@2.5.0 
    │   │ ├─┬ is-builtin-module@1.0.0 
    │   │ │ └── builtin-modules@1.1.1 
    │   │ ├── semver@5.4.1 
    │   │ └─┬ validate-npm-package-license@3.0.1 
    │   │   ├─┬ spdx-correct@1.0.2 
    │   │   │ └── spdx-license-ids@1.2.2 
    │   │   └── spdx-expression-parse@1.0.4 
    │   └── path-type@1.1.0 
    ├── require-main-filename@1.0.1 
    ├─┬ string-width@1.0.2 
    │ ├── code-point-at@1.1.0 
    │ └─┬ is-fullwidth-code-point@1.0.0 
    │   └── number-is-nan@1.0.1 
    ├── window-size@0.2.0 
    ├── y18n@3.2.1 
    └─┬ yargs-parser@2.4.1 
      └── camelcase@3.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/github-markdown-live/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0643 took 3.0684s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
'use strict'
const express = require('express')
    , https   = require('https')
    , http    = require('http')
    , path    = require('path')
    , fs      = require('fs')

const app    = express()
    , server = http.Server(app)
    , io     = require('socket.io')(server)

const argv = require('yargs')
               .usage('Usage: $0 -p [port] -a [authentication] -f [markdown file]')

               .alias('a', 'authentication')
               .describe('a', 'Authentication: [token] (OAuth) or [user:token] (Basic)')

               .alias('f', 'file')
               .describe('f', 'Markdown file to watch and render')

               .alias('d', 'debug')
               .describe('d', 'Debugs the generated output')

               .alias('p', 'port')
               .demand(['f'])
               .argv

const file = path.resolve(argv.file)

let dateString  = date => (date || new Date()).toLocaleTimeString('en-US', { hour12: false })
  , datePadding = ' -- '.repeat(dateString().length / 4)


app.use(express.static(path.resolve(__dirname, 'public')))
app.get('/', function(req, res){
  res.sendFile('index.html', { root: __dirname })
})


let setOptions = (contentLength, authorization) => {
  let options = {
    hostname: 'api.github.com',
    port: 443,
    path: '/markdown',
    method: 'POST',
    headers: {
      'User-Agent':     'Github-Markdown-Live-App',
      'Connection':     'close',
      'Accept':         'application/vnd.github.v3+json',
      'Content-Type':   'application/json',
      'Content-Length': contentLength,
    }
  }

  if (authorization) {
    if (authorization.split(':').length === 2) 
      options.headers.Authorization = `Basic ${new Buffer(authorization).toString('base64')}`
    else
      options.headers.Authorization = `token ${authorization}`
  }

  return options
}

let parseMarkdown = (content) => {
  const body = JSON.stringify({ text: content, mode: 'gfm' })

  let req = https.request(setOptions(body.length, argv.authentication), (res) => {
    var markdown = ''
    let rateLimitReset = new Date(parseInt(res.headers['x-ratelimit-reset']) * 1000)
    console.info(`[${dateString()}] Status code:       ${res.statusCode}`)
    console.info(`[${datePadding }] Request limit:     ${res.headers['x-ratelimit-limit']}`)
    console.info(`[${datePadding }] Request remaining: ${res.headers['x-ratelimit-remaining']}`)

    if (rateLimitReset.getTime())
      console.info(`[${datePadding }] Request reset:     ${dateString(rateLimitReset)}`)

    res.setEncoding('utf8')
    res.on('data', (chunk) => {
      markdown += chunk.toString()
    })
    res.on('end', () => {
      if (argv.debug) console.log(markdown)
      console.info(`[${datePadding}] Markdown fetched`)
      io.emit('markdown', markdown.replace(/(<br>)?<br>/g, '$1'))
    })
  })

  req.on('error', (err) => {
    console.error(`[${dateString()}] Problem with request: ${err.message}`)
  })

  req.write(body)
  req.end()
}

let readAndParse = () => {
  const content = fs.readFileSync(file, 'utf8')
  parseMarkdown(content)
}

fs.watchFile(file, (curr) => {
  console.info(`[${dateString()}] File modified`)
  readAndParse()
})

io.on('connection', function(socket){
  console.info(`[${datePadding}] User connected`)
  readAndParse()
})

server.listen(argv.port || 3000, () => {
  console.log(`[${datePadding}] Listening on *:${argv.port || 3000}`)
})
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
