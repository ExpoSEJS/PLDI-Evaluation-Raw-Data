/root/Targets/fetch-fic
└─┬ fetch-fic@3.7.0 
  ├── @iarna/lib@1.0.2 
  ├─┬ @iarna/rtf-to-html@1.0.3 
  │ └── rtf-parser@1.1.0 
  ├─┬ @iarna/toml@1.4.0 
  │ └── toml-j0.4@1.1.1 
  ├── @iarna/word-count@1.0.3 
  ├─┬ are-we-there-yet@1.1.4 
  │ └── delegates@1.0.0 
  ├── bluebird@3.5.0 
  ├── buffer-signature@1.0.0 
  ├─┬ cheerio@1.0.0-rc.2 
  │ ├─┬ css-select@1.2.0 
  │ │ ├── boolbase@1.0.0 
  │ │ ├── css-what@2.1.0 
  │ │ ├── domutils@1.5.1 
  │ │ └── nth-check@1.0.1 
  │ ├─┬ dom-serializer@0.1.0 
  │ │ └── domelementtype@1.1.3 
  │ ├── entities@1.1.1 
  │ ├─┬ htmlparser2@3.9.2 
  │ │ ├── domelementtype@1.3.0 
  │ │ └── domhandler@2.4.1 
  │ └── lodash@4.17.4 
  ├── color-ops@2.0.0 
  ├── comma-number@2.0.0 
  ├─┬ concat-stream@1.6.0 
  │ ├── inherits@2.0.3 
  │ └── typedarray@0.0.6 
  ├─┬ css-parse@2.0.0 
  │ └─┬ css@2.2.1 
  │   ├─┬ source-map@0.1.43 
  │   │ └── amdefine@1.0.1 
  │   ├─┬ source-map-resolve@0.3.1 
  │   │ ├── atob@1.1.3 
  │   │ ├── resolve-url@0.2.1 
  │   │ └── source-map-url@0.3.0 
  │   └── urix@0.1.0 
  ├─┬ fs-write-stream-atomic@1.0.10 
  │ ├── graceful-fs@4.1.11 
  │ ├── iferr@0.1.5 
  │ └── imurmurhash@0.1.4 
  ├─┬ gauge@2.7.4 
  │ ├── aproba@1.2.0 
  │ ├── console-control-strings@1.1.0 
  │ ├── has-unicode@2.0.1 
  │ ├── object-assign@4.1.1 
  │ ├─┬ string-width@1.0.2 
  │ │ ├── code-point-at@1.1.0 
  │ │ └─┬ is-fullwidth-code-point@1.0.0 
  │ │   └── number-is-nan@1.0.1 
  │ ├─┬ strip-ansi@3.0.1 
  │ │ └── ansi-regex@2.1.1 
  │ └── wide-align@1.1.2 
  ├── html-escape@2.0.0 
  ├── iconv-lite@0.4.19 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  ├─┬ node-fetch-npm@2.0.2 
  │ ├── encoding@0.1.12 
  │ └── json-parse-better-errors@1.0.1 
  ├─┬ parse5@3.0.2 
  │ └── @types/node@6.0.88 
  ├── promise-inflight@1.0.1 
  ├─┬ pump@1.0.2 
  │ ├── end-of-stream@1.4.0 
  │ └─┬ once@1.4.0 
  │   └── wrappy@1.0.2 
  ├── qw@1.0.1 
  ├─┬ readable-stream@2.3.3 
  │ ├── core-util-is@1.0.2 
  │ ├── isarray@1.0.0 
  │ ├── process-nextick-args@1.0.7 
  │ ├── string_decoder@1.0.3 
  │ └── util-deprecate@1.0.2 
  ├── safe-buffer@5.1.1 
  ├─┬ sanitize-html@1.14.1 
  │ ├── regexp-quote@0.0.0 
  │ └── xtend@4.0.1 
  ├── signal-exit@3.0.2 
  ├─┬ streampub@1.8.0 
  │ ├─┬ mime-types@2.1.17 
  │ │ └── mime-db@1.30.0 
  │ ├── uuid@2.0.3 
  │ ├── xml@1.0.1 
  │ ├── xmlserializer@0.6.0 
  │ └─┬ zip-stream@1.2.0 
  │   ├─┬ archiver-utils@1.3.0 
  │   │ ├─┬ glob@7.1.2 
  │   │ │ ├── fs.realpath@1.0.0 
  │   │ │ ├── inflight@1.0.6 
  │   │ │ ├─┬ minimatch@3.0.4 
  │   │ │ │ └─┬ brace-expansion@1.1.8 
  │   │ │ │   ├── balanced-match@1.0.0 
  │   │ │ │   └── concat-map@0.0.1 
  │   │ │ └── path-is-absolute@1.0.1 
  │   │ ├── lazystream@1.0.0 
  │   │ └─┬ normalize-path@2.1.1 
  │   │   └── remove-trailing-separator@1.1.0 
  │   └─┬ compress-commons@1.2.0 
  │     ├── buffer-crc32@0.2.13 
  │     └─┬ crc32-stream@2.0.0 
  │       └── crc@3.5.0 
  ├─┬ tough-cookie@2.3.3 
  │ └── punycode@1.4.1 
  ├── uuid@3.1.0 
  ├─┬ wordcount@1.1.1 
  │ └─┬ match-words@0.1.1 
  │   └── word-regex@0.1.2 
  ├─┬ xml2js@0.4.19 
  │ ├── sax@1.2.4 
  │ └── xmlbuilder@9.0.4 
  └─┬ yargs@6.6.0 
    ├── camelcase@3.0.0 
    ├─┬ cliui@3.2.0 
    │ └── wrap-ansi@2.1.0 
    ├── decamelize@1.2.0 
    ├── get-caller-file@1.0.2 
    ├─┬ os-locale@1.4.0 
    │ └─┬ lcid@1.0.0 
    │   └── invert-kv@1.0.0 
    ├─┬ read-pkg-up@1.0.1 
    │ ├─┬ find-up@1.1.2 
    │ │ ├── path-exists@2.1.0 
    │ │ └─┬ pinkie-promise@2.0.1 
    │ │   └── pinkie@2.0.4 
    │ └─┬ read-pkg@1.1.0 
    │   ├─┬ load-json-file@1.1.0 
    │   │ ├─┬ parse-json@2.2.0 
    │   │ │ └─┬ error-ex@1.3.1 
    │   │ │   └── is-arrayish@0.2.1 
    │   │ ├── pify@2.3.0 
    │   │ └─┬ strip-bom@2.0.0 
    │   │   └── is-utf8@0.2.1 
    │   ├─┬ normalize-package-data@2.4.0 
    │   │ ├── hosted-git-info@2.5.0 
    │   │ ├─┬ is-builtin-module@1.0.0 
    │   │ │ └── builtin-modules@1.1.1 
    │   │ ├── semver@5.4.1 
    │   │ └─┬ validate-npm-package-license@3.0.1 
    │   │   ├─┬ spdx-correct@1.0.2 
    │   │   │ └── spdx-license-ids@1.2.2 
    │   │   └── spdx-expression-parse@1.0.4 
    │   └── path-type@1.1.0 
    ├── require-directory@2.1.1 
    ├── require-main-filename@1.0.1 
    ├── set-blocking@2.0.0 
    ├── which-module@1.0.0 
    ├── y18n@3.2.1 
    └── yargs-parser@4.2.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/fetch-fic/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 34% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.087 took 5.0011s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: 'return' outside of function (7:27) on program 'use strict'
const path = require('path')
const fs = require('fs')
const caller = require('./caller.js')
const libPaths = {}

if (process.__iarna_lib__) return process.__iarna_lib__

module.exports = process.__iarna_lib__ = function () {
  const paths = [].slice.call(arguments, 0)
  const dirname = path.dirname(module.parent.filename)
  const packagepath = getPackageFolder(dirname)
  for (let p of paths) {
    const targetpath = path.resolve(dirname, p)
    if (!libPaths[packagepath]) libPaths[packagepath] = []
    libPaths[packagepath].unshift(targetpath)
    if (path.relative(packagepath, targetpath)[0] == '.') {
      if (!libPaths[targetpath]) libPaths[targetpath] = []
      libPaths[targetpath].unshift(targetpath)
    }
  }
}

function getPackageFolder (current, top) {
  try {
    fs.statSync(path.join(current, 'node_modules'))
    return current
  } catch (ex) {}
  try {
    fs.statSync(path.join(current, 'index.js'))
    return current
  } catch (ex) {}
  const upone = path.resolve(current, '..')
  if (!top) top = current
  if (upone === current) return top

  return getPackageFolder(upone, top)
}

global.use = function use (toLoad) {
  const callerDir = path.dirname(caller())
  for (let dir of Object.keys(libPaths)) {
    if (/^(?:[^.]|$)/.test(path.relative(dir, callerDir))) {
      const oldPaths = module.paths
      module.paths = libPaths[dir]
      const result = module.require(toLoad)
      module.paths = oldPaths
      return result
    }
  }

  throw new Error('Could not find any library paths for the callsite: ' + callerDir)  
}
 at SyntaxError: 'return' outside of function (7:27)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$1.parseReturnStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:831:12)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:699:34)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseIfStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:824:28)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:698:30)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
    at Parser.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:516:17)
    at Object.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:3098:39)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/fetch-fic/node_modules/fetch-fic/index.js. Coverage (Term): 27% Coverage (LOC): 63%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
