/root/Targets/koa-opinion
└─┬ koa-opinion@1.0.1 
  ├── consolidate@0.10.0 
  ├── debug@0.7.4 
  ├── dustjs-helpers@1.1.1 
  ├── dustjs-linkedin@2.2.2 
  ├─┬ koa@0.2.1 
  │ ├─┬ accepts@1.0.0 
  │ │ └── negotiator@0.3.0 
  │ ├── co@3.0.2 
  │ ├── cookies@0.3.8 
  │ ├── debug@0.7.4 
  │ ├── fresh@0.2.0 
  │ ├── keygrip@1.0.0 
  │ ├── koa-compose@2.1.0 
  │ ├── mime@1.2.11 
  │ ├── on-socket-error@1.0.1 
  │ └── type-is@1.0.0 
  ├─┬ koa-compress@1.0.0 
  │ ├── bytes@0.2.1 
  │ └── compressible@0.1.1 
  ├── koa-conditional-get@1.0.1 
  ├── koa-csrf@1.0.0 
  ├─┬ koa-etag@1.2.2 
  │ └── buffer-crc32@0.2.1 
  ├── koa-favicon@1.0.1 
  ├─┬ koa-logger@1.1.0 
  │ ├── bytes@0.2.1 
  │ ├── humanize-number@0.0.2 
  │ └── passthrough-counter@0.0.1 
  ├─┬ koa-mount@1.2.2 
  │ ├── debug@0.7.4 
  │ └── koa-compose@2.1.0 
  ├─┬ koa-ratelimit@1.0.1 
  │ ├── debug@0.7.4 
  │ ├── ms@0.6.2 
  │ ├── ratelimiter@1.0.0 
  │ └── thunkify@0.0.1 
  ├── koa-response-time@1.0.1 
  ├─┬ koa-rewrite@1.0.0 
  │ ├── debug@0.7.4 
  │ └── path-to-regexp@0.0.2 
  ├─┬ koa-route@1.0.2 
  │ ├── debug@0.7.4 
  │ ├── methods@0.1.0 
  │ └── path-to-regexp@0.0.2 
  ├─┬ koa-session@1.2.0 
  │ └── debug@0.7.4 
  ├─┬ koa-static@1.4.2 
  │ ├── debug@0.7.4 
  │ └─┬ koa-send@1.2.2 
  │   └── on-socket-error@1.0.1 
  ├── lodash@2.4.1 
  └── lodash-contrib@241.3.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/koa-opinion/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 28.000000000000004% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","Date","RegExp","join","parseInt","sort"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0516 took 18.4243s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (15:4) on program /**
 * Module dependencies.
 */

var debug = require('debug')('koa:application');
var onSocketError = require('on-socket-error');
var Emitter = require('events').EventEmitter;
var compose = require('koa-compose');
var context = require('./context');
var request = require('./request');
var response = require('./response');
var Cookies = require('cookies');
var Keygrip = require('keygrip');
var accepts = require('accepts');
var assert = require('assert');
var http = require('http');
var co = require('co');

/**
 * Application prototype.
 */

var app = Application.prototype;

/**
 * Expose `Application`.
 */

exports = module.exports = Application;

/**
 * Initialize a new `Application`.
 *
 * @api public
 */

function Application() {
  if (!(this instanceof Application)) return new Application;
  this.env = process.env.NODE_ENV || 'development';
  this.on('error', this.onerror);
  this.outputErrors = 'test' != this.env;
  this.subdomainOffset = 2;
  this.poweredBy = true;
  this.jsonSpaces = 2;
  this.middleware = [];
  this.context = Object.create(context);
  this.request = Object.create(request);
  this.response = Object.create(response);
}

/**
 * Inherit from `Emitter.prototype`.
 */

Application.prototype.__proto__ = Emitter.prototype;

/**
 * Shorthand for:
 *
 *    http.createServer(app.callback()).listen(...)
 *
 * @param {Mixed} ...
 * @return {Server}
 * @api public
 */

app.listen = function(){
  debug('listen');
  var server = http.createServer(this.callback());
  return server.listen.apply(server, arguments);
};

/**
 * Use the given middleware `fn`.
 *
 * @param {GeneratorFunction} fn
 * @return {Application} self
 * @api public
 */

app.use = function(fn){
  assert('GeneratorFunction' == fn.constructor.name, 'app.use() requires a generator function');
  debug('use %s', fn._name || fn.name || '-');
  this.middleware.push(fn);
  return this;
};

/**
 * Return a request handler callback
 * for node's native http server.
 *
 * @return {Function}
 * @api public
 */

app.callback = function(){
  var mw = [respond].concat(this.middleware);
  var gen = compose(mw);
  var fn = co(gen);
  var self = this;

  return function(req, res){
    var ctx = self.createContext(req, res);
    onSocketError(ctx, ctx.onerror);
    fn.call(ctx, ctx.onerror);
  }
};

/**
 * Set signed cookie keys.
 *
 * These are passed to [KeyGrip](https://github.com/jed/keygrip),
 * however you may also pass your own `KeyGrip` instance. For
 * example the following are acceptable:
 *
 *   app.keys = ['im a newer secret', 'i like turtle'];
 *   app.keys = new KeyGrip(['im a newer secret', 'i like turtle'], 'sha256');
 *
 * @param {Array|KeyGrip} keys
 * @api public
 */

app.__defineSetter__('keys', function(keys){
  var ok = Array.isArray(keys) || keys instanceof Keygrip;
  debug('keys %j', keys);
  if (!ok) throw new TypeError('app.keys must be an array or Keygrip');
  if (!(keys instanceof Keygrip)) keys = new Keygrip(keys);
  this._keys = keys;
});

/**
 * Get `Keygrip` instance.
 *
 * @return {Keygrip}
 * @api public
 */

app.__defineGetter__('keys', function(){
  return this._keys;
});

/**
 * Initialize a new context.
 *
 * @api private
 */

app.createContext = function(req, res){
  var context = Object.create(this.context);
  var request = context.request = Object.create(this.request);
  var response = context.response = Object.create(this.response);
  context.app = request.app = response.app = this;
  context.req = request.req = response.req = req;
  context.res = request.res = response.res = res;
  request.ctx = response.ctx = context;
  request.response = response;
  response.request = request;
  context.onerror = context.onerror.bind(context);
  context.originalUrl = request.originalUrl = req.url;
  context.cookies = new Cookies(req, res, this.keys);
  context.accept = request.accept = accepts(req);
  return context;
};

/**
 * Default error handler.
 *
 * @param {Error} err
 * @api private
 */

app.onerror = function(err){
  if (!this.outputErrors) return;
  if (404 == err.status) return;
  console.error(err.stack);
};

/**
 * Response middleware.
 */

function *respond(next){
  if (this.app.poweredBy) this.set('X-Powered-By', 'koa');

  yield *next;

  var res = this.res;
  if (res.headersSent || !res.socket.writable) return;

  var body = this.body;
  var status = this.status = this.status || 404;
  var head = 'HEAD' == this.method;
  var noContent = ~[204, 205, 304].indexOf(status);

  // ignore body
  if (noContent) return res.end();

  // status body
  if (null == body) {
    this.type = 'text';
    body = http.STATUS_CODES[status];
  }

  // Buffer body
  if (Buffer.isBuffer(body)) {
    if (head) return res.end();
    return res.end(body);
  }

  // string body
  if ('string' == typeof body) {
    if (head) return res.end();
    return res.end(body);
  }

  // Stream body
  if ('function' == typeof body.pipe) {
    if (!~body.listeners('error').indexOf(this.onerror)) body.on('error', this.onerror);

    if (head) {
      if (body.close) body.close();
      return res.end();
    }

    return body.pipe(res);
  }

  // body: json
  body = JSON.stringify(body, null, this.app.jsonSpaces);
  this.length = Buffer.byteLength(body);
  if (head) return res.end();
  res.end(body);
}
 at SyntaxError: Unexpected token (15:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/koa-opinion/node_modules/koa-opinion/index.js. Coverage (Term): 18% Coverage (LOC): 20%
*- File /root/Targets/koa-opinion/node_modules/koa-opinion/node_modules/lodash/dist/lodash.js. Coverage (Term): 19% Coverage (LOC): 27%
*- File /root/Targets/koa-opinion/node_modules/koa-opinion/node_modules/koa/index.js. Coverage (Term): 80% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
