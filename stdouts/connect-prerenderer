/root/Targets/connect-prerenderer
└─┬ connect-prerenderer@0.7.2 
  ├─┬ jsdom@8.2.0 
  │ ├── abab@1.0.4 
  │ ├── acorn@2.7.0 
  │ ├── acorn-globals@1.0.9 
  │ ├── array-equal@1.0.0 
  │ ├── cssom@0.3.2 
  │ ├── cssstyle@0.2.37 
  │ ├─┬ escodegen@1.9.0 
  │ │ ├── esprima@3.1.3 
  │ │ ├── estraverse@4.2.0 
  │ │ ├── esutils@2.0.2 
  │ │ ├─┬ optionator@0.8.2 
  │ │ │ ├── deep-is@0.1.3 
  │ │ │ ├── fast-levenshtein@2.0.6 
  │ │ │ ├── levn@0.3.0 
  │ │ │ ├── prelude-ls@1.1.2 
  │ │ │ ├── type-check@0.3.2 
  │ │ │ └── wordwrap@1.0.0 
  │ │ └── source-map@0.5.7 
  │ ├── nwmatcher@1.4.2 
  │ ├── parse5@1.5.1 
  │ ├── sax@1.2.4 
  │ ├── symbol-tree@3.2.2 
  │ ├─┬ tough-cookie@2.3.3 
  │ │ └── punycode@1.4.1 
  │ ├── webidl-conversions@3.0.1 
  │ ├─┬ whatwg-url@1.0.1 
  │ │ └── tr46@0.0.3 
  │ └── xml-name-validator@2.0.1 
  └─┬ request@2.69.0 
    ├── aws-sign2@0.6.0 
    ├── aws4@1.6.0 
    ├─┬ bl@1.0.3 
    │ └─┬ readable-stream@2.0.6 
    │   ├── core-util-is@1.0.2 
    │   ├── inherits@2.0.3 
    │   ├── isarray@1.0.0 
    │   ├── process-nextick-args@1.0.7 
    │   ├── string_decoder@0.10.31 
    │   └── util-deprecate@1.0.2 
    ├── caseless@0.11.0 
    ├─┬ combined-stream@1.0.5 
    │ └── delayed-stream@1.0.0 
    ├── extend@3.0.1 
    ├── forever-agent@0.6.1 
    ├─┬ form-data@1.0.1 
    │ └─┬ async@2.5.0 
    │   └── lodash@4.17.4 
    ├─┬ har-validator@2.0.6 
    │ ├─┬ chalk@1.1.3 
    │ │ ├── ansi-styles@2.2.1 
    │ │ ├── escape-string-regexp@1.0.5 
    │ │ ├─┬ has-ansi@2.0.0 
    │ │ │ └── ansi-regex@2.1.1 
    │ │ ├── strip-ansi@3.0.1 
    │ │ └── supports-color@2.0.0 
    │ ├── commander@2.11.0 
    │ ├─┬ is-my-json-valid@2.16.1 
    │ │ ├── generate-function@2.0.0 
    │ │ ├─┬ generate-object-property@1.2.0 
    │ │ │ └── is-property@1.0.2 
    │ │ ├── jsonpointer@4.0.1 
    │ │ └── xtend@4.0.1 
    │ └─┬ pinkie-promise@2.0.1 
    │   └── pinkie@2.0.4 
    ├─┬ hawk@3.1.3 
    │ ├── boom@2.10.1 
    │ ├── cryptiles@2.0.5 
    │ ├── hoek@2.16.3 
    │ └── sntp@1.0.9 
    ├─┬ http-signature@1.1.1 
    │ ├── assert-plus@0.2.0 
    │ ├─┬ jsprim@1.4.1 
    │ │ ├── assert-plus@1.0.0 
    │ │ ├── extsprintf@1.3.0 
    │ │ ├── json-schema@0.2.3 
    │ │ └─┬ verror@1.10.0 
    │ │   └── assert-plus@1.0.0 
    │ └─┬ sshpk@1.13.1 
    │   ├── asn1@0.2.3 
    │   ├── assert-plus@1.0.0 
    │   ├── bcrypt-pbkdf@1.0.1 
    │   ├─┬ dashdash@1.14.1 
    │   │ └── assert-plus@1.0.0 
    │   ├── ecc-jsbn@0.1.1 
    │   ├─┬ getpass@0.1.7 
    │   │ └── assert-plus@1.0.0 
    │   ├── jsbn@0.1.1 
    │   └── tweetnacl@0.14.5 
    ├── is-typedarray@1.0.0 
    ├── isstream@0.1.2 
    ├── json-stringify-safe@5.0.1 
    ├─┬ mime-types@2.1.17 
    │ └── mime-db@1.30.0 
    ├── node-uuid@1.4.8 
    ├── oauth-sign@0.8.2 
    ├── qs@6.0.4 
    ├── stringstream@0.0.5 
    ├── tough-cookie@2.2.2 
    └── tunnel-agent@0.4.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/connect-prerenderer/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 27% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0575 took 2.9042s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

'use strict';

var path = require('path');
var urlLib = require('url');
var request = require('request');
var jsdom = require('jsdom');
var spawn = require('child_process').spawn;

function filterHeaders(headers) {
  var newHeaders = {};
  for (var key in headers) {
    if (key === 'host' || key === 'cookie' ||
      (key.lastIndexOf('accept', 0) === 0 && key !== 'accept-encoding')) {
      newHeaders[key] = headers[key];
    }
  }
  return newHeaders;
}

function renderURL(url, headers, options, callback) {
  var timeout = (options && options.timeout ? options.timeout : 5000);
  var cookieDomain = options && options.cookieDomain;
  request({
    uri: urlLib.parse(url),
    headers: filterHeaders(headers)
  }, function(err, res, body) {
    if (err) {
      callback(err);
      return;
    }
    if (res.statusCode !== 200) {
      callback(res.statusCode);
      return;
    }
    var document;
    var timer = null;
    var done = function() {
      if (!timer) return;

      clearTimeout(timer);
      timer = null;
      var content;
      try {
        document.body.setAttribute('data-prerendered', 'true');
        content = jsdom.serializeDocument(document);
      } catch (err) {
        return callback(err);
      }
      callback(null, content, res.headers);
    };

    timer = setTimeout(function() {
      console.error('prerenderer[err]: Timouted after ' + timeout + 'ms…');
      done();
    }, timeout);
    try {
      document = jsdom.jsdom(body, {
        url: url,
        cookie: headers.cookie,
        cookieDomain: cookieDomain,
        features: {
          FetchExternalResources: ['script'],
          ProcessExternalResources: ['script']
        },
        created: function(err, window) {
          if (err) return;
          if (options && options.attachConsole) {
            window.console.log = function() {
              Array.prototype.unshift.call(arguments, 'prerenderer[out]:');
              console.error.apply(console, arguments);
            };
            window.console.error = function() {
              Array.prototype.unshift.call(arguments, 'prerenderer[err]:');
              console.error.apply(console, arguments);
            };
          }
        },
        done: done
      });
      document.onprerendered = done;
    } catch (err) {
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
      callback(err);
      return;
    }
  });
}

module.exports.renderURL = renderURL;
module.exports.subprocessRenderURL = function subprocessRenderURL(url, headers, options, callback) {
  var renderer = spawn(process.argv[0], [path.join(__dirname, 'urlRenderer.js'), JSON.stringify([url, headers, options])], {
    stdio: ['ignore', 'pipe', 'pipe']
  });

  renderer.stderr.pipe(process.stderr);

  var allData = new Buffer('');
  renderer.stdout.on('data', function(data) {
    allData = Buffer.concat([allData, data]);
  });

  var timeout = (options && options.timeout ? options.timeout : 5000) + 1000;
  var timer = null;

  function done(err) {
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    renderer.kill('SIGKILL');

    var args;
    try {
      args = JSON.parse(allData);
    } catch (e) {
      args = [e];
    }

    if (args[0] && !(args[0] instanceof Error)) {
      args[0] = new Error(args[0]);
    } else if (err) {
      args[0] = err;
    }

    callback.apply(null, args);
  }

  timer = setTimeout(function() {
    console.log('Timouted after ' + timeout + ' ms');
    done();
  }, timeout);

  renderer.stdout.on('end', done);

  renderer.stdout.on('error', function(err) {
    renderer.kill('SIGKILL');
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    callback(err);
  });
};

if (module.parent) {
  return;
}

var args = [];

try {
  args = JSON.parse(process.argv[2] || '[]');
} catch (e) {
  console.log(JSON.stringify([e.stack]));
  process.exit(1);
}

if (args.length !== 3) {
  console.log('["Bad argument"]');
  process.exit(1);
}

args.push(function(err, content, headers) {
  console.log(JSON.stringify([err && err.stack, content, headers]));
  process.exit(0);
});

renderURL.apply(null, args);
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/connect-prerenderer/node_modules/connect-prerenderer/connect-prerenderer.js. Coverage (Term): 6% Coverage (LOC): 9%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
