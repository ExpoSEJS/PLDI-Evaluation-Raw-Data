/root/Targets/dollar
└─┬ dollar@0.3.1 
  ├─┬ cheerio@0.22.0 
  │ ├─┬ css-select@1.2.0 
  │ │ ├── boolbase@1.0.0 
  │ │ ├── css-what@2.1.0 
  │ │ ├── domutils@1.5.1 
  │ │ └── nth-check@1.0.1 
  │ ├─┬ dom-serializer@0.1.0 
  │ │ └── domelementtype@1.1.3 
  │ ├── entities@1.1.1 
  │ ├─┬ htmlparser2@3.9.2 
  │ │ ├── domelementtype@1.3.0 
  │ │ ├── domhandler@2.4.1 
  │ │ ├── inherits@2.0.3 
  │ │ └─┬ readable-stream@2.3.3 
  │ │   ├── core-util-is@1.0.2 
  │ │   ├── isarray@1.0.0 
  │ │   ├── process-nextick-args@1.0.7 
  │ │   ├── safe-buffer@5.1.1 
  │ │   ├── string_decoder@1.0.3 
  │ │   └── util-deprecate@1.0.2 
  │ ├── lodash.assignin@4.2.0 
  │ ├── lodash.bind@4.2.1 
  │ ├── lodash.defaults@4.2.0 
  │ ├── lodash.filter@4.6.0 
  │ ├── lodash.flatten@4.4.0 
  │ ├── lodash.foreach@4.5.0 
  │ ├── lodash.map@4.6.0 
  │ ├── lodash.merge@4.6.0 
  │ ├── lodash.pick@4.4.0 
  │ ├── lodash.reduce@4.6.0 
  │ ├── lodash.reject@4.6.0 
  │ └── lodash.some@4.6.0 
  ├─┬ encoding@0.1.12 
  │ └── iconv-lite@0.4.19 
  ├─┬ jsdom@9.9.1 
  │ ├── abab@1.0.4 
  │ ├── acorn@2.7.0 
  │ ├── acorn-globals@1.0.9 
  │ ├── array-equal@1.0.0 
  │ ├── content-type-parser@1.0.1 
  │ ├── cssom@0.3.2 
  │ ├── cssstyle@0.2.37 
  │ ├─┬ escodegen@1.9.0 
  │ │ ├── esprima@3.1.3 
  │ │ ├── estraverse@4.2.0 
  │ │ ├── esutils@2.0.2 
  │ │ ├─┬ optionator@0.8.2 
  │ │ │ ├── deep-is@0.1.3 
  │ │ │ ├── fast-levenshtein@2.0.6 
  │ │ │ ├── levn@0.3.0 
  │ │ │ ├── prelude-ls@1.1.2 
  │ │ │ ├── type-check@0.3.2 
  │ │ │ └── wordwrap@1.0.0 
  │ │ └── source-map@0.5.7 
  │ ├── html-encoding-sniffer@1.0.1 
  │ ├── nwmatcher@1.4.2 
  │ ├── parse5@1.5.1 
  │ ├── sax@1.2.4 
  │ ├── symbol-tree@3.2.2 
  │ ├─┬ tough-cookie@2.3.3 
  │ │ └── punycode@1.4.1 
  │ ├── webidl-conversions@3.0.1 
  │ ├─┬ whatwg-encoding@1.0.1 
  │ │ └── iconv-lite@0.4.13 
  │ ├─┬ whatwg-url@4.8.0 
  │ │ └── tr46@0.0.3 
  │ └── xml-name-validator@2.0.1 
  ├── lodash@4.17.4 
  ├── q@1.4.1 
  ├─┬ q-io@1.13.2 
  │ ├─┬ collections@0.2.2 
  │ │ └── weak-map@1.0.0 
  │ ├── mime@1.4.1 
  │ ├── mimeparse@0.1.4 
  │ ├── qs@1.2.2 
  │ └── url2@0.0.0 
  └─┬ request@2.79.0 
    ├── aws-sign2@0.6.0 
    ├── aws4@1.6.0 
    ├── caseless@0.11.0 
    ├─┬ combined-stream@1.0.5 
    │ └── delayed-stream@1.0.0 
    ├── extend@3.0.1 
    ├── forever-agent@0.6.1 
    ├─┬ form-data@2.1.4 
    │ └── asynckit@0.4.0 
    ├─┬ har-validator@2.0.6 
    │ ├─┬ chalk@1.1.3 
    │ │ ├── ansi-styles@2.2.1 
    │ │ ├── escape-string-regexp@1.0.5 
    │ │ ├─┬ has-ansi@2.0.0 
    │ │ │ └── ansi-regex@2.1.1 
    │ │ ├── strip-ansi@3.0.1 
    │ │ └── supports-color@2.0.0 
    │ ├── commander@2.11.0 
    │ ├─┬ is-my-json-valid@2.16.1 
    │ │ ├── generate-function@2.0.0 
    │ │ ├─┬ generate-object-property@1.2.0 
    │ │ │ └── is-property@1.0.2 
    │ │ ├── jsonpointer@4.0.1 
    │ │ └── xtend@4.0.1 
    │ └─┬ pinkie-promise@2.0.1 
    │   └── pinkie@2.0.4 
    ├─┬ hawk@3.1.3 
    │ ├── boom@2.10.1 
    │ ├── cryptiles@2.0.5 
    │ ├── hoek@2.16.3 
    │ └── sntp@1.0.9 
    ├─┬ http-signature@1.1.1 
    │ ├── assert-plus@0.2.0 
    │ ├─┬ jsprim@1.4.1 
    │ │ ├── assert-plus@1.0.0 
    │ │ ├── extsprintf@1.3.0 
    │ │ ├── json-schema@0.2.3 
    │ │ └─┬ verror@1.10.0 
    │ │   └── assert-plus@1.0.0 
    │ └─┬ sshpk@1.13.1 
    │   ├── asn1@0.2.3 
    │   ├── assert-plus@1.0.0 
    │   ├── bcrypt-pbkdf@1.0.1 
    │   ├─┬ dashdash@1.14.1 
    │   │ └── assert-plus@1.0.0 
    │   ├── ecc-jsbn@0.1.1 
    │   ├─┬ getpass@0.1.7 
    │   │ └── assert-plus@1.0.0 
    │   ├── jsbn@0.1.1 
    │   └── tweetnacl@0.14.5 
    ├── is-typedarray@1.0.0 
    ├── isstream@0.1.2 
    ├── json-stringify-safe@5.0.1 
    ├─┬ mime-types@2.1.17 
    │ └── mime-db@1.30.0 
    ├── oauth-sign@0.8.2 
    ├── qs@6.3.2 
    ├── stringstream@0.0.5 
    ├── tunnel-agent@0.4.3 
    └── uuid@3.1.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/dollar/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 52% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","Error","Number","toString","create","sort","reduce","join","RegExp","max","call","bind","binding","ArrayBuffer","DataView","Map","resolve","Set","WeakMap","Array","Object","freeze","toUpperCase"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0366 took 36.5972s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');
var utils = require('./utils');



///--- Globals

var HASH_ALGOS = utils.HASH_ALGOS;
var PK_ALGOS = utils.PK_ALGOS;
var HttpSignatureError = utils.HttpSignatureError;
var InvalidAlgorithmError = utils.InvalidAlgorithmError;
var validateAlgorithm = utils.validateAlgorithm;

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};


///--- Specific Errors


function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);

function StrictParsingError(message) {
  HttpSignatureError.call(this, message, StrictParsingError);
}
util.inherits(StrictParsingError, HttpSignatureError);

///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "digest"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   *                   - strict: should enforce latest spec parsing
   *                             (default: false).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {StrictParsingError} if old attributes are used in strict parsing
   *                              mode.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }
    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    try {
      validateAlgorithm(parsed.params.algorithm);
    } catch (e) {
      if (e instanceof InvalidAlgorithmError)
        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
          'supported'));
      else
        throw (e);
    }

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h === 'request-line') {
        if (!options.strict) {
          /*
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          parsed.signingString +=
            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw (new StrictParsingError('request-line is not a valid header ' +
            'with strict parsing enabled.'));
        }
      } else if (h === '(request-target)') {
        parsed.signingString +=
          '(request-target): ' + request.method.toLowerCase() + ' ' +
          request.url;
      } else {
        var value = request.headers[h];
        if (value === undefined)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/dollar/node_modules/dollar/lib/dollar.js. Coverage (Term): 13% Coverage (LOC): 14%
*- File /root/Targets/dollar/node_modules/q/q.js. Coverage (Term): 18% Coverage (LOC): 27%
*- File /root/Targets/dollar/node_modules/cheerio/index.js. Coverage (Term): 96% Coverage (LOC): 100%
*- File /root/Targets/dollar/node_modules/cheerio/lib/cheerio.js. Coverage (Term): 33% Coverage (LOC): 43%
*- File /root/Targets/dollar/node_modules/cheerio/lib/parse.js. Coverage (Term): 13% Coverage (LOC): 18%
*- File /root/Targets/dollar/node_modules/htmlparser2/lib/index.js. Coverage (Term): 37% Coverage (LOC): 62%
*- File /root/Targets/dollar/node_modules/htmlparser2/lib/Parser.js. Coverage (Term): 22% Coverage (LOC): 46%
*- File /root/Targets/dollar/node_modules/htmlparser2/lib/Tokenizer.js. Coverage (Term): 24% Coverage (LOC): 21%
*- File /root/Targets/dollar/node_modules/entities/lib/decode_codepoint.js. Coverage (Term): 24% Coverage (LOC): 26%
*- File /root/Targets/dollar/node_modules/inherits/inherits.js. Coverage (Term): 74% Coverage (LOC): 88%
*- File /root/Targets/dollar/node_modules/domhandler/index.js. Coverage (Term): 16% Coverage (LOC): 25%
*- File /root/Targets/dollar/node_modules/domelementtype/index.js. Coverage (Term): 54% Coverage (LOC): 93%
*- File /root/Targets/dollar/node_modules/domhandler/lib/node.js. Coverage (Term): 45% Coverage (LOC): 68%
*- File /root/Targets/dollar/node_modules/domhandler/lib/element.js. Coverage (Term): 70% Coverage (LOC): 80%
*- File /root/Targets/dollar/node_modules/cheerio/lib/utils.js. Coverage (Term): 27% Coverage (LOC): 56%
*- File /root/Targets/dollar/node_modules/dom-serializer/index.js. Coverage (Term): 22% Coverage (LOC): 53%
*- File /root/Targets/dollar/node_modules/dom-serializer/node_modules/domelementtype/index.js. Coverage (Term): 53% Coverage (LOC): 92%
*- File /root/Targets/dollar/node_modules/entities/index.js. Coverage (Term): 55% Coverage (LOC): 83%
*- File /root/Targets/dollar/node_modules/entities/lib/encode.js. Coverage (Term): 61% Coverage (LOC): 79%
*- File /root/Targets/dollar/node_modules/entities/lib/decode.js. Coverage (Term): 65% Coverage (LOC): 72%
*- File /root/Targets/dollar/node_modules/lodash.assignin/index.js. Coverage (Term): 53% Coverage (LOC): 69%
*- File /root/Targets/dollar/node_modules/lodash.bind/index.js. Coverage (Term): 19% Coverage (LOC): 28%
*- File /root/Targets/dollar/node_modules/lodash.foreach/index.js. Coverage (Term): 18% Coverage (LOC): 36%
*- File /root/Targets/dollar/node_modules/lodash.defaults/index.js. Coverage (Term): 14% Coverage (LOC): 28%
*- File /root/Targets/dollar/node_modules/cheerio/lib/api/attributes.js. Coverage (Term): 9% Coverage (LOC): 12%
*- File /root/Targets/dollar/node_modules/cheerio/lib/static.js. Coverage (Term): 14% Coverage (LOC): 23%
*- File /root/Targets/dollar/node_modules/css-select/index.js. Coverage (Term): 51% Coverage (LOC): 70%
*- File /root/Targets/dollar/node_modules/css-select/lib/pseudos.js. Coverage (Term): 12% Coverage (LOC): 22%
*- File /root/Targets/dollar/node_modules/domutils/index.js. Coverage (Term): 96% Coverage (LOC): 100%
*- File /root/Targets/dollar/node_modules/domutils/lib/stringify.js. Coverage (Term): 33% Coverage (LOC): 50%
*- File /root/Targets/dollar/node_modules/domutils/lib/traversal.js. Coverage (Term): 33% Coverage (LOC): 67%
*- File /root/Targets/dollar/node_modules/domutils/lib/manipulation.js. Coverage (Term): 11% Coverage (LOC): 18%
*- File /root/Targets/dollar/node_modules/domutils/lib/querying.js. Coverage (Term): 10% Coverage (LOC): 24%
*- File /root/Targets/dollar/node_modules/domutils/lib/legacy.js. Coverage (Term): 11% Coverage (LOC): 26%
*- File /root/Targets/dollar/node_modules/domutils/lib/helpers.js. Coverage (Term): 10% Coverage (LOC): 16%
*- File /root/Targets/dollar/node_modules/nth-check/index.js. Coverage (Term): 74% Coverage (LOC): 88%
*- File /root/Targets/dollar/node_modules/nth-check/parse.js. Coverage (Term): 17% Coverage (LOC): 17%
*- File /root/Targets/dollar/node_modules/nth-check/compile.js. Coverage (Term): 18% Coverage (LOC): 18%
*- File /root/Targets/dollar/node_modules/boolbase/index.js. Coverage (Term): 53% Coverage (LOC): 75%
*- File /root/Targets/dollar/node_modules/css-select/lib/attributes.js. Coverage (Term): 7% Coverage (LOC): 17%
*- File /root/Targets/dollar/node_modules/css-select/lib/compile.js. Coverage (Term): 19% Coverage (LOC): 24%
*- File /root/Targets/dollar/node_modules/css-what/index.js. Coverage (Term): 11% Coverage (LOC): 24%
*- File /root/Targets/dollar/node_modules/css-select/lib/general.js. Coverage (Term): 18% Coverage (LOC): 26%
*- File /root/Targets/dollar/node_modules/css-select/lib/sort.js. Coverage (Term): 13% Coverage (LOC): 26%
*- File /root/Targets/dollar/node_modules/lodash.merge/index.js. Coverage (Term): 27% Coverage (LOC): 29%
*- File /root/Targets/dollar/node_modules/lodash.some/index.js. Coverage (Term): 25% Coverage (LOC): 29%
*- File /root/Targets/dollar/node_modules/cheerio/lib/api/traversing.js. Coverage (Term): 11% Coverage (LOC): 21%
*- File /root/Targets/dollar/node_modules/lodash.reject/index.js. Coverage (Term): 25% Coverage (LOC): 29%
*- File /root/Targets/dollar/node_modules/lodash.filter/index.js. Coverage (Term): 25% Coverage (LOC): 29%
*- File /root/Targets/dollar/node_modules/lodash.reduce/index.js. Coverage (Term): 25% Coverage (LOC): 29%
*- File /root/Targets/dollar/node_modules/cheerio/lib/api/manipulation.js. Coverage (Term): 10% Coverage (LOC): 16%
*- File /root/Targets/dollar/node_modules/lodash.flatten/index.js. Coverage (Term): 27% Coverage (LOC): 43%
*- File /root/Targets/dollar/node_modules/cheerio/lib/api/css.js. Coverage (Term): 13% Coverage (LOC): 19%
*- File /root/Targets/dollar/node_modules/lodash.pick/index.js. Coverage (Term): 21% Coverage (LOC): 32%
*- File /root/Targets/dollar/node_modules/cheerio/lib/api/forms.js. Coverage (Term): 18% Coverage (LOC): 18%
*- File /root/Targets/dollar/node_modules/lodash.map/index.js. Coverage (Term): 25% Coverage (LOC): 29%
*- File /root/Targets/dollar/node_modules/request/index.js. Coverage (Term): 24% Coverage (LOC): 28%
*- File /root/Targets/dollar/node_modules/extend/index.js. Coverage (Term): 13% Coverage (LOC): 16%
*- File /root/Targets/dollar/node_modules/request/lib/cookies.js. Coverage (Term): 33% Coverage (LOC): 50%
*- File /root/Targets/dollar/node_modules/tough-cookie/lib/cookie.js. Coverage (Term): 14% Coverage (LOC): 21%
*- File /root/Targets/dollar/node_modules/tough-cookie/lib/pubsuffix.js. Coverage (Term): 98% Coverage (LOC): 99%
*- File /root/Targets/dollar/node_modules/tough-cookie/lib/store.js. Coverage (Term): 41% Coverage (LOC): 74%
*- File /root/Targets/dollar/node_modules/tough-cookie/lib/memstore.js. Coverage (Term): 17% Coverage (LOC): 26%
*- File /root/Targets/dollar/node_modules/tough-cookie/lib/permuteDomain.js. Coverage (Term): 25% Coverage (LOC): 27%
*- File /root/Targets/dollar/node_modules/tough-cookie/lib/pathMatch.js. Coverage (Term): 28% Coverage (LOC): 28%
*- File /root/Targets/dollar/node_modules/request/lib/helpers.js. Coverage (Term): 33% Coverage (LOC): 53%
*- File /root/Targets/dollar/node_modules/json-stringify-safe/stringify.js. Coverage (Term): 14% Coverage (LOC): 27%
*- File /root/Targets/dollar/node_modules/request/request.js. Coverage (Term): 2% Coverage (LOC): 1%
*- File /root/Targets/dollar/node_modules/hawk/lib/index.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/dollar/node_modules/boom/lib/index.js. Coverage (Term): 15% Coverage (LOC): 38%
*- File /root/Targets/dollar/node_modules/hoek/lib/index.js. Coverage (Term): 7% Coverage (LOC): 16%
*- File /root/Targets/dollar/node_modules/hoek/lib/escape.js. Coverage (Term): 33% Coverage (LOC): 46%
*- File /root/Targets/dollar/node_modules/sntp/index.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/dollar/node_modules/sntp/lib/index.js. Coverage (Term): 7% Coverage (LOC): 14%
*- File /root/Targets/dollar/node_modules/hawk/lib/server.js. Coverage (Term): 6% Coverage (LOC): 10%
*- File /root/Targets/dollar/node_modules/cryptiles/lib/index.js. Coverage (Term): 19% Coverage (LOC): 30%
*- File /root/Targets/dollar/node_modules/hawk/lib/crypto.js. Coverage (Term): 19% Coverage (LOC): 42%
*- File /root/Targets/dollar/node_modules/hawk/lib/utils.js. Coverage (Term): 16% Coverage (LOC): 22%
*- File /root/Targets/dollar/node_modules/hawk/lib/client.js. Coverage (Term): 7% Coverage (LOC): 10%
*- File /root/Targets/dollar/node_modules/aws-sign2/index.js. Coverage (Term): 26% Coverage (LOC): 51%
*- File /root/Targets/dollar/node_modules/aws4/aws4.js. Coverage (Term): 9% Coverage (LOC): 18%
*- File /root/Targets/dollar/node_modules/aws4/lru.js. Coverage (Term): 26% Coverage (LOC): 33%
*- File /root/Targets/dollar/node_modules/http-signature/lib/index.js. Coverage (Term): 29% Coverage (LOC): 20%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
