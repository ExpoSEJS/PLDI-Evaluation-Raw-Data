/root/Targets/origami-crypto-utils
└─┬ origami-crypto-utils@0.3.4 
  ├── minimist@1.2.0 
  └─┬ node-rsa@0.4.2 
    └── asn1@0.2.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/origami-crypto-utils/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0217 took 2.3504s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:82) on program var assert = require('assert');
var RSA = require('node-rsa');

function asPrivateKey(privateKey) {
  if (typeof(privateKey) === 'string') {
    var key = new RSA();

    try {
      key.importKey(privateKey, 'pkcs1-private-pem');
    } catch (e) {
      throw new Error('invalid private key');
    }

    return key;
  }

  return privateKey;
}

function asPublicKey(publicKey) {
  if (typeof(publicKey) === 'string') {
    var key = new RSA();

    try {
      key.importKey(publicKey, 'pkcs1-public-pem');
    } catch (e) {
      throw new Error('invalid public key');
    }

    return key;
  }

  return publicKey;
}

function randomKey(size) {
  var key = new RSA();
  
  key.generateKeyPair(size || 512);
  
  return key.exportKey('pkcs1-private-pem');  
}

function asString(key, exportPrivate) {
  if (!key) throw new Error('key is required');
  
  if (!exportPrivate) return key.exportKey('pkcs1-public-pem');
  else return key.exportKey('pkcs1-private-pem');
}

var utils = {
  randomKey: randomKey,
  asString: asString,
  asPublicKey: asPublicKey,
  asPrivateKey: asPrivateKey,
  encryptAndSign: function (input, signKey, encryptKey) {
    signKey = asPrivateKey(signKey);
    encryptKey = asPublicKey(encryptKey);

    return utils.sign(utils.encrypt(input, encryptKey), signKey);
  },
  decryptAndVerify: function (input, decryptKey, verifyKey) {
    verifyKey = asPublicKey(verifyKey);
    decryptKey = asPrivateKey(decryptKey);

    var verifies = utils.verify(input, verifyKey);

    assert.equal(true, verifies, 'fails to verify signature');

    return utils.decrypt(input.data, decryptKey);
  },
  encrypt: function (input, publicKey) {
    if (!input) throw new Error('input data is required');
    if (!publicKey) throw new Error('public key is required');

    publicKey = asPublicKey(publicKey);

    var normalInput = JSON.stringify(input);

    var buffer = publicKey.encrypt(normalInput);

    return buffer.toString('base64');
  },
  decrypt: function (input, privateKey) {
    if (!input) throw new Error('input data is required');
    if (!privateKey) throw new Error('private key is required');

    privateKey = asPrivateKey(privateKey);

    var decrypted = privateKey.decrypt(input);

    return JSON.parse(decrypted);
  },
  sign: function (input, privateKey) {
    if (!input) throw new Error('input data is required');
    if (!privateKey) throw new Error('private key is required');

    privateKey = asPrivateKey(privateKey);

    var normalInput = JSON.stringify(input);

    return {
      data: normalInput,
      signature: privateKey.sign(normalInput, 'base64')
    };
  },
  verify: function (input, publicKey) {
    if (!input) throw new Error('input data is required');
    if (!publicKey) throw new Error('public key is required');

    if (typeof(input.data) !== 'string' ||
        typeof(input.signature) !== 'string') {
      throw new Error('invalid input data');
    }

    publicKey = asPublicKey(publicKey);

    try {
      return publicKey.verify(input.data, input.signature, null, 'base64');
    } catch (e) {
      throw new Error('fails to verify signature');
    }
  }
};

module.exports = utils;
 at SyntaxError: Unexpected token (1:82)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
