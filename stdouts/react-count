/root/Targets/react-count
└─┬ react-count@0.2.4 
  ├─┬ firebase@2.4.2 
  │ └─┬ faye-websocket@0.9.3 
  │   └─┬ websocket-driver@0.5.2 
  │     └── websocket-extensions@0.1.1 
  ├── node-uuid@1.4.8 
  ├─┬ react@0.12.2 
  │ └─┬ envify@3.4.1 
  │   ├─┬ jstransform@11.0.3 
  │   │ ├── base62@1.2.0 
  │   │ ├─┬ commoner@0.10.8 
  │   │ │ ├── commander@2.11.0 
  │   │ │ ├─┬ detective@4.5.0 
  │   │ │ │ ├── acorn@4.0.13 
  │   │ │ │ └── defined@1.0.0 
  │   │ │ ├─┬ glob@5.0.15 
  │   │ │ │ ├─┬ inflight@1.0.6 
  │   │ │ │ │ └── wrappy@1.0.2 
  │   │ │ │ ├── inherits@2.0.3 
  │   │ │ │ ├─┬ minimatch@3.0.4 
  │   │ │ │ │ └─┬ brace-expansion@1.1.8 
  │   │ │ │ │   ├── balanced-match@1.0.0 
  │   │ │ │ │   └── concat-map@0.0.1 
  │   │ │ │ ├── once@1.4.0 
  │   │ │ │ └── path-is-absolute@1.0.1 
  │   │ │ ├── graceful-fs@4.1.11 
  │   │ │ ├── iconv-lite@0.4.19 
  │   │ │ ├─┬ mkdirp@0.5.1 
  │   │ │ │ └── minimist@0.0.8 
  │   │ │ ├── private@0.1.7 
  │   │ │ ├── q@1.5.0 
  │   │ │ └─┬ recast@0.11.23 
  │   │ │   ├── ast-types@0.9.6 
  │   │ │   ├── esprima@3.1.3 
  │   │ │   └── source-map@0.5.7 
  │   │ ├── esprima-fb@15001.1.0-dev-harmony-fb 
  │   │ ├── object-assign@2.1.1 
  │   │ └─┬ source-map@0.4.4 
  │   │   └── amdefine@1.0.1 
  │   └── through@2.3.8 
  └── react-style@0.4.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/react-count/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 34% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0747 took 4.3383s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (195:17) on program 'use strict';

var React = require('react');
var Firebase = require('firebase');
var uuid = require('node-uuid');
var styles = require('./styles');

var Count = React.createClass({

  propTypes: {
    firebaseHost: React.PropTypes.string.isRequired,
    firebaseResourceId: React.PropTypes.string.isRequired,
    allowMultiple: React.PropTypes.bool,
    isViewCounter: React.PropTypes.bool,
    isOnlineCounter: React.PropTypes.bool,
    isUndoable: React.PropTypes.bool,
    isReadonly: React.PropTypes.bool,
    isButtonLast: React.PropTypes.bool,
    counterText: React.PropTypes.string,
    actionDoText: React.PropTypes.string,
    actionUndoText: React.PropTypes.string,
    actionDoneText: React.PropTypes.string,
    className: React.PropTypes.string,
  },

  getDefaultProps: function () {
    return {
      allowMultiple: false,
      isViewCounter: false,
      isReadonly: false,
      isOnlineCounter: false,
      isUndoable: false,
      isButtonLast: false,
      counterText: '',
      actionDoText: '',
      actionDoneText: '',
      actionUndoText: '',
      className: 'react-count'
    }
  },

  getInitialState:  function () {
    this.lsVotedKey = 'count-' + this.props.firebaseResourceId + '-voted';
    var voted = false;
    if (isLocalStorageOn()) {
      voted = !!localStorage.getItem(this.lsVotedKey);
    }
    var userid;
    if (this.props.isOnlineCounter == true) {
      userid = uuid.v4();
    }

    return {
      counterValue: 0,
      voted: voted,
      counted: false,
      userid: userid
    }
  },

  componentWillMount: function () {
    if (this.props.isOnlineCounter == true) {
      var amOnline = new Firebase(this.props.firebaseHost + '.info/connected');
      var presenceUrl = this.props.firebaseHost + this.props.firebaseResourceId + '/presence';
      console.log('presenceUrl', presenceUrl);
      var usersRef = new Firebase(presenceUrl);
      var userRef = usersRef.child(this.state.userid);
      this.onlineFirebaseRef = amOnline;
      this.usersRef = usersRef;
      this.userFirebaseRef = userRef;
    } else {
      var url = this.props.firebaseHost + this.props.firebaseResourceId;
      this.firebase = new Firebase(url);
    }
  },

  componentDidMount: function () {
    if (this.props.isOnlineCounter == true) {
      this.onlineFirebaseRef.on('value', this.handleFirebaseOnline);
      this.usersRef.on('value', this.handleFirebaseUsers);
    } else {
      this.firebase.on('value', this.handleFirebaseChange);
    }
  },

  componentWillUnmount: function () {
    if (this.props.isOnlineCounter == true) {
      this.onlineFirebaseRef.off('value', this.handleFirebaseOnline);
      this.usersRef.off('value', this.handleFirebaseUsers);
    } else {
      this.firebase.off('value', this.handleFirebaseChange);
    }
  },

  handleFirebaseOnline: function (snapshot) {
    if (snapshot.val()) {
      this.userFirebaseRef.onDisconnect().set(null);
      this.userFirebaseRef.set(true);
    }
  },
  handleFirebaseUsers: function (snapshot) {
    var numOfUsersOnline = snapshot.numChildren();
    this.setState({counterValue: numOfUsersOnline});
  },
  handleFirebaseChange: function (snapshot) {
    var newValue = snapshot.val();
    if (newValue == null) {
      newValue = 0;
      this.firebase.set(newValue);
    }
    if (this.props.isViewCounter === true && this.state.counted === false) {
      newValue = newValue + 1;
      this.setState({ counted: true });
      this.firebase.set(newValue);
    }
    this.setState({counterValue: newValue});
  },

  isReadonly: function () {
    return this.props.isReadonly === true || this.props.isViewCounter === true;
  },

  isNotVotable: function () {
    return this.props.allowMultiple === false && this.state.voted === true;
  },

  incrementAndSave: function () {
    var newValue = this.state.counterValue + 1;
    this.firebase.set(newValue);
    this.setState({voted: true});
    if (isLocalStorageOn()) {
      localStorage.setItem(this.lsVotedKey, true);
    }
  },

  decrementAndSave: function () {
    var newValue = this.state.counterValue - 1;
    this.firebase.set(newValue);
    this.setState({voted: false});
    if (isLocalStorageOn()) {
      localStorage.removeItem(this.lsVotedKey);
    }
  },

  handleClick: function () {
    if (this.isReadonly()) {
      return;
    }
    if (this.props.isUndoable === false && this.isNotVotable()) {
      return;
    }
    if (this.props.isUndoable === true) {
      // already voted. we need to unvote
      if (this.state.voted === true) {
        this.decrementAndSave();
      } else {
        this.incrementAndSave();
      }
    } else {
      this.incrementAndSave();
    }
  },

  buildClassName: function () {
    var className = this.props.className;
    if (this.isReadonly()) {
      className += ' readonly';
    }
    if (this.state.voted === true) {
      className += ' voted';
    }
    // trim leading whitespace
    if (className.trim) {
      className = className.trim();
    }
    return className;
  },

  render: function () {
    var buttonStyle = {};
    if (this.isReadonly() || this.props.isOnlineCounter === true) {
      buttonStyle.display = 'none';
    }
    var className = this.buildClassName();
    var countClassName = this.props.className + '-cnt';
    var btnClassName = this.props.className + '-btn';
    var actionText = this.props.actionDoText;
    if (this.state.voted === true) {
      if (this.props.isUndoable === true) {
        actionText = this.props.actionUndoText;
      } else {
        actionText = this.props.actionDoneText;
      }
    }
    var button = <button className={btnClassName} styles={[styles.reactCountBtn, styles.reactCountBtnCnt, buttonStyle]}>{actionText}</button>;
    var text = <span className={countClassName} styles={[styles.reactCountBtnCnt, styles.reactCountCnt]}>{this.state.counterValue} {this.props.counterText}</span>;
    var subcomponents = [];
    if (this.props.isButtonLast) {
      subcomponents.push(text);
      subcomponents.push(button);
    } else {
      subcomponents.push(button);
      subcomponents.push(text);
    }
    return (
      <div key={this.props.firebaseResourceId} className={className} onClick={this.handleClick} styles={styles.reactCount}>
        {subcomponents}
      </div>
    )
  }

});

function isLocalStorageOn () {
  // this code is borrowed from modernizer
  var mod = 'react-count';
  try {
    localStorage.setItem(mod, mod);
    localStorage.removeItem(mod);
    return true;
  } catch(e) {
    return false;
  }
}

module.exports = Count; at SyntaxError: Unexpected token (195:17)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1034:28)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/react-count/node_modules/react-count/lib/index.js. Coverage (Term): 50% Coverage (LOC): 80%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
