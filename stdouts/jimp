/root/Targets/jimp
└─┬ jimp@0.2.28 
  ├── bignumber.js@2.4.0 
  ├── bmp-js@0.0.3 
  ├── es6-promise@3.3.1 
  ├── exif-parser@0.1.12 
  ├── file-type@3.9.0 
  ├── jpeg-js@0.2.0 
  ├─┬ load-bmfont@1.3.0 
  │ ├── buffer-equal@0.0.1 
  │ ├── parse-bmfont-ascii@1.0.6 
  │ ├── parse-bmfont-binary@1.0.6 
  │ ├─┬ parse-bmfont-xml@1.1.3 
  │ │ ├── xml-parse-from-string@1.0.1 
  │ │ └─┬ xml2js@0.4.19 
  │ │   ├── sax@1.2.4 
  │ │   └── xmlbuilder@9.0.4 
  │ ├─┬ xhr@2.4.0 
  │ │ ├─┬ global@4.3.2 
  │ │ │ ├─┬ min-document@2.19.0 
  │ │ │ │ └── dom-walk@0.1.1 
  │ │ │ └── process@0.5.2 
  │ │ ├── is-function@1.0.1 
  │ │ └─┬ parse-headers@2.0.1 
  │ │   ├── for-each@0.3.2 
  │ │   └── trim@0.0.1 
  │ └── xtend@4.0.1 
  ├── mime@1.4.1 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  ├── pixelmatch@4.0.2 
  ├── pngjs@3.3.0 
  ├── read-chunk@1.0.1 
  ├─┬ request@2.83.0 
  │ ├── aws-sign2@0.7.0 
  │ ├── aws4@1.6.0 
  │ ├── caseless@0.12.0 
  │ ├─┬ combined-stream@1.0.5 
  │ │ └── delayed-stream@1.0.0 
  │ ├── extend@3.0.1 
  │ ├── forever-agent@0.6.1 
  │ ├─┬ form-data@2.3.1 
  │ │ └── asynckit@0.4.0 
  │ ├─┬ har-validator@5.0.3 
  │ │ ├─┬ ajv@5.2.3 
  │ │ │ ├── co@4.6.0 
  │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │   └── jsonify@0.0.0 
  │ │ └── har-schema@2.0.0 
  │ ├─┬ hawk@6.0.2 
  │ │ ├── boom@4.3.1 
  │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ └── boom@5.2.0 
  │ │ ├── hoek@4.2.0 
  │ │ └── sntp@2.0.2 
  │ ├─┬ http-signature@1.2.0 
  │ │ ├── assert-plus@1.0.0 
  │ │ ├─┬ jsprim@1.4.1 
  │ │ │ ├── extsprintf@1.3.0 
  │ │ │ ├── json-schema@0.2.3 
  │ │ │ └─┬ verror@1.10.0 
  │ │ │   └── core-util-is@1.0.2 
  │ │ └─┬ sshpk@1.13.1 
  │ │   ├── asn1@0.2.3 
  │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │   ├── dashdash@1.14.1 
  │ │   ├── ecc-jsbn@0.1.1 
  │ │   ├── getpass@0.1.7 
  │ │   ├── jsbn@0.1.1 
  │ │   └── tweetnacl@0.14.5 
  │ ├── is-typedarray@1.0.0 
  │ ├── isstream@0.1.2 
  │ ├── json-stringify-safe@5.0.1 
  │ ├─┬ mime-types@2.1.17 
  │ │ └── mime-db@1.30.0 
  │ ├── oauth-sign@0.8.2 
  │ ├── performance-now@2.1.0 
  │ ├── qs@6.5.1 
  │ ├── safe-buffer@5.1.1 
  │ ├── stringstream@0.0.5 
  │ ├─┬ tough-cookie@2.3.3 
  │ │ └── punycode@1.4.1 
  │ ├── tunnel-agent@0.6.0 
  │ └── uuid@3.1.0 
  ├─┬ stream-to-buffer@0.1.0 
  │ └── stream-to@0.2.2 
  ├── tinycolor2@1.4.1 
  └─┬ url-regex@3.2.0 
    └── ip-regex@1.0.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/jimp/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 12% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0937 took 19.857s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program 'use strict';

var assert = require('assert').ok;
var zlib = require('zlib');
var util = require('util');

var kMaxLength = require('buffer').kMaxLength;

function Inflate(opts) {
  if (!(this instanceof Inflate)) {
    return new Inflate(opts);
  }

  if (opts && opts.chunkSize < zlib.Z_MIN_CHUNK) {
    opts.chunkSize = zlib.Z_MIN_CHUNK;
  }

  zlib.Inflate.call(this, opts);

  if (opts && opts.maxLength != null) {
    this._maxLength = opts.maxLength;
  }
}

function createInflate(opts) {
  return new Inflate(opts);
}

function _close(engine, callback) {
  if (callback) {
    process.nextTick(callback);
  }

  // Caller may invoke .close after a zlib error (which will null _handle).
  if (!engine._handle) {
    return;
  }

  engine._handle.close();
  engine._handle = null;
}

Inflate.prototype._processChunk = function(chunk, flushFlag, asyncCb) {
  if (typeof asyncCb === 'function') {
    return zlib.Inflate._processChunk.call(this, chunk, flushFlag, asyncCb);
  }

  var self = this;

  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var leftToInflate = this._maxLength;
  var inOff = 0;

  var buffers = [];
  var nread = 0;

  var error;
  this.on('error', function(err) {
    error = err;
  });

  function handleChunk(availInAfter, availOutAfter) {
    if (self._hadError) {
      return;
    }

    var have = availOutBefore - availOutAfter;
    assert(have >= 0, 'have should not go down');

    if (have > 0) {
      var out = self._buffer.slice(self._offset, self._offset + have);
      self._offset += have;

      if (out.length > leftToInflate) {
        out = out.slice(0, leftToInflate);
      }

      buffers.push(out);
      nread += out.length;
      leftToInflate -= out.length;

      if (leftToInflate === 0) {
        return false;
      }
    }

    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
      availOutBefore = self._chunkSize;
      self._offset = 0;
      self._buffer = Buffer.allocUnsafe(self._chunkSize);
    }

    if (availOutAfter === 0) {
      inOff += (availInBefore - availInAfter);
      availInBefore = availInAfter;

      return true;
    }

    return false;
  }

  assert(this._handle, 'zlib binding closed');
  do {
    var res = this._handle.writeSync(flushFlag,
                                     chunk, // in
                                     inOff, // in_off
                                     availInBefore, // in_len
                                     this._buffer, // out
                                     this._offset, //out_off
                                     availOutBefore); // out_len
  } while (!this._hadError && handleChunk(res[0], res[1]));

  if (this._hadError) {
    throw error;
  }

  if (nread >= kMaxLength) {
    _close(this);
    throw new RangeError('Cannot create final Buffer. It would be larger than 0x' + kMaxLength.toString(16) + ' bytes');
  }

  var buf = Buffer.concat(buffers, nread);
  _close(this);

  return buf;
};

util.inherits(Inflate, zlib.Inflate);

function zlibBufferSync(engine, buffer) {
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer);
  }
  if (!(buffer instanceof Buffer)) {
    throw new TypeError('Not a string or buffer');
  }

  var flushFlag = engine._finishFlushFlag;
  if (flushFlag == null) {
    flushFlag = zlib.Z_FINISH;
  }

  return engine._processChunk(buffer, flushFlag);
}

function inflateSync(buffer, opts) {
  return zlibBufferSync(new Inflate(opts), buffer);
}

module.exports = exports = inflateSync;
exports.Inflate = Inflate;
exports.createInflate = createInflate;
exports.inflateSync = inflateSync;
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/jimp/node_modules/jimp/index.js. Coverage (Term): 1% Coverage (LOC): 1%
*- File /root/Targets/jimp/node_modules/pngjs/lib/png.js. Coverage (Term): 5% Coverage (LOC): 8%
*- File /root/Targets/jimp/node_modules/pngjs/lib/parser-async.js. Coverage (Term): 19% Coverage (LOC): 26%
*- File /root/Targets/jimp/node_modules/pngjs/lib/chunkstream.js. Coverage (Term): 14% Coverage (LOC): 20%
*- File /root/Targets/jimp/node_modules/pngjs/lib/filter-parse-async.js. Coverage (Term): 42% Coverage (LOC): 45%
*- File /root/Targets/jimp/node_modules/pngjs/lib/filter-parse.js. Coverage (Term): 9% Coverage (LOC): 17%
*- File /root/Targets/jimp/node_modules/pngjs/lib/interlace.js. Coverage (Term): 26% Coverage (LOC): 64%
*- File /root/Targets/jimp/node_modules/pngjs/lib/paeth-predictor.js. Coverage (Term): 22% Coverage (LOC): 31%
*- File /root/Targets/jimp/node_modules/pngjs/lib/parser.js. Coverage (Term): 11% Coverage (LOC): 20%
*- File /root/Targets/jimp/node_modules/pngjs/lib/constants.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/jimp/node_modules/pngjs/lib/crc.js. Coverage (Term): 48% Coverage (LOC): 68%
*- File /root/Targets/jimp/node_modules/pngjs/lib/bitmapper.js. Coverage (Term): 7% Coverage (LOC): 20%
*- File /root/Targets/jimp/node_modules/pngjs/lib/format-normaliser.js. Coverage (Term): 6% Coverage (LOC): 11%
*- File /root/Targets/jimp/node_modules/pngjs/lib/packer-async.js. Coverage (Term): 26% Coverage (LOC): 38%
*- File /root/Targets/jimp/node_modules/pngjs/lib/packer.js. Coverage (Term): 18% Coverage (LOC): 31%
*- File /root/Targets/jimp/node_modules/pngjs/lib/bitpacker.js. Coverage (Term): 4% Coverage (LOC): 5%
*- File /root/Targets/jimp/node_modules/pngjs/lib/filter-pack.js. Coverage (Term): 7% Coverage (LOC): 22%
*- File /root/Targets/jimp/node_modules/pngjs/lib/png-sync.js. Coverage (Term): 31% Coverage (LOC): 45%
*- File /root/Targets/jimp/node_modules/pngjs/lib/parser-sync.js. Coverage (Term): 11% Coverage (LOC): 10%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
