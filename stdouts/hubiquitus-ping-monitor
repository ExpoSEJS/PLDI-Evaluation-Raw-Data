/root/Targets/hubiquitus-ping-monitor
└─┬ hubiquitus-ping-monitor@0.1.0 
  ├── commander@2.3.0 
  ├── ejs@1.0.0 
  ├─┬ express@3.4.8 
  │ ├── buffer-crc32@0.2.1 
  │ ├─┬ commander@1.3.2 
  │ │ └── keypress@0.1.0 
  │ ├─┬ connect@2.12.0 
  │ │ ├── batch@0.5.0 
  │ │ ├── bytes@0.2.1 
  │ │ ├─┬ multiparty@2.2.0 
  │ │ │ ├─┬ readable-stream@1.1.14 
  │ │ │ │ ├── core-util-is@1.0.2 
  │ │ │ │ ├── inherits@2.0.3 
  │ │ │ │ ├── isarray@0.0.1 
  │ │ │ │ └── string_decoder@0.10.31 
  │ │ │ └── stream-counter@0.2.0 
  │ │ ├── negotiator@0.3.0 
  │ │ ├── pause@0.0.1 
  │ │ ├── qs@0.6.6 
  │ │ ├── raw-body@1.1.2 
  │ │ └── uid2@0.0.3 
  │ ├── cookie@0.1.0 
  │ ├── cookie-signature@1.0.1 
  │ ├── debug@0.8.1 
  │ ├── fresh@0.2.0 
  │ ├── merge-descriptors@0.0.1 
  │ ├── methods@0.1.0 
  │ ├── mkdirp@0.3.5 
  │ ├── range-parser@0.0.4 
  │ └─┬ send@0.1.4 
  │   └── mime@1.2.11 
  ├── lodash@2.4.2 
  └── moment@2.7.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/hubiquitus-ping-monitor/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0551 took 4.5729s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var express = require('express');
var _ = require('lodash');
var commander = require('commander');
var version = require('./package').version;
var fs = require('fs');
var moment = require('moment');

const timeout = 60000;

/* Configuration */

commander
  .version(version)
  .option('-p, --port [n]', 'HTTP port', parseInt)
  .option('-d, --debug', 'debug')
  .option('-f, --file <p>', 'configuration file')
  .parse(process.argv);

var conf = {
  port: commander.port || 1337,
  debug: commander.debug || false,
  file: commander.file
};
console.log('Using configuration', conf);

var expectedContainerTypes;
try {
  expectedContainerTypes = JSON.parse(fs.readFileSync(conf.file, {encoding: 'utf8'}));
} catch (err) {
  console.error('Cannot read expected results file', err);
  process.exit(1);
}
console.log('Expected results', expectedContainerTypes);

var containerTypes = {};
for (var name in expectedContainerTypes) {
  registerName(name);
}

/* Rest services */

var app = express();
app.use(express.bodyParser());
app.engine('html', require('ejs').__express);
app.use('/static', express.static(__dirname + '/static'));
app.set('views', __dirname);

app.get('/', function (req, res) {
  computeResults();
  var data = {};
  if (conf.debug) console.log('\n', new Date(), 'rendering', data);
  res.render('index.html', {
    containerTypes: containerTypes,
    now: Date.now(),
    timeout: timeout,
    _: _,
    moment: moment
  });
});

app.get('/addons', function (req, res) {
  computeResults();
  var data = {};
  if (conf.debug) console.log('\n', new Date(), 'rendering', data);
  res.render('addons.html', {
    containerTypes: containerTypes,
    now: Date.now(),
    timeout: timeout,
    _: _,
    moment: moment
  });
});

app.get('/statusfull', function (req, res) {
  computeResults();
  var json = {};
  var status = 200;
  _.forEach(containerTypes, function (containerType, name) {
    var up = (containerType.upCount >= containerType.expectedUpCount);
    json[name] = up
      ? 'UP;' + containerType.upCount + '/' + containerType.expectedUpCount
      : 'DOWN;' + containerType.upCount + '/' + containerType.expectedUpCount;
    if (!up) status = 500;
  });
  if (conf.debug) console.log('\n', new Date(), 'full status asked', containerTypes, json);
  res.json(status, json);
});

app.get('/status', function (req, res) {
  computeResults();
  var json = {};
  var status = 200;
  _.forEach(containerTypes, function (containerType, name) {
    var up = (containerType.upCount >= 1);
    json[name] = up
      ? 'UP;' + containerType.upCount + '/' + containerType.expectedUpCount
      : 'DOWN;' + containerType.upCount + '/' + containerType.expectedUpCount;
    if (!up) status = 500;
  });
  if (conf.debug) console.log('\n', new Date(), 'status asked', containerTypes, json);
  res.json(status, json);
});

app.post('/ping/:id/:name', function (req, res) {
  res.send(200);
  var id = req.params.id;
  var name = req.params.name;
  var failsafe = req.param('failsafe');
  if (conf.debug) console.log('\n', new Date(), 'ping from id: ' + id + '; name: ' + name);
  registerName(name);
  containerTypes[name].containers[id] = {
    date: Date.now(),
    ip: req.ip,
    failsafe: failsafe,
    up: true
  };
});

app.listen(conf.port);
console.log('App running at http://*:' + conf.port);

/* Functions */

function computeResults() {
  var now = Date.now();
  _.forEach(containerTypes, function (containerType) {
    containerType.upCount = 0;
    _.forEach(containerType.containers, function (container) {
      if (now - container.date < timeout) {
        container.up = true;
        containerType.upCount++;
      } else {
        container.up = false;
      }
    });
  });
}

function registerName(name) {
  if (!containerTypes[name]) {
    containerTypes[name] = {
      expectedUpCount: expectedContainerTypes[name] || 0,
      containers: {},
      upCount: 0
    }
  }
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
