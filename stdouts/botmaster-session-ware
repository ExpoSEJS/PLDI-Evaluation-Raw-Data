/root/Targets/botmaster-session-ware
├── UNMET PEER DEPENDENCY botmaster@^3.0.7
└─┬ botmaster-session-ware@1.1.0 
  ├─┬ debug@2.6.9 
  │ └── ms@2.0.0 
  └── ramda@0.23.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/botmaster-session-ware/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0607 took 4.0443s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program 'use strict';

var R = require('ramda');
var Debug = require('debug');
var assert = require('assert');

var recipient = R.path(['recipient', 'id']);
var sender = R.path(['sender', 'id']);
var idFromUpdate = function idFromUpdate(update) {
    return 'recipient:' + recipient(update) + '-sender:' + sender(update);
};
/**
 * Create an object providing incoming and outgoing middleware that manages a 
 * session object for you. By using this middleware, your other middleware will
 * have access to a persisted `update.session` object.
 *
 * @param {Object} [options] options object for generated sessionWare
 * @param {Object} [options.adapter] an object implementing the adapter api. defaults to in MemoryStore.
 * @param {String} [options.sessionPath] dot denoted path to where to store the context in the update. defaults to 'session'
 * @return {Object} an object that contains two functions 'incoming' and 'outgoing'.
 * They should be used with the useWrapped method of botmaster
 */
var SessionWare = function SessionWare(options) {
    var _ref = options || {},
        _ref$sessionPath = _ref.sessionPath,
        sessionPath = _ref$sessionPath === undefined ? 'session' : _ref$sessionPath,
        adapter = _ref.adapter;

    sessionPath = sessionPath.split('.');
    var store = void 0;
    if (adapter) {
        store = adapter;
        if (typeof store.get !== 'function' || typeof store.set !== 'function') throw new Error('Adapter does not have required methods get and/or set');
    } else {
        var MemoryStore = require('./adapters/MemoryStore');
        store = new MemoryStore();
    }

    var incoming = {
        type: 'incoming',
        controller: function controller(bot, update, next) {
            store.get(idFromUpdate(update)).then(function (session) {
                Debug('botmaster:session:incoming')('got session for ' + idFromUpdate(update));
                var sessionPathLens = R.lensPath(sessionPath.splice(1));
                update[sessionPath[0]] = R.set(sessionPathLens, session, update);
                next();
            }).catch(function (err) {
                Debug('botmaster:session:incoming')('error ' + err.message);
                next(err);
            });
        }
    };

    var outgoing = {
        type: 'outgoing',
        controller: function controller(bot, update, message, next) {
            assert(typeof next == 'function', 'please ensure you have the correct version of botmaster');
            var sessionPathLens = R.lensPath(sessionPath);
            var session = R.view(sessionPathLens, update);
            store.set(idFromUpdate(update), session).then(function () {
                Debug('botmaster:session:outgoing')('updated session for ' + idFromUpdate(update));
                next();
            });
        }
    };

    return { incoming: incoming, outgoing: outgoing };
};

module.exports = SessionWare; at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
