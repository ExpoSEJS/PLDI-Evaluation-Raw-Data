
> dtrace-provider@0.5.0 install /root/Targets/chinachu-upnp-server/node_modules/dtrace-provider
> node scripts/install.js

/root/Targets/chinachu-upnp-server
└─┬ chinachu-upnp-server@0.0.2 
  ├── async@1.5.2 
  ├─┬ debug@2.2.0 
  │ └── ms@0.7.1 
  ├─┬ follow-redirects@0.0.3 
  │ └── underscore@1.8.3 
  ├── ip@0.3.3 
  ├── jstoxml@0.2.4 
  ├─┬ matroska@2.2.2 
  │ ├── async@1.0.0 
  │ ├── crc@3.2.1 
  │ ├─┬ dateformat@1.0.11 
  │ │ ├── get-stdin@5.0.1 
  │ │ └─┬ meow@3.7.0 
  │ │   ├─┬ camelcase-keys@2.1.0 
  │ │   │ └── camelcase@2.1.1 
  │ │   ├── decamelize@1.2.0 
  │ │   ├─┬ loud-rejection@1.6.0 
  │ │   │ ├─┬ currently-unhandled@0.4.1 
  │ │   │ │ └── array-find-index@1.0.2 
  │ │   │ └── signal-exit@3.0.2 
  │ │   ├── map-obj@1.0.1 
  │ │   ├── minimist@1.2.0 
  │ │   ├─┬ normalize-package-data@2.4.0 
  │ │   │ ├── hosted-git-info@2.5.0 
  │ │   │ ├─┬ is-builtin-module@1.0.0 
  │ │   │ │ └── builtin-modules@1.1.1 
  │ │   │ ├── semver@5.4.1 
  │ │   │ └─┬ validate-npm-package-license@3.0.1 
  │ │   │   ├─┬ spdx-correct@1.0.2 
  │ │   │   │ └── spdx-license-ids@1.2.2 
  │ │   │   └── spdx-expression-parse@1.0.4 
  │ │   ├── object-assign@4.1.1 
  │ │   ├─┬ read-pkg-up@1.0.1 
  │ │   │ ├─┬ find-up@1.1.2 
  │ │   │ │ ├── path-exists@2.1.0 
  │ │   │ │ └─┬ pinkie-promise@2.0.1 
  │ │   │ │   └── pinkie@2.0.4 
  │ │   │ └─┬ read-pkg@1.1.0 
  │ │   │   ├─┬ load-json-file@1.1.0 
  │ │   │   │ ├── graceful-fs@4.1.11 
  │ │   │   │ ├─┬ parse-json@2.2.0 
  │ │   │   │ │ └─┬ error-ex@1.3.1 
  │ │   │   │ │   └── is-arrayish@0.2.1 
  │ │   │   │ ├── pify@2.3.0 
  │ │   │   │ └─┬ strip-bom@2.0.0 
  │ │   │   │   └── is-utf8@0.2.1 
  │ │   │   └── path-type@1.1.0 
  │ │   ├─┬ redent@1.0.0 
  │ │   │ ├─┬ indent-string@2.1.0 
  │ │   │ │ └─┬ repeating@2.0.1 
  │ │   │ │   └─┬ is-finite@1.0.2 
  │ │   │ │     └── number-is-nan@1.0.1 
  │ │   │ └─┬ strip-indent@1.0.1 
  │ │   │   └── get-stdin@4.0.1 
  │ │   └── trim-newlines@1.0.0 
  │ └── debug@0.7.4 
  ├── mime@1.3.4 
  ├─┬ musicmetadata@1.0.0 
  │ ├── deep-equal@0.2.1 
  │ ├─┬ filereader-stream@0.2.0 
  │ │ └── inherits@1.0.0 
  │ ├── iconv-lite@0.4.19 
  │ ├── node-bitarray@0.0.2 
  │ ├── strtok2@1.0.4 
  │ ├─┬ sum-component@0.1.1 
  │ │ └─┬ to-function@2.0.6 
  │ │   └── component-props@1.1.1 
  │ └── through@2.3.8 
  ├─┬ nedb@1.8.0 
  │ ├── async@0.2.10 
  │ ├─┬ binary-search-tree@0.2.5 
  │ │ └── underscore@1.4.4 
  │ ├─┬ localforage@1.5.0 
  │ │ └─┬ lie@3.0.2 
  │ │   ├─┬ es3ify@0.1.4 
  │ │   │ ├── esprima-fb@3001.1.0-dev-harmony-fb 
  │ │   │ └─┬ jstransform@3.0.0 
  │ │   │   ├── base62@0.1.1 
  │ │   │   └─┬ source-map@0.1.31 
  │ │   │     └── amdefine@1.0.1 
  │ │   ├── immediate@3.0.6 
  │ │   ├─┬ inline-process-browser@1.0.0 
  │ │   │ ├─┬ falafel@1.2.0 
  │ │   │ │ ├── acorn@1.2.2 
  │ │   │ │ ├── foreach@2.0.5 
  │ │   │ │ ├── isarray@0.0.1 
  │ │   │ │ └── object-keys@1.0.11 
  │ │   │ └─┬ through2@0.6.5 
  │ │   │   ├─┬ readable-stream@1.0.34 
  │ │   │   │ ├── core-util-is@1.0.2 
  │ │   │   │ ├── inherits@2.0.3 
  │ │   │   │ └── string_decoder@0.10.31 
  │ │   │   └── xtend@4.0.1 
  │ │   └─┬ unreachable-branch-transform@0.3.0 
  │ │     ├── esmangle-evaluator@1.0.1 
  │ │     └─┬ recast@0.10.43 
  │ │       ├── ast-types@0.8.15 
  │ │       ├── esprima-fb@15001.1001.0-dev-harmony-fb 
  │ │       ├── private@0.1.7 
  │ │       └── source-map@0.5.7 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ └── underscore@1.4.4 
  ├─┬ node-ssdp@2.5.1 
  │ ├─┬ bunyan@1.4.0 
  │ │ ├─┬ dtrace-provider@0.5.0 
  │ │ │ └── nan@1.8.4 
  │ │ ├─┬ mv@2.1.1 
  │ │ │ ├── ncp@2.0.0 
  │ │ │ └─┬ rimraf@2.4.5 
  │ │ │   └─┬ glob@6.0.4 
  │ │ │     ├─┬ inflight@1.0.6 
  │ │ │     │ └── wrappy@1.0.2 
  │ │ │     ├── inherits@2.0.3 
  │ │ │     ├─┬ minimatch@3.0.4 
  │ │ │     │ └─┬ brace-expansion@1.1.8 
  │ │ │     │   ├── balanced-match@1.0.0 
  │ │ │     │   └── concat-map@0.0.1 
  │ │ │     ├── once@1.4.0 
  │ │ │     └── path-is-absolute@1.0.1 
  │ │ └── safe-json-stringify@1.0.4 
  │ ├── bunyan-pretty-colors@0.1.7 
  │ └── bunyan-prettystream@0.1.3 
  ├── node-uuid@1.4.3 
  ├── sax@0.4.2 
  ├── semaphore@1.0.3 
  ├─┬ send@0.13.2 
  │ ├── depd@1.1.1 
  │ ├── destroy@1.0.4 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.7.0 
  │ ├── fresh@0.3.0 
  │ ├─┬ http-errors@1.3.1 
  │ │ └── inherits@2.0.3 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── range-parser@1.0.3 
  │ └── statuses@1.2.1 
  └── underscore@1.6.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/chinachu-upnp-server/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0638 took 2.3386s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:4) on program /*jslint node: true, nomen: true */
"use strict";

var assert = require('assert');
var events = require('events');
var http = require('http');
var ip = require('ip');
var SSDP = require('node-ssdp');
var url = require('url');
var util = require('util');
var _ = require('underscore');

var logger = require('./lib/logger');

var UPNPServer = require('./lib/upnpServer');
var PathRepository = require('./lib/repositories/pathRepository');
var MusicRepository = require('./lib/repositories/musicRepository');
var HistoryRepository = require('./lib/repositories/historyRepository');
var IceCastRepository = require('./lib/repositories/iceCastRepository');

/**
 * upnpserver API.
 *
 * @param {object}
 *            configuration
 * @param {array}
 *            paths
 *
 * @constructor
 */
var API = function(configuration, paths) {
  this.configuration = _.extend(this.defaultConfiguration, configuration);
  this.directories = [];
  this._upnpClasses = {};
  this._contentHandlers = [];
  this._contentHandlersKey = 0;

  var self = this;
  if (typeof (paths) === "string") {
    this.addDirectory("/", paths);

  } else if (util.isArray(paths)) {
    paths.forEach(function(path) {
      self.initPaths(path);
    });
  }

  if (this.configuration.noDefaultConfig !== true) {
    this.loadConfiguration("./default-config.json");
  }

  var cf = this.configuration.configurationFiles;
  if (typeof (cf) === "string") {
    this.loadConfigurationFile(cf);

  } else if (util.isArray(cf)) {
    for (var i = 0; i < cf.length; i++) {
      this.loadConfiguration(cf[i]);
    }
  }
};

util.inherits(API, events.EventEmitter);

/**
 * Default server configuration.
 *
 * @type {object}
 */
API.prototype.defaultConfiguration = {
  "dlnaSupport" : true,
  "httpPort" : 10293,
  "name" : "Node Server",
  "version" : require("./package.json").version
};

/**
 * Initialize paths.
 *
 * @param path
 */
API.prototype.initPaths = function(path) {
  if (typeof (path) === "string") {
    this.addDirectory("/", path);
    return;
  }

  if (typeof (path) === "object") {
    var mountPoint = path.mountPoint || "/";

    var type = path.type && path.type.toLowerCase();

    switch (type) {
    case "music":
      if (!path.path) {
        throw new Error("Path must be defined '" + util.inspect(path) + "'")
      }
      this.addMusicDirectory(mountPoint, path.path);
      break;

    case "history":
      this.addHistoryDirectory(mountPoint);
      break;

    case "icecast":
      this.addIceCast(mountPoint);
      break;

    default:
      if (!path.path) {
        throw new Error("Path must be defined '" + util.inspect(path) + "'")
      }
      this.addDirectory(mountPoint, path.path);
    }
    return;
  }

  throw new Error("Invalid path '" + util.inspect(path) + "'");
};

/**
 * Add simple directory.
 *
 * @param {string}
 *            mountPoint
 * @param {string}
 *            path
 */
API.prototype.addDirectory = function(mountPoint, path) {
  assert(typeof (mountPoint) === "string", "Invalid mountPoint parameter '" +
      mountPoint + "'");

  if (typeof (path) === "object") {
    // TODO
  }

  assert(typeof (path) === "string", "Invalid path parameter '" + mountPoint +
      "'");

  var repository = new PathRepository("path:" + path, mountPoint, path);

  this.addRepository(repository);
};

/**
 * Add a repository.
 *
 * @param {Repository}
 *            repository
 */
API.prototype.addRepository = function(repository) {
  assert(repository, "Invalid repository parameter '" + repository + "'");

  this.directories.push(repository);
};

/**
 * Add music directory.
 *
 * @param {string}
 *            mountPoint
 * @param {string}
 *            path
 */
API.prototype.addMusicDirectory = function(mountPoint, path) {
  assert(typeof mountPoint === "string", "Invalid mountPoint parameter '" +
      mountPoint + "'");
  assert(typeof path === "string", "Invalid path parameter '" + mountPoint +
      "'");

  var repository = new MusicRepository("music:" + path, mountPoint, path);

  this.addRepository(repository);
};

/**
 * Add history directory.
 *
 * @param {string}
 *            mountPoint
 */
API.prototype.addHistoryDirectory = function(mountPoint) {
  assert(typeof mountPoint === "string", "Invalid mountPoint parameter '" +
      mountPoint + "'");

  var repository = new HistoryRepository(null, mountPoint);

  this.addRepository(repository);
};

/**
 * Add iceCast.
 *
 * @param {string}
 *            mountPoint
 * @param {object}
 *            medias (icecasts medias)
 */
API.prototype.addIceCast = function(mountPoint) {
  assert(typeof mountPoint === "string", "Invalid mountPoint parameter '" +
      mountPoint + "'");

  var repository = new IceCastRepository("iceCast", mountPoint);

  this.addRepository(repository);
};

API.prototype.loadConfiguration = function(path) {
  var config = require(path);

  var self = this;

  var upnpClasses = config.upnpClasses;
  if (upnpClasses) {
    for ( var upnpClassName in upnpClasses) {
      var path = upnpClasses[upnpClassName];

      var clazz = require(path);

      self._upnpClasses[upnpClassName] = new clazz();
    }
  }

  var contentHandlers = config.contentHandlers;
  if (contentHandlers) {
    var cs = self._contentHandlers;

    contentHandlers.forEach(function(contentHandler) {

      var mimeTypes = contentHandler.mimeTypes || [];

      if (contentHandler.mimeType) {
        mimeTypes = mimeTypes.slice(0);
        mimeTypes.push(contentHandler.mimeType);
      }

      var clazz = require(contentHandler.require);

      var configuration = contentHandler.configuration || {};

      var ch = new clazz(configuration);
      ch.key = contentHandler.key || cs.length;
      ch.priority = contentHandler.priority || 0;
      ch.mimeTypes = mimeTypes;

      cs.push(ch);
    });
  }

  var directories = config.directories;
  if (directories) {
    for ( var key in directories) {
      var directory = directories[key];

      var mountPoint = directory.mountPoint;

      self.addDirectory(mountPoint, directory);
    }
  }
}

/**
 * Start server.
 */
API.prototype.start = function() {
  var self = this;
  this.stop(function() {
    self.startServer();
  });
};

/**
 * Start server callback.
 *
 * @return {UPNPServer}
 */
API.prototype.startServer = function(callback) {

  if (!this.directories.length) {
    return callback(new Error("No directories defined !"));
  }

  var configuration = this.configuration;
  configuration.repositories = this.directories;
  configuration.upnpClasses = this._upnpClasses;
  configuration.contentHandlers = this._contentHandlers;
  configuration.contentProviders = this._contentProviders;

  var self = this;

  if (!callback) {
    callback = function() {
    };
  }

  var upnpServer = new UPNPServer(configuration.httpPort, configuration,
      function(error, upnpServer) {
        if (error) {
          logger.error(error);

          return callback(error);
        }

        self._upnpServerStarted(upnpServer, callback);
      });

  return upnpServer;
};

/**
 * After server start.
 *
 * @param {object}
 *            upnpServer
 */
API.prototype._upnpServerStarted = function(upnpServer, callback) {

  this.emit("starting");

  this.upnpServer = upnpServer;

  var locationURL = 'http://' + ip.address() + ':' +
      this.configuration.httpPort + "/description.xml";

  var self = this;

  var ssdpServer = new SSDP.Server({
    logLevel : self.configuration.ssdpLogLevel, // 'trace',
    log : self.configuration.ssdpLog,
    udn : self.upnpServer.uuid,
    description : "/description.xml",
    location : locationURL,
    ssdpSig: "Node/" + process.versions.node + " UPnP/1.0 " +
        "ChinachuUPnPServer/" + require("./package.json").version
  });
  this.ssdpServer = ssdpServer;

  ssdpServer.addUSN('upnp:rootdevice');
  ssdpServer.addUSN(upnpServer.type);

  var self = this;

  var services = upnpServer.services;
  if (services) {
    for (var route in services){
      ssdpServer.addUSN(services[route].type);
    };
  }

  var httpServer = http.createServer();
  this.httpServer = httpServer;

  httpServer.on('request', this._processRequest.bind(this));

  var self = this;
  httpServer.listen(upnpServer.port, function(error) {
    if (error) {
      return callback(error);
    }

    self.ssdpServer.start();

    self.emit("waiting");

    var address = httpServer.address();

    var hostname = address.address;
    if (address.family === 'IPv6') {
      hostname = '[' + hostname + ']';
    }

    console.log('Ready http://' + hostname + ':' + address.port);

    callback();
  });
};

/**
 * Process request
 *
 * @param {object}
 *            request
 * @param {object}
 *            response
 */
API.prototype._processRequest = function(request, response) {

  var path = url.parse(request.url).pathname;

  // logger.debug("Uri=" + request.url);

  var now = Date.now();
  var self = this;
  try {
    this.upnpServer.processRequest(request, response, path, function(error,
        processed) {

      var stats = {
        request : request,
        response : response,
        path : path,
        processTime : Date.now() - now,
      }

      if (error) {
        response.writeHead(500, 'Server error: ' + error);
        response.end();

        self.emit("code:500", error, stats);
        return;
      }

      if (!processed) {
        response.writeHead(404, 'Resource not found: ' + path);
        response.end();

        self.emit("code:404", stats);
        return;
      }

      self.emit("code:200", stats);
    });

  } catch (error) {
    logger.error("Process request exception", error);
    this.emit("error", error);
  }
};

/**
 * Stop server.
 *
 * @param {function|null}
 *            callback
 */
API.prototype.stop = function(callback) {
  callback = callback || function() {
    return false;
  };

  var httpServer = this.httpServer;
  var ssdpServer = this.ssdpServer;
  var stopped = false;

  if (this.ssdpServer) {
    this.ssdpServer = undefined;
    stopped = true;

    try {
      ssdpServer.stop();

    } catch (error) {
      logger.error(error);
    }
  }

  if (httpServer) {
    this.httpServer = undefined;
    stopped = true;

    try {
      httpServer.stop();

    } catch (error) {
      logger.error(error);
    }
  }

  if (stopped) {
    this.emit("stopped");
  }

  callback(null, stopped);
};

module.exports = API;
 at SyntaxError: Unexpected token (4:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
