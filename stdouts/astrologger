/root/Targets/astrologger
└─┬ astrologger@1.4.5 
  ├── ejs@2.5.7 
  └─┬ express@4.15.5 
    ├─┬ accepts@1.3.4 
    │ ├─┬ mime-types@2.1.17 
    │ │ └── mime-db@1.30.0 
    │ └── negotiator@0.6.1 
    ├── array-flatten@1.1.1 
    ├── content-disposition@0.5.2 
    ├── content-type@1.0.4 
    ├── cookie@0.3.1 
    ├── cookie-signature@1.0.6 
    ├─┬ debug@2.6.9 
    │ └── ms@2.0.0 
    ├── depd@1.1.1 
    ├── encodeurl@1.0.1 
    ├── escape-html@1.0.3 
    ├── etag@1.8.1 
    ├─┬ finalhandler@1.0.6 
    │ └── unpipe@1.0.0 
    ├── fresh@0.5.2 
    ├── merge-descriptors@1.0.1 
    ├── methods@1.1.2 
    ├─┬ on-finished@2.3.0 
    │ └── ee-first@1.1.1 
    ├── parseurl@1.3.2 
    ├── path-to-regexp@0.1.7 
    ├─┬ proxy-addr@1.1.5 
    │ ├── forwarded@0.1.2 
    │ └── ipaddr.js@1.4.0 
    ├── qs@6.5.0 
    ├── range-parser@1.2.0 
    ├─┬ send@0.15.6 
    │ ├── destroy@1.0.4 
    │ ├─┬ http-errors@1.6.2 
    │ │ └── inherits@2.0.3 
    │ └── mime@1.3.4 
    ├── serve-static@1.12.6 
    ├── setprototypeof@1.0.3 
    ├── statuses@1.3.1 
    ├─┬ type-is@1.6.15 
    │ └── media-typer@0.3.0 
    ├── utils-merge@1.0.0 
    └── vary@1.1.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/astrologger/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0629 took 3.3272s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
var exps = require('express'),
    app  = exps(),
    fs   = require('fs'),
    path = process.cwd(),
    port = 3000;

if (process.argv.indexOf("--p") > -1){
    port = process.argv[process.argv.indexOf("--p") + 1];
}

if (process.argv.indexOf("--token") > -1){
    var token = process.argv[process.argv.indexOf("--token") + 1];

    app.all("/api/logs", function (req, res, next) {
      if (req.headers.token === token) {
        next();
      } else {
        res.status(req.headers.token ? 401 : 500).json({
          type : "ERROR",
          status : req.headers.token ? 401 : 500,
          message : req.headers.token ? "TOKEN DIDN'T MATCH" : "TOKEN MISSED"
        });
      }
    });

    app.get("/api/token/:token", function (req, res, next) {
      if (req.params.token == token)
        return res.status(200).json({message : "Logged in"});

      return res.status(401).json({
        type : "ERROR",
        status : 401,
        message : "TOKEN DIDN'T MATCH"
      });
    });
}

if (process.argv.indexOf("--interface") > -1) {
  app.set('view engine', 'html');
  app.set('views', __dirname);
  app.engine('html', require('ejs').renderFile);

  app.use("/static", exps.static(__dirname + "/static"));

  app.get("/", function (req, res, next) {
    res.render("index.html");
  });
}

app.get("/api/logs", function (req, res, next){
  fs.readdir(path, function (err, files) {
    var logs = [];
    files.forEach(function (file) {
      var text = fs.readFileSync(path + "/" + file, 'utf8'),
          json = JSON.parse(text);

      json.forEach(function (log) {logs.push(log)});
    });

    if (req.query) {
        if (req.query.type) {
          logs = logs.filter(function (l) { return l.type.toLowerCase() == req.query.type.toLowerCase()});
        }

        if (req.query.msg) {
          var reg = new RegExp(req.query.msg, "gi");
          logs = logs.filter(function (l) { return !!l.msg.match(reg)});
        }

        if (req.query.initDate) {
          var date = new Date(req.query.initDate);
          logs = logs.filter(function (l) { return new Date(l.date) >= date});
        }

        if (req.query.finalDate) {
          var date = new Date(req.query.finalDate);
          logs = logs.filter(function (l) { return new Date(l.date) <= date});
        }

        if (req.query.flg) {
          var flgs = req.query.flg.split(',');
          logs = logs.filter(function (l) {
            flgs.forEach(function (f){
              if (l.flg.indexOf(f)) return l;
            });
          });
        }

    }

    res.json(logs);
  });
});

app.listen(port, function () {
  console.log("Astronaut Logger : ON | PORT : " + port);
  if (token) console.log("AUTH TOKEN : " + token);
});
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
