
> secp256k1@3.3.0 install /root/Targets/libp2p/node_modules/secp256k1
> prebuild-install || node-gyp rebuild || echo "Secp256k1 bindings compilation fail. Pure JS implementation will be used."

/root/Targets/libp2p
└─┬ libp2p@0.12.4 
  ├─┬ async@2.5.0 
  │ └── lodash@4.17.4 
  ├─┬ libp2p-ping@0.6.0 
  │ ├─┬ libp2p-crypto@0.10.3 
  │ │ ├─┬ asn1.js@4.9.1 
  │ │ │ ├── bn.js@4.11.8 
  │ │ │ ├── inherits@2.0.3 
  │ │ │ └── minimalistic-assert@1.0.0 
  │ │ ├─┬ browserify-aes@1.0.8 
  │ │ │ ├── buffer-xor@1.0.3 
  │ │ │ ├── cipher-base@1.0.4 
  │ │ │ ├─┬ create-hash@1.1.3 
  │ │ │ │ ├─┬ ripemd160@2.0.1 
  │ │ │ │ │ └── hash-base@2.0.2 
  │ │ │ │ └── sha.js@2.4.8 
  │ │ │ ├─┬ evp_bytestokey@1.0.3 
  │ │ │ │ └─┬ md5.js@1.3.4 
  │ │ │ │   └── hash-base@3.0.4 
  │ │ │ └── safe-buffer@5.1.1 
  │ │ ├── keypair@1.0.1 
  │ │ ├─┬ libp2p-crypto-secp256k1@0.2.2 
  │ │ │ ├─┬ nodeify@1.0.1 
  │ │ │ │ ├── is-promise@1.0.1 
  │ │ │ │ └── promise@1.3.0 
  │ │ │ └─┬ secp256k1@3.3.0 
  │ │ │   ├── bindings@1.3.0 
  │ │ │   ├── bip66@1.1.5 
  │ │ │   ├─┬ drbg.js@1.0.1 
  │ │ │   │ └── create-hmac@1.1.6 
  │ │ │   ├─┬ elliptic@6.4.0 
  │ │ │   │ ├── brorand@1.1.0 
  │ │ │   │ ├── hash.js@1.1.3 
  │ │ │   │ ├── hmac-drbg@1.0.1 
  │ │ │   │ └── minimalistic-crypto-utils@1.0.1 
  │ │ │   ├── nan@2.7.0 
  │ │ │   └─┬ prebuild-install@2.2.2 
  │ │ │     ├── expand-template@1.1.0 
  │ │ │     ├── github-from-package@0.0.0 
  │ │ │     ├── minimist@1.2.0 
  │ │ │     ├─┬ mkdirp@0.5.1 
  │ │ │     │ └── minimist@0.0.8 
  │ │ │     ├── node-abi@2.1.1 
  │ │ │     ├── noop-logger@0.1.1 
  │ │ │     ├─┬ npmlog@4.1.2 
  │ │ │     │ ├─┬ are-we-there-yet@1.1.4 
  │ │ │     │ │ └── delegates@1.0.0 
  │ │ │     │ ├── console-control-strings@1.1.0 
  │ │ │     │ ├─┬ gauge@2.7.4 
  │ │ │     │ │ ├── aproba@1.2.0 
  │ │ │     │ │ ├── has-unicode@2.0.1 
  │ │ │     │ │ ├── object-assign@4.1.1 
  │ │ │     │ │ ├── signal-exit@3.0.2 
  │ │ │     │ │ ├─┬ string-width@1.0.2 
  │ │ │     │ │ │ ├── code-point-at@1.1.0 
  │ │ │     │ │ │ └─┬ is-fullwidth-code-point@1.0.0 
  │ │ │     │ │ │   └── number-is-nan@1.0.1 
  │ │ │     │ │ ├─┬ strip-ansi@3.0.1 
  │ │ │     │ │ │ └── ansi-regex@2.1.1 
  │ │ │     │ │ └── wide-align@1.1.2 
  │ │ │     │ └── set-blocking@2.0.0 
  │ │ │     ├── os-homedir@1.0.2 
  │ │ │     ├─┬ pump@1.0.2 
  │ │ │     │ └── end-of-stream@1.4.0 
  │ │ │     ├─┬ rc@1.2.1 
  │ │ │     │ ├── deep-extend@0.4.2 
  │ │ │     │ ├── ini@1.3.4 
  │ │ │     │ └── strip-json-comments@2.0.1 
  │ │ │     ├─┬ simple-get@1.4.3 
  │ │ │     │ └── unzip-response@1.0.2 
  │ │ │     ├─┬ tar-fs@1.15.3 
  │ │ │     │ ├── chownr@1.0.1 
  │ │ │     │ └─┬ tar-stream@1.5.4 
  │ │ │     │   └── bl@1.2.1 
  │ │ │     └── tunnel-agent@0.6.0 
  │ │ ├─┬ multihashing-async@0.4.6 
  │ │ │ ├── blakejs@1.1.0 
  │ │ │ ├── js-sha3@0.6.1 
  │ │ │ └── murmurhash3js@3.0.1 
  │ │ ├─┬ pem-jwk@1.5.1 
  │ │ │ └─┬ asn1.js@1.0.3 
  │ │ │   └── bn.js@1.3.0 
  │ │ ├─┬ protons@1.0.0 
  │ │ │ ├─┬ brfs@1.4.3 
  │ │ │ │ ├─┬ quote-stream@1.0.2 
  │ │ │ │ │ └── buffer-equal@0.0.1 
  │ │ │ │ ├─┬ resolve@1.4.0 
  │ │ │ │ │ └── path-parse@1.0.5 
  │ │ │ │ ├─┬ static-module@1.5.0 
  │ │ │ │ │ ├─┬ concat-stream@1.6.0 
  │ │ │ │ │ │ └── typedarray@0.0.6 
  │ │ │ │ │ ├─┬ duplexer2@0.0.2 
  │ │ │ │ │ │ └─┬ readable-stream@1.1.14 
  │ │ │ │ │ │   ├── isarray@0.0.1 
  │ │ │ │ │ │   └── string_decoder@0.10.31 
  │ │ │ │ │ ├─┬ escodegen@1.3.3 
  │ │ │ │ │ │ ├── esprima@1.1.1 
  │ │ │ │ │ │ ├── estraverse@1.5.1 
  │ │ │ │ │ │ ├── esutils@1.0.0 
  │ │ │ │ │ │ └─┬ source-map@0.1.43 
  │ │ │ │ │ │   └── amdefine@1.0.1 
  │ │ │ │ │ ├─┬ falafel@2.1.0 
  │ │ │ │ │ │ ├── acorn@5.1.2 
  │ │ │ │ │ │ ├── foreach@2.0.5 
  │ │ │ │ │ │ ├── isarray@0.0.1 
  │ │ │ │ │ │ └── object-keys@1.0.11 
  │ │ │ │ │ ├─┬ has@1.0.1 
  │ │ │ │ │ │ └── function-bind@1.1.1 
  │ │ │ │ │ ├── object-inspect@0.4.0 
  │ │ │ │ │ ├─┬ quote-stream@0.0.0 
  │ │ │ │ │ │ └── minimist@0.0.8 
  │ │ │ │ │ ├─┬ readable-stream@1.0.34 
  │ │ │ │ │ │ ├── core-util-is@1.0.2 
  │ │ │ │ │ │ ├── isarray@0.0.1 
  │ │ │ │ │ │ └── string_decoder@0.10.31 
  │ │ │ │ │ ├── shallow-copy@0.0.1 
  │ │ │ │ │ ├─┬ static-eval@0.2.4 
  │ │ │ │ │ │ └─┬ escodegen@0.0.28 
  │ │ │ │ │ │   ├── esprima@1.0.4 
  │ │ │ │ │ │   └── estraverse@1.3.2 
  │ │ │ │ │ └─┬ through2@0.4.2 
  │ │ │ │ │   └─┬ xtend@2.1.2 
  │ │ │ │ │     └── object-keys@0.4.0 
  │ │ │ │ └─┬ through2@2.0.3 
  │ │ │ │   └─┬ readable-stream@2.3.3 
  │ │ │ │     ├── isarray@1.0.0 
  │ │ │ │     ├── process-nextick-args@1.0.7 
  │ │ │ │     └── string_decoder@1.0.3 
  │ │ │ ├── protocol-buffers-schema@3.3.1 
  │ │ │ └── signed-varint@2.0.1 
  │ │ ├─┬ rsa-pem-to-jwk@1.1.3 
  │ │ │ ├── object-assign@2.1.1 
  │ │ │ └─┬ rsa-unpack@0.0.6 
  │ │ │   └─┬ optimist@0.3.7 
  │ │ │     └── wordwrap@0.0.3 
  │ │ ├── tweetnacl@1.0.0 
  │ │ └── webcrypto-shim@0.1.1  (git://github.com/dignifiedquire/webcrypto-shim.git#effe03d3401ccbfb4837191bc393bb347e0c0f0a)
  │ ├─┬ pull-handshake@1.1.4 
  │ │ ├── pull-cat@1.1.11 
  │ │ ├── pull-pair@1.1.0 
  │ │ ├── pull-pushable@2.1.1 
  │ │ └── pull-reader@1.2.9 
  │ └── pull-stream@3.6.1 
  ├─┬ libp2p-swarm@0.32.4 
  │ ├─┬ browserify-zlib-next@1.0.1 
  │ │ └── pako@1.0.6 
  │ ├─┬ debug@3.0.1 
  │ │ └── ms@2.0.0 
  │ ├─┬ interface-connection@0.3.2 
  │ │ ├── pull-defer@0.2.2 
  │ │ └── timed-tape@0.1.1 
  │ ├─┬ ip-address@5.8.8 
  │ │ ├── jsbn@0.1.0 
  │ │ ├── lodash.find@4.6.0 
  │ │ ├── lodash.max@4.0.1 
  │ │ ├── lodash.merge@4.6.0 
  │ │ ├── lodash.padstart@4.6.1 
  │ │ ├── lodash.repeat@4.1.0 
  │ │ ├── sprintf-js@1.1.1 
  │ │ └── util-deprecate@1.0.2 
  │ ├─┬ libp2p-identify@0.6.1 
  │ │ └── pull-length-prefixed@1.3.0 
  │ ├── lodash.includes@4.3.0 
  │ ├─┬ multistream-select@0.13.5 
  │ │ ├── debug@2.6.8 
  │ │ ├── lodash.isfunction@3.0.8 
  │ │ ├── lodash.range@3.2.0 
  │ │ └── semver@5.4.1 
  │ └─┬ once@1.4.0 
  │   └── wrappy@1.0.2 
  ├── mafmt@3.0.1 
  ├─┬ multiaddr@3.0.1 
  │ ├─┬ bs58@4.0.1 
  │ │ └── base-x@3.0.2 
  │ ├── ip@1.1.5 
  │ ├── lodash.filter@4.6.0 
  │ ├── lodash.map@4.6.0 
  │ ├── varint@5.0.0 
  │ └── xtend@4.0.1 
  ├── peer-book@0.5.1 
  ├─┬ peer-id@0.10.1 
  │ └── multihashes@0.4.9 
  └─┬ peer-info@0.11.0 
    └── lodash.uniqby@4.7.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/libp2p/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0439 took 3.2011s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (4:6) on program 'use strict'

const EventEmitter = require('events').EventEmitter
const assert = require('assert')

const setImmediate = require('async/setImmediate')
const each = require('async/each')
const series = require('async/series')

const Ping = require('libp2p-ping')
const Swarm = require('libp2p-swarm')
const PeerId = require('peer-id')
const PeerInfo = require('peer-info')
const PeerBook = require('peer-book')
const mafmt = require('mafmt')
const multiaddr = require('multiaddr')

exports = module.exports

const NOT_STARTED_ERROR_MESSAGE = 'The libp2p node is not started yet'

class Node extends EventEmitter {
  constructor (_modules, _peerInfo, _peerBook, _options) {
    super()
    assert(_modules, 'requires modules to equip libp2p with features')
    assert(_peerInfo, 'requires a PeerInfo instance')

    this.modules = _modules
    this.peerInfo = _peerInfo
    this.peerBook = _peerBook || new PeerBook()
    _options = _options || {}

    this._isStarted = false

    this.swarm = new Swarm(this.peerInfo, this.peerBook)

    // Attach stream multiplexers
    if (this.modules.connection && this.modules.connection.muxer) {
      let muxers = this.modules.connection.muxer
      muxers = Array.isArray(muxers) ? muxers : [muxers]
      muxers.forEach((muxer) => this.swarm.connection.addStreamMuxer(muxer))

      // If muxer exists, we can use Identify
      this.swarm.connection.reuse()

      // Received incommind dial and muxer upgrade happened,
      // reuse this muxed connection
      this.swarm.on('peer-mux-established', (peerInfo) => {
        this.emit('peer:connect', peerInfo)
        this.peerBook.put(peerInfo)
      })

      this.swarm.on('peer-mux-closed', (peerInfo) => {
        this.emit('peer:disconnect', peerInfo)
      })
    }

    // Attach crypto channels
    if (this.modules.connection && this.modules.connection.crypto) {
      let cryptos = this.modules.connection.crypto
      cryptos = Array.isArray(cryptos) ? cryptos : [cryptos]
      cryptos.forEach((crypto) => {
        this.swarm.connection.crypto(crypto.tag, crypto.encrypt)
      })
    }

    // Attach discovery mechanisms
    if (this.modules.discovery) {
      let discoveries = this.modules.discovery
      discoveries = Array.isArray(discoveries) ? discoveries : [discoveries]

      discoveries.forEach((discovery) => {
        discovery.on('peer', (peerInfo) => this.emit('peer:discovery', peerInfo))
      })
    }

    // Mount default protocols
    Ping.mount(this.swarm)

    // dht provided components (peerRouting, contentRouting, dht)
    if (_modules.DHT) {
      this._dht = new this.modules.DHT(this.swarm, {
        kBucketSize: 20,
        datastoer: _options.DHT && _options.DHT.datastore
      })
    }

    this.peerRouting = {
      findPeer: (id, callback) => {
        if (!this._dht) {
          return callback(new Error('DHT is not available'))
        }

        this._dht.findPeer(id, callback)
      }
    }

    this.contentRouting = {
      findProviders: (key, timeout, callback) => {
        if (!this._dht) {
          return callback(new Error('DHT is not available'))
        }

        this._dht.findProviders(key, timeout, callback)
      },
      provide: (key, callback) => {
        if (!this._dht) {
          return callback(new Error('DHT is not available'))
        }

        this._dht.provide(key, callback)
      }
    }

    this.dht = {
      put: (key, value, callback) => {
        if (!this._dht) {
          return callback(new Error('DHT is not available'))
        }

        this._dht.put(key, value, callback)
      },
      get: (key, callback) => {
        if (!this._dht) {
          return callback(new Error('DHT is not available'))
        }

        this._dht.get(key, callback)
      },
      getMany (key, nVals, callback) {
        if (!this._dht) {
          return callback(new Error('DHT is not available'))
        }

        this._dht.getMany(key, nVals, callback)
      }
    }
  }

  /*
   * Start the libp2p node
   *   - create listeners on the multiaddrs the Peer wants to listen
   */
  start (callback) {
    if (!this.modules.transport) {
      return callback(new Error('no transports were present'))
    }

    let ws
    let transports = this.modules.transport

    transports = Array.isArray(transports) ? transports : [transports]

    // so that we can have webrtc-star addrs without adding manually the id
    const maOld = []
    const maNew = []
    this.peerInfo.multiaddrs.forEach((ma) => {
      if (!mafmt.IPFS.matches(ma)) {
        maOld.push(ma)
        maNew.push(ma.encapsulate('/ipfs/' + this.peerInfo.id.toB58String()))
      }
    })
    this.peerInfo.multiaddrs.replace(maOld, maNew)
    const multiaddrs = this.peerInfo.multiaddrs.toArray()

    transports.forEach((transport) => {
      if (transport.filter(multiaddrs).length > 0) {
        this.swarm.transport.add(
          transport.tag || transport.constructor.name, transport)
      } else if (transport.constructor &&
                 transport.constructor.name === 'WebSockets') {
        // TODO find a cleaner way to signal that a transport is always
        // used for dialing, even if no listener
        ws = transport
      }
    })

    series([
      (cb) => this.swarm.listen(cb),
      (cb) => {
        if (ws) {
          // always add dialing on websockets
          this.swarm.transport.add(ws.tag || ws.constructor.name, ws)
        }

        // all transports need to be setup before discover starts
        if (this.modules.discovery) {
          return each(this.modules.discovery, (d, cb) => d.start(cb), cb)
        }
        cb()
      },
      (cb) => {
        // TODO: chicken-and-egg problem:
        // have to set started here because DHT requires libp2p is already started
        this._isStarted = true
        if (this._dht) {
          return this._dht.start(cb)
        }
        cb()
      },
      (cb) => {
        this.emit('start')
        cb()
      }
    ], callback)
  }

  /*
   * Stop the libp2p node by closing its listeners and open connections
   */
  stop (callback) {
    this._isStarted = false

    if (this.modules.discovery) {
      this.modules.discovery.forEach((discovery) => {
        setImmediate(() => discovery.stop(() => {}))
      })
    }

    series([
      (cb) => {
        if (this._dht) {
          return this._dht.stop(cb)
        }
        cb()
      },
      (cb) => this.swarm.close(cb),
      (cb) => {
        this.emit('stop')
        cb()
      }
    ], callback)
  }

  isStarted () {
    return this._isStarted
  }

  ping (peer, callback) {
    assert(this.isStarted(), NOT_STARTED_ERROR_MESSAGE)
    this._getPeerInfo(peer, (err, peerInfo) => {
      if (err) {
        return callback(err)
      }

      callback(null, new Ping(this.swarm, peerInfo))
    })
  }

  dial (peer, protocol, callback) {
    assert(this.isStarted(), NOT_STARTED_ERROR_MESSAGE)

    if (typeof protocol === 'function') {
      callback = protocol
      protocol = undefined
    }

    this._getPeerInfo(peer, (err, peerInfo) => {
      if (err) {
        return callback(err)
      }

      this.swarm.dial(peerInfo, protocol, (err, conn) => {
        if (err) {
          return callback(err)
        }
        this.peerBook.put(peerInfo)
        callback(null, conn)
      })
    })
  }

  hangUp (peer, callback) {
    assert(this.isStarted(), NOT_STARTED_ERROR_MESSAGE)

    this._getPeerInfo(peer, (err, peerInfo) => {
      if (err) {
        return callback(err)
      }

      this.swarm.hangUp(peerInfo, callback)
    })
  }

  handle (protocol, handlerFunc, matchFunc) {
    this.swarm.handle(protocol, handlerFunc, matchFunc)
  }

  unhandle (protocol) {
    this.swarm.unhandle(protocol)
  }

  /*
   * Helper method to check the data type of peer and convert it to PeerInfo
   */
  _getPeerInfo (peer, callback) {
    let p
    // PeerInfo
    if (PeerInfo.isPeerInfo(peer)) {
      p = peer
    // Multiaddr instance (not string)
    } else if (multiaddr.isMultiaddr(peer)) {
      const peerIdB58Str = peer.getPeerId()
      try {
        p = this.peerBook.get(peerIdB58Str)
      } catch (err) {
        p = new PeerInfo(PeerId.createFromB58String(peerIdB58Str))
      }
      p.multiaddrs.add(peer)
    // PeerId
    } else if (PeerId.isPeerId(peer)) {
      const peerIdB58Str = peer.toB58String()
      try {
        p = this.peerBook.get(peerIdB58Str)
      } catch (err) {
        return this.peerRouting.findPeer(peer, callback)
      }
    } else {
      return setImmediate(() => callback(new Error('peer type not recognized')))
    }

    setImmediate(() => callback(null, p))
  }
}

module.exports = Node
 at SyntaxError: Unexpected token (4:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
