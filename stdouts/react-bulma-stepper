/root/Targets/react-bulma-stepper
└─┬ react-bulma-stepper@1.0.0 
  ├── bulma@0.3.2 
  └─┬ react@15.6.2 
    ├── create-react-class@15.6.2 
    ├─┬ fbjs@0.8.16 
    │ ├── core-js@1.2.7 
    │ ├─┬ isomorphic-fetch@2.2.1 
    │ │ ├─┬ node-fetch@1.7.3 
    │ │ │ ├─┬ encoding@0.1.12 
    │ │ │ │ └── iconv-lite@0.4.19 
    │ │ │ └── is-stream@1.1.0 
    │ │ └── whatwg-fetch@2.0.3 
    │ ├─┬ promise@7.3.1 
    │ │ └── asap@2.0.6 
    │ ├── setimmediate@1.0.5 
    │ └── ua-parser-js@0.7.14 
    ├─┬ loose-envify@1.3.1 
    │ └── js-tokens@3.0.2 
    ├── object-assign@4.1.1 
    └── prop-types@15.6.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/react-bulma-stepper/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.1109 took 8.2655s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (23:6) on program import React, {Component,PropTypes} from 'react';

const DONE = 0;
const NOW  = 1;
const YET  = 2;

class Pathway extends Component {
  render() {
    const styles = {
      outline: {
        flex:              1,
        display:      'flex',
        alignItems: 'center',
      },
      line: {
        display: 'inline-block',
        height:           '1px',
        flex:                 1,
        margin:        '0 16px',
      }
    };
    return (
      <div style={styles.outline}>
        <hr style={styles.line} />
      </div>
    );
  }
}

export class Stepper extends Component {
  decorateStep(step) {
    return React.cloneElement(step, {
      status: this.getStepStatus(step),
    });
  }
  getStepStatus(step) {
    if (step.props.step < this.props.step) return DONE;
    if (step.props.step > this.props.step) return YET;
    return NOW;
  }
  getChildren() {
    if (!Array.isArray(this.props.children)) return this.props.children;
    if (typeof this.props.children.map != 'function') return this.props.children;
    const len = this.props.children.length;
    return this.props.children
    .map((n, i) => (i == len - 1) ? [this.decorateStep(n)] : [this.decorateStep(n), <Pathway />])
    .reduce((self, node) => self.concat(node))
    .map((node, i) => React.cloneElement(node, {key: i}));
  }
  render() {
    const styles = {
      outline: {
        display:    'flex',
        alignItems: 'center',
      }
    };
    return (
      <div style={styles.outline}>
        {this.getChildren()}
      </div>
    );
  }
  static propTypes = {
    children: PropTypes.node.isRequired,
    step:     PropTypes.number.isRequired,
  }
}

export class Step extends Component {
  getLabelClassName() {
    switch(this.props.status){
    case DONE: return 'tag is-primary';
    case NOW:  return 'tag is-primary';
    default:   return 'tag is-light';
    }
  }
  getLabelText() {
    if (this.props.status == DONE) return '✔︎';
    return this.props.step;
  }
  getLabel() {
    const styles = {
      base: {
        width:  '20px',
        height: '20px',
        marginRight: 8,
        transition: 'all 0.4s',
      },
    };
    return <span className={this.getLabelClassName()} style={styles.base}>{this.getLabelText()}</span>;
  }
  render() {
    const styles = {
      outline: {
        display:      'flex',
        alignItems: 'center',
      },
      title: {
        // fontWeight: (this.props.status == NOW) ? 'bold' : 'normal',
        textDecoration: (this.props.status == NOW) ? 'underline' : 'none',
      }
    };
    return (
      <div style={styles.outline}>
        {this.getLabel()}
        <span style={styles.title}>{this.props.title}</span>
      </div>
    );
  }
  static propTypes = {
    step:  PropTypes.number.isRequired,
    label: PropTypes.string,
    title: PropTypes.string.isRequired,
    status: PropTypes.oneOf([DONE,NOW,YET]),
  }
}
 at SyntaxError: Unexpected token (23:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseParenAndDistinguishExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1861:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
