/root/Targets/chai-stream-es6
└─┬ chai-stream-es6@0.0.2 
  ├─┬ chai@3.5.0 
  │ ├── assertion-error@1.0.2 
  │ ├─┬ deep-eql@0.1.3 
  │ │ └── type-detect@0.1.1 
  │ └── type-detect@1.0.0 
  ├─┬ chai-as-promised@6.0.0 
  │ └── check-error@1.0.2 
  ├─┬ expect@1.20.2 
  │ ├─┬ define-properties@1.1.2 
  │ │ └── foreach@2.0.5 
  │ ├─┬ has@1.0.1 
  │ │ └── function-bind@1.1.1 
  │ ├─┬ is-equal@1.5.5 
  │ │ ├── is-arrow-function@2.0.3 
  │ │ ├── is-boolean-object@1.0.0 
  │ │ ├── is-callable@1.1.3 
  │ │ ├── is-date-object@1.0.1 
  │ │ ├── is-generator-function@1.0.6 
  │ │ ├── is-number-object@1.0.3 
  │ │ ├── is-string@1.0.4 
  │ │ ├── is-symbol@1.0.1 
  │ │ └─┬ object.entries@1.0.4 
  │ │   └─┬ es-abstract@1.9.0 
  │ │     └── es-to-primitive@1.1.1 
  │ ├── is-regex@1.0.4 
  │ ├── object-inspect@1.3.0 
  │ ├── object-keys@1.0.11 
  │ └── tmatch@2.0.1 
  ├─┬ highland@2.11.1 
  │ └── util-deprecate@1.0.2 
  └─┬ invariant@2.2.2 
    └─┬ loose-envify@1.3.1 
      └── js-tokens@3.0.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/chai-stream-es6/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 21% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","apply"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0254 took 6.2831s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (10:6) on program 'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _helpers = require('./helpers');

function extendTDDStyle(chai) {
  var assert = chai.assert;
  var AssertionError = chai.AssertionError;

  /*
   * Examples:
   *   - assert.isStream(obj)
   *   - assert.isNotStream(obj)
   */

  assert.isStream = function (actual) {
    assert((0, _helpers.isStream)(actual), 'expected ' + actual + ' to be a Stream ');
  };

  assert.isNotStream = function (actual) {
    assert(!(0, _helpers.isStream)(actual), 'expected ' + actual + ' to not be a Stream ');
  };

  /*
   * Examples:
   *   - assert.isReadableStream(obj)
   *   - assert.isNotReadableStream(obj)
   */
  assert.isReadableStream = function (actual) {
    assert.isStream(actual);
    assert((0, _helpers.isReadable)(actual), 'expected ' + actual + ' to be a ReadableStream ');
  };

  assert.isNotReadableStream = function (actual) {
    assert.isStream(actual);
    assert(!(0, _helpers.isReadable)(actual), 'expected ' + actual + ' to not be a ReadableStream ');
  };

  /*
   * Examples:
   *   - assert.isWritableStream(obj)
   *   - assert.isNotWritableStream(obj)
   */
  assert.isWritableStream = function (actual) {
    assert.isStream(actual);
    assert((0, _helpers.isWritable)(actual), 'expected ' + actual + ' to be a WritableStream ');
  };

  assert.isNotWritableStream = function (actual) {
    assert.isStream(actual);
    assert(!(0, _helpers.isWritable)(actual), 'expected ' + actual + ' to not be a WritableStream ');
  };

  /*
   * Examples:
   *   - assert.streamWillEnd(stream);
   *   - assert.streamWillNotEnd(stream);
   */
  assert.streamWillEnd = function (actual) {
    return new Promise(function (onFulfilled) {
      assert.isReadableStream(actual);
      onFulfilled();
    }).then(function () {
      return (0, _helpers.waitUntilEndEventFired)(actual, 1000);
    }).catch(function (error) {
      if (error instanceof _helpers.TimeoutError) {
        throw new AssertionError('expected the stream to end but not end');
      }

      throw error;
    });
  };

  assert.streamWillNotEnd = function (actual) {
    return new Promise(function (onFulfilled) {
      assert.isReadableStream(actual);
      onFulfilled();
    }).then(function () {
      return (0, _helpers.waitUntilEndEventFired)(actual, 1000);
    }).then(function () {
      throw new AssertionError('expect the stream to not end but end');
    }, function (error) {
      if (error instanceof _helpers.TimeoutError) {
        return;
      }

      throw error;
    });
  };
}

exports.default = extendTDDStyle; at SyntaxError: Unexpected token (10:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/chai-stream-es6/node_modules/chai-stream-es6/lib/index.js. Coverage (Term): 56% Coverage (LOC): 69%
*- File /root/Targets/chai-stream-es6/node_modules/highland/lib/index.js. Coverage (Term): 12% Coverage (LOC): 19%
*- File /root/Targets/chai-stream-es6/node_modules/util-deprecate/node.js. Coverage (Term): 95% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
