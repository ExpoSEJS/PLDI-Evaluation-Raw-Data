/root/Targets/cssparser
└── cssparser@0.9.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/cssparser/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0442 took 3.7263s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

(function() {
  var colors = require('colors');
  var cssparser = require('./cssparser.js');
  var nomnom = require('nomnom');
  var fs = require('fs');
  var path = require('path');

  var version = require('../package.json').version;

  var opts = require("nomnom")
    .script('cssparser')
    .option('file', {
      flag: true,
      position: 0,
      help: 'CSS document file'
    })
    .option('outfile', {
      abbr: 'o',
      metavar: 'FILE',
      help: 'Filename or base name of the generated JSON'
    })
    .option('indent', {
      abbr: 'i',
      default: 4,
      help: 'indentation(string or number)'
    })
    .option('type', {
      abbr: 't',
      default: 'simple',
      choices: ['simple', 'deep', 'atomic'],
      metavar: 'TYPE',
      help: 'The type of JSON to generate (simple, deep, atomic)'
    })
    .option('console', {
      abbr: 'c',
      flag: true,
      help: 'Display JSON to console only. this option will ignore output-file options.'
    })
    .option('beautify-delimiter', {
      abbr: 'b',
      flag: true,
      help: 'Beautify delimiters such as comma and whitespaces for simple & deep type.'
    })
    .option('version', {
      abbr: 'v',
      flag: true,
      help: 'print version and exit',
      callback: function() {
        return version;
      }
    })
    .parse();

  function toJSON(raw, type, indent, beautifyDelimiter) {
    var parser = new cssparser.Parser();
    var ast = parser.parse(raw)

    if (beautifyDelimiter) {
      ast.setOptions({
        commaDelimiter: ', ',
        whitespaceDelimiter: ' '
      })
    }

    return JSON.stringify(ast.toJSON(type), null, indent);
  }

  if (opts.file) {
    try {
      var raw = fs.readFileSync(path.normalize(opts.file), 'utf8');
    } catch (e) {
      console.error(e.toString().red + '\n' + e.stack.red);
      return;
    }

    var name = path.basename((opts.outfile || opts.file)).replace(/\..*$/g, '');
    var type = opts.type;
    var indent = opts.indent;
    var beautifyDelimiter = opts['beautify-delimiter'];

    try {
      var json = toJSON(raw, type, indent, beautifyDelimiter);
    } catch (e) {
      var output = e.message
      if ('stack' in e) {
        output += '\n' + e.stack
      }
      if ('hash' in e) {
        output += '\n' + JSON.stringify(e[e.hash], null, '\t')
      }
      console.error(output.red);
      return;
    }

    if (opts.console) {
      console.log(json);
    } else {
      fs.writeFileSync(opts.outfile || (name + '.json'), json);
    }
  }
})();
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
