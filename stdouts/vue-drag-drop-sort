/root/Targets/vue-drag-drop-sort
└── vue-drag-drop-sort@1.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/vue-drag-drop-sort/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.051 took 4.2606s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:78) on program <template>
<div>
    <ul>
        <li draggable="true"
            @drag="drag"
            @dragend="dragend"
            @dragenter="dragenter($event)"
            @dragleave="dragleave($event)"
            @dragover="dragover($event)"
            @dragstart="dragstart($event)"
            @drop="drop($event)"
            @mouseleave="mouseleave"
            v-for="item in list"
            :data-index="$index"
            :class="{ 'insert': insertIndex !== false && insertIndex*1 === $index }"
            >{{ item }}</li>
    </ul>
</div>
</template>
<style lang="less">
ul {
    margin: 0;
    padding: 0;
    list-style: none;
    li {
        text-align: center;
        margin: 10px;
        padding: 15px 30px;
        background: green;
        border: solid 1px green;
        color: white;
        float: left;
    }
    .insert {
        background: white;
        border: dashed 1px black;
        color: black;
    }
}
</style>
<script>
export default {
    name: "dragAndDrop",
    props: {
        list: {
            style: Array,
            defalult: []
        }
    },
    data: function () {
        return {
            list: ["a", "b", "c", "d"],
            dragInfo: {
                index: 0,
                detail: {}
            },
            // 去重(dragenter会一次触发两次)
            enterRepeatFlg: 0,
            // 去重(dragleave偶数次触发才有效)
            leaveRepeatFlg: 0,
            // 是否发生drop
            dropFlg: false,
            // 插入元素Index
            insertIndex: false,
        };
    },
    methods: {
        mouseleave: function () {
            this.insertIndex = false;
        },
        dragstart: function (e) {
            let vue = this;
            let index = e.target.dataset.index;
            vue.dragInfo.index = index;
            vue.dragInfo.detail = vue.list[index];
            setTimeout(function () {
                vue.list.splice(index, 1);
            }, 10);
        },
        drag: function () {
            // 拖动过程中会不停的触发该事件
        },
        dragend: function () {
            // 当所操控元素在页面上已不存在时, 不会触发dragend事件
        },
        dragenter: function (e) {
            let vue = this;
            let currentIndex = e.target.dataset.index;
            this.leaveRepeatFlg = 0;
            // 屏蔽无意义重复事件
            if (this.dragInfo.index == currentIndex) return;
            if (this.enterRepeatFlg != 0) return;
            this.enterRepeatFlg = 1;
            // 插入元素
            this.list.splice(currentIndex, 0, this.dragInfo.detail);
            this.insertIndex = currentIndex;
            // 重置状态
            setTimeout(function () {
                vue.enterRepeatFlg = 0;
            }, 5);
        },
        dragover: function (e) {
            e.preventDefault();
        },
        dragleave: function (e) {
            if (this.leaveRepeatFlg == 0) {
                this.leaveRepeatFlg = 1;
                return;
            }
            let index = e.target.dataset.index;
            this.list.splice(index, 1);
            this.insertIndex = false;
            this.leaveRepeatFlg = 0;
        },
        drop: function (e) {
            this.dropFlg = true;
        },
    },
    ready: function () {
    }
}
</script> at SyntaxError: Unexpected token (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
