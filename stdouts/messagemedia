/root/Targets/messagemedia
└─┬ messagemedia@0.0.3 
  ├─┬ elementtree@0.1.7 
  │ └── sax@1.1.4 
  ├─┬ express@3.2.6 
  │ ├── buffer-crc32@0.2.1 
  │ ├── commander@0.6.1 
  │ ├─┬ connect@2.7.11 
  │ │ ├── bytes@0.2.0 
  │ │ ├── cookie@0.0.5 
  │ │ ├── formidable@1.0.14 
  │ │ ├── pause@0.0.1 
  │ │ ├── qs@0.6.5 
  │ │ └─┬ send@0.1.1 
  │ │   └── mime@1.2.11 
  │ ├── cookie@0.1.0 
  │ ├── cookie-signature@1.0.1 
  │ ├─┬ debug@3.0.1 
  │ │ └── ms@2.0.0 
  │ ├── fresh@0.1.0 
  │ ├── methods@0.0.1 
  │ ├── mkdirp@0.3.4 
  │ ├── range-parser@0.0.4 
  │ └─┬ send@0.1.0 
  │   └── mime@1.2.6 
  ├─┬ jade@1.3.1 
  │ ├── character-parser@1.2.0 
  │ ├── commander@2.1.0 
  │ ├─┬ constantinople@2.0.1 
  │ │ └─┬ uglify-js@2.4.24 
  │ │   ├── async@0.2.10 
  │ │   ├─┬ source-map@0.1.34 
  │ │   │ └── amdefine@1.0.1 
  │ │   ├── uglify-to-browserify@1.0.2 
  │ │   └─┬ yargs@3.5.4 
  │ │     ├── camelcase@1.2.1 
  │ │     ├── decamelize@1.2.0 
  │ │     ├── window-size@0.1.0 
  │ │     └── wordwrap@0.0.2 
  │ ├── mkdirp@0.3.5 
  │ ├─┬ monocle@1.1.51 
  │ │ └─┬ readdirp@0.2.5 
  │ │   └─┬ minimatch@3.0.4 
  │ │     └─┬ brace-expansion@1.1.8 
  │ │       ├── balanced-match@1.0.0 
  │ │       └── concat-map@0.0.1 
  │ ├─┬ transformers@2.1.0 
  │ │ ├─┬ css@1.0.8 
  │ │ │ ├── css-parse@1.0.4 
  │ │ │ └── css-stringify@1.0.5 
  │ │ ├─┬ promise@2.0.0 
  │ │ │ └── is-promise@1.0.1 
  │ │ └─┬ uglify-js@2.2.5 
  │ │   └── optimist@0.3.7 
  │ └── with@3.0.1 
  ├─┬ nodeunit@0.8.6 
  │ └─┬ tap@10.7.2 
  │   ├── bind-obj-methods@1.0.0 
  │   ├── bluebird@3.5.0 
  │   ├── clean-yaml-object@0.1.0 
  │   ├── color-support@1.1.3 
  │   ├─┬ coveralls@2.13.1 
  │   │ ├─┬ js-yaml@3.6.1 
  │   │ │ └── esprima@2.7.3 
  │   │ ├── lcov-parse@0.0.10 
  │   │ ├── log-driver@1.2.5 
  │   │ └── minimist@1.2.0 
  │   ├─┬ foreground-child@1.5.6 
  │   │ └─┬ cross-spawn@4.0.2 
  │   │   ├─┬ lru-cache@4.1.1 
  │   │   │ ├── pseudomap@1.0.2 
  │   │   │ └── yallist@2.1.2 
  │   │   └── which@1.3.0 
  │   ├── fs-exists-cached@1.0.0 
  │   ├── function-loop@1.0.1 
  │   ├─┬ glob@7.1.2 
  │   │ ├── fs.realpath@1.0.0 
  │   │ ├─┬ inflight@1.0.6 
  │   │ │ └── wrappy@1.0.2 
  │   │ ├── inherits@2.0.3 
  │   │ ├── once@1.4.0 
  │   │ └── path-is-absolute@1.0.1 
  │   ├── isexe@2.0.0 
  │   ├─┬ js-yaml@3.10.0 
  │   │ ├─┬ argparse@1.0.9 
  │   │ │ └── sprintf-js@1.0.3 
  │   │ └── esprima@4.0.0 
  │   ├─┬ nyc@11.2.1 
  │   │ ├── archy@1.0.0 
  │   │ ├── arrify@1.0.1 
  │   │ ├─┬ caching-transform@1.0.1 
  │   │ │ └─┬ write-file-atomic@1.3.4 
  │   │ │   ├── graceful-fs@4.1.11 
  │   │ │   ├── imurmurhash@0.1.4 
  │   │ │   └── slide@1.1.6 
  │   │ ├── convert-source-map@1.5.0 
  │   │ ├── debug-log@1.0.1 
  │   │ ├─┬ default-require-extensions@1.0.0 
  │   │ │ └─┬ strip-bom@2.0.0 
  │   │ │   └── is-utf8@0.2.1 
  │   │ ├─┬ find-cache-dir@0.1.1 
  │   │ │ ├── commondir@1.0.1 
  │   │ │ └─┬ pkg-dir@1.0.0 
  │   │ │   └─┬ find-up@1.1.2 
  │   │ │     ├── path-exists@2.1.0 
  │   │ │     └─┬ pinkie-promise@2.0.1 
  │   │ │       └── pinkie@2.0.4 
  │   │ ├─┬ find-up@2.1.0 
  │   │ │ └─┬ locate-path@2.0.0 
  │   │ │   ├─┬ p-locate@2.0.0 
  │   │ │   │ └── p-limit@1.1.0 
  │   │ │   └── path-exists@3.0.0 
  │   │ ├─┬ foreground-child@1.5.6 
  │   │ │ └─┬ cross-spawn@4.0.2 
  │   │ │   └─┬ lru-cache@4.1.1 
  │   │ │     ├── pseudomap@1.0.2 
  │   │ │     └── yallist@2.1.2 
  │   │ ├─┬ glob@7.1.2 
  │   │ │ ├── fs.realpath@1.0.0 
  │   │ │ ├─┬ inflight@1.0.6 
  │   │ │ │ └── wrappy@1.0.2 
  │   │ │ ├── inherits@2.0.3 
  │   │ │ ├─┬ minimatch@3.0.4 
  │   │ │ │ └─┬ brace-expansion@1.1.8 
  │   │ │ │   ├── balanced-match@1.0.0 
  │   │ │ │   └── concat-map@0.0.1 
  │   │ │ ├── once@1.4.0 
  │   │ │ └── path-is-absolute@1.0.1 
  │   │ ├── istanbul-lib-coverage@1.1.1 
  │   │ ├─┬ istanbul-lib-hook@1.0.7 
  │   │ │ └── append-transform@0.4.0 
  │   │ ├─┬ istanbul-lib-instrument@1.8.0 
  │   │ │ ├─┬ babel-generator@6.26.0 
  │   │ │ │ ├── babel-messages@6.23.0 
  │   │ │ │ ├─┬ babel-runtime@6.26.0 
  │   │ │ │ │ ├── core-js@2.5.1 
  │   │ │ │ │ └── regenerator-runtime@0.11.0 
  │   │ │ │ ├─┬ detect-indent@4.0.0 
  │   │ │ │ │ └─┬ repeating@2.0.1 
  │   │ │ │ │   └── is-finite@1.0.2 
  │   │ │ │ ├── jsesc@1.3.0 
  │   │ │ │ ├── lodash@4.17.4 
  │   │ │ │ └── trim-right@1.0.1 
  │   │ │ ├── babel-template@6.26.0 
  │   │ │ ├─┬ babel-traverse@6.26.0 
  │   │ │ │ ├─┬ babel-code-frame@6.26.0 
  │   │ │ │ │ ├─┬ chalk@1.1.3 
  │   │ │ │ │ │ ├── ansi-styles@2.2.1 
  │   │ │ │ │ │ ├── escape-string-regexp@1.0.5 
  │   │ │ │ │ │ ├── has-ansi@2.0.0 
  │   │ │ │ │ │ └── supports-color@2.0.0 
  │   │ │ │ │ └── js-tokens@3.0.2 
  │   │ │ │ ├── globals@9.18.0 
  │   │ │ │ └─┬ invariant@2.2.2 
  │   │ │ │   └── loose-envify@1.3.1 
  │   │ │ ├─┬ babel-types@6.26.0 
  │   │ │ │ ├── esutils@2.0.2 
  │   │ │ │ └── to-fast-properties@1.0.3 
  │   │ │ ├── babylon@6.18.0 
  │   │ │ └── semver@5.4.1 
  │   │ ├─┬ istanbul-lib-report@1.1.1 
  │   │ │ ├── path-parse@1.0.5 
  │   │ │ └─┬ supports-color@3.2.3 
  │   │ │   └── has-flag@1.0.0 
  │   │ ├─┬ istanbul-lib-source-maps@1.2.1 
  │   │ │ ├─┬ debug@2.6.8 
  │   │ │ │ └── ms@2.0.0 
  │   │ │ └── source-map@0.5.7 
  │   │ ├─┬ istanbul-reports@1.1.2 
  │   │ │ └─┬ handlebars@4.0.10 
  │   │ │   ├── async@1.5.2 
  │   │ │   ├─┬ optimist@0.6.1 
  │   │ │   │ └── wordwrap@0.0.3 
  │   │ │   ├─┬ source-map@0.4.4 
  │   │ │   │ └── amdefine@1.0.1 
  │   │ │   └─┬ uglify-js@2.8.29 
  │   │ │     ├── uglify-to-browserify@1.0.2 
  │   │ │     └─┬ yargs@3.10.0 
  │   │ │       ├── camelcase@1.2.1 
  │   │ │       ├─┬ cliui@2.1.0 
  │   │ │       │ ├─┬ center-align@0.1.3 
  │   │ │       │ │ ├─┬ align-text@0.1.4 
  │   │ │       │ │ │ └── longest@1.0.1 
  │   │ │       │ │ └── lazy-cache@1.0.4 
  │   │ │       │ ├── right-align@0.1.3 
  │   │ │       │ └── wordwrap@0.0.2 
  │   │ │       └── window-size@0.1.0 
  │   │ ├─┬ md5-hex@1.3.0 
  │   │ │ └── md5-o-matic@0.1.1 
  │   │ ├── merge-source-map@1.0.4 
  │   │ ├─┬ micromatch@2.3.11 
  │   │ │ ├─┬ arr-diff@2.0.0 
  │   │ │ │ └── arr-flatten@1.1.0 
  │   │ │ ├── array-unique@0.2.1 
  │   │ │ ├─┬ braces@1.8.5 
  │   │ │ │ ├─┬ expand-range@1.8.2 
  │   │ │ │ │ └─┬ fill-range@2.2.3 
  │   │ │ │ │   ├── is-number@2.1.0 
  │   │ │ │ │   ├─┬ isobject@2.1.0 
  │   │ │ │ │   │ └── isarray@1.0.0 
  │   │ │ │ │   ├─┬ randomatic@1.1.7 
  │   │ │ │ │   │ ├─┬ is-number@3.0.0 
  │   │ │ │ │   │ │ └── kind-of@3.2.2 
  │   │ │ │ │   │ └── kind-of@4.0.0 
  │   │ │ │ │   └── repeat-string@1.6.1 
  │   │ │ │ ├── preserve@0.2.0 
  │   │ │ │ └── repeat-element@1.1.2 
  │   │ │ ├─┬ expand-brackets@0.1.5 
  │   │ │ │ └── is-posix-bracket@0.1.1 
  │   │ │ ├── extglob@0.3.2 
  │   │ │ ├── filename-regex@2.0.1 
  │   │ │ ├── is-extglob@1.0.0 
  │   │ │ ├── is-glob@2.0.1 
  │   │ │ ├─┬ kind-of@3.2.2 
  │   │ │ │ └── is-buffer@1.1.5 
  │   │ │ ├─┬ normalize-path@2.1.1 
  │   │ │ │ └── remove-trailing-separator@1.1.0 
  │   │ │ ├─┬ object.omit@2.0.1 
  │   │ │ │ ├─┬ for-own@0.1.5 
  │   │ │ │ │ └── for-in@1.0.2 
  │   │ │ │ └── is-extendable@0.1.1 
  │   │ │ ├─┬ parse-glob@3.0.4 
  │   │ │ │ ├─┬ glob-base@0.3.0 
  │   │ │ │ │ └── glob-parent@2.0.0 
  │   │ │ │ └── is-dotfile@1.0.3 
  │   │ │ └─┬ regex-cache@0.4.4 
  │   │ │   └─┬ is-equal-shallow@0.1.3 
  │   │ │     └── is-primitive@2.0.0 
  │   │ ├─┬ mkdirp@0.5.1 
  │   │ │ └── minimist@0.0.8 
  │   │ ├── resolve-from@2.0.0 
  │   │ ├── rimraf@2.6.1 
  │   │ ├── signal-exit@3.0.2 
  │   │ ├─┬ spawn-wrap@1.3.8 
  │   │ │ ├── os-homedir@1.0.2 
  │   │ │ └─┬ which@1.3.0 
  │   │ │   └── isexe@2.0.0 
  │   │ ├─┬ test-exclude@4.1.1 
  │   │ │ ├── object-assign@4.1.1 
  │   │ │ ├─┬ read-pkg-up@1.0.1 
  │   │ │ │ ├── find-up@1.1.2 
  │   │ │ │ └─┬ read-pkg@1.1.0 
  │   │ │ │   ├─┬ load-json-file@1.1.0 
  │   │ │ │   │ ├─┬ parse-json@2.2.0 
  │   │ │ │   │ │ └─┬ error-ex@1.3.1 
  │   │ │ │   │ │   └── is-arrayish@0.2.1 
  │   │ │ │   │ └── pify@2.3.0 
  │   │ │ │   ├─┬ normalize-package-data@2.4.0 
  │   │ │ │   │ ├── hosted-git-info@2.5.0 
  │   │ │ │   │ ├─┬ is-builtin-module@1.0.0 
  │   │ │ │   │ │ └── builtin-modules@1.1.1 
  │   │ │ │   │ └─┬ validate-npm-package-license@3.0.1 
  │   │ │ │   │   ├─┬ spdx-correct@1.0.2 
  │   │ │ │   │   │ └── spdx-license-ids@1.2.2 
  │   │ │ │   │   └── spdx-expression-parse@1.0.4 
  │   │ │ │   └── path-type@1.1.0 
  │   │ │ └── require-main-filename@1.0.1 
  │   │ ├─┬ yargs@8.0.2 
  │   │ │ ├── camelcase@4.1.0 
  │   │ │ ├─┬ cliui@3.2.0 
  │   │ │ │ ├─┬ string-width@1.0.2 
  │   │ │ │ │ ├── code-point-at@1.1.0 
  │   │ │ │ │ └─┬ is-fullwidth-code-point@1.0.0 
  │   │ │ │ │   └── number-is-nan@1.0.1 
  │   │ │ │ ├─┬ strip-ansi@3.0.1 
  │   │ │ │ │ └── ansi-regex@2.1.1 
  │   │ │ │ └─┬ wrap-ansi@2.1.0 
  │   │ │ │   └── string-width@1.0.2 
  │   │ │ ├── decamelize@1.2.0 
  │   │ │ ├── get-caller-file@1.0.2 
  │   │ │ ├─┬ os-locale@2.1.0 
  │   │ │ │ ├─┬ execa@0.7.0 
  │   │ │ │ │ ├─┬ cross-spawn@5.1.0 
  │   │ │ │ │ │ └─┬ shebang-command@1.2.0 
  │   │ │ │ │ │   └── shebang-regex@1.0.0 
  │   │ │ │ │ ├── get-stream@3.0.0 
  │   │ │ │ │ ├── is-stream@1.1.0 
  │   │ │ │ │ ├─┬ npm-run-path@2.0.2 
  │   │ │ │ │ │ └── path-key@2.0.1 
  │   │ │ │ │ ├── p-finally@1.0.0 
  │   │ │ │ │ └── strip-eof@1.0.0 
  │   │ │ │ ├─┬ lcid@1.0.0 
  │   │ │ │ │ └── invert-kv@1.0.0 
  │   │ │ │ └─┬ mem@1.1.0 
  │   │ │ │   └── mimic-fn@1.1.0 
  │   │ │ ├─┬ read-pkg-up@2.0.0 
  │   │ │ │ └─┬ read-pkg@2.0.0 
  │   │ │ │   ├─┬ load-json-file@2.0.0 
  │   │ │ │   │ └── strip-bom@3.0.0 
  │   │ │ │   └── path-type@2.0.0 
  │   │ │ ├── require-directory@2.1.1 
  │   │ │ ├── set-blocking@2.0.0 
  │   │ │ ├─┬ string-width@2.1.1 
  │   │ │ │ ├── is-fullwidth-code-point@2.0.0 
  │   │ │ │ └─┬ strip-ansi@4.0.0 
  │   │ │ │   └── ansi-regex@3.0.0 
  │   │ │ ├── which-module@2.0.0 
  │   │ │ ├── y18n@3.2.1 
  │   │ │ └── yargs-parser@7.0.0 
  │   │ └─┬ yargs-parser@5.0.0 
  │   │   └── camelcase@3.0.0 
  │   ├── opener@1.4.3 
  │   ├── os-homedir@1.0.2 
  │   ├── own-or@1.0.0 
  │   ├── own-or-env@1.0.0 
  │   ├─┬ readable-stream@2.3.3 
  │   │ ├── core-util-is@1.0.2 
  │   │ ├── isarray@1.0.0 
  │   │ ├── process-nextick-args@1.0.7 
  │   │ ├── safe-buffer@5.1.1 
  │   │ ├── string_decoder@1.0.3 
  │   │ └── util-deprecate@1.0.2 
  │   ├── signal-exit@3.0.2 
  │   ├─┬ source-map-support@0.4.18 
  │   │ └── source-map@0.5.7 
  │   ├── stack-utils@1.0.1 
  │   ├─┬ tap-mocha-reporter@3.0.6 
  │   │ ├── debug@2.6.9 
  │   │ ├── diff@1.4.0 
  │   │ ├── escape-string-regexp@1.0.5 
  │   │ └─┬ unicode-length@1.0.3 
  │   │   └─┬ strip-ansi@3.0.1 
  │   │     └── ansi-regex@2.1.1 
  │   ├─┬ tap-parser@5.4.0 
  │   │ └── events-to-array@1.1.2 
  │   ├── tmatch@3.1.0 
  │   ├── trivial-deferred@1.0.1 
  │   ├── tsame@1.1.2 
  │   └── yapool@1.0.0 
  ├── underscore@1.6.0 
  └─┬ ws.js@0.0.19 
    ├── bufferjs@3.0.1 
    ├── dateformat@3.0.2 
    ├── formidable@1.0.9 
    ├─┬ request@2.79.0 
    │ ├── aws-sign2@0.6.0 
    │ ├── aws4@1.6.0 
    │ ├── caseless@0.11.0 
    │ ├─┬ combined-stream@1.0.5 
    │ │ └── delayed-stream@1.0.0 
    │ ├── extend@3.0.1 
    │ ├── forever-agent@0.6.1 
    │ ├─┬ form-data@2.1.4 
    │ │ └── asynckit@0.4.0 
    │ ├─┬ har-validator@2.0.6 
    │ │ ├─┬ chalk@1.1.3 
    │ │ │ ├── ansi-styles@2.2.1 
    │ │ │ ├── has-ansi@2.0.0 
    │ │ │ └── supports-color@2.0.0 
    │ │ ├── commander@2.11.0 
    │ │ ├─┬ is-my-json-valid@2.16.1 
    │ │ │ ├── generate-function@2.0.0 
    │ │ │ ├─┬ generate-object-property@1.2.0 
    │ │ │ │ └── is-property@1.0.2 
    │ │ │ ├── jsonpointer@4.0.1 
    │ │ │ └── xtend@4.0.1 
    │ │ └─┬ pinkie-promise@2.0.1 
    │ │   └── pinkie@2.0.4 
    │ ├─┬ hawk@3.1.3 
    │ │ ├── boom@2.10.1 
    │ │ ├── cryptiles@2.0.5 
    │ │ ├── hoek@2.16.3 
    │ │ └── sntp@1.0.9 
    │ ├─┬ http-signature@1.1.1 
    │ │ ├── assert-plus@0.2.0 
    │ │ ├─┬ jsprim@1.4.1 
    │ │ │ ├── assert-plus@1.0.0 
    │ │ │ ├── extsprintf@1.3.0 
    │ │ │ ├── json-schema@0.2.3 
    │ │ │ └─┬ verror@1.10.0 
    │ │ │   └── assert-plus@1.0.0 
    │ │ └─┬ sshpk@1.13.1 
    │ │   ├── asn1@0.2.3 
    │ │   ├── assert-plus@1.0.0 
    │ │   ├── bcrypt-pbkdf@1.0.1 
    │ │   ├─┬ dashdash@1.14.1 
    │ │   │ └── assert-plus@1.0.0 
    │ │   ├── ecc-jsbn@0.1.1 
    │ │   ├─┬ getpass@0.1.7 
    │ │   │ └── assert-plus@1.0.0 
    │ │   ├── jsbn@0.1.1 
    │ │   └── tweetnacl@0.14.5 
    │ ├── is-typedarray@1.0.0 
    │ ├── isstream@0.1.2 
    │ ├── json-stringify-safe@5.0.1 
    │ ├─┬ mime-types@2.1.17 
    │ │ └── mime-db@1.30.0 
    │ ├── oauth-sign@0.8.2 
    │ ├── qs@6.3.2 
    │ ├── stringstream@0.0.5 
    │ ├─┬ tough-cookie@2.3.3 
    │ │ └── punycode@1.4.1 
    │ ├── tunnel-agent@0.4.3 
    │ └── uuid@3.1.0 
    ├─┬ xml-crypto@0.10.1 
    │ ├── xmldom@0.1.19 
    │ └── xpath.js@1.0.7 
    └── xmldom@0.1.7 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/messagemedia/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /3 queued / 1 running / 1 errors / 59% coverage ] ****** [1 done /2 queued / 2 running / 1 errors / 59% coverage ] ****** [1 done /1 queued / 3 running / 1 errors / 59% coverage ] ****** [1 done /0 queued / 4 running / 1 errors / 59% coverage ] ****** [1 done /0 queued / 4 running / 1 errors / 59% coverage ] ****** [2 done /0 queued / 4 running / 2 errors / 59% coverage ] ****** [2 done /0 queued / 4 running / 2 errors / 59% coverage ] ****** [3 done /1 queued / 4 running / 3 errors / 59% coverage ] ****** [3 done /0 queued / 5 running / 3 errors / 59% coverage ] ****** [3 done /0 queued / 5 running / 3 errors / 59% coverage ] ****** [4 done /2 queued / 5 running / 4 errors / 59% coverage ] ****** [4 done /1 queued / 6 running / 4 errors / 59% coverage ] ****** [4 done /0 queued / 7 running / 4 errors / 59% coverage ] ****** [4 done /0 queued / 7 running / 4 errors / 59% coverage ] ****** [5 done /4 queued / 7 running / 5 errors / 59% coverage ] ****** [5 done /3 queued / 8 running / 5 errors / 59% coverage ] ****** [5 done /2 queued / 9 running / 5 errors / 59% coverage ] ****** [5 done /1 queued / 10 running / 5 errors / 59% coverage ] ****** [5 done /0 queued / 11 running / 5 errors / 59% coverage ] ****** [5 done /0 queued / 11 running / 5 errors / 59% coverage ] ****** [6 done /0 queued / 11 running / 6 errors / 59% coverage ] ****** [6 done /0 queued / 11 running / 6 errors / 59% coverage ] ****** [7 done /2 queued / 11 running / 7 errors / 59% coverage ] ****** [7 done /1 queued / 12 running / 7 errors / 59% coverage ] ****** [7 done /0 queued / 13 running / 7 errors / 59% coverage ] ****** [7 done /0 queued / 13 running / 7 errors / 59% coverage ] ****** [8 done /1 queued / 13 running / 8 errors / 59% coverage ] ****** [8 done /0 queued / 14 running / 8 errors / 59% coverage ] ****** [8 done /0 queued / 14 running / 8 errors / 59% coverage ] ****** [9 done /2 queued / 14 running / 9 errors / 59% coverage ] ****** [9 done /1 queued / 15 running / 9 errors / 59% coverage ] ****** [9 done /0 queued / 16 running / 9 errors / 59% coverage ] ****** [9 done /0 queued / 16 running / 9 errors / 59% coverage ] ****** [10 done /0 queued / 16 running / 10 errors / 59% coverage ] ****** [10 done /0 queued / 16 running / 10 errors / 59% coverage ] ****** [11 done /1 queued / 16 running / 11 errors / 59% coverage ] ****** [11 done /1 queued / 16 running / 11 errors / 59% coverage ] ****** [12 done /5 queued / 16 running / 12 errors / 59% coverage ] ****** [12 done /5 queued / 16 running / 12 errors / 59% coverage ] ****** [13 done /6 queued / 16 running / 13 errors / 59% coverage ] ****** [13 done /6 queued / 16 running / 13 errors / 59% coverage ] ****** [14 done /10 queued / 16 running / 14 errors / 59% coverage ] ****** [14 done /10 queued / 16 running / 14 errors / 59% coverage ] ****** [15 done /12 queued / 16 running / 15 errors / 59% coverage ] ****** [15 done /12 queued / 16 running / 15 errors / 59% coverage ] ****** [16 done /15 queued / 16 running / 16 errors / 59% coverage ] ****** [16 done /15 queued / 16 running / 16 errors / 59% coverage ] ****** [17 done /15 queued / 16 running / 17 errors / 59% coverage ] ****** [17 done /15 queued / 16 running / 17 errors / 59% coverage ] ****** [18 done /16 queued / 16 running / 18 errors / 59% coverage ] ****** [18 done /16 queued / 16 running / 18 errors / 59% coverage ] ****** [19 done /18 queued / 16 running / 19 errors / 59% coverage ] ****** [19 done /18 queued / 16 running / 19 errors / 59% coverage ] ****** [20 done /19 queued / 16 running / 20 errors / 59% coverage ] ****** [20 done /19 queued / 16 running / 20 errors / 59% coverage ] ****** [21 done /20 queued / 16 running / 21 errors / 59% coverage ] ****** [21 done /20 queued / 16 running / 21 errors / 59% coverage ] ****** [22 done /19 queued / 16 running / 22 errors / 59% coverage ] ****** [22 done /19 queued / 16 running / 22 errors / 59% coverage ] ****** [23 done /20 queued / 16 running / 23 errors / 59% coverage ] ****** [23 done /20 queued / 16 running / 23 errors / 59% coverage ] ****** [24 done /22 queued / 16 running / 24 errors / 59% coverage ] ****** [24 done /22 queued / 16 running / 24 errors / 59% coverage ] ****** [25 done /22 queued / 16 running / 25 errors / 59% coverage ] ****** [25 done /22 queued / 16 running / 25 errors / 59% coverage ] ****** [26 done /21 queued / 16 running / 26 errors / 59% coverage ] ****** [26 done /21 queued / 16 running / 26 errors / 59% coverage ] ****** [27 done /24 queued / 16 running / 27 errors / 59% coverage ] ****** [27 done /24 queued / 16 running / 27 errors / 59% coverage ] ****** [28 done /26 queued / 16 running / 28 errors / 59% coverage ] ****** [28 done /26 queued / 16 running / 28 errors / 59% coverage ] ****** [29 done /26 queued / 16 running / 29 errors / 59% coverage ] ****** [29 done /26 queued / 16 running / 29 errors / 59% coverage ] ****** [30 done /28 queued / 16 running / 30 errors / 59% coverage ] ****** [30 done /28 queued / 16 running / 30 errors / 59% coverage ] ****** [31 done /32 queued / 16 running / 31 errors / 59% coverage ] ****** [31 done /32 queued / 16 running / 31 errors / 59% coverage ] ****** [32 done /35 queued / 16 running / 32 errors / 59% coverage ] ****** [32 done /35 queued / 16 running / 32 errors / 59% coverage ] ****** [33 done /36 queued / 16 running / 33 errors / 59% coverage ] ****** [33 done /36 queued / 16 running / 33 errors / 59% coverage ] ****** [34 done /37 queued / 16 running / 34 errors / 59% coverage ] ****** [34 done /37 queued / 16 running / 34 errors / 59% coverage ] ****** [35 done /38 queued / 16 running / 35 errors / 59% coverage ] ****** [35 done /38 queued / 16 running / 35 errors / 59% coverage ] ****** [36 done /39 queued / 16 running / 36 errors / 59% coverage ] ****** [36 done /39 queued / 16 running / 36 errors / 59% coverage ] ****** [37 done /39 queued / 16 running / 37 errors / 59% coverage ] ****** [37 done /39 queued / 16 running / 37 errors / 59% coverage ] ****** [38 done /41 queued / 16 running / 38 errors / 59% coverage ] ****** [38 done /41 queued / 16 running / 38 errors / 59% coverage ] ****** [39 done /41 queued / 16 running / 39 errors / 59% coverage ] ****** [39 done /41 queued / 16 running / 39 errors / 59% coverage ] ****** [40 done /42 queued / 16 running / 40 errors / 59% coverage ] ****** [40 done /42 queued / 16 running / 40 errors / 59% coverage ] ****** [41 done /42 queued / 16 running / 41 errors / 59% coverage ] ****** [41 done /42 queued / 16 running / 41 errors / 59% coverage ] ****** [42 done /46 queued / 16 running / 42 errors / 59% coverage ] ****** [42 done /46 queued / 16 running / 42 errors / 59% coverage ] ****** [43 done /45 queued / 16 running / 43 errors / 59% coverage ] ****** [43 done /45 queued / 16 running / 43 errors / 59% coverage ] ****** [44 done /47 queued / 16 running / 44 errors / 59% coverage ] ****** [44 done /47 queued / 16 running / 44 errors / 59% coverage ] ****** [45 done /49 queued / 16 running / 45 errors / 59% coverage ] ****** [45 done /49 queued / 16 running / 45 errors / 59% coverage ] ****** [46 done /53 queued / 16 running / 46 errors / 59% coverage ] ****** [46 done /53 queued / 16 running / 46 errors / 59% coverage ] ****** [47 done /54 queued / 16 running / 47 errors / 59% coverage ] ****** [47 done /54 queued / 16 running / 47 errors / 59% coverage ] ****** [48 done /55 queued / 16 running / 48 errors / 59% coverage ] ****** [48 done /55 queued / 16 running / 48 errors / 59% coverage ] ****** [49 done /54 queued / 16 running / 49 errors / 59% coverage ] ****** [49 done /54 queued / 16 running / 49 errors / 59% coverage ] ****** [50 done /53 queued / 16 running / 50 errors / 59% coverage ] ****** [50 done /53 queued / 16 running / 50 errors / 59% coverage ] ****** [51 done /55 queued / 16 running / 51 errors / 59% coverage ] ****** [51 done /55 queued / 16 running / 51 errors / 59% coverage ] ****** [52 done /57 queued / 16 running / 52 errors / 59% coverage ] ****** [52 done /57 queued / 16 running / 52 errors / 59% coverage ] ****** [53 done /58 queued / 16 running / 53 errors / 59% coverage ] ****** [53 done /58 queued / 16 running / 53 errors / 59% coverage ] ****** [54 done /58 queued / 16 running / 54 errors / 59% coverage ] ****** [54 done /58 queued / 16 running / 54 errors / 59% coverage ] ****** [55 done /58 queued / 16 running / 55 errors / 59% coverage ] ****** [55 done /58 queued / 16 running / 55 errors / 59% coverage ] ****** [56 done /59 queued / 16 running / 56 errors / 59% coverage ] ****** [56 done /59 queued / 16 running / 56 errors / 59% coverage ] ****** [57 done /58 queued / 16 running / 57 errors / 59% coverage ] ****** [57 done /58 queued / 16 running / 57 errors / 59% coverage ] ****** [58 done /58 queued / 16 running / 58 errors / 59% coverage ] ****** [58 done /58 queued / 16 running / 58 errors / 59% coverage ] ****** [59 done /59 queued / 16 running / 59 errors / 59% coverage ] ****** [59 done /59 queued / 16 running / 59 errors / 59% coverage ] ****** [60 done /61 queued / 16 running / 60 errors / 59% coverage ] ****** [60 done /61 queued / 16 running / 60 errors / 59% coverage ] ****** [61 done /65 queued / 16 running / 61 errors / 59% coverage ] ****** [61 done /65 queued / 16 running / 61 errors / 59% coverage ] ****** [62 done /67 queued / 16 running / 62 errors / 59% coverage ] ****** [62 done /67 queued / 16 running / 62 errors / 59% coverage ] ****** [63 done /66 queued / 16 running / 63 errors / 59% coverage ] ****** [63 done /66 queued / 16 running / 63 errors / 59% coverage ] ****** [64 done /65 queued / 16 running / 64 errors / 59% coverage ] ****** [64 done /65 queued / 16 running / 64 errors / 59% coverage ] ****** [65 done /66 queued / 16 running / 65 errors / 59% coverage ] ****** [65 done /66 queued / 16 running / 65 errors / 59% coverage ] ****** [66 done /70 queued / 16 running / 66 errors / 59% coverage ] ****** [66 done /70 queued / 16 running / 66 errors / 59% coverage ] ****** [67 done /71 queued / 16 running / 67 errors / 59% coverage ] ****** [67 done /71 queued / 16 running / 67 errors / 59% coverage ] ****** [68 done /71 queued / 16 running / 68 errors / 59% coverage ] ****** [68 done /71 queued / 16 running / 68 errors / 59% coverage ] ****** [69 done /71 queued / 16 running / 69 errors / 59% coverage ] ****** [69 done /71 queued / 16 running / 69 errors / 59% coverage ] ****** [70 done /73 queued / 16 running / 70 errors / 59% coverage ] ****** [70 done /73 queued / 16 running / 70 errors / 59% coverage ] ****** [71 done /72 queued / 16 running / 71 errors / 59% coverage ] ****** [71 done /72 queued / 16 running / 71 errors / 59% coverage ] ****** [72 done /73 queued / 16 running / 72 errors / 59% coverage ] ****** [72 done /73 queued / 16 running / 72 errors / 59% coverage ] ****** [73 done /72 queued / 16 running / 73 errors / 59% coverage ] ****** [73 done /72 queued / 16 running / 73 errors / 59% coverage ] ****** [74 done /74 queued / 16 running / 74 errors / 59% coverage ] ****** [74 done /74 queued / 16 running / 74 errors / 59% coverage ] ****** [75 done /76 queued / 16 running / 75 errors / 59% coverage ] ****** [75 done /76 queued / 16 running / 75 errors / 59% coverage ] ****** [76 done /79 queued / 16 running / 76 errors / 59% coverage ] ****** [76 done /79 queued / 16 running / 76 errors / 59% coverage ] ****** [77 done /83 queued / 16 running / 77 errors / 59% coverage ] ****** [77 done /83 queued / 16 running / 77 errors / 59% coverage ] ****** [78 done /84 queued / 16 running / 78 errors / 59% coverage ] ****** [78 done /84 queued / 16 running / 78 errors / 59% coverage ] ****** [79 done /85 queued / 16 running / 79 errors / 59% coverage ] ****** [79 done /85 queued / 16 running / 79 errors / 59% coverage ] ****** [80 done /89 queued / 16 running / 80 errors / 59% coverage ] ****** [80 done /89 queued / 16 running / 80 errors / 59% coverage ] ****** [81 done /92 queued / 16 running / 81 errors / 59% coverage ] ****** [81 done /92 queued / 16 running / 81 errors / 59% coverage ] ****** [82 done /93 queued / 16 running / 82 errors / 59% coverage ] ****** [82 done /93 queued / 16 running / 82 errors / 59% coverage ] ****** [83 done /92 queued / 16 running / 83 errors / 59% coverage ] ****** [83 done /92 queued / 16 running / 83 errors / 59% coverage ] ****** [84 done /91 queued / 16 running / 84 errors / 59% coverage ] ****** [84 done /91 queued / 16 running / 84 errors / 59% coverage ] ****** [85 done /93 queued / 16 running / 85 errors / 59% coverage ] ****** [85 done /93 queued / 16 running / 85 errors / 59% coverage ] ****** [86 done /94 queued / 16 running / 86 errors / 59% coverage ] ****** [86 done /94 queued / 16 running / 86 errors / 59% coverage ] ****** [87 done /96 queued / 16 running / 87 errors / 59% coverage ] ****** [87 done /96 queued / 16 running / 87 errors / 59% coverage ] ****** [88 done /100 queued / 16 running / 88 errors / 59% coverage ] ****** [88 done /100 queued / 16 running / 88 errors / 59% coverage ] ****** [89 done /103 queued / 16 running / 89 errors / 59% coverage ] ****** [89 done /103 queued / 16 running / 89 errors / 59% coverage ] ****** [90 done /102 queued / 16 running / 90 errors / 59% coverage ] ****** [90 done /102 queued / 16 running / 90 errors / 59% coverage ] ****** [91 done /104 queued / 16 running / 91 errors / 59% coverage ] ****** [91 done /104 queued / 16 running / 91 errors / 59% coverage ] ****** [92 done /108 queued / 16 running / 92 errors / 59% coverage ] ****** [92 done /108 queued / 16 running / 92 errors / 59% coverage ] ****** [93 done /109 queued / 16 running / 93 errors / 59% coverage ] ****** [93 done /109 queued / 16 running / 93 errors / 59% coverage ] ****** [94 done /114 queued / 16 running / 94 errors / 59% coverage ] ****** [94 done /114 queued / 16 running / 94 errors / 59% coverage ] ****** [95 done /118 queued / 16 running / 95 errors / 59% coverage ] ****** [95 done /118 queued / 16 running / 95 errors / 59% coverage ] ****** [96 done /119 queued / 16 running / 96 errors / 59% coverage ] ****** [96 done /119 queued / 16 running / 96 errors / 59% coverage ] ****** [97 done /121 queued / 16 running / 97 errors / 59% coverage ] ****** [97 done /121 queued / 16 running / 97 errors / 59% coverage ] ****** [98 done /122 queued / 16 running / 98 errors / 59% coverage ] ****** [98 done /122 queued / 16 running / 98 errors / 59% coverage ] ****** [99 done /121 queued / 16 running / 99 errors / 59% coverage ] ****** [99 done /121 queued / 16 running / 99 errors / 59% coverage ] ****** [100 done /122 queued / 16 running / 100 errors / 59% coverage ] ****** [100 done /122 queued / 16 running / 100 errors / 59% coverage ] ****** [101 done /121 queued / 16 running / 101 errors / 59% coverage ] ****** [101 done /121 queued / 16 running / 101 errors / 59% coverage ] ****** [102 done /123 queued / 16 running / 102 errors / 59% coverage ] ****** [102 done /123 queued / 16 running / 102 errors / 59% coverage ] ****** [103 done /126 queued / 16 running / 103 errors / 59% coverage ] ****** [103 done /126 queued / 16 running / 103 errors / 59% coverage ] ****** [104 done /128 queued / 16 running / 104 errors / 59% coverage ] ****** [104 done /128 queued / 16 running / 104 errors / 59% coverage ] ****** [105 done /130 queued / 16 running / 105 errors / 59% coverage ] ****** [105 done /130 queued / 16 running / 105 errors / 59% coverage ] ****** [106 done /131 queued / 16 running / 106 errors / 59% coverage ] ****** [106 done /131 queued / 16 running / 106 errors / 59% coverage ] ****** [107 done /134 queued / 16 running / 107 errors / 59% coverage ] ****** [107 done /134 queued / 16 running / 107 errors / 59% coverage ] ****** [108 done /139 queued / 16 running / 108 errors / 59% coverage ] ****** [108 done /139 queued / 16 running / 108 errors / 59% coverage ] ****** [109 done /139 queued / 16 running / 109 errors / 59% coverage ] ****** [109 done /139 queued / 16 running / 109 errors / 59% coverage ] ****** [110 done /139 queued / 16 running / 110 errors / 59% coverage ] ****** [110 done /139 queued / 16 running / 110 errors / 59% coverage ] ****** [111 done /141 queued / 16 running / 111 errors / 59% coverage ] ****** [111 done /141 queued / 16 running / 111 errors / 59% coverage ] ****** [112 done /143 queued / 16 running / 112 errors / 59% coverage ] ****** [112 done /143 queued / 16 running / 112 errors / 59% coverage ] ****** [113 done /144 queued / 16 running / 113 errors / 59% coverage ] ****** [113 done /144 queued / 16 running / 113 errors / 59% coverage ] ****** [114 done /148 queued / 16 running / 114 errors / 59% coverage ] ****** [114 done /148 queued / 16 running / 114 errors / 59% coverage ] ****** [115 done /149 queued / 16 running / 115 errors / 59% coverage ] ****** [115 done /149 queued / 16 running / 115 errors / 59% coverage ] ****** [116 done /149 queued / 16 running / 116 errors / 59% coverage ] ****** [116 done /149 queued / 16 running / 116 errors / 59% coverage ] ****** [117 done /148 queued / 16 running / 117 errors / 59% coverage ] ****** [117 done /148 queued / 16 running / 117 errors / 59% coverage ] ****** [118 done /147 queued / 16 running / 118 errors / 59% coverage ] ****** [118 done /147 queued / 16 running / 118 errors / 59% coverage ] ****** [119 done /148 queued / 16 running / 119 errors / 59% coverage ] ****** [119 done /148 queued / 16 running / 119 errors / 59% coverage ] ****** [120 done /147 queued / 16 running / 120 errors / 59% coverage ] ****** [120 done /147 queued / 16 running / 120 errors / 59% coverage ] ****** [121 done /148 queued / 16 running / 121 errors / 59% coverage ] ****** [121 done /148 queued / 16 running / 121 errors / 59% coverage ] ****** [122 done /152 queued / 16 running / 122 errors / 59% coverage ] ****** [122 done /152 queued / 16 running / 122 errors / 59% coverage ] ****** [123 done /153 queued / 16 running / 123 errors / 59% coverage ] ****** [123 done /153 queued / 16 running / 123 errors / 59% coverage ] ****** [124 done /152 queued / 16 running / 123 errors / 59% coverage ] ****** [124 done /152 queued / 16 running / 123 errors / 59% coverage ] ****** [125 done /151 queued / 16 running / 124 errors / 59% coverage ] ****** [125 done /151 queued / 16 running / 124 errors / 59% coverage ] ****** [126 done /153 queued / 16 running / 125 errors / 59% coverage ] ****** [126 done /153 queued / 16 running / 125 errors / 59% coverage ] ****** [127 done /154 queued / 16 running / 126 errors / 59% coverage ] ****** [127 done /154 queued / 16 running / 126 errors / 59% coverage ] ****** [128 done /157 queued / 16 running / 127 errors / 59% coverage ] ****** [128 done /157 queued / 16 running / 127 errors / 59% coverage ] ****** [129 done /156 queued / 16 running / 128 errors / 59% coverage ] ****** [129 done /156 queued / 16 running / 128 errors / 59% coverage ] ****** [130 done /158 queued / 16 running / 129 errors / 59% coverage ] ****** [130 done /158 queued / 16 running / 129 errors / 59% coverage ] ****** [131 done /159 queued / 16 running / 130 errors / 59% coverage ] ****** [131 done /159 queued / 16 running / 130 errors / 59% coverage ] ****** [132 done /160 queued / 16 running / 131 errors / 59% coverage ] ****** [132 done /160 queued / 16 running / 131 errors / 59% coverage ] ****** [133 done /163 queued / 16 running / 132 errors / 59% coverage ] ****** [133 done /163 queued / 16 running / 132 errors / 59% coverage ] ****** [134 done /164 queued / 16 running / 133 errors / 59% coverage ] ****** [134 done /164 queued / 16 running / 133 errors / 59% coverage ] ****** [135 done /166 queued / 16 running / 134 errors / 59% coverage ] ****** [135 done /166 queued / 16 running / 134 errors / 59% coverage ] ****** [136 done /169 queued / 16 running / 135 errors / 59% coverage ] ****** [136 done /169 queued / 16 running / 135 errors / 59% coverage ] ****** [137 done /171 queued / 16 running / 136 errors / 59% coverage ] ****** [137 done /171 queued / 16 running / 136 errors / 59% coverage ] ****** [138 done /175 queued / 16 running / 137 errors / 59% coverage ] ****** [138 done /175 queued / 16 running / 137 errors / 59% coverage ] ****** [139 done /176 queued / 16 running / 138 errors / 59% coverage ] ****** [139 done /176 queued / 16 running / 138 errors / 59% coverage ] ****** [140 done /179 queued / 16 running / 139 errors / 59% coverage ] ****** [140 done /179 queued / 16 running / 139 errors / 59% coverage ] ****** [141 done /181 queued / 16 running / 140 errors / 59% coverage ] ****** [141 done /181 queued / 16 running / 140 errors / 59% coverage ] ****** [142 done /185 queued / 16 running / 141 errors / 59% coverage ] ****** [142 done /185 queued / 16 running / 141 errors / 59% coverage ] ****** [143 done /187 queued / 16 running / 142 errors / 59% coverage ] ****** [143 done /187 queued / 16 running / 142 errors / 59% coverage ] ****** [144 done /186 queued / 16 running / 143 errors / 59% coverage ] ****** [144 done /186 queued / 16 running / 143 errors / 59% coverage ] ****** [145 done /187 queued / 16 running / 144 errors / 59% coverage ] ****** [145 done /187 queued / 16 running / 144 errors / 59% coverage ] ****** [146 done /186 queued / 16 running / 145 errors / 59% coverage ] ****** [146 done /186 queued / 16 running / 145 errors / 59% coverage ] ****** [147 done /188 queued / 16 running / 146 errors / 59% coverage ] ****** [147 done /188 queued / 16 running / 146 errors / 59% coverage ] ****** [148 done /187 queued / 16 running / 147 errors / 59% coverage ] ****** [148 done /187 queued / 16 running / 147 errors / 59% coverage ] ****** [149 done /186 queued / 16 running / 148 errors / 59% coverage ] ****** [149 done /186 queued / 16 running / 148 errors / 59% coverage ] ****** [150 done /187 queued / 16 running / 149 errors / 59% coverage ] ****** [150 done /187 queued / 16 running / 149 errors / 59% coverage ] ****** [151 done /186 queued / 16 running / 150 errors / 59% coverage ] ****** [151 done /186 queued / 16 running / 150 errors / 59% coverage ] ****** [152 done /186 queued / 16 running / 151 errors / 59% coverage ] ****** [152 done /186 queued / 16 running / 151 errors / 59% coverage ] ****** [153 done /187 queued / 16 running / 152 errors / 59% coverage ] ****** [153 done /187 queued / 16 running / 152 errors / 59% coverage ] ****** [154 done /187 queued / 16 running / 153 errors / 59% coverage ] ****** [154 done /187 queued / 16 running / 153 errors / 59% coverage ] ****** [155 done /187 queued / 16 running / 154 errors / 59% coverage ] ****** [155 done /187 queued / 16 running / 154 errors / 59% coverage ] ****** [156 done /187 queued / 16 running / 155 errors / 59% coverage ] ****** [156 done /187 queued / 16 running / 155 errors / 59% coverage ] ****** [157 done /186 queued / 16 running / 156 errors / 59% coverage ] ****** [157 done /186 queued / 16 running / 156 errors / 59% coverage ] ****** [158 done /186 queued / 16 running / 157 errors / 59% coverage ] ****** [158 done /186 queued / 16 running / 157 errors / 59% coverage ] ****** [159 done /185 queued / 16 running / 158 errors / 59% coverage ] ****** [159 done /185 queued / 16 running / 158 errors / 59% coverage ] ****** [160 done /184 queued / 16 running / 159 errors / 59% coverage ] ****** [160 done /184 queued / 16 running / 159 errors / 59% coverage ] ****** [161 done /184 queued / 16 running / 160 errors / 59% coverage ] ****** [161 done /184 queued / 16 running / 160 errors / 59% coverage ] ****** [162 done /183 queued / 16 running / 161 errors / 59% coverage ] ****** [162 done /183 queued / 16 running / 161 errors / 59% coverage ] ****** [163 done /187 queued / 16 running / 162 errors / 59% coverage ] ****** [163 done /187 queued / 16 running / 162 errors / 59% coverage ] ****** [164 done /188 queued / 16 running / 163 errors / 59% coverage ] ****** [164 done /188 queued / 16 running / 163 errors / 59% coverage ] ****** [165 done /190 queued / 16 running / 164 errors / 59% coverage ] ****** [165 done /190 queued / 16 running / 164 errors / 59% coverage ] ****** [166 done /189 queued / 16 running / 165 errors / 59% coverage ] ****** [166 done /189 queued / 16 running / 165 errors / 59% coverage ] ****** [167 done /191 queued / 16 running / 166 errors / 59% coverage ] ****** [167 done /191 queued / 16 running / 166 errors / 59% coverage ] ****** [168 done /194 queued / 16 running / 167 errors / 59% coverage ] ****** [168 done /194 queued / 16 running / 167 errors / 59% coverage ] ****** [169 done /198 queued / 16 running / 168 errors / 59% coverage ] ****** [169 done /198 queued / 16 running / 168 errors / 59% coverage ] ****** [170 done /197 queued / 16 running / 169 errors / 59% coverage ] ****** [170 done /197 queued / 16 running / 169 errors / 59% coverage ] ****** [171 done /201 queued / 16 running / 170 errors / 59% coverage ] ****** [171 done /201 queued / 16 running / 170 errors / 59% coverage ] ****** [172 done /202 queued / 16 running / 171 errors / 59% coverage ] ****** [172 done /202 queued / 16 running / 171 errors / 59% coverage ] ****** [173 done /201 queued / 16 running / 172 errors / 59% coverage ] ****** [173 done /201 queued / 16 running / 172 errors / 59% coverage ] ****** [174 done /202 queued / 16 running / 173 errors / 59% coverage ] ****** [174 done /202 queued / 16 running / 173 errors / 59% coverage ] ****** [175 done /203 queued / 16 running / 174 errors / 59% coverage ] ****** [175 done /203 queued / 16 running / 174 errors / 59% coverage ] ****** [176 done /209 queued / 16 running / 175 errors / 59% coverage ] ****** [176 done /209 queued / 16 running / 175 errors / 59% coverage ] ****** [177 done /211 queued / 16 running / 176 errors / 59% coverage ] ****** [177 done /211 queued / 16 running / 176 errors / 59% coverage ] ****** [178 done /216 queued / 16 running / 177 errors / 59% coverage ] ****** [178 done /216 queued / 16 running / 177 errors / 59% coverage ] ****** [179 done /215 queued / 16 running / 178 errors / 59% coverage ] ****** [179 done /215 queued / 16 running / 178 errors / 59% coverage ] ****** [180 done /214 queued / 16 running / 179 errors / 59% coverage ] ****** [180 done /214 queued / 16 running / 179 errors / 59% coverage ] ****** [181 done /213 queued / 16 running / 180 errors / 59% coverage ] ****** [181 done /213 queued / 16 running / 180 errors / 59% coverage ] ****** [182 done /212 queued / 16 running / 181 errors / 59% coverage ] ****** [182 done /212 queued / 16 running / 181 errors / 59% coverage ] ****** [183 done /211 queued / 16 running / 182 errors / 59% coverage ] ****** [183 done /211 queued / 16 running / 182 errors / 59% coverage ] ****** [184 done /210 queued / 16 running / 183 errors / 59% coverage ] ****** [184 done /210 queued / 16 running / 183 errors / 59% coverage ] ****** [185 done /209 queued / 16 running / 184 errors / 59% coverage ] ****** [185 done /209 queued / 16 running / 184 errors / 59% coverage ] ****** [186 done /208 queued / 16 running / 185 errors / 59% coverage ] ****** [186 done /208 queued / 16 running / 185 errors / 59% coverage ] ****** [187 done /208 queued / 16 running / 186 errors / 59% coverage ] ****** [187 done /208 queued / 16 running / 186 errors / 59% coverage ] ****** [188 done /210 queued / 16 running / 187 errors / 59% coverage ] ****** [188 done /210 queued / 16 running / 187 errors / 59% coverage ] ****** [189 done /210 queued / 16 running / 188 errors / 59% coverage ] ****** [189 done /210 queued / 16 running / 188 errors / 59% coverage ] ****** [190 done /211 queued / 16 running / 189 errors / 59% coverage ] ****** [190 done /211 queued / 16 running / 189 errors / 59% coverage ] ****** [191 done /210 queued / 16 running / 190 errors / 59% coverage ] ****** [191 done /210 queued / 16 running / 190 errors / 59% coverage ] ****** [192 done /209 queued / 16 running / 191 errors / 59% coverage ] ****** [192 done /209 queued / 16 running / 191 errors / 59% coverage ] ****** [193 done /210 queued / 16 running / 192 errors / 59% coverage ] ****** [193 done /210 queued / 16 running / 192 errors / 59% coverage ] ****** [194 done /209 queued / 16 running / 193 errors / 59% coverage ] ****** [194 done /209 queued / 16 running / 193 errors / 59% coverage ] ****** [195 done /210 queued / 16 running / 194 errors / 59% coverage ] ****** [195 done /210 queued / 16 running / 194 errors / 59% coverage ] ****** [196 done /211 queued / 16 running / 195 errors / 59% coverage ] ****** [196 done /211 queued / 16 running / 195 errors / 59% coverage ] ****** [197 done /212 queued / 16 running / 196 errors / 59% coverage ] ****** [197 done /212 queued / 16 running / 196 errors / 59% coverage ] ****** [198 done /212 queued / 16 running / 197 errors / 59% coverage ] ****** [198 done /212 queued / 16 running / 197 errors / 59% coverage ] ****** [199 done /212 queued / 16 running / 198 errors / 59% coverage ] ****** [199 done /212 queued / 16 running / 198 errors / 59% coverage ] ****** [200 done /213 queued / 16 running / 199 errors / 59% coverage ] ****** [200 done /213 queued / 16 running / 199 errors / 59% coverage ] ****** [201 done /213 queued / 16 running / 200 errors / 59% coverage ] ****** [201 done /213 queued / 16 running / 200 errors / 59% coverage ] ****** [202 done /212 queued / 16 running / 201 errors / 59% coverage ] ****** [202 done /212 queued / 16 running / 201 errors / 59% coverage ] ****** [203 done /211 queued / 16 running / 202 errors / 59% coverage ] ****** [203 done /211 queued / 16 running / 202 errors / 59% coverage ] ****** [204 done /211 queued / 16 running / 203 errors / 59% coverage ] ****** [204 done /211 queued / 16 running / 203 errors / 59% coverage ] ****** [205 done /210 queued / 16 running / 204 errors / 59% coverage ] ****** [205 done /210 queued / 16 running / 204 errors / 59% coverage ] ****** [206 done /210 queued / 16 running / 205 errors / 59% coverage ] ****** [206 done /210 queued / 16 running / 205 errors / 59% coverage ] ****** [207 done /213 queued / 16 running / 206 errors / 59% coverage ] ****** [207 done /213 queued / 16 running / 206 errors / 59% coverage ] ****** [208 done /218 queued / 16 running / 207 errors / 59% coverage ] ****** [208 done /218 queued / 16 running / 207 errors / 59% coverage ] ****** [209 done /217 queued / 16 running / 208 errors / 59% coverage ] ****** [209 done /217 queued / 16 running / 208 errors / 59% coverage ] ****** [210 done /219 queued / 16 running / 209 errors / 59% coverage ] ****** [210 done /219 queued / 16 running / 209 errors / 59% coverage ] ****** [211 done /223 queued / 16 running / 210 errors / 59% coverage ] ****** [211 done /223 queued / 16 running / 210 errors / 59% coverage ] ****** [212 done /226 queued / 16 running / 211 errors / 59% coverage ] ****** [212 done /226 queued / 16 running / 211 errors / 59% coverage ] ****** [213 done /232 queued / 16 running / 212 errors / 59% coverage ] ****** [213 done /232 queued / 16 running / 212 errors / 59% coverage ] ****** [214 done /236 queued / 16 running / 213 errors / 59% coverage ] ****** [214 done /236 queued / 16 running / 213 errors / 59% coverage ] ****** [215 done /243 queued / 16 running / 214 errors / 59% coverage ] ****** [215 done /243 queued / 16 running / 214 errors / 59% coverage ] ****** [216 done /245 queued / 16 running / 215 errors / 59% coverage ] ****** [216 done /245 queued / 16 running / 215 errors / 59% coverage ] ****** [217 done /246 queued / 16 running / 216 errors / 59% coverage ] ****** [217 done /246 queued / 16 running / 216 errors / 59% coverage ] ****** [218 done /250 queued / 16 running / 217 errors / 59% coverage ] ****** [218 done /250 queued / 16 running / 217 errors / 59% coverage ] ****** [219 done /253 queued / 16 running / 218 errors / 59% coverage ] ****** [219 done /253 queued / 16 running / 218 errors / 59% coverage ] ****** [220 done /253 queued / 16 running / 219 errors / 59% coverage ] ****** [220 done /253 queued / 16 running / 219 errors / 59% coverage ] ****** [221 done /253 queued / 16 running / 220 errors / 59% coverage ] ****** [221 done /253 queued / 16 running / 220 errors / 59% coverage ] ****** [222 done /254 queued / 16 running / 221 errors / 59% coverage ] ****** [222 done /254 queued / 16 running / 221 errors / 59% coverage ] ****** [223 done /254 queued / 16 running / 222 errors / 59% coverage ] ****** [223 done /254 queued / 16 running / 222 errors / 59% coverage ] ****** [224 done /259 queued / 16 running / 223 errors / 59% coverage ] ****** [224 done /259 queued / 16 running / 223 errors / 59% coverage ] ****** [225 done /258 queued / 16 running / 224 errors / 59% coverage ] ****** [225 done /258 queued / 16 running / 224 errors / 59% coverage ] ****** [226 done /259 queued / 16 running / 225 errors / 59% coverage ] ****** [226 done /259 queued / 16 running / 225 errors / 59% coverage ] ****** [227 done /260 queued / 16 running / 226 errors / 59% coverage ] ****** [227 done /260 queued / 16 running / 226 errors / 59% coverage ] ****** [228 done /259 queued / 16 running / 227 errors / 59% coverage ] ****** [228 done /259 queued / 16 running / 227 errors / 59% coverage ] ****** [229 done /260 queued / 16 running / 228 errors / 59% coverage ] ****** [229 done /260 queued / 16 running / 228 errors / 59% coverage ] ****** [230 done /262 queued / 16 running / 229 errors / 59% coverage ] ****** [230 done /262 queued / 16 running / 229 errors / 59% coverage ] ****** [231 done /261 queued / 16 running / 230 errors / 59% coverage ] ****** [231 done /261 queued / 16 running / 230 errors / 59% coverage ] ****** [232 done /261 queued / 16 running / 231 errors / 59% coverage ] ****** [232 done /261 queued / 16 running / 231 errors / 59% coverage ] ****** [233 done /260 queued / 16 running / 232 errors / 59% coverage ] ****** [233 done /260 queued / 16 running / 232 errors / 59% coverage ] ****** [234 done /260 queued / 16 running / 233 errors / 59% coverage ] ****** [234 done /260 queued / 16 running / 233 errors / 59% coverage ] ****** [235 done /262 queued / 16 running / 234 errors / 59% coverage ] ****** [235 done /262 queued / 16 running / 234 errors / 59% coverage ] ****** [236 done /261 queued / 16 running / 235 errors / 59% coverage ] ****** [236 done /261 queued / 16 running / 235 errors / 59% coverage ] ****** [237 done /262 queued / 16 running / 236 errors / 59% coverage ] ****** [237 done /262 queued / 16 running / 236 errors / 59% coverage ] ****** [238 done /263 queued / 16 running / 237 errors / 59% coverage ] ****** [238 done /263 queued / 16 running / 237 errors / 59% coverage ] ****** [239 done /262 queued / 16 running / 238 errors / 59% coverage ] ****** [239 done /262 queued / 16 running / 238 errors / 59% coverage ] ****** [240 done /262 queued / 16 running / 239 errors / 59% coverage ] ****** [240 done /262 queued / 16 running / 239 errors / 59% coverage ] ****** [241 done /263 queued / 16 running / 240 errors / 59% coverage ] ****** [241 done /263 queued / 16 running / 240 errors / 59% coverage ] ****** [242 done /262 queued / 16 running / 241 errors / 59% coverage ] ****** [242 done /262 queued / 16 running / 241 errors / 59% coverage ] ****** [243 done /261 queued / 16 running / 242 errors / 59% coverage ] ****** [243 done /261 queued / 16 running / 242 errors / 59% coverage ] ****** [244 done /263 queued / 16 running / 243 errors / 59% coverage ] ****** [244 done /263 queued / 16 running / 243 errors / 59% coverage ] ****** [245 done /262 queued / 16 running / 244 errors / 59% coverage ] ****** [245 done /262 queued / 16 running / 244 errors / 59% coverage ] ****** [246 done /262 queued / 16 running / 245 errors / 59% coverage ] ****** [246 done /262 queued / 16 running / 245 errors / 59% coverage ] ****** [247 done /263 queued / 16 running / 246 errors / 59% coverage ] ****** [247 done /263 queued / 16 running / 246 errors / 59% coverage ] ****** [248 done /263 queued / 16 running / 247 errors / 59% coverage ] ****** [248 done /263 queued / 16 running / 247 errors / 59% coverage ] ****** [249 done /264 queued / 16 running / 248 errors / 59% coverage ] ****** [249 done /264 queued / 16 running / 248 errors / 59% coverage ] ****** [250 done /264 queued / 16 running / 249 errors / 59% coverage ] ****** [250 done /264 queued / 16 running / 249 errors / 59% coverage ] ****** [251 done /265 queued / 16 running / 250 errors / 59% coverage ] ****** [251 done /265 queued / 16 running / 250 errors / 59% coverage ] ****** [252 done /269 queued / 16 running / 251 errors / 59% coverage ] ****** [252 done /269 queued / 16 running / 251 errors / 59% coverage ] ****** [253 done /271 queued / 16 running / 252 errors / 59% coverage ] ****** [253 done /271 queued / 16 running / 252 errors / 59% coverage ] ****** [254 done /274 queued / 16 running / 253 errors / 59% coverage ] ****** [254 done /274 queued / 16 running / 253 errors / 59% coverage ] ****** [255 done /275 queued / 16 running / 254 errors / 59% coverage ] ****** [255 done /275 queued / 16 running / 254 errors / 59% coverage ] ****** [256 done /278 queued / 16 running / 255 errors / 59% coverage ] ****** [256 done /278 queued / 16 running / 255 errors / 59% coverage ] ****** [257 done /279 queued / 16 running / 256 errors / 59% coverage ] ****** [257 done /279 queued / 16 running / 256 errors / 59% coverage ] ****** [258 done /279 queued / 16 running / 257 errors / 59% coverage ] ****** [258 done /279 queued / 16 running / 257 errors / 59% coverage ] ****** [259 done /281 queued / 16 running / 258 errors / 59% coverage ] ****** [259 done /281 queued / 16 running / 258 errors / 59% coverage ] ****** [260 done /283 queued / 16 running / 259 errors / 59% coverage ] ****** [260 done /283 queued / 16 running / 259 errors / 59% coverage ] ****** [261 done /284 queued / 16 running / 260 errors / 59% coverage ] ****** [261 done /284 queued / 16 running / 260 errors / 59% coverage ] ****** [262 done /286 queued / 16 running / 261 errors / 59% coverage ] ****** [262 done /286 queued / 16 running / 261 errors / 59% coverage ] ****** [263 done /288 queued / 16 running / 262 errors / 59% coverage ] ****** [263 done /288 queued / 16 running / 262 errors / 59% coverage ] ****** [264 done /289 queued / 16 running / 263 errors / 59% coverage ] ****** [264 done /289 queued / 16 running / 263 errors / 59% coverage ] ****** [265 done /288 queued / 16 running / 264 errors / 59% coverage ] ****** [265 done /288 queued / 16 running / 264 errors / 59% coverage ] ****** [266 done /293 queued / 16 running / 265 errors / 59% coverage ] ****** [266 done /293 queued / 16 running / 265 errors / 59% coverage ] ****** [267 done /292 queued / 16 running / 266 errors / 59% coverage ] ****** [267 done /292 queued / 16 running / 266 errors / 59% coverage ] ****** [268 done /295 queued / 16 running / 267 errors / 59% coverage ] ****** [268 done /295 queued / 16 running / 267 errors / 59% coverage ] ****** [269 done /294 queued / 16 running / 268 errors / 59% coverage ] ****** [269 done /294 queued / 16 running / 268 errors / 59% coverage ] ****** [270 done /297 queued / 16 running / 269 errors / 59% coverage ] ****** [270 done /297 queued / 16 running / 269 errors / 59% coverage ] ****** [271 done /296 queued / 16 running / 270 errors / 59% coverage ] ****** [271 done /296 queued / 16 running / 270 errors / 59% coverage ] ****** [272 done /296 queued / 16 running / 271 errors / 59% coverage ] ****** [272 done /296 queued / 16 running / 271 errors / 59% coverage ] ****** [273 done /295 queued / 16 running / 272 errors / 59% coverage ] ****** [273 done /295 queued / 16 running / 272 errors / 59% coverage ] ****** [274 done /294 queued / 16 running / 273 errors / 59% coverage ] ****** [274 done /294 queued / 16 running / 273 errors / 59% coverage ] ****** [275 done /293 queued / 16 running / 274 errors / 59% coverage ] ****** [275 done /293 queued / 16 running / 274 errors / 59% coverage ] ****** [276 done /292 queued / 16 running / 275 errors / 59% coverage ] ****** [276 done /292 queued / 16 running / 275 errors / 59% coverage ] ****** [277 done /294 queued / 16 running / 276 errors / 59% coverage ] ****** [277 done /294 queued / 16 running / 276 errors / 59% coverage ] ****** [278 done /294 queued / 16 running / 277 errors / 59% coverage ] ****** [278 done /294 queued / 16 running / 277 errors / 59% coverage ] ****** [279 done /295 queued / 16 running / 278 errors / 59% coverage ] ****** [279 done /295 queued / 16 running / 278 errors / 59% coverage ] ****** [280 done /294 queued / 16 running / 279 errors / 59% coverage ] ****** [280 done /294 queued / 16 running / 279 errors / 59% coverage ] ****** [281 done /294 queued / 16 running / 280 errors / 59% coverage ] ****** [281 done /294 queued / 16 running / 280 errors / 59% coverage ] ****** [282 done /295 queued / 16 running / 281 errors / 59% coverage ] ****** [282 done /295 queued / 16 running / 281 errors / 59% coverage ] ****** [283 done /295 queued / 16 running / 282 errors / 59% coverage ] ****** [283 done /295 queued / 16 running / 282 errors / 59% coverage ] ****** [284 done /296 queued / 16 running / 283 errors / 59% coverage ] ****** [284 done /296 queued / 16 running / 283 errors / 59% coverage ] ****** [285 done /297 queued / 16 running / 284 errors / 59% coverage ] ****** [285 done /297 queued / 16 running / 284 errors / 59% coverage ] ****** [286 done /298 queued / 16 running / 285 errors / 59% coverage ] ****** [286 done /298 queued / 16 running / 285 errors / 59% coverage ] ****** [287 done /298 queued / 16 running / 286 errors / 59% coverage ] ****** [287 done /298 queued / 16 running / 286 errors / 59% coverage ] ****** [288 done /297 queued / 16 running / 287 errors / 59% coverage ] ****** [288 done /297 queued / 16 running / 287 errors / 59% coverage ] ****** [289 done /297 queued / 16 running / 288 errors / 59% coverage ] ****** [289 done /297 queued / 16 running / 288 errors / 59% coverage ] ****** [290 done /298 queued / 16 running / 289 errors / 59% coverage ] ****** [290 done /298 queued / 16 running / 289 errors / 59% coverage ] ****** [291 done /300 queued / 16 running / 290 errors / 59% coverage ] ****** [291 done /300 queued / 16 running / 290 errors / 59% coverage ] ****** [292 done /301 queued / 16 running / 291 errors / 59% coverage ] ****** [292 done /301 queued / 16 running / 291 errors / 59% coverage ] ****** [293 done /300 queued / 16 running / 292 errors / 59% coverage ] ****** [293 done /300 queued / 16 running / 292 errors / 59% coverage ] ****** [294 done /299 queued / 16 running / 293 errors / 59% coverage ] ****** [294 done /299 queued / 16 running / 293 errors / 59% coverage ] ****** [295 done /300 queued / 16 running / 294 errors / 59% coverage ] ****** [295 done /300 queued / 16 running / 294 errors / 59% coverage ] ****** [296 done /301 queued / 16 running / 295 errors / 59% coverage ] ****** [296 done /301 queued / 16 running / 295 errors / 59% coverage ] ****** [297 done /307 queued / 16 running / 296 errors / 59% coverage ] ****** [297 done /307 queued / 16 running / 296 errors / 59% coverage ] ****** [298 done /306 queued / 16 running / 297 errors / 59% coverage ] ****** [298 done /306 queued / 16 running / 297 errors / 59% coverage ] ****** [299 done /307 queued / 16 running / 298 errors / 59% coverage ] ****** [299 done /307 queued / 16 running / 298 errors / 59% coverage ] ****** [300 done /308 queued / 16 running / 299 errors / 59% coverage ] ****** [300 done /308 queued / 16 running / 299 errors / 59% coverage ] ****** [301 done /309 queued / 16 running / 300 errors / 59% coverage ] ****** [301 done /309 queued / 16 running / 300 errors / 59% coverage ] ****** [302 done /313 queued / 16 running / 301 errors / 59% coverage ] ****** [302 done /313 queued / 16 running / 301 errors / 59% coverage ] ****** [303 done /315 queued / 16 running / 302 errors / 59% coverage ] ****** [303 done /315 queued / 16 running / 302 errors / 59% coverage ] ****** [304 done /316 queued / 16 running / 303 errors / 59% coverage ] ****** [304 done /316 queued / 16 running / 303 errors / 59% coverage ] ****** [305 done /317 queued / 16 running / 304 errors / 59% coverage ] ****** [305 done /317 queued / 16 running / 304 errors / 59% coverage ] ****** [306 done /316 queued / 16 running / 305 errors / 59% coverage ] ****** [306 done /316 queued / 16 running / 305 errors / 59% coverage ] ****** [307 done /320 queued / 16 running / 306 errors / 59% coverage ] ****** [307 done /320 queued / 16 running / 306 errors / 59% coverage ] ****** [308 done /322 queued / 16 running / 307 errors / 59% coverage ] ****** [308 done /322 queued / 16 running / 307 errors / 59% coverage ] ****** [309 done /325 queued / 16 running / 308 errors / 59% coverage ] ****** [309 done /325 queued / 16 running / 308 errors / 59% coverage ] ****** [310 done /327 queued / 16 running / 309 errors / 59% coverage ] ****** [310 done /327 queued / 16 running / 309 errors / 59% coverage ] ****** [311 done /326 queued / 16 running / 310 errors / 59% coverage ] ****** [311 done /326 queued / 16 running / 310 errors / 59% coverage ] ****** [312 done /326 queued / 16 running / 311 errors / 59% coverage ] ****** [312 done /326 queued / 16 running / 311 errors / 59% coverage ] ****** [313 done /329 queued / 16 running / 312 errors / 59% coverage ] ****** [313 done /329 queued / 16 running / 312 errors / 59% coverage ] ****** [314 done /332 queued / 16 running / 313 errors / 59% coverage ] ****** [314 done /332 queued / 16 running / 313 errors / 59% coverage ] ****** [315 done /333 queued / 16 running / 314 errors / 59% coverage ] ****** [315 done /333 queued / 16 running / 314 errors / 59% coverage ] ****** [316 done /334 queued / 16 running / 315 errors / 59% coverage ] ****** [316 done /334 queued / 16 running / 315 errors / 59% coverage ] ****** [317 done /336 queued / 16 running / 316 errors / 59% coverage ] ****** [317 done /336 queued / 16 running / 316 errors / 59% coverage ] ****** [318 done /335 queued / 16 running / 317 errors / 59% coverage ] ****** [318 done /335 queued / 16 running / 317 errors / 59% coverage ] ****** [319 done /337 queued / 16 running / 318 errors / 59% coverage ] ****** [319 done /337 queued / 16 running / 318 errors / 59% coverage ] ****** [320 done /342 queued / 16 running / 319 errors / 59% coverage ] ****** [320 done /342 queued / 16 running / 319 errors / 59% coverage ] ****** [321 done /347 queued / 16 running / 320 errors / 59% coverage ] ****** [321 done /347 queued / 16 running / 320 errors / 59% coverage ] ****** [322 done /347 queued / 16 running / 321 errors / 59% coverage ] ****** [322 done /347 queued / 16 running / 321 errors / 59% coverage ] ****** [323 done /347 queued / 16 running / 322 errors / 59% coverage ] ****** [323 done /347 queued / 16 running / 322 errors / 59% coverage ] ****** [324 done /346 queued / 16 running / 323 errors / 59% coverage ] ****** [324 done /346 queued / 16 running / 323 errors / 59% coverage ] ****** [325 done /347 queued / 16 running / 324 errors / 59% coverage ] ****** [325 done /347 queued / 16 running / 324 errors / 59% coverage ] ****** [326 done /350 queued / 16 running / 325 errors / 59% coverage ] ****** [326 done /350 queued / 16 running / 325 errors / 59% coverage ] ****** [327 done /349 queued / 16 running / 326 errors / 59% coverage ] ****** [327 done /349 queued / 16 running / 326 errors / 59% coverage ] ****** [328 done /349 queued / 16 running / 327 errors / 59% coverage ] ****** [328 done /349 queued / 16 running / 327 errors / 59% coverage ] ****** [329 done /349 queued / 16 running / 328 errors / 59% coverage ] ****** [329 done /349 queued / 16 running / 328 errors / 59% coverage ] ****** [330 done /348 queued / 16 running / 329 errors / 59% coverage ] ****** [330 done /348 queued / 16 running / 329 errors / 59% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","Object","join","RegExp","sort","toString","apply","bound ","create","freeze","toUpperCase"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0,"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0} start 0.063 took 49.2186s
*-- Errors occured in test {"_bound":0,"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');
var utils = require('./utils');



///--- Globals

var HASH_ALGOS = utils.HASH_ALGOS;
var PK_ALGOS = utils.PK_ALGOS;
var HttpSignatureError = utils.HttpSignatureError;
var InvalidAlgorithmError = utils.InvalidAlgorithmError;
var validateAlgorithm = utils.validateAlgorithm;

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};


///--- Specific Errors


function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);

function StrictParsingError(message) {
  HttpSignatureError.call(this, message, StrictParsingError);
}
util.inherits(StrictParsingError, HttpSignatureError);

///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "digest"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   *                   - strict: should enforce latest spec parsing
   *                             (default: false).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {StrictParsingError} if old attributes are used in strict parsing
   *                              mode.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }
    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    try {
      validateAlgorithm(parsed.params.algorithm);
    } catch (e) {
      if (e instanceof InvalidAlgorithmError)
        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
          'supported'));
      else
        throw (e);
    }

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h === 'request-line') {
        if (!options.strict) {
          /*
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          parsed.signingString +=
            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw (new StrictParsingError('request-line is not a valid header ' +
            'with strict parsing enabled.'));
        }
      } else if (h === '(request-target)') {
        parsed.signingString +=
          '(request-target): ' + request.method.toLowerCase() + ' ' +
          request.url;
      } else {
        var value = request.headers[h];
        if (value === undefined)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"_bound":4} start 49.7713 took 26.8302s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"_bound":4}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');
var utils = require('./utils');



///--- Globals

var HASH_ALGOS = utils.HASH_ALGOS;
var PK_ALGOS = utils.PK_ALGOS;
var HttpSignatureError = utils.HttpSignatureError;
var InvalidAlgorithmError = utils.InvalidAlgorithmError;
var validateAlgorithm = utils.validateAlgorithm;

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};


///--- Specific Errors


function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);

function StrictParsingError(message) {
  HttpSignatureError.call(this, message, StrictParsingError);
}
util.inherits(StrictParsingError, HttpSignatureError);

///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "digest"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   *                   - strict: should enforce latest spec parsing
   *                             (default: false).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {StrictParsingError} if old attributes are used in strict parsing
   *                              mode.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }
    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    try {
      validateAlgorithm(parsed.params.algorithm);
    } catch (e) {
      if (e instanceof InvalidAlgorithmError)
        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
          'supported'));
      else
        throw (e);
    }

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h === 'request-line') {
        if (!options.strict) {
          /*
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          parsed.signingString +=
            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw (new StrictParsingError('request-line is not a valid header ' +
            'with strict parsing enabled.'));
        }
      } else if (h === '(request-target)') {
        parsed.signingString +=
          '(request-target): ' + request.method.toLowerCase() + ' ' +
          request.url;
      } else {
        var value = request.headers[h];
        if (value === undefined)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"_bound":4}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":0,"_bound":3} start 50.3059 took 37.4733s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":0,"_bound":3}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');
var utils = require('./utils');



///--- Globals

var HASH_ALGOS = utils.HASH_ALGOS;
var PK_ALGOS = utils.PK_ALGOS;
var HttpSignatureError = utils.HttpSignatureError;
var InvalidAlgorithmError = utils.InvalidAlgorithmError;
var validateAlgorithm = utils.validateAlgorithm;

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};


///--- Specific Errors


function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);

function StrictParsingError(message) {
  HttpSignatureError.call(this, message, StrictParsingError);
}
util.inherits(StrictParsingError, HttpSignatureError);

///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "digest"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   *                   - strict: should enforce latest spec parsing
   *                             (default: false).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {StrictParsingError} if old attributes are used in strict parsing
   *                              mode.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }
    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    try {
      validateAlgorithm(parsed.params.algorithm);
    } catch (e) {
      if (e instanceof InvalidAlgorithmError)
        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
          'supported'));
      else
        throw (e);
    }

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h === 'request-line') {
        if (!options.strict) {
          /*
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          parsed.signingString +=
            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw (new StrictParsingError('request-line is not a valid header ' +
            'with strict parsing enabled.'));
        }
      } else if (h === '(request-target)') {
        parsed.signingString +=
          '(request-target): ' + request.method.toLowerCase() + ' ' +
          request.url;
      } else {
        var value = request.headers[h];
        if (value === undefined)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":0,"_bound":3}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":2} start 49.9467 took 40.2395s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":2}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');
var utils = require('./utils');



///--- Globals

var HASH_ALGOS = utils.HASH_ALGOS;
var PK_ALGOS = utils.PK_ALGOS;
var HttpSignatureError = utils.HttpSignatureError;
var InvalidAlgorithmError = utils.InvalidAlgorithmError;
var validateAlgorithm = utils.validateAlgorithm;

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};


///--- Specific Errors


function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);

function StrictParsingError(message) {
  HttpSignatureError.call(this, message, StrictParsingError);
}
util.inherits(StrictParsingError, HttpSignatureError);

///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "digest"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   *                   - strict: should enforce latest spec parsing
   *                             (default: false).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {StrictParsingError} if old attributes are used in strict parsing
   *                              mode.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }
    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    try {
      validateAlgorithm(parsed.params.algorithm);
    } catch (e) {
      if (e instanceof InvalidAlgorithmError)
        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
          'supported'));
      else
        throw (e);
    }

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h === 'request-line') {
        if (!options.strict) {
          /*
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          parsed.signingString +=
            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw (new StrictParsingError('request-line is not a valid header ' +
            'with strict parsing enabled.'));
        }
      } else if (h === '(request-target)') {
        parsed.signingString +=
          '(request-target): ' + request.method.toLowerCase() + ' ' +
          request.url;
      } else {
        var value = request.headers[h];
        if (value === undefined)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":2}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":1,"ExpansionArg_type_4":0} start 50.16 took 41.7457s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":1,"ExpansionArg_type_4":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');
var utils = require('./utils');



///--- Globals

var HASH_ALGOS = utils.HASH_ALGOS;
var PK_ALGOS = utils.PK_ALGOS;
var HttpSignatureError = utils.HttpSignatureError;
var InvalidAlgorithmError = utils.InvalidAlgorithmError;
var validateAlgorithm = utils.validateAlgorithm;

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};


///--- Specific Errors


function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);

function StrictParsingError(message) {
  HttpSignatureError.call(this, message, StrictParsingError);
}
util.inherits(StrictParsingError, HttpSignatureError);

///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "digest"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   *                   - strict: should enforce latest spec parsing
   *                             (default: false).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {StrictParsingError} if old attributes are used in strict parsing
   *                              mode.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }
    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    try {
      validateAlgorithm(parsed.params.algorithm);
    } catch (e) {
      if (e instanceof InvalidAlgorithmError)
        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
          'supported'));
      else
        throw (e);
    }

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h === 'request-line') {
        if (!options.strict) {
          /*
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          parsed.signingString +=
            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw (new StrictParsingError('request-line is not a valid header ' +
            'with strict parsing enabled.'));
        }
      } else if (h === '(request-target)') {
        parsed.signingString +=
          '(request-target): ' + request.method.toLowerCase() + ' ' +
          request.url;
      } else {
        var value = request.headers[h];
        if (value === undefined)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":1}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"_bound":5,"ExpansionArg_int":0} start 77.0693 took 23.588s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"_bound":5,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');
var utils = require('./utils');



///--- Globals

var HASH_ALGOS = utils.HASH_ALGOS;
var PK_ALGOS = utils.PK_ALGOS;
var HttpSignatureError = utils.HttpSignatureError;
var InvalidAlgorithmError = utils.InvalidAlgorithmError;
var validateAlgorithm = utils.validateAlgorithm;

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};


///--- Specific Errors


function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);

function StrictParsingError(message) {
  HttpSignatureError.call(this, message, StrictParsingError);
}
util.inherits(StrictParsingError, HttpSignatureError);

///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "digest"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   *                   - strict: should enforce latest spec parsing
   *                             (default: false).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {StrictParsingError} if old attributes are used in strict parsing
   *                              mode.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }
    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    try {
      validateAlgorithm(parsed.params.algorithm);
    } catch (e) {
      if (e instanceof InvalidAlgorithmError)
        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
          'supported'));
      else
        throw (e);
    }

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h === 'request-line') {
        if (!options.strict) {
          /*
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          parsed.signingString +=
            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw (new StrictParsingError('request-line is not a valid header ' +
            'with strict parsing enabled.'));
        }
      } else if (h === '(request-target)') {
        parsed.signingString +=
          '(request-target): ' + request.method.toLowerCase() + ' ' +
          request.url;
      } else {
        var value = request.headers[h];
        if (value === undefined)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"_bound":5}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4,"ExpansionArg_int":0} start 90.957 took 23.4081s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');
var utils = require('./utils');



///--- Globals

var HASH_ALGOS = utils.HASH_ALGOS;
var PK_ALGOS = utils.PK_ALGOS;
var HttpSignatureError = utils.HttpSignatureError;
var InvalidAlgorithmError = utils.InvalidAlgorithmError;
var validateAlgorithm = utils.validateAlgorithm;

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};


///--- Specific Errors


function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);

function StrictParsingError(message) {
  HttpSignatureError.call(this, message, StrictParsingError);
}
util.inherits(StrictParsingError, HttpSignatureError);

///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "digest"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   *                   - strict: should enforce latest spec parsing
   *                             (default: false).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {StrictParsingError} if old attributes are used in strict parsing
   *                              mode.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }
    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    try {
      validateAlgorithm(parsed.params.algorithm);
    } catch (e) {
      if (e instanceof InvalidAlgorithmError)
        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
          'supported'));
      else
        throw (e);
    }

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h === 'request-line') {
        if (!options.strict) {
          /*
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          parsed.signingString +=
            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw (new StrictParsingError('request-line is not a valid header ' +
            'with strict parsing enabled.'));
        }
      } else if (h === '(request-target)') {
        parsed.signingString +=
          '(request-target): ' + request.method.toLowerCase() + ' ' +
          request.url;
      } else {
        var value = request.headers[h];
        if (value === undefined)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"_bound":5,"ExpansionArg_int":0} start 90.7729 took 24.5679s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"_bound":5,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');
var utils = require('./utils');



///--- Globals

var HASH_ALGOS = utils.HASH_ALGOS;
var PK_ALGOS = utils.PK_ALGOS;
var HttpSignatureError = utils.HttpSignatureError;
var InvalidAlgorithmError = utils.InvalidAlgorithmError;
var validateAlgorithm = utils.validateAlgorithm;

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};


///--- Specific Errors


function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);

function StrictParsingError(message) {
  HttpSignatureError.call(this, message, StrictParsingError);
}
util.inherits(StrictParsingError, HttpSignatureError);

///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "digest"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   *                   - strict: should enforce latest spec parsing
   *                             (default: false).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {StrictParsingError} if old attributes are used in strict parsing
   *                              mode.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }
    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    try {
      validateAlgorithm(parsed.params.algorithm);
    } catch (e) {
      if (e instanceof InvalidAlgorithmError)
        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
          'supported'));
      else
        throw (e);
    }

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h === 'request-line') {
        if (!options.strict) {
          /*
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          parsed.signingString +=
            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw (new StrictParsingError('request-line is not a valid header ' +
            'with strict parsing enabled.'));
        }
      } else if (h === '(request-target)') {
        parsed.signingString +=
          '(request-target): ' + request.method.toLowerCase() + ' ' +
          request.url;
      } else {
        var value = request.headers[h];
        if (value === undefined)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"_bound":5}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":3,"ExpansionArg_int":0} start 90.5874 took 27.1229s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":3,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');
var utils = require('./utils');



///--- Globals

var HASH_ALGOS = utils.HASH_ALGOS;
var PK_ALGOS = utils.PK_ALGOS;
var HttpSignatureError = utils.HttpSignatureError;
var InvalidAlgorithmError = utils.InvalidAlgorithmError;
var validateAlgorithm = utils.validateAlgorithm;

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};


///--- Specific Errors


function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);

function StrictParsingError(message) {
  HttpSignatureError.call(this, message, StrictParsingError);
}
util.inherits(StrictParsingError, HttpSignatureError);

///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "digest"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   *                   - strict: should enforce latest spec parsing
   *                             (default: false).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {StrictParsingError} if old attributes are used in strict parsing
   *                              mode.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }
    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    try {
      validateAlgorithm(parsed.params.algorithm);
    } catch (e) {
      if (e instanceof InvalidAlgorithmError)
        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
          'supported'));
      else
        throw (e);
    }

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h === 'request-line') {
        if (!options.strict) {
          /*
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          parsed.signingString +=
            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw (new StrictParsingError('request-line is not a valid header ' +
            'with strict parsing enabled.'));
        }
      } else if (h === '(request-target)') {
        parsed.signingString +=
          '(request-target): ' + request.method.toLowerCase() + ' ' +
          request.url;
      } else {
        var value = request.headers[h];
        if (value === undefined)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":3}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":3,"ExpansionArg_int":0,"_bound":6,"ExpansionArg_string":"PureString"} start 100.8628 took 26.2936s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":3,"ExpansionArg_int":0,"_bound":6,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');
var utils = require('./utils');



///--- Globals

var HASH_ALGOS = utils.HASH_ALGOS;
var PK_ALGOS = utils.PK_ALGOS;
var HttpSignatureError = utils.HttpSignatureError;
var InvalidAlgorithmError = utils.InvalidAlgorithmError;
var validateAlgorithm = utils.validateAlgorithm;

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};


///--- Specific Errors


function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);

function StrictParsingError(message) {
  HttpSignatureError.call(this, message, StrictParsingError);
}
util.inherits(StrictParsingError, HttpSignatureError);

///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "digest"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   *                   - strict: should enforce latest spec parsing
   *                             (default: false).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {StrictParsingError} if old attributes are used in strict parsing
   *                              mode.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }
    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    try {
      validateAlgorithm(parsed.params.algorithm);
    } catch (e) {
      if (e instanceof InvalidAlgorithmError)
        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
          'supported'));
      else
        throw (e);
    }

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h === 'request-line') {
        if (!options.strict) {
          /*
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          parsed.signingString +=
            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw (new StrictParsingError('request-line is not a valid header ' +
            'with strict parsing enabled.'));
        }
      } else if (h === '(request-target)') {
        parsed.signingString +=
          '(request-target): ' + request.method.toLowerCase() + ' ' +
          request.url;
      } else {
        var value = request.headers[h];
        if (value === undefined)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":3,"ExpansionArg_int":0,"_bound":6}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4,"ExpansionArg_int":0} start 88.453 took 42.2478s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');
var utils = require('./utils');



///--- Globals

var HASH_ALGOS = utils.HASH_ALGOS;
var PK_ALGOS = utils.PK_ALGOS;
var HttpSignatureError = utils.HttpSignatureError;
var InvalidAlgorithmError = utils.InvalidAlgorithmError;
var validateAlgorithm = utils.validateAlgorithm;

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};


///--- Specific Errors


function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);

function StrictParsingError(message) {
  HttpSignatureError.call(this, message, StrictParsingError);
}
util.inherits(StrictParsingError, HttpSignatureError);

///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "digest"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   *                   - strict: should enforce latest spec parsing
   *                             (default: false).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {StrictParsingError} if old attributes are used in strict parsing
   *                              mode.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }
    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    try {
      validateAlgorithm(parsed.params.algorithm);
    } catch (e) {
      if (e instanceof InvalidAlgorithmError)
        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
          'supported'));
      else
        throw (e);
    }

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h === 'request-line') {
        if (!options.strict) {
          /*
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          parsed.signingString +=
            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw (new StrictParsingError('request-line is not a valid header ' +
            'with strict parsing enabled.'));
        }
      } else if (h === '(request-target)') {
        parsed.signingString +=
          '(request-target): ' + request.method.toLowerCase() + ' ' +
          request.url;
      } else {
        var value = request.headers[h];
        if (value === undefined)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":3,"ExpansionArg_int":0} start 92.5174 took 39.0491s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":3,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');
var utils = require('./utils');



///--- Globals

var HASH_ALGOS = utils.HASH_ALGOS;
var PK_ALGOS = utils.PK_ALGOS;
var HttpSignatureError = utils.HttpSignatureError;
var InvalidAlgorithmError = utils.InvalidAlgorithmError;
var validateAlgorithm = utils.validateAlgorithm;

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};


///--- Specific Errors


function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);

function StrictParsingError(message) {
  HttpSignatureError.call(this, message, StrictParsingError);
}
util.inherits(StrictParsingError, HttpSignatureError);

///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "digest"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   *                   - strict: should enforce latest spec parsing
   *                             (default: false).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {StrictParsingError} if old attributes are used in strict parsing
   *                              mode.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }
    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    try {
      validateAlgorithm(parsed.params.algorithm);
    } catch (e) {
      if (e instanceof InvalidAlgorithmError)
        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
          'supported'));
      else
        throw (e);
    }

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h === 'request-line') {
        if (!options.strict) {
          /*
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          parsed.signingString +=
            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw (new StrictParsingError('request-line is not a valid header ' +
            'with strict parsing enabled.'));
        }
      } else if (h === '(request-target)') {
        parsed.signingString +=
          '(request-target): ' + request.method.toLowerCase() + ' ' +
          request.url;
      } else {
        var value = request.headers[h];
        if (value === undefined)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":1,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":3}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":2,"_bound":5,"ExpansionArg_int":0} start 88.6411 took 44.1206s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":2,"_bound":5,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');
var utils = require('./utils');



///--- Globals

var HASH_ALGOS = utils.HASH_ALGOS;
var PK_ALGOS = utils.PK_ALGOS;
var HttpSignatureError = utils.HttpSignatureError;
var InvalidAlgorithmError = utils.InvalidAlgorithmError;
var validateAlgorithm = utils.validateAlgorithm;

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};


///--- Specific Errors


function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);

function StrictParsingError(message) {
  HttpSignatureError.call(this, message, StrictParsingError);
}
util.inherits(StrictParsingError, HttpSignatureError);

///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "digest"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   *                   - strict: should enforce latest spec parsing
   *                             (default: false).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {StrictParsingError} if old attributes are used in strict parsing
   *                              mode.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }
    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    try {
      validateAlgorithm(parsed.params.algorithm);
    } catch (e) {
      if (e instanceof InvalidAlgorithmError)
        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
          'supported'));
      else
        throw (e);
    }

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h === 'request-line') {
        if (!options.strict) {
          /*
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          parsed.signingString +=
            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw (new StrictParsingError('request-line is not a valid header ' +
            'with strict parsing enabled.'));
        }
      } else if (h === '(request-target)') {
        parsed.signingString +=
          '(request-target): ' + request.method.toLowerCase() + ' ' +
          request.url;
      } else {
        var value = request.headers[h];
        if (value === undefined)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":false,"Target_Switch_Base":0,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":2,"_bound":5}'
*-- Test Case {"Switcher":false,"Target_Switch_Base":2,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":2} start 92.2815 took 43.5193s
*-- Errors occured in test {"Switcher":false,"Target_Switch_Base":2,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"ExpansionArg_type_4":0,"_bound":2}
* Error: Tropigate failed because SyntaxError: Unexpected token (3:4) on program // Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus');
var util = require('util');
var utils = require('./utils');



///--- Globals

var HASH_ALGOS = utils.HASH_ALGOS;
var PK_ALGOS = utils.PK_ALGOS;
var HttpSignatureError = utils.HttpSignatureError;
var InvalidAlgorithmError = utils.InvalidAlgorithmError;
var validateAlgorithm = utils.validateAlgorithm;

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};


///--- Specific Errors


function ExpiredRequestError(message) {
  HttpSignatureError.call(this, message, ExpiredRequestError);
}
util.inherits(ExpiredRequestError, HttpSignatureError);


function InvalidHeaderError(message) {
  HttpSignatureError.call(this, message, InvalidHeaderError);
}
util.inherits(InvalidHeaderError, HttpSignatureError);


function InvalidParamsError(message) {
  HttpSignatureError.call(this, message, InvalidParamsError);
}
util.inherits(InvalidParamsError, HttpSignatureError);


function MissingHeaderError(message) {
  HttpSignatureError.call(this, message, MissingHeaderError);
}
util.inherits(MissingHeaderError, HttpSignatureError);

function StrictParsingError(message) {
  HttpSignatureError.call(this, message, StrictParsingError);
}
util.inherits(StrictParsingError, HttpSignatureError);

///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "digest"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   *                   - strict: should enforce latest spec parsing
   *                             (default: false).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {StrictParsingError} if old attributes are used in strict parsing
   *                              mode.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert.object(request, 'request');
    assert.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert.object(options, 'options');
    assert.arrayOfString(options.headers, 'options.headers');
    assert.optionalNumber(options.clockSkew, 'options.clockSkew');

    if (!request.headers.authorization)
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request');

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm() {
        return this.params.algorithm.toUpperCase();
      },

      get keyId() {
        return this.params.keyId;
      }
    };

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {

      case State.New:
        if (c !== ' ') parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate)) {

        case ParamsState.Name:
          var code = c.charCodeAt(0);
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a) || // A-Z
              (code >= 0x61 && code <= 0x7a)) { // a-z
            tmpName += c;
          } else if (c === '=') {
            if (tmpName.length === 0)
              throw new InvalidHeaderError('bad param format');
            substate = ParamsState.Quote;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Quote:
          if (c === '"') {
            tmpValue = '';
            substate = ParamsState.Value;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        case ParamsState.Value:
          if (c === '"') {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
          } else {
            tmpValue += c;
          }
          break;

        case ParamsState.Comma:
          if (c === ',') {
            tmpName = '';
            substate = ParamsState.Name;
          } else {
            throw new InvalidHeaderError('bad param format');
          }
          break;

        default:
          throw new Error('Invalid substate');
        }
        break;

      default:
        throw new Error('Invalid substate');
      }

    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature')
      throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId)
      throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm)
      throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature)
      throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    try {
      validateAlgorithm(parsed.params.algorithm);
    } catch (e) {
      if (e instanceof InvalidAlgorithmError)
        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +
          'supported'));
      else
        throw (e);
    }

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h === 'request-line') {
        if (!options.strict) {
          /*
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          parsed.signingString +=
            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw (new StrictParsingError('request-line is not a valid header ' +
            'with strict parsing enabled.'));
        }
      } else if (h === '(request-target)') {
        parsed.signingString +=
          '(request-target): ' + request.method.toLowerCase() + ' ' +
          request.url;
      } else {
        var value = request.headers[h];
        if (value === undefined)
          throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      }

      if ((i + 1) < parsed.params.headers.length)
        parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000) +
                                      's was greater than ' +
                                      options.clockSkew + 's');
      }
    }

    options.headers.forEach(function (hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm');
    }

    return parsed;
  }

};
 at SyntaxError: Unexpected token (3:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
