/root/Targets/electron-updater-sqlseer
└─┬ electron-updater-sqlseer@0.2.1 
  ├── appdirectory@0.1.0 
  ├── async@0.9.2 
  ├── commander@2.11.0 
  ├─┬ glob@5.0.15 
  │ ├─┬ inflight@1.0.6 
  │ │ └── wrappy@1.0.2 
  │ ├── inherits@2.0.3 
  │ ├─┬ minimatch@3.0.4 
  │ │ └─┬ brace-expansion@1.1.8 
  │ │   ├── balanced-match@1.0.0 
  │ │   └── concat-map@0.0.1 
  │ ├── once@1.4.0 
  │ └── path-is-absolute@1.0.1 
  ├── minimist@1.2.0 
  ├─┬ request@2.82.0 
  │ ├── aws-sign2@0.7.0 
  │ ├── aws4@1.6.0 
  │ ├── caseless@0.12.0 
  │ ├─┬ combined-stream@1.0.5 
  │ │ └── delayed-stream@1.0.0 
  │ ├── extend@3.0.1 
  │ ├── forever-agent@0.6.1 
  │ ├─┬ form-data@2.3.1 
  │ │ └── asynckit@0.4.0 
  │ ├─┬ har-validator@5.0.3 
  │ │ ├─┬ ajv@5.2.2 
  │ │ │ ├── co@4.6.0 
  │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │   └── jsonify@0.0.0 
  │ │ └── har-schema@2.0.0 
  │ ├─┬ hawk@6.0.2 
  │ │ ├── boom@4.3.1 
  │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ └── boom@5.2.0 
  │ │ ├── hoek@4.2.0 
  │ │ └── sntp@2.0.2 
  │ ├─┬ http-signature@1.2.0 
  │ │ ├── assert-plus@1.0.0 
  │ │ ├─┬ jsprim@1.4.1 
  │ │ │ ├── extsprintf@1.3.0 
  │ │ │ ├── json-schema@0.2.3 
  │ │ │ └── verror@1.10.0 
  │ │ └─┬ sshpk@1.13.1 
  │ │   ├── asn1@0.2.3 
  │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │   ├── dashdash@1.14.1 
  │ │   ├── ecc-jsbn@0.1.1 
  │ │   ├── getpass@0.1.7 
  │ │   ├── jsbn@0.1.1 
  │ │   └── tweetnacl@0.14.5 
  │ ├── is-typedarray@1.0.0 
  │ ├── isstream@0.1.2 
  │ ├── json-stringify-safe@5.0.1 
  │ ├─┬ mime-types@2.1.17 
  │ │ └── mime-db@1.30.0 
  │ ├── oauth-sign@0.8.2 
  │ ├── performance-now@2.1.0 
  │ ├── qs@6.5.1 
  │ ├── safe-buffer@5.1.1 
  │ ├── stringstream@0.0.5 
  │ ├─┬ tough-cookie@2.3.3 
  │ │ └── punycode@1.4.1 
  │ ├── tunnel-agent@0.6.0 
  │ └── uuid@3.1.0 
  ├── semver@4.3.6 
  ├── spin@0.0.1 
  ├─┬ tar-stream@1.5.4 
  │ ├── bl@1.2.1 
  │ ├── end-of-stream@1.4.0 
  │ ├─┬ readable-stream@2.3.3 
  │ │ ├── core-util-is@1.0.2 
  │ │ ├── isarray@1.0.0 
  │ │ ├── process-nextick-args@1.0.7 
  │ │ ├── string_decoder@1.0.3 
  │ │ └── util-deprecate@1.0.2 
  │ └── xtend@4.0.1 
  └─┬ unzip@0.1.11 
    ├─┬ binary@0.3.0 
    │ ├── buffers@0.1.1 
    │ └─┬ chainsaw@0.1.0 
    │   └── traverse@0.3.9 
    ├─┬ fstream@0.1.31 
    │ ├─┬ graceful-fs@3.0.11 
    │ │ └── natives@1.1.0 
    │ ├─┬ mkdirp@0.5.1 
    │ │ └── minimist@0.0.8 
    │ └─┬ rimraf@2.6.2 
    │   └─┬ glob@7.1.2 
    │     └── fs.realpath@1.0.0 
    ├─┬ match-stream@0.0.2 
    │ └─┬ readable-stream@1.0.34 
    │   ├── isarray@0.0.1 
    │   └── string_decoder@0.10.31 
    ├─┬ pullstream@0.4.1 
    │ ├── over@0.0.5 
    │ ├─┬ readable-stream@1.0.34 
    │ │ ├── isarray@0.0.1 
    │ │ └── string_decoder@0.10.31 
    │ └─┬ slice-stream@1.0.0 
    │   └─┬ readable-stream@1.0.34 
    │     ├── isarray@0.0.1 
    │     └── string_decoder@0.10.31 
    ├─┬ readable-stream@1.0.34 
    │ ├── isarray@0.0.1 
    │ └── string_decoder@0.10.31 
    └── setimmediate@1.0.5 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/electron-updater-sqlseer/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 27% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0336 took 4.9915s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (13:1) on program var util = require('util'),
	async = require('async'),
	semver = require('semver'),
	path = require('path'),
	checker = require('./check.js'),
	updater = require('./update.js'),
	context = require('./context.js'),
	exists = require('./exists.js'),
	copier = require('./copier.js'),
	file = require('./file.js'),
	Logger = require('./logger.js'),
	directory = require('./directory.js'),
	assert = require('assert'),
	EventEmitter = require('events').EventEmitter,
	spawn = require('child_process').spawn,
	settings = require('./settings');

function expect() {
	var types = []
	var args = arguments[arguments.length - 2]
	var values = []
	for(var i = 0, n = arguments.length - 1; i < n; i++) {
		types.push(arguments[i])
	}
	var x = 0
	for(var i = 0, n = types.length; i < n; i++) {
		if (typeof args[x] === types[i]) {
			values[i] = args[x++]
		}
	}
	arguments[arguments.length - 1](values)
}

function ElectronCommands() {
}

function update(appDir, electronDir, logger, callback) {
	expect('string', 'string', 'object', 'function', arguments, function (values) {
		appDir = values[0] || path.dirname(process.mainModule.filename)
		electronDir = values[1] || null
		logger = values[2] || Logger.default
		assert.ok(callback = values[3])
	})
	logger.log('appDir: ' + appDir)
	logger.log('electronDir: ' + electronDir)
	check(appDir, logger, function (err, results) {
		if(err) return callback(err)
		if(!results) return callback()

		logger.log('Updating...')
		updater.update(results, electronDir, logger, callback)
	})
}

function watch(appDir, callback) {
}

function defined(item) {
	return !!item
}

function check(appDir, logger, callback) {
	expect('string', 'object', 'function', arguments, function (values) {
		appDir = values[0] || path.dirname(process.mainModule.filename)
		logger = values[1] || Logger.default
		assert.ok(callback = values[2])
	})

	logger.log('Checking for updates.')
	context.load(appDir, function (err, ctx) {
		if(err) return callback(err)
		async.map([
			{ context: ctx, kind: 'app' },
			{ context: ctx, kind: 'dependencies' },
			{ context: ctx, kind: 'plugins' }
		],
		checker.check,
		function (err, results) {
			if(err) return callback(err)
			var app = results[0]
			var dependencies = results[1].filter(defined)
			var plugins = results[2].filter(defined)
			if(!app && !dependencies.length && !plugins.length) {
				logger.log('Updates are not available.')
				callback()
			} else {
				logger.log('Updates are available.')
				callback(null, {
					context: ctx,
					app: app,
					dependencies: dependencies,
					plugins: plugins
				})
			}
		})
	})
}

function list(appDir, logger, callback) {
	expect('string', 'object', 'function', arguments, function (values) {
		appDir = values[0] || path.dirname(process.mainModule.filename)
		logger = values[1] || Logger.default
		assert.ok(callback = values[2])
	})
	logger.log('Listing dependencies.')
	context.load(appDir, function (err, ctx) {
		callback(err, {
			name: ctx.name,
			version: ctx.version,
			dependencies: ctx.dependencies,
			plugins: ctx.plugins,
		})
	})
}

function isValid(appDir, logger, callback) {
	expect('string', 'object', 'function', arguments, function (values) {
		appDir = values[0] || path.dirname(process.mainModule.filename)
		logger = values[1] || Logger.default
		assert.ok(callback = values[2])
	})
	logger.log('Checking validity.')
	context.load(appDir, function (err, ctx) {
		if(err) return callback(err)
		async.map([
			{ context: ctx, kind: 'dependencies' },
			{ context: ctx, kind: 'plugins' }
		],
		exists.check,
		function (err, results) {
			if(err) return callback(err)
			var r1 = results[0]
			var r2 = results[1]
			var valid = r1 && r2
			callback(null, valid)
		})
	})
}

function fullUpdate(publisher, appName, logger, callback) {
	logger.log('execPath:' + process.execPath)
	copier.copy(process.execPath, publisher, appName, logger, function (err, tmpExecPath) {
		if(err) return callback(err)
		var updateDir = path.resolve(path.join(__dirname, '..'))
		var appDir = path.dirname(process.mainModule.filename)
		var args = JSON.stringify({
			appName: appName,
			publisher: publisher,
			cwd: process.cwd(),
			exe: process.execPath,
			argv: process.argv.slice(1)
		})

		logger.log('Launching update process: ')
		logger.log('  args: ' + util.inspect(args))
		logger.log('  exe: ' + tmpExecPath)
		logger.log('  cwd:  ' + appDir)
		logger.log('  updateDir: ' + updateDir)

		var encodedArgs = new Buffer(args).toString('base64')
		var child = spawn(tmpExecPath, [updateDir, '--electron-update=' + encodedArgs], {
			detached: true,
			cwd: appDir,
			stdio: ['ignore', 'ignore', 'ignore']
		})
		child.unref();
		callback();
	})
}

function start(appDir, logger, callback) {
	var that = this
	expect('string', 'object', 'function', arguments, function (values) {
		appDir = values[0] || path.dirname(process.mainModule.filename)
		logger = values[1] || Logger.default
		callback = values[2] || function (err) { if(err) logger.error(err) }
	})
	logger.log('Starting...')
	context.load(appDir, function (err, ctx) {
		if(err) return callback(err)
		if(logger === Logger.default && ctx.name && ctx.publisher) {
			logger = new Logger(directory.appDir(ctx.publisher, ctx.name), null, true)
		}

		if(ctx.updatePending) {
			// If there is a pending update, do a full update instead of starting the app.
			// This is set when a dependency update is available.
			fullUpdate(ctx.publisher, ctx.name, logger, function (err) {
				if(err) return callback(err);
				that.emit('updateRequired');
				callback();
			})
		} else if(ctx.updateInProgress) {
			// This can happen if the user tries to re-launch the app while an update is
			// currently in progress. In that case just report updateRequired so that
			// the user closes the app right away.
			that.emit('updateRequired');
			callback();
		} else {
			isValid(appDir, logger, function (err, valid) {
				if(err) return callback(err);
				if(valid) {
					// If the app is valid, then go ahead and startup what we have.
					// After that, we will check for updates and notify user when they are available.
					that.emit('ready');

					// todo: watch not check
					check(appDir, logger, function (err, result) {
						if(err) return callback(err);
						if(result && (result.app || result.dependencies.length)) {
							// If a new version of the app is available or
							// a dependency update is available, we must
							// restart and do the full update process to update those.
							var appData = directory.appDir(ctx.publisher, ctx.name)
							var pendingUpdatePath = path.join(appData, '.update')
							file.touch(pendingUpdatePath, 'PENDING', function (err) {
								if(err) return callback(err)
								that.emit('updateAvailable')
								callback()
							})
						} else if (result && result.plugins.length) {
							// If only plugin updates are available we can go ahead and update those
							// right now and then notify the user that they can restart to apply them.
							updater.update(result, null, logger, function (err) {
								if(err) return callback(err)
								that.emit('updateAvailable')
								callback()
							})
						} else {
							callback();
						}
					})
				} else {
					fullUpdate(ctx.publisher, ctx.name, logger, function (err) {
						if(err) return callback(err);
						that.emit('updateRequired');
						callback();
					})
				}
			})
		}
	})
}

function set(config, cb) {
	settings.set(config, cb);
}

util.inherits(ElectronCommands, EventEmitter)
ElectronCommands.prototype.update = update
ElectronCommands.prototype.watch = watch
ElectronCommands.prototype.check = check
ElectronCommands.prototype.list = list
ElectronCommands.prototype.start = start
ElectronCommands.prototype.isValid = isValid
ElectronCommands.prototype.set = set
module.exports = new ElectronCommands()
 at SyntaxError: Unexpected token (13:1)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/electron-updater-sqlseer/node_modules/electron-updater-sqlseer/index.js. Coverage (Term): 8% Coverage (LOC): 6%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
