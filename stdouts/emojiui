/root/Targets/emojiui
└─┬ emojiui@0.5.0 
  └─┬ node-static@0.7.10 
    ├── colors@1.1.2 
    ├── mime@1.4.1 
    └─┬ optimist@0.6.1 
      ├── minimist@0.0.10 
      └── wordwrap@0.0.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/emojiui/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0604 took 5.5282s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env electron

// load electron
const electron = require('electron')
// Module to control application life.
const app = electron.app
// Module to create native browser window.
const BrowserWindow = electron.BrowserWindow
// Module for registering keyboard shortcuts
const globalShortcut = electron.globalShortcut

// Keep a global reference of the window object, if you don't, the window will
// be closed automatically when the JavaScript object is garbage collected.
let mainWindow, webContents
// Read custom css to string
let customCSS
require('fs').readFile('custom.css', 'utf8', function (err, contents) {
  if (err) {
    return console.error(err)
  }
  customCSS = contents
})

/**
 * Serves the emoji web app
 * @return {void}
 */
function serve () {
  var nodeStatic = require('node-static')
  var file = new nodeStatic.Server('./emoji')

  require('http').createServer(function (request, response) {
    request.addListener('end', function () {
      // Serve the files
      file.serve(request, response)
    }).resume()
  }).listen(8237)
}

/**
 * Inject the custom CSS to window
 * @return {void}
 */
function injectCustomCSS () {
  webContents.insertCSS(customCSS)
}

/**
 * Creates the Electron window
 * @return {void}
 */
function createWindow () {
  // Create the browser window.
  mainWindow = new BrowserWindow({width: 800, height: 600})
  mainWindow.loadURL('http://localhost:8237')

  // Emitted when the window is closed.
  mainWindow.on('closed', function () {
    // Single page app, no need to keep window instance
    mainWindow = null
  })

  webContents = mainWindow.webContents
  // Inject css
  webContents.on('did-finish-load', injectCustomCSS)
  webContents.on('did-navigate-in-page', injectCustomCSS)
}

// Electron is initialized
app.on('ready', () => {
  // create gui
  createWindow()

  // Escape to minimize
  globalShortcut.register('Escape', () => {
    mainWindow.minimize()
  })

  // Ctrl+Q to quit
  globalShortcut.register('CommandOrControl+Q', () => {
    app.quit()
  })
})

// Quit when all windows are closed.
app.on('window-all-closed', function () {
  // On OS X it is common for applications and their menu bar
  // to stay active until the user quits explicitly with Cmd + Q
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', function () {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (mainWindow === null) {
    createWindow()
  }
})

// start the emoji server
serve()
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
