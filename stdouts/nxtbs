/root/Targets/nxtbs
└─┬ nxtbs@0.0.0 
  ├── charm@0.1.2 
  ├─┬ optimist@0.3.7 
  │ └── wordwrap@0.0.3 
  ├── pad@0.0.4 
  ├── qs@0.5.6 
  ├─┬ request@2.14.0 
  │ ├─┬ form-data@0.0.7 
  │ │ ├── async@0.1.22 
  │ │ └─┬ combined-stream@0.0.4 
  │ │   └── delayed-stream@0.0.5 
  │ └── mime@1.2.9 
  └── underscore@1.4.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/nxtbs/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0581 took 1.8975s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var request = require('request'),
    pad = require('pad'),
    fs = require('fs'),
    qs = require('qs'),
    _ = require('underscore'),
    argv = require('optimist').argv,
    charm = require('charm')();

charm.pipe(process.stdout);
charm.n = function() { return this.write('\n'); };

var base = 'http://api.wmata.com/',
    predictions = base + 'NextBusService.svc/json/JPredictions?',
    settingsFileName = process.env.HOME + '/.nxtbs.json';

if (argv._.length) {
    switch (argv._[0]) {
        case 'key':
            if (argv._.length < 2) throw 'usage: nxtbs key API_KEY';
            setKey(argv._[1]);
            break;
        case 'add':
            if (argv._.length < 2) throw 'usage: nxtbs add STOPID';
            add(argv._[1]);
            break;
        case 'remove':
            if (argv._.length < 2) throw 'usage: nxtbs remove STOPID';
            remove(argv._[1]);
            break;
        case 'list':
            list();
            break;
        case 'clear':
            clear();
            break;
        default:
            throw 'unknown command';
    }
} else {
    display();
}

function getSettings() {
    try {
        return JSON.parse(fs.readFileSync(settingsFileName, 'utf-8'));
    } catch(e) {
        return {};
    }
}

function setSettings(s) {
    return fs.writeFileSync(settingsFileName, JSON.stringify(s));
}

function setKey(k) {
    setSettings(_.extend(getSettings(), { api_key: k }));
}

function add(id) {
    var s = getSettings();
    s.stops = s.stops || [];
    s.stops.push(id);
    setSettings(s);
}

function remove(id) {
    var s = getSettings();
    s.stops = _.without(s.stops || [], id);
    setSettings(s);
}

function clear(id) {
    setSettings(_.extend(getSettings(), { stops: [] }));
}

function list() {
    var s = getSettings();
    charm
        .foreground('green')
        .write('stops').n().n();

    (s.stops || []).forEach(function(s) {
        charm
            .foreground('white')
            .write('- ' + s).n();
    });
    if (!s.stops || !s.stops.length) {
        charm
            .foreground('red')
            .write('not watching any stops').n();
    }
}

function predictionsUrl(api_key, id) {
    return predictions + qs.stringify({
        api_key: api_key,
        StopID: id
    });
}

function display() {
    var s = getSettings();
    if (!s.api_key) throw 'api key not provided.';
    (s.stops || []).forEach(function(stop_id) {
        request({ url: predictionsUrl(s.api_key, stop_id), json: true },
            function(err, res) {
            if (err) throw 'Problem contacting WMATA';
            if (!res.body.Predictions || !res.body.Predictions.length) throw 'Empty response';

            charm.foreground('cyan')
                .write(res.body.StopName).n().n();

            res.body.Predictions.forEach(function(p) {
                charm
                    .foreground('red')
                        .write(pad(String(p.Minutes), 4))
                    .foreground('white')
                        .write(p.DirectionText).n();
            });
        });
    });
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
