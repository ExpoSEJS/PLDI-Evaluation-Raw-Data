/root/Targets/browserstack-runner
└─┬ browserstack-runner@0.5.2 
  ├── browserstack@1.3.0 
  ├─┬ chalk@0.4.0 
  │ ├── ansi-styles@1.0.0 
  │ ├── has-color@0.1.7 
  │ └── strip-ansi@0.1.1 
  ├── circular-json@0.3.1 
  ├── js-reporters@1.1.0 
  ├── mime@1.3.4 
  ├── resolve@1.1.7 
  ├─┬ send@0.13.0 
  │ ├── debug@2.2.0 
  │ ├── depd@1.0.1 
  │ ├── destroy@1.0.3 
  │ ├── escape-html@1.0.2 
  │ ├── etag@1.7.0 
  │ ├── fresh@0.3.0 
  │ ├─┬ http-errors@1.3.1 
  │ │ └── inherits@2.0.3 
  │ ├── ms@0.7.1 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── range-parser@1.0.3 
  │ └── statuses@1.2.1 
  └── tunnel@0.0.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/browserstack-runner/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 27% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","toUpperCase","isFinite","getOSRelease","max","defineProperties","create","join","parseInt","captureStackTrace","cwd","getFileName","getLineNumber","getColumnNumber","isEval","getFunctionName","charCodeAt","toString","RegExp","reduce"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0385 took 19.1417s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Invalid number (178:34) on program var Log = require('./logger'),
  logger = new Log(global.logLevel || 'info'),
  exec = require('child_process').execFile,
  fs = require('fs'),
  https = require('https'),
  windows = ((process.platform.match(/win32/) || process.platform.match(/win64/)) !== null),
  localBinary = __dirname + '/BrowserStackLocal' + (windows ? '.exe' : '');

var Tunnel = function Tunnel(key, port, uniqueIdentifier, config, callback) {
  var that = {};

  function tunnelLauncher() {
    var tunnelOptions = getTunnelOptions(key, uniqueIdentifier);

    if (typeof callback !== 'function') {
      callback = function(){};
    }

    logger.debug('[%s] Launching tunnel', new Date());

    var subProcess = exec(localBinary, tunnelOptions, function(error, stdout, stderr) {
      logger.debug(stderr);
      logger.debug(error);
      if (stdout.indexOf('Error') >= 0 || error) {
        logger.debug('[%s] Tunnel launching failed', new Date());
        logger.debug(stdout);
        callback(new Error(new Date() + ': Tunnel launching failed'));
      }
    });

    var data = '';
    var running = false;
    var runMatchers = [ 'You can now access your local server(s)', 'Press Ctrl-C to exit' ];

    setTimeout(function() {
      if (!running) {
        logger.error('BrowserStackLocal failed to launch within 30 seconds.');
        callback(new Error('BrowserStackLocal failed to launch within 30 seconds.'));
      }
    }, 30 * 1000);

    subProcess.stdout.on('data', function(_data) {
      if (running) {
        return;
      }

      data += _data;

      if (data.indexOf(runMatchers[0]) >= 0 && data.indexOf(runMatchers[1]) >= 0) {
        running = true;
        logger.debug('[%s] Tunnel launched', new Date());
        setTimeout(function(){
          callback();
        }, 2000);
      }
    });

    that.process = subProcess;
  }

  function getTunnelOptions(key, uniqueIdentifier) {
    var options = [key];

    if (config.debug) {
      options.push('-v');
    }

    if (!uniqueIdentifier) {
      options.push('-force');
      options.push('-onlyAutomate');
    } else {
      options.push('-localIdentifier');
      options.push(uniqueIdentifier);
    }

    var proxy = config.proxy;

    if (proxy) {
      options.push('-proxyHost ' + proxy.host);
      options.push('-proxyPort ' + proxy.port);

      if (proxy.username && proxy.password) {
        options.push('-proxyUser ' + proxy.username);
        options.push('-proxyPass ' + proxy.password);
      }
    }

    return options;
  }

  function runTunnelCmd(tunnelOptions, subProcessTimeout, processOutputHook, callback) {
    var isRunning, subProcess, timeoutHandle;

    var callbackOnce = function (err, result) {
      clearTimeout(timeoutHandle);
      if (subProcess && isRunning) {
        try {
          process.kill(subProcess.pid, 'SIGKILL');
          subProcess = null;
        } catch (e) {
          logger.debug('[%s] failed to kill process:', new Date(), e);
        }
      }

      callback && callback(err, result);
      callback = null;
    };

    isRunning = true;

    try {
      subProcess = exec(localBinary, tunnelOptions, function (error, stdout) {
        isRunning = false;

        if (error) {
          callbackOnce(new Error('failed to get process output: ' + error));
        } else if (stdout) {
          processOutputHook(stdout, callbackOnce);
        }
      });

      subProcess.stdout.on('data', function (data) {
        processOutputHook(data, callbackOnce);
      });
    } catch (e) {
      // Handles EACCESS and other errors when binary file exists,
      // but doesn't have necessary permissions (among other issues)
      callbackOnce(new Error('failed to get process output: ' + e));
    }

    if (subProcessTimeout > 0) {
      timeoutHandle = setTimeout(function () {
        callbackOnce(new Error('failed to get process output: command timeout'));
      }, subProcessTimeout);
    }
  }

  function getTunnelBinaryVersion(callback) {
    var subProcessTimeout = 3000;

    runTunnelCmd([ '-version' ], subProcessTimeout, function (data, done) {
      var matches = /version\s+(\d+(\.\d+)*)/.exec(data);
      var version = (matches && matches.length > 2) && matches[1];
      logger.debug('[%s] Tunnel binary: found version', new Date(), version);

      done(isFinite(version) ? null : new Error('failed to get binary version'), parseFloat(version));
    }, callback);
  }

  function verifyTunnelBinary(callback) {
    logger.debug('[%s] Verifying tunnel binary', new Date());

    fs.exists(localBinary, function (exists) {
      if (!exists) {
        logger.debug('[%s] Verifying tunnel binary: file does not exist', new Date());
        callback(false);
      } else {
        getTunnelBinaryVersion(function (err, version) {
          callback(!err && isFinite(version));
        });
      }
    });
  }

  verifyTunnelBinary(function (exists) {
    if (exists) {
      tunnelLauncher();
      return;
    }
    logger.debug('Downloading BrowserStack Local to "%s"', localBinary);

    var file = fs.createWriteStream(localBinary);
    https.get('https://s3.amazonaws.com/browserStack/browserstack-local/BrowserStackLocal' + (windows ? '.exe' : '-' + process.platform + '-' + process.arch),
    function(response) {
      response.pipe(file);

      response.on('end', function() {
        fs.chmodSync(localBinary, 0700);
        setTimeout(function() {
          tunnelLauncher();
        }, 100);
      }).on('error', function(e) {
        logger.info('Got error while downloading binary: ' + e.message);
        throw new Error('Got error while downloading binary: ' + e.message);
      });
    });
  });

  return that;
};

exports.Tunnel = Tunnel;
 at SyntaxError: Invalid number (178:34)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.expect (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:597:10)
    at Parser.pp$3.parseExprList (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2152:16)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/browserstack-runner/node_modules/browserstack-runner/bin/cli.js. Coverage (Term): 6% Coverage (LOC): 4%
*- File /root/Targets/browserstack-runner/node_modules/browserstack-runner/lib/logger.js. Coverage (Term): 50% Coverage (LOC): 74%
*- File /root/Targets/browserstack-runner/node_modules/browserstack/lib/browserstack.js. Coverage (Term): 97% Coverage (LOC): 100%
*- File /root/Targets/browserstack-runner/node_modules/browserstack/lib/api.js. Coverage (Term): 18% Coverage (LOC): 36%
*- File /root/Targets/browserstack-runner/node_modules/browserstack/lib/client.js. Coverage (Term): 25% Coverage (LOC): 15%
*- File /root/Targets/browserstack-runner/node_modules/browserstack/lib/extend.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/browserstack-runner/node_modules/browserstack/lib/screenshot.js. Coverage (Term): 38% Coverage (LOC): 59%
*- File /root/Targets/browserstack-runner/node_modules/chalk/index.js. Coverage (Term): 60% Coverage (LOC): 70%
*- File /root/Targets/browserstack-runner/node_modules/ansi-styles/ansi-styles.js. Coverage (Term): 99% Coverage (LOC): 100%
*- File /root/Targets/browserstack-runner/node_modules/strip-ansi/index.js. Coverage (Term): 49% Coverage (LOC): 83%
*- File /root/Targets/browserstack-runner/node_modules/has-color/index.js. Coverage (Term): 52% Coverage (LOC): 44%
*- File /root/Targets/browserstack-runner/node_modules/browserstack-runner/lib/utils.js. Coverage (Term): 20% Coverage (LOC): 38%
*- File /root/Targets/browserstack-runner/node_modules/browserstack-runner/lib/server.js. Coverage (Term): 6% Coverage (LOC): 2%
*- File /root/Targets/browserstack-runner/node_modules/browserstack-runner/lib/proxy.js. Coverage (Term): 24% Coverage (LOC): 22%
*- File /root/Targets/browserstack-runner/node_modules/mime/mime.js. Coverage (Term): 56% Coverage (LOC): 75%
*- File /root/Targets/browserstack-runner/node_modules/send/index.js. Coverage (Term): 15% Coverage (LOC): 20%
*- File /root/Targets/browserstack-runner/node_modules/http-errors/index.js. Coverage (Term): 42% Coverage (LOC): 37%
*- File /root/Targets/browserstack-runner/node_modules/statuses/index.js. Coverage (Term): 50% Coverage (LOC): 63%
*- File /root/Targets/browserstack-runner/node_modules/inherits/inherits.js. Coverage (Term): 74% Coverage (LOC): 88%
*- File /root/Targets/browserstack-runner/node_modules/debug/node.js. Coverage (Term): 30% Coverage (LOC): 41%
*- File /root/Targets/browserstack-runner/node_modules/debug/debug.js. Coverage (Term): 35% Coverage (LOC): 42%
*- File /root/Targets/browserstack-runner/node_modules/ms/index.js. Coverage (Term): 13% Coverage (LOC): 17%
*- File /root/Targets/browserstack-runner/node_modules/depd/index.js. Coverage (Term): 32% Coverage (LOC): 34%
*- File /root/Targets/browserstack-runner/node_modules/depd/lib/compat/index.js. Coverage (Term): 81% Coverage (LOC): 94%
*- File /root/Targets/browserstack-runner/node_modules/destroy/index.js. Coverage (Term): 30% Coverage (LOC): 31%
*- File /root/Targets/browserstack-runner/node_modules/escape-html/index.js. Coverage (Term): 38% Coverage (LOC): 80%
*- File /root/Targets/browserstack-runner/node_modules/range-parser/index.js. Coverage (Term): 12% Coverage (LOC): 19%
*- File /root/Targets/browserstack-runner/node_modules/fresh/index.js. Coverage (Term): 13% Coverage (LOC): 14%
*- File /root/Targets/browserstack-runner/node_modules/etag/index.js. Coverage (Term): 17% Coverage (LOC): 34%
*- File /root/Targets/browserstack-runner/node_modules/on-finished/index.js. Coverage (Term): 13% Coverage (LOC): 17%
*- File /root/Targets/browserstack-runner/node_modules/ee-first/index.js. Coverage (Term): 9% Coverage (LOC): 13%
*- File eval. Coverage (Term): 41% Coverage (LOC): 50%
*- File /root/Targets/browserstack-runner/node_modules/circular-json/build/circular-json.node.js. Coverage (Term): 16% Coverage (LOC): 19%
*- File /root/Targets/browserstack-runner/node_modules/resolve/index.js. Coverage (Term): 78% Coverage (LOC): 89%
*- File /root/Targets/browserstack-runner/node_modules/resolve/lib/core.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/browserstack-runner/node_modules/resolve/lib/async.js. Coverage (Term): 5% Coverage (LOC): 6%
*- File /root/Targets/browserstack-runner/node_modules/resolve/lib/caller.js. Coverage (Term): 30% Coverage (LOC): 36%
*- File /root/Targets/browserstack-runner/node_modules/resolve/lib/node-modules-paths.js. Coverage (Term): 12% Coverage (LOC): 19%
*- File /root/Targets/browserstack-runner/node_modules/resolve/lib/sync.js. Coverage (Term): 11% Coverage (LOC): 12%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
