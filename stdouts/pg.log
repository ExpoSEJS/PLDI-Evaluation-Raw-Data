
> ws@0.4.31 install /root/Targets/pg.log/node_modules/ws
> (node-gyp rebuild 2> builderror.log) || (exit 0)

make: Entering directory '/root/Targets/pg.log/node_modules/ws/build'
  CXX(target) Release/obj.target/bufferutil/src/bufferutil.o
bufferutil.target.mk:96: recipe for target 'Release/obj.target/bufferutil/src/bufferutil.o' failed
make: Leaving directory '/root/Targets/pg.log/node_modules/ws/build'
/root/Targets/pg.log
└─┬ pg.log@0.0.4 
  ├─┬ express@4.3.1 
  │ ├─┬ accepts@1.0.1 
  │ │ ├── mime@1.2.11 
  │ │ └── negotiator@0.4.9 
  │ ├── buffer-crc32@0.2.1 
  │ ├── cookie@0.1.2 
  │ ├── cookie-signature@1.0.3 
  │ ├── debug@0.8.1 
  │ ├── escape-html@1.0.1 
  │ ├── fresh@0.2.2 
  │ ├── merge-descriptors@0.0.2 
  │ ├── methods@1.0.0 
  │ ├── parseurl@1.0.1 
  │ ├── path-to-regexp@0.1.2 
  │ ├─┬ proxy-addr@1.0.0 
  │ │ └── ipaddr.js@0.1.2 
  │ ├── qs@0.6.6 
  │ ├── range-parser@1.0.0 
  │ ├─┬ send@0.3.0 
  │ │ └── debug@0.8.0 
  │ ├── serve-static@1.1.0 
  │ ├── type-is@1.2.0 
  │ └── utils-merge@1.0.0 
  ├─┬ optimist@0.6.1 
  │ ├── minimist@0.0.10 
  │ └── wordwrap@0.0.3 
  ├─┬ socket.io@1.0.2 
  │ ├── debug@0.7.4 
  │ ├─┬ engine.io@1.2.1 
  │ │ ├── base64id@0.1.0 
  │ │ ├── debug@0.6.0 
  │ │ ├─┬ engine.io-parser@1.0.5 
  │ │ │ ├── after@0.8.1 
  │ │ │ ├── arraybuffer.slice@0.0.6 
  │ │ │ ├── base64-arraybuffer@0.1.2 
  │ │ │ ├── blob@0.0.2 
  │ │ │ └── utf8@2.0.0 
  │ │ └─┬ ws@0.4.31 
  │ │   ├── commander@0.6.1 
  │ │   ├── nan@0.3.2 
  │ │   ├── options@0.0.6 
  │ │   └── tinycolor@0.0.1 
  │ ├─┬ has-binary-data@0.1.1 
  │ │ └── isarray@0.0.1 
  │ ├─┬ socket.io-adapter@0.2.0 
  │ │ ├── debug@0.7.4 
  │ │ └── socket.io-parser@2.1.2 
  │ ├─┬ socket.io-client@1.0.2 
  │ │ ├── bind@0.0.1 
  │ │ ├── debug@0.7.4 
  │ │ ├── emitter@1.0.1 
  │ │ ├─┬ engine.io-client@1.2.1 
  │ │ │ ├── debug@0.7.4 
  │ │ │ ├─┬ has-cors@1.0.3 
  │ │ │ │ └── global@2.0.1 
  │ │ │ ├── inherits@2.0.1 
  │ │ │ ├── parsejson@0.0.1 
  │ │ │ ├── parseqs@0.0.2 
  │ │ │ └── xmlhttprequest@1.5.0 
  │ │ ├── indexof@0.0.1 
  │ │ ├── object-component@0.0.3 
  │ │ ├─┬ parseuri@0.0.2 
  │ │ │ └─┬ better-assert@1.0.2 
  │ │ │   └── callsite@1.0.0 
  │ │ └── to-array@0.1.3 
  │ └─┬ socket.io-parser@2.1.5 
  │   ├── debug@0.7.4 
  │   └── json3@3.2.6 
  └── tail@0.4.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/pg.log/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0703 took 2.8129s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var fs = require('fs')
var express = require('express')
var app = require('express')();
var http = require('http').Server(app);
var io = require('socket.io')(http);
var events = require('events');
var path = require('path')
var Tail = require('tail').Tail;
var argv = require('optimist').argv;
var lib = argv.d || "/var/lib/postgresql/9.3/main/pg_log/"
var port = argv.p || 3000


function getLatestFile(dir, files, callback) {
   if (!callback) return;
   if (!files || (files && files.length === 0)) {
      callback();
   }
   if (files.length === 1) {
      callback(files[0]);
   }
   var newest = { file: files[0] };
   var checked = 0;
   fs.stat(path.join(dir, newest.file), function(err, stats) {
      newest.mtime = stats.mtime;
      for (var i = 0; i < files.length; i++) {
         var file = files[i];
         (function(file) {
            fs.stat(file, function(err, stats) {
               ++checked;
               if (stats.mtime.getTime() > newest.mtime.getTime()) {
                  newest = { file : file, mtime : stats.mtime };
               }
               if (checked == files.length) {
                  callback(err, newest);
               }
            });
         })(path.join(dir, file));
   }
});
}

function PgEmitter() {	
	
   var emitter = new events.EventEmitter();

   if (!fs.existsSync(lib)) {
       console.log("error: folder " + lib + " does not exist or current user has no permissions to it")
       process.exit(1)
   }

   var files = fs.readdirSync(lib).filter(function(f) {
      return f.match(/.log$/)
   })

   if (files.length==0) {
      console.log("error: the folder " + lib + " contains no log files")
      process.exit(1)
   }

   getLatestFile(lib, files, function(err, res) {
      
      console.log("watching log file " + res.file)

      var tail = new Tail(res.file);
      var last = null;

      tail.on("line", function(data) {  	  
         var m;
         if (m = data.match(/^LOG:\s*(statement|execute <unnamed>):(.*)/)) {
            pgEmitter.emit("new")	  	
            emitter.emit("query", m[2].trim())
            last = "query"
         }

         else if ((m = data.match(/^LOG:\s*duration:(.{1,16})$/m)) && (last==="query" || last==="partial")) { 
            emitter.emit("duration", m[1].trim())
            last="duration"
         }

         else if (!data.match(/^(LOG|DETAIL|ERROR|STATEMENT):/)) {
            emitter.emit("partial", data)
            last = "partial"
         }
      });	
   })

   return emitter;
}

app.use(express.static(__dirname + '/public'));

app.get('/', function(req, res){	  
   res.sendfile('./public/index.html');
});

http.listen(port, function(){
   console.log('listening on *:' + port);
});

var pgEmitter = new PgEmitter()

pgEmitter.on("new", function() {	
   io.emit("new")
   var d = new Date()
   console.log(d)
   io.emit("date", d)
})

pgEmitter.on("query", function(data) {		
   console.log(data)
   io.emit("query", data)
})

pgEmitter.on("partial", function(data) {		
   console.log(data)
   io.emit("partial", data)
})

pgEmitter.on("duration", function(data) {
   console.log(data)
   io.emit("duration", data)
})	
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
