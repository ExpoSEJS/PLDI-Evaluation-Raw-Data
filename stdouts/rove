/root/Targets/rove
└─┬ rove@0.0.1 
  └─┬ power-assert@1.4.4 
    ├─┬ define-properties@1.1.2 
    │ ├── foreach@2.0.5 
    │ └── object-keys@1.0.11 
    ├─┬ empower@1.2.3 
    │ ├── core-js@2.5.1 
    │ └─┬ empower-core@0.6.2 
    │   └── call-signature@0.0.2 
    ├─┬ power-assert-formatter@1.4.1 
    │ ├─┬ power-assert-context-formatter@1.1.1 
    │ │ └── power-assert-context-traversal@1.1.1 
    │ ├─┬ power-assert-context-reducer-ast@1.1.2 
    │ │ ├── acorn@4.0.13 
    │ │ ├── acorn-es7-plugin@1.1.7 
    │ │ ├── espurify@1.7.0 
    │ │ └── estraverse@4.2.0 
    │ ├─┬ power-assert-renderer-assertion@1.1.1 
    │ │ ├── power-assert-renderer-base@1.1.1 
    │ │ └─┬ power-assert-util-string-width@1.1.1 
    │ │   └── eastasianwidth@0.1.1 
    │ ├─┬ power-assert-renderer-comparison@1.1.1 
    │ │ ├── diff-match-patch@1.0.0 
    │ │ ├─┬ stringifier@1.3.0 
    │ │ │ └── traverse@0.6.6 
    │ │ └── type-name@2.0.2 
    │ ├── power-assert-renderer-diagram@1.1.2 
    │ └── power-assert-renderer-file@1.1.1 
    ├─┬ universal-deep-strict-equal@1.2.2 
    │ ├── array-filter@1.0.0 
    │ └── indexof@0.0.1 
    └── xtend@4.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/rove/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 24% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","Uint8Array"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0405 took 2.8725s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (27:19) on program /**
 * empower - Power Assert feature enhancer for assert function/object.
 *
 * https://github.com/power-assert-js/empower
 *
 * Copyright (c) 2013-2017 Takuto Wada
 * Licensed under the MIT license.
 *   https://github.com/power-assert-js/empower/blob/master/MIT-LICENSE.txt
 */
var empowerCore = require('empower-core');
var defaultOptions = require('./lib/default-options');
var capturable = require('./lib/capturable');
var assign = require('core-js/library/fn/object/assign');
var define = require('./lib/define-properties');

/**
 * Enhance Power Assert feature to assert function/object.
 * @param assert target assert function or object to enhance
 * @param formatter power assert format function
 * @param options enhancement options
 * @return enhanced assert function/object
 */
function empower (assert, formatter, options) {
    var config = assign(defaultOptions(), options);
    var eagerEvaluation = !(config.modifyMessageOnRethrow || config.saveContextOnRethrow);
    var shouldRecreateAssertionError = (function isStackUnchanged () {
        if (typeof assert !== 'function') {
            return false;
        }
        if (typeof assert.AssertionError !== 'function') {
            return false;
        }
        var ae = new assert.AssertionError({
            actual: 123,
            expected: 456,
            operator: '==='
        });
        ae.message = '[REPLACED MESSAGE]';
        return !(/REPLACED MESSAGE/.test(ae.stack)) && /123 === 456/.test(ae.stack);
    })();

    var empowerCoreConfig = assign(config, {
        modifyMessageBeforeAssert: function (beforeAssertEvent) {
            var message = beforeAssertEvent.originalMessage;
            if (!eagerEvaluation) {
                return message;
            }
            return buildPowerAssertText(formatter, message, beforeAssertEvent.powerAssertContext);
        },
        onError: function (errorEvent) {
            var e = errorEvent.error;
            if (!/^AssertionError/.test(e.name)) {
                throw e;
            }
            if (!errorEvent.powerAssertContext) {
                throw e;
            }
            var poweredMessage;
            if (config.modifyMessageOnRethrow || config.saveContextOnRethrow) {
                poweredMessage = buildPowerAssertText(formatter, errorEvent.originalMessage, errorEvent.powerAssertContext);
                if (shouldRecreateAssertionError) {
                    e = new assert.AssertionError({
                        message: poweredMessage,
                        actual: e.actual,
                        expected: e.expected,
                        operator: e.operator,
                        stackStartFunction: e.stackStartFunction
                    });
                }
            }
            if (config.modifyMessageOnRethrow && !shouldRecreateAssertionError) {
                e.message = poweredMessage;
            }
            if (config.saveContextOnRethrow) {
                e.powerAssertContext = errorEvent.powerAssertContext;
            }
            throw e;
        }
    });
    var enhancedAssert = empowerCore(assert, empowerCoreConfig);
    define(enhancedAssert, capturable());
    return enhancedAssert;
}

function buildPowerAssertText (formatter, message, context) {
    // console.log(message);
    var powerAssertText = formatter(context);
    return message ? message + ' ' + powerAssertText : powerAssertText;
};

empower.defaultOptions = defaultOptions;
module.exports = empower;
 at SyntaxError: Unexpected token (27:19)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:29:38)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/rove/node_modules/rove/lib/index.js. Coverage (Term): 49% Coverage (LOC): 78%
*- File /root/Targets/rove/node_modules/rove/lib/router.js. Coverage (Term): 6% Coverage (LOC): 7%
*- File /root/Targets/rove/node_modules/power-assert/index.js. Coverage (Term): 20% Coverage (LOC): 23%
*- File /root/Targets/rove/node_modules/universal-deep-strict-equal/index.js. Coverage (Term): 25% Coverage (LOC): 42%
*- File /root/Targets/rove/node_modules/indexof/index.js. Coverage (Term): 33% Coverage (LOC): 42%
*- File /root/Targets/rove/node_modules/array-filter/index.js. Coverage (Term): 20% Coverage (LOC): 25%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
