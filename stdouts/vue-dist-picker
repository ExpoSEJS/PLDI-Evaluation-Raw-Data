/root/Targets/vue-dist-picker
└─┬ vue-dist-picker@1.1.0 
  └─┬ babel-runtime@6.26.0 
    ├── core-js@2.5.1 
    └── regenerator-runtime@0.11.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/vue-dist-picker/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0672 took 3.5072s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:78) on program <template>
<div class="vue-dist-picker" @mouseout="endChoice" @mouseover="startMouseOver">
	<input type="text" autocomplete="off" disableautocomplete :name="field" :id="field" :placeholder="placeholder" :value="showName"
		@focus="startChoice" @keypress="startChoice" @blur="endChoice" v-el:input>
	<!--选择面板-->
	<div class="vdp-panel" v-show="distPanelIsShow">
		<h5>选择省市区</h5>
		<ul class="vdp-tags">
			<li :class="{'z-on': activatedTag==1}" @click="activeTag(1)">{{ currProv.name }}</li>
			<li :class="{'z-on': activatedTag==2}" @click="activeTag(2)" v-if="provId">{{ currCity.name }}</li>
			<li :class="{'z-on': activatedTag==3}" @click="activeTag(3)" v-if="cityId">{{ currDist.name }}</li>
		</ul>
		<div class="vdp-list">
			<ul v-if="activatedTag==1">
				<li v-for="item in provList" @click="choiceProv(item.id)" title="{{ item.name }}">{{ item.name }}</li>
			</ul>
			<ul v-if="activatedTag==2">
				<li v-for="item in cityList" @click="choiceCity(item.id)" title="{{ item.name }}">{{ item.name }}</li>
			</ul>
			<ul v-if="activatedTag==3">
				<li v-for="item in distList" @click="choiceDist(item.id)" title="{{ item.name }}">{{ item.name }}</li>
			</ul>
		</div>
	</div>
</div>

</template>

<script>
'use strict';

const collection = {
    /*
	 * 通过id获取集合条目，取得条目
	 */
	get(arr, id, field = 'id') {
		let res = null;
		if (typeof arr == 'object' && typeof arr.length != 'undefined' && arr.length > 0) {
			arr.forEach((item) => {
				if (item[field] == id) {
					res = item;
				}
			});
		}

		return res;
	}
};

export default {
	props: {
		field: {
			type: String,
			default: ''
		},
		//distId
		value: {
			default: '',
			twoWay: true
		},
		showName: {
			default: '',
			twoWay: true
		},
		placeholder: {
			type: String,
			default: ''
		}
	},
	data() {
		let that = this,
			{
				value
			} = this,
			activatedTag = 1,
			provId = '',
			cityId = '',
			distId = '';
		if (value) {
			DIST_PICKER_LIST['-1'].forEach((item) => {
				DIST_PICKER_LIST[item.id].forEach((cityItem) => {
					if (DIST_PICKER_LIST[cityItem.id]) {
						DIST_PICKER_LIST[cityItem.id].forEach((distItem) => {
							if (distItem.id == value) {
								provId = item.id;
								cityId = cityItem.id;
								distId = distItem.id;
								activatedTag = 3;
								// 必须等到下一轮去运行时间，可恶的组件没有created函数
								setTimeout(function () {
									that.setShowName();
								}, 0);
							}
						});
					}
				});
			});
		}
		return {
			distPanelIsShow: false,
			isMouseOver: false,
			activatedTag, //1省 2市 3区
			provList: DIST_PICKER_LIST['-1'],
			provId,
			cityId,
			distId
		};
	},
	computed: {
		cityList() {
			let {
				provId
			} = this;
			if (provId && typeof DIST_PICKER_LIST[provId] != 'undefined') {
				return DIST_PICKER_LIST[provId];
			} else {
				return [];
			}
		},
		distList() {
			let {
				cityId
			} = this;
			if (cityId && typeof DIST_PICKER_LIST[cityId] != 'undefined') {
				return DIST_PICKER_LIST[cityId];
			} else {
				return [];
			}
		},
		currProv() {
			let {
				provList,
				provId
			} = this;
			if (provId) {
				return collection.get(provList, provId);
			} else {
				return {
					id: '',
					name: '请选择'
				};
			}
		},
		currCity() {
			let {
				cityList,
				cityId
			} = this;
			if (cityList.length > 0 && cityId) {
				return collection.get(cityList, cityId);
			} else {
				return {
					id: '',
					name: '请选择'
				};
			}
		},
		currDist() {
			let {
				distList,
				distId
			} = this;
			if (distList.length > 0 && distId) {
				return collection.get(distList, distId);
			} else {
				return {
					id: '',
					name: '请选择'
				};
			}
		}
	},
	methods: {
		setShowName() {
			let {
				currProv,
				currCity,
				currDist
			} = this;
			if (currProv.id && currCity.id && currDist.id) {
				this.showName = currProv.name + '-' + currCity.name + '-' + currDist.name;
			} else {
				this.showName = '';
			}
		},
		activeTag(k) {
			this.activatedTag = k;
		},
		choiceProv(id) {
			this.provId = id;
			this.cityId = '';
			this.distId = '';
			this.activeTag(2);
		},
		choiceCity(id) {
			this.cityId = id;
			this.distId = '';
			this.activeTag(3);
		},
		choiceDist(id) {
			this.distId = id;
			this.value = id;
			this.setShowName();
			this.immEndChoice();
		},
		// 开始选择（显示省市区面板）
		startChoice(e) {
			if (e && e.type == 'keypress') {
				e.returnValue = false;
			}
			this.distPanelIsShow = true;
		},
		// 鼠标离开省市区选择区域时超过一定时间，关闭省市区面板
		endChoice(e) {
			let that = this,
				inputEle = that.$els.input;
			if(e.type == 'mouseout') {
				that.isMouseOver = false;
			}
			setTimeout(function() {
				if (!that.isMouseOver && inputEle != document.activeElement) {
					that.distPanelIsShow = false;
				}
			}, 300);
		},
		startMouseOver() {
			this.isMouseOver = true;
		},
		// 立即关闭省市区面板
		immEndChoice() {
			this.isMouseOver = true;
			this.distPanelIsShow = false;
		}
	},
	create() {
		this.setShowName();
	}
}

</script>

<style lang="sass" scoped>@import "./scss/dist-picker.scss"</style>
 at SyntaxError: Unexpected token (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1573:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
