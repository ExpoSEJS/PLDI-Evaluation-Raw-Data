/root/Targets/rpl
└─┬ rpl@0.8.0 
  ├── chart.js@1.1.1 
  ├── chrome-app@0.1.0 
  ├─┬ is-geojson@1.0.1 
  │ └─┬ tape@3.6.1 
  │   ├── deep-equal@0.2.2 
  │   ├── defined@0.0.0 
  │   ├─┬ glob@3.2.11 
  │   │ └─┬ minimatch@0.3.0 
  │   │   ├── lru-cache@2.7.3 
  │   │   └── sigmund@1.0.1 
  │   ├── inherits@2.0.3 
  │   ├── object-inspect@0.4.0 
  │   └── resumer@0.0.0 
  ├── json-stringify-safe@5.0.1 
  ├─┬ mapbox.js@2.4.0 
  │ ├── corslite@0.0.6 
  │ ├── isarray@0.0.1 
  │ ├── leaflet@0.7.7 
  │ ├── mustache@2.2.1 
  │ └── sanitize-caja@0.1.3 
  ├── minimist@1.1.3 
  ├── opener@1.4.3 
  ├─┬ shoe@0.0.15 
  │ ├─┬ sockjs@0.3.7 
  │ │ ├── faye-websocket@0.4.4 
  │ │ └── node-uuid@1.3.3 
  │ └── sockjs-client@0.0.0-unreleasable 
  ├─┬ st@0.5.5 
  │ ├─┬ async-cache@1.0.0 
  │ │ └── lru-cache@2.3.1 
  │ ├─┬ bl@1.0.3 
  │ │ └─┬ readable-stream@2.0.6 
  │ │   ├── core-util-is@1.0.2 
  │ │   ├── isarray@1.0.0 
  │ │   ├── process-nextick-args@1.0.7 
  │ │   ├── string_decoder@0.10.31 
  │ │   └── util-deprecate@1.0.2 
  │ ├── fd@0.0.2 
  │ ├── graceful-fs@4.1.11 
  │ ├── mime@1.3.6 
  │ └── negotiator@0.5.3 
  ├─┬ stream-combiner@0.2.2 
  │ └── duplexer@0.1.1 
  ├─┬ terrarium-stream@1.4.0 
  │ └── terrarium@2.0.0 
  └── through@2.3.8 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/rpl/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0485 took 2.1068s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

var path = require('path'),
  http = require('http'),
  streams = require('./shared/streams.js'),
  through = require('through'),
  st = require('st'),
  terrariumStream = require('terrarium-stream').Node,
  stringify = require('json-stringify-safe'),
  fs = require('fs'),
  shoe = require('shoe');

// from https://github.com/joyent/node/blob/master/lib/repl.js
module.filename = path.resolve('rpl');
module.paths = require('module')._nodeModulePaths(module.filename);

function writeHead(res, contentType) {
  res.writeHead(200, {
    'Content-Type': contentType,
    'Cache-Control': 'no-cache'
  });
}

function RPL(filename) {
  this.filename = filename;

  if (this.filename) {
    if (!fs.existsSync(this.filename)) {
      console.log('Creating new file %s', this.filename);
    } else {
      this.defaultValue = fs.readFileSync(this.filename, 'utf8');
    }
  }

  this.server = http.createServer(st({
    path: __dirname + '/static',
    url: '/',
    cache: false,
    index: 'index.html',
    dot: true
  }));
}

RPL.prototype.listen = function() {
  this.server.listen.apply(this.server, arguments);


  var onstream = function(stream) {

    // if you've started this up with a file argument,
    // send that file to the browser
    if (this.defaultValue) {
      stream.write(JSON.stringify({ defaultValue: this.defaultValue }));
    }

    stream.pipe(streams.fromJSON())
      .pipe(terrariumStream())
      .pipe(streams.toJSON())
      .pipe(stream);

  }.bind(this);

  // shoe manages our connection to the browser and lets
  // us send messages back and forth with streams. under the hood
  // it's all websockets on modern browsers.
  var sock = shoe(onstream);

  sock.install(this.server, '/eval');

  this.sock = sock;
};

// horrible errors within the vm can bubble up in unexpected ways.
// we keep that from crashing the process by basically ignoring them
// here.
process.on('uncaughtException', function (err) {
  console.log('Caught exception: ' + err);
});

module.exports = RPL;
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
