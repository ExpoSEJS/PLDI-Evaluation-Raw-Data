/root/Targets/easy-slack-bot
└─┬ easy-slack-bot@0.2.0 
  ├─┬ debug@2.6.9 
  │ └── ms@2.0.0 
  ├── latinize@0.4.0 
  ├─┬ parse-latin@3.2.0 
  │ ├── nlcst-to-string@2.0.1 
  │ ├─┬ unist-util-modify-children@1.1.1 
  │ │ └── array-iterate@1.1.1 
  │ └── unist-util-visit-children@1.1.1 
  └─┬ slackbots@0.5.3 
    ├── extend@2.0.1 
    ├─┬ request@2.83.0 
    │ ├── aws-sign2@0.7.0 
    │ ├── aws4@1.6.0 
    │ ├── caseless@0.12.0 
    │ ├─┬ combined-stream@1.0.5 
    │ │ └── delayed-stream@1.0.0 
    │ ├── extend@3.0.1 
    │ ├── forever-agent@0.6.1 
    │ ├─┬ form-data@2.3.1 
    │ │ └── asynckit@0.4.0 
    │ ├─┬ har-validator@5.0.3 
    │ │ ├─┬ ajv@5.2.3 
    │ │ │ ├── co@4.6.0 
    │ │ │ ├── fast-deep-equal@1.0.0 
    │ │ │ ├── json-schema-traverse@0.3.1 
    │ │ │ └─┬ json-stable-stringify@1.0.1 
    │ │ │   └── jsonify@0.0.0 
    │ │ └── har-schema@2.0.0 
    │ ├─┬ hawk@6.0.2 
    │ │ ├── boom@4.3.1 
    │ │ ├─┬ cryptiles@3.1.2 
    │ │ │ └── boom@5.2.0 
    │ │ ├── hoek@4.2.0 
    │ │ └── sntp@2.0.2 
    │ ├─┬ http-signature@1.2.0 
    │ │ ├── assert-plus@1.0.0 
    │ │ ├─┬ jsprim@1.4.1 
    │ │ │ ├── extsprintf@1.3.0 
    │ │ │ ├── json-schema@0.2.3 
    │ │ │ └─┬ verror@1.10.0 
    │ │ │   └── core-util-is@1.0.2 
    │ │ └─┬ sshpk@1.13.1 
    │ │   ├── asn1@0.2.3 
    │ │   ├── bcrypt-pbkdf@1.0.1 
    │ │   ├── dashdash@1.14.1 
    │ │   ├── ecc-jsbn@0.1.1 
    │ │   ├── getpass@0.1.7 
    │ │   ├── jsbn@0.1.1 
    │ │   └── tweetnacl@0.14.5 
    │ ├── is-typedarray@1.0.0 
    │ ├── isstream@0.1.2 
    │ ├── json-stringify-safe@5.0.1 
    │ ├─┬ mime-types@2.1.17 
    │ │ └── mime-db@1.30.0 
    │ ├── oauth-sign@0.8.2 
    │ ├── performance-now@2.1.0 
    │ ├── qs@6.5.1 
    │ ├── safe-buffer@5.1.1 
    │ ├── stringstream@0.0.5 
    │ ├─┬ tough-cookie@2.3.3 
    │ │ └── punycode@1.4.1 
    │ ├── tunnel-agent@0.6.0 
    │ └── uuid@3.1.0 
    ├── vow@0.4.16 
    └─┬ ws@1.1.4 
      ├── options@0.0.6 
      └── ultron@1.0.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/easy-slack-bot/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 36% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 36% coverage ] ****** [2 done /2 queued / 1 running / 1 errors / 61% coverage ] ****** [2 done /1 queued / 2 running / 1 errors / 61% coverage ] ****** [2 done /0 queued / 3 running / 1 errors / 61% coverage ] ****** [2 done /0 queued / 3 running / 1 errors / 61% coverage ] ****** [3 done /0 queued / 3 running / 2 errors / 61% coverage ] ****** [3 done /0 queued / 3 running / 2 errors / 61% coverage ] ****** [4 done /2 queued / 3 running / 3 errors / 61% coverage ] ****** [4 done /1 queued / 4 running / 3 errors / 61% coverage ] ****** [4 done /0 queued / 5 running / 3 errors / 61% coverage ] ****** [4 done /0 queued / 5 running / 3 errors / 61% coverage ] ****** [5 done /1 queued / 5 running / 4 errors / 61% coverage ] ****** [5 done /0 queued / 6 running / 4 errors / 61% coverage ] ****** [5 done /0 queued / 6 running / 4 errors / 61% coverage ] ****** [6 done /1 queued / 6 running / 5 errors / 61% coverage ] ****** [6 done /0 queued / 7 running / 5 errors / 61% coverage ] ****** [6 done /0 queued / 7 running / 5 errors / 61% coverage ] ****** [7 done /2 queued / 7 running / 6 errors / 61% coverage ] ****** [7 done /1 queued / 8 running / 6 errors / 61% coverage ] ****** [7 done /0 queued / 9 running / 6 errors / 61% coverage ] ****** [7 done /0 queued / 9 running / 6 errors / 61% coverage ] ****** [8 done /0 queued / 9 running / 7 errors / 61% coverage ] ****** [8 done /0 queued / 9 running / 7 errors / 61% coverage ] ****** [9 done /1 queued / 9 running / 8 errors / 61% coverage ] ****** [9 done /0 queued / 10 running / 8 errors / 61% coverage ] ****** [9 done /0 queued / 10 running / 8 errors / 61% coverage ] ****** [10 done /1 queued / 10 running / 9 errors / 61% coverage ] ****** [10 done /0 queued / 11 running / 9 errors / 61% coverage ] ****** [10 done /0 queued / 11 running / 9 errors / 61% coverage ] ****** [11 done /1 queued / 11 running / 10 errors / 61% coverage ] ****** [11 done /0 queued / 12 running / 10 errors / 61% coverage ] ****** [11 done /0 queued / 12 running / 10 errors / 61% coverage ] ****** [12 done /2 queued / 12 running / 11 errors / 61% coverage ] ****** [12 done /1 queued / 13 running / 11 errors / 61% coverage ] ****** [12 done /0 queued / 14 running / 11 errors / 61% coverage ] ****** [12 done /0 queued / 14 running / 11 errors / 61% coverage ] ****** [13 done /2 queued / 14 running / 12 errors / 61% coverage ] ****** [13 done /1 queued / 15 running / 12 errors / 61% coverage ] ****** [13 done /0 queued / 16 running / 12 errors / 61% coverage ] ****** [13 done /0 queued / 16 running / 12 errors / 61% coverage ] ****** [14 done /0 queued / 16 running / 13 errors / 61% coverage ] ****** [14 done /0 queued / 16 running / 13 errors / 61% coverage ] ****** [15 done /0 queued / 15 running / 14 errors / 61% coverage ] ****** [16 done /0 queued / 15 running / 15 errors / 61% coverage ] ****** [16 done /0 queued / 15 running / 15 errors / 61% coverage ] ****** [17 done /0 queued / 14 running / 16 errors / 61% coverage ] ****** [18 done /0 queued / 14 running / 17 errors / 61% coverage ] ****** [18 done /0 queued / 14 running / 17 errors / 61% coverage ] ****** [19 done /2 queued / 14 running / 18 errors / 61% coverage ] ****** [19 done /1 queued / 15 running / 18 errors / 61% coverage ] ****** [19 done /0 queued / 16 running / 18 errors / 61% coverage ] ****** [19 done /0 queued / 16 running / 18 errors / 61% coverage ] ****** [20 done /0 queued / 15 running / 19 errors / 61% coverage ] ****** [21 done /1 queued / 15 running / 20 errors / 61% coverage ] ****** [21 done /0 queued / 16 running / 20 errors / 61% coverage ] ****** [21 done /0 queued / 16 running / 20 errors / 61% coverage ] ****** [22 done /1 queued / 16 running / 21 errors / 62% coverage ] ****** [22 done /1 queued / 16 running / 21 errors / 62% coverage ] ****** [23 done /1 queued / 16 running / 22 errors / 62% coverage ] ****** [23 done /1 queued / 16 running / 22 errors / 62% coverage ] ****** [24 done /3 queued / 16 running / 23 errors / 62% coverage ] ****** [24 done /3 queued / 16 running / 23 errors / 62% coverage ] ****** [25 done /4 queued / 16 running / 24 errors / 62% coverage ] ****** [25 done /4 queued / 16 running / 24 errors / 62% coverage ] ****** [26 done /6 queued / 16 running / 25 errors / 62% coverage ] ****** [26 done /6 queued / 16 running / 25 errors / 62% coverage ] ****** [27 done /8 queued / 16 running / 26 errors / 62% coverage ] ****** [27 done /8 queued / 16 running / 26 errors / 62% coverage ] ****** [28 done /9 queued / 16 running / 27 errors / 62% coverage ] ****** [28 done /9 queued / 16 running / 27 errors / 62% coverage ] ****** [29 done /13 queued / 16 running / 28 errors / 62% coverage ] ****** [29 done /13 queued / 16 running / 28 errors / 62% coverage ] ****** [30 done /16 queued / 16 running / 29 errors / 62% coverage ] ****** [30 done /16 queued / 16 running / 29 errors / 62% coverage ] ****** [31 done /18 queued / 16 running / 30 errors / 62% coverage ] ****** [31 done /18 queued / 16 running / 30 errors / 62% coverage ] ****** [32 done /17 queued / 16 running / 31 errors / 62% coverage ] ****** [32 done /17 queued / 16 running / 31 errors / 62% coverage ] ****** [33 done /16 queued / 16 running / 32 errors / 62% coverage ] ****** [33 done /16 queued / 16 running / 32 errors / 62% coverage ] ****** [34 done /17 queued / 16 running / 33 errors / 62% coverage ] ****** [34 done /17 queued / 16 running / 33 errors / 62% coverage ] ****** [35 done /18 queued / 16 running / 34 errors / 62% coverage ] ****** [35 done /18 queued / 16 running / 34 errors / 62% coverage ] ****** [36 done /19 queued / 16 running / 35 errors / 62% coverage ] ****** [36 done /19 queued / 16 running / 35 errors / 62% coverage ] ****** [37 done /18 queued / 16 running / 36 errors / 62% coverage ] ****** [37 done /18 queued / 16 running / 36 errors / 62% coverage ] ****** [38 done /19 queued / 16 running / 37 errors / 62% coverage ] ****** [38 done /19 queued / 16 running / 37 errors / 62% coverage ] ****** [39 done /18 queued / 16 running / 38 errors / 62% coverage ] ****** [39 done /18 queued / 16 running / 38 errors / 62% coverage ] ****** [40 done /17 queued / 16 running / 39 errors / 62% coverage ] ****** [40 done /17 queued / 16 running / 39 errors / 62% coverage ] ****** [41 done /18 queued / 16 running / 40 errors / 62% coverage ] ****** [41 done /18 queued / 16 running / 40 errors / 62% coverage ] ****** [42 done /17 queued / 16 running / 41 errors / 62% coverage ] ****** [42 done /17 queued / 16 running / 41 errors / 62% coverage ] ****** [43 done /18 queued / 16 running / 42 errors / 62% coverage ] ****** [43 done /18 queued / 16 running / 42 errors / 62% coverage ] ****** [44 done /22 queued / 16 running / 43 errors / 62% coverage ] ****** [44 done /22 queued / 16 running / 43 errors / 62% coverage ] ****** [45 done /21 queued / 16 running / 44 errors / 62% coverage ] ****** [45 done /21 queued / 16 running / 44 errors / 62% coverage ] ****** [46 done /21 queued / 16 running / 45 errors / 62% coverage ] ****** [46 done /21 queued / 16 running / 45 errors / 62% coverage ] ****** [47 done /23 queued / 16 running / 46 errors / 62% coverage ] ****** [47 done /23 queued / 16 running / 46 errors / 62% coverage ] ****** [48 done /22 queued / 16 running / 47 errors / 62% coverage ] ****** [48 done /22 queued / 16 running / 47 errors / 62% coverage ] ****** [49 done /21 queued / 16 running / 48 errors / 62% coverage ] ****** [49 done /21 queued / 16 running / 48 errors / 62% coverage ] ****** [50 done /22 queued / 16 running / 49 errors / 62% coverage ] ****** [50 done /22 queued / 16 running / 49 errors / 62% coverage ] ****** [51 done /24 queued / 16 running / 50 errors / 62% coverage ] ****** [51 done /24 queued / 16 running / 50 errors / 62% coverage ] ****** [52 done /27 queued / 16 running / 51 errors / 62% coverage ] ****** [52 done /27 queued / 16 running / 51 errors / 62% coverage ] ****** [53 done /28 queued / 16 running / 52 errors / 62% coverage ] ****** [53 done /28 queued / 16 running / 52 errors / 62% coverage ] ****** [54 done /27 queued / 16 running / 53 errors / 62% coverage ] ****** [54 done /27 queued / 16 running / 53 errors / 62% coverage ] ****** [55 done /26 queued / 16 running / 54 errors / 62% coverage ] ****** [55 done /26 queued / 16 running / 54 errors / 62% coverage ] ****** [56 done /27 queued / 16 running / 55 errors / 62% coverage ] ****** [56 done /27 queued / 16 running / 55 errors / 62% coverage ] ****** [57 done /28 queued / 16 running / 56 errors / 62% coverage ] ****** [57 done /28 queued / 16 running / 56 errors / 62% coverage ] ****** [58 done /28 queued / 16 running / 57 errors / 62% coverage ] ****** [58 done /28 queued / 16 running / 57 errors / 62% coverage ] ****** [59 done /27 queued / 16 running / 58 errors / 62% coverage ] ****** [59 done /27 queued / 16 running / 58 errors / 62% coverage ] ****** [60 done /28 queued / 16 running / 59 errors / 62% coverage ] ****** [60 done /28 queued / 16 running / 59 errors / 62% coverage ] ****** [61 done /29 queued / 16 running / 60 errors / 62% coverage ] ****** [61 done /29 queued / 16 running / 60 errors / 62% coverage ] ****** [62 done /29 queued / 16 running / 61 errors / 62% coverage ] ****** [62 done /29 queued / 16 running / 61 errors / 62% coverage ] ****** [63 done /31 queued / 16 running / 62 errors / 62% coverage ] ****** [63 done /31 queued / 16 running / 62 errors / 62% coverage ] ****** [64 done /30 queued / 16 running / 63 errors / 62% coverage ] ****** [64 done /30 queued / 16 running / 63 errors / 62% coverage ] ****** [65 done /29 queued / 16 running / 64 errors / 62% coverage ] ****** [65 done /29 queued / 16 running / 64 errors / 62% coverage ] ****** [66 done /28 queued / 16 running / 65 errors / 62% coverage ] ****** [66 done /28 queued / 16 running / 65 errors / 62% coverage ] ****** [67 done /29 queued / 16 running / 66 errors / 62% coverage ] ****** [67 done /29 queued / 16 running / 66 errors / 62% coverage ] ****** [68 done /30 queued / 16 running / 67 errors / 62% coverage ] ****** [68 done /30 queued / 16 running / 67 errors / 62% coverage ] ****** [69 done /31 queued / 16 running / 68 errors / 62% coverage ] ****** [69 done /31 queued / 16 running / 68 errors / 62% coverage ] ****** [70 done /32 queued / 16 running / 69 errors / 62% coverage ] ****** [70 done /32 queued / 16 running / 69 errors / 62% coverage ] ****** [71 done /31 queued / 16 running / 70 errors / 62% coverage ] ****** [71 done /31 queued / 16 running / 70 errors / 62% coverage ] ****** [72 done /30 queued / 16 running / 71 errors / 62% coverage ] ****** [72 done /30 queued / 16 running / 71 errors / 62% coverage ] ****** [73 done /33 queued / 16 running / 72 errors / 62% coverage ] ****** [73 done /33 queued / 16 running / 72 errors / 62% coverage ] ****** [74 done /33 queued / 16 running / 73 errors / 62% coverage ] ****** [74 done /33 queued / 16 running / 73 errors / 62% coverage ] ****** [75 done /33 queued / 16 running / 74 errors / 62% coverage ] ****** [75 done /33 queued / 16 running / 74 errors / 62% coverage ] ****** [76 done /32 queued / 16 running / 75 errors / 62% coverage ] ****** [76 done /32 queued / 16 running / 75 errors / 62% coverage ] ****** [77 done /32 queued / 16 running / 76 errors / 62% coverage ] ****** [77 done /32 queued / 16 running / 76 errors / 62% coverage ] ****** [78 done /36 queued / 16 running / 77 errors / 62% coverage ] ****** [78 done /36 queued / 16 running / 77 errors / 62% coverage ] ****** [79 done /38 queued / 16 running / 78 errors / 62% coverage ] ****** [79 done /38 queued / 16 running / 78 errors / 62% coverage ] ****** [80 done /41 queued / 16 running / 79 errors / 62% coverage ] ****** [80 done /41 queued / 16 running / 79 errors / 62% coverage ] ****** [81 done /46 queued / 16 running / 80 errors / 62% coverage ] ****** [81 done /46 queued / 16 running / 80 errors / 62% coverage ] ****** [82 done /49 queued / 16 running / 81 errors / 62% coverage ] ****** [82 done /49 queued / 16 running / 81 errors / 62% coverage ] ****** [83 done /48 queued / 16 running / 82 errors / 62% coverage ] ****** [83 done /48 queued / 16 running / 82 errors / 62% coverage ] ****** [84 done /48 queued / 16 running / 83 errors / 62% coverage ] ****** [84 done /48 queued / 16 running / 83 errors / 62% coverage ] ****** [85 done /47 queued / 16 running / 84 errors / 62% coverage ] ****** [85 done /47 queued / 16 running / 84 errors / 62% coverage ] ****** [86 done /48 queued / 16 running / 85 errors / 62% coverage ] ****** [86 done /48 queued / 16 running / 85 errors / 62% coverage ] ****** [87 done /49 queued / 16 running / 86 errors / 62% coverage ] ****** [87 done /49 queued / 16 running / 86 errors / 62% coverage ] ****** [88 done /50 queued / 16 running / 87 errors / 62% coverage ] ****** [88 done /50 queued / 16 running / 87 errors / 62% coverage ] ****** [89 done /49 queued / 16 running / 88 errors / 62% coverage ] ****** [89 done /49 queued / 16 running / 88 errors / 62% coverage ] ****** [90 done /48 queued / 16 running / 89 errors / 62% coverage ] ****** [90 done /48 queued / 16 running / 89 errors / 62% coverage ] ****** [91 done /47 queued / 16 running / 90 errors / 62% coverage ] ****** [91 done /47 queued / 16 running / 90 errors / 62% coverage ] ****** [92 done /46 queued / 16 running / 91 errors / 62% coverage ] ****** [92 done /46 queued / 16 running / 91 errors / 62% coverage ] ****** [93 done /46 queued / 16 running / 92 errors / 62% coverage ] ****** [93 done /46 queued / 16 running / 92 errors / 62% coverage ] ****** [94 done /45 queued / 16 running / 93 errors / 62% coverage ] ****** [94 done /45 queued / 16 running / 93 errors / 62% coverage ] ****** [95 done /46 queued / 16 running / 94 errors / 62% coverage ] ****** [95 done /46 queued / 16 running / 94 errors / 62% coverage ] ****** [96 done /45 queued / 16 running / 95 errors / 62% coverage ] ****** [96 done /45 queued / 16 running / 95 errors / 62% coverage ] ****** [97 done /44 queued / 16 running / 96 errors / 62% coverage ] ****** [97 done /44 queued / 16 running / 96 errors / 62% coverage ] ****** [98 done /47 queued / 16 running / 97 errors / 62% coverage ] ****** [98 done /47 queued / 16 running / 97 errors / 62% coverage ] ****** [99 done /47 queued / 16 running / 98 errors / 62% coverage ] ****** [99 done /47 queued / 16 running / 98 errors / 62% coverage ] ****** [100 done /49 queued / 16 running / 99 errors / 62% coverage ] ****** [100 done /49 queued / 16 running / 99 errors / 62% coverage ] ****** [101 done /48 queued / 16 running / 100 errors / 62% coverage ] ****** [101 done /48 queued / 16 running / 100 errors / 62% coverage ] ****** [102 done /52 queued / 16 running / 101 errors / 62% coverage ] ****** [102 done /52 queued / 16 running / 101 errors / 62% coverage ] ****** [103 done /54 queued / 16 running / 102 errors / 62% coverage ] ****** [103 done /54 queued / 16 running / 102 errors / 62% coverage ] ****** [104 done /53 queued / 16 running / 103 errors / 62% coverage ] ****** [104 done /53 queued / 16 running / 103 errors / 62% coverage ] ****** [105 done /56 queued / 16 running / 104 errors / 62% coverage ] ****** [105 done /56 queued / 16 running / 104 errors / 62% coverage ] ****** [106 done /59 queued / 16 running / 105 errors / 62% coverage ] ****** [106 done /59 queued / 16 running / 105 errors / 62% coverage ] ****** [107 done /59 queued / 16 running / 106 errors / 62% coverage ] ****** [107 done /59 queued / 16 running / 106 errors / 62% coverage ] ****** [108 done /58 queued / 16 running / 107 errors / 62% coverage ] ****** [108 done /58 queued / 16 running / 107 errors / 62% coverage ] ****** [109 done /58 queued / 16 running / 108 errors / 62% coverage ] ****** [109 done /58 queued / 16 running / 108 errors / 62% coverage ] ****** [110 done /57 queued / 16 running / 109 errors / 62% coverage ] ****** [110 done /57 queued / 16 running / 109 errors / 62% coverage ] ****** [111 done /57 queued / 16 running / 110 errors / 62% coverage ] ****** [111 done /57 queued / 16 running / 110 errors / 62% coverage ] ****** [112 done /56 queued / 16 running / 111 errors / 62% coverage ] ****** [112 done /56 queued / 16 running / 111 errors / 62% coverage ] ****** [113 done /56 queued / 16 running / 112 errors / 62% coverage ] ****** [113 done /56 queued / 16 running / 112 errors / 62% coverage ] ****** [114 done /55 queued / 16 running / 113 errors / 62% coverage ] ****** [114 done /55 queued / 16 running / 113 errors / 62% coverage ] ****** [115 done /54 queued / 16 running / 114 errors / 62% coverage ] ****** [115 done /54 queued / 16 running / 114 errors / 62% coverage ] ****** [116 done /54 queued / 16 running / 115 errors / 62% coverage ] ****** [116 done /54 queued / 16 running / 115 errors / 62% coverage ] ****** [117 done /55 queued / 16 running / 116 errors / 62% coverage ] ****** [117 done /55 queued / 16 running / 116 errors / 62% coverage ] ****** [118 done /56 queued / 16 running / 117 errors / 62% coverage ] ****** [118 done /56 queued / 16 running / 117 errors / 62% coverage ] ****** [119 done /57 queued / 16 running / 118 errors / 62% coverage ] ****** [119 done /57 queued / 16 running / 118 errors / 62% coverage ] ****** [120 done /58 queued / 16 running / 119 errors / 62% coverage ] ****** [120 done /58 queued / 16 running / 119 errors / 62% coverage ] ****** [121 done /60 queued / 16 running / 120 errors / 62% coverage ] ****** [121 done /60 queued / 16 running / 120 errors / 62% coverage ] ****** [122 done /61 queued / 16 running / 121 errors / 62% coverage ] ****** [122 done /61 queued / 16 running / 121 errors / 62% coverage ] ****** [123 done /61 queued / 16 running / 122 errors / 62% coverage ] ****** [123 done /61 queued / 16 running / 122 errors / 62% coverage ] ****** [124 done /60 queued / 16 running / 123 errors / 62% coverage ] ****** [124 done /60 queued / 16 running / 123 errors / 62% coverage ] ****** [125 done /59 queued / 16 running / 124 errors / 62% coverage ] ****** [125 done /59 queued / 16 running / 124 errors / 62% coverage ] ****** [126 done /58 queued / 16 running / 125 errors / 62% coverage ] ****** [126 done /58 queued / 16 running / 125 errors / 62% coverage ] ****** [127 done /57 queued / 16 running / 126 errors / 62% coverage ] ****** [127 done /57 queued / 16 running / 126 errors / 62% coverage ] ****** [128 done /58 queued / 16 running / 127 errors / 62% coverage ] ****** [128 done /58 queued / 16 running / 127 errors / 62% coverage ] ****** [129 done /59 queued / 16 running / 128 errors / 62% coverage ] ****** [129 done /59 queued / 16 running / 128 errors / 62% coverage ] ****** [130 done /60 queued / 16 running / 129 errors / 62% coverage ] ****** [130 done /60 queued / 16 running / 129 errors / 62% coverage ] ****** [131 done /60 queued / 16 running / 130 errors / 62% coverage ] ****** [131 done /60 queued / 16 running / 130 errors / 62% coverage ] ****** [132 done /61 queued / 16 running / 131 errors / 62% coverage ] ****** [132 done /61 queued / 16 running / 131 errors / 62% coverage ] ****** [133 done /63 queued / 16 running / 132 errors / 62% coverage ] ****** [133 done /63 queued / 16 running / 132 errors / 62% coverage ] ****** [134 done /64 queued / 16 running / 133 errors / 62% coverage ] ****** [134 done /64 queued / 16 running / 133 errors / 62% coverage ] ****** [135 done /64 queued / 16 running / 134 errors / 62% coverage ] ****** [135 done /64 queued / 16 running / 134 errors / 62% coverage ] ****** [136 done /63 queued / 16 running / 135 errors / 62% coverage ] ****** [136 done /63 queued / 16 running / 135 errors / 62% coverage ] ****** [137 done /65 queued / 16 running / 136 errors / 62% coverage ] ****** [137 done /65 queued / 16 running / 136 errors / 62% coverage ] ****** [138 done /65 queued / 16 running / 137 errors / 62% coverage ] ****** [138 done /65 queued / 16 running / 137 errors / 62% coverage ] ****** [139 done /66 queued / 16 running / 138 errors / 62% coverage ] ****** [139 done /66 queued / 16 running / 138 errors / 62% coverage ] ****** [140 done /70 queued / 16 running / 139 errors / 62% coverage ] ****** [140 done /70 queued / 16 running / 139 errors / 62% coverage ] ****** [141 done /70 queued / 16 running / 140 errors / 62% coverage ] ****** [141 done /70 queued / 16 running / 140 errors / 62% coverage ] ****** [142 done /71 queued / 16 running / 141 errors / 62% coverage ] ****** [142 done /71 queued / 16 running / 141 errors / 62% coverage ] ****** [143 done /72 queued / 16 running / 142 errors / 62% coverage ] ****** [143 done /72 queued / 16 running / 142 errors / 62% coverage ] ****** [144 done /75 queued / 16 running / 143 errors / 62% coverage ] ****** [144 done /75 queued / 16 running / 143 errors / 62% coverage ] ****** [145 done /77 queued / 16 running / 144 errors / 62% coverage ] ****** [145 done /77 queued / 16 running / 144 errors / 62% coverage ] ****** [146 done /78 queued / 16 running / 145 errors / 62% coverage ] ****** [146 done /78 queued / 16 running / 145 errors / 62% coverage ] ****** [147 done /79 queued / 16 running / 146 errors / 62% coverage ] ****** [147 done /79 queued / 16 running / 146 errors / 62% coverage ] ****** [148 done /82 queued / 16 running / 147 errors / 62% coverage ] ****** [148 done /82 queued / 16 running / 147 errors / 62% coverage ] ****** [149 done /85 queued / 16 running / 148 errors / 62% coverage ] ****** [149 done /85 queued / 16 running / 148 errors / 62% coverage ] ****** [150 done /86 queued / 16 running / 149 errors / 62% coverage ] ****** [150 done /86 queued / 16 running / 149 errors / 62% coverage ] ****** [151 done /87 queued / 16 running / 150 errors / 62% coverage ] ****** [151 done /87 queued / 16 running / 150 errors / 62% coverage ] ****** [152 done /89 queued / 16 running / 151 errors / 62% coverage ] ****** [152 done /89 queued / 16 running / 151 errors / 62% coverage ] ****** [153 done /92 queued / 16 running / 152 errors / 62% coverage ] ****** [153 done /92 queued / 16 running / 152 errors / 62% coverage ] ****** [154 done /94 queued / 16 running / 153 errors / 62% coverage ] ****** [154 done /94 queued / 16 running / 153 errors / 62% coverage ] ****** [155 done /94 queued / 16 running / 154 errors / 62% coverage ] ****** [155 done /94 queued / 16 running / 154 errors / 62% coverage ] ****** [156 done /95 queued / 16 running / 155 errors / 62% coverage ] ****** [156 done /95 queued / 16 running / 155 errors / 62% coverage ] ****** [157 done /97 queued / 16 running / 156 errors / 62% coverage ] ****** [157 done /97 queued / 16 running / 156 errors / 62% coverage ] ****** [158 done /98 queued / 16 running / 157 errors / 62% coverage ] ****** [158 done /98 queued / 16 running / 157 errors / 62% coverage ] ****** [159 done /98 queued / 16 running / 158 errors / 62% coverage ] ****** [159 done /98 queued / 16 running / 158 errors / 62% coverage ] ****** [160 done /98 queued / 16 running / 159 errors / 62% coverage ] ****** [160 done /98 queued / 16 running / 159 errors / 62% coverage ] ****** [161 done /98 queued / 16 running / 160 errors / 62% coverage ] ****** [161 done /98 queued / 16 running / 160 errors / 62% coverage ] ****** [162 done /97 queued / 16 running / 161 errors / 62% coverage ] ****** [162 done /97 queued / 16 running / 161 errors / 62% coverage ] ****** [163 done /97 queued / 16 running / 162 errors / 62% coverage ] ****** [163 done /97 queued / 16 running / 162 errors / 62% coverage ] ****** [164 done /97 queued / 16 running / 163 errors / 62% coverage ] ****** [164 done /97 queued / 16 running / 163 errors / 62% coverage ] ****** [165 done /99 queued / 16 running / 164 errors / 62% coverage ] ****** [165 done /99 queued / 16 running / 164 errors / 62% coverage ] ****** [166 done /99 queued / 16 running / 165 errors / 62% coverage ] ****** [166 done /99 queued / 16 running / 165 errors / 62% coverage ] ****** [167 done /98 queued / 16 running / 166 errors / 62% coverage ] ****** [167 done /98 queued / 16 running / 166 errors / 62% coverage ] ****** [168 done /100 queued / 16 running / 167 errors / 62% coverage ] ****** [168 done /100 queued / 16 running / 167 errors / 62% coverage ] ****** [169 done /100 queued / 16 running / 168 errors / 62% coverage ] ****** [169 done /100 queued / 16 running / 168 errors / 62% coverage ] ****** [170 done /101 queued / 16 running / 169 errors / 62% coverage ] ****** [170 done /101 queued / 16 running / 169 errors / 62% coverage ] ****** [171 done /104 queued / 16 running / 170 errors / 62% coverage ] ****** [171 done /104 queued / 16 running / 170 errors / 62% coverage ] ****** [172 done /105 queued / 16 running / 171 errors / 62% coverage ] ****** [172 done /105 queued / 16 running / 171 errors / 62% coverage ] ****** [173 done /106 queued / 16 running / 172 errors / 62% coverage ] ****** [173 done /106 queued / 16 running / 172 errors / 62% coverage ] ****** [174 done /106 queued / 16 running / 173 errors / 62% coverage ] ****** [174 done /106 queued / 16 running / 173 errors / 62% coverage ] ****** [175 done /108 queued / 16 running / 174 errors / 62% coverage ] ****** [175 done /108 queued / 16 running / 174 errors / 62% coverage ] ****** [176 done /107 queued / 16 running / 175 errors / 62% coverage ] ****** [176 done /107 queued / 16 running / 175 errors / 62% coverage ] ****** [177 done /108 queued / 16 running / 176 errors / 62% coverage ] ****** [177 done /108 queued / 16 running / 176 errors / 62% coverage ] ****** [178 done /107 queued / 16 running / 177 errors / 62% coverage ] ****** [178 done /107 queued / 16 running / 177 errors / 62% coverage ] ****** [179 done /108 queued / 16 running / 178 errors / 62% coverage ] ****** [179 done /108 queued / 16 running / 178 errors / 62% coverage ] ****** [180 done /107 queued / 16 running / 179 errors / 62% coverage ] ****** [180 done /107 queued / 16 running / 179 errors / 62% coverage ] ****** [181 done /106 queued / 16 running / 180 errors / 62% coverage ] ****** [181 done /106 queued / 16 running / 180 errors / 62% coverage ] ****** [182 done /106 queued / 16 running / 181 errors / 62% coverage ] ****** [182 done /106 queued / 16 running / 181 errors / 62% coverage ] ****** [183 done /108 queued / 16 running / 182 errors / 62% coverage ] ****** [183 done /108 queued / 16 running / 182 errors / 62% coverage ] ****** [184 done /108 queued / 16 running / 183 errors / 62% coverage ] ****** [184 done /108 queued / 16 running / 183 errors / 62% coverage ] ****** [185 done /112 queued / 16 running / 184 errors / 62% coverage ] ****** [185 done /112 queued / 16 running / 184 errors / 62% coverage ] ****** [186 done /112 queued / 16 running / 185 errors / 62% coverage ] ****** [186 done /112 queued / 16 running / 185 errors / 62% coverage ] ****** [187 done /113 queued / 16 running / 186 errors / 62% coverage ] ****** [187 done /113 queued / 16 running / 186 errors / 62% coverage ] ****** [188 done /113 queued / 16 running / 187 errors / 62% coverage ] ****** [188 done /113 queued / 16 running / 187 errors / 62% coverage ] ****** [189 done /114 queued / 16 running / 188 errors / 62% coverage ] ****** [189 done /114 queued / 16 running / 188 errors / 62% coverage ] ****** [190 done /113 queued / 16 running / 189 errors / 62% coverage ] ****** [190 done /113 queued / 16 running / 189 errors / 62% coverage ] ****** [191 done /113 queued / 16 running / 190 errors / 62% coverage ] ****** [191 done /113 queued / 16 running / 190 errors / 62% coverage ] ****** [192 done /114 queued / 16 running / 191 errors / 62% coverage ] ****** [192 done /114 queued / 16 running / 191 errors / 62% coverage ] ****** [193 done /116 queued / 16 running / 192 errors / 62% coverage ] ****** [193 done /116 queued / 16 running / 192 errors / 62% coverage ] ****** [194 done /119 queued / 16 running / 193 errors / 62% coverage ] ****** [194 done /119 queued / 16 running / 193 errors / 62% coverage ] ****** [195 done /120 queued / 16 running / 194 errors / 62% coverage ] ****** [195 done /120 queued / 16 running / 194 errors / 62% coverage ] ****** [196 done /121 queued / 16 running / 195 errors / 62% coverage ] ****** [196 done /121 queued / 16 running / 195 errors / 62% coverage ] ****** [197 done /122 queued / 16 running / 196 errors / 62% coverage ] ****** [197 done /122 queued / 16 running / 196 errors / 62% coverage ] ****** [198 done /123 queued / 16 running / 197 errors / 62% coverage ] ****** [198 done /123 queued / 16 running / 197 errors / 62% coverage ] ****** [199 done /123 queued / 16 running / 198 errors / 62% coverage ] ****** [199 done /123 queued / 16 running / 198 errors / 62% coverage ] ****** [200 done /123 queued / 16 running / 199 errors / 62% coverage ] ****** [200 done /123 queued / 16 running / 199 errors / 62% coverage ] ****** [201 done /124 queued / 16 running / 200 errors / 62% coverage ] ****** [201 done /124 queued / 16 running / 200 errors / 62% coverage ] ****** [202 done /123 queued / 16 running / 201 errors / 62% coverage ] ****** [202 done /123 queued / 16 running / 201 errors / 62% coverage ] ****** [203 done /125 queued / 16 running / 202 errors / 62% coverage ] ****** [203 done /125 queued / 16 running / 202 errors / 62% coverage ] ****** [204 done /125 queued / 16 running / 203 errors / 62% coverage ] ****** [204 done /125 queued / 16 running / 203 errors / 62% coverage ] ****** [205 done /126 queued / 16 running / 204 errors / 62% coverage ] ****** [205 done /126 queued / 16 running / 204 errors / 62% coverage ] ****** [206 done /126 queued / 16 running / 205 errors / 62% coverage ] ****** [206 done /126 queued / 16 running / 205 errors / 62% coverage ] ****** [207 done /126 queued / 16 running / 206 errors / 62% coverage ] ****** [207 done /126 queued / 16 running / 206 errors / 62% coverage ] ****** [208 done /126 queued / 16 running / 207 errors / 62% coverage ] ****** [208 done /126 queued / 16 running / 207 errors / 62% coverage ] ****** [209 done /128 queued / 16 running / 208 errors / 62% coverage ] ****** [209 done /128 queued / 16 running / 208 errors / 62% coverage ] ****** [210 done /129 queued / 16 running / 209 errors / 62% coverage ] ****** [210 done /129 queued / 16 running / 209 errors / 62% coverage ] ****** [211 done /130 queued / 16 running / 210 errors / 62% coverage ] ****** [211 done /130 queued / 16 running / 210 errors / 62% coverage ] ****** [212 done /129 queued / 16 running / 211 errors / 62% coverage ] ****** [212 done /129 queued / 16 running / 211 errors / 62% coverage ] ****** [213 done /130 queued / 16 running / 212 errors / 62% coverage ] ****** [213 done /130 queued / 16 running / 212 errors / 62% coverage ] ****** [214 done /131 queued / 16 running / 213 errors / 62% coverage ] ****** [214 done /131 queued / 16 running / 213 errors / 62% coverage ] ****** [215 done /134 queued / 16 running / 214 errors / 62% coverage ] ****** [215 done /134 queued / 16 running / 214 errors / 62% coverage ] ****** [216 done /136 queued / 16 running / 215 errors / 62% coverage ] ****** [216 done /136 queued / 16 running / 215 errors / 62% coverage ] ****** [217 done /138 queued / 16 running / 216 errors / 62% coverage ] ****** [217 done /138 queued / 16 running / 216 errors / 62% coverage ] ****** [218 done /137 queued / 16 running / 217 errors / 62% coverage ] ****** [218 done /137 queued / 16 running / 217 errors / 62% coverage ] ****** [219 done /140 queued / 16 running / 218 errors / 62% coverage ] ****** [219 done /140 queued / 16 running / 218 errors / 62% coverage ] ****** [220 done /142 queued / 16 running / 219 errors / 62% coverage ] ****** [220 done /142 queued / 16 running / 219 errors / 62% coverage ] ****** [221 done /145 queued / 16 running / 220 errors / 62% coverage ] ****** [221 done /145 queued / 16 running / 220 errors / 62% coverage ] ****** [222 done /148 queued / 16 running / 221 errors / 62% coverage ] ****** [222 done /148 queued / 16 running / 221 errors / 62% coverage ] ****** [223 done /152 queued / 16 running / 222 errors / 62% coverage ] ****** [223 done /152 queued / 16 running / 222 errors / 62% coverage ] ****** [224 done /154 queued / 16 running / 223 errors / 62% coverage ] ****** [224 done /154 queued / 16 running / 223 errors / 62% coverage ] ****** [225 done /155 queued / 16 running / 224 errors / 62% coverage ] ****** [225 done /155 queued / 16 running / 224 errors / 62% coverage ] ****** [226 done /155 queued / 16 running / 225 errors / 62% coverage ] ****** [226 done /155 queued / 16 running / 225 errors / 62% coverage ] ****** [227 done /157 queued / 16 running / 226 errors / 62% coverage ] ****** [227 done /157 queued / 16 running / 226 errors / 62% coverage ] ****** [228 done /156 queued / 16 running / 227 errors / 62% coverage ] ****** [228 done /156 queued / 16 running / 227 errors / 62% coverage ] ****** [229 done /159 queued / 16 running / 228 errors / 62% coverage ] ****** [229 done /159 queued / 16 running / 228 errors / 62% coverage ] ****** [230 done /160 queued / 16 running / 229 errors / 62% coverage ] ****** [230 done /160 queued / 16 running / 229 errors / 62% coverage ] ****** [231 done /161 queued / 16 running / 230 errors / 62% coverage ] ****** [231 done /161 queued / 16 running / 230 errors / 62% coverage ] ****** [232 done /162 queued / 16 running / 231 errors / 62% coverage ] ****** [232 done /162 queued / 16 running / 231 errors / 62% coverage ] ****** [233 done /163 queued / 16 running / 232 errors / 62% coverage ] ****** [233 done /163 queued / 16 running / 232 errors / 62% coverage ] ****** [234 done /163 queued / 16 running / 233 errors / 62% coverage ] ****** [234 done /163 queued / 16 running / 233 errors / 62% coverage ] ****** [235 done /165 queued / 16 running / 234 errors / 62% coverage ] ****** [235 done /165 queued / 16 running / 234 errors / 62% coverage ] ****** [236 done /165 queued / 16 running / 235 errors / 62% coverage ] ****** [236 done /165 queued / 16 running / 235 errors / 62% coverage ] ****** [237 done /166 queued / 16 running / 236 errors / 62% coverage ] ****** [237 done /166 queued / 16 running / 236 errors / 62% coverage ] ****** [238 done /165 queued / 16 running / 237 errors / 62% coverage ] ****** [238 done /165 queued / 16 running / 237 errors / 62% coverage ] ****** [239 done /165 queued / 16 running / 238 errors / 62% coverage ] ****** [239 done /165 queued / 16 running / 238 errors / 62% coverage ] ****** [240 done /166 queued / 16 running / 239 errors / 62% coverage ] ****** [240 done /166 queued / 16 running / 239 errors / 62% coverage ] ****** [241 done /166 queued / 16 running / 240 errors / 62% coverage ] ****** [241 done /166 queued / 16 running / 240 errors / 62% coverage ] ****** [242 done /166 queued / 16 running / 241 errors / 62% coverage ] ****** [242 done /166 queued / 16 running / 241 errors / 62% coverage ] ****** [243 done /166 queued / 16 running / 242 errors / 62% coverage ] ****** [243 done /166 queued / 16 running / 242 errors / 62% coverage ] ****** [244 done /167 queued / 16 running / 243 errors / 62% coverage ] ****** [244 done /167 queued / 16 running / 243 errors / 62% coverage ] ****** [245 done /168 queued / 16 running / 244 errors / 62% coverage ] ****** [245 done /168 queued / 16 running / 244 errors / 62% coverage ] ****** [246 done /167 queued / 16 running / 245 errors / 62% coverage ] ****** [246 done /167 queued / 16 running / 245 errors / 62% coverage ] ****** [247 done /166 queued / 16 running / 246 errors / 62% coverage ] ****** [247 done /166 queued / 16 running / 246 errors / 62% coverage ] ****** [248 done /165 queued / 16 running / 247 errors / 62% coverage ] ****** [248 done /165 queued / 16 running / 247 errors / 62% coverage ] ****** [249 done /167 queued / 16 running / 248 errors / 62% coverage ] ****** [249 done /167 queued / 16 running / 248 errors / 62% coverage ] ****** [250 done /166 queued / 16 running / 249 errors / 62% coverage ] ****** [250 done /166 queued / 16 running / 249 errors / 62% coverage ] ****** [251 done /166 queued / 16 running / 250 errors / 62% coverage ] ****** [251 done /166 queued / 16 running / 250 errors / 62% coverage ] ****** [252 done /165 queued / 16 running / 251 errors / 62% coverage ] ****** [252 done /165 queued / 16 running / 251 errors / 62% coverage ] ****** [253 done /166 queued / 16 running / 252 errors / 62% coverage ] ****** [253 done /166 queued / 16 running / 252 errors / 62% coverage ] ****** [254 done /166 queued / 16 running / 253 errors / 62% coverage ] ****** [254 done /166 queued / 16 running / 253 errors / 62% coverage ] ****** [255 done /169 queued / 16 running / 254 errors / 62% coverage ] ****** [255 done /169 queued / 16 running / 254 errors / 62% coverage ] ****** [256 done /168 queued / 16 running / 255 errors / 62% coverage ] ****** [256 done /168 queued / 16 running / 255 errors / 62% coverage ] ****** [257 done /169 queued / 16 running / 256 errors / 62% coverage ] ****** [257 done /169 queued / 16 running / 256 errors / 62% coverage ] ****** [258 done /170 queued / 16 running / 257 errors / 62% coverage ] ****** [258 done /170 queued / 16 running / 257 errors / 62% coverage ] ****** [259 done /171 queued / 16 running / 258 errors / 62% coverage ] ****** [259 done /171 queued / 16 running / 258 errors / 62% coverage ] ****** [260 done /173 queued / 16 running / 259 errors / 62% coverage ] ****** [260 done /173 queued / 16 running / 259 errors / 62% coverage ] ****** [261 done /174 queued / 16 running / 260 errors / 62% coverage ] ****** [261 done /174 queued / 16 running / 260 errors / 62% coverage ] ****** [262 done /173 queued / 16 running / 261 errors / 62% coverage ] ****** [262 done /173 queued / 16 running / 261 errors / 62% coverage ] ****** [263 done /174 queued / 16 running / 262 errors / 62% coverage ] ****** [263 done /174 queued / 16 running / 262 errors / 62% coverage ] ****** [264 done /175 queued / 16 running / 263 errors / 62% coverage ] ****** [264 done /175 queued / 16 running / 263 errors / 62% coverage ] ****** [265 done /175 queued / 16 running / 264 errors / 62% coverage ] ****** [265 done /175 queued / 16 running / 264 errors / 62% coverage ] ****** [266 done /176 queued / 16 running / 265 errors / 62% coverage ] ****** [266 done /176 queued / 16 running / 265 errors / 62% coverage ] ****** [267 done /176 queued / 16 running / 266 errors / 62% coverage ] ****** [267 done /176 queued / 16 running / 266 errors / 62% coverage ] ****** [268 done /177 queued / 16 running / 267 errors / 62% coverage ] ****** [268 done /177 queued / 16 running / 267 errors / 62% coverage ] ****** [269 done /178 queued / 16 running / 268 errors / 62% coverage ] ****** [269 done /178 queued / 16 running / 268 errors / 62% coverage ] ****** [270 done /179 queued / 16 running / 269 errors / 62% coverage ] ****** [270 done /179 queued / 16 running / 269 errors / 62% coverage ] ****** [271 done /179 queued / 16 running / 270 errors / 62% coverage ] ****** [271 done /179 queued / 16 running / 270 errors / 62% coverage ] ****** [272 done /180 queued / 16 running / 271 errors / 62% coverage ] ****** [272 done /180 queued / 16 running / 271 errors / 62% coverage ] ****** [273 done /179 queued / 16 running / 272 errors / 62% coverage ] ****** [273 done /179 queued / 16 running / 272 errors / 62% coverage ] ****** [274 done /182 queued / 16 running / 273 errors / 62% coverage ] ****** [274 done /182 queued / 16 running / 273 errors / 62% coverage ] ****** [275 done /183 queued / 16 running / 274 errors / 62% coverage ] ****** [275 done /183 queued / 16 running / 274 errors / 62% coverage ] ****** [276 done /186 queued / 16 running / 275 errors / 62% coverage ] ****** [276 done /186 queued / 16 running / 275 errors / 62% coverage ] ****** [277 done /187 queued / 16 running / 276 errors / 62% coverage ] ****** [277 done /187 queued / 16 running / 276 errors / 62% coverage ] ****** [278 done /187 queued / 16 running / 277 errors / 62% coverage ] ****** [278 done /187 queued / 16 running / 277 errors / 62% coverage ] ****** [279 done /190 queued / 16 running / 278 errors / 62% coverage ] ****** [279 done /190 queued / 16 running / 278 errors / 62% coverage ] ****** [280 done /194 queued / 16 running / 279 errors / 62% coverage ] ****** [280 done /194 queued / 16 running / 279 errors / 62% coverage ] ****** [281 done /196 queued / 16 running / 280 errors / 62% coverage ] ****** [281 done /196 queued / 16 running / 280 errors / 62% coverage ] ****** [282 done /195 queued / 16 running / 281 errors / 62% coverage ] ****** [282 done /195 queued / 16 running / 281 errors / 62% coverage ] ****** [283 done /195 queued / 16 running / 282 errors / 62% coverage ] ****** [283 done /195 queued / 16 running / 282 errors / 62% coverage ] ****** [284 done /196 queued / 16 running / 283 errors / 62% coverage ] ****** [284 done /196 queued / 16 running / 283 errors / 62% coverage ] ****** [285 done /197 queued / 16 running / 284 errors / 62% coverage ] ****** [285 done /197 queued / 16 running / 284 errors / 62% coverage ] ****** [286 done /199 queued / 16 running / 285 errors / 62% coverage ] ****** [286 done /199 queued / 16 running / 285 errors / 62% coverage ] ****** [287 done /202 queued / 16 running / 286 errors / 62% coverage ] ****** [287 done /202 queued / 16 running / 286 errors / 62% coverage ] ****** [288 done /201 queued / 16 running / 287 errors / 62% coverage ] ****** [288 done /201 queued / 16 running / 287 errors / 62% coverage ] ****** [289 done /202 queued / 16 running / 288 errors / 62% coverage ] ****** [289 done /202 queued / 16 running / 288 errors / 62% coverage ] ****** [290 done /203 queued / 16 running / 289 errors / 62% coverage ] ****** [290 done /203 queued / 16 running / 289 errors / 62% coverage ] ****** [291 done /205 queued / 16 running / 290 errors / 62% coverage ] ****** [291 done /205 queued / 16 running / 290 errors / 62% coverage ] ****** [292 done /204 queued / 16 running / 291 errors / 62% coverage ] ****** [292 done /204 queued / 16 running / 291 errors / 62% coverage ] ****** [293 done /204 queued / 16 running / 292 errors / 62% coverage ] ****** [293 done /204 queued / 16 running / 292 errors / 62% coverage ] ****** [294 done /208 queued / 16 running / 293 errors / 62% coverage ] ****** [294 done /208 queued / 16 running / 293 errors / 62% coverage ] ****** [295 done /208 queued / 16 running / 294 errors / 62% coverage ] ****** [295 done /208 queued / 16 running / 294 errors / 62% coverage ] ****** [296 done /207 queued / 16 running / 295 errors / 62% coverage ] ****** [296 done /207 queued / 16 running / 295 errors / 62% coverage ] ****** [297 done /208 queued / 16 running / 296 errors / 62% coverage ] ****** [297 done /208 queued / 16 running / 296 errors / 62% coverage ] ****** [298 done /209 queued / 16 running / 297 errors / 62% coverage ] ****** [298 done /209 queued / 16 running / 297 errors / 62% coverage ] ****** [299 done /211 queued / 16 running / 298 errors / 62% coverage ] ****** [299 done /211 queued / 16 running / 298 errors / 62% coverage ] ****** [300 done /211 queued / 16 running / 299 errors / 62% coverage ] ****** [300 done /211 queued / 16 running / 299 errors / 62% coverage ] ****** [301 done /213 queued / 16 running / 300 errors / 62% coverage ] ****** [301 done /213 queued / 16 running / 300 errors / 62% coverage ] ****** [302 done /213 queued / 16 running / 301 errors / 62% coverage ] ****** [302 done /213 queued / 16 running / 301 errors / 62% coverage ] ****** [303 done /215 queued / 16 running / 302 errors / 62% coverage ] ****** [303 done /215 queued / 16 running / 302 errors / 62% coverage ] ****** [304 done /214 queued / 16 running / 303 errors / 62% coverage ] ****** [304 done /214 queued / 16 running / 303 errors / 62% coverage ] ****** [305 done /213 queued / 16 running / 304 errors / 62% coverage ] ****** [305 done /213 queued / 16 running / 304 errors / 62% coverage ] ****** [306 done /214 queued / 16 running / 305 errors / 62% coverage ] ****** [306 done /214 queued / 16 running / 305 errors / 62% coverage ] ****** [307 done /214 queued / 16 running / 306 errors / 62% coverage ] ****** [307 done /214 queued / 16 running / 306 errors / 62% coverage ] ****** [308 done /213 queued / 16 running / 307 errors / 62% coverage ] ****** [308 done /213 queued / 16 running / 307 errors / 62% coverage ] ****** [309 done /214 queued / 16 running / 308 errors / 62% coverage ] ****** [309 done /214 queued / 16 running / 308 errors / 62% coverage ] ****** [310 done /214 queued / 16 running / 309 errors / 62% coverage ] ****** [310 done /214 queued / 16 running / 309 errors / 62% coverage ] ****** [311 done /215 queued / 16 running / 310 errors / 62% coverage ] ****** [311 done /215 queued / 16 running / 310 errors / 62% coverage ] ****** [312 done /215 queued / 16 running / 311 errors / 62% coverage ] ****** [312 done /215 queued / 16 running / 311 errors / 62% coverage ] ****** [313 done /215 queued / 16 running / 312 errors / 62% coverage ] ****** [313 done /215 queued / 16 running / 312 errors / 62% coverage ] ****** [314 done /215 queued / 16 running / 313 errors / 62% coverage ] ****** [314 done /215 queued / 16 running / 313 errors / 62% coverage ] ****** [315 done /216 queued / 16 running / 314 errors / 62% coverage ] ****** [315 done /216 queued / 16 running / 314 errors / 62% coverage ] ****** [316 done /216 queued / 16 running / 315 errors / 62% coverage ] ****** [316 done /216 queued / 16 running / 315 errors / 62% coverage ] ****** [317 done /218 queued / 16 running / 316 errors / 62% coverage ] ****** [317 done /218 queued / 16 running / 316 errors / 62% coverage ] ****** [318 done /220 queued / 16 running / 317 errors / 62% coverage ] ****** [318 done /220 queued / 16 running / 317 errors / 62% coverage ] ****** [319 done /222 queued / 16 running / 318 errors / 62% coverage ] ****** [319 done /222 queued / 16 running / 318 errors / 62% coverage ] ****** [320 done /224 queued / 16 running / 319 errors / 62% coverage ] ****** [320 done /224 queued / 16 running / 319 errors / 62% coverage ] ****** [321 done /225 queued / 16 running / 320 errors / 62% coverage ] ****** [321 done /225 queued / 16 running / 320 errors / 62% coverage ] ****** [322 done /225 queued / 16 running / 321 errors / 62% coverage ] ****** [322 done /225 queued / 16 running / 321 errors / 62% coverage ] ****** [323 done /225 queued / 16 running / 322 errors / 62% coverage ] ****** [323 done /225 queued / 16 running / 322 errors / 62% coverage ] ****** [324 done /229 queued / 16 running / 323 errors / 62% coverage ] ****** [324 done /229 queued / 16 running / 323 errors / 62% coverage ] ****** [325 done /230 queued / 16 running / 324 errors / 62% coverage ] ****** [325 done /230 queued / 16 running / 324 errors / 62% coverage ] ****** [326 done /232 queued / 16 running / 325 errors / 62% coverage ] ****** [326 done /232 queued / 16 running / 325 errors / 62% coverage ] ****** [327 done /231 queued / 16 running / 326 errors / 62% coverage ] ****** [327 done /231 queued / 16 running / 326 errors / 62% coverage ] ****** [328 done /232 queued / 16 running / 327 errors / 62% coverage ] ****** [328 done /232 queued / 16 running / 327 errors / 62% coverage ] ****** [329 done /231 queued / 16 running / 328 errors / 62% coverage ] ****** [329 done /231 queued / 16 running / 328 errors / 62% coverage ] ****** [330 done /231 queued / 16 running / 329 errors / 62% coverage ] ****** [330 done /231 queued / 16 running / 329 errors / 62% coverage ] ****** [331 done /232 queued / 16 running / 330 errors / 62% coverage ] ****** [331 done /232 queued / 16 running / 330 errors / 62% coverage ] ****** [332 done /235 queued / 16 running / 331 errors / 62% coverage ] ****** [332 done /235 queued / 16 running / 331 errors / 62% coverage ] ****** [333 done /236 queued / 16 running / 332 errors / 62% coverage ] ****** [333 done /236 queued / 16 running / 332 errors / 62% coverage ] ****** [334 done /238 queued / 16 running / 333 errors / 62% coverage ] ****** [334 done /238 queued / 16 running / 333 errors / 62% coverage ] ****** [335 done /237 queued / 16 running / 334 errors / 62% coverage ] ****** [335 done /237 queued / 16 running / 334 errors / 62% coverage ] ****** [336 done /238 queued / 16 running / 335 errors / 62% coverage ] ****** [336 done /238 queued / 16 running / 335 errors / 62% coverage ] ****** [337 done /239 queued / 16 running / 336 errors / 62% coverage ] ****** [337 done /239 queued / 16 running / 336 errors / 62% coverage ] ****** [338 done /242 queued / 16 running / 337 errors / 62% coverage ] ****** [338 done /242 queued / 16 running / 337 errors / 62% coverage ] ****** [339 done /243 queued / 16 running / 338 errors / 62% coverage ] ****** [339 done /243 queued / 16 running / 338 errors / 62% coverage ] ****** [340 done /243 queued / 16 running / 339 errors / 62% coverage ] ****** [340 done /243 queued / 16 running / 339 errors / 62% coverage ] ****** [341 done /242 queued / 16 running / 340 errors / 62% coverage ] ****** [341 done /242 queued / 16 running / 340 errors / 62% coverage ] ****** [342 done /241 queued / 16 running / 341 errors / 62% coverage ] ****** [342 done /241 queued / 16 running / 341 errors / 62% coverage ] ****** [343 done /242 queued / 16 running / 342 errors / 62% coverage ] ****** [343 done /242 queued / 16 running / 342 errors / 62% coverage ] ****** [344 done /241 queued / 16 running / 343 errors / 62% coverage ] ****** [344 done /241 queued / 16 running / 343 errors / 62% coverage ] ****** [345 done /240 queued / 16 running / 344 errors / 62% coverage ] ****** [345 done /240 queued / 16 running / 344 errors / 62% coverage ] ****** [346 done /239 queued / 16 running / 345 errors / 62% coverage ] ****** [346 done /239 queued / 16 running / 345 errors / 62% coverage ] ****** [347 done /240 queued / 16 running / 346 errors / 62% coverage ] ****** [347 done /240 queued / 16 running / 346 errors / 62% coverage ] ****** [348 done /240 queued / 16 running / 347 errors / 62% coverage ] ****** [348 done /240 queued / 16 running / 347 errors / 62% coverage ] ****** [349 done /240 queued / 16 running / 348 errors / 62% coverage ] ****** [349 done /240 queued / 16 running / 348 errors / 62% coverage ] ****** [350 done /240 queued / 16 running / 349 errors / 62% coverage ] ****** [350 done /240 queued / 16 running / 349 errors / 62% coverage ] ****** [351 done /239 queued / 16 running / 350 errors / 62% coverage ] ****** [351 done /239 queued / 16 running / 350 errors / 62% coverage ] ****** [352 done /240 queued / 16 running / 351 errors / 62% coverage ] ****** [352 done /240 queued / 16 running / 351 errors / 62% coverage ] ****** [353 done /243 queued / 16 running / 352 errors / 62% coverage ] ****** [353 done /243 queued / 16 running / 352 errors / 62% coverage ] ****** [354 done /242 queued / 16 running / 353 errors / 62% coverage ] ****** [354 done /242 queued / 16 running / 353 errors / 62% coverage ] ****** [355 done /241 queued / 16 running / 354 errors / 62% coverage ] ****** [355 done /241 queued / 16 running / 354 errors / 62% coverage ] ****** [356 done /243 queued / 16 running / 355 errors / 62% coverage ] ****** [356 done /243 queued / 16 running / 355 errors / 62% coverage ] ****** [357 done /243 queued / 16 running / 356 errors / 62% coverage ] ****** [357 done /243 queued / 16 running / 356 errors / 62% coverage ] ****** [358 done /242 queued / 16 running / 357 errors / 62% coverage ] ****** [358 done /242 queued / 16 running / 357 errors / 62% coverage ] ****** [359 done /244 queued / 16 running / 358 errors / 62% coverage ] ****** [359 done /244 queued / 16 running / 358 errors / 62% coverage ] ****** [360 done /245 queued / 16 running / 359 errors / 62% coverage ] ****** [360 done /245 queued / 16 running / 359 errors / 62% coverage ] ****** [361 done /247 queued / 16 running / 360 errors / 62% coverage ] ****** [361 done /247 queued / 16 running / 360 errors / 62% coverage ] ****** [362 done /249 queued / 16 running / 361 errors / 62% coverage ] ****** [362 done /249 queued / 16 running / 361 errors / 62% coverage ] ****** [363 done /249 queued / 16 running / 362 errors / 62% coverage ] ****** [363 done /249 queued / 16 running / 362 errors / 62% coverage ] ****** [364 done /253 queued / 16 running / 363 errors / 62% coverage ] ****** [364 done /253 queued / 16 running / 363 errors / 62% coverage ] ****** [365 done /254 queued / 16 running / 364 errors / 62% coverage ] ****** [365 done /254 queued / 16 running / 364 errors / 62% coverage ] ****** [366 done /255 queued / 16 running / 365 errors / 62% coverage ] ****** [366 done /255 queued / 16 running / 365 errors / 62% coverage ] ****** [367 done /257 queued / 16 running / 366 errors / 62% coverage ] ****** [367 done /257 queued / 16 running / 366 errors / 62% coverage ] ****** [368 done /256 queued / 16 running / 367 errors / 62% coverage ] ****** [368 done /256 queued / 16 running / 367 errors / 62% coverage ] ****** [369 done /258 queued / 16 running / 368 errors / 62% coverage ] ****** [369 done /258 queued / 16 running / 368 errors / 62% coverage ] ****** [370 done /258 queued / 16 running / 369 errors / 62% coverage ] ****** [370 done /258 queued / 16 running / 369 errors / 62% coverage ] ****** [371 done /258 queued / 16 running / 370 errors / 62% coverage ] ****** [371 done /258 queued / 16 running / 370 errors / 62% coverage ] ****** [372 done /261 queued / 16 running / 371 errors / 62% coverage ] ****** [372 done /261 queued / 16 running / 371 errors / 62% coverage ] ****** [373 done /262 queued / 16 running / 372 errors / 62% coverage ] ****** [373 done /262 queued / 16 running / 372 errors / 62% coverage ] ****** [374 done /264 queued / 16 running / 373 errors / 62% coverage ] ****** [374 done /264 queued / 16 running / 373 errors / 62% coverage ] ****** [375 done /265 queued / 16 running / 374 errors / 62% coverage ] ****** [375 done /265 queued / 16 running / 374 errors / 62% coverage ] ****** [376 done /266 queued / 16 running / 375 errors / 62% coverage ] ****** [376 done /266 queued / 16 running / 375 errors / 62% coverage ] ****** [377 done /265 queued / 16 running / 376 errors / 62% coverage ] ****** [377 done /265 queued / 16 running / 376 errors / 62% coverage ] ****** [378 done /266 queued / 16 running / 377 errors / 62% coverage ] ****** [378 done /266 queued / 16 running / 377 errors / 62% coverage ] ****** [379 done /268 queued / 16 running / 378 errors / 62% coverage ] ****** [379 done /268 queued / 16 running / 378 errors / 62% coverage ] ****** [380 done /267 queued / 16 running / 379 errors / 62% coverage ] ****** [380 done /267 queued / 16 running / 379 errors / 62% coverage ] ****** [381 done /268 queued / 16 running / 380 errors / 62% coverage ] ****** [381 done /268 queued / 16 running / 380 errors / 62% coverage ] ****** [382 done /269 queued / 16 running / 381 errors / 62% coverage ] ****** [382 done /269 queued / 16 running / 381 errors / 62% coverage ] ****** [383 done /269 queued / 16 running / 382 errors / 62% coverage ] ****** [383 done /269 queued / 16 running / 382 errors / 62% coverage ] ****** [384 done /269 queued / 16 running / 383 errors / 62% coverage ] ****** [384 done /269 queued / 16 running / 383 errors / 62% coverage ] ****** [385 done /269 queued / 16 running / 384 errors / 62% coverage ] ****** [385 done /269 queued / 16 running / 384 errors / 62% coverage ] ****** [386 done /270 queued / 16 running / 385 errors / 62% coverage ] ****** [386 done /270 queued / 16 running / 385 errors / 62% coverage ] ****** [387 done /272 queued / 16 running / 386 errors / 62% coverage ] ****** [387 done /272 queued / 16 running / 386 errors / 62% coverage ] ****** [388 done /271 queued / 16 running / 387 errors / 62% coverage ] ****** [388 done /271 queued / 16 running / 387 errors / 62% coverage ] ****** [389 done /271 queued / 16 running / 388 errors / 62% coverage ] ****** [389 done /271 queued / 16 running / 388 errors / 62% coverage ] ****** [390 done /271 queued / 16 running / 389 errors / 62% coverage ] ****** [390 done /271 queued / 16 running / 389 errors / 62% coverage ] ****** [391 done /272 queued / 16 running / 390 errors / 62% coverage ] ****** [391 done /272 queued / 16 running / 390 errors / 62% coverage ] ****** [392 done /273 queued / 16 running / 391 errors / 62% coverage ] ****** [392 done /273 queued / 16 running / 391 errors / 62% coverage ] ****** [393 done /273 queued / 16 running / 392 errors / 62% coverage ] ****** [393 done /273 queued / 16 running / 392 errors / 62% coverage ] ****** [394 done /274 queued / 16 running / 393 errors / 62% coverage ] ****** [394 done /274 queued / 16 running / 393 errors / 62% coverage ] ****** [395 done /274 queued / 16 running / 394 errors / 62% coverage ] ****** [395 done /274 queued / 16 running / 394 errors / 62% coverage ] ****** [396 done /275 queued / 16 running / 395 errors / 62% coverage ] ****** [396 done /275 queued / 16 running / 395 errors / 62% coverage ] ****** [397 done /274 queued / 16 running / 396 errors / 62% coverage ] ****** [397 done /274 queued / 16 running / 396 errors / 62% coverage ] ****** [398 done /278 queued / 16 running / 397 errors / 62% coverage ] ****** [398 done /278 queued / 16 running / 397 errors / 62% coverage ] ****** [399 done /278 queued / 16 running / 398 errors / 62% coverage ] ****** [399 done /278 queued / 16 running / 398 errors / 62% coverage ] ****** [400 done /279 queued / 16 running / 399 errors / 62% coverage ] ****** [400 done /279 queued / 16 running / 399 errors / 62% coverage ] ****** [401 done /282 queued / 16 running / 400 errors / 62% coverage ] ****** [401 done /282 queued / 16 running / 400 errors / 62% coverage ] ****** [402 done /284 queued / 16 running / 401 errors / 62% coverage ] ****** [402 done /284 queued / 16 running / 401 errors / 62% coverage ] ****** [403 done /286 queued / 16 running / 402 errors / 62% coverage ] ****** [403 done /286 queued / 16 running / 402 errors / 62% coverage ] ****** [404 done /288 queued / 16 running / 403 errors / 62% coverage ] ****** [404 done /288 queued / 16 running / 403 errors / 62% coverage ] ****** [405 done /291 queued / 16 running / 404 errors / 62% coverage ] ****** [405 done /291 queued / 16 running / 404 errors / 62% coverage ] ****** [406 done /291 queued / 16 running / 405 errors / 62% coverage ] ****** [406 done /291 queued / 16 running / 405 errors / 62% coverage ] ****** [407 done /291 queued / 16 running / 406 errors / 62% coverage ] ****** [407 done /291 queued / 16 running / 406 errors / 62% coverage ] ****** [408 done /292 queued / 16 running / 407 errors / 62% coverage ] ****** [408 done /292 queued / 16 running / 407 errors / 62% coverage ] ****** [409 done /292 queued / 16 running / 408 errors / 62% coverage ] ****** [409 done /292 queued / 16 running / 408 errors / 62% coverage ] ****** [410 done /295 queued / 16 running / 409 errors / 62% coverage ] ****** [410 done /295 queued / 16 running / 409 errors / 62% coverage ] ****** [411 done /295 queued / 16 running / 410 errors / 62% coverage ] ****** [411 done /295 queued / 16 running / 410 errors / 62% coverage ] ****** [412 done /296 queued / 16 running / 411 errors / 62% coverage ] ****** [412 done /296 queued / 16 running / 411 errors / 62% coverage ] ****** [413 done /298 queued / 16 running / 412 errors / 62% coverage ] ****** [413 done /298 queued / 16 running / 412 errors / 62% coverage ] ****** [414 done /298 queued / 16 running / 413 errors / 62% coverage ] ****** [414 done /298 queued / 16 running / 413 errors / 62% coverage ] ****** [415 done /299 queued / 16 running / 414 errors / 62% coverage ] ****** [415 done /299 queued / 16 running / 414 errors / 62% coverage ] ****** [416 done /298 queued / 16 running / 415 errors / 62% coverage ] ****** [416 done /298 queued / 16 running / 415 errors / 62% coverage ] ****** [417 done /297 queued / 16 running / 416 errors / 62% coverage ] ****** [417 done /297 queued / 16 running / 416 errors / 62% coverage ] ****** [418 done /296 queued / 16 running / 417 errors / 62% coverage ] ****** [418 done /296 queued / 16 running / 417 errors / 62% coverage ] ****** [419 done /297 queued / 16 running / 418 errors / 62% coverage ] ****** [419 done /297 queued / 16 running / 418 errors / 62% coverage ] ****** [420 done /297 queued / 16 running / 419 errors / 62% coverage ] ****** [420 done /297 queued / 16 running / 419 errors / 62% coverage ] ****** [421 done /297 queued / 16 running / 420 errors / 62% coverage ] ****** [421 done /297 queued / 16 running / 420 errors / 62% coverage ] ****** [422 done /296 queued / 16 running / 421 errors / 62% coverage ] ****** [422 done /296 queued / 16 running / 421 errors / 62% coverage ] ****** [423 done /296 queued / 16 running / 422 errors / 62% coverage ] ****** [423 done /296 queued / 16 running / 422 errors / 62% coverage ] ****** [424 done /296 queued / 16 running / 423 errors / 62% coverage ] ****** [424 done /296 queued / 16 running / 423 errors / 62% coverage ] ****** [425 done /295 queued / 16 running / 424 errors / 62% coverage ] ****** [425 done /295 queued / 16 running / 424 errors / 62% coverage ] ****** [426 done /295 queued / 16 running / 425 errors / 62% coverage ] ****** [426 done /295 queued / 16 running / 425 errors / 62% coverage ] ****** [427 done /294 queued / 16 running / 426 errors / 62% coverage ] ****** [427 done /294 queued / 16 running / 426 errors / 62% coverage ] ****** [428 done /295 queued / 16 running / 427 errors / 62% coverage ] ****** [428 done /295 queued / 16 running / 427 errors / 62% coverage ] ****** [429 done /297 queued / 16 running / 428 errors / 62% coverage ] ****** [429 done /297 queued / 16 running / 428 errors / 62% coverage ] ****** [430 done /297 queued / 16 running / 429 errors / 62% coverage ] ****** [430 done /297 queued / 16 running / 429 errors / 62% coverage ] ****** [431 done /296 queued / 16 running / 430 errors / 62% coverage ] ****** [431 done /296 queued / 16 running / 430 errors / 62% coverage ] ****** [432 done /295 queued / 16 running / 431 errors / 62% coverage ] ****** [432 done /295 queued / 16 running / 431 errors / 62% coverage ] ****** [433 done /294 queued / 16 running / 432 errors / 62% coverage ] ****** [433 done /294 queued / 16 running / 432 errors / 62% coverage ] ****** [434 done /296 queued / 16 running / 433 errors / 62% coverage ] ****** [434 done /296 queued / 16 running / 433 errors / 62% coverage ] ****** [435 done /295 queued / 16 running / 434 errors / 62% coverage ] ****** [435 done /295 queued / 16 running / 434 errors / 62% coverage ] ****** [436 done /295 queued / 16 running / 435 errors / 62% coverage ] ****** [436 done /295 queued / 16 running / 435 errors / 62% coverage ] ****** [437 done /296 queued / 16 running / 436 errors / 62% coverage ] ****** [437 done /296 queued / 16 running / 436 errors / 62% coverage ] ****** [438 done /296 queued / 16 running / 437 errors / 62% coverage ] ****** [438 done /296 queued / 16 running / 437 errors / 62% coverage ] ****** [439 done /295 queued / 16 running / 438 errors / 62% coverage ] ****** [439 done /295 queued / 16 running / 438 errors / 62% coverage ] ****** [440 done /295 queued / 16 running / 439 errors / 62% coverage ] ****** [440 done /295 queued / 16 running / 439 errors / 62% coverage ] ****** [441 done /296 queued / 16 running / 440 errors / 62% coverage ] ****** [441 done /296 queued / 16 running / 440 errors / 62% coverage ] ****** [442 done /299 queued / 16 running / 441 errors / 62% coverage ] ****** [442 done /299 queued / 16 running / 441 errors / 62% coverage ] ****** [443 done /300 queued / 16 running / 442 errors / 62% coverage ] ****** [443 done /300 queued / 16 running / 442 errors / 62% coverage ] ****** [444 done /301 queued / 16 running / 443 errors / 62% coverage ] ****** [444 done /301 queued / 16 running / 443 errors / 62% coverage ] ****** [445 done /303 queued / 16 running / 444 errors / 62% coverage ] ****** [445 done /303 queued / 16 running / 444 errors / 62% coverage ] ****** [446 done /305 queued / 16 running / 445 errors / 62% coverage ] ****** [446 done /305 queued / 16 running / 445 errors / 62% coverage ] ****** [447 done /307 queued / 16 running / 446 errors / 62% coverage ] ****** [447 done /307 queued / 16 running / 446 errors / 62% coverage ] ****** [448 done /307 queued / 16 running / 447 errors / 62% coverage ] ****** [448 done /307 queued / 16 running / 447 errors / 62% coverage ] ****** [449 done /307 queued / 16 running / 448 errors / 62% coverage ] ****** [449 done /307 queued / 16 running / 448 errors / 62% coverage ] ****** [450 done /307 queued / 16 running / 449 errors / 62% coverage ] ****** [450 done /307 queued / 16 running / 449 errors / 62% coverage ] ****** [451 done /306 queued / 16 running / 450 errors / 62% coverage ] ****** [451 done /306 queued / 16 running / 450 errors / 62% coverage ] ****** [452 done /307 queued / 16 running / 451 errors / 62% coverage ] ****** [452 done /307 queued / 16 running / 451 errors / 62% coverage ] ****** [453 done /308 queued / 16 running / 452 errors / 62% coverage ] ****** [453 done /308 queued / 16 running / 452 errors / 62% coverage ] ****** [454 done /309 queued / 16 running / 453 errors / 62% coverage ] ****** [454 done /309 queued / 16 running / 453 errors / 62% coverage ] ****** [455 done /310 queued / 16 running / 454 errors / 62% coverage ] ****** [455 done /310 queued / 16 running / 454 errors / 62% coverage ] ****** [456 done /310 queued / 16 running / 455 errors / 62% coverage ] ****** [456 done /310 queued / 16 running / 455 errors / 62% coverage ] ****** [457 done /310 queued / 16 running / 456 errors / 62% coverage ] ****** [457 done /310 queued / 16 running / 456 errors / 62% coverage ] ****** [458 done /310 queued / 16 running / 457 errors / 62% coverage ] ****** [458 done /310 queued / 16 running / 457 errors / 62% coverage ] ****** [459 done /312 queued / 16 running / 458 errors / 62% coverage ] ****** [459 done /312 queued / 16 running / 458 errors / 62% coverage ] ****** [460 done /315 queued / 16 running / 459 errors / 62% coverage ] ****** [460 done /315 queued / 16 running / 459 errors / 62% coverage ] ****** [461 done /315 queued / 16 running / 460 errors / 62% coverage ] ****** [461 done /315 queued / 16 running / 460 errors / 62% coverage ] ****** [462 done /315 queued / 16 running / 461 errors / 62% coverage ] ****** [462 done /315 queued / 16 running / 461 errors / 62% coverage ] ****** [463 done /318 queued / 16 running / 462 errors / 62% coverage ] ****** [463 done /318 queued / 16 running / 462 errors / 62% coverage ] ****** [464 done /317 queued / 16 running / 463 errors / 62% coverage ] ****** [464 done /317 queued / 16 running / 463 errors / 62% coverage ] ****** [465 done /319 queued / 16 running / 464 errors / 62% coverage ] ****** [465 done /319 queued / 16 running / 464 errors / 62% coverage ] ****** [466 done /319 queued / 16 running / 465 errors / 62% coverage ] ****** [466 done /319 queued / 16 running / 465 errors / 62% coverage ] ****** [467 done /320 queued / 16 running / 466 errors / 62% coverage ] ****** [467 done /320 queued / 16 running / 466 errors / 62% coverage ] ****** [468 done /322 queued / 16 running / 467 errors / 62% coverage ] ****** [468 done /322 queued / 16 running / 467 errors / 62% coverage ] ****** [469 done /322 queued / 16 running / 468 errors / 62% coverage ] ****** [469 done /322 queued / 16 running / 468 errors / 62% coverage ] ****** [470 done /324 queued / 16 running / 469 errors / 62% coverage ] ****** [470 done /324 queued / 16 running / 469 errors / 62% coverage ] ****** [471 done /324 queued / 16 running / 470 errors / 62% coverage ] ****** [471 done /324 queued / 16 running / 470 errors / 62% coverage ] ****** [472 done /325 queued / 16 running / 471 errors / 62% coverage ] ****** [472 done /325 queued / 16 running / 471 errors / 62% coverage ] ****** [473 done /326 queued / 16 running / 472 errors / 62% coverage ] ****** [473 done /326 queued / 16 running / 472 errors / 62% coverage ] ****** [474 done /326 queued / 16 running / 473 errors / 62% coverage ] ****** [474 done /326 queued / 16 running / 473 errors / 62% coverage ] ****** [475 done /329 queued / 16 running / 474 errors / 62% coverage ] ****** [475 done /329 queued / 16 running / 474 errors / 62% coverage ] ****** [476 done /330 queued / 16 running / 475 errors / 62% coverage ] ****** [476 done /330 queued / 16 running / 475 errors / 62% coverage ] ****** [477 done /330 queued / 16 running / 476 errors / 62% coverage ] ****** [477 done /330 queued / 16 running / 476 errors / 62% coverage ] ****** [478 done /331 queued / 16 running / 477 errors / 62% coverage ] ****** [478 done /331 queued / 16 running / 477 errors / 62% coverage ] ****** [479 done /330 queued / 16 running / 478 errors / 62% coverage ] ****** [479 done /330 queued / 16 running / 478 errors / 62% coverage ] ****** [480 done /330 queued / 16 running / 479 errors / 62% coverage ] ****** [480 done /330 queued / 16 running / 479 errors / 62% coverage ] ****** [481 done /334 queued / 16 running / 480 errors / 62% coverage ] ****** [481 done /334 queued / 16 running / 480 errors / 62% coverage ] ****** [482 done /334 queued / 16 running / 481 errors / 62% coverage ] ****** [482 done /334 queued / 16 running / 481 errors / 62% coverage ] ****** [483 done /335 queued / 16 running / 482 errors / 62% coverage ] ****** [483 done /335 queued / 16 running / 482 errors / 62% coverage ] ****** [484 done /336 queued / 16 running / 483 errors / 62% coverage ] ****** [484 done /336 queued / 16 running / 483 errors / 62% coverage ] ****** [485 done /337 queued / 16 running / 484 errors / 62% coverage ] ****** [485 done /337 queued / 16 running / 484 errors / 62% coverage ] ****** [486 done /337 queued / 16 running / 485 errors / 62% coverage ] ****** [486 done /337 queued / 16 running / 485 errors / 62% coverage ] ****** [487 done /338 queued / 16 running / 486 errors / 62% coverage ] ****** [487 done /338 queued / 16 running / 486 errors / 62% coverage ] ****** [488 done /338 queued / 16 running / 487 errors / 62% coverage ] ****** [488 done /338 queued / 16 running / 487 errors / 62% coverage ] ****** [489 done /341 queued / 16 running / 488 errors / 62% coverage ] ****** [489 done /341 queued / 16 running / 488 errors / 62% coverage ] ****** [490 done /342 queued / 16 running / 489 errors / 62% coverage ] ****** [490 done /342 queued / 16 running / 489 errors / 62% coverage ] ****** [491 done /344 queued / 16 running / 490 errors / 62% coverage ] ****** [491 done /344 queued / 16 running / 490 errors / 62% coverage ] ****** [492 done /344 queued / 16 running / 491 errors / 62% coverage ] ****** [492 done /344 queued / 16 running / 491 errors / 62% coverage ] ****** [493 done /346 queued / 16 running / 492 errors / 62% coverage ] ****** [493 done /346 queued / 16 running / 492 errors / 62% coverage ] ****** [494 done /347 queued / 16 running / 493 errors / 62% coverage ] ****** [494 done /347 queued / 16 running / 493 errors / 62% coverage ] ****** [495 done /350 queued / 16 running / 494 errors / 62% coverage ] ****** [495 done /350 queued / 16 running / 494 errors / 62% coverage ] ****** [496 done /350 queued / 16 running / 495 errors / 62% coverage ] ****** [496 done /350 queued / 16 running / 495 errors / 62% coverage ] ****** [497 done /349 queued / 16 running / 496 errors / 62% coverage ] ****** [497 done /349 queued / 16 running / 496 errors / 62% coverage ] ****** [498 done /348 queued / 16 running / 497 errors / 62% coverage ] ****** [498 done /348 queued / 16 running / 497 errors / 62% coverage ] ****** [499 done /350 queued / 16 running / 498 errors / 62% coverage ] ****** [499 done /350 queued / 16 running / 498 errors / 62% coverage ] ****** [500 done /353 queued / 16 running / 499 errors / 62% coverage ] ****** [500 done /353 queued / 16 running / 499 errors / 62% coverage ] ****** [501 done /353 queued / 16 running / 500 errors / 62% coverage ] ****** [501 done /353 queued / 16 running / 500 errors / 62% coverage ] ****** [502 done /353 queued / 16 running / 501 errors / 62% coverage ] ****** [502 done /353 queued / 16 running / 501 errors / 62% coverage ] ****** [503 done /354 queued / 16 running / 502 errors / 62% coverage ] ****** [503 done /354 queued / 16 running / 502 errors / 62% coverage ] ****** [504 done /354 queued / 16 running / 503 errors / 62% coverage ] ****** [504 done /354 queued / 16 running / 503 errors / 62% coverage ] ****** [505 done /355 queued / 16 running / 504 errors / 62% coverage ] ****** [505 done /355 queued / 16 running / 504 errors / 62% coverage ] ****** [506 done /354 queued / 16 running / 505 errors / 62% coverage ] ****** [506 done /354 queued / 16 running / 505 errors / 62% coverage ] ****** [507 done /354 queued / 16 running / 506 errors / 62% coverage ] ****** [507 done /354 queued / 16 running / 506 errors / 62% coverage ] ****** [508 done /355 queued / 16 running / 507 errors / 62% coverage ] ****** [508 done /355 queued / 16 running / 507 errors / 62% coverage ] ****** [509 done /356 queued / 16 running / 508 errors / 62% coverage ] ****** [509 done /356 queued / 16 running / 508 errors / 62% coverage ] ****** [510 done /357 queued / 16 running / 509 errors / 62% coverage ] ****** [510 done /357 queued / 16 running / 509 errors / 62% coverage ] ****** [511 done /360 queued / 16 running / 510 errors / 62% coverage ] ****** [511 done /360 queued / 16 running / 510 errors / 62% coverage ] ****** [512 done /359 queued / 16 running / 511 errors / 62% coverage ] ****** [512 done /359 queued / 16 running / 511 errors / 62% coverage ] ****** [513 done /362 queued / 16 running / 512 errors / 62% coverage ] ****** [513 done /362 queued / 16 running / 512 errors / 62% coverage ] ****** [514 done /365 queued / 16 running / 513 errors / 62% coverage ] ****** [514 done /365 queued / 16 running / 513 errors / 62% coverage ] ****** [515 done /366 queued / 16 running / 514 errors / 62% coverage ] ****** [515 done /366 queued / 16 running / 514 errors / 62% coverage ] ****** [516 done /366 queued / 16 running / 515 errors / 62% coverage ] ****** [516 done /366 queued / 16 running / 515 errors / 62% coverage ] ****** [517 done /367 queued / 16 running / 516 errors / 62% coverage ] ****** [517 done /367 queued / 16 running / 516 errors / 62% coverage ] ****** [518 done /367 queued / 16 running / 517 errors / 62% coverage ] ****** [518 done /367 queued / 16 running / 517 errors / 62% coverage ] ****** [519 done /369 queued / 16 running / 518 errors / 62% coverage ] ****** [519 done /369 queued / 16 running / 518 errors / 62% coverage ] ****** [520 done /370 queued / 16 running / 519 errors / 62% coverage ] ****** [520 done /370 queued / 16 running / 519 errors / 62% coverage ] ****** [521 done /373 queued / 16 running / 520 errors / 62% coverage ] ****** [521 done /373 queued / 16 running / 520 errors / 62% coverage ] ****** [522 done /373 queued / 16 running / 521 errors / 62% coverage ] ****** [522 done /373 queued / 16 running / 521 errors / 62% coverage ] ****** [523 done /372 queued / 16 running / 522 errors / 62% coverage ] ****** [523 done /372 queued / 16 running / 522 errors / 62% coverage ] ****** [524 done /372 queued / 16 running / 523 errors / 62% coverage ] ****** [524 done /372 queued / 16 running / 523 errors / 62% coverage ] ****** [525 done /371 queued / 16 running / 524 errors / 62% coverage ] ****** [525 done /371 queued / 16 running / 524 errors / 62% coverage ] ****** [526 done /372 queued / 16 running / 525 errors / 62% coverage ] ****** [526 done /372 queued / 16 running / 525 errors / 62% coverage ] ****** [527 done /374 queued / 16 running / 526 errors / 62% coverage ] ****** [527 done /374 queued / 16 running / 526 errors / 62% coverage ] ****** [528 done /376 queued / 16 running / 527 errors / 62% coverage ] ****** [528 done /376 queued / 16 running / 527 errors / 62% coverage ] ****** [529 done /376 queued / 16 running / 528 errors / 62% coverage ] ****** [529 done /376 queued / 16 running / 528 errors / 62% coverage ] ****** [530 done /376 queued / 16 running / 529 errors / 62% coverage ] ****** [530 done /376 queued / 16 running / 529 errors / 62% coverage ] ****** [531 done /375 queued / 16 running / 530 errors / 62% coverage ] ****** [531 done /375 queued / 16 running / 530 errors / 62% coverage ] ****** [532 done /374 queued / 16 running / 531 errors / 62% coverage ] ****** [532 done /374 queued / 16 running / 531 errors / 62% coverage ] ****** [533 done /375 queued / 16 running / 532 errors / 62% coverage ] ****** [533 done /375 queued / 16 running / 532 errors / 62% coverage ] ****** [534 done /374 queued / 16 running / 533 errors / 62% coverage ] ****** [534 done /374 queued / 16 running / 533 errors / 62% coverage ] ****** [535 done /374 queued / 16 running / 534 errors / 62% coverage ] ****** [535 done /374 queued / 16 running / 534 errors / 62% coverage ] ****** [536 done /375 queued / 16 running / 535 errors / 62% coverage ] ****** [536 done /375 queued / 16 running / 535 errors / 62% coverage ] ****** [537 done /376 queued / 16 running / 536 errors / 62% coverage ] ****** [537 done /376 queued / 16 running / 536 errors / 62% coverage ] ****** [538 done /378 queued / 16 running / 537 errors / 62% coverage ] ****** [538 done /378 queued / 16 running / 537 errors / 62% coverage ] ****** [539 done /381 queued / 16 running / 538 errors / 62% coverage ] ****** [539 done /381 queued / 16 running / 538 errors / 62% coverage ] ****** [540 done /384 queued / 16 running / 539 errors / 62% coverage ] ****** [540 done /384 queued / 16 running / 539 errors / 62% coverage ] ****** [541 done /384 queued / 16 running / 540 errors / 62% coverage ] ****** [541 done /384 queued / 16 running / 540 errors / 62% coverage ] ****** [542 done /383 queued / 16 running / 541 errors / 62% coverage ] ****** [542 done /383 queued / 16 running / 541 errors / 62% coverage ] ****** [543 done /387 queued / 16 running / 542 errors / 62% coverage ] ****** [543 done /387 queued / 16 running / 542 errors / 62% coverage ] ****** [544 done /387 queued / 16 running / 543 errors / 62% coverage ] ****** [544 done /387 queued / 16 running / 543 errors / 62% coverage ] ****** [545 done /386 queued / 16 running / 544 errors / 62% coverage ] ****** [545 done /386 queued / 16 running / 544 errors / 62% coverage ] ****** [546 done /385 queued / 16 running / 545 errors / 62% coverage ] ****** [546 done /385 queued / 16 running / 545 errors / 62% coverage ] ****** [547 done /386 queued / 16 running / 546 errors / 62% coverage ] ****** [547 done /386 queued / 16 running / 546 errors / 62% coverage ] ****** [548 done /387 queued / 16 running / 547 errors / 62% coverage ] ****** [548 done /387 queued / 16 running / 547 errors / 62% coverage ] ****** [549 done /389 queued / 16 running / 548 errors / 62% coverage ] ****** [549 done /389 queued / 16 running / 548 errors / 62% coverage ] ****** [550 done /391 queued / 16 running / 549 errors / 62% coverage ] ****** [550 done /391 queued / 16 running / 549 errors / 62% coverage ] ****** [551 done /392 queued / 16 running / 550 errors / 62% coverage ] ****** [551 done /392 queued / 16 running / 550 errors / 62% coverage ] ****** [552 done /392 queued / 16 running / 551 errors / 62% coverage ] ****** [552 done /392 queued / 16 running / 551 errors / 62% coverage ] ****** [553 done /391 queued / 16 running / 552 errors / 62% coverage ] ****** [553 done /391 queued / 16 running / 552 errors / 62% coverage ] ****** [554 done /391 queued / 16 running / 553 errors / 62% coverage ] ****** [554 done /391 queued / 16 running / 553 errors / 62% coverage ] ****** [555 done /391 queued / 16 running / 554 errors / 62% coverage ] ****** [555 done /391 queued / 16 running / 554 errors / 62% coverage ] ****** [556 done /392 queued / 16 running / 555 errors / 62% coverage ] ****** [556 done /392 queued / 16 running / 555 errors / 62% coverage ] ****** [557 done /395 queued / 16 running / 556 errors / 62% coverage ] ****** [557 done /395 queued / 16 running / 556 errors / 62% coverage ] ****** [558 done /395 queued / 16 running / 557 errors / 62% coverage ] ****** [558 done /395 queued / 16 running / 557 errors / 62% coverage ] ****** [559 done /397 queued / 16 running / 558 errors / 62% coverage ] ****** [559 done /397 queued / 16 running / 558 errors / 62% coverage ] ****** [560 done /398 queued / 16 running / 559 errors / 62% coverage ] ****** [560 done /398 queued / 16 running / 559 errors / 62% coverage ] ****** [561 done /397 queued / 16 running / 560 errors / 62% coverage ] ****** [561 done /397 queued / 16 running / 560 errors / 62% coverage ] ****** [562 done /397 queued / 16 running / 561 errors / 62% coverage ] ****** [562 done /397 queued / 16 running / 561 errors / 62% coverage ] ****** [563 done /398 queued / 16 running / 562 errors / 62% coverage ] ****** [563 done /398 queued / 16 running / 562 errors / 62% coverage ] ****** [564 done /397 queued / 16 running / 563 errors / 62% coverage ] ****** [564 done /397 queued / 16 running / 563 errors / 62% coverage ] ****** [565 done /397 queued / 16 running / 564 errors / 62% coverage ] ****** [565 done /397 queued / 16 running / 564 errors / 62% coverage ] ****** [566 done /397 queued / 16 running / 565 errors / 62% coverage ] ****** [566 done /397 queued / 16 running / 565 errors / 62% coverage ] ****** [567 done /396 queued / 16 running / 566 errors / 62% coverage ] ****** [567 done /396 queued / 16 running / 566 errors / 62% coverage ] ****** [568 done /395 queued / 16 running / 567 errors / 62% coverage ] ****** [568 done /395 queued / 16 running / 567 errors / 62% coverage ] ****** [569 done /396 queued / 16 running / 568 errors / 62% coverage ] ****** [569 done /396 queued / 16 running / 568 errors / 62% coverage ] ****** [570 done /397 queued / 16 running / 569 errors / 62% coverage ] ****** [570 done /397 queued / 16 running / 569 errors / 62% coverage ] ****** [571 done /398 queued / 16 running / 570 errors / 62% coverage ] ****** [571 done /398 queued / 16 running / 570 errors / 62% coverage ] ****** [572 done /397 queued / 16 running / 571 errors / 62% coverage ] ****** [572 done /397 queued / 16 running / 571 errors / 62% coverage ] ****** [573 done /396 queued / 16 running / 572 errors / 62% coverage ] ****** [573 done /396 queued / 16 running / 572 errors / 62% coverage ] ****** [574 done /396 queued / 16 running / 573 errors / 62% coverage ] ****** [574 done /396 queued / 16 running / 573 errors / 62% coverage ] ****** [575 done /396 queued / 16 running / 574 errors / 62% coverage ] ****** [575 done /396 queued / 16 running / 574 errors / 62% coverage ] ****** [576 done /396 queued / 16 running / 575 errors / 62% coverage ] ****** [576 done /396 queued / 16 running / 575 errors / 62% coverage ] ****** [577 done /397 queued / 16 running / 576 errors / 62% coverage ] ****** [577 done /397 queued / 16 running / 576 errors / 62% coverage ] ****** [578 done /399 queued / 16 running / 577 errors / 62% coverage ] ****** [578 done /399 queued / 16 running / 577 errors / 62% coverage ] ****** [579 done /398 queued / 16 running / 578 errors / 62% coverage ] ****** [579 done /398 queued / 16 running / 578 errors / 62% coverage ] ****** [580 done /401 queued / 16 running / 579 errors / 62% coverage ] ****** [580 done /401 queued / 16 running / 579 errors / 62% coverage ] ****** [581 done /400 queued / 16 running / 580 errors / 62% coverage ] ****** [581 done /400 queued / 16 running / 580 errors / 62% coverage ] ****** [582 done /402 queued / 16 running / 581 errors / 62% coverage ] ****** [582 done /402 queued / 16 running / 581 errors / 62% coverage ] ****** [583 done /402 queued / 16 running / 582 errors / 62% coverage ] ****** [583 done /402 queued / 16 running / 582 errors / 62% coverage ] ****** [584 done /403 queued / 16 running / 583 errors / 62% coverage ] ****** [584 done /403 queued / 16 running / 583 errors / 62% coverage ] ****** [585 done /404 queued / 16 running / 584 errors / 62% coverage ] ****** [585 done /404 queued / 16 running / 584 errors / 62% coverage ] ****** [586 done /406 queued / 16 running / 585 errors / 62% coverage ] ****** [586 done /406 queued / 16 running / 585 errors / 62% coverage ] ****** [587 done /407 queued / 16 running / 586 errors / 62% coverage ] ****** [587 done /407 queued / 16 running / 586 errors / 62% coverage ] ****** [588 done /410 queued / 16 running / 587 errors / 62% coverage ] ****** [588 done /410 queued / 16 running / 587 errors / 62% coverage ] ****** [589 done /411 queued / 16 running / 588 errors / 62% coverage ] ****** [589 done /411 queued / 16 running / 588 errors / 62% coverage ] ****** [590 done /412 queued / 16 running / 589 errors / 62% coverage ] ****** [590 done /412 queued / 16 running / 589 errors / 62% coverage ] ****** [591 done /411 queued / 16 running / 590 errors / 62% coverage ] ****** [591 done /411 queued / 16 running / 590 errors / 62% coverage ] ****** [592 done /413 queued / 16 running / 591 errors / 62% coverage ] ****** [592 done /413 queued / 16 running / 591 errors / 62% coverage ] ****** [593 done /413 queued / 16 running / 592 errors / 62% coverage ] ****** [593 done /413 queued / 16 running / 592 errors / 62% coverage ] ****** [594 done /414 queued / 16 running / 593 errors / 62% coverage ] ****** [594 done /414 queued / 16 running / 593 errors / 62% coverage ] ****** [595 done /413 queued / 16 running / 594 errors / 62% coverage ] ****** [595 done /413 queued / 16 running / 594 errors / 62% coverage ] ****** [596 done /414 queued / 16 running / 595 errors / 62% coverage ] ****** [596 done /414 queued / 16 running / 595 errors / 62% coverage ] ****** [597 done /415 queued / 16 running / 596 errors / 62% coverage ] ****** [597 done /415 queued / 16 running / 596 errors / 62% coverage ] ****** [598 done /416 queued / 16 running / 597 errors / 62% coverage ] ****** [598 done /416 queued / 16 running / 597 errors / 62% coverage ] ****** [599 done /417 queued / 16 running / 598 errors / 62% coverage ] ****** [599 done /417 queued / 16 running / 598 errors / 62% coverage ] ****** [600 done /417 queued / 16 running / 599 errors / 62% coverage ] ****** [600 done /417 queued / 16 running / 599 errors / 62% coverage ] ****** [601 done /416 queued / 16 running / 600 errors / 62% coverage ] ****** [601 done /416 queued / 16 running / 600 errors / 62% coverage ] ****** [602 done /419 queued / 16 running / 601 errors / 62% coverage ] ****** [602 done /419 queued / 16 running / 601 errors / 62% coverage ] ****** [603 done /418 queued / 16 running / 602 errors / 62% coverage ] ****** [603 done /418 queued / 16 running / 602 errors / 62% coverage ] ****** [604 done /421 queued / 16 running / 603 errors / 62% coverage ] ****** [604 done /421 queued / 16 running / 603 errors / 62% coverage ] ****** [605 done /422 queued / 16 running / 604 errors / 62% coverage ] ****** [605 done /422 queued / 16 running / 604 errors / 62% coverage ] ****** [606 done /422 queued / 16 running / 605 errors / 62% coverage ] ****** [606 done /422 queued / 16 running / 605 errors / 62% coverage ] ****** [607 done /421 queued / 16 running / 606 errors / 62% coverage ] ****** [607 done /421 queued / 16 running / 606 errors / 62% coverage ] ****** [608 done /422 queued / 16 running / 607 errors / 62% coverage ] ****** [608 done /422 queued / 16 running / 607 errors / 62% coverage ] ****** [609 done /423 queued / 16 running / 608 errors / 62% coverage ] ****** [609 done /423 queued / 16 running / 608 errors / 62% coverage ] ****** [610 done /422 queued / 16 running / 609 errors / 62% coverage ] ****** [610 done /422 queued / 16 running / 609 errors / 62% coverage ] ****** [611 done /425 queued / 16 running / 610 errors / 62% coverage ] ****** [611 done /425 queued / 16 running / 610 errors / 62% coverage ] ****** [612 done /424 queued / 16 running / 611 errors / 62% coverage ] ****** [612 done /424 queued / 16 running / 611 errors / 62% coverage ] ****** [613 done /425 queued / 16 running / 612 errors / 62% coverage ] ****** [613 done /425 queued / 16 running / 612 errors / 62% coverage ] ****** [614 done /426 queued / 16 running / 613 errors / 62% coverage ] ****** [614 done /426 queued / 16 running / 613 errors / 62% coverage ] ****** [615 done /425 queued / 16 running / 614 errors / 62% coverage ] ****** [615 done /425 queued / 16 running / 614 errors / 62% coverage ] ****** [616 done /425 queued / 16 running / 615 errors / 62% coverage ] ****** [616 done /425 queued / 16 running / 615 errors / 62% coverage ] ****** [617 done /425 queued / 16 running / 616 errors / 62% coverage ] ****** [617 done /425 queued / 16 running / 616 errors / 62% coverage ] ****** [618 done /427 queued / 16 running / 617 errors / 62% coverage ] ****** [618 done /427 queued / 16 running / 617 errors / 62% coverage ] ****** [619 done /428 queued / 16 running / 618 errors / 62% coverage ] ****** [619 done /428 queued / 16 running / 618 errors / 62% coverage ] ****** [620 done /429 queued / 16 running / 619 errors / 62% coverage ] ****** [620 done /429 queued / 16 running / 619 errors / 62% coverage ] ****** [621 done /430 queued / 16 running / 620 errors / 62% coverage ] ****** [621 done /430 queued / 16 running / 620 errors / 62% coverage ] ****** [622 done /433 queued / 16 running / 621 errors / 62% coverage ] ****** [622 done /433 queued / 16 running / 621 errors / 62% coverage ] ****** [623 done /433 queued / 16 running / 622 errors / 62% coverage ] ****** [623 done /433 queued / 16 running / 622 errors / 62% coverage ] ****** [624 done /434 queued / 16 running / 623 errors / 62% coverage ] ****** [624 done /434 queued / 16 running / 623 errors / 62% coverage ] ****** [625 done /436 queued / 16 running / 624 errors / 62% coverage ] ****** [625 done /436 queued / 16 running / 624 errors / 62% coverage ] ****** [626 done /437 queued / 16 running / 625 errors / 62% coverage ] ****** [626 done /437 queued / 16 running / 625 errors / 62% coverage ] ****** [627 done /439 queued / 16 running / 626 errors / 62% coverage ] ****** [627 done /439 queued / 16 running / 626 errors / 62% coverage ] ****** [628 done /439 queued / 16 running / 627 errors / 62% coverage ] ****** [628 done /439 queued / 16 running / 627 errors / 62% coverage ] ****** [629 done /440 queued / 16 running / 628 errors / 62% coverage ] ****** [629 done /440 queued / 16 running / 628 errors / 62% coverage ] ****** [630 done /442 queued / 16 running / 629 errors / 62% coverage ] ****** [630 done /442 queued / 16 running / 629 errors / 62% coverage ] ****** [631 done /443 queued / 16 running / 630 errors / 62% coverage ] ****** [631 done /443 queued / 16 running / 630 errors / 62% coverage ] ****** [632 done /444 queued / 16 running / 631 errors / 62% coverage ] ****** [632 done /444 queued / 16 running / 631 errors / 62% coverage ] ****** [633 done /443 queued / 16 running / 632 errors / 62% coverage ] ****** [633 done /443 queued / 16 running / 632 errors / 62% coverage ] ****** [634 done /444 queued / 16 running / 633 errors / 62% coverage ] ****** [634 done /444 queued / 16 running / 633 errors / 62% coverage ] ****** [635 done /446 queued / 16 running / 634 errors / 62% coverage ] ****** [635 done /446 queued / 16 running / 634 errors / 62% coverage ] ****** [636 done /447 queued / 16 running / 635 errors / 62% coverage ] ****** [636 done /447 queued / 16 running / 635 errors / 62% coverage ] ****** [637 done /448 queued / 16 running / 636 errors / 62% coverage ] ****** [637 done /448 queued / 16 running / 636 errors / 62% coverage ] ****** [638 done /450 queued / 16 running / 637 errors / 62% coverage ] ****** [638 done /450 queued / 16 running / 637 errors / 62% coverage ] ****** [639 done /452 queued / 16 running / 638 errors / 62% coverage ] ****** [639 done /452 queued / 16 running / 638 errors / 62% coverage ] ****** [640 done /452 queued / 16 running / 639 errors / 62% coverage ] ****** [640 done /452 queued / 16 running / 639 errors / 62% coverage ] ****** [641 done /452 queued / 16 running / 640 errors / 62% coverage ] ****** [641 done /452 queued / 16 running / 640 errors / 62% coverage ] ****** [642 done /453 queued / 16 running / 641 errors / 62% coverage ] ****** [642 done /453 queued / 16 running / 641 errors / 62% coverage ] ****** [643 done /452 queued / 16 running / 642 errors / 62% coverage ] ****** [643 done /452 queued / 16 running / 642 errors / 62% coverage ] ****** [644 done /451 queued / 16 running / 643 errors / 62% coverage ] ****** [644 done /451 queued / 16 running / 643 errors / 62% coverage ] ****** [645 done /452 queued / 16 running / 644 errors / 62% coverage ] ****** [645 done /452 queued / 16 running / 644 errors / 62% coverage ] ****** [646 done /452 queued / 16 running / 645 errors / 62% coverage ] ****** [646 done /452 queued / 16 running / 645 errors / 62% coverage ] ****** [647 done /452 queued / 16 running / 646 errors / 62% coverage ] ****** [647 done /452 queued / 16 running / 646 errors / 62% coverage ] ****** [648 done /454 queued / 16 running / 647 errors / 62% coverage ] ****** [648 done /454 queued / 16 running / 647 errors / 62% coverage ] ****** [649 done /455 queued / 16 running / 648 errors / 62% coverage ] ****** [649 done /455 queued / 16 running / 648 errors / 62% coverage ] ****** [650 done /459 queued / 16 running / 649 errors / 62% coverage ] ****** [650 done /459 queued / 16 running / 649 errors / 62% coverage ] ****** [651 done /461 queued / 16 running / 650 errors / 62% coverage ] ****** [651 done /461 queued / 16 running / 650 errors / 62% coverage ] ****** [652 done /461 queued / 16 running / 651 errors / 62% coverage ] ****** [652 done /461 queued / 16 running / 651 errors / 62% coverage ] ****** [653 done /461 queued / 16 running / 652 errors / 62% coverage ] ****** [653 done /461 queued / 16 running / 652 errors / 62% coverage ] ****** [654 done /462 queued / 16 running / 653 errors / 62% coverage ] ****** [654 done /462 queued / 16 running / 653 errors / 62% coverage ] ****** [655 done /462 queued / 16 running / 654 errors / 62% coverage ] ****** [655 done /462 queued / 16 running / 654 errors / 62% coverage ] ****** [656 done /461 queued / 16 running / 655 errors / 62% coverage ] ****** [656 done /461 queued / 16 running / 655 errors / 62% coverage ] ****** [657 done /460 queued / 16 running / 656 errors / 62% coverage ] ****** [657 done /460 queued / 16 running / 656 errors / 62% coverage ] ****** [658 done /459 queued / 16 running / 657 errors / 62% coverage ] ****** [658 done /459 queued / 16 running / 657 errors / 62% coverage ] ****** [659 done /459 queued / 16 running / 658 errors / 62% coverage ] ****** [659 done /459 queued / 16 running / 658 errors / 62% coverage ] ****** [660 done /462 queued / 16 running / 659 errors / 62% coverage ] ****** [660 done /462 queued / 16 running / 659 errors / 62% coverage ] ****** [661 done /463 queued / 16 running / 660 errors / 62% coverage ] ****** [661 done /463 queued / 16 running / 660 errors / 62% coverage ] ****** [662 done /463 queued / 16 running / 661 errors / 62% coverage ] ****** [662 done /463 queued / 16 running / 661 errors / 62% coverage ] ****** [663 done /464 queued / 16 running / 662 errors / 62% coverage ] ****** [663 done /464 queued / 16 running / 662 errors / 62% coverage ] ****** [664 done /465 queued / 16 running / 663 errors / 62% coverage ] ****** [664 done /465 queued / 16 running / 663 errors / 62% coverage ] ****** [665 done /466 queued / 16 running / 664 errors / 62% coverage ] ****** [665 done /466 queued / 16 running / 664 errors / 62% coverage ] ****** [666 done /467 queued / 16 running / 665 errors / 62% coverage ] ****** [666 done /467 queued / 16 running / 665 errors / 62% coverage ] ****** [667 done /467 queued / 16 running / 666 errors / 62% coverage ] ****** [667 done /467 queued / 16 running / 666 errors / 62% coverage ] ****** [668 done /468 queued / 16 running / 667 errors / 62% coverage ] ****** [668 done /468 queued / 16 running / 667 errors / 62% coverage ] ****** [669 done /471 queued / 16 running / 668 errors / 62% coverage ] ****** [669 done /471 queued / 16 running / 668 errors / 62% coverage ] ****** [670 done /472 queued / 16 running / 669 errors / 62% coverage ] ****** [670 done /472 queued / 16 running / 669 errors / 62% coverage ] ****** [671 done /473 queued / 16 running / 670 errors / 62% coverage ] ****** [671 done /473 queued / 16 running / 670 errors / 62% coverage ] ****** [672 done /473 queued / 16 running / 671 errors / 62% coverage ] ****** [672 done /473 queued / 16 running / 671 errors / 62% coverage ] ****** [673 done /475 queued / 16 running / 672 errors / 62% coverage ] ****** [673 done /475 queued / 16 running / 672 errors / 62% coverage ] ****** [674 done /476 queued / 16 running / 673 errors / 62% coverage ] ****** [674 done /476 queued / 16 running / 673 errors / 62% coverage ] ****** [675 done /475 queued / 16 running / 674 errors / 62% coverage ] ****** [675 done /475 queued / 16 running / 674 errors / 62% coverage ] ****** [676 done /474 queued / 16 running / 675 errors / 62% coverage ] ****** [676 done /474 queued / 16 running / 675 errors / 62% coverage ] ****** [677 done /473 queued / 16 running / 676 errors / 62% coverage ] ****** [677 done /473 queued / 16 running / 676 errors / 62% coverage ] ****** [678 done /476 queued / 16 running / 677 errors / 62% coverage ] ****** [678 done /476 queued / 16 running / 677 errors / 62% coverage ] ****** [679 done /476 queued / 16 running / 678 errors / 62% coverage ] ****** [679 done /476 queued / 16 running / 678 errors / 62% coverage ] ****** [680 done /478 queued / 16 running / 679 errors / 62% coverage ] ****** [680 done /478 queued / 16 running / 679 errors / 62% coverage ] ****** [681 done /478 queued / 16 running / 680 errors / 62% coverage ] ****** [681 done /478 queued / 16 running / 680 errors / 62% coverage ] ****** [682 done /477 queued / 16 running / 681 errors / 62% coverage ] ****** [682 done /477 queued / 16 running / 681 errors / 62% coverage ] ****** [683 done /477 queued / 16 running / 682 errors / 62% coverage ] ****** [683 done /477 queued / 16 running / 682 errors / 62% coverage ] ****** [684 done /476 queued / 16 running / 683 errors / 62% coverage ] ****** [684 done /476 queued / 16 running / 683 errors / 62% coverage ] ****** [685 done /476 queued / 16 running / 684 errors / 62% coverage ] ****** [685 done /476 queued / 16 running / 684 errors / 62% coverage ] ****** [686 done /477 queued / 16 running / 685 errors / 62% coverage ] ****** [686 done /477 queued / 16 running / 685 errors / 62% coverage ] ****** [687 done /476 queued / 16 running / 686 errors / 62% coverage ] ****** [687 done /476 queued / 16 running / 686 errors / 62% coverage ] ****** [688 done /478 queued / 16 running / 687 errors / 62% coverage ] ****** [688 done /478 queued / 16 running / 687 errors / 62% coverage ] ****** [689 done /480 queued / 16 running / 688 errors / 62% coverage ] ****** [689 done /480 queued / 16 running / 688 errors / 62% coverage ] ****** [690 done /482 queued / 16 running / 689 errors / 62% coverage ] ****** [690 done /482 queued / 16 running / 689 errors / 62% coverage ] ****** [691 done /483 queued / 16 running / 690 errors / 62% coverage ] ****** [691 done /483 queued / 16 running / 690 errors / 62% coverage ] ****** [692 done /483 queued / 16 running / 691 errors / 62% coverage ] ****** [692 done /483 queued / 16 running / 691 errors / 62% coverage ] ****** [693 done /487 queued / 16 running / 692 errors / 62% coverage ] ****** [693 done /487 queued / 16 running / 692 errors / 62% coverage ] ****** [694 done /490 queued / 16 running / 693 errors / 62% coverage ] ****** [694 done /490 queued / 16 running / 693 errors / 62% coverage ] ****** [695 done /490 queued / 16 running / 694 errors / 62% coverage ] ****** [695 done /490 queued / 16 running / 694 errors / 62% coverage ] ****** [696 done /489 queued / 16 running / 695 errors / 62% coverage ] ****** [696 done /489 queued / 16 running / 695 errors / 62% coverage ] ****** [697 done /489 queued / 16 running / 696 errors / 62% coverage ] ****** [697 done /489 queued / 16 running / 696 errors / 62% coverage ] ****** [698 done /489 queued / 16 running / 697 errors / 62% coverage ] ****** [698 done /489 queued / 16 running / 697 errors / 62% coverage ] ****** [699 done /490 queued / 16 running / 698 errors / 62% coverage ] ****** [699 done /490 queued / 16 running / 698 errors / 62% coverage ] ****** [700 done /489 queued / 16 running / 699 errors / 62% coverage ] ****** [700 done /489 queued / 16 running / 699 errors / 62% coverage ] ****** [701 done /491 queued / 16 running / 700 errors / 62% coverage ] ****** [701 done /491 queued / 16 running / 700 errors / 62% coverage ] ****** [702 done /494 queued / 16 running / 701 errors / 62% coverage ] ****** [702 done /494 queued / 16 running / 701 errors / 62% coverage ] ****** [703 done /494 queued / 16 running / 702 errors / 62% coverage ] ****** [703 done /494 queued / 16 running / 702 errors / 62% coverage ] ****** [704 done /493 queued / 16 running / 703 errors / 62% coverage ] ****** [704 done /493 queued / 16 running / 703 errors / 62% coverage ] ****** [705 done /495 queued / 16 running / 704 errors / 62% coverage ] ****** [705 done /495 queued / 16 running / 704 errors / 62% coverage ] ****** [706 done /496 queued / 16 running / 705 errors / 62% coverage ] ****** [706 done /496 queued / 16 running / 705 errors / 62% coverage ] ****** [707 done /496 queued / 16 running / 706 errors / 62% coverage ] ****** [707 done /496 queued / 16 running / 706 errors / 62% coverage ] ****** [708 done /497 queued / 16 running / 707 errors / 62% coverage ] ****** [708 done /497 queued / 16 running / 707 errors / 62% coverage ] ****** [709 done /497 queued / 16 running / 708 errors / 62% coverage ] ****** [709 done /497 queued / 16 running / 708 errors / 62% coverage ] ****** [710 done /497 queued / 16 running / 709 errors / 62% coverage ] ****** [710 done /497 queued / 16 running / 709 errors / 62% coverage ] ****** [711 done /498 queued / 16 running / 710 errors / 62% coverage ] ****** [711 done /498 queued / 16 running / 710 errors / 62% coverage ] ****** [712 done /498 queued / 16 running / 711 errors / 62% coverage ] ****** [712 done /498 queued / 16 running / 711 errors / 62% coverage ] ****** [713 done /499 queued / 16 running / 712 errors / 62% coverage ] ****** [713 done /499 queued / 16 running / 712 errors / 62% coverage ] ****** [714 done /500 queued / 16 running / 713 errors / 62% coverage ] ****** [714 done /500 queued / 16 running / 713 errors / 62% coverage ] ****** [715 done /500 queued / 16 running / 714 errors / 62% coverage ] ****** [715 done /500 queued / 16 running / 714 errors / 62% coverage ] ****** [716 done /501 queued / 16 running / 715 errors / 62% coverage ] ****** [716 done /501 queued / 16 running / 715 errors / 62% coverage ] ****** [717 done /502 queued / 16 running / 716 errors / 62% coverage ] ****** [717 done /502 queued / 16 running / 716 errors / 62% coverage ] ****** [718 done /502 queued / 16 running / 717 errors / 62% coverage ] ****** [718 done /502 queued / 16 running / 717 errors / 62% coverage ] ****** [719 done /502 queued / 16 running / 718 errors / 62% coverage ] ****** [719 done /502 queued / 16 running / 718 errors / 62% coverage ] ****** [720 done /502 queued / 16 running / 719 errors / 62% coverage ] ****** [720 done /502 queued / 16 running / 719 errors / 62% coverage ] ****** [721 done /503 queued / 16 running / 720 errors / 62% coverage ] ****** [721 done /503 queued / 16 running / 720 errors / 62% coverage ] ****** [722 done /507 queued / 16 running / 721 errors / 62% coverage ] ****** [722 done /507 queued / 16 running / 721 errors / 62% coverage ] ****** [723 done /510 queued / 16 running / 722 errors / 62% coverage ] ****** [723 done /510 queued / 16 running / 722 errors / 62% coverage ] ****** [724 done /511 queued / 16 running / 723 errors / 62% coverage ] ****** [724 done /511 queued / 16 running / 723 errors / 62% coverage ] ****** [725 done /511 queued / 16 running / 724 errors / 62% coverage ] ****** [725 done /511 queued / 16 running / 724 errors / 62% coverage ] ****** [726 done /512 queued / 16 running / 725 errors / 62% coverage ] ****** [726 done /512 queued / 16 running / 725 errors / 62% coverage ] ****** [727 done /513 queued / 16 running / 726 errors / 62% coverage ] ****** [727 done /513 queued / 16 running / 726 errors / 62% coverage ] ****** [728 done /514 queued / 16 running / 727 errors / 62% coverage ] ****** [728 done /514 queued / 16 running / 727 errors / 62% coverage ] ****** [729 done /516 queued / 16 running / 728 errors / 62% coverage ] ****** [729 done /516 queued / 16 running / 728 errors / 62% coverage ] ****** [730 done /517 queued / 16 running / 729 errors / 62% coverage ] ****** [730 done /517 queued / 16 running / 729 errors / 62% coverage ] ****** [731 done /517 queued / 16 running / 730 errors / 62% coverage ] ****** [731 done /517 queued / 16 running / 730 errors / 62% coverage ] ****** [732 done /517 queued / 16 running / 731 errors / 62% coverage ] ****** [732 done /517 queued / 16 running / 731 errors / 62% coverage ] ****** [733 done /517 queued / 16 running / 732 errors / 62% coverage ] ****** [733 done /517 queued / 16 running / 732 errors / 62% coverage ] ****** [734 done /520 queued / 16 running / 733 errors / 62% coverage ] ****** [734 done /520 queued / 16 running / 733 errors / 62% coverage ] ****** [735 done /523 queued / 16 running / 734 errors / 62% coverage ] ****** [735 done /523 queued / 16 running / 734 errors / 62% coverage ] ****** [736 done /526 queued / 16 running / 735 errors / 62% coverage ] ****** [736 done /526 queued / 16 running / 735 errors / 62% coverage ] ****** [737 done /527 queued / 16 running / 736 errors / 62% coverage ] ****** [737 done /527 queued / 16 running / 736 errors / 62% coverage ] ****** [738 done /527 queued / 16 running / 737 errors / 62% coverage ] ****** [738 done /527 queued / 16 running / 737 errors / 62% coverage ] ****** [739 done /528 queued / 16 running / 738 errors / 62% coverage ] ****** [739 done /528 queued / 16 running / 738 errors / 62% coverage ] ****** [740 done /529 queued / 16 running / 739 errors / 62% coverage ] ****** [740 done /529 queued / 16 running / 739 errors / 62% coverage ] ****** [741 done /528 queued / 16 running / 740 errors / 62% coverage ] ****** [741 done /528 queued / 16 running / 740 errors / 62% coverage ] ****** [742 done /528 queued / 16 running / 741 errors / 62% coverage ] ****** [742 done /528 queued / 16 running / 741 errors / 62% coverage ] ****** [743 done /529 queued / 16 running / 742 errors / 62% coverage ] ****** [743 done /529 queued / 16 running / 742 errors / 62% coverage ] ****** [744 done /532 queued / 16 running / 743 errors / 62% coverage ] ****** [744 done /532 queued / 16 running / 743 errors / 62% coverage ] ****** [745 done /532 queued / 16 running / 744 errors / 62% coverage ] ****** [745 done /532 queued / 16 running / 744 errors / 62% coverage ] ****** [746 done /531 queued / 16 running / 745 errors / 62% coverage ] ****** [746 done /531 queued / 16 running / 745 errors / 62% coverage ] ****** [747 done /532 queued / 16 running / 746 errors / 62% coverage ] ****** [747 done /532 queued / 16 running / 746 errors / 62% coverage ] ****** [748 done /533 queued / 16 running / 747 errors / 62% coverage ] ****** [748 done /533 queued / 16 running / 747 errors / 62% coverage ] ****** [749 done /536 queued / 16 running / 748 errors / 62% coverage ] ****** [749 done /536 queued / 16 running / 748 errors / 62% coverage ] ****** [750 done /535 queued / 16 running / 749 errors / 62% coverage ] ****** [750 done /535 queued / 16 running / 749 errors / 62% coverage ] ****** [751 done /536 queued / 16 running / 750 errors / 62% coverage ] ****** [751 done /536 queued / 16 running / 750 errors / 62% coverage ] ****** [752 done /536 queued / 16 running / 751 errors / 62% coverage ] ****** [752 done /536 queued / 16 running / 751 errors / 62% coverage ] ****** [753 done /536 queued / 16 running / 752 errors / 62% coverage ] ****** [753 done /536 queued / 16 running / 752 errors / 62% coverage ] ****** [754 done /537 queued / 16 running / 753 errors / 62% coverage ] ****** [754 done /537 queued / 16 running / 753 errors / 62% coverage ] ****** [755 done /536 queued / 16 running / 754 errors / 62% coverage ] ****** [755 done /536 queued / 16 running / 754 errors / 62% coverage ] ****** [756 done /539 queued / 16 running / 755 errors / 62% coverage ] ****** [756 done /539 queued / 16 running / 755 errors / 62% coverage ] ****** [757 done /538 queued / 16 running / 756 errors / 62% coverage ] ****** [757 done /538 queued / 16 running / 756 errors / 62% coverage ] ****** [758 done /538 queued / 16 running / 757 errors / 62% coverage ] ****** [758 done /538 queued / 16 running / 757 errors / 62% coverage ] ****** [759 done /539 queued / 16 running / 758 errors / 62% coverage ] ****** [759 done /539 queued / 16 running / 758 errors / 62% coverage ] ****** [760 done /539 queued / 16 running / 759 errors / 62% coverage ] ****** [760 done /539 queued / 16 running / 759 errors / 62% coverage ] ****** [761 done /538 queued / 16 running / 760 errors / 62% coverage ] ****** [761 done /538 queued / 16 running / 760 errors / 62% coverage ] ****** [762 done /537 queued / 16 running / 761 errors / 62% coverage ] ****** [762 done /537 queued / 16 running / 761 errors / 62% coverage ] ****** [763 done /540 queued / 16 running / 762 errors / 62% coverage ] ****** [763 done /540 queued / 16 running / 762 errors / 62% coverage ] ****** [764 done /539 queued / 16 running / 763 errors / 62% coverage ] ****** [764 done /539 queued / 16 running / 763 errors / 62% coverage ] ****** [765 done /539 queued / 16 running / 764 errors / 62% coverage ] ****** [765 done /539 queued / 16 running / 764 errors / 62% coverage ] ****** [766 done /542 queued / 16 running / 765 errors / 62% coverage ] ****** [766 done /542 queued / 16 running / 765 errors / 62% coverage ] ****** [767 done /541 queued / 16 running / 766 errors / 62% coverage ] ****** [767 done /541 queued / 16 running / 766 errors / 62% coverage ] ****** [768 done /540 queued / 16 running / 767 errors / 62% coverage ] ****** [768 done /540 queued / 16 running / 767 errors / 62% coverage ] ****** [769 done /541 queued / 16 running / 768 errors / 62% coverage ] ****** [769 done /541 queued / 16 running / 768 errors / 62% coverage ] ****** [770 done /542 queued / 16 running / 769 errors / 62% coverage ] ****** [770 done /542 queued / 16 running / 769 errors / 62% coverage ] ****** [771 done /546 queued / 16 running / 770 errors / 62% coverage ] ****** [771 done /546 queued / 16 running / 770 errors / 62% coverage ] ****** [772 done /547 queued / 16 running / 771 errors / 62% coverage ] ****** [772 done /547 queued / 16 running / 771 errors / 62% coverage ] ****** [773 done /547 queued / 16 running / 772 errors / 62% coverage ] ****** [773 done /547 queued / 16 running / 772 errors / 62% coverage ] ****** [774 done /548 queued / 16 running / 773 errors / 62% coverage ] ****** [774 done /548 queued / 16 running / 773 errors / 62% coverage ] ****** [775 done /547 queued / 16 running / 774 errors / 62% coverage ] ****** [775 done /547 queued / 16 running / 774 errors / 62% coverage ] ****** [776 done /547 queued / 16 running / 775 errors / 62% coverage ] ****** [776 done /547 queued / 16 running / 775 errors / 62% coverage ] ****** [777 done /547 queued / 16 running / 776 errors / 62% coverage ] ****** [777 done /547 queued / 16 running / 776 errors / 62% coverage ] ****** [778 done /549 queued / 16 running / 777 errors / 62% coverage ] ****** [778 done /549 queued / 16 running / 777 errors / 62% coverage ] ****** [779 done /548 queued / 16 running / 778 errors / 62% coverage ] ****** [779 done /548 queued / 16 running / 778 errors / 62% coverage ] ****** [780 done /548 queued / 16 running / 779 errors / 62% coverage ] ****** [780 done /548 queued / 16 running / 779 errors / 62% coverage ] ****** [781 done /549 queued / 16 running / 780 errors / 62% coverage ] ****** [781 done /549 queued / 16 running / 780 errors / 62% coverage ] ****** [782 done /549 queued / 16 running / 781 errors / 62% coverage ] ****** [782 done /549 queued / 16 running / 781 errors / 62% coverage ] ****** [783 done /550 queued / 16 running / 782 errors / 62% coverage ] ****** [783 done /550 queued / 16 running / 782 errors / 62% coverage ] ****** [784 done /551 queued / 16 running / 783 errors / 62% coverage ] ****** [784 done /551 queued / 16 running / 783 errors / 62% coverage ] ****** [785 done /553 queued / 16 running / 784 errors / 62% coverage ] ****** [785 done /553 queued / 16 running / 784 errors / 62% coverage ] ****** [786 done /555 queued / 16 running / 785 errors / 62% coverage ] ****** [786 done /555 queued / 16 running / 785 errors / 62% coverage ] ****** [787 done /554 queued / 16 running / 786 errors / 62% coverage ] ****** [787 done /554 queued / 16 running / 786 errors / 62% coverage ] ****** [788 done /554 queued / 16 running / 787 errors / 62% coverage ] ****** [788 done /554 queued / 16 running / 787 errors / 62% coverage ] ****** [789 done /554 queued / 16 running / 788 errors / 62% coverage ] ****** [789 done /554 queued / 16 running / 788 errors / 62% coverage ] ****** [790 done /555 queued / 16 running / 789 errors / 62% coverage ] ****** [790 done /555 queued / 16 running / 789 errors / 62% coverage ] ****** [791 done /556 queued / 16 running / 790 errors / 62% coverage ] ****** [791 done /556 queued / 16 running / 790 errors / 62% coverage ] ****** [792 done /558 queued / 16 running / 791 errors / 62% coverage ] ****** [792 done /558 queued / 16 running / 791 errors / 62% coverage ] ****** [793 done /557 queued / 16 running / 792 errors / 62% coverage ] ****** [793 done /557 queued / 16 running / 792 errors / 62% coverage ] ****** [794 done /556 queued / 16 running / 793 errors / 62% coverage ] ****** [794 done /556 queued / 16 running / 793 errors / 62% coverage ] ****** [795 done /557 queued / 16 running / 794 errors / 62% coverage ] ****** [795 done /557 queued / 16 running / 794 errors / 62% coverage ] ****** [796 done /558 queued / 16 running / 795 errors / 62% coverage ] ****** [796 done /558 queued / 16 running / 795 errors / 62% coverage ] ****** [797 done /561 queued / 16 running / 796 errors / 62% coverage ] ****** [797 done /561 queued / 16 running / 796 errors / 62% coverage ] ****** [798 done /562 queued / 16 running / 797 errors / 62% coverage ] ****** [798 done /562 queued / 16 running / 797 errors / 62% coverage ] ****** [799 done /565 queued / 16 running / 798 errors / 62% coverage ] ****** [799 done /565 queued / 16 running / 798 errors / 62% coverage ] ****** [800 done /566 queued / 16 running / 799 errors / 62% coverage ] ****** [800 done /566 queued / 16 running / 799 errors / 62% coverage ] ****** [801 done /567 queued / 16 running / 800 errors / 62% coverage ] ****** [801 done /567 queued / 16 running / 800 errors / 62% coverage ] ****** [802 done /569 queued / 16 running / 801 errors / 62% coverage ] ****** [802 done /569 queued / 16 running / 801 errors / 62% coverage ] ****** [803 done /573 queued / 16 running / 802 errors / 62% coverage ] ****** [803 done /573 queued / 16 running / 802 errors / 62% coverage ] ****** [804 done /575 queued / 16 running / 803 errors / 62% coverage ] ****** [804 done /575 queued / 16 running / 803 errors / 62% coverage ] ****** [805 done /574 queued / 16 running / 804 errors / 62% coverage ] ****** [805 done /574 queued / 16 running / 804 errors / 62% coverage ] ****** [806 done /575 queued / 16 running / 805 errors / 62% coverage ] ****** [806 done /575 queued / 16 running / 805 errors / 62% coverage ] ****** [807 done /575 queued / 16 running / 806 errors / 62% coverage ] ****** [807 done /575 queued / 16 running / 806 errors / 62% coverage ] ****** [808 done /576 queued / 16 running / 807 errors / 62% coverage ] ****** [808 done /576 queued / 16 running / 807 errors / 62% coverage ] ****** [809 done /576 queued / 16 running / 808 errors / 62% coverage ] ****** [809 done /576 queued / 16 running / 808 errors / 62% coverage ] ****** [810 done /577 queued / 16 running / 809 errors / 62% coverage ] ****** [810 done /577 queued / 16 running / 809 errors / 62% coverage ] ****** [811 done /576 queued / 16 running / 810 errors / 62% coverage ] ****** [811 done /576 queued / 16 running / 810 errors / 62% coverage ] ****** [812 done /579 queued / 16 running / 811 errors / 62% coverage ] ****** [812 done /579 queued / 16 running / 811 errors / 62% coverage ] ****** [813 done /580 queued / 16 running / 812 errors / 62% coverage ] ****** [813 done /580 queued / 16 running / 812 errors / 62% coverage ] ****** [814 done /580 queued / 16 running / 813 errors / 62% coverage ] ****** [814 done /580 queued / 16 running / 813 errors / 62% coverage ] ****** [815 done /581 queued / 16 running / 814 errors / 62% coverage ] ****** [815 done /581 queued / 16 running / 814 errors / 62% coverage ] ****** [816 done /581 queued / 16 running / 815 errors / 62% coverage ] ****** [816 done /581 queued / 16 running / 815 errors / 62% coverage ] ****** [817 done /584 queued / 16 running / 816 errors / 62% coverage ] ****** [817 done /584 queued / 16 running / 816 errors / 62% coverage ] ****** [818 done /584 queued / 16 running / 817 errors / 62% coverage ] ****** [818 done /584 queued / 16 running / 817 errors / 62% coverage ] ****** [819 done /588 queued / 16 running / 818 errors / 62% coverage ] ****** [819 done /588 queued / 16 running / 818 errors / 62% coverage ] ****** [820 done /588 queued / 16 running / 819 errors / 62% coverage ] ****** [820 done /588 queued / 16 running / 819 errors / 62% coverage ] ****** [821 done /587 queued / 16 running / 820 errors / 62% coverage ] ****** [821 done /587 queued / 16 running / 820 errors / 62% coverage ] ****** [822 done /587 queued / 16 running / 821 errors / 62% coverage ] ****** [822 done /587 queued / 16 running / 821 errors / 62% coverage ] ****** [823 done /586 queued / 16 running / 822 errors / 62% coverage ] ****** [823 done /586 queued / 16 running / 822 errors / 62% coverage ] ****** [824 done /587 queued / 16 running / 823 errors / 62% coverage ] ****** [824 done /587 queued / 16 running / 823 errors / 62% coverage ] ****** [825 done /588 queued / 16 running / 824 errors / 62% coverage ] ****** [825 done /588 queued / 16 running / 824 errors / 62% coverage ] ****** [826 done /588 queued / 16 running / 825 errors / 62% coverage ] ****** [826 done /588 queued / 16 running / 825 errors / 62% coverage ] ****** [827 done /588 queued / 16 running / 826 errors / 62% coverage ] ****** [827 done /588 queued / 16 running / 826 errors / 62% coverage ] ****** [828 done /589 queued / 16 running / 827 errors / 62% coverage ] ****** [828 done /589 queued / 16 running / 827 errors / 62% coverage ] ****** [829 done /589 queued / 16 running / 828 errors / 62% coverage ] ****** [829 done /589 queued / 16 running / 828 errors / 62% coverage ] ****** [830 done /589 queued / 16 running / 829 errors / 62% coverage ] ****** [830 done /589 queued / 16 running / 829 errors / 62% coverage ] ****** [831 done /589 queued / 16 running / 830 errors / 62% coverage ] ****** [831 done /589 queued / 16 running / 830 errors / 62% coverage ] ****** [832 done /588 queued / 16 running / 831 errors / 62% coverage ] ****** [832 done /588 queued / 16 running / 831 errors / 62% coverage ] ****** [833 done /587 queued / 16 running / 832 errors / 62% coverage ] ****** [833 done /587 queued / 16 running / 832 errors / 62% coverage ] ****** [834 done /587 queued / 16 running / 833 errors / 62% coverage ] ****** [834 done /587 queued / 16 running / 833 errors / 62% coverage ] ****** [835 done /588 queued / 16 running / 834 errors / 62% coverage ] ****** [835 done /588 queued / 16 running / 834 errors / 62% coverage ] ****** [836 done /589 queued / 16 running / 835 errors / 62% coverage ] ****** [836 done /589 queued / 16 running / 835 errors / 62% coverage ] ****** [837 done /589 queued / 16 running / 836 errors / 62% coverage ] ****** [837 done /589 queued / 16 running / 836 errors / 62% coverage ] ****** [838 done /590 queued / 16 running / 837 errors / 62% coverage ] ****** [838 done /590 queued / 16 running / 837 errors / 62% coverage ] ****** [839 done /592 queued / 16 running / 838 errors / 62% coverage ] ****** [839 done /592 queued / 16 running / 838 errors / 62% coverage ] ****** [840 done /593 queued / 16 running / 839 errors / 62% coverage ] ****** [840 done /593 queued / 16 running / 839 errors / 62% coverage ] ****** [841 done /595 queued / 16 running / 840 errors / 62% coverage ] ****** [841 done /595 queued / 16 running / 840 errors / 62% coverage ] ****** [842 done /595 queued / 16 running / 841 errors / 62% coverage ] ****** [842 done /595 queued / 16 running / 841 errors / 62% coverage ] ****** [843 done /595 queued / 16 running / 842 errors / 62% coverage ] ****** [843 done /595 queued / 16 running / 842 errors / 62% coverage ] ****** [844 done /594 queued / 16 running / 843 errors / 62% coverage ] ****** [844 done /594 queued / 16 running / 843 errors / 62% coverage ] ****** [845 done /594 queued / 16 running / 844 errors / 62% coverage ] ****** [845 done /594 queued / 16 running / 844 errors / 62% coverage ] ****** [846 done /593 queued / 16 running / 845 errors / 62% coverage ] ****** [846 done /593 queued / 16 running / 845 errors / 62% coverage ] ****** [847 done /592 queued / 16 running / 846 errors / 62% coverage ] ****** [847 done /592 queued / 16 running / 846 errors / 62% coverage ] ****** [848 done /592 queued / 16 running / 847 errors / 62% coverage ] ****** [848 done /592 queued / 16 running / 847 errors / 62% coverage ] ****** [849 done /593 queued / 16 running / 848 errors / 62% coverage ] ****** [849 done /593 queued / 16 running / 848 errors / 62% coverage ] ****** [850 done /594 queued / 16 running / 849 errors / 62% coverage ] ****** [850 done /594 queued / 16 running / 849 errors / 62% coverage ] ****** [851 done /594 queued / 16 running / 850 errors / 62% coverage ] ****** [851 done /594 queued / 16 running / 850 errors / 62% coverage ] ****** [852 done /594 queued / 16 running / 851 errors / 62% coverage ] ****** [852 done /594 queued / 16 running / 851 errors / 62% coverage ] ****** [853 done /596 queued / 16 running / 852 errors / 62% coverage ] ****** [853 done /596 queued / 16 running / 852 errors / 62% coverage ] ****** [854 done /597 queued / 16 running / 853 errors / 62% coverage ] ****** [854 done /597 queued / 16 running / 853 errors / 62% coverage ] ****** [855 done /596 queued / 16 running / 854 errors / 62% coverage ] ****** [855 done /596 queued / 16 running / 854 errors / 62% coverage ] ****** [856 done /597 queued / 16 running / 855 errors / 62% coverage ] ****** [856 done /597 queued / 16 running / 855 errors / 62% coverage ] ****** [857 done /598 queued / 16 running / 856 errors / 62% coverage ] ****** [857 done /598 queued / 16 running / 856 errors / 62% coverage ] ****** [858 done /599 queued / 16 running / 857 errors / 62% coverage ] ****** [858 done /599 queued / 16 running / 857 errors / 62% coverage ] ****** [859 done /599 queued / 16 running / 858 errors / 62% coverage ] ****** [859 done /599 queued / 16 running / 858 errors / 62% coverage ] ****** [860 done /599 queued / 16 running / 859 errors / 62% coverage ] ****** [860 done /599 queued / 16 running / 859 errors / 62% coverage ] ****** [861 done /599 queued / 16 running / 860 errors / 62% coverage ] ****** [861 done /599 queued / 16 running / 860 errors / 62% coverage ] ****** [862 done /602 queued / 16 running / 861 errors / 62% coverage ] ****** [862 done /602 queued / 16 running / 861 errors / 62% coverage ] ****** [863 done /603 queued / 16 running / 862 errors / 62% coverage ] ****** [863 done /603 queued / 16 running / 862 errors / 62% coverage ] ****** [864 done /604 queued / 16 running / 863 errors / 62% coverage ] ****** [864 done /604 queued / 16 running / 863 errors / 62% coverage ] ****** [865 done /604 queued / 16 running / 864 errors / 62% coverage ] ****** [865 done /604 queued / 16 running / 864 errors / 62% coverage ] ****** [866 done /603 queued / 16 running / 865 errors / 62% coverage ] ****** [866 done /603 queued / 16 running / 865 errors / 62% coverage ] ****** [867 done /605 queued / 16 running / 866 errors / 62% coverage ] ****** [867 done /605 queued / 16 running / 866 errors / 62% coverage ] ****** [868 done /605 queued / 16 running / 867 errors / 62% coverage ] ****** [868 done /605 queued / 16 running / 867 errors / 62% coverage ] ****** [869 done /607 queued / 16 running / 868 errors / 62% coverage ] ****** [869 done /607 queued / 16 running / 868 errors / 62% coverage ] ****** [870 done /608 queued / 16 running / 869 errors / 62% coverage ] ****** [870 done /608 queued / 16 running / 869 errors / 62% coverage ] ****** [871 done /610 queued / 16 running / 870 errors / 62% coverage ] ****** [871 done /610 queued / 16 running / 870 errors / 62% coverage ] ****** [872 done /612 queued / 16 running / 871 errors / 62% coverage ] ****** [872 done /612 queued / 16 running / 871 errors / 62% coverage ] ****** [873 done /612 queued / 16 running / 872 errors / 62% coverage ] ****** [873 done /612 queued / 16 running / 872 errors / 62% coverage ] ****** [874 done /616 queued / 16 running / 873 errors / 62% coverage ] ****** [874 done /616 queued / 16 running / 873 errors / 62% coverage ] ****** [875 done /618 queued / 16 running / 874 errors / 62% coverage ] ****** [875 done /618 queued / 16 running / 874 errors / 62% coverage ] ****** [876 done /620 queued / 16 running / 875 errors / 62% coverage ] ****** [876 done /620 queued / 16 running / 875 errors / 62% coverage ] ****** [877 done /620 queued / 16 running / 876 errors / 62% coverage ] ****** [877 done /620 queued / 16 running / 876 errors / 62% coverage ] ****** [878 done /620 queued / 16 running / 877 errors / 62% coverage ] ****** [878 done /620 queued / 16 running / 877 errors / 62% coverage ] ****** [879 done /624 queued / 16 running / 878 errors / 62% coverage ] ****** [879 done /624 queued / 16 running / 878 errors / 62% coverage ] ****** [880 done /627 queued / 16 running / 879 errors / 62% coverage ] ****** [880 done /627 queued / 16 running / 879 errors / 62% coverage ] ****** [881 done /626 queued / 16 running / 880 errors / 62% coverage ] ****** [881 done /626 queued / 16 running / 880 errors / 62% coverage ] ****** [882 done /625 queued / 16 running / 881 errors / 62% coverage ] ****** [882 done /625 queued / 16 running / 881 errors / 62% coverage ] ****** [883 done /625 queued / 16 running / 882 errors / 62% coverage ] ****** [883 done /625 queued / 16 running / 882 errors / 62% coverage ] ****** [884 done /628 queued / 16 running / 883 errors / 62% coverage ] ****** [884 done /628 queued / 16 running / 883 errors / 62% coverage ] ****** [885 done /630 queued / 16 running / 884 errors / 62% coverage ] ****** [885 done /630 queued / 16 running / 884 errors / 62% coverage ] ****** [886 done /629 queued / 16 running / 885 errors / 62% coverage ] ****** [886 done /629 queued / 16 running / 885 errors / 62% coverage ] ****** [887 done /629 queued / 16 running / 886 errors / 62% coverage ] ****** [887 done /629 queued / 16 running / 886 errors / 62% coverage ] ****** [888 done /630 queued / 16 running / 887 errors / 62% coverage ] ****** [888 done /630 queued / 16 running / 887 errors / 62% coverage ] ****** [889 done /631 queued / 16 running / 888 errors / 62% coverage ] ****** [889 done /631 queued / 16 running / 888 errors / 62% coverage ] ****** [890 done /632 queued / 16 running / 889 errors / 62% coverage ] ****** [890 done /632 queued / 16 running / 889 errors / 62% coverage ] ****** [891 done /633 queued / 16 running / 890 errors / 62% coverage ] ****** [891 done /633 queued / 16 running / 890 errors / 62% coverage ] ****** [892 done /632 queued / 16 running / 891 errors / 62% coverage ] ****** [892 done /632 queued / 16 running / 891 errors / 62% coverage ] ****** [893 done /632 queued / 16 running / 892 errors / 62% coverage ] ****** [893 done /632 queued / 16 running / 892 errors / 62% coverage ] ****** [894 done /631 queued / 16 running / 893 errors / 62% coverage ] ****** [894 done /631 queued / 16 running / 893 errors / 62% coverage ] ****** [895 done /631 queued / 16 running / 894 errors / 62% coverage ] ****** [895 done /631 queued / 16 running / 894 errors / 62% coverage ] ****** [896 done /630 queued / 16 running / 895 errors / 62% coverage ] ****** [896 done /630 queued / 16 running / 895 errors / 62% coverage ] ****** [897 done /630 queued / 16 running / 896 errors / 62% coverage ] ****** [897 done /630 queued / 16 running / 896 errors / 62% coverage ] ****** [898 done /630 queued / 16 running / 897 errors / 62% coverage ] ****** [898 done /630 queued / 16 running / 897 errors / 62% coverage ] ****** [899 done /632 queued / 16 running / 898 errors / 62% coverage ] ****** [899 done /632 queued / 16 running / 898 errors / 62% coverage ] ****** [900 done /634 queued / 16 running / 899 errors / 62% coverage ] ****** [900 done /634 queued / 16 running / 899 errors / 62% coverage ] ****** [901 done /635 queued / 16 running / 900 errors / 62% coverage ] ****** [901 done /635 queued / 16 running / 900 errors / 62% coverage ] ****** [902 done /640 queued / 16 running / 901 errors / 62% coverage ] ****** [902 done /640 queued / 16 running / 901 errors / 62% coverage ] ****** [903 done /641 queued / 16 running / 902 errors / 62% coverage ] ****** [903 done /641 queued / 16 running / 902 errors / 62% coverage ] ****** [904 done /640 queued / 16 running / 903 errors / 62% coverage ] ****** [904 done /640 queued / 16 running / 903 errors / 62% coverage ] ****** [905 done /642 queued / 16 running / 904 errors / 62% coverage ] ****** [905 done /642 queued / 16 running / 904 errors / 62% coverage ] ****** [906 done /642 queued / 16 running / 905 errors / 62% coverage ] ****** [906 done /642 queued / 16 running / 905 errors / 62% coverage ] ****** [907 done /642 queued / 16 running / 906 errors / 62% coverage ] ****** [907 done /642 queued / 16 running / 906 errors / 62% coverage ] ****** [908 done /643 queued / 16 running / 907 errors / 62% coverage ] ****** [908 done /643 queued / 16 running / 907 errors / 62% coverage ] ****** [909 done /646 queued / 16 running / 908 errors / 62% coverage ] ****** [909 done /646 queued / 16 running / 908 errors / 62% coverage ] ****** [910 done /647 queued / 16 running / 909 errors / 62% coverage ] ****** [910 done /647 queued / 16 running / 909 errors / 62% coverage ] ****** [911 done /648 queued / 16 running / 910 errors / 62% coverage ] ****** [911 done /648 queued / 16 running / 910 errors / 62% coverage ] ****** [912 done /649 queued / 16 running / 911 errors / 62% coverage ] ****** [912 done /649 queued / 16 running / 911 errors / 62% coverage ] ****** [913 done /649 queued / 16 running / 912 errors / 62% coverage ] ****** [913 done /649 queued / 16 running / 912 errors / 62% coverage ] ****** [914 done /650 queued / 16 running / 913 errors / 62% coverage ] ****** [914 done /650 queued / 16 running / 913 errors / 62% coverage ] ****** [915 done /650 queued / 16 running / 914 errors / 62% coverage ] ****** [915 done /650 queued / 16 running / 914 errors / 62% coverage ] ****** [916 done /651 queued / 16 running / 915 errors / 62% coverage ] ****** [916 done /651 queued / 16 running / 915 errors / 62% coverage ] ****** [917 done /655 queued / 16 running / 916 errors / 62% coverage ] ****** [917 done /655 queued / 16 running / 916 errors / 62% coverage ] ****** [918 done /658 queued / 16 running / 917 errors / 62% coverage ] ****** [918 done /658 queued / 16 running / 917 errors / 62% coverage ] ****** [919 done /660 queued / 16 running / 918 errors / 62% coverage ] ****** [919 done /660 queued / 16 running / 918 errors / 62% coverage ] ****** [920 done /661 queued / 16 running / 919 errors / 62% coverage ] ****** [920 done /661 queued / 16 running / 919 errors / 62% coverage ] ****** [921 done /663 queued / 16 running / 920 errors / 62% coverage ] ****** [921 done /663 queued / 16 running / 920 errors / 62% coverage ] ****** [922 done /664 queued / 16 running / 921 errors / 62% coverage ] ****** [922 done /664 queued / 16 running / 921 errors / 62% coverage ] ****** [923 done /663 queued / 16 running / 922 errors / 62% coverage ] ****** [923 done /663 queued / 16 running / 922 errors / 62% coverage ] ****** [924 done /664 queued / 16 running / 923 errors / 62% coverage ] ****** [924 done /664 queued / 16 running / 923 errors / 62% coverage ] ****** [925 done /664 queued / 16 running / 924 errors / 62% coverage ] ****** [925 done /664 queued / 16 running / 924 errors / 62% coverage ] ****** [926 done /667 queued / 16 running / 925 errors / 62% coverage ] ****** [926 done /667 queued / 16 running / 925 errors / 62% coverage ] ****** [927 done /667 queued / 16 running / 926 errors / 62% coverage ] ****** [927 done /667 queued / 16 running / 926 errors / 62% coverage ] ****** [928 done /668 queued / 16 running / 927 errors / 62% coverage ] ****** [928 done /668 queued / 16 running / 927 errors / 62% coverage ] ****** [929 done /670 queued / 16 running / 928 errors / 62% coverage ] ****** [929 done /670 queued / 16 running / 928 errors / 62% coverage ] ****** [930 done /671 queued / 16 running / 929 errors / 62% coverage ] ****** [930 done /671 queued / 16 running / 929 errors / 62% coverage ] ****** [931 done /671 queued / 16 running / 930 errors / 62% coverage ] ****** [931 done /671 queued / 16 running / 930 errors / 62% coverage ] ****** [932 done /671 queued / 16 running / 931 errors / 62% coverage ] ****** [932 done /671 queued / 16 running / 931 errors / 62% coverage ] ****** [933 done /672 queued / 16 running / 932 errors / 62% coverage ] ****** [933 done /672 queued / 16 running / 932 errors / 62% coverage ] ****** [934 done /672 queued / 16 running / 933 errors / 62% coverage ] ****** [934 done /672 queued / 16 running / 933 errors / 62% coverage ] ****** [935 done /673 queued / 16 running / 934 errors / 62% coverage ] ****** [935 done /673 queued / 16 running / 934 errors / 62% coverage ] ****** [936 done /672 queued / 16 running / 935 errors / 62% coverage ] ****** [936 done /672 queued / 16 running / 935 errors / 62% coverage ] ****** [937 done /671 queued / 16 running / 936 errors / 62% coverage ] ****** [937 done /671 queued / 16 running / 936 errors / 62% coverage ] ****** [938 done /670 queued / 16 running / 937 errors / 62% coverage ] ****** [938 done /670 queued / 16 running / 937 errors / 62% coverage ] ****** [939 done /670 queued / 16 running / 938 errors / 62% coverage ] ****** [939 done /670 queued / 16 running / 938 errors / 62% coverage ] ****** [940 done /671 queued / 16 running / 939 errors / 62% coverage ] ****** [940 done /671 queued / 16 running / 939 errors / 62% coverage ] ****** [941 done /675 queued / 16 running / 940 errors / 62% coverage ] ****** [941 done /675 queued / 16 running / 940 errors / 62% coverage ] ****** [942 done /674 queued / 16 running / 941 errors / 62% coverage ] ****** [942 done /674 queued / 16 running / 941 errors / 62% coverage ] ****** [943 done /675 queued / 16 running / 942 errors / 62% coverage ] ****** [943 done /675 queued / 16 running / 942 errors / 62% coverage ] ****** [944 done /675 queued / 16 running / 943 errors / 62% coverage ] ****** [944 done /675 queued / 16 running / 943 errors / 62% coverage ] ****** [945 done /678 queued / 16 running / 944 errors / 62% coverage ] ****** [945 done /678 queued / 16 running / 944 errors / 62% coverage ] ****** [946 done /677 queued / 16 running / 945 errors / 62% coverage ] ****** [946 done /677 queued / 16 running / 945 errors / 62% coverage ] ****** [947 done /681 queued / 16 running / 946 errors / 62% coverage ] ****** [947 done /681 queued / 16 running / 946 errors / 62% coverage ] ****** [948 done /682 queued / 16 running / 947 errors / 62% coverage ] ****** [948 done /682 queued / 16 running / 947 errors / 62% coverage ] ****** [949 done /681 queued / 16 running / 948 errors / 62% coverage ] ****** [949 done /681 queued / 16 running / 948 errors / 62% coverage ] ****** [950 done /683 queued / 16 running / 949 errors / 62% coverage ] ****** [950 done /683 queued / 16 running / 949 errors / 62% coverage ] ****** [951 done /685 queued / 16 running / 950 errors / 62% coverage ] ****** [951 done /685 queued / 16 running / 950 errors / 62% coverage ] ****** [952 done /687 queued / 16 running / 951 errors / 62% coverage ] ****** [952 done /687 queued / 16 running / 951 errors / 62% coverage ] ****** [953 done /687 queued / 16 running / 952 errors / 62% coverage ] ****** [953 done /687 queued / 16 running / 952 errors / 62% coverage ] ****** [954 done /688 queued / 16 running / 953 errors / 62% coverage ] ****** [954 done /688 queued / 16 running / 953 errors / 62% coverage ] ****** [955 done /689 queued / 16 running / 954 errors / 62% coverage ] ****** [955 done /689 queued / 16 running / 954 errors / 62% coverage ] ****** [956 done /691 queued / 16 running / 955 errors / 62% coverage ] ****** [956 done /691 queued / 16 running / 955 errors / 62% coverage ] ****** [957 done /692 queued / 16 running / 956 errors / 62% coverage ] ****** [957 done /692 queued / 16 running / 956 errors / 62% coverage ] ****** [958 done /694 queued / 16 running / 957 errors / 62% coverage ] ****** [958 done /694 queued / 16 running / 957 errors / 62% coverage ] ****** [959 done /694 queued / 16 running / 958 errors / 62% coverage ] ****** [959 done /694 queued / 16 running / 958 errors / 62% coverage ] ****** [960 done /695 queued / 16 running / 959 errors / 62% coverage ] ****** [960 done /695 queued / 16 running / 959 errors / 62% coverage ] ****** [961 done /696 queued / 16 running / 960 errors / 62% coverage ] ****** [961 done /696 queued / 16 running / 960 errors / 62% coverage ] ****** [962 done /698 queued / 16 running / 961 errors / 62% coverage ] ****** [962 done /698 queued / 16 running / 961 errors / 62% coverage ] ****** [963 done /697 queued / 16 running / 962 errors / 62% coverage ] ****** [963 done /697 queued / 16 running / 962 errors / 62% coverage ] ****** [964 done /699 queued / 16 running / 963 errors / 62% coverage ] ****** [964 done /699 queued / 16 running / 963 errors / 62% coverage ] ****** [965 done /701 queued / 16 running / 964 errors / 62% coverage ] ****** [965 done /701 queued / 16 running / 964 errors / 62% coverage ] ****** [966 done /702 queued / 16 running / 965 errors / 62% coverage ] ****** [966 done /702 queued / 16 running / 965 errors / 62% coverage ] ****** [967 done /702 queued / 16 running / 966 errors / 62% coverage ] ****** [967 done /702 queued / 16 running / 966 errors / 62% coverage ] ****** [968 done /702 queued / 16 running / 967 errors / 62% coverage ] ****** [968 done /702 queued / 16 running / 967 errors / 62% coverage ] ****** [969 done /704 queued / 16 running / 968 errors / 62% coverage ] ****** [969 done /704 queued / 16 running / 968 errors / 62% coverage ] ****** [970 done /706 queued / 16 running / 969 errors / 62% coverage ] ****** [970 done /706 queued / 16 running / 969 errors / 62% coverage ] ****** [971 done /705 queued / 16 running / 970 errors / 62% coverage ] ****** [971 done /705 queued / 16 running / 970 errors / 62% coverage ] ****** [972 done /704 queued / 16 running / 971 errors / 62% coverage ] ****** [972 done /704 queued / 16 running / 971 errors / 62% coverage ] ****** [973 done /704 queued / 16 running / 972 errors / 62% coverage ] ****** [973 done /704 queued / 16 running / 972 errors / 62% coverage ] ****** [974 done /703 queued / 16 running / 973 errors / 62% coverage ] ****** [974 done /703 queued / 16 running / 973 errors / 62% coverage ] ****** [975 done /703 queued / 16 running / 974 errors / 62% coverage ] ****** [975 done /703 queued / 16 running / 974 errors / 62% coverage ] ****** [976 done /706 queued / 16 running / 975 errors / 62% coverage ] ****** [976 done /706 queued / 16 running / 975 errors / 62% coverage ] ****** [977 done /708 queued / 16 running / 976 errors / 62% coverage ] ****** [977 done /708 queued / 16 running / 976 errors / 62% coverage ] ****** [978 done /711 queued / 16 running / 977 errors / 62% coverage ] ****** [978 done /711 queued / 16 running / 977 errors / 62% coverage ] ****** [979 done /711 queued / 16 running / 978 errors / 62% coverage ] ****** [979 done /711 queued / 16 running / 978 errors / 62% coverage ] ****** [980 done /712 queued / 16 running / 979 errors / 62% coverage ] ****** [980 done /712 queued / 16 running / 979 errors / 62% coverage ] ****** [981 done /714 queued / 16 running / 980 errors / 62% coverage ] ****** [981 done /714 queued / 16 running / 980 errors / 62% coverage ] ****** [982 done /714 queued / 16 running / 981 errors / 62% coverage ] ****** [982 done /714 queued / 16 running / 981 errors / 62% coverage ] ****** [983 done /718 queued / 16 running / 982 errors / 62% coverage ] ****** [983 done /718 queued / 16 running / 982 errors / 62% coverage ] ****** [984 done /719 queued / 16 running / 983 errors / 62% coverage ] ****** [984 done /719 queued / 16 running / 983 errors / 62% coverage ] ****** [985 done /720 queued / 16 running / 984 errors / 62% coverage ] ****** [985 done /720 queued / 16 running / 984 errors / 62% coverage ] ****** [986 done /724 queued / 16 running / 985 errors / 62% coverage ] ****** [986 done /724 queued / 16 running / 985 errors / 62% coverage ] ****** [987 done /723 queued / 16 running / 986 errors / 62% coverage ] ****** [987 done /723 queued / 16 running / 986 errors / 62% coverage ] ****** [988 done /725 queued / 16 running / 987 errors / 62% coverage ] ****** [988 done /725 queued / 16 running / 987 errors / 62% coverage ] ****** [989 done /725 queued / 16 running / 988 errors / 62% coverage ] ****** [989 done /725 queued / 16 running / 988 errors / 62% coverage ] ****** [990 done /724 queued / 16 running / 989 errors / 62% coverage ] ****** [990 done /724 queued / 16 running / 989 errors / 62% coverage ] ****** [991 done /727 queued / 16 running / 990 errors / 62% coverage ] ****** [991 done /727 queued / 16 running / 990 errors / 62% coverage ] ****** [992 done /727 queued / 16 running / 991 errors / 62% coverage ] ****** [992 done /727 queued / 16 running / 991 errors / 62% coverage ] ****** [993 done /729 queued / 16 running / 992 errors / 62% coverage ] ****** [993 done /729 queued / 16 running / 992 errors / 62% coverage ] ****** [994 done /729 queued / 16 running / 993 errors / 62% coverage ] ****** [994 done /729 queued / 16 running / 993 errors / 62% coverage ] ****** [995 done /729 queued / 16 running / 994 errors / 62% coverage ] ****** [995 done /729 queued / 16 running / 994 errors / 62% coverage ] ****** [996 done /729 queued / 16 running / 995 errors / 62% coverage ] ****** [996 done /729 queued / 16 running / 995 errors / 62% coverage ] ****** [997 done /730 queued / 16 running / 996 errors / 62% coverage ] ****** [997 done /730 queued / 16 running / 996 errors / 62% coverage ] ****** [998 done /731 queued / 16 running / 997 errors / 62% coverage ] ****** [998 done /731 queued / 16 running / 997 errors / 62% coverage ] ****** [999 done /730 queued / 16 running / 998 errors / 62% coverage ] ****** [999 done /730 queued / 16 running / 998 errors / 62% coverage ] ****** [1000 done /730 queued / 16 running / 999 errors / 62% coverage ] ****** [1000 done /730 queued / 16 running / 999 errors / 62% coverage ] ****** [1001 done /730 queued / 16 running / 1000 errors / 62% coverage ] ****** [1001 done /730 queued / 16 running / 1000 errors / 62% coverage ] ****** [1002 done /729 queued / 16 running / 1001 errors / 62% coverage ] ****** [1002 done /729 queued / 16 running / 1001 errors / 62% coverage ] ****** [1003 done /731 queued / 16 running / 1002 errors / 62% coverage ] ****** [1003 done /731 queued / 16 running / 1002 errors / 62% coverage ] ****** [1004 done /730 queued / 16 running / 1003 errors / 62% coverage ] ****** [1004 done /730 queued / 16 running / 1003 errors / 62% coverage ] ****** [1005 done /730 queued / 16 running / 1004 errors / 62% coverage ] ****** [1005 done /730 queued / 16 running / 1004 errors / 62% coverage ] ****** [1006 done /731 queued / 16 running / 1005 errors / 62% coverage ] ****** [1006 done /731 queued / 16 running / 1005 errors / 62% coverage ] ****** [1007 done /732 queued / 16 running / 1006 errors / 62% coverage ] ****** [1007 done /732 queued / 16 running / 1006 errors / 62% coverage ] ****** [1008 done /732 queued / 16 running / 1007 errors / 62% coverage ] ****** [1008 done /732 queued / 16 running / 1007 errors / 62% coverage ] ****** [1009 done /734 queued / 16 running / 1008 errors / 62% coverage ] ****** [1009 done /734 queued / 16 running / 1008 errors / 62% coverage ] ****** [1010 done /736 queued / 16 running / 1009 errors / 62% coverage ] ****** [1010 done /736 queued / 16 running / 1009 errors / 62% coverage ] ****** [1011 done /738 queued / 16 running / 1010 errors / 62% coverage ] ****** [1011 done /738 queued / 16 running / 1010 errors / 62% coverage ] ****** [1012 done /738 queued / 16 running / 1011 errors / 62% coverage ] ****** [1012 done /738 queued / 16 running / 1011 errors / 62% coverage ] ****** [1013 done /739 queued / 16 running / 1012 errors / 62% coverage ] ****** [1013 done /739 queued / 16 running / 1012 errors / 62% coverage ] ****** [1014 done /739 queued / 16 running / 1013 errors / 62% coverage ] ****** [1014 done /739 queued / 16 running / 1013 errors / 62% coverage ] ****** [1015 done /740 queued / 16 running / 1014 errors / 62% coverage ] ****** [1015 done /740 queued / 16 running / 1014 errors / 62% coverage ] ****** [1016 done /741 queued / 16 running / 1015 errors / 62% coverage ] ****** [1016 done /741 queued / 16 running / 1015 errors / 62% coverage ] ****** [1017 done /742 queued / 16 running / 1016 errors / 62% coverage ] ****** [1017 done /742 queued / 16 running / 1016 errors / 62% coverage ] ****** [1018 done /742 queued / 16 running / 1017 errors / 62% coverage ] ****** [1018 done /742 queued / 16 running / 1017 errors / 62% coverage ] ****** [1019 done /742 queued / 16 running / 1018 errors / 62% coverage ] ****** [1019 done /742 queued / 16 running / 1018 errors / 62% coverage ] ****** [1020 done /745 queued / 16 running / 1019 errors / 62% coverage ] ****** [1020 done /745 queued / 16 running / 1019 errors / 62% coverage ] ****** [1021 done /747 queued / 16 running / 1020 errors / 62% coverage ] ****** [1021 done /747 queued / 16 running / 1020 errors / 62% coverage ] ****** [1022 done /747 queued / 16 running / 1021 errors / 62% coverage ] ****** [1022 done /747 queued / 16 running / 1021 errors / 62% coverage ] ****** [1023 done /746 queued / 16 running / 1022 errors / 62% coverage ] ****** [1023 done /746 queued / 16 running / 1022 errors / 62% coverage ] ****** [1024 done /748 queued / 16 running / 1023 errors / 62% coverage ] ****** [1024 done /748 queued / 16 running / 1023 errors / 62% coverage ] ****** [1025 done /749 queued / 16 running / 1024 errors / 62% coverage ] ****** [1025 done /749 queued / 16 running / 1024 errors / 62% coverage ] ****** [1026 done /748 queued / 16 running / 1025 errors / 62% coverage ] ****** [1026 done /748 queued / 16 running / 1025 errors / 62% coverage ] ****** [1027 done /749 queued / 16 running / 1026 errors / 62% coverage ] ****** [1027 done /749 queued / 16 running / 1026 errors / 62% coverage ] ****** [1028 done /749 queued / 16 running / 1027 errors / 62% coverage ] ****** [1028 done /749 queued / 16 running / 1027 errors / 62% coverage ] ****** [1029 done /752 queued / 16 running / 1028 errors / 62% coverage ] ****** [1029 done /752 queued / 16 running / 1028 errors / 62% coverage ] ****** [1030 done /753 queued / 16 running / 1029 errors / 62% coverage ] ****** [1030 done /753 queued / 16 running / 1029 errors / 62% coverage ] ****** [1031 done /755 queued / 16 running / 1030 errors / 62% coverage ] ****** [1031 done /755 queued / 16 running / 1030 errors / 62% coverage ] ****** [1032 done /759 queued / 16 running / 1031 errors / 62% coverage ] ****** [1032 done /759 queued / 16 running / 1031 errors / 62% coverage ] ****** [1033 done /761 queued / 16 running / 1032 errors / 62% coverage ] ****** [1033 done /761 queued / 16 running / 1032 errors / 62% coverage ] ****** [1034 done /763 queued / 16 running / 1033 errors / 62% coverage ] ****** [1034 done /763 queued / 16 running / 1033 errors / 62% coverage ] ****** [1035 done /764 queued / 16 running / 1034 errors / 62% coverage ] ****** [1035 done /764 queued / 16 running / 1034 errors / 62% coverage ] ****** [1036 done /766 queued / 16 running / 1035 errors / 62% coverage ] ****** [1036 done /766 queued / 16 running / 1035 errors / 62% coverage ] ****** [1037 done /768 queued / 16 running / 1036 errors / 62% coverage ] ****** [1037 done /768 queued / 16 running / 1036 errors / 62% coverage ] ****** [1038 done /768 queued / 16 running / 1037 errors / 62% coverage ] ****** [1038 done /768 queued / 16 running / 1037 errors / 62% coverage ] ****** [1039 done /772 queued / 16 running / 1038 errors / 62% coverage ] ****** [1039 done /772 queued / 16 running / 1038 errors / 62% coverage ] ****** [1040 done /773 queued / 16 running / 1039 errors / 62% coverage ] ****** [1040 done /773 queued / 16 running / 1039 errors / 62% coverage ] ****** [1041 done /774 queued / 16 running / 1040 errors / 62% coverage ] ****** [1041 done /774 queued / 16 running / 1040 errors / 62% coverage ] ****** [1042 done /776 queued / 16 running / 1041 errors / 62% coverage ] ****** [1042 done /776 queued / 16 running / 1041 errors / 62% coverage ] ****** [1043 done /777 queued / 16 running / 1042 errors / 62% coverage ] ****** [1043 done /777 queued / 16 running / 1042 errors / 62% coverage ] ****** [1044 done /780 queued / 16 running / 1043 errors / 62% coverage ] ****** [1044 done /780 queued / 16 running / 1043 errors / 62% coverage ] ****** [1045 done /781 queued / 16 running / 1044 errors / 62% coverage ] ****** [1045 done /781 queued / 16 running / 1044 errors / 62% coverage ] ****** [1046 done /780 queued / 16 running / 1045 errors / 62% coverage ] ****** [1046 done /780 queued / 16 running / 1045 errors / 62% coverage ] ****** [1047 done /780 queued / 16 running / 1046 errors / 62% coverage ] ****** [1047 done /780 queued / 16 running / 1046 errors / 62% coverage ] ****** [1048 done /783 queued / 16 running / 1047 errors / 62% coverage ] ****** [1048 done /783 queued / 16 running / 1047 errors / 62% coverage ] ****** [1049 done /785 queued / 16 running / 1048 errors / 62% coverage ] ****** [1049 done /785 queued / 16 running / 1048 errors / 62% coverage ] ****** [1050 done /787 queued / 16 running / 1049 errors / 62% coverage ] ****** [1050 done /787 queued / 16 running / 1049 errors / 62% coverage ] ****** [1051 done /788 queued / 16 running / 1050 errors / 62% coverage ] ****** [1051 done /788 queued / 16 running / 1050 errors / 62% coverage ] ****** [1052 done /788 queued / 16 running / 1051 errors / 62% coverage ] ****** [1052 done /788 queued / 16 running / 1051 errors / 62% coverage ] ****** [1053 done /790 queued / 16 running / 1052 errors / 62% coverage ] ****** [1053 done /790 queued / 16 running / 1052 errors / 62% coverage ] ****** [1054 done /793 queued / 16 running / 1053 errors / 62% coverage ] ****** [1054 done /793 queued / 16 running / 1053 errors / 62% coverage ] ****** [1055 done /795 queued / 16 running / 1054 errors / 62% coverage ] ****** [1055 done /795 queued / 16 running / 1054 errors / 62% coverage ] ****** [1056 done /795 queued / 16 running / 1055 errors / 62% coverage ] ****** [1056 done /795 queued / 16 running / 1055 errors / 62% coverage ] ****** [1057 done /797 queued / 16 running / 1056 errors / 62% coverage ] ****** [1057 done /797 queued / 16 running / 1056 errors / 62% coverage ] ****** [1058 done /797 queued / 16 running / 1057 errors / 62% coverage ] ****** [1058 done /797 queued / 16 running / 1057 errors / 62% coverage ] ****** [1059 done /798 queued / 16 running / 1058 errors / 62% coverage ] ****** [1059 done /798 queued / 16 running / 1058 errors / 62% coverage ] ****** [1060 done /798 queued / 16 running / 1059 errors / 62% coverage ] ****** [1060 done /798 queued / 16 running / 1059 errors / 62% coverage ] ****** [1061 done /799 queued / 16 running / 1060 errors / 62% coverage ] ****** [1061 done /799 queued / 16 running / 1060 errors / 62% coverage ] ****** [1062 done /799 queued / 16 running / 1061 errors / 62% coverage ] ****** [1062 done /799 queued / 16 running / 1061 errors / 62% coverage ] ****** [1063 done /799 queued / 16 running / 1062 errors / 62% coverage ] ****** [1063 done /799 queued / 16 running / 1062 errors / 62% coverage ] ****** [1064 done /801 queued / 16 running / 1063 errors / 62% coverage ] ****** [1064 done /801 queued / 16 running / 1063 errors / 62% coverage ] ****** [1065 done /801 queued / 16 running / 1064 errors / 62% coverage ] ****** [1065 done /801 queued / 16 running / 1064 errors / 62% coverage ] ****** [1066 done /800 queued / 16 running / 1065 errors / 62% coverage ] ****** [1066 done /800 queued / 16 running / 1065 errors / 62% coverage ] ****** [1067 done /802 queued / 16 running / 1066 errors / 62% coverage ] ****** [1067 done /802 queued / 16 running / 1066 errors / 62% coverage ] ****** [1068 done /803 queued / 16 running / 1067 errors / 62% coverage ] ****** [1068 done /803 queued / 16 running / 1067 errors / 62% coverage ] ****** [1069 done /805 queued / 16 running / 1068 errors / 62% coverage ] ****** [1069 done /805 queued / 16 running / 1068 errors / 62% coverage ] ****** [1070 done /805 queued / 16 running / 1069 errors / 62% coverage ] ****** [1070 done /805 queued / 16 running / 1069 errors / 62% coverage ] ****** [1071 done /805 queued / 16 running / 1070 errors / 62% coverage ] ****** [1071 done /805 queued / 16 running / 1070 errors / 62% coverage ] ****** [1072 done /807 queued / 16 running / 1071 errors / 62% coverage ] ****** [1072 done /807 queued / 16 running / 1071 errors / 62% coverage ] ****** [1073 done /810 queued / 16 running / 1072 errors / 62% coverage ] ****** [1073 done /810 queued / 16 running / 1072 errors / 62% coverage ] ****** [1074 done /812 queued / 16 running / 1073 errors / 62% coverage ] ****** [1074 done /812 queued / 16 running / 1073 errors / 62% coverage ] ****** [1075 done /814 queued / 16 running / 1074 errors / 62% coverage ] ****** [1075 done /814 queued / 16 running / 1074 errors / 62% coverage ] ****** [1076 done /815 queued / 16 running / 1075 errors / 62% coverage ] ****** [1076 done /815 queued / 16 running / 1075 errors / 62% coverage ] ****** [1077 done /819 queued / 16 running / 1076 errors / 62% coverage ] ****** [1077 done /819 queued / 16 running / 1076 errors / 62% coverage ] ****** [1078 done /820 queued / 16 running / 1077 errors / 62% coverage ] ****** [1078 done /820 queued / 16 running / 1077 errors / 62% coverage ] ****** [1079 done /822 queued / 16 running / 1078 errors / 62% coverage ] ****** [1079 done /822 queued / 16 running / 1078 errors / 62% coverage ] ****** [1080 done /823 queued / 16 running / 1079 errors / 62% coverage ] ****** [1080 done /823 queued / 16 running / 1079 errors / 62% coverage ] ****** [1081 done /824 queued / 16 running / 1080 errors / 62% coverage ] ****** [1081 done /824 queued / 16 running / 1080 errors / 62% coverage ] ****** [1082 done /824 queued / 16 running / 1081 errors / 62% coverage ] ****** [1082 done /824 queued / 16 running / 1081 errors / 62% coverage ] ****** [1083 done /828 queued / 16 running / 1082 errors / 62% coverage ] ****** [1083 done /828 queued / 16 running / 1082 errors / 62% coverage ] ****** [1084 done /828 queued / 16 running / 1083 errors / 62% coverage ] ****** [1084 done /828 queued / 16 running / 1083 errors / 62% coverage ] ****** [1085 done /828 queued / 16 running / 1084 errors / 62% coverage ] ****** [1085 done /828 queued / 16 running / 1084 errors / 62% coverage ] ****** [1086 done /828 queued / 16 running / 1085 errors / 62% coverage ] ****** [1086 done /828 queued / 16 running / 1085 errors / 62% coverage ] ****** [1087 done /831 queued / 16 running / 1086 errors / 62% coverage ] ****** [1087 done /831 queued / 16 running / 1086 errors / 62% coverage ] ****** [1088 done /833 queued / 16 running / 1087 errors / 62% coverage ] ****** [1088 done /833 queued / 16 running / 1087 errors / 62% coverage ] ****** [1089 done /834 queued / 16 running / 1088 errors / 62% coverage ] ****** [1089 done /834 queued / 16 running / 1088 errors / 62% coverage ] ****** [1090 done /833 queued / 16 running / 1089 errors / 62% coverage ] ****** [1090 done /833 queued / 16 running / 1089 errors / 62% coverage ] ****** [1091 done /833 queued / 16 running / 1090 errors / 62% coverage ] ****** [1091 done /833 queued / 16 running / 1090 errors / 62% coverage ] ****** [1092 done /835 queued / 16 running / 1091 errors / 62% coverage ] ****** [1092 done /835 queued / 16 running / 1091 errors / 62% coverage ] ****** [1093 done /837 queued / 16 running / 1092 errors / 62% coverage ] ****** [1093 done /837 queued / 16 running / 1092 errors / 62% coverage ] ****** [1094 done /837 queued / 16 running / 1093 errors / 62% coverage ] ****** [1094 done /837 queued / 16 running / 1093 errors / 62% coverage ] ****** [1095 done /837 queued / 16 running / 1094 errors / 62% coverage ] ****** [1095 done /837 queued / 16 running / 1094 errors / 62% coverage ] ****** [1096 done /837 queued / 16 running / 1095 errors / 62% coverage ] ****** [1096 done /837 queued / 16 running / 1095 errors / 62% coverage ] ****** [1097 done /837 queued / 16 running / 1096 errors / 62% coverage ] ****** [1097 done /837 queued / 16 running / 1096 errors / 62% coverage ] ****** [1098 done /838 queued / 16 running / 1097 errors / 62% coverage ] ****** [1098 done /838 queued / 16 running / 1097 errors / 62% coverage ] ****** [1099 done /841 queued / 16 running / 1098 errors / 62% coverage ] ****** [1099 done /841 queued / 16 running / 1098 errors / 62% coverage ] ****** [1100 done /842 queued / 16 running / 1099 errors / 62% coverage ] ****** [1100 done /842 queued / 16 running / 1099 errors / 62% coverage ] ****** [1101 done /842 queued / 16 running / 1100 errors / 62% coverage ] ****** [1101 done /842 queued / 16 running / 1100 errors / 62% coverage ] ****** [1102 done /842 queued / 16 running / 1101 errors / 62% coverage ] ****** [1102 done /842 queued / 16 running / 1101 errors / 62% coverage ] ****** [1103 done /843 queued / 16 running / 1102 errors / 62% coverage ] ****** [1103 done /843 queued / 16 running / 1102 errors / 62% coverage ] ****** [1104 done /843 queued / 16 running / 1103 errors / 62% coverage ] ****** [1104 done /843 queued / 16 running / 1103 errors / 62% coverage ] ****** [1105 done /844 queued / 16 running / 1104 errors / 62% coverage ] ****** [1105 done /844 queued / 16 running / 1104 errors / 62% coverage ] ****** [1106 done /845 queued / 16 running / 1105 errors / 62% coverage ] ****** [1106 done /845 queued / 16 running / 1105 errors / 62% coverage ] ****** [1107 done /849 queued / 16 running / 1106 errors / 62% coverage ] ****** [1107 done /849 queued / 16 running / 1106 errors / 62% coverage ] ****** [1108 done /852 queued / 16 running / 1107 errors / 62% coverage ] ****** [1108 done /852 queued / 16 running / 1107 errors / 62% coverage ] ****** [1109 done /852 queued / 16 running / 1108 errors / 62% coverage ] ****** [1109 done /852 queued / 16 running / 1108 errors / 62% coverage ] ****** [1110 done /853 queued / 16 running / 1109 errors / 62% coverage ] ****** [1110 done /853 queued / 16 running / 1109 errors / 62% coverage ] ****** [1111 done /853 queued / 16 running / 1110 errors / 62% coverage ] ****** [1111 done /853 queued / 16 running / 1110 errors / 62% coverage ] ****** [1112 done /855 queued / 16 running / 1111 errors / 62% coverage ] ****** [1112 done /855 queued / 16 running / 1111 errors / 62% coverage ] ****** [1113 done /856 queued / 16 running / 1112 errors / 62% coverage ] ****** [1113 done /856 queued / 16 running / 1112 errors / 62% coverage ] ****** [1114 done /858 queued / 16 running / 1113 errors / 62% coverage ] ****** [1114 done /858 queued / 16 running / 1113 errors / 62% coverage ] ****** [1115 done /859 queued / 16 running / 1114 errors / 62% coverage ] ****** [1115 done /859 queued / 16 running / 1114 errors / 62% coverage ] ****** [1116 done /859 queued / 16 running / 1115 errors / 62% coverage ] ****** [1116 done /859 queued / 16 running / 1115 errors / 62% coverage ] ****** [1117 done /860 queued / 16 running / 1116 errors / 62% coverage ] ****** [1117 done /860 queued / 16 running / 1116 errors / 62% coverage ] ****** [1118 done /860 queued / 16 running / 1117 errors / 62% coverage ] ****** [1118 done /860 queued / 16 running / 1117 errors / 62% coverage ] ****** [1119 done /862 queued / 16 running / 1118 errors / 62% coverage ] ****** [1119 done /862 queued / 16 running / 1118 errors / 62% coverage ] ****** [1120 done /863 queued / 16 running / 1119 errors / 62% coverage ] ****** [1120 done /863 queued / 16 running / 1119 errors / 62% coverage ] ****** [1121 done /863 queued / 16 running / 1120 errors / 62% coverage ] ****** [1121 done /863 queued / 16 running / 1120 errors / 62% coverage ] ****** [1122 done /862 queued / 16 running / 1121 errors / 62% coverage ] ****** [1122 done /862 queued / 16 running / 1121 errors / 62% coverage ] ****** [1123 done /862 queued / 16 running / 1122 errors / 62% coverage ] ****** [1123 done /862 queued / 16 running / 1122 errors / 62% coverage ] ****** [1124 done /861 queued / 16 running / 1123 errors / 62% coverage ] ****** [1124 done /861 queued / 16 running / 1123 errors / 62% coverage ] ****** [1125 done /861 queued / 16 running / 1124 errors / 62% coverage ] ****** [1125 done /861 queued / 16 running / 1124 errors / 62% coverage ] ****** [1126 done /860 queued / 16 running / 1125 errors / 62% coverage ] ****** [1126 done /860 queued / 16 running / 1125 errors / 62% coverage ] ****** [1127 done /861 queued / 16 running / 1126 errors / 62% coverage ] ****** [1127 done /861 queued / 16 running / 1126 errors / 62% coverage ] ****** [1128 done /861 queued / 16 running / 1127 errors / 62% coverage ] ****** [1128 done /861 queued / 16 running / 1127 errors / 62% coverage ] ****** [1129 done /861 queued / 16 running / 1128 errors / 62% coverage ] ****** [1129 done /861 queued / 16 running / 1128 errors / 62% coverage ] ****** [1130 done /862 queued / 16 running / 1129 errors / 62% coverage ] ****** [1130 done /862 queued / 16 running / 1129 errors / 62% coverage ] ****** [1131 done /862 queued / 16 running / 1130 errors / 62% coverage ] ****** [1131 done /862 queued / 16 running / 1130 errors / 62% coverage ] ****** [1132 done /861 queued / 16 running / 1131 errors / 62% coverage ] ****** [1132 done /861 queued / 16 running / 1131 errors / 62% coverage ] ****** [1133 done /860 queued / 16 running / 1132 errors / 62% coverage ] ****** [1133 done /860 queued / 16 running / 1132 errors / 62% coverage ] ****** [1134 done /861 queued / 16 running / 1133 errors / 62% coverage ] ****** [1134 done /861 queued / 16 running / 1133 errors / 62% coverage ] ****** [1135 done /864 queued / 16 running / 1134 errors / 62% coverage ] ****** [1135 done /864 queued / 16 running / 1134 errors / 62% coverage ] ****** [1136 done /866 queued / 16 running / 1135 errors / 62% coverage ] ****** [1136 done /866 queued / 16 running / 1135 errors / 62% coverage ] ****** [1137 done /868 queued / 16 running / 1136 errors / 62% coverage ] ****** [1137 done /868 queued / 16 running / 1136 errors / 62% coverage ] ****** [1138 done /868 queued / 16 running / 1137 errors / 62% coverage ] ****** [1138 done /868 queued / 16 running / 1137 errors / 62% coverage ] ****** [1139 done /868 queued / 16 running / 1138 errors / 62% coverage ] ****** [1139 done /868 queued / 16 running / 1138 errors / 62% coverage ] ****** [1140 done /867 queued / 16 running / 1139 errors / 62% coverage ] ****** [1140 done /867 queued / 16 running / 1139 errors / 62% coverage ] ****** [1141 done /870 queued / 16 running / 1140 errors / 62% coverage ] ****** [1141 done /870 queued / 16 running / 1140 errors / 62% coverage ] ****** [1142 done /870 queued / 16 running / 1141 errors / 62% coverage ] ****** [1142 done /870 queued / 16 running / 1141 errors / 62% coverage ] ****** [1143 done /870 queued / 16 running / 1142 errors / 62% coverage ] ****** [1143 done /870 queued / 16 running / 1142 errors / 62% coverage ] ****** [1144 done /869 queued / 16 running / 1143 errors / 62% coverage ] ****** [1144 done /869 queued / 16 running / 1143 errors / 62% coverage ] ****** [1145 done /868 queued / 16 running / 1144 errors / 62% coverage ] ****** [1145 done /868 queued / 16 running / 1144 errors / 62% coverage ] ****** [1146 done /872 queued / 16 running / 1145 errors / 62% coverage ] ****** [1146 done /872 queued / 16 running / 1145 errors / 62% coverage ] ****** [1147 done /875 queued / 16 running / 1146 errors / 62% coverage ] ****** [1147 done /875 queued / 16 running / 1146 errors / 62% coverage ] ****** [1148 done /875 queued / 16 running / 1147 errors / 62% coverage ] ****** [1148 done /875 queued / 16 running / 1147 errors / 62% coverage ] ****** [1149 done /876 queued / 16 running / 1148 errors / 62% coverage ] ****** [1149 done /876 queued / 16 running / 1148 errors / 62% coverage ] ****** [1150 done /879 queued / 16 running / 1149 errors / 62% coverage ] ****** [1150 done /879 queued / 16 running / 1149 errors / 62% coverage ] ****** [1151 done /880 queued / 16 running / 1150 errors / 62% coverage ] ****** [1151 done /880 queued / 16 running / 1150 errors / 62% coverage ] ****** [1152 done /880 queued / 16 running / 1151 errors / 62% coverage ] ****** [1152 done /880 queued / 16 running / 1151 errors / 62% coverage ] ****** [1153 done /883 queued / 16 running / 1152 errors / 62% coverage ] ****** [1153 done /883 queued / 16 running / 1152 errors / 62% coverage ] ****** [1154 done /884 queued / 16 running / 1153 errors / 62% coverage ] ****** [1154 done /884 queued / 16 running / 1153 errors / 62% coverage ] ****** [1155 done /887 queued / 16 running / 1154 errors / 62% coverage ] ****** [1155 done /887 queued / 16 running / 1154 errors / 62% coverage ] ****** [1156 done /887 queued / 16 running / 1155 errors / 62% coverage ] ****** [1156 done /887 queued / 16 running / 1155 errors / 62% coverage ] ****** [1157 done /888 queued / 16 running / 1156 errors / 62% coverage ] ****** [1157 done /888 queued / 16 running / 1156 errors / 62% coverage ] ****** [1158 done /889 queued / 16 running / 1157 errors / 62% coverage ] ****** [1158 done /889 queued / 16 running / 1157 errors / 62% coverage ] ****** [1159 done /890 queued / 16 running / 1158 errors / 62% coverage ] ****** [1159 done /890 queued / 16 running / 1158 errors / 62% coverage ] ****** [1160 done /891 queued / 16 running / 1159 errors / 62% coverage ] ****** [1160 done /891 queued / 16 running / 1159 errors / 62% coverage ] ****** [1161 done /891 queued / 16 running / 1160 errors / 62% coverage ] ****** [1161 done /891 queued / 16 running / 1160 errors / 62% coverage ] ****** [1162 done /892 queued / 16 running / 1161 errors / 62% coverage ] ****** [1162 done /892 queued / 16 running / 1161 errors / 62% coverage ] ****** [1163 done /893 queued / 16 running / 1162 errors / 62% coverage ] ****** [1163 done /893 queued / 16 running / 1162 errors / 62% coverage ] ****** [1164 done /892 queued / 16 running / 1163 errors / 62% coverage ] ****** [1164 done /892 queued / 16 running / 1163 errors / 62% coverage ] ****** [1165 done /894 queued / 16 running / 1164 errors / 62% coverage ] ****** [1165 done /894 queued / 16 running / 1164 errors / 62% coverage ] ****** [1166 done /895 queued / 16 running / 1165 errors / 62% coverage ] ****** [1166 done /895 queued / 16 running / 1165 errors / 62% coverage ] ****** [1167 done /898 queued / 16 running / 1166 errors / 62% coverage ] ****** [1167 done /898 queued / 16 running / 1166 errors / 62% coverage ] ****** [1168 done /902 queued / 16 running / 1167 errors / 62% coverage ] ****** [1168 done /902 queued / 16 running / 1167 errors / 62% coverage ] ****** [1169 done /902 queued / 16 running / 1168 errors / 62% coverage ] ****** [1169 done /902 queued / 16 running / 1168 errors / 62% coverage ] ****** [1170 done /902 queued / 16 running / 1169 errors / 62% coverage ] ****** [1170 done /902 queued / 16 running / 1169 errors / 62% coverage ] ****** [1171 done /903 queued / 16 running / 1170 errors / 62% coverage ] ****** [1171 done /903 queued / 16 running / 1170 errors / 62% coverage ] ****** [1172 done /903 queued / 16 running / 1171 errors / 62% coverage ] ****** [1172 done /903 queued / 16 running / 1171 errors / 62% coverage ] ****** [1173 done /904 queued / 16 running / 1172 errors / 62% coverage ] ****** [1173 done /904 queued / 16 running / 1172 errors / 62% coverage ] ****** [1174 done /905 queued / 16 running / 1173 errors / 62% coverage ] ****** [1174 done /905 queued / 16 running / 1173 errors / 62% coverage ] ****** [1175 done /907 queued / 16 running / 1174 errors / 62% coverage ] ****** [1175 done /907 queued / 16 running / 1174 errors / 62% coverage ] ****** [1176 done /908 queued / 16 running / 1175 errors / 62% coverage ] ****** [1176 done /908 queued / 16 running / 1175 errors / 62% coverage ] ****** [1177 done /907 queued / 16 running / 1176 errors / 62% coverage ] ****** [1177 done /907 queued / 16 running / 1176 errors / 62% coverage ] ****** [1178 done /908 queued / 16 running / 1177 errors / 62% coverage ] ****** [1178 done /908 queued / 16 running / 1177 errors / 62% coverage ] ****** [1179 done /911 queued / 16 running / 1178 errors / 62% coverage ] ****** [1179 done /911 queued / 16 running / 1178 errors / 62% coverage ] ****** [1180 done /911 queued / 16 running / 1179 errors / 62% coverage ] ****** [1180 done /911 queued / 16 running / 1179 errors / 62% coverage ] ****** [1181 done /913 queued / 16 running / 1180 errors / 62% coverage ] ****** [1181 done /913 queued / 16 running / 1180 errors / 62% coverage ] ****** [1182 done /915 queued / 16 running / 1181 errors / 62% coverage ] ****** [1182 done /915 queued / 16 running / 1181 errors / 62% coverage ] ****** [1183 done /914 queued / 16 running / 1182 errors / 62% coverage ] ****** [1183 done /914 queued / 16 running / 1182 errors / 62% coverage ] ****** [1184 done /915 queued / 16 running / 1183 errors / 62% coverage ] ****** [1184 done /915 queued / 16 running / 1183 errors / 62% coverage ] ****** [1185 done /914 queued / 16 running / 1184 errors / 62% coverage ] ****** [1185 done /914 queued / 16 running / 1184 errors / 62% coverage ] ****** [1186 done /914 queued / 16 running / 1185 errors / 62% coverage ] ****** [1186 done /914 queued / 16 running / 1185 errors / 62% coverage ] ****** [1187 done /916 queued / 16 running / 1186 errors / 62% coverage ] ****** [1187 done /916 queued / 16 running / 1186 errors / 62% coverage ] ****** [1188 done /915 queued / 16 running / 1187 errors / 62% coverage ] ****** [1188 done /915 queued / 16 running / 1187 errors / 62% coverage ] ****** [1189 done /918 queued / 16 running / 1188 errors / 62% coverage ] ****** [1189 done /918 queued / 16 running / 1188 errors / 62% coverage ] ****** [1190 done /922 queued / 16 running / 1189 errors / 62% coverage ] ****** [1190 done /922 queued / 16 running / 1189 errors / 62% coverage ] ****** [1191 done /921 queued / 16 running / 1190 errors / 62% coverage ] ****** [1191 done /921 queued / 16 running / 1190 errors / 62% coverage ] ****** [1192 done /920 queued / 16 running / 1191 errors / 62% coverage ] ****** [1192 done /920 queued / 16 running / 1191 errors / 62% coverage ] ****** [1193 done /922 queued / 16 running / 1192 errors / 62% coverage ] ****** [1193 done /922 queued / 16 running / 1192 errors / 62% coverage ] ****** [1194 done /922 queued / 16 running / 1193 errors / 62% coverage ] ****** [1194 done /922 queued / 16 running / 1193 errors / 62% coverage ] ****** [1195 done /925 queued / 16 running / 1194 errors / 62% coverage ] ****** [1195 done /925 queued / 16 running / 1194 errors / 62% coverage ] ****** [1196 done /926 queued / 16 running / 1195 errors / 62% coverage ] ****** [1196 done /926 queued / 16 running / 1195 errors / 62% coverage ] ****** [1197 done /927 queued / 16 running / 1196 errors / 62% coverage ] ****** [1197 done /927 queued / 16 running / 1196 errors / 62% coverage ] ****** [1198 done /927 queued / 16 running / 1197 errors / 62% coverage ] ****** [1198 done /927 queued / 16 running / 1197 errors / 62% coverage ] ****** [1199 done /927 queued / 16 running / 1198 errors / 62% coverage ] ****** [1199 done /927 queued / 16 running / 1198 errors / 62% coverage ] ****** [1200 done /926 queued / 16 running / 1199 errors / 62% coverage ] ****** [1200 done /926 queued / 16 running / 1199 errors / 62% coverage ] ****** [1201 done /926 queued / 16 running / 1200 errors / 62% coverage ] ****** [1201 done /926 queued / 16 running / 1200 errors / 62% coverage ] ****** [1202 done /927 queued / 16 running / 1201 errors / 62% coverage ] ****** [1202 done /927 queued / 16 running / 1201 errors / 62% coverage ] ****** [1203 done /929 queued / 16 running / 1202 errors / 62% coverage ] ****** [1203 done /929 queued / 16 running / 1202 errors / 62% coverage ] ****** [1204 done /930 queued / 16 running / 1203 errors / 62% coverage ] ****** [1204 done /930 queued / 16 running / 1203 errors / 62% coverage ] ****** [1205 done /931 queued / 16 running / 1204 errors / 62% coverage ] ****** [1205 done /931 queued / 16 running / 1204 errors / 62% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","toString","apply","bound Main","reduce","parseInt","charCodeAt","abs","RegExp"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0,"Switcher":false,"Target_Switch_Base":0} start 0.0908 took 6.7893s
*-- Test Case {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0} start 7.0236 took 8.2204s
*-- Errors occured in test {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program var request = require('request');
var Vow = require('vow');
var extend = require('extend');
var WebSocket = require('ws');
var util = require('util');
var utils = require('./libs/utils.js');
var find = utils.find;
var assert = utils.assert;
var EventEmitter = require('events').EventEmitter;

/**
 * @param {object} params
 * @constructor
 */
function Bot(params) {
    this.token = params.token;
    this.name = params.name;

    assert(params.token, 'token must be defined');
    this.login();
}

util.inherits(Bot, EventEmitter);

/**
 * Starts a Real Time Messaging API session
 */
Bot.prototype.login = function() {
    this._api('rtm.start').then(function(data) {
        this.wsUrl = data.url;
        this.self = data.self;
        this.team = data.team;
        this.channels = data.channels;
        this.users = data.users;
        this.ims = data.ims;
        this.groups = data.groups;

        this.emit('start');

        this.connect();
    }.bind(this)).fail(function(data) {
        this.emit('error', new Error(data.error ? data.error : data));
    }.bind(this)).done();
};

/**
 * Establish a WebSocket connection
 */
Bot.prototype.connect = function() {
    this.ws = new WebSocket(this.wsUrl);

    this.ws.on('open', function(data) {
        this.emit('open', data);
    }.bind(this));

    this.ws.on('close', function(data) {
        this.emit('close', data);
    }.bind(this));

    this.ws.on('message', function(data) {
        try {
            this.emit('message', JSON.parse(data));
        } catch (e) {
            console.log(e);
        }
    }.bind(this));
};

/**
 * Get channels
 * @returns {vow.Promise}
 */
Bot.prototype.getChannels = function() {
    if (this.channels) {
        return Vow.fulfill({ channels: this.channels });
    }
    return this._api('channels.list');
};

/**
 * Get users
 * @returns {vow.Promise}
 */
Bot.prototype.getUsers = function() {
    if (this.users) {
        return Vow.fulfill({ members: this.users });
    }

    return this._api('users.list');
};

/**
 * Get groups
 * @returns {vow.Promise}
 */
Bot.prototype.getGroups = function() {
    if (this.groups) {
        return Vow.fulfill({ groups: this.groups });
    }

    return this._api('groups.list');
};

/**
 * Get user by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getUser = function(name) {
    return this.getUsers().then(function(data) {
        return find(data.members, { name: name });
    });
};

/**
 * Get channel by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getChannel = function(name) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { name: name });
    });
};

/**
 * Get group by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getGroup = function(name) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { name: name });
    });
};

/**
 * Get user by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getUserById = function(id) {
    return this.getUsers().then(function(data) {
        return find(data.members, { id: id });
    });
};

/**
 * Get channel by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getChannelById = function(id) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { id: id });
    });
};

/**
 * Get group by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getGroupById = function(id) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { id: id });
    });
};

/**
 * Get channel ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getChannelId = function(name) {
    return this.getChannel(name).then(function(channel) {
        return channel.id;
    });
};

/**
 * Get group ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getGroupId = function(name) {
    return this.getGroup(name).then(function(group) {
        return group.id;
    });
};

/**
 * Get user ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getUserId = function(name) {
    return this.getUser(name).then(function(user) {
        return user.id;
    });
};

/**
 * Get "direct message" channel ID
 * @param {string} name
 * @returns {vow.Promise}
 */
Bot.prototype.getChatId = function(name) {
    return this.getUser(name).then(function(data) {

        var chatId = find(this.ims, { user: data.id }).id;

        return chatId || this.openIm(data.id);
    }.bind(this)).then(function(data) {
        return typeof data === 'string' ? data : data.channel.id;
    });
};

/**
 * Opens a "direct message" channel with another member of your Slack team
 * @param {string} userId
 * @returns {vow.Promise}
 */
Bot.prototype.openIm = function(userId) {
    return this._api('im.open', {user: userId});
};

/**
 * Posts a message to a channel by ID
 * @param {string} id - channel ID
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.postMessage = function(id, text, params) {
    params = extend({
        text: text,
        channel: id,
        username: this.name
    }, params || {});

    return this._api('chat.postMessage', params);
};

/**
 * Updates a message by timestamp
 * @param {string} id - channel ID
 * @param {string} ts - timestamp
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.updateMessage = function(id, ts, text, params) {
    params = extend({
        ts: ts,
        channel: id,
        username: this.name,
        text: text
    }, params || {});

    return this._api('chat.update', params);
};

/**
 * Posts a message to user by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToUser = function(name, text, params, cb) {
    return this._post((params || {}).slackbot ? 'slackbot' : 'user', name, text, params, cb);
};

/**
 * Posts a message to channel by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToChannel = function(name, text, params, cb) {
    return this._post('channel', name, text, params, cb);
};

/**
 * Posts a message to group by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToGroup = function(name, text, params, cb) {
    return this._post('group', name, text, params, cb);
};

/**
 * Common method for posting messages
 * @param {string} type
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._post = function(type, name, text, params, cb) {
    var method = ({
        'group': 'getGroupId',
        'channel': 'getChannelId',
        'user': 'getChatId',
        'slackbot': 'getUserId'
    })[type];

    if (typeof params === 'function') {
        cb = params;
        params = null;
    }

    return this[method](name).then(function(itemId) {
        return this.postMessage(itemId, text, params);
    }.bind(this)).always(function(data) {
        if (cb) {
            cb(data._value);
        }
    });
};

/**
 * Posts a message to group | channel | user
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postTo = function(name, text, params, cb) {
    return Vow.all([this.getChannels(), this.getUsers(), this.getGroups()]).then(function(data) {

        var all = [].concat(data[0].channels, data[1].members, data[2].groups);
        var result = find(all, {name: name});

        assert(Object.keys(result).length, 'wrong name');

        if (result['is_channel']) {
            return this.postMessageToChannel(name, text, params, cb);
        } else if (result['is_group']) {
            return this.postMessageToGroup(name, text, params, cb);
        } else {
            return this.postMessageToUser(name, text, params, cb);
        }
    }.bind(this));
};

/**
 * Preprocessing of params
 * @param params
 * @returns {object}
 * @private
 */
Bot.prototype._preprocessParams = function(params) {
    params = extend(params || {}, {token: this.token});

    Object.keys(params).forEach(function(name) {
        var param = params[name];

        if (param && typeof param === 'object') {
            params[name] = JSON.stringify(param);
        }
    });

    return params;
};

/**
 * Send request to API method
 * @param {string} methodName
 * @param {object} params
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._api = function(methodName, params) {

    var data = {
        url: 'https://slack.com/api/' + methodName,
        form: this._preprocessParams(params)
    };

    return new Vow.Promise(function(resolve, reject) {

        request.post(data, function(err, request, body) {
            if (err) {
                reject(err);

                return false;
            }

            try {
                body = JSON.parse(body);

                // Response always contain a top-level boolean property ok,
                // indicating success or failure
                if (body.ok) {
                    resolve(body);
                } else {
                    reject(body);
                }

            } catch (e) {
                reject(e);
            }
        });
    });
};

module.exports = Bot;
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switch_Base":0,"_bound":1}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"_bound":4} start 15.338 took 6.142s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"_bound":4}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program var request = require('request');
var Vow = require('vow');
var extend = require('extend');
var WebSocket = require('ws');
var util = require('util');
var utils = require('./libs/utils.js');
var find = utils.find;
var assert = utils.assert;
var EventEmitter = require('events').EventEmitter;

/**
 * @param {object} params
 * @constructor
 */
function Bot(params) {
    this.token = params.token;
    this.name = params.name;

    assert(params.token, 'token must be defined');
    this.login();
}

util.inherits(Bot, EventEmitter);

/**
 * Starts a Real Time Messaging API session
 */
Bot.prototype.login = function() {
    this._api('rtm.start').then(function(data) {
        this.wsUrl = data.url;
        this.self = data.self;
        this.team = data.team;
        this.channels = data.channels;
        this.users = data.users;
        this.ims = data.ims;
        this.groups = data.groups;

        this.emit('start');

        this.connect();
    }.bind(this)).fail(function(data) {
        this.emit('error', new Error(data.error ? data.error : data));
    }.bind(this)).done();
};

/**
 * Establish a WebSocket connection
 */
Bot.prototype.connect = function() {
    this.ws = new WebSocket(this.wsUrl);

    this.ws.on('open', function(data) {
        this.emit('open', data);
    }.bind(this));

    this.ws.on('close', function(data) {
        this.emit('close', data);
    }.bind(this));

    this.ws.on('message', function(data) {
        try {
            this.emit('message', JSON.parse(data));
        } catch (e) {
            console.log(e);
        }
    }.bind(this));
};

/**
 * Get channels
 * @returns {vow.Promise}
 */
Bot.prototype.getChannels = function() {
    if (this.channels) {
        return Vow.fulfill({ channels: this.channels });
    }
    return this._api('channels.list');
};

/**
 * Get users
 * @returns {vow.Promise}
 */
Bot.prototype.getUsers = function() {
    if (this.users) {
        return Vow.fulfill({ members: this.users });
    }

    return this._api('users.list');
};

/**
 * Get groups
 * @returns {vow.Promise}
 */
Bot.prototype.getGroups = function() {
    if (this.groups) {
        return Vow.fulfill({ groups: this.groups });
    }

    return this._api('groups.list');
};

/**
 * Get user by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getUser = function(name) {
    return this.getUsers().then(function(data) {
        return find(data.members, { name: name });
    });
};

/**
 * Get channel by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getChannel = function(name) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { name: name });
    });
};

/**
 * Get group by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getGroup = function(name) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { name: name });
    });
};

/**
 * Get user by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getUserById = function(id) {
    return this.getUsers().then(function(data) {
        return find(data.members, { id: id });
    });
};

/**
 * Get channel by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getChannelById = function(id) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { id: id });
    });
};

/**
 * Get group by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getGroupById = function(id) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { id: id });
    });
};

/**
 * Get channel ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getChannelId = function(name) {
    return this.getChannel(name).then(function(channel) {
        return channel.id;
    });
};

/**
 * Get group ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getGroupId = function(name) {
    return this.getGroup(name).then(function(group) {
        return group.id;
    });
};

/**
 * Get user ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getUserId = function(name) {
    return this.getUser(name).then(function(user) {
        return user.id;
    });
};

/**
 * Get "direct message" channel ID
 * @param {string} name
 * @returns {vow.Promise}
 */
Bot.prototype.getChatId = function(name) {
    return this.getUser(name).then(function(data) {

        var chatId = find(this.ims, { user: data.id }).id;

        return chatId || this.openIm(data.id);
    }.bind(this)).then(function(data) {
        return typeof data === 'string' ? data : data.channel.id;
    });
};

/**
 * Opens a "direct message" channel with another member of your Slack team
 * @param {string} userId
 * @returns {vow.Promise}
 */
Bot.prototype.openIm = function(userId) {
    return this._api('im.open', {user: userId});
};

/**
 * Posts a message to a channel by ID
 * @param {string} id - channel ID
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.postMessage = function(id, text, params) {
    params = extend({
        text: text,
        channel: id,
        username: this.name
    }, params || {});

    return this._api('chat.postMessage', params);
};

/**
 * Updates a message by timestamp
 * @param {string} id - channel ID
 * @param {string} ts - timestamp
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.updateMessage = function(id, ts, text, params) {
    params = extend({
        ts: ts,
        channel: id,
        username: this.name,
        text: text
    }, params || {});

    return this._api('chat.update', params);
};

/**
 * Posts a message to user by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToUser = function(name, text, params, cb) {
    return this._post((params || {}).slackbot ? 'slackbot' : 'user', name, text, params, cb);
};

/**
 * Posts a message to channel by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToChannel = function(name, text, params, cb) {
    return this._post('channel', name, text, params, cb);
};

/**
 * Posts a message to group by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToGroup = function(name, text, params, cb) {
    return this._post('group', name, text, params, cb);
};

/**
 * Common method for posting messages
 * @param {string} type
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._post = function(type, name, text, params, cb) {
    var method = ({
        'group': 'getGroupId',
        'channel': 'getChannelId',
        'user': 'getChatId',
        'slackbot': 'getUserId'
    })[type];

    if (typeof params === 'function') {
        cb = params;
        params = null;
    }

    return this[method](name).then(function(itemId) {
        return this.postMessage(itemId, text, params);
    }.bind(this)).always(function(data) {
        if (cb) {
            cb(data._value);
        }
    });
};

/**
 * Posts a message to group | channel | user
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postTo = function(name, text, params, cb) {
    return Vow.all([this.getChannels(), this.getUsers(), this.getGroups()]).then(function(data) {

        var all = [].concat(data[0].channels, data[1].members, data[2].groups);
        var result = find(all, {name: name});

        assert(Object.keys(result).length, 'wrong name');

        if (result['is_channel']) {
            return this.postMessageToChannel(name, text, params, cb);
        } else if (result['is_group']) {
            return this.postMessageToGroup(name, text, params, cb);
        } else {
            return this.postMessageToUser(name, text, params, cb);
        }
    }.bind(this));
};

/**
 * Preprocessing of params
 * @param params
 * @returns {object}
 * @private
 */
Bot.prototype._preprocessParams = function(params) {
    params = extend(params || {}, {token: this.token});

    Object.keys(params).forEach(function(name) {
        var param = params[name];

        if (param && typeof param === 'object') {
            params[name] = JSON.stringify(param);
        }
    });

    return params;
};

/**
 * Send request to API method
 * @param {string} methodName
 * @param {object} params
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._api = function(methodName, params) {

    var data = {
        url: 'https://slack.com/api/' + methodName,
        form: this._preprocessParams(params)
    };

    return new Vow.Promise(function(resolve, reject) {

        request.post(data, function(err, request, body) {
            if (err) {
                reject(err);

                return false;
            }

            try {
                body = JSON.parse(body);

                // Response always contain a top-level boolean property ok,
                // indicating success or failure
                if (body.ok) {
                    resolve(body);
                } else {
                    reject(body);
                }

            } catch (e) {
                reject(e);
            }
        });
    });
};

module.exports = Bot;
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":1,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":2} start 15.3098 took 8.1756s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":2}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program var request = require('request');
var Vow = require('vow');
var extend = require('extend');
var WebSocket = require('ws');
var util = require('util');
var utils = require('./libs/utils.js');
var find = utils.find;
var assert = utils.assert;
var EventEmitter = require('events').EventEmitter;

/**
 * @param {object} params
 * @constructor
 */
function Bot(params) {
    this.token = params.token;
    this.name = params.name;

    assert(params.token, 'token must be defined');
    this.login();
}

util.inherits(Bot, EventEmitter);

/**
 * Starts a Real Time Messaging API session
 */
Bot.prototype.login = function() {
    this._api('rtm.start').then(function(data) {
        this.wsUrl = data.url;
        this.self = data.self;
        this.team = data.team;
        this.channels = data.channels;
        this.users = data.users;
        this.ims = data.ims;
        this.groups = data.groups;

        this.emit('start');

        this.connect();
    }.bind(this)).fail(function(data) {
        this.emit('error', new Error(data.error ? data.error : data));
    }.bind(this)).done();
};

/**
 * Establish a WebSocket connection
 */
Bot.prototype.connect = function() {
    this.ws = new WebSocket(this.wsUrl);

    this.ws.on('open', function(data) {
        this.emit('open', data);
    }.bind(this));

    this.ws.on('close', function(data) {
        this.emit('close', data);
    }.bind(this));

    this.ws.on('message', function(data) {
        try {
            this.emit('message', JSON.parse(data));
        } catch (e) {
            console.log(e);
        }
    }.bind(this));
};

/**
 * Get channels
 * @returns {vow.Promise}
 */
Bot.prototype.getChannels = function() {
    if (this.channels) {
        return Vow.fulfill({ channels: this.channels });
    }
    return this._api('channels.list');
};

/**
 * Get users
 * @returns {vow.Promise}
 */
Bot.prototype.getUsers = function() {
    if (this.users) {
        return Vow.fulfill({ members: this.users });
    }

    return this._api('users.list');
};

/**
 * Get groups
 * @returns {vow.Promise}
 */
Bot.prototype.getGroups = function() {
    if (this.groups) {
        return Vow.fulfill({ groups: this.groups });
    }

    return this._api('groups.list');
};

/**
 * Get user by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getUser = function(name) {
    return this.getUsers().then(function(data) {
        return find(data.members, { name: name });
    });
};

/**
 * Get channel by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getChannel = function(name) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { name: name });
    });
};

/**
 * Get group by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getGroup = function(name) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { name: name });
    });
};

/**
 * Get user by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getUserById = function(id) {
    return this.getUsers().then(function(data) {
        return find(data.members, { id: id });
    });
};

/**
 * Get channel by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getChannelById = function(id) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { id: id });
    });
};

/**
 * Get group by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getGroupById = function(id) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { id: id });
    });
};

/**
 * Get channel ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getChannelId = function(name) {
    return this.getChannel(name).then(function(channel) {
        return channel.id;
    });
};

/**
 * Get group ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getGroupId = function(name) {
    return this.getGroup(name).then(function(group) {
        return group.id;
    });
};

/**
 * Get user ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getUserId = function(name) {
    return this.getUser(name).then(function(user) {
        return user.id;
    });
};

/**
 * Get "direct message" channel ID
 * @param {string} name
 * @returns {vow.Promise}
 */
Bot.prototype.getChatId = function(name) {
    return this.getUser(name).then(function(data) {

        var chatId = find(this.ims, { user: data.id }).id;

        return chatId || this.openIm(data.id);
    }.bind(this)).then(function(data) {
        return typeof data === 'string' ? data : data.channel.id;
    });
};

/**
 * Opens a "direct message" channel with another member of your Slack team
 * @param {string} userId
 * @returns {vow.Promise}
 */
Bot.prototype.openIm = function(userId) {
    return this._api('im.open', {user: userId});
};

/**
 * Posts a message to a channel by ID
 * @param {string} id - channel ID
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.postMessage = function(id, text, params) {
    params = extend({
        text: text,
        channel: id,
        username: this.name
    }, params || {});

    return this._api('chat.postMessage', params);
};

/**
 * Updates a message by timestamp
 * @param {string} id - channel ID
 * @param {string} ts - timestamp
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.updateMessage = function(id, ts, text, params) {
    params = extend({
        ts: ts,
        channel: id,
        username: this.name,
        text: text
    }, params || {});

    return this._api('chat.update', params);
};

/**
 * Posts a message to user by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToUser = function(name, text, params, cb) {
    return this._post((params || {}).slackbot ? 'slackbot' : 'user', name, text, params, cb);
};

/**
 * Posts a message to channel by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToChannel = function(name, text, params, cb) {
    return this._post('channel', name, text, params, cb);
};

/**
 * Posts a message to group by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToGroup = function(name, text, params, cb) {
    return this._post('group', name, text, params, cb);
};

/**
 * Common method for posting messages
 * @param {string} type
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._post = function(type, name, text, params, cb) {
    var method = ({
        'group': 'getGroupId',
        'channel': 'getChannelId',
        'user': 'getChatId',
        'slackbot': 'getUserId'
    })[type];

    if (typeof params === 'function') {
        cb = params;
        params = null;
    }

    return this[method](name).then(function(itemId) {
        return this.postMessage(itemId, text, params);
    }.bind(this)).always(function(data) {
        if (cb) {
            cb(data._value);
        }
    });
};

/**
 * Posts a message to group | channel | user
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postTo = function(name, text, params, cb) {
    return Vow.all([this.getChannels(), this.getUsers(), this.getGroups()]).then(function(data) {

        var all = [].concat(data[0].channels, data[1].members, data[2].groups);
        var result = find(all, {name: name});

        assert(Object.keys(result).length, 'wrong name');

        if (result['is_channel']) {
            return this.postMessageToChannel(name, text, params, cb);
        } else if (result['is_group']) {
            return this.postMessageToGroup(name, text, params, cb);
        } else {
            return this.postMessageToUser(name, text, params, cb);
        }
    }.bind(this));
};

/**
 * Preprocessing of params
 * @param params
 * @returns {object}
 * @private
 */
Bot.prototype._preprocessParams = function(params) {
    params = extend(params || {}, {token: this.token});

    Object.keys(params).forEach(function(name) {
        var param = params[name];

        if (param && typeof param === 'object') {
            params[name] = JSON.stringify(param);
        }
    });

    return params;
};

/**
 * Send request to API method
 * @param {string} methodName
 * @param {object} params
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._api = function(methodName, params) {

    var data = {
        url: 'https://slack.com/api/' + methodName,
        form: this._preprocessParams(params)
    };

    return new Vow.Promise(function(resolve, reject) {

        request.post(data, function(err, request, body) {
            if (err) {
                reject(err);

                return false;
            }

            try {
                body = JSON.parse(body);

                // Response always contain a top-level boolean property ok,
                // indicating success or failure
                if (body.ok) {
                    resolve(body);
                } else {
                    reject(body);
                }

            } catch (e) {
                reject(e);
            }
        });
    });
};

module.exports = Bot;
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":2}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":0,"_bound":3} start 15.3732 took 10.3834s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":0,"_bound":3}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program var request = require('request');
var Vow = require('vow');
var extend = require('extend');
var WebSocket = require('ws');
var util = require('util');
var utils = require('./libs/utils.js');
var find = utils.find;
var assert = utils.assert;
var EventEmitter = require('events').EventEmitter;

/**
 * @param {object} params
 * @constructor
 */
function Bot(params) {
    this.token = params.token;
    this.name = params.name;

    assert(params.token, 'token must be defined');
    this.login();
}

util.inherits(Bot, EventEmitter);

/**
 * Starts a Real Time Messaging API session
 */
Bot.prototype.login = function() {
    this._api('rtm.start').then(function(data) {
        this.wsUrl = data.url;
        this.self = data.self;
        this.team = data.team;
        this.channels = data.channels;
        this.users = data.users;
        this.ims = data.ims;
        this.groups = data.groups;

        this.emit('start');

        this.connect();
    }.bind(this)).fail(function(data) {
        this.emit('error', new Error(data.error ? data.error : data));
    }.bind(this)).done();
};

/**
 * Establish a WebSocket connection
 */
Bot.prototype.connect = function() {
    this.ws = new WebSocket(this.wsUrl);

    this.ws.on('open', function(data) {
        this.emit('open', data);
    }.bind(this));

    this.ws.on('close', function(data) {
        this.emit('close', data);
    }.bind(this));

    this.ws.on('message', function(data) {
        try {
            this.emit('message', JSON.parse(data));
        } catch (e) {
            console.log(e);
        }
    }.bind(this));
};

/**
 * Get channels
 * @returns {vow.Promise}
 */
Bot.prototype.getChannels = function() {
    if (this.channels) {
        return Vow.fulfill({ channels: this.channels });
    }
    return this._api('channels.list');
};

/**
 * Get users
 * @returns {vow.Promise}
 */
Bot.prototype.getUsers = function() {
    if (this.users) {
        return Vow.fulfill({ members: this.users });
    }

    return this._api('users.list');
};

/**
 * Get groups
 * @returns {vow.Promise}
 */
Bot.prototype.getGroups = function() {
    if (this.groups) {
        return Vow.fulfill({ groups: this.groups });
    }

    return this._api('groups.list');
};

/**
 * Get user by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getUser = function(name) {
    return this.getUsers().then(function(data) {
        return find(data.members, { name: name });
    });
};

/**
 * Get channel by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getChannel = function(name) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { name: name });
    });
};

/**
 * Get group by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getGroup = function(name) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { name: name });
    });
};

/**
 * Get user by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getUserById = function(id) {
    return this.getUsers().then(function(data) {
        return find(data.members, { id: id });
    });
};

/**
 * Get channel by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getChannelById = function(id) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { id: id });
    });
};

/**
 * Get group by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getGroupById = function(id) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { id: id });
    });
};

/**
 * Get channel ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getChannelId = function(name) {
    return this.getChannel(name).then(function(channel) {
        return channel.id;
    });
};

/**
 * Get group ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getGroupId = function(name) {
    return this.getGroup(name).then(function(group) {
        return group.id;
    });
};

/**
 * Get user ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getUserId = function(name) {
    return this.getUser(name).then(function(user) {
        return user.id;
    });
};

/**
 * Get "direct message" channel ID
 * @param {string} name
 * @returns {vow.Promise}
 */
Bot.prototype.getChatId = function(name) {
    return this.getUser(name).then(function(data) {

        var chatId = find(this.ims, { user: data.id }).id;

        return chatId || this.openIm(data.id);
    }.bind(this)).then(function(data) {
        return typeof data === 'string' ? data : data.channel.id;
    });
};

/**
 * Opens a "direct message" channel with another member of your Slack team
 * @param {string} userId
 * @returns {vow.Promise}
 */
Bot.prototype.openIm = function(userId) {
    return this._api('im.open', {user: userId});
};

/**
 * Posts a message to a channel by ID
 * @param {string} id - channel ID
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.postMessage = function(id, text, params) {
    params = extend({
        text: text,
        channel: id,
        username: this.name
    }, params || {});

    return this._api('chat.postMessage', params);
};

/**
 * Updates a message by timestamp
 * @param {string} id - channel ID
 * @param {string} ts - timestamp
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.updateMessage = function(id, ts, text, params) {
    params = extend({
        ts: ts,
        channel: id,
        username: this.name,
        text: text
    }, params || {});

    return this._api('chat.update', params);
};

/**
 * Posts a message to user by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToUser = function(name, text, params, cb) {
    return this._post((params || {}).slackbot ? 'slackbot' : 'user', name, text, params, cb);
};

/**
 * Posts a message to channel by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToChannel = function(name, text, params, cb) {
    return this._post('channel', name, text, params, cb);
};

/**
 * Posts a message to group by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToGroup = function(name, text, params, cb) {
    return this._post('group', name, text, params, cb);
};

/**
 * Common method for posting messages
 * @param {string} type
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._post = function(type, name, text, params, cb) {
    var method = ({
        'group': 'getGroupId',
        'channel': 'getChannelId',
        'user': 'getChatId',
        'slackbot': 'getUserId'
    })[type];

    if (typeof params === 'function') {
        cb = params;
        params = null;
    }

    return this[method](name).then(function(itemId) {
        return this.postMessage(itemId, text, params);
    }.bind(this)).always(function(data) {
        if (cb) {
            cb(data._value);
        }
    });
};

/**
 * Posts a message to group | channel | user
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postTo = function(name, text, params, cb) {
    return Vow.all([this.getChannels(), this.getUsers(), this.getGroups()]).then(function(data) {

        var all = [].concat(data[0].channels, data[1].members, data[2].groups);
        var result = find(all, {name: name});

        assert(Object.keys(result).length, 'wrong name');

        if (result['is_channel']) {
            return this.postMessageToChannel(name, text, params, cb);
        } else if (result['is_group']) {
            return this.postMessageToGroup(name, text, params, cb);
        } else {
            return this.postMessageToUser(name, text, params, cb);
        }
    }.bind(this));
};

/**
 * Preprocessing of params
 * @param params
 * @returns {object}
 * @private
 */
Bot.prototype._preprocessParams = function(params) {
    params = extend(params || {}, {token: this.token});

    Object.keys(params).forEach(function(name) {
        var param = params[name];

        if (param && typeof param === 'object') {
            params[name] = JSON.stringify(param);
        }
    });

    return params;
};

/**
 * Send request to API method
 * @param {string} methodName
 * @param {object} params
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._api = function(methodName, params) {

    var data = {
        url: 'https://slack.com/api/' + methodName,
        form: this._preprocessParams(params)
    };

    return new Vow.Promise(function(resolve, reject) {

        request.post(data, function(err, request, body) {
            if (err) {
                reject(err);

                return false;
            }

            try {
                body = JSON.parse(body);

                // Response always contain a top-level boolean property ok,
                // indicating success or failure
                if (body.ok) {
                    resolve(body);
                } else {
                    reject(body);
                }

            } catch (e) {
                reject(e);
            }
        });
    });
};

module.exports = Bot;
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":0,"_bound":3}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":2,"_bound":5,"ExpansionArg_int":0} start 25.7898 took 6.0511s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":2,"_bound":5,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program var request = require('request');
var Vow = require('vow');
var extend = require('extend');
var WebSocket = require('ws');
var util = require('util');
var utils = require('./libs/utils.js');
var find = utils.find;
var assert = utils.assert;
var EventEmitter = require('events').EventEmitter;

/**
 * @param {object} params
 * @constructor
 */
function Bot(params) {
    this.token = params.token;
    this.name = params.name;

    assert(params.token, 'token must be defined');
    this.login();
}

util.inherits(Bot, EventEmitter);

/**
 * Starts a Real Time Messaging API session
 */
Bot.prototype.login = function() {
    this._api('rtm.start').then(function(data) {
        this.wsUrl = data.url;
        this.self = data.self;
        this.team = data.team;
        this.channels = data.channels;
        this.users = data.users;
        this.ims = data.ims;
        this.groups = data.groups;

        this.emit('start');

        this.connect();
    }.bind(this)).fail(function(data) {
        this.emit('error', new Error(data.error ? data.error : data));
    }.bind(this)).done();
};

/**
 * Establish a WebSocket connection
 */
Bot.prototype.connect = function() {
    this.ws = new WebSocket(this.wsUrl);

    this.ws.on('open', function(data) {
        this.emit('open', data);
    }.bind(this));

    this.ws.on('close', function(data) {
        this.emit('close', data);
    }.bind(this));

    this.ws.on('message', function(data) {
        try {
            this.emit('message', JSON.parse(data));
        } catch (e) {
            console.log(e);
        }
    }.bind(this));
};

/**
 * Get channels
 * @returns {vow.Promise}
 */
Bot.prototype.getChannels = function() {
    if (this.channels) {
        return Vow.fulfill({ channels: this.channels });
    }
    return this._api('channels.list');
};

/**
 * Get users
 * @returns {vow.Promise}
 */
Bot.prototype.getUsers = function() {
    if (this.users) {
        return Vow.fulfill({ members: this.users });
    }

    return this._api('users.list');
};

/**
 * Get groups
 * @returns {vow.Promise}
 */
Bot.prototype.getGroups = function() {
    if (this.groups) {
        return Vow.fulfill({ groups: this.groups });
    }

    return this._api('groups.list');
};

/**
 * Get user by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getUser = function(name) {
    return this.getUsers().then(function(data) {
        return find(data.members, { name: name });
    });
};

/**
 * Get channel by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getChannel = function(name) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { name: name });
    });
};

/**
 * Get group by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getGroup = function(name) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { name: name });
    });
};

/**
 * Get user by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getUserById = function(id) {
    return this.getUsers().then(function(data) {
        return find(data.members, { id: id });
    });
};

/**
 * Get channel by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getChannelById = function(id) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { id: id });
    });
};

/**
 * Get group by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getGroupById = function(id) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { id: id });
    });
};

/**
 * Get channel ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getChannelId = function(name) {
    return this.getChannel(name).then(function(channel) {
        return channel.id;
    });
};

/**
 * Get group ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getGroupId = function(name) {
    return this.getGroup(name).then(function(group) {
        return group.id;
    });
};

/**
 * Get user ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getUserId = function(name) {
    return this.getUser(name).then(function(user) {
        return user.id;
    });
};

/**
 * Get "direct message" channel ID
 * @param {string} name
 * @returns {vow.Promise}
 */
Bot.prototype.getChatId = function(name) {
    return this.getUser(name).then(function(data) {

        var chatId = find(this.ims, { user: data.id }).id;

        return chatId || this.openIm(data.id);
    }.bind(this)).then(function(data) {
        return typeof data === 'string' ? data : data.channel.id;
    });
};

/**
 * Opens a "direct message" channel with another member of your Slack team
 * @param {string} userId
 * @returns {vow.Promise}
 */
Bot.prototype.openIm = function(userId) {
    return this._api('im.open', {user: userId});
};

/**
 * Posts a message to a channel by ID
 * @param {string} id - channel ID
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.postMessage = function(id, text, params) {
    params = extend({
        text: text,
        channel: id,
        username: this.name
    }, params || {});

    return this._api('chat.postMessage', params);
};

/**
 * Updates a message by timestamp
 * @param {string} id - channel ID
 * @param {string} ts - timestamp
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.updateMessage = function(id, ts, text, params) {
    params = extend({
        ts: ts,
        channel: id,
        username: this.name,
        text: text
    }, params || {});

    return this._api('chat.update', params);
};

/**
 * Posts a message to user by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToUser = function(name, text, params, cb) {
    return this._post((params || {}).slackbot ? 'slackbot' : 'user', name, text, params, cb);
};

/**
 * Posts a message to channel by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToChannel = function(name, text, params, cb) {
    return this._post('channel', name, text, params, cb);
};

/**
 * Posts a message to group by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToGroup = function(name, text, params, cb) {
    return this._post('group', name, text, params, cb);
};

/**
 * Common method for posting messages
 * @param {string} type
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._post = function(type, name, text, params, cb) {
    var method = ({
        'group': 'getGroupId',
        'channel': 'getChannelId',
        'user': 'getChatId',
        'slackbot': 'getUserId'
    })[type];

    if (typeof params === 'function') {
        cb = params;
        params = null;
    }

    return this[method](name).then(function(itemId) {
        return this.postMessage(itemId, text, params);
    }.bind(this)).always(function(data) {
        if (cb) {
            cb(data._value);
        }
    });
};

/**
 * Posts a message to group | channel | user
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postTo = function(name, text, params, cb) {
    return Vow.all([this.getChannels(), this.getUsers(), this.getGroups()]).then(function(data) {

        var all = [].concat(data[0].channels, data[1].members, data[2].groups);
        var result = find(all, {name: name});

        assert(Object.keys(result).length, 'wrong name');

        if (result['is_channel']) {
            return this.postMessageToChannel(name, text, params, cb);
        } else if (result['is_group']) {
            return this.postMessageToGroup(name, text, params, cb);
        } else {
            return this.postMessageToUser(name, text, params, cb);
        }
    }.bind(this));
};

/**
 * Preprocessing of params
 * @param params
 * @returns {object}
 * @private
 */
Bot.prototype._preprocessParams = function(params) {
    params = extend(params || {}, {token: this.token});

    Object.keys(params).forEach(function(name) {
        var param = params[name];

        if (param && typeof param === 'object') {
            params[name] = JSON.stringify(param);
        }
    });

    return params;
};

/**
 * Send request to API method
 * @param {string} methodName
 * @param {object} params
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._api = function(methodName, params) {

    var data = {
        url: 'https://slack.com/api/' + methodName,
        form: this._preprocessParams(params)
    };

    return new Vow.Promise(function(resolve, reject) {

        request.post(data, function(err, request, body) {
            if (err) {
                reject(err);

                return false;
            }

            try {
                body = JSON.parse(body);

                // Response always contain a top-level boolean property ok,
                // indicating success or failure
                if (body.ok) {
                    resolve(body);
                } else {
                    reject(body);
                }

            } catch (e) {
                reject(e);
            }
        });
    });
};

module.exports = Bot;
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":2,"_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4,"ExpansionArg_int":0} start 23.5699 took 8.6877s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program var request = require('request');
var Vow = require('vow');
var extend = require('extend');
var WebSocket = require('ws');
var util = require('util');
var utils = require('./libs/utils.js');
var find = utils.find;
var assert = utils.assert;
var EventEmitter = require('events').EventEmitter;

/**
 * @param {object} params
 * @constructor
 */
function Bot(params) {
    this.token = params.token;
    this.name = params.name;

    assert(params.token, 'token must be defined');
    this.login();
}

util.inherits(Bot, EventEmitter);

/**
 * Starts a Real Time Messaging API session
 */
Bot.prototype.login = function() {
    this._api('rtm.start').then(function(data) {
        this.wsUrl = data.url;
        this.self = data.self;
        this.team = data.team;
        this.channels = data.channels;
        this.users = data.users;
        this.ims = data.ims;
        this.groups = data.groups;

        this.emit('start');

        this.connect();
    }.bind(this)).fail(function(data) {
        this.emit('error', new Error(data.error ? data.error : data));
    }.bind(this)).done();
};

/**
 * Establish a WebSocket connection
 */
Bot.prototype.connect = function() {
    this.ws = new WebSocket(this.wsUrl);

    this.ws.on('open', function(data) {
        this.emit('open', data);
    }.bind(this));

    this.ws.on('close', function(data) {
        this.emit('close', data);
    }.bind(this));

    this.ws.on('message', function(data) {
        try {
            this.emit('message', JSON.parse(data));
        } catch (e) {
            console.log(e);
        }
    }.bind(this));
};

/**
 * Get channels
 * @returns {vow.Promise}
 */
Bot.prototype.getChannels = function() {
    if (this.channels) {
        return Vow.fulfill({ channels: this.channels });
    }
    return this._api('channels.list');
};

/**
 * Get users
 * @returns {vow.Promise}
 */
Bot.prototype.getUsers = function() {
    if (this.users) {
        return Vow.fulfill({ members: this.users });
    }

    return this._api('users.list');
};

/**
 * Get groups
 * @returns {vow.Promise}
 */
Bot.prototype.getGroups = function() {
    if (this.groups) {
        return Vow.fulfill({ groups: this.groups });
    }

    return this._api('groups.list');
};

/**
 * Get user by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getUser = function(name) {
    return this.getUsers().then(function(data) {
        return find(data.members, { name: name });
    });
};

/**
 * Get channel by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getChannel = function(name) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { name: name });
    });
};

/**
 * Get group by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getGroup = function(name) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { name: name });
    });
};

/**
 * Get user by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getUserById = function(id) {
    return this.getUsers().then(function(data) {
        return find(data.members, { id: id });
    });
};

/**
 * Get channel by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getChannelById = function(id) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { id: id });
    });
};

/**
 * Get group by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getGroupById = function(id) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { id: id });
    });
};

/**
 * Get channel ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getChannelId = function(name) {
    return this.getChannel(name).then(function(channel) {
        return channel.id;
    });
};

/**
 * Get group ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getGroupId = function(name) {
    return this.getGroup(name).then(function(group) {
        return group.id;
    });
};

/**
 * Get user ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getUserId = function(name) {
    return this.getUser(name).then(function(user) {
        return user.id;
    });
};

/**
 * Get "direct message" channel ID
 * @param {string} name
 * @returns {vow.Promise}
 */
Bot.prototype.getChatId = function(name) {
    return this.getUser(name).then(function(data) {

        var chatId = find(this.ims, { user: data.id }).id;

        return chatId || this.openIm(data.id);
    }.bind(this)).then(function(data) {
        return typeof data === 'string' ? data : data.channel.id;
    });
};

/**
 * Opens a "direct message" channel with another member of your Slack team
 * @param {string} userId
 * @returns {vow.Promise}
 */
Bot.prototype.openIm = function(userId) {
    return this._api('im.open', {user: userId});
};

/**
 * Posts a message to a channel by ID
 * @param {string} id - channel ID
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.postMessage = function(id, text, params) {
    params = extend({
        text: text,
        channel: id,
        username: this.name
    }, params || {});

    return this._api('chat.postMessage', params);
};

/**
 * Updates a message by timestamp
 * @param {string} id - channel ID
 * @param {string} ts - timestamp
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.updateMessage = function(id, ts, text, params) {
    params = extend({
        ts: ts,
        channel: id,
        username: this.name,
        text: text
    }, params || {});

    return this._api('chat.update', params);
};

/**
 * Posts a message to user by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToUser = function(name, text, params, cb) {
    return this._post((params || {}).slackbot ? 'slackbot' : 'user', name, text, params, cb);
};

/**
 * Posts a message to channel by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToChannel = function(name, text, params, cb) {
    return this._post('channel', name, text, params, cb);
};

/**
 * Posts a message to group by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToGroup = function(name, text, params, cb) {
    return this._post('group', name, text, params, cb);
};

/**
 * Common method for posting messages
 * @param {string} type
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._post = function(type, name, text, params, cb) {
    var method = ({
        'group': 'getGroupId',
        'channel': 'getChannelId',
        'user': 'getChatId',
        'slackbot': 'getUserId'
    })[type];

    if (typeof params === 'function') {
        cb = params;
        params = null;
    }

    return this[method](name).then(function(itemId) {
        return this.postMessage(itemId, text, params);
    }.bind(this)).always(function(data) {
        if (cb) {
            cb(data._value);
        }
    });
};

/**
 * Posts a message to group | channel | user
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postTo = function(name, text, params, cb) {
    return Vow.all([this.getChannels(), this.getUsers(), this.getGroups()]).then(function(data) {

        var all = [].concat(data[0].channels, data[1].members, data[2].groups);
        var result = find(all, {name: name});

        assert(Object.keys(result).length, 'wrong name');

        if (result['is_channel']) {
            return this.postMessageToChannel(name, text, params, cb);
        } else if (result['is_group']) {
            return this.postMessageToGroup(name, text, params, cb);
        } else {
            return this.postMessageToUser(name, text, params, cb);
        }
    }.bind(this));
};

/**
 * Preprocessing of params
 * @param params
 * @returns {object}
 * @private
 */
Bot.prototype._preprocessParams = function(params) {
    params = extend(params || {}, {token: this.token});

    Object.keys(params).forEach(function(name) {
        var param = params[name];

        if (param && typeof param === 'object') {
            params[name] = JSON.stringify(param);
        }
    });

    return params;
};

/**
 * Send request to API method
 * @param {string} methodName
 * @param {object} params
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._api = function(methodName, params) {

    var data = {
        url: 'https://slack.com/api/' + methodName,
        form: this._preprocessParams(params)
    };

    return new Vow.Promise(function(resolve, reject) {

        request.post(data, function(err, request, body) {
            if (err) {
                reject(err);

                return false;
            }

            try {
                body = JSON.parse(body);

                // Response always contain a top-level boolean property ok,
                // indicating success or failure
                if (body.ok) {
                    resolve(body);
                } else {
                    reject(body);
                }

            } catch (e) {
                reject(e);
            }
        });
    });
};

module.exports = Bot;
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"_bound":5,"ExpansionArg_int":0} start 21.5508 took 10.9475s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"_bound":5,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program var request = require('request');
var Vow = require('vow');
var extend = require('extend');
var WebSocket = require('ws');
var util = require('util');
var utils = require('./libs/utils.js');
var find = utils.find;
var assert = utils.assert;
var EventEmitter = require('events').EventEmitter;

/**
 * @param {object} params
 * @constructor
 */
function Bot(params) {
    this.token = params.token;
    this.name = params.name;

    assert(params.token, 'token must be defined');
    this.login();
}

util.inherits(Bot, EventEmitter);

/**
 * Starts a Real Time Messaging API session
 */
Bot.prototype.login = function() {
    this._api('rtm.start').then(function(data) {
        this.wsUrl = data.url;
        this.self = data.self;
        this.team = data.team;
        this.channels = data.channels;
        this.users = data.users;
        this.ims = data.ims;
        this.groups = data.groups;

        this.emit('start');

        this.connect();
    }.bind(this)).fail(function(data) {
        this.emit('error', new Error(data.error ? data.error : data));
    }.bind(this)).done();
};

/**
 * Establish a WebSocket connection
 */
Bot.prototype.connect = function() {
    this.ws = new WebSocket(this.wsUrl);

    this.ws.on('open', function(data) {
        this.emit('open', data);
    }.bind(this));

    this.ws.on('close', function(data) {
        this.emit('close', data);
    }.bind(this));

    this.ws.on('message', function(data) {
        try {
            this.emit('message', JSON.parse(data));
        } catch (e) {
            console.log(e);
        }
    }.bind(this));
};

/**
 * Get channels
 * @returns {vow.Promise}
 */
Bot.prototype.getChannels = function() {
    if (this.channels) {
        return Vow.fulfill({ channels: this.channels });
    }
    return this._api('channels.list');
};

/**
 * Get users
 * @returns {vow.Promise}
 */
Bot.prototype.getUsers = function() {
    if (this.users) {
        return Vow.fulfill({ members: this.users });
    }

    return this._api('users.list');
};

/**
 * Get groups
 * @returns {vow.Promise}
 */
Bot.prototype.getGroups = function() {
    if (this.groups) {
        return Vow.fulfill({ groups: this.groups });
    }

    return this._api('groups.list');
};

/**
 * Get user by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getUser = function(name) {
    return this.getUsers().then(function(data) {
        return find(data.members, { name: name });
    });
};

/**
 * Get channel by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getChannel = function(name) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { name: name });
    });
};

/**
 * Get group by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getGroup = function(name) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { name: name });
    });
};

/**
 * Get user by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getUserById = function(id) {
    return this.getUsers().then(function(data) {
        return find(data.members, { id: id });
    });
};

/**
 * Get channel by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getChannelById = function(id) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { id: id });
    });
};

/**
 * Get group by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getGroupById = function(id) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { id: id });
    });
};

/**
 * Get channel ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getChannelId = function(name) {
    return this.getChannel(name).then(function(channel) {
        return channel.id;
    });
};

/**
 * Get group ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getGroupId = function(name) {
    return this.getGroup(name).then(function(group) {
        return group.id;
    });
};

/**
 * Get user ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getUserId = function(name) {
    return this.getUser(name).then(function(user) {
        return user.id;
    });
};

/**
 * Get "direct message" channel ID
 * @param {string} name
 * @returns {vow.Promise}
 */
Bot.prototype.getChatId = function(name) {
    return this.getUser(name).then(function(data) {

        var chatId = find(this.ims, { user: data.id }).id;

        return chatId || this.openIm(data.id);
    }.bind(this)).then(function(data) {
        return typeof data === 'string' ? data : data.channel.id;
    });
};

/**
 * Opens a "direct message" channel with another member of your Slack team
 * @param {string} userId
 * @returns {vow.Promise}
 */
Bot.prototype.openIm = function(userId) {
    return this._api('im.open', {user: userId});
};

/**
 * Posts a message to a channel by ID
 * @param {string} id - channel ID
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.postMessage = function(id, text, params) {
    params = extend({
        text: text,
        channel: id,
        username: this.name
    }, params || {});

    return this._api('chat.postMessage', params);
};

/**
 * Updates a message by timestamp
 * @param {string} id - channel ID
 * @param {string} ts - timestamp
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.updateMessage = function(id, ts, text, params) {
    params = extend({
        ts: ts,
        channel: id,
        username: this.name,
        text: text
    }, params || {});

    return this._api('chat.update', params);
};

/**
 * Posts a message to user by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToUser = function(name, text, params, cb) {
    return this._post((params || {}).slackbot ? 'slackbot' : 'user', name, text, params, cb);
};

/**
 * Posts a message to channel by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToChannel = function(name, text, params, cb) {
    return this._post('channel', name, text, params, cb);
};

/**
 * Posts a message to group by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToGroup = function(name, text, params, cb) {
    return this._post('group', name, text, params, cb);
};

/**
 * Common method for posting messages
 * @param {string} type
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._post = function(type, name, text, params, cb) {
    var method = ({
        'group': 'getGroupId',
        'channel': 'getChannelId',
        'user': 'getChatId',
        'slackbot': 'getUserId'
    })[type];

    if (typeof params === 'function') {
        cb = params;
        params = null;
    }

    return this[method](name).then(function(itemId) {
        return this.postMessage(itemId, text, params);
    }.bind(this)).always(function(data) {
        if (cb) {
            cb(data._value);
        }
    });
};

/**
 * Posts a message to group | channel | user
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postTo = function(name, text, params, cb) {
    return Vow.all([this.getChannels(), this.getUsers(), this.getGroups()]).then(function(data) {

        var all = [].concat(data[0].channels, data[1].members, data[2].groups);
        var result = find(all, {name: name});

        assert(Object.keys(result).length, 'wrong name');

        if (result['is_channel']) {
            return this.postMessageToChannel(name, text, params, cb);
        } else if (result['is_group']) {
            return this.postMessageToGroup(name, text, params, cb);
        } else {
            return this.postMessageToUser(name, text, params, cb);
        }
    }.bind(this));
};

/**
 * Preprocessing of params
 * @param params
 * @returns {object}
 * @private
 */
Bot.prototype._preprocessParams = function(params) {
    params = extend(params || {}, {token: this.token});

    Object.keys(params).forEach(function(name) {
        var param = params[name];

        if (param && typeof param === 'object') {
            params[name] = JSON.stringify(param);
        }
    });

    return params;
};

/**
 * Send request to API method
 * @param {string} methodName
 * @param {object} params
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._api = function(methodName, params) {

    var data = {
        url: 'https://slack.com/api/' + methodName,
        form: this._preprocessParams(params)
    };

    return new Vow.Promise(function(resolve, reject) {

        request.post(data, function(err, request, body) {
            if (err) {
                reject(err);

                return false;
            }

            try {
                body = JSON.parse(body);

                // Response always contain a top-level boolean property ok,
                // indicating success or failure
                if (body.ok) {
                    resolve(body);
                } else {
                    reject(body);
                }

            } catch (e) {
                reject(e);
            }
        });
    });
};

module.exports = Bot;
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"_bound":5,"ExpansionArg_int":0} start 23.5859 took 9.3836s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"_bound":5,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program var request = require('request');
var Vow = require('vow');
var extend = require('extend');
var WebSocket = require('ws');
var util = require('util');
var utils = require('./libs/utils.js');
var find = utils.find;
var assert = utils.assert;
var EventEmitter = require('events').EventEmitter;

/**
 * @param {object} params
 * @constructor
 */
function Bot(params) {
    this.token = params.token;
    this.name = params.name;

    assert(params.token, 'token must be defined');
    this.login();
}

util.inherits(Bot, EventEmitter);

/**
 * Starts a Real Time Messaging API session
 */
Bot.prototype.login = function() {
    this._api('rtm.start').then(function(data) {
        this.wsUrl = data.url;
        this.self = data.self;
        this.team = data.team;
        this.channels = data.channels;
        this.users = data.users;
        this.ims = data.ims;
        this.groups = data.groups;

        this.emit('start');

        this.connect();
    }.bind(this)).fail(function(data) {
        this.emit('error', new Error(data.error ? data.error : data));
    }.bind(this)).done();
};

/**
 * Establish a WebSocket connection
 */
Bot.prototype.connect = function() {
    this.ws = new WebSocket(this.wsUrl);

    this.ws.on('open', function(data) {
        this.emit('open', data);
    }.bind(this));

    this.ws.on('close', function(data) {
        this.emit('close', data);
    }.bind(this));

    this.ws.on('message', function(data) {
        try {
            this.emit('message', JSON.parse(data));
        } catch (e) {
            console.log(e);
        }
    }.bind(this));
};

/**
 * Get channels
 * @returns {vow.Promise}
 */
Bot.prototype.getChannels = function() {
    if (this.channels) {
        return Vow.fulfill({ channels: this.channels });
    }
    return this._api('channels.list');
};

/**
 * Get users
 * @returns {vow.Promise}
 */
Bot.prototype.getUsers = function() {
    if (this.users) {
        return Vow.fulfill({ members: this.users });
    }

    return this._api('users.list');
};

/**
 * Get groups
 * @returns {vow.Promise}
 */
Bot.prototype.getGroups = function() {
    if (this.groups) {
        return Vow.fulfill({ groups: this.groups });
    }

    return this._api('groups.list');
};

/**
 * Get user by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getUser = function(name) {
    return this.getUsers().then(function(data) {
        return find(data.members, { name: name });
    });
};

/**
 * Get channel by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getChannel = function(name) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { name: name });
    });
};

/**
 * Get group by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getGroup = function(name) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { name: name });
    });
};

/**
 * Get user by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getUserById = function(id) {
    return this.getUsers().then(function(data) {
        return find(data.members, { id: id });
    });
};

/**
 * Get channel by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getChannelById = function(id) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { id: id });
    });
};

/**
 * Get group by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getGroupById = function(id) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { id: id });
    });
};

/**
 * Get channel ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getChannelId = function(name) {
    return this.getChannel(name).then(function(channel) {
        return channel.id;
    });
};

/**
 * Get group ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getGroupId = function(name) {
    return this.getGroup(name).then(function(group) {
        return group.id;
    });
};

/**
 * Get user ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getUserId = function(name) {
    return this.getUser(name).then(function(user) {
        return user.id;
    });
};

/**
 * Get "direct message" channel ID
 * @param {string} name
 * @returns {vow.Promise}
 */
Bot.prototype.getChatId = function(name) {
    return this.getUser(name).then(function(data) {

        var chatId = find(this.ims, { user: data.id }).id;

        return chatId || this.openIm(data.id);
    }.bind(this)).then(function(data) {
        return typeof data === 'string' ? data : data.channel.id;
    });
};

/**
 * Opens a "direct message" channel with another member of your Slack team
 * @param {string} userId
 * @returns {vow.Promise}
 */
Bot.prototype.openIm = function(userId) {
    return this._api('im.open', {user: userId});
};

/**
 * Posts a message to a channel by ID
 * @param {string} id - channel ID
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.postMessage = function(id, text, params) {
    params = extend({
        text: text,
        channel: id,
        username: this.name
    }, params || {});

    return this._api('chat.postMessage', params);
};

/**
 * Updates a message by timestamp
 * @param {string} id - channel ID
 * @param {string} ts - timestamp
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.updateMessage = function(id, ts, text, params) {
    params = extend({
        ts: ts,
        channel: id,
        username: this.name,
        text: text
    }, params || {});

    return this._api('chat.update', params);
};

/**
 * Posts a message to user by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToUser = function(name, text, params, cb) {
    return this._post((params || {}).slackbot ? 'slackbot' : 'user', name, text, params, cb);
};

/**
 * Posts a message to channel by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToChannel = function(name, text, params, cb) {
    return this._post('channel', name, text, params, cb);
};

/**
 * Posts a message to group by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToGroup = function(name, text, params, cb) {
    return this._post('group', name, text, params, cb);
};

/**
 * Common method for posting messages
 * @param {string} type
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._post = function(type, name, text, params, cb) {
    var method = ({
        'group': 'getGroupId',
        'channel': 'getChannelId',
        'user': 'getChatId',
        'slackbot': 'getUserId'
    })[type];

    if (typeof params === 'function') {
        cb = params;
        params = null;
    }

    return this[method](name).then(function(itemId) {
        return this.postMessage(itemId, text, params);
    }.bind(this)).always(function(data) {
        if (cb) {
            cb(data._value);
        }
    });
};

/**
 * Posts a message to group | channel | user
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postTo = function(name, text, params, cb) {
    return Vow.all([this.getChannels(), this.getUsers(), this.getGroups()]).then(function(data) {

        var all = [].concat(data[0].channels, data[1].members, data[2].groups);
        var result = find(all, {name: name});

        assert(Object.keys(result).length, 'wrong name');

        if (result['is_channel']) {
            return this.postMessageToChannel(name, text, params, cb);
        } else if (result['is_group']) {
            return this.postMessageToGroup(name, text, params, cb);
        } else {
            return this.postMessageToUser(name, text, params, cb);
        }
    }.bind(this));
};

/**
 * Preprocessing of params
 * @param params
 * @returns {object}
 * @private
 */
Bot.prototype._preprocessParams = function(params) {
    params = extend(params || {}, {token: this.token});

    Object.keys(params).forEach(function(name) {
        var param = params[name];

        if (param && typeof param === 'object') {
            params[name] = JSON.stringify(param);
        }
    });

    return params;
};

/**
 * Send request to API method
 * @param {string} methodName
 * @param {object} params
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._api = function(methodName, params) {

    var data = {
        url: 'https://slack.com/api/' + methodName,
        form: this._preprocessParams(params)
    };

    return new Vow.Promise(function(resolve, reject) {

        request.post(data, function(err, request, body) {
            if (err) {
                reject(err);

                return false;
            }

            try {
                body = JSON.parse(body);

                // Response always contain a top-level boolean property ok,
                // indicating success or failure
                if (body.ok) {
                    resolve(body);
                } else {
                    reject(body);
                }

            } catch (e) {
                reject(e);
            }
        });
    });
};

module.exports = Bot;
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"ExpansionArg_type_3":2,"_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4,"ExpansionArg_int":0} start 25.8105 took 10.9515s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program var request = require('request');
var Vow = require('vow');
var extend = require('extend');
var WebSocket = require('ws');
var util = require('util');
var utils = require('./libs/utils.js');
var find = utils.find;
var assert = utils.assert;
var EventEmitter = require('events').EventEmitter;

/**
 * @param {object} params
 * @constructor
 */
function Bot(params) {
    this.token = params.token;
    this.name = params.name;

    assert(params.token, 'token must be defined');
    this.login();
}

util.inherits(Bot, EventEmitter);

/**
 * Starts a Real Time Messaging API session
 */
Bot.prototype.login = function() {
    this._api('rtm.start').then(function(data) {
        this.wsUrl = data.url;
        this.self = data.self;
        this.team = data.team;
        this.channels = data.channels;
        this.users = data.users;
        this.ims = data.ims;
        this.groups = data.groups;

        this.emit('start');

        this.connect();
    }.bind(this)).fail(function(data) {
        this.emit('error', new Error(data.error ? data.error : data));
    }.bind(this)).done();
};

/**
 * Establish a WebSocket connection
 */
Bot.prototype.connect = function() {
    this.ws = new WebSocket(this.wsUrl);

    this.ws.on('open', function(data) {
        this.emit('open', data);
    }.bind(this));

    this.ws.on('close', function(data) {
        this.emit('close', data);
    }.bind(this));

    this.ws.on('message', function(data) {
        try {
            this.emit('message', JSON.parse(data));
        } catch (e) {
            console.log(e);
        }
    }.bind(this));
};

/**
 * Get channels
 * @returns {vow.Promise}
 */
Bot.prototype.getChannels = function() {
    if (this.channels) {
        return Vow.fulfill({ channels: this.channels });
    }
    return this._api('channels.list');
};

/**
 * Get users
 * @returns {vow.Promise}
 */
Bot.prototype.getUsers = function() {
    if (this.users) {
        return Vow.fulfill({ members: this.users });
    }

    return this._api('users.list');
};

/**
 * Get groups
 * @returns {vow.Promise}
 */
Bot.prototype.getGroups = function() {
    if (this.groups) {
        return Vow.fulfill({ groups: this.groups });
    }

    return this._api('groups.list');
};

/**
 * Get user by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getUser = function(name) {
    return this.getUsers().then(function(data) {
        return find(data.members, { name: name });
    });
};

/**
 * Get channel by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getChannel = function(name) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { name: name });
    });
};

/**
 * Get group by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getGroup = function(name) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { name: name });
    });
};

/**
 * Get user by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getUserById = function(id) {
    return this.getUsers().then(function(data) {
        return find(data.members, { id: id });
    });
};

/**
 * Get channel by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getChannelById = function(id) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { id: id });
    });
};

/**
 * Get group by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getGroupById = function(id) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { id: id });
    });
};

/**
 * Get channel ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getChannelId = function(name) {
    return this.getChannel(name).then(function(channel) {
        return channel.id;
    });
};

/**
 * Get group ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getGroupId = function(name) {
    return this.getGroup(name).then(function(group) {
        return group.id;
    });
};

/**
 * Get user ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getUserId = function(name) {
    return this.getUser(name).then(function(user) {
        return user.id;
    });
};

/**
 * Get "direct message" channel ID
 * @param {string} name
 * @returns {vow.Promise}
 */
Bot.prototype.getChatId = function(name) {
    return this.getUser(name).then(function(data) {

        var chatId = find(this.ims, { user: data.id }).id;

        return chatId || this.openIm(data.id);
    }.bind(this)).then(function(data) {
        return typeof data === 'string' ? data : data.channel.id;
    });
};

/**
 * Opens a "direct message" channel with another member of your Slack team
 * @param {string} userId
 * @returns {vow.Promise}
 */
Bot.prototype.openIm = function(userId) {
    return this._api('im.open', {user: userId});
};

/**
 * Posts a message to a channel by ID
 * @param {string} id - channel ID
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.postMessage = function(id, text, params) {
    params = extend({
        text: text,
        channel: id,
        username: this.name
    }, params || {});

    return this._api('chat.postMessage', params);
};

/**
 * Updates a message by timestamp
 * @param {string} id - channel ID
 * @param {string} ts - timestamp
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.updateMessage = function(id, ts, text, params) {
    params = extend({
        ts: ts,
        channel: id,
        username: this.name,
        text: text
    }, params || {});

    return this._api('chat.update', params);
};

/**
 * Posts a message to user by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToUser = function(name, text, params, cb) {
    return this._post((params || {}).slackbot ? 'slackbot' : 'user', name, text, params, cb);
};

/**
 * Posts a message to channel by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToChannel = function(name, text, params, cb) {
    return this._post('channel', name, text, params, cb);
};

/**
 * Posts a message to group by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToGroup = function(name, text, params, cb) {
    return this._post('group', name, text, params, cb);
};

/**
 * Common method for posting messages
 * @param {string} type
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._post = function(type, name, text, params, cb) {
    var method = ({
        'group': 'getGroupId',
        'channel': 'getChannelId',
        'user': 'getChatId',
        'slackbot': 'getUserId'
    })[type];

    if (typeof params === 'function') {
        cb = params;
        params = null;
    }

    return this[method](name).then(function(itemId) {
        return this.postMessage(itemId, text, params);
    }.bind(this)).always(function(data) {
        if (cb) {
            cb(data._value);
        }
    });
};

/**
 * Posts a message to group | channel | user
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postTo = function(name, text, params, cb) {
    return Vow.all([this.getChannels(), this.getUsers(), this.getGroups()]).then(function(data) {

        var all = [].concat(data[0].channels, data[1].members, data[2].groups);
        var result = find(all, {name: name});

        assert(Object.keys(result).length, 'wrong name');

        if (result['is_channel']) {
            return this.postMessageToChannel(name, text, params, cb);
        } else if (result['is_group']) {
            return this.postMessageToGroup(name, text, params, cb);
        } else {
            return this.postMessageToUser(name, text, params, cb);
        }
    }.bind(this));
};

/**
 * Preprocessing of params
 * @param params
 * @returns {object}
 * @private
 */
Bot.prototype._preprocessParams = function(params) {
    params = extend(params || {}, {token: this.token});

    Object.keys(params).forEach(function(name) {
        var param = params[name];

        if (param && typeof param === 'object') {
            params[name] = JSON.stringify(param);
        }
    });

    return params;
};

/**
 * Send request to API method
 * @param {string} methodName
 * @param {object} params
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._api = function(methodName, params) {

    var data = {
        url: 'https://slack.com/api/' + methodName,
        form: this._preprocessParams(params)
    };

    return new Vow.Promise(function(resolve, reject) {

        request.post(data, function(err, request, body) {
            if (err) {
                reject(err);

                return false;
            }

            try {
                body = JSON.parse(body);

                // Response always contain a top-level boolean property ok,
                // indicating success or failure
                if (body.ok) {
                    resolve(body);
                } else {
                    reject(body);
                }

            } catch (e) {
                reject(e);
            }
        });
    });
};

module.exports = Bot;
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"ExpansionArg_type_3":0,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"_bound":6,"ExpansionArg_string":"PureString"} start 32.3051 took 7.8647s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"_bound":6,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program var request = require('request');
var Vow = require('vow');
var extend = require('extend');
var WebSocket = require('ws');
var util = require('util');
var utils = require('./libs/utils.js');
var find = utils.find;
var assert = utils.assert;
var EventEmitter = require('events').EventEmitter;

/**
 * @param {object} params
 * @constructor
 */
function Bot(params) {
    this.token = params.token;
    this.name = params.name;

    assert(params.token, 'token must be defined');
    this.login();
}

util.inherits(Bot, EventEmitter);

/**
 * Starts a Real Time Messaging API session
 */
Bot.prototype.login = function() {
    this._api('rtm.start').then(function(data) {
        this.wsUrl = data.url;
        this.self = data.self;
        this.team = data.team;
        this.channels = data.channels;
        this.users = data.users;
        this.ims = data.ims;
        this.groups = data.groups;

        this.emit('start');

        this.connect();
    }.bind(this)).fail(function(data) {
        this.emit('error', new Error(data.error ? data.error : data));
    }.bind(this)).done();
};

/**
 * Establish a WebSocket connection
 */
Bot.prototype.connect = function() {
    this.ws = new WebSocket(this.wsUrl);

    this.ws.on('open', function(data) {
        this.emit('open', data);
    }.bind(this));

    this.ws.on('close', function(data) {
        this.emit('close', data);
    }.bind(this));

    this.ws.on('message', function(data) {
        try {
            this.emit('message', JSON.parse(data));
        } catch (e) {
            console.log(e);
        }
    }.bind(this));
};

/**
 * Get channels
 * @returns {vow.Promise}
 */
Bot.prototype.getChannels = function() {
    if (this.channels) {
        return Vow.fulfill({ channels: this.channels });
    }
    return this._api('channels.list');
};

/**
 * Get users
 * @returns {vow.Promise}
 */
Bot.prototype.getUsers = function() {
    if (this.users) {
        return Vow.fulfill({ members: this.users });
    }

    return this._api('users.list');
};

/**
 * Get groups
 * @returns {vow.Promise}
 */
Bot.prototype.getGroups = function() {
    if (this.groups) {
        return Vow.fulfill({ groups: this.groups });
    }

    return this._api('groups.list');
};

/**
 * Get user by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getUser = function(name) {
    return this.getUsers().then(function(data) {
        return find(data.members, { name: name });
    });
};

/**
 * Get channel by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getChannel = function(name) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { name: name });
    });
};

/**
 * Get group by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getGroup = function(name) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { name: name });
    });
};

/**
 * Get user by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getUserById = function(id) {
    return this.getUsers().then(function(data) {
        return find(data.members, { id: id });
    });
};

/**
 * Get channel by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getChannelById = function(id) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { id: id });
    });
};

/**
 * Get group by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getGroupById = function(id) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { id: id });
    });
};

/**
 * Get channel ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getChannelId = function(name) {
    return this.getChannel(name).then(function(channel) {
        return channel.id;
    });
};

/**
 * Get group ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getGroupId = function(name) {
    return this.getGroup(name).then(function(group) {
        return group.id;
    });
};

/**
 * Get user ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getUserId = function(name) {
    return this.getUser(name).then(function(user) {
        return user.id;
    });
};

/**
 * Get "direct message" channel ID
 * @param {string} name
 * @returns {vow.Promise}
 */
Bot.prototype.getChatId = function(name) {
    return this.getUser(name).then(function(data) {

        var chatId = find(this.ims, { user: data.id }).id;

        return chatId || this.openIm(data.id);
    }.bind(this)).then(function(data) {
        return typeof data === 'string' ? data : data.channel.id;
    });
};

/**
 * Opens a "direct message" channel with another member of your Slack team
 * @param {string} userId
 * @returns {vow.Promise}
 */
Bot.prototype.openIm = function(userId) {
    return this._api('im.open', {user: userId});
};

/**
 * Posts a message to a channel by ID
 * @param {string} id - channel ID
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.postMessage = function(id, text, params) {
    params = extend({
        text: text,
        channel: id,
        username: this.name
    }, params || {});

    return this._api('chat.postMessage', params);
};

/**
 * Updates a message by timestamp
 * @param {string} id - channel ID
 * @param {string} ts - timestamp
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.updateMessage = function(id, ts, text, params) {
    params = extend({
        ts: ts,
        channel: id,
        username: this.name,
        text: text
    }, params || {});

    return this._api('chat.update', params);
};

/**
 * Posts a message to user by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToUser = function(name, text, params, cb) {
    return this._post((params || {}).slackbot ? 'slackbot' : 'user', name, text, params, cb);
};

/**
 * Posts a message to channel by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToChannel = function(name, text, params, cb) {
    return this._post('channel', name, text, params, cb);
};

/**
 * Posts a message to group by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToGroup = function(name, text, params, cb) {
    return this._post('group', name, text, params, cb);
};

/**
 * Common method for posting messages
 * @param {string} type
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._post = function(type, name, text, params, cb) {
    var method = ({
        'group': 'getGroupId',
        'channel': 'getChannelId',
        'user': 'getChatId',
        'slackbot': 'getUserId'
    })[type];

    if (typeof params === 'function') {
        cb = params;
        params = null;
    }

    return this[method](name).then(function(itemId) {
        return this.postMessage(itemId, text, params);
    }.bind(this)).always(function(data) {
        if (cb) {
            cb(data._value);
        }
    });
};

/**
 * Posts a message to group | channel | user
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postTo = function(name, text, params, cb) {
    return Vow.all([this.getChannels(), this.getUsers(), this.getGroups()]).then(function(data) {

        var all = [].concat(data[0].channels, data[1].members, data[2].groups);
        var result = find(all, {name: name});

        assert(Object.keys(result).length, 'wrong name');

        if (result['is_channel']) {
            return this.postMessageToChannel(name, text, params, cb);
        } else if (result['is_group']) {
            return this.postMessageToGroup(name, text, params, cb);
        } else {
            return this.postMessageToUser(name, text, params, cb);
        }
    }.bind(this));
};

/**
 * Preprocessing of params
 * @param params
 * @returns {object}
 * @private
 */
Bot.prototype._preprocessParams = function(params) {
    params = extend(params || {}, {token: this.token});

    Object.keys(params).forEach(function(name) {
        var param = params[name];

        if (param && typeof param === 'object') {
            params[name] = JSON.stringify(param);
        }
    });

    return params;
};

/**
 * Send request to API method
 * @param {string} methodName
 * @param {object} params
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._api = function(methodName, params) {

    var data = {
        url: 'https://slack.com/api/' + methodName,
        form: this._preprocessParams(params)
    };

    return new Vow.Promise(function(resolve, reject) {

        request.post(data, function(err, request, body) {
            if (err) {
                reject(err);

                return false;
            }

            try {
                body = JSON.parse(body);

                // Response always contain a top-level boolean property ok,
                // indicating success or failure
                if (body.ok) {
                    resolve(body);
                } else {
                    reject(body);
                }

            } catch (e) {
                reject(e);
            }
        });
    });
};

module.exports = Bot;
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"ExpansionArg_type_3":0,"_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":3,"_bound":7,"ExpansionArg_string":"PureString"} start 32.3463 took 9.3807s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":3,"_bound":7,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program var request = require('request');
var Vow = require('vow');
var extend = require('extend');
var WebSocket = require('ws');
var util = require('util');
var utils = require('./libs/utils.js');
var find = utils.find;
var assert = utils.assert;
var EventEmitter = require('events').EventEmitter;

/**
 * @param {object} params
 * @constructor
 */
function Bot(params) {
    this.token = params.token;
    this.name = params.name;

    assert(params.token, 'token must be defined');
    this.login();
}

util.inherits(Bot, EventEmitter);

/**
 * Starts a Real Time Messaging API session
 */
Bot.prototype.login = function() {
    this._api('rtm.start').then(function(data) {
        this.wsUrl = data.url;
        this.self = data.self;
        this.team = data.team;
        this.channels = data.channels;
        this.users = data.users;
        this.ims = data.ims;
        this.groups = data.groups;

        this.emit('start');

        this.connect();
    }.bind(this)).fail(function(data) {
        this.emit('error', new Error(data.error ? data.error : data));
    }.bind(this)).done();
};

/**
 * Establish a WebSocket connection
 */
Bot.prototype.connect = function() {
    this.ws = new WebSocket(this.wsUrl);

    this.ws.on('open', function(data) {
        this.emit('open', data);
    }.bind(this));

    this.ws.on('close', function(data) {
        this.emit('close', data);
    }.bind(this));

    this.ws.on('message', function(data) {
        try {
            this.emit('message', JSON.parse(data));
        } catch (e) {
            console.log(e);
        }
    }.bind(this));
};

/**
 * Get channels
 * @returns {vow.Promise}
 */
Bot.prototype.getChannels = function() {
    if (this.channels) {
        return Vow.fulfill({ channels: this.channels });
    }
    return this._api('channels.list');
};

/**
 * Get users
 * @returns {vow.Promise}
 */
Bot.prototype.getUsers = function() {
    if (this.users) {
        return Vow.fulfill({ members: this.users });
    }

    return this._api('users.list');
};

/**
 * Get groups
 * @returns {vow.Promise}
 */
Bot.prototype.getGroups = function() {
    if (this.groups) {
        return Vow.fulfill({ groups: this.groups });
    }

    return this._api('groups.list');
};

/**
 * Get user by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getUser = function(name) {
    return this.getUsers().then(function(data) {
        return find(data.members, { name: name });
    });
};

/**
 * Get channel by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getChannel = function(name) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { name: name });
    });
};

/**
 * Get group by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getGroup = function(name) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { name: name });
    });
};

/**
 * Get user by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getUserById = function(id) {
    return this.getUsers().then(function(data) {
        return find(data.members, { id: id });
    });
};

/**
 * Get channel by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getChannelById = function(id) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { id: id });
    });
};

/**
 * Get group by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getGroupById = function(id) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { id: id });
    });
};

/**
 * Get channel ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getChannelId = function(name) {
    return this.getChannel(name).then(function(channel) {
        return channel.id;
    });
};

/**
 * Get group ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getGroupId = function(name) {
    return this.getGroup(name).then(function(group) {
        return group.id;
    });
};

/**
 * Get user ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getUserId = function(name) {
    return this.getUser(name).then(function(user) {
        return user.id;
    });
};

/**
 * Get "direct message" channel ID
 * @param {string} name
 * @returns {vow.Promise}
 */
Bot.prototype.getChatId = function(name) {
    return this.getUser(name).then(function(data) {

        var chatId = find(this.ims, { user: data.id }).id;

        return chatId || this.openIm(data.id);
    }.bind(this)).then(function(data) {
        return typeof data === 'string' ? data : data.channel.id;
    });
};

/**
 * Opens a "direct message" channel with another member of your Slack team
 * @param {string} userId
 * @returns {vow.Promise}
 */
Bot.prototype.openIm = function(userId) {
    return this._api('im.open', {user: userId});
};

/**
 * Posts a message to a channel by ID
 * @param {string} id - channel ID
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.postMessage = function(id, text, params) {
    params = extend({
        text: text,
        channel: id,
        username: this.name
    }, params || {});

    return this._api('chat.postMessage', params);
};

/**
 * Updates a message by timestamp
 * @param {string} id - channel ID
 * @param {string} ts - timestamp
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.updateMessage = function(id, ts, text, params) {
    params = extend({
        ts: ts,
        channel: id,
        username: this.name,
        text: text
    }, params || {});

    return this._api('chat.update', params);
};

/**
 * Posts a message to user by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToUser = function(name, text, params, cb) {
    return this._post((params || {}).slackbot ? 'slackbot' : 'user', name, text, params, cb);
};

/**
 * Posts a message to channel by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToChannel = function(name, text, params, cb) {
    return this._post('channel', name, text, params, cb);
};

/**
 * Posts a message to group by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToGroup = function(name, text, params, cb) {
    return this._post('group', name, text, params, cb);
};

/**
 * Common method for posting messages
 * @param {string} type
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._post = function(type, name, text, params, cb) {
    var method = ({
        'group': 'getGroupId',
        'channel': 'getChannelId',
        'user': 'getChatId',
        'slackbot': 'getUserId'
    })[type];

    if (typeof params === 'function') {
        cb = params;
        params = null;
    }

    return this[method](name).then(function(itemId) {
        return this.postMessage(itemId, text, params);
    }.bind(this)).always(function(data) {
        if (cb) {
            cb(data._value);
        }
    });
};

/**
 * Posts a message to group | channel | user
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postTo = function(name, text, params, cb) {
    return Vow.all([this.getChannels(), this.getUsers(), this.getGroups()]).then(function(data) {

        var all = [].concat(data[0].channels, data[1].members, data[2].groups);
        var result = find(all, {name: name});

        assert(Object.keys(result).length, 'wrong name');

        if (result['is_channel']) {
            return this.postMessageToChannel(name, text, params, cb);
        } else if (result['is_group']) {
            return this.postMessageToGroup(name, text, params, cb);
        } else {
            return this.postMessageToUser(name, text, params, cb);
        }
    }.bind(this));
};

/**
 * Preprocessing of params
 * @param params
 * @returns {object}
 * @private
 */
Bot.prototype._preprocessParams = function(params) {
    params = extend(params || {}, {token: this.token});

    Object.keys(params).forEach(function(name) {
        var param = params[name];

        if (param && typeof param === 'object') {
            params[name] = JSON.stringify(param);
        }
    });

    return params;
};

/**
 * Send request to API method
 * @param {string} methodName
 * @param {object} params
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._api = function(methodName, params) {

    var data = {
        url: 'https://slack.com/api/' + methodName,
        form: this._preprocessParams(params)
    };

    return new Vow.Promise(function(resolve, reject) {

        request.post(data, function(err, request, body) {
            if (err) {
                reject(err);

                return false;
            }

            try {
                body = JSON.parse(body);

                // Response always contain a top-level boolean property ok,
                // indicating success or failure
                if (body.ok) {
                    resolve(body);
                } else {
                    reject(body);
                }

            } catch (e) {
                reject(e);
            }
        });
    });
};

module.exports = Bot;
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"ExpansionArg_int":0,"ExpansionArg_type_3":3,"_bound":7}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":3,"ExpansionArg_int":0} start 23.5353 took 18.4113s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":3,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program var request = require('request');
var Vow = require('vow');
var extend = require('extend');
var WebSocket = require('ws');
var util = require('util');
var utils = require('./libs/utils.js');
var find = utils.find;
var assert = utils.assert;
var EventEmitter = require('events').EventEmitter;

/**
 * @param {object} params
 * @constructor
 */
function Bot(params) {
    this.token = params.token;
    this.name = params.name;

    assert(params.token, 'token must be defined');
    this.login();
}

util.inherits(Bot, EventEmitter);

/**
 * Starts a Real Time Messaging API session
 */
Bot.prototype.login = function() {
    this._api('rtm.start').then(function(data) {
        this.wsUrl = data.url;
        this.self = data.self;
        this.team = data.team;
        this.channels = data.channels;
        this.users = data.users;
        this.ims = data.ims;
        this.groups = data.groups;

        this.emit('start');

        this.connect();
    }.bind(this)).fail(function(data) {
        this.emit('error', new Error(data.error ? data.error : data));
    }.bind(this)).done();
};

/**
 * Establish a WebSocket connection
 */
Bot.prototype.connect = function() {
    this.ws = new WebSocket(this.wsUrl);

    this.ws.on('open', function(data) {
        this.emit('open', data);
    }.bind(this));

    this.ws.on('close', function(data) {
        this.emit('close', data);
    }.bind(this));

    this.ws.on('message', function(data) {
        try {
            this.emit('message', JSON.parse(data));
        } catch (e) {
            console.log(e);
        }
    }.bind(this));
};

/**
 * Get channels
 * @returns {vow.Promise}
 */
Bot.prototype.getChannels = function() {
    if (this.channels) {
        return Vow.fulfill({ channels: this.channels });
    }
    return this._api('channels.list');
};

/**
 * Get users
 * @returns {vow.Promise}
 */
Bot.prototype.getUsers = function() {
    if (this.users) {
        return Vow.fulfill({ members: this.users });
    }

    return this._api('users.list');
};

/**
 * Get groups
 * @returns {vow.Promise}
 */
Bot.prototype.getGroups = function() {
    if (this.groups) {
        return Vow.fulfill({ groups: this.groups });
    }

    return this._api('groups.list');
};

/**
 * Get user by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getUser = function(name) {
    return this.getUsers().then(function(data) {
        return find(data.members, { name: name });
    });
};

/**
 * Get channel by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getChannel = function(name) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { name: name });
    });
};

/**
 * Get group by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getGroup = function(name) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { name: name });
    });
};

/**
 * Get user by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getUserById = function(id) {
    return this.getUsers().then(function(data) {
        return find(data.members, { id: id });
    });
};

/**
 * Get channel by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getChannelById = function(id) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { id: id });
    });
};

/**
 * Get group by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getGroupById = function(id) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { id: id });
    });
};

/**
 * Get channel ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getChannelId = function(name) {
    return this.getChannel(name).then(function(channel) {
        return channel.id;
    });
};

/**
 * Get group ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getGroupId = function(name) {
    return this.getGroup(name).then(function(group) {
        return group.id;
    });
};

/**
 * Get user ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getUserId = function(name) {
    return this.getUser(name).then(function(user) {
        return user.id;
    });
};

/**
 * Get "direct message" channel ID
 * @param {string} name
 * @returns {vow.Promise}
 */
Bot.prototype.getChatId = function(name) {
    return this.getUser(name).then(function(data) {

        var chatId = find(this.ims, { user: data.id }).id;

        return chatId || this.openIm(data.id);
    }.bind(this)).then(function(data) {
        return typeof data === 'string' ? data : data.channel.id;
    });
};

/**
 * Opens a "direct message" channel with another member of your Slack team
 * @param {string} userId
 * @returns {vow.Promise}
 */
Bot.prototype.openIm = function(userId) {
    return this._api('im.open', {user: userId});
};

/**
 * Posts a message to a channel by ID
 * @param {string} id - channel ID
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.postMessage = function(id, text, params) {
    params = extend({
        text: text,
        channel: id,
        username: this.name
    }, params || {});

    return this._api('chat.postMessage', params);
};

/**
 * Updates a message by timestamp
 * @param {string} id - channel ID
 * @param {string} ts - timestamp
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.updateMessage = function(id, ts, text, params) {
    params = extend({
        ts: ts,
        channel: id,
        username: this.name,
        text: text
    }, params || {});

    return this._api('chat.update', params);
};

/**
 * Posts a message to user by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToUser = function(name, text, params, cb) {
    return this._post((params || {}).slackbot ? 'slackbot' : 'user', name, text, params, cb);
};

/**
 * Posts a message to channel by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToChannel = function(name, text, params, cb) {
    return this._post('channel', name, text, params, cb);
};

/**
 * Posts a message to group by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToGroup = function(name, text, params, cb) {
    return this._post('group', name, text, params, cb);
};

/**
 * Common method for posting messages
 * @param {string} type
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._post = function(type, name, text, params, cb) {
    var method = ({
        'group': 'getGroupId',
        'channel': 'getChannelId',
        'user': 'getChatId',
        'slackbot': 'getUserId'
    })[type];

    if (typeof params === 'function') {
        cb = params;
        params = null;
    }

    return this[method](name).then(function(itemId) {
        return this.postMessage(itemId, text, params);
    }.bind(this)).always(function(data) {
        if (cb) {
            cb(data._value);
        }
    });
};

/**
 * Posts a message to group | channel | user
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postTo = function(name, text, params, cb) {
    return Vow.all([this.getChannels(), this.getUsers(), this.getGroups()]).then(function(data) {

        var all = [].concat(data[0].channels, data[1].members, data[2].groups);
        var result = find(all, {name: name});

        assert(Object.keys(result).length, 'wrong name');

        if (result['is_channel']) {
            return this.postMessageToChannel(name, text, params, cb);
        } else if (result['is_group']) {
            return this.postMessageToGroup(name, text, params, cb);
        } else {
            return this.postMessageToUser(name, text, params, cb);
        }
    }.bind(this));
};

/**
 * Preprocessing of params
 * @param params
 * @returns {object}
 * @private
 */
Bot.prototype._preprocessParams = function(params) {
    params = extend(params || {}, {token: this.token});

    Object.keys(params).forEach(function(name) {
        var param = params[name];

        if (param && typeof param === 'object') {
            params[name] = JSON.stringify(param);
        }
    });

    return params;
};

/**
 * Send request to API method
 * @param {string} methodName
 * @param {object} params
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._api = function(methodName, params) {

    var data = {
        url: 'https://slack.com/api/' + methodName,
        form: this._preprocessParams(params)
    };

    return new Vow.Promise(function(resolve, reject) {

        request.post(data, function(err, request, body) {
            if (err) {
                reject(err);

                return false;
            }

            try {
                body = JSON.parse(body);

                // Response always contain a top-level boolean property ok,
                // indicating success or failure
                if (body.ok) {
                    resolve(body);
                } else {
                    reject(body);
                }

            } catch (e) {
                reject(e);
            }
        });
    });
};

module.exports = Bot;
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"ExpansionArg_type_3":0,"_bound":3}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":3,"ExpansionArg_int":0,"_bound":6,"ExpansionArg_string":"PureString"} start 32.5798 took 11.0002s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":3,"ExpansionArg_int":0,"_bound":6,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program var request = require('request');
var Vow = require('vow');
var extend = require('extend');
var WebSocket = require('ws');
var util = require('util');
var utils = require('./libs/utils.js');
var find = utils.find;
var assert = utils.assert;
var EventEmitter = require('events').EventEmitter;

/**
 * @param {object} params
 * @constructor
 */
function Bot(params) {
    this.token = params.token;
    this.name = params.name;

    assert(params.token, 'token must be defined');
    this.login();
}

util.inherits(Bot, EventEmitter);

/**
 * Starts a Real Time Messaging API session
 */
Bot.prototype.login = function() {
    this._api('rtm.start').then(function(data) {
        this.wsUrl = data.url;
        this.self = data.self;
        this.team = data.team;
        this.channels = data.channels;
        this.users = data.users;
        this.ims = data.ims;
        this.groups = data.groups;

        this.emit('start');

        this.connect();
    }.bind(this)).fail(function(data) {
        this.emit('error', new Error(data.error ? data.error : data));
    }.bind(this)).done();
};

/**
 * Establish a WebSocket connection
 */
Bot.prototype.connect = function() {
    this.ws = new WebSocket(this.wsUrl);

    this.ws.on('open', function(data) {
        this.emit('open', data);
    }.bind(this));

    this.ws.on('close', function(data) {
        this.emit('close', data);
    }.bind(this));

    this.ws.on('message', function(data) {
        try {
            this.emit('message', JSON.parse(data));
        } catch (e) {
            console.log(e);
        }
    }.bind(this));
};

/**
 * Get channels
 * @returns {vow.Promise}
 */
Bot.prototype.getChannels = function() {
    if (this.channels) {
        return Vow.fulfill({ channels: this.channels });
    }
    return this._api('channels.list');
};

/**
 * Get users
 * @returns {vow.Promise}
 */
Bot.prototype.getUsers = function() {
    if (this.users) {
        return Vow.fulfill({ members: this.users });
    }

    return this._api('users.list');
};

/**
 * Get groups
 * @returns {vow.Promise}
 */
Bot.prototype.getGroups = function() {
    if (this.groups) {
        return Vow.fulfill({ groups: this.groups });
    }

    return this._api('groups.list');
};

/**
 * Get user by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getUser = function(name) {
    return this.getUsers().then(function(data) {
        return find(data.members, { name: name });
    });
};

/**
 * Get channel by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getChannel = function(name) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { name: name });
    });
};

/**
 * Get group by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getGroup = function(name) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { name: name });
    });
};

/**
 * Get user by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getUserById = function(id) {
    return this.getUsers().then(function(data) {
        return find(data.members, { id: id });
    });
};

/**
 * Get channel by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getChannelById = function(id) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { id: id });
    });
};

/**
 * Get group by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getGroupById = function(id) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { id: id });
    });
};

/**
 * Get channel ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getChannelId = function(name) {
    return this.getChannel(name).then(function(channel) {
        return channel.id;
    });
};

/**
 * Get group ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getGroupId = function(name) {
    return this.getGroup(name).then(function(group) {
        return group.id;
    });
};

/**
 * Get user ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getUserId = function(name) {
    return this.getUser(name).then(function(user) {
        return user.id;
    });
};

/**
 * Get "direct message" channel ID
 * @param {string} name
 * @returns {vow.Promise}
 */
Bot.prototype.getChatId = function(name) {
    return this.getUser(name).then(function(data) {

        var chatId = find(this.ims, { user: data.id }).id;

        return chatId || this.openIm(data.id);
    }.bind(this)).then(function(data) {
        return typeof data === 'string' ? data : data.channel.id;
    });
};

/**
 * Opens a "direct message" channel with another member of your Slack team
 * @param {string} userId
 * @returns {vow.Promise}
 */
Bot.prototype.openIm = function(userId) {
    return this._api('im.open', {user: userId});
};

/**
 * Posts a message to a channel by ID
 * @param {string} id - channel ID
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.postMessage = function(id, text, params) {
    params = extend({
        text: text,
        channel: id,
        username: this.name
    }, params || {});

    return this._api('chat.postMessage', params);
};

/**
 * Updates a message by timestamp
 * @param {string} id - channel ID
 * @param {string} ts - timestamp
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.updateMessage = function(id, ts, text, params) {
    params = extend({
        ts: ts,
        channel: id,
        username: this.name,
        text: text
    }, params || {});

    return this._api('chat.update', params);
};

/**
 * Posts a message to user by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToUser = function(name, text, params, cb) {
    return this._post((params || {}).slackbot ? 'slackbot' : 'user', name, text, params, cb);
};

/**
 * Posts a message to channel by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToChannel = function(name, text, params, cb) {
    return this._post('channel', name, text, params, cb);
};

/**
 * Posts a message to group by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToGroup = function(name, text, params, cb) {
    return this._post('group', name, text, params, cb);
};

/**
 * Common method for posting messages
 * @param {string} type
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._post = function(type, name, text, params, cb) {
    var method = ({
        'group': 'getGroupId',
        'channel': 'getChannelId',
        'user': 'getChatId',
        'slackbot': 'getUserId'
    })[type];

    if (typeof params === 'function') {
        cb = params;
        params = null;
    }

    return this[method](name).then(function(itemId) {
        return this.postMessage(itemId, text, params);
    }.bind(this)).always(function(data) {
        if (cb) {
            cb(data._value);
        }
    });
};

/**
 * Posts a message to group | channel | user
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postTo = function(name, text, params, cb) {
    return Vow.all([this.getChannels(), this.getUsers(), this.getGroups()]).then(function(data) {

        var all = [].concat(data[0].channels, data[1].members, data[2].groups);
        var result = find(all, {name: name});

        assert(Object.keys(result).length, 'wrong name');

        if (result['is_channel']) {
            return this.postMessageToChannel(name, text, params, cb);
        } else if (result['is_group']) {
            return this.postMessageToGroup(name, text, params, cb);
        } else {
            return this.postMessageToUser(name, text, params, cb);
        }
    }.bind(this));
};

/**
 * Preprocessing of params
 * @param params
 * @returns {object}
 * @private
 */
Bot.prototype._preprocessParams = function(params) {
    params = extend(params || {}, {token: this.token});

    Object.keys(params).forEach(function(name) {
        var param = params[name];

        if (param && typeof param === 'object') {
            params[name] = JSON.stringify(param);
        }
    });

    return params;
};

/**
 * Send request to API method
 * @param {string} methodName
 * @param {object} params
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._api = function(methodName, params) {

    var data = {
        url: 'https://slack.com/api/' + methodName,
        form: this._preprocessParams(params)
    };

    return new Vow.Promise(function(resolve, reject) {

        request.post(data, function(err, request, body) {
            if (err) {
                reject(err);

                return false;
            }

            try {
                body = JSON.parse(body);

                // Response always contain a top-level boolean property ok,
                // indicating success or failure
                if (body.ok) {
                    resolve(body);
                } else {
                    reject(body);
                }

            } catch (e) {
                reject(e);
            }
        });
    });
};

module.exports = Bot;
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":0,"ExpansionArg_type_3":3,"ExpansionArg_int":0,"_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":1,"ExpansionArg_int":0,"_bound":6} start 31.9341 took 11.7641s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"ExpansionArg_type_3":1,"ExpansionArg_int":0,"_bound":6}
* Error: Tropigate failed because SyntaxError: Unexpected token (8:4) on program var request = require('request');
var Vow = require('vow');
var extend = require('extend');
var WebSocket = require('ws');
var util = require('util');
var utils = require('./libs/utils.js');
var find = utils.find;
var assert = utils.assert;
var EventEmitter = require('events').EventEmitter;

/**
 * @param {object} params
 * @constructor
 */
function Bot(params) {
    this.token = params.token;
    this.name = params.name;

    assert(params.token, 'token must be defined');
    this.login();
}

util.inherits(Bot, EventEmitter);

/**
 * Starts a Real Time Messaging API session
 */
Bot.prototype.login = function() {
    this._api('rtm.start').then(function(data) {
        this.wsUrl = data.url;
        this.self = data.self;
        this.team = data.team;
        this.channels = data.channels;
        this.users = data.users;
        this.ims = data.ims;
        this.groups = data.groups;

        this.emit('start');

        this.connect();
    }.bind(this)).fail(function(data) {
        this.emit('error', new Error(data.error ? data.error : data));
    }.bind(this)).done();
};

/**
 * Establish a WebSocket connection
 */
Bot.prototype.connect = function() {
    this.ws = new WebSocket(this.wsUrl);

    this.ws.on('open', function(data) {
        this.emit('open', data);
    }.bind(this));

    this.ws.on('close', function(data) {
        this.emit('close', data);
    }.bind(this));

    this.ws.on('message', function(data) {
        try {
            this.emit('message', JSON.parse(data));
        } catch (e) {
            console.log(e);
        }
    }.bind(this));
};

/**
 * Get channels
 * @returns {vow.Promise}
 */
Bot.prototype.getChannels = function() {
    if (this.channels) {
        return Vow.fulfill({ channels: this.channels });
    }
    return this._api('channels.list');
};

/**
 * Get users
 * @returns {vow.Promise}
 */
Bot.prototype.getUsers = function() {
    if (this.users) {
        return Vow.fulfill({ members: this.users });
    }

    return this._api('users.list');
};

/**
 * Get groups
 * @returns {vow.Promise}
 */
Bot.prototype.getGroups = function() {
    if (this.groups) {
        return Vow.fulfill({ groups: this.groups });
    }

    return this._api('groups.list');
};

/**
 * Get user by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getUser = function(name) {
    return this.getUsers().then(function(data) {
        return find(data.members, { name: name });
    });
};

/**
 * Get channel by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getChannel = function(name) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { name: name });
    });
};

/**
 * Get group by name
 * @param {string} name
 * @returns {object}
 */
Bot.prototype.getGroup = function(name) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { name: name });
    });
};

/**
 * Get user by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getUserById = function(id) {
    return this.getUsers().then(function(data) {
        return find(data.members, { id: id });
    });
};

/**
 * Get channel by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getChannelById = function(id) {
    return this.getChannels().then(function(data) {
        return find(data.channels, { id: id });
    });
};

/**
 * Get group by id
 * @param {string} id
 * @returns {object}
 */
Bot.prototype.getGroupById = function(id) {
    return this.getGroups().then(function(data) {
        return find(data.groups, { id: id });
    });
};

/**
 * Get channel ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getChannelId = function(name) {
    return this.getChannel(name).then(function(channel) {
        return channel.id;
    });
};

/**
 * Get group ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getGroupId = function(name) {
    return this.getGroup(name).then(function(group) {
        return group.id;
    });
};

/**
 * Get user ID
 * @param {string} name
 * @returns {string}
 */
Bot.prototype.getUserId = function(name) {
    return this.getUser(name).then(function(user) {
        return user.id;
    });
};

/**
 * Get "direct message" channel ID
 * @param {string} name
 * @returns {vow.Promise}
 */
Bot.prototype.getChatId = function(name) {
    return this.getUser(name).then(function(data) {

        var chatId = find(this.ims, { user: data.id }).id;

        return chatId || this.openIm(data.id);
    }.bind(this)).then(function(data) {
        return typeof data === 'string' ? data : data.channel.id;
    });
};

/**
 * Opens a "direct message" channel with another member of your Slack team
 * @param {string} userId
 * @returns {vow.Promise}
 */
Bot.prototype.openIm = function(userId) {
    return this._api('im.open', {user: userId});
};

/**
 * Posts a message to a channel by ID
 * @param {string} id - channel ID
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.postMessage = function(id, text, params) {
    params = extend({
        text: text,
        channel: id,
        username: this.name
    }, params || {});

    return this._api('chat.postMessage', params);
};

/**
 * Updates a message by timestamp
 * @param {string} id - channel ID
 * @param {string} ts - timestamp
 * @param {string} text
 * @param {object} params
 * @returns {vow.Promise}
 */
Bot.prototype.updateMessage = function(id, ts, text, params) {
    params = extend({
        ts: ts,
        channel: id,
        username: this.name,
        text: text
    }, params || {});

    return this._api('chat.update', params);
};

/**
 * Posts a message to user by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToUser = function(name, text, params, cb) {
    return this._post((params || {}).slackbot ? 'slackbot' : 'user', name, text, params, cb);
};

/**
 * Posts a message to channel by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToChannel = function(name, text, params, cb) {
    return this._post('channel', name, text, params, cb);
};

/**
 * Posts a message to group by name
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postMessageToGroup = function(name, text, params, cb) {
    return this._post('group', name, text, params, cb);
};

/**
 * Common method for posting messages
 * @param {string} type
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._post = function(type, name, text, params, cb) {
    var method = ({
        'group': 'getGroupId',
        'channel': 'getChannelId',
        'user': 'getChatId',
        'slackbot': 'getUserId'
    })[type];

    if (typeof params === 'function') {
        cb = params;
        params = null;
    }

    return this[method](name).then(function(itemId) {
        return this.postMessage(itemId, text, params);
    }.bind(this)).always(function(data) {
        if (cb) {
            cb(data._value);
        }
    });
};

/**
 * Posts a message to group | channel | user
 * @param {string} name
 * @param {string} text
 * @param {object} params
 * @param {function} cb
 * @returns {vow.Promise}
 */
Bot.prototype.postTo = function(name, text, params, cb) {
    return Vow.all([this.getChannels(), this.getUsers(), this.getGroups()]).then(function(data) {

        var all = [].concat(data[0].channels, data[1].members, data[2].groups);
        var result = find(all, {name: name});

        assert(Object.keys(result).length, 'wrong name');

        if (result['is_channel']) {
            return this.postMessageToChannel(name, text, params, cb);
        } else if (result['is_group']) {
            return this.postMessageToGroup(name, text, params, cb);
        } else {
            return this.postMessageToUser(name, text, params, cb);
        }
    }.bind(this));
};

/**
 * Preprocessing of params
 * @param params
 * @returns {object}
 * @private
 */
Bot.prototype._preprocessParams = function(params) {
    params = extend(params || {}, {token: this.token});

    Object.keys(params).forEach(function(name) {
        var param = params[name];

        if (param && typeof param === 'object') {
            params[name] = JSON.stringify(param);
        }
    });

    return params;
};

/**
 * Send request to API method
 * @param {string} methodName
 * @param {object} params
 * @returns {vow.Promise}
 * @private
 */
Bot.prototype._api = function(methodName, params) {

    var data = {
        url: 'https://slack.com/api/' + methodName,
        form: this._preprocessParams(params)
    };

    return new Vow.Promise(function(resolve, reject) {

        request.post(data, function(err, request, body) {
            if (err) {
                reject(err);

                return false;
            }

            try {
                body = JSON.parse(body);

                // Response always contain a top-level boolean property ok,
                // indicating success or failure
                if (body.ok) {
                    resolve(body);
                } else {
                    reject(body);
                }

            } catch (e) {
                reject(e);
            }
        });
    });
};

module.exports = Bot;
 at SyntaxError: Unexpected token (8:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
