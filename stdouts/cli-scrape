/root/Targets/cli-scrape
└─┬ cli-scrape@0.1.10 
  ├─┬ jsdom@6.5.1 
  │ ├── acorn@2.7.0 
  │ ├── acorn-globals@1.0.9 
  │ ├── browser-request@0.3.3 
  │ ├── cssom@0.3.2 
  │ ├── cssstyle@0.2.37 
  │ ├─┬ escodegen@1.9.0 
  │ │ ├── esprima@3.1.3 
  │ │ ├── estraverse@4.2.0 
  │ │ ├── esutils@2.0.2 
  │ │ ├─┬ optionator@0.8.2 
  │ │ │ ├── deep-is@0.1.3 
  │ │ │ ├── fast-levenshtein@2.0.6 
  │ │ │ ├── levn@0.3.0 
  │ │ │ ├── prelude-ls@1.1.2 
  │ │ │ ├── type-check@0.3.2 
  │ │ │ └── wordwrap@1.0.0 
  │ │ └── source-map@0.5.7 
  │ ├─┬ htmlparser2@3.9.2 
  │ │ ├── domelementtype@1.3.0 
  │ │ ├── domhandler@2.4.1 
  │ │ ├─┬ domutils@1.6.2 
  │ │ │ └─┬ dom-serializer@0.1.0 
  │ │ │   └── domelementtype@1.1.3 
  │ │ ├── entities@1.1.1 
  │ │ ├── inherits@2.0.3 
  │ │ └─┬ readable-stream@2.3.3 
  │ │   ├── core-util-is@1.0.2 
  │ │   ├── isarray@1.0.0 
  │ │   ├── process-nextick-args@1.0.7 
  │ │   ├── string_decoder@1.0.3 
  │ │   └── util-deprecate@1.0.2 
  │ ├── nwmatcher@1.4.2 
  │ ├── parse5@1.5.1 
  │ ├─┬ request@2.83.0 
  │ │ ├── aws-sign2@0.7.0 
  │ │ ├── aws4@1.6.0 
  │ │ ├── caseless@0.12.0 
  │ │ ├─┬ combined-stream@1.0.5 
  │ │ │ └── delayed-stream@1.0.0 
  │ │ ├── extend@3.0.1 
  │ │ ├── forever-agent@0.6.1 
  │ │ ├─┬ form-data@2.3.1 
  │ │ │ └── asynckit@0.4.0 
  │ │ ├─┬ har-validator@5.0.3 
  │ │ │ ├─┬ ajv@5.2.3 
  │ │ │ │ ├── co@4.6.0 
  │ │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │ │   └── jsonify@0.0.0 
  │ │ │ └── har-schema@2.0.0 
  │ │ ├─┬ hawk@6.0.2 
  │ │ │ ├── boom@4.3.1 
  │ │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ │ └── boom@5.2.0 
  │ │ │ ├── hoek@4.2.0 
  │ │ │ └── sntp@2.0.2 
  │ │ ├─┬ http-signature@1.2.0 
  │ │ │ ├── assert-plus@1.0.0 
  │ │ │ ├─┬ jsprim@1.4.1 
  │ │ │ │ ├── extsprintf@1.3.0 
  │ │ │ │ ├── json-schema@0.2.3 
  │ │ │ │ └── verror@1.10.0 
  │ │ │ └─┬ sshpk@1.13.1 
  │ │ │   ├── asn1@0.2.3 
  │ │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │ │   ├── dashdash@1.14.1 
  │ │ │   ├── ecc-jsbn@0.1.1 
  │ │ │   ├── getpass@0.1.7 
  │ │ │   ├── jsbn@0.1.1 
  │ │ │   └── tweetnacl@0.14.5 
  │ │ ├── is-typedarray@1.0.0 
  │ │ ├── isstream@0.1.2 
  │ │ ├── json-stringify-safe@5.0.1 
  │ │ ├─┬ mime-types@2.1.17 
  │ │ │ └── mime-db@1.30.0 
  │ │ ├── oauth-sign@0.8.2 
  │ │ ├── performance-now@2.1.0 
  │ │ ├── qs@6.5.1 
  │ │ ├── safe-buffer@5.1.1 
  │ │ ├── stringstream@0.0.5 
  │ │ ├── tunnel-agent@0.6.0 
  │ │ └── uuid@3.1.0 
  │ ├── symbol-tree@3.2.2 
  │ ├─┬ tough-cookie@2.3.3 
  │ │ └── punycode@1.4.1 
  │ ├─┬ whatwg-url-compat@0.6.5 
  │ │ └── tr46@0.0.3 
  │ ├── xml-name-validator@2.0.1 
  │ ├── xmlhttprequest@1.8.0 
  │ └── xtend@4.0.1 
  ├─┬ npmlog@0.0.2 
  │ └── ansi@0.1.2 
  ├─┬ optimist@0.3.7 
  │ └── wordwrap@0.0.3 
  └─┬ request@2.12.0 
    ├─┬ form-data@0.0.3 
    │ ├── async@0.1.9 
    │ └─┬ combined-stream@0.0.3 
    │   └── delayed-stream@0.0.5 
    └── mime@1.2.7 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/cli-scrape/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.109 took 5.8022s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

'use strict';

var CSS_LIBS, XPATH_LIBS, absPath, domParse, elToString, executeCSSQuery, executeXPath, fetchHTML, getArgs, jsdom, log, loglevel, path, query, request, url, useXPath, _ref;

request = require('request');

jsdom = require('jsdom');

log = require('npmlog');

path = require('path');

absPath = function(relPath) {
  return path.resolve(__dirname, relPath);
};

XPATH_LIBS = [absPath('wgxpath.install.js')];

CSS_LIBS = [absPath('qwery.min.js'), absPath('qwery-pseudos.min.js')];

useXPath = function(query) {
  return query.indexOf('/') === 0;
};

getArgs = function() {
  var argv, loglevel, optimist, query, url, _ref;
  optimist = require('optimist');
  argv = optimist.usage('Usage: scrape [url] [xpath|css]').alias('l', 'loglevel')["default"]('l', 'silent').demand(2).argv;
  _ref = argv._, url = _ref[0], query = _ref[1];
  url = url.trim();
  query = query.trim();
  loglevel = argv.loglevel.trim();
  return {
    url: url,
    query: query,
    loglevel: loglevel
  };
};

fetchHTML = function(url, cb) {
  return request.get(url, function(err, response, body) {
    if (err != null) {
      log.error('http', "[" + response.statusCode + "] " + err);
      return cb(err, response, body);
    }
    log.verbose('http', "[" + response.statusCode + "] Fetched '" + url + "' successfully.");
    return cb(err, response, body);
  });
};

domParse = function(html, libs, cb) {
  return jsdom.env(html, libs, function(err, window) {
    if (err != null) {
      log.error('parse', "Error processing DOM with libs: [ '" + (libs.join('\', \'')) + "' ]. (" + err + ")");
      return cb(err, window);
    }
    log.verbose('parse', "DOM parse successful with libs: [ '" + (libs.join('\', \'')) + "' ].");
    return cb(err, window);
  });
};

elToString = function(el) {
  if (el.innerHTML != null) {
    log.verbose('elToString', "Fetching innerHTML from '" + el + "'.");
    return el.innerHTML.trim();
  } else if (el.textContent != null) {
    log.verbose('elToString', "Fetching textContent from '" + el + "'.");
    return el.textContent.trim();
  } else if (Object.prototype.toString.call(el) === '[object String]') {
    log.verbose('elToString', "Content already a string: '" + el + "'.");
    return el.trim();
  }
};

executeXPath = function(query, window) {
  var document, els, i, len, result;
  if (window.wgxpath == null) {
    log.error('xpath', 'xpath selector engine not found!');
    return [];
  }
  window.wgxpath.install();
  document = window.document;
  els = [];
  log.verbose('xpath', "Evaluating query '" + query + "'.");
  result = document.evaluate(query, document, null, 7, null);
  len = result.snapshotLength;
  log.verbose('xpath', "Found " + len + " match(es).");
  if (len > 0) {
    els = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
        _results.push(result.snapshotItem(i));
      }
      return _results;
    })();
  }
  return els;
};

executeCSSQuery = function(query, window) {
  var els;
  if (window.qwery == null) {
    log.error('css', 'qwery selector engine not found!');
    return [];
  }
  log.verbose('css', "Evaluating query '" + query + "'.");
  els = window.qwery(query);
  log.verbose('css', "Found " + els.length + " match(es).");
  return els;
};

if (require.main === module) {
  _ref = getArgs(), url = _ref.url, query = _ref.query, loglevel = _ref.loglevel;
  log.level = loglevel;
  fetchHTML(url, function(err, response, body) {
    var libs, xpath;
    if (err != null) {
      return process.exit(1);
    }
    xpath = useXPath(query);
    libs = CSS_LIBS;
    if (xpath) {
      libs = XPATH_LIBS;
    }
    return domParse(body, libs, function(err, window) {
      var result, results, strings, _i, _len;
      if (err != null) {
        return process.exit(1);
      }
      if (xpath) {
        results = executeXPath(query, window);
      } else {
        results = executeCSSQuery(query, window);
      }
      if (!results || results.length < 1) {
        return process.exit(1);
      }
      strings = [];
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        result = results[_i];
        strings.push(elToString(result));
      }
      return process.stdout.write(strings.join('\n'));
    });
  });
}

module.exports = {
  useXPath: useXPath,
  getArgs: getArgs,
  fetchHTML: fetchHTML,
  domParse: domParse,
  elToString: elToString,
  executeXPath: executeXPath,
  executeCSSQuery: executeCSSQuery
};
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
