/root/Targets/baodian_activity
└─┬ baodian_activity@1.0.13 
  ├─┬ css-loader@0.23.1
  │ └─┬ cssnano@3.10.0
  │   └─┬ postcss-svgo@2.1.6
  │     └─┬ svgo@0.7.2
  │       └─┬ csso@2.3.2
  │         └── clap@1.2.3 
  └── UNMET PEER DEPENDENCY webpack@1.15.0

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/baodian_activity/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.1125 took 7.5366s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

'use strict';

var fs = require('fs');
var stat = fs.stat;
var path = require('path');
var spawn = require('cross-spawn');
var chalk = require('chalk');
var semver = require('semver');
var argv = require('minimist')(process.argv.slice(2));
var pathExists = require('path-exists');
var fsExtra = require('fs-extra');

/**
 * Arguments:
 *   --version - to print current version
 *   --verbose - to print logs while init
 *   --scripts-version <alternative package>
 *     Example of valid values:
 *     - a specific npm version: "0.22.0-rc1"
 *     - a .tgz archive from any npm repo: "https://registry.npmjs.org/react-scripts/-/react-scripts-0.20.0.tgz"
 *     - a package prepared with `npm pack`: "/Users/home/vjeux/create-react-app/react-scripts-0.22.0.tgz"
 */
var commands = argv._;
// if (commands.length === 0) {
//   if (argv.version) {
//     console.log('create-react-app version: ' + require('./package.json').version);
//     process.exit();
//   }
//   console.error(
//     'Usage: create-react-app <project-directory> [--verbose]'
//   );
//   process.exit(1);
// }

createApp(commands[0], argv.verbose, argv['scripts-version']);

function createApp(name, verbose, version) {
  var root = path.resolve(name);
  console.log(root);

  if (!pathExists.sync(name)) {
    fs.mkdirSync(root);
  } else if (!isGitHubBoilerplate(root)) {
    console.log('The directory `' + name + '` contains file(s) that could conflict. Aborting.');
    process.exit(1);
  }

  var appName = path.basename(root);
  console.log(
    'Creating a new React app in ' + root + '.'
  );
  console.log();

  var packageJson = {
    name: appName,
    version: '0.0.1',
    private: true,
  };

  fs.writeFileSync(
    path.join(root, 'package.json'),
    JSON.stringify(packageJson, null, 2)
  );

  var originalDirectory = path.resolve(__dirname);
  process.chdir(root);

  //console.log('Installing packages. This might take a couple minutes.');
  //console.log('Installing react-scripts from npm...');

  init(root, appName, verbose, originalDirectory);
  // fsExtra.copySync(templates, sourcePath);
} 

// function checkNodeVersion() {
//   var packageJsonPath = path.resolve(
//     process.cwd(),
//     'node_modules',
//     'react-scripts',
//     'package.json'
//   );
//   var packageJson = require(packageJsonPath);
//   if (!packageJson.engines || !packageJson.engines.node) {
//     return;
//   }

//   if (!semver.satisfies(process.version, packageJson.engines.node)) {
//     console.error(
//       chalk.red(
//         'You are currently running Node %s but create-react-app requires %s.' +
//         ' Please use a supported version of Node.\n'
//       ),
//       process.version,
//       packageJson.engines.node
//     );
//     process.exit(1);
//   }
// }

// Check if GitHub boilerplate compatible
// https://github.com/facebookincubator/create-react-app/pull/368#issuecomment-237875655
// function isGitHubBoilerplate(root) {
//   var validFiles = [
//     '.DS_Store', 'Thumbs.db', '.git', '.gitignore', 'README.md', 'LICENSE'
//   ];
//   return fs.readdirSync(root)
//     .every(function(file) {
//       return validFiles.indexOf(file) >= 0;
//     });
// }
 

function exists(path){  
    return fs.existsSync(path) || path.existsSync(path);  
}

function isFile(path){  
    return exists(path) && fs.statSync(path).isFile();  
} 

/*
 * 复制目录中的所有文件包括子目录
 * @param{ String } 需要复制的目录
 * @param{ String } 复制到指定的目录
 */
function copy ( src, dst ) {
    if (isFile(src)) {
        // 创建读取流
        var readable = fs.createReadStream( src );
        // 创建写入流
        var writable = fs.createWriteStream( dst );  
        // 通过管道来传输流
        return readable.pipe( writable );
    }
};


function init (appPath, appName, verbose, originalDirectory) {
  var appPackage = require(path.join(appPath, 'package.json'));

    appPackage.dependencies = appPackage.dependencies || {};
    appPackage.devDependencies = appPackage.devDependencies || {};
    appPackage.scripts = {};
    appPackage.dependencies = {};

    appPackage.scripts['start'] = "webpack-dev-server --devtool eval --progress --hot --content-base app";
    appPackage.scripts['deploy'] = "NODE_ENV=production webpack -p --config webpack.production.config.js";
    appPackage.dependencies["babel-core"] = "^6.13.2";
    appPackage.dependencies["babel-loader"] = "^6.2.4";
    appPackage.dependencies["copy-webpack-plugin"] = "^3.0.1";
    appPackage.dependencies["css-loader"] = "^0.23.1";
    appPackage.dependencies["open-browser-webpack-plugin"] = "^0.0.2";
    appPackage.dependencies["style-loader"] = "^0.13.1";
    appPackage.dependencies["webpack"] = "^1.13.1";
    appPackage.dependencies["webpack-dev-server"] = "latest";
    // explicitly specify ESLint config path for editor plugins
    //appPackage.eslintConfig = {
    //  extends: './node_modules/react-scripts/config/eslint.js',
    //};

    fs.writeFileSync( 
      path.join(appPath, 'package.json'),
      JSON.stringify(appPackage, null, 2)
    );
    

    fsExtra.copySync(path.join(originalDirectory, 'template'), appPath);
    // copy webpack.config & webpack.production.config.js
    copy(path.join(originalDirectory, 'webpack.config.js'), path.join(appPath, 'webpack.config.js'));
    copy(path.join(originalDirectory, 'webpack.production.config.js'), path.join(appPath, 'webpack.production.config.js'));
    copy(path.join(originalDirectory, 'README.md'), path.join(appPath, 'README.md'));

    var proc = spawn('cnpm', ['install'], {stdio: 'inherit'});
    console.log('install...')
    proc.on('close', function(code) {
      if (code !== 0) {
        console.error('`npm ' + args.join(' ') + '` failed');
        return;
      }

      console.log('install finish')
    })
}





 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
