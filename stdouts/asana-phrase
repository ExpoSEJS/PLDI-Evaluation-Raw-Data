/root/Targets/asana-phrase
└── asana-phrase@0.0.8 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/asana-phrase/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 31% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0638 took 4.8104s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:82) on program var assert = require('assert');
var bitGenerator = require('./bit_generator');
var WordGenerator = require('./word_generator');

/**
 * @param generators {WordGenerator[]}
 * @constructor
 */
function Factory(generators) {
  var bits = 0;
  generators.forEach(function(generator) {
    assert(generator instanceof WordGenerator);
    bits += generator.numBits();
  });
  assert(bits > 0);

  this.generators = generators;
  this._numBits = bits;
}

/**
 * @returns {string[]} An array of words randomly chosen from amongst
 *     `numPossiblePhrases` possibilities.
 */
Factory.prototype.randomPhrase = function() {
  return this.phraseFromBits(bitGenerator.random(this._numBits));
};

/**
 * @param num {number}
 * @returns {string[]} An array of words chosen to correspond to the integer
 *     supplied in `num`.
 */
Factory.prototype.phraseFromInt = function(num) {
  return this.phraseFromBits(bitGenerator.int(num));
};

/**
 * @param value {string}
 * @returns {string[]} An array of words chosen to correspond to the hex
 *     value supplied.
 */
Factory.prototype.phraseFromHex = function(value) {
  return this.phraseFromBits(bitGenerator.hex(value));
};

/**
 * @param bitGen {function} A function that when called, returns a 1 or 0
 *     starting from least to most significant bit
 * @returns {string[]} The specific phrase (array of words) corresponding to
 *     the number built up from the bit stream.
 */
Factory.prototype.phraseFromBits = function(bitGen) {
  assert.equal(typeof(bitGen), 'function');
  var words = [];
  this.generators.forEach(function(generator) {
    // Shift off the number of bits the generator expects and use it
    // to generate the next word in the phrase.
    var numBits = generator.numBits();
    var wordIndex = 0;
    for (var i = 0; i < numBits; i++) {
      var bit = bitGen() || 0;
      wordIndex += (bit << i);
    }
    words.push(generator.word(wordIndex));
  });
  return words;
};

/**
 * @returns {number} The total number of possible phrases this could return.
 */
Factory.prototype.numPossiblePhrases = function() {
  return Math.pow(2, this._numBits); // left-shift would truncate to 32-bit int
};

module.exports = Factory; at SyntaxError: Unexpected token (1:82)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/asana-phrase/node_modules/asana-phrase/index.js. Coverage (Term): 24% Coverage (LOC): 17%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
