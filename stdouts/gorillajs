/root/Targets/gorillajs
└─┬ gorillajs@0.4.0 
  ├─┬ aws-sdk@2.120.0 
  │ ├─┬ buffer@4.9.1 
  │ │ ├── base64-js@1.2.1 
  │ │ ├── ieee754@1.1.8 
  │ │ └── isarray@1.0.0 
  │ ├── crypto-browserify@1.0.9 
  │ ├── events@1.1.1 
  │ ├── jmespath@0.15.0 
  │ ├── querystring@0.2.0 
  │ ├── sax@1.2.1 
  │ ├─┬ url@0.10.3 
  │ │ └── punycode@1.3.2 
  │ ├── uuid@3.0.1 
  │ ├── xml2js@0.4.17 
  │ └── xmlbuilder@4.2.1 
  ├── colors@1.1.2 
  ├─┬ dateformat@1.0.12 
  │ ├── get-stdin@4.0.1 
  │ └─┬ meow@3.7.0 
  │   ├─┬ camelcase-keys@2.1.0 
  │   │ └── camelcase@2.1.1 
  │   ├── decamelize@1.2.0 
  │   ├─┬ loud-rejection@1.6.0 
  │   │ ├─┬ currently-unhandled@0.4.1 
  │   │ │ └── array-find-index@1.0.2 
  │   │ └── signal-exit@3.0.2 
  │   ├── map-obj@1.0.1 
  │   ├─┬ normalize-package-data@2.4.0 
  │   │ ├── hosted-git-info@2.5.0 
  │   │ ├─┬ is-builtin-module@1.0.0 
  │   │ │ └── builtin-modules@1.1.1 
  │   │ ├── semver@5.4.1 
  │   │ └─┬ validate-npm-package-license@3.0.1 
  │   │   ├─┬ spdx-correct@1.0.2 
  │   │   │ └── spdx-license-ids@1.2.2 
  │   │   └── spdx-expression-parse@1.0.4 
  │   ├─┬ read-pkg-up@1.0.1 
  │   │ ├─┬ find-up@1.1.2 
  │   │ │ ├── path-exists@2.1.0 
  │   │ │ └─┬ pinkie-promise@2.0.1 
  │   │ │   └── pinkie@2.0.4 
  │   │ └─┬ read-pkg@1.1.0 
  │   │   ├─┬ load-json-file@1.1.0 
  │   │   │ ├─┬ parse-json@2.2.0 
  │   │   │ │ └─┬ error-ex@1.3.1 
  │   │   │ │   └── is-arrayish@0.2.1 
  │   │   │ ├── pify@2.3.0 
  │   │   │ └── strip-bom@2.0.0 
  │   │   └── path-type@1.1.0 
  │   ├─┬ redent@1.0.0 
  │   │ ├─┬ indent-string@2.1.0 
  │   │ │ └─┬ repeating@2.0.1 
  │   │ │   └── is-finite@1.0.2 
  │   │ └── strip-indent@1.0.1 
  │   └── trim-newlines@1.0.0 
  ├── escape-string-regexp@1.0.5 
  ├── figlet@1.2.0 
  ├─┬ fs-extra@0.26.7 
  │ ├── graceful-fs@4.1.11 
  │ ├── jsonfile@2.4.0 
  │ ├── klaw@1.3.1 
  │ ├── path-is-absolute@1.0.1 
  │ └── rimraf@2.6.2 
  ├─┬ gulp@3.9.1 
  │ ├── archy@1.0.0 
  │ ├─┬ chalk@1.1.3 
  │ │ ├── ansi-styles@2.2.1 
  │ │ ├── has-ansi@2.0.0 
  │ │ └── supports-color@2.0.0 
  │ ├── deprecated@0.0.1 
  │ ├─┬ gulp-util@3.0.8 
  │ │ ├── array-differ@1.0.0 
  │ │ ├── array-uniq@1.0.3 
  │ │ ├── beeper@1.1.1 
  │ │ ├── dateformat@2.0.0 
  │ │ ├─┬ fancy-log@1.3.0 
  │ │ │ └── time-stamp@1.1.0 
  │ │ ├─┬ gulplog@1.0.0 
  │ │ │ └── glogg@1.0.0 
  │ │ ├─┬ has-gulplog@0.1.0 
  │ │ │ └── sparkles@1.0.0 
  │ │ ├── lodash._reescape@3.0.0 
  │ │ ├── lodash._reevaluate@3.0.0 
  │ │ ├── lodash._reinterpolate@3.0.0 
  │ │ ├─┬ lodash.template@3.6.2 
  │ │ │ ├── lodash._basecopy@3.0.1 
  │ │ │ ├── lodash._basetostring@3.0.1 
  │ │ │ ├── lodash._basevalues@3.0.0 
  │ │ │ ├── lodash._isiterateecall@3.0.9 
  │ │ │ ├─┬ lodash.escape@3.2.0 
  │ │ │ │ └── lodash._root@3.0.1 
  │ │ │ ├─┬ lodash.keys@3.1.2 
  │ │ │ │ ├── lodash._getnative@3.9.1 
  │ │ │ │ ├── lodash.isarguments@3.1.0 
  │ │ │ │ └── lodash.isarray@3.0.4 
  │ │ │ ├── lodash.restparam@3.6.1 
  │ │ │ └── lodash.templatesettings@3.1.1 
  │ │ ├─┬ multipipe@0.1.2 
  │ │ │ └── duplexer2@0.0.2 
  │ │ ├── object-assign@3.0.0 
  │ │ ├── replace-ext@0.0.1 
  │ │ └─┬ vinyl@0.5.3 
  │ │   ├── clone@1.0.2 
  │ │   └── clone-stats@0.0.1 
  │ ├── interpret@1.0.4 
  │ ├─┬ liftoff@2.3.0 
  │ │ ├─┬ findup-sync@0.4.3 
  │ │ │ ├─┬ detect-file@0.1.0 
  │ │ │ │ └── fs-exists-sync@0.1.0 
  │ │ │ ├─┬ is-glob@2.0.1 
  │ │ │ │ └── is-extglob@1.0.0 
  │ │ │ ├─┬ micromatch@2.3.11 
  │ │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ │ ├── array-unique@0.2.1 
  │ │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │ │   ├── isobject@2.1.0 
  │ │ │ │ │ │   ├─┬ randomatic@1.1.7 
  │ │ │ │ │ │   │ ├─┬ is-number@3.0.0 
  │ │ │ │ │ │   │ │ └── kind-of@3.2.2 
  │ │ │ │ │ │   │ └── kind-of@4.0.0 
  │ │ │ │ │ │   └── repeat-string@1.6.1 
  │ │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ │ ├── extglob@0.3.2 
  │ │ │ │ ├── filename-regex@2.0.1 
  │ │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ │ ├─┬ normalize-path@2.1.1 
  │ │ │ │ │ └── remove-trailing-separator@1.1.0 
  │ │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ │ ├── for-own@0.1.5 
  │ │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ │ ├─┬ glob-base@0.3.0 
  │ │ │ │ │ │ └── glob-parent@2.0.0 
  │ │ │ │ │ └── is-dotfile@1.0.3 
  │ │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │ │     └── is-primitive@2.0.0 
  │ │ │ └─┬ resolve-dir@0.1.1 
  │ │ │   ├── expand-tilde@1.2.2 
  │ │ │   └─┬ global-modules@0.2.3 
  │ │ │     ├─┬ global-prefix@0.1.5 
  │ │ │     │ ├── ini@1.3.4 
  │ │ │     │ └─┬ which@1.3.0 
  │ │ │     │   └── isexe@2.0.0 
  │ │ │     └── is-windows@0.2.0 
  │ │ ├─┬ fined@1.1.0 
  │ │ │ ├─┬ expand-tilde@2.0.2 
  │ │ │ │ └─┬ homedir-polyfill@1.0.1 
  │ │ │ │   └── parse-passwd@1.0.0 
  │ │ │ ├─┬ is-plain-object@2.0.4 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ ├─┬ object.defaults@1.1.0 
  │ │ │ │ ├── array-each@1.0.1 
  │ │ │ │ ├── array-slice@1.0.0 
  │ │ │ │ ├─┬ for-own@1.0.0 
  │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ ├─┬ object.pick@1.3.0 
  │ │ │ │ └── isobject@3.0.1 
  │ │ │ └─┬ parse-filepath@1.0.1 
  │ │ │   ├─┬ is-absolute@0.2.6 
  │ │ │   │ └─┬ is-relative@0.2.1 
  │ │ │   │   └─┬ is-unc-path@0.1.2 
  │ │ │   │     └── unc-path-regex@0.1.2 
  │ │ │   ├── map-cache@0.2.2 
  │ │ │   └─┬ path-root@0.1.1 
  │ │ │     └── path-root-regex@0.1.2 
  │ │ ├── flagged-respawn@0.3.2 
  │ │ ├── lodash.isplainobject@4.0.6 
  │ │ ├── lodash.isstring@4.0.1 
  │ │ ├── lodash.mapvalues@4.6.0 
  │ │ ├── rechoir@0.6.2 
  │ │ └─┬ resolve@1.4.0 
  │ │   └── path-parse@1.0.5 
  │ ├─┬ orchestrator@0.3.8 
  │ │ ├─┬ end-of-stream@0.1.5 
  │ │ │ └── once@1.3.3 
  │ │ ├── sequencify@0.0.7 
  │ │ └── stream-consume@0.1.0 
  │ ├── pretty-hrtime@1.0.3 
  │ ├── semver@4.3.6 
  │ ├─┬ tildify@1.2.0 
  │ │ └── os-homedir@1.0.2 
  │ ├─┬ v8flags@2.1.1 
  │ │ └── user-home@1.1.1 
  │ └─┬ vinyl-fs@0.3.14 
  │   ├── defaults@1.0.3 
  │   ├─┬ glob-stream@3.1.18 
  │   │ ├── glob@4.5.3 
  │   │ ├─┬ glob2base@0.0.12 
  │   │ │ └── find-index@0.1.1 
  │   │ ├── minimatch@2.0.10 
  │   │ ├── ordered-read-streams@0.1.0 
  │   │ ├─┬ through2@0.6.5 
  │   │ │ └─┬ readable-stream@1.0.34 
  │   │ │   └── isarray@0.0.1 
  │   │ └── unique-stream@1.0.0 
  │   ├─┬ glob-watcher@0.0.6 
  │   │ └─┬ gaze@0.5.2 
  │   │   └─┬ globule@0.1.0 
  │   │     ├─┬ glob@3.1.21 
  │   │     │ ├── graceful-fs@1.2.3 
  │   │     │ └── inherits@1.0.2 
  │   │     ├── lodash@1.0.2 
  │   │     └─┬ minimatch@0.2.14 
  │   │       ├── lru-cache@2.7.3 
  │   │       └── sigmund@1.0.1 
  │   ├─┬ graceful-fs@3.0.11 
  │   │ └── natives@1.1.0 
  │   ├─┬ strip-bom@1.0.0 
  │   │ ├── first-chunk-stream@1.0.0 
  │   │ └── is-utf8@0.2.1 
  │   ├─┬ through2@0.6.5 
  │   │ └─┬ readable-stream@1.0.34 
  │   │   └── isarray@0.0.1 
  │   └─┬ vinyl@0.4.6 
  │     └── clone@0.2.0 
  ├─┬ gulp-batch-replace@0.0.0 
  │ └─┬ event-stream@3.3.4 
  │   ├── duplexer@0.1.1 
  │   ├── from@0.1.7 
  │   ├── pause-stream@0.0.11 
  │   ├── split@0.3.3 
  │   └── stream-combiner@0.0.4 
  ├─┬ gulp-jshint@2.0.4 
  │ ├── lodash@4.17.4 
  │ ├─┬ minimatch@3.0.4 
  │ │ └─┬ brace-expansion@1.1.8 
  │ │   ├── balanced-match@1.0.0 
  │ │   └── concat-map@0.0.1 
  │ └─┬ rcloader@0.2.2 
  │   ├── lodash.assign@4.2.0 
  │   ├── lodash.isobject@3.0.2 
  │   ├── lodash.merge@4.6.0 
  │   └─┬ rcfinder@0.1.9 
  │     └── lodash.clonedeep@4.5.0 
  ├── gulp-rimraf@0.2.1 
  ├─┬ gulp-using@0.1.1 
  │ ├─┬ chalk@0.4.0 
  │ │ ├── ansi-styles@1.0.0 
  │ │ ├── has-color@0.1.7 
  │ │ └── strip-ansi@0.1.1 
  │ ├── map-stream@0.1.0 
  │ └─┬ pretty-bytes@3.0.1 
  │   └── number-is-nan@1.0.1 
  ├── htmlencode@0.0.4 
  ├─┬ inquirer@0.11.4 
  │ ├── ansi-escapes@1.4.0 
  │ ├── ansi-regex@2.1.1 
  │ ├─┬ cli-cursor@1.0.2 
  │ │ └─┬ restore-cursor@1.0.1 
  │ │   └── exit-hook@1.1.1 
  │ ├── cli-width@1.1.1 
  │ ├── figures@1.7.0 
  │ ├── lodash@3.10.1 
  │ ├─┬ readline2@1.0.1 
  │ │ ├── code-point-at@1.1.0 
  │ │ ├── is-fullwidth-code-point@1.0.0 
  │ │ └── mute-stream@0.0.5 
  │ ├─┬ run-async@0.1.0 
  │ │ └─┬ once@1.4.0 
  │ │   └── wrappy@1.0.2 
  │ ├── rx-lite@3.1.2 
  │ ├── string-width@1.0.2 
  │ ├── strip-ansi@3.0.1 
  │ └── through@2.3.8 
  ├── ip@1.1.5 
  ├─┬ is-online@5.2.0 
  │ ├─┬ is-reachable@1.3.0 
  │ │ ├── arrify@1.0.1 
  │ │ ├─┬ each-async@1.1.1 
  │ │ │ └── set-immediate-shim@1.0.1 
  │ │ ├── is-port-reachable@1.0.0 
  │ │ ├── router-ips@0.2.0 
  │ │ └─┬ url-parse-lax@1.0.0 
  │ │   └── prepend-http@1.0.4 
  │ ├── object-assign@4.1.1 
  │ ├── onetime@1.1.0 
  │ ├── random-item@1.0.0 
  │ └── root-hints@1.0.15 
  ├─┬ jshint@2.9.5 
  │ ├── cli@1.0.1 
  │ ├─┬ console-browserify@1.1.0 
  │ │ └── date-now@0.1.4 
  │ ├── exit@0.1.2 
  │ ├─┬ htmlparser2@3.8.3 
  │ │ ├── domelementtype@1.3.0 
  │ │ ├── domhandler@2.3.0 
  │ │ ├─┬ domutils@1.5.1 
  │ │ │ └─┬ dom-serializer@0.1.0 
  │ │ │   ├── domelementtype@1.1.3 
  │ │ │   └── entities@1.1.1 
  │ │ ├── entities@1.0.0 
  │ │ └─┬ readable-stream@1.1.14 
  │ │   └── isarray@0.0.1 
  │ ├── lodash@3.7.0 
  │ ├── shelljs@0.3.0 
  │ └── strip-json-comments@1.0.4 
  ├── merge-json@0.1.0-b.3 
  ├── minimist@1.2.0 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  ├── open@0.0.5 
  ├── openurl@1.1.1 
  ├─┬ path@0.12.7 
  │ ├── process@0.11.10 
  │ └─┬ util@0.10.3 
  │   └── inherits@2.0.1 
  ├─┬ portscanner@2.1.1 
  │ ├── async@1.5.2 
  │ └─┬ is-number-like@1.0.8 
  │   └── lodash.isfinite@3.3.2 
  ├── readline-sync@1.4.7 
  ├─┬ request@2.82.0 
  │ ├── aws-sign2@0.7.0 
  │ ├── aws4@1.6.0 
  │ ├── caseless@0.12.0 
  │ ├─┬ combined-stream@1.0.5 
  │ │ └── delayed-stream@1.0.0 
  │ ├── extend@3.0.1 
  │ ├── forever-agent@0.6.1 
  │ ├─┬ form-data@2.3.1 
  │ │ └── asynckit@0.4.0 
  │ ├─┬ har-validator@5.0.3 
  │ │ ├─┬ ajv@5.2.2 
  │ │ │ ├── co@4.6.0 
  │ │ │ ├── fast-deep-equal@1.0.0 
  │ │ │ ├── json-schema-traverse@0.3.1 
  │ │ │ └─┬ json-stable-stringify@1.0.1 
  │ │ │   └── jsonify@0.0.0 
  │ │ └── har-schema@2.0.0 
  │ ├─┬ hawk@6.0.2 
  │ │ ├── boom@4.3.1 
  │ │ ├─┬ cryptiles@3.1.2 
  │ │ │ └── boom@5.2.0 
  │ │ ├── hoek@4.2.0 
  │ │ └── sntp@2.0.2 
  │ ├─┬ http-signature@1.2.0 
  │ │ ├── assert-plus@1.0.0 
  │ │ ├─┬ jsprim@1.4.1 
  │ │ │ ├── extsprintf@1.3.0 
  │ │ │ ├── json-schema@0.2.3 
  │ │ │ └── verror@1.10.0 
  │ │ └─┬ sshpk@1.13.1 
  │ │   ├── bcrypt-pbkdf@1.0.1 
  │ │   ├── dashdash@1.14.1 
  │ │   ├── ecc-jsbn@0.1.1 
  │ │   ├── getpass@0.1.7 
  │ │   ├── jsbn@0.1.1 
  │ │   └── tweetnacl@0.14.5 
  │ ├── is-typedarray@1.0.0 
  │ ├── isstream@0.1.2 
  │ ├── json-stringify-safe@5.0.1 
  │ ├─┬ mime-types@2.1.17 
  │ │ └── mime-db@1.30.0 
  │ ├── oauth-sign@0.8.2 
  │ ├── performance-now@2.1.0 
  │ ├── qs@6.5.1 
  │ ├── safe-buffer@5.1.1 
  │ ├── stringstream@0.0.5 
  │ ├─┬ tough-cookie@2.3.2 
  │ │ └── punycode@1.4.1 
  │ └── tunnel-agent@0.6.0 
  ├── run-sequence@1.2.2 
  ├── split@1.0.1 
  ├─┬ ssh2@0.4.15 
  │ ├─┬ readable-stream@1.0.34 
  │ │ ├── core-util-is@1.0.2 
  │ │ ├── inherits@2.0.3 
  │ │ ├── isarray@0.0.1 
  │ │ └── string_decoder@0.10.31 
  │ └─┬ ssh2-streams@0.0.23 
  │   ├── asn1@0.2.3 
  │   ├─┬ readable-stream@1.0.34 
  │   │ └── isarray@0.0.1 
  │   └── streamsearch@0.1.2 
  ├─┬ through2@2.0.3 
  │ ├─┬ readable-stream@2.3.3 
  │ │ ├── process-nextick-args@1.0.7 
  │ │ ├── string_decoder@1.0.3 
  │ │ └── util-deprecate@1.0.2 
  │ └── xtend@4.0.1 
  ├── uuid@3.1.0 
  └─┬ yamljs@0.2.10 
    ├─┬ argparse@1.0.9 
    │ └── sprintf-js@1.0.3 
    └─┬ glob@7.1.2 
      ├── fs.realpath@1.0.0 
      └── inflight@1.0.6 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/gorillajs/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0937 took 5.7211s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #! /usr/bin/env node

/****** 
 
    MIT License

    Copyright (c) 2016 GorillaJS

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

******/


'use strict';

var argv = require('minimist')(process.argv.slice(2));
var prompt = require('readline-sync');
var color = require('colors');
var datef = require('dateformat');
var mkdirp = require('mkdirp');
var path = require('path');
var uuid = require('uuid/v4');

global.envPaths = {

    'base': __dirname,
    'libraries': path.join(__dirname, 'lib'),
    'plugins': path.join(__dirname, 'plugins')

}

var variables = require(path.join(envPaths.libraries, 'variables.js'));
var tools = require(path.join(envPaths.libraries, 'tools.js'));
var events = require(path.join(envPaths.libraries, 'pubsub.js'));
var m_docker = require(path.join(envPaths.libraries, 'docker.js'));
var host = require(path.join(envPaths.libraries, 'host.js'));
var cross = require(path.join(envPaths.libraries, 'crossExec.js'));
var promises = require(path.join(envPaths.libraries, 'promises.js'));
var commit = require(path.join(envPaths.libraries, 'commit.js'));
var plugins = require(path.join(envPaths.libraries, 'plugins.js'));
var credentials = require(path.join(envPaths.libraries, 'login.js'));

var gorillaPath = variables.gorillaPath;
var gorillaFolder = variables.gorillaFolder;
var gorillaTemplateFolder = variables.gorillaTemplateFolder;
var gorillaFile = variables.gorillaFile;
var messagesFile = variables.messagesFile;
var projectPath = variables.projectPath;
var homeUserPath = variables.homeUserPath;
var hostsFile = variables.hostsFile;
var commonPath = variables.commonPath;
var workingPath = variables.workingPath;
var composeFile = variables.composeFile;
var proxyName = variables.proxyName;
var proxyHost = variables.proxyHost;
var env = variables.env;
var verbose = variables.verbose;
var templateOptions = variables.templateOptions;
var templateRepos = variables.templateRepos;

events.subscribe('ERROR', showError);
events.subscribe('VERBOSE', showVerbose);
events.subscribe('WARNING', tools.showWarning);
events.subscribe('STEP', tools.showStep);
events.subscribe('MESSAGE', tools.showMessage);
events.subscribe('ANSWER', tools.answer);

checkUserInput();

function checkUserInput(){

    var promisesPack = [];

    if(projectPath === gorillaPath){

        events.publish('ERROR', ['000']);

    }else{

        promisesPack.push([tools.printLogo]);

        if((argv.hasOwnProperty('v') || argv.hasOwnProperty('version')) && argv._.length === 0){

            console.log(tools.printVersion());

        }else if((argv.hasOwnProperty('h') || argv.hasOwnProperty('help')) && argv._.length === 0){

            console.log('Please, visit https://gorillajs.com');

        }else{

            promisesPack.push(

                [plugins.include]

            );

            if(argv._[0] === 'build'){

                if(argv._[0] && argv._[1]){

                    projectPath = path.resolve(argv._[1]);
                    mkdirp.sync(projectPath);
                    variables.projectPath = projectPath;
                    commonPath = path.join(projectPath, gorillaFolder, 'common');
                    workingPath = projectPath;
                    variables.workingPath = workingPath;

                }


                if(argv.hasOwnProperty('f')){

                    promisesPack.push(
                        [m_docker.stop, [path.join(projectPath, gorillaFolder, gorillaFile)]],
                        [tools.force, [path.join(projectPath, gorillaFolder, gorillaFile)]]
                    );

                }

                if(argv.hasOwnProperty('p')){

                    proxyPort = argv.p;

                }

                promisesPack.push(

                    [tools.config, env],
                    [tools.isNewProject, path.join(workingPath, gorillaFolder, gorillaFile), 'new-project'],

                    [m_docker.check],
                    [m_docker.config],
                    [m_docker.getTemplateSource, [path.join(homeUserPath, proxyName, 'templates'), templateRepos.proxy, 'gorillajs-proxy']],

                    [tools.createGorillaFile, [path.join(projectPath, gorillaFolder, gorillaFile), gorillaFolder], 'id'],
                    [promises.cond, '{{id}}!:', [

                        [tools.paramForced, ['project', 'id', uuid()]]

                    ], [
                    
                        [tools.paramForced, ['project', 'id', '{{id}}']]

                    ]],
                    [tools.retrieveConfigData, [path.join(homeUserPath, proxyName), 'gorillajs-proxy']],
                    [tools.retrieveConfigData, [path.join(homeUserPath, proxyName), 'overwrite']],
                    [build]

                );

            }else if(argv._[0] === 'run'){

                if(argv._[0] && argv._[1]){

                    projectPath = path.resolve(argv._[1]);
                    variables.projectPath = projectPath;
                    workingPath = projectPath;
                    variables.workingPath = workingPath;

                }

                promisesPack.push(

                    [tools.config, env],
                    [tools.createGorillaFile, [path.join(projectPath, gorillaFolder, gorillaFile), gorillaFolder], 'id'],
                    [run]

                );

            }else if(argv._[0] === 'login'){

                promisesPack.push(

                    [credentials.login, [argv._[1], argv._[2]]]

                );

            }else if(argv._[0] === 'logout'){

                promisesPack.push(

                    credentials.logout

                );

            }

            promisesPack.push(

                [events.publish, ['INIT_PLUGINS', path.join(projectPath, gorillaFolder, gorillaFile)], true]

            );


        }

        promises.add(promisesPack);
        promises.start();

    }

}

function run(){

    var promisesPack = [];

    promisesPack = [

        [tools.param, ['project', 'domain'], 'domain'],
        [tools.sanitize, ['{{domain}}', ''], 'slug'],

        [commit.replace],
        [m_docker.startSimple, [path.join(workingPath, gorillaFolder, gorillaTemplateFolder, composeFile), '{{slug}}']],
        [m_docker.startSimple, [path.join(homeUserPath, proxyName, 'proxy', 'template', composeFile), proxyName]],
        [commit.create, ['{{domain}}']],

        [events.publish, ['STEP', ['Your project is ready!']]]

    ];

    promises.add(promisesPack);
    promises.start();

}

function build(){

    var promisesPack = [];

    promisesPack = [

        [events.publish, ['STEP', ['starting']]],
        [tools.paramForced, ['docker', 'gorillafolder', gorillaFolder]],
        [tools.param, ['docker', 'template_type', templateOptions], 'template_type'],
        [events.publish, ['TEMPLATE_SELECTED', '{{template_type}}'], true],

        [events.publish, ['STEP', ['check_repo']]],
        [promises.cond, '{{template_type}}::Local folder', [
        
            [tools.param, ['docker', 'template-folder'], 'template']

        ], [
        
            [promises.cond, '{{template_type}}::External repository', [

                [tools.param, ['docker', 'template_repository'], 'template']

            ], [

                [tools.sanitize, ['{{template_type}}', ''], 'template_type'],
                [tools.selectObjectValue, [templateRepos, '{{template_type}}'], 'template']
            
            ]],

        ]],

        [tools.basename, ['{{template}}'], 'template_basename'],
        [tools.sanitize, ['{{template_basename}}', '-'], 'template_slug'],
        [tools.paramForced, ['docker', 'data_path', path.join(homeUserPath, proxyName, 'data')], 'data_path'],
        [tools.paramForced, ['docker', 'template_path', path.join(homeUserPath, proxyName, 'templates', '{{template_slug}}')], 'template_path'],
        [tools.paramForced, ['docker', 'template_slug', '{{template_slug}}']],
        [tools.paramForced, ['docker', 'template', '{{template}}']],

        [promises.cond, '{{template_type}}::Local folder', [

            [cross.moveFiles, ['{{template_path}}', false, ['.DS_Store', '.git'], '{{template}}']]

        ], [

            [m_docker.getTemplateSource, [path.join(homeUserPath, proxyName, 'templates'), '{{template}}', '{{template_slug}}']]

        ]],

        [promises.cond, '{{new-project}}::yes', [

            [cross.moveFiles, [projectPath, false, ['.DS_Store', '.git'], path.join('{{template_path}}', 'project')]]

        ]],

        [tools.paramForced, ['docker', 'port', Math.floor(Math.random() * (4999 - 4700)) + 4700], 'dockerport'],
        [cross.moveFiles, [path.join(projectPath, gorillaFolder, gorillaTemplateFolder), false, ['.DS_Store', 'project', '.git'], '{{template_path}}']],
        [tools.retrieveConfigData, [path.join(homeUserPath, proxyName), '{{template_slug}}']],

        [events.publish, ['STEP', ['check_domain']]],
        [tools.param, ['project', 'domain'], 'domain'],
        [tools.sanitize, ['{{domain}}', ''], 'slug'],
        [tools.isLocalProject, '{{domain}}', 'islocal'],
        [tools.paramForced, ['project', 'protocol', 'http'], 'protocol'],
        [tools.paramForced, ['project', 'islocal', '{{islocal}}']],
        [tools.paramForced, ['project', 'slug', '{{slug}}']],

        [events.publish, ['DOMAIN_SELECTED', '{{domain}}'], true],

        [tools.param, ['proxy', 'port'], 'proxyport'],
        [tools.param, ['proxy', 'host'], 'proxyhost'],
        [tools.paramForced, ['system', 'hostsfile', hostsFile], 'hosts-file'],
        [tools.paramForced, ['proxy', 'userpath', path.join(homeUserPath, proxyName, 'proxy')]],

        [events.publish, ['STEP', ['move_files']]],

        [cross.moveFiles, [path.join(homeUserPath, proxyName, 'proxy', 'template'), false, ['.DS_Store', '.git'], path.join(homeUserPath, proxyName, 'templates', 'gorillajs-proxy')]],

        [events.publish, ['STEP', ['config_plugins']]],

        [events.publish, ['BEFORE_SET_PROXY_VARIABLES', [path.join(projectPath, gorillaFolder, gorillaFile), path.join(homeUserPath, proxyName, 'proxy', 'template')]], true],
        [tools.setEnvVariables, path.join(homeUserPath, proxyName, 'proxy', 'template', '*')],
        [events.publish, ['AFTER_SET_PROXY_VARIABLES', [path.join(projectPath, gorillaFolder, gorillaFile), path.join(homeUserPath, proxyName, 'proxy', 'template')]], true],

        [events.publish, ['BEFORE_SET_TEMPLATE_VARIABLES', [path.join(projectPath, gorillaFolder, gorillaFile), path.join(projectPath, gorillaFolder, gorillaTemplateFolder)]], true],
        [tools.setEnvVariables, [path.join(projectPath, gorillaFolder, gorillaTemplateFolder, '*'), ['image']]],
        [events.publish, ['AFTER_SET_TEMPLATE_VARIABLES', [path.join(projectPath, gorillaFolder, gorillaFile), path.join(projectPath, gorillaFolder, gorillaTemplateFolder)]], true],

        [m_docker.ip, '{{machine-name}}', 'ip'],

        [events.publish, ['STEP', ['docker_start']]],
        [m_docker.network],
        [commit.replace],
        [m_docker.stop, [path.join(projectPath, gorillaFolder, gorillaFile)]],
        [m_docker.start, ['{{machine-name}}', path.join(workingPath, gorillaFolder, gorillaTemplateFolder, composeFile), '{{slug}}', '{{ssh-enabled}}']],
        [m_docker.stop, [null, 'gorillajsproxy']],
        [m_docker.base, [path.join(homeUserPath, proxyName, 'proxy', 'template', composeFile), proxyName, '{{proxyport}}']],
        [events.publish, ['DOCKER_STARTED']],
        [tools.fusion, [path.join(projectPath, gorillaFolder, gorillaFile)]],

        [events.publish, ['STEP', ['build_project']]],
        [promises.cond, '{{islocal}}::yes', [

            [host.add, ['{{hosts-file}}', '{{domain}}', '{{ip}}']],

            [promises.cond, '{{proxyport}}::80', [

                [host.check, ['{{protocol}}://{{domain}}']],
                [host.open, '{{protocol}}://{{domain}}'],
                [events.publish, ['MESSAGE', ['Server ready!!!']], true]

            ], [

                [host.check, ['{{protocol}}://{{domain}}']],
                [host.open, '{{protocol}}://{{domain}}:{{proxyport}}'],
                [events.publish, ['MESSAGE', ['Server ready!!!']], true]

            ]],

            [events.publish, ['STEP', ['open_project']]]

        ]],
        [host.check, ['{{protocol}}://{{domain}}', true]],
        [events.publish, ['STEP', ['project_dependencies']]],
        [events.publish, ['PROJECT_COMPLETED']]

    ];

    promises.add(promisesPack);
    promises.start();

}

function exit(text){
    console.log(text);
    events.publish('PROMISEME');
}

function showVerbose(systemMessage, force){
    if(verbose || force){
        tools.showVerbose(systemMessage);
    }
}

function showError(number){

    tools.showError(number);
    tools.showStep('gorilla-cleaner');

    events.unsubscribe('VERBOSE', showVerbose);
    events.unsubscribe('WARNING', tools.showWarning);
    events.unsubscribe('STEP', tools.showStep);
    events.unsubscribe('MESSAGE', tools.showMessage);

    process.exit();

}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
