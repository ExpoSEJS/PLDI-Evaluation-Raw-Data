
> ws@0.4.31 install /root/Targets/ws-additions/node_modules/ws
> (node-gyp rebuild 2> builderror.log) || (exit 0)

make: Entering directory '/root/Targets/ws-additions/node_modules/ws/build'
  CXX(target) Release/obj.target/bufferutil/src/bufferutil.o
bufferutil.target.mk:96: recipe for target 'Release/obj.target/bufferutil/src/bufferutil.o' failed
make: Leaving directory '/root/Targets/ws-additions/node_modules/ws/build'
/root/Targets/ws-additions
└─┬ ws-additions@0.0.13 
  ├─┬ coffeeify@0.6.0 
  │ ├─┬ coffee-script@1.7.1 
  │ │ └── mkdirp@0.3.5 
  │ ├── convert-source-map@0.3.5 
  │ └── through@2.3.8 
  ├── lodash@2.4.2 
  ├── simplog@0.1.0 
  └─┬ ws@0.4.31 
    ├── commander@0.6.1 
    ├── nan@0.3.2 
    ├── options@0.0.6 
    └── tinycolor@0.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/ws-additions/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 34% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0286 took 1.5454s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:83) on program This has the exact same API as
[WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket). So
you get going with:

```
ReconnectingWebSocket = require(reconnecting-websocket)
ws = new ReconnectingWebSocket('ws://...');
```

#Events
##ws
A reference to the contained WebSocket in case you need to poke under the hood.

This may work on the client or the server. Because we love you.

    WebSocket = window.WebSocket
    background = window.requestAnimationFrame or setTimeout

    class ReconnectingWebSocket
      constructor: (@url) ->
        @couldBeBusted = true
        @forceclose = false
        @allowReconnect = false
        @wasConnected = false
        @connect()
        @reconnect()

This is the connection retry system. Keep trying at every opportunity.

      reconnect: () ->
        background =>
          if not @forceclose
            @reconnect()
            if @readyState isnt WebSocket.OPEN
              if Date.now() > @reconnectAfter
                @connect()

The all powerful connect function, sets up events and error handling.

      connect: () ->
        @reconnectAfter = Date.now() + 200
        @readyState = WebSocket.CONNECTING
        @ws = new WebSocket(@url)
        @ws.onopen  = (event) =>
          @wasConnected = true
          @readyState = WebSocket.OPEN
          @reconnectAfter = Date.now() * 2
          @onopen(event)
        @ws.onclose = (event) =>
          if @wasConnected
            @ondisconnect(new Event('disconnected', {data: {forceClose: @forceclose}}))
          @reconnectAfter = 0
          if @forceclose
            @readyState = WebSocket.CLOSED
            @onclose(event)
          else
            @readyState = WebSocket.CONNECTING
        @ws.onmessage = (event) =>
          @onmessage(event)
        @ws.onerror = (event) =>
          @reconnectAfter = 0
          @onerror(event)

Sending has an odd uncatchable exception, so use marker flags
to know that we did or did not get past a send.

      send: (data) ->
        state = @readyState
        @readyState = WebSocket.CLOSING
        if typeof(data) is "object"
          @ws.send(JSON.stringify(data))
        else
          @ws.send(data)
        @readyState = state

      close: ->
        @forceclose = true
        @ws.close()

Since there's all sorts of ways your connection can be severed if it's not active
( e.g. nginx ), we'll allow you to specify a keep alive message and an interval
on which to send it.
    
      keepAlive: (timeoutMs, message) ->
        sendMessage = () => @send(message)
        setInterval(sendMessage, timeoutMs)

Empty shims for the event handlers. These are just here for discovery via
the debugger.

      onopen: (event) ->
      onclose: (event) ->
      onmessage: (event) ->
      onerror: (event) ->

As a convenience for testing, we'll emit a message when we've disconnected.

      ondisconnect: (event) ->

Publish this object for browserify.

    module.exports = ReconnectingWebSocket
 at SyntaxError: Unexpected token (1:83)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:61)
    at Parser.pp$1.parseExpressionStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:966:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:730:24)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
    at Parser.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:516:17)
    at Object.parse (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:3098:39)
    at convert (/root/ExpoSE/lib/Tropigate/bin/main.js:50:18)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/ws-additions/node_modules/ws-additions/index.js. Coverage (Term): 61% Coverage (LOC): 100%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
