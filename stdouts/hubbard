/root/Targets/hubbard
└─┬ hubbard@1.0.3 
  ├── camo@0.12.2  (git://github.com/caseywebb/camo.git#4eb1709bb6ac5f1d1ceab3910aeff113f26a44c9)
  ├── mkdirp@0.5.1  (git://github.com/caseywebb/node-mkdirp.git#621e3fb3be8ab1818617a2ea39f1a560606c3ac6)
  └── rimraf@2.5.4  (git://github.com/caseywebb/rimraf.git#568b9b647b10ac6070a798f0229cd043542a1a97)

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/hubbard/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.065 took 6.75s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node --harmony
'use strict'

const http = require('http')
const path = require('path')
const Koa = require('koa')
const { defaults, extendWith } = require('lodash')
const program = require('commander')
const mkdirp = require('mkdirp')
const fs = require('fs-promise')
const rimraf = require('rimraf')
const randomstring = require('randomstring')
let logger; const { error, info, verbose } = logger = require('winston')

// const config = require('./lib/config')

start()
  .then(() =>
    info(`Hubbard listening on ${program.host}:${program.port}`))
  .catch((err) =>
    error(err))

async function start() {
  const app = new Koa()

  let config
  if (!program.config) {
    try {
      config = require('./config')
    } catch (e) {
      config = {}
    }
  }

  defaults(program, extendWith(
    {
      environment: 'production',
      password: '',
      port: 8080,
      host: '0.0.0.0',
      useHttps: false,
      logLevel: 'info',
      logFormat: 'text',
      pidFile: path.resolve(__dirname, '.pid'),
      dataDir: path.resolve(__dirname, './.data'),
      reposDir: path.resolve(__dirname, './.repos')
    },
    {
      environment: process.env.NODE_ENV,
      password: process.env.HUBBARD_PASSWORD,
      port: process.env.HUBBARD_PORT,
      host: process.env.HUBBARD_HOST,
      useHttps: process.env.HUBBARD_USE_HTTPS,
      accessToken: process.env.HUBBARD_GITHUB_ACCESS_TOKEN,
      logLevel: process.env.HUBBARD_LOG_LEVEL,
      logFile: process.env.HUBBARD_LOG,
      logFormat: process.env.HUBBARD_LOG_FORMAT,
      pidFile: process.env.HUBBARD_PID,
      dataDir: process.env.HUBBARD_DATA,
      reposDir: process.env.HUBBARD_REPOS,
    },
    process.env.__daemon ? {} : config,
    (c, p) => p || c))

  app.keys = [randomstring.generate()]

  if (!program.accessToken) {
    throw new Error('No GitHub Access Token Supplied')
  }

  if (program.pidFile) {
    await fs.writeFile(program.pidFile, process.pid)
    process.on('exit', () => rimraf.sync(program.pidFile))
  }

  logger.level = program.logLevel
  const transports = [
    new logger.transports.Console({
      colorize: true
    })
  ]
  if (program.logFile) {
    transports.push(new (logger.transports.File)({
      filename: program.logFile,
      colorize: true,
      json: program.logFormat === 'json'
    }))
  }
  logger.configure({ transports })

  const host = program.host
  const port = program.port

  if (program.environment === 'development') {
    program.host = await require('./lib/localtunnel')
    program.port = 80
  }

  verbose('Ensuring repo directory')
  await mkdirp(program.reposDir)

  app.use(require('./api'))
  app.use(require('koa-static')(path.resolve(__dirname, '.dist')))

  const server = http.createServer(app.callback())

  verbose('Connecting to nedb')
  await require('./lib/db')

  await require('./api/models/repo').sync()

  verbose('Starting Hubbard server')
  server.listen(port, host, (err) => {
    if (err) {
      throw new Error(err)
    }
  })
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
