
> canvas@1.1.6 install /root/Targets/carapace/node_modules/canvas
> node-gyp rebuild

/root/Targets/carapace
└─┬ carapace@1.0.2 
  ├── async@0.9.2 
  ├── own@1.0.0 
  └── underscore@1.8.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/carapace/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0939 took 4.1726s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (2:4) on program var _ = require('underscore')
var assert = require('assert')
var async = require('async')
var own = require('own')

var Canvas = exports.Canvas = require('./canvas')
var Queue = exports.Queue = require('./queue')
var registered = exports.registered = {}
var util = exports.util = require('./util')

exports.create = create
exports.Filter = require('./filter')
exports.Font = require('./font')
exports.Image = require('./image')
exports.Job = require('./job')
exports.register = register
exports.unregister = unregister

var PROTOTYPE = {

    run: function (queue, callback) {
        var canvas
        var jobs

        try {
            if (_.isArray(queue)) queue = Queue.create(queue)
            canvas = this.canvas
            jobs = [
                function(done){ return done(null, canvas) }
            ].concat(_.map(queue.jobs, function(job){
                return async.apply(_.bind(job._run, job), job.options)
            }, this))
        } catch (ex) {
            return process.nextTick(function(){
                return callback(ex)
            })
        }
        async.waterfall(jobs, function(err, canvas){
            if (err) return callback(err)
            return callback(null, util.clone(canvas))
        })
    }

}

function create() {
    return Object.create(PROTOTYPE, own({
        canvas: Canvas.create.apply(null, arguments)
    }))
}

function register(job) {
    assert(job, 'failed to register undefined job')
    if (_.isString(job) && registered[job]) return registered[job]
    if (_.isString(job) && !registered[job]) job = require(job)
    if (job.isJob) return registered[job.id] = job
    if (_.isArray(job)) return _.each(job, register)
    throw new Error('failed to register job: "' + job + '"')
}

function unregister() {
    registered = exports.registered = {}
}
 at SyntaxError: Unexpected token (2:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
