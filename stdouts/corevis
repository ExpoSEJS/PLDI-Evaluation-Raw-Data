/root/Targets/corevis
└─┬ corevis@0.0.3 
  ├── ejs@1.0.0 
  ├─┬ latest@0.2.0 
  │ └─┬ npm@2.15.12 
  │   ├── abbrev@1.0.9 
  │   ├── ansi@0.3.1 
  │   ├── ansi-regex@2.0.0 
  │   ├── ansicolors@0.3.2 
  │   ├── ansistyles@0.1.3 
  │   ├── archy@1.0.0 
  │   ├── async-some@1.0.2 
  │   ├── block-stream@0.0.9 
  │   ├── char-spinner@1.0.1 
  │   ├── chmodr@1.0.2 
  │   ├── chownr@1.0.1 
  │   ├── cmd-shim@2.0.2 
  │   ├─┬ columnify@1.5.4 
  │   │ └─┬ wcwidth@1.0.0 
  │   │   └─┬ defaults@1.0.3 
  │   │     └── clone@1.0.2 
  │   ├─┬ config-chain@1.1.10 
  │   │ └── proto-list@1.2.4 
  │   ├─┬ dezalgo@1.0.3 
  │   │ └── asap@2.0.3 
  │   ├── editor@1.0.0 
  │   ├── fs-vacuum@1.2.9 
  │   ├─┬ fs-write-stream-atomic@1.0.8 
  │   │ └── iferr@0.1.5 
  │   ├── fstream@1.0.10 
  │   ├─┬ fstream-npm@1.1.1 
  │   │ └── fstream-ignore@1.0.5 
  │   ├── github-url-from-git@1.4.0 
  │   ├── github-url-from-username-repo@1.0.2 
  │   ├─┬ glob@7.0.6 
  │   │ ├── fs.realpath@1.0.0 
  │   │ └── path-is-absolute@1.0.0 
  │   ├── graceful-fs@4.1.6 
  │   ├── hosted-git-info@2.1.5 
  │   ├── imurmurhash@0.1.4 
  │   ├── inflight@1.0.5 
  │   ├── inherits@2.0.3 
  │   ├── ini@1.3.4 
  │   ├─┬ init-package-json@1.9.4 
  │   │ ├─┬ glob@6.0.4 
  │   │ │ └── path-is-absolute@1.0.0 
  │   │ └── promzard@0.3.0 
  │   ├── lockfile@1.0.1 
  │   ├─┬ lru-cache@4.0.1 
  │   │ ├── pseudomap@1.0.2 
  │   │ └── yallist@2.0.0 
  │   ├─┬ minimatch@3.0.3 
  │   │ └─┬ brace-expansion@1.1.6 
  │   │   ├── balanced-match@0.4.2 
  │   │   └── concat-map@0.0.1 
  │   ├─┬ mkdirp@0.5.1 
  │   │ └── minimist@0.0.8 
  │   ├─┬ node-gyp@3.6.0 
  │   │ └── semver@5.3.0 
  │   ├── nopt@3.0.6 
  │   ├── normalize-git-url@3.0.2 
  │   ├─┬ normalize-package-data@2.3.5 
  │   │ └─┬ is-builtin-module@1.0.0 
  │   │   └── builtin-modules@1.1.0 
  │   ├── npm-cache-filename@1.0.2 
  │   ├── npm-install-checks@1.0.7 
  │   ├── npm-package-arg@4.1.0 
  │   ├─┬ npm-registry-client@7.2.1 
  │   │ ├─┬ concat-stream@1.5.2 
  │   │ │ ├─┬ readable-stream@2.0.6 
  │   │ │ │ ├── core-util-is@1.0.2 
  │   │ │ │ ├── isarray@1.0.0 
  │   │ │ │ ├── process-nextick-args@1.0.7 
  │   │ │ │ ├── string_decoder@0.10.31 
  │   │ │ │ └── util-deprecate@1.0.2 
  │   │ │ └── typedarray@0.0.6 
  │   │ └── retry@0.10.0 
  │   ├── npm-user-validate@0.1.5 
  │   ├─┬ npmlog@2.0.4 
  │   │ ├─┬ are-we-there-yet@1.1.2 
  │   │ │ └── delegates@1.0.0 
  │   │ └─┬ gauge@1.2.7 
  │   │   ├── has-unicode@2.0.0 
  │   │   ├─┬ lodash.pad@4.4.0 
  │   │   │ ├── lodash._baseslice@4.0.0 
  │   │   │ ├── lodash._basetostring@4.12.0 
  │   │   │ └── lodash.tostring@4.1.4 
  │   │   ├── lodash.padend@4.5.0 
  │   │   └── lodash.padstart@4.5.0 
  │   ├── once@1.4.0 
  │   ├── opener@1.4.1 
  │   ├─┬ osenv@0.1.3 
  │   │ ├── os-homedir@1.0.0 
  │   │ └── os-tmpdir@1.0.1 
  │   ├── path-is-inside@1.0.1 
  │   ├─┬ read@1.0.7 
  │   │ └── mute-stream@0.0.5 
  │   ├─┬ read-installed@4.0.3 
  │   │ ├── debuglog@1.0.1 
  │   │ ├── readdir-scoped-modules@1.0.2 
  │   │ └── util-extend@1.0.1 
  │   ├─┬ read-package-json@2.0.4 
  │   │ ├─┬ glob@6.0.4 
  │   │ │ └── path-is-absolute@1.0.0 
  │   │ └─┬ json-parse-helpfulerror@1.0.3 
  │   │   └── jju@1.3.0 
  │   ├─┬ readable-stream@2.1.5 
  │   │ ├── buffer-shims@1.0.0 
  │   │ ├── core-util-is@1.0.2 
  │   │ ├── isarray@1.0.0 
  │   │ ├── process-nextick-args@1.0.7 
  │   │ ├── string_decoder@0.10.31 
  │   │ └── util-deprecate@1.0.2 
  │   ├── realize-package-specifier@3.0.1 
  │   ├─┬ request@2.74.0 
  │   │ ├── aws-sign2@0.6.0 
  │   │ ├── aws4@1.4.1 
  │   │ ├─┬ bl@1.1.2 
  │   │ │ └─┬ readable-stream@2.0.6 
  │   │ │   ├── core-util-is@1.0.2 
  │   │ │   ├── isarray@1.0.0 
  │   │ │   ├── process-nextick-args@1.0.7 
  │   │ │   ├── string_decoder@0.10.31 
  │   │ │   └── util-deprecate@1.0.2 
  │   │ ├── caseless@0.11.0 
  │   │ ├─┬ combined-stream@1.0.5 
  │   │ │ └── delayed-stream@1.0.0 
  │   │ ├── extend@3.0.0 
  │   │ ├── forever-agent@0.6.1 
  │   │ ├─┬ form-data@1.0.0-rc4 
  │   │ │ └── async@1.5.2 
  │   │ ├─┬ har-validator@2.0.6 
  │   │ │ ├─┬ chalk@1.1.3 
  │   │ │ │ ├── ansi-styles@2.2.1 
  │   │ │ │ ├── escape-string-regexp@1.0.5 
  │   │ │ │ ├── has-ansi@2.0.0 
  │   │ │ │ └── supports-color@2.0.0 
  │   │ │ ├─┬ commander@2.9.0 
  │   │ │ │ └── graceful-readlink@1.0.1 
  │   │ │ ├─┬ is-my-json-valid@2.13.1 
  │   │ │ │ ├── generate-function@2.0.0 
  │   │ │ │ ├─┬ generate-object-property@1.2.0 
  │   │ │ │ │ └── is-property@1.0.2 
  │   │ │ │ ├── jsonpointer@2.0.0 
  │   │ │ │ └── xtend@4.0.1 
  │   │ │ └─┬ pinkie-promise@2.0.1 
  │   │ │   └── pinkie@2.0.4 
  │   │ ├─┬ hawk@3.1.3 
  │   │ │ ├── boom@2.10.1 
  │   │ │ ├── cryptiles@2.0.5 
  │   │ │ ├── hoek@2.16.3 
  │   │ │ └── sntp@1.0.9 
  │   │ ├─┬ http-signature@1.1.1 
  │   │ │ ├── assert-plus@0.2.0 
  │   │ │ ├─┬ jsprim@1.3.0 
  │   │ │ │ ├── extsprintf@1.0.2 
  │   │ │ │ ├── json-schema@0.2.2 
  │   │ │ │ └── verror@1.3.6 
  │   │ │ └─┬ sshpk@1.9.2 
  │   │ │   ├── asn1@0.2.3 
  │   │ │   ├── assert-plus@1.0.0 
  │   │ │   ├── dashdash@1.14.0 
  │   │ │   ├── ecc-jsbn@0.1.1 
  │   │ │   ├── getpass@0.1.6 
  │   │ │   ├── jodid25519@1.0.2 
  │   │ │   ├── jsbn@0.1.0 
  │   │ │   └── tweetnacl@0.13.3 
  │   │ ├── is-typedarray@1.0.0 
  │   │ ├── isstream@0.1.2 
  │   │ ├── json-stringify-safe@5.0.1 
  │   │ ├─┬ mime-types@2.1.11 
  │   │ │ └── mime-db@1.23.0 
  │   │ ├── node-uuid@1.4.7 
  │   │ ├── oauth-sign@0.8.2 
  │   │ ├── qs@6.2.1 
  │   │ ├── stringstream@0.0.5 
  │   │ ├── tough-cookie@2.3.1 
  │   │ └── tunnel-agent@0.4.3 
  │   ├── retry@0.10.0 
  │   ├── rimraf@2.5.4 
  │   ├── semver@5.1.0 
  │   ├─┬ sha@2.0.1 
  │   │ └─┬ readable-stream@2.0.2 
  │   │   ├── core-util-is@1.0.1 
  │   │   ├── isarray@0.0.1 
  │   │   ├── process-nextick-args@1.0.3 
  │   │   ├── string_decoder@0.10.31 
  │   │   └── util-deprecate@1.0.1 
  │   ├── slide@1.1.6 
  │   ├── sorted-object@2.0.0 
  │   ├── spdx-license-ids@1.2.2 
  │   ├── strip-ansi@3.0.1 
  │   ├── tar@2.2.1 
  │   ├── text-table@0.2.0 
  │   ├── uid-number@0.0.6 
  │   ├── umask@1.1.0 
  │   ├─┬ validate-npm-package-license@3.0.1 
  │   │ ├── spdx-correct@1.0.2 
  │   │ └─┬ spdx-expression-parse@1.0.2 
  │   │   └── spdx-exceptions@1.0.4 
  │   ├─┬ validate-npm-package-name@2.2.2 
  │   │ └── builtins@0.0.7 
  │   ├─┬ which@1.2.11 
  │   │ └── isexe@1.1.2 
  │   ├── wrappy@1.0.2 
  │   └── write-file-atomic@1.1.4 
  └── posix-getopt@1.2.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/corevis/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0298 took 4.5089s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
/**
 * generate an html file based on infromation
 * gathered from mdb(1) arond a node.js core file
 *
 * Author: Dave Eddy <dave@daveeddy.com>
 * Date: December 15, 2014
 * License: MIT
 */

var assert = require('assert');
var fs = require('fs');
var path = require('path');
var os = require('os');
var util = require('util');

var ejs = require('ejs');
var getopt = require('posix-getopt');

var package = require('./package.json');
var MDB = require('./lib/mdb');

var usage = [
  'Usage: corevis [options] <node coredump>',
  '',
  'Generate HTML based on information gathered with mdb(1) from',
  'a node.js core dump',
  '',
  'Examples',
  '    $ corevis core.node.1234 > vis.html',
  '    $ corevis --load /var/tmp/v8-new.so core.node.1234 > vis.html',
  '',
  'Options',
  '  -h, --help       print this message and exit',
  '  -l, --load <v8>  argument to pass to `::load` in mdb(1), defaults to "v8"',
  '  -u, --updates    check npm for available updates to this program',
  '  -v, --version    print the version number and exit',
].join('\n');

// command line arguments
var options = [
  'h(help)',
  'l:(load)',
  'u(updates)',
  'v(version)',
].join('');
var parser = new getopt.BasicParser(options, process.argv);

var option;
var opts = {
  load: 'v8',
};
while ((option = parser.getopt()) !== undefined) {
  switch (option.option) {
    case 'h': console.log(usage); process.exit(0);
    case 'l': opts.load = option.optarg; break;
    case 'u': // check for updates
      require('latest').checkupdate(package, function(ret, msg) {
        console.log(msg);
        process.exit(ret);
      });
      return;
    case 'v': console.log(package.version); process.exit(0);
    default: console.error(usage); process.exit(1); break;
  }
}
var args = process.argv.slice(parser.optind());
var core = args[0];

if (!core) {
  console.error('core file must be passed as the first argument');
  process.exit(1);
}

// this function should be used for all logging. it'll write to stderr
// (to not interfere with the pipeline) and time each call
var _logt;
function log() {
  var now = Date.now();
  if (_logt) {
    var delta = now - _logt;
    process.stderr.write(util.format('%dms\n', delta));
  }
  _logt = now;

  var s = util.format('> %s... ', util.format.apply(util, arguments));
  process.stderr.write(s);
}

var started = Date.now();

log('loading %s', core);
var mdb = new MDB(core);

// start the info gathering process
getstatus();

var status;
function getstatus() {
  log('getting status');
  mdb.run('::status', function(err, stdout, stderr) {
    assert.ifError(err);
    if (stderr)
      console.error(stderr);
    status = stdout.trim();
    loadv8();
  });
}

var v8so;
function loadv8() {
  log('loading v8');
  mdb.run(util.format('::load %s', opts.load), function(err, stdout, stderr) {
    assert.ifError(err);
    if (stderr)
      console.error(stderr);
    v8so = stdout.trim();
    getjsstack();
  });
}

var jsstack = '';
var jsstackv = '';
function getjsstack() {
  log('getting stack trace');
  mdb.run('::jsstack -v', function(err, stdout, stderr, all) {
    assert.ifError(err);

    jsstackv = cleanjsstack(all.trim());
    mdb.run('::jsstack', function(err, stdout, stderr, all) {
      assert.ifError(err);

      jsstack = cleanjsstack(all.trim());
      findjsobjects();
    });
  });
}

// mdb(1) will only output a mox of 80 columns per line if !isatty(stdout) -
// because of this we have to go through the stack ourself with this janky
// regex algorithm to rebuild the stack
function cleanjsstack(jsstack) {
  var lines = jsstack.split('\n');
  jsstack = [];
  var lastline;
  lines.forEach(function(line) {
    // line nmubers, positions, etc.
    if (line.match(/^    [^ ]/)) {
      if (lastline)
        jsstack.push(lastline);
      jsstack.push(line);
      lastline = null;
      return;
    }

    // start of new function
    if (line.match(/^ *[0-9a-f]+ /)) {
      if (lastline)
        jsstack.push(lastline);
      lastline = line;
      return;
    }

    // continuation due to 80 column limit
    lastline += line;
  });
  return jsstack.join('\n');
}

var debug = {};
var objects = [];
var objectmap = {};
function findjsobjects() {
  log('finding jsobjects (this can take a while)');
  mdb.run('::findjsobjects -v', function(err, stdout, stderr) {
    assert.ifError(err);
    assert.equal(stderr, '');

    // parse the output from ::findjsobjects -v and the objects into
    // the `objects` array.  also, use the `objectmap` object to store
    // a map from hex address to the object
    var lines = stdout.trim().split('\n');
    lines.forEach(function(line) {
      var match;
      if ((match = line.match(/^findjsobjects:\s+([^=]+) => (\d*)$/))) {
        // debug findjsobjects output
        debug[match[1]] = +match[2];
      } else if ((match = line.match(/^ *([0-9a-f]+)\s+(\d+)\s+(\d+)\s+([^:]+):? ?(.*)$/))) {
        // actual objects
        var addr = match[1];
        objectmap[addr] = objects.push({
          addr: addr,
          objects: +match[2],
          props: +match[3],
          constructor: match[4],
          args: match[5]
        }) - 1;
      }
    });

    log('calling ::jsprint -a on all objects found');

    var i = 0;
    var addrs = Object.keys(objectmap);
    // call <addr>::jsprint -a for each addr that was found one-at-a-time
    function jsprint() {
      mdb.run(addrs[i] + '::jsprint -a', function(err, stdout, stderr, all) {
        assert.ifError(err);
        // we ignore stderr as some objects may be corrupted

        objects[objectmap[addrs[i]]].jsprint = all.trim();

        if (++i === addrs.length) {
          i = 0;

          // XXX don't findjsobjects every object now because we don't use the info
          analyze();
          return;

          log('calling ::findjsobjects on all objects found');
          findjs();
          return;
        }

        jsprint();
      });
    }
    jsprint();

    // call <addr>::findjsobjects for each addr that was found one-at-a-time
    function findjs() {
      mdb.run(addrs[i] + '::findjsobjects', function(err, stdout, stderr) {
        assert.ifError(err);

        var addresses = stdout.trim().split('\n');
        addresses.forEach(function(addr) {
          objectmap[addr] = i;
        });

        if (++i === addrs.length)
          analyze();
        else
          findjs();
      });
    }
  });
}

function analyze() {
  log('analyzing data');

  // do the equivalent of `<addr>::findjsobjects -r` for each object
  // to determine which objects reference which
  objects.forEach(function(object) {
    var addr = object.addr;
    var re = new RegExp(' ' + addr + ': ');
    object.referencedby = [];
    objects.forEach(function(o) {
      if (addr === o.addr)
        return;
      if (o.jsprint.match(re))
        object.referencedby.push(o.addr);
    });
  });

  // the data used when rendering the EJS template
  var data = {
    core: core,
    status: status,
    package: package,
    v8so: v8so,
    objects: objects,
    objectmap: objectmap,
    _debug: debug,
    jsstack: jsstack,
    jsstackv: jsstackv,
    opts: opts,
    hostname: os.hostname(),
    assets: {}
  };

  log('loading assets');
  var index = fs.readFileSync(path.join(__dirname, 'index.html.ejs'), 'utf-8');

  var d = path.join(__dirname, 'assets');
  var assets = fs.readdirSync(d);
  assets.sort().forEach(function(asset) {
    var ext = path.extname(asset).replace('.', '');
    data.assets[ext] = data.assets[ext] || [];
    data.assets[ext].push(fs.readFileSync(path.join(d, asset), 'utf-8'));
  });

  log('generating HTML');
  process.stdout.write(ejs.render(index, data));

  log('killing mdb');
  mdb.child.kill();

  log('done. took %d seconds', (Date.now() - started) / 1000);
  process.stderr.write('\n');
}
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
