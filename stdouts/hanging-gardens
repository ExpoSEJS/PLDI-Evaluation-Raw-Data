/root/Targets/hanging-gardens
└─┬ hanging-gardens@2.0.7 
  ├── coffee-script@1.12.7 
  ├── hanging_gardens_registry@2.0.20 
  └─┬ watch@1.0.2 
    ├─┬ exec-sh@0.2.1 
    │ └── merge@1.2.0 
    └── minimist@1.2.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/hanging-gardens/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 26% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0245 took 5.7166s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: The keyword 'package' is reserved (38:6) on program var fs       = require('fs')
,   path     = require('path')
,   resolver = require('../resolver')
,   cacher   = require('../cache')
,   builder  = require('../builder')
,   ui       = require('../util/ui')
,   watch    = require('watch')
;

var _load_package
,   _resolve_dependencies
,   _cache_dependecies
,   _build
,   _write_archive
,   _watch_project
;

var _working
;

exports.run = function(config, path, callback){
  var acc
  ;

  acc =
  { config: config
  , path:   path
  };

  ui.status('Booted');

  _load_package(acc, callback);
};

exports.watch = function(config, path, callback){
  var acc
  ,   name
  ,   package
  ,   id
  ,   module
  ;

  acc =
  { config: config
  , path:   path
  };

  ui.status('Booted');

  _watch_project(acc);
};

_load_package = function(acc, callback){
  var package
  ;

  if (_working) return;

  _working = true;

  fs.readFile(acc.path, function(err, data){
    if (err) {
      callback(err);
      return;
    }

    package = JSON.parse(data.toString());
    package._top  = true;
    package._root = path.dirname(acc.path);
    acc.package = package;

    ui.status("Loaded "+acc.path);

    _resolve_dependencies(acc, callback);
  });
};

_resolve_dependencies = function(acc, callback){
  resolver(acc.package, acc.config, function(err, packages){
    if (err) {
      callback(err);
      return;
    }

    ui.status("Resolved dependencies");

    acc.packages = packages;

    _cache_dependecies(acc, callback);
  });
};

_cache_dependecies = function(acc, callback){
  cacher.cache(acc.packages, acc.config, function(err, packages){
    if (err) {
      callback(err);
      return;
    }

    ui.status("Cached dependencies");

    acc.packages = packages;

    _build(acc, callback);
  });
};

_build = function(acc, callback){
  builder.build(acc.packages, acc.config, function(err, archive){
    if (err) {
      callback(err);
      return;
    }

    ui.status("Cached packages");

    acc.archive = archive;

    _write_archive(acc, callback);
  });
};

_write_archive = function(acc, callback){
  fs.writeFile(acc.config.output, acc.archive, function(err){
    _working = false;

    if (err) {
      callback(err);
      return;
    }

    ui.puts('[DONE]');
    ui.status(false);

    callback(undefined);
  });
};

_watch_project = function(acc){
  process.on('exit', function(){
    ui.puts('[BYE]');
    ui.status(false);
  });
  
  process.on('SIGINT', function (){
    process.exit(0);
  });
  
  _load_package(acc, function(err){
    if (err) {
      ui.puts('Target was not updated!');
    }

    ui.status('Watching for changes');

    for (name in acc.packages) {
      package = acc.packages[name];

      if (package._top) {
        var opts
        ;

        opts =
        { interval: 500
        };

        watch.watchTree(package._root, opts, function(f, curr, prev){
          // console.log([f, acc.config.output]);
          if (typeof f == "object" && prev === null && curr === null) {
            return;
          } else if (f == acc.config.output) {
            return;
          } else if (f == path.join(package._root, '.gardencache.json')) {
            return;
          } else if (curr.mtime <= prev.mtime) {
            return;
          } else {
            _load_package(acc, function(err){
              if (err) {
                ui.puts('Target was not updated!');
              }

              ui.status('Watching for changes');
            });
          }
        });
      }
    }
  });
}; at SyntaxError: The keyword 'package' is reserved (38:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$3.parseIdent (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2182:14)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:41:34)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
    at Parser.pp$3.parseFunctionBody (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2105:24)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/hanging-gardens/node_modules/hanging-gardens/lib/command/index.js. Coverage (Term): 12% Coverage (LOC): 6%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
