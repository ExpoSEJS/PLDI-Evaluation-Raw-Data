
> ws@0.4.32 install /root/Targets/lonely/node_modules/ws
> (node-gyp rebuild 2> builderror.log) || (exit 0)

make: Entering directory '/root/Targets/lonely/node_modules/ws/build'
  CXX(target) Release/obj.target/bufferutil/src/bufferutil.o
bufferutil.target.mk:96: recipe for target 'Release/obj.target/bufferutil/src/bufferutil.o' failed
make: Leaving directory '/root/Targets/lonely/node_modules/ws/build'
/root/Targets/lonely
└─┬ lonely@0.1.3 
  ├── commander@2.11.0 
  ├─┬ express@3.21.2 
  │ ├── basic-auth@1.0.4 
  │ ├── commander@2.6.0 
  │ ├─┬ connect@2.30.2 
  │ │ ├── basic-auth-connect@1.0.0 
  │ │ ├─┬ body-parser@1.13.3 
  │ │ │ ├── iconv-lite@0.4.11 
  │ │ │ └─┬ raw-body@2.1.7 
  │ │ │   ├── bytes@2.4.0 
  │ │ │   └── iconv-lite@0.4.13 
  │ │ ├── bytes@2.1.0 
  │ │ ├─┬ compression@1.5.2 
  │ │ │ ├─┬ accepts@1.2.13 
  │ │ │ │ └── negotiator@0.5.3 
  │ │ │ └─┬ compressible@2.0.11 
  │ │ │   └── mime-db@1.30.0 
  │ │ ├── connect-timeout@1.6.2 
  │ │ ├── cookie-parser@1.3.5 
  │ │ ├─┬ csurf@1.8.3 
  │ │ │ └─┬ csrf@3.0.6 
  │ │ │   ├── rndm@1.2.0 
  │ │ │   ├── tsscmp@1.0.5 
  │ │ │   └─┬ uid-safe@2.1.4 
  │ │ │     └── random-bytes@1.0.0 
  │ │ ├─┬ errorhandler@1.4.3 
  │ │ │ ├─┬ accepts@1.3.4 
  │ │ │ │ └── negotiator@0.6.1 
  │ │ │ └── escape-html@1.0.3 
  │ │ ├─┬ express-session@1.11.3 
  │ │ │ ├── crc@3.3.0 
  │ │ │ └─┬ uid-safe@2.0.0 
  │ │ │   └── base64-url@1.2.1 
  │ │ ├─┬ finalhandler@0.4.0 
  │ │ │ └── unpipe@1.0.0 
  │ │ ├─┬ http-errors@1.3.1 
  │ │ │ ├── inherits@2.0.3 
  │ │ │ └── statuses@1.3.1 
  │ │ ├─┬ method-override@2.3.10 
  │ │ │ ├─┬ debug@2.6.9 
  │ │ │ │ └── ms@2.0.0 
  │ │ │ └── vary@1.1.2 
  │ │ ├── morgan@1.6.1 
  │ │ ├─┬ multiparty@3.3.2 
  │ │ │ ├─┬ readable-stream@1.1.14 
  │ │ │ │ ├── core-util-is@1.0.2 
  │ │ │ │ ├── isarray@0.0.1 
  │ │ │ │ └── string_decoder@0.10.31 
  │ │ │ └── stream-counter@0.2.0 
  │ │ ├── on-headers@1.0.1 
  │ │ ├── pause@0.1.0 
  │ │ ├── qs@4.0.0 
  │ │ ├─┬ response-time@2.3.2 
  │ │ │ └── depd@1.1.1 
  │ │ ├─┬ serve-favicon@2.3.2 
  │ │ │ └── ms@0.7.2 
  │ │ ├─┬ serve-index@1.7.3 
  │ │ │ ├── batch@0.5.3 
  │ │ │ ├── escape-html@1.0.3 
  │ │ │ └── mime-types@2.1.17 
  │ │ ├─┬ serve-static@1.10.3 
  │ │ │ ├── escape-html@1.0.3 
  │ │ │ └─┬ send@0.13.2 
  │ │ │   ├── depd@1.1.1 
  │ │ │   ├── destroy@1.0.4 
  │ │ │   ├── mime@1.3.4 
  │ │ │   └── statuses@1.2.1 
  │ │ ├─┬ type-is@1.6.15 
  │ │ │ └── media-typer@0.3.0 
  │ │ └── vhost@3.0.2 
  │ ├── content-disposition@0.5.0 
  │ ├── content-type@1.0.4 
  │ ├── cookie@0.1.3 
  │ ├── cookie-signature@1.0.6 
  │ ├─┬ debug@2.2.0 
  │ │ └── ms@0.7.1 
  │ ├── depd@1.0.1 
  │ ├── escape-html@1.0.2 
  │ ├── etag@1.7.0 
  │ ├── fresh@0.3.0 
  │ ├── merge-descriptors@1.0.0 
  │ ├── methods@1.1.2 
  │ ├─┬ mkdirp@0.5.1 
  │ │ └── minimist@0.0.8 
  │ ├── parseurl@1.3.2 
  │ ├─┬ proxy-addr@1.0.10 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.0.5 
  │ ├── range-parser@1.0.3 
  │ ├─┬ send@0.13.0 
  │ │ ├── destroy@1.0.3 
  │ │ ├── mime@1.3.4 
  │ │ ├─┬ on-finished@2.3.0 
  │ │ │ └── ee-first@1.1.1 
  │ │ └── statuses@1.2.1 
  │ ├── utils-merge@1.0.0 
  │ └── vary@1.0.1 
  ├── mime@1.4.1 
  ├─┬ socket.io@0.9.19 
  │ ├── base64id@0.1.0 
  │ ├── policyfile@0.0.4 
  │ ├── redis@0.7.3 
  │ └─┬ socket.io-client@0.9.16 
  │   ├─┬ active-x-obfuscator@0.0.1 
  │   │ └── zeparser@0.0.5 
  │   ├── uglify-js@1.2.5 
  │   ├─┬ ws@0.4.32 
  │   │ ├── commander@2.1.0 
  │   │ ├── nan@1.0.0 
  │   │ ├── options@0.0.6 
  │   │ └── tinycolor@0.0.1 
  │   └── xmlhttprequest@1.4.2 
  └─┬ xml2js@0.1.14 
    └── sax@1.2.4 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/lonely/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0821 took 5.7108s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
// Lonely Hangouts - Local testing for the Google+ Hangouts API.
//
// Usage:
//   $ node lonely.js [--single] path/to/your/app.xml
//
// Once the server is running, visit http://localhost:8080/ to test your app.
//
// Events which this server emits:
// - welcome: { id: your_id#, users: [], state: {} }
// - participantsChanged: { users: [ { user: username, id: id# }, ... ] }
// - stateChanged: { state: { global state object } }
//
// Events which this server understands:
// - submitDelta: { delta: { k1: v1, k2: v2, ... }, deleteKeys: [ ... ] }

// Still to do:
// - Inline user PNGs
'use strict';

var EVENTS = {
  WELCOME: 'welcome',
  PARTICIPANTS_CHANGED: 'participantsChanged',
  STATE_CHANGED: 'stateChanged',
  SUBMIT_DELTA: 'submitDelta',
  RESET_STATE: 'resetState',
  SAVED_STATES_CHANGED: 'savedStatesChanged',
  ADD_SAVED_STATE: 'addSavedState'
};

var express = require('express'),
    http    = require('http'),
    io      = require('socket.io'),
    assert  = require('assert'),
    fs      = require('fs'),
    path    = require('path'),
    program = require('commander'),
    mime = require('mime'),
    readXml = require('./lib/read-xml.js'),
    users   = require('./lib/users.js');

program
  .version(0.1)
  .option('-s, --single', 'Run in singleplayer mode (for easier testing).')
  .parse(process.argv);

assert.equal(1, program.args.length,
    'Usage: node ' + process.argv[1] + ' path/to/hangout.xml');

var xml_file = program.args[0];
var states_file = path.basename(xml_file) + '.states.json';

var app = express();
var httpServer = http.createServer(app);
var io = io.listen(httpServer)

// Base XML file.
app.get('/', function(req, res) {
  fs.readFile(xml_file, function(err, data) {
    assert.ifError(err);

    readXml.parseHangoutXml(data, function(err, hangout_data) {
      assert.ifError(err);

      res.header('Cache-Control', 'no-cache');
      res.contentType('text/html');
      res.send(readXml.createFakeHtml(hangout_data, program.single));
    });
  });
});

function addStaticJsFile(app, server_path, filename) {
  app.get(server_path, function(req, res) {
    fs.readFile(filename, function(e, data) {
      assert.ifError(e);
      res.header('Cache-Control', 'no-cache');
      res.contentType(mime.lookup(filename));
      res.send(data);
    });
  });
}

// Server-defined static files.
var statics = [
  'fake-api.js',
  'fake-socket-api.js',
  'xsocket.io.min.js',
  'lonely-button.js',
  'lonely-button.css'
];
for (var i = 0; i < statics.length; i++) {
  var f = statics[i];
  addStaticJsFile(app, '/' + f, __dirname + '/static/' + f);
}

// User-defined static files.
app.get(/(.*)/, function(req, res) {
  var req_path = req.params[0];
  assert.equal('/', req_path[0]);
  var file_path = path.join(process.cwd(), req_path.substr(1));
  console.log(req_path + ' -> ' + file_path);
  fs.readFile(file_path, function(e, data) {
    if (e) {
     res.send(404);
     return;
    }

    res.contentType(mime.lookup(file_path));
    res.header('Cache-Control', 'no-cache');
    res.send(data);
  });
});


// Fake hangouts API.

// This is the unified state object which is synchronized across clients.
var global_state = { };

// Current list of enabled users.
var current_users = [ ];

// Saved States
var saved_states = {};
fs.readFile(states_file, function(e, data) {
  if (e && e.code == 'ENOENT') {
    // file does not exist yet -- and that's totally fine.
    return;
  }
  assert.ifError(e);
  saved_states = JSON.parse(data);
});
function writeSavedStates() {
  var data = JSON.stringify(saved_states);
  fs.writeFile(states_file, data, function(e) {
    assert.ifError(e);
  });
}

io.sockets.on('connection', function(socket) {
  var user = users.makeUpUser(current_users);
  current_users.push(user);

  // Tell the user who they are and give them the lay of the land.
  socket.emit(EVENTS.WELCOME, {
    id: user.id,
    state: global_state,
    users: current_users,
    savedStates: saved_states
  } );

  // Let everyone else know that someone has joined.
  socket.broadcast.emit(EVENTS.PARTICIPANTS_CHANGED, { users: current_users });

  socket.on('disconnect', function() {
    var idx = current_users.indexOf(user);
    current_users.splice(idx, 1);
    socket.broadcast.emit(EVENTS.PARTICIPANTS_CHANGED, { users: current_users });
  });

  socket.on(EVENTS.SUBMIT_DELTA, function(data) {
    if (data.delta) {
      for (var k in data.delta) {
        global_state[k] = data.delta[k];
      }
    }
    if (data.deleteKeys) {
      for (var i = 0; i < data.deleteKeys.length; i++) {
        delete global_state[data.deleteKeys[i]];
      }
    }

    socket.broadcast.emit(EVENTS.STATE_CHANGED, { state: global_state });
    socket.emit(EVENTS.STATE_CHANGED, { state: global_state });
  });

  // Some user wants to reset the state. Do it and let everyone know.
  socket.on(EVENTS.RESET_STATE, function(data) {
    global_state = data.state || {};
    socket.broadcast.emit(EVENTS.STATE_CHANGED, { state: global_state });
    socket.emit(EVENTS.STATE_CHANGED, { state: global_state });
  });

  // User added a saved state. Save it and let everyone know.
  socket.on(EVENTS.ADD_SAVED_STATE, function(data) {
    saved_states[data.name] = data.state;
    writeSavedStates();
    socket.broadcast.emit(EVENTS.SAVED_STATES_CHANGED, { savedStates: saved_states });
    socket.emit(EVENTS.SAVED_STATES_CHANGED, { savedStates: saved_states });
  });
});


httpServer.listen(8080);
console.log('Listening on http://localhost:8080/');
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
