/root/Targets/data-forge-to-highstock
└─┬ data-forge-to-highstock@0.0.18 
  ├─┬ chai@3.5.0 
  │ ├── assertion-error@1.0.2 
  │ ├─┬ deep-eql@0.1.3 
  │ │ └── type-detect@0.1.1 
  │ └── type-detect@1.0.0 
  └── linq@3.0.9 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/data-forge-to-highstock/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0439 took 2.4675s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:5) on program 'use strict';

module.exports = function (dataForge) {

	var assert = require('chai').assert;
	var Enumerable = require('linq');

	/**
	 * Convert the data-frame to Highstock date+OHLC format.
	 */
	dataForge.DataFrame.prototype.toHighstockOHLC = function () {

        var self = this;

        var it = self.getIterator();
        var columnNames = self.getColumnNames();

        var output = [];
        while (it.moveNext()) {
            var pair = it.getCurrent();
            var index = pair[0];
            var row = pair[1];
            assert.instanceOf(index, Date, "Expected DataFrame index to contain dates!");
            assert.isNumber(row.Open, "Expected Open column to contain numbers!");
            assert.isNumber(row.High, "Expected High column to contain numbers!");
            assert.isNumber(row.Low, "Expected Low column to contain numbers!");
            assert.isNumber(row.Close, "Expected Close column to contain numbers!");
            output.push([
                index.getTime(),
                row.Open,
                row.High,
                row.Low,
                row.Close,
            ]);
        }

        return output;
    };

    /**
	 * Convert the data-frame to Highstock date+value format.
     */
    dataForge.DataFrame.prototype.toHighstock = function () {

        var self = this;

        var it = self.getIterator();
        var columnNames = self.getColumnNames();

        var output = [];
        while (it.moveNext()) {
            var pair = it.getCurrent();
            var index = pair[0];
            var values = pair[1];
            assert.instanceOf(index, Date, "Expected index to contain dates!");
            var row = Enumerable.from(columnNames)
                .select(function (columnName) {
                    return values[columnName];
                })
                .toArray();
            output.push([
                index.getTime(),
                row,
            ]);
        }
    };

    /**
     * Convert the column to Highstock date+value format.
     */
    dataForge.Series.prototype.toHighstock = function () {

        var self = this;

        var it = self.getIterator();

        var output = [];
        while (it.moveNext()) {
            var pair = it.getCurrent();
            var index = pair[0];
            var value = pair[1];
            output.push([
                index.getTime(),
                value,
            ]);
        }

        return output;
    };
}; at SyntaxError: Unexpected token (5:5)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseBlock (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:981:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
