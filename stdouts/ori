/root/Targets/ori
└─┬ ori@0.1.9 
  ├── bluebird@3.3.5 
  ├─┬ fs-extra@0.30.0 
  │ ├── graceful-fs@4.1.11 
  │ ├── jsonfile@2.4.0 
  │ ├── klaw@1.3.1 
  │ ├── path-is-absolute@1.0.1 
  │ └─┬ rimraf@2.6.2 
  │   └─┬ glob@7.1.2 
  │     ├── fs.realpath@1.0.0 
  │     ├─┬ inflight@1.0.6 
  │     │ └── wrappy@1.0.2 
  │     ├── inherits@2.0.3 
  │     ├─┬ minimatch@3.0.4 
  │     │ └─┬ brace-expansion@1.1.8 
  │     │   ├── balanced-match@1.0.0 
  │     │   └── concat-map@0.0.1 
  │     └── once@1.4.0 
  ├─┬ inquirer@1.0.2 
  │ ├── ansi-escapes@1.4.0 
  │ ├─┬ chalk@1.1.3 
  │ │ ├── ansi-styles@2.2.1 
  │ │ ├── escape-string-regexp@1.0.5 
  │ │ ├── has-ansi@2.0.0 
  │ │ └── supports-color@2.0.0 
  │ ├─┬ cli-cursor@1.0.2 
  │ │ └─┬ restore-cursor@1.0.1 
  │ │   ├── exit-hook@1.1.1 
  │ │   └── onetime@1.1.0 
  │ ├── cli-width@2.2.0 
  │ ├─┬ figures@1.7.0 
  │ │ └── object-assign@4.1.1 
  │ ├── mute-stream@0.0.6 
  │ ├─┬ pinkie-promise@2.0.1 
  │ │ └── pinkie@2.0.4 
  │ ├─┬ run-async@2.3.0 
  │ │ └── is-promise@2.1.0 
  │ ├── rx@4.1.0 
  │ ├─┬ string-width@1.0.2 
  │ │ ├── code-point-at@1.1.0 
  │ │ └─┬ is-fullwidth-code-point@1.0.0 
  │ │   └── number-is-nan@1.0.1 
  │ ├─┬ strip-ansi@3.0.1 
  │ │ └── ansi-regex@2.1.1 
  │ └── through@2.3.8 
  ├─┬ joi@8.0.5 
  │ ├── hoek@3.0.4 
  │ ├── isemail@2.2.1 
  │ ├── moment@2.18.1 
  │ └─┬ topo@2.0.2 
  │   └── hoek@4.2.0 
  ├── lodash@4.12.0 
  └─┬ yargs@4.6.0 
    ├── camelcase@2.1.1 
    ├─┬ cliui@3.2.0 
    │ └── wrap-ansi@2.1.0 
    ├── decamelize@1.2.0 
    ├── lodash.assign@4.2.0 
    ├─┬ os-locale@1.4.0 
    │ └─┬ lcid@1.0.0 
    │   └── invert-kv@1.0.0 
    ├─┬ pkg-conf@1.1.3 
    │ ├─┬ find-up@1.1.2 
    │ │ └── path-exists@2.1.0 
    │ ├─┬ load-json-file@1.1.0 
    │ │ ├─┬ parse-json@2.2.0 
    │ │ │ └─┬ error-ex@1.3.1 
    │ │ │   └── is-arrayish@0.2.1 
    │ │ ├── pify@2.3.0 
    │ │ └─┬ strip-bom@2.0.0 
    │ │   └── is-utf8@0.2.1 
    │ └── symbol@0.2.3 
    ├─┬ read-pkg-up@1.0.1 
    │ └─┬ read-pkg@1.1.0 
    │   ├─┬ normalize-package-data@2.4.0 
    │   │ ├── hosted-git-info@2.5.0 
    │   │ ├─┬ is-builtin-module@1.0.0 
    │   │ │ └── builtin-modules@1.1.1 
    │   │ ├── semver@5.4.1 
    │   │ └─┬ validate-npm-package-license@3.0.1 
    │   │   ├─┬ spdx-correct@1.0.2 
    │   │   │ └── spdx-license-ids@1.2.2 
    │   │   └── spdx-expression-parse@1.0.4 
    │   └── path-type@1.1.0 
    ├── require-main-filename@1.0.1 
    ├── window-size@0.2.0 
    ├── y18n@3.2.1 
    └─┬ yargs-parser@2.4.1 
      └── camelcase@3.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/ori/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0661 took 4.0864s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _find = require('lodash/find');

var _find2 = _interopRequireDefault(_find);

var _template = require('lodash/template');

var _template2 = _interopRequireDefault(_template);

var _prompts = require('./prompts');

var _prompts2 = _interopRequireDefault(_prompts);

var _config = require('./config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var fs = _bluebird2.default.promisifyAll(require('fs-extra'));


var version = require('../package.json').version || '0.0.1';

var oriConfig = void 0;
var initialConfig = {
  commands: []
};

try {
  oriConfig = require(_config.oriConfigPath);
} catch (e) {
  if (e instanceof Error && e.code === 'MODULE_NOT_FOUND') {
    oriConfig = _extends({}, _config.defaultConfig);
  } else {
    console.error(e);
  }
}

function initPrompt() {
  _inquirer2.default.prompt(_prompts2.default.init).then(function (answers) {
    var config = Object.assign({}, initialConfig, answers);
    commandsPrompt(config);
  });
}

function commandsPrompt(config) {
  _inquirer2.default.prompt(_prompts2.default.commandDetails).then(function (answers) {
    var command = {
      name: answers.command,
      templateFile: answers.templateFile,
      options: [],
      buildName: answers.buildName,
      buildPath: answers.buildPath
    };
    optionsPrompt(config, command);
  });
}

function optionsPrompt(config, command) {
  _inquirer2.default.prompt(_prompts2.default.options).then(function (answers) {
    if (answers.moreOptions) {
      return optionsPrompt(config, command);
    }
    var option = {
      name: answers.option
    };
    if (answers.alias.length) {
      option.alias = answers.alias;
    }
    command.options.push(option);
    config.commands.push(command);
    return commandsConfirmPrompt(config);
  });
}

function commandsConfirmPrompt(config) {
  _inquirer2.default.prompt(_prompts2.default.commandConfirm).then(function (answers) {
    if (answers.moreCommands) {
      return commandsPrompt(config);
    }
    return fs.outputJson(_config.oriConfigPath, config);
  }).then(function () {
    return console.log('Your `ori.json` file was generated at:', _config.oriConfigPath);
  }).catch(function (err) {
    return console.error(err);
  });
}

function initCommand() {
  function _genCommands() {
    oriConfig.commands.forEach(function (command) {
      var opts = {};
      command.options.forEach(function (option) {
        opts[option.name] = {
          alias: option.alias,
          describe: ' '
        };
      });
      _yargs2.default.command(command.name, command.description, opts);
    });
    return _yargs2.default;
  }

  _yargs2.default.version(version).command('init', 'Creates an `ori.json` config file for more customized use of Ori', function () {
    fs.stat(_config.oriConfigPath, function (err, stats) {
      if (err && err.code === 'ENOENT') {
        initPrompt();
      } else {
        _inquirer2.default.prompt(_prompts2.default.overwriteConfig).then(function (answer) {
          if (answer.overwrite) {
            initPrompt();
          }
        });
      }
    });
  });
  return _genCommands();
}

initCommand().help('h').alias('help', 'h').alias('version', 'v').argv;

if (!_yargs2.default.argv._.length) {
  _yargs2.default.showHelp();
}

var foundCmd = (0, _find2.default)(oriConfig.commands, ['name', _yargs2.default.argv._[0]]);

function _buildGenFileName() {
  var transformFileName = foundCmd.buildName;
  transformFileName.split('[').filter(function (val) {
    return val.includes(']');
  }).map(function (val) {
    return val.split(']')[0];
  }).forEach(function (val) {
    if (_yargs2.default.argv.hasOwnProperty(val) && typeof _yargs2.default.argv[val] === 'string') {
      transformFileName = transformFileName.replace(new RegExp('\\[' + val + '\\]', 'g'), _yargs2.default.argv[val]);
    } else {
      throw new TypeError('Option: `' + val + '` is required and must be string generate a filename.');
    }
  });
  return transformFileName;
}

if (foundCmd) {
  (function () {
    var tplPath = _path2.default.join(oriConfig.templatesDir, foundCmd.templateFile);
    var defaultTplContents = "// File generated on <%= date %> \nconsole.log('<%= name %>, should be replaced')";
    (0, _config.validateConfig)(oriConfig).then(function (oriConfig) {
      return fs.ensureDirAsync(_path2.default.resolve(oriConfig.templatesDir));
    }).then(function () {
      return fs.statAsync(tplPath);
    }).catch({ code: 'ENOENT' }, function () {
      return fs.writeFileAsync(tplPath, defaultTplContents);
    }).then(function () {
      return fs.readFileAsync(tplPath);
    }).then(function (contents) {
      var compileOpts = {
        date: new Date().toDateString()
      };
      var generatedFileName = _buildGenFileName();
      var generatedFilePath = _path2.default.join(foundCmd.buildPath, generatedFileName);
      foundCmd.options.forEach(function (option) {
        if (_yargs2.default.argv[option.name]) {
          compileOpts = _extends({}, compileOpts, _defineProperty({}, option.name, _yargs2.default.argv[option.name]));
        }
      });
      var compiledTpl = (0, _template2.default)(contents.toString())(compileOpts);
      return fs.outputFile(generatedFilePath, compiledTpl);
    }).then(function () {
      console.log('File generated!');
    }).catch(function (err) {
      return console.log(err);
    });
  })();
} at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
