/root/Targets/dawson
└─┬ dawson@0.26.0 
  ├─┬ aws-sdk@2.124.0 
  │ ├─┬ buffer@4.9.1 
  │ │ ├── base64-js@1.2.1 
  │ │ ├── ieee754@1.1.8 
  │ │ └── isarray@1.0.0 
  │ ├── crypto-browserify@1.0.9 
  │ ├── events@1.1.1 
  │ ├── jmespath@0.15.0 
  │ ├── querystring@0.2.0 
  │ ├── sax@1.2.1 
  │ ├─┬ url@0.10.3 
  │ │ └── punycode@1.3.2 
  │ ├── uuid@3.0.1 
  │ ├── xml2js@0.4.17 
  │ └── xmlbuilder@4.2.1 
  ├─┬ babel-cli@6.26.0 
  │ ├─┬ babel-core@6.26.0 
  │ │ ├── babel-code-frame@6.26.0 
  │ │ ├─┬ babel-generator@6.26.0 
  │ │ │ ├── detect-indent@4.0.0 
  │ │ │ ├── jsesc@1.3.0 
  │ │ │ └── trim-right@1.0.1 
  │ │ ├── babel-helpers@6.24.1 
  │ │ ├── babel-messages@6.23.0 
  │ │ ├── babel-template@6.26.0 
  │ │ ├─┬ babel-traverse@6.26.0 
  │ │ │ └── globals@9.18.0 
  │ │ ├─┬ babel-types@6.26.0 
  │ │ │ └── to-fast-properties@1.0.3 
  │ │ ├── babylon@6.18.0 
  │ │ ├── json5@0.5.1 
  │ │ └── private@0.1.7 
  │ ├─┬ babel-runtime@6.26.0 
  │ │ └── regenerator-runtime@0.11.0 
  │ ├── commander@2.11.0 
  │ ├── convert-source-map@1.5.0 
  │ ├── fs-readdir-recursive@1.0.0 
  │ ├─┬ glob@7.1.2 
  │ │ ├── fs.realpath@1.0.0 
  │ │ ├─┬ inflight@1.0.6 
  │ │ │ └── wrappy@1.0.2 
  │ │ └── once@1.4.0 
  │ ├─┬ output-file-sync@1.1.2 
  │ │ └── graceful-fs@4.1.11 
  │ ├── path-is-absolute@1.0.1 
  │ ├── slash@1.0.0 
  │ ├── source-map@0.5.7 
  │ └─┬ v8flags@2.1.1 
  │   └── user-home@1.1.1 
  ├─┬ babel-polyfill@6.26.0 
  │ ├── core-js@2.5.1 
  │ └── regenerator-runtime@0.10.5 
  ├─┬ babel-preset-dawson@1.0.0 
  │ ├─┬ babel-plugin-transform-object-rest-spread@6.26.0 
  │ │ └── babel-plugin-syntax-object-rest-spread@6.13.0 
  │ └─┬ babel-preset-env@1.6.0 
  │   ├── babel-plugin-check-es2015-constants@6.22.0 
  │   ├── babel-plugin-syntax-trailing-function-commas@6.22.0 
  │   ├─┬ babel-plugin-transform-async-to-generator@6.24.1 
  │   │ ├── babel-helper-remap-async-to-generator@6.24.1 
  │   │ └── babel-plugin-syntax-async-functions@6.13.0 
  │   ├── babel-plugin-transform-es2015-arrow-functions@6.22.0 
  │   ├── babel-plugin-transform-es2015-block-scoped-functions@6.22.0 
  │   ├── babel-plugin-transform-es2015-block-scoping@6.26.0 
  │   ├─┬ babel-plugin-transform-es2015-classes@6.24.1 
  │   │ ├── babel-helper-define-map@6.26.0 
  │   │ ├── babel-helper-function-name@6.24.1 
  │   │ ├── babel-helper-optimise-call-expression@6.24.1 
  │   │ └── babel-helper-replace-supers@6.24.1 
  │   ├── babel-plugin-transform-es2015-computed-properties@6.24.1 
  │   ├── babel-plugin-transform-es2015-destructuring@6.23.0 
  │   ├── babel-plugin-transform-es2015-duplicate-keys@6.24.1 
  │   ├── babel-plugin-transform-es2015-for-of@6.23.0 
  │   ├── babel-plugin-transform-es2015-function-name@6.24.1 
  │   ├── babel-plugin-transform-es2015-literals@6.22.0 
  │   ├── babel-plugin-transform-es2015-modules-amd@6.24.1 
  │   ├─┬ babel-plugin-transform-es2015-modules-commonjs@6.26.0 
  │   │ └── babel-plugin-transform-strict-mode@6.24.1 
  │   ├─┬ babel-plugin-transform-es2015-modules-systemjs@6.24.1 
  │   │ └── babel-helper-hoist-variables@6.24.1 
  │   ├── babel-plugin-transform-es2015-modules-umd@6.24.1 
  │   ├── babel-plugin-transform-es2015-object-super@6.24.1 
  │   ├─┬ babel-plugin-transform-es2015-parameters@6.24.1 
  │   │ ├── babel-helper-call-delegate@6.24.1 
  │   │ └── babel-helper-get-function-arity@6.24.1 
  │   ├── babel-plugin-transform-es2015-shorthand-properties@6.24.1 
  │   ├── babel-plugin-transform-es2015-spread@6.22.0 
  │   ├─┬ babel-plugin-transform-es2015-sticky-regex@6.24.1 
  │   │ └── babel-helper-regex@6.26.0 
  │   ├── babel-plugin-transform-es2015-template-literals@6.22.0 
  │   ├── babel-plugin-transform-es2015-typeof-symbol@6.23.0 
  │   ├─┬ babel-plugin-transform-es2015-unicode-regex@6.24.1 
  │   │ └─┬ regexpu-core@2.0.0 
  │   │   ├── regenerate@1.3.3 
  │   │   ├── regjsgen@0.2.0 
  │   │   └─┬ regjsparser@0.1.5 
  │   │     └── jsesc@0.5.0 
  │   ├─┬ babel-plugin-transform-exponentiation-operator@6.24.1 
  │   │ ├─┬ babel-helper-builder-binary-assignment-operator-visitor@6.24.1 
  │   │ │ └── babel-helper-explode-assignable-expression@6.24.1 
  │   │ └── babel-plugin-syntax-exponentiation-operator@6.13.0 
  │   ├─┬ babel-plugin-transform-regenerator@6.26.0 
  │   │ └── regenerator-transform@0.10.1 
  │   ├─┬ browserslist@2.4.0 
  │   │ ├── caniuse-lite@1.0.30000738 
  │   │ └── electron-to-chromium@1.3.22 
  │   └── semver@5.4.1 
  ├─┬ babel-register@6.26.0 
  │ ├─┬ home-or-tmp@2.0.0 
  │ │ └── os-homedir@1.0.2 
  │ └─┬ mkdirp@0.5.1 
  │   └── minimist@0.0.8 
  ├─┬ chalk@1.1.3 
  │ ├── ansi-styles@2.2.1 
  │ ├── escape-string-regexp@1.0.5 
  │ ├─┬ has-ansi@2.0.0 
  │ │ └── ansi-regex@2.1.1 
  │ ├── strip-ansi@3.0.1 
  │ └── supports-color@2.0.0 
  ├─┬ chokidar@1.7.0 
  │ ├─┬ anymatch@1.3.2 
  │ │ ├─┬ micromatch@2.3.11 
  │ │ │ ├─┬ arr-diff@2.0.0 
  │ │ │ │ └── arr-flatten@1.1.0 
  │ │ │ ├── array-unique@0.2.1 
  │ │ │ ├─┬ braces@1.8.5 
  │ │ │ │ ├─┬ expand-range@1.8.2 
  │ │ │ │ │ └─┬ fill-range@2.2.3 
  │ │ │ │ │   ├── is-number@2.1.0 
  │ │ │ │ │   ├── isobject@2.1.0 
  │ │ │ │ │   ├─┬ randomatic@1.1.7 
  │ │ │ │ │   │ ├─┬ is-number@3.0.0 
  │ │ │ │ │   │ │ └── kind-of@3.2.2 
  │ │ │ │ │   │ └── kind-of@4.0.0 
  │ │ │ │ │   └── repeat-string@1.6.1 
  │ │ │ │ ├── preserve@0.2.0 
  │ │ │ │ └── repeat-element@1.1.2 
  │ │ │ ├─┬ expand-brackets@0.1.5 
  │ │ │ │ └── is-posix-bracket@0.1.1 
  │ │ │ ├── extglob@0.3.2 
  │ │ │ ├── filename-regex@2.0.1 
  │ │ │ ├─┬ kind-of@3.2.2 
  │ │ │ │ └── is-buffer@1.1.5 
  │ │ │ ├─┬ object.omit@2.0.1 
  │ │ │ │ ├─┬ for-own@0.1.5 
  │ │ │ │ │ └── for-in@1.0.2 
  │ │ │ │ └── is-extendable@0.1.1 
  │ │ │ ├─┬ parse-glob@3.0.4 
  │ │ │ │ ├── glob-base@0.3.0 
  │ │ │ │ └── is-dotfile@1.0.3 
  │ │ │ └─┬ regex-cache@0.4.4 
  │ │ │   └─┬ is-equal-shallow@0.1.3 
  │ │ │     └── is-primitive@2.0.0 
  │ │ └─┬ normalize-path@2.1.1 
  │ │   └── remove-trailing-separator@1.1.0 
  │ ├── async-each@1.0.1 
  │ ├── glob-parent@2.0.0 
  │ ├── inherits@2.0.3 
  │ ├─┬ is-binary-path@1.0.1 
  │ │ └── binary-extensions@1.10.0 
  │ ├─┬ is-glob@2.0.1 
  │ │ └── is-extglob@1.0.0 
  │ └─┬ readdirp@2.1.0 
  │   ├─┬ readable-stream@2.3.3 
  │   │ ├── core-util-is@1.0.2 
  │   │ ├── process-nextick-args@1.0.7 
  │   │ ├── safe-buffer@5.1.1 
  │   │ ├── string_decoder@1.0.3 
  │   │ └── util-deprecate@1.0.2 
  │   └── set-immediate-shim@1.0.1 
  ├─┬ cli-table@0.3.1 
  │ └── colors@1.0.3 
  ├── colors@1.1.2 
  ├── common-tags@1.4.0 
  ├─┬ console.table@0.8.0 
  │ └── easy-table@1.0.0 
  ├─┬ del@2.2.2 
  │ ├─┬ globby@5.0.0 
  │ │ ├─┬ array-union@1.0.2 
  │ │ │ └── array-uniq@1.0.3 
  │ │ └── arrify@1.0.1 
  │ ├── is-path-cwd@1.0.0 
  │ ├─┬ is-path-in-cwd@1.0.0 
  │ │ └─┬ is-path-inside@1.0.0 
  │ │   └── path-is-inside@1.0.2 
  │ ├── object-assign@4.1.1 
  │ ├── pify@2.3.0 
  │ ├─┬ pinkie-promise@2.0.1 
  │ │ └── pinkie@2.0.4 
  │ └── rimraf@2.6.2 
  ├── docker-lambda@0.12.2 
  ├─┬ es6-promisify@5.0.0 
  │ └── es6-promise@4.1.1 
  ├─┬ execa@0.6.3 
  │ ├─┬ cross-spawn@5.1.0 
  │ │ ├─┬ lru-cache@4.1.1 
  │ │ │ ├── pseudomap@1.0.2 
  │ │ │ └── yallist@2.1.2 
  │ │ ├─┬ shebang-command@1.2.0 
  │ │ │ └── shebang-regex@1.0.0 
  │ │ └─┬ which@1.3.0 
  │ │   └── isexe@2.0.0 
  │ ├── get-stream@3.0.0 
  │ ├── is-stream@1.1.0 
  │ ├─┬ npm-run-path@2.0.2 
  │ │ └── path-key@2.0.1 
  │ ├── p-finally@1.0.0 
  │ ├── signal-exit@3.0.2 
  │ └── strip-eof@1.0.0 
  ├── hard-rejection@1.0.0 
  ├─┬ http-proxy@1.16.2 
  │ ├── eventemitter3@1.2.0 
  │ └── requires-port@1.0.0 
  ├── indent-string@3.2.0 
  ├─┬ listr@0.11.0 
  │ ├─┬ cli-truncate@0.2.1 
  │ │ └── slice-ansi@0.0.4 
  │ ├── figures@1.7.0 
  │ ├─┬ indent-string@2.1.0 
  │ │ └─┬ repeating@2.0.1 
  │ │   └── is-finite@1.0.2 
  │ ├── is-promise@2.1.0 
  │ ├── listr-silent-renderer@1.1.1 
  │ ├─┬ listr-update-renderer@0.2.0 
  │ │ └── elegant-spinner@1.0.1 
  │ ├── log-symbols@1.0.2 
  │ ├─┬ log-update@1.0.2 
  │ │ └── ansi-escapes@1.4.0 
  │ ├─┬ ora@0.2.3 
  │ │ └── cli-spinners@0.1.2 
  │ ├─┬ rxjs@5.4.3 
  │ │ └── symbol-observable@1.0.4 
  │ └── stream-to-observable@0.1.0 
  ├─┬ listr-verbose-renderer@0.4.0 
  │ ├─┬ cli-cursor@1.0.2 
  │ │ └─┬ restore-cursor@1.0.1 
  │ │   ├── exit-hook@1.1.1 
  │ │   └── onetime@1.1.0 
  │ └── date-fns@1.28.5 
  ├── lodash@4.17.4 
  ├─┬ minimatch@3.0.4 
  │ └─┬ brace-expansion@1.1.8 
  │   ├── balanced-match@1.0.0 
  │   └── concat-map@0.0.1 
  ├── moment@2.18.1 
  ├── pathmatch@0.0.2 
  ├─┬ prettier@0.22.0 
  │ ├── ast-types@0.9.4 
  │ ├─┬ babel-code-frame@6.22.0 
  │ │ └── js-tokens@3.0.2 
  │ ├── babylon@6.15.0 
  │ ├── esutils@2.0.2 
  │ ├─┬ flow-parser@0.40.0 
  │ │ ├── ast-types@0.8.18 
  │ │ └── minimist@1.2.0 
  │ ├── get-stdin@5.0.1 
  │ ├── glob@7.1.1 
  │ ├─┬ jest-validate@19.0.0 
  │ │ ├── jest-matcher-utils@19.0.0 
  │ │ ├── leven@2.1.0 
  │ │ └─┬ pretty-format@19.0.0 
  │ │   └─┬ ansi-styles@3.2.0 
  │ │     └─┬ color-convert@1.9.0 
  │ │       └── color-name@1.1.3 
  │ └── minimist@1.2.0 
  ├─┬ prettyjson@1.2.1 
  │ └── minimist@1.2.0 
  ├─┬ prop-types@0.2.0 
  │ └─┬ invariant@2.2.2 
  │   └── loose-envify@1.3.1 
  ├─┬ s3-recursive-uploader@0.2.0 
  │ ├── async@2.5.0 
  │ ├─┬ mime-types@2.1.17 
  │ │ └── mime-db@1.30.0 
  │ └─┬ recursive-readdir@2.2.1 
  │   └── minimatch@3.0.3 
  ├─┬ send@0.15.6 
  │ ├── debug@2.6.9 
  │ ├── depd@1.1.1 
  │ ├── destroy@1.0.4 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├── fresh@0.5.2 
  │ ├─┬ http-errors@1.6.2 
  │ │ └── setprototypeof@1.0.3 
  │ ├── mime@1.3.4 
  │ ├── ms@2.0.0 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── range-parser@1.2.0 
  │ └── statuses@1.3.1 
  ├── source-map-support@0.4.18 
  ├─┬ temp@0.8.3 
  │ ├── os-tmpdir@1.0.2 
  │ └── rimraf@2.2.8 
  ├─┬ update-notifier@2.2.0 
  │ ├─┬ boxen@1.2.1 
  │ │ ├─┬ ansi-align@2.0.0 
  │ │ │ └─┬ string-width@2.1.1 
  │ │ │   ├── is-fullwidth-code-point@2.0.0 
  │ │ │   └─┬ strip-ansi@4.0.0 
  │ │ │     └── ansi-regex@3.0.0 
  │ │ ├── camelcase@4.1.0 
  │ │ ├─┬ chalk@2.1.0 
  │ │ │ ├── ansi-styles@3.2.0 
  │ │ │ └─┬ supports-color@4.4.0 
  │ │ │   └── has-flag@2.0.0 
  │ │ ├── cli-boxes@1.0.0 
  │ │ ├─┬ string-width@2.1.1 
  │ │ │ ├── is-fullwidth-code-point@2.0.0 
  │ │ │ └─┬ strip-ansi@4.0.0 
  │ │ │   └── ansi-regex@3.0.0 
  │ │ ├─┬ term-size@1.2.0 
  │ │ │ └── execa@0.7.0 
  │ │ └── widest-line@1.0.0 
  │ ├─┬ configstore@3.1.1 
  │ │ ├─┬ dot-prop@4.2.0 
  │ │ │ └── is-obj@1.0.1 
  │ │ ├── make-dir@1.0.0 
  │ │ ├─┬ unique-string@1.0.0 
  │ │ │ └── crypto-random-string@1.0.0 
  │ │ └─┬ write-file-atomic@2.3.0 
  │ │   └── imurmurhash@0.1.4 
  │ ├── import-lazy@2.1.0 
  │ ├── is-npm@1.0.0 
  │ ├─┬ latest-version@3.1.0 
  │ │ └─┬ package-json@4.0.1 
  │ │   ├─┬ got@6.7.1 
  │ │   │ ├─┬ create-error-class@3.0.2 
  │ │   │ │ └── capture-stack-trace@1.0.0 
  │ │   │ ├── duplexer3@0.1.4 
  │ │   │ ├── is-redirect@1.0.0 
  │ │   │ ├── is-retry-allowed@1.1.0 
  │ │   │ ├── lowercase-keys@1.0.0 
  │ │   │ ├── timed-out@4.0.1 
  │ │   │ ├── unzip-response@2.0.1 
  │ │   │ └─┬ url-parse-lax@1.0.0 
  │ │   │   └── prepend-http@1.0.4 
  │ │   ├─┬ registry-auth-token@3.3.1 
  │ │   │ └─┬ rc@1.2.1 
  │ │   │   ├── deep-extend@0.4.2 
  │ │   │   ├── ini@1.3.4 
  │ │   │   ├── minimist@1.2.0 
  │ │   │   └── strip-json-comments@2.0.1 
  │ │   └── registry-url@3.1.0 
  │ ├── semver-diff@2.1.0 
  │ └── xdg-basedir@3.0.0 
  ├─┬ yargs@7.1.0 
  │ ├── camelcase@3.0.0 
  │ ├─┬ cliui@3.2.0 
  │ │ └── wrap-ansi@2.1.0 
  │ ├── decamelize@1.2.0 
  │ ├── get-caller-file@1.0.2 
  │ ├─┬ os-locale@1.4.0 
  │ │ └─┬ lcid@1.0.0 
  │ │   └── invert-kv@1.0.0 
  │ ├─┬ read-pkg-up@1.0.1 
  │ │ ├─┬ find-up@1.1.2 
  │ │ │ └── path-exists@2.1.0 
  │ │ └─┬ read-pkg@1.1.0 
  │ │   ├─┬ load-json-file@1.1.0 
  │ │   │ ├─┬ parse-json@2.2.0 
  │ │   │ │ └─┬ error-ex@1.3.1 
  │ │   │ │   └── is-arrayish@0.2.1 
  │ │   │ └─┬ strip-bom@2.0.0 
  │ │   │   └── is-utf8@0.2.1 
  │ │   ├─┬ normalize-package-data@2.4.0 
  │ │   │ ├── hosted-git-info@2.5.0 
  │ │   │ ├─┬ is-builtin-module@1.0.0 
  │ │   │ │ └── builtin-modules@1.1.1 
  │ │   │ └─┬ validate-npm-package-license@3.0.1 
  │ │   │   ├─┬ spdx-correct@1.0.2 
  │ │   │   │ └── spdx-license-ids@1.2.2 
  │ │   │   └── spdx-expression-parse@1.0.4 
  │ │   └── path-type@1.1.0 
  │ ├── require-directory@2.1.1 
  │ ├── require-main-filename@1.0.1 
  │ ├── set-blocking@2.0.0 
  │ ├─┬ string-width@1.0.2 
  │ │ ├── code-point-at@1.1.0 
  │ │ └─┬ is-fullwidth-code-point@1.0.0 
  │ │   └── number-is-nan@1.0.1 
  │ ├── which-module@1.0.0 
  │ ├── y18n@3.2.1 
  │ └─┬ yargs-parser@5.0.0 
  │   └── camelcase@3.0.0 
  └── zen-observable@0.5.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/dawson/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0369 took 4.2629s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node
'use strict';

require('babel-polyfill');

require('hard-rejection/register');

require('source-map-support/register');

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _updateNotifier = require('update-notifier');

var _updateNotifier2 = _interopRequireDefault(_updateNotifier);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _logger = require('./logger');

var _deploy = require('./commands/deploy');

var _describe = require('./commands/describe');

var _log = require('./commands/log');

var _proxy = require('./commands/proxy');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DAWSON_STAGE = process.env.DAWSON_STAGE || 'default';
const later = fn => (...args) => process.nextTick(() => fn(...args));
const notifier = (0, _updateNotifier2.default)({
  pkg: _package2.default,
  updateCheckInterval: 1000 * 60 * 60 * 24
});
notifier.notify();

const argv = _yargs2.default.usage('$0 <command> [command-options]').command('deploy', 'Deploy your app or a single function', () => _yargs2.default.boolean('danger-delete-resources').default('danger-delete-resources', false).describe('danger-delete-resources', 'Allow APIs, Distributions, DynamoDB Tables, Buckets to be deleted/replaced as part of a stack update. YOU WILL LOOSE YOUR DATA AND CNAMEs WILL CHANGE!').boolean('skip-acm').default('skip-acm', false).describe('skip-acm', 'Skip ACM SSL/TLS Certificate validation').boolean('skip-cloudformation').default('skip-cloudformation', false).describe('skip-cloudformation', 'Do not update the CloudFormation template').boolean('skip-chmod').default('skip-chmod', false).describe('skip-chmod', 'Do not run chmod -Rf a+rw .dawson-dist after installing dependencies (RTFM)').boolean('skip-babelrc-validation').default('skip-babelrc-validation', false).describe('skip-babelrc-validation', 'Do not attempt to validate .babelrc file against recommended settings').describe('stage', 'Application stage to work on').default('stage', DAWSON_STAGE).alias('stage', 's').describe('verbose', 'Verbose output').boolean('verbose').alias('verbose', 'v').strict().help(), later(_deploy.run)).command('log', 'Get last log lines for a Lambda', () => _yargs2.default.describe('function-name', 'Function to retreive logs for').alias('function-name', 'f').demand('f').describe('limit', 'Retreive the last <limit> events').number('limit').alias('limit', 'l').default('limit', 200).describe('request-id', 'Filter logs by Lambda RequestId').alias('request-id', 'r').describe('follow', 'Follow logs (never exit and keep polling and printing new lines)').alias('follow', 't').boolean('follow').default('follow', false).boolean('skip-babelrc-validation').default('skip-babelrc-validation', false).describe('skip-babelrc-validation', 'Do not attempt to validate .babelrc file against recommended settings').describe('stage', 'Application stage to work on').default('stage', DAWSON_STAGE).alias('stage', 's').describe('verbose', 'Verbose output').boolean('verbose').alias('verbose', 'v').strict().help(), later(_log.run)).command('describe', 'List stack outputs', () => _yargs2.default.describe('output-name', 'Displays the Value of the specified Output').alias('output-name', 'o').describe('resource-id', 'Displays the PhysicalResourceId give its LogicalResourceId').alias('resource-id', 'logical-resource-id').alias('resource-id', 'r').describe('shell', 'Bash-compatible output').default('shell', false).describe('stage', 'Application stage to work on').default('stage', DAWSON_STAGE).alias('stage', 's').boolean('skip-babelrc-validation').default('skip-babelrc-validation', false).describe('skip-babelrc-validation', 'Do not attempt to validate .babelrc file against recommended settings').describe('verbose', 'Verbose output').boolean('verbose').alias('verbose', 'v').strict().help(), later(_describe.run)).command('dev', 'Runs a development server proxying assets (from /) and API Gateway (from /prod)', () => _yargs2.default.describe('assets-proxy', 'Serve static assets from this url URL (useful if you use Webpack Dev Server)').alias('assets-proxy', 'assets-url').describe('assets-path', 'Root directory to serve static assets from.').describe('port', 'Port to listen to').number('port').alias('port', 'p').describe('stage', 'Application stage to work on').default('stage', DAWSON_STAGE).alias('stage', 's').boolean('fast-startup').default('fast-startup', false).describe('fast-startup', 'Do not clear dist folders and do not (re-)install dependencies').alias('fast-startup', 'fast').boolean('skip-chmod').default('skip-chmod', false).describe('skip-chmod', 'Do not run chmod -Rf a+rw .dawson-dist after installing dependencies (RTFM)').boolean('skip-babelrc-validation').default('skip-babelrc-validation', false).describe('skip-babelrc-validation', 'Do not attempt to validate .babelrc file against recommended settings').describe('verbose', 'Verbose output').boolean('verbose').alias('verbose', 'v').strict().help(), later(_proxy.run)).help().version().demand(1).strict().argv;

if (!argv.help && !argv.version) {
  if (argv.stage && process.env.DAWSON_STAGE && argv.stage !== process.env.DAWSON_STAGE) {
    (0, _logger.error)('Configuration Error: you have specified both --stage and DAWSON_STAGE but they have different values.');
    process.exit(1);
  }

  if (!argv.stage) {
    (0, _logger.error)('Missing Configuration: we couldn\'t determine which stage to deploy to, please use the --stage argument or set DAWSON_STAGE.');
    process.exit(1);
  }

  if (!_awsSdk2.default.config.region) {
    (0, _logger.error)('Missing Configuration: you must set an AWS Region using the AWS_REGION environment variable.');
    process.exit(1);
  }

  if (!_awsSdk2.default.config.credentials) {
    (0, _logger.error)('Missing Configuration: no AWS Credentials could be loaded, please set AWS_PROFILE or AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY (and AWS_SESSION_TOKEN if applicable).');
    process.exit(1);
  }

  if (argv.verbose === true) {
    (0, _logger.enableDebug)();
  }

  (0, _config.initConfig)(argv);

  var _loadConfig = (0, _config2.default)();

  const APP_NAME = _loadConfig.APP_NAME;


  if (!argv.shell && !argv['output-name'] && !argv['resource-id']) {
    process.stdout.write('\x1B[2J\x1B[0f');
    (0, _logger.log)('');
    (0, _logger.log)('   dawson'.bold.blue, 'v' + _package2.default.version);
    (0, _logger.log)('  ', APP_NAME.yellow.dim.bold, '↣', _awsSdk2.default.config.region.yellow.dim.bold, '↣', argv.stage.yellow.bold);
    (0, _logger.log)('  ', new Date().toLocaleString().gray);
    (0, _logger.log)('');
  }

  (0, _logger.debug)('Command:', process.argv);
}
//# sourceMappingURL=data:application/json;base64, at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
