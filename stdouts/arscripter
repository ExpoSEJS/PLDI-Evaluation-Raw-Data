/root/Targets/arscripter
└── arscripter@0.6.5 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/arscripter/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0433 took 3.016s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

// INCLUDES
var path = require('path'),
  argv = require('minimist')(process.argv.slice(2)),
  five = require('johnny-five'),
  webServer = require('./js/webServer.js'),
  socket = null,
  boardTypes = require('./json/boardTypes.json'),
  errors = require('./json/errors.json');


// PARSE ARGUMENTS
var boardPath = null;
if (argv.hasOwnProperty('b')) {
  boardPath = argv.b;
}

var serverPort = 8080;
// TODO: dynamically set socket in main.js to connect to this user-defined port
/*if (argv.hasOwnProperty('p')) {
  serverPort = argv.p;
}*/

if (argv.hasOwnProperty('h')) {
  console.log('USAGE: node ' + path.basename(process.argv[1]) + ' [-b <PATH_TO_BOARD>]');
  process.exit(1);
}


// SERVER INITIALIZATION
webServer.start(serverPort);


// BOARD INITIALIZATION
var board = new five.Board({
  port: boardPath,
  repl: false,
  debug: false,
});

board.on('error', function(err) {
  if (err.hasOwnProperty('message')) {
    console.log('\nERROR: ' + err.message);
  }
});

board.on('ready', function() {
  var t = getBoardType(this);

  if (t === null) {
    console.log(errors.UNSUPPORTED_BOARD);
    process.exit(1);
  }

  initBoard(t);

  console.log('Board ready! Navigate to http://localhost:' + serverPort + '  (^C to exit)');
});

function getBoardType(b) {
  var t = null;

  // Search for correct board type by number of pins
  for (var possibleTypeKey in boardTypes) {
    var totalPins = boardTypes[possibleTypeKey].digitalPins.length + boardTypes[possibleTypeKey].analogPins.length;

    if (b.pins.length === totalPins) {
      t = boardTypes[possibleTypeKey];
      break;
    }
  }

  return t;
}

function initBoard(boardType) {
  initDigitalPins(boardType.digitalPins);
  initAnalogPins(boardType.analogPins);
}

function initDigitalPins(digitalPins) {
  for (var i = 0; i < digitalPins.length; i++) {
    setPinMode({ pin: digitalPins[i], mode: five.Pin.OUTPUT });
    setPinValue({ pin: digitalPins[i], value: 0 });
  }
}

function initAnalogPins(analogPins) {
  for (var i = 0; i < analogPins.length; i++) {
    setPinMode({ pin: analogPins[i], mode: five.Pin.ANALOG });
    setPinValue({ pin: analogPins[i], value: 0 });
  }
}


// MODE SETTERS
function setPinMode(data) {
  if (data.mode === five.Pin.INPUT) {
    setPinToDigitalInput(data.pin);
  } else if (data.mode === five.Pin.OUTPUT) {
    setPinToDigitalOutput(data.pin);
  } else if (data.mode === five.Pin.ANALOG) {
    setPinToAnalog(data.pin);
  } else if (data.mode === five.Pin.PWM) {
    setPinToPWM(data.pin);
  } else {
    sendError(errors.UNSUPPORTED_MODE);
  }

  sendPinState(data.pin);
}

function setPinToDigitalOutput(pin) {
  board.pinMode(pin, five.Pin.OUTPUT);
  board.digitalWrite(pin, 0);
}

function setPinToDigitalInput(pin) {
  board.pinMode(pin, five.Pin.INPUT);

  // TODO: additional callback is added EVERY time pin is set to input
  board.digitalRead(pin, function(value) {
    sendPinState(pin);
  });
}

function setPinToAnalog(pin) {
  board.pinMode(pin, five.Pin.ANALOG);
}

function setPinToPWM(pin) {
  board.pinMode(pin, five.Pin.PWM);
  board.analogWrite(pin, 0);
}


// VALUE SETTERS
function setPinValue(data) {
  if (board.pins[data.pin].mode === five.Pin.PWM) {
    setPWMValue(data.pin, data.value);
  } else {
    setDigitalValue(data.pin, data.value);
  }

  sendPinState(data.pin);
}

function setDigitalValue(pin, value) {
  board.digitalWrite(pin, value);
}

function setPWMValue(pin, value) {
  board.analogWrite(pin, value);
}


// QUERIES
function sendBoardType() {
  if (socket !== null)
    socket.emit('setBoard', getBoardType(board));
}

function sendPinState(pin) {
  if (socket !== null)
    socket.emit('setPinState', { pin: pin, mode: board.pins[pin].mode, value: board.pins[pin].value });
}

function sendError(err) {
  if (socket !== null)
    socket.emit('errorMet', err);
}


// SOCKET CONTROLLER
webServer.io.sockets.on('connection', function (s) {
  socket = s; // Add socket to global scope

  if (board.isReady){
    sendBoardType();

    socket.on('getBoardType', sendBoardType);
    socket.on('getPinState', sendPinState);

    socket.on('setPinMode', setPinMode);
    socket.on('setPinValue', setPinValue);

    socket.on('resetBoard', initBoard);
  }
});

 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
