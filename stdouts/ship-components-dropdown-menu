/root/Targets/ship-components-dropdown-menu
└─┬ ship-components-dropdown-menu@0.4.0 
  ├─┬ prop-types@15.6.0 
  │ ├─┬ fbjs@0.8.16 
  │ │ ├── core-js@1.2.7 
  │ │ ├─┬ isomorphic-fetch@2.2.1 
  │ │ │ ├─┬ node-fetch@1.7.3 
  │ │ │ │ ├─┬ encoding@0.1.12 
  │ │ │ │ │ └── iconv-lite@0.4.19 
  │ │ │ │ └── is-stream@1.1.0 
  │ │ │ └── whatwg-fetch@2.0.3 
  │ │ ├─┬ promise@7.3.1 
  │ │ │ └── asap@2.0.6 
  │ │ ├── setimmediate@1.0.5 
  │ │ └── ua-parser-js@0.7.14 
  │ ├─┬ loose-envify@1.3.1 
  │ │ └── js-tokens@3.0.2 
  │ └── object-assign@4.1.1 
  ├── UNMET PEER DEPENDENCY react@16.0.0
  ├─┬ react-addons-css-transition-group@15.6.2 
  │ ├── UNMET PEER DEPENDENCY react@^15.0.0
  │ ├── UNMET PEER DEPENDENCY react-dom@^15.0.0
  │ └─┬ react-transition-group@1.2.0 
  │   ├── chain-function@1.0.0 
  │   ├── dom-helpers@3.2.1 
  │   └── warning@3.0.0 
  ├── react-dom@16.0.0 
  ├── ship-components-highlight-click@0.1.6 
  └── ship-components-outsideclick@0.1.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/ship-components-dropdown-menu/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0526 took 3.0827s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (152:6) on program /** ****************************************************************************
 * DropdownMenu
 *
 * @author       Isaac Suttell <isaac@isaacsuttell.com>
 * @contributor  Sepand Assadi <sepand.assadi@sony.com>
 * @file         Open a dropdown menu upon clicking an icon
 ******************************************************************************/

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import OutsideClick from 'ship-components-outsideclick';

import { hashCode } from './utilities';
import MenuList from './MenuList';
import MenuButton from './MenuButton';

import css from './dropdown-menu.css';

export default class DropdownMenu extends React.Component {

  /**
   * Initialize
   * @param  {Object} props
   */
  constructor(props) {
    super(props);

    this.state = {
      active: props.readOnly ? props.initialActive : false
    };

    this.handleClick = this.handleClick.bind(this);
    this.toggleMenu = this.toggleMenu.bind(this);
    this.handleClose = this.handleClose.bind(this);
  }

  componentWillReceiveProps(nextProps) {
    if (this.props.readOnly) {
      this.setState({
        active: nextProps.initialActive
      });
    }
  }

  /**
   * Only update if active or items change
   * @param     {Object}    nextProps    Incoming props
   * @param     {Object}    nextState    Incoming state
   * @return    {Boolean}
   */
  shouldComponentUpdate(nextProps, nextState) {
    if (this.state.active !== nextState.active) {
      return true;
    } else if(this.props.items.length !== nextProps.items.length) {
      return true;
    }

    let PROPS_TO_COMPARE = ['name', 'value'];

    let keysEqual = function(i, key) {
      return this.props.items[i][key] === nextProps.items[i][key];
    };

    for (let i = 0; i < nextProps.items.length; i++) {
      if (PROPS_TO_COMPARE.some(keysEqual.bind(this, i))) {
        return true;
      }
    }

    return false;
  }

  /**
   * Close the entire menu
   */
  handleClose() {
    if(!this.props.readOnly) {
      this.setState({
        active: false
      });
    }
    if (this.props.onClose) {
      this.props.onClose();
    }
  }

  /**
   * Call the user supplied action
   * @param     {function}      action
   * @param     {MouseEvent}    event
   */
  handleClick(action, event) {
    if (action) {
      action(event);
    }
    this.handleClose(event, action);
  }

  /**
   * Either execute a function or do a strict comparison
   * @param  {Element} source
   * @return {Boolean}
   */
  sourceIsContainer(source) {
    if (source === document.body) {
     // Never go higher up the chain than the body
     return true;
   } else if(typeof this.props.container === 'function') {
      // User supplied a function so use that
      return this.props.container.call(this, source);
    } else {
      // Strict compare if we're not passed a function
      return source === this.props.container;
    }
  }

  /**
   * Show or hide the menu
   */
  toggleMenu(event) {
    event.preventDefault();
    event.stopPropagation();

    if (this.props.readOnly) {
      return;
    }

    this.setState({
      active: !this.state.active
    });
  }

  getMenuClasses(){
    return classNames(
      'dropdown-menu',
      this.props.className,
      css.menu,
      {
        [css.active]  : this.state.active
      }
    );
  }

  /**
   * Render it in gold
   *
   * @return    {React}
   */
  render() {
    return (
      <OutsideClick
        ref='container'
        onClick={this.handleClose}
        onContextMenu={this.handleClose}
        className={this.getMenuClasses()}
      >
          {this.props.showMenuButton ?
            <MenuButton
              {...this.props}
              onClick={this.toggleMenu}
              onContextMenu={this.toggleMenu}
            />
          : null}
          <MenuList
            {...this.props}
            isContainer={this.sourceIsContainer.bind(this)}
            items={DropdownMenu.menu(this.props.items)}
            active={this.state.active}
            onClick={this.handleClick}
          />
      </OutsideClick>
    );
  }

}

/**
 * Set some defaults
 * @static
 * @type    {Object}
 */
DropdownMenu.defaultProps = {
  readOnly: false,
  showMenuButton: true,
  menuIconClass: 'icon-cog',
  moreIconClass: 'icon-play_arrow',
  container: document.body,
  offsetMenu: {
    x: 16,
    y: 16
  }
};

/**
 * Validate the prop types
 * @static
 * @type    {Object}
 */
DropdownMenu.propTypes = {
  className: PropTypes.string,
  direction: PropTypes.string,
  menuIconClass: PropTypes.string,
  moreIconClass: PropTypes.string,
  readOnly: PropTypes.bool,
  initialActive: PropTypes.bool,
  showMenuButton: PropTypes.bool,
  items: PropTypes.arrayOf(PropTypes.object).isRequired,
  offsetMenu: PropTypes.object
};

/**
 * Internal counter to ensure unique keys
 * @type    {Number}
 */
var _uniqueId = 0;

/**
 * Deeply search the menu and ensure every item has a unique key
 * @param  {Array<Object>} items
 * @return {Array<Object>}
 */
DropdownMenu.menu = function menu(items = []) {
  return items.map((item) => {
    if (!item.key && item.name) {
      item.key = hashCode(item.name);
    } else if(!item.key) {
      item.key = 'dd' + (_uniqueId++).toString();
    }

    if(item.menu) {
      item.menu = DropdownMenu.menu(item.menu);
    }

    return item;
  });
}
 at SyntaxError: Unexpected token (152:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseParenAndDistinguishExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1861:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
