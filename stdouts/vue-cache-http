/root/Targets/vue-cache-http
└─┬ vue-cache-http@1.2.6 
  └─┬ vue-resource@1.3.4 
    └─┬ got@7.1.0 
      ├─┬ decompress-response@3.3.0 
      │ └── mimic-response@1.0.0 
      ├── duplexer3@0.1.4 
      ├── get-stream@3.0.0 
      ├── is-plain-obj@1.1.0 
      ├── is-retry-allowed@1.1.0 
      ├── is-stream@1.1.0 
      ├─┬ isurl@1.0.0 
      │ ├─┬ has-to-string-tag-x@1.4.1 
      │ │ └── has-symbol-support-x@1.4.1 
      │ └── is-object@1.0.1 
      ├── lowercase-keys@1.0.0 
      ├── p-cancelable@0.3.0 
      ├─┬ p-timeout@1.2.0 
      │ └── p-finally@1.0.0 
      ├── safe-buffer@5.1.1 
      ├── timed-out@4.0.1 
      ├─┬ url-parse-lax@1.0.0 
      │ └── prepend-http@1.0.4 
      └── url-to-options@1.0.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/vue-cache-http/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0459 took 4.073s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (40:17) on program /* author: HuangQS<409337645@qq.com> */

import VueResource from 'vue-resource';
import './date'

let config = {
	api_pre: '',
	headers: null,
	cache: true, //对http请求的接口数据可缓存本地(对特定请求设置req.cache为false可不缓存)
	defCachSec: 300, //默认300秒
	debug: true,
}

if(!window.log) window.log = console.log;
function debug(msg) {
	if(config.debug) window.log(msg);
}

function install(Vue, opts = {}) {

	if(this.installed) return;
	
	Vue.use(VueResource);
	const http = Vue.http;
	
	Object.assign(config, opts);
	if(opts.headers) http.options.headers = opts.headers;
	
	http.interceptors.push((req, next) => {
		/*
			req自定义options参数：
			
			cache: 默认false，设为true但未设cacheSec时使用config.defCachSec，
				当有cacheSec参数时，cache强制为true
			
			cacheSec: 大于0时规定接口可本地缓存时间，单位为秒
			
			cacheMax: 接口可本地缓存最大个数，默认为10
		*/
		var params = { ...req.params }; //此处使用对象展开符 为了避免传递的params为一个vue数据绑定对象
		let cacheKey = '';
		const path = req.url;
		
		let cacheSec = config.defCachSec;
		if(req.cacheSec>0) {
			cacheSec = req.cacheSec;
			req.cache = true;
		}
		if(config.cache) req.cache = req.cache!==false;
		
		if(req.cache) {
			
			//接口数据缓存到localStorage 
			cacheSec *= 1e3;
			let keyVals = [];
			for(var key in params) {
				keyVals.push(key +'='+ params[key]);
			}
			
			cacheKey = `${path}?${keyVals.join('&')}`;
			const cache = JSON.parse(localStorage.getItem(cacheKey)||'null');
			
			if(cache) {
				let restTime = cacheSec - (Date.now() - cache.time);
				if(restTime > 0) {
					debug(`\`${cacheKey}\` timeout after _${restTime/1e3|0}s_`);
					next(req.respondWith(cache.body, {
						status: cache.status
					}))
					return;
				} 
			}
		}
		
		if(!/^http/.test(req.url)) {
			req.url = config.api_pre + req.url;
		}
		params._t = Date.now();
		req.params = params;
		
		next(res => {
			if(!res.ok) {
				config.onError && config.onError(res);
			}
			else if(req.cache) {
				//限制每个接口数据本地缓存最大数量
				const num = limitCache(path, req.cacheMax);
				//设置本地缓存
				let { body, status } = res;
				const cache = { body, status, time: Date.now() };
				debug(`\`${cacheKey}\` ${new Date().format('y-mm-dd H:i:s')} *(cache ${num+1})*`);
				localStorage.setItem(cacheKey, JSON.stringify(cache));
			}
		});
	})
}

function limitCache(cachePre, cacheMax=10) {
	const clearKey = cachePre + '_clear_all'; 
	const isCleraPath = localStorage.getItem(clearKey);
	let cacheNum = 0;
	
	for(var skey in localStorage) {
		if(new RegExp('^'+cachePre).test(skey)) {
			if(isCleraPath) localStorage.removeItem(skey);
			else cacheNum++;
		}
	}
	
	//可实现超过最大缓存数时删除最早那个，而不是全清
	var clearItem = '';
	if(cacheNum >= Math.min(cacheMax, 30)-1) {
		localStorage.setItem(clearKey, 1);
		debug(`localStorage of _${cachePre}_ will be cleared after next visit`);
	}
	
	if(isCleraPath) {
		console.clear();
		debug(`localStorage of _${cachePre}_ is cleared (${cacheMax} max)`);
	}
	return cacheNum;
}

export default {
	install,
}


 at SyntaxError: Unexpected token (40:17)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseIdent (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2189:12)
    at Parser.pp$3.parsePropertyName (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2052:101)
    at Parser.pp$3.parseObj (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1988:14)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1805:19)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
