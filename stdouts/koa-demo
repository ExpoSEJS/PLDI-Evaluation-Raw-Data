/root/Targets/koa-demo
└─┬ koa-demo@0.0.12 
  ├─┬ co-fs@1.2.0 
  │ ├─┬ co-from-stream@0.0.0 
  │ │ └── co-read@0.0.1 
  │ └── thunkify@0.0.1 
  ├─┬ co-urllib@0.2.3 
  │ ├─┬ co-assert-timeout@0.0.5 
  │ │ ├── co@3.1.0 
  │ │ └── ms@0.6.2 
  │ ├─┬ co-readall@0.0.1 
  │ │ └─┬ readall@1.0.0 
  │ │   └── debug@0.7.4 
  │ ├── debug@0.8.1 
  │ ├── default-user-agent@0.0.1 
  │ ├── generator-supported@0.0.1 
  │ └── thunkify@2.1.2 
  ├── colors@0.6.2 
  ├─┬ debug@1.0.5 
  │ └── ms@2.0.0 
  ├── deepmerge@0.2.10 
  ├── iconv-lite@0.4.19 
  ├── is-utf8@0.2.1 
  ├── jschardet@1.1.1 
  ├─┬ koa-charset@1.1.4 
  │ └── content-type@1.0.4 
  ├─┬ koa-send@1.2.4 
  │ └─┬ finished@1.2.2 
  │   └── ee-first@1.0.3 
  ├── mime@1.2.11 
  └── underscore.string@2.3.3 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/koa-demo/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.06 took 6.4288s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (5:4) on program /**
 * Module dependencies.
 */

var assert = require('assert');
var Path = require('path');
var fs = require('fs');
var merge = require('deepmerge');
var send = require('koa-send');
var mime = require('mime');
var nunjucks = require('./nunjucks');
var nengine = require('./lib/engine/ntpl/');
var isUTF8 = require('is-utf8');
require('colors');

module.exports = function(opts){
  assert(opts.path, 'Please specify a path!');

  opts = merge({
    silent: false,
    domains: ['localhost', '127.0.0.1'],
    seekPaths: ['src', 'build', 'demo', 'doc', 'tool', 'test'],
    //seekPaths: [],
    paths: {
      "page": "page",
      "mod": "mod"
    },
    extEngineMap: {
      ".ntpl": nengine(opts)
    }
  }, opts);

  var viewPath = Path.join(__dirname, 'ui');

  return function*(next){
//    if(opts.domains.indexOf(this.hostname) === -1){
//      return yield next;
//    }

    var context = this;
    var url = this.url.split('?')[0];

    var seekPaths = opts.seekPaths;
    //最后查找根目录
    seekPaths.push('.');
    var targetPath = '';
    var targetFile = '';
    var foundSubPath = '';
    //按seekPaths里的先后顺序查找
    seekPaths.every(function(sub){
      var dirpath = Path.join(opts.path, sub);
      var filepath = Path.join(dirpath, url);
      var exist = fs.existsSync(filepath);
      if(!exist) return true;
      targetFile = filepath;
      targetPath = dirpath;
      foundSubPath = sub;
      return false;
    });

    if(!targetFile) return yield next;

    var stats = fs.lstatSync(targetFile);
    if(stats.isFile()){
      var extname = Path.extname(targetFile);
      var engine = opts.extEngineMap[extname];
      if(engine) { //可执行文件：存在扩展名对应的渲染引擎
        var file = url;
        var template = '';
        if(file && file.indexOf(foundSubPath) === -1){
          template = file;
        }else{
          /*
           * /src/page/index.ntpl => page/index.ntpl
           */
          var seps = file.split('/');
          seps = seps.slice(2);
          template = seps.join('/');
        }
        engine.render(template, targetPath, context, opts);
      }else{
        var isText = isTextFile(extname);
        if(isText){
          //静态文件直接通过send输出
          var contents = fs.readFileSync(targetFile);
          var charset = 'utf-8';
          if(!isUTF8(contents)){
            charset = 'gbk';
          }
          context.set('Last-Modified', (new Date).toUTCString());
          context.set('Cache-Control', 'max-age=0');
          context.set('Content-Type', mime.lookup(extname) + (isText ? '; charset='+charset : ''));
          context.set('Content-Length', contents.length);
          context.body = fs.createReadStream(targetFile);
          yield next;
        }else{
          yield send(context, targetFile);
        }

      }
    }else if(stats.isDirectory()){ //列出目录
      var dirs = [];
      var files = [];
      var items = fs.readdirSync(targetFile);
      items.forEach(function(item){
        var stats = fs.lstatSync(Path.join(targetFile, item));
        if(stats.isFile()){
          files.push({
            type: 'file',
            name: item
          });
        }else if(stats.isDirectory()){
          dirs.push({
            type: 'dir',
            name: item
          });
        }
      });
      var things = dirs.concat(files);
      var env = new nunjucks.Environment(new nunjucks.FileSystemLoader(viewPath));
      var current = url;
      if(current[current.length-1] != '/') current += '/';
      var res = env.render('directory.ntpl', {
        title: url,
        folder: current,
        things: things,
        current: targetFile
      });
      this.body = res;
    }
  }
}

function isTextFile(extname) {
  return extname === '.js' || extname === '.css' || extname == '.html' || extname == '.txt' || extname == '.json';
} at SyntaxError: Unexpected token (5:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
