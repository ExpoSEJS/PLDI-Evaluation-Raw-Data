/root/Targets/sz-calc
└─┬ sz-calc@0.0.3 
  ├── classnames@2.2.5 
  ├── moment@2.18.1 
  ├─┬ rmc-date-picker@3.1.1 
  │ └── gregorian-calendar@4.1.6 
  └─┬ rmc-picker@3.10.7 
    ├─┬ babel-runtime@6.26.0 
    │ ├── core-js@2.5.1 
    │ └── regenerator-runtime@0.11.0 
    ├─┬ create-react-class@15.6.0 
    │ ├─┬ fbjs@0.8.15 
    │ │ ├── core-js@1.2.7 
    │ │ ├─┬ isomorphic-fetch@2.2.1 
    │ │ │ ├─┬ node-fetch@1.7.3 
    │ │ │ │ ├─┬ encoding@0.1.12 
    │ │ │ │ │ └── iconv-lite@0.4.19 
    │ │ │ │ └── is-stream@1.1.0 
    │ │ │ └── whatwg-fetch@2.0.3 
    │ │ ├─┬ promise@7.3.1 
    │ │ │ └── asap@2.0.6 
    │ │ ├── setimmediate@1.0.5 
    │ │ └── ua-parser-js@0.7.14 
    │ ├─┬ loose-envify@1.3.1 
    │ │ └── js-tokens@3.0.2 
    │ └── object-assign@4.1.1 
    ├─┬ rc-dialog@6.5.11 
    │ ├─┬ rc-animate@2.4.1 
    │ │ ├─┬ css-animation@1.4.1 
    │ │ │ └─┬ component-classes@1.2.6 
    │ │ │   └── component-indexof@0.0.3 
    │ │ └── prop-types@15.5.10 
    │ └─┬ rc-util@4.0.4 
    │   ├── add-dom-event-listener@1.0.2 
    │   └─┬ shallowequal@0.2.2 
    │     └─┬ lodash.keys@3.1.2 
    │       ├── lodash._getnative@3.9.1 
    │       ├── lodash.isarguments@3.1.0 
    │       └── lodash.isarray@3.0.4 
    ├── rc-touchable@1.2.3 
    └─┬ zscroller@0.3.1 
      └─┬ raf@3.3.2 
        └── performance-now@2.1.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/sz-calc/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0825 took 5.4888s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (189:12) on program import React from "react"
import 'rmc-picker/assets/index.css';
import 'rmc-date-picker/assets/index.css';
import 'rmc-picker/assets/popup.css';

import PopPicker from 'rmc-date-picker/lib/Popup';
import moment from "moment"

import {Component} from "react"
import Slider from './m/react-rangeslider/src/index.js'
import cls from "classnames"

import Datetype from "./Datetype"
import Enclosure from "./Enclosure"

class Calc extends Component {
    constructor(props, context) {
        super(props, context)
        this.state = {
            // 选择意外保
            checkedAcp: false,
            enclosure: this.props.enclosure,
            start_date: moment().add(1, 'days').format('YYYY-MM-DD'),
            count: 1,
            ms: {
                // 租期类型 day month year
                checkedDateType: null,
                dateSelect: null,
                // 租金单价
                rentPrice: null,
                // 合计租金
                rentPriceTotal: null
            }

        }
    }
    componentWillMount () {
        this.ms({
            type: 'INIT'
        })
    }
    ms (action) {
        var self = this
        var state = this.state
        var props = this.props
        switch (action.type) {
            case 'INIT':
            state.ms.dateSelect = {
                day: {
                    min: null,
                    max: null
                },
                month: {
                    min: null,
                    max: null
                },
                year: {
                    min: null,
                    max: null
                }
            }
            // 默认选中项

            for (let type in self.props.date_select) {
                if (!state.ms.checkedDateType) {
                    state.ms.checkedDateType = type
                }
            }
            if (self.props.date_select.day) {
                state.ms.dateSelect.day.value = state.ms.dateSelect.day.min = self.props.date_select.day[0].min
                self.props.date_select.day.forEach(function (item) {
                    state.ms.dateSelect.day.max = item.max
                })
            }
            if (self.props.date_select.month) {
                state.ms.dateSelect.month.min = self.props.date_select.month[0].min
                self.props.date_select.month.forEach(function (item) {
                    state.ms.dateSelect.month.max = item.max
                })
                let defaultMonthValue = 12
                if (defaultMonthValue > state.ms.dateSelect.month.max) {
                    state.ms.dateSelect.month.value = state.ms.dateSelect.month.max
                }
                else {
                    state.ms.dateSelect.month.value = defaultMonthValue
                }
                state.ms.dateSelect.month.value > state.ms.dateSelect.month.max ? state.ms.dateSelect.month.max: 12
            }
            if (self.props.date_select.year) {
                state.ms.dateSelect.year.min = self.props.date_select.year[0].min
                self.props.date_select.year.forEach(function (item) {
                    state.ms.dateSelect.year.max = item.max
                })
                state.ms.dateSelect.year.value = state.ms.dateSelect.year.min
            }

            break
            case 'CHECKED_ACP':
                state.checkedAcp = true
            break
            case 'CANCEL_ACP':
            state.checkedAcp = false
            break
            case 'CHECK_ENCLOSURE':
            state.enclosure = state.enclosure.map(function (item) {
                if (item.id === action.id) {
                    item.checked = !item.checked
                }
                return item
            })
            break
            case 'CHANGE_STATR_DATE':
            state.start_date = action.date
            break
            case 'CHANGE_DATE_TYPE':
            state.ms.checkedDateType = action.value
            break
            case 'CHANGE_DATE_RANGE':
            state.ms.dateSelect[state.ms.checkedDateType].value = action.value
            break
            case 'CHANGE_COUNT':
            action.value = action.value.replace(/\D/g,'')
            if (parseInt(action.value,10) < 1) {
                action.value = 1
            }
            state.count = action.value
            break
        }
        {
        let activeDate = state.ms.dateSelect[state.ms.checkedDateType]
        let activeDateSelect = props.date_select[state.ms.checkedDateType]
        activeDateSelect.forEach(function (item) {
            if (item.min <= activeDate.value && activeDate.value <= activeDate.max) {
                state.ms.rentPrice = item.price
            }
        })
        switch (state.ms.checkedDateType) {
            // 日租金不需要乘以多少日，比如2-5天一直是100.而不是 2*100 3*100
            case 'day':
                state.ms.rentPriceTotal = state.ms.rentPrice * state.count
            break
            case 'month':
            state.ms.rentPriceTotal = state.ms.rentPrice * state.count * activeDate.value
            break
            case 'year':
            state.ms.rentPriceTotal = state.ms.rentPrice * state.count * activeDate.value
            break
        }
        }
        this.setState(state)
    }
    handleRangeChange (range) {
      this.setState({
          range: range
      })
    }
    onChangeDate (data) {
        if (data) {
            var date = moment(new Date(data.time)).format('YYYY-MM-DD')
            this.ms({
                type: 'CHANGE_STATR_DATE',
                date: date
            })
        }
    }
    onChangeDateType (type) {
        this.ms({
            type: 'CHANGE_DATE_TYPE',
            value: type
        })
    }
    onChangeDateRange (value) {
        this.ms({
            type: 'CHANGE_DATE_RANGE',
            value: value
        })
    }
    onChangeCount (e) {
        this.ms({
            type: 'CHANGE_COUNT',
            value: e.target.value
        })
    }
    render () {
        var self = this
        var rangeValue = self.state.ms.dateSelect[self.state.ms.checkedDateType]

        return (
            <div className="sz-calc" ref="wrap" >
                <div className="sz-calc-hd">
                    <span className="sz-calc-hd-label">
                	月租金
                    </span>
                    <div className="sz-calc-hd-price">
                        <span className="sz-calc-rmb">￥</span>{this.state.ms.rentPrice}
                    </div>
                    <span className={cls({
                        "sz-calc-hd-tag": true,
                        "sz-calc-hide": !this.props.is_new
                    })}>非全新设备</span>
                    <span className={cls({
                        "sz-calc-hd-tag": true,
                        "sz-calc-hide": !this.props.is_timely
                    })}>闪租随还</span>
                </div>
                <div className="sz-calc-bd">
                    <div className="sz-calc-bd-item">
                        <span className="sz-calc-bd-item-label">
                            保修
                        </span>
                        <span className="sz-calc-bd-item-input">
                            <span className={cls({
                                'sz-calc-bd-item-input-tag': true,
                                'sz-calc-bd-item-input-tag--active': !this.state.checkedAcp
                            })}  onClick={this.ms.bind(this, {type: 'CANCEL_ACP'})}  >标准保修</span>

                            <span className={cls({
                                "sz-calc-bd-item-input-tag": true,
                                "sz-calc-hide": this.props.acp,
                                "sz-calc-bd-item-input-tag--active": this.state.checkedAcp
                            })} onClick={this.ms.bind(this, {type: 'CHECKED_ACP'})} >意外保</span>
                            <a href="#" className="sz-calc-bd-item-input-link">什么是意外保？</a>
                        </span>
                    </div>
                    <div className="sz-calc-bd-item">
                        <span className="sz-calc-bd-item-label">
                            全新附件
                        </span>
                        <span className="sz-calc-bd-item-input">
                            <span className={cls({
                                'sz-calc-bd-item-input-tag': true,
                                'sz-calc-bd-item-input-tag--active': true,
                                'sz-calc-hide': self.state.enclosure.length
                            })}>无</span>
                            {
                                self.state.enclosure.map(function (item, key) {
                                    return (
                                        <Enclosure onCheck={self.ms.bind(self, {type: 'CHECK_ENCLOSURE', id: item.id})} key={key} {...item} />
                                    )
                                })
                            }
                        </span>
                    </div>
                    <div className="sz-calc-bd-item">
                        <span className="sz-calc-bd-item-label">
                            起租日期
                        </span>
                        <span className="sz-calc-bd-item-input">
                        <PopPicker
                          popupTransitionName="rmc-picker-popup-slide-fade"
                          okText="确认"
                          dismissText="取消"
                          mode="date"
                          maskTransitionName="rmc-picker-popup-fade"
                          onChange={this.onChangeDate.bind(this)}
                        >
                          <span className="sz-calc-bd-item-input-date">{this.state.start_date}</span>
                        </PopPicker>
                        <span className="sz-calc-bd-item-input-dateicon"></span>
                        </span>
                    </div>
                    <div className="sz-calc-bd-item">
                        <span className="sz-calc-bd-item-label">
                            租期
                        </span>
                        <span className="sz-calc-bd-item-input">
                            <Datetype onChangeDateType={self.onChangeDateType.bind(this)} lists={this.props.date_select} checked={this.state.ms.checkedDateType} />
                        </span>
                    </div>
                    <div className="sz-calc-bd-item">
                        <span className="sz-calc-bd-item-label">

                        </span>
                        <span className="sz-calc-bd-item-input">
                            <Slider
                            min={rangeValue.min}
                            max={rangeValue.max}
                            value={rangeValue.value}
                            orientation="horizontal"
                            tipText={rangeValue.value + "日"}
                            onChange={self.onChangeDateRange.bind(self)}
                             />
                        </span>
                    </div>
                    <div className="sz-calc-bd-item">
                        <span className="sz-calc-bd-item-label">
                            租借数量
                        </span>
                        <span className="sz-calc-bd-item-input">
                            <input type="number" className="sz-calc-bd-item-count" onChange={self.onChangeCount.bind(self)} value={this.state.count} />
                            <span className="sz-calc-bd-item-control">
                                <span className="sz-calc-bd-item-control-plus"></span>
                                <span className="sz-calc-bd-item-control-less"></span>
                            </span>
                        </span>
                    </div>
                </div>
                <div className="sz-calc-foot">
                    <span className="sz-calc-foot-text">
                    您的可用免押金额度为<span className="sz-calc-rmb">￥</span>0，当前押金<span className="sz-calc-rmb">￥</span>{this.props.free_deposit}<br />
                    押金应付：<span className="sz-calc-rmb">￥</span>{this.props.deposit}
                    </span>
                    <span className="sz-calc-foot-total">
                        <span className="sz-calc-foot-total-label">合计租金</span>
                        <span className="sz-calc-foot-total-price"><span className="sz-calc-rmb">￥</span>{this.state.ms.rentPriceTotal}</span>
                    </span>
                </div>
            </div>
        )
    }
}

module.exports = Calc
 at SyntaxError: Unexpected token (189:12)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseParenAndDistinguishExpression (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1861:32)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
