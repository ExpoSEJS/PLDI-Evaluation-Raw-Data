/root/Targets/oligrapher2
└─┬ oligrapher2@0.1.6 
  ├── classnames@2.2.5 
  ├── lodash@3.10.1 
  ├─┬ react@0.14.9 
  │ ├─┬ envify@3.4.1 
  │ │ ├─┬ jstransform@11.0.3 
  │ │ │ ├── base62@1.2.0 
  │ │ │ ├─┬ commoner@0.10.8 
  │ │ │ │ ├── commander@2.11.0 
  │ │ │ │ ├─┬ detective@4.5.0 
  │ │ │ │ │ ├── acorn@4.0.13 
  │ │ │ │ │ └── defined@1.0.0 
  │ │ │ │ ├─┬ glob@5.0.15 
  │ │ │ │ │ ├─┬ inflight@1.0.6 
  │ │ │ │ │ │ └── wrappy@1.0.2 
  │ │ │ │ │ ├── inherits@2.0.3 
  │ │ │ │ │ ├─┬ minimatch@3.0.4 
  │ │ │ │ │ │ └─┬ brace-expansion@1.1.8 
  │ │ │ │ │ │   ├── balanced-match@1.0.0 
  │ │ │ │ │ │   └── concat-map@0.0.1 
  │ │ │ │ │ ├── once@1.4.0 
  │ │ │ │ │ └── path-is-absolute@1.0.1 
  │ │ │ │ ├── graceful-fs@4.1.11 
  │ │ │ │ ├── iconv-lite@0.4.19 
  │ │ │ │ ├─┬ mkdirp@0.5.1 
  │ │ │ │ │ └── minimist@0.0.8 
  │ │ │ │ ├── private@0.1.7 
  │ │ │ │ ├── q@1.5.0 
  │ │ │ │ └─┬ recast@0.11.23 
  │ │ │ │   ├── ast-types@0.9.6 
  │ │ │ │   ├── esprima@3.1.3 
  │ │ │ │   └── source-map@0.5.7 
  │ │ │ ├── esprima-fb@15001.1.0-dev-harmony-fb 
  │ │ │ ├── object-assign@2.1.1 
  │ │ │ └─┬ source-map@0.4.4 
  │ │ │   └── amdefine@1.0.1 
  │ │ └── through@2.3.8 
  │ └─┬ fbjs@0.6.1 
  │   ├── core-js@1.2.7 
  │   ├─┬ promise@7.3.1 
  │   │ └── asap@2.0.6 
  │   ├── ua-parser-js@0.7.14 
  │   └── whatwg-fetch@0.9.0 
  ├─┬ react-anything-sortable@1.7.3 
  │ ├─┬ create-react-class@15.6.0 
  │ │ ├─┬ fbjs@0.8.15 
  │ │ │ ├─┬ isomorphic-fetch@2.2.1 
  │ │ │ │ ├─┬ node-fetch@1.7.3 
  │ │ │ │ │ ├── encoding@0.1.12 
  │ │ │ │ │ └── is-stream@1.1.0 
  │ │ │ │ └── whatwg-fetch@2.0.3 
  │ │ │ └── setimmediate@1.0.5 
  │ │ └── object-assign@4.1.1 
  │ └─┬ prop-types@15.5.10 
  │   └─┬ fbjs@0.8.15 
  │     └── object-assign@4.1.1 
  ├── UNMET PEER DEPENDENCY react-dom@^0.14.0 || ^15.0.0
  ├── react-draggable@1.3.7 
  ├─┬ react-hotkeys@0.6.0 
  │ └── mousetrap@1.6.1 
  ├─┬ react-medium-editor@1.8.1 
  │ ├── blacklist@1.1.4 
  │ ├── medium-editor@5.23.2 
  │ └── object-assign@4.1.1 
  ├─┬ react-redux@4.4.8 
  │ ├── hoist-non-react-statics@1.2.0 
  │ ├── invariant@2.2.2 
  │ ├── lodash@4.17.4 
  │ └─┬ loose-envify@1.3.1 
  │   └── js-tokens@3.0.2 
  ├─┬ redux@3.7.2 
  │ ├── lodash@4.17.4 
  │ ├── lodash-es@4.17.4 
  │ └── symbol-observable@1.0.4 
  ├── redux-undo@0.6.1 
  ├── shortid@2.2.8 
  ├── springy@2.7.1 
  └── titleize@1.0.0 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/oligrapher2/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0763 took 4.7812s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (44:6) on program import React from 'react';
import { render } from 'react-dom';
import { createStore, applyMiddleware } from 'redux';
import { Provider } from 'react-redux';
import createLogger from 'redux-logger';
import Root from './components/Root';
import reducers from './reducers';
import { loadGraph, showGraph, newGraph, 
         zoomIn, zoomOut, resetZoom,
         addNode, addEdge, addCaption, addSurroundingNodes,
         deleteNode, deleteEdge, deleteCaption, deleteAll,
         deselectAll, deleteSelection,
         updateNode, updateEdge, updateCaption,
         pruneGraph, layoutCircle,
         setHighlights, clearHighlights,
         loadAnnotations, setTitle } from './actions';
import Graph from './models/Graph';
import merge from 'lodash/object/merge';
import difference from 'lodash/array/difference';
require ('./styles/oligrapher.css');

class Oligrapher {
  constructor(config = {}) {

    config = merge({ 
      isEditor: false, 
      isLocked: true, 
      logActions: false, 
      viewOnlyHighlighted: true 
    }, config);
    config.height = config.graphHeight || config.root.offsetHeight;

    this.rootElement = config.root;

    if (config.logActions) {
      const logger = createLogger();
      const createStoreWithMiddleware = applyMiddleware(logger)(createStore);
      this.store = createStoreWithMiddleware(reducers);      
    } else {
      this.store = createStore(reducers);
    }

    this.providerInstance = render(
      <Provider store={this.store}>
        <Root 
          {...config}
          ref={(c) => this.root = c} />
      </Provider>,
      this.rootElement
    );

    this.Root = Root;

    return this;
  }

  toggleEditTools(value) {
    this.root.getWrappedInstance().toggleEditTools(value);
  }

  toggleEditor(value) {
    this.root.getWrappedInstance().toggleEditor(value);
  }

  toggleLocked(value) {
    this.root.getWrappedInstance().toggleLocked(value);
  }

  import(data) {
    this.root.dispatchProps.dispatch(loadGraph(data.graph));

    if (data.annotations) {
      this.root.dispatchProps.dispatch(loadAnnotations(data.annotations));
    }

    if (data.title) {
      this.root.dispatchProps.dispatch(setTitle(data.title));
    }
  }

  export() {
    let instance = this.root.getWrappedInstance();

    return {
      title: instance.props.graphTitle,
      graph: instance.graphWithoutHighlights(),
      annotations: instance.props.annotations,
      settings: instance.props.graphSettings
    };
  }

  exportGraph() {
    return this.root.getWrappedInstance().props.graph;
  }

  exportAnnotation() {
    return this.root.getWrappedInstance().props.annotation;
  }

  showAnnotation(index) {
    this.root.dispatchProps.dispatch(showAnnotation(index));
  }

  zoomIn() {
    this.root.dispatchProps.dispatch(zoomIn());
  }

  zoomOut() {
    this.root.dispatchProps.dispatch(zoomOut());
  }

  resetZoom() {
    this.root.dispatchProps.dispatch(resetZoom())
  }

  addNode(node) {
    let nodeIds = Object.keys(this.root.getWrappedInstance().props.graph.nodes);
    this.root.dispatchProps.dispatch(addNode(node));
    let newNodeIds = Object.keys(this.root.getWrappedInstance().props.graph.nodes);
    return difference(newNodeIds, nodeIds);
  }

  addEdge(edge) {
    let edgeIds = Object.keys(this.root.getWrappedInstance().props.graph.edges);
    this.root.dispatchProps.dispatch(addEdge(edge));
    let newEdgeIds = Object.keys(this.root.getWrappedInstance().props.graph.edges);
    return difference(newEdgeIds, edgeIds);
  }

  addCaption(caption) {
    let captionIds = Object.keys(this.root.getWrappedInstance().props.graph.captions);
    this.root.dispatchProps.dispatch(addCaption(caption));
    let newCaptionIds = Object.keys(this.root.getWrappedInstance().props.graph.captions);
    return difference(newCaptionIds, captionIds);
  }

  addSurroundingNodes(centerId, nodes) {
    let nodeIds = Object.keys(this.root.getWrappedInstance().props.graph.nodes);
    this.root.dispatchProps.dispatch(addSurroundingNodes(centerId, nodes));
    let newNodeIds = Object.keys(this.root.getWrappedInstance().props.graph.nodes);
    return difference(newNodeIds, nodeIds);    
  }

  deleteNode(nodeId) {
    this.root.dispatchProps.dispatch(deleteNode(nodeId));
  }

  deleteEdge(edgeId) {
    this.root.dispatchProps.dispatch(deleteEdge(edgeId));
  }

  deleteCaption(captionId) {
    this.root.dispatchProps.dispatch(deleteCaption(captionId));
  }

  deleteAll() {
    this.root.dispatchProps.dispatch(deleteAll());
    this.root.getWrappedInstance().graph.recenter();
  }

  getHighlights() {
    return Graph.highlightedOnly(this.root.getWrappedInstance().props.graph);
  }

  setHighlights(highlights, otherwiseFaded = false) {
    this.root.dispatchProps.dispatch(setHighlights(highlights, otherwiseFaded));
    return this.root.getWrappedInstance().props.graph;
  }

  clearHighlights() {
    this.root.dispatchProps.dispatch(clearHighlights());
    return this.root.getWrappedInstance().props.graph;    
  }

  getSelection() {
    return this.root.getWrappedInstance().props.selection;
  }

  deselectAll() {
    this.root.dispatchProps.dispatch(deselectAll());
  }

  deleteSelection() {
    this.root.dispatchProps.dispatch(deleteSelection(this.getSelection()));
  }

  updateNode(nodeId, data) {
    this.root.dispatchProps.dispatch(updateNode(nodeId, data));
    return this.root.getWrappedInstance().props.graph.nodes[nodeId];
  }

  updateEdge(edgeId, data) {
    this.root.dispatchProps.dispatch(updateEdge(edgeId, data));
    return this.root.getWrappedInstance().props.graph.edges[edgeId];
  }

  updateCaption(captionId, data) {
    this.root.dispatchProps.dispatch(updateCaption(captionId, data));
    return this.root.getWrappedInstance().props.graph.captions[captionId];
  }

  prune() {
    this.root.dispatchProps.dispatch(pruneGraph());
  }

  circleLayout() {
    this.root.dispatchProps.dispatch(layoutCircle());
  }
};

module.exports = Oligrapher; at SyntaxError: Unexpected token (44:6)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$3.parseExprAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1822:12)
    at Parser.parseExprAtom (/root/ExpoSE/lib/Tropigate/bin/Expression.js:28:30)
    at Parser.pp$3.parseExprSubscripts (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1715:21)
    at Parser.parseMaybeUnary (/root/ExpoSE/lib/Tropigate/bin/Unary.js:34:29)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1637:21)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
    at Parser.pp$3.parseExprList (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2165:22)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
