/root/Targets/ansibrest
└─┬ ansibrest@1.1.2 
  ├─┬ body-parser@1.18.2 
  │ ├── bytes@3.0.0 
  │ ├── content-type@1.0.4 
  │ ├── depd@1.1.1 
  │ ├─┬ http-errors@1.6.2 
  │ │ ├── inherits@2.0.3 
  │ │ └── setprototypeof@1.0.3 
  │ ├── iconv-lite@0.4.19 
  │ ├─┬ on-finished@2.3.0 
  │ │ └── ee-first@1.1.1 
  │ ├── qs@6.5.1 
  │ ├─┬ raw-body@2.3.2 
  │ │ └── unpipe@1.0.0 
  │ └─┬ type-is@1.6.15 
  │   ├── media-typer@0.3.0 
  │   └─┬ mime-types@2.1.17 
  │     └── mime-db@1.30.0 
  ├── bootstrap@3.3.7 
  ├── commander@2.11.0 
  ├─┬ cookie-parser@1.4.3 
  │ ├── cookie@0.3.1 
  │ └── cookie-signature@1.0.6 
  ├── create-error@0.3.1 
  ├─┬ debug@2.6.9 
  │ └── ms@2.0.0 
  ├─┬ express@4.16.1 
  │ ├─┬ accepts@1.3.4 
  │ │ └── negotiator@0.6.1 
  │ ├── array-flatten@1.1.1 
  │ ├── content-disposition@0.5.2 
  │ ├── encodeurl@1.0.1 
  │ ├── escape-html@1.0.3 
  │ ├── etag@1.8.1 
  │ ├── finalhandler@1.1.0 
  │ ├── fresh@0.5.2 
  │ ├── merge-descriptors@1.0.1 
  │ ├── methods@1.1.2 
  │ ├── parseurl@1.3.2 
  │ ├── path-to-regexp@0.1.7 
  │ ├─┬ proxy-addr@2.0.2 
  │ │ ├── forwarded@0.1.2 
  │ │ └── ipaddr.js@1.5.2 
  │ ├── range-parser@1.2.0 
  │ ├── safe-buffer@5.1.1 
  │ ├─┬ send@0.16.1 
  │ │ ├── destroy@1.0.4 
  │ │ └── mime@1.4.1 
  │ ├── setprototypeof@1.1.0 
  │ ├── statuses@1.3.1 
  │ ├── utils-merge@1.0.1 
  │ └── vary@1.1.2 
  ├── font-awesome@4.7.0 
  ├─┬ fs-extra@1.0.0 
  │ ├── graceful-fs@4.1.11 
  │ ├── jsonfile@2.4.0 
  │ └── klaw@1.3.1 
  ├─┬ js-yaml@3.10.0 
  │ ├─┬ argparse@1.0.9 
  │ │ └── sprintf-js@1.0.3 
  │ └── esprima@4.0.0 
  ├─┬ log4js@0.6.38 
  │ ├─┬ readable-stream@1.0.34 
  │ │ ├── core-util-is@1.0.2 
  │ │ ├── isarray@0.0.1 
  │ │ └── string_decoder@0.10.31 
  │ └── semver@4.3.6 
  ├─┬ node-ansible@0.5.5 
  │ ├─┬ mock-spawn@0.2.6 
  │ │ └── through@2.3.8 
  │ ├── q@1.0.1 
  │ └── underscore@1.5.2 
  ├── serve-static@1.13.1 
  └─┬ socket.io@1.7.4 
    ├─┬ debug@2.3.3 
    │ └── ms@0.7.2 
    ├─┬ engine.io@1.8.4 
    │ ├── accepts@1.3.3 
    │ ├── base64id@1.0.0 
    │ ├─┬ debug@2.3.3 
    │ │ └── ms@0.7.2 
    │ ├─┬ engine.io-parser@1.3.2 
    │ │ ├── after@0.8.2 
    │ │ ├── arraybuffer.slice@0.0.6 
    │ │ ├── base64-arraybuffer@0.1.5 
    │ │ ├── blob@0.0.4 
    │ │ └── wtf-8@1.0.0 
    │ └─┬ ws@1.1.4 
    │   ├── options@0.0.6 
    │   └── ultron@1.0.2 
    ├── has-binary@0.1.7 
    ├── object-assign@4.1.0 
    ├─┬ socket.io-adapter@0.5.0 
    │ └─┬ debug@2.3.3 
    │   └── ms@0.7.2 
    ├─┬ socket.io-client@1.7.4 
    │ ├── backo2@1.0.2 
    │ ├── component-bind@1.0.0 
    │ ├── component-emitter@1.2.1 
    │ ├─┬ debug@2.3.3 
    │ │ └── ms@0.7.2 
    │ ├─┬ engine.io-client@1.8.4 
    │ │ ├── component-emitter@1.2.1 
    │ │ ├── component-inherit@0.0.3 
    │ │ ├─┬ debug@2.3.3 
    │ │ │ └── ms@0.7.2 
    │ │ ├── has-cors@1.1.0 
    │ │ ├── parsejson@0.0.3 
    │ │ ├── parseqs@0.0.5 
    │ │ ├── ws@1.1.2 
    │ │ ├── xmlhttprequest-ssl@1.5.3 
    │ │ └── yeast@0.1.2 
    │ ├── indexof@0.0.1 
    │ ├── object-component@0.0.3 
    │ ├─┬ parseuri@0.0.5 
    │ │ └─┬ better-assert@1.0.2 
    │ │   └── callsite@1.0.0 
    │ └── to-array@0.1.4 
    └─┬ socket.io-parser@2.3.1 
      ├── component-emitter@1.1.2 
      ├─┬ debug@2.2.0 
      │ └── ms@0.7.1 
      └── json3@3.3.2 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/ansibrest/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 33% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0734 took 2.3959s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected character '#' (1:78) on program #!/usr/bin/env node

process.title = "ansibrest";

const http = require("http");
const commander = require("commander");
const Fs = require("fs-extra");
const Path = require("path");
const yaml = require("js-yaml");
const log4js = require("log4js");

const Ansibrest = require("./lib/ansibrest");

const cnfPath = Path.join(process.cwd(), ".ansibrest");
if(!Fs.existsSync(cnfPath)) Fs.writeFileSync(cnfPath, "ansiblePath: ansible\ninventoryPath: inventories");

const config = yaml.safeLoad(Fs.readFileSync(cnfPath, "utf8")) || {};

const program = commander
        .option("-p,--port <PORT>", "PORT", Number, config.port || 2400)
        .option("--base-path <BASE_PATH>", "BASE_PATH", String, config.base_path || "")
        .option("--ansible-path <ANSIBLE_PATH>", "ANSIBLE_PATH", String, config.ansible_path || "ansible")
        .option("--inventory-path <INVENTORY_PATH>", "INVENTORY_PATH", String, config.inventory_path || "inventories")
        .option("--log-dir <LOG_DIR>", "LOG_DIR", String, config.log_dir)
        .parse(process.argv);

const getLogger = ()=>{
  const getLogConfig = ()=>{
    if(!program.logDir || program.logDir === ""){
      return {
        category: "ansibrest",
        type: "console"
      };
    }else{
      const logDir = program.logDir.indexOf("/") === 0 ?
              program.logDir : Path.join(__dirname, program.logDir);
      try{
        Fs.statSync(logDir);
      }catch(err){
        Fs.mkdirsSync(logDir);
      }
      return {
        category: "ansibrest",
        type: "dateFile",
        filename: `${program.logDir}/ansibrest.log`,
        pattern: ".yyyyMMdd"
      };
    }
  };
  log4js.configure({appenders: [getLogConfig()]});
  return log4js.getLogger("ansibrest");
};

const logger = program.logger = getLogger();
const ansibrest = new Ansibrest(program);
const server = http.createServer(ansibrest.app());
ansibrest.socket(server);

server.listen(program.port);
server.on("listening", ()=>{
  logger.info(`ansibrest start on ${program.port}`);
});
server.on("error", (err)=>{
  logger.error(err.stack);
  process.exit(-1);
});
process.on("uncaughtException", (err)=>{
  logger.error(err.stack);
  process.exit(-1);
});
process.on("unhandledRejection", (err)=>{
  logger.error(err.stack);
  process.exit(-1);
});
 at SyntaxError: Unexpected character '#' (1:78)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2756:10)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp.eat (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:536:12)
    at Parser.pp.semicolon (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:581:15)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:918:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
