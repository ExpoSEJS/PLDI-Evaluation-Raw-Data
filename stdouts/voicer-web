/root/Targets/voicer-web
└── voicer-web@0.0.5 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/voicer-web/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 13% coverage ] ****** [1 done /0 queued / 1 running / 0 errors / 13% coverage ] ****** [2 done /1 queued / 1 running / 1 errors / 14.000000000000002% coverage ] ****** [2 done /0 queued / 2 running / 1 errors / 14.000000000000002% coverage ] ****** [2 done /0 queued / 2 running / 1 errors / 14.000000000000002% coverage ] ****** [3 done /0 queued / 2 running / 2 errors / 14.000000000000002% coverage ] ****** [3 done /0 queued / 2 running / 2 errors / 14.000000000000002% coverage ] ****** [4 done /1 queued / 2 running / 3 errors / 14.000000000000002% coverage ] ****** [4 done /0 queued / 3 running / 3 errors / 14.000000000000002% coverage ] ****** [4 done /0 queued / 3 running / 3 errors / 14.000000000000002% coverage ] ****** [5 done /0 queued / 3 running / 4 errors / 15% coverage ] ****** [5 done /0 queued / 3 running / 4 errors / 15% coverage ] ****** [6 done /1 queued / 3 running / 5 errors / 15% coverage ] ****** [6 done /0 queued / 4 running / 5 errors / 15% coverage ] ****** [6 done /0 queued / 4 running / 5 errors / 15% coverage ] ****** [7 done /1 queued / 4 running / 6 errors / 15% coverage ] ****** [7 done /0 queued / 5 running / 6 errors / 15% coverage ] ****** [7 done /0 queued / 5 running / 6 errors / 15% coverage ] ****** [8 done /0 queued / 5 running / 7 errors / 16% coverage ] ****** [8 done /0 queued / 5 running / 7 errors / 16% coverage ] ****** [9 done /0 queued / 4 running / 8 errors / 16% coverage ] ****** [10 done /1 queued / 4 running / 9 errors / 16% coverage ] ****** [10 done /0 queued / 5 running / 9 errors / 16% coverage ] ****** [10 done /0 queued / 5 running / 9 errors / 16% coverage ] ****** [11 done /2 queued / 5 running / 10 errors / 16% coverage ] ****** [11 done /1 queued / 6 running / 10 errors / 16% coverage ] ****** [11 done /0 queued / 7 running / 10 errors / 16% coverage ] ****** [11 done /0 queued / 7 running / 10 errors / 16% coverage ] ****** [12 done /0 queued / 7 running / 11 errors / 16% coverage ] ****** [12 done /0 queued / 7 running / 11 errors / 16% coverage ] ****** [13 done /1 queued / 7 running / 12 errors / 17% coverage ] ****** [13 done /0 queued / 8 running / 12 errors / 17% coverage ] ****** [13 done /0 queued / 8 running / 12 errors / 17% coverage ] ****** [14 done /2 queued / 8 running / 13 errors / 17% coverage ] ****** [14 done /1 queued / 9 running / 13 errors / 17% coverage ] ****** [14 done /0 queued / 10 running / 13 errors / 17% coverage ] ****** [14 done /0 queued / 10 running / 13 errors / 17% coverage ] ****** [15 done /0 queued / 9 running / 14 errors / 17% coverage ] ****** [16 done /0 queued / 8 running / 15 errors / 17% coverage ] ****** [17 done /1 queued / 8 running / 16 errors / 17% coverage ] ****** [17 done /0 queued / 9 running / 16 errors / 17% coverage ] ****** [17 done /0 queued / 9 running / 16 errors / 17% coverage ] ****** [18 done /4 queued / 9 running / 17 errors / 17% coverage ] ****** [18 done /3 queued / 10 running / 17 errors / 17% coverage ] ****** [18 done /2 queued / 11 running / 17 errors / 17% coverage ] ****** [18 done /1 queued / 12 running / 17 errors / 17% coverage ] ****** [18 done /0 queued / 13 running / 17 errors / 17% coverage ] ****** [18 done /0 queued / 13 running / 17 errors / 17% coverage ] ****** [19 done /1 queued / 13 running / 18 errors / 17% coverage ] ****** [19 done /0 queued / 14 running / 18 errors / 17% coverage ] ****** [19 done /0 queued / 14 running / 18 errors / 17% coverage ] ****** [20 done /0 queued / 14 running / 19 errors / 17% coverage ] ****** [20 done /0 queued / 14 running / 19 errors / 17% coverage ] ****** [21 done /0 queued / 13 running / 20 errors / 17% coverage ] ****** [22 done /1 queued / 13 running / 21 errors / 17% coverage ] ****** [22 done /0 queued / 14 running / 21 errors / 17% coverage ] ****** [22 done /0 queued / 14 running / 21 errors / 17% coverage ] ****** [23 done /2 queued / 14 running / 22 errors / 17% coverage ] ****** [23 done /1 queued / 15 running / 22 errors / 17% coverage ] ****** [23 done /0 queued / 16 running / 22 errors / 17% coverage ] ****** [23 done /0 queued / 16 running / 22 errors / 17% coverage ] ****** [24 done /1 queued / 16 running / 23 errors / 17% coverage ] ****** [24 done /1 queued / 16 running / 23 errors / 17% coverage ] ****** [25 done /0 queued / 16 running / 24 errors / 17% coverage ] ****** [25 done /0 queued / 16 running / 24 errors / 17% coverage ] ****** [26 done /0 queued / 15 running / 25 errors / 17% coverage ] ****** [27 done /0 queued / 14 running / 26 errors / 17% coverage ] ****** [28 done /0 queued / 13 running / 27 errors / 17% coverage ] ****** [29 done /3 queued / 13 running / 28 errors / 17% coverage ] ****** [29 done /2 queued / 14 running / 28 errors / 17% coverage ] ****** [29 done /1 queued / 15 running / 28 errors / 17% coverage ] ****** [29 done /0 queued / 16 running / 28 errors / 17% coverage ] ****** [29 done /0 queued / 16 running / 28 errors / 17% coverage ] ****** [30 done /0 queued / 15 running / 29 errors / 17% coverage ] ****** [31 done /1 queued / 15 running / 30 errors / 17% coverage ] ****** [31 done /0 queued / 16 running / 30 errors / 17% coverage ] ****** [31 done /0 queued / 16 running / 30 errors / 17% coverage ] ****** [32 done /0 queued / 15 running / 31 errors / 17% coverage ] ****** [33 done /1 queued / 15 running / 32 errors / 17% coverage ] ****** [33 done /0 queued / 16 running / 32 errors / 17% coverage ] ****** [33 done /0 queued / 16 running / 32 errors / 17% coverage ] ****** [34 done /3 queued / 16 running / 33 errors / 17% coverage ] ****** [34 done /3 queued / 16 running / 33 errors / 17% coverage ] ****** [35 done /4 queued / 16 running / 34 errors / 17% coverage ] ****** [35 done /4 queued / 16 running / 34 errors / 17% coverage ] ****** [36 done /6 queued / 16 running / 35 errors / 17% coverage ] ****** [36 done /6 queued / 16 running / 35 errors / 17% coverage ] ****** [37 done /5 queued / 16 running / 36 errors / 17% coverage ] ****** [37 done /5 queued / 16 running / 36 errors / 17% coverage ] ****** [38 done /4 queued / 16 running / 37 errors / 17% coverage ] ****** [38 done /4 queued / 16 running / 37 errors / 17% coverage ] ****** [39 done /7 queued / 16 running / 38 errors / 17% coverage ] ****** [39 done /7 queued / 16 running / 38 errors / 17% coverage ] ****** [40 done /10 queued / 16 running / 39 errors / 17% coverage ] ****** [40 done /10 queued / 16 running / 39 errors / 17% coverage ] ****** [41 done /12 queued / 16 running / 40 errors / 17% coverage ] ****** [41 done /12 queued / 16 running / 40 errors / 17% coverage ] ****** [42 done /13 queued / 16 running / 41 errors / 17% coverage ] ****** [42 done /13 queued / 16 running / 41 errors / 17% coverage ] ****** [43 done /13 queued / 16 running / 42 errors / 17% coverage ] ****** [43 done /13 queued / 16 running / 42 errors / 17% coverage ] ****** [44 done /14 queued / 16 running / 43 errors / 17% coverage ] ****** [44 done /14 queued / 16 running / 43 errors / 17% coverage ] ****** [45 done /15 queued / 16 running / 44 errors / 17% coverage ] ****** [45 done /15 queued / 16 running / 44 errors / 17% coverage ] ****** [46 done /14 queued / 16 running / 45 errors / 17% coverage ] ****** [46 done /14 queued / 16 running / 45 errors / 17% coverage ] ****** [47 done /16 queued / 16 running / 46 errors / 17% coverage ] ****** [47 done /16 queued / 16 running / 46 errors / 17% coverage ] ****** [48 done /17 queued / 16 running / 47 errors / 17% coverage ] ****** [48 done /17 queued / 16 running / 47 errors / 17% coverage ] ****** [49 done /19 queued / 16 running / 48 errors / 17% coverage ] ****** [49 done /19 queued / 16 running / 48 errors / 17% coverage ] ****** [50 done /20 queued / 16 running / 49 errors / 17% coverage ] ****** [50 done /20 queued / 16 running / 49 errors / 17% coverage ] ****** [51 done /22 queued / 16 running / 50 errors / 17% coverage ] ****** [51 done /22 queued / 16 running / 50 errors / 17% coverage ] ****** [52 done /23 queued / 16 running / 51 errors / 17% coverage ] ****** [52 done /23 queued / 16 running / 51 errors / 17% coverage ] ****** [53 done /22 queued / 16 running / 52 errors / 17% coverage ] ****** [53 done /22 queued / 16 running / 52 errors / 17% coverage ] ****** [54 done /24 queued / 16 running / 53 errors / 17% coverage ] ****** [54 done /24 queued / 16 running / 53 errors / 17% coverage ] ****** [55 done /26 queued / 16 running / 54 errors / 17% coverage ] ****** [55 done /26 queued / 16 running / 54 errors / 17% coverage ] ****** [56 done /25 queued / 16 running / 55 errors / 17% coverage ] ****** [56 done /25 queued / 16 running / 55 errors / 17% coverage ] ****** [57 done /26 queued / 16 running / 56 errors / 17% coverage ] ****** [57 done /26 queued / 16 running / 56 errors / 17% coverage ] ****** [58 done /26 queued / 16 running / 57 errors / 17% coverage ] ****** [58 done /26 queued / 16 running / 57 errors / 17% coverage ] ****** [59 done /26 queued / 16 running / 58 errors / 17% coverage ] ****** [59 done /26 queued / 16 running / 58 errors / 17% coverage ] ****** [60 done /27 queued / 16 running / 59 errors / 17% coverage ] ****** [60 done /27 queued / 16 running / 59 errors / 17% coverage ] ****** [61 done /26 queued / 16 running / 60 errors / 17% coverage ] ****** [61 done /26 queued / 16 running / 60 errors / 17% coverage ] ****** [62 done /26 queued / 16 running / 61 errors / 17% coverage ] ****** [62 done /26 queued / 16 running / 61 errors / 17% coverage ] ****** [63 done /28 queued / 16 running / 62 errors / 17% coverage ] ****** [63 done /28 queued / 16 running / 62 errors / 17% coverage ] ****** [64 done /28 queued / 16 running / 63 errors / 17% coverage ] ****** [64 done /28 queued / 16 running / 63 errors / 17% coverage ] ****** [65 done /28 queued / 16 running / 64 errors / 17% coverage ] ****** [65 done /28 queued / 16 running / 64 errors / 17% coverage ] ****** [66 done /27 queued / 16 running / 65 errors / 17% coverage ] ****** [66 done /27 queued / 16 running / 65 errors / 17% coverage ] ****** [67 done /29 queued / 16 running / 66 errors / 17% coverage ] ****** [67 done /29 queued / 16 running / 66 errors / 17% coverage ] ****** [68 done /29 queued / 16 running / 67 errors / 17% coverage ] ****** [68 done /29 queued / 16 running / 67 errors / 17% coverage ] ****** [69 done /28 queued / 16 running / 68 errors / 17% coverage ] ****** [69 done /28 queued / 16 running / 68 errors / 17% coverage ] ****** [70 done /29 queued / 16 running / 69 errors / 17% coverage ] ****** [70 done /29 queued / 16 running / 69 errors / 17% coverage ] ****** [71 done /30 queued / 16 running / 70 errors / 17% coverage ] ****** [71 done /30 queued / 16 running / 70 errors / 17% coverage ] ****** [72 done /31 queued / 16 running / 71 errors / 17% coverage ] ****** [72 done /31 queued / 16 running / 71 errors / 17% coverage ] ****** [73 done /31 queued / 16 running / 72 errors / 17% coverage ] ****** [73 done /31 queued / 16 running / 72 errors / 17% coverage ] ****** [74 done /32 queued / 16 running / 73 errors / 17% coverage ] ****** [74 done /32 queued / 16 running / 73 errors / 17% coverage ] ****** [75 done /31 queued / 16 running / 74 errors / 17% coverage ] ****** [75 done /31 queued / 16 running / 74 errors / 17% coverage ] ****** [76 done /33 queued / 16 running / 75 errors / 17% coverage ] ****** [76 done /33 queued / 16 running / 75 errors / 17% coverage ] ****** [77 done /33 queued / 16 running / 76 errors / 17% coverage ] ****** [77 done /33 queued / 16 running / 76 errors / 17% coverage ] ****** [78 done /33 queued / 16 running / 77 errors / 17% coverage ] ****** [78 done /33 queued / 16 running / 77 errors / 17% coverage ] ****** [79 done /35 queued / 16 running / 78 errors / 17% coverage ] ****** [79 done /35 queued / 16 running / 78 errors / 17% coverage ] ****** [80 done /36 queued / 16 running / 79 errors / 17% coverage ] ****** [80 done /36 queued / 16 running / 79 errors / 17% coverage ] ****** [81 done /36 queued / 16 running / 80 errors / 17% coverage ] ****** [81 done /36 queued / 16 running / 80 errors / 17% coverage ] ****** [82 done /37 queued / 16 running / 81 errors / 17% coverage ] ****** [82 done /37 queued / 16 running / 81 errors / 17% coverage ] ****** [83 done /38 queued / 16 running / 82 errors / 17% coverage ] ****** [83 done /38 queued / 16 running / 82 errors / 17% coverage ] ****** [84 done /39 queued / 16 running / 83 errors / 17% coverage ] ****** [84 done /39 queued / 16 running / 83 errors / 17% coverage ] ****** [85 done /39 queued / 16 running / 84 errors / 17% coverage ] ****** [85 done /39 queued / 16 running / 84 errors / 17% coverage ] ****** [86 done /41 queued / 16 running / 85 errors / 17% coverage ] ****** [86 done /41 queued / 16 running / 85 errors / 17% coverage ] ****** [87 done /42 queued / 16 running / 86 errors / 17% coverage ] ****** [87 done /42 queued / 16 running / 86 errors / 17% coverage ] ****** [88 done /43 queued / 16 running / 87 errors / 17% coverage ] ****** [88 done /43 queued / 16 running / 87 errors / 17% coverage ] ****** [89 done /44 queued / 16 running / 88 errors / 17% coverage ] ****** [89 done /44 queued / 16 running / 88 errors / 17% coverage ] ****** [90 done /45 queued / 16 running / 89 errors / 17% coverage ] ****** [90 done /45 queued / 16 running / 89 errors / 17% coverage ] ****** [91 done /45 queued / 16 running / 90 errors / 17% coverage ] ****** [91 done /45 queued / 16 running / 90 errors / 17% coverage ] ****** [92 done /46 queued / 16 running / 91 errors / 17% coverage ] ****** [92 done /46 queued / 16 running / 91 errors / 17% coverage ] ****** [93 done /47 queued / 16 running / 92 errors / 17% coverage ] ****** [93 done /47 queued / 16 running / 92 errors / 17% coverage ] ****** [94 done /48 queued / 16 running / 93 errors / 17% coverage ] ****** [94 done /48 queued / 16 running / 93 errors / 17% coverage ] ****** [95 done /50 queued / 16 running / 94 errors / 17% coverage ] ****** [95 done /50 queued / 16 running / 94 errors / 17% coverage ] ****** [96 done /51 queued / 16 running / 95 errors / 17% coverage ] ****** [96 done /51 queued / 16 running / 95 errors / 17% coverage ] ****** [97 done /53 queued / 16 running / 96 errors / 17% coverage ] ****** [97 done /53 queued / 16 running / 96 errors / 17% coverage ] ****** [98 done /54 queued / 16 running / 97 errors / 17% coverage ] ****** [98 done /54 queued / 16 running / 97 errors / 17% coverage ] ****** [99 done /57 queued / 16 running / 98 errors / 17% coverage ] ****** [99 done /57 queued / 16 running / 98 errors / 17% coverage ] ****** [100 done /58 queued / 16 running / 99 errors / 17% coverage ] ****** [100 done /58 queued / 16 running / 99 errors / 17% coverage ] ****** [101 done /61 queued / 16 running / 100 errors / 17% coverage ] ****** [101 done /61 queued / 16 running / 100 errors / 17% coverage ] ****** [102 done /63 queued / 16 running / 101 errors / 17% coverage ] ****** [102 done /63 queued / 16 running / 101 errors / 17% coverage ] ****** [103 done /65 queued / 16 running / 102 errors / 17% coverage ] ****** [103 done /65 queued / 16 running / 102 errors / 17% coverage ] ****** [104 done /65 queued / 16 running / 103 errors / 17% coverage ] ****** [104 done /65 queued / 16 running / 103 errors / 17% coverage ] ****** [105 done /67 queued / 16 running / 104 errors / 17% coverage ] ****** [105 done /67 queued / 16 running / 104 errors / 17% coverage ] ****** [106 done /67 queued / 16 running / 105 errors / 17% coverage ] ****** [106 done /67 queued / 16 running / 105 errors / 17% coverage ] ****** [107 done /68 queued / 16 running / 106 errors / 17% coverage ] ****** [107 done /68 queued / 16 running / 106 errors / 17% coverage ] ****** [108 done /68 queued / 16 running / 107 errors / 17% coverage ] ****** [108 done /68 queued / 16 running / 107 errors / 17% coverage ] ****** [109 done /69 queued / 16 running / 108 errors / 17% coverage ] ****** [109 done /69 queued / 16 running / 108 errors / 17% coverage ] ****** [110 done /68 queued / 16 running / 109 errors / 17% coverage ] ****** [110 done /68 queued / 16 running / 109 errors / 17% coverage ] ****** [111 done /71 queued / 16 running / 110 errors / 17% coverage ] ****** [111 done /71 queued / 16 running / 110 errors / 17% coverage ] ****** [112 done /73 queued / 16 running / 111 errors / 17% coverage ] ****** [112 done /73 queued / 16 running / 111 errors / 17% coverage ] ****** [113 done /74 queued / 16 running / 112 errors / 17% coverage ] ****** [113 done /74 queued / 16 running / 112 errors / 17% coverage ] ****** [114 done /73 queued / 16 running / 113 errors / 17% coverage ] ****** [114 done /73 queued / 16 running / 113 errors / 17% coverage ] ****** [115 done /75 queued / 16 running / 114 errors / 17% coverage ] ****** [115 done /75 queued / 16 running / 114 errors / 17% coverage ] ****** [116 done /75 queued / 16 running / 115 errors / 17% coverage ] ****** [116 done /75 queued / 16 running / 115 errors / 17% coverage ] ****** [117 done /75 queued / 16 running / 116 errors / 17% coverage ] ****** [117 done /75 queued / 16 running / 116 errors / 17% coverage ] ****** [118 done /76 queued / 16 running / 117 errors / 17% coverage ] ****** [118 done /76 queued / 16 running / 117 errors / 17% coverage ] ****** [119 done /77 queued / 16 running / 118 errors / 17% coverage ] ****** [119 done /77 queued / 16 running / 118 errors / 17% coverage ] ****** [120 done /77 queued / 16 running / 119 errors / 17% coverage ] ****** [120 done /77 queued / 16 running / 119 errors / 17% coverage ] ****** [121 done /77 queued / 16 running / 120 errors / 17% coverage ] ****** [121 done /77 queued / 16 running / 120 errors / 17% coverage ] ****** [122 done /78 queued / 16 running / 121 errors / 17% coverage ] ****** [122 done /78 queued / 16 running / 121 errors / 17% coverage ] ****** [123 done /79 queued / 16 running / 122 errors / 17% coverage ] ****** [123 done /79 queued / 16 running / 122 errors / 17% coverage ] ****** [124 done /80 queued / 16 running / 123 errors / 17% coverage ] ****** [124 done /80 queued / 16 running / 123 errors / 17% coverage ] ****** [125 done /80 queued / 16 running / 124 errors / 17% coverage ] ****** [125 done /80 queued / 16 running / 124 errors / 17% coverage ] ****** [126 done /81 queued / 16 running / 125 errors / 17% coverage ] ****** [126 done /81 queued / 16 running / 125 errors / 17% coverage ] ****** [127 done /83 queued / 16 running / 126 errors / 17% coverage ] ****** [127 done /83 queued / 16 running / 126 errors / 17% coverage ] ****** [128 done /83 queued / 16 running / 127 errors / 17% coverage ] ****** [128 done /83 queued / 16 running / 127 errors / 17% coverage ] ****** [129 done /84 queued / 16 running / 128 errors / 17% coverage ] ****** [129 done /84 queued / 16 running / 128 errors / 17% coverage ] ****** [130 done /87 queued / 16 running / 129 errors / 17% coverage ] ****** [130 done /87 queued / 16 running / 129 errors / 17% coverage ] ****** [131 done /87 queued / 16 running / 130 errors / 17% coverage ] ****** [131 done /87 queued / 16 running / 130 errors / 17% coverage ] ****** [132 done /87 queued / 16 running / 131 errors / 17% coverage ] ****** [132 done /87 queued / 16 running / 131 errors / 17% coverage ] ****** [133 done /88 queued / 16 running / 132 errors / 17% coverage ] ****** [133 done /88 queued / 16 running / 132 errors / 17% coverage ] ****** [134 done /88 queued / 16 running / 133 errors / 17% coverage ] ****** [134 done /88 queued / 16 running / 133 errors / 17% coverage ] ****** [135 done /89 queued / 16 running / 134 errors / 17% coverage ] ****** [135 done /89 queued / 16 running / 134 errors / 17% coverage ] ****** [136 done /92 queued / 16 running / 135 errors / 17% coverage ] ****** [136 done /92 queued / 16 running / 135 errors / 17% coverage ] ****** [137 done /94 queued / 16 running / 136 errors / 17% coverage ] ****** [137 done /94 queued / 16 running / 136 errors / 17% coverage ] ****** [138 done /93 queued / 16 running / 137 errors / 17% coverage ] ****** [138 done /93 queued / 16 running / 137 errors / 17% coverage ] ****** [139 done /94 queued / 16 running / 138 errors / 17% coverage ] ****** [139 done /94 queued / 16 running / 138 errors / 17% coverage ] ****** [140 done /95 queued / 16 running / 139 errors / 17% coverage ] ****** [140 done /95 queued / 16 running / 139 errors / 17% coverage ] ****** [141 done /97 queued / 16 running / 140 errors / 17% coverage ] ****** [141 done /97 queued / 16 running / 140 errors / 17% coverage ] ****** [142 done /98 queued / 16 running / 141 errors / 17% coverage ] ****** [142 done /98 queued / 16 running / 141 errors / 17% coverage ] ****** [143 done /98 queued / 16 running / 142 errors / 17% coverage ] ****** [143 done /98 queued / 16 running / 142 errors / 17% coverage ] ****** [144 done /99 queued / 16 running / 143 errors / 17% coverage ] ****** [144 done /99 queued / 16 running / 143 errors / 17% coverage ] ****** [145 done /99 queued / 16 running / 144 errors / 17% coverage ] ****** [145 done /99 queued / 16 running / 144 errors / 17% coverage ] ****** [146 done /100 queued / 16 running / 145 errors / 17% coverage ] ****** [146 done /100 queued / 16 running / 145 errors / 17% coverage ] ****** [147 done /101 queued / 16 running / 146 errors / 17% coverage ] ****** [147 done /101 queued / 16 running / 146 errors / 17% coverage ] ****** [148 done /102 queued / 16 running / 147 errors / 17% coverage ] ****** [148 done /102 queued / 16 running / 147 errors / 17% coverage ] ****** [149 done /103 queued / 16 running / 148 errors / 17% coverage ] ****** [149 done /103 queued / 16 running / 148 errors / 17% coverage ] ****** [150 done /102 queued / 16 running / 149 errors / 17% coverage ] ****** [150 done /102 queued / 16 running / 149 errors / 17% coverage ] ****** [151 done /101 queued / 16 running / 150 errors / 17% coverage ] ****** [151 done /101 queued / 16 running / 150 errors / 17% coverage ] ****** [152 done /101 queued / 16 running / 151 errors / 17% coverage ] ****** [152 done /101 queued / 16 running / 151 errors / 17% coverage ] ****** [153 done /104 queued / 16 running / 152 errors / 17% coverage ] ****** [153 done /104 queued / 16 running / 152 errors / 17% coverage ] ****** [154 done /107 queued / 16 running / 153 errors / 17% coverage ] ****** [154 done /107 queued / 16 running / 153 errors / 17% coverage ] ****** [155 done /109 queued / 16 running / 154 errors / 17% coverage ] ****** [155 done /109 queued / 16 running / 154 errors / 17% coverage ] ****** [156 done /109 queued / 16 running / 155 errors / 17% coverage ] ****** [156 done /109 queued / 16 running / 155 errors / 17% coverage ] ****** [157 done /108 queued / 16 running / 156 errors / 17% coverage ] ****** [157 done /108 queued / 16 running / 156 errors / 17% coverage ] ****** [158 done /109 queued / 16 running / 157 errors / 17% coverage ] ****** [158 done /109 queued / 16 running / 157 errors / 17% coverage ] ****** [159 done /110 queued / 16 running / 158 errors / 17% coverage ] ****** [159 done /110 queued / 16 running / 158 errors / 17% coverage ] ****** [160 done /112 queued / 16 running / 159 errors / 17% coverage ] ****** [160 done /112 queued / 16 running / 159 errors / 17% coverage ] ****** [161 done /114 queued / 16 running / 160 errors / 17% coverage ] ****** [161 done /114 queued / 16 running / 160 errors / 17% coverage ] ****** [162 done /114 queued / 16 running / 161 errors / 17% coverage ] ****** [162 done /114 queued / 16 running / 161 errors / 17% coverage ] ****** [163 done /114 queued / 16 running / 162 errors / 17% coverage ] ****** [163 done /114 queued / 16 running / 162 errors / 17% coverage ] ****** [164 done /114 queued / 16 running / 163 errors / 17% coverage ] ****** [164 done /114 queued / 16 running / 163 errors / 17% coverage ] ****** [165 done /114 queued / 16 running / 164 errors / 17% coverage ] ****** [165 done /114 queued / 16 running / 164 errors / 17% coverage ] ****** [166 done /113 queued / 16 running / 165 errors / 17% coverage ] ****** [166 done /113 queued / 16 running / 165 errors / 17% coverage ] ****** [167 done /115 queued / 16 running / 166 errors / 17% coverage ] ****** [167 done /115 queued / 16 running / 166 errors / 17% coverage ] ****** [168 done /117 queued / 16 running / 167 errors / 17% coverage ] ****** [168 done /117 queued / 16 running / 167 errors / 17% coverage ] ****** [169 done /116 queued / 16 running / 168 errors / 17% coverage ] ****** [169 done /116 queued / 16 running / 168 errors / 17% coverage ] ****** [170 done /117 queued / 16 running / 169 errors / 17% coverage ] ****** [170 done /117 queued / 16 running / 169 errors / 17% coverage ] ****** [171 done /116 queued / 16 running / 170 errors / 17% coverage ] ****** [171 done /116 queued / 16 running / 170 errors / 17% coverage ] ****** [172 done /116 queued / 16 running / 171 errors / 17% coverage ] ****** [172 done /116 queued / 16 running / 171 errors / 17% coverage ] ****** [173 done /117 queued / 16 running / 172 errors / 17% coverage ] ****** [173 done /117 queued / 16 running / 172 errors / 17% coverage ] ****** [174 done /117 queued / 16 running / 173 errors / 17% coverage ] ****** [174 done /117 queued / 16 running / 173 errors / 17% coverage ] ****** [175 done /117 queued / 16 running / 174 errors / 17% coverage ] ****** [175 done /117 queued / 16 running / 174 errors / 17% coverage ] ****** [176 done /119 queued / 16 running / 175 errors / 17% coverage ] ****** [176 done /119 queued / 16 running / 175 errors / 17% coverage ] ****** [177 done /118 queued / 16 running / 176 errors / 17% coverage ] ****** [177 done /118 queued / 16 running / 176 errors / 17% coverage ] ****** [178 done /121 queued / 16 running / 177 errors / 17% coverage ] ****** [178 done /121 queued / 16 running / 177 errors / 17% coverage ] ****** [179 done /120 queued / 16 running / 178 errors / 17% coverage ] ****** [179 done /120 queued / 16 running / 178 errors / 17% coverage ] ****** [180 done /120 queued / 16 running / 179 errors / 17% coverage ] ****** [180 done /120 queued / 16 running / 179 errors / 17% coverage ] ****** [181 done /121 queued / 16 running / 180 errors / 17% coverage ] ****** [181 done /121 queued / 16 running / 180 errors / 17% coverage ] ****** [182 done /122 queued / 16 running / 181 errors / 17% coverage ] ****** [182 done /122 queued / 16 running / 181 errors / 17% coverage ] ****** [183 done /124 queued / 16 running / 182 errors / 17% coverage ] ****** [183 done /124 queued / 16 running / 182 errors / 17% coverage ] ****** [184 done /125 queued / 16 running / 183 errors / 17% coverage ] ****** [184 done /125 queued / 16 running / 183 errors / 17% coverage ] ****** [185 done /125 queued / 16 running / 184 errors / 17% coverage ] ****** [185 done /125 queued / 16 running / 184 errors / 17% coverage ] ****** [186 done /126 queued / 16 running / 185 errors / 17% coverage ] ****** [186 done /126 queued / 16 running / 185 errors / 17% coverage ] ****** [187 done /127 queued / 16 running / 186 errors / 17% coverage ] ****** [187 done /127 queued / 16 running / 186 errors / 17% coverage ] ****** [188 done /126 queued / 16 running / 187 errors / 17% coverage ] ****** [188 done /126 queued / 16 running / 187 errors / 17% coverage ] ****** [189 done /127 queued / 16 running / 188 errors / 17% coverage ] ****** [189 done /127 queued / 16 running / 188 errors / 17% coverage ] ****** [190 done /127 queued / 16 running / 189 errors / 17% coverage ] ****** [190 done /127 queued / 16 running / 189 errors / 17% coverage ] ****** [191 done /128 queued / 16 running / 190 errors / 17% coverage ] ****** [191 done /128 queued / 16 running / 190 errors / 17% coverage ] ****** [192 done /130 queued / 16 running / 191 errors / 17% coverage ] ****** [192 done /130 queued / 16 running / 191 errors / 17% coverage ] ****** [193 done /132 queued / 16 running / 192 errors / 17% coverage ] ****** [193 done /132 queued / 16 running / 192 errors / 17% coverage ] ****** [194 done /133 queued / 16 running / 193 errors / 17% coverage ] ****** [194 done /133 queued / 16 running / 193 errors / 17% coverage ] ****** [195 done /134 queued / 16 running / 194 errors / 17% coverage ] ****** [195 done /134 queued / 16 running / 194 errors / 17% coverage ] ****** [196 done /134 queued / 16 running / 195 errors / 17% coverage ] ****** [196 done /134 queued / 16 running / 195 errors / 17% coverage ] ****** [197 done /136 queued / 16 running / 196 errors / 17% coverage ] ****** [197 done /136 queued / 16 running / 196 errors / 17% coverage ] ****** [198 done /136 queued / 16 running / 197 errors / 17% coverage ] ****** [198 done /136 queued / 16 running / 197 errors / 17% coverage ] ****** [199 done /137 queued / 16 running / 198 errors / 17% coverage ] ****** [199 done /137 queued / 16 running / 198 errors / 17% coverage ] ****** [200 done /138 queued / 16 running / 199 errors / 17% coverage ] ****** [200 done /138 queued / 16 running / 199 errors / 17% coverage ] ****** [201 done /137 queued / 16 running / 200 errors / 17% coverage ] ****** [201 done /137 queued / 16 running / 200 errors / 17% coverage ] ****** [202 done /137 queued / 16 running / 201 errors / 17% coverage ] ****** [202 done /137 queued / 16 running / 201 errors / 17% coverage ] ****** [203 done /137 queued / 16 running / 202 errors / 17% coverage ] ****** [203 done /137 queued / 16 running / 202 errors / 17% coverage ] ****** [204 done /141 queued / 16 running / 203 errors / 17% coverage ] ****** [204 done /141 queued / 16 running / 203 errors / 17% coverage ] ****** [205 done /142 queued / 16 running / 204 errors / 17% coverage ] ****** [205 done /142 queued / 16 running / 204 errors / 17% coverage ] ****** [206 done /143 queued / 16 running / 205 errors / 17% coverage ] ****** [206 done /143 queued / 16 running / 205 errors / 17% coverage ] ****** [207 done /145 queued / 16 running / 206 errors / 17% coverage ] ****** [207 done /145 queued / 16 running / 206 errors / 17% coverage ] ****** [208 done /146 queued / 16 running / 207 errors / 17% coverage ] ****** [208 done /146 queued / 16 running / 207 errors / 17% coverage ] ****** [209 done /148 queued / 16 running / 208 errors / 17% coverage ] ****** [209 done /148 queued / 16 running / 208 errors / 17% coverage ] ****** [210 done /148 queued / 16 running / 209 errors / 17% coverage ] ****** [210 done /148 queued / 16 running / 209 errors / 17% coverage ] ****** [211 done /149 queued / 16 running / 210 errors / 17% coverage ] ****** [211 done /149 queued / 16 running / 210 errors / 17% coverage ] ****** [212 done /150 queued / 16 running / 211 errors / 17% coverage ] ****** [212 done /150 queued / 16 running / 211 errors / 17% coverage ] ****** [213 done /151 queued / 16 running / 212 errors / 17% coverage ] ****** [213 done /151 queued / 16 running / 212 errors / 17% coverage ] ****** [214 done /151 queued / 16 running / 213 errors / 17% coverage ] ****** [214 done /151 queued / 16 running / 213 errors / 17% coverage ] ****** [215 done /153 queued / 16 running / 214 errors / 17% coverage ] ****** [215 done /153 queued / 16 running / 214 errors / 17% coverage ] ****** [216 done /156 queued / 16 running / 215 errors / 17% coverage ] ****** [216 done /156 queued / 16 running / 215 errors / 17% coverage ] ****** [217 done /158 queued / 16 running / 216 errors / 17% coverage ] ****** [217 done /158 queued / 16 running / 216 errors / 17% coverage ] ****** [218 done /162 queued / 16 running / 217 errors / 17% coverage ] ****** [218 done /162 queued / 16 running / 217 errors / 17% coverage ] ****** [219 done /163 queued / 16 running / 218 errors / 17% coverage ] ****** [219 done /163 queued / 16 running / 218 errors / 17% coverage ] ****** [220 done /164 queued / 16 running / 219 errors / 17% coverage ] ****** [220 done /164 queued / 16 running / 219 errors / 17% coverage ] ****** [221 done /167 queued / 16 running / 220 errors / 17% coverage ] ****** [221 done /167 queued / 16 running / 220 errors / 17% coverage ] ****** [222 done /168 queued / 16 running / 221 errors / 17% coverage ] ****** [222 done /168 queued / 16 running / 221 errors / 17% coverage ] ****** [223 done /169 queued / 16 running / 222 errors / 17% coverage ] ****** [223 done /169 queued / 16 running / 222 errors / 17% coverage ] ****** [224 done /170 queued / 16 running / 223 errors / 17% coverage ] ****** [224 done /170 queued / 16 running / 223 errors / 17% coverage ] ****** [225 done /169 queued / 16 running / 224 errors / 17% coverage ] ****** [225 done /169 queued / 16 running / 224 errors / 17% coverage ] ****** [226 done /169 queued / 16 running / 225 errors / 17% coverage ] ****** [226 done /169 queued / 16 running / 225 errors / 17% coverage ] ****** [227 done /171 queued / 16 running / 226 errors / 17% coverage ] ****** [227 done /171 queued / 16 running / 226 errors / 17% coverage ] ****** [228 done /173 queued / 16 running / 227 errors / 17% coverage ] ****** [228 done /173 queued / 16 running / 227 errors / 17% coverage ] ****** [229 done /175 queued / 16 running / 228 errors / 17% coverage ] ****** [229 done /175 queued / 16 running / 228 errors / 17% coverage ] ****** [230 done /178 queued / 16 running / 229 errors / 17% coverage ] ****** [230 done /178 queued / 16 running / 229 errors / 17% coverage ] ****** [231 done /181 queued / 16 running / 230 errors / 17% coverage ] ****** [231 done /181 queued / 16 running / 230 errors / 17% coverage ] ****** [232 done /180 queued / 16 running / 231 errors / 17% coverage ] ****** [232 done /180 queued / 16 running / 231 errors / 17% coverage ] ****** [233 done /181 queued / 16 running / 232 errors / 17% coverage ] ****** [233 done /181 queued / 16 running / 232 errors / 17% coverage ] ****** [234 done /183 queued / 16 running / 233 errors / 17% coverage ] ****** [234 done /183 queued / 16 running / 233 errors / 17% coverage ] ****** [235 done /183 queued / 16 running / 234 errors / 17% coverage ] ****** [235 done /183 queued / 16 running / 234 errors / 17% coverage ] ****** [236 done /184 queued / 16 running / 235 errors / 17% coverage ] ****** [236 done /184 queued / 16 running / 235 errors / 17% coverage ] ****** [237 done /186 queued / 16 running / 236 errors / 17% coverage ] ****** [237 done /186 queued / 16 running / 236 errors / 17% coverage ] ****** [238 done /186 queued / 16 running / 237 errors / 17% coverage ] ****** [238 done /186 queued / 16 running / 237 errors / 17% coverage ] ****** [239 done /187 queued / 16 running / 238 errors / 17% coverage ] ****** [239 done /187 queued / 16 running / 238 errors / 17% coverage ] ****** [240 done /187 queued / 16 running / 239 errors / 17% coverage ] ****** [240 done /187 queued / 16 running / 239 errors / 17% coverage ] ****** [241 done /188 queued / 16 running / 240 errors / 17% coverage ] ****** [241 done /188 queued / 16 running / 240 errors / 17% coverage ] ****** [242 done /187 queued / 16 running / 241 errors / 17% coverage ] ****** [242 done /187 queued / 16 running / 241 errors / 17% coverage ] ****** [243 done /188 queued / 16 running / 242 errors / 17% coverage ] ****** [243 done /188 queued / 16 running / 242 errors / 17% coverage ] ****** [244 done /188 queued / 16 running / 243 errors / 17% coverage ] ****** [244 done /188 queued / 16 running / 243 errors / 17% coverage ] ****** [245 done /188 queued / 16 running / 244 errors / 17% coverage ] ****** [245 done /188 queued / 16 running / 244 errors / 17% coverage ] ****** [246 done /192 queued / 16 running / 245 errors / 17% coverage ] ****** [246 done /192 queued / 16 running / 245 errors / 17% coverage ] ****** [247 done /191 queued / 16 running / 246 errors / 17% coverage ] ****** [247 done /191 queued / 16 running / 246 errors / 17% coverage ] ****** [248 done /190 queued / 16 running / 247 errors / 17% coverage ] ****** [248 done /190 queued / 16 running / 247 errors / 17% coverage ] ****** [249 done /193 queued / 16 running / 248 errors / 17% coverage ] ****** [249 done /193 queued / 16 running / 248 errors / 17% coverage ] ****** [250 done /193 queued / 16 running / 249 errors / 17% coverage ] ****** [250 done /193 queued / 16 running / 249 errors / 17% coverage ] ****** [251 done /192 queued / 16 running / 250 errors / 17% coverage ] ****** [251 done /192 queued / 16 running / 250 errors / 17% coverage ] ****** [252 done /192 queued / 16 running / 251 errors / 17% coverage ] ****** [252 done /192 queued / 16 running / 251 errors / 17% coverage ] ****** [253 done /191 queued / 16 running / 252 errors / 17% coverage ] ****** [253 done /191 queued / 16 running / 252 errors / 17% coverage ] ****** [254 done /192 queued / 16 running / 253 errors / 17% coverage ] ****** [254 done /192 queued / 16 running / 253 errors / 17% coverage ] ****** [255 done /194 queued / 16 running / 254 errors / 17% coverage ] ****** [255 done /194 queued / 16 running / 254 errors / 17% coverage ] ****** [256 done /196 queued / 16 running / 255 errors / 17% coverage ] ****** [256 done /196 queued / 16 running / 255 errors / 17% coverage ] ****** [257 done /196 queued / 16 running / 256 errors / 17% coverage ] ****** [257 done /196 queued / 16 running / 256 errors / 17% coverage ] ****** [258 done /197 queued / 16 running / 257 errors / 17% coverage ] ****** [258 done /197 queued / 16 running / 257 errors / 17% coverage ] ****** [259 done /198 queued / 16 running / 258 errors / 17% coverage ] ****** [259 done /198 queued / 16 running / 258 errors / 17% coverage ] ****** [260 done /199 queued / 16 running / 259 errors / 17% coverage ] ****** [260 done /199 queued / 16 running / 259 errors / 17% coverage ] ****** [261 done /202 queued / 16 running / 260 errors / 17% coverage ] ****** [261 done /202 queued / 16 running / 260 errors / 17% coverage ] ****** [262 done /203 queued / 16 running / 261 errors / 17% coverage ] ****** [262 done /203 queued / 16 running / 261 errors / 17% coverage ] ****** [263 done /204 queued / 16 running / 262 errors / 17% coverage ] ****** [263 done /204 queued / 16 running / 262 errors / 17% coverage ] ****** [264 done /206 queued / 16 running / 263 errors / 17% coverage ] ****** [264 done /206 queued / 16 running / 263 errors / 17% coverage ] ****** [265 done /207 queued / 16 running / 264 errors / 17% coverage ] ****** [265 done /207 queued / 16 running / 264 errors / 17% coverage ] ****** [266 done /208 queued / 16 running / 265 errors / 17% coverage ] ****** [266 done /208 queued / 16 running / 265 errors / 17% coverage ] ****** [267 done /210 queued / 16 running / 266 errors / 17% coverage ] ****** [267 done /210 queued / 16 running / 266 errors / 17% coverage ] ****** [268 done /210 queued / 16 running / 267 errors / 17% coverage ] ****** [268 done /210 queued / 16 running / 267 errors / 17% coverage ] ****** [269 done /209 queued / 16 running / 268 errors / 17% coverage ] ****** [269 done /209 queued / 16 running / 268 errors / 17% coverage ] ****** [270 done /209 queued / 16 running / 269 errors / 17% coverage ] ****** [270 done /209 queued / 16 running / 269 errors / 17% coverage ] ****** [271 done /210 queued / 16 running / 270 errors / 17% coverage ] ****** [271 done /210 queued / 16 running / 270 errors / 17% coverage ] ****** [272 done /209 queued / 16 running / 271 errors / 17% coverage ] ****** [272 done /209 queued / 16 running / 271 errors / 17% coverage ] ****** [273 done /209 queued / 16 running / 272 errors / 17% coverage ] ****** [273 done /209 queued / 16 running / 272 errors / 17% coverage ] ****** [274 done /209 queued / 16 running / 273 errors / 17% coverage ] ****** [274 done /209 queued / 16 running / 273 errors / 17% coverage ] ****** [275 done /210 queued / 16 running / 274 errors / 17% coverage ] ****** [275 done /210 queued / 16 running / 274 errors / 17% coverage ] ****** [276 done /212 queued / 16 running / 275 errors / 17% coverage ] ****** [276 done /212 queued / 16 running / 275 errors / 17% coverage ] ****** [277 done /211 queued / 16 running / 276 errors / 17% coverage ] ****** [277 done /211 queued / 16 running / 276 errors / 17% coverage ] ****** [278 done /212 queued / 16 running / 277 errors / 17% coverage ] ****** [278 done /212 queued / 16 running / 277 errors / 17% coverage ] ****** [279 done /212 queued / 16 running / 278 errors / 17% coverage ] ****** [279 done /212 queued / 16 running / 278 errors / 17% coverage ] ****** [280 done /211 queued / 16 running / 279 errors / 17% coverage ] ****** [280 done /211 queued / 16 running / 279 errors / 17% coverage ] ****** [281 done /213 queued / 16 running / 280 errors / 17% coverage ] ****** [281 done /213 queued / 16 running / 280 errors / 17% coverage ] ****** [282 done /212 queued / 16 running / 281 errors / 17% coverage ] ****** [282 done /212 queued / 16 running / 281 errors / 17% coverage ] ****** [283 done /212 queued / 16 running / 282 errors / 17% coverage ] ****** [283 done /212 queued / 16 running / 282 errors / 17% coverage ] ****** [284 done /213 queued / 16 running / 283 errors / 17% coverage ] ****** [284 done /213 queued / 16 running / 283 errors / 17% coverage ] ****** [285 done /214 queued / 16 running / 284 errors / 17% coverage ] ****** [285 done /214 queued / 16 running / 284 errors / 17% coverage ] ****** [286 done /215 queued / 16 running / 285 errors / 17% coverage ] ****** [286 done /215 queued / 16 running / 285 errors / 17% coverage ] ****** [287 done /219 queued / 16 running / 286 errors / 17% coverage ] ****** [287 done /219 queued / 16 running / 286 errors / 17% coverage ] ****** [288 done /219 queued / 16 running / 287 errors / 17% coverage ] ****** [288 done /219 queued / 16 running / 287 errors / 17% coverage ] ****** [289 done /222 queued / 16 running / 288 errors / 17% coverage ] ****** [289 done /222 queued / 16 running / 288 errors / 17% coverage ] ****** [290 done /223 queued / 16 running / 289 errors / 17% coverage ] ****** [290 done /223 queued / 16 running / 289 errors / 17% coverage ] ****** [291 done /223 queued / 16 running / 290 errors / 17% coverage ] ****** [291 done /223 queued / 16 running / 290 errors / 17% coverage ] ****** [292 done /222 queued / 16 running / 291 errors / 17% coverage ] ****** [292 done /222 queued / 16 running / 291 errors / 17% coverage ] ****** [293 done /223 queued / 16 running / 292 errors / 17% coverage ] ****** [293 done /223 queued / 16 running / 292 errors / 17% coverage ] ****** [294 done /225 queued / 16 running / 293 errors / 17% coverage ] ****** [294 done /225 queued / 16 running / 293 errors / 17% coverage ] ****** [295 done /225 queued / 16 running / 294 errors / 17% coverage ] ****** [295 done /225 queued / 16 running / 294 errors / 17% coverage ] ****** [296 done /229 queued / 16 running / 295 errors / 17% coverage ] ****** [296 done /229 queued / 16 running / 295 errors / 17% coverage ] ****** [297 done /228 queued / 16 running / 296 errors / 17% coverage ] ****** [297 done /228 queued / 16 running / 296 errors / 17% coverage ] ****** [298 done /228 queued / 16 running / 297 errors / 17% coverage ] ****** [298 done /228 queued / 16 running / 297 errors / 17% coverage ] ****** [299 done /229 queued / 16 running / 298 errors / 17% coverage ] ****** [299 done /229 queued / 16 running / 298 errors / 17% coverage ] ****** [300 done /229 queued / 16 running / 299 errors / 17% coverage ] ****** [300 done /229 queued / 16 running / 299 errors / 17% coverage ] ****** [301 done /230 queued / 16 running / 300 errors / 17% coverage ] ****** [301 done /230 queued / 16 running / 300 errors / 17% coverage ] ****** [302 done /231 queued / 16 running / 301 errors / 17% coverage ] ****** [302 done /231 queued / 16 running / 301 errors / 17% coverage ] ****** [303 done /232 queued / 16 running / 302 errors / 17% coverage ] ****** [303 done /232 queued / 16 running / 302 errors / 17% coverage ] ****** [304 done /232 queued / 16 running / 303 errors / 17% coverage ] ****** [304 done /232 queued / 16 running / 303 errors / 17% coverage ] ****** [305 done /231 queued / 16 running / 304 errors / 17% coverage ] ****** [305 done /231 queued / 16 running / 304 errors / 17% coverage ] ****** [306 done /230 queued / 16 running / 305 errors / 17% coverage ] ****** [306 done /230 queued / 16 running / 305 errors / 17% coverage ] ****** [307 done /231 queued / 16 running / 306 errors / 17% coverage ] ****** [307 done /231 queued / 16 running / 306 errors / 17% coverage ] ****** [308 done /232 queued / 16 running / 307 errors / 17% coverage ] ****** [308 done /232 queued / 16 running / 307 errors / 17% coverage ] ****** [309 done /232 queued / 16 running / 308 errors / 17% coverage ] ****** [309 done /232 queued / 16 running / 308 errors / 17% coverage ] ****** [310 done /233 queued / 16 running / 309 errors / 17% coverage ] ****** [310 done /233 queued / 16 running / 309 errors / 17% coverage ] ****** [311 done /232 queued / 16 running / 310 errors / 17% coverage ] ****** [311 done /232 queued / 16 running / 310 errors / 17% coverage ] ****** [312 done /232 queued / 16 running / 311 errors / 17% coverage ] ****** [312 done /232 queued / 16 running / 311 errors / 17% coverage ] ****** [313 done /231 queued / 16 running / 312 errors / 17% coverage ] ****** [313 done /231 queued / 16 running / 312 errors / 17% coverage ] ****** [314 done /232 queued / 16 running / 313 errors / 17% coverage ] ****** [314 done /232 queued / 16 running / 313 errors / 17% coverage ] ****** [315 done /233 queued / 16 running / 314 errors / 17% coverage ] ****** [315 done /233 queued / 16 running / 314 errors / 17% coverage ] ****** [316 done /236 queued / 16 running / 315 errors / 17% coverage ] ****** [316 done /236 queued / 16 running / 315 errors / 17% coverage ] ****** [317 done /236 queued / 16 running / 316 errors / 17% coverage ] ****** [317 done /236 queued / 16 running / 316 errors / 17% coverage ] ****** [318 done /236 queued / 16 running / 317 errors / 17% coverage ] ****** [318 done /236 queued / 16 running / 317 errors / 17% coverage ] ****** [319 done /236 queued / 16 running / 318 errors / 17% coverage ] ****** [319 done /236 queued / 16 running / 318 errors / 17% coverage ] ****** [320 done /237 queued / 16 running / 319 errors / 17% coverage ] ****** [320 done /237 queued / 16 running / 319 errors / 17% coverage ] ****** [321 done /237 queued / 16 running / 320 errors / 17% coverage ] ****** [321 done /237 queued / 16 running / 320 errors / 17% coverage ] ****** [322 done /236 queued / 16 running / 321 errors / 17% coverage ] ****** [322 done /236 queued / 16 running / 321 errors / 17% coverage ] ****** [323 done /235 queued / 16 running / 322 errors / 17% coverage ] ****** [323 done /235 queued / 16 running / 322 errors / 17% coverage ] ****** [324 done /235 queued / 16 running / 323 errors / 17% coverage ] ****** [324 done /235 queued / 16 running / 323 errors / 17% coverage ] ****** [325 done /235 queued / 16 running / 324 errors / 17% coverage ] ****** [325 done /235 queued / 16 running / 324 errors / 17% coverage ] ****** [326 done /237 queued / 16 running / 325 errors / 17% coverage ] ****** [326 done /237 queued / 16 running / 325 errors / 17% coverage ] ****** [327 done /237 queued / 16 running / 326 errors / 17% coverage ] ****** [327 done /237 queued / 16 running / 326 errors / 17% coverage ] ****** [328 done /238 queued / 16 running / 327 errors / 17% coverage ] ****** [328 done /238 queued / 16 running / 327 errors / 17% coverage ] ****** [329 done /238 queued / 16 running / 328 errors / 17% coverage ] ****** [329 done /238 queued / 16 running / 328 errors / 17% coverage ] ****** [330 done /237 queued / 16 running / 329 errors / 17% coverage ] ****** [330 done /237 queued / 16 running / 329 errors / 17% coverage ] ****** [331 done /237 queued / 16 running / 330 errors / 17% coverage ] ****** [331 done /237 queued / 16 running / 330 errors / 17% coverage ] ****** [332 done /237 queued / 16 running / 331 errors / 17% coverage ] ****** [332 done /237 queued / 16 running / 331 errors / 17% coverage ] ****** [333 done /238 queued / 16 running / 332 errors / 17% coverage ] ****** [333 done /238 queued / 16 running / 332 errors / 17% coverage ] ****** [334 done /240 queued / 16 running / 333 errors / 17% coverage ] ****** [334 done /240 queued / 16 running / 333 errors / 17% coverage ] ****** [335 done /244 queued / 16 running / 334 errors / 17% coverage ] ****** [335 done /244 queued / 16 running / 334 errors / 17% coverage ] ****** [336 done /245 queued / 16 running / 335 errors / 17% coverage ] ****** [336 done /245 queued / 16 running / 335 errors / 17% coverage ] ****** [337 done /248 queued / 16 running / 336 errors / 17% coverage ] ****** [337 done /248 queued / 16 running / 336 errors / 17% coverage ] ****** [338 done /250 queued / 16 running / 337 errors / 17% coverage ] ****** [338 done /250 queued / 16 running / 337 errors / 17% coverage ] ****** [339 done /250 queued / 16 running / 338 errors / 17% coverage ] ****** [339 done /250 queued / 16 running / 338 errors / 17% coverage ] ****** [340 done /252 queued / 16 running / 339 errors / 17% coverage ] ****** [340 done /252 queued / 16 running / 339 errors / 17% coverage ] ****** [341 done /257 queued / 16 running / 340 errors / 17% coverage ] ****** [341 done /257 queued / 16 running / 340 errors / 17% coverage ] ****** [342 done /258 queued / 16 running / 341 errors / 17% coverage ] ****** [342 done /258 queued / 16 running / 341 errors / 17% coverage ] ****** [343 done /257 queued / 16 running / 342 errors / 17% coverage ] ****** [343 done /257 queued / 16 running / 342 errors / 17% coverage ] ****** [344 done /260 queued / 16 running / 343 errors / 17% coverage ] ****** [344 done /260 queued / 16 running / 343 errors / 17% coverage ] ****** [345 done /263 queued / 16 running / 344 errors / 17% coverage ] ****** [345 done /263 queued / 16 running / 344 errors / 17% coverage ] ****** [346 done /264 queued / 16 running / 345 errors / 17% coverage ] ****** [346 done /264 queued / 16 running / 345 errors / 17% coverage ] ****** [347 done /265 queued / 16 running / 346 errors / 17% coverage ] ****** [347 done /265 queued / 16 running / 346 errors / 17% coverage ] ****** [348 done /266 queued / 16 running / 347 errors / 17% coverage ] ****** [348 done /266 queued / 16 running / 347 errors / 17% coverage ] ****** [349 done /266 queued / 16 running / 348 errors / 17% coverage ] ****** [349 done /266 queued / 16 running / 348 errors / 17% coverage ] ****** [350 done /267 queued / 16 running / 349 errors / 17% coverage ] ****** [350 done /267 queued / 16 running / 349 errors / 17% coverage ] ****** [351 done /267 queued / 16 running / 350 errors / 17% coverage ] ****** [351 done /267 queued / 16 running / 350 errors / 17% coverage ] ****** [352 done /267 queued / 16 running / 351 errors / 17% coverage ] ****** [352 done /267 queued / 16 running / 351 errors / 17% coverage ] ****** [353 done /267 queued / 16 running / 352 errors / 17% coverage ] ****** [353 done /267 queued / 16 running / 352 errors / 17% coverage ] ****** [354 done /269 queued / 16 running / 353 errors / 17% coverage ] ****** [354 done /269 queued / 16 running / 353 errors / 17% coverage ] ****** [355 done /270 queued / 16 running / 354 errors / 17% coverage ] ****** [355 done /270 queued / 16 running / 354 errors / 17% coverage ] ****** [356 done /270 queued / 16 running / 355 errors / 17% coverage ] ****** [356 done /270 queued / 16 running / 355 errors / 17% coverage ] ****** [357 done /271 queued / 16 running / 356 errors / 17% coverage ] ****** [357 done /271 queued / 16 running / 356 errors / 17% coverage ] ****** [358 done /270 queued / 16 running / 357 errors / 17% coverage ] ****** [358 done /270 queued / 16 running / 357 errors / 17% coverage ] ****** [359 done /270 queued / 16 running / 358 errors / 17% coverage ] ****** [359 done /270 queued / 16 running / 358 errors / 17% coverage ] ****** [360 done /271 queued / 16 running / 359 errors / 17% coverage ] ****** [360 done /271 queued / 16 running / 359 errors / 17% coverage ] ****** [361 done /270 queued / 16 running / 360 errors / 17% coverage ] ****** [361 done /270 queued / 16 running / 360 errors / 17% coverage ] ****** [362 done /269 queued / 16 running / 361 errors / 17% coverage ] ****** [362 done /269 queued / 16 running / 361 errors / 17% coverage ] ****** [363 done /269 queued / 16 running / 362 errors / 17% coverage ] ****** [363 done /269 queued / 16 running / 362 errors / 17% coverage ] ****** [364 done /268 queued / 16 running / 363 errors / 17% coverage ] ****** [364 done /268 queued / 16 running / 363 errors / 17% coverage ] ****** [365 done /267 queued / 16 running / 364 errors / 17% coverage ] ****** [365 done /267 queued / 16 running / 364 errors / 17% coverage ] ****** [366 done /266 queued / 16 running / 365 errors / 17% coverage ] ****** [366 done /266 queued / 16 running / 365 errors / 17% coverage ] ****** [367 done /265 queued / 16 running / 366 errors / 17% coverage ] ****** [367 done /265 queued / 16 running / 366 errors / 17% coverage ] ****** [368 done /266 queued / 16 running / 367 errors / 17% coverage ] ****** [368 done /266 queued / 16 running / 367 errors / 17% coverage ] ****** [369 done /266 queued / 16 running / 368 errors / 17% coverage ] ****** [369 done /266 queued / 16 running / 368 errors / 17% coverage ] ****** [370 done /265 queued / 16 running / 369 errors / 17% coverage ] ****** [370 done /265 queued / 16 running / 369 errors / 17% coverage ] ****** [371 done /265 queued / 16 running / 370 errors / 17% coverage ] ****** [371 done /265 queued / 16 running / 370 errors / 17% coverage ] ****** [372 done /266 queued / 16 running / 371 errors / 17% coverage ] ****** [372 done /266 queued / 16 running / 371 errors / 17% coverage ] ****** [373 done /265 queued / 16 running / 372 errors / 17% coverage ] ****** [373 done /265 queued / 16 running / 372 errors / 17% coverage ] ****** [374 done /267 queued / 16 running / 373 errors / 17% coverage ] ****** [374 done /267 queued / 16 running / 373 errors / 17% coverage ] ****** [375 done /266 queued / 16 running / 374 errors / 17% coverage ] ****** [375 done /266 queued / 16 running / 374 errors / 17% coverage ] ****** [376 done /267 queued / 16 running / 375 errors / 17% coverage ] ****** [376 done /267 queued / 16 running / 375 errors / 17% coverage ] ****** [377 done /267 queued / 16 running / 376 errors / 17% coverage ] ****** [377 done /267 queued / 16 running / 376 errors / 17% coverage ] ****** [378 done /271 queued / 16 running / 377 errors / 17% coverage ] ****** [378 done /271 queued / 16 running / 377 errors / 17% coverage ] ****** [379 done /274 queued / 16 running / 378 errors / 17% coverage ] ****** [379 done /274 queued / 16 running / 378 errors / 17% coverage ] ****** [380 done /275 queued / 16 running / 379 errors / 17% coverage ] ****** [380 done /275 queued / 16 running / 379 errors / 17% coverage ] ****** [381 done /275 queued / 16 running / 380 errors / 17% coverage ] ****** [381 done /275 queued / 16 running / 380 errors / 17% coverage ] ****** [382 done /278 queued / 16 running / 381 errors / 17% coverage ] ****** [382 done /278 queued / 16 running / 381 errors / 17% coverage ] ****** [383 done /279 queued / 16 running / 382 errors / 17% coverage ] ****** [383 done /279 queued / 16 running / 382 errors / 17% coverage ] ****** [384 done /279 queued / 16 running / 383 errors / 17% coverage ] ****** [384 done /279 queued / 16 running / 383 errors / 17% coverage ] ****** [385 done /280 queued / 16 running / 384 errors / 17% coverage ] ****** [385 done /280 queued / 16 running / 384 errors / 17% coverage ] ****** [386 done /282 queued / 16 running / 385 errors / 17% coverage ] ****** [386 done /282 queued / 16 running / 385 errors / 17% coverage ] ****** [387 done /285 queued / 16 running / 386 errors / 17% coverage ] ****** [387 done /285 queued / 16 running / 386 errors / 17% coverage ] ****** [388 done /286 queued / 16 running / 387 errors / 17% coverage ] ****** [388 done /286 queued / 16 running / 387 errors / 17% coverage ] ****** [389 done /288 queued / 16 running / 388 errors / 17% coverage ] ****** [389 done /288 queued / 16 running / 388 errors / 17% coverage ] ****** [390 done /289 queued / 16 running / 389 errors / 17% coverage ] ****** [390 done /289 queued / 16 running / 389 errors / 17% coverage ] ****** [391 done /292 queued / 16 running / 390 errors / 17% coverage ] ****** [391 done /292 queued / 16 running / 390 errors / 17% coverage ] ****** [392 done /295 queued / 16 running / 391 errors / 17% coverage ] ****** [392 done /295 queued / 16 running / 391 errors / 17% coverage ] ****** [393 done /298 queued / 16 running / 392 errors / 17% coverage ] ****** [393 done /298 queued / 16 running / 392 errors / 17% coverage ] ****** [394 done /297 queued / 16 running / 393 errors / 17% coverage ] ****** [394 done /297 queued / 16 running / 393 errors / 17% coverage ] ****** [395 done /297 queued / 16 running / 394 errors / 17% coverage ] ****** [395 done /297 queued / 16 running / 394 errors / 17% coverage ] ****** [396 done /296 queued / 16 running / 395 errors / 17% coverage ] ****** [396 done /296 queued / 16 running / 395 errors / 17% coverage ] ****** [397 done /297 queued / 16 running / 396 errors / 17% coverage ] ****** [397 done /297 queued / 16 running / 396 errors / 17% coverage ] ****** [398 done /298 queued / 16 running / 397 errors / 17% coverage ] ****** [398 done /298 queued / 16 running / 397 errors / 17% coverage ] ****** [399 done /299 queued / 16 running / 398 errors / 17% coverage ] ****** [399 done /299 queued / 16 running / 398 errors / 17% coverage ] ****** [400 done /298 queued / 16 running / 399 errors / 17% coverage ] ****** [400 done /298 queued / 16 running / 399 errors / 17% coverage ] ****** [401 done /298 queued / 16 running / 400 errors / 17% coverage ] ****** [401 done /298 queued / 16 running / 400 errors / 17% coverage ] ****** [402 done /298 queued / 16 running / 401 errors / 17% coverage ] ****** [402 done /298 queued / 16 running / 401 errors / 17% coverage ] ****** [403 done /298 queued / 16 running / 402 errors / 17% coverage ] ****** [403 done /298 queued / 16 running / 402 errors / 17% coverage ] ****** [404 done /299 queued / 16 running / 403 errors / 17% coverage ] ****** [404 done /299 queued / 16 running / 403 errors / 17% coverage ] ****** [405 done /301 queued / 16 running / 404 errors / 17% coverage ] ****** [405 done /301 queued / 16 running / 404 errors / 17% coverage ] ****** [406 done /301 queued / 16 running / 405 errors / 17% coverage ] ****** [406 done /301 queued / 16 running / 405 errors / 17% coverage ] ****** [407 done /300 queued / 16 running / 406 errors / 17% coverage ] ****** [407 done /300 queued / 16 running / 406 errors / 17% coverage ] ****** [408 done /300 queued / 16 running / 407 errors / 17% coverage ] ****** [408 done /300 queued / 16 running / 407 errors / 17% coverage ] ****** [409 done /299 queued / 16 running / 408 errors / 17% coverage ] ****** [409 done /299 queued / 16 running / 408 errors / 17% coverage ] ****** [410 done /299 queued / 16 running / 409 errors / 17% coverage ] ****** [410 done /299 queued / 16 running / 409 errors / 17% coverage ] ****** [411 done /299 queued / 16 running / 410 errors / 17% coverage ] ****** [411 done /299 queued / 16 running / 410 errors / 17% coverage ] ****** [412 done /299 queued / 16 running / 411 errors / 17% coverage ] ****** [412 done /299 queued / 16 running / 411 errors / 17% coverage ] ****** [413 done /298 queued / 16 running / 412 errors / 17% coverage ] ****** [413 done /298 queued / 16 running / 412 errors / 17% coverage ] ****** [414 done /297 queued / 16 running / 413 errors / 17% coverage ] ****** [414 done /297 queued / 16 running / 413 errors / 17% coverage ] ****** [415 done /297 queued / 16 running / 414 errors / 17% coverage ] ****** [415 done /297 queued / 16 running / 414 errors / 17% coverage ] ****** [416 done /298 queued / 16 running / 415 errors / 17% coverage ] ****** [416 done /298 queued / 16 running / 415 errors / 17% coverage ] ****** [417 done /299 queued / 16 running / 416 errors / 17% coverage ] ****** [417 done /299 queued / 16 running / 416 errors / 17% coverage ] ****** [418 done /298 queued / 16 running / 417 errors / 17% coverage ] ****** [418 done /298 queued / 16 running / 417 errors / 17% coverage ] ****** [419 done /297 queued / 16 running / 418 errors / 17% coverage ] ****** [419 done /297 queued / 16 running / 418 errors / 17% coverage ] ****** [420 done /297 queued / 16 running / 419 errors / 17% coverage ] ****** [420 done /297 queued / 16 running / 419 errors / 17% coverage ] ****** [421 done /297 queued / 16 running / 420 errors / 17% coverage ] ****** [421 done /297 queued / 16 running / 420 errors / 17% coverage ] ****** [422 done /298 queued / 16 running / 421 errors / 17% coverage ] ****** [422 done /298 queued / 16 running / 421 errors / 17% coverage ] ****** [423 done /300 queued / 16 running / 422 errors / 17% coverage ] ****** [423 done /300 queued / 16 running / 422 errors / 17% coverage ] ****** [424 done /301 queued / 16 running / 423 errors / 17% coverage ] ****** [424 done /301 queued / 16 running / 423 errors / 17% coverage ] ****** [425 done /302 queued / 16 running / 424 errors / 17% coverage ] ****** [425 done /302 queued / 16 running / 424 errors / 17% coverage ] ****** [426 done /306 queued / 16 running / 425 errors / 17% coverage ] ****** [426 done /306 queued / 16 running / 425 errors / 17% coverage ] ****** [427 done /308 queued / 16 running / 426 errors / 17% coverage ] ****** [427 done /308 queued / 16 running / 426 errors / 17% coverage ] ****** [428 done /310 queued / 16 running / 427 errors / 17% coverage ] ****** [428 done /310 queued / 16 running / 427 errors / 17% coverage ] ****** [429 done /311 queued / 16 running / 428 errors / 17% coverage ] ****** [429 done /311 queued / 16 running / 428 errors / 17% coverage ] ****** [430 done /312 queued / 16 running / 429 errors / 17% coverage ] ****** [430 done /312 queued / 16 running / 429 errors / 17% coverage ] ****** [431 done /316 queued / 16 running / 430 errors / 17% coverage ] ****** [431 done /316 queued / 16 running / 430 errors / 17% coverage ] ****** [432 done /320 queued / 16 running / 431 errors / 17% coverage ] ****** [432 done /320 queued / 16 running / 431 errors / 17% coverage ] ****** [433 done /321 queued / 16 running / 432 errors / 17% coverage ] ****** [433 done /321 queued / 16 running / 432 errors / 17% coverage ] ****** [434 done /322 queued / 16 running / 433 errors / 17% coverage ] ****** [434 done /322 queued / 16 running / 433 errors / 17% coverage ] ****** [435 done /322 queued / 16 running / 434 errors / 17% coverage ] ****** [435 done /322 queued / 16 running / 434 errors / 17% coverage ] ****** [436 done /322 queued / 16 running / 435 errors / 17% coverage ] ****** [436 done /322 queued / 16 running / 435 errors / 17% coverage ] ****** [437 done /323 queued / 16 running / 436 errors / 17% coverage ] ****** [437 done /323 queued / 16 running / 436 errors / 17% coverage ] ****** [438 done /322 queued / 16 running / 437 errors / 17% coverage ] ****** [438 done /322 queued / 16 running / 437 errors / 17% coverage ] ****** [439 done /325 queued / 16 running / 438 errors / 17% coverage ] ****** [439 done /325 queued / 16 running / 438 errors / 17% coverage ] ****** [440 done /327 queued / 16 running / 439 errors / 17% coverage ] ****** [440 done /327 queued / 16 running / 439 errors / 17% coverage ] ****** [441 done /329 queued / 16 running / 440 errors / 17% coverage ] ****** [441 done /329 queued / 16 running / 440 errors / 17% coverage ] ****** [442 done /330 queued / 16 running / 441 errors / 17% coverage ] ****** [442 done /330 queued / 16 running / 441 errors / 17% coverage ] ****** [443 done /331 queued / 16 running / 442 errors / 17% coverage ] ****** [443 done /331 queued / 16 running / 442 errors / 17% coverage ] ****** [444 done /333 queued / 16 running / 443 errors / 17% coverage ] ****** [444 done /333 queued / 16 running / 443 errors / 17% coverage ] ****** [445 done /334 queued / 16 running / 444 errors / 17% coverage ] ****** [445 done /334 queued / 16 running / 444 errors / 17% coverage ] ****** [446 done /336 queued / 16 running / 445 errors / 17% coverage ] ****** [446 done /336 queued / 16 running / 445 errors / 17% coverage ] ****** [447 done /339 queued / 16 running / 446 errors / 17% coverage ] ****** [447 done /339 queued / 16 running / 446 errors / 17% coverage ] ****** [448 done /339 queued / 16 running / 447 errors / 17% coverage ] ****** [448 done /339 queued / 16 running / 447 errors / 17% coverage ] ****** [449 done /339 queued / 16 running / 448 errors / 17% coverage ] ****** [449 done /339 queued / 16 running / 448 errors / 17% coverage ] ****** [450 done /338 queued / 16 running / 449 errors / 17% coverage ] ****** [450 done /338 queued / 16 running / 449 errors / 17% coverage ] ****** [451 done /338 queued / 16 running / 450 errors / 17% coverage ] ****** [451 done /338 queued / 16 running / 450 errors / 17% coverage ] ****** [452 done /337 queued / 16 running / 451 errors / 17% coverage ] ****** [452 done /337 queued / 16 running / 451 errors / 17% coverage ] ****** [453 done /337 queued / 16 running / 452 errors / 17% coverage ] ****** [453 done /337 queued / 16 running / 452 errors / 17% coverage ] ****** [454 done /338 queued / 16 running / 453 errors / 17% coverage ] ****** [454 done /338 queued / 16 running / 453 errors / 17% coverage ] ****** [455 done /338 queued / 16 running / 454 errors / 17% coverage ] ****** [455 done /338 queued / 16 running / 454 errors / 17% coverage ] ****** [456 done /338 queued / 16 running / 455 errors / 17% coverage ] ****** [456 done /338 queued / 16 running / 455 errors / 17% coverage ] ****** [457 done /338 queued / 16 running / 456 errors / 17% coverage ] ****** [457 done /338 queued / 16 running / 456 errors / 17% coverage ] ****** [458 done /341 queued / 16 running / 457 errors / 17% coverage ] ****** [458 done /341 queued / 16 running / 457 errors / 17% coverage ] ****** [459 done /340 queued / 16 running / 458 errors / 17% coverage ] ****** [459 done /340 queued / 16 running / 458 errors / 17% coverage ] ****** [460 done /341 queued / 16 running / 459 errors / 17% coverage ] ****** [460 done /341 queued / 16 running / 459 errors / 17% coverage ] ****** [461 done /340 queued / 16 running / 460 errors / 17% coverage ] ****** [461 done /340 queued / 16 running / 460 errors / 17% coverage ] ****** [462 done /340 queued / 16 running / 461 errors / 17% coverage ] ****** [462 done /340 queued / 16 running / 461 errors / 17% coverage ] ****** [463 done /340 queued / 16 running / 462 errors / 17% coverage ] ****** [463 done /340 queued / 16 running / 462 errors / 17% coverage ] ****** [464 done /340 queued / 16 running / 463 errors / 17% coverage ] ****** [464 done /340 queued / 16 running / 463 errors / 17% coverage ] ****** [465 done /341 queued / 16 running / 464 errors / 17% coverage ] ****** [465 done /341 queued / 16 running / 464 errors / 17% coverage ] ****** [466 done /344 queued / 16 running / 465 errors / 17% coverage ] ****** [466 done /344 queued / 16 running / 465 errors / 17% coverage ] ****** [467 done /347 queued / 16 running / 466 errors / 17% coverage ] ****** [467 done /347 queued / 16 running / 466 errors / 17% coverage ] ****** [468 done /346 queued / 16 running / 467 errors / 17% coverage ] ****** [468 done /346 queued / 16 running / 467 errors / 17% coverage ] ****** [469 done /349 queued / 16 running / 468 errors / 17% coverage ] ****** [469 done /349 queued / 16 running / 468 errors / 17% coverage ] ****** [470 done /352 queued / 16 running / 469 errors / 17% coverage ] ****** [470 done /352 queued / 16 running / 469 errors / 17% coverage ] ****** [471 done /354 queued / 16 running / 470 errors / 17% coverage ] ****** [471 done /354 queued / 16 running / 470 errors / 17% coverage ] ****** [472 done /356 queued / 16 running / 471 errors / 17% coverage ] ****** [472 done /356 queued / 16 running / 471 errors / 17% coverage ] ****** [473 done /357 queued / 16 running / 472 errors / 17% coverage ] ****** [473 done /357 queued / 16 running / 472 errors / 17% coverage ] ****** [474 done /358 queued / 16 running / 473 errors / 17% coverage ] ****** [474 done /358 queued / 16 running / 473 errors / 17% coverage ] ****** [475 done /359 queued / 16 running / 474 errors / 17% coverage ] ****** [475 done /359 queued / 16 running / 474 errors / 17% coverage ] ****** [476 done /360 queued / 16 running / 475 errors / 17% coverage ] ****** [476 done /360 queued / 16 running / 475 errors / 17% coverage ] ****** [477 done /361 queued / 16 running / 476 errors / 17% coverage ] ****** [477 done /361 queued / 16 running / 476 errors / 17% coverage ] ****** [478 done /362 queued / 16 running / 477 errors / 17% coverage ] ****** [478 done /362 queued / 16 running / 477 errors / 17% coverage ] ****** [479 done /362 queued / 16 running / 478 errors / 17% coverage ] ****** [479 done /362 queued / 16 running / 478 errors / 17% coverage ] ****** [480 done /364 queued / 16 running / 479 errors / 17% coverage ] ****** [480 done /364 queued / 16 running / 479 errors / 17% coverage ] ****** [481 done /366 queued / 16 running / 480 errors / 17% coverage ] ****** [481 done /366 queued / 16 running / 480 errors / 17% coverage ] ****** [482 done /366 queued / 16 running / 481 errors / 17% coverage ] ****** [482 done /366 queued / 16 running / 481 errors / 17% coverage ] ****** [483 done /366 queued / 16 running / 482 errors / 17% coverage ] ****** [483 done /366 queued / 16 running / 482 errors / 17% coverage ] ****** [484 done /366 queued / 16 running / 483 errors / 17% coverage ] ****** [484 done /366 queued / 16 running / 483 errors / 17% coverage ] ****** [485 done /368 queued / 16 running / 484 errors / 17% coverage ] ****** [485 done /368 queued / 16 running / 484 errors / 17% coverage ] ****** [486 done /367 queued / 16 running / 485 errors / 17% coverage ] ****** [486 done /367 queued / 16 running / 485 errors / 17% coverage ] ****** [487 done /367 queued / 16 running / 486 errors / 17% coverage ] ****** [487 done /367 queued / 16 running / 486 errors / 17% coverage ] ****** [488 done /366 queued / 16 running / 487 errors / 17% coverage ] ****** [488 done /366 queued / 16 running / 487 errors / 17% coverage ] ****** [489 done /365 queued / 16 running / 488 errors / 17% coverage ] ****** [489 done /365 queued / 16 running / 488 errors / 17% coverage ] ****** [490 done /364 queued / 16 running / 489 errors / 17% coverage ] ****** [490 done /364 queued / 16 running / 489 errors / 17% coverage ] ****** [491 done /365 queued / 16 running / 490 errors / 17% coverage ] ****** [491 done /365 queued / 16 running / 490 errors / 17% coverage ] ****** [492 done /364 queued / 16 running / 491 errors / 17% coverage ] ****** [492 done /364 queued / 16 running / 491 errors / 17% coverage ] ****** [493 done /364 queued / 16 running / 492 errors / 17% coverage ] ****** [493 done /364 queued / 16 running / 492 errors / 17% coverage ] ****** [494 done /363 queued / 16 running / 493 errors / 17% coverage ] ****** [494 done /363 queued / 16 running / 493 errors / 17% coverage ] ****** [495 done /363 queued / 16 running / 494 errors / 17% coverage ] ****** [495 done /363 queued / 16 running / 494 errors / 17% coverage ] ****** [496 done /364 queued / 16 running / 495 errors / 17% coverage ] ****** [496 done /364 queued / 16 running / 495 errors / 17% coverage ] ****** [497 done /364 queued / 16 running / 496 errors / 17% coverage ] ****** [497 done /364 queued / 16 running / 496 errors / 17% coverage ] ****** [498 done /364 queued / 16 running / 497 errors / 17% coverage ] ****** [498 done /364 queued / 16 running / 497 errors / 17% coverage ] ****** [499 done /366 queued / 16 running / 498 errors / 17% coverage ] ****** [499 done /366 queued / 16 running / 498 errors / 17% coverage ] ****** [500 done /365 queued / 16 running / 499 errors / 17% coverage ] ****** [500 done /365 queued / 16 running / 499 errors / 17% coverage ] ****** [501 done /366 queued / 16 running / 500 errors / 17% coverage ] ****** [501 done /366 queued / 16 running / 500 errors / 17% coverage ] ****** [502 done /365 queued / 16 running / 501 errors / 17% coverage ] ****** [502 done /365 queued / 16 running / 501 errors / 17% coverage ] ****** [503 done /365 queued / 16 running / 502 errors / 17% coverage ] ****** [503 done /365 queued / 16 running / 502 errors / 17% coverage ] ****** [504 done /367 queued / 16 running / 503 errors / 17% coverage ] ****** [504 done /367 queued / 16 running / 503 errors / 17% coverage ] ****** [505 done /367 queued / 16 running / 504 errors / 17% coverage ] ****** [505 done /367 queued / 16 running / 504 errors / 17% coverage ] ****** [506 done /369 queued / 16 running / 505 errors / 17% coverage ] ****** [506 done /369 queued / 16 running / 505 errors / 17% coverage ] ****** [507 done /370 queued / 16 running / 506 errors / 17% coverage ] ****** [507 done /370 queued / 16 running / 506 errors / 17% coverage ] ****** [508 done /370 queued / 16 running / 507 errors / 17% coverage ] ****** [508 done /370 queued / 16 running / 507 errors / 17% coverage ] ****** [509 done /370 queued / 16 running / 508 errors / 17% coverage ] ****** [509 done /370 queued / 16 running / 508 errors / 17% coverage ] ****** [510 done /369 queued / 16 running / 509 errors / 17% coverage ] ****** [510 done /369 queued / 16 running / 509 errors / 17% coverage ] ****** [511 done /368 queued / 16 running / 510 errors / 17% coverage ] ****** [511 done /368 queued / 16 running / 510 errors / 17% coverage ] ****** [512 done /368 queued / 16 running / 511 errors / 17% coverage ] ****** [512 done /368 queued / 16 running / 511 errors / 17% coverage ] ****** [513 done /369 queued / 16 running / 512 errors / 17% coverage ] ****** [513 done /369 queued / 16 running / 512 errors / 17% coverage ] ****** [514 done /369 queued / 16 running / 513 errors / 17% coverage ] ****** [514 done /369 queued / 16 running / 513 errors / 17% coverage ] ****** [515 done /370 queued / 16 running / 514 errors / 17% coverage ] ****** [515 done /370 queued / 16 running / 514 errors / 17% coverage ] ****** [516 done /372 queued / 16 running / 515 errors / 17% coverage ] ****** [516 done /372 queued / 16 running / 515 errors / 17% coverage ] ****** [517 done /375 queued / 16 running / 516 errors / 17% coverage ] ****** [517 done /375 queued / 16 running / 516 errors / 17% coverage ] ****** [518 done /375 queued / 16 running / 517 errors / 17% coverage ] ****** [518 done /375 queued / 16 running / 517 errors / 17% coverage ] ****** [519 done /379 queued / 16 running / 518 errors / 17% coverage ] ****** [519 done /379 queued / 16 running / 518 errors / 17% coverage ] ****** [520 done /379 queued / 16 running / 519 errors / 17% coverage ] ****** [520 done /379 queued / 16 running / 519 errors / 17% coverage ] ****** [521 done /381 queued / 16 running / 520 errors / 17% coverage ] ****** [521 done /381 queued / 16 running / 520 errors / 17% coverage ] ****** [522 done /383 queued / 16 running / 521 errors / 17% coverage ] ****** [522 done /383 queued / 16 running / 521 errors / 17% coverage ] ****** [523 done /384 queued / 16 running / 522 errors / 17% coverage ] ****** [523 done /384 queued / 16 running / 522 errors / 17% coverage ] ****** [524 done /384 queued / 16 running / 523 errors / 17% coverage ] ****** [524 done /384 queued / 16 running / 523 errors / 17% coverage ] ****** [525 done /387 queued / 16 running / 524 errors / 17% coverage ] ****** [525 done /387 queued / 16 running / 524 errors / 17% coverage ] ****** [526 done /388 queued / 16 running / 525 errors / 17% coverage ] ****** [526 done /388 queued / 16 running / 525 errors / 17% coverage ] ****** [527 done /390 queued / 16 running / 526 errors / 17% coverage ] ****** [527 done /390 queued / 16 running / 526 errors / 17% coverage ] ****** [528 done /391 queued / 16 running / 527 errors / 17% coverage ] ****** [528 done /391 queued / 16 running / 527 errors / 17% coverage ] ****** [529 done /392 queued / 16 running / 528 errors / 17% coverage ] ****** [529 done /392 queued / 16 running / 528 errors / 17% coverage ] ****** [530 done /395 queued / 16 running / 529 errors / 17% coverage ] ****** [530 done /395 queued / 16 running / 529 errors / 17% coverage ] ****** [531 done /396 queued / 16 running / 530 errors / 17% coverage ] ****** [531 done /396 queued / 16 running / 530 errors / 17% coverage ] ****** [532 done /397 queued / 16 running / 531 errors / 17% coverage ] ****** [532 done /397 queued / 16 running / 531 errors / 17% coverage ] ****** [533 done /397 queued / 16 running / 532 errors / 17% coverage ] ****** [533 done /397 queued / 16 running / 532 errors / 17% coverage ] ****** [534 done /399 queued / 16 running / 533 errors / 17% coverage ] ****** [534 done /399 queued / 16 running / 533 errors / 17% coverage ] ****** [535 done /402 queued / 16 running / 534 errors / 17% coverage ] ****** [535 done /402 queued / 16 running / 534 errors / 17% coverage ] ****** [536 done /401 queued / 16 running / 535 errors / 17% coverage ] ****** [536 done /401 queued / 16 running / 535 errors / 17% coverage ] ****** [537 done /401 queued / 16 running / 536 errors / 17% coverage ] ****** [537 done /401 queued / 16 running / 536 errors / 17% coverage ] ****** [538 done /400 queued / 16 running / 537 errors / 17% coverage ] ****** [538 done /400 queued / 16 running / 537 errors / 17% coverage ] ****** [539 done /399 queued / 16 running / 538 errors / 17% coverage ] ****** [539 done /399 queued / 16 running / 538 errors / 17% coverage ] ****** [540 done /398 queued / 16 running / 539 errors / 17% coverage ] ****** [540 done /398 queued / 16 running / 539 errors / 17% coverage ] ****** [541 done /398 queued / 16 running / 540 errors / 17% coverage ] ****** [541 done /398 queued / 16 running / 540 errors / 17% coverage ] ****** [542 done /398 queued / 16 running / 541 errors / 17% coverage ] ****** [542 done /398 queued / 16 running / 541 errors / 17% coverage ] ****** [543 done /400 queued / 16 running / 542 errors / 17% coverage ] ****** [543 done /400 queued / 16 running / 542 errors / 17% coverage ] ****** [544 done /399 queued / 16 running / 543 errors / 17% coverage ] ****** [544 done /399 queued / 16 running / 543 errors / 17% coverage ] ****** [545 done /399 queued / 16 running / 544 errors / 17% coverage ] ****** [545 done /399 queued / 16 running / 544 errors / 17% coverage ] ****** [546 done /398 queued / 16 running / 545 errors / 17% coverage ] ****** [546 done /398 queued / 16 running / 545 errors / 17% coverage ] ****** [547 done /398 queued / 16 running / 546 errors / 17% coverage ] ****** [547 done /398 queued / 16 running / 546 errors / 17% coverage ] ****** [548 done /400 queued / 16 running / 547 errors / 17% coverage ] ****** [548 done /400 queued / 16 running / 547 errors / 17% coverage ] ****** [549 done /400 queued / 16 running / 548 errors / 17% coverage ] ****** [549 done /400 queued / 16 running / 548 errors / 17% coverage ] ****** [550 done /400 queued / 16 running / 549 errors / 17% coverage ] ****** [550 done /400 queued / 16 running / 549 errors / 17% coverage ] ****** [551 done /399 queued / 16 running / 550 errors / 17% coverage ] ****** [551 done /399 queued / 16 running / 550 errors / 17% coverage ] ****** [552 done /398 queued / 16 running / 551 errors / 17% coverage ] ****** [552 done /398 queued / 16 running / 551 errors / 17% coverage ] ****** [553 done /398 queued / 16 running / 552 errors / 17% coverage ] ****** [553 done /398 queued / 16 running / 552 errors / 17% coverage ] ****** [554 done /398 queued / 16 running / 553 errors / 17% coverage ] ****** [554 done /398 queued / 16 running / 553 errors / 17% coverage ] ****** [555 done /399 queued / 16 running / 554 errors / 17% coverage ] ****** [555 done /399 queued / 16 running / 554 errors / 17% coverage ] ****** [556 done /399 queued / 16 running / 555 errors / 17% coverage ] ****** [556 done /399 queued / 16 running / 555 errors / 17% coverage ] ****** [557 done /400 queued / 16 running / 556 errors / 17% coverage ] ****** [557 done /400 queued / 16 running / 556 errors / 17% coverage ] ****** [558 done /399 queued / 16 running / 557 errors / 17% coverage ] ****** [558 done /399 queued / 16 running / 557 errors / 17% coverage ] ****** [559 done /398 queued / 16 running / 558 errors / 17% coverage ] ****** [559 done /398 queued / 16 running / 558 errors / 17% coverage ] ****** [560 done /398 queued / 16 running / 559 errors / 17% coverage ] ****** [560 done /398 queued / 16 running / 559 errors / 17% coverage ] ****** [561 done /397 queued / 16 running / 560 errors / 17% coverage ] ****** [561 done /397 queued / 16 running / 560 errors / 17% coverage ] ****** [562 done /397 queued / 16 running / 561 errors / 17% coverage ] ****** [562 done /397 queued / 16 running / 561 errors / 17% coverage ] ****** [563 done /400 queued / 16 running / 562 errors / 17% coverage ] ****** [563 done /400 queued / 16 running / 562 errors / 17% coverage ] ****** [564 done /399 queued / 16 running / 563 errors / 17% coverage ] ****** [564 done /399 queued / 16 running / 563 errors / 17% coverage ] ****** [565 done /401 queued / 16 running / 564 errors / 17% coverage ] ****** [565 done /401 queued / 16 running / 564 errors / 17% coverage ] ****** [566 done /403 queued / 16 running / 565 errors / 17% coverage ] ****** [566 done /403 queued / 16 running / 565 errors / 17% coverage ] ****** [567 done /404 queued / 16 running / 566 errors / 17% coverage ] ****** [567 done /404 queued / 16 running / 566 errors / 17% coverage ] ****** [568 done /406 queued / 16 running / 567 errors / 17% coverage ] ****** [568 done /406 queued / 16 running / 567 errors / 17% coverage ] ****** [569 done /407 queued / 16 running / 568 errors / 17% coverage ] ****** [569 done /407 queued / 16 running / 568 errors / 17% coverage ] ****** [570 done /409 queued / 16 running / 569 errors / 17% coverage ] ****** [570 done /409 queued / 16 running / 569 errors / 17% coverage ] ****** [571 done /410 queued / 16 running / 570 errors / 17% coverage ] ****** [571 done /410 queued / 16 running / 570 errors / 17% coverage ] ****** [572 done /410 queued / 16 running / 571 errors / 17% coverage ] ****** [572 done /410 queued / 16 running / 571 errors / 17% coverage ] ****** [573 done /412 queued / 16 running / 572 errors / 17% coverage ] ****** [573 done /412 queued / 16 running / 572 errors / 17% coverage ] ****** [574 done /414 queued / 16 running / 573 errors / 17% coverage ] ****** [574 done /414 queued / 16 running / 573 errors / 17% coverage ] ****** [575 done /414 queued / 16 running / 574 errors / 17% coverage ] ****** [575 done /414 queued / 16 running / 574 errors / 17% coverage ] ****** [576 done /415 queued / 16 running / 575 errors / 17% coverage ] ****** [576 done /415 queued / 16 running / 575 errors / 17% coverage ] ****** [577 done /416 queued / 16 running / 576 errors / 17% coverage ] ****** [577 done /416 queued / 16 running / 576 errors / 17% coverage ] ****** [578 done /417 queued / 16 running / 577 errors / 17% coverage ] ****** [578 done /417 queued / 16 running / 577 errors / 17% coverage ] ****** [579 done /419 queued / 16 running / 578 errors / 17% coverage ] ****** [579 done /419 queued / 16 running / 578 errors / 17% coverage ] ****** [580 done /420 queued / 16 running / 579 errors / 17% coverage ] ****** [580 done /420 queued / 16 running / 579 errors / 17% coverage ] ****** [581 done /420 queued / 16 running / 580 errors / 17% coverage ] ****** [581 done /420 queued / 16 running / 580 errors / 17% coverage ] ****** [582 done /422 queued / 16 running / 581 errors / 17% coverage ] ****** [582 done /422 queued / 16 running / 581 errors / 17% coverage ] ****** [583 done /424 queued / 16 running / 582 errors / 17% coverage ] ****** [583 done /424 queued / 16 running / 582 errors / 17% coverage ] ****** [584 done /423 queued / 16 running / 583 errors / 17% coverage ] ****** [584 done /423 queued / 16 running / 583 errors / 17% coverage ] ****** [585 done /425 queued / 16 running / 584 errors / 17% coverage ] ****** [585 done /425 queued / 16 running / 584 errors / 17% coverage ] ****** [586 done /424 queued / 16 running / 585 errors / 17% coverage ] ****** [586 done /424 queued / 16 running / 585 errors / 17% coverage ] ****** [587 done /424 queued / 16 running / 586 errors / 17% coverage ] ****** [587 done /424 queued / 16 running / 586 errors / 17% coverage ] ****** [588 done /426 queued / 16 running / 587 errors / 17% coverage ] ****** [588 done /426 queued / 16 running / 587 errors / 17% coverage ] ****** [589 done /427 queued / 16 running / 588 errors / 17% coverage ] ****** [589 done /427 queued / 16 running / 588 errors / 17% coverage ] ****** [590 done /426 queued / 16 running / 589 errors / 17% coverage ] ****** [590 done /426 queued / 16 running / 589 errors / 17% coverage ] ****** [591 done /428 queued / 16 running / 590 errors / 17% coverage ] ****** [591 done /428 queued / 16 running / 590 errors / 17% coverage ] ****** [592 done /431 queued / 16 running / 591 errors / 17% coverage ] ****** [592 done /431 queued / 16 running / 591 errors / 17% coverage ] ****** [593 done /430 queued / 16 running / 592 errors / 17% coverage ] ****** [593 done /430 queued / 16 running / 592 errors / 17% coverage ] ****** [594 done /433 queued / 16 running / 593 errors / 17% coverage ] ****** [594 done /433 queued / 16 running / 593 errors / 17% coverage ] ****** [595 done /436 queued / 16 running / 594 errors / 17% coverage ] ****** [595 done /436 queued / 16 running / 594 errors / 17% coverage ] ****** [596 done /437 queued / 16 running / 595 errors / 17% coverage ] ****** [596 done /437 queued / 16 running / 595 errors / 17% coverage ] ****** [597 done /438 queued / 16 running / 596 errors / 17% coverage ] ****** [597 done /438 queued / 16 running / 596 errors / 17% coverage ] ****** [598 done /438 queued / 16 running / 597 errors / 17% coverage ] ****** [598 done /438 queued / 16 running / 597 errors / 17% coverage ] ****** [599 done /441 queued / 16 running / 598 errors / 17% coverage ] ****** [599 done /441 queued / 16 running / 598 errors / 17% coverage ] ****** [600 done /442 queued / 16 running / 599 errors / 17% coverage ] ****** [600 done /442 queued / 16 running / 599 errors / 17% coverage ] ****** [601 done /446 queued / 16 running / 600 errors / 17% coverage ] ****** [601 done /446 queued / 16 running / 600 errors / 17% coverage ] ****** [602 done /448 queued / 16 running / 601 errors / 17% coverage ] ****** [602 done /448 queued / 16 running / 601 errors / 17% coverage ] ****** [603 done /448 queued / 16 running / 602 errors / 17% coverage ] ****** [603 done /448 queued / 16 running / 602 errors / 17% coverage ] ****** [604 done /450 queued / 16 running / 603 errors / 17% coverage ] ****** [604 done /450 queued / 16 running / 603 errors / 17% coverage ] ****** [605 done /451 queued / 16 running / 604 errors / 17% coverage ] ****** [605 done /451 queued / 16 running / 604 errors / 17% coverage ] ****** [606 done /452 queued / 16 running / 605 errors / 17% coverage ] ****** [606 done /452 queued / 16 running / 605 errors / 17% coverage ] ****** [607 done /453 queued / 16 running / 606 errors / 17% coverage ] ****** [607 done /453 queued / 16 running / 606 errors / 17% coverage ] ****** [608 done /452 queued / 16 running / 607 errors / 17% coverage ] ****** [608 done /452 queued / 16 running / 607 errors / 17% coverage ] ****** [609 done /452 queued / 16 running / 608 errors / 17% coverage ] ****** [609 done /452 queued / 16 running / 608 errors / 17% coverage ] ****** [610 done /452 queued / 16 running / 609 errors / 17% coverage ] ****** [610 done /452 queued / 16 running / 609 errors / 17% coverage ] ****** [611 done /455 queued / 16 running / 610 errors / 17% coverage ] ****** [611 done /455 queued / 16 running / 610 errors / 17% coverage ] ****** [612 done /456 queued / 16 running / 611 errors / 17% coverage ] ****** [612 done /456 queued / 16 running / 611 errors / 17% coverage ] ****** [613 done /456 queued / 16 running / 612 errors / 17% coverage ] ****** [613 done /456 queued / 16 running / 612 errors / 17% coverage ] ****** [614 done /456 queued / 16 running / 613 errors / 17% coverage ] ****** [614 done /456 queued / 16 running / 613 errors / 17% coverage ] ****** [615 done /455 queued / 16 running / 614 errors / 17% coverage ] ****** [615 done /455 queued / 16 running / 614 errors / 17% coverage ] ****** [616 done /456 queued / 16 running / 615 errors / 17% coverage ] ****** [616 done /456 queued / 16 running / 615 errors / 17% coverage ] ****** [617 done /456 queued / 16 running / 616 errors / 17% coverage ] ****** [617 done /456 queued / 16 running / 616 errors / 17% coverage ] ****** [618 done /456 queued / 16 running / 617 errors / 17% coverage ] ****** [618 done /456 queued / 16 running / 617 errors / 17% coverage ] ****** [619 done /456 queued / 16 running / 618 errors / 17% coverage ] ****** [619 done /456 queued / 16 running / 618 errors / 17% coverage ] ****** [620 done /457 queued / 16 running / 619 errors / 17% coverage ] ****** [620 done /457 queued / 16 running / 619 errors / 17% coverage ] ****** [621 done /458 queued / 16 running / 620 errors / 17% coverage ] ****** [621 done /458 queued / 16 running / 620 errors / 17% coverage ] ****** [622 done /458 queued / 16 running / 621 errors / 17% coverage ] ****** [622 done /458 queued / 16 running / 621 errors / 17% coverage ] ****** [623 done /458 queued / 16 running / 622 errors / 17% coverage ] ****** [623 done /458 queued / 16 running / 622 errors / 17% coverage ] ****** [624 done /459 queued / 16 running / 623 errors / 17% coverage ] ****** [624 done /459 queued / 16 running / 623 errors / 17% coverage ] ****** [625 done /460 queued / 16 running / 624 errors / 17% coverage ] ****** [625 done /460 queued / 16 running / 624 errors / 17% coverage ] ****** [626 done /462 queued / 16 running / 625 errors / 17% coverage ] ****** [626 done /462 queued / 16 running / 625 errors / 17% coverage ] ****** [627 done /462 queued / 16 running / 626 errors / 17% coverage ] ****** [627 done /462 queued / 16 running / 626 errors / 17% coverage ] ****** [628 done /464 queued / 16 running / 627 errors / 17% coverage ] ****** [628 done /464 queued / 16 running / 627 errors / 17% coverage ] ****** [629 done /465 queued / 16 running / 628 errors / 17% coverage ] ****** [629 done /465 queued / 16 running / 628 errors / 17% coverage ] ****** [630 done /466 queued / 16 running / 629 errors / 17% coverage ] ****** [630 done /466 queued / 16 running / 629 errors / 17% coverage ] ****** [631 done /466 queued / 16 running / 630 errors / 17% coverage ] ****** [631 done /466 queued / 16 running / 630 errors / 17% coverage ] ****** [632 done /466 queued / 16 running / 631 errors / 17% coverage ] ****** [632 done /466 queued / 16 running / 631 errors / 17% coverage ] ****** [633 done /469 queued / 16 running / 632 errors / 17% coverage ] ****** [633 done /469 queued / 16 running / 632 errors / 17% coverage ] ****** [634 done /471 queued / 16 running / 633 errors / 17% coverage ] ****** [634 done /471 queued / 16 running / 633 errors / 17% coverage ] ****** [635 done /473 queued / 16 running / 634 errors / 17% coverage ] ****** [635 done /473 queued / 16 running / 634 errors / 17% coverage ] ****** [636 done /474 queued / 16 running / 635 errors / 17% coverage ] ****** [636 done /474 queued / 16 running / 635 errors / 17% coverage ] ****** [637 done /477 queued / 16 running / 636 errors / 17% coverage ] ****** [637 done /477 queued / 16 running / 636 errors / 17% coverage ] ****** [638 done /478 queued / 16 running / 637 errors / 17% coverage ] ****** [638 done /478 queued / 16 running / 637 errors / 17% coverage ] ****** [639 done /479 queued / 16 running / 638 errors / 17% coverage ] ****** [639 done /479 queued / 16 running / 638 errors / 17% coverage ] ****** [640 done /479 queued / 16 running / 639 errors / 17% coverage ] ****** [640 done /479 queued / 16 running / 639 errors / 17% coverage ] ****** [641 done /478 queued / 16 running / 640 errors / 17% coverage ] ****** [641 done /478 queued / 16 running / 640 errors / 17% coverage ] ****** [642 done /481 queued / 16 running / 641 errors / 17% coverage ] ****** [642 done /481 queued / 16 running / 641 errors / 17% coverage ] ****** [643 done /483 queued / 16 running / 642 errors / 17% coverage ] ****** [643 done /483 queued / 16 running / 642 errors / 17% coverage ] ****** [644 done /484 queued / 16 running / 643 errors / 17% coverage ] ****** [644 done /484 queued / 16 running / 643 errors / 17% coverage ] ****** [645 done /485 queued / 16 running / 644 errors / 17% coverage ] ****** [645 done /485 queued / 16 running / 644 errors / 17% coverage ] ****** [646 done /485 queued / 16 running / 645 errors / 17% coverage ] ****** [646 done /485 queued / 16 running / 645 errors / 17% coverage ] ****** [647 done /486 queued / 16 running / 646 errors / 17% coverage ] ****** [647 done /486 queued / 16 running / 646 errors / 17% coverage ] ****** [648 done /487 queued / 16 running / 647 errors / 17% coverage ] ****** [648 done /487 queued / 16 running / 647 errors / 17% coverage ] ****** [649 done /490 queued / 16 running / 648 errors / 17% coverage ] ****** [649 done /490 queued / 16 running / 648 errors / 17% coverage ] ****** [650 done /493 queued / 16 running / 649 errors / 17% coverage ] ****** [650 done /493 queued / 16 running / 649 errors / 17% coverage ] ****** [651 done /494 queued / 16 running / 650 errors / 17% coverage ] ****** [651 done /494 queued / 16 running / 650 errors / 17% coverage ] ****** [652 done /498 queued / 16 running / 651 errors / 17% coverage ] ****** [652 done /498 queued / 16 running / 651 errors / 17% coverage ] ****** [653 done /499 queued / 16 running / 652 errors / 17% coverage ] ****** [653 done /499 queued / 16 running / 652 errors / 17% coverage ] ****** [654 done /500 queued / 16 running / 653 errors / 17% coverage ] ****** [654 done /500 queued / 16 running / 653 errors / 17% coverage ] ****** [655 done /501 queued / 16 running / 654 errors / 17% coverage ] ****** [655 done /501 queued / 16 running / 654 errors / 17% coverage ] ****** [656 done /504 queued / 16 running / 655 errors / 17% coverage ] ****** [656 done /504 queued / 16 running / 655 errors / 17% coverage ] ****** [657 done /505 queued / 16 running / 656 errors / 17% coverage ] ****** [657 done /505 queued / 16 running / 656 errors / 17% coverage ] ****** [658 done /506 queued / 16 running / 657 errors / 17% coverage ] ****** [658 done /506 queued / 16 running / 657 errors / 17% coverage ] ****** [659 done /506 queued / 16 running / 658 errors / 17% coverage ] ****** [659 done /506 queued / 16 running / 658 errors / 17% coverage ] ****** [660 done /506 queued / 16 running / 659 errors / 17% coverage ] ****** [660 done /506 queued / 16 running / 659 errors / 17% coverage ] ****** [661 done /508 queued / 16 running / 660 errors / 17% coverage ] ****** [661 done /508 queued / 16 running / 660 errors / 17% coverage ] ****** [662 done /509 queued / 16 running / 661 errors / 17% coverage ] ****** [662 done /509 queued / 16 running / 661 errors / 17% coverage ] ****** [663 done /510 queued / 16 running / 662 errors / 17% coverage ] ****** [663 done /510 queued / 16 running / 662 errors / 17% coverage ] ****** [664 done /512 queued / 16 running / 663 errors / 17% coverage ] ****** [664 done /512 queued / 16 running / 663 errors / 17% coverage ] ****** [665 done /514 queued / 16 running / 664 errors / 17% coverage ] ****** [665 done /514 queued / 16 running / 664 errors / 17% coverage ] ****** [666 done /517 queued / 16 running / 665 errors / 17% coverage ] ****** [666 done /517 queued / 16 running / 665 errors / 17% coverage ] ****** [667 done /516 queued / 16 running / 666 errors / 17% coverage ] ****** [667 done /516 queued / 16 running / 666 errors / 17% coverage ] ****** [668 done /516 queued / 16 running / 667 errors / 17% coverage ] ****** [668 done /516 queued / 16 running / 667 errors / 17% coverage ] ****** [669 done /517 queued / 16 running / 668 errors / 17% coverage ] ****** [669 done /517 queued / 16 running / 668 errors / 17% coverage ] ****** [670 done /518 queued / 16 running / 669 errors / 17% coverage ] ****** [670 done /518 queued / 16 running / 669 errors / 17% coverage ] ****** [671 done /518 queued / 16 running / 670 errors / 17% coverage ] ****** [671 done /518 queued / 16 running / 670 errors / 17% coverage ] ****** [672 done /519 queued / 16 running / 671 errors / 17% coverage ] ****** [672 done /519 queued / 16 running / 671 errors / 17% coverage ] ****** [673 done /520 queued / 16 running / 672 errors / 17% coverage ] ****** [673 done /520 queued / 16 running / 672 errors / 17% coverage ] ****** [674 done /520 queued / 16 running / 673 errors / 17% coverage ] ****** [674 done /520 queued / 16 running / 673 errors / 17% coverage ] ****** [675 done /521 queued / 16 running / 674 errors / 17% coverage ] ****** [675 done /521 queued / 16 running / 674 errors / 17% coverage ] ****** [676 done /521 queued / 16 running / 675 errors / 17% coverage ] ****** [676 done /521 queued / 16 running / 675 errors / 17% coverage ] ****** [677 done /522 queued / 16 running / 676 errors / 17% coverage ] ****** [677 done /522 queued / 16 running / 676 errors / 17% coverage ] ****** [678 done /525 queued / 16 running / 677 errors / 17% coverage ] ****** [678 done /525 queued / 16 running / 677 errors / 17% coverage ] ****** [679 done /524 queued / 16 running / 678 errors / 17% coverage ] ****** [679 done /524 queued / 16 running / 678 errors / 17% coverage ] ****** [680 done /526 queued / 16 running / 679 errors / 17% coverage ] ****** [680 done /526 queued / 16 running / 679 errors / 17% coverage ] ****** [681 done /526 queued / 16 running / 680 errors / 17% coverage ] ****** [681 done /526 queued / 16 running / 680 errors / 17% coverage ] ****** [682 done /526 queued / 16 running / 681 errors / 17% coverage ] ****** [682 done /526 queued / 16 running / 681 errors / 17% coverage ] ****** [683 done /528 queued / 16 running / 682 errors / 17% coverage ] ****** [683 done /528 queued / 16 running / 682 errors / 17% coverage ] ****** [684 done /528 queued / 16 running / 683 errors / 17% coverage ] ****** [684 done /528 queued / 16 running / 683 errors / 17% coverage ] ****** [685 done /528 queued / 16 running / 684 errors / 17% coverage ] ****** [685 done /528 queued / 16 running / 684 errors / 17% coverage ] ****** [686 done /529 queued / 16 running / 685 errors / 17% coverage ] ****** [686 done /529 queued / 16 running / 685 errors / 17% coverage ] ****** [687 done /531 queued / 16 running / 686 errors / 17% coverage ] ****** [687 done /531 queued / 16 running / 686 errors / 17% coverage ] ****** [688 done /530 queued / 16 running / 687 errors / 17% coverage ] ****** [688 done /530 queued / 16 running / 687 errors / 17% coverage ] ****** [689 done /532 queued / 16 running / 688 errors / 17% coverage ] ****** [689 done /532 queued / 16 running / 688 errors / 17% coverage ] ****** [690 done /533 queued / 16 running / 689 errors / 17% coverage ] ****** [690 done /533 queued / 16 running / 689 errors / 17% coverage ] ****** [691 done /534 queued / 16 running / 690 errors / 17% coverage ] ****** [691 done /534 queued / 16 running / 690 errors / 17% coverage ] ****** [692 done /535 queued / 16 running / 691 errors / 17% coverage ] ****** [692 done /535 queued / 16 running / 691 errors / 17% coverage ] ****** [693 done /536 queued / 16 running / 692 errors / 17% coverage ] ****** [693 done /536 queued / 16 running / 692 errors / 17% coverage ] ****** [694 done /538 queued / 16 running / 693 errors / 17% coverage ] ****** [694 done /538 queued / 16 running / 693 errors / 17% coverage ] ****** [695 done /539 queued / 16 running / 694 errors / 17% coverage ] ****** [695 done /539 queued / 16 running / 694 errors / 17% coverage ] ****** [696 done /542 queued / 16 running / 695 errors / 17% coverage ] ****** [696 done /542 queued / 16 running / 695 errors / 17% coverage ] ****** [697 done /544 queued / 16 running / 696 errors / 17% coverage ] ****** [697 done /544 queued / 16 running / 696 errors / 17% coverage ] ****** [698 done /544 queued / 16 running / 697 errors / 17% coverage ] ****** [698 done /544 queued / 16 running / 697 errors / 17% coverage ] ****** [699 done /545 queued / 16 running / 698 errors / 17% coverage ] ****** [699 done /545 queued / 16 running / 698 errors / 17% coverage ] ****** [700 done /547 queued / 16 running / 699 errors / 17% coverage ] ****** [700 done /547 queued / 16 running / 699 errors / 17% coverage ] ****** [701 done /548 queued / 16 running / 700 errors / 17% coverage ] ****** [701 done /548 queued / 16 running / 700 errors / 17% coverage ] ****** [702 done /551 queued / 16 running / 701 errors / 17% coverage ] ****** [702 done /551 queued / 16 running / 701 errors / 17% coverage ] ****** [703 done /553 queued / 16 running / 702 errors / 17% coverage ] ****** [703 done /553 queued / 16 running / 702 errors / 17% coverage ] ****** [704 done /556 queued / 16 running / 703 errors / 17% coverage ] ****** [704 done /556 queued / 16 running / 703 errors / 17% coverage ] ****** [705 done /559 queued / 16 running / 704 errors / 17% coverage ] ****** [705 done /559 queued / 16 running / 704 errors / 17% coverage ] ****** [706 done /560 queued / 16 running / 705 errors / 17% coverage ] ****** [706 done /560 queued / 16 running / 705 errors / 17% coverage ] ****** [707 done /561 queued / 16 running / 706 errors / 17% coverage ] ****** [707 done /561 queued / 16 running / 706 errors / 17% coverage ] ****** [708 done /562 queued / 16 running / 707 errors / 17% coverage ] ****** [708 done /562 queued / 16 running / 707 errors / 17% coverage ] ****** [709 done /563 queued / 16 running / 708 errors / 17% coverage ] ****** [709 done /563 queued / 16 running / 708 errors / 17% coverage ] ****** [710 done /564 queued / 16 running / 709 errors / 17% coverage ] ****** [710 done /564 queued / 16 running / 709 errors / 17% coverage ] ****** [711 done /566 queued / 16 running / 710 errors / 17% coverage ] ****** [711 done /566 queued / 16 running / 710 errors / 17% coverage ] ****** [712 done /565 queued / 16 running / 711 errors / 17% coverage ] ****** [712 done /565 queued / 16 running / 711 errors / 17% coverage ] ****** [713 done /567 queued / 16 running / 712 errors / 17% coverage ] ****** [713 done /567 queued / 16 running / 712 errors / 17% coverage ] ****** [714 done /566 queued / 16 running / 713 errors / 17% coverage ] ****** [714 done /566 queued / 16 running / 713 errors / 17% coverage ] ****** [715 done /566 queued / 16 running / 714 errors / 17% coverage ] ****** [715 done /566 queued / 16 running / 714 errors / 17% coverage ] ****** [716 done /565 queued / 16 running / 715 errors / 17% coverage ] ****** [716 done /565 queued / 16 running / 715 errors / 17% coverage ] ****** [717 done /565 queued / 16 running / 716 errors / 17% coverage ] ****** [717 done /565 queued / 16 running / 716 errors / 17% coverage ] ****** [718 done /564 queued / 16 running / 717 errors / 17% coverage ] ****** [718 done /564 queued / 16 running / 717 errors / 17% coverage ] ****** [719 done /564 queued / 16 running / 718 errors / 17% coverage ] ****** [719 done /564 queued / 16 running / 718 errors / 17% coverage ] ****** [720 done /564 queued / 16 running / 719 errors / 17% coverage ] ****** [720 done /564 queued / 16 running / 719 errors / 17% coverage ] ****** [721 done /563 queued / 16 running / 720 errors / 17% coverage ] ****** [721 done /563 queued / 16 running / 720 errors / 17% coverage ] ****** [722 done /562 queued / 16 running / 721 errors / 17% coverage ] ****** [722 done /562 queued / 16 running / 721 errors / 17% coverage ] ****** [723 done /561 queued / 16 running / 722 errors / 17% coverage ] ****** [723 done /561 queued / 16 running / 722 errors / 17% coverage ] ****** [724 done /563 queued / 16 running / 723 errors / 17% coverage ] ****** [724 done /563 queued / 16 running / 723 errors / 17% coverage ] ****** [725 done /562 queued / 16 running / 724 errors / 17% coverage ] ****** [725 done /562 queued / 16 running / 724 errors / 17% coverage ] ****** [726 done /561 queued / 16 running / 725 errors / 17% coverage ] ****** [726 done /561 queued / 16 running / 725 errors / 17% coverage ] ****** [727 done /560 queued / 16 running / 726 errors / 17% coverage ] ****** [727 done /560 queued / 16 running / 726 errors / 17% coverage ] ****** [728 done /560 queued / 16 running / 727 errors / 17% coverage ] ****** [728 done /560 queued / 16 running / 727 errors / 17% coverage ] ****** [729 done /559 queued / 16 running / 728 errors / 17% coverage ] ****** [729 done /559 queued / 16 running / 728 errors / 17% coverage ] ****** [730 done /558 queued / 16 running / 729 errors / 17% coverage ] ****** [730 done /558 queued / 16 running / 729 errors / 17% coverage ] ****** [731 done /558 queued / 16 running / 730 errors / 17% coverage ] ****** [731 done /558 queued / 16 running / 730 errors / 17% coverage ] ****** [732 done /561 queued / 16 running / 731 errors / 17% coverage ] ****** [732 done /561 queued / 16 running / 731 errors / 17% coverage ] ****** [733 done /560 queued / 16 running / 732 errors / 17% coverage ] ****** [733 done /560 queued / 16 running / 732 errors / 17% coverage ] ****** [734 done /560 queued / 16 running / 733 errors / 17% coverage ] ****** [734 done /560 queued / 16 running / 733 errors / 17% coverage ] ****** [735 done /561 queued / 16 running / 734 errors / 17% coverage ] ****** [735 done /561 queued / 16 running / 734 errors / 17% coverage ] ****** [736 done /563 queued / 16 running / 735 errors / 17% coverage ] ****** [736 done /563 queued / 16 running / 735 errors / 17% coverage ] ****** [737 done /565 queued / 16 running / 736 errors / 17% coverage ] ****** [737 done /565 queued / 16 running / 736 errors / 17% coverage ] ****** [738 done /566 queued / 16 running / 737 errors / 17% coverage ] ****** [738 done /566 queued / 16 running / 737 errors / 17% coverage ] ****** [739 done /567 queued / 16 running / 738 errors / 17% coverage ] ****** [739 done /567 queued / 16 running / 738 errors / 17% coverage ] ****** [740 done /568 queued / 16 running / 739 errors / 17% coverage ] ****** [740 done /568 queued / 16 running / 739 errors / 17% coverage ] ****** [741 done /568 queued / 16 running / 740 errors / 17% coverage ] ****** [741 done /568 queued / 16 running / 740 errors / 17% coverage ] ****** [742 done /570 queued / 16 running / 741 errors / 17% coverage ] ****** [742 done /570 queued / 16 running / 741 errors / 17% coverage ] ****** [743 done /572 queued / 16 running / 742 errors / 17% coverage ] ****** [743 done /572 queued / 16 running / 742 errors / 17% coverage ] ****** [744 done /576 queued / 16 running / 743 errors / 17% coverage ] ****** [744 done /576 queued / 16 running / 743 errors / 17% coverage ] ****** [745 done /575 queued / 16 running / 744 errors / 17% coverage ] ****** [745 done /575 queued / 16 running / 744 errors / 17% coverage ] ****** [746 done /577 queued / 16 running / 745 errors / 17% coverage ] ****** [746 done /577 queued / 16 running / 745 errors / 17% coverage ] ****** [747 done /578 queued / 16 running / 746 errors / 17% coverage ] ****** [747 done /578 queued / 16 running / 746 errors / 17% coverage ] ****** [748 done /577 queued / 16 running / 747 errors / 17% coverage ] ****** [748 done /577 queued / 16 running / 747 errors / 17% coverage ] ****** [749 done /577 queued / 16 running / 748 errors / 17% coverage ] ****** [749 done /577 queued / 16 running / 748 errors / 17% coverage ] ****** [750 done /577 queued / 16 running / 749 errors / 17% coverage ] ****** [750 done /577 queued / 16 running / 749 errors / 17% coverage ] ****** [751 done /576 queued / 16 running / 750 errors / 17% coverage ] ****** [751 done /576 queued / 16 running / 750 errors / 17% coverage ] ****** [752 done /577 queued / 16 running / 751 errors / 17% coverage ] ****** [752 done /577 queued / 16 running / 751 errors / 17% coverage ] ****** [753 done /578 queued / 16 running / 752 errors / 17% coverage ] ****** [753 done /578 queued / 16 running / 752 errors / 17% coverage ] ****** [754 done /578 queued / 16 running / 753 errors / 17% coverage ] ****** [754 done /578 queued / 16 running / 753 errors / 17% coverage ] ****** [755 done /580 queued / 16 running / 754 errors / 17% coverage ] ****** [755 done /580 queued / 16 running / 754 errors / 17% coverage ] ****** [756 done /583 queued / 16 running / 755 errors / 17% coverage ] ****** [756 done /583 queued / 16 running / 755 errors / 17% coverage ] ****** [757 done /584 queued / 16 running / 756 errors / 17% coverage ] ****** [757 done /584 queued / 16 running / 756 errors / 17% coverage ] ****** [758 done /585 queued / 16 running / 757 errors / 17% coverage ] ****** [758 done /585 queued / 16 running / 757 errors / 17% coverage ] ****** [759 done /585 queued / 16 running / 758 errors / 17% coverage ] ****** [759 done /585 queued / 16 running / 758 errors / 17% coverage ] ****** [760 done /586 queued / 16 running / 759 errors / 17% coverage ] ****** [760 done /586 queued / 16 running / 759 errors / 17% coverage ] ****** [761 done /586 queued / 16 running / 760 errors / 17% coverage ] ****** [761 done /586 queued / 16 running / 760 errors / 17% coverage ] ****** [762 done /587 queued / 16 running / 761 errors / 17% coverage ] ****** [762 done /587 queued / 16 running / 761 errors / 17% coverage ] ****** [763 done /587 queued / 16 running / 762 errors / 17% coverage ] ****** [763 done /587 queued / 16 running / 762 errors / 17% coverage ] ****** [764 done /588 queued / 16 running / 763 errors / 17% coverage ] ****** [764 done /588 queued / 16 running / 763 errors / 17% coverage ] ****** [765 done /588 queued / 16 running / 764 errors / 17% coverage ] ****** [765 done /588 queued / 16 running / 764 errors / 17% coverage ] ****** [766 done /589 queued / 16 running / 765 errors / 17% coverage ] ****** [766 done /589 queued / 16 running / 765 errors / 17% coverage ] ****** [767 done /591 queued / 16 running / 766 errors / 17% coverage ] ****** [767 done /591 queued / 16 running / 766 errors / 17% coverage ] ****** [768 done /591 queued / 16 running / 767 errors / 17% coverage ] ****** [768 done /591 queued / 16 running / 767 errors / 17% coverage ] ****** [769 done /593 queued / 16 running / 768 errors / 17% coverage ] ****** [769 done /593 queued / 16 running / 768 errors / 17% coverage ] ****** [770 done /596 queued / 16 running / 769 errors / 17% coverage ] ****** [770 done /596 queued / 16 running / 769 errors / 17% coverage ] ****** [771 done /596 queued / 16 running / 770 errors / 17% coverage ] ****** [771 done /596 queued / 16 running / 770 errors / 17% coverage ] ****** [772 done /597 queued / 16 running / 771 errors / 17% coverage ] ****** [772 done /597 queued / 16 running / 771 errors / 17% coverage ] ****** [773 done /598 queued / 16 running / 772 errors / 17% coverage ] ****** [773 done /598 queued / 16 running / 772 errors / 17% coverage ] ****** [774 done /599 queued / 16 running / 773 errors / 17% coverage ] ****** [774 done /599 queued / 16 running / 773 errors / 17% coverage ] ****** [775 done /600 queued / 16 running / 774 errors / 17% coverage ] ****** [775 done /600 queued / 16 running / 774 errors / 17% coverage ] ****** [776 done /601 queued / 16 running / 775 errors / 17% coverage ] ****** [776 done /601 queued / 16 running / 775 errors / 17% coverage ] ****** [777 done /601 queued / 16 running / 776 errors / 17% coverage ] ****** [777 done /601 queued / 16 running / 776 errors / 17% coverage ] ****** [778 done /604 queued / 16 running / 777 errors / 17% coverage ] ****** [778 done /604 queued / 16 running / 777 errors / 17% coverage ] ****** [779 done /603 queued / 16 running / 778 errors / 17% coverage ] ****** [779 done /603 queued / 16 running / 778 errors / 17% coverage ] ****** [780 done /605 queued / 16 running / 779 errors / 17% coverage ] ****** [780 done /605 queued / 16 running / 779 errors / 17% coverage ] ****** [781 done /607 queued / 16 running / 780 errors / 17% coverage ] ****** [781 done /607 queued / 16 running / 780 errors / 17% coverage ] ****** [782 done /608 queued / 16 running / 781 errors / 17% coverage ] ****** [782 done /608 queued / 16 running / 781 errors / 17% coverage ] ****** [783 done /608 queued / 16 running / 782 errors / 17% coverage ] ****** [783 done /608 queued / 16 running / 782 errors / 17% coverage ] ****** [784 done /608 queued / 16 running / 783 errors / 17% coverage ] ****** [784 done /608 queued / 16 running / 783 errors / 17% coverage ] ****** [785 done /609 queued / 16 running / 784 errors / 17% coverage ] ****** [785 done /609 queued / 16 running / 784 errors / 17% coverage ] ****** [786 done /611 queued / 16 running / 785 errors / 17% coverage ] ****** [786 done /611 queued / 16 running / 785 errors / 17% coverage ] ****** [787 done /612 queued / 16 running / 786 errors / 17% coverage ] ****** [787 done /612 queued / 16 running / 786 errors / 17% coverage ] ****** [788 done /613 queued / 16 running / 787 errors / 17% coverage ] ****** [788 done /613 queued / 16 running / 787 errors / 17% coverage ] ****** [789 done /614 queued / 16 running / 788 errors / 17% coverage ] ****** [789 done /614 queued / 16 running / 788 errors / 17% coverage ] ****** [790 done /617 queued / 16 running / 789 errors / 17% coverage ] ****** [790 done /617 queued / 16 running / 789 errors / 17% coverage ] ****** [791 done /621 queued / 16 running / 790 errors / 17% coverage ] ****** [791 done /621 queued / 16 running / 790 errors / 17% coverage ] ****** [792 done /623 queued / 16 running / 791 errors / 17% coverage ] ****** [792 done /623 queued / 16 running / 791 errors / 17% coverage ] ****** [793 done /628 queued / 16 running / 792 errors / 17% coverage ] ****** [793 done /628 queued / 16 running / 792 errors / 17% coverage ] ****** [794 done /629 queued / 16 running / 793 errors / 17% coverage ] ****** [794 done /629 queued / 16 running / 793 errors / 17% coverage ] ****** [795 done /632 queued / 16 running / 794 errors / 17% coverage ] ****** [795 done /632 queued / 16 running / 794 errors / 17% coverage ] ****** [796 done /632 queued / 16 running / 795 errors / 17% coverage ] ****** [796 done /632 queued / 16 running / 795 errors / 17% coverage ] ****** [797 done /637 queued / 16 running / 796 errors / 17% coverage ] ****** [797 done /637 queued / 16 running / 796 errors / 17% coverage ] ****** [798 done /639 queued / 16 running / 797 errors / 17% coverage ] ****** [798 done /639 queued / 16 running / 797 errors / 17% coverage ] ****** [799 done /640 queued / 16 running / 798 errors / 17% coverage ] ****** [799 done /640 queued / 16 running / 798 errors / 17% coverage ] ****** [800 done /643 queued / 16 running / 799 errors / 17% coverage ] ****** [800 done /643 queued / 16 running / 799 errors / 17% coverage ] ****** [801 done /644 queued / 16 running / 800 errors / 17% coverage ] ****** [801 done /644 queued / 16 running / 800 errors / 17% coverage ] ****** [802 done /646 queued / 16 running / 801 errors / 17% coverage ] ****** [802 done /646 queued / 16 running / 801 errors / 17% coverage ] ****** [803 done /647 queued / 16 running / 802 errors / 17% coverage ] ****** [803 done /647 queued / 16 running / 802 errors / 17% coverage ] ****** [804 done /649 queued / 16 running / 803 errors / 17% coverage ] ****** [804 done /649 queued / 16 running / 803 errors / 17% coverage ] ****** [805 done /649 queued / 16 running / 804 errors / 17% coverage ] ****** [805 done /649 queued / 16 running / 804 errors / 17% coverage ] ****** [806 done /650 queued / 16 running / 805 errors / 17% coverage ] ****** [806 done /650 queued / 16 running / 805 errors / 17% coverage ] ****** [807 done /651 queued / 16 running / 806 errors / 17% coverage ] ****** [807 done /651 queued / 16 running / 806 errors / 17% coverage ] ****** [808 done /651 queued / 16 running / 807 errors / 17% coverage ] ****** [808 done /651 queued / 16 running / 807 errors / 17% coverage ] ****** [809 done /651 queued / 16 running / 808 errors / 17% coverage ] ****** [809 done /651 queued / 16 running / 808 errors / 17% coverage ] ****** [810 done /651 queued / 16 running / 809 errors / 17% coverage ] ****** [810 done /651 queued / 16 running / 809 errors / 17% coverage ] ****** [811 done /651 queued / 16 running / 810 errors / 17% coverage ] ****** [811 done /651 queued / 16 running / 810 errors / 17% coverage ] ****** [812 done /653 queued / 16 running / 811 errors / 17% coverage ] ****** [812 done /653 queued / 16 running / 811 errors / 17% coverage ] ****** [813 done /653 queued / 16 running / 812 errors / 17% coverage ] ****** [813 done /653 queued / 16 running / 812 errors / 17% coverage ] ****** [814 done /654 queued / 16 running / 813 errors / 17% coverage ] ****** [814 done /654 queued / 16 running / 813 errors / 17% coverage ] ****** [815 done /654 queued / 16 running / 814 errors / 17% coverage ] ****** [815 done /654 queued / 16 running / 814 errors / 17% coverage ] ****** [816 done /655 queued / 16 running / 815 errors / 17% coverage ] ****** [816 done /655 queued / 16 running / 815 errors / 17% coverage ] ****** [817 done /654 queued / 16 running / 816 errors / 17% coverage ] ****** [817 done /654 queued / 16 running / 816 errors / 17% coverage ] ****** [818 done /655 queued / 16 running / 817 errors / 17% coverage ] ****** [818 done /655 queued / 16 running / 817 errors / 17% coverage ] ****** [819 done /654 queued / 16 running / 818 errors / 17% coverage ] ****** [819 done /654 queued / 16 running / 818 errors / 17% coverage ] ****** [820 done /656 queued / 16 running / 819 errors / 17% coverage ] ****** [820 done /656 queued / 16 running / 819 errors / 17% coverage ] ****** [821 done /658 queued / 16 running / 820 errors / 17% coverage ] ****** [821 done /658 queued / 16 running / 820 errors / 17% coverage ] ****** [822 done /657 queued / 16 running / 821 errors / 17% coverage ] ****** [822 done /657 queued / 16 running / 821 errors / 17% coverage ] ****** [823 done /658 queued / 16 running / 822 errors / 17% coverage ] ****** [823 done /658 queued / 16 running / 822 errors / 17% coverage ] ****** [824 done /657 queued / 16 running / 823 errors / 17% coverage ] ****** [824 done /657 queued / 16 running / 823 errors / 17% coverage ] ****** [825 done /658 queued / 16 running / 824 errors / 17% coverage ] ****** [825 done /658 queued / 16 running / 824 errors / 17% coverage ] ****** [826 done /659 queued / 16 running / 825 errors / 17% coverage ] ****** [826 done /659 queued / 16 running / 825 errors / 17% coverage ] ****** [827 done /660 queued / 16 running / 826 errors / 17% coverage ] ****** [827 done /660 queued / 16 running / 826 errors / 17% coverage ] ****** [828 done /661 queued / 16 running / 827 errors / 17% coverage ] ****** [828 done /661 queued / 16 running / 827 errors / 17% coverage ] ****** [829 done /661 queued / 16 running / 828 errors / 17% coverage ] ****** [829 done /661 queued / 16 running / 828 errors / 17% coverage ] ****** [830 done /663 queued / 16 running / 829 errors / 17% coverage ] ****** [830 done /663 queued / 16 running / 829 errors / 17% coverage ] ****** [831 done /663 queued / 16 running / 830 errors / 17% coverage ] ****** [831 done /663 queued / 16 running / 830 errors / 17% coverage ] ****** [832 done /664 queued / 16 running / 831 errors / 17% coverage ] ****** [832 done /664 queued / 16 running / 831 errors / 17% coverage ] ****** [833 done /668 queued / 16 running / 832 errors / 17% coverage ] ****** [833 done /668 queued / 16 running / 832 errors / 17% coverage ] ****** [834 done /671 queued / 16 running / 833 errors / 17% coverage ] ****** [834 done /671 queued / 16 running / 833 errors / 17% coverage ] ****** [835 done /673 queued / 16 running / 834 errors / 17% coverage ] ****** [835 done /673 queued / 16 running / 834 errors / 17% coverage ] ****** [836 done /674 queued / 16 running / 835 errors / 17% coverage ] ****** [836 done /674 queued / 16 running / 835 errors / 17% coverage ] ****** [837 done /675 queued / 16 running / 836 errors / 17% coverage ] ****** [837 done /675 queued / 16 running / 836 errors / 17% coverage ] ****** [838 done /676 queued / 16 running / 837 errors / 17% coverage ] ****** [838 done /676 queued / 16 running / 837 errors / 17% coverage ] ****** [839 done /677 queued / 16 running / 838 errors / 17% coverage ] ****** [839 done /677 queued / 16 running / 838 errors / 17% coverage ] ****** [840 done /678 queued / 16 running / 839 errors / 17% coverage ] ****** [840 done /678 queued / 16 running / 839 errors / 17% coverage ] ****** [841 done /679 queued / 16 running / 840 errors / 17% coverage ] ****** [841 done /679 queued / 16 running / 840 errors / 17% coverage ] ****** [842 done /680 queued / 16 running / 841 errors / 17% coverage ] ****** [842 done /680 queued / 16 running / 841 errors / 17% coverage ] ****** [843 done /681 queued / 16 running / 842 errors / 17% coverage ] ****** [843 done /681 queued / 16 running / 842 errors / 17% coverage ] ****** [844 done /681 queued / 16 running / 843 errors / 17% coverage ] ****** [844 done /681 queued / 16 running / 843 errors / 17% coverage ] ****** [845 done /683 queued / 16 running / 844 errors / 17% coverage ] ****** [845 done /683 queued / 16 running / 844 errors / 17% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","create","setPrototypeOf","toString","apply","bound "]
*-- Stat Module Done --*
*-- Test Case {"_bound":0,"Switcher":false,"Target_Switch_Base":0} start 0.074 took 9.8564s
*-- Test Case {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0} start 10.0897 took 15.7762s
*-- Errors occured in test {"Switcher":true,"Target_Switch_Base":0,"_bound":1,"ExpansionArg_type":0,"ExpansionArg_type_2":0}
* Error: TypeError: Cannot read property 'port' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"Target_Switch_Base":0,"_bound":1}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"_bound":3} start 26.169 took 10.5733s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"_bound":3}
* Error: TypeError: Cannot read property 'port' of null
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":1,"_bound":3}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"_bound":2} start 26.0841 took 14.9831s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"_bound":2}
* Error: TypeError: Cannot read property 'port' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":0,"_bound":2}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"_bound":4,"ExpansionArg_int":0} start 36.8707 took 14.6936s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"_bound":4,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Invalid number (351:32) on program /**
 * Unix crypt(3) Javascript Implementation
 * 
 * Straightforward implementaiton of the DES-based Unix crypt(3) hash, based largely
 * on crypt.c in the Seventh Edition Unix distribution released by Caldera Systems 
 * under a BSD-style license.
 *
 * @author <a href="mailto:tim@timdumol.com">Tim Joseph Dumol</a>
 */

/*
Legalese:

Copyright(C) Tim Joseph F. Dumol 2011. All rights reserved.
Derived from crypt.c in the Seventh Edition Unix distribution by
Caldera International, which is Copyright(C) Caldera International
Inc. 2001-2002. All rights reserved.

Redistribution and use in source and binary forms,
with or without modification, are permitted provided that the
following conditions are met:

Redistributions of source code and documentation must retain the above
copyright notice, this list of conditions and the following
disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

* All advertising materials mentioning features or use of this software
  must display the following acknowledgement: This product includes
  software developed or owned by Caldera International, Inc.

* Neither the name of Caldera International, Inc. nor the names of
  other contributors may be used to endorse or promote products derived
  from this software without specific prior written permission.

USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE
FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */

// UMD pattern
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.unixCryptTD = factory();
  }
}(this, function () {
    /*
     * Initial permutation,
     */
    var IP = [
        58,50,42,34,26,18,10, 2,
        60,52,44,36,28,20,12, 4,
        62,54,46,38,30,22,14, 6,
        64,56,48,40,32,24,16, 8,
        57,49,41,33,25,17, 9, 1,
        59,51,43,35,27,19,11, 3,
        61,53,45,37,29,21,13, 5,
        63,55,47,39,31,23,15, 7
    ];

    /*
     * Final permutation, FP = IP^(-1)
     */
    var FP =[
        40, 8,48,16,56,24,64,32,
        39, 7,47,15,55,23,63,31,
        38, 6,46,14,54,22,62,30,
        37, 5,45,13,53,21,61,29,
        36, 4,44,12,52,20,60,28,
        35, 3,43,11,51,19,59,27,
        34, 2,42,10,50,18,58,26,
        33, 1,41, 9,49,17,57,25
    ];

    /*
     * Permuted-choice 1 from the key bits
     * to yield C and D.
     * Note that bits 8,16... are left out:
     * They are intended for a parity check.
     */
    var PC1_C = [
        57,49,41,33,25,17, 9,
        1,58,50,42,34,26,18,
        10, 2,59,51,43,35,27,
        19,11, 3,60,52,44,36
    ];

    var PC1_D = [
        63,55,47,39,31,23,15,
        7,62,54,46,38,30,22,
        14, 6,61,53,45,37,29,
        21,13, 5,28,20,12, 4
    ];

    /*
     * Sequence of shifts used for the key schedule.
     */
    var shifts =[
        1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1
    ];

    /*
     * Permuted-choice 2, to pick out the bits from
     * the CD array that generate the key schedule.
     */
    var PC2_C = [
        14,17,11,24, 1, 5,
        3,28,15, 6,21,10,
        23,19,12, 4,26, 8,
        16, 7,27,20,13, 2
    ];

    var PC2_D = [
        41,52,31,37,47,55,
        30,40,51,45,33,48,
        44,49,39,56,34,53,
        46,42,50,36,29,32
    ];

    /*
     * The C and D arrays used to calculate the key schedule.
     */

    var C = [];
    var D = [];
    /*
     * The key schedule.
     * Generated from the key.
     */
    var KS = [];
    for (var i = 0; i < 16; ++i) {
        KS[i] = [];
    }

    /*
     * Set up the key schedule from the key.
     */

    function setkey(key) {
        var i, j, k, t;

        /*
         * First, generate C and D by permuting
         * the key.  The low order bit of each
         * 8-bit char is not used, so C and D are only 28
         * bits apiece.
         */
        for (i=0; i<28; i++) {
            C[i] = key[PC1_C[i]-1];
            D[i] = key[PC1_D[i]-1];
        }
        /*
         * To generate Ki, rotate C and D according
         * to schedule and pick up a permutation
         * using PC2.
         */
        for (i=0; i<16; i++) {
            /*
             * rotate.
             */
            for (k=0; k<shifts[i]; k++) {
                t = C[0];
                for (j=0; j<28-1; j++)
                    C[j] = C[j+1];
                C[27] = t;
                t = D[0];
                for (j=0; j<28-1; j++)
                    D[j] = D[j+1];
                D[27] = t;
            }
            /*
             * get Ki. Note C and D are concatenated.
             */
            for (j=0; j<24; j++) {
                KS[i][j] = C[PC2_C[j]-1];
                KS[i][j+24] = D[PC2_D[j]-28-1];
            }
        }
    }

    /*
     * The E bit-selection table.
     */
    var E = [];
    var e = [
        32, 1, 2, 3, 4, 5,
        4, 5, 6, 7, 8, 9,
        8, 9,10,11,12,13,
        12,13,14,15,16,17,
        16,17,18,19,20,21,
        20,21,22,23,24,25,
        24,25,26,27,28,29,
        28,29,30,31,32, 1
    ];

    /*
     * The 8 selection functions.
     * For some reason, they give a 0-origin
     * index, unlike everything else.
     */
    var S = [
        [14, 4,13, 1, 2,15,11, 8, 3,10, 6,12, 5, 9, 0, 7,
         0,15, 7, 4,14, 2,13, 1,10, 6,12,11, 9, 5, 3, 8,
         4, 1,14, 8,13, 6, 2,11,15,12, 9, 7, 3,10, 5, 0,
         15,12, 8, 2, 4, 9, 1, 7, 5,11, 3,14,10, 0, 6,13],

        [15, 1, 8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10,
         3,13, 4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5,
         0,14, 7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15,
         13, 8,10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9],

        [10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8,
         13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1,
         13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7,
         1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12],

        [7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15,
         13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9,
         10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4,
         3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14],

        [2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9,
         14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6,
         4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14,
         11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3],

        [12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11,
         10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8,
         9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6,
         4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13],

        [4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1,
         13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6,
         1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2,
         6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12],

        [13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7,
         1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2,
         7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8,
         2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11]
    ]

    /*
     * P is a permutation on the selected combination
     * of the current L and key.
     */
    var P = [
        16, 7,20,21,
        29,12,28,17,
        1,15,23,26,
        5,18,31,10,
        2, 8,24,14,
        32,27, 3, 9,
        19,13,30, 6,
        22,11, 4,25
    ];

    /*
     * The current block, divided into 2 halves.
     */
    var L = [], R = [];
    var tempL = [[]];
    var f =[];

    /*
     * The combination of the key and the input, before selection.
     */
    var preS = [];

    /*
     * The payoff: encrypt a block.
     */

    function encrypt(block, edflag) {
        var i, ii, j, k, t;

        /*
         * First, permute the bits in the input
         */
        var perm = [];
        for (j=0; j<64; j++) {
            perm[j] = block[IP[j]-1];
        }
        for (j=0; j<32; ++j) {
            L[j] = perm[j];
            R[j] = perm[j+32];
        }
        /*
         * Perform an encryption operation 16 times.
         */
        for (ii=0; ii<16; ii++) {
            /*
             * Set direction
             */
            if (edflag)
                i = 15-ii;
            else
                i = ii;
            /*
             * Save the R array,
             * which will be the new L.
             */
            for (j=0; j<32; j++)
                tempL[j] = R[j];
            /*
             * Expand R to 48 bits using the E selector;
             * exclusive-or with the current key bits.
             */
            for (j=0; j<48; j++)
                preS[j] = R[E[j]-1] ^ KS[i][j];
            /*
             * The pre-select bits are now considered
             * in 8 groups of 6 bits each.
             * The 8 selection functions map these
             * 6-bit quantities into 4-bit quantities
             * and the results permuted
             * to make an f(R, K).
             * The indexing into the selection functions
             * is peculiar; it could be simplified by
             * rewriting the tables.
             */
            for (j=0; j<8; j++) {
                t = 6*j;
                k = S[j][(preS[t+0]<<5)+
                         (preS[t+1]<<3)+
                         (preS[t+2]<<2)+
                         (preS[t+3]<<1)+
                         (preS[t+4]<<0)+
                         (preS[t+5]<<4)];
                t = 4*j;
                f[t+0] = (k>>3)&01;
                f[t+1] = (k>>2)&01;
                f[t+2] = (k>>1)&01;
                f[t+3] = (k>>0)&01;
            }
            /*
             * The new R is L ^ f(R, K).
             * The f here has to be permuted first, though.
             */
            for (j=0; j<32; j++)
                R[j] = L[j] ^ f[P[j]-1];
            /*
             * Finally, the new L (the original R)
             * is copied back.
             */
            for (j=0; j<32; j++)
                L[j] = tempL[j];
        }
        /*
         * The output L and R are reversed.
         */
        for (j=0; j<32; j++) {
            t = L[j];
            L[j] = R[j];
            R[j] = t;
        }
        /*
         * The final output
         * gets the inverse permutation of the very original.
         */
        for (j=0; j<32; ++j) {
            perm[j] = L[j];
            perm[j+32] = R[j];
        }
        for (j=0; j<64; j++) {
            block[j] = perm[FP[j]-1];
        }
    }

    /**
     * Transform a string to an array of bytes
     */
    var strToBytes = function(str) {
        var i, x = [];
        for (i = 0; i < str.length; ++i) {
            x[i] = str.charCodeAt(i);
        }
        return x
    };

    var bytesToStr = function(bytes) {
        return String.fromCharCode.apply(String, bytes);
    }
    
    /**
     * Implements the Unix crypt(3) DES-based hash.
     *
     * @param {Array.<number>|string} pw The string to hash
     * @param {Array.<number>|string} salt The salt to use (two character string from [a-zA-Z0-9./]).
     * @param {boolean=} returnBytes (optional) If true, return an array of bytes;
     *                                      otherwise, return a string.
     */
    return function crypt(pw, salt, returnBytes) {
        if (typeof(pw) === 'string') pw = strToBytes(pw);
        if (typeof(salt) === 'string') salt = strToBytes(salt);

        var i, j, k, c, temp;
        var block = [], iobuf = [];
        for(i=0; i<66; i++)
            block[i] = 0;
        for(i=0, k=0; (c= pw[k]) && i<64; ++k){
            for(j=0; j<7; j++, i++)
                block[i] = (c>>(6-j)) & 01;
            i++;
        }

        setkey(block);

        for(i=0; i<66; i++)
            block[i] = 0;

        for(i=0;i<48;i++)
            E[i] = e[i];

        for(i=0, k=0;i<2;i++, ++k){
            c = salt[k];
            iobuf[i] = c;
            if(c>'Z'.charCodeAt(0)) c -= 6;
            if(c>'9'.charCodeAt(0)) c -= 7;
            c -= '.'.charCodeAt(0);
            for(j=0;j<6;j++){
                if((c>>j) & 01){
                    temp = E[6*i+j];
                    E[6*i+j] = E[6*i+j+24];
                    E[6*i+j+24] = temp;
                }
            }
        }

        for(i=0; i<25; i++)
            encrypt(block,0);

        for(i=0; i<11; i++){
            c = 0;
            for(j=0; j<6; j++){
                c <<= 1;
                c |= block[6*i+j];
            }
            c += '.'.charCodeAt(0);
            if(c>'9'.charCodeAt(0)) c += 7;
            if(c>'Z'.charCodeAt(0)) c += 6;
            iobuf[i+2] = c;
        }
        if(iobuf[1]==0)
            iobuf[1] = iobuf[0];

        if (returnBytes) return(iobuf);
        else return bytesToStr(iobuf);
    }
}));


 at SyntaxError: Invalid number (351:32)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseExprOp (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1654:14)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1639:17)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":2,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"_bound":3,"ExpansionArg_int":0} start 41.1162 took 12.1733s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"_bound":3,"ExpansionArg_int":0}
* Error: TypeError: Cannot read property 'port' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_type_2":0,"_bound":3}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"_bound":4,"ExpansionArg_int":0} start 41.1499 took 12.2764s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"_bound":4,"ExpansionArg_int":0}
* Error: Tropigate failed because SyntaxError: Invalid number (351:32) on program /**
 * Unix crypt(3) Javascript Implementation
 * 
 * Straightforward implementaiton of the DES-based Unix crypt(3) hash, based largely
 * on crypt.c in the Seventh Edition Unix distribution released by Caldera Systems 
 * under a BSD-style license.
 *
 * @author <a href="mailto:tim@timdumol.com">Tim Joseph Dumol</a>
 */

/*
Legalese:

Copyright(C) Tim Joseph F. Dumol 2011. All rights reserved.
Derived from crypt.c in the Seventh Edition Unix distribution by
Caldera International, which is Copyright(C) Caldera International
Inc. 2001-2002. All rights reserved.

Redistribution and use in source and binary forms,
with or without modification, are permitted provided that the
following conditions are met:

Redistributions of source code and documentation must retain the above
copyright notice, this list of conditions and the following
disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

* All advertising materials mentioning features or use of this software
  must display the following acknowledgement: This product includes
  software developed or owned by Caldera International, Inc.

* Neither the name of Caldera International, Inc. nor the names of
  other contributors may be used to endorse or promote products derived
  from this software without specific prior written permission.

USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE
FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */

// UMD pattern
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.unixCryptTD = factory();
  }
}(this, function () {
    /*
     * Initial permutation,
     */
    var IP = [
        58,50,42,34,26,18,10, 2,
        60,52,44,36,28,20,12, 4,
        62,54,46,38,30,22,14, 6,
        64,56,48,40,32,24,16, 8,
        57,49,41,33,25,17, 9, 1,
        59,51,43,35,27,19,11, 3,
        61,53,45,37,29,21,13, 5,
        63,55,47,39,31,23,15, 7
    ];

    /*
     * Final permutation, FP = IP^(-1)
     */
    var FP =[
        40, 8,48,16,56,24,64,32,
        39, 7,47,15,55,23,63,31,
        38, 6,46,14,54,22,62,30,
        37, 5,45,13,53,21,61,29,
        36, 4,44,12,52,20,60,28,
        35, 3,43,11,51,19,59,27,
        34, 2,42,10,50,18,58,26,
        33, 1,41, 9,49,17,57,25
    ];

    /*
     * Permuted-choice 1 from the key bits
     * to yield C and D.
     * Note that bits 8,16... are left out:
     * They are intended for a parity check.
     */
    var PC1_C = [
        57,49,41,33,25,17, 9,
        1,58,50,42,34,26,18,
        10, 2,59,51,43,35,27,
        19,11, 3,60,52,44,36
    ];

    var PC1_D = [
        63,55,47,39,31,23,15,
        7,62,54,46,38,30,22,
        14, 6,61,53,45,37,29,
        21,13, 5,28,20,12, 4
    ];

    /*
     * Sequence of shifts used for the key schedule.
     */
    var shifts =[
        1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1
    ];

    /*
     * Permuted-choice 2, to pick out the bits from
     * the CD array that generate the key schedule.
     */
    var PC2_C = [
        14,17,11,24, 1, 5,
        3,28,15, 6,21,10,
        23,19,12, 4,26, 8,
        16, 7,27,20,13, 2
    ];

    var PC2_D = [
        41,52,31,37,47,55,
        30,40,51,45,33,48,
        44,49,39,56,34,53,
        46,42,50,36,29,32
    ];

    /*
     * The C and D arrays used to calculate the key schedule.
     */

    var C = [];
    var D = [];
    /*
     * The key schedule.
     * Generated from the key.
     */
    var KS = [];
    for (var i = 0; i < 16; ++i) {
        KS[i] = [];
    }

    /*
     * Set up the key schedule from the key.
     */

    function setkey(key) {
        var i, j, k, t;

        /*
         * First, generate C and D by permuting
         * the key.  The low order bit of each
         * 8-bit char is not used, so C and D are only 28
         * bits apiece.
         */
        for (i=0; i<28; i++) {
            C[i] = key[PC1_C[i]-1];
            D[i] = key[PC1_D[i]-1];
        }
        /*
         * To generate Ki, rotate C and D according
         * to schedule and pick up a permutation
         * using PC2.
         */
        for (i=0; i<16; i++) {
            /*
             * rotate.
             */
            for (k=0; k<shifts[i]; k++) {
                t = C[0];
                for (j=0; j<28-1; j++)
                    C[j] = C[j+1];
                C[27] = t;
                t = D[0];
                for (j=0; j<28-1; j++)
                    D[j] = D[j+1];
                D[27] = t;
            }
            /*
             * get Ki. Note C and D are concatenated.
             */
            for (j=0; j<24; j++) {
                KS[i][j] = C[PC2_C[j]-1];
                KS[i][j+24] = D[PC2_D[j]-28-1];
            }
        }
    }

    /*
     * The E bit-selection table.
     */
    var E = [];
    var e = [
        32, 1, 2, 3, 4, 5,
        4, 5, 6, 7, 8, 9,
        8, 9,10,11,12,13,
        12,13,14,15,16,17,
        16,17,18,19,20,21,
        20,21,22,23,24,25,
        24,25,26,27,28,29,
        28,29,30,31,32, 1
    ];

    /*
     * The 8 selection functions.
     * For some reason, they give a 0-origin
     * index, unlike everything else.
     */
    var S = [
        [14, 4,13, 1, 2,15,11, 8, 3,10, 6,12, 5, 9, 0, 7,
         0,15, 7, 4,14, 2,13, 1,10, 6,12,11, 9, 5, 3, 8,
         4, 1,14, 8,13, 6, 2,11,15,12, 9, 7, 3,10, 5, 0,
         15,12, 8, 2, 4, 9, 1, 7, 5,11, 3,14,10, 0, 6,13],

        [15, 1, 8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10,
         3,13, 4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5,
         0,14, 7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15,
         13, 8,10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9],

        [10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8,
         13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1,
         13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7,
         1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12],

        [7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15,
         13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9,
         10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4,
         3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14],

        [2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9,
         14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6,
         4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14,
         11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3],

        [12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11,
         10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8,
         9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6,
         4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13],

        [4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1,
         13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6,
         1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2,
         6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12],

        [13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7,
         1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2,
         7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8,
         2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11]
    ]

    /*
     * P is a permutation on the selected combination
     * of the current L and key.
     */
    var P = [
        16, 7,20,21,
        29,12,28,17,
        1,15,23,26,
        5,18,31,10,
        2, 8,24,14,
        32,27, 3, 9,
        19,13,30, 6,
        22,11, 4,25
    ];

    /*
     * The current block, divided into 2 halves.
     */
    var L = [], R = [];
    var tempL = [[]];
    var f =[];

    /*
     * The combination of the key and the input, before selection.
     */
    var preS = [];

    /*
     * The payoff: encrypt a block.
     */

    function encrypt(block, edflag) {
        var i, ii, j, k, t;

        /*
         * First, permute the bits in the input
         */
        var perm = [];
        for (j=0; j<64; j++) {
            perm[j] = block[IP[j]-1];
        }
        for (j=0; j<32; ++j) {
            L[j] = perm[j];
            R[j] = perm[j+32];
        }
        /*
         * Perform an encryption operation 16 times.
         */
        for (ii=0; ii<16; ii++) {
            /*
             * Set direction
             */
            if (edflag)
                i = 15-ii;
            else
                i = ii;
            /*
             * Save the R array,
             * which will be the new L.
             */
            for (j=0; j<32; j++)
                tempL[j] = R[j];
            /*
             * Expand R to 48 bits using the E selector;
             * exclusive-or with the current key bits.
             */
            for (j=0; j<48; j++)
                preS[j] = R[E[j]-1] ^ KS[i][j];
            /*
             * The pre-select bits are now considered
             * in 8 groups of 6 bits each.
             * The 8 selection functions map these
             * 6-bit quantities into 4-bit quantities
             * and the results permuted
             * to make an f(R, K).
             * The indexing into the selection functions
             * is peculiar; it could be simplified by
             * rewriting the tables.
             */
            for (j=0; j<8; j++) {
                t = 6*j;
                k = S[j][(preS[t+0]<<5)+
                         (preS[t+1]<<3)+
                         (preS[t+2]<<2)+
                         (preS[t+3]<<1)+
                         (preS[t+4]<<0)+
                         (preS[t+5]<<4)];
                t = 4*j;
                f[t+0] = (k>>3)&01;
                f[t+1] = (k>>2)&01;
                f[t+2] = (k>>1)&01;
                f[t+3] = (k>>0)&01;
            }
            /*
             * The new R is L ^ f(R, K).
             * The f here has to be permuted first, though.
             */
            for (j=0; j<32; j++)
                R[j] = L[j] ^ f[P[j]-1];
            /*
             * Finally, the new L (the original R)
             * is copied back.
             */
            for (j=0; j<32; j++)
                L[j] = tempL[j];
        }
        /*
         * The output L and R are reversed.
         */
        for (j=0; j<32; j++) {
            t = L[j];
            L[j] = R[j];
            R[j] = t;
        }
        /*
         * The final output
         * gets the inverse permutation of the very original.
         */
        for (j=0; j<32; ++j) {
            perm[j] = L[j];
            perm[j+32] = R[j];
        }
        for (j=0; j<64; j++) {
            block[j] = perm[FP[j]-1];
        }
    }

    /**
     * Transform a string to an array of bytes
     */
    var strToBytes = function(str) {
        var i, x = [];
        for (i = 0; i < str.length; ++i) {
            x[i] = str.charCodeAt(i);
        }
        return x
    };

    var bytesToStr = function(bytes) {
        return String.fromCharCode.apply(String, bytes);
    }
    
    /**
     * Implements the Unix crypt(3) DES-based hash.
     *
     * @param {Array.<number>|string} pw The string to hash
     * @param {Array.<number>|string} salt The salt to use (two character string from [a-zA-Z0-9./]).
     * @param {boolean=} returnBytes (optional) If true, return an array of bytes;
     *                                      otherwise, return a string.
     */
    return function crypt(pw, salt, returnBytes) {
        if (typeof(pw) === 'string') pw = strToBytes(pw);
        if (typeof(salt) === 'string') salt = strToBytes(salt);

        var i, j, k, c, temp;
        var block = [], iobuf = [];
        for(i=0; i<66; i++)
            block[i] = 0;
        for(i=0, k=0; (c= pw[k]) && i<64; ++k){
            for(j=0; j<7; j++, i++)
                block[i] = (c>>(6-j)) & 01;
            i++;
        }

        setkey(block);

        for(i=0; i<66; i++)
            block[i] = 0;

        for(i=0;i<48;i++)
            E[i] = e[i];

        for(i=0, k=0;i<2;i++, ++k){
            c = salt[k];
            iobuf[i] = c;
            if(c>'Z'.charCodeAt(0)) c -= 6;
            if(c>'9'.charCodeAt(0)) c -= 7;
            c -= '.'.charCodeAt(0);
            for(j=0;j<6;j++){
                if((c>>j) & 01){
                    temp = E[6*i+j];
                    E[6*i+j] = E[6*i+j+24];
                    E[6*i+j+24] = temp;
                }
            }
        }

        for(i=0; i<25; i++)
            encrypt(block,0);

        for(i=0; i<11; i++){
            c = 0;
            for(j=0; j<6; j++){
                c <<= 1;
                c |= block[6*i+j];
            }
            c += '.'.charCodeAt(0);
            if(c>'9'.charCodeAt(0)) c += 7;
            if(c>'Z'.charCodeAt(0)) c += 6;
            iobuf[i+2] = c;
        }
        if(iobuf[1]==0)
            iobuf[1] = iobuf[0];

        if (returnBytes) return(iobuf);
        else return bytesToStr(iobuf);
    }
}));


 at SyntaxError: Invalid number (351:32)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseExprOp (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1654:14)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1639:17)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":2,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":5,"ExpansionArg_string":"PureString"} start 51.6256 took 8.3432s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":5,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Invalid number (351:32) on program /**
 * Unix crypt(3) Javascript Implementation
 * 
 * Straightforward implementaiton of the DES-based Unix crypt(3) hash, based largely
 * on crypt.c in the Seventh Edition Unix distribution released by Caldera Systems 
 * under a BSD-style license.
 *
 * @author <a href="mailto:tim@timdumol.com">Tim Joseph Dumol</a>
 */

/*
Legalese:

Copyright(C) Tim Joseph F. Dumol 2011. All rights reserved.
Derived from crypt.c in the Seventh Edition Unix distribution by
Caldera International, which is Copyright(C) Caldera International
Inc. 2001-2002. All rights reserved.

Redistribution and use in source and binary forms,
with or without modification, are permitted provided that the
following conditions are met:

Redistributions of source code and documentation must retain the above
copyright notice, this list of conditions and the following
disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

* All advertising materials mentioning features or use of this software
  must display the following acknowledgement: This product includes
  software developed or owned by Caldera International, Inc.

* Neither the name of Caldera International, Inc. nor the names of
  other contributors may be used to endorse or promote products derived
  from this software without specific prior written permission.

USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE
FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */

// UMD pattern
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.unixCryptTD = factory();
  }
}(this, function () {
    /*
     * Initial permutation,
     */
    var IP = [
        58,50,42,34,26,18,10, 2,
        60,52,44,36,28,20,12, 4,
        62,54,46,38,30,22,14, 6,
        64,56,48,40,32,24,16, 8,
        57,49,41,33,25,17, 9, 1,
        59,51,43,35,27,19,11, 3,
        61,53,45,37,29,21,13, 5,
        63,55,47,39,31,23,15, 7
    ];

    /*
     * Final permutation, FP = IP^(-1)
     */
    var FP =[
        40, 8,48,16,56,24,64,32,
        39, 7,47,15,55,23,63,31,
        38, 6,46,14,54,22,62,30,
        37, 5,45,13,53,21,61,29,
        36, 4,44,12,52,20,60,28,
        35, 3,43,11,51,19,59,27,
        34, 2,42,10,50,18,58,26,
        33, 1,41, 9,49,17,57,25
    ];

    /*
     * Permuted-choice 1 from the key bits
     * to yield C and D.
     * Note that bits 8,16... are left out:
     * They are intended for a parity check.
     */
    var PC1_C = [
        57,49,41,33,25,17, 9,
        1,58,50,42,34,26,18,
        10, 2,59,51,43,35,27,
        19,11, 3,60,52,44,36
    ];

    var PC1_D = [
        63,55,47,39,31,23,15,
        7,62,54,46,38,30,22,
        14, 6,61,53,45,37,29,
        21,13, 5,28,20,12, 4
    ];

    /*
     * Sequence of shifts used for the key schedule.
     */
    var shifts =[
        1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1
    ];

    /*
     * Permuted-choice 2, to pick out the bits from
     * the CD array that generate the key schedule.
     */
    var PC2_C = [
        14,17,11,24, 1, 5,
        3,28,15, 6,21,10,
        23,19,12, 4,26, 8,
        16, 7,27,20,13, 2
    ];

    var PC2_D = [
        41,52,31,37,47,55,
        30,40,51,45,33,48,
        44,49,39,56,34,53,
        46,42,50,36,29,32
    ];

    /*
     * The C and D arrays used to calculate the key schedule.
     */

    var C = [];
    var D = [];
    /*
     * The key schedule.
     * Generated from the key.
     */
    var KS = [];
    for (var i = 0; i < 16; ++i) {
        KS[i] = [];
    }

    /*
     * Set up the key schedule from the key.
     */

    function setkey(key) {
        var i, j, k, t;

        /*
         * First, generate C and D by permuting
         * the key.  The low order bit of each
         * 8-bit char is not used, so C and D are only 28
         * bits apiece.
         */
        for (i=0; i<28; i++) {
            C[i] = key[PC1_C[i]-1];
            D[i] = key[PC1_D[i]-1];
        }
        /*
         * To generate Ki, rotate C and D according
         * to schedule and pick up a permutation
         * using PC2.
         */
        for (i=0; i<16; i++) {
            /*
             * rotate.
             */
            for (k=0; k<shifts[i]; k++) {
                t = C[0];
                for (j=0; j<28-1; j++)
                    C[j] = C[j+1];
                C[27] = t;
                t = D[0];
                for (j=0; j<28-1; j++)
                    D[j] = D[j+1];
                D[27] = t;
            }
            /*
             * get Ki. Note C and D are concatenated.
             */
            for (j=0; j<24; j++) {
                KS[i][j] = C[PC2_C[j]-1];
                KS[i][j+24] = D[PC2_D[j]-28-1];
            }
        }
    }

    /*
     * The E bit-selection table.
     */
    var E = [];
    var e = [
        32, 1, 2, 3, 4, 5,
        4, 5, 6, 7, 8, 9,
        8, 9,10,11,12,13,
        12,13,14,15,16,17,
        16,17,18,19,20,21,
        20,21,22,23,24,25,
        24,25,26,27,28,29,
        28,29,30,31,32, 1
    ];

    /*
     * The 8 selection functions.
     * For some reason, they give a 0-origin
     * index, unlike everything else.
     */
    var S = [
        [14, 4,13, 1, 2,15,11, 8, 3,10, 6,12, 5, 9, 0, 7,
         0,15, 7, 4,14, 2,13, 1,10, 6,12,11, 9, 5, 3, 8,
         4, 1,14, 8,13, 6, 2,11,15,12, 9, 7, 3,10, 5, 0,
         15,12, 8, 2, 4, 9, 1, 7, 5,11, 3,14,10, 0, 6,13],

        [15, 1, 8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10,
         3,13, 4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5,
         0,14, 7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15,
         13, 8,10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9],

        [10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8,
         13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1,
         13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7,
         1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12],

        [7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15,
         13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9,
         10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4,
         3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14],

        [2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9,
         14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6,
         4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14,
         11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3],

        [12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11,
         10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8,
         9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6,
         4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13],

        [4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1,
         13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6,
         1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2,
         6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12],

        [13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7,
         1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2,
         7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8,
         2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11]
    ]

    /*
     * P is a permutation on the selected combination
     * of the current L and key.
     */
    var P = [
        16, 7,20,21,
        29,12,28,17,
        1,15,23,26,
        5,18,31,10,
        2, 8,24,14,
        32,27, 3, 9,
        19,13,30, 6,
        22,11, 4,25
    ];

    /*
     * The current block, divided into 2 halves.
     */
    var L = [], R = [];
    var tempL = [[]];
    var f =[];

    /*
     * The combination of the key and the input, before selection.
     */
    var preS = [];

    /*
     * The payoff: encrypt a block.
     */

    function encrypt(block, edflag) {
        var i, ii, j, k, t;

        /*
         * First, permute the bits in the input
         */
        var perm = [];
        for (j=0; j<64; j++) {
            perm[j] = block[IP[j]-1];
        }
        for (j=0; j<32; ++j) {
            L[j] = perm[j];
            R[j] = perm[j+32];
        }
        /*
         * Perform an encryption operation 16 times.
         */
        for (ii=0; ii<16; ii++) {
            /*
             * Set direction
             */
            if (edflag)
                i = 15-ii;
            else
                i = ii;
            /*
             * Save the R array,
             * which will be the new L.
             */
            for (j=0; j<32; j++)
                tempL[j] = R[j];
            /*
             * Expand R to 48 bits using the E selector;
             * exclusive-or with the current key bits.
             */
            for (j=0; j<48; j++)
                preS[j] = R[E[j]-1] ^ KS[i][j];
            /*
             * The pre-select bits are now considered
             * in 8 groups of 6 bits each.
             * The 8 selection functions map these
             * 6-bit quantities into 4-bit quantities
             * and the results permuted
             * to make an f(R, K).
             * The indexing into the selection functions
             * is peculiar; it could be simplified by
             * rewriting the tables.
             */
            for (j=0; j<8; j++) {
                t = 6*j;
                k = S[j][(preS[t+0]<<5)+
                         (preS[t+1]<<3)+
                         (preS[t+2]<<2)+
                         (preS[t+3]<<1)+
                         (preS[t+4]<<0)+
                         (preS[t+5]<<4)];
                t = 4*j;
                f[t+0] = (k>>3)&01;
                f[t+1] = (k>>2)&01;
                f[t+2] = (k>>1)&01;
                f[t+3] = (k>>0)&01;
            }
            /*
             * The new R is L ^ f(R, K).
             * The f here has to be permuted first, though.
             */
            for (j=0; j<32; j++)
                R[j] = L[j] ^ f[P[j]-1];
            /*
             * Finally, the new L (the original R)
             * is copied back.
             */
            for (j=0; j<32; j++)
                L[j] = tempL[j];
        }
        /*
         * The output L and R are reversed.
         */
        for (j=0; j<32; j++) {
            t = L[j];
            L[j] = R[j];
            R[j] = t;
        }
        /*
         * The final output
         * gets the inverse permutation of the very original.
         */
        for (j=0; j<32; ++j) {
            perm[j] = L[j];
            perm[j+32] = R[j];
        }
        for (j=0; j<64; j++) {
            block[j] = perm[FP[j]-1];
        }
    }

    /**
     * Transform a string to an array of bytes
     */
    var strToBytes = function(str) {
        var i, x = [];
        for (i = 0; i < str.length; ++i) {
            x[i] = str.charCodeAt(i);
        }
        return x
    };

    var bytesToStr = function(bytes) {
        return String.fromCharCode.apply(String, bytes);
    }
    
    /**
     * Implements the Unix crypt(3) DES-based hash.
     *
     * @param {Array.<number>|string} pw The string to hash
     * @param {Array.<number>|string} salt The salt to use (two character string from [a-zA-Z0-9./]).
     * @param {boolean=} returnBytes (optional) If true, return an array of bytes;
     *                                      otherwise, return a string.
     */
    return function crypt(pw, salt, returnBytes) {
        if (typeof(pw) === 'string') pw = strToBytes(pw);
        if (typeof(salt) === 'string') salt = strToBytes(salt);

        var i, j, k, c, temp;
        var block = [], iobuf = [];
        for(i=0; i<66; i++)
            block[i] = 0;
        for(i=0, k=0; (c= pw[k]) && i<64; ++k){
            for(j=0; j<7; j++, i++)
                block[i] = (c>>(6-j)) & 01;
            i++;
        }

        setkey(block);

        for(i=0; i<66; i++)
            block[i] = 0;

        for(i=0;i<48;i++)
            E[i] = e[i];

        for(i=0, k=0;i<2;i++, ++k){
            c = salt[k];
            iobuf[i] = c;
            if(c>'Z'.charCodeAt(0)) c -= 6;
            if(c>'9'.charCodeAt(0)) c -= 7;
            c -= '.'.charCodeAt(0);
            for(j=0;j<6;j++){
                if((c>>j) & 01){
                    temp = E[6*i+j];
                    E[6*i+j] = E[6*i+j+24];
                    E[6*i+j+24] = temp;
                }
            }
        }

        for(i=0; i<25; i++)
            encrypt(block,0);

        for(i=0; i<11; i++){
            c = 0;
            for(j=0; j<6; j++){
                c <<= 1;
                c |= block[6*i+j];
            }
            c += '.'.charCodeAt(0);
            if(c>'9'.charCodeAt(0)) c += 7;
            if(c>'Z'.charCodeAt(0)) c += 6;
            iobuf[i+2] = c;
        }
        if(iobuf[1]==0)
            iobuf[1] = iobuf[0];

        if (returnBytes) return(iobuf);
        else return bytesToStr(iobuf);
    }
}));


 at SyntaxError: Invalid number (351:32)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseExprOp (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1654:14)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1639:17)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":5} start 53.5057 took 10.8478s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":5}
* Error: TypeError: Cannot read property 'port' of null
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":1,"ExpansionArg_int":0,"_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"_bound":4,"ExpansionArg_string":"PureString"} start 53.361 took 11.2872s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"_bound":4,"ExpansionArg_string":"PureString"}
* Error: TypeError: Cannot read property 'port' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_int":0,"ExpansionArg_type_2":0,"_bound":4}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":3,"_bound":5,"ExpansionArg_string":"PureString"} start 53.3928 took 11.9332s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":3,"_bound":5,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Invalid number (351:32) on program /**
 * Unix crypt(3) Javascript Implementation
 * 
 * Straightforward implementaiton of the DES-based Unix crypt(3) hash, based largely
 * on crypt.c in the Seventh Edition Unix distribution released by Caldera Systems 
 * under a BSD-style license.
 *
 * @author <a href="mailto:tim@timdumol.com">Tim Joseph Dumol</a>
 */

/*
Legalese:

Copyright(C) Tim Joseph F. Dumol 2011. All rights reserved.
Derived from crypt.c in the Seventh Edition Unix distribution by
Caldera International, which is Copyright(C) Caldera International
Inc. 2001-2002. All rights reserved.

Redistribution and use in source and binary forms,
with or without modification, are permitted provided that the
following conditions are met:

Redistributions of source code and documentation must retain the above
copyright notice, this list of conditions and the following
disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

* All advertising materials mentioning features or use of this software
  must display the following acknowledgement: This product includes
  software developed or owned by Caldera International, Inc.

* Neither the name of Caldera International, Inc. nor the names of
  other contributors may be used to endorse or promote products derived
  from this software without specific prior written permission.

USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE
FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */

// UMD pattern
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.unixCryptTD = factory();
  }
}(this, function () {
    /*
     * Initial permutation,
     */
    var IP = [
        58,50,42,34,26,18,10, 2,
        60,52,44,36,28,20,12, 4,
        62,54,46,38,30,22,14, 6,
        64,56,48,40,32,24,16, 8,
        57,49,41,33,25,17, 9, 1,
        59,51,43,35,27,19,11, 3,
        61,53,45,37,29,21,13, 5,
        63,55,47,39,31,23,15, 7
    ];

    /*
     * Final permutation, FP = IP^(-1)
     */
    var FP =[
        40, 8,48,16,56,24,64,32,
        39, 7,47,15,55,23,63,31,
        38, 6,46,14,54,22,62,30,
        37, 5,45,13,53,21,61,29,
        36, 4,44,12,52,20,60,28,
        35, 3,43,11,51,19,59,27,
        34, 2,42,10,50,18,58,26,
        33, 1,41, 9,49,17,57,25
    ];

    /*
     * Permuted-choice 1 from the key bits
     * to yield C and D.
     * Note that bits 8,16... are left out:
     * They are intended for a parity check.
     */
    var PC1_C = [
        57,49,41,33,25,17, 9,
        1,58,50,42,34,26,18,
        10, 2,59,51,43,35,27,
        19,11, 3,60,52,44,36
    ];

    var PC1_D = [
        63,55,47,39,31,23,15,
        7,62,54,46,38,30,22,
        14, 6,61,53,45,37,29,
        21,13, 5,28,20,12, 4
    ];

    /*
     * Sequence of shifts used for the key schedule.
     */
    var shifts =[
        1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1
    ];

    /*
     * Permuted-choice 2, to pick out the bits from
     * the CD array that generate the key schedule.
     */
    var PC2_C = [
        14,17,11,24, 1, 5,
        3,28,15, 6,21,10,
        23,19,12, 4,26, 8,
        16, 7,27,20,13, 2
    ];

    var PC2_D = [
        41,52,31,37,47,55,
        30,40,51,45,33,48,
        44,49,39,56,34,53,
        46,42,50,36,29,32
    ];

    /*
     * The C and D arrays used to calculate the key schedule.
     */

    var C = [];
    var D = [];
    /*
     * The key schedule.
     * Generated from the key.
     */
    var KS = [];
    for (var i = 0; i < 16; ++i) {
        KS[i] = [];
    }

    /*
     * Set up the key schedule from the key.
     */

    function setkey(key) {
        var i, j, k, t;

        /*
         * First, generate C and D by permuting
         * the key.  The low order bit of each
         * 8-bit char is not used, so C and D are only 28
         * bits apiece.
         */
        for (i=0; i<28; i++) {
            C[i] = key[PC1_C[i]-1];
            D[i] = key[PC1_D[i]-1];
        }
        /*
         * To generate Ki, rotate C and D according
         * to schedule and pick up a permutation
         * using PC2.
         */
        for (i=0; i<16; i++) {
            /*
             * rotate.
             */
            for (k=0; k<shifts[i]; k++) {
                t = C[0];
                for (j=0; j<28-1; j++)
                    C[j] = C[j+1];
                C[27] = t;
                t = D[0];
                for (j=0; j<28-1; j++)
                    D[j] = D[j+1];
                D[27] = t;
            }
            /*
             * get Ki. Note C and D are concatenated.
             */
            for (j=0; j<24; j++) {
                KS[i][j] = C[PC2_C[j]-1];
                KS[i][j+24] = D[PC2_D[j]-28-1];
            }
        }
    }

    /*
     * The E bit-selection table.
     */
    var E = [];
    var e = [
        32, 1, 2, 3, 4, 5,
        4, 5, 6, 7, 8, 9,
        8, 9,10,11,12,13,
        12,13,14,15,16,17,
        16,17,18,19,20,21,
        20,21,22,23,24,25,
        24,25,26,27,28,29,
        28,29,30,31,32, 1
    ];

    /*
     * The 8 selection functions.
     * For some reason, they give a 0-origin
     * index, unlike everything else.
     */
    var S = [
        [14, 4,13, 1, 2,15,11, 8, 3,10, 6,12, 5, 9, 0, 7,
         0,15, 7, 4,14, 2,13, 1,10, 6,12,11, 9, 5, 3, 8,
         4, 1,14, 8,13, 6, 2,11,15,12, 9, 7, 3,10, 5, 0,
         15,12, 8, 2, 4, 9, 1, 7, 5,11, 3,14,10, 0, 6,13],

        [15, 1, 8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10,
         3,13, 4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5,
         0,14, 7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15,
         13, 8,10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9],

        [10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8,
         13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1,
         13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7,
         1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12],

        [7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15,
         13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9,
         10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4,
         3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14],

        [2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9,
         14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6,
         4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14,
         11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3],

        [12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11,
         10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8,
         9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6,
         4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13],

        [4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1,
         13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6,
         1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2,
         6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12],

        [13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7,
         1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2,
         7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8,
         2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11]
    ]

    /*
     * P is a permutation on the selected combination
     * of the current L and key.
     */
    var P = [
        16, 7,20,21,
        29,12,28,17,
        1,15,23,26,
        5,18,31,10,
        2, 8,24,14,
        32,27, 3, 9,
        19,13,30, 6,
        22,11, 4,25
    ];

    /*
     * The current block, divided into 2 halves.
     */
    var L = [], R = [];
    var tempL = [[]];
    var f =[];

    /*
     * The combination of the key and the input, before selection.
     */
    var preS = [];

    /*
     * The payoff: encrypt a block.
     */

    function encrypt(block, edflag) {
        var i, ii, j, k, t;

        /*
         * First, permute the bits in the input
         */
        var perm = [];
        for (j=0; j<64; j++) {
            perm[j] = block[IP[j]-1];
        }
        for (j=0; j<32; ++j) {
            L[j] = perm[j];
            R[j] = perm[j+32];
        }
        /*
         * Perform an encryption operation 16 times.
         */
        for (ii=0; ii<16; ii++) {
            /*
             * Set direction
             */
            if (edflag)
                i = 15-ii;
            else
                i = ii;
            /*
             * Save the R array,
             * which will be the new L.
             */
            for (j=0; j<32; j++)
                tempL[j] = R[j];
            /*
             * Expand R to 48 bits using the E selector;
             * exclusive-or with the current key bits.
             */
            for (j=0; j<48; j++)
                preS[j] = R[E[j]-1] ^ KS[i][j];
            /*
             * The pre-select bits are now considered
             * in 8 groups of 6 bits each.
             * The 8 selection functions map these
             * 6-bit quantities into 4-bit quantities
             * and the results permuted
             * to make an f(R, K).
             * The indexing into the selection functions
             * is peculiar; it could be simplified by
             * rewriting the tables.
             */
            for (j=0; j<8; j++) {
                t = 6*j;
                k = S[j][(preS[t+0]<<5)+
                         (preS[t+1]<<3)+
                         (preS[t+2]<<2)+
                         (preS[t+3]<<1)+
                         (preS[t+4]<<0)+
                         (preS[t+5]<<4)];
                t = 4*j;
                f[t+0] = (k>>3)&01;
                f[t+1] = (k>>2)&01;
                f[t+2] = (k>>1)&01;
                f[t+3] = (k>>0)&01;
            }
            /*
             * The new R is L ^ f(R, K).
             * The f here has to be permuted first, though.
             */
            for (j=0; j<32; j++)
                R[j] = L[j] ^ f[P[j]-1];
            /*
             * Finally, the new L (the original R)
             * is copied back.
             */
            for (j=0; j<32; j++)
                L[j] = tempL[j];
        }
        /*
         * The output L and R are reversed.
         */
        for (j=0; j<32; j++) {
            t = L[j];
            L[j] = R[j];
            R[j] = t;
        }
        /*
         * The final output
         * gets the inverse permutation of the very original.
         */
        for (j=0; j<32; ++j) {
            perm[j] = L[j];
            perm[j+32] = R[j];
        }
        for (j=0; j<64; j++) {
            block[j] = perm[FP[j]-1];
        }
    }

    /**
     * Transform a string to an array of bytes
     */
    var strToBytes = function(str) {
        var i, x = [];
        for (i = 0; i < str.length; ++i) {
            x[i] = str.charCodeAt(i);
        }
        return x
    };

    var bytesToStr = function(bytes) {
        return String.fromCharCode.apply(String, bytes);
    }
    
    /**
     * Implements the Unix crypt(3) DES-based hash.
     *
     * @param {Array.<number>|string} pw The string to hash
     * @param {Array.<number>|string} salt The salt to use (two character string from [a-zA-Z0-9./]).
     * @param {boolean=} returnBytes (optional) If true, return an array of bytes;
     *                                      otherwise, return a string.
     */
    return function crypt(pw, salt, returnBytes) {
        if (typeof(pw) === 'string') pw = strToBytes(pw);
        if (typeof(salt) === 'string') salt = strToBytes(salt);

        var i, j, k, c, temp;
        var block = [], iobuf = [];
        for(i=0; i<66; i++)
            block[i] = 0;
        for(i=0, k=0; (c= pw[k]) && i<64; ++k){
            for(j=0; j<7; j++, i++)
                block[i] = (c>>(6-j)) & 01;
            i++;
        }

        setkey(block);

        for(i=0; i<66; i++)
            block[i] = 0;

        for(i=0;i<48;i++)
            E[i] = e[i];

        for(i=0, k=0;i<2;i++, ++k){
            c = salt[k];
            iobuf[i] = c;
            if(c>'Z'.charCodeAt(0)) c -= 6;
            if(c>'9'.charCodeAt(0)) c -= 7;
            c -= '.'.charCodeAt(0);
            for(j=0;j<6;j++){
                if((c>>j) & 01){
                    temp = E[6*i+j];
                    E[6*i+j] = E[6*i+j+24];
                    E[6*i+j+24] = temp;
                }
            }
        }

        for(i=0; i<25; i++)
            encrypt(block,0);

        for(i=0; i<11; i++){
            c = 0;
            for(j=0; j<6; j++){
                c <<= 1;
                c |= block[6*i+j];
            }
            c += '.'.charCodeAt(0);
            if(c>'9'.charCodeAt(0)) c += 7;
            if(c>'Z'.charCodeAt(0)) c += 6;
            iobuf[i+2] = c;
        }
        if(iobuf[1]==0)
            iobuf[1] = iobuf[0];

        if (returnBytes) return(iobuf);
        else return bytesToStr(iobuf);
    }
}));


 at SyntaxError: Invalid number (351:32)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseExprOp (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1654:14)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1639:17)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":3,"_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":6,"ExpansionArg_string":"PureString"} start 53.5389 took 17.0873s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":6,"ExpansionArg_string":"PureString"}
* Error: Tropigate failed because SyntaxError: Invalid number (351:32) on program /**
 * Unix crypt(3) Javascript Implementation
 * 
 * Straightforward implementaiton of the DES-based Unix crypt(3) hash, based largely
 * on crypt.c in the Seventh Edition Unix distribution released by Caldera Systems 
 * under a BSD-style license.
 *
 * @author <a href="mailto:tim@timdumol.com">Tim Joseph Dumol</a>
 */

/*
Legalese:

Copyright(C) Tim Joseph F. Dumol 2011. All rights reserved.
Derived from crypt.c in the Seventh Edition Unix distribution by
Caldera International, which is Copyright(C) Caldera International
Inc. 2001-2002. All rights reserved.

Redistribution and use in source and binary forms,
with or without modification, are permitted provided that the
following conditions are met:

Redistributions of source code and documentation must retain the above
copyright notice, this list of conditions and the following
disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

* All advertising materials mentioning features or use of this software
  must display the following acknowledgement: This product includes
  software developed or owned by Caldera International, Inc.

* Neither the name of Caldera International, Inc. nor the names of
  other contributors may be used to endorse or promote products derived
  from this software without specific prior written permission.

USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE
FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */

// UMD pattern
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.unixCryptTD = factory();
  }
}(this, function () {
    /*
     * Initial permutation,
     */
    var IP = [
        58,50,42,34,26,18,10, 2,
        60,52,44,36,28,20,12, 4,
        62,54,46,38,30,22,14, 6,
        64,56,48,40,32,24,16, 8,
        57,49,41,33,25,17, 9, 1,
        59,51,43,35,27,19,11, 3,
        61,53,45,37,29,21,13, 5,
        63,55,47,39,31,23,15, 7
    ];

    /*
     * Final permutation, FP = IP^(-1)
     */
    var FP =[
        40, 8,48,16,56,24,64,32,
        39, 7,47,15,55,23,63,31,
        38, 6,46,14,54,22,62,30,
        37, 5,45,13,53,21,61,29,
        36, 4,44,12,52,20,60,28,
        35, 3,43,11,51,19,59,27,
        34, 2,42,10,50,18,58,26,
        33, 1,41, 9,49,17,57,25
    ];

    /*
     * Permuted-choice 1 from the key bits
     * to yield C and D.
     * Note that bits 8,16... are left out:
     * They are intended for a parity check.
     */
    var PC1_C = [
        57,49,41,33,25,17, 9,
        1,58,50,42,34,26,18,
        10, 2,59,51,43,35,27,
        19,11, 3,60,52,44,36
    ];

    var PC1_D = [
        63,55,47,39,31,23,15,
        7,62,54,46,38,30,22,
        14, 6,61,53,45,37,29,
        21,13, 5,28,20,12, 4
    ];

    /*
     * Sequence of shifts used for the key schedule.
     */
    var shifts =[
        1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1
    ];

    /*
     * Permuted-choice 2, to pick out the bits from
     * the CD array that generate the key schedule.
     */
    var PC2_C = [
        14,17,11,24, 1, 5,
        3,28,15, 6,21,10,
        23,19,12, 4,26, 8,
        16, 7,27,20,13, 2
    ];

    var PC2_D = [
        41,52,31,37,47,55,
        30,40,51,45,33,48,
        44,49,39,56,34,53,
        46,42,50,36,29,32
    ];

    /*
     * The C and D arrays used to calculate the key schedule.
     */

    var C = [];
    var D = [];
    /*
     * The key schedule.
     * Generated from the key.
     */
    var KS = [];
    for (var i = 0; i < 16; ++i) {
        KS[i] = [];
    }

    /*
     * Set up the key schedule from the key.
     */

    function setkey(key) {
        var i, j, k, t;

        /*
         * First, generate C and D by permuting
         * the key.  The low order bit of each
         * 8-bit char is not used, so C and D are only 28
         * bits apiece.
         */
        for (i=0; i<28; i++) {
            C[i] = key[PC1_C[i]-1];
            D[i] = key[PC1_D[i]-1];
        }
        /*
         * To generate Ki, rotate C and D according
         * to schedule and pick up a permutation
         * using PC2.
         */
        for (i=0; i<16; i++) {
            /*
             * rotate.
             */
            for (k=0; k<shifts[i]; k++) {
                t = C[0];
                for (j=0; j<28-1; j++)
                    C[j] = C[j+1];
                C[27] = t;
                t = D[0];
                for (j=0; j<28-1; j++)
                    D[j] = D[j+1];
                D[27] = t;
            }
            /*
             * get Ki. Note C and D are concatenated.
             */
            for (j=0; j<24; j++) {
                KS[i][j] = C[PC2_C[j]-1];
                KS[i][j+24] = D[PC2_D[j]-28-1];
            }
        }
    }

    /*
     * The E bit-selection table.
     */
    var E = [];
    var e = [
        32, 1, 2, 3, 4, 5,
        4, 5, 6, 7, 8, 9,
        8, 9,10,11,12,13,
        12,13,14,15,16,17,
        16,17,18,19,20,21,
        20,21,22,23,24,25,
        24,25,26,27,28,29,
        28,29,30,31,32, 1
    ];

    /*
     * The 8 selection functions.
     * For some reason, they give a 0-origin
     * index, unlike everything else.
     */
    var S = [
        [14, 4,13, 1, 2,15,11, 8, 3,10, 6,12, 5, 9, 0, 7,
         0,15, 7, 4,14, 2,13, 1,10, 6,12,11, 9, 5, 3, 8,
         4, 1,14, 8,13, 6, 2,11,15,12, 9, 7, 3,10, 5, 0,
         15,12, 8, 2, 4, 9, 1, 7, 5,11, 3,14,10, 0, 6,13],

        [15, 1, 8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10,
         3,13, 4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5,
         0,14, 7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15,
         13, 8,10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9],

        [10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8,
         13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1,
         13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7,
         1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12],

        [7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15,
         13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9,
         10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4,
         3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14],

        [2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9,
         14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6,
         4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14,
         11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3],

        [12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11,
         10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8,
         9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6,
         4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13],

        [4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1,
         13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6,
         1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2,
         6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12],

        [13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7,
         1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2,
         7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8,
         2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11]
    ]

    /*
     * P is a permutation on the selected combination
     * of the current L and key.
     */
    var P = [
        16, 7,20,21,
        29,12,28,17,
        1,15,23,26,
        5,18,31,10,
        2, 8,24,14,
        32,27, 3, 9,
        19,13,30, 6,
        22,11, 4,25
    ];

    /*
     * The current block, divided into 2 halves.
     */
    var L = [], R = [];
    var tempL = [[]];
    var f =[];

    /*
     * The combination of the key and the input, before selection.
     */
    var preS = [];

    /*
     * The payoff: encrypt a block.
     */

    function encrypt(block, edflag) {
        var i, ii, j, k, t;

        /*
         * First, permute the bits in the input
         */
        var perm = [];
        for (j=0; j<64; j++) {
            perm[j] = block[IP[j]-1];
        }
        for (j=0; j<32; ++j) {
            L[j] = perm[j];
            R[j] = perm[j+32];
        }
        /*
         * Perform an encryption operation 16 times.
         */
        for (ii=0; ii<16; ii++) {
            /*
             * Set direction
             */
            if (edflag)
                i = 15-ii;
            else
                i = ii;
            /*
             * Save the R array,
             * which will be the new L.
             */
            for (j=0; j<32; j++)
                tempL[j] = R[j];
            /*
             * Expand R to 48 bits using the E selector;
             * exclusive-or with the current key bits.
             */
            for (j=0; j<48; j++)
                preS[j] = R[E[j]-1] ^ KS[i][j];
            /*
             * The pre-select bits are now considered
             * in 8 groups of 6 bits each.
             * The 8 selection functions map these
             * 6-bit quantities into 4-bit quantities
             * and the results permuted
             * to make an f(R, K).
             * The indexing into the selection functions
             * is peculiar; it could be simplified by
             * rewriting the tables.
             */
            for (j=0; j<8; j++) {
                t = 6*j;
                k = S[j][(preS[t+0]<<5)+
                         (preS[t+1]<<3)+
                         (preS[t+2]<<2)+
                         (preS[t+3]<<1)+
                         (preS[t+4]<<0)+
                         (preS[t+5]<<4)];
                t = 4*j;
                f[t+0] = (k>>3)&01;
                f[t+1] = (k>>2)&01;
                f[t+2] = (k>>1)&01;
                f[t+3] = (k>>0)&01;
            }
            /*
             * The new R is L ^ f(R, K).
             * The f here has to be permuted first, though.
             */
            for (j=0; j<32; j++)
                R[j] = L[j] ^ f[P[j]-1];
            /*
             * Finally, the new L (the original R)
             * is copied back.
             */
            for (j=0; j<32; j++)
                L[j] = tempL[j];
        }
        /*
         * The output L and R are reversed.
         */
        for (j=0; j<32; j++) {
            t = L[j];
            L[j] = R[j];
            R[j] = t;
        }
        /*
         * The final output
         * gets the inverse permutation of the very original.
         */
        for (j=0; j<32; ++j) {
            perm[j] = L[j];
            perm[j+32] = R[j];
        }
        for (j=0; j<64; j++) {
            block[j] = perm[FP[j]-1];
        }
    }

    /**
     * Transform a string to an array of bytes
     */
    var strToBytes = function(str) {
        var i, x = [];
        for (i = 0; i < str.length; ++i) {
            x[i] = str.charCodeAt(i);
        }
        return x
    };

    var bytesToStr = function(bytes) {
        return String.fromCharCode.apply(String, bytes);
    }
    
    /**
     * Implements the Unix crypt(3) DES-based hash.
     *
     * @param {Array.<number>|string} pw The string to hash
     * @param {Array.<number>|string} salt The salt to use (two character string from [a-zA-Z0-9./]).
     * @param {boolean=} returnBytes (optional) If true, return an array of bytes;
     *                                      otherwise, return a string.
     */
    return function crypt(pw, salt, returnBytes) {
        if (typeof(pw) === 'string') pw = strToBytes(pw);
        if (typeof(salt) === 'string') salt = strToBytes(salt);

        var i, j, k, c, temp;
        var block = [], iobuf = [];
        for(i=0; i<66; i++)
            block[i] = 0;
        for(i=0, k=0; (c= pw[k]) && i<64; ++k){
            for(j=0; j<7; j++, i++)
                block[i] = (c>>(6-j)) & 01;
            i++;
        }

        setkey(block);

        for(i=0; i<66; i++)
            block[i] = 0;

        for(i=0;i<48;i++)
            E[i] = e[i];

        for(i=0, k=0;i<2;i++, ++k){
            c = salt[k];
            iobuf[i] = c;
            if(c>'Z'.charCodeAt(0)) c -= 6;
            if(c>'9'.charCodeAt(0)) c -= 7;
            c -= '.'.charCodeAt(0);
            for(j=0;j<6;j++){
                if((c>>j) & 01){
                    temp = E[6*i+j];
                    E[6*i+j] = E[6*i+j+24];
                    E[6*i+j+24] = temp;
                }
            }
        }

        for(i=0; i<25; i++)
            encrypt(block,0);

        for(i=0; i<11; i++){
            c = 0;
            for(j=0; j<6; j++){
                c <<= 1;
                c |= block[6*i+j];
            }
            c += '.'.charCodeAt(0);
            if(c>'9'.charCodeAt(0)) c += 7;
            if(c>'Z'.charCodeAt(0)) c += 6;
            iobuf[i+2] = c;
        }
        if(iobuf[1]==0)
            iobuf[1] = iobuf[0];

        if (returnBytes) return(iobuf);
        else return bytesToStr(iobuf);
    }
}));


 at SyntaxError: Invalid number (351:32)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseExprOp (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1654:14)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1639:17)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":3,"ExpansionArg_int":0,"_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":6,"ExpansionArg_array_length":0} start 60.0624 took 12.9013s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":6,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Invalid number (351:32) on program /**
 * Unix crypt(3) Javascript Implementation
 * 
 * Straightforward implementaiton of the DES-based Unix crypt(3) hash, based largely
 * on crypt.c in the Seventh Edition Unix distribution released by Caldera Systems 
 * under a BSD-style license.
 *
 * @author <a href="mailto:tim@timdumol.com">Tim Joseph Dumol</a>
 */

/*
Legalese:

Copyright(C) Tim Joseph F. Dumol 2011. All rights reserved.
Derived from crypt.c in the Seventh Edition Unix distribution by
Caldera International, which is Copyright(C) Caldera International
Inc. 2001-2002. All rights reserved.

Redistribution and use in source and binary forms,
with or without modification, are permitted provided that the
following conditions are met:

Redistributions of source code and documentation must retain the above
copyright notice, this list of conditions and the following
disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

* All advertising materials mentioning features or use of this software
  must display the following acknowledgement: This product includes
  software developed or owned by Caldera International, Inc.

* Neither the name of Caldera International, Inc. nor the names of
  other contributors may be used to endorse or promote products derived
  from this software without specific prior written permission.

USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE
FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */

// UMD pattern
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.unixCryptTD = factory();
  }
}(this, function () {
    /*
     * Initial permutation,
     */
    var IP = [
        58,50,42,34,26,18,10, 2,
        60,52,44,36,28,20,12, 4,
        62,54,46,38,30,22,14, 6,
        64,56,48,40,32,24,16, 8,
        57,49,41,33,25,17, 9, 1,
        59,51,43,35,27,19,11, 3,
        61,53,45,37,29,21,13, 5,
        63,55,47,39,31,23,15, 7
    ];

    /*
     * Final permutation, FP = IP^(-1)
     */
    var FP =[
        40, 8,48,16,56,24,64,32,
        39, 7,47,15,55,23,63,31,
        38, 6,46,14,54,22,62,30,
        37, 5,45,13,53,21,61,29,
        36, 4,44,12,52,20,60,28,
        35, 3,43,11,51,19,59,27,
        34, 2,42,10,50,18,58,26,
        33, 1,41, 9,49,17,57,25
    ];

    /*
     * Permuted-choice 1 from the key bits
     * to yield C and D.
     * Note that bits 8,16... are left out:
     * They are intended for a parity check.
     */
    var PC1_C = [
        57,49,41,33,25,17, 9,
        1,58,50,42,34,26,18,
        10, 2,59,51,43,35,27,
        19,11, 3,60,52,44,36
    ];

    var PC1_D = [
        63,55,47,39,31,23,15,
        7,62,54,46,38,30,22,
        14, 6,61,53,45,37,29,
        21,13, 5,28,20,12, 4
    ];

    /*
     * Sequence of shifts used for the key schedule.
     */
    var shifts =[
        1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1
    ];

    /*
     * Permuted-choice 2, to pick out the bits from
     * the CD array that generate the key schedule.
     */
    var PC2_C = [
        14,17,11,24, 1, 5,
        3,28,15, 6,21,10,
        23,19,12, 4,26, 8,
        16, 7,27,20,13, 2
    ];

    var PC2_D = [
        41,52,31,37,47,55,
        30,40,51,45,33,48,
        44,49,39,56,34,53,
        46,42,50,36,29,32
    ];

    /*
     * The C and D arrays used to calculate the key schedule.
     */

    var C = [];
    var D = [];
    /*
     * The key schedule.
     * Generated from the key.
     */
    var KS = [];
    for (var i = 0; i < 16; ++i) {
        KS[i] = [];
    }

    /*
     * Set up the key schedule from the key.
     */

    function setkey(key) {
        var i, j, k, t;

        /*
         * First, generate C and D by permuting
         * the key.  The low order bit of each
         * 8-bit char is not used, so C and D are only 28
         * bits apiece.
         */
        for (i=0; i<28; i++) {
            C[i] = key[PC1_C[i]-1];
            D[i] = key[PC1_D[i]-1];
        }
        /*
         * To generate Ki, rotate C and D according
         * to schedule and pick up a permutation
         * using PC2.
         */
        for (i=0; i<16; i++) {
            /*
             * rotate.
             */
            for (k=0; k<shifts[i]; k++) {
                t = C[0];
                for (j=0; j<28-1; j++)
                    C[j] = C[j+1];
                C[27] = t;
                t = D[0];
                for (j=0; j<28-1; j++)
                    D[j] = D[j+1];
                D[27] = t;
            }
            /*
             * get Ki. Note C and D are concatenated.
             */
            for (j=0; j<24; j++) {
                KS[i][j] = C[PC2_C[j]-1];
                KS[i][j+24] = D[PC2_D[j]-28-1];
            }
        }
    }

    /*
     * The E bit-selection table.
     */
    var E = [];
    var e = [
        32, 1, 2, 3, 4, 5,
        4, 5, 6, 7, 8, 9,
        8, 9,10,11,12,13,
        12,13,14,15,16,17,
        16,17,18,19,20,21,
        20,21,22,23,24,25,
        24,25,26,27,28,29,
        28,29,30,31,32, 1
    ];

    /*
     * The 8 selection functions.
     * For some reason, they give a 0-origin
     * index, unlike everything else.
     */
    var S = [
        [14, 4,13, 1, 2,15,11, 8, 3,10, 6,12, 5, 9, 0, 7,
         0,15, 7, 4,14, 2,13, 1,10, 6,12,11, 9, 5, 3, 8,
         4, 1,14, 8,13, 6, 2,11,15,12, 9, 7, 3,10, 5, 0,
         15,12, 8, 2, 4, 9, 1, 7, 5,11, 3,14,10, 0, 6,13],

        [15, 1, 8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10,
         3,13, 4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5,
         0,14, 7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15,
         13, 8,10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9],

        [10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8,
         13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1,
         13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7,
         1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12],

        [7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15,
         13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9,
         10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4,
         3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14],

        [2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9,
         14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6,
         4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14,
         11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3],

        [12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11,
         10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8,
         9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6,
         4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13],

        [4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1,
         13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6,
         1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2,
         6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12],

        [13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7,
         1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2,
         7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8,
         2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11]
    ]

    /*
     * P is a permutation on the selected combination
     * of the current L and key.
     */
    var P = [
        16, 7,20,21,
        29,12,28,17,
        1,15,23,26,
        5,18,31,10,
        2, 8,24,14,
        32,27, 3, 9,
        19,13,30, 6,
        22,11, 4,25
    ];

    /*
     * The current block, divided into 2 halves.
     */
    var L = [], R = [];
    var tempL = [[]];
    var f =[];

    /*
     * The combination of the key and the input, before selection.
     */
    var preS = [];

    /*
     * The payoff: encrypt a block.
     */

    function encrypt(block, edflag) {
        var i, ii, j, k, t;

        /*
         * First, permute the bits in the input
         */
        var perm = [];
        for (j=0; j<64; j++) {
            perm[j] = block[IP[j]-1];
        }
        for (j=0; j<32; ++j) {
            L[j] = perm[j];
            R[j] = perm[j+32];
        }
        /*
         * Perform an encryption operation 16 times.
         */
        for (ii=0; ii<16; ii++) {
            /*
             * Set direction
             */
            if (edflag)
                i = 15-ii;
            else
                i = ii;
            /*
             * Save the R array,
             * which will be the new L.
             */
            for (j=0; j<32; j++)
                tempL[j] = R[j];
            /*
             * Expand R to 48 bits using the E selector;
             * exclusive-or with the current key bits.
             */
            for (j=0; j<48; j++)
                preS[j] = R[E[j]-1] ^ KS[i][j];
            /*
             * The pre-select bits are now considered
             * in 8 groups of 6 bits each.
             * The 8 selection functions map these
             * 6-bit quantities into 4-bit quantities
             * and the results permuted
             * to make an f(R, K).
             * The indexing into the selection functions
             * is peculiar; it could be simplified by
             * rewriting the tables.
             */
            for (j=0; j<8; j++) {
                t = 6*j;
                k = S[j][(preS[t+0]<<5)+
                         (preS[t+1]<<3)+
                         (preS[t+2]<<2)+
                         (preS[t+3]<<1)+
                         (preS[t+4]<<0)+
                         (preS[t+5]<<4)];
                t = 4*j;
                f[t+0] = (k>>3)&01;
                f[t+1] = (k>>2)&01;
                f[t+2] = (k>>1)&01;
                f[t+3] = (k>>0)&01;
            }
            /*
             * The new R is L ^ f(R, K).
             * The f here has to be permuted first, though.
             */
            for (j=0; j<32; j++)
                R[j] = L[j] ^ f[P[j]-1];
            /*
             * Finally, the new L (the original R)
             * is copied back.
             */
            for (j=0; j<32; j++)
                L[j] = tempL[j];
        }
        /*
         * The output L and R are reversed.
         */
        for (j=0; j<32; j++) {
            t = L[j];
            L[j] = R[j];
            R[j] = t;
        }
        /*
         * The final output
         * gets the inverse permutation of the very original.
         */
        for (j=0; j<32; ++j) {
            perm[j] = L[j];
            perm[j+32] = R[j];
        }
        for (j=0; j<64; j++) {
            block[j] = perm[FP[j]-1];
        }
    }

    /**
     * Transform a string to an array of bytes
     */
    var strToBytes = function(str) {
        var i, x = [];
        for (i = 0; i < str.length; ++i) {
            x[i] = str.charCodeAt(i);
        }
        return x
    };

    var bytesToStr = function(bytes) {
        return String.fromCharCode.apply(String, bytes);
    }
    
    /**
     * Implements the Unix crypt(3) DES-based hash.
     *
     * @param {Array.<number>|string} pw The string to hash
     * @param {Array.<number>|string} salt The salt to use (two character string from [a-zA-Z0-9./]).
     * @param {boolean=} returnBytes (optional) If true, return an array of bytes;
     *                                      otherwise, return a string.
     */
    return function crypt(pw, salt, returnBytes) {
        if (typeof(pw) === 'string') pw = strToBytes(pw);
        if (typeof(salt) === 'string') salt = strToBytes(salt);

        var i, j, k, c, temp;
        var block = [], iobuf = [];
        for(i=0; i<66; i++)
            block[i] = 0;
        for(i=0, k=0; (c= pw[k]) && i<64; ++k){
            for(j=0; j<7; j++, i++)
                block[i] = (c>>(6-j)) & 01;
            i++;
        }

        setkey(block);

        for(i=0; i<66; i++)
            block[i] = 0;

        for(i=0;i<48;i++)
            E[i] = e[i];

        for(i=0, k=0;i<2;i++, ++k){
            c = salt[k];
            iobuf[i] = c;
            if(c>'Z'.charCodeAt(0)) c -= 6;
            if(c>'9'.charCodeAt(0)) c -= 7;
            c -= '.'.charCodeAt(0);
            for(j=0;j<6;j++){
                if((c>>j) & 01){
                    temp = E[6*i+j];
                    E[6*i+j] = E[6*i+j+24];
                    E[6*i+j+24] = temp;
                }
            }
        }

        for(i=0; i<25; i++)
            encrypt(block,0);

        for(i=0; i<11; i++){
            c = 0;
            for(j=0; j<6; j++){
                c <<= 1;
                c |= block[6*i+j];
            }
            c += '.'.charCodeAt(0);
            if(c>'9'.charCodeAt(0)) c += 7;
            if(c>'Z'.charCodeAt(0)) c += 6;
            iobuf[i+2] = c;
        }
        if(iobuf[1]==0)
            iobuf[1] = iobuf[0];

        if (returnBytes) return(iobuf);
        else return bytesToStr(iobuf);
    }
}));


 at SyntaxError: Invalid number (351:32)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseExprOp (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1654:14)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1639:17)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","ExpansionArg_type_2":0,"_bound":5,"ExpansionArg_array_length":0} start 64.6847 took 13.0585s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","ExpansionArg_type_2":0,"_bound":5,"ExpansionArg_array_length":0}
* Error: TypeError: Cannot read property 'port' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":4,"ExpansionArg_string":"","ExpansionArg_type_2":0,"_bound":5}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":6} start 65.4687 took 13.4087s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":6}
* Error: TypeError: Cannot read property 'port' of null
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":1,"ExpansionArg_string":"","_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":7,"ExpansionArg_int_2":0} start 65.3799 took 13.6519s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":7,"ExpansionArg_int_2":0}
* Error: Tropigate failed because SyntaxError: Invalid number (351:32) on program /**
 * Unix crypt(3) Javascript Implementation
 * 
 * Straightforward implementaiton of the DES-based Unix crypt(3) hash, based largely
 * on crypt.c in the Seventh Edition Unix distribution released by Caldera Systems 
 * under a BSD-style license.
 *
 * @author <a href="mailto:tim@timdumol.com">Tim Joseph Dumol</a>
 */

/*
Legalese:

Copyright(C) Tim Joseph F. Dumol 2011. All rights reserved.
Derived from crypt.c in the Seventh Edition Unix distribution by
Caldera International, which is Copyright(C) Caldera International
Inc. 2001-2002. All rights reserved.

Redistribution and use in source and binary forms,
with or without modification, are permitted provided that the
following conditions are met:

Redistributions of source code and documentation must retain the above
copyright notice, this list of conditions and the following
disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

* All advertising materials mentioning features or use of this software
  must display the following acknowledgement: This product includes
  software developed or owned by Caldera International, Inc.

* Neither the name of Caldera International, Inc. nor the names of
  other contributors may be used to endorse or promote products derived
  from this software without specific prior written permission.

USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE
FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */

// UMD pattern
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.unixCryptTD = factory();
  }
}(this, function () {
    /*
     * Initial permutation,
     */
    var IP = [
        58,50,42,34,26,18,10, 2,
        60,52,44,36,28,20,12, 4,
        62,54,46,38,30,22,14, 6,
        64,56,48,40,32,24,16, 8,
        57,49,41,33,25,17, 9, 1,
        59,51,43,35,27,19,11, 3,
        61,53,45,37,29,21,13, 5,
        63,55,47,39,31,23,15, 7
    ];

    /*
     * Final permutation, FP = IP^(-1)
     */
    var FP =[
        40, 8,48,16,56,24,64,32,
        39, 7,47,15,55,23,63,31,
        38, 6,46,14,54,22,62,30,
        37, 5,45,13,53,21,61,29,
        36, 4,44,12,52,20,60,28,
        35, 3,43,11,51,19,59,27,
        34, 2,42,10,50,18,58,26,
        33, 1,41, 9,49,17,57,25
    ];

    /*
     * Permuted-choice 1 from the key bits
     * to yield C and D.
     * Note that bits 8,16... are left out:
     * They are intended for a parity check.
     */
    var PC1_C = [
        57,49,41,33,25,17, 9,
        1,58,50,42,34,26,18,
        10, 2,59,51,43,35,27,
        19,11, 3,60,52,44,36
    ];

    var PC1_D = [
        63,55,47,39,31,23,15,
        7,62,54,46,38,30,22,
        14, 6,61,53,45,37,29,
        21,13, 5,28,20,12, 4
    ];

    /*
     * Sequence of shifts used for the key schedule.
     */
    var shifts =[
        1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1
    ];

    /*
     * Permuted-choice 2, to pick out the bits from
     * the CD array that generate the key schedule.
     */
    var PC2_C = [
        14,17,11,24, 1, 5,
        3,28,15, 6,21,10,
        23,19,12, 4,26, 8,
        16, 7,27,20,13, 2
    ];

    var PC2_D = [
        41,52,31,37,47,55,
        30,40,51,45,33,48,
        44,49,39,56,34,53,
        46,42,50,36,29,32
    ];

    /*
     * The C and D arrays used to calculate the key schedule.
     */

    var C = [];
    var D = [];
    /*
     * The key schedule.
     * Generated from the key.
     */
    var KS = [];
    for (var i = 0; i < 16; ++i) {
        KS[i] = [];
    }

    /*
     * Set up the key schedule from the key.
     */

    function setkey(key) {
        var i, j, k, t;

        /*
         * First, generate C and D by permuting
         * the key.  The low order bit of each
         * 8-bit char is not used, so C and D are only 28
         * bits apiece.
         */
        for (i=0; i<28; i++) {
            C[i] = key[PC1_C[i]-1];
            D[i] = key[PC1_D[i]-1];
        }
        /*
         * To generate Ki, rotate C and D according
         * to schedule and pick up a permutation
         * using PC2.
         */
        for (i=0; i<16; i++) {
            /*
             * rotate.
             */
            for (k=0; k<shifts[i]; k++) {
                t = C[0];
                for (j=0; j<28-1; j++)
                    C[j] = C[j+1];
                C[27] = t;
                t = D[0];
                for (j=0; j<28-1; j++)
                    D[j] = D[j+1];
                D[27] = t;
            }
            /*
             * get Ki. Note C and D are concatenated.
             */
            for (j=0; j<24; j++) {
                KS[i][j] = C[PC2_C[j]-1];
                KS[i][j+24] = D[PC2_D[j]-28-1];
            }
        }
    }

    /*
     * The E bit-selection table.
     */
    var E = [];
    var e = [
        32, 1, 2, 3, 4, 5,
        4, 5, 6, 7, 8, 9,
        8, 9,10,11,12,13,
        12,13,14,15,16,17,
        16,17,18,19,20,21,
        20,21,22,23,24,25,
        24,25,26,27,28,29,
        28,29,30,31,32, 1
    ];

    /*
     * The 8 selection functions.
     * For some reason, they give a 0-origin
     * index, unlike everything else.
     */
    var S = [
        [14, 4,13, 1, 2,15,11, 8, 3,10, 6,12, 5, 9, 0, 7,
         0,15, 7, 4,14, 2,13, 1,10, 6,12,11, 9, 5, 3, 8,
         4, 1,14, 8,13, 6, 2,11,15,12, 9, 7, 3,10, 5, 0,
         15,12, 8, 2, 4, 9, 1, 7, 5,11, 3,14,10, 0, 6,13],

        [15, 1, 8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10,
         3,13, 4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5,
         0,14, 7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15,
         13, 8,10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9],

        [10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8,
         13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1,
         13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7,
         1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12],

        [7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15,
         13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9,
         10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4,
         3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14],

        [2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9,
         14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6,
         4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14,
         11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3],

        [12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11,
         10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8,
         9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6,
         4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13],

        [4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1,
         13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6,
         1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2,
         6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12],

        [13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7,
         1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2,
         7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8,
         2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11]
    ]

    /*
     * P is a permutation on the selected combination
     * of the current L and key.
     */
    var P = [
        16, 7,20,21,
        29,12,28,17,
        1,15,23,26,
        5,18,31,10,
        2, 8,24,14,
        32,27, 3, 9,
        19,13,30, 6,
        22,11, 4,25
    ];

    /*
     * The current block, divided into 2 halves.
     */
    var L = [], R = [];
    var tempL = [[]];
    var f =[];

    /*
     * The combination of the key and the input, before selection.
     */
    var preS = [];

    /*
     * The payoff: encrypt a block.
     */

    function encrypt(block, edflag) {
        var i, ii, j, k, t;

        /*
         * First, permute the bits in the input
         */
        var perm = [];
        for (j=0; j<64; j++) {
            perm[j] = block[IP[j]-1];
        }
        for (j=0; j<32; ++j) {
            L[j] = perm[j];
            R[j] = perm[j+32];
        }
        /*
         * Perform an encryption operation 16 times.
         */
        for (ii=0; ii<16; ii++) {
            /*
             * Set direction
             */
            if (edflag)
                i = 15-ii;
            else
                i = ii;
            /*
             * Save the R array,
             * which will be the new L.
             */
            for (j=0; j<32; j++)
                tempL[j] = R[j];
            /*
             * Expand R to 48 bits using the E selector;
             * exclusive-or with the current key bits.
             */
            for (j=0; j<48; j++)
                preS[j] = R[E[j]-1] ^ KS[i][j];
            /*
             * The pre-select bits are now considered
             * in 8 groups of 6 bits each.
             * The 8 selection functions map these
             * 6-bit quantities into 4-bit quantities
             * and the results permuted
             * to make an f(R, K).
             * The indexing into the selection functions
             * is peculiar; it could be simplified by
             * rewriting the tables.
             */
            for (j=0; j<8; j++) {
                t = 6*j;
                k = S[j][(preS[t+0]<<5)+
                         (preS[t+1]<<3)+
                         (preS[t+2]<<2)+
                         (preS[t+3]<<1)+
                         (preS[t+4]<<0)+
                         (preS[t+5]<<4)];
                t = 4*j;
                f[t+0] = (k>>3)&01;
                f[t+1] = (k>>2)&01;
                f[t+2] = (k>>1)&01;
                f[t+3] = (k>>0)&01;
            }
            /*
             * The new R is L ^ f(R, K).
             * The f here has to be permuted first, though.
             */
            for (j=0; j<32; j++)
                R[j] = L[j] ^ f[P[j]-1];
            /*
             * Finally, the new L (the original R)
             * is copied back.
             */
            for (j=0; j<32; j++)
                L[j] = tempL[j];
        }
        /*
         * The output L and R are reversed.
         */
        for (j=0; j<32; j++) {
            t = L[j];
            L[j] = R[j];
            R[j] = t;
        }
        /*
         * The final output
         * gets the inverse permutation of the very original.
         */
        for (j=0; j<32; ++j) {
            perm[j] = L[j];
            perm[j+32] = R[j];
        }
        for (j=0; j<64; j++) {
            block[j] = perm[FP[j]-1];
        }
    }

    /**
     * Transform a string to an array of bytes
     */
    var strToBytes = function(str) {
        var i, x = [];
        for (i = 0; i < str.length; ++i) {
            x[i] = str.charCodeAt(i);
        }
        return x
    };

    var bytesToStr = function(bytes) {
        return String.fromCharCode.apply(String, bytes);
    }
    
    /**
     * Implements the Unix crypt(3) DES-based hash.
     *
     * @param {Array.<number>|string} pw The string to hash
     * @param {Array.<number>|string} salt The salt to use (two character string from [a-zA-Z0-9./]).
     * @param {boolean=} returnBytes (optional) If true, return an array of bytes;
     *                                      otherwise, return a string.
     */
    return function crypt(pw, salt, returnBytes) {
        if (typeof(pw) === 'string') pw = strToBytes(pw);
        if (typeof(salt) === 'string') salt = strToBytes(salt);

        var i, j, k, c, temp;
        var block = [], iobuf = [];
        for(i=0; i<66; i++)
            block[i] = 0;
        for(i=0, k=0; (c= pw[k]) && i<64; ++k){
            for(j=0; j<7; j++, i++)
                block[i] = (c>>(6-j)) & 01;
            i++;
        }

        setkey(block);

        for(i=0; i<66; i++)
            block[i] = 0;

        for(i=0;i<48;i++)
            E[i] = e[i];

        for(i=0, k=0;i<2;i++, ++k){
            c = salt[k];
            iobuf[i] = c;
            if(c>'Z'.charCodeAt(0)) c -= 6;
            if(c>'9'.charCodeAt(0)) c -= 7;
            c -= '.'.charCodeAt(0);
            for(j=0;j<6;j++){
                if((c>>j) & 01){
                    temp = E[6*i+j];
                    E[6*i+j] = E[6*i+j+24];
                    E[6*i+j+24] = temp;
                }
            }
        }

        for(i=0; i<25; i++)
            encrypt(block,0);

        for(i=0; i<11; i++){
            c = 0;
            for(j=0; j<6; j++){
                c <<= 1;
                c |= block[6*i+j];
            }
            c += '.'.charCodeAt(0);
            if(c>'9'.charCodeAt(0)) c += 7;
            if(c>'Z'.charCodeAt(0)) c += 6;
            iobuf[i+2] = c;
        }
        if(iobuf[1]==0)
            iobuf[1] = iobuf[0];

        if (returnBytes) return(iobuf);
        else return bytesToStr(iobuf);
    }
}));


 at SyntaxError: Invalid number (351:32)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseExprOp (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1654:14)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1639:17)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":2,"ExpansionArg_string":"","_bound":7}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":8,"ExpansionArg_array_length":0} start 65.4271 took 14.4957s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":8,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Invalid number (351:32) on program /**
 * Unix crypt(3) Javascript Implementation
 * 
 * Straightforward implementaiton of the DES-based Unix crypt(3) hash, based largely
 * on crypt.c in the Seventh Edition Unix distribution released by Caldera Systems 
 * under a BSD-style license.
 *
 * @author <a href="mailto:tim@timdumol.com">Tim Joseph Dumol</a>
 */

/*
Legalese:

Copyright(C) Tim Joseph F. Dumol 2011. All rights reserved.
Derived from crypt.c in the Seventh Edition Unix distribution by
Caldera International, which is Copyright(C) Caldera International
Inc. 2001-2002. All rights reserved.

Redistribution and use in source and binary forms,
with or without modification, are permitted provided that the
following conditions are met:

Redistributions of source code and documentation must retain the above
copyright notice, this list of conditions and the following
disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

* All advertising materials mentioning features or use of this software
  must display the following acknowledgement: This product includes
  software developed or owned by Caldera International, Inc.

* Neither the name of Caldera International, Inc. nor the names of
  other contributors may be used to endorse or promote products derived
  from this software without specific prior written permission.

USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE
FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */

// UMD pattern
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.unixCryptTD = factory();
  }
}(this, function () {
    /*
     * Initial permutation,
     */
    var IP = [
        58,50,42,34,26,18,10, 2,
        60,52,44,36,28,20,12, 4,
        62,54,46,38,30,22,14, 6,
        64,56,48,40,32,24,16, 8,
        57,49,41,33,25,17, 9, 1,
        59,51,43,35,27,19,11, 3,
        61,53,45,37,29,21,13, 5,
        63,55,47,39,31,23,15, 7
    ];

    /*
     * Final permutation, FP = IP^(-1)
     */
    var FP =[
        40, 8,48,16,56,24,64,32,
        39, 7,47,15,55,23,63,31,
        38, 6,46,14,54,22,62,30,
        37, 5,45,13,53,21,61,29,
        36, 4,44,12,52,20,60,28,
        35, 3,43,11,51,19,59,27,
        34, 2,42,10,50,18,58,26,
        33, 1,41, 9,49,17,57,25
    ];

    /*
     * Permuted-choice 1 from the key bits
     * to yield C and D.
     * Note that bits 8,16... are left out:
     * They are intended for a parity check.
     */
    var PC1_C = [
        57,49,41,33,25,17, 9,
        1,58,50,42,34,26,18,
        10, 2,59,51,43,35,27,
        19,11, 3,60,52,44,36
    ];

    var PC1_D = [
        63,55,47,39,31,23,15,
        7,62,54,46,38,30,22,
        14, 6,61,53,45,37,29,
        21,13, 5,28,20,12, 4
    ];

    /*
     * Sequence of shifts used for the key schedule.
     */
    var shifts =[
        1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1
    ];

    /*
     * Permuted-choice 2, to pick out the bits from
     * the CD array that generate the key schedule.
     */
    var PC2_C = [
        14,17,11,24, 1, 5,
        3,28,15, 6,21,10,
        23,19,12, 4,26, 8,
        16, 7,27,20,13, 2
    ];

    var PC2_D = [
        41,52,31,37,47,55,
        30,40,51,45,33,48,
        44,49,39,56,34,53,
        46,42,50,36,29,32
    ];

    /*
     * The C and D arrays used to calculate the key schedule.
     */

    var C = [];
    var D = [];
    /*
     * The key schedule.
     * Generated from the key.
     */
    var KS = [];
    for (var i = 0; i < 16; ++i) {
        KS[i] = [];
    }

    /*
     * Set up the key schedule from the key.
     */

    function setkey(key) {
        var i, j, k, t;

        /*
         * First, generate C and D by permuting
         * the key.  The low order bit of each
         * 8-bit char is not used, so C and D are only 28
         * bits apiece.
         */
        for (i=0; i<28; i++) {
            C[i] = key[PC1_C[i]-1];
            D[i] = key[PC1_D[i]-1];
        }
        /*
         * To generate Ki, rotate C and D according
         * to schedule and pick up a permutation
         * using PC2.
         */
        for (i=0; i<16; i++) {
            /*
             * rotate.
             */
            for (k=0; k<shifts[i]; k++) {
                t = C[0];
                for (j=0; j<28-1; j++)
                    C[j] = C[j+1];
                C[27] = t;
                t = D[0];
                for (j=0; j<28-1; j++)
                    D[j] = D[j+1];
                D[27] = t;
            }
            /*
             * get Ki. Note C and D are concatenated.
             */
            for (j=0; j<24; j++) {
                KS[i][j] = C[PC2_C[j]-1];
                KS[i][j+24] = D[PC2_D[j]-28-1];
            }
        }
    }

    /*
     * The E bit-selection table.
     */
    var E = [];
    var e = [
        32, 1, 2, 3, 4, 5,
        4, 5, 6, 7, 8, 9,
        8, 9,10,11,12,13,
        12,13,14,15,16,17,
        16,17,18,19,20,21,
        20,21,22,23,24,25,
        24,25,26,27,28,29,
        28,29,30,31,32, 1
    ];

    /*
     * The 8 selection functions.
     * For some reason, they give a 0-origin
     * index, unlike everything else.
     */
    var S = [
        [14, 4,13, 1, 2,15,11, 8, 3,10, 6,12, 5, 9, 0, 7,
         0,15, 7, 4,14, 2,13, 1,10, 6,12,11, 9, 5, 3, 8,
         4, 1,14, 8,13, 6, 2,11,15,12, 9, 7, 3,10, 5, 0,
         15,12, 8, 2, 4, 9, 1, 7, 5,11, 3,14,10, 0, 6,13],

        [15, 1, 8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10,
         3,13, 4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5,
         0,14, 7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15,
         13, 8,10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9],

        [10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8,
         13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1,
         13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7,
         1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12],

        [7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15,
         13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9,
         10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4,
         3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14],

        [2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9,
         14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6,
         4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14,
         11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3],

        [12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11,
         10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8,
         9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6,
         4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13],

        [4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1,
         13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6,
         1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2,
         6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12],

        [13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7,
         1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2,
         7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8,
         2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11]
    ]

    /*
     * P is a permutation on the selected combination
     * of the current L and key.
     */
    var P = [
        16, 7,20,21,
        29,12,28,17,
        1,15,23,26,
        5,18,31,10,
        2, 8,24,14,
        32,27, 3, 9,
        19,13,30, 6,
        22,11, 4,25
    ];

    /*
     * The current block, divided into 2 halves.
     */
    var L = [], R = [];
    var tempL = [[]];
    var f =[];

    /*
     * The combination of the key and the input, before selection.
     */
    var preS = [];

    /*
     * The payoff: encrypt a block.
     */

    function encrypt(block, edflag) {
        var i, ii, j, k, t;

        /*
         * First, permute the bits in the input
         */
        var perm = [];
        for (j=0; j<64; j++) {
            perm[j] = block[IP[j]-1];
        }
        for (j=0; j<32; ++j) {
            L[j] = perm[j];
            R[j] = perm[j+32];
        }
        /*
         * Perform an encryption operation 16 times.
         */
        for (ii=0; ii<16; ii++) {
            /*
             * Set direction
             */
            if (edflag)
                i = 15-ii;
            else
                i = ii;
            /*
             * Save the R array,
             * which will be the new L.
             */
            for (j=0; j<32; j++)
                tempL[j] = R[j];
            /*
             * Expand R to 48 bits using the E selector;
             * exclusive-or with the current key bits.
             */
            for (j=0; j<48; j++)
                preS[j] = R[E[j]-1] ^ KS[i][j];
            /*
             * The pre-select bits are now considered
             * in 8 groups of 6 bits each.
             * The 8 selection functions map these
             * 6-bit quantities into 4-bit quantities
             * and the results permuted
             * to make an f(R, K).
             * The indexing into the selection functions
             * is peculiar; it could be simplified by
             * rewriting the tables.
             */
            for (j=0; j<8; j++) {
                t = 6*j;
                k = S[j][(preS[t+0]<<5)+
                         (preS[t+1]<<3)+
                         (preS[t+2]<<2)+
                         (preS[t+3]<<1)+
                         (preS[t+4]<<0)+
                         (preS[t+5]<<4)];
                t = 4*j;
                f[t+0] = (k>>3)&01;
                f[t+1] = (k>>2)&01;
                f[t+2] = (k>>1)&01;
                f[t+3] = (k>>0)&01;
            }
            /*
             * The new R is L ^ f(R, K).
             * The f here has to be permuted first, though.
             */
            for (j=0; j<32; j++)
                R[j] = L[j] ^ f[P[j]-1];
            /*
             * Finally, the new L (the original R)
             * is copied back.
             */
            for (j=0; j<32; j++)
                L[j] = tempL[j];
        }
        /*
         * The output L and R are reversed.
         */
        for (j=0; j<32; j++) {
            t = L[j];
            L[j] = R[j];
            R[j] = t;
        }
        /*
         * The final output
         * gets the inverse permutation of the very original.
         */
        for (j=0; j<32; ++j) {
            perm[j] = L[j];
            perm[j+32] = R[j];
        }
        for (j=0; j<64; j++) {
            block[j] = perm[FP[j]-1];
        }
    }

    /**
     * Transform a string to an array of bytes
     */
    var strToBytes = function(str) {
        var i, x = [];
        for (i = 0; i < str.length; ++i) {
            x[i] = str.charCodeAt(i);
        }
        return x
    };

    var bytesToStr = function(bytes) {
        return String.fromCharCode.apply(String, bytes);
    }
    
    /**
     * Implements the Unix crypt(3) DES-based hash.
     *
     * @param {Array.<number>|string} pw The string to hash
     * @param {Array.<number>|string} salt The salt to use (two character string from [a-zA-Z0-9./]).
     * @param {boolean=} returnBytes (optional) If true, return an array of bytes;
     *                                      otherwise, return a string.
     */
    return function crypt(pw, salt, returnBytes) {
        if (typeof(pw) === 'string') pw = strToBytes(pw);
        if (typeof(salt) === 'string') salt = strToBytes(salt);

        var i, j, k, c, temp;
        var block = [], iobuf = [];
        for(i=0; i<66; i++)
            block[i] = 0;
        for(i=0, k=0; (c= pw[k]) && i<64; ++k){
            for(j=0; j<7; j++, i++)
                block[i] = (c>>(6-j)) & 01;
            i++;
        }

        setkey(block);

        for(i=0; i<66; i++)
            block[i] = 0;

        for(i=0;i<48;i++)
            E[i] = e[i];

        for(i=0, k=0;i<2;i++, ++k){
            c = salt[k];
            iobuf[i] = c;
            if(c>'Z'.charCodeAt(0)) c -= 6;
            if(c>'9'.charCodeAt(0)) c -= 7;
            c -= '.'.charCodeAt(0);
            for(j=0;j<6;j++){
                if((c>>j) & 01){
                    temp = E[6*i+j];
                    E[6*i+j] = E[6*i+j+24];
                    E[6*i+j+24] = temp;
                }
            }
        }

        for(i=0; i<25; i++)
            encrypt(block,0);

        for(i=0; i<11; i++){
            c = 0;
            for(j=0; j<6; j++){
                c <<= 1;
                c |= block[6*i+j];
            }
            c += '.'.charCodeAt(0);
            if(c>'9'.charCodeAt(0)) c += 7;
            if(c>'Z'.charCodeAt(0)) c += 6;
            iobuf[i+2] = c;
        }
        if(iobuf[1]==0)
            iobuf[1] = iobuf[0];

        if (returnBytes) return(iobuf);
        else return bytesToStr(iobuf);
    }
}));


 at SyntaxError: Invalid number (351:32)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseExprOp (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1654:14)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1639:17)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":2,"ExpansionArg_int":0,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":8}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"_bound":6,"ExpansionArg_array_length":0} start 64.7062 took 17.6797s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"_bound":6,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Invalid number (351:32) on program /**
 * Unix crypt(3) Javascript Implementation
 * 
 * Straightforward implementaiton of the DES-based Unix crypt(3) hash, based largely
 * on crypt.c in the Seventh Edition Unix distribution released by Caldera Systems 
 * under a BSD-style license.
 *
 * @author <a href="mailto:tim@timdumol.com">Tim Joseph Dumol</a>
 */

/*
Legalese:

Copyright(C) Tim Joseph F. Dumol 2011. All rights reserved.
Derived from crypt.c in the Seventh Edition Unix distribution by
Caldera International, which is Copyright(C) Caldera International
Inc. 2001-2002. All rights reserved.

Redistribution and use in source and binary forms,
with or without modification, are permitted provided that the
following conditions are met:

Redistributions of source code and documentation must retain the above
copyright notice, this list of conditions and the following
disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

* All advertising materials mentioning features or use of this software
  must display the following acknowledgement: This product includes
  software developed or owned by Caldera International, Inc.

* Neither the name of Caldera International, Inc. nor the names of
  other contributors may be used to endorse or promote products derived
  from this software without specific prior written permission.

USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE
FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */

// UMD pattern
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.unixCryptTD = factory();
  }
}(this, function () {
    /*
     * Initial permutation,
     */
    var IP = [
        58,50,42,34,26,18,10, 2,
        60,52,44,36,28,20,12, 4,
        62,54,46,38,30,22,14, 6,
        64,56,48,40,32,24,16, 8,
        57,49,41,33,25,17, 9, 1,
        59,51,43,35,27,19,11, 3,
        61,53,45,37,29,21,13, 5,
        63,55,47,39,31,23,15, 7
    ];

    /*
     * Final permutation, FP = IP^(-1)
     */
    var FP =[
        40, 8,48,16,56,24,64,32,
        39, 7,47,15,55,23,63,31,
        38, 6,46,14,54,22,62,30,
        37, 5,45,13,53,21,61,29,
        36, 4,44,12,52,20,60,28,
        35, 3,43,11,51,19,59,27,
        34, 2,42,10,50,18,58,26,
        33, 1,41, 9,49,17,57,25
    ];

    /*
     * Permuted-choice 1 from the key bits
     * to yield C and D.
     * Note that bits 8,16... are left out:
     * They are intended for a parity check.
     */
    var PC1_C = [
        57,49,41,33,25,17, 9,
        1,58,50,42,34,26,18,
        10, 2,59,51,43,35,27,
        19,11, 3,60,52,44,36
    ];

    var PC1_D = [
        63,55,47,39,31,23,15,
        7,62,54,46,38,30,22,
        14, 6,61,53,45,37,29,
        21,13, 5,28,20,12, 4
    ];

    /*
     * Sequence of shifts used for the key schedule.
     */
    var shifts =[
        1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1
    ];

    /*
     * Permuted-choice 2, to pick out the bits from
     * the CD array that generate the key schedule.
     */
    var PC2_C = [
        14,17,11,24, 1, 5,
        3,28,15, 6,21,10,
        23,19,12, 4,26, 8,
        16, 7,27,20,13, 2
    ];

    var PC2_D = [
        41,52,31,37,47,55,
        30,40,51,45,33,48,
        44,49,39,56,34,53,
        46,42,50,36,29,32
    ];

    /*
     * The C and D arrays used to calculate the key schedule.
     */

    var C = [];
    var D = [];
    /*
     * The key schedule.
     * Generated from the key.
     */
    var KS = [];
    for (var i = 0; i < 16; ++i) {
        KS[i] = [];
    }

    /*
     * Set up the key schedule from the key.
     */

    function setkey(key) {
        var i, j, k, t;

        /*
         * First, generate C and D by permuting
         * the key.  The low order bit of each
         * 8-bit char is not used, so C and D are only 28
         * bits apiece.
         */
        for (i=0; i<28; i++) {
            C[i] = key[PC1_C[i]-1];
            D[i] = key[PC1_D[i]-1];
        }
        /*
         * To generate Ki, rotate C and D according
         * to schedule and pick up a permutation
         * using PC2.
         */
        for (i=0; i<16; i++) {
            /*
             * rotate.
             */
            for (k=0; k<shifts[i]; k++) {
                t = C[0];
                for (j=0; j<28-1; j++)
                    C[j] = C[j+1];
                C[27] = t;
                t = D[0];
                for (j=0; j<28-1; j++)
                    D[j] = D[j+1];
                D[27] = t;
            }
            /*
             * get Ki. Note C and D are concatenated.
             */
            for (j=0; j<24; j++) {
                KS[i][j] = C[PC2_C[j]-1];
                KS[i][j+24] = D[PC2_D[j]-28-1];
            }
        }
    }

    /*
     * The E bit-selection table.
     */
    var E = [];
    var e = [
        32, 1, 2, 3, 4, 5,
        4, 5, 6, 7, 8, 9,
        8, 9,10,11,12,13,
        12,13,14,15,16,17,
        16,17,18,19,20,21,
        20,21,22,23,24,25,
        24,25,26,27,28,29,
        28,29,30,31,32, 1
    ];

    /*
     * The 8 selection functions.
     * For some reason, they give a 0-origin
     * index, unlike everything else.
     */
    var S = [
        [14, 4,13, 1, 2,15,11, 8, 3,10, 6,12, 5, 9, 0, 7,
         0,15, 7, 4,14, 2,13, 1,10, 6,12,11, 9, 5, 3, 8,
         4, 1,14, 8,13, 6, 2,11,15,12, 9, 7, 3,10, 5, 0,
         15,12, 8, 2, 4, 9, 1, 7, 5,11, 3,14,10, 0, 6,13],

        [15, 1, 8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10,
         3,13, 4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5,
         0,14, 7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15,
         13, 8,10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9],

        [10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8,
         13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1,
         13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7,
         1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12],

        [7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15,
         13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9,
         10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4,
         3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14],

        [2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9,
         14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6,
         4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14,
         11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3],

        [12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11,
         10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8,
         9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6,
         4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13],

        [4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1,
         13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6,
         1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2,
         6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12],

        [13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7,
         1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2,
         7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8,
         2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11]
    ]

    /*
     * P is a permutation on the selected combination
     * of the current L and key.
     */
    var P = [
        16, 7,20,21,
        29,12,28,17,
        1,15,23,26,
        5,18,31,10,
        2, 8,24,14,
        32,27, 3, 9,
        19,13,30, 6,
        22,11, 4,25
    ];

    /*
     * The current block, divided into 2 halves.
     */
    var L = [], R = [];
    var tempL = [[]];
    var f =[];

    /*
     * The combination of the key and the input, before selection.
     */
    var preS = [];

    /*
     * The payoff: encrypt a block.
     */

    function encrypt(block, edflag) {
        var i, ii, j, k, t;

        /*
         * First, permute the bits in the input
         */
        var perm = [];
        for (j=0; j<64; j++) {
            perm[j] = block[IP[j]-1];
        }
        for (j=0; j<32; ++j) {
            L[j] = perm[j];
            R[j] = perm[j+32];
        }
        /*
         * Perform an encryption operation 16 times.
         */
        for (ii=0; ii<16; ii++) {
            /*
             * Set direction
             */
            if (edflag)
                i = 15-ii;
            else
                i = ii;
            /*
             * Save the R array,
             * which will be the new L.
             */
            for (j=0; j<32; j++)
                tempL[j] = R[j];
            /*
             * Expand R to 48 bits using the E selector;
             * exclusive-or with the current key bits.
             */
            for (j=0; j<48; j++)
                preS[j] = R[E[j]-1] ^ KS[i][j];
            /*
             * The pre-select bits are now considered
             * in 8 groups of 6 bits each.
             * The 8 selection functions map these
             * 6-bit quantities into 4-bit quantities
             * and the results permuted
             * to make an f(R, K).
             * The indexing into the selection functions
             * is peculiar; it could be simplified by
             * rewriting the tables.
             */
            for (j=0; j<8; j++) {
                t = 6*j;
                k = S[j][(preS[t+0]<<5)+
                         (preS[t+1]<<3)+
                         (preS[t+2]<<2)+
                         (preS[t+3]<<1)+
                         (preS[t+4]<<0)+
                         (preS[t+5]<<4)];
                t = 4*j;
                f[t+0] = (k>>3)&01;
                f[t+1] = (k>>2)&01;
                f[t+2] = (k>>1)&01;
                f[t+3] = (k>>0)&01;
            }
            /*
             * The new R is L ^ f(R, K).
             * The f here has to be permuted first, though.
             */
            for (j=0; j<32; j++)
                R[j] = L[j] ^ f[P[j]-1];
            /*
             * Finally, the new L (the original R)
             * is copied back.
             */
            for (j=0; j<32; j++)
                L[j] = tempL[j];
        }
        /*
         * The output L and R are reversed.
         */
        for (j=0; j<32; j++) {
            t = L[j];
            L[j] = R[j];
            R[j] = t;
        }
        /*
         * The final output
         * gets the inverse permutation of the very original.
         */
        for (j=0; j<32; ++j) {
            perm[j] = L[j];
            perm[j+32] = R[j];
        }
        for (j=0; j<64; j++) {
            block[j] = perm[FP[j]-1];
        }
    }

    /**
     * Transform a string to an array of bytes
     */
    var strToBytes = function(str) {
        var i, x = [];
        for (i = 0; i < str.length; ++i) {
            x[i] = str.charCodeAt(i);
        }
        return x
    };

    var bytesToStr = function(bytes) {
        return String.fromCharCode.apply(String, bytes);
    }
    
    /**
     * Implements the Unix crypt(3) DES-based hash.
     *
     * @param {Array.<number>|string} pw The string to hash
     * @param {Array.<number>|string} salt The salt to use (two character string from [a-zA-Z0-9./]).
     * @param {boolean=} returnBytes (optional) If true, return an array of bytes;
     *                                      otherwise, return a string.
     */
    return function crypt(pw, salt, returnBytes) {
        if (typeof(pw) === 'string') pw = strToBytes(pw);
        if (typeof(salt) === 'string') salt = strToBytes(salt);

        var i, j, k, c, temp;
        var block = [], iobuf = [];
        for(i=0; i<66; i++)
            block[i] = 0;
        for(i=0, k=0; (c= pw[k]) && i<64; ++k){
            for(j=0; j<7; j++, i++)
                block[i] = (c>>(6-j)) & 01;
            i++;
        }

        setkey(block);

        for(i=0; i<66; i++)
            block[i] = 0;

        for(i=0;i<48;i++)
            E[i] = e[i];

        for(i=0, k=0;i<2;i++, ++k){
            c = salt[k];
            iobuf[i] = c;
            if(c>'Z'.charCodeAt(0)) c -= 6;
            if(c>'9'.charCodeAt(0)) c -= 7;
            c -= '.'.charCodeAt(0);
            for(j=0;j<6;j++){
                if((c>>j) & 01){
                    temp = E[6*i+j];
                    E[6*i+j] = E[6*i+j+24];
                    E[6*i+j+24] = temp;
                }
            }
        }

        for(i=0; i<25; i++)
            encrypt(block,0);

        for(i=0; i<11; i++){
            c = 0;
            for(j=0; j<6; j++){
                c <<= 1;
                c |= block[6*i+j];
            }
            c += '.'.charCodeAt(0);
            if(c>'9'.charCodeAt(0)) c += 7;
            if(c>'Z'.charCodeAt(0)) c += 6;
            iobuf[i+2] = c;
        }
        if(iobuf[1]==0)
            iobuf[1] = iobuf[0];

        if (returnBytes) return(iobuf);
        else return bytesToStr(iobuf);
    }
}));


 at SyntaxError: Invalid number (351:32)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseExprOp (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1654:14)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1639:17)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":3,"ExpansionArg_string":"","ExpansionArg_type_2":4,"_bound":6}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":7,"ExpansionArg_array_length":0} start 70.6747 took 13.1041s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":7,"ExpansionArg_array_length":0}
* Error: Tropigate failed because SyntaxError: Invalid number (351:32) on program /**
 * Unix crypt(3) Javascript Implementation
 * 
 * Straightforward implementaiton of the DES-based Unix crypt(3) hash, based largely
 * on crypt.c in the Seventh Edition Unix distribution released by Caldera Systems 
 * under a BSD-style license.
 *
 * @author <a href="mailto:tim@timdumol.com">Tim Joseph Dumol</a>
 */

/*
Legalese:

Copyright(C) Tim Joseph F. Dumol 2011. All rights reserved.
Derived from crypt.c in the Seventh Edition Unix distribution by
Caldera International, which is Copyright(C) Caldera International
Inc. 2001-2002. All rights reserved.

Redistribution and use in source and binary forms,
with or without modification, are permitted provided that the
following conditions are met:

Redistributions of source code and documentation must retain the above
copyright notice, this list of conditions and the following
disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

* All advertising materials mentioning features or use of this software
  must display the following acknowledgement: This product includes
  software developed or owned by Caldera International, Inc.

* Neither the name of Caldera International, Inc. nor the names of
  other contributors may be used to endorse or promote products derived
  from this software without specific prior written permission.

USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE
FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */

// UMD pattern
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.unixCryptTD = factory();
  }
}(this, function () {
    /*
     * Initial permutation,
     */
    var IP = [
        58,50,42,34,26,18,10, 2,
        60,52,44,36,28,20,12, 4,
        62,54,46,38,30,22,14, 6,
        64,56,48,40,32,24,16, 8,
        57,49,41,33,25,17, 9, 1,
        59,51,43,35,27,19,11, 3,
        61,53,45,37,29,21,13, 5,
        63,55,47,39,31,23,15, 7
    ];

    /*
     * Final permutation, FP = IP^(-1)
     */
    var FP =[
        40, 8,48,16,56,24,64,32,
        39, 7,47,15,55,23,63,31,
        38, 6,46,14,54,22,62,30,
        37, 5,45,13,53,21,61,29,
        36, 4,44,12,52,20,60,28,
        35, 3,43,11,51,19,59,27,
        34, 2,42,10,50,18,58,26,
        33, 1,41, 9,49,17,57,25
    ];

    /*
     * Permuted-choice 1 from the key bits
     * to yield C and D.
     * Note that bits 8,16... are left out:
     * They are intended for a parity check.
     */
    var PC1_C = [
        57,49,41,33,25,17, 9,
        1,58,50,42,34,26,18,
        10, 2,59,51,43,35,27,
        19,11, 3,60,52,44,36
    ];

    var PC1_D = [
        63,55,47,39,31,23,15,
        7,62,54,46,38,30,22,
        14, 6,61,53,45,37,29,
        21,13, 5,28,20,12, 4
    ];

    /*
     * Sequence of shifts used for the key schedule.
     */
    var shifts =[
        1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1
    ];

    /*
     * Permuted-choice 2, to pick out the bits from
     * the CD array that generate the key schedule.
     */
    var PC2_C = [
        14,17,11,24, 1, 5,
        3,28,15, 6,21,10,
        23,19,12, 4,26, 8,
        16, 7,27,20,13, 2
    ];

    var PC2_D = [
        41,52,31,37,47,55,
        30,40,51,45,33,48,
        44,49,39,56,34,53,
        46,42,50,36,29,32
    ];

    /*
     * The C and D arrays used to calculate the key schedule.
     */

    var C = [];
    var D = [];
    /*
     * The key schedule.
     * Generated from the key.
     */
    var KS = [];
    for (var i = 0; i < 16; ++i) {
        KS[i] = [];
    }

    /*
     * Set up the key schedule from the key.
     */

    function setkey(key) {
        var i, j, k, t;

        /*
         * First, generate C and D by permuting
         * the key.  The low order bit of each
         * 8-bit char is not used, so C and D are only 28
         * bits apiece.
         */
        for (i=0; i<28; i++) {
            C[i] = key[PC1_C[i]-1];
            D[i] = key[PC1_D[i]-1];
        }
        /*
         * To generate Ki, rotate C and D according
         * to schedule and pick up a permutation
         * using PC2.
         */
        for (i=0; i<16; i++) {
            /*
             * rotate.
             */
            for (k=0; k<shifts[i]; k++) {
                t = C[0];
                for (j=0; j<28-1; j++)
                    C[j] = C[j+1];
                C[27] = t;
                t = D[0];
                for (j=0; j<28-1; j++)
                    D[j] = D[j+1];
                D[27] = t;
            }
            /*
             * get Ki. Note C and D are concatenated.
             */
            for (j=0; j<24; j++) {
                KS[i][j] = C[PC2_C[j]-1];
                KS[i][j+24] = D[PC2_D[j]-28-1];
            }
        }
    }

    /*
     * The E bit-selection table.
     */
    var E = [];
    var e = [
        32, 1, 2, 3, 4, 5,
        4, 5, 6, 7, 8, 9,
        8, 9,10,11,12,13,
        12,13,14,15,16,17,
        16,17,18,19,20,21,
        20,21,22,23,24,25,
        24,25,26,27,28,29,
        28,29,30,31,32, 1
    ];

    /*
     * The 8 selection functions.
     * For some reason, they give a 0-origin
     * index, unlike everything else.
     */
    var S = [
        [14, 4,13, 1, 2,15,11, 8, 3,10, 6,12, 5, 9, 0, 7,
         0,15, 7, 4,14, 2,13, 1,10, 6,12,11, 9, 5, 3, 8,
         4, 1,14, 8,13, 6, 2,11,15,12, 9, 7, 3,10, 5, 0,
         15,12, 8, 2, 4, 9, 1, 7, 5,11, 3,14,10, 0, 6,13],

        [15, 1, 8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10,
         3,13, 4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5,
         0,14, 7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15,
         13, 8,10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9],

        [10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8,
         13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1,
         13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7,
         1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12],

        [7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15,
         13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9,
         10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4,
         3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14],

        [2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9,
         14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6,
         4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14,
         11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3],

        [12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11,
         10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8,
         9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6,
         4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13],

        [4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1,
         13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6,
         1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2,
         6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12],

        [13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7,
         1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2,
         7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8,
         2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11]
    ]

    /*
     * P is a permutation on the selected combination
     * of the current L and key.
     */
    var P = [
        16, 7,20,21,
        29,12,28,17,
        1,15,23,26,
        5,18,31,10,
        2, 8,24,14,
        32,27, 3, 9,
        19,13,30, 6,
        22,11, 4,25
    ];

    /*
     * The current block, divided into 2 halves.
     */
    var L = [], R = [];
    var tempL = [[]];
    var f =[];

    /*
     * The combination of the key and the input, before selection.
     */
    var preS = [];

    /*
     * The payoff: encrypt a block.
     */

    function encrypt(block, edflag) {
        var i, ii, j, k, t;

        /*
         * First, permute the bits in the input
         */
        var perm = [];
        for (j=0; j<64; j++) {
            perm[j] = block[IP[j]-1];
        }
        for (j=0; j<32; ++j) {
            L[j] = perm[j];
            R[j] = perm[j+32];
        }
        /*
         * Perform an encryption operation 16 times.
         */
        for (ii=0; ii<16; ii++) {
            /*
             * Set direction
             */
            if (edflag)
                i = 15-ii;
            else
                i = ii;
            /*
             * Save the R array,
             * which will be the new L.
             */
            for (j=0; j<32; j++)
                tempL[j] = R[j];
            /*
             * Expand R to 48 bits using the E selector;
             * exclusive-or with the current key bits.
             */
            for (j=0; j<48; j++)
                preS[j] = R[E[j]-1] ^ KS[i][j];
            /*
             * The pre-select bits are now considered
             * in 8 groups of 6 bits each.
             * The 8 selection functions map these
             * 6-bit quantities into 4-bit quantities
             * and the results permuted
             * to make an f(R, K).
             * The indexing into the selection functions
             * is peculiar; it could be simplified by
             * rewriting the tables.
             */
            for (j=0; j<8; j++) {
                t = 6*j;
                k = S[j][(preS[t+0]<<5)+
                         (preS[t+1]<<3)+
                         (preS[t+2]<<2)+
                         (preS[t+3]<<1)+
                         (preS[t+4]<<0)+
                         (preS[t+5]<<4)];
                t = 4*j;
                f[t+0] = (k>>3)&01;
                f[t+1] = (k>>2)&01;
                f[t+2] = (k>>1)&01;
                f[t+3] = (k>>0)&01;
            }
            /*
             * The new R is L ^ f(R, K).
             * The f here has to be permuted first, though.
             */
            for (j=0; j<32; j++)
                R[j] = L[j] ^ f[P[j]-1];
            /*
             * Finally, the new L (the original R)
             * is copied back.
             */
            for (j=0; j<32; j++)
                L[j] = tempL[j];
        }
        /*
         * The output L and R are reversed.
         */
        for (j=0; j<32; j++) {
            t = L[j];
            L[j] = R[j];
            R[j] = t;
        }
        /*
         * The final output
         * gets the inverse permutation of the very original.
         */
        for (j=0; j<32; ++j) {
            perm[j] = L[j];
            perm[j+32] = R[j];
        }
        for (j=0; j<64; j++) {
            block[j] = perm[FP[j]-1];
        }
    }

    /**
     * Transform a string to an array of bytes
     */
    var strToBytes = function(str) {
        var i, x = [];
        for (i = 0; i < str.length; ++i) {
            x[i] = str.charCodeAt(i);
        }
        return x
    };

    var bytesToStr = function(bytes) {
        return String.fromCharCode.apply(String, bytes);
    }
    
    /**
     * Implements the Unix crypt(3) DES-based hash.
     *
     * @param {Array.<number>|string} pw The string to hash
     * @param {Array.<number>|string} salt The salt to use (two character string from [a-zA-Z0-9./]).
     * @param {boolean=} returnBytes (optional) If true, return an array of bytes;
     *                                      otherwise, return a string.
     */
    return function crypt(pw, salt, returnBytes) {
        if (typeof(pw) === 'string') pw = strToBytes(pw);
        if (typeof(salt) === 'string') salt = strToBytes(salt);

        var i, j, k, c, temp;
        var block = [], iobuf = [];
        for(i=0; i<66; i++)
            block[i] = 0;
        for(i=0, k=0; (c= pw[k]) && i<64; ++k){
            for(j=0; j<7; j++, i++)
                block[i] = (c>>(6-j)) & 01;
            i++;
        }

        setkey(block);

        for(i=0; i<66; i++)
            block[i] = 0;

        for(i=0;i<48;i++)
            E[i] = e[i];

        for(i=0, k=0;i<2;i++, ++k){
            c = salt[k];
            iobuf[i] = c;
            if(c>'Z'.charCodeAt(0)) c -= 6;
            if(c>'9'.charCodeAt(0)) c -= 7;
            c -= '.'.charCodeAt(0);
            for(j=0;j<6;j++){
                if((c>>j) & 01){
                    temp = E[6*i+j];
                    E[6*i+j] = E[6*i+j+24];
                    E[6*i+j+24] = temp;
                }
            }
        }

        for(i=0; i<25; i++)
            encrypt(block,0);

        for(i=0; i<11; i++){
            c = 0;
            for(j=0; j<6; j++){
                c <<= 1;
                c |= block[6*i+j];
            }
            c += '.'.charCodeAt(0);
            if(c>'9'.charCodeAt(0)) c += 7;
            if(c>'Z'.charCodeAt(0)) c += 6;
            iobuf[i+2] = c;
        }
        if(iobuf[1]==0)
            iobuf[1] = iobuf[0];

        if (returnBytes) return(iobuf);
        else return bytesToStr(iobuf);
    }
}));


 at SyntaxError: Invalid number (351:32)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp$7.readNumber (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2896:52)
    at Parser.pp$7.getTokenFromCode (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2720:19)
    at Parser.pp$7.readToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2477:17)
    at Parser.readToken (/root/ExpoSE/lib/Tropigate/bin/Tokens.js:124:26)
    at Parser.pp$7.nextToken (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2468:15)
    at Parser.pp$7.next (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2413:10)
    at Parser.pp$3.parseExprOp (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1654:14)
    at Parser.pp$3.parseExprOps (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1639:17)
    at Parser.pp$3.parseMaybeConditional (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1620:21)
    at Parser.pp$3.parseMaybeAssign (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1597:21)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":1,"ExpansionArg_type_2":4,"ExpansionArg_string":"","_bound":7}'
*-- Test Case {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"ExpansionArg_type_2":0,"_bound":6,"ExpansionArg_bool":false} start 77.8024 took 11.6875s
*-- Errors occured in test {"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"ExpansionArg_type_2":0,"_bound":6,"ExpansionArg_bool":false}
* Error: TypeError: Cannot read property 'port' of undefined
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"Switcher":true,"ExpansionArg_type":5,"ExpansionArg_array_length":0,"ExpansionArg_type_2":0,"_bound":6}'
