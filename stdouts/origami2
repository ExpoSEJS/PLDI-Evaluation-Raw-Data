/root/Targets/origami2
└─┬ origami2@0.5.13 
  ├─┬ async@2.5.0 
  │ └── lodash@4.17.4 
  ├─┬ debug@2.6.9 
  │ └── ms@2.0.0 
  ├── function-body-regex@0.0.3 
  ├─┬ node-rsa@0.4.2 
  │ └── asn1@0.2.3 
  └── shortid@2.2.8 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/origami2/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 32% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","reduce","parseInt","charCodeAt","abs","Object","call","binding","RegExp","join"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0436 took 13.4498s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (1:82) on program var assert = require('assert');
var RSA = require('node-rsa');

function asPrivateKey(privateKey) {
  if (typeof(privateKey) === 'string') {
    var key = new RSA();

    try {
      key.importKey(privateKey, 'pkcs1-private-pem');
    } catch (e) {
      throw new Error('invalid private key');
    }

    return key;
  }

  return privateKey;
}

function asPublicKey(publicKey) {
  if (typeof(publicKey) === 'string') {
    var key = new RSA();

    try {
      key.importKey(publicKey, 'pkcs1-public-pem');
    } catch (e) {
      throw new Error('invalid public key');
    }

    return key;
  }

  return publicKey;
}

function randomKey(size) {
  var key = new RSA();
  
  key.generateKeyPair(size || 512);
  
  return key.exportKey('pkcs1-private-pem');  
}

function asString(key, exportPrivate) {
  if (!key) throw new Error('key is required');
  
  if (!exportPrivate) return key.exportKey('pkcs1-public-pem');
  else return key.exportKey('pkcs1-private-pem');
}

var utils = {
  randomKey: randomKey,
  asString: asString,
  asPublicKey: asPublicKey,
  asPrivateKey: asPrivateKey,
  encryptAndSign: function (input, signKey, encryptKey) {
    signKey = asPrivateKey(signKey);
    encryptKey = asPublicKey(encryptKey);

    return utils.sign(utils.encrypt(input, encryptKey), signKey);
  },
  decryptAndVerify: function (input, decryptKey, verifyKey) {
    verifyKey = asPublicKey(verifyKey);
    decryptKey = asPrivateKey(decryptKey);

    var verifies = utils.verify(input, verifyKey);

    assert.equal(true, verifies, 'fails to verify signature');

    return utils.decrypt(input.data, decryptKey);
  },
  encrypt: function (input, publicKey) {
    if (!input) throw new Error('input data is required');
    if (!publicKey) throw new Error('public key is required');

    publicKey = asPublicKey(publicKey);

    var normalInput = JSON.stringify(input);

    var buffer = publicKey.encrypt(normalInput);

    return buffer.toString('base64');
  },
  decrypt: function (input, privateKey) {
    if (!input) throw new Error('input data is required');
    if (!privateKey) throw new Error('private key is required');

    privateKey = asPrivateKey(privateKey);

    var decrypted = privateKey.decrypt(input);

    return JSON.parse(decrypted);
  },
  sign: function (input, privateKey) {
    if (!input) throw new Error('input data is required');
    if (!privateKey) throw new Error('private key is required');

    privateKey = asPrivateKey(privateKey);

    var normalInput = JSON.stringify(input);

    return {
      data: normalInput,
      signature: privateKey.sign(normalInput, 'base64')
    };
  },
  verify: function (input, publicKey) {
    if (!input) throw new Error('input data is required');
    if (!publicKey) throw new Error('public key is required');

    if (typeof(input.data) !== 'string' ||
        typeof(input.signature) !== 'string') {
      throw new Error('invalid input data');
    }

    publicKey = asPublicKey(publicKey);

    try {
      return publicKey.verify(input.data, input.signature, null, 'base64');
    } catch (e) {
      throw new Error('fails to verify signature');
    }
  }
};

module.exports = utils;
 at SyntaxError: Unexpected token (1:82)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/origami2/node_modules/origami2/index.js. Coverage (Term): 43% Coverage (LOC): 45%
*- File /root/Targets/origami2/node_modules/origami2/client.js. Coverage (Term): 11% Coverage (LOC): 15%
*- File /root/Targets/origami2/node_modules/origami2/js-function-helpers.js. Coverage (Term): 16% Coverage (LOC): 40%
*- File /root/Targets/origami2/node_modules/origami2/client-factory.js. Coverage (Term): 34% Coverage (LOC): 44%
*- File /root/Targets/origami2/node_modules/origami2/emitter.js. Coverage (Term): 22% Coverage (LOC): 39%
*- File /root/Targets/origami2/node_modules/debug/src/index.js. Coverage (Term): 81% Coverage (LOC): 83%
*- File /root/Targets/origami2/node_modules/debug/src/node.js. Coverage (Term): 34% Coverage (LOC): 43%
*- File /root/Targets/origami2/node_modules/debug/src/debug.js. Coverage (Term): 44% Coverage (LOC): 48%
*- File /root/Targets/origami2/node_modules/ms/index.js. Coverage (Term): 12% Coverage (LOC): 15%
*- File /root/Targets/origami2/node_modules/origami2/utils.js. Coverage (Term): 10% Coverage (LOC): 24%
*- File /root/Targets/origami2/node_modules/origami2/emitters-bus.js. Coverage (Term): 33% Coverage (LOC): 43%
*- File /root/Targets/origami2/node_modules/shortid/index.js. Coverage (Term): 95% Coverage (LOC): 100%
*- File /root/Targets/origami2/node_modules/shortid/lib/index.js. Coverage (Term): 63% Coverage (LOC): 69%
*- File /root/Targets/origami2/node_modules/shortid/lib/alphabet.js. Coverage (Term): 17% Coverage (LOC): 27%
*- File /root/Targets/origami2/node_modules/shortid/lib/random/random-from-seed.js. Coverage (Term): 52% Coverage (LOC): 77%
*- File /root/Targets/origami2/node_modules/shortid/lib/encode.js. Coverage (Term): 33% Coverage (LOC): 43%
*- File /root/Targets/origami2/node_modules/shortid/lib/random/random-byte.js. Coverage (Term): 70% Coverage (LOC): 88%
*- File /root/Targets/origami2/node_modules/shortid/lib/decode.js. Coverage (Term): 44% Coverage (LOC): 60%
*- File /root/Targets/origami2/node_modules/shortid/lib/build.js. Coverage (Term): 34% Coverage (LOC): 39%
*- File /root/Targets/origami2/node_modules/shortid/lib/is-valid.js. Coverage (Term): 29% Coverage (LOC): 35%
*- File /root/Targets/origami2/node_modules/shortid/lib/util/cluster-worker-id.js. Coverage (Term): 96% Coverage (LOC): 100%
*- File /root/Targets/origami2/node_modules/origami2/crane.js. Coverage (Term): 12% Coverage (LOC): 16%
*- File /root/Targets/origami2/node_modules/origami2/penelope.js. Coverage (Term): 6% Coverage (LOC): 6%
*- File /root/Targets/origami2/node_modules/async/dist/async.js. Coverage (Term): 23% Coverage (LOC): 32%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
