/root/Targets/finboxio-nock
└─┬ finboxio-nock@8.0.1-fork 
  ├─┬ chai@3.5.0 
  │ ├── assertion-error@1.0.2 
  │ ├─┬ deep-eql@0.1.3 
  │ │ └── type-detect@0.1.1 
  │ └── type-detect@1.0.0 
  ├─┬ debug@2.6.8 
  │ └── ms@2.0.0 
  ├── deep-equal@1.0.1 
  ├── json-stringify-safe@5.0.1 
  ├── lodash@4.17.4 
  ├─┬ mkdirp@0.5.1 
  │ └── minimist@0.0.8 
  ├── propagate@0.4.0 
  └── qs@6.5.1 

Setup Done exists, not setting up
:../FeatureTester/libs/:/root/Targets/finboxio-nock/node_modules
Set Default Z3_PATH to ./node_modules/z3javascript/bin/libz3.so
ExpoSE Master: /root/ExpoSE/lib/Harness/src/harness.js max concurrent: 16 max paths: 1000000
Setting timeout to 900000
*** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [0 done /0 queued / 1 running / 0 errors / 0% coverage ] ****** [1 done /0 queued / 0 running / 1 errors / 31% coverage ] ***
*-- Stat Module Output --*
*-- concretizations: ["defineProperty","bound log","call","RegExp","join","binding","Object","WeakMap","create","Set","Array","ArrayBuffer","DataView","Map","resolve","max","now","apply","reduce","parseInt","charCodeAt","abs","toString","toUpperCase"]
*-- Stat Module Done --*
*-- Test Case {"_bound":0} start 0.0569 took 33.3188s
*-- Errors occured in test {"_bound":0}
* Error: Tropigate failed because SyntaxError: Unexpected token (7:4) on program /* jshint strict:false */
/**
 * @module nock/scope
 */
var globalIntercept = require('./intercept')
  , common          = require('./common')
  , assert          = require('assert')
  , url             = require('url')
  , _               = require('lodash')
  , debug           = require('debug')('nock.scope')
  , stringify       = require('json-stringify-safe')
  , EventEmitter    = require('events').EventEmitter
  , extend          = require('util')._extend
  , globalEmitter   = require('./global_emitter')
  , util            = require('util')
  , Interceptor     = require('./interceptor') ;

var fs;

try {
  fs = require('fs');
} catch(err) {
  // do nothing, we're in the browser
}

function startScope(basePath, options) {
  return new Scope(basePath, options);
}

function Scope(basePath, options) {
  if (!(this instanceof Scope)) {
    return new Scope(basePath, options);
  }

  EventEmitter.apply(this);
  this.keyedInterceptors = {};
  this.interceptors = [];
  this.transformPathFunction = null;
  this.transformRequestBodyFunction = null;
  this.matchHeaders = [];
  this.logger = debug;
  this.scopeOptions = options || {};
  this.urlParts = {};
  this._persist = false;
  this.contentLen = false;
  this.date = null;
  this.basePath = basePath;
  this.basePathname = '';
  this.port = null;

  if (!(basePath instanceof RegExp)) {
    this.urlParts = url.parse(basePath);
    this.port = this.urlParts.port || ((this.urlParts.protocol === 'http:') ? 80 : 443);
    this.basePathname = this.urlParts.pathname.replace(/\/$/, '');
    this.basePath = this.urlParts.protocol + '//' + this.urlParts.hostname + ':' + this.port;
  }
}

util.inherits(Scope, EventEmitter);

Scope.prototype.add = function add(key, interceptor, scope) {
  if (! this.keyedInterceptors.hasOwnProperty(key)) {
    this.keyedInterceptors[key] = [];
  }
  this.keyedInterceptors[key].push(interceptor);
  globalIntercept(this.basePath,
      interceptor,
      this,
      this.scopeOptions,
      this.urlParts.hostname);
};

Scope.prototype.remove = function remove(key, interceptor) {
  if (this._persist) {
    return;
  }
  var arr = this.keyedInterceptors[key];
  if (arr) {
    arr.splice(arr.indexOf(interceptor), 1);
    if (arr.length === 0) {
      delete this.keyedInterceptors[key];
    }
  }
};

Scope.prototype.intercept = function intercept(uri, method, requestBody, interceptorOptions) {
  var ic = new Interceptor(this, uri, method, requestBody, interceptorOptions);

  this.interceptors.push(ic);
  return ic;
};

Scope.prototype.get = function get(uri, requestBody, options) {
  return this.intercept(uri, 'GET', requestBody, options);
};

Scope.prototype.post = function post(uri, requestBody, options) {
  return this.intercept(uri, 'POST', requestBody, options);
};

Scope.prototype.put = function put(uri, requestBody, options) {
  return this.intercept(uri, 'PUT', requestBody, options);
};

Scope.prototype.head = function head(uri, requestBody, options) {
  return this.intercept(uri, 'HEAD', requestBody, options);
};

Scope.prototype.patch = function patch(uri, requestBody, options) {
  return this.intercept(uri, 'PATCH', requestBody, options);
};

Scope.prototype.merge = function merge(uri, requestBody, options) {
  return this.intercept(uri, 'MERGE', requestBody, options);
};

Scope.prototype.delete = function _delete(uri, requestBody, options) {
  return this.intercept(uri, 'DELETE', requestBody, options);
};

Scope.prototype.pendingMocks = function pendingMocks() {
  return Object.keys(this.keyedInterceptors);
};

Scope.prototype.isDone = function isDone() {
  var self = this;
  // if nock is turned off, it always says it's done
  if (! globalIntercept.isOn()) { return true; }

  var keys = Object.keys(this.keyedInterceptors);
  if (keys.length === 0) {
    return true;
  } else {
    var doneHostCount = 0;

    keys.forEach(function(key) {
      var doneInterceptorCount = 0;

      self.keyedInterceptors[key].forEach(function(interceptor) {
        var isRequireDoneDefined = !_.isUndefined(interceptor.options.requireDone);
        if (isRequireDoneDefined && interceptor.options.requireDone === false) {
          doneInterceptorCount += 1;
        } else if (self._persist && interceptor.interceptionCounter > 0) {
          doneInterceptorCount += 1;
        }
      });

      if (doneInterceptorCount === self.keyedInterceptors[key].length ) {
        doneHostCount += 1;
      }
    });
    return (doneHostCount === keys.length);
  }
};

Scope.prototype.done = function done() {
  assert.ok(this.isDone(), "Mocks not yet satisfied:\n" + this.pendingMocks().join("\n"));
};

Scope.prototype.buildFilter = function buildFilter() {
  var filteringArguments = arguments;

  if (arguments[0] instanceof RegExp) {
    return function(candidate) {
      if (candidate) {
        candidate = candidate.replace(filteringArguments[0], filteringArguments[1]);
      }
      return candidate;
    };
  } else if (_.isFunction(arguments[0])) {
    return arguments[0];
  }
};

Scope.prototype.filteringPath = function filteringPath() {
  this.transformPathFunction = this.buildFilter.apply(this, arguments);
  if (!this.transformPathFunction) {
    throw new Error('Invalid arguments: filtering path should be a function or a regular expression');
  }
  return this;
};

Scope.prototype.filteringRequestBody = function filteringRequestBody() {
  this.transformRequestBodyFunction = this.buildFilter.apply(this, arguments);
  if (!this.transformRequestBodyFunction) {
    throw new Error('Invalid arguments: filtering request body should be a function or a regular expression');
  }
  return this;
};

Scope.prototype.matchHeader = function matchHeader(name, value) {
  //  We use lower-case header field names throughout Nock.
  this.matchHeaders.push({ name: name.toLowerCase(), value: value });
  return this;
};

Scope.prototype.defaultReplyHeaders = function defaultReplyHeaders(headers) {
  this._defaultReplyHeaders = common.headersFieldNamesToLowerCase(headers);
  return this;
};

Scope.prototype.log = function log(newLogger) {
  this.logger = newLogger;
  return this;
};

Scope.prototype.persist = function persist() {
  this._persist = true;
  return this;
};

Scope.prototype.shouldPersist = function shouldPersist() {
  return this._persist;
};

Scope.prototype.replyContentLength = function replyContentLength() {
  this.contentLen = true;
  return this;
};

Scope.prototype.replyDate = function replyDate(d) {
  this.date = d || new Date();
  return this;
};




function cleanAll() {
  globalIntercept.removeAll();
  return module.exports;
}

function loadDefs(path) {
  if (! fs) {
    throw new Error('No fs');
  }

  var contents = fs.readFileSync(path);
  return JSON.parse(contents);
}

function load(path) {
  return define(loadDefs(path));
}

function getStatusFromDefinition(nockDef) {
  //  Backward compatibility for when `status` was encoded as string in `reply`.
  if (!_.isUndefined(nockDef.reply)) {
    //  Try parsing `reply` property.
    var parsedReply = parseInt(nockDef.reply, 10);
    if (_.isNumber(parsedReply)) {
      return parsedReply;
    }
  }

  var DEFAULT_STATUS_OK = 200;
  return nockDef.status || DEFAULT_STATUS_OK;
}

function getScopeFromDefinition(nockDef) {

  //  Backward compatibility for when `port` was part of definition.
  if (!_.isUndefined(nockDef.port)) {
    //  Include `port` into scope if it doesn't exist.
    var options = url.parse(nockDef.scope);
    if (_.isNull(options.port)) {
      return nockDef.scope + ':' + nockDef.port;
    } else {
      if (parseInt(options.port) !== parseInt(nockDef.port)) {
        throw new Error('Mismatched port numbers in scope and port properties of nock definition.');
      }
    }
  }

  return nockDef.scope;
}

function tryJsonParse(string) {
  try {
    return JSON.parse(string);
  } catch(err) {
    return string;
  }
}

function define(nockDefs) {

  var nocks     = [];

  nockDefs.forEach(function(nockDef) {

    var nscope     = getScopeFromDefinition(nockDef)
      , npath      = nockDef.path
      , method     = nockDef.method.toLowerCase() || "get"
      , status     = getStatusFromDefinition(nockDef)
      , headers    = nockDef.headers    || {}
      , reqheaders = nockDef.reqheaders || {}
      , body       = nockDef.body       || ''
      , options    = nockDef.options    || {};

    //  We use request headers for both filtering (see below) and mocking.
    //  Here we are setting up mocked request headers but we don't want to
    //  be changing the user's options object so we clone it first.
    options = _.clone(options) || {};
    options.reqheaders = reqheaders;

    //  Response is not always JSON as it could be a string or binary data or
    //  even an array of binary buffers (e.g. when content is enconded)
    var response;
    if (!nockDef.response) {
      response = '';
    } else {
      response = _.isString(nockDef.response) ? tryJsonParse(nockDef.response) : nockDef.response;
    }

    var nock;
    if (body==="*") {
      nock = startScope(nscope, options).filteringRequestBody(function() {
        return "*";
      })[method](npath, "*").reply(status, response, headers);
    } else {
      nock = startScope(nscope, options);
      //  If request headers were specified filter by them.
      if (_.size(reqheaders) > 0) {
        for (var k in reqheaders) {
          nock.matchHeader(k, reqheaders[k]);
        }
      }
      if (nockDef.filteringRequestBody) {
        nock.filteringRequestBody(nockDef.filteringRequestBody);
      }
      nock.intercept(npath, method, body).reply(status, response, headers);
    }

    nocks.push(nock);

  });

  return nocks;
}

module.exports = extend(startScope, {
  cleanAll: cleanAll,
  activate: globalIntercept.activate,
  isActive: globalIntercept.isActive,
  isDone: globalIntercept.isDone,
  pendingMocks: globalIntercept.pendingMocks,
  removeInterceptor: globalIntercept.removeInterceptor,
  disableNetConnect: globalIntercept.disableNetConnect,
  enableNetConnect: globalIntercept.enableNetConnect,
  load: load,
  loadDefs: loadDefs,
  define: define,
  emitter: globalEmitter,
});
 at SyntaxError: Unexpected token (7:4)
    at Parser.pp$4.raise (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:2221:15)
    at Parser.pp.unexpected (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:603:10)
    at Parser.pp$2.parseBindingAtom (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1417:12)
    at Parser.parseBindingAtom (/root/ExpoSE/lib/Tropigate/bin/FunctionSignatures.js:49:30)
    at Parser.pp$1.parseVarId (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1049:20)
    at Parser.pp$1.parseVar (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:1032:14)
    at Parser.pp$1.parseVarStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:917:10)
    at Parser.pp$1.parseStatement (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:706:19)
    at Parser.parseStatement (/root/ExpoSE/lib/Tropigate/bin/Statements.js:104:30)
    at Parser.pp$1.parseTopLevel (/root/ExpoSE/lib/Tropigate/node_modules/acorn/dist/acorn.js:638:25)
*-- Replay with NO_COMPILE=1 expoSE replay '/root/ExpoSE/lib/Harness/src/harness.js' '{"_bound":0}'
*-- Coverage Data
*- File /root/ExpoSE/lib/Harness/src/harness.js. Coverage (Term): 18% Coverage (LOC): 24%
*- File /root/ExpoSE/lib/S$/bin/symbols.js. Coverage (Term): 16% Coverage (LOC): 34%
*- File /root/Targets/finboxio-nock/node_modules/finboxio-nock/index.js. Coverage (Term): 44% Coverage (LOC): 45%
*- File /root/Targets/finboxio-nock/node_modules/finboxio-nock/lib/recorder.js. Coverage (Term): 10% Coverage (LOC): 12%
*- File /root/Targets/finboxio-nock/node_modules/finboxio-nock/lib/common.js. Coverage (Term): 19% Coverage (LOC): 28%
*- File /root/Targets/finboxio-nock/node_modules/lodash/lodash.js. Coverage (Term): 22% Coverage (LOC): 35%
*- File /root/Targets/finboxio-nock/node_modules/debug/src/index.js. Coverage (Term): 81% Coverage (LOC): 83%
*- File /root/Targets/finboxio-nock/node_modules/debug/src/node.js. Coverage (Term): 35% Coverage (LOC): 44%
*- File /root/Targets/finboxio-nock/node_modules/debug/src/debug.js. Coverage (Term): 47% Coverage (LOC): 51%
*- File /root/Targets/finboxio-nock/node_modules/ms/index.js. Coverage (Term): 12% Coverage (LOC): 15%
*- File /root/Targets/finboxio-nock/node_modules/finboxio-nock/lib/intercept.js. Coverage (Term): 21% Coverage (LOC): 25%
*- File /root/Targets/finboxio-nock/node_modules/finboxio-nock/lib/request_overrider.js. Coverage (Term): 6% Coverage (LOC): 3%
*- File /root/Targets/finboxio-nock/node_modules/propagate/index.js. Coverage (Term): 8% Coverage (LOC): 10%
*- File /root/Targets/finboxio-nock/node_modules/finboxio-nock/lib/delayed_body.js. Coverage (Term): 22% Coverage (LOC): 25%
*- File /root/Targets/finboxio-nock/node_modules/finboxio-nock/lib/socket.js. Coverage (Term): 30% Coverage (LOC): 38%
*- File /root/Targets/finboxio-nock/node_modules/finboxio-nock/lib/global_emitter.js. Coverage (Term): 96% Coverage (LOC): 100%
*- File /root/Targets/finboxio-nock/node_modules/finboxio-nock/lib/interceptor.js. Coverage (Term): 10% Coverage (LOC): 16%
*- File /root/Targets/finboxio-nock/node_modules/finboxio-nock/lib/mixin.js. Coverage (Term): 39% Coverage (LOC): 35%
*- File /root/Targets/finboxio-nock/node_modules/finboxio-nock/lib/match_body.js. Coverage (Term): 12% Coverage (LOC): 15%
*- File /root/Targets/finboxio-nock/node_modules/deep-equal/index.js. Coverage (Term): 10% Coverage (LOC): 14%
*- File /root/Targets/finboxio-nock/node_modules/deep-equal/lib/keys.js. Coverage (Term): 57% Coverage (LOC): 56%
*- File /root/Targets/finboxio-nock/node_modules/deep-equal/lib/is_arguments.js. Coverage (Term): 48% Coverage (LOC): 83%
*- File /root/Targets/finboxio-nock/node_modules/json-stringify-safe/stringify.js. Coverage (Term): 14% Coverage (LOC): 27%
*- File /root/Targets/finboxio-nock/node_modules/qs/lib/index.js. Coverage (Term): 98% Coverage (LOC): 100%
*- File /root/Targets/finboxio-nock/node_modules/qs/lib/stringify.js. Coverage (Term): 8% Coverage (LOC): 18%
*- File /root/Targets/finboxio-nock/node_modules/qs/lib/utils.js. Coverage (Term): 12% Coverage (LOC): 18%
*- File /root/Targets/finboxio-nock/node_modules/qs/lib/formats.js. Coverage (Term): 61% Coverage (LOC): 87%
*- File /root/Targets/finboxio-nock/node_modules/qs/lib/parse.js. Coverage (Term): 7% Coverage (LOC): 17%
*- Re-run with EXPOSE_PRINT_COVERAGE=1 to print line by line coverage information
** ExpoSE Finished. 1 paths with 1 errors **
